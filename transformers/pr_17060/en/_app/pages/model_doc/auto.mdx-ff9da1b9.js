import{S as VCt,i as XCt,s as zCt,e as a,k as l,w as F,t as o,M as QCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as WCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as qIr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function HCt(L){let g,v,p,m,u,d,h,Mo,ri,tf,Kr,ti,ai,Lw,af,qe,Xe,ni,Mn,xw,En,Cn,$w,si,wn,kw,li,nf,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ri=a("code"),tf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ti=a("code"),ai=o('"new-model"'),Lw=o(")."),af=l(),qe=a("p"),Xe=o("Likewise, if your "),ni=a("code"),Mn=o("NewModel"),xw=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),$w=o(`, make sure its
`),si=a("code"),wn=o("config_class"),kw=o(` attribute is set to the same class you use when registering the model (here
`),li=a("code"),nf=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var X9=s(p);m=r(X9,"NewModelConfig"),X9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ii=s(d);h=r(ii,"PretrainedConfig"),ii.forEach(t),Mo=r(Ae,`, make sure its
`),ri=n(Ae,"CODE",{});var z9=s(ri);tf=r(z9,"model_type"),z9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ti=n(Ae,"CODE",{});var Q9=s(ti);ai=r(Q9,'"new-model"'),Q9.forEach(t),Lw=r(Ae,")."),Ae.forEach(t),af=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ni=n(Eo,"CODE",{});var Fa=s(ni);Mn=r(Fa,"NewModel"),Fa.forEach(t),xw=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var W9=s(En);Cn=r(W9,"PreTrainedModel"),W9.forEach(t),$w=r(Eo,`, make sure its
`),si=n(Eo,"CODE",{});var sf=s(si);wn=r(sf,"config_class"),sf.forEach(t),kw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),li=n(Eo,"CODE",{});var H9=s(li);nf=r(H9,"NewModelConfig"),H9.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ri),e(ri,tf),e(g,Kr),e(g,ti),e(ti,ai),e(g,Lw),b(ze,af,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ni),e(ni,Mn),e(qe,xw),e(qe,En),e(En,Cn),e(qe,$w),e(qe,si),e(si,wn),e(qe,kw),e(qe,li),e(li,nf),e(qe,va)},d(ze){ze&&t(g),ze&&t(af),ze&&t(qe)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function e3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(L){let g,v,p,m,u,d,h,Mo,ri,tf,Kr,ti,ai,Lw,af,qe,Xe,ni,Mn,xw,En,Cn,$w,si,wn,kw,li,nf,va,ze,Ae,X9,ii,z9,Q9,Eo,Fa,W9,sf,H9,ZNe,WBe,di,lf,EZ,Sw,eje,CZ,oje,HBe,An,rje,wZ,tje,aje,AZ,nje,sje,UBe,Rw,JBe,U9,lje,YBe,df,KBe,ci,cf,yZ,Bw,ije,LZ,dje,ZBe,Co,Pw,cje,Iw,fje,J9,mje,gje,hje,qw,pje,xZ,uje,_je,bje,Mr,Nw,vje,$Z,Fje,Tje,fi,Mje,kZ,Eje,Cje,SZ,wje,Aje,yje,A,ff,RZ,Lje,xje,Y9,$je,kje,Sje,mf,BZ,Rje,Bje,K9,Pje,Ije,qje,gf,PZ,Nje,jje,Z9,Dje,Gje,Oje,hf,IZ,Vje,Xje,e$,zje,Qje,Wje,pf,qZ,Hje,Uje,o$,Jje,Yje,Kje,uf,NZ,Zje,eDe,r$,oDe,rDe,tDe,_f,jZ,aDe,nDe,t$,sDe,lDe,iDe,bf,DZ,dDe,cDe,a$,fDe,mDe,gDe,vf,GZ,hDe,pDe,n$,uDe,_De,bDe,Ff,OZ,vDe,FDe,s$,TDe,MDe,EDe,Tf,VZ,CDe,wDe,l$,ADe,yDe,LDe,Mf,XZ,xDe,$De,i$,kDe,SDe,RDe,Ef,zZ,BDe,PDe,d$,IDe,qDe,NDe,Cf,QZ,jDe,DDe,c$,GDe,ODe,VDe,wf,WZ,XDe,zDe,f$,QDe,WDe,HDe,Af,HZ,UDe,JDe,m$,YDe,KDe,ZDe,yf,UZ,eGe,oGe,g$,rGe,tGe,aGe,Lf,JZ,nGe,sGe,h$,lGe,iGe,dGe,xf,YZ,cGe,fGe,p$,mGe,gGe,hGe,$f,KZ,pGe,uGe,u$,_Ge,bGe,vGe,kf,ZZ,FGe,TGe,_$,MGe,EGe,CGe,Sf,eee,wGe,AGe,b$,yGe,LGe,xGe,Rf,oee,$Ge,kGe,v$,SGe,RGe,BGe,Bf,ree,PGe,IGe,F$,qGe,NGe,jGe,Pf,tee,DGe,GGe,T$,OGe,VGe,XGe,If,aee,zGe,QGe,M$,WGe,HGe,UGe,qf,nee,JGe,YGe,E$,KGe,ZGe,eOe,Nf,see,oOe,rOe,C$,tOe,aOe,nOe,jf,lee,sOe,lOe,w$,iOe,dOe,cOe,Df,iee,fOe,mOe,A$,gOe,hOe,pOe,Gf,dee,uOe,_Oe,y$,bOe,vOe,FOe,Of,cee,TOe,MOe,L$,EOe,COe,wOe,Vf,fee,AOe,yOe,x$,LOe,xOe,$Oe,Xf,mee,kOe,SOe,$$,ROe,BOe,POe,zf,gee,IOe,qOe,k$,NOe,jOe,DOe,Qf,hee,GOe,OOe,S$,VOe,XOe,zOe,Wf,pee,QOe,WOe,R$,HOe,UOe,JOe,Hf,uee,YOe,KOe,B$,ZOe,eVe,oVe,Uf,_ee,rVe,tVe,P$,aVe,nVe,sVe,Jf,bee,lVe,iVe,I$,dVe,cVe,fVe,Yf,vee,mVe,gVe,q$,hVe,pVe,uVe,Kf,Fee,_Ve,bVe,N$,vVe,FVe,TVe,Zf,Tee,MVe,EVe,j$,CVe,wVe,AVe,em,Mee,yVe,LVe,D$,xVe,$Ve,kVe,om,Eee,SVe,RVe,G$,BVe,PVe,IVe,rm,Cee,qVe,NVe,O$,jVe,DVe,GVe,tm,wee,OVe,VVe,V$,XVe,zVe,QVe,am,Aee,WVe,HVe,X$,UVe,JVe,YVe,nm,yee,KVe,ZVe,z$,eXe,oXe,rXe,sm,Lee,tXe,aXe,Q$,nXe,sXe,lXe,lm,xee,iXe,dXe,W$,cXe,fXe,mXe,im,$ee,gXe,hXe,H$,pXe,uXe,_Xe,dm,kee,bXe,vXe,U$,FXe,TXe,MXe,cm,See,EXe,CXe,J$,wXe,AXe,yXe,fm,Ree,LXe,xXe,Y$,$Xe,kXe,SXe,mm,Bee,RXe,BXe,K$,PXe,IXe,qXe,gm,Pee,NXe,jXe,Z$,DXe,GXe,OXe,hm,Iee,VXe,XXe,ek,zXe,QXe,WXe,pm,qee,HXe,UXe,ok,JXe,YXe,KXe,um,Nee,ZXe,eze,rk,oze,rze,tze,_m,jee,aze,nze,tk,sze,lze,ize,bm,Dee,dze,cze,ak,fze,mze,gze,vm,Gee,hze,pze,nk,uze,_ze,bze,Fm,Oee,vze,Fze,sk,Tze,Mze,Eze,Tm,Vee,Cze,wze,lk,Aze,yze,Lze,Mm,Xee,xze,$ze,ik,kze,Sze,Rze,Em,zee,Bze,Pze,dk,Ize,qze,Nze,Cm,Qee,jze,Dze,ck,Gze,Oze,Vze,wm,Wee,Xze,zze,fk,Qze,Wze,Hze,Am,Hee,Uze,Jze,mk,Yze,Kze,Zze,ym,Uee,eQe,oQe,gk,rQe,tQe,aQe,Lm,Jee,nQe,sQe,hk,lQe,iQe,dQe,xm,Yee,cQe,fQe,pk,mQe,gQe,hQe,$m,Kee,pQe,uQe,uk,_Qe,bQe,vQe,km,Zee,FQe,TQe,_k,MQe,EQe,CQe,Sm,eoe,wQe,AQe,bk,yQe,LQe,xQe,Rm,ooe,$Qe,kQe,vk,SQe,RQe,BQe,Bm,roe,PQe,IQe,Fk,qQe,NQe,jQe,Pm,toe,DQe,GQe,Tk,OQe,VQe,XQe,Im,aoe,zQe,QQe,Mk,WQe,HQe,UQe,qm,noe,JQe,YQe,Ek,KQe,ZQe,eWe,Nm,soe,oWe,rWe,Ck,tWe,aWe,nWe,jm,loe,sWe,lWe,wk,iWe,dWe,cWe,Dm,ioe,fWe,mWe,Ak,gWe,hWe,pWe,Gm,doe,uWe,_We,yk,bWe,vWe,FWe,Om,coe,TWe,MWe,Lk,EWe,CWe,wWe,Vm,foe,AWe,yWe,xk,LWe,xWe,$We,Xm,moe,kWe,SWe,$k,RWe,BWe,PWe,zm,goe,IWe,qWe,kk,NWe,jWe,DWe,Qm,hoe,GWe,OWe,Sk,VWe,XWe,zWe,Wm,poe,QWe,WWe,Rk,HWe,UWe,JWe,Hm,uoe,YWe,KWe,Bk,ZWe,eHe,oHe,Um,_oe,rHe,tHe,Pk,aHe,nHe,sHe,Jm,boe,lHe,iHe,Ik,dHe,cHe,fHe,Ym,voe,mHe,gHe,qk,hHe,pHe,uHe,Km,Foe,_He,bHe,Nk,vHe,FHe,THe,Zm,Toe,MHe,EHe,jk,CHe,wHe,AHe,eg,Moe,yHe,LHe,Dk,xHe,$He,kHe,og,Eoe,SHe,RHe,Gk,BHe,PHe,IHe,rg,Coe,qHe,NHe,Ok,jHe,DHe,GHe,tg,woe,OHe,VHe,Vk,XHe,zHe,QHe,ag,Aoe,WHe,HHe,Xk,UHe,JHe,YHe,ng,yoe,KHe,ZHe,zk,eUe,oUe,rUe,sg,Loe,tUe,aUe,Qk,nUe,sUe,lUe,lg,iUe,ig,jw,dUe,xoe,cUe,ePe,mi,dg,$oe,Dw,fUe,koe,mUe,oPe,wo,Gw,gUe,Ow,hUe,Wk,pUe,uUe,_Ue,Vw,bUe,Soe,vUe,FUe,TUe,Er,Xw,MUe,Roe,EUe,CUe,Ta,wUe,Boe,AUe,yUe,Poe,LUe,xUe,Ioe,$Ue,kUe,SUe,k,yn,qoe,RUe,BUe,Hk,PUe,IUe,Uk,qUe,NUe,jUe,Ln,Noe,DUe,GUe,Jk,OUe,VUe,Yk,XUe,zUe,QUe,xn,joe,WUe,HUe,Kk,UUe,JUe,Zk,YUe,KUe,ZUe,cg,Doe,eJe,oJe,eS,rJe,tJe,aJe,$n,Goe,nJe,sJe,oS,lJe,iJe,rS,dJe,cJe,fJe,fg,Ooe,mJe,gJe,tS,hJe,pJe,uJe,mg,Voe,_Je,bJe,aS,vJe,FJe,TJe,gg,Xoe,MJe,EJe,nS,CJe,wJe,AJe,kn,zoe,yJe,LJe,sS,xJe,$Je,lS,kJe,SJe,RJe,Sn,Qoe,BJe,PJe,iS,IJe,qJe,dS,NJe,jJe,DJe,Rn,Woe,GJe,OJe,cS,VJe,XJe,fS,zJe,QJe,WJe,hg,Hoe,HJe,UJe,mS,JJe,YJe,KJe,pg,Uoe,ZJe,eYe,gS,oYe,rYe,tYe,Bn,Joe,aYe,nYe,hS,sYe,lYe,pS,iYe,dYe,cYe,ug,Yoe,fYe,mYe,uS,gYe,hYe,pYe,Pn,Koe,uYe,_Ye,_S,bYe,vYe,bS,FYe,TYe,MYe,In,Zoe,EYe,CYe,vS,wYe,AYe,FS,yYe,LYe,xYe,qn,ere,$Ye,kYe,TS,SYe,RYe,MS,BYe,PYe,IYe,_g,ore,qYe,NYe,ES,jYe,DYe,GYe,Nn,rre,OYe,VYe,CS,XYe,zYe,wS,QYe,WYe,HYe,jn,tre,UYe,JYe,AS,YYe,KYe,yS,ZYe,eKe,oKe,Dn,are,rKe,tKe,LS,aKe,nKe,xS,sKe,lKe,iKe,Gn,nre,dKe,cKe,$S,fKe,mKe,kS,gKe,hKe,pKe,On,sre,uKe,_Ke,SS,bKe,vKe,RS,FKe,TKe,MKe,Vn,lre,EKe,CKe,BS,wKe,AKe,PS,yKe,LKe,xKe,bg,ire,$Ke,kKe,IS,SKe,RKe,BKe,Xn,dre,PKe,IKe,qS,qKe,NKe,NS,jKe,DKe,GKe,vg,cre,OKe,VKe,jS,XKe,zKe,QKe,zn,fre,WKe,HKe,DS,UKe,JKe,GS,YKe,KKe,ZKe,Qn,mre,eZe,oZe,OS,rZe,tZe,VS,aZe,nZe,sZe,Wn,gre,lZe,iZe,XS,dZe,cZe,zS,fZe,mZe,gZe,Hn,hre,hZe,pZe,QS,uZe,_Ze,WS,bZe,vZe,FZe,Un,pre,TZe,MZe,HS,EZe,CZe,US,wZe,AZe,yZe,Fg,ure,LZe,xZe,JS,$Ze,kZe,SZe,Jn,_re,RZe,BZe,YS,PZe,IZe,KS,qZe,NZe,jZe,Yn,bre,DZe,GZe,ZS,OZe,VZe,eR,XZe,zZe,QZe,Kn,vre,WZe,HZe,oR,UZe,JZe,rR,YZe,KZe,ZZe,Zn,Fre,eeo,oeo,tR,reo,teo,aR,aeo,neo,seo,es,Tre,leo,ieo,nR,deo,ceo,sR,feo,meo,geo,os,Mre,heo,peo,lR,ueo,_eo,iR,beo,veo,Feo,rs,Ere,Teo,Meo,dR,Eeo,Ceo,cR,weo,Aeo,yeo,Tg,Cre,Leo,xeo,fR,$eo,keo,Seo,ts,wre,Reo,Beo,mR,Peo,Ieo,gR,qeo,Neo,jeo,Mg,Are,Deo,Geo,hR,Oeo,Veo,Xeo,Eg,yre,zeo,Qeo,pR,Weo,Heo,Ueo,as,Lre,Jeo,Yeo,uR,Keo,Zeo,_R,eoo,ooo,roo,ns,xre,too,aoo,bR,noo,soo,vR,loo,ioo,doo,ss,$re,coo,foo,FR,moo,goo,TR,hoo,poo,uoo,Cg,kre,_oo,boo,MR,voo,Foo,Too,ls,Sre,Moo,Eoo,ER,Coo,woo,CR,Aoo,yoo,Loo,is,Rre,xoo,$oo,wR,koo,Soo,AR,Roo,Boo,Poo,ds,Bre,Ioo,qoo,yR,Noo,joo,LR,Doo,Goo,Ooo,cs,Pre,Voo,Xoo,xR,zoo,Qoo,$R,Woo,Hoo,Uoo,fs,Ire,Joo,Yoo,kR,Koo,Zoo,SR,ero,oro,rro,ms,qre,tro,aro,RR,nro,sro,BR,lro,iro,dro,wg,Nre,cro,fro,PR,mro,gro,hro,Ag,jre,pro,uro,IR,_ro,bro,vro,yg,Dre,Fro,Tro,qR,Mro,Ero,Cro,Lg,Gre,wro,Aro,NR,yro,Lro,xro,gs,Ore,$ro,kro,jR,Sro,Rro,DR,Bro,Pro,Iro,xg,Vre,qro,Nro,GR,jro,Dro,Gro,hs,Xre,Oro,Vro,OR,Xro,zro,VR,Qro,Wro,Hro,ps,zre,Uro,Jro,XR,Yro,Kro,zR,Zro,eto,oto,us,Qre,rto,tto,QR,ato,nto,WR,sto,lto,ito,_s,Wre,dto,cto,HR,fto,mto,UR,gto,hto,pto,bs,Hre,uto,_to,JR,bto,vto,YR,Fto,Tto,Mto,vs,Ure,Eto,Cto,KR,wto,Ato,ZR,yto,Lto,xto,$g,Jre,$to,kto,eB,Sto,Rto,Bto,kg,Yre,Pto,Ito,oB,qto,Nto,jto,Fs,Kre,Dto,Gto,rB,Oto,Vto,tB,Xto,zto,Qto,Ts,Zre,Wto,Hto,aB,Uto,Jto,nB,Yto,Kto,Zto,Ms,ete,eao,oao,sB,rao,tao,lB,aao,nao,sao,Sg,ote,lao,iao,iB,dao,cao,fao,Rg,rte,mao,gao,dB,hao,pao,uao,Bg,tte,_ao,bao,cB,vao,Fao,Tao,Es,ate,Mao,Eao,fB,Cao,wao,mB,Aao,yao,Lao,Pg,nte,xao,$ao,gB,kao,Sao,Rao,Ig,ste,Bao,Pao,hB,Iao,qao,Nao,Cs,lte,jao,Dao,pB,Gao,Oao,uB,Vao,Xao,zao,qg,ite,Qao,Wao,_B,Hao,Uao,Jao,Ng,dte,Yao,Kao,bB,Zao,eno,ono,ws,cte,rno,tno,vB,ano,nno,FB,sno,lno,ino,As,fte,dno,cno,TB,fno,mno,MB,gno,hno,pno,ys,mte,uno,_no,EB,bno,vno,CB,Fno,Tno,Mno,Ls,gte,Eno,Cno,wB,wno,Ano,AB,yno,Lno,xno,jg,$no,Dg,zw,kno,hte,Sno,rPe,gi,Gg,pte,Qw,Rno,ute,Bno,tPe,Ao,Ww,Pno,Hw,Ino,yB,qno,Nno,jno,Uw,Dno,_te,Gno,Ono,Vno,Qe,Jw,Xno,bte,zno,Qno,Ma,Wno,vte,Hno,Uno,Fte,Jno,Yno,Tte,Kno,Zno,eso,oe,Og,Mte,oso,rso,LB,tso,aso,nso,Vg,Ete,sso,lso,xB,iso,dso,cso,Xg,Cte,fso,mso,$B,gso,hso,pso,zg,wte,uso,_so,kB,bso,vso,Fso,Qg,Ate,Tso,Mso,SB,Eso,Cso,wso,Wg,yte,Aso,yso,RB,Lso,xso,$so,Hg,Lte,kso,Sso,BB,Rso,Bso,Pso,Ug,xte,Iso,qso,PB,Nso,jso,Dso,Jg,$te,Gso,Oso,IB,Vso,Xso,zso,Yg,kte,Qso,Wso,qB,Hso,Uso,Jso,Kg,Ste,Yso,Kso,NB,Zso,elo,olo,Zg,Rte,rlo,tlo,jB,alo,nlo,slo,eh,Bte,llo,ilo,DB,dlo,clo,flo,oh,Pte,mlo,glo,GB,hlo,plo,ulo,rh,Ite,_lo,blo,OB,vlo,Flo,Tlo,th,qte,Mlo,Elo,VB,Clo,wlo,Alo,ah,Nte,ylo,Llo,XB,xlo,$lo,klo,nh,jte,Slo,Rlo,zB,Blo,Plo,Ilo,sh,Dte,qlo,Nlo,QB,jlo,Dlo,Glo,lh,Gte,Olo,Vlo,WB,Xlo,zlo,Qlo,ih,Ote,Wlo,Hlo,HB,Ulo,Jlo,Ylo,dh,Vte,Klo,Zlo,UB,eio,oio,rio,ch,Xte,tio,aio,JB,nio,sio,lio,fh,zte,iio,dio,YB,cio,fio,mio,mh,Qte,gio,hio,KB,pio,uio,_io,gh,bio,hh,vio,ph,Yw,Fio,Wte,Tio,aPe,hi,uh,Hte,Kw,Mio,Ute,Eio,nPe,yo,Zw,Cio,eA,wio,ZB,Aio,yio,Lio,oA,xio,Jte,$io,kio,Sio,We,rA,Rio,Yte,Bio,Pio,pi,Iio,Kte,qio,Nio,Zte,jio,Dio,Gio,be,_h,eae,Oio,Vio,eP,Xio,zio,Qio,bh,oae,Wio,Hio,oP,Uio,Jio,Yio,vh,rae,Kio,Zio,rP,edo,odo,rdo,Fh,tae,tdo,ado,tP,ndo,sdo,ldo,Th,aae,ido,ddo,aP,cdo,fdo,mdo,Mh,nae,gdo,hdo,nP,pdo,udo,_do,Eh,sae,bdo,vdo,sP,Fdo,Tdo,Mdo,Ch,lae,Edo,Cdo,lP,wdo,Ado,ydo,wh,iae,Ldo,xdo,iP,$do,kdo,Sdo,Ah,dae,Rdo,Bdo,dP,Pdo,Ido,qdo,yh,cae,Ndo,jdo,cP,Ddo,Gdo,Odo,Lh,fae,Vdo,Xdo,fP,zdo,Qdo,Wdo,xh,mae,Hdo,Udo,mP,Jdo,Ydo,Kdo,$h,gae,Zdo,eco,gP,oco,rco,tco,kh,hae,aco,nco,hP,sco,lco,ico,Sh,dco,Rh,cco,Bh,tA,fco,pae,mco,sPe,ui,Ph,uae,aA,gco,_ae,hco,lPe,Lo,nA,pco,_i,uco,pP,_co,bco,uP,vco,Fco,Tco,sA,Mco,bae,Eco,Cco,wco,Zr,lA,Aco,vae,yco,Lco,bi,xco,Fae,$co,kco,_P,Sco,Rco,Bco,Ih,Pco,He,iA,Ico,Tae,qco,Nco,Ea,jco,Mae,Dco,Gco,Eae,Oco,Vco,Cae,Xco,zco,Qco,x,qh,wae,Wco,Hco,bP,Uco,Jco,Yco,Nh,Aae,Kco,Zco,vP,efo,ofo,rfo,jh,yae,tfo,afo,FP,nfo,sfo,lfo,Dh,Lae,ifo,dfo,TP,cfo,ffo,mfo,Gh,xae,gfo,hfo,MP,pfo,ufo,_fo,Oh,$ae,bfo,vfo,EP,Ffo,Tfo,Mfo,Vh,kae,Efo,Cfo,CP,wfo,Afo,yfo,Xh,Sae,Lfo,xfo,wP,$fo,kfo,Sfo,zh,Rae,Rfo,Bfo,AP,Pfo,Ifo,qfo,Qh,Bae,Nfo,jfo,yP,Dfo,Gfo,Ofo,Wh,Pae,Vfo,Xfo,LP,zfo,Qfo,Wfo,Hh,Iae,Hfo,Ufo,xP,Jfo,Yfo,Kfo,Uh,qae,Zfo,emo,$P,omo,rmo,tmo,Jh,Nae,amo,nmo,kP,smo,lmo,imo,Yh,jae,dmo,cmo,SP,fmo,mmo,gmo,Kh,Dae,hmo,pmo,RP,umo,_mo,bmo,Zh,Gae,vmo,Fmo,BP,Tmo,Mmo,Emo,ep,Oae,Cmo,wmo,PP,Amo,ymo,Lmo,op,Vae,xmo,$mo,IP,kmo,Smo,Rmo,rp,Xae,Bmo,Pmo,qP,Imo,qmo,Nmo,tp,zae,jmo,Dmo,NP,Gmo,Omo,Vmo,ap,Qae,Xmo,zmo,jP,Qmo,Wmo,Hmo,np,Wae,Umo,Jmo,DP,Ymo,Kmo,Zmo,sp,Hae,ego,ogo,GP,rgo,tgo,ago,lp,Uae,ngo,sgo,OP,lgo,igo,dgo,ip,Jae,cgo,fgo,VP,mgo,ggo,hgo,dp,Yae,pgo,ugo,XP,_go,bgo,vgo,cp,Kae,Fgo,Tgo,zP,Mgo,Ego,Cgo,fp,Zae,wgo,Ago,QP,ygo,Lgo,xgo,mp,ene,$go,kgo,WP,Sgo,Rgo,Bgo,xs,one,Pgo,Igo,HP,qgo,Ngo,UP,jgo,Dgo,Ggo,gp,rne,Ogo,Vgo,JP,Xgo,zgo,Qgo,hp,tne,Wgo,Hgo,YP,Ugo,Jgo,Ygo,pp,ane,Kgo,Zgo,KP,eho,oho,rho,up,nne,tho,aho,ZP,nho,sho,lho,_p,sne,iho,dho,eI,cho,fho,mho,bp,lne,gho,hho,oI,pho,uho,_ho,vp,ine,bho,vho,rI,Fho,Tho,Mho,Fp,dne,Eho,Cho,tI,who,Aho,yho,Tp,cne,Lho,xho,aI,$ho,kho,Sho,Mp,fne,Rho,Bho,nI,Pho,Iho,qho,Ep,mne,Nho,jho,sI,Dho,Gho,Oho,Cp,gne,Vho,Xho,lI,zho,Qho,Who,wp,hne,Hho,Uho,iI,Jho,Yho,Kho,Ap,pne,Zho,epo,dI,opo,rpo,tpo,yp,une,apo,npo,cI,spo,lpo,ipo,Lp,_ne,dpo,cpo,fI,fpo,mpo,gpo,xp,bne,hpo,ppo,mI,upo,_po,bpo,$p,vne,vpo,Fpo,gI,Tpo,Mpo,Epo,kp,Fne,Cpo,wpo,hI,Apo,ypo,Lpo,Sp,Tne,xpo,$po,pI,kpo,Spo,Rpo,Rp,Mne,Bpo,Ppo,uI,Ipo,qpo,Npo,Bp,Ene,jpo,Dpo,_I,Gpo,Opo,Vpo,Pp,Cne,Xpo,zpo,bI,Qpo,Wpo,Hpo,Ip,wne,Upo,Jpo,vI,Ypo,Kpo,Zpo,qp,Ane,euo,ouo,FI,ruo,tuo,auo,Np,yne,nuo,suo,TI,luo,iuo,duo,jp,Lne,cuo,fuo,MI,muo,guo,huo,Dp,xne,puo,uuo,EI,_uo,buo,vuo,Gp,$ne,Fuo,Tuo,CI,Muo,Euo,Cuo,Op,kne,wuo,Auo,wI,yuo,Luo,xuo,Vp,Sne,$uo,kuo,AI,Suo,Ruo,Buo,Xp,Rne,Puo,Iuo,yI,quo,Nuo,juo,zp,Bne,Duo,Guo,LI,Ouo,Vuo,Xuo,Qp,Pne,zuo,Quo,xI,Wuo,Huo,Uuo,Wp,Ine,Juo,Yuo,$I,Kuo,Zuo,e_o,Hp,qne,o_o,r_o,kI,t_o,a_o,n_o,Up,Nne,s_o,l_o,SI,i_o,d_o,c_o,Jp,jne,f_o,m_o,RI,g_o,h_o,p_o,Yp,Dne,u_o,__o,BI,b_o,v_o,F_o,Kp,Gne,T_o,M_o,PI,E_o,C_o,w_o,Zp,One,A_o,y_o,II,L_o,x_o,$_o,eu,Vne,k_o,S_o,qI,R_o,B_o,P_o,ou,Xne,I_o,q_o,NI,N_o,j_o,D_o,ru,zne,G_o,O_o,jI,V_o,X_o,z_o,tu,Qne,Q_o,W_o,DI,H_o,U_o,J_o,au,Wne,Y_o,K_o,GI,Z_o,e0o,o0o,nu,Hne,r0o,t0o,OI,a0o,n0o,s0o,su,Une,l0o,i0o,VI,d0o,c0o,f0o,lu,Jne,m0o,g0o,XI,h0o,p0o,u0o,iu,Yne,_0o,b0o,zI,v0o,F0o,T0o,du,Kne,M0o,E0o,QI,C0o,w0o,A0o,cu,Zne,y0o,L0o,WI,x0o,$0o,k0o,fu,ese,S0o,R0o,HI,B0o,P0o,I0o,mu,ose,q0o,N0o,UI,j0o,D0o,G0o,gu,rse,O0o,V0o,JI,X0o,z0o,Q0o,hu,tse,W0o,H0o,YI,U0o,J0o,Y0o,pu,ase,K0o,Z0o,KI,e1o,o1o,r1o,uu,nse,t1o,a1o,ZI,n1o,s1o,l1o,_u,sse,i1o,d1o,eq,c1o,f1o,m1o,bu,lse,g1o,h1o,oq,p1o,u1o,_1o,vu,ise,b1o,v1o,rq,F1o,T1o,M1o,Fu,dse,E1o,C1o,tq,w1o,A1o,y1o,Tu,cse,L1o,x1o,aq,$1o,k1o,S1o,Mu,fse,R1o,B1o,nq,P1o,I1o,q1o,Eu,mse,N1o,j1o,sq,D1o,G1o,O1o,Cu,V1o,gse,X1o,z1o,hse,Q1o,W1o,wu,iPe,vi,Au,pse,dA,H1o,use,U1o,dPe,xo,cA,J1o,Fi,Y1o,lq,K1o,Z1o,iq,ebo,obo,rbo,fA,tbo,_se,abo,nbo,sbo,et,mA,lbo,bse,ibo,dbo,Ti,cbo,vse,fbo,mbo,dq,gbo,hbo,pbo,yu,ubo,Ue,gA,_bo,Fse,bbo,vbo,Ca,Fbo,Tse,Tbo,Mbo,Mse,Ebo,Cbo,Ese,wbo,Abo,ybo,O,Lu,Cse,Lbo,xbo,cq,$bo,kbo,Sbo,xu,wse,Rbo,Bbo,fq,Pbo,Ibo,qbo,$u,Ase,Nbo,jbo,mq,Dbo,Gbo,Obo,ku,yse,Vbo,Xbo,gq,zbo,Qbo,Wbo,Su,Lse,Hbo,Ubo,hq,Jbo,Ybo,Kbo,Ru,xse,Zbo,e2o,pq,o2o,r2o,t2o,Bu,$se,a2o,n2o,uq,s2o,l2o,i2o,Pu,kse,d2o,c2o,_q,f2o,m2o,g2o,Iu,Sse,h2o,p2o,bq,u2o,_2o,b2o,qu,Rse,v2o,F2o,vq,T2o,M2o,E2o,Nu,Bse,C2o,w2o,Fq,A2o,y2o,L2o,ju,Pse,x2o,$2o,Tq,k2o,S2o,R2o,Du,Ise,B2o,P2o,Mq,I2o,q2o,N2o,Gu,qse,j2o,D2o,Eq,G2o,O2o,V2o,Ou,Nse,X2o,z2o,Cq,Q2o,W2o,H2o,Vu,jse,U2o,J2o,wq,Y2o,K2o,Z2o,Xu,Dse,evo,ovo,Aq,rvo,tvo,avo,zu,Gse,nvo,svo,yq,lvo,ivo,dvo,Qu,Ose,cvo,fvo,Lq,mvo,gvo,hvo,Wu,Vse,pvo,uvo,xq,_vo,bvo,vvo,Hu,Xse,Fvo,Tvo,$q,Mvo,Evo,Cvo,Uu,zse,wvo,Avo,kq,yvo,Lvo,xvo,Ju,Qse,$vo,kvo,Sq,Svo,Rvo,Bvo,Yu,Wse,Pvo,Ivo,Rq,qvo,Nvo,jvo,Ku,Hse,Dvo,Gvo,Bq,Ovo,Vvo,Xvo,Zu,Use,zvo,Qvo,Pq,Wvo,Hvo,Uvo,e_,Jse,Jvo,Yvo,Iq,Kvo,Zvo,eFo,o_,Yse,oFo,rFo,qq,tFo,aFo,nFo,r_,Kse,sFo,lFo,Nq,iFo,dFo,cFo,t_,Zse,fFo,mFo,jq,gFo,hFo,pFo,a_,ele,uFo,_Fo,Dq,bFo,vFo,FFo,n_,ole,TFo,MFo,Gq,EFo,CFo,wFo,s_,rle,AFo,yFo,Oq,LFo,xFo,$Fo,l_,tle,kFo,SFo,Vq,RFo,BFo,PFo,i_,ale,IFo,qFo,Xq,NFo,jFo,DFo,d_,nle,GFo,OFo,zq,VFo,XFo,zFo,c_,sle,QFo,WFo,Qq,HFo,UFo,JFo,f_,lle,YFo,KFo,Wq,ZFo,e6o,o6o,m_,ile,r6o,t6o,Hq,a6o,n6o,s6o,g_,l6o,dle,i6o,d6o,cle,c6o,f6o,h_,cPe,Mi,p_,fle,hA,m6o,mle,g6o,fPe,$o,pA,h6o,Ei,p6o,Uq,u6o,_6o,Jq,b6o,v6o,F6o,uA,T6o,gle,M6o,E6o,C6o,ot,_A,w6o,hle,A6o,y6o,Ci,L6o,ple,x6o,$6o,Yq,k6o,S6o,R6o,u_,B6o,Je,bA,P6o,ule,I6o,q6o,wa,N6o,_le,j6o,D6o,ble,G6o,O6o,vle,V6o,X6o,z6o,z,__,Fle,Q6o,W6o,Kq,H6o,U6o,J6o,b_,Tle,Y6o,K6o,Zq,Z6o,eTo,oTo,v_,Mle,rTo,tTo,eN,aTo,nTo,sTo,F_,Ele,lTo,iTo,oN,dTo,cTo,fTo,T_,Cle,mTo,gTo,rN,hTo,pTo,uTo,M_,wle,_To,bTo,tN,vTo,FTo,TTo,E_,Ale,MTo,ETo,aN,CTo,wTo,ATo,C_,yle,yTo,LTo,nN,xTo,$To,kTo,w_,Lle,STo,RTo,sN,BTo,PTo,ITo,A_,xle,qTo,NTo,lN,jTo,DTo,GTo,y_,$le,OTo,VTo,iN,XTo,zTo,QTo,L_,kle,WTo,HTo,dN,UTo,JTo,YTo,x_,Sle,KTo,ZTo,cN,e7o,o7o,r7o,$_,Rle,t7o,a7o,fN,n7o,s7o,l7o,k_,Ble,i7o,d7o,mN,c7o,f7o,m7o,S_,Ple,g7o,h7o,gN,p7o,u7o,_7o,R_,Ile,b7o,v7o,hN,F7o,T7o,M7o,B_,qle,E7o,C7o,pN,w7o,A7o,y7o,P_,Nle,L7o,x7o,uN,$7o,k7o,S7o,I_,jle,R7o,B7o,_N,P7o,I7o,q7o,q_,Dle,N7o,j7o,bN,D7o,G7o,O7o,N_,Gle,V7o,X7o,vN,z7o,Q7o,W7o,j_,Ole,H7o,U7o,FN,J7o,Y7o,K7o,D_,Vle,Z7o,eMo,TN,oMo,rMo,tMo,G_,Xle,aMo,nMo,MN,sMo,lMo,iMo,O_,zle,dMo,cMo,EN,fMo,mMo,gMo,V_,Qle,hMo,pMo,CN,uMo,_Mo,bMo,X_,Wle,vMo,FMo,wN,TMo,MMo,EMo,z_,Hle,CMo,wMo,AN,AMo,yMo,LMo,Q_,Ule,xMo,$Mo,yN,kMo,SMo,RMo,W_,Jle,BMo,PMo,LN,IMo,qMo,NMo,H_,Yle,jMo,DMo,xN,GMo,OMo,VMo,U_,Kle,XMo,zMo,$N,QMo,WMo,HMo,J_,Zle,UMo,JMo,kN,YMo,KMo,ZMo,Y_,eie,e4o,o4o,SN,r4o,t4o,a4o,K_,n4o,oie,s4o,l4o,rie,i4o,d4o,Z_,mPe,wi,e0,tie,vA,c4o,aie,f4o,gPe,ko,FA,m4o,Ai,g4o,RN,h4o,p4o,BN,u4o,_4o,b4o,TA,v4o,nie,F4o,T4o,M4o,rt,MA,E4o,sie,C4o,w4o,yi,A4o,lie,y4o,L4o,PN,x4o,$4o,k4o,o0,S4o,Ye,EA,R4o,iie,B4o,P4o,Aa,I4o,die,q4o,N4o,cie,j4o,D4o,fie,G4o,O4o,V4o,Q,r0,mie,X4o,z4o,IN,Q4o,W4o,H4o,t0,gie,U4o,J4o,qN,Y4o,K4o,Z4o,a0,hie,eEo,oEo,NN,rEo,tEo,aEo,n0,pie,nEo,sEo,jN,lEo,iEo,dEo,s0,uie,cEo,fEo,DN,mEo,gEo,hEo,l0,_ie,pEo,uEo,GN,_Eo,bEo,vEo,i0,bie,FEo,TEo,ON,MEo,EEo,CEo,d0,vie,wEo,AEo,VN,yEo,LEo,xEo,c0,Fie,$Eo,kEo,XN,SEo,REo,BEo,f0,Tie,PEo,IEo,zN,qEo,NEo,jEo,m0,Mie,DEo,GEo,QN,OEo,VEo,XEo,g0,Eie,zEo,QEo,WN,WEo,HEo,UEo,h0,Cie,JEo,YEo,HN,KEo,ZEo,e5o,p0,wie,o5o,r5o,UN,t5o,a5o,n5o,u0,Aie,s5o,l5o,JN,i5o,d5o,c5o,_0,yie,f5o,m5o,YN,g5o,h5o,p5o,b0,Lie,u5o,_5o,KN,b5o,v5o,F5o,v0,xie,T5o,M5o,ZN,E5o,C5o,w5o,F0,$ie,A5o,y5o,ej,L5o,x5o,$5o,T0,kie,k5o,S5o,oj,R5o,B5o,P5o,M0,Sie,I5o,q5o,rj,N5o,j5o,D5o,E0,Rie,G5o,O5o,tj,V5o,X5o,z5o,C0,Bie,Q5o,W5o,aj,H5o,U5o,J5o,w0,Pie,Y5o,K5o,nj,Z5o,eCo,oCo,A0,Iie,rCo,tCo,sj,aCo,nCo,sCo,y0,qie,lCo,iCo,lj,dCo,cCo,fCo,L0,Nie,mCo,gCo,ij,hCo,pCo,uCo,x0,jie,_Co,bCo,dj,vCo,FCo,TCo,$0,Die,MCo,ECo,cj,CCo,wCo,ACo,k0,Gie,yCo,LCo,fj,xCo,$Co,kCo,S0,Oie,SCo,RCo,Vie,BCo,PCo,ICo,R0,Xie,qCo,NCo,mj,jCo,DCo,GCo,B0,zie,OCo,VCo,gj,XCo,zCo,QCo,P0,Qie,WCo,HCo,hj,UCo,JCo,YCo,I0,Wie,KCo,ZCo,pj,e3o,o3o,r3o,q0,t3o,Hie,a3o,n3o,Uie,s3o,l3o,N0,hPe,Li,j0,Jie,CA,i3o,Yie,d3o,pPe,So,wA,c3o,xi,f3o,uj,m3o,g3o,_j,h3o,p3o,u3o,AA,_3o,Kie,b3o,v3o,F3o,tt,yA,T3o,Zie,M3o,E3o,$i,C3o,ede,w3o,A3o,bj,y3o,L3o,x3o,D0,$3o,Ke,LA,k3o,ode,S3o,R3o,ya,B3o,rde,P3o,I3o,tde,q3o,N3o,ade,j3o,D3o,G3o,he,G0,nde,O3o,V3o,vj,X3o,z3o,Q3o,O0,sde,W3o,H3o,Fj,U3o,J3o,Y3o,V0,lde,K3o,Z3o,Tj,ewo,owo,rwo,X0,ide,two,awo,Mj,nwo,swo,lwo,z0,dde,iwo,dwo,Ej,cwo,fwo,mwo,Q0,cde,gwo,hwo,Cj,pwo,uwo,_wo,W0,fde,bwo,vwo,wj,Fwo,Two,Mwo,H0,mde,Ewo,Cwo,Aj,wwo,Awo,ywo,U0,gde,Lwo,xwo,yj,$wo,kwo,Swo,J0,hde,Rwo,Bwo,Lj,Pwo,Iwo,qwo,Y0,pde,Nwo,jwo,xj,Dwo,Gwo,Owo,K0,ude,Vwo,Xwo,$j,zwo,Qwo,Wwo,Z0,_de,Hwo,Uwo,kj,Jwo,Ywo,Kwo,e1,bde,Zwo,eAo,Sj,oAo,rAo,tAo,o1,vde,aAo,nAo,Rj,sAo,lAo,iAo,r1,Fde,dAo,cAo,Bj,fAo,mAo,gAo,t1,Tde,hAo,pAo,Pj,uAo,_Ao,bAo,a1,vAo,Mde,FAo,TAo,Ede,MAo,EAo,n1,uPe,ki,s1,Cde,xA,CAo,wde,wAo,_Pe,Ro,$A,AAo,Si,yAo,Ij,LAo,xAo,qj,$Ao,kAo,SAo,kA,RAo,Ade,BAo,PAo,IAo,at,SA,qAo,yde,NAo,jAo,Ri,DAo,Lde,GAo,OAo,Nj,VAo,XAo,zAo,l1,QAo,Ze,RA,WAo,xde,HAo,UAo,La,JAo,$de,YAo,KAo,kde,ZAo,eyo,Sde,oyo,ryo,tyo,q,i1,Rde,ayo,nyo,jj,syo,lyo,iyo,d1,Bde,dyo,cyo,Dj,fyo,myo,gyo,c1,Pde,hyo,pyo,Gj,uyo,_yo,byo,f1,Ide,vyo,Fyo,Oj,Tyo,Myo,Eyo,m1,qde,Cyo,wyo,Vj,Ayo,yyo,Lyo,g1,Nde,xyo,$yo,Xj,kyo,Syo,Ryo,h1,jde,Byo,Pyo,zj,Iyo,qyo,Nyo,p1,Dde,jyo,Dyo,Qj,Gyo,Oyo,Vyo,u1,Gde,Xyo,zyo,Wj,Qyo,Wyo,Hyo,_1,Ode,Uyo,Jyo,Hj,Yyo,Kyo,Zyo,b1,Vde,eLo,oLo,Uj,rLo,tLo,aLo,v1,Xde,nLo,sLo,Jj,lLo,iLo,dLo,F1,zde,cLo,fLo,Yj,mLo,gLo,hLo,T1,Qde,pLo,uLo,Kj,_Lo,bLo,vLo,M1,Wde,FLo,TLo,Zj,MLo,ELo,CLo,E1,Hde,wLo,ALo,eD,yLo,LLo,xLo,C1,Ude,$Lo,kLo,oD,SLo,RLo,BLo,w1,Jde,PLo,ILo,rD,qLo,NLo,jLo,A1,Yde,DLo,GLo,tD,OLo,VLo,XLo,y1,Kde,zLo,QLo,aD,WLo,HLo,ULo,L1,Zde,JLo,YLo,nD,KLo,ZLo,e8o,x1,ece,o8o,r8o,sD,t8o,a8o,n8o,$1,oce,s8o,l8o,lD,i8o,d8o,c8o,k1,rce,f8o,m8o,iD,g8o,h8o,p8o,S1,tce,u8o,_8o,dD,b8o,v8o,F8o,R1,ace,T8o,M8o,cD,E8o,C8o,w8o,B1,nce,A8o,y8o,fD,L8o,x8o,$8o,P1,sce,k8o,S8o,mD,R8o,B8o,P8o,I1,lce,I8o,q8o,gD,N8o,j8o,D8o,q1,ice,G8o,O8o,hD,V8o,X8o,z8o,N1,dce,Q8o,W8o,pD,H8o,U8o,J8o,j1,cce,Y8o,K8o,uD,Z8o,exo,oxo,D1,fce,rxo,txo,_D,axo,nxo,sxo,G1,mce,lxo,ixo,bD,dxo,cxo,fxo,O1,gce,mxo,gxo,vD,hxo,pxo,uxo,V1,hce,_xo,bxo,FD,vxo,Fxo,Txo,X1,pce,Mxo,Exo,TD,Cxo,wxo,Axo,z1,uce,yxo,Lxo,MD,xxo,$xo,kxo,Q1,_ce,Sxo,Rxo,ED,Bxo,Pxo,Ixo,W1,bce,qxo,Nxo,CD,jxo,Dxo,Gxo,H1,vce,Oxo,Vxo,wD,Xxo,zxo,Qxo,U1,Fce,Wxo,Hxo,AD,Uxo,Jxo,Yxo,J1,Tce,Kxo,Zxo,yD,e9o,o9o,r9o,Y1,Mce,t9o,a9o,LD,n9o,s9o,l9o,K1,Ece,i9o,d9o,xD,c9o,f9o,m9o,Z1,Cce,g9o,h9o,$D,p9o,u9o,_9o,eb,wce,b9o,v9o,kD,F9o,T9o,M9o,ob,Ace,E9o,C9o,SD,w9o,A9o,y9o,rb,L9o,yce,x9o,$9o,Lce,k9o,S9o,tb,bPe,Bi,ab,xce,BA,R9o,$ce,B9o,vPe,Bo,PA,P9o,Pi,I9o,RD,q9o,N9o,BD,j9o,D9o,G9o,IA,O9o,kce,V9o,X9o,z9o,nt,qA,Q9o,Sce,W9o,H9o,Ii,U9o,Rce,J9o,Y9o,PD,K9o,Z9o,e$o,nb,o$o,eo,NA,r$o,Bce,t$o,a$o,xa,n$o,Pce,s$o,l$o,Ice,i$o,d$o,qce,c$o,f$o,m$o,Y,sb,Nce,g$o,h$o,ID,p$o,u$o,_$o,lb,jce,b$o,v$o,qD,F$o,T$o,M$o,ib,Dce,E$o,C$o,ND,w$o,A$o,y$o,db,Gce,L$o,x$o,jD,$$o,k$o,S$o,cb,Oce,R$o,B$o,DD,P$o,I$o,q$o,fb,Vce,N$o,j$o,GD,D$o,G$o,O$o,mb,Xce,V$o,X$o,OD,z$o,Q$o,W$o,gb,zce,H$o,U$o,VD,J$o,Y$o,K$o,hb,Qce,Z$o,eko,XD,oko,rko,tko,pb,Wce,ako,nko,zD,sko,lko,iko,ub,Hce,dko,cko,QD,fko,mko,gko,_b,Uce,hko,pko,WD,uko,_ko,bko,bb,Jce,vko,Fko,HD,Tko,Mko,Eko,vb,Yce,Cko,wko,UD,Ako,yko,Lko,Fb,Kce,xko,$ko,JD,kko,Sko,Rko,Tb,Zce,Bko,Pko,YD,Iko,qko,Nko,Mb,efe,jko,Dko,KD,Gko,Oko,Vko,Eb,ofe,Xko,zko,ZD,Qko,Wko,Hko,Cb,rfe,Uko,Jko,eG,Yko,Kko,Zko,wb,tfe,eSo,oSo,oG,rSo,tSo,aSo,Ab,afe,nSo,sSo,rG,lSo,iSo,dSo,yb,nfe,cSo,fSo,tG,mSo,gSo,hSo,Lb,sfe,pSo,uSo,aG,_So,bSo,vSo,xb,lfe,FSo,TSo,nG,MSo,ESo,CSo,$b,ife,wSo,ASo,sG,ySo,LSo,xSo,kb,dfe,$So,kSo,lG,SSo,RSo,BSo,Sb,cfe,PSo,ISo,iG,qSo,NSo,jSo,Rb,ffe,DSo,GSo,dG,OSo,VSo,XSo,Bb,zSo,mfe,QSo,WSo,gfe,HSo,USo,Pb,FPe,qi,Ib,hfe,jA,JSo,pfe,YSo,TPe,Po,DA,KSo,Ni,ZSo,cG,eRo,oRo,fG,rRo,tRo,aRo,GA,nRo,ufe,sRo,lRo,iRo,st,OA,dRo,_fe,cRo,fRo,ji,mRo,bfe,gRo,hRo,mG,pRo,uRo,_Ro,qb,bRo,oo,VA,vRo,vfe,FRo,TRo,$a,MRo,Ffe,ERo,CRo,Tfe,wRo,ARo,Mfe,yRo,LRo,xRo,Ur,Nb,Efe,$Ro,kRo,gG,SRo,RRo,BRo,jb,Cfe,PRo,IRo,hG,qRo,NRo,jRo,Db,wfe,DRo,GRo,pG,ORo,VRo,XRo,Gb,Afe,zRo,QRo,uG,WRo,HRo,URo,Ob,yfe,JRo,YRo,_G,KRo,ZRo,eBo,Vb,oBo,Lfe,rBo,tBo,xfe,aBo,nBo,Xb,MPe,Di,zb,$fe,XA,sBo,kfe,lBo,EPe,Io,zA,iBo,Gi,dBo,bG,cBo,fBo,vG,mBo,gBo,hBo,QA,pBo,Sfe,uBo,_Bo,bBo,lt,WA,vBo,Rfe,FBo,TBo,Oi,MBo,Bfe,EBo,CBo,FG,wBo,ABo,yBo,Qb,LBo,ro,HA,xBo,Pfe,$Bo,kBo,ka,SBo,Ife,RBo,BBo,qfe,PBo,IBo,Nfe,qBo,NBo,jBo,W,Wb,jfe,DBo,GBo,TG,OBo,VBo,XBo,Hb,Dfe,zBo,QBo,MG,WBo,HBo,UBo,Ub,Gfe,JBo,YBo,EG,KBo,ZBo,ePo,Jb,Ofe,oPo,rPo,CG,tPo,aPo,nPo,Yb,Vfe,sPo,lPo,wG,iPo,dPo,cPo,Kb,Xfe,fPo,mPo,AG,gPo,hPo,pPo,Zb,zfe,uPo,_Po,yG,bPo,vPo,FPo,e2,Qfe,TPo,MPo,LG,EPo,CPo,wPo,o2,Wfe,APo,yPo,xG,LPo,xPo,$Po,r2,Hfe,kPo,SPo,$G,RPo,BPo,PPo,t2,Ufe,IPo,qPo,kG,NPo,jPo,DPo,a2,Jfe,GPo,OPo,SG,VPo,XPo,zPo,n2,Yfe,QPo,WPo,RG,HPo,UPo,JPo,s2,Kfe,YPo,KPo,BG,ZPo,eIo,oIo,l2,Zfe,rIo,tIo,PG,aIo,nIo,sIo,i2,eme,lIo,iIo,IG,dIo,cIo,fIo,d2,ome,mIo,gIo,qG,hIo,pIo,uIo,c2,rme,_Io,bIo,NG,vIo,FIo,TIo,f2,tme,MIo,EIo,jG,CIo,wIo,AIo,m2,ame,yIo,LIo,DG,xIo,$Io,kIo,g2,nme,SIo,RIo,GG,BIo,PIo,IIo,h2,sme,qIo,NIo,OG,jIo,DIo,GIo,p2,lme,OIo,VIo,VG,XIo,zIo,QIo,u2,ime,WIo,HIo,XG,UIo,JIo,YIo,_2,dme,KIo,ZIo,zG,eqo,oqo,rqo,b2,cme,tqo,aqo,QG,nqo,sqo,lqo,v2,fme,iqo,dqo,WG,cqo,fqo,mqo,F2,mme,gqo,hqo,HG,pqo,uqo,_qo,T2,gme,bqo,vqo,UG,Fqo,Tqo,Mqo,M2,hme,Eqo,Cqo,JG,wqo,Aqo,yqo,E2,pme,Lqo,xqo,YG,$qo,kqo,Sqo,C2,ume,Rqo,Bqo,KG,Pqo,Iqo,qqo,w2,_me,Nqo,jqo,ZG,Dqo,Gqo,Oqo,A2,bme,Vqo,Xqo,eO,zqo,Qqo,Wqo,y2,Hqo,vme,Uqo,Jqo,Fme,Yqo,Kqo,L2,CPe,Vi,x2,Tme,UA,Zqo,Mme,eNo,wPe,qo,JA,oNo,Xi,rNo,oO,tNo,aNo,rO,nNo,sNo,lNo,YA,iNo,Eme,dNo,cNo,fNo,it,KA,mNo,Cme,gNo,hNo,zi,pNo,wme,uNo,_No,tO,bNo,vNo,FNo,$2,TNo,to,ZA,MNo,Ame,ENo,CNo,Sa,wNo,yme,ANo,yNo,Lme,LNo,xNo,xme,$No,kNo,SNo,G,k2,$me,RNo,BNo,aO,PNo,INo,qNo,S2,kme,NNo,jNo,nO,DNo,GNo,ONo,R2,Sme,VNo,XNo,sO,zNo,QNo,WNo,B2,Rme,HNo,UNo,lO,JNo,YNo,KNo,P2,Bme,ZNo,ejo,iO,ojo,rjo,tjo,I2,Pme,ajo,njo,dO,sjo,ljo,ijo,q2,Ime,djo,cjo,cO,fjo,mjo,gjo,N2,qme,hjo,pjo,fO,ujo,_jo,bjo,j2,Nme,vjo,Fjo,mO,Tjo,Mjo,Ejo,D2,jme,Cjo,wjo,gO,Ajo,yjo,Ljo,G2,Dme,xjo,$jo,hO,kjo,Sjo,Rjo,O2,Gme,Bjo,Pjo,pO,Ijo,qjo,Njo,V2,Ome,jjo,Djo,uO,Gjo,Ojo,Vjo,X2,Vme,Xjo,zjo,_O,Qjo,Wjo,Hjo,z2,Xme,Ujo,Jjo,bO,Yjo,Kjo,Zjo,Q2,zme,eDo,oDo,vO,rDo,tDo,aDo,W2,Qme,nDo,sDo,FO,lDo,iDo,dDo,H2,Wme,cDo,fDo,TO,mDo,gDo,hDo,U2,Hme,pDo,uDo,MO,_Do,bDo,vDo,J2,Ume,FDo,TDo,EO,MDo,EDo,CDo,Y2,Jme,wDo,ADo,CO,yDo,LDo,xDo,K2,Yme,$Do,kDo,wO,SDo,RDo,BDo,Z2,Kme,PDo,IDo,AO,qDo,NDo,jDo,ev,Zme,DDo,GDo,yO,ODo,VDo,XDo,ov,ege,zDo,QDo,LO,WDo,HDo,UDo,rv,oge,JDo,YDo,xO,KDo,ZDo,eGo,tv,rge,oGo,rGo,$O,tGo,aGo,nGo,av,tge,sGo,lGo,kO,iGo,dGo,cGo,nv,age,fGo,mGo,SO,gGo,hGo,pGo,sv,nge,uGo,_Go,RO,bGo,vGo,FGo,lv,sge,TGo,MGo,BO,EGo,CGo,wGo,iv,lge,AGo,yGo,PO,LGo,xGo,$Go,dv,ige,kGo,SGo,IO,RGo,BGo,PGo,cv,dge,IGo,qGo,qO,NGo,jGo,DGo,fv,cge,GGo,OGo,NO,VGo,XGo,zGo,mv,fge,QGo,WGo,jO,HGo,UGo,JGo,gv,mge,YGo,KGo,DO,ZGo,eOo,oOo,hv,gge,rOo,tOo,GO,aOo,nOo,sOo,pv,hge,lOo,iOo,OO,dOo,cOo,fOo,uv,pge,mOo,gOo,VO,hOo,pOo,uOo,_v,_Oo,uge,bOo,vOo,_ge,FOo,TOo,bv,APe,Qi,vv,bge,ey,MOo,vge,EOo,yPe,No,oy,COo,Wi,wOo,XO,AOo,yOo,zO,LOo,xOo,$Oo,ry,kOo,Fge,SOo,ROo,BOo,dt,ty,POo,Tge,IOo,qOo,Hi,NOo,Mge,jOo,DOo,QO,GOo,OOo,VOo,Fv,XOo,ao,ay,zOo,Ege,QOo,WOo,Ra,HOo,Cge,UOo,JOo,wge,YOo,KOo,Age,ZOo,eVo,oVo,yge,Tv,Lge,rVo,tVo,WO,aVo,nVo,sVo,Mv,lVo,xge,iVo,dVo,$ge,cVo,fVo,Ev,LPe,Ui,Cv,kge,ny,mVo,Sge,gVo,xPe,jo,sy,hVo,Ji,pVo,HO,uVo,_Vo,UO,bVo,vVo,FVo,ly,TVo,Rge,MVo,EVo,CVo,ct,iy,wVo,Bge,AVo,yVo,Yi,LVo,Pge,xVo,$Vo,JO,kVo,SVo,RVo,wv,BVo,no,dy,PVo,Ige,IVo,qVo,Ba,NVo,qge,jVo,DVo,Nge,GVo,OVo,jge,VVo,XVo,zVo,Fe,Av,Dge,QVo,WVo,YO,HVo,UVo,JVo,yv,Gge,YVo,KVo,KO,ZVo,eXo,oXo,Lv,Oge,rXo,tXo,ZO,aXo,nXo,sXo,$s,Vge,lXo,iXo,eV,dXo,cXo,oV,fXo,mXo,gXo,xv,Xge,hXo,pXo,rV,uXo,_Xo,bXo,ft,zge,vXo,FXo,tV,TXo,MXo,aV,EXo,CXo,nV,wXo,AXo,yXo,$v,Qge,LXo,xXo,sV,$Xo,kXo,SXo,kv,Wge,RXo,BXo,lV,PXo,IXo,qXo,Sv,Hge,NXo,jXo,iV,DXo,GXo,OXo,Rv,Uge,VXo,XXo,dV,zXo,QXo,WXo,Bv,Jge,HXo,UXo,cV,JXo,YXo,KXo,Pv,Yge,ZXo,ezo,fV,ozo,rzo,tzo,Iv,Kge,azo,nzo,mV,szo,lzo,izo,qv,dzo,Zge,czo,fzo,ehe,mzo,gzo,Nv,$Pe,Ki,jv,ohe,cy,hzo,rhe,pzo,kPe,Do,fy,uzo,Zi,_zo,gV,bzo,vzo,hV,Fzo,Tzo,Mzo,my,Ezo,the,Czo,wzo,Azo,mt,gy,yzo,ahe,Lzo,xzo,ed,$zo,nhe,kzo,Szo,pV,Rzo,Bzo,Pzo,Dv,Izo,so,hy,qzo,she,Nzo,jzo,Pa,Dzo,lhe,Gzo,Ozo,ihe,Vzo,Xzo,dhe,zzo,Qzo,Wzo,che,Gv,fhe,Hzo,Uzo,uV,Jzo,Yzo,Kzo,Ov,Zzo,mhe,eQo,oQo,ghe,rQo,tQo,Vv,SPe,od,Xv,hhe,py,aQo,phe,nQo,RPe,Go,uy,sQo,rd,lQo,_V,iQo,dQo,bV,cQo,fQo,mQo,_y,gQo,uhe,hQo,pQo,uQo,gt,by,_Qo,_he,bQo,vQo,td,FQo,bhe,TQo,MQo,vV,EQo,CQo,wQo,zv,AQo,lo,vy,yQo,vhe,LQo,xQo,Ia,$Qo,Fhe,kQo,SQo,The,RQo,BQo,Mhe,PQo,IQo,qQo,Ne,Qv,Ehe,NQo,jQo,FV,DQo,GQo,OQo,Wv,Che,VQo,XQo,TV,zQo,QQo,WQo,Hv,whe,HQo,UQo,MV,JQo,YQo,KQo,Uv,Ahe,ZQo,eWo,EV,oWo,rWo,tWo,Jv,yhe,aWo,nWo,CV,sWo,lWo,iWo,Yv,Lhe,dWo,cWo,wV,fWo,mWo,gWo,Kv,xhe,hWo,pWo,AV,uWo,_Wo,bWo,Zv,$he,vWo,FWo,yV,TWo,MWo,EWo,eF,CWo,khe,wWo,AWo,She,yWo,LWo,oF,BPe,ad,rF,Rhe,Fy,xWo,Bhe,$Wo,PPe,Oo,Ty,kWo,nd,SWo,LV,RWo,BWo,xV,PWo,IWo,qWo,My,NWo,Phe,jWo,DWo,GWo,ht,Ey,OWo,Ihe,VWo,XWo,sd,zWo,qhe,QWo,WWo,$V,HWo,UWo,JWo,tF,YWo,io,Cy,KWo,Nhe,ZWo,eHo,qa,oHo,jhe,rHo,tHo,Dhe,aHo,nHo,Ghe,sHo,lHo,iHo,Na,aF,Ohe,dHo,cHo,kV,fHo,mHo,gHo,nF,Vhe,hHo,pHo,SV,uHo,_Ho,bHo,sF,Xhe,vHo,FHo,RV,THo,MHo,EHo,lF,zhe,CHo,wHo,BV,AHo,yHo,LHo,iF,xHo,Qhe,$Ho,kHo,Whe,SHo,RHo,dF,IPe,ld,cF,Hhe,wy,BHo,Uhe,PHo,qPe,Vo,Ay,IHo,id,qHo,PV,NHo,jHo,IV,DHo,GHo,OHo,yy,VHo,Jhe,XHo,zHo,QHo,pt,Ly,WHo,Yhe,HHo,UHo,dd,JHo,Khe,YHo,KHo,qV,ZHo,eUo,oUo,fF,rUo,co,xy,tUo,Zhe,aUo,nUo,ja,sUo,epe,lUo,iUo,ope,dUo,cUo,rpe,fUo,mUo,gUo,je,mF,tpe,hUo,pUo,NV,uUo,_Uo,bUo,gF,ape,vUo,FUo,jV,TUo,MUo,EUo,hF,npe,CUo,wUo,DV,AUo,yUo,LUo,pF,spe,xUo,$Uo,GV,kUo,SUo,RUo,uF,lpe,BUo,PUo,OV,IUo,qUo,NUo,_F,ipe,jUo,DUo,VV,GUo,OUo,VUo,bF,dpe,XUo,zUo,XV,QUo,WUo,HUo,vF,cpe,UUo,JUo,zV,YUo,KUo,ZUo,FF,eJo,fpe,oJo,rJo,mpe,tJo,aJo,TF,NPe,cd,MF,gpe,$y,nJo,hpe,sJo,jPe,Xo,ky,lJo,fd,iJo,QV,dJo,cJo,WV,fJo,mJo,gJo,Sy,hJo,ppe,pJo,uJo,_Jo,ut,Ry,bJo,upe,vJo,FJo,md,TJo,_pe,MJo,EJo,HV,CJo,wJo,AJo,EF,yJo,fo,By,LJo,bpe,xJo,$Jo,Da,kJo,vpe,SJo,RJo,Fpe,BJo,PJo,Tpe,IJo,qJo,NJo,Py,CF,Mpe,jJo,DJo,UV,GJo,OJo,VJo,wF,Epe,XJo,zJo,JV,QJo,WJo,HJo,AF,UJo,Cpe,JJo,YJo,wpe,KJo,ZJo,yF,DPe,gd,LF,Ape,Iy,eYo,ype,oYo,GPe,zo,qy,rYo,hd,tYo,YV,aYo,nYo,KV,sYo,lYo,iYo,Ny,dYo,Lpe,cYo,fYo,mYo,_t,jy,gYo,xpe,hYo,pYo,pd,uYo,$pe,_Yo,bYo,ZV,vYo,FYo,TYo,xF,MYo,mo,Dy,EYo,kpe,CYo,wYo,Ga,AYo,Spe,yYo,LYo,Rpe,xYo,$Yo,Bpe,kYo,SYo,RYo,Oa,$F,Ppe,BYo,PYo,eX,IYo,qYo,NYo,kF,Ipe,jYo,DYo,oX,GYo,OYo,VYo,SF,qpe,XYo,zYo,rX,QYo,WYo,HYo,RF,Npe,UYo,JYo,tX,YYo,KYo,ZYo,BF,eKo,jpe,oKo,rKo,Dpe,tKo,aKo,PF,OPe,ud,IF,Gpe,Gy,nKo,Ope,sKo,VPe,Qo,Oy,lKo,_d,iKo,aX,dKo,cKo,nX,fKo,mKo,gKo,Vy,hKo,Vpe,pKo,uKo,_Ko,bt,Xy,bKo,Xpe,vKo,FKo,bd,TKo,zpe,MKo,EKo,sX,CKo,wKo,AKo,qF,yKo,go,zy,LKo,Qpe,xKo,$Ko,Va,kKo,Wpe,SKo,RKo,Hpe,BKo,PKo,Upe,IKo,qKo,NKo,vd,NF,Jpe,jKo,DKo,lX,GKo,OKo,VKo,jF,Ype,XKo,zKo,iX,QKo,WKo,HKo,DF,Kpe,UKo,JKo,dX,YKo,KKo,ZKo,GF,eZo,Zpe,oZo,rZo,eue,tZo,aZo,OF,XPe,Fd,VF,oue,Qy,nZo,rue,sZo,zPe,Wo,Wy,lZo,Td,iZo,cX,dZo,cZo,fX,fZo,mZo,gZo,Hy,hZo,tue,pZo,uZo,_Zo,vt,Uy,bZo,aue,vZo,FZo,Md,TZo,nue,MZo,EZo,mX,CZo,wZo,AZo,XF,yZo,ho,Jy,LZo,sue,xZo,$Zo,Xa,kZo,lue,SZo,RZo,iue,BZo,PZo,due,IZo,qZo,NZo,Yy,zF,cue,jZo,DZo,gX,GZo,OZo,VZo,QF,fue,XZo,zZo,hX,QZo,WZo,HZo,WF,UZo,mue,JZo,YZo,gue,KZo,ZZo,HF,QPe,Ed,UF,hue,Ky,eer,pue,oer,WPe,Ho,Zy,rer,Cd,ter,pX,aer,ner,uX,ser,ler,ier,eL,der,uue,cer,fer,mer,Ft,oL,ger,_ue,her,per,wd,uer,bue,_er,ber,_X,ver,Fer,Ter,JF,Mer,po,rL,Eer,vue,Cer,wer,za,Aer,Fue,yer,Ler,Tue,xer,$er,Mue,ker,Ser,Rer,Eue,YF,Cue,Ber,Per,bX,Ier,qer,Ner,KF,jer,wue,Der,Ger,Aue,Oer,Ver,ZF,HPe,Ad,e6,yue,tL,Xer,Lue,zer,UPe,Uo,aL,Qer,yd,Wer,vX,Her,Uer,FX,Jer,Yer,Ker,nL,Zer,xue,eor,oor,ror,Tt,sL,tor,$ue,aor,nor,Ld,sor,kue,lor,ior,TX,dor,cor,mor,o6,gor,uo,lL,hor,Sue,por,uor,Qa,_or,Rue,bor,vor,Bue,For,Tor,Pue,Mor,Eor,Cor,Wa,r6,Iue,wor,Aor,MX,yor,Lor,xor,t6,que,$or,kor,EX,Sor,Ror,Bor,a6,Nue,Por,Ior,CX,qor,Nor,jor,n6,jue,Dor,Gor,wX,Oor,Vor,Xor,s6,zor,Due,Qor,Wor,Gue,Hor,Uor,l6,JPe,xd,i6,Oue,iL,Jor,Vue,Yor,YPe,Jo,dL,Kor,$d,Zor,AX,err,orr,yX,rrr,trr,arr,cL,nrr,Xue,srr,lrr,irr,Mt,fL,drr,zue,crr,frr,kd,mrr,Que,grr,hrr,LX,prr,urr,_rr,d6,brr,_o,mL,vrr,Wue,Frr,Trr,Ha,Mrr,Hue,Err,Crr,Uue,wrr,Arr,Jue,yrr,Lrr,xrr,Yue,c6,Kue,$rr,krr,xX,Srr,Rrr,Brr,f6,Prr,Zue,Irr,qrr,e_e,Nrr,jrr,m6,KPe,Sd,g6,o_e,gL,Drr,r_e,Grr,ZPe,Yo,hL,Orr,Rd,Vrr,$X,Xrr,zrr,kX,Qrr,Wrr,Hrr,pL,Urr,t_e,Jrr,Yrr,Krr,Et,uL,Zrr,a_e,etr,otr,Bd,rtr,n_e,ttr,atr,SX,ntr,str,ltr,h6,itr,Cr,_L,dtr,s_e,ctr,ftr,Ua,mtr,l_e,gtr,htr,i_e,ptr,utr,d_e,_tr,btr,vtr,j,p6,c_e,Ftr,Ttr,RX,Mtr,Etr,Ctr,u6,f_e,wtr,Atr,BX,ytr,Ltr,xtr,_6,m_e,$tr,ktr,PX,Str,Rtr,Btr,b6,g_e,Ptr,Itr,IX,qtr,Ntr,jtr,v6,h_e,Dtr,Gtr,qX,Otr,Vtr,Xtr,F6,p_e,ztr,Qtr,NX,Wtr,Htr,Utr,T6,u_e,Jtr,Ytr,jX,Ktr,Ztr,ear,M6,__e,oar,rar,DX,tar,aar,nar,E6,b_e,sar,lar,GX,iar,dar,car,C6,v_e,far,mar,OX,gar,har,par,w6,F_e,uar,_ar,VX,bar,Far,Tar,A6,T_e,Mar,Ear,XX,Car,war,Aar,y6,M_e,yar,Lar,zX,xar,$ar,kar,L6,E_e,Sar,Rar,QX,Bar,Par,Iar,x6,C_e,qar,Nar,WX,jar,Dar,Gar,$6,w_e,Oar,Var,HX,Xar,zar,Qar,k6,A_e,War,Har,UX,Uar,Jar,Yar,ks,y_e,Kar,Zar,JX,enr,onr,YX,rnr,tnr,anr,S6,L_e,nnr,snr,KX,lnr,inr,dnr,R6,x_e,cnr,fnr,ZX,mnr,gnr,hnr,B6,$_e,pnr,unr,ez,_nr,bnr,vnr,P6,k_e,Fnr,Tnr,oz,Mnr,Enr,Cnr,I6,S_e,wnr,Anr,rz,ynr,Lnr,xnr,q6,R_e,$nr,knr,tz,Snr,Rnr,Bnr,N6,B_e,Pnr,Inr,az,qnr,Nnr,jnr,j6,P_e,Dnr,Gnr,nz,Onr,Vnr,Xnr,D6,I_e,znr,Qnr,sz,Wnr,Hnr,Unr,G6,q_e,Jnr,Ynr,lz,Knr,Znr,esr,O6,N_e,osr,rsr,iz,tsr,asr,nsr,V6,j_e,ssr,lsr,dz,isr,dsr,csr,X6,D_e,fsr,msr,cz,gsr,hsr,psr,z6,G_e,usr,_sr,fz,bsr,vsr,Fsr,Q6,O_e,Tsr,Msr,mz,Esr,Csr,wsr,W6,V_e,Asr,ysr,gz,Lsr,xsr,$sr,H6,X_e,ksr,Ssr,hz,Rsr,Bsr,Psr,U6,z_e,Isr,qsr,pz,Nsr,jsr,Dsr,J6,Q_e,Gsr,Osr,uz,Vsr,Xsr,zsr,Y6,W_e,Qsr,Wsr,_z,Hsr,Usr,Jsr,K6,H_e,Ysr,Ksr,bz,Zsr,elr,olr,Z6,U_e,rlr,tlr,vz,alr,nlr,slr,eT,J_e,llr,ilr,Fz,dlr,clr,flr,oT,Y_e,mlr,glr,Tz,hlr,plr,ulr,rT,K_e,_lr,blr,Mz,vlr,Flr,Tlr,tT,Z_e,Mlr,Elr,Ez,Clr,wlr,Alr,aT,e0e,ylr,Llr,Cz,xlr,$lr,klr,nT,eIe,Pd,sT,o0e,bL,Slr,r0e,Rlr,oIe,Ko,vL,Blr,Id,Plr,wz,Ilr,qlr,Az,Nlr,jlr,Dlr,FL,Glr,t0e,Olr,Vlr,Xlr,Ct,TL,zlr,a0e,Qlr,Wlr,qd,Hlr,n0e,Ulr,Jlr,yz,Ylr,Klr,Zlr,lT,eir,wr,ML,oir,s0e,rir,tir,Ja,air,l0e,nir,sir,i0e,lir,iir,d0e,dir,cir,fir,se,iT,c0e,mir,gir,Lz,hir,pir,uir,dT,f0e,_ir,bir,xz,vir,Fir,Tir,cT,m0e,Mir,Eir,$z,Cir,wir,Air,fT,g0e,yir,Lir,kz,xir,$ir,kir,mT,h0e,Sir,Rir,Sz,Bir,Pir,Iir,gT,p0e,qir,Nir,Rz,jir,Dir,Gir,hT,u0e,Oir,Vir,Bz,Xir,zir,Qir,pT,_0e,Wir,Hir,Pz,Uir,Jir,Yir,uT,b0e,Kir,Zir,Iz,edr,odr,rdr,_T,v0e,tdr,adr,qz,ndr,sdr,ldr,bT,F0e,idr,ddr,Nz,cdr,fdr,mdr,vT,T0e,gdr,hdr,jz,pdr,udr,_dr,FT,M0e,bdr,vdr,Dz,Fdr,Tdr,Mdr,TT,E0e,Edr,Cdr,Gz,wdr,Adr,ydr,MT,C0e,Ldr,xdr,Oz,$dr,kdr,Sdr,ET,w0e,Rdr,Bdr,Vz,Pdr,Idr,qdr,CT,A0e,Ndr,jdr,Xz,Ddr,Gdr,Odr,wT,y0e,Vdr,Xdr,zz,zdr,Qdr,Wdr,AT,L0e,Hdr,Udr,Qz,Jdr,Ydr,Kdr,yT,x0e,Zdr,ecr,Wz,ocr,rcr,tcr,LT,$0e,acr,ncr,Hz,scr,lcr,icr,xT,k0e,dcr,ccr,Uz,fcr,mcr,gcr,$T,S0e,hcr,pcr,Jz,ucr,_cr,bcr,kT,rIe,Nd,ST,R0e,EL,vcr,B0e,Fcr,tIe,Zo,CL,Tcr,jd,Mcr,Yz,Ecr,Ccr,Kz,wcr,Acr,ycr,wL,Lcr,P0e,xcr,$cr,kcr,wt,AL,Scr,I0e,Rcr,Bcr,Dd,Pcr,q0e,Icr,qcr,Zz,Ncr,jcr,Dcr,RT,Gcr,Ar,yL,Ocr,N0e,Vcr,Xcr,Ya,zcr,j0e,Qcr,Wcr,D0e,Hcr,Ucr,G0e,Jcr,Ycr,Kcr,Te,BT,O0e,Zcr,efr,eQ,ofr,rfr,tfr,PT,V0e,afr,nfr,oQ,sfr,lfr,ifr,IT,X0e,dfr,cfr,rQ,ffr,mfr,gfr,qT,z0e,hfr,pfr,tQ,ufr,_fr,bfr,NT,Q0e,vfr,Ffr,aQ,Tfr,Mfr,Efr,jT,W0e,Cfr,wfr,nQ,Afr,yfr,Lfr,DT,H0e,xfr,$fr,sQ,kfr,Sfr,Rfr,GT,U0e,Bfr,Pfr,lQ,Ifr,qfr,Nfr,OT,J0e,jfr,Dfr,iQ,Gfr,Ofr,Vfr,VT,Y0e,Xfr,zfr,dQ,Qfr,Wfr,Hfr,XT,K0e,Ufr,Jfr,cQ,Yfr,Kfr,Zfr,zT,Z0e,emr,omr,fQ,rmr,tmr,amr,QT,aIe,Gd,WT,e1e,LL,nmr,o1e,smr,nIe,er,xL,lmr,Od,imr,mQ,dmr,cmr,gQ,fmr,mmr,gmr,$L,hmr,r1e,pmr,umr,_mr,At,kL,bmr,t1e,vmr,Fmr,Vd,Tmr,a1e,Mmr,Emr,hQ,Cmr,wmr,Amr,HT,ymr,yr,SL,Lmr,n1e,xmr,$mr,Ka,kmr,s1e,Smr,Rmr,l1e,Bmr,Pmr,i1e,Imr,qmr,Nmr,Xd,UT,d1e,jmr,Dmr,pQ,Gmr,Omr,Vmr,JT,c1e,Xmr,zmr,uQ,Qmr,Wmr,Hmr,YT,f1e,Umr,Jmr,_Q,Ymr,Kmr,Zmr,KT,sIe,zd,ZT,m1e,RL,egr,g1e,ogr,lIe,or,BL,rgr,Qd,tgr,bQ,agr,ngr,vQ,sgr,lgr,igr,PL,dgr,h1e,cgr,fgr,mgr,yt,IL,ggr,p1e,hgr,pgr,Wd,ugr,u1e,_gr,bgr,FQ,vgr,Fgr,Tgr,e7,Mgr,Lr,qL,Egr,_1e,Cgr,wgr,Za,Agr,b1e,ygr,Lgr,v1e,xgr,$gr,F1e,kgr,Sgr,Rgr,ie,o7,T1e,Bgr,Pgr,TQ,Igr,qgr,Ngr,r7,M1e,jgr,Dgr,MQ,Ggr,Ogr,Vgr,t7,E1e,Xgr,zgr,EQ,Qgr,Wgr,Hgr,a7,C1e,Ugr,Jgr,CQ,Ygr,Kgr,Zgr,n7,w1e,ehr,ohr,wQ,rhr,thr,ahr,s7,A1e,nhr,shr,AQ,lhr,ihr,dhr,l7,y1e,chr,fhr,yQ,mhr,ghr,hhr,i7,L1e,phr,uhr,LQ,_hr,bhr,vhr,d7,x1e,Fhr,Thr,xQ,Mhr,Ehr,Chr,c7,$1e,whr,Ahr,$Q,yhr,Lhr,xhr,f7,k1e,$hr,khr,kQ,Shr,Rhr,Bhr,m7,S1e,Phr,Ihr,SQ,qhr,Nhr,jhr,g7,R1e,Dhr,Ghr,RQ,Ohr,Vhr,Xhr,h7,B1e,zhr,Qhr,BQ,Whr,Hhr,Uhr,p7,P1e,Jhr,Yhr,PQ,Khr,Zhr,epr,u7,I1e,opr,rpr,IQ,tpr,apr,npr,_7,q1e,spr,lpr,qQ,ipr,dpr,cpr,b7,N1e,fpr,mpr,NQ,gpr,hpr,ppr,v7,j1e,upr,_pr,jQ,bpr,vpr,Fpr,F7,D1e,Tpr,Mpr,DQ,Epr,Cpr,wpr,T7,iIe,Hd,M7,G1e,NL,Apr,O1e,ypr,dIe,rr,jL,Lpr,Ud,xpr,GQ,$pr,kpr,OQ,Spr,Rpr,Bpr,DL,Ppr,V1e,Ipr,qpr,Npr,Lt,GL,jpr,X1e,Dpr,Gpr,Jd,Opr,z1e,Vpr,Xpr,VQ,zpr,Qpr,Wpr,E7,Hpr,xr,OL,Upr,Q1e,Jpr,Ypr,en,Kpr,W1e,Zpr,eur,H1e,our,rur,U1e,tur,aur,nur,ye,C7,J1e,sur,lur,XQ,iur,dur,cur,w7,Y1e,fur,mur,zQ,gur,hur,pur,A7,K1e,uur,_ur,QQ,bur,vur,Fur,y7,Z1e,Tur,Mur,WQ,Eur,Cur,wur,L7,ebe,Aur,yur,HQ,Lur,xur,$ur,x7,obe,kur,Sur,UQ,Rur,Bur,Pur,$7,rbe,Iur,qur,JQ,Nur,jur,Dur,k7,tbe,Gur,Our,YQ,Vur,Xur,zur,S7,abe,Qur,Wur,KQ,Hur,Uur,Jur,R7,nbe,Yur,Kur,ZQ,Zur,e_r,o_r,B7,cIe,Yd,P7,sbe,VL,r_r,lbe,t_r,fIe,tr,XL,a_r,Kd,n_r,eW,s_r,l_r,oW,i_r,d_r,c_r,zL,f_r,ibe,m_r,g_r,h_r,xt,QL,p_r,dbe,u_r,__r,Zd,b_r,cbe,v_r,F_r,rW,T_r,M_r,E_r,I7,C_r,$r,WL,w_r,fbe,A_r,y_r,on,L_r,mbe,x_r,$_r,gbe,k_r,S_r,hbe,R_r,B_r,P_r,Z,q7,pbe,I_r,q_r,tW,N_r,j_r,D_r,N7,ube,G_r,O_r,aW,V_r,X_r,z_r,j7,_be,Q_r,W_r,nW,H_r,U_r,J_r,D7,bbe,Y_r,K_r,sW,Z_r,e0r,o0r,G7,vbe,r0r,t0r,lW,a0r,n0r,s0r,O7,Fbe,l0r,i0r,iW,d0r,c0r,f0r,V7,Tbe,m0r,g0r,dW,h0r,p0r,u0r,X7,Mbe,_0r,b0r,cW,v0r,F0r,T0r,z7,Ebe,M0r,E0r,fW,C0r,w0r,A0r,Q7,Cbe,y0r,L0r,mW,x0r,$0r,k0r,W7,wbe,S0r,R0r,gW,B0r,P0r,I0r,H7,Abe,q0r,N0r,hW,j0r,D0r,G0r,U7,ybe,O0r,V0r,pW,X0r,z0r,Q0r,J7,Lbe,W0r,H0r,uW,U0r,J0r,Y0r,Y7,xbe,K0r,Z0r,_W,e1r,o1r,r1r,K7,$be,t1r,a1r,bW,n1r,s1r,l1r,Z7,kbe,i1r,d1r,vW,c1r,f1r,m1r,eM,Sbe,g1r,h1r,FW,p1r,u1r,_1r,oM,Rbe,b1r,v1r,TW,F1r,T1r,M1r,rM,Bbe,E1r,C1r,MW,w1r,A1r,y1r,tM,Pbe,L1r,x1r,EW,$1r,k1r,S1r,aM,Ibe,R1r,B1r,CW,P1r,I1r,q1r,nM,qbe,N1r,j1r,wW,D1r,G1r,O1r,sM,Nbe,V1r,X1r,AW,z1r,Q1r,W1r,lM,jbe,H1r,U1r,yW,J1r,Y1r,K1r,iM,Dbe,Z1r,ebr,LW,obr,rbr,tbr,dM,mIe,ec,cM,Gbe,HL,abr,Obe,nbr,gIe,ar,UL,sbr,oc,lbr,xW,ibr,dbr,$W,cbr,fbr,mbr,JL,gbr,Vbe,hbr,pbr,ubr,$t,YL,_br,Xbe,bbr,vbr,rc,Fbr,zbe,Tbr,Mbr,kW,Ebr,Cbr,wbr,fM,Abr,kr,KL,ybr,Qbe,Lbr,xbr,rn,$br,Wbe,kbr,Sbr,Hbe,Rbr,Bbr,Ube,Pbr,Ibr,qbr,pe,mM,Jbe,Nbr,jbr,SW,Dbr,Gbr,Obr,gM,Ybe,Vbr,Xbr,RW,zbr,Qbr,Wbr,hM,Kbe,Hbr,Ubr,BW,Jbr,Ybr,Kbr,pM,Zbe,Zbr,e2r,PW,o2r,r2r,t2r,uM,e2e,a2r,n2r,IW,s2r,l2r,i2r,_M,o2e,d2r,c2r,qW,f2r,m2r,g2r,bM,r2e,h2r,p2r,NW,u2r,_2r,b2r,vM,t2e,v2r,F2r,jW,T2r,M2r,E2r,FM,a2e,C2r,w2r,DW,A2r,y2r,L2r,TM,n2e,x2r,$2r,GW,k2r,S2r,R2r,MM,s2e,B2r,P2r,OW,I2r,q2r,N2r,EM,l2e,j2r,D2r,VW,G2r,O2r,V2r,CM,i2e,X2r,z2r,XW,Q2r,W2r,H2r,wM,d2e,U2r,J2r,zW,Y2r,K2r,Z2r,AM,c2e,evr,ovr,QW,rvr,tvr,avr,yM,f2e,nvr,svr,WW,lvr,ivr,dvr,LM,m2e,cvr,fvr,HW,mvr,gvr,hvr,xM,hIe,tc,$M,g2e,ZL,pvr,h2e,uvr,pIe,nr,e8,_vr,ac,bvr,UW,vvr,Fvr,JW,Tvr,Mvr,Evr,o8,Cvr,p2e,wvr,Avr,yvr,kt,r8,Lvr,u2e,xvr,$vr,nc,kvr,_2e,Svr,Rvr,YW,Bvr,Pvr,Ivr,kM,qvr,Sr,t8,Nvr,b2e,jvr,Dvr,tn,Gvr,v2e,Ovr,Vvr,F2e,Xvr,zvr,T2e,Qvr,Wvr,Hvr,M2e,SM,E2e,Uvr,Jvr,KW,Yvr,Kvr,Zvr,RM,uIe,sc,BM,C2e,a8,eFr,w2e,oFr,_Ie,sr,n8,rFr,lc,tFr,ZW,aFr,nFr,eH,sFr,lFr,iFr,s8,dFr,A2e,cFr,fFr,mFr,St,l8,gFr,y2e,hFr,pFr,ic,uFr,L2e,_Fr,bFr,oH,vFr,FFr,TFr,PM,MFr,Rr,i8,EFr,x2e,CFr,wFr,an,AFr,$2e,yFr,LFr,k2e,xFr,$Fr,S2e,kFr,SFr,RFr,de,IM,R2e,BFr,PFr,rH,IFr,qFr,NFr,qM,B2e,jFr,DFr,tH,GFr,OFr,VFr,NM,P2e,XFr,zFr,aH,QFr,WFr,HFr,jM,I2e,UFr,JFr,nH,YFr,KFr,ZFr,DM,q2e,e6r,o6r,sH,r6r,t6r,a6r,GM,N2e,n6r,s6r,lH,l6r,i6r,d6r,OM,j2e,c6r,f6r,iH,m6r,g6r,h6r,VM,D2e,p6r,u6r,dH,_6r,b6r,v6r,XM,G2e,F6r,T6r,cH,M6r,E6r,C6r,zM,O2e,w6r,A6r,fH,y6r,L6r,x6r,QM,V2e,$6r,k6r,mH,S6r,R6r,B6r,WM,X2e,P6r,I6r,gH,q6r,N6r,j6r,HM,z2e,D6r,G6r,hH,O6r,V6r,X6r,UM,Q2e,z6r,Q6r,pH,W6r,H6r,U6r,JM,W2e,J6r,Y6r,uH,K6r,Z6r,eTr,YM,H2e,oTr,rTr,_H,tTr,aTr,nTr,KM,U2e,sTr,lTr,bH,iTr,dTr,cTr,ZM,J2e,fTr,mTr,vH,gTr,hTr,pTr,e4,Y2e,uTr,_Tr,FH,bTr,vTr,FTr,o4,K2e,TTr,MTr,TH,ETr,CTr,wTr,r4,bIe,dc,t4,Z2e,d8,ATr,eve,yTr,vIe,lr,c8,LTr,cc,xTr,MH,$Tr,kTr,EH,STr,RTr,BTr,f8,PTr,ove,ITr,qTr,NTr,Rt,m8,jTr,rve,DTr,GTr,fc,OTr,tve,VTr,XTr,CH,zTr,QTr,WTr,a4,HTr,Br,g8,UTr,ave,JTr,YTr,nn,KTr,nve,ZTr,e7r,sve,o7r,r7r,lve,t7r,a7r,n7r,ce,n4,ive,s7r,l7r,wH,i7r,d7r,c7r,s4,dve,f7r,m7r,AH,g7r,h7r,p7r,l4,cve,u7r,_7r,yH,b7r,v7r,F7r,i4,fve,T7r,M7r,LH,E7r,C7r,w7r,d4,mve,A7r,y7r,xH,L7r,x7r,$7r,c4,gve,k7r,S7r,$H,R7r,B7r,P7r,f4,hve,I7r,q7r,kH,N7r,j7r,D7r,m4,pve,G7r,O7r,SH,V7r,X7r,z7r,g4,uve,Q7r,W7r,RH,H7r,U7r,J7r,h4,_ve,Y7r,K7r,BH,Z7r,eMr,oMr,p4,bve,rMr,tMr,PH,aMr,nMr,sMr,u4,vve,lMr,iMr,IH,dMr,cMr,fMr,_4,Fve,mMr,gMr,qH,hMr,pMr,uMr,b4,Tve,_Mr,bMr,NH,vMr,FMr,TMr,v4,Mve,MMr,EMr,jH,CMr,wMr,AMr,F4,Eve,yMr,LMr,DH,xMr,$Mr,kMr,T4,Cve,SMr,RMr,GH,BMr,PMr,IMr,M4,wve,qMr,NMr,OH,jMr,DMr,GMr,E4,Ave,OMr,VMr,VH,XMr,zMr,QMr,C4,yve,WMr,HMr,XH,UMr,JMr,YMr,w4,FIe,mc,A4,Lve,h8,KMr,xve,ZMr,TIe,ir,p8,e4r,gc,o4r,zH,r4r,t4r,QH,a4r,n4r,s4r,u8,l4r,$ve,i4r,d4r,c4r,Bt,_8,f4r,kve,m4r,g4r,hc,h4r,Sve,p4r,u4r,WH,_4r,b4r,v4r,y4,F4r,Pr,b8,T4r,Rve,M4r,E4r,sn,C4r,Bve,w4r,A4r,Pve,y4r,L4r,Ive,x4r,$4r,k4r,qve,L4,Nve,S4r,R4r,HH,B4r,P4r,I4r,x4,MIe,pc,$4,jve,v8,q4r,Dve,N4r,EIe,dr,F8,j4r,uc,D4r,UH,G4r,O4r,JH,V4r,X4r,z4r,T8,Q4r,Gve,W4r,H4r,U4r,Pt,M8,J4r,Ove,Y4r,K4r,_c,Z4r,Vve,eEr,oEr,YH,rEr,tEr,aEr,k4,nEr,Ir,E8,sEr,Xve,lEr,iEr,ln,dEr,zve,cEr,fEr,Qve,mEr,gEr,Wve,hEr,pEr,uEr,Hve,S4,Uve,_Er,bEr,KH,vEr,FEr,TEr,R4,CIe,bc,B4,Jve,C8,MEr,Yve,EEr,wIe,cr,w8,CEr,vc,wEr,ZH,AEr,yEr,eU,LEr,xEr,$Er,A8,kEr,Kve,SEr,REr,BEr,It,y8,PEr,Zve,IEr,qEr,Fc,NEr,eFe,jEr,DEr,oU,GEr,OEr,VEr,P4,XEr,qr,L8,zEr,oFe,QEr,WEr,dn,HEr,rFe,UEr,JEr,tFe,YEr,KEr,aFe,ZEr,e5r,o5r,re,I4,nFe,r5r,t5r,rU,a5r,n5r,s5r,q4,sFe,l5r,i5r,tU,d5r,c5r,f5r,N4,lFe,m5r,g5r,aU,h5r,p5r,u5r,j4,iFe,_5r,b5r,nU,v5r,F5r,T5r,D4,dFe,M5r,E5r,sU,C5r,w5r,A5r,G4,cFe,y5r,L5r,lU,x5r,$5r,k5r,O4,fFe,S5r,R5r,iU,B5r,P5r,I5r,V4,mFe,q5r,N5r,dU,j5r,D5r,G5r,X4,gFe,O5r,V5r,cU,X5r,z5r,Q5r,z4,hFe,W5r,H5r,fU,U5r,J5r,Y5r,Q4,pFe,K5r,Z5r,mU,eCr,oCr,rCr,W4,uFe,tCr,aCr,gU,nCr,sCr,lCr,H4,_Fe,iCr,dCr,hU,cCr,fCr,mCr,U4,bFe,gCr,hCr,pU,pCr,uCr,_Cr,J4,vFe,bCr,vCr,uU,FCr,TCr,MCr,Y4,FFe,ECr,CCr,_U,wCr,ACr,yCr,K4,TFe,LCr,xCr,bU,$Cr,kCr,SCr,Z4,MFe,RCr,BCr,vU,PCr,ICr,qCr,eE,EFe,NCr,jCr,FU,DCr,GCr,OCr,oE,CFe,VCr,XCr,TU,zCr,QCr,WCr,rE,wFe,HCr,UCr,MU,JCr,YCr,KCr,tE,AFe,ZCr,e3r,EU,o3r,r3r,t3r,aE,yFe,a3r,n3r,CU,s3r,l3r,i3r,nE,LFe,d3r,c3r,wU,f3r,m3r,g3r,sE,xFe,h3r,p3r,AU,u3r,_3r,b3r,lE,AIe,Tc,iE,$Fe,x8,v3r,kFe,F3r,yIe,fr,$8,T3r,Mc,M3r,yU,E3r,C3r,LU,w3r,A3r,y3r,k8,L3r,SFe,x3r,$3r,k3r,qt,S8,S3r,RFe,R3r,B3r,Ec,P3r,BFe,I3r,q3r,xU,N3r,j3r,D3r,dE,G3r,Nr,R8,O3r,PFe,V3r,X3r,cn,z3r,IFe,Q3r,W3r,qFe,H3r,U3r,NFe,J3r,Y3r,K3r,ke,cE,jFe,Z3r,ewr,$U,owr,rwr,twr,fE,DFe,awr,nwr,kU,swr,lwr,iwr,mE,GFe,dwr,cwr,SU,fwr,mwr,gwr,gE,OFe,hwr,pwr,RU,uwr,_wr,bwr,hE,VFe,vwr,Fwr,BU,Twr,Mwr,Ewr,pE,XFe,Cwr,wwr,PU,Awr,ywr,Lwr,uE,zFe,xwr,$wr,IU,kwr,Swr,Rwr,_E,QFe,Bwr,Pwr,qU,Iwr,qwr,Nwr,bE,WFe,jwr,Dwr,NU,Gwr,Owr,Vwr,vE,LIe,Cc,FE,HFe,B8,Xwr,UFe,zwr,xIe,mr,P8,Qwr,wc,Wwr,jU,Hwr,Uwr,DU,Jwr,Ywr,Kwr,I8,Zwr,JFe,eAr,oAr,rAr,Nt,q8,tAr,YFe,aAr,nAr,Ac,sAr,KFe,lAr,iAr,GU,dAr,cAr,fAr,TE,mAr,jr,N8,gAr,ZFe,hAr,pAr,fn,uAr,e6e,_Ar,bAr,o6e,vAr,FAr,r6e,TAr,MAr,EAr,Me,ME,t6e,CAr,wAr,OU,AAr,yAr,LAr,EE,a6e,xAr,$Ar,VU,kAr,SAr,RAr,CE,n6e,BAr,PAr,XU,IAr,qAr,NAr,wE,s6e,jAr,DAr,zU,GAr,OAr,VAr,AE,l6e,XAr,zAr,QU,QAr,WAr,HAr,yE,i6e,UAr,JAr,WU,YAr,KAr,ZAr,LE,d6e,eyr,oyr,HU,ryr,tyr,ayr,xE,c6e,nyr,syr,UU,lyr,iyr,dyr,$E,f6e,cyr,fyr,JU,myr,gyr,hyr,kE,m6e,pyr,uyr,YU,_yr,byr,vyr,SE,g6e,Fyr,Tyr,KU,Myr,Eyr,Cyr,RE,h6e,wyr,Ayr,ZU,yyr,Lyr,xyr,BE,$Ie,yc,PE,p6e,j8,$yr,u6e,kyr,kIe,gr,D8,Syr,Lc,Ryr,eJ,Byr,Pyr,oJ,Iyr,qyr,Nyr,G8,jyr,_6e,Dyr,Gyr,Oyr,jt,O8,Vyr,b6e,Xyr,zyr,xc,Qyr,v6e,Wyr,Hyr,rJ,Uyr,Jyr,Yyr,IE,Kyr,Dr,V8,Zyr,F6e,eLr,oLr,mn,rLr,T6e,tLr,aLr,M6e,nLr,sLr,E6e,lLr,iLr,dLr,Le,qE,C6e,cLr,fLr,tJ,mLr,gLr,hLr,NE,w6e,pLr,uLr,aJ,_Lr,bLr,vLr,jE,A6e,FLr,TLr,nJ,MLr,ELr,CLr,DE,y6e,wLr,ALr,sJ,yLr,LLr,xLr,GE,L6e,$Lr,kLr,lJ,SLr,RLr,BLr,OE,x6e,PLr,ILr,iJ,qLr,NLr,jLr,VE,$6e,DLr,GLr,dJ,OLr,VLr,XLr,XE,k6e,zLr,QLr,cJ,WLr,HLr,ULr,zE,S6e,JLr,YLr,fJ,KLr,ZLr,e8r,QE,R6e,o8r,r8r,mJ,t8r,a8r,n8r,WE,SIe,$c,HE,B6e,X8,s8r,P6e,l8r,RIe,hr,z8,i8r,kc,d8r,gJ,c8r,f8r,hJ,m8r,g8r,h8r,Q8,p8r,I6e,u8r,_8r,b8r,Dt,W8,v8r,q6e,F8r,T8r,Sc,M8r,N6e,E8r,C8r,pJ,w8r,A8r,y8r,UE,L8r,Gr,H8,x8r,j6e,$8r,k8r,gn,S8r,D6e,R8r,B8r,G6e,P8r,I8r,O6e,q8r,N8r,j8r,Se,JE,V6e,D8r,G8r,uJ,O8r,V8r,X8r,YE,X6e,z8r,Q8r,_J,W8r,H8r,U8r,KE,z6e,J8r,Y8r,bJ,K8r,Z8r,exr,ZE,Q6e,oxr,rxr,vJ,txr,axr,nxr,e5,W6e,sxr,lxr,FJ,ixr,dxr,cxr,o5,H6e,fxr,mxr,TJ,gxr,hxr,pxr,r5,U6e,uxr,_xr,MJ,bxr,vxr,Fxr,t5,J6e,Txr,Mxr,EJ,Exr,Cxr,wxr,a5,Y6e,Axr,yxr,CJ,Lxr,xxr,$xr,n5,BIe,Rc,s5,K6e,U8,kxr,Z6e,Sxr,PIe,pr,J8,Rxr,Bc,Bxr,wJ,Pxr,Ixr,AJ,qxr,Nxr,jxr,Y8,Dxr,eTe,Gxr,Oxr,Vxr,Gt,K8,Xxr,oTe,zxr,Qxr,Pc,Wxr,rTe,Hxr,Uxr,yJ,Jxr,Yxr,Kxr,l5,Zxr,Or,Z8,e9r,tTe,o9r,r9r,hn,t9r,aTe,a9r,n9r,nTe,s9r,l9r,sTe,i9r,d9r,c9r,xe,i5,lTe,f9r,m9r,LJ,g9r,h9r,p9r,d5,iTe,u9r,_9r,xJ,b9r,v9r,F9r,c5,dTe,T9r,M9r,$J,E9r,C9r,w9r,f5,cTe,A9r,y9r,kJ,L9r,x9r,$9r,m5,fTe,k9r,S9r,SJ,R9r,B9r,P9r,g5,mTe,I9r,q9r,RJ,N9r,j9r,D9r,h5,gTe,G9r,O9r,BJ,V9r,X9r,z9r,p5,hTe,Q9r,W9r,PJ,H9r,U9r,J9r,u5,pTe,Y9r,K9r,IJ,Z9r,e$r,o$r,_5,uTe,r$r,t$r,qJ,a$r,n$r,s$r,b5,IIe,Ic,v5,_Te,ex,l$r,bTe,i$r,qIe,ur,ox,d$r,qc,c$r,NJ,f$r,m$r,jJ,g$r,h$r,p$r,rx,u$r,vTe,_$r,b$r,v$r,Ot,tx,F$r,FTe,T$r,M$r,Nc,E$r,TTe,C$r,w$r,DJ,A$r,y$r,L$r,F5,x$r,Vr,ax,$$r,MTe,k$r,S$r,pn,R$r,ETe,B$r,P$r,CTe,I$r,q$r,wTe,N$r,j$r,D$r,$e,T5,ATe,G$r,O$r,GJ,V$r,X$r,z$r,M5,yTe,Q$r,W$r,OJ,H$r,U$r,J$r,E5,LTe,Y$r,K$r,VJ,Z$r,ekr,okr,C5,xTe,rkr,tkr,XJ,akr,nkr,skr,w5,$Te,lkr,ikr,zJ,dkr,ckr,fkr,A5,kTe,mkr,gkr,QJ,hkr,pkr,ukr,y5,STe,_kr,bkr,WJ,vkr,Fkr,Tkr,L5,RTe,Mkr,Ekr,HJ,Ckr,wkr,Akr,x5,BTe,ykr,Lkr,UJ,xkr,$kr,kkr,$5,PTe,Skr,Rkr,JJ,Bkr,Pkr,Ikr,k5,NIe,jc,S5,ITe,nx,qkr,qTe,Nkr,jIe,_r,sx,jkr,Dc,Dkr,YJ,Gkr,Okr,KJ,Vkr,Xkr,zkr,lx,Qkr,NTe,Wkr,Hkr,Ukr,Vt,ix,Jkr,jTe,Ykr,Kkr,Gc,Zkr,DTe,eSr,oSr,ZJ,rSr,tSr,aSr,R5,nSr,Xr,dx,sSr,GTe,lSr,iSr,un,dSr,OTe,cSr,fSr,VTe,mSr,gSr,XTe,hSr,pSr,uSr,De,B5,zTe,_Sr,bSr,eY,vSr,FSr,TSr,P5,QTe,MSr,ESr,oY,CSr,wSr,ASr,I5,WTe,ySr,LSr,rY,xSr,$Sr,kSr,q5,HTe,SSr,RSr,tY,BSr,PSr,ISr,N5,UTe,qSr,NSr,aY,jSr,DSr,GSr,j5,JTe,OSr,VSr,nY,XSr,zSr,QSr,D5,YTe,WSr,HSr,sY,USr,JSr,YSr,G5,KTe,KSr,ZSr,lY,eRr,oRr,rRr,O5,DIe,Oc,V5,ZTe,cx,tRr,e7e,aRr,GIe,br,fx,nRr,Vc,sRr,iY,lRr,iRr,dY,dRr,cRr,fRr,mx,mRr,o7e,gRr,hRr,pRr,Xt,gx,uRr,r7e,_Rr,bRr,Xc,vRr,t7e,FRr,TRr,cY,MRr,ERr,CRr,X5,wRr,zr,hx,ARr,a7e,yRr,LRr,_n,xRr,n7e,$Rr,kRr,s7e,SRr,RRr,l7e,BRr,PRr,IRr,Ge,z5,i7e,qRr,NRr,fY,jRr,DRr,GRr,Q5,d7e,ORr,VRr,mY,XRr,zRr,QRr,W5,c7e,WRr,HRr,gY,URr,JRr,YRr,H5,f7e,KRr,ZRr,hY,eBr,oBr,rBr,U5,m7e,tBr,aBr,pY,nBr,sBr,lBr,J5,g7e,iBr,dBr,uY,cBr,fBr,mBr,Y5,h7e,gBr,hBr,_Y,pBr,uBr,_Br,K5,p7e,bBr,vBr,bY,FBr,TBr,MBr,Z5,OIe,zc,eC,u7e,px,EBr,_7e,CBr,VIe,vr,ux,wBr,Qc,ABr,vY,yBr,LBr,FY,xBr,$Br,kBr,_x,SBr,b7e,RBr,BBr,PBr,zt,bx,IBr,v7e,qBr,NBr,Wc,jBr,F7e,DBr,GBr,TY,OBr,VBr,XBr,oC,zBr,Qr,vx,QBr,T7e,WBr,HBr,bn,UBr,M7e,JBr,YBr,E7e,KBr,ZBr,C7e,ePr,oPr,rPr,w7e,rC,A7e,tPr,aPr,MY,nPr,sPr,lPr,tC,XIe,Hc,aC,y7e,Fx,iPr,L7e,dPr,zIe,Fr,Tx,cPr,Uc,fPr,EY,mPr,gPr,CY,hPr,pPr,uPr,Mx,_Pr,x7e,bPr,vPr,FPr,Qt,Ex,TPr,$7e,MPr,EPr,Jc,CPr,k7e,wPr,APr,wY,yPr,LPr,xPr,nC,$Pr,Wr,Cx,kPr,S7e,SPr,RPr,vn,BPr,R7e,PPr,IPr,B7e,qPr,NPr,P7e,jPr,DPr,GPr,wx,sC,I7e,OPr,VPr,AY,XPr,zPr,QPr,lC,q7e,WPr,HPr,yY,UPr,JPr,YPr,iC,QIe,Yc,dC,N7e,Ax,KPr,j7e,ZPr,WIe,Tr,yx,eIr,Kc,oIr,LY,rIr,tIr,xY,aIr,nIr,sIr,Lx,lIr,D7e,iIr,dIr,cIr,Wt,xx,fIr,G7e,mIr,gIr,Zc,hIr,O7e,pIr,uIr,$Y,_Ir,bIr,vIr,cC,FIr,Hr,$x,TIr,V7e,MIr,EIr,Fn,CIr,X7e,wIr,AIr,z7e,yIr,LIr,Q7e,xIr,$Ir,kIr,W7e,fC,H7e,SIr,RIr,kY,BIr,PIr,IIr,mC,HIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Sw=new ee({}),Rw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),df=new qIr({props:{warning:!0,$$slots:{default:[HCt]},$$scope:{ctx:L}}}),Bw=new ee({}),Pw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L566"}}),Nw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L589"}}),lg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),jw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L711"}}),Dw=new ee({}),Gw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L378"}}),Xw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17060/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L392"}}),jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),zw=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L588"}}),Qw=new ee({}),Ww=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),Jw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),gh=new qIr({props:{$$slots:{default:[YCt]},$$scope:{ctx:L}}}),hh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),Yw=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),Kw=new ee({}),Zw=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L77"}}),rA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L91"}}),Sh=new qIr({props:{$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),Rh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),tA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L244"}}),aA=new ee({}),nA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L720"}}),lA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Ih=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),wu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),dA=new ee({}),cA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L727"}}),mA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),yu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[t3t]},$$scope:{ctx:L}}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),h_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),hA=new ee({}),pA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L742"}}),_A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),u_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),bA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Z_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L749"}}),MA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),CA=new ee({}),wA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L756"}}),yA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),D0=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),n1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),xA=new ee({}),$A=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L765"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),l1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),tb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),BA=new ee({}),PA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L799"}}),qA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),nb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Pb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),jA=new ee({}),DA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L806"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),qb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),XA=new ee({}),zA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L792"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),L2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),UA=new ee({}),JA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L774"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),$2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),ey=new ee({}),oy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L781"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L815"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Nv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),cy=new ee({}),fy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L854"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),py=new ee({}),uy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L861"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),Fy=new ee({}),Ty=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L884"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),wy=new ee({}),Ay=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L868"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),$y=new ee({}),ky=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L875"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),Iy=new ee({}),qy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L893"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),Gy=new ee({}),Oy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L900"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L847"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L822"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:L}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L829"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L838"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[W3t]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),TL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),EL=new ee({}),CL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),AL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),LL=new ee({}),xL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),kL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),RL=new ee({}),BL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),IL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),NL=new ee({}),jL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),GL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),VL=new ee({}),XL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),I7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nwt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[swt]},$$scope:{ctx:L}}}),HL=new ee({}),UL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),YL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[lwt]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[iwt]},$$scope:{ctx:L}}}),ZL=new ee({}),e8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[dwt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[cwt]},$$scope:{ctx:L}}}),a8=new ee({}),n8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),PM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[fwt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),d8=new ee({}),c8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:L}}}),h8=new ee({}),p8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uwt]},$$scope:{ctx:L}}}),v8=new ee({}),F8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),S8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Twt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:L}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Ewt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:L}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[wwt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:L}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),W8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ywt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:L}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:L}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:L}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:L}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:L}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:L}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[jwt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Dwt]},$$scope:{ctx:L}}}),Ax=new ee({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Gwt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Owt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ri=o("Auto Classes"),tf=l(),Kr=a("p"),ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=a("code"),Lw=o("from_pretrained()"),af=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ni=o("Instantiating one of "),Mn=a("a"),xw=o("AutoConfig"),En=o(", "),Cn=a("a"),$w=o("AutoModel"),si=o(`, and
`),wn=a("a"),kw=o("AutoTokenizer"),li=o(" will directly create a class of the relevant architecture. For instance"),nf=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),X9=o("will create a model that is an instance of "),ii=a("a"),z9=o("BertModel"),Q9=o("."),Eo=l(),Fa=a("p"),W9=o("There is one class of "),sf=a("code"),H9=o("AutoModel"),ZNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),WBe=l(),di=a("h2"),lf=a("a"),EZ=a("span"),F(Sw.$$.fragment),eje=l(),CZ=a("span"),oje=o("Extending the Auto Classes"),HBe=l(),An=a("p"),rje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wZ=a("code"),tje=o("NewModel"),aje=o(", make sure you have a "),AZ=a("code"),nje=o("NewModelConfig"),sje=o(` then you can add those to the auto
classes like this:`),UBe=l(),F(Rw.$$.fragment),JBe=l(),U9=a("p"),lje=o("You will then be able to use the auto classes like you would usually do!"),YBe=l(),F(df.$$.fragment),KBe=l(),ci=a("h2"),cf=a("a"),yZ=a("span"),F(Bw.$$.fragment),ije=l(),LZ=a("span"),dje=o("AutoConfig"),ZBe=l(),Co=a("div"),F(Pw.$$.fragment),cje=l(),Iw=a("p"),fje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),J9=a("a"),mje=o("from_pretrained()"),gje=o(" class method."),hje=l(),qw=a("p"),pje=o("This class cannot be instantiated directly using "),xZ=a("code"),uje=o("__init__()"),_je=o(" (throws an error)."),bje=l(),Mr=a("div"),F(Nw.$$.fragment),vje=l(),$Z=a("p"),Fje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Tje=l(),fi=a("p"),Mje=o("The configuration class to instantiate is selected based on the "),kZ=a("code"),Eje=o("model_type"),Cje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),SZ=a("code"),wje=o("pretrained_model_name_or_path"),Aje=o(":"),yje=l(),A=a("ul"),ff=a("li"),RZ=a("strong"),Lje=o("albert"),xje=o(" \u2014 "),Y9=a("a"),$je=o("AlbertConfig"),kje=o(" (ALBERT model)"),Sje=l(),mf=a("li"),BZ=a("strong"),Rje=o("bart"),Bje=o(" \u2014 "),K9=a("a"),Pje=o("BartConfig"),Ije=o(" (BART model)"),qje=l(),gf=a("li"),PZ=a("strong"),Nje=o("beit"),jje=o(" \u2014 "),Z9=a("a"),Dje=o("BeitConfig"),Gje=o(" (BEiT model)"),Oje=l(),hf=a("li"),IZ=a("strong"),Vje=o("bert"),Xje=o(" \u2014 "),e$=a("a"),zje=o("BertConfig"),Qje=o(" (BERT model)"),Wje=l(),pf=a("li"),qZ=a("strong"),Hje=o("bert-generation"),Uje=o(" \u2014 "),o$=a("a"),Jje=o("BertGenerationConfig"),Yje=o(" (Bert Generation model)"),Kje=l(),uf=a("li"),NZ=a("strong"),Zje=o("big_bird"),eDe=o(" \u2014 "),r$=a("a"),oDe=o("BigBirdConfig"),rDe=o(" (BigBird model)"),tDe=l(),_f=a("li"),jZ=a("strong"),aDe=o("bigbird_pegasus"),nDe=o(" \u2014 "),t$=a("a"),sDe=o("BigBirdPegasusConfig"),lDe=o(" (BigBirdPegasus model)"),iDe=l(),bf=a("li"),DZ=a("strong"),dDe=o("blenderbot"),cDe=o(" \u2014 "),a$=a("a"),fDe=o("BlenderbotConfig"),mDe=o(" (Blenderbot model)"),gDe=l(),vf=a("li"),GZ=a("strong"),hDe=o("blenderbot-small"),pDe=o(" \u2014 "),n$=a("a"),uDe=o("BlenderbotSmallConfig"),_De=o(" (BlenderbotSmall model)"),bDe=l(),Ff=a("li"),OZ=a("strong"),vDe=o("camembert"),FDe=o(" \u2014 "),s$=a("a"),TDe=o("CamembertConfig"),MDe=o(" (CamemBERT model)"),EDe=l(),Tf=a("li"),VZ=a("strong"),CDe=o("canine"),wDe=o(" \u2014 "),l$=a("a"),ADe=o("CanineConfig"),yDe=o(" (Canine model)"),LDe=l(),Mf=a("li"),XZ=a("strong"),xDe=o("clip"),$De=o(" \u2014 "),i$=a("a"),kDe=o("CLIPConfig"),SDe=o(" (CLIP model)"),RDe=l(),Ef=a("li"),zZ=a("strong"),BDe=o("convbert"),PDe=o(" \u2014 "),d$=a("a"),IDe=o("ConvBertConfig"),qDe=o(" (ConvBERT model)"),NDe=l(),Cf=a("li"),QZ=a("strong"),jDe=o("convnext"),DDe=o(" \u2014 "),c$=a("a"),GDe=o("ConvNextConfig"),ODe=o(" (ConvNext model)"),VDe=l(),wf=a("li"),WZ=a("strong"),XDe=o("ctrl"),zDe=o(" \u2014 "),f$=a("a"),QDe=o("CTRLConfig"),WDe=o(" (CTRL model)"),HDe=l(),Af=a("li"),HZ=a("strong"),UDe=o("data2vec-audio"),JDe=o(" \u2014 "),m$=a("a"),YDe=o("Data2VecAudioConfig"),KDe=o(" (Data2VecAudio model)"),ZDe=l(),yf=a("li"),UZ=a("strong"),eGe=o("data2vec-text"),oGe=o(" \u2014 "),g$=a("a"),rGe=o("Data2VecTextConfig"),tGe=o(" (Data2VecText model)"),aGe=l(),Lf=a("li"),JZ=a("strong"),nGe=o("data2vec-vision"),sGe=o(" \u2014 "),h$=a("a"),lGe=o("Data2VecVisionConfig"),iGe=o(" (Data2VecVision model)"),dGe=l(),xf=a("li"),YZ=a("strong"),cGe=o("deberta"),fGe=o(" \u2014 "),p$=a("a"),mGe=o("DebertaConfig"),gGe=o(" (DeBERTa model)"),hGe=l(),$f=a("li"),KZ=a("strong"),pGe=o("deberta-v2"),uGe=o(" \u2014 "),u$=a("a"),_Ge=o("DebertaV2Config"),bGe=o(" (DeBERTa-v2 model)"),vGe=l(),kf=a("li"),ZZ=a("strong"),FGe=o("decision_transformer"),TGe=o(" \u2014 "),_$=a("a"),MGe=o("DecisionTransformerConfig"),EGe=o(" (Decision Transformer model)"),CGe=l(),Sf=a("li"),eee=a("strong"),wGe=o("deit"),AGe=o(" \u2014 "),b$=a("a"),yGe=o("DeiTConfig"),LGe=o(" (DeiT model)"),xGe=l(),Rf=a("li"),oee=a("strong"),$Ge=o("detr"),kGe=o(" \u2014 "),v$=a("a"),SGe=o("DetrConfig"),RGe=o(" (DETR model)"),BGe=l(),Bf=a("li"),ree=a("strong"),PGe=o("distilbert"),IGe=o(" \u2014 "),F$=a("a"),qGe=o("DistilBertConfig"),NGe=o(" (DistilBERT model)"),jGe=l(),Pf=a("li"),tee=a("strong"),DGe=o("dpr"),GGe=o(" \u2014 "),T$=a("a"),OGe=o("DPRConfig"),VGe=o(" (DPR model)"),XGe=l(),If=a("li"),aee=a("strong"),zGe=o("dpt"),QGe=o(" \u2014 "),M$=a("a"),WGe=o("DPTConfig"),HGe=o(" (DPT model)"),UGe=l(),qf=a("li"),nee=a("strong"),JGe=o("electra"),YGe=o(" \u2014 "),E$=a("a"),KGe=o("ElectraConfig"),ZGe=o(" (ELECTRA model)"),eOe=l(),Nf=a("li"),see=a("strong"),oOe=o("encoder-decoder"),rOe=o(" \u2014 "),C$=a("a"),tOe=o("EncoderDecoderConfig"),aOe=o(" (Encoder decoder model)"),nOe=l(),jf=a("li"),lee=a("strong"),sOe=o("flaubert"),lOe=o(" \u2014 "),w$=a("a"),iOe=o("FlaubertConfig"),dOe=o(" (FlauBERT model)"),cOe=l(),Df=a("li"),iee=a("strong"),fOe=o("fnet"),mOe=o(" \u2014 "),A$=a("a"),gOe=o("FNetConfig"),hOe=o(" (FNet model)"),pOe=l(),Gf=a("li"),dee=a("strong"),uOe=o("fsmt"),_Oe=o(" \u2014 "),y$=a("a"),bOe=o("FSMTConfig"),vOe=o(" (FairSeq Machine-Translation model)"),FOe=l(),Of=a("li"),cee=a("strong"),TOe=o("funnel"),MOe=o(" \u2014 "),L$=a("a"),EOe=o("FunnelConfig"),COe=o(" (Funnel Transformer model)"),wOe=l(),Vf=a("li"),fee=a("strong"),AOe=o("glpn"),yOe=o(" \u2014 "),x$=a("a"),LOe=o("GLPNConfig"),xOe=o(" (GLPN model)"),$Oe=l(),Xf=a("li"),mee=a("strong"),kOe=o("gpt2"),SOe=o(" \u2014 "),$$=a("a"),ROe=o("GPT2Config"),BOe=o(" (OpenAI GPT-2 model)"),POe=l(),zf=a("li"),gee=a("strong"),IOe=o("gpt_neo"),qOe=o(" \u2014 "),k$=a("a"),NOe=o("GPTNeoConfig"),jOe=o(" (GPT Neo model)"),DOe=l(),Qf=a("li"),hee=a("strong"),GOe=o("gptj"),OOe=o(" \u2014 "),S$=a("a"),VOe=o("GPTJConfig"),XOe=o(" (GPT-J model)"),zOe=l(),Wf=a("li"),pee=a("strong"),QOe=o("hubert"),WOe=o(" \u2014 "),R$=a("a"),HOe=o("HubertConfig"),UOe=o(" (Hubert model)"),JOe=l(),Hf=a("li"),uee=a("strong"),YOe=o("ibert"),KOe=o(" \u2014 "),B$=a("a"),ZOe=o("IBertConfig"),eVe=o(" (I-BERT model)"),oVe=l(),Uf=a("li"),_ee=a("strong"),rVe=o("imagegpt"),tVe=o(" \u2014 "),P$=a("a"),aVe=o("ImageGPTConfig"),nVe=o(" (ImageGPT model)"),sVe=l(),Jf=a("li"),bee=a("strong"),lVe=o("layoutlm"),iVe=o(" \u2014 "),I$=a("a"),dVe=o("LayoutLMConfig"),cVe=o(" (LayoutLM model)"),fVe=l(),Yf=a("li"),vee=a("strong"),mVe=o("layoutlmv2"),gVe=o(" \u2014 "),q$=a("a"),hVe=o("LayoutLMv2Config"),pVe=o(" (LayoutLMv2 model)"),uVe=l(),Kf=a("li"),Fee=a("strong"),_Ve=o("layoutlmv3"),bVe=o(" \u2014 "),N$=a("a"),vVe=o("LayoutLMv3Config"),FVe=o(" (LayoutLMv3 model)"),TVe=l(),Zf=a("li"),Tee=a("strong"),MVe=o("led"),EVe=o(" \u2014 "),j$=a("a"),CVe=o("LEDConfig"),wVe=o(" (LED model)"),AVe=l(),em=a("li"),Mee=a("strong"),yVe=o("longformer"),LVe=o(" \u2014 "),D$=a("a"),xVe=o("LongformerConfig"),$Ve=o(" (Longformer model)"),kVe=l(),om=a("li"),Eee=a("strong"),SVe=o("luke"),RVe=o(" \u2014 "),G$=a("a"),BVe=o("LukeConfig"),PVe=o(" (LUKE model)"),IVe=l(),rm=a("li"),Cee=a("strong"),qVe=o("lxmert"),NVe=o(" \u2014 "),O$=a("a"),jVe=o("LxmertConfig"),DVe=o(" (LXMERT model)"),GVe=l(),tm=a("li"),wee=a("strong"),OVe=o("m2m_100"),VVe=o(" \u2014 "),V$=a("a"),XVe=o("M2M100Config"),zVe=o(" (M2M100 model)"),QVe=l(),am=a("li"),Aee=a("strong"),WVe=o("marian"),HVe=o(" \u2014 "),X$=a("a"),UVe=o("MarianConfig"),JVe=o(" (Marian model)"),YVe=l(),nm=a("li"),yee=a("strong"),KVe=o("maskformer"),ZVe=o(" \u2014 "),z$=a("a"),eXe=o("MaskFormerConfig"),oXe=o(" (MaskFormer model)"),rXe=l(),sm=a("li"),Lee=a("strong"),tXe=o("mbart"),aXe=o(" \u2014 "),Q$=a("a"),nXe=o("MBartConfig"),sXe=o(" (mBART model)"),lXe=l(),lm=a("li"),xee=a("strong"),iXe=o("megatron-bert"),dXe=o(" \u2014 "),W$=a("a"),cXe=o("MegatronBertConfig"),fXe=o(" (MegatronBert model)"),mXe=l(),im=a("li"),$ee=a("strong"),gXe=o("mobilebert"),hXe=o(" \u2014 "),H$=a("a"),pXe=o("MobileBertConfig"),uXe=o(" (MobileBERT model)"),_Xe=l(),dm=a("li"),kee=a("strong"),bXe=o("mpnet"),vXe=o(" \u2014 "),U$=a("a"),FXe=o("MPNetConfig"),TXe=o(" (MPNet model)"),MXe=l(),cm=a("li"),See=a("strong"),EXe=o("mt5"),CXe=o(" \u2014 "),J$=a("a"),wXe=o("MT5Config"),AXe=o(" (mT5 model)"),yXe=l(),fm=a("li"),Ree=a("strong"),LXe=o("nystromformer"),xXe=o(" \u2014 "),Y$=a("a"),$Xe=o("NystromformerConfig"),kXe=o(" (Nystromformer model)"),SXe=l(),mm=a("li"),Bee=a("strong"),RXe=o("openai-gpt"),BXe=o(" \u2014 "),K$=a("a"),PXe=o("OpenAIGPTConfig"),IXe=o(" (OpenAI GPT model)"),qXe=l(),gm=a("li"),Pee=a("strong"),NXe=o("pegasus"),jXe=o(" \u2014 "),Z$=a("a"),DXe=o("PegasusConfig"),GXe=o(" (Pegasus model)"),OXe=l(),hm=a("li"),Iee=a("strong"),VXe=o("perceiver"),XXe=o(" \u2014 "),ek=a("a"),zXe=o("PerceiverConfig"),QXe=o(" (Perceiver model)"),WXe=l(),pm=a("li"),qee=a("strong"),HXe=o("plbart"),UXe=o(" \u2014 "),ok=a("a"),JXe=o("PLBartConfig"),YXe=o(" (PLBart model)"),KXe=l(),um=a("li"),Nee=a("strong"),ZXe=o("poolformer"),eze=o(" \u2014 "),rk=a("a"),oze=o("PoolFormerConfig"),rze=o(" (PoolFormer model)"),tze=l(),_m=a("li"),jee=a("strong"),aze=o("prophetnet"),nze=o(" \u2014 "),tk=a("a"),sze=o("ProphetNetConfig"),lze=o(" (ProphetNet model)"),ize=l(),bm=a("li"),Dee=a("strong"),dze=o("qdqbert"),cze=o(" \u2014 "),ak=a("a"),fze=o("QDQBertConfig"),mze=o(" (QDQBert model)"),gze=l(),vm=a("li"),Gee=a("strong"),hze=o("rag"),pze=o(" \u2014 "),nk=a("a"),uze=o("RagConfig"),_ze=o(" (RAG model)"),bze=l(),Fm=a("li"),Oee=a("strong"),vze=o("realm"),Fze=o(" \u2014 "),sk=a("a"),Tze=o("RealmConfig"),Mze=o(" (Realm model)"),Eze=l(),Tm=a("li"),Vee=a("strong"),Cze=o("reformer"),wze=o(" \u2014 "),lk=a("a"),Aze=o("ReformerConfig"),yze=o(" (Reformer model)"),Lze=l(),Mm=a("li"),Xee=a("strong"),xze=o("regnet"),$ze=o(" \u2014 "),ik=a("a"),kze=o("RegNetConfig"),Sze=o(" (RegNet model)"),Rze=l(),Em=a("li"),zee=a("strong"),Bze=o("rembert"),Pze=o(" \u2014 "),dk=a("a"),Ize=o("RemBertConfig"),qze=o(" (RemBERT model)"),Nze=l(),Cm=a("li"),Qee=a("strong"),jze=o("resnet"),Dze=o(" \u2014 "),ck=a("a"),Gze=o("ResNetConfig"),Oze=o(" (ResNet model)"),Vze=l(),wm=a("li"),Wee=a("strong"),Xze=o("retribert"),zze=o(" \u2014 "),fk=a("a"),Qze=o("RetriBertConfig"),Wze=o(" (RetriBERT model)"),Hze=l(),Am=a("li"),Hee=a("strong"),Uze=o("roberta"),Jze=o(" \u2014 "),mk=a("a"),Yze=o("RobertaConfig"),Kze=o(" (RoBERTa model)"),Zze=l(),ym=a("li"),Uee=a("strong"),eQe=o("roformer"),oQe=o(" \u2014 "),gk=a("a"),rQe=o("RoFormerConfig"),tQe=o(" (RoFormer model)"),aQe=l(),Lm=a("li"),Jee=a("strong"),nQe=o("segformer"),sQe=o(" \u2014 "),hk=a("a"),lQe=o("SegformerConfig"),iQe=o(" (SegFormer model)"),dQe=l(),xm=a("li"),Yee=a("strong"),cQe=o("sew"),fQe=o(" \u2014 "),pk=a("a"),mQe=o("SEWConfig"),gQe=o(" (SEW model)"),hQe=l(),$m=a("li"),Kee=a("strong"),pQe=o("sew-d"),uQe=o(" \u2014 "),uk=a("a"),_Qe=o("SEWDConfig"),bQe=o(" (SEW-D model)"),vQe=l(),km=a("li"),Zee=a("strong"),FQe=o("speech-encoder-decoder"),TQe=o(" \u2014 "),_k=a("a"),MQe=o("SpeechEncoderDecoderConfig"),EQe=o(" (Speech Encoder decoder model)"),CQe=l(),Sm=a("li"),eoe=a("strong"),wQe=o("speech_to_text"),AQe=o(" \u2014 "),bk=a("a"),yQe=o("Speech2TextConfig"),LQe=o(" (Speech2Text model)"),xQe=l(),Rm=a("li"),ooe=a("strong"),$Qe=o("speech_to_text_2"),kQe=o(" \u2014 "),vk=a("a"),SQe=o("Speech2Text2Config"),RQe=o(" (Speech2Text2 model)"),BQe=l(),Bm=a("li"),roe=a("strong"),PQe=o("splinter"),IQe=o(" \u2014 "),Fk=a("a"),qQe=o("SplinterConfig"),NQe=o(" (Splinter model)"),jQe=l(),Pm=a("li"),toe=a("strong"),DQe=o("squeezebert"),GQe=o(" \u2014 "),Tk=a("a"),OQe=o("SqueezeBertConfig"),VQe=o(" (SqueezeBERT model)"),XQe=l(),Im=a("li"),aoe=a("strong"),zQe=o("swin"),QQe=o(" \u2014 "),Mk=a("a"),WQe=o("SwinConfig"),HQe=o(" (Swin model)"),UQe=l(),qm=a("li"),noe=a("strong"),JQe=o("t5"),YQe=o(" \u2014 "),Ek=a("a"),KQe=o("T5Config"),ZQe=o(" (T5 model)"),eWe=l(),Nm=a("li"),soe=a("strong"),oWe=o("tapas"),rWe=o(" \u2014 "),Ck=a("a"),tWe=o("TapasConfig"),aWe=o(" (TAPAS model)"),nWe=l(),jm=a("li"),loe=a("strong"),sWe=o("tapex"),lWe=o(" \u2014 "),wk=a("a"),iWe=o("BartConfig"),dWe=o(" (TAPEX model)"),cWe=l(),Dm=a("li"),ioe=a("strong"),fWe=o("transfo-xl"),mWe=o(" \u2014 "),Ak=a("a"),gWe=o("TransfoXLConfig"),hWe=o(" (Transformer-XL model)"),pWe=l(),Gm=a("li"),doe=a("strong"),uWe=o("trocr"),_We=o(" \u2014 "),yk=a("a"),bWe=o("TrOCRConfig"),vWe=o(" (TrOCR model)"),FWe=l(),Om=a("li"),coe=a("strong"),TWe=o("unispeech"),MWe=o(" \u2014 "),Lk=a("a"),EWe=o("UniSpeechConfig"),CWe=o(" (UniSpeech model)"),wWe=l(),Vm=a("li"),foe=a("strong"),AWe=o("unispeech-sat"),yWe=o(" \u2014 "),xk=a("a"),LWe=o("UniSpeechSatConfig"),xWe=o(" (UniSpeechSat model)"),$We=l(),Xm=a("li"),moe=a("strong"),kWe=o("van"),SWe=o(" \u2014 "),$k=a("a"),RWe=o("VanConfig"),BWe=o(" (VAN model)"),PWe=l(),zm=a("li"),goe=a("strong"),IWe=o("vilt"),qWe=o(" \u2014 "),kk=a("a"),NWe=o("ViltConfig"),jWe=o(" (ViLT model)"),DWe=l(),Qm=a("li"),hoe=a("strong"),GWe=o("vision-encoder-decoder"),OWe=o(" \u2014 "),Sk=a("a"),VWe=o("VisionEncoderDecoderConfig"),XWe=o(" (Vision Encoder decoder model)"),zWe=l(),Wm=a("li"),poe=a("strong"),QWe=o("vision-text-dual-encoder"),WWe=o(" \u2014 "),Rk=a("a"),HWe=o("VisionTextDualEncoderConfig"),UWe=o(" (VisionTextDualEncoder model)"),JWe=l(),Hm=a("li"),uoe=a("strong"),YWe=o("visual_bert"),KWe=o(" \u2014 "),Bk=a("a"),ZWe=o("VisualBertConfig"),eHe=o(" (VisualBert model)"),oHe=l(),Um=a("li"),_oe=a("strong"),rHe=o("vit"),tHe=o(" \u2014 "),Pk=a("a"),aHe=o("ViTConfig"),nHe=o(" (ViT model)"),sHe=l(),Jm=a("li"),boe=a("strong"),lHe=o("vit_mae"),iHe=o(" \u2014 "),Ik=a("a"),dHe=o("ViTMAEConfig"),cHe=o(" (ViTMAE model)"),fHe=l(),Ym=a("li"),voe=a("strong"),mHe=o("wav2vec2"),gHe=o(" \u2014 "),qk=a("a"),hHe=o("Wav2Vec2Config"),pHe=o(" (Wav2Vec2 model)"),uHe=l(),Km=a("li"),Foe=a("strong"),_He=o("wavlm"),bHe=o(" \u2014 "),Nk=a("a"),vHe=o("WavLMConfig"),FHe=o(" (WavLM model)"),THe=l(),Zm=a("li"),Toe=a("strong"),MHe=o("xglm"),EHe=o(" \u2014 "),jk=a("a"),CHe=o("XGLMConfig"),wHe=o(" (XGLM model)"),AHe=l(),eg=a("li"),Moe=a("strong"),yHe=o("xlm"),LHe=o(" \u2014 "),Dk=a("a"),xHe=o("XLMConfig"),$He=o(" (XLM model)"),kHe=l(),og=a("li"),Eoe=a("strong"),SHe=o("xlm-prophetnet"),RHe=o(" \u2014 "),Gk=a("a"),BHe=o("XLMProphetNetConfig"),PHe=o(" (XLMProphetNet model)"),IHe=l(),rg=a("li"),Coe=a("strong"),qHe=o("xlm-roberta"),NHe=o(" \u2014 "),Ok=a("a"),jHe=o("XLMRobertaConfig"),DHe=o(" (XLM-RoBERTa model)"),GHe=l(),tg=a("li"),woe=a("strong"),OHe=o("xlm-roberta-xl"),VHe=o(" \u2014 "),Vk=a("a"),XHe=o("XLMRobertaXLConfig"),zHe=o(" (XLM-RoBERTa-XL model)"),QHe=l(),ag=a("li"),Aoe=a("strong"),WHe=o("xlnet"),HHe=o(" \u2014 "),Xk=a("a"),UHe=o("XLNetConfig"),JHe=o(" (XLNet model)"),YHe=l(),ng=a("li"),yoe=a("strong"),KHe=o("yolos"),ZHe=o(" \u2014 "),zk=a("a"),eUe=o("YolosConfig"),oUe=o(" (YOLOS model)"),rUe=l(),sg=a("li"),Loe=a("strong"),tUe=o("yoso"),aUe=o(" \u2014 "),Qk=a("a"),nUe=o("YosoConfig"),sUe=o(" (YOSO model)"),lUe=l(),F(lg.$$.fragment),iUe=l(),ig=a("div"),F(jw.$$.fragment),dUe=l(),xoe=a("p"),cUe=o("Register a new configuration for this class."),ePe=l(),mi=a("h2"),dg=a("a"),$oe=a("span"),F(Dw.$$.fragment),fUe=l(),koe=a("span"),mUe=o("AutoTokenizer"),oPe=l(),wo=a("div"),F(Gw.$$.fragment),gUe=l(),Ow=a("p"),hUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Wk=a("a"),pUe=o("AutoTokenizer.from_pretrained()"),uUe=o(" class method."),_Ue=l(),Vw=a("p"),bUe=o("This class cannot be instantiated directly using "),Soe=a("code"),vUe=o("__init__()"),FUe=o(" (throws an error)."),TUe=l(),Er=a("div"),F(Xw.$$.fragment),MUe=l(),Roe=a("p"),EUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),CUe=l(),Ta=a("p"),wUe=o("The tokenizer class to instantiate is selected based on the "),Boe=a("code"),AUe=o("model_type"),yUe=o(` property of the config object (either
passed as an argument or loaded from `),Poe=a("code"),LUe=o("pretrained_model_name_or_path"),xUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=a("code"),$Ue=o("pretrained_model_name_or_path"),kUe=o(":"),SUe=l(),k=a("ul"),yn=a("li"),qoe=a("strong"),RUe=o("albert"),BUe=o(" \u2014 "),Hk=a("a"),PUe=o("AlbertTokenizer"),IUe=o(" or "),Uk=a("a"),qUe=o("AlbertTokenizerFast"),NUe=o(" (ALBERT model)"),jUe=l(),Ln=a("li"),Noe=a("strong"),DUe=o("bart"),GUe=o(" \u2014 "),Jk=a("a"),OUe=o("BartTokenizer"),VUe=o(" or "),Yk=a("a"),XUe=o("BartTokenizerFast"),zUe=o(" (BART model)"),QUe=l(),xn=a("li"),joe=a("strong"),WUe=o("barthez"),HUe=o(" \u2014 "),Kk=a("a"),UUe=o("BarthezTokenizer"),JUe=o(" or "),Zk=a("a"),YUe=o("BarthezTokenizerFast"),KUe=o(" (BARThez model)"),ZUe=l(),cg=a("li"),Doe=a("strong"),eJe=o("bartpho"),oJe=o(" \u2014 "),eS=a("a"),rJe=o("BartphoTokenizer"),tJe=o(" (BARTpho model)"),aJe=l(),$n=a("li"),Goe=a("strong"),nJe=o("bert"),sJe=o(" \u2014 "),oS=a("a"),lJe=o("BertTokenizer"),iJe=o(" or "),rS=a("a"),dJe=o("BertTokenizerFast"),cJe=o(" (BERT model)"),fJe=l(),fg=a("li"),Ooe=a("strong"),mJe=o("bert-generation"),gJe=o(" \u2014 "),tS=a("a"),hJe=o("BertGenerationTokenizer"),pJe=o(" (Bert Generation model)"),uJe=l(),mg=a("li"),Voe=a("strong"),_Je=o("bert-japanese"),bJe=o(" \u2014 "),aS=a("a"),vJe=o("BertJapaneseTokenizer"),FJe=o(" (BertJapanese model)"),TJe=l(),gg=a("li"),Xoe=a("strong"),MJe=o("bertweet"),EJe=o(" \u2014 "),nS=a("a"),CJe=o("BertweetTokenizer"),wJe=o(" (Bertweet model)"),AJe=l(),kn=a("li"),zoe=a("strong"),yJe=o("big_bird"),LJe=o(" \u2014 "),sS=a("a"),xJe=o("BigBirdTokenizer"),$Je=o(" or "),lS=a("a"),kJe=o("BigBirdTokenizerFast"),SJe=o(" (BigBird model)"),RJe=l(),Sn=a("li"),Qoe=a("strong"),BJe=o("bigbird_pegasus"),PJe=o(" \u2014 "),iS=a("a"),IJe=o("PegasusTokenizer"),qJe=o(" or "),dS=a("a"),NJe=o("PegasusTokenizerFast"),jJe=o(" (BigBirdPegasus model)"),DJe=l(),Rn=a("li"),Woe=a("strong"),GJe=o("blenderbot"),OJe=o(" \u2014 "),cS=a("a"),VJe=o("BlenderbotTokenizer"),XJe=o(" or "),fS=a("a"),zJe=o("BlenderbotTokenizerFast"),QJe=o(" (Blenderbot model)"),WJe=l(),hg=a("li"),Hoe=a("strong"),HJe=o("blenderbot-small"),UJe=o(" \u2014 "),mS=a("a"),JJe=o("BlenderbotSmallTokenizer"),YJe=o(" (BlenderbotSmall model)"),KJe=l(),pg=a("li"),Uoe=a("strong"),ZJe=o("byt5"),eYe=o(" \u2014 "),gS=a("a"),oYe=o("ByT5Tokenizer"),rYe=o(" (ByT5 model)"),tYe=l(),Bn=a("li"),Joe=a("strong"),aYe=o("camembert"),nYe=o(" \u2014 "),hS=a("a"),sYe=o("CamembertTokenizer"),lYe=o(" or "),pS=a("a"),iYe=o("CamembertTokenizerFast"),dYe=o(" (CamemBERT model)"),cYe=l(),ug=a("li"),Yoe=a("strong"),fYe=o("canine"),mYe=o(" \u2014 "),uS=a("a"),gYe=o("CanineTokenizer"),hYe=o(" (Canine model)"),pYe=l(),Pn=a("li"),Koe=a("strong"),uYe=o("clip"),_Ye=o(" \u2014 "),_S=a("a"),bYe=o("CLIPTokenizer"),vYe=o(" or "),bS=a("a"),FYe=o("CLIPTokenizerFast"),TYe=o(" (CLIP model)"),MYe=l(),In=a("li"),Zoe=a("strong"),EYe=o("convbert"),CYe=o(" \u2014 "),vS=a("a"),wYe=o("ConvBertTokenizer"),AYe=o(" or "),FS=a("a"),yYe=o("ConvBertTokenizerFast"),LYe=o(" (ConvBERT model)"),xYe=l(),qn=a("li"),ere=a("strong"),$Ye=o("cpm"),kYe=o(" \u2014 "),TS=a("a"),SYe=o("CpmTokenizer"),RYe=o(" or "),MS=a("a"),BYe=o("CpmTokenizerFast"),PYe=o(" (CPM model)"),IYe=l(),_g=a("li"),ore=a("strong"),qYe=o("ctrl"),NYe=o(" \u2014 "),ES=a("a"),jYe=o("CTRLTokenizer"),DYe=o(" (CTRL model)"),GYe=l(),Nn=a("li"),rre=a("strong"),OYe=o("data2vec-text"),VYe=o(" \u2014 "),CS=a("a"),XYe=o("RobertaTokenizer"),zYe=o(" or "),wS=a("a"),QYe=o("RobertaTokenizerFast"),WYe=o(" (Data2VecText model)"),HYe=l(),jn=a("li"),tre=a("strong"),UYe=o("deberta"),JYe=o(" \u2014 "),AS=a("a"),YYe=o("DebertaTokenizer"),KYe=o(" or "),yS=a("a"),ZYe=o("DebertaTokenizerFast"),eKe=o(" (DeBERTa model)"),oKe=l(),Dn=a("li"),are=a("strong"),rKe=o("deberta-v2"),tKe=o(" \u2014 "),LS=a("a"),aKe=o("DebertaV2Tokenizer"),nKe=o(" or "),xS=a("a"),sKe=o("DebertaV2TokenizerFast"),lKe=o(" (DeBERTa-v2 model)"),iKe=l(),Gn=a("li"),nre=a("strong"),dKe=o("distilbert"),cKe=o(" \u2014 "),$S=a("a"),fKe=o("DistilBertTokenizer"),mKe=o(" or "),kS=a("a"),gKe=o("DistilBertTokenizerFast"),hKe=o(" (DistilBERT model)"),pKe=l(),On=a("li"),sre=a("strong"),uKe=o("dpr"),_Ke=o(" \u2014 "),SS=a("a"),bKe=o("DPRQuestionEncoderTokenizer"),vKe=o(" or "),RS=a("a"),FKe=o("DPRQuestionEncoderTokenizerFast"),TKe=o(" (DPR model)"),MKe=l(),Vn=a("li"),lre=a("strong"),EKe=o("electra"),CKe=o(" \u2014 "),BS=a("a"),wKe=o("ElectraTokenizer"),AKe=o(" or "),PS=a("a"),yKe=o("ElectraTokenizerFast"),LKe=o(" (ELECTRA model)"),xKe=l(),bg=a("li"),ire=a("strong"),$Ke=o("flaubert"),kKe=o(" \u2014 "),IS=a("a"),SKe=o("FlaubertTokenizer"),RKe=o(" (FlauBERT model)"),BKe=l(),Xn=a("li"),dre=a("strong"),PKe=o("fnet"),IKe=o(" \u2014 "),qS=a("a"),qKe=o("FNetTokenizer"),NKe=o(" or "),NS=a("a"),jKe=o("FNetTokenizerFast"),DKe=o(" (FNet model)"),GKe=l(),vg=a("li"),cre=a("strong"),OKe=o("fsmt"),VKe=o(" \u2014 "),jS=a("a"),XKe=o("FSMTTokenizer"),zKe=o(" (FairSeq Machine-Translation model)"),QKe=l(),zn=a("li"),fre=a("strong"),WKe=o("funnel"),HKe=o(" \u2014 "),DS=a("a"),UKe=o("FunnelTokenizer"),JKe=o(" or "),GS=a("a"),YKe=o("FunnelTokenizerFast"),KKe=o(" (Funnel Transformer model)"),ZKe=l(),Qn=a("li"),mre=a("strong"),eZe=o("gpt2"),oZe=o(" \u2014 "),OS=a("a"),rZe=o("GPT2Tokenizer"),tZe=o(" or "),VS=a("a"),aZe=o("GPT2TokenizerFast"),nZe=o(" (OpenAI GPT-2 model)"),sZe=l(),Wn=a("li"),gre=a("strong"),lZe=o("gpt_neo"),iZe=o(" \u2014 "),XS=a("a"),dZe=o("GPT2Tokenizer"),cZe=o(" or "),zS=a("a"),fZe=o("GPT2TokenizerFast"),mZe=o(" (GPT Neo model)"),gZe=l(),Hn=a("li"),hre=a("strong"),hZe=o("gptj"),pZe=o(" \u2014 "),QS=a("a"),uZe=o("GPT2Tokenizer"),_Ze=o(" or "),WS=a("a"),bZe=o("GPT2TokenizerFast"),vZe=o(" (GPT-J model)"),FZe=l(),Un=a("li"),pre=a("strong"),TZe=o("herbert"),MZe=o(" \u2014 "),HS=a("a"),EZe=o("HerbertTokenizer"),CZe=o(" or "),US=a("a"),wZe=o("HerbertTokenizerFast"),AZe=o(" (HerBERT model)"),yZe=l(),Fg=a("li"),ure=a("strong"),LZe=o("hubert"),xZe=o(" \u2014 "),JS=a("a"),$Ze=o("Wav2Vec2CTCTokenizer"),kZe=o(" (Hubert model)"),SZe=l(),Jn=a("li"),_re=a("strong"),RZe=o("ibert"),BZe=o(" \u2014 "),YS=a("a"),PZe=o("RobertaTokenizer"),IZe=o(" or "),KS=a("a"),qZe=o("RobertaTokenizerFast"),NZe=o(" (I-BERT model)"),jZe=l(),Yn=a("li"),bre=a("strong"),DZe=o("layoutlm"),GZe=o(" \u2014 "),ZS=a("a"),OZe=o("LayoutLMTokenizer"),VZe=o(" or "),eR=a("a"),XZe=o("LayoutLMTokenizerFast"),zZe=o(" (LayoutLM model)"),QZe=l(),Kn=a("li"),vre=a("strong"),WZe=o("layoutlmv2"),HZe=o(" \u2014 "),oR=a("a"),UZe=o("LayoutLMv2Tokenizer"),JZe=o(" or "),rR=a("a"),YZe=o("LayoutLMv2TokenizerFast"),KZe=o(" (LayoutLMv2 model)"),ZZe=l(),Zn=a("li"),Fre=a("strong"),eeo=o("layoutlmv3"),oeo=o(" \u2014 "),tR=a("a"),reo=o("LayoutLMv3Tokenizer"),teo=o(" or "),aR=a("a"),aeo=o("LayoutLMv3TokenizerFast"),neo=o(" (LayoutLMv3 model)"),seo=l(),es=a("li"),Tre=a("strong"),leo=o("layoutxlm"),ieo=o(" \u2014 "),nR=a("a"),deo=o("LayoutXLMTokenizer"),ceo=o(" or "),sR=a("a"),feo=o("LayoutXLMTokenizerFast"),meo=o(" (LayoutXLM model)"),geo=l(),os=a("li"),Mre=a("strong"),heo=o("led"),peo=o(" \u2014 "),lR=a("a"),ueo=o("LEDTokenizer"),_eo=o(" or "),iR=a("a"),beo=o("LEDTokenizerFast"),veo=o(" (LED model)"),Feo=l(),rs=a("li"),Ere=a("strong"),Teo=o("longformer"),Meo=o(" \u2014 "),dR=a("a"),Eeo=o("LongformerTokenizer"),Ceo=o(" or "),cR=a("a"),weo=o("LongformerTokenizerFast"),Aeo=o(" (Longformer model)"),yeo=l(),Tg=a("li"),Cre=a("strong"),Leo=o("luke"),xeo=o(" \u2014 "),fR=a("a"),$eo=o("LukeTokenizer"),keo=o(" (LUKE model)"),Seo=l(),ts=a("li"),wre=a("strong"),Reo=o("lxmert"),Beo=o(" \u2014 "),mR=a("a"),Peo=o("LxmertTokenizer"),Ieo=o(" or "),gR=a("a"),qeo=o("LxmertTokenizerFast"),Neo=o(" (LXMERT model)"),jeo=l(),Mg=a("li"),Are=a("strong"),Deo=o("m2m_100"),Geo=o(" \u2014 "),hR=a("a"),Oeo=o("M2M100Tokenizer"),Veo=o(" (M2M100 model)"),Xeo=l(),Eg=a("li"),yre=a("strong"),zeo=o("marian"),Qeo=o(" \u2014 "),pR=a("a"),Weo=o("MarianTokenizer"),Heo=o(" (Marian model)"),Ueo=l(),as=a("li"),Lre=a("strong"),Jeo=o("mbart"),Yeo=o(" \u2014 "),uR=a("a"),Keo=o("MBartTokenizer"),Zeo=o(" or "),_R=a("a"),eoo=o("MBartTokenizerFast"),ooo=o(" (mBART model)"),roo=l(),ns=a("li"),xre=a("strong"),too=o("mbart50"),aoo=o(" \u2014 "),bR=a("a"),noo=o("MBart50Tokenizer"),soo=o(" or "),vR=a("a"),loo=o("MBart50TokenizerFast"),ioo=o(" (mBART-50 model)"),doo=l(),ss=a("li"),$re=a("strong"),coo=o("megatron-bert"),foo=o(" \u2014 "),FR=a("a"),moo=o("BertTokenizer"),goo=o(" or "),TR=a("a"),hoo=o("BertTokenizerFast"),poo=o(" (MegatronBert model)"),uoo=l(),Cg=a("li"),kre=a("strong"),_oo=o("mluke"),boo=o(" \u2014 "),MR=a("a"),voo=o("MLukeTokenizer"),Foo=o(" (mLUKE model)"),Too=l(),ls=a("li"),Sre=a("strong"),Moo=o("mobilebert"),Eoo=o(" \u2014 "),ER=a("a"),Coo=o("MobileBertTokenizer"),woo=o(" or "),CR=a("a"),Aoo=o("MobileBertTokenizerFast"),yoo=o(" (MobileBERT model)"),Loo=l(),is=a("li"),Rre=a("strong"),xoo=o("mpnet"),$oo=o(" \u2014 "),wR=a("a"),koo=o("MPNetTokenizer"),Soo=o(" or "),AR=a("a"),Roo=o("MPNetTokenizerFast"),Boo=o(" (MPNet model)"),Poo=l(),ds=a("li"),Bre=a("strong"),Ioo=o("mt5"),qoo=o(" \u2014 "),yR=a("a"),Noo=o("MT5Tokenizer"),joo=o(" or "),LR=a("a"),Doo=o("MT5TokenizerFast"),Goo=o(" (mT5 model)"),Ooo=l(),cs=a("li"),Pre=a("strong"),Voo=o("nystromformer"),Xoo=o(" \u2014 "),xR=a("a"),zoo=o("AlbertTokenizer"),Qoo=o(" or "),$R=a("a"),Woo=o("AlbertTokenizerFast"),Hoo=o(" (Nystromformer model)"),Uoo=l(),fs=a("li"),Ire=a("strong"),Joo=o("openai-gpt"),Yoo=o(" \u2014 "),kR=a("a"),Koo=o("OpenAIGPTTokenizer"),Zoo=o(" or "),SR=a("a"),ero=o("OpenAIGPTTokenizerFast"),oro=o(" (OpenAI GPT model)"),rro=l(),ms=a("li"),qre=a("strong"),tro=o("pegasus"),aro=o(" \u2014 "),RR=a("a"),nro=o("PegasusTokenizer"),sro=o(" or "),BR=a("a"),lro=o("PegasusTokenizerFast"),iro=o(" (Pegasus model)"),dro=l(),wg=a("li"),Nre=a("strong"),cro=o("perceiver"),fro=o(" \u2014 "),PR=a("a"),mro=o("PerceiverTokenizer"),gro=o(" (Perceiver model)"),hro=l(),Ag=a("li"),jre=a("strong"),pro=o("phobert"),uro=o(" \u2014 "),IR=a("a"),_ro=o("PhobertTokenizer"),bro=o(" (PhoBERT model)"),vro=l(),yg=a("li"),Dre=a("strong"),Fro=o("plbart"),Tro=o(" \u2014 "),qR=a("a"),Mro=o("PLBartTokenizer"),Ero=o(" (PLBart model)"),Cro=l(),Lg=a("li"),Gre=a("strong"),wro=o("prophetnet"),Aro=o(" \u2014 "),NR=a("a"),yro=o("ProphetNetTokenizer"),Lro=o(" (ProphetNet model)"),xro=l(),gs=a("li"),Ore=a("strong"),$ro=o("qdqbert"),kro=o(" \u2014 "),jR=a("a"),Sro=o("BertTokenizer"),Rro=o(" or "),DR=a("a"),Bro=o("BertTokenizerFast"),Pro=o(" (QDQBert model)"),Iro=l(),xg=a("li"),Vre=a("strong"),qro=o("rag"),Nro=o(" \u2014 "),GR=a("a"),jro=o("RagTokenizer"),Dro=o(" (RAG model)"),Gro=l(),hs=a("li"),Xre=a("strong"),Oro=o("realm"),Vro=o(" \u2014 "),OR=a("a"),Xro=o("RealmTokenizer"),zro=o(" or "),VR=a("a"),Qro=o("RealmTokenizerFast"),Wro=o(" (Realm model)"),Hro=l(),ps=a("li"),zre=a("strong"),Uro=o("reformer"),Jro=o(" \u2014 "),XR=a("a"),Yro=o("ReformerTokenizer"),Kro=o(" or "),zR=a("a"),Zro=o("ReformerTokenizerFast"),eto=o(" (Reformer model)"),oto=l(),us=a("li"),Qre=a("strong"),rto=o("rembert"),tto=o(" \u2014 "),QR=a("a"),ato=o("RemBertTokenizer"),nto=o(" or "),WR=a("a"),sto=o("RemBertTokenizerFast"),lto=o(" (RemBERT model)"),ito=l(),_s=a("li"),Wre=a("strong"),dto=o("retribert"),cto=o(" \u2014 "),HR=a("a"),fto=o("RetriBertTokenizer"),mto=o(" or "),UR=a("a"),gto=o("RetriBertTokenizerFast"),hto=o(" (RetriBERT model)"),pto=l(),bs=a("li"),Hre=a("strong"),uto=o("roberta"),_to=o(" \u2014 "),JR=a("a"),bto=o("RobertaTokenizer"),vto=o(" or "),YR=a("a"),Fto=o("RobertaTokenizerFast"),Tto=o(" (RoBERTa model)"),Mto=l(),vs=a("li"),Ure=a("strong"),Eto=o("roformer"),Cto=o(" \u2014 "),KR=a("a"),wto=o("RoFormerTokenizer"),Ato=o(" or "),ZR=a("a"),yto=o("RoFormerTokenizerFast"),Lto=o(" (RoFormer model)"),xto=l(),$g=a("li"),Jre=a("strong"),$to=o("speech_to_text"),kto=o(" \u2014 "),eB=a("a"),Sto=o("Speech2TextTokenizer"),Rto=o(" (Speech2Text model)"),Bto=l(),kg=a("li"),Yre=a("strong"),Pto=o("speech_to_text_2"),Ito=o(" \u2014 "),oB=a("a"),qto=o("Speech2Text2Tokenizer"),Nto=o(" (Speech2Text2 model)"),jto=l(),Fs=a("li"),Kre=a("strong"),Dto=o("splinter"),Gto=o(" \u2014 "),rB=a("a"),Oto=o("SplinterTokenizer"),Vto=o(" or "),tB=a("a"),Xto=o("SplinterTokenizerFast"),zto=o(" (Splinter model)"),Qto=l(),Ts=a("li"),Zre=a("strong"),Wto=o("squeezebert"),Hto=o(" \u2014 "),aB=a("a"),Uto=o("SqueezeBertTokenizer"),Jto=o(" or "),nB=a("a"),Yto=o("SqueezeBertTokenizerFast"),Kto=o(" (SqueezeBERT model)"),Zto=l(),Ms=a("li"),ete=a("strong"),eao=o("t5"),oao=o(" \u2014 "),sB=a("a"),rao=o("T5Tokenizer"),tao=o(" or "),lB=a("a"),aao=o("T5TokenizerFast"),nao=o(" (T5 model)"),sao=l(),Sg=a("li"),ote=a("strong"),lao=o("tapas"),iao=o(" \u2014 "),iB=a("a"),dao=o("TapasTokenizer"),cao=o(" (TAPAS model)"),fao=l(),Rg=a("li"),rte=a("strong"),mao=o("tapex"),gao=o(" \u2014 "),dB=a("a"),hao=o("TapexTokenizer"),pao=o(" (TAPEX model)"),uao=l(),Bg=a("li"),tte=a("strong"),_ao=o("transfo-xl"),bao=o(" \u2014 "),cB=a("a"),vao=o("TransfoXLTokenizer"),Fao=o(" (Transformer-XL model)"),Tao=l(),Es=a("li"),ate=a("strong"),Mao=o("visual_bert"),Eao=o(" \u2014 "),fB=a("a"),Cao=o("BertTokenizer"),wao=o(" or "),mB=a("a"),Aao=o("BertTokenizerFast"),yao=o(" (VisualBert model)"),Lao=l(),Pg=a("li"),nte=a("strong"),xao=o("wav2vec2"),$ao=o(" \u2014 "),gB=a("a"),kao=o("Wav2Vec2CTCTokenizer"),Sao=o(" (Wav2Vec2 model)"),Rao=l(),Ig=a("li"),ste=a("strong"),Bao=o("wav2vec2_phoneme"),Pao=o(" \u2014 "),hB=a("a"),Iao=o("Wav2Vec2PhonemeCTCTokenizer"),qao=o(" (Wav2Vec2Phoneme model)"),Nao=l(),Cs=a("li"),lte=a("strong"),jao=o("xglm"),Dao=o(" \u2014 "),pB=a("a"),Gao=o("XGLMTokenizer"),Oao=o(" or "),uB=a("a"),Vao=o("XGLMTokenizerFast"),Xao=o(" (XGLM model)"),zao=l(),qg=a("li"),ite=a("strong"),Qao=o("xlm"),Wao=o(" \u2014 "),_B=a("a"),Hao=o("XLMTokenizer"),Uao=o(" (XLM model)"),Jao=l(),Ng=a("li"),dte=a("strong"),Yao=o("xlm-prophetnet"),Kao=o(" \u2014 "),bB=a("a"),Zao=o("XLMProphetNetTokenizer"),eno=o(" (XLMProphetNet model)"),ono=l(),ws=a("li"),cte=a("strong"),rno=o("xlm-roberta"),tno=o(" \u2014 "),vB=a("a"),ano=o("XLMRobertaTokenizer"),nno=o(" or "),FB=a("a"),sno=o("XLMRobertaTokenizerFast"),lno=o(" (XLM-RoBERTa model)"),ino=l(),As=a("li"),fte=a("strong"),dno=o("xlm-roberta-xl"),cno=o(" \u2014 "),TB=a("a"),fno=o("RobertaTokenizer"),mno=o(" or "),MB=a("a"),gno=o("RobertaTokenizerFast"),hno=o(" (XLM-RoBERTa-XL model)"),pno=l(),ys=a("li"),mte=a("strong"),uno=o("xlnet"),_no=o(" \u2014 "),EB=a("a"),bno=o("XLNetTokenizer"),vno=o(" or "),CB=a("a"),Fno=o("XLNetTokenizerFast"),Tno=o(" (XLNet model)"),Mno=l(),Ls=a("li"),gte=a("strong"),Eno=o("yoso"),Cno=o(" \u2014 "),wB=a("a"),wno=o("AlbertTokenizer"),Ano=o(" or "),AB=a("a"),yno=o("AlbertTokenizerFast"),Lno=o(" (YOSO model)"),xno=l(),F(jg.$$.fragment),$no=l(),Dg=a("div"),F(zw.$$.fragment),kno=l(),hte=a("p"),Sno=o("Register a new tokenizer in this mapping."),rPe=l(),gi=a("h2"),Gg=a("a"),pte=a("span"),F(Qw.$$.fragment),Rno=l(),ute=a("span"),Bno=o("AutoFeatureExtractor"),tPe=l(),Ao=a("div"),F(Ww.$$.fragment),Pno=l(),Hw=a("p"),Ino=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),yB=a("a"),qno=o("AutoFeatureExtractor.from_pretrained()"),Nno=o(" class method."),jno=l(),Uw=a("p"),Dno=o("This class cannot be instantiated directly using "),_te=a("code"),Gno=o("__init__()"),Ono=o(" (throws an error)."),Vno=l(),Qe=a("div"),F(Jw.$$.fragment),Xno=l(),bte=a("p"),zno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qno=l(),Ma=a("p"),Wno=o("The feature extractor class to instantiate is selected based on the "),vte=a("code"),Hno=o("model_type"),Uno=o(` property of the config object
(either passed as an argument or loaded from `),Fte=a("code"),Jno=o("pretrained_model_name_or_path"),Yno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Tte=a("code"),Kno=o("pretrained_model_name_or_path"),Zno=o(":"),eso=l(),oe=a("ul"),Og=a("li"),Mte=a("strong"),oso=o("beit"),rso=o(" \u2014 "),LB=a("a"),tso=o("BeitFeatureExtractor"),aso=o(" (BEiT model)"),nso=l(),Vg=a("li"),Ete=a("strong"),sso=o("clip"),lso=o(" \u2014 "),xB=a("a"),iso=o("CLIPFeatureExtractor"),dso=o(" (CLIP model)"),cso=l(),Xg=a("li"),Cte=a("strong"),fso=o("convnext"),mso=o(" \u2014 "),$B=a("a"),gso=o("ConvNextFeatureExtractor"),hso=o(" (ConvNext model)"),pso=l(),zg=a("li"),wte=a("strong"),uso=o("data2vec-audio"),_so=o(" \u2014 "),kB=a("a"),bso=o("Wav2Vec2FeatureExtractor"),vso=o(" (Data2VecAudio model)"),Fso=l(),Qg=a("li"),Ate=a("strong"),Tso=o("data2vec-vision"),Mso=o(" \u2014 "),SB=a("a"),Eso=o("BeitFeatureExtractor"),Cso=o(" (Data2VecVision model)"),wso=l(),Wg=a("li"),yte=a("strong"),Aso=o("deit"),yso=o(" \u2014 "),RB=a("a"),Lso=o("DeiTFeatureExtractor"),xso=o(" (DeiT model)"),$so=l(),Hg=a("li"),Lte=a("strong"),kso=o("detr"),Sso=o(" \u2014 "),BB=a("a"),Rso=o("DetrFeatureExtractor"),Bso=o(" (DETR model)"),Pso=l(),Ug=a("li"),xte=a("strong"),Iso=o("dpt"),qso=o(" \u2014 "),PB=a("a"),Nso=o("DPTFeatureExtractor"),jso=o(" (DPT model)"),Dso=l(),Jg=a("li"),$te=a("strong"),Gso=o("glpn"),Oso=o(" \u2014 "),IB=a("a"),Vso=o("GLPNFeatureExtractor"),Xso=o(" (GLPN model)"),zso=l(),Yg=a("li"),kte=a("strong"),Qso=o("hubert"),Wso=o(" \u2014 "),qB=a("a"),Hso=o("Wav2Vec2FeatureExtractor"),Uso=o(" (Hubert model)"),Jso=l(),Kg=a("li"),Ste=a("strong"),Yso=o("layoutlmv2"),Kso=o(" \u2014 "),NB=a("a"),Zso=o("LayoutLMv2FeatureExtractor"),elo=o(" (LayoutLMv2 model)"),olo=l(),Zg=a("li"),Rte=a("strong"),rlo=o("layoutlmv3"),tlo=o(" \u2014 "),jB=a("a"),alo=o("LayoutLMv3FeatureExtractor"),nlo=o(" (LayoutLMv3 model)"),slo=l(),eh=a("li"),Bte=a("strong"),llo=o("maskformer"),ilo=o(" \u2014 "),DB=a("a"),dlo=o("MaskFormerFeatureExtractor"),clo=o(" (MaskFormer model)"),flo=l(),oh=a("li"),Pte=a("strong"),mlo=o("perceiver"),glo=o(" \u2014 "),GB=a("a"),hlo=o("PerceiverFeatureExtractor"),plo=o(" (Perceiver model)"),ulo=l(),rh=a("li"),Ite=a("strong"),_lo=o("poolformer"),blo=o(" \u2014 "),OB=a("a"),vlo=o("PoolFormerFeatureExtractor"),Flo=o(" (PoolFormer model)"),Tlo=l(),th=a("li"),qte=a("strong"),Mlo=o("regnet"),Elo=o(" \u2014 "),VB=a("a"),Clo=o("ConvNextFeatureExtractor"),wlo=o(" (RegNet model)"),Alo=l(),ah=a("li"),Nte=a("strong"),ylo=o("resnet"),Llo=o(" \u2014 "),XB=a("a"),xlo=o("ConvNextFeatureExtractor"),$lo=o(" (ResNet model)"),klo=l(),nh=a("li"),jte=a("strong"),Slo=o("segformer"),Rlo=o(" \u2014 "),zB=a("a"),Blo=o("SegformerFeatureExtractor"),Plo=o(" (SegFormer model)"),Ilo=l(),sh=a("li"),Dte=a("strong"),qlo=o("speech_to_text"),Nlo=o(" \u2014 "),QB=a("a"),jlo=o("Speech2TextFeatureExtractor"),Dlo=o(" (Speech2Text model)"),Glo=l(),lh=a("li"),Gte=a("strong"),Olo=o("swin"),Vlo=o(" \u2014 "),WB=a("a"),Xlo=o("ViTFeatureExtractor"),zlo=o(" (Swin model)"),Qlo=l(),ih=a("li"),Ote=a("strong"),Wlo=o("van"),Hlo=o(" \u2014 "),HB=a("a"),Ulo=o("ConvNextFeatureExtractor"),Jlo=o(" (VAN model)"),Ylo=l(),dh=a("li"),Vte=a("strong"),Klo=o("vit"),Zlo=o(" \u2014 "),UB=a("a"),eio=o("ViTFeatureExtractor"),oio=o(" (ViT model)"),rio=l(),ch=a("li"),Xte=a("strong"),tio=o("vit_mae"),aio=o(" \u2014 "),JB=a("a"),nio=o("ViTFeatureExtractor"),sio=o(" (ViTMAE model)"),lio=l(),fh=a("li"),zte=a("strong"),iio=o("wav2vec2"),dio=o(" \u2014 "),YB=a("a"),cio=o("Wav2Vec2FeatureExtractor"),fio=o(" (Wav2Vec2 model)"),mio=l(),mh=a("li"),Qte=a("strong"),gio=o("yolos"),hio=o(" \u2014 "),KB=a("a"),pio=o("YolosFeatureExtractor"),uio=o(" (YOLOS model)"),_io=l(),F(gh.$$.fragment),bio=l(),F(hh.$$.fragment),vio=l(),ph=a("div"),F(Yw.$$.fragment),Fio=l(),Wte=a("p"),Tio=o("Register a new feature extractor for this class."),aPe=l(),hi=a("h2"),uh=a("a"),Hte=a("span"),F(Kw.$$.fragment),Mio=l(),Ute=a("span"),Eio=o("AutoProcessor"),nPe=l(),yo=a("div"),F(Zw.$$.fragment),Cio=l(),eA=a("p"),wio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZB=a("a"),Aio=o("AutoProcessor.from_pretrained()"),yio=o(" class method."),Lio=l(),oA=a("p"),xio=o("This class cannot be instantiated directly using "),Jte=a("code"),$io=o("__init__()"),kio=o(" (throws an error)."),Sio=l(),We=a("div"),F(rA.$$.fragment),Rio=l(),Yte=a("p"),Bio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Pio=l(),pi=a("p"),Iio=o("The processor class to instantiate is selected based on the "),Kte=a("code"),qio=o("model_type"),Nio=o(` property of the config object (either
passed as an argument or loaded from `),Zte=a("code"),jio=o("pretrained_model_name_or_path"),Dio=o(" if possible):"),Gio=l(),be=a("ul"),_h=a("li"),eae=a("strong"),Oio=o("clip"),Vio=o(" \u2014 "),eP=a("a"),Xio=o("CLIPProcessor"),zio=o(" (CLIP model)"),Qio=l(),bh=a("li"),oae=a("strong"),Wio=o("layoutlmv2"),Hio=o(" \u2014 "),oP=a("a"),Uio=o("LayoutLMv2Processor"),Jio=o(" (LayoutLMv2 model)"),Yio=l(),vh=a("li"),rae=a("strong"),Kio=o("layoutlmv3"),Zio=o(" \u2014 "),rP=a("a"),edo=o("LayoutLMv3Processor"),odo=o(" (LayoutLMv3 model)"),rdo=l(),Fh=a("li"),tae=a("strong"),tdo=o("layoutxlm"),ado=o(" \u2014 "),tP=a("a"),ndo=o("LayoutXLMProcessor"),sdo=o(" (LayoutXLM model)"),ldo=l(),Th=a("li"),aae=a("strong"),ido=o("sew"),ddo=o(" \u2014 "),aP=a("a"),cdo=o("Wav2Vec2Processor"),fdo=o(" (SEW model)"),mdo=l(),Mh=a("li"),nae=a("strong"),gdo=o("sew-d"),hdo=o(" \u2014 "),nP=a("a"),pdo=o("Wav2Vec2Processor"),udo=o(" (SEW-D model)"),_do=l(),Eh=a("li"),sae=a("strong"),bdo=o("speech_to_text"),vdo=o(" \u2014 "),sP=a("a"),Fdo=o("Speech2TextProcessor"),Tdo=o(" (Speech2Text model)"),Mdo=l(),Ch=a("li"),lae=a("strong"),Edo=o("speech_to_text_2"),Cdo=o(" \u2014 "),lP=a("a"),wdo=o("Speech2Text2Processor"),Ado=o(" (Speech2Text2 model)"),ydo=l(),wh=a("li"),iae=a("strong"),Ldo=o("trocr"),xdo=o(" \u2014 "),iP=a("a"),$do=o("TrOCRProcessor"),kdo=o(" (TrOCR model)"),Sdo=l(),Ah=a("li"),dae=a("strong"),Rdo=o("unispeech"),Bdo=o(" \u2014 "),dP=a("a"),Pdo=o("Wav2Vec2Processor"),Ido=o(" (UniSpeech model)"),qdo=l(),yh=a("li"),cae=a("strong"),Ndo=o("unispeech-sat"),jdo=o(" \u2014 "),cP=a("a"),Ddo=o("Wav2Vec2Processor"),Gdo=o(" (UniSpeechSat model)"),Odo=l(),Lh=a("li"),fae=a("strong"),Vdo=o("vilt"),Xdo=o(" \u2014 "),fP=a("a"),zdo=o("ViltProcessor"),Qdo=o(" (ViLT model)"),Wdo=l(),xh=a("li"),mae=a("strong"),Hdo=o("vision-text-dual-encoder"),Udo=o(" \u2014 "),mP=a("a"),Jdo=o("VisionTextDualEncoderProcessor"),Ydo=o(" (VisionTextDualEncoder model)"),Kdo=l(),$h=a("li"),gae=a("strong"),Zdo=o("wav2vec2"),eco=o(" \u2014 "),gP=a("a"),oco=o("Wav2Vec2Processor"),rco=o(" (Wav2Vec2 model)"),tco=l(),kh=a("li"),hae=a("strong"),aco=o("wavlm"),nco=o(" \u2014 "),hP=a("a"),sco=o("Wav2Vec2Processor"),lco=o(" (WavLM model)"),ico=l(),F(Sh.$$.fragment),dco=l(),F(Rh.$$.fragment),cco=l(),Bh=a("div"),F(tA.$$.fragment),fco=l(),pae=a("p"),mco=o("Register a new processor for this class."),sPe=l(),ui=a("h2"),Ph=a("a"),uae=a("span"),F(aA.$$.fragment),gco=l(),_ae=a("span"),hco=o("AutoModel"),lPe=l(),Lo=a("div"),F(nA.$$.fragment),pco=l(),_i=a("p"),uco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pP=a("a"),_co=o("from_pretrained()"),bco=o(" class method or the "),uP=a("a"),vco=o("from_config()"),Fco=o(` class
method.`),Tco=l(),sA=a("p"),Mco=o("This class cannot be instantiated directly using "),bae=a("code"),Eco=o("__init__()"),Cco=o(" (throws an error)."),wco=l(),Zr=a("div"),F(lA.$$.fragment),Aco=l(),vae=a("p"),yco=o("Instantiates one of the base model classes of the library from a configuration."),Lco=l(),bi=a("p"),xco=o(`Note:
Loading a model from its configuration file does `),Fae=a("strong"),$co=o("not"),kco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_P=a("a"),Sco=o("from_pretrained()"),Rco=o(" to load the model weights."),Bco=l(),F(Ih.$$.fragment),Pco=l(),He=a("div"),F(iA.$$.fragment),Ico=l(),Tae=a("p"),qco=o("Instantiate one of the base model classes of the library from a pretrained model."),Nco=l(),Ea=a("p"),jco=o("The model class to instantiate is selected based on the "),Mae=a("code"),Dco=o("model_type"),Gco=o(` property of the config object (either
passed as an argument or loaded from `),Eae=a("code"),Oco=o("pretrained_model_name_or_path"),Vco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cae=a("code"),Xco=o("pretrained_model_name_or_path"),zco=o(":"),Qco=l(),x=a("ul"),qh=a("li"),wae=a("strong"),Wco=o("albert"),Hco=o(" \u2014 "),bP=a("a"),Uco=o("AlbertModel"),Jco=o(" (ALBERT model)"),Yco=l(),Nh=a("li"),Aae=a("strong"),Kco=o("bart"),Zco=o(" \u2014 "),vP=a("a"),efo=o("BartModel"),ofo=o(" (BART model)"),rfo=l(),jh=a("li"),yae=a("strong"),tfo=o("beit"),afo=o(" \u2014 "),FP=a("a"),nfo=o("BeitModel"),sfo=o(" (BEiT model)"),lfo=l(),Dh=a("li"),Lae=a("strong"),ifo=o("bert"),dfo=o(" \u2014 "),TP=a("a"),cfo=o("BertModel"),ffo=o(" (BERT model)"),mfo=l(),Gh=a("li"),xae=a("strong"),gfo=o("bert-generation"),hfo=o(" \u2014 "),MP=a("a"),pfo=o("BertGenerationEncoder"),ufo=o(" (Bert Generation model)"),_fo=l(),Oh=a("li"),$ae=a("strong"),bfo=o("big_bird"),vfo=o(" \u2014 "),EP=a("a"),Ffo=o("BigBirdModel"),Tfo=o(" (BigBird model)"),Mfo=l(),Vh=a("li"),kae=a("strong"),Efo=o("bigbird_pegasus"),Cfo=o(" \u2014 "),CP=a("a"),wfo=o("BigBirdPegasusModel"),Afo=o(" (BigBirdPegasus model)"),yfo=l(),Xh=a("li"),Sae=a("strong"),Lfo=o("blenderbot"),xfo=o(" \u2014 "),wP=a("a"),$fo=o("BlenderbotModel"),kfo=o(" (Blenderbot model)"),Sfo=l(),zh=a("li"),Rae=a("strong"),Rfo=o("blenderbot-small"),Bfo=o(" \u2014 "),AP=a("a"),Pfo=o("BlenderbotSmallModel"),Ifo=o(" (BlenderbotSmall model)"),qfo=l(),Qh=a("li"),Bae=a("strong"),Nfo=o("camembert"),jfo=o(" \u2014 "),yP=a("a"),Dfo=o("CamembertModel"),Gfo=o(" (CamemBERT model)"),Ofo=l(),Wh=a("li"),Pae=a("strong"),Vfo=o("canine"),Xfo=o(" \u2014 "),LP=a("a"),zfo=o("CanineModel"),Qfo=o(" (Canine model)"),Wfo=l(),Hh=a("li"),Iae=a("strong"),Hfo=o("clip"),Ufo=o(" \u2014 "),xP=a("a"),Jfo=o("CLIPModel"),Yfo=o(" (CLIP model)"),Kfo=l(),Uh=a("li"),qae=a("strong"),Zfo=o("convbert"),emo=o(" \u2014 "),$P=a("a"),omo=o("ConvBertModel"),rmo=o(" (ConvBERT model)"),tmo=l(),Jh=a("li"),Nae=a("strong"),amo=o("convnext"),nmo=o(" \u2014 "),kP=a("a"),smo=o("ConvNextModel"),lmo=o(" (ConvNext model)"),imo=l(),Yh=a("li"),jae=a("strong"),dmo=o("ctrl"),cmo=o(" \u2014 "),SP=a("a"),fmo=o("CTRLModel"),mmo=o(" (CTRL model)"),gmo=l(),Kh=a("li"),Dae=a("strong"),hmo=o("data2vec-audio"),pmo=o(" \u2014 "),RP=a("a"),umo=o("Data2VecAudioModel"),_mo=o(" (Data2VecAudio model)"),bmo=l(),Zh=a("li"),Gae=a("strong"),vmo=o("data2vec-text"),Fmo=o(" \u2014 "),BP=a("a"),Tmo=o("Data2VecTextModel"),Mmo=o(" (Data2VecText model)"),Emo=l(),ep=a("li"),Oae=a("strong"),Cmo=o("data2vec-vision"),wmo=o(" \u2014 "),PP=a("a"),Amo=o("Data2VecVisionModel"),ymo=o(" (Data2VecVision model)"),Lmo=l(),op=a("li"),Vae=a("strong"),xmo=o("deberta"),$mo=o(" \u2014 "),IP=a("a"),kmo=o("DebertaModel"),Smo=o(" (DeBERTa model)"),Rmo=l(),rp=a("li"),Xae=a("strong"),Bmo=o("deberta-v2"),Pmo=o(" \u2014 "),qP=a("a"),Imo=o("DebertaV2Model"),qmo=o(" (DeBERTa-v2 model)"),Nmo=l(),tp=a("li"),zae=a("strong"),jmo=o("decision_transformer"),Dmo=o(" \u2014 "),NP=a("a"),Gmo=o("DecisionTransformerModel"),Omo=o(" (Decision Transformer model)"),Vmo=l(),ap=a("li"),Qae=a("strong"),Xmo=o("deit"),zmo=o(" \u2014 "),jP=a("a"),Qmo=o("DeiTModel"),Wmo=o(" (DeiT model)"),Hmo=l(),np=a("li"),Wae=a("strong"),Umo=o("detr"),Jmo=o(" \u2014 "),DP=a("a"),Ymo=o("DetrModel"),Kmo=o(" (DETR model)"),Zmo=l(),sp=a("li"),Hae=a("strong"),ego=o("distilbert"),ogo=o(" \u2014 "),GP=a("a"),rgo=o("DistilBertModel"),tgo=o(" (DistilBERT model)"),ago=l(),lp=a("li"),Uae=a("strong"),ngo=o("dpr"),sgo=o(" \u2014 "),OP=a("a"),lgo=o("DPRQuestionEncoder"),igo=o(" (DPR model)"),dgo=l(),ip=a("li"),Jae=a("strong"),cgo=o("dpt"),fgo=o(" \u2014 "),VP=a("a"),mgo=o("DPTModel"),ggo=o(" (DPT model)"),hgo=l(),dp=a("li"),Yae=a("strong"),pgo=o("electra"),ugo=o(" \u2014 "),XP=a("a"),_go=o("ElectraModel"),bgo=o(" (ELECTRA model)"),vgo=l(),cp=a("li"),Kae=a("strong"),Fgo=o("flaubert"),Tgo=o(" \u2014 "),zP=a("a"),Mgo=o("FlaubertModel"),Ego=o(" (FlauBERT model)"),Cgo=l(),fp=a("li"),Zae=a("strong"),wgo=o("fnet"),Ago=o(" \u2014 "),QP=a("a"),ygo=o("FNetModel"),Lgo=o(" (FNet model)"),xgo=l(),mp=a("li"),ene=a("strong"),$go=o("fsmt"),kgo=o(" \u2014 "),WP=a("a"),Sgo=o("FSMTModel"),Rgo=o(" (FairSeq Machine-Translation model)"),Bgo=l(),xs=a("li"),one=a("strong"),Pgo=o("funnel"),Igo=o(" \u2014 "),HP=a("a"),qgo=o("FunnelModel"),Ngo=o(" or "),UP=a("a"),jgo=o("FunnelBaseModel"),Dgo=o(" (Funnel Transformer model)"),Ggo=l(),gp=a("li"),rne=a("strong"),Ogo=o("glpn"),Vgo=o(" \u2014 "),JP=a("a"),Xgo=o("GLPNModel"),zgo=o(" (GLPN model)"),Qgo=l(),hp=a("li"),tne=a("strong"),Wgo=o("gpt2"),Hgo=o(" \u2014 "),YP=a("a"),Ugo=o("GPT2Model"),Jgo=o(" (OpenAI GPT-2 model)"),Ygo=l(),pp=a("li"),ane=a("strong"),Kgo=o("gpt_neo"),Zgo=o(" \u2014 "),KP=a("a"),eho=o("GPTNeoModel"),oho=o(" (GPT Neo model)"),rho=l(),up=a("li"),nne=a("strong"),tho=o("gptj"),aho=o(" \u2014 "),ZP=a("a"),nho=o("GPTJModel"),sho=o(" (GPT-J model)"),lho=l(),_p=a("li"),sne=a("strong"),iho=o("hubert"),dho=o(" \u2014 "),eI=a("a"),cho=o("HubertModel"),fho=o(" (Hubert model)"),mho=l(),bp=a("li"),lne=a("strong"),gho=o("ibert"),hho=o(" \u2014 "),oI=a("a"),pho=o("IBertModel"),uho=o(" (I-BERT model)"),_ho=l(),vp=a("li"),ine=a("strong"),bho=o("imagegpt"),vho=o(" \u2014 "),rI=a("a"),Fho=o("ImageGPTModel"),Tho=o(" (ImageGPT model)"),Mho=l(),Fp=a("li"),dne=a("strong"),Eho=o("layoutlm"),Cho=o(" \u2014 "),tI=a("a"),who=o("LayoutLMModel"),Aho=o(" (LayoutLM model)"),yho=l(),Tp=a("li"),cne=a("strong"),Lho=o("layoutlmv2"),xho=o(" \u2014 "),aI=a("a"),$ho=o("LayoutLMv2Model"),kho=o(" (LayoutLMv2 model)"),Sho=l(),Mp=a("li"),fne=a("strong"),Rho=o("layoutlmv3"),Bho=o(" \u2014 "),nI=a("a"),Pho=o("LayoutLMv3Model"),Iho=o(" (LayoutLMv3 model)"),qho=l(),Ep=a("li"),mne=a("strong"),Nho=o("led"),jho=o(" \u2014 "),sI=a("a"),Dho=o("LEDModel"),Gho=o(" (LED model)"),Oho=l(),Cp=a("li"),gne=a("strong"),Vho=o("longformer"),Xho=o(" \u2014 "),lI=a("a"),zho=o("LongformerModel"),Qho=o(" (Longformer model)"),Who=l(),wp=a("li"),hne=a("strong"),Hho=o("luke"),Uho=o(" \u2014 "),iI=a("a"),Jho=o("LukeModel"),Yho=o(" (LUKE model)"),Kho=l(),Ap=a("li"),pne=a("strong"),Zho=o("lxmert"),epo=o(" \u2014 "),dI=a("a"),opo=o("LxmertModel"),rpo=o(" (LXMERT model)"),tpo=l(),yp=a("li"),une=a("strong"),apo=o("m2m_100"),npo=o(" \u2014 "),cI=a("a"),spo=o("M2M100Model"),lpo=o(" (M2M100 model)"),ipo=l(),Lp=a("li"),_ne=a("strong"),dpo=o("marian"),cpo=o(" \u2014 "),fI=a("a"),fpo=o("MarianModel"),mpo=o(" (Marian model)"),gpo=l(),xp=a("li"),bne=a("strong"),hpo=o("maskformer"),ppo=o(" \u2014 "),mI=a("a"),upo=o("MaskFormerModel"),_po=o(" (MaskFormer model)"),bpo=l(),$p=a("li"),vne=a("strong"),vpo=o("mbart"),Fpo=o(" \u2014 "),gI=a("a"),Tpo=o("MBartModel"),Mpo=o(" (mBART model)"),Epo=l(),kp=a("li"),Fne=a("strong"),Cpo=o("megatron-bert"),wpo=o(" \u2014 "),hI=a("a"),Apo=o("MegatronBertModel"),ypo=o(" (MegatronBert model)"),Lpo=l(),Sp=a("li"),Tne=a("strong"),xpo=o("mobilebert"),$po=o(" \u2014 "),pI=a("a"),kpo=o("MobileBertModel"),Spo=o(" (MobileBERT model)"),Rpo=l(),Rp=a("li"),Mne=a("strong"),Bpo=o("mpnet"),Ppo=o(" \u2014 "),uI=a("a"),Ipo=o("MPNetModel"),qpo=o(" (MPNet model)"),Npo=l(),Bp=a("li"),Ene=a("strong"),jpo=o("mt5"),Dpo=o(" \u2014 "),_I=a("a"),Gpo=o("MT5Model"),Opo=o(" (mT5 model)"),Vpo=l(),Pp=a("li"),Cne=a("strong"),Xpo=o("nystromformer"),zpo=o(" \u2014 "),bI=a("a"),Qpo=o("NystromformerModel"),Wpo=o(" (Nystromformer model)"),Hpo=l(),Ip=a("li"),wne=a("strong"),Upo=o("openai-gpt"),Jpo=o(" \u2014 "),vI=a("a"),Ypo=o("OpenAIGPTModel"),Kpo=o(" (OpenAI GPT model)"),Zpo=l(),qp=a("li"),Ane=a("strong"),euo=o("pegasus"),ouo=o(" \u2014 "),FI=a("a"),ruo=o("PegasusModel"),tuo=o(" (Pegasus model)"),auo=l(),Np=a("li"),yne=a("strong"),nuo=o("perceiver"),suo=o(" \u2014 "),TI=a("a"),luo=o("PerceiverModel"),iuo=o(" (Perceiver model)"),duo=l(),jp=a("li"),Lne=a("strong"),cuo=o("plbart"),fuo=o(" \u2014 "),MI=a("a"),muo=o("PLBartModel"),guo=o(" (PLBart model)"),huo=l(),Dp=a("li"),xne=a("strong"),puo=o("poolformer"),uuo=o(" \u2014 "),EI=a("a"),_uo=o("PoolFormerModel"),buo=o(" (PoolFormer model)"),vuo=l(),Gp=a("li"),$ne=a("strong"),Fuo=o("prophetnet"),Tuo=o(" \u2014 "),CI=a("a"),Muo=o("ProphetNetModel"),Euo=o(" (ProphetNet model)"),Cuo=l(),Op=a("li"),kne=a("strong"),wuo=o("qdqbert"),Auo=o(" \u2014 "),wI=a("a"),yuo=o("QDQBertModel"),Luo=o(" (QDQBert model)"),xuo=l(),Vp=a("li"),Sne=a("strong"),$uo=o("reformer"),kuo=o(" \u2014 "),AI=a("a"),Suo=o("ReformerModel"),Ruo=o(" (Reformer model)"),Buo=l(),Xp=a("li"),Rne=a("strong"),Puo=o("regnet"),Iuo=o(" \u2014 "),yI=a("a"),quo=o("RegNetModel"),Nuo=o(" (RegNet model)"),juo=l(),zp=a("li"),Bne=a("strong"),Duo=o("rembert"),Guo=o(" \u2014 "),LI=a("a"),Ouo=o("RemBertModel"),Vuo=o(" (RemBERT model)"),Xuo=l(),Qp=a("li"),Pne=a("strong"),zuo=o("resnet"),Quo=o(" \u2014 "),xI=a("a"),Wuo=o("ResNetModel"),Huo=o(" (ResNet model)"),Uuo=l(),Wp=a("li"),Ine=a("strong"),Juo=o("retribert"),Yuo=o(" \u2014 "),$I=a("a"),Kuo=o("RetriBertModel"),Zuo=o(" (RetriBERT model)"),e_o=l(),Hp=a("li"),qne=a("strong"),o_o=o("roberta"),r_o=o(" \u2014 "),kI=a("a"),t_o=o("RobertaModel"),a_o=o(" (RoBERTa model)"),n_o=l(),Up=a("li"),Nne=a("strong"),s_o=o("roformer"),l_o=o(" \u2014 "),SI=a("a"),i_o=o("RoFormerModel"),d_o=o(" (RoFormer model)"),c_o=l(),Jp=a("li"),jne=a("strong"),f_o=o("segformer"),m_o=o(" \u2014 "),RI=a("a"),g_o=o("SegformerModel"),h_o=o(" (SegFormer model)"),p_o=l(),Yp=a("li"),Dne=a("strong"),u_o=o("sew"),__o=o(" \u2014 "),BI=a("a"),b_o=o("SEWModel"),v_o=o(" (SEW model)"),F_o=l(),Kp=a("li"),Gne=a("strong"),T_o=o("sew-d"),M_o=o(" \u2014 "),PI=a("a"),E_o=o("SEWDModel"),C_o=o(" (SEW-D model)"),w_o=l(),Zp=a("li"),One=a("strong"),A_o=o("speech_to_text"),y_o=o(" \u2014 "),II=a("a"),L_o=o("Speech2TextModel"),x_o=o(" (Speech2Text model)"),$_o=l(),eu=a("li"),Vne=a("strong"),k_o=o("splinter"),S_o=o(" \u2014 "),qI=a("a"),R_o=o("SplinterModel"),B_o=o(" (Splinter model)"),P_o=l(),ou=a("li"),Xne=a("strong"),I_o=o("squeezebert"),q_o=o(" \u2014 "),NI=a("a"),N_o=o("SqueezeBertModel"),j_o=o(" (SqueezeBERT model)"),D_o=l(),ru=a("li"),zne=a("strong"),G_o=o("swin"),O_o=o(" \u2014 "),jI=a("a"),V_o=o("SwinModel"),X_o=o(" (Swin model)"),z_o=l(),tu=a("li"),Qne=a("strong"),Q_o=o("t5"),W_o=o(" \u2014 "),DI=a("a"),H_o=o("T5Model"),U_o=o(" (T5 model)"),J_o=l(),au=a("li"),Wne=a("strong"),Y_o=o("tapas"),K_o=o(" \u2014 "),GI=a("a"),Z_o=o("TapasModel"),e0o=o(" (TAPAS model)"),o0o=l(),nu=a("li"),Hne=a("strong"),r0o=o("transfo-xl"),t0o=o(" \u2014 "),OI=a("a"),a0o=o("TransfoXLModel"),n0o=o(" (Transformer-XL model)"),s0o=l(),su=a("li"),Une=a("strong"),l0o=o("unispeech"),i0o=o(" \u2014 "),VI=a("a"),d0o=o("UniSpeechModel"),c0o=o(" (UniSpeech model)"),f0o=l(),lu=a("li"),Jne=a("strong"),m0o=o("unispeech-sat"),g0o=o(" \u2014 "),XI=a("a"),h0o=o("UniSpeechSatModel"),p0o=o(" (UniSpeechSat model)"),u0o=l(),iu=a("li"),Yne=a("strong"),_0o=o("van"),b0o=o(" \u2014 "),zI=a("a"),v0o=o("VanModel"),F0o=o(" (VAN model)"),T0o=l(),du=a("li"),Kne=a("strong"),M0o=o("vilt"),E0o=o(" \u2014 "),QI=a("a"),C0o=o("ViltModel"),w0o=o(" (ViLT model)"),A0o=l(),cu=a("li"),Zne=a("strong"),y0o=o("vision-text-dual-encoder"),L0o=o(" \u2014 "),WI=a("a"),x0o=o("VisionTextDualEncoderModel"),$0o=o(" (VisionTextDualEncoder model)"),k0o=l(),fu=a("li"),ese=a("strong"),S0o=o("visual_bert"),R0o=o(" \u2014 "),HI=a("a"),B0o=o("VisualBertModel"),P0o=o(" (VisualBert model)"),I0o=l(),mu=a("li"),ose=a("strong"),q0o=o("vit"),N0o=o(" \u2014 "),UI=a("a"),j0o=o("ViTModel"),D0o=o(" (ViT model)"),G0o=l(),gu=a("li"),rse=a("strong"),O0o=o("vit_mae"),V0o=o(" \u2014 "),JI=a("a"),X0o=o("ViTMAEModel"),z0o=o(" (ViTMAE model)"),Q0o=l(),hu=a("li"),tse=a("strong"),W0o=o("wav2vec2"),H0o=o(" \u2014 "),YI=a("a"),U0o=o("Wav2Vec2Model"),J0o=o(" (Wav2Vec2 model)"),Y0o=l(),pu=a("li"),ase=a("strong"),K0o=o("wavlm"),Z0o=o(" \u2014 "),KI=a("a"),e1o=o("WavLMModel"),o1o=o(" (WavLM model)"),r1o=l(),uu=a("li"),nse=a("strong"),t1o=o("xglm"),a1o=o(" \u2014 "),ZI=a("a"),n1o=o("XGLMModel"),s1o=o(" (XGLM model)"),l1o=l(),_u=a("li"),sse=a("strong"),i1o=o("xlm"),d1o=o(" \u2014 "),eq=a("a"),c1o=o("XLMModel"),f1o=o(" (XLM model)"),m1o=l(),bu=a("li"),lse=a("strong"),g1o=o("xlm-prophetnet"),h1o=o(" \u2014 "),oq=a("a"),p1o=o("XLMProphetNetModel"),u1o=o(" (XLMProphetNet model)"),_1o=l(),vu=a("li"),ise=a("strong"),b1o=o("xlm-roberta"),v1o=o(" \u2014 "),rq=a("a"),F1o=o("XLMRobertaModel"),T1o=o(" (XLM-RoBERTa model)"),M1o=l(),Fu=a("li"),dse=a("strong"),E1o=o("xlm-roberta-xl"),C1o=o(" \u2014 "),tq=a("a"),w1o=o("XLMRobertaXLModel"),A1o=o(" (XLM-RoBERTa-XL model)"),y1o=l(),Tu=a("li"),cse=a("strong"),L1o=o("xlnet"),x1o=o(" \u2014 "),aq=a("a"),$1o=o("XLNetModel"),k1o=o(" (XLNet model)"),S1o=l(),Mu=a("li"),fse=a("strong"),R1o=o("yolos"),B1o=o(" \u2014 "),nq=a("a"),P1o=o("YolosModel"),I1o=o(" (YOLOS model)"),q1o=l(),Eu=a("li"),mse=a("strong"),N1o=o("yoso"),j1o=o(" \u2014 "),sq=a("a"),D1o=o("YosoModel"),G1o=o(" (YOSO model)"),O1o=l(),Cu=a("p"),V1o=o("The model is set in evaluation mode by default using "),gse=a("code"),X1o=o("model.eval()"),z1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=a("code"),Q1o=o("model.train()"),W1o=l(),F(wu.$$.fragment),iPe=l(),vi=a("h2"),Au=a("a"),pse=a("span"),F(dA.$$.fragment),H1o=l(),use=a("span"),U1o=o("AutoModelForPreTraining"),dPe=l(),xo=a("div"),F(cA.$$.fragment),J1o=l(),Fi=a("p"),Y1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lq=a("a"),K1o=o("from_pretrained()"),Z1o=o(" class method or the "),iq=a("a"),ebo=o("from_config()"),obo=o(` class
method.`),rbo=l(),fA=a("p"),tbo=o("This class cannot be instantiated directly using "),_se=a("code"),abo=o("__init__()"),nbo=o(" (throws an error)."),sbo=l(),et=a("div"),F(mA.$$.fragment),lbo=l(),bse=a("p"),ibo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dbo=l(),Ti=a("p"),cbo=o(`Note:
Loading a model from its configuration file does `),vse=a("strong"),fbo=o("not"),mbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dq=a("a"),gbo=o("from_pretrained()"),hbo=o(" to load the model weights."),pbo=l(),F(yu.$$.fragment),ubo=l(),Ue=a("div"),F(gA.$$.fragment),_bo=l(),Fse=a("p"),bbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vbo=l(),Ca=a("p"),Fbo=o("The model class to instantiate is selected based on the "),Tse=a("code"),Tbo=o("model_type"),Mbo=o(` property of the config object (either
passed as an argument or loaded from `),Mse=a("code"),Ebo=o("pretrained_model_name_or_path"),Cbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=a("code"),wbo=o("pretrained_model_name_or_path"),Abo=o(":"),ybo=l(),O=a("ul"),Lu=a("li"),Cse=a("strong"),Lbo=o("albert"),xbo=o(" \u2014 "),cq=a("a"),$bo=o("AlbertForPreTraining"),kbo=o(" (ALBERT model)"),Sbo=l(),xu=a("li"),wse=a("strong"),Rbo=o("bart"),Bbo=o(" \u2014 "),fq=a("a"),Pbo=o("BartForConditionalGeneration"),Ibo=o(" (BART model)"),qbo=l(),$u=a("li"),Ase=a("strong"),Nbo=o("bert"),jbo=o(" \u2014 "),mq=a("a"),Dbo=o("BertForPreTraining"),Gbo=o(" (BERT model)"),Obo=l(),ku=a("li"),yse=a("strong"),Vbo=o("big_bird"),Xbo=o(" \u2014 "),gq=a("a"),zbo=o("BigBirdForPreTraining"),Qbo=o(" (BigBird model)"),Wbo=l(),Su=a("li"),Lse=a("strong"),Hbo=o("camembert"),Ubo=o(" \u2014 "),hq=a("a"),Jbo=o("CamembertForMaskedLM"),Ybo=o(" (CamemBERT model)"),Kbo=l(),Ru=a("li"),xse=a("strong"),Zbo=o("ctrl"),e2o=o(" \u2014 "),pq=a("a"),o2o=o("CTRLLMHeadModel"),r2o=o(" (CTRL model)"),t2o=l(),Bu=a("li"),$se=a("strong"),a2o=o("data2vec-text"),n2o=o(" \u2014 "),uq=a("a"),s2o=o("Data2VecTextForMaskedLM"),l2o=o(" (Data2VecText model)"),i2o=l(),Pu=a("li"),kse=a("strong"),d2o=o("deberta"),c2o=o(" \u2014 "),_q=a("a"),f2o=o("DebertaForMaskedLM"),m2o=o(" (DeBERTa model)"),g2o=l(),Iu=a("li"),Sse=a("strong"),h2o=o("deberta-v2"),p2o=o(" \u2014 "),bq=a("a"),u2o=o("DebertaV2ForMaskedLM"),_2o=o(" (DeBERTa-v2 model)"),b2o=l(),qu=a("li"),Rse=a("strong"),v2o=o("distilbert"),F2o=o(" \u2014 "),vq=a("a"),T2o=o("DistilBertForMaskedLM"),M2o=o(" (DistilBERT model)"),E2o=l(),Nu=a("li"),Bse=a("strong"),C2o=o("electra"),w2o=o(" \u2014 "),Fq=a("a"),A2o=o("ElectraForPreTraining"),y2o=o(" (ELECTRA model)"),L2o=l(),ju=a("li"),Pse=a("strong"),x2o=o("flaubert"),$2o=o(" \u2014 "),Tq=a("a"),k2o=o("FlaubertWithLMHeadModel"),S2o=o(" (FlauBERT model)"),R2o=l(),Du=a("li"),Ise=a("strong"),B2o=o("fnet"),P2o=o(" \u2014 "),Mq=a("a"),I2o=o("FNetForPreTraining"),q2o=o(" (FNet model)"),N2o=l(),Gu=a("li"),qse=a("strong"),j2o=o("fsmt"),D2o=o(" \u2014 "),Eq=a("a"),G2o=o("FSMTForConditionalGeneration"),O2o=o(" (FairSeq Machine-Translation model)"),V2o=l(),Ou=a("li"),Nse=a("strong"),X2o=o("funnel"),z2o=o(" \u2014 "),Cq=a("a"),Q2o=o("FunnelForPreTraining"),W2o=o(" (Funnel Transformer model)"),H2o=l(),Vu=a("li"),jse=a("strong"),U2o=o("gpt2"),J2o=o(" \u2014 "),wq=a("a"),Y2o=o("GPT2LMHeadModel"),K2o=o(" (OpenAI GPT-2 model)"),Z2o=l(),Xu=a("li"),Dse=a("strong"),evo=o("ibert"),ovo=o(" \u2014 "),Aq=a("a"),rvo=o("IBertForMaskedLM"),tvo=o(" (I-BERT model)"),avo=l(),zu=a("li"),Gse=a("strong"),nvo=o("layoutlm"),svo=o(" \u2014 "),yq=a("a"),lvo=o("LayoutLMForMaskedLM"),ivo=o(" (LayoutLM model)"),dvo=l(),Qu=a("li"),Ose=a("strong"),cvo=o("longformer"),fvo=o(" \u2014 "),Lq=a("a"),mvo=o("LongformerForMaskedLM"),gvo=o(" (Longformer model)"),hvo=l(),Wu=a("li"),Vse=a("strong"),pvo=o("lxmert"),uvo=o(" \u2014 "),xq=a("a"),_vo=o("LxmertForPreTraining"),bvo=o(" (LXMERT model)"),vvo=l(),Hu=a("li"),Xse=a("strong"),Fvo=o("megatron-bert"),Tvo=o(" \u2014 "),$q=a("a"),Mvo=o("MegatronBertForPreTraining"),Evo=o(" (MegatronBert model)"),Cvo=l(),Uu=a("li"),zse=a("strong"),wvo=o("mobilebert"),Avo=o(" \u2014 "),kq=a("a"),yvo=o("MobileBertForPreTraining"),Lvo=o(" (MobileBERT model)"),xvo=l(),Ju=a("li"),Qse=a("strong"),$vo=o("mpnet"),kvo=o(" \u2014 "),Sq=a("a"),Svo=o("MPNetForMaskedLM"),Rvo=o(" (MPNet model)"),Bvo=l(),Yu=a("li"),Wse=a("strong"),Pvo=o("openai-gpt"),Ivo=o(" \u2014 "),Rq=a("a"),qvo=o("OpenAIGPTLMHeadModel"),Nvo=o(" (OpenAI GPT model)"),jvo=l(),Ku=a("li"),Hse=a("strong"),Dvo=o("retribert"),Gvo=o(" \u2014 "),Bq=a("a"),Ovo=o("RetriBertModel"),Vvo=o(" (RetriBERT model)"),Xvo=l(),Zu=a("li"),Use=a("strong"),zvo=o("roberta"),Qvo=o(" \u2014 "),Pq=a("a"),Wvo=o("RobertaForMaskedLM"),Hvo=o(" (RoBERTa model)"),Uvo=l(),e_=a("li"),Jse=a("strong"),Jvo=o("squeezebert"),Yvo=o(" \u2014 "),Iq=a("a"),Kvo=o("SqueezeBertForMaskedLM"),Zvo=o(" (SqueezeBERT model)"),eFo=l(),o_=a("li"),Yse=a("strong"),oFo=o("t5"),rFo=o(" \u2014 "),qq=a("a"),tFo=o("T5ForConditionalGeneration"),aFo=o(" (T5 model)"),nFo=l(),r_=a("li"),Kse=a("strong"),sFo=o("tapas"),lFo=o(" \u2014 "),Nq=a("a"),iFo=o("TapasForMaskedLM"),dFo=o(" (TAPAS model)"),cFo=l(),t_=a("li"),Zse=a("strong"),fFo=o("transfo-xl"),mFo=o(" \u2014 "),jq=a("a"),gFo=o("TransfoXLLMHeadModel"),hFo=o(" (Transformer-XL model)"),pFo=l(),a_=a("li"),ele=a("strong"),uFo=o("unispeech"),_Fo=o(" \u2014 "),Dq=a("a"),bFo=o("UniSpeechForPreTraining"),vFo=o(" (UniSpeech model)"),FFo=l(),n_=a("li"),ole=a("strong"),TFo=o("unispeech-sat"),MFo=o(" \u2014 "),Gq=a("a"),EFo=o("UniSpeechSatForPreTraining"),CFo=o(" (UniSpeechSat model)"),wFo=l(),s_=a("li"),rle=a("strong"),AFo=o("visual_bert"),yFo=o(" \u2014 "),Oq=a("a"),LFo=o("VisualBertForPreTraining"),xFo=o(" (VisualBert model)"),$Fo=l(),l_=a("li"),tle=a("strong"),kFo=o("vit_mae"),SFo=o(" \u2014 "),Vq=a("a"),RFo=o("ViTMAEForPreTraining"),BFo=o(" (ViTMAE model)"),PFo=l(),i_=a("li"),ale=a("strong"),IFo=o("wav2vec2"),qFo=o(" \u2014 "),Xq=a("a"),NFo=o("Wav2Vec2ForPreTraining"),jFo=o(" (Wav2Vec2 model)"),DFo=l(),d_=a("li"),nle=a("strong"),GFo=o("xlm"),OFo=o(" \u2014 "),zq=a("a"),VFo=o("XLMWithLMHeadModel"),XFo=o(" (XLM model)"),zFo=l(),c_=a("li"),sle=a("strong"),QFo=o("xlm-roberta"),WFo=o(" \u2014 "),Qq=a("a"),HFo=o("XLMRobertaForMaskedLM"),UFo=o(" (XLM-RoBERTa model)"),JFo=l(),f_=a("li"),lle=a("strong"),YFo=o("xlm-roberta-xl"),KFo=o(" \u2014 "),Wq=a("a"),ZFo=o("XLMRobertaXLForMaskedLM"),e6o=o(" (XLM-RoBERTa-XL model)"),o6o=l(),m_=a("li"),ile=a("strong"),r6o=o("xlnet"),t6o=o(" \u2014 "),Hq=a("a"),a6o=o("XLNetLMHeadModel"),n6o=o(" (XLNet model)"),s6o=l(),g_=a("p"),l6o=o("The model is set in evaluation mode by default using "),dle=a("code"),i6o=o("model.eval()"),d6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cle=a("code"),c6o=o("model.train()"),f6o=l(),F(h_.$$.fragment),cPe=l(),Mi=a("h2"),p_=a("a"),fle=a("span"),F(hA.$$.fragment),m6o=l(),mle=a("span"),g6o=o("AutoModelForCausalLM"),fPe=l(),$o=a("div"),F(pA.$$.fragment),h6o=l(),Ei=a("p"),p6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uq=a("a"),u6o=o("from_pretrained()"),_6o=o(" class method or the "),Jq=a("a"),b6o=o("from_config()"),v6o=o(` class
method.`),F6o=l(),uA=a("p"),T6o=o("This class cannot be instantiated directly using "),gle=a("code"),M6o=o("__init__()"),E6o=o(" (throws an error)."),C6o=l(),ot=a("div"),F(_A.$$.fragment),w6o=l(),hle=a("p"),A6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y6o=l(),Ci=a("p"),L6o=o(`Note:
Loading a model from its configuration file does `),ple=a("strong"),x6o=o("not"),$6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=a("a"),k6o=o("from_pretrained()"),S6o=o(" to load the model weights."),R6o=l(),F(u_.$$.fragment),B6o=l(),Je=a("div"),F(bA.$$.fragment),P6o=l(),ule=a("p"),I6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q6o=l(),wa=a("p"),N6o=o("The model class to instantiate is selected based on the "),_le=a("code"),j6o=o("model_type"),D6o=o(` property of the config object (either
passed as an argument or loaded from `),ble=a("code"),G6o=o("pretrained_model_name_or_path"),O6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=a("code"),V6o=o("pretrained_model_name_or_path"),X6o=o(":"),z6o=l(),z=a("ul"),__=a("li"),Fle=a("strong"),Q6o=o("bart"),W6o=o(" \u2014 "),Kq=a("a"),H6o=o("BartForCausalLM"),U6o=o(" (BART model)"),J6o=l(),b_=a("li"),Tle=a("strong"),Y6o=o("bert"),K6o=o(" \u2014 "),Zq=a("a"),Z6o=o("BertLMHeadModel"),eTo=o(" (BERT model)"),oTo=l(),v_=a("li"),Mle=a("strong"),rTo=o("bert-generation"),tTo=o(" \u2014 "),eN=a("a"),aTo=o("BertGenerationDecoder"),nTo=o(" (Bert Generation model)"),sTo=l(),F_=a("li"),Ele=a("strong"),lTo=o("big_bird"),iTo=o(" \u2014 "),oN=a("a"),dTo=o("BigBirdForCausalLM"),cTo=o(" (BigBird model)"),fTo=l(),T_=a("li"),Cle=a("strong"),mTo=o("bigbird_pegasus"),gTo=o(" \u2014 "),rN=a("a"),hTo=o("BigBirdPegasusForCausalLM"),pTo=o(" (BigBirdPegasus model)"),uTo=l(),M_=a("li"),wle=a("strong"),_To=o("blenderbot"),bTo=o(" \u2014 "),tN=a("a"),vTo=o("BlenderbotForCausalLM"),FTo=o(" (Blenderbot model)"),TTo=l(),E_=a("li"),Ale=a("strong"),MTo=o("blenderbot-small"),ETo=o(" \u2014 "),aN=a("a"),CTo=o("BlenderbotSmallForCausalLM"),wTo=o(" (BlenderbotSmall model)"),ATo=l(),C_=a("li"),yle=a("strong"),yTo=o("camembert"),LTo=o(" \u2014 "),nN=a("a"),xTo=o("CamembertForCausalLM"),$To=o(" (CamemBERT model)"),kTo=l(),w_=a("li"),Lle=a("strong"),STo=o("ctrl"),RTo=o(" \u2014 "),sN=a("a"),BTo=o("CTRLLMHeadModel"),PTo=o(" (CTRL model)"),ITo=l(),A_=a("li"),xle=a("strong"),qTo=o("data2vec-text"),NTo=o(" \u2014 "),lN=a("a"),jTo=o("Data2VecTextForCausalLM"),DTo=o(" (Data2VecText model)"),GTo=l(),y_=a("li"),$le=a("strong"),OTo=o("electra"),VTo=o(" \u2014 "),iN=a("a"),XTo=o("ElectraForCausalLM"),zTo=o(" (ELECTRA model)"),QTo=l(),L_=a("li"),kle=a("strong"),WTo=o("gpt2"),HTo=o(" \u2014 "),dN=a("a"),UTo=o("GPT2LMHeadModel"),JTo=o(" (OpenAI GPT-2 model)"),YTo=l(),x_=a("li"),Sle=a("strong"),KTo=o("gpt_neo"),ZTo=o(" \u2014 "),cN=a("a"),e7o=o("GPTNeoForCausalLM"),o7o=o(" (GPT Neo model)"),r7o=l(),$_=a("li"),Rle=a("strong"),t7o=o("gptj"),a7o=o(" \u2014 "),fN=a("a"),n7o=o("GPTJForCausalLM"),s7o=o(" (GPT-J model)"),l7o=l(),k_=a("li"),Ble=a("strong"),i7o=o("marian"),d7o=o(" \u2014 "),mN=a("a"),c7o=o("MarianForCausalLM"),f7o=o(" (Marian model)"),m7o=l(),S_=a("li"),Ple=a("strong"),g7o=o("mbart"),h7o=o(" \u2014 "),gN=a("a"),p7o=o("MBartForCausalLM"),u7o=o(" (mBART model)"),_7o=l(),R_=a("li"),Ile=a("strong"),b7o=o("megatron-bert"),v7o=o(" \u2014 "),hN=a("a"),F7o=o("MegatronBertForCausalLM"),T7o=o(" (MegatronBert model)"),M7o=l(),B_=a("li"),qle=a("strong"),E7o=o("openai-gpt"),C7o=o(" \u2014 "),pN=a("a"),w7o=o("OpenAIGPTLMHeadModel"),A7o=o(" (OpenAI GPT model)"),y7o=l(),P_=a("li"),Nle=a("strong"),L7o=o("pegasus"),x7o=o(" \u2014 "),uN=a("a"),$7o=o("PegasusForCausalLM"),k7o=o(" (Pegasus model)"),S7o=l(),I_=a("li"),jle=a("strong"),R7o=o("plbart"),B7o=o(" \u2014 "),_N=a("a"),P7o=o("PLBartForCausalLM"),I7o=o(" (PLBart model)"),q7o=l(),q_=a("li"),Dle=a("strong"),N7o=o("prophetnet"),j7o=o(" \u2014 "),bN=a("a"),D7o=o("ProphetNetForCausalLM"),G7o=o(" (ProphetNet model)"),O7o=l(),N_=a("li"),Gle=a("strong"),V7o=o("qdqbert"),X7o=o(" \u2014 "),vN=a("a"),z7o=o("QDQBertLMHeadModel"),Q7o=o(" (QDQBert model)"),W7o=l(),j_=a("li"),Ole=a("strong"),H7o=o("reformer"),U7o=o(" \u2014 "),FN=a("a"),J7o=o("ReformerModelWithLMHead"),Y7o=o(" (Reformer model)"),K7o=l(),D_=a("li"),Vle=a("strong"),Z7o=o("rembert"),eMo=o(" \u2014 "),TN=a("a"),oMo=o("RemBertForCausalLM"),rMo=o(" (RemBERT model)"),tMo=l(),G_=a("li"),Xle=a("strong"),aMo=o("roberta"),nMo=o(" \u2014 "),MN=a("a"),sMo=o("RobertaForCausalLM"),lMo=o(" (RoBERTa model)"),iMo=l(),O_=a("li"),zle=a("strong"),dMo=o("roformer"),cMo=o(" \u2014 "),EN=a("a"),fMo=o("RoFormerForCausalLM"),mMo=o(" (RoFormer model)"),gMo=l(),V_=a("li"),Qle=a("strong"),hMo=o("speech_to_text_2"),pMo=o(" \u2014 "),CN=a("a"),uMo=o("Speech2Text2ForCausalLM"),_Mo=o(" (Speech2Text2 model)"),bMo=l(),X_=a("li"),Wle=a("strong"),vMo=o("transfo-xl"),FMo=o(" \u2014 "),wN=a("a"),TMo=o("TransfoXLLMHeadModel"),MMo=o(" (Transformer-XL model)"),EMo=l(),z_=a("li"),Hle=a("strong"),CMo=o("trocr"),wMo=o(" \u2014 "),AN=a("a"),AMo=o("TrOCRForCausalLM"),yMo=o(" (TrOCR model)"),LMo=l(),Q_=a("li"),Ule=a("strong"),xMo=o("xglm"),$Mo=o(" \u2014 "),yN=a("a"),kMo=o("XGLMForCausalLM"),SMo=o(" (XGLM model)"),RMo=l(),W_=a("li"),Jle=a("strong"),BMo=o("xlm"),PMo=o(" \u2014 "),LN=a("a"),IMo=o("XLMWithLMHeadModel"),qMo=o(" (XLM model)"),NMo=l(),H_=a("li"),Yle=a("strong"),jMo=o("xlm-prophetnet"),DMo=o(" \u2014 "),xN=a("a"),GMo=o("XLMProphetNetForCausalLM"),OMo=o(" (XLMProphetNet model)"),VMo=l(),U_=a("li"),Kle=a("strong"),XMo=o("xlm-roberta"),zMo=o(" \u2014 "),$N=a("a"),QMo=o("XLMRobertaForCausalLM"),WMo=o(" (XLM-RoBERTa model)"),HMo=l(),J_=a("li"),Zle=a("strong"),UMo=o("xlm-roberta-xl"),JMo=o(" \u2014 "),kN=a("a"),YMo=o("XLMRobertaXLForCausalLM"),KMo=o(" (XLM-RoBERTa-XL model)"),ZMo=l(),Y_=a("li"),eie=a("strong"),e4o=o("xlnet"),o4o=o(" \u2014 "),SN=a("a"),r4o=o("XLNetLMHeadModel"),t4o=o(" (XLNet model)"),a4o=l(),K_=a("p"),n4o=o("The model is set in evaluation mode by default using "),oie=a("code"),s4o=o("model.eval()"),l4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),i4o=o("model.train()"),d4o=l(),F(Z_.$$.fragment),mPe=l(),wi=a("h2"),e0=a("a"),tie=a("span"),F(vA.$$.fragment),c4o=l(),aie=a("span"),f4o=o("AutoModelForMaskedLM"),gPe=l(),ko=a("div"),F(FA.$$.fragment),m4o=l(),Ai=a("p"),g4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RN=a("a"),h4o=o("from_pretrained()"),p4o=o(" class method or the "),BN=a("a"),u4o=o("from_config()"),_4o=o(` class
method.`),b4o=l(),TA=a("p"),v4o=o("This class cannot be instantiated directly using "),nie=a("code"),F4o=o("__init__()"),T4o=o(" (throws an error)."),M4o=l(),rt=a("div"),F(MA.$$.fragment),E4o=l(),sie=a("p"),C4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),w4o=l(),yi=a("p"),A4o=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),y4o=o("not"),L4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PN=a("a"),x4o=o("from_pretrained()"),$4o=o(" to load the model weights."),k4o=l(),F(o0.$$.fragment),S4o=l(),Ye=a("div"),F(EA.$$.fragment),R4o=l(),iie=a("p"),B4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P4o=l(),Aa=a("p"),I4o=o("The model class to instantiate is selected based on the "),die=a("code"),q4o=o("model_type"),N4o=o(` property of the config object (either
passed as an argument or loaded from `),cie=a("code"),j4o=o("pretrained_model_name_or_path"),D4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),G4o=o("pretrained_model_name_or_path"),O4o=o(":"),V4o=l(),Q=a("ul"),r0=a("li"),mie=a("strong"),X4o=o("albert"),z4o=o(" \u2014 "),IN=a("a"),Q4o=o("AlbertForMaskedLM"),W4o=o(" (ALBERT model)"),H4o=l(),t0=a("li"),gie=a("strong"),U4o=o("bart"),J4o=o(" \u2014 "),qN=a("a"),Y4o=o("BartForConditionalGeneration"),K4o=o(" (BART model)"),Z4o=l(),a0=a("li"),hie=a("strong"),eEo=o("bert"),oEo=o(" \u2014 "),NN=a("a"),rEo=o("BertForMaskedLM"),tEo=o(" (BERT model)"),aEo=l(),n0=a("li"),pie=a("strong"),nEo=o("big_bird"),sEo=o(" \u2014 "),jN=a("a"),lEo=o("BigBirdForMaskedLM"),iEo=o(" (BigBird model)"),dEo=l(),s0=a("li"),uie=a("strong"),cEo=o("camembert"),fEo=o(" \u2014 "),DN=a("a"),mEo=o("CamembertForMaskedLM"),gEo=o(" (CamemBERT model)"),hEo=l(),l0=a("li"),_ie=a("strong"),pEo=o("convbert"),uEo=o(" \u2014 "),GN=a("a"),_Eo=o("ConvBertForMaskedLM"),bEo=o(" (ConvBERT model)"),vEo=l(),i0=a("li"),bie=a("strong"),FEo=o("data2vec-text"),TEo=o(" \u2014 "),ON=a("a"),MEo=o("Data2VecTextForMaskedLM"),EEo=o(" (Data2VecText model)"),CEo=l(),d0=a("li"),vie=a("strong"),wEo=o("deberta"),AEo=o(" \u2014 "),VN=a("a"),yEo=o("DebertaForMaskedLM"),LEo=o(" (DeBERTa model)"),xEo=l(),c0=a("li"),Fie=a("strong"),$Eo=o("deberta-v2"),kEo=o(" \u2014 "),XN=a("a"),SEo=o("DebertaV2ForMaskedLM"),REo=o(" (DeBERTa-v2 model)"),BEo=l(),f0=a("li"),Tie=a("strong"),PEo=o("distilbert"),IEo=o(" \u2014 "),zN=a("a"),qEo=o("DistilBertForMaskedLM"),NEo=o(" (DistilBERT model)"),jEo=l(),m0=a("li"),Mie=a("strong"),DEo=o("electra"),GEo=o(" \u2014 "),QN=a("a"),OEo=o("ElectraForMaskedLM"),VEo=o(" (ELECTRA model)"),XEo=l(),g0=a("li"),Eie=a("strong"),zEo=o("flaubert"),QEo=o(" \u2014 "),WN=a("a"),WEo=o("FlaubertWithLMHeadModel"),HEo=o(" (FlauBERT model)"),UEo=l(),h0=a("li"),Cie=a("strong"),JEo=o("fnet"),YEo=o(" \u2014 "),HN=a("a"),KEo=o("FNetForMaskedLM"),ZEo=o(" (FNet model)"),e5o=l(),p0=a("li"),wie=a("strong"),o5o=o("funnel"),r5o=o(" \u2014 "),UN=a("a"),t5o=o("FunnelForMaskedLM"),a5o=o(" (Funnel Transformer model)"),n5o=l(),u0=a("li"),Aie=a("strong"),s5o=o("ibert"),l5o=o(" \u2014 "),JN=a("a"),i5o=o("IBertForMaskedLM"),d5o=o(" (I-BERT model)"),c5o=l(),_0=a("li"),yie=a("strong"),f5o=o("layoutlm"),m5o=o(" \u2014 "),YN=a("a"),g5o=o("LayoutLMForMaskedLM"),h5o=o(" (LayoutLM model)"),p5o=l(),b0=a("li"),Lie=a("strong"),u5o=o("longformer"),_5o=o(" \u2014 "),KN=a("a"),b5o=o("LongformerForMaskedLM"),v5o=o(" (Longformer model)"),F5o=l(),v0=a("li"),xie=a("strong"),T5o=o("mbart"),M5o=o(" \u2014 "),ZN=a("a"),E5o=o("MBartForConditionalGeneration"),C5o=o(" (mBART model)"),w5o=l(),F0=a("li"),$ie=a("strong"),A5o=o("megatron-bert"),y5o=o(" \u2014 "),ej=a("a"),L5o=o("MegatronBertForMaskedLM"),x5o=o(" (MegatronBert model)"),$5o=l(),T0=a("li"),kie=a("strong"),k5o=o("mobilebert"),S5o=o(" \u2014 "),oj=a("a"),R5o=o("MobileBertForMaskedLM"),B5o=o(" (MobileBERT model)"),P5o=l(),M0=a("li"),Sie=a("strong"),I5o=o("mpnet"),q5o=o(" \u2014 "),rj=a("a"),N5o=o("MPNetForMaskedLM"),j5o=o(" (MPNet model)"),D5o=l(),E0=a("li"),Rie=a("strong"),G5o=o("nystromformer"),O5o=o(" \u2014 "),tj=a("a"),V5o=o("NystromformerForMaskedLM"),X5o=o(" (Nystromformer model)"),z5o=l(),C0=a("li"),Bie=a("strong"),Q5o=o("perceiver"),W5o=o(" \u2014 "),aj=a("a"),H5o=o("PerceiverForMaskedLM"),U5o=o(" (Perceiver model)"),J5o=l(),w0=a("li"),Pie=a("strong"),Y5o=o("qdqbert"),K5o=o(" \u2014 "),nj=a("a"),Z5o=o("QDQBertForMaskedLM"),eCo=o(" (QDQBert model)"),oCo=l(),A0=a("li"),Iie=a("strong"),rCo=o("reformer"),tCo=o(" \u2014 "),sj=a("a"),aCo=o("ReformerForMaskedLM"),nCo=o(" (Reformer model)"),sCo=l(),y0=a("li"),qie=a("strong"),lCo=o("rembert"),iCo=o(" \u2014 "),lj=a("a"),dCo=o("RemBertForMaskedLM"),cCo=o(" (RemBERT model)"),fCo=l(),L0=a("li"),Nie=a("strong"),mCo=o("roberta"),gCo=o(" \u2014 "),ij=a("a"),hCo=o("RobertaForMaskedLM"),pCo=o(" (RoBERTa model)"),uCo=l(),x0=a("li"),jie=a("strong"),_Co=o("roformer"),bCo=o(" \u2014 "),dj=a("a"),vCo=o("RoFormerForMaskedLM"),FCo=o(" (RoFormer model)"),TCo=l(),$0=a("li"),Die=a("strong"),MCo=o("squeezebert"),ECo=o(" \u2014 "),cj=a("a"),CCo=o("SqueezeBertForMaskedLM"),wCo=o(" (SqueezeBERT model)"),ACo=l(),k0=a("li"),Gie=a("strong"),yCo=o("tapas"),LCo=o(" \u2014 "),fj=a("a"),xCo=o("TapasForMaskedLM"),$Co=o(" (TAPAS model)"),kCo=l(),S0=a("li"),Oie=a("strong"),SCo=o("wav2vec2"),RCo=o(" \u2014 "),Vie=a("code"),BCo=o("Wav2Vec2ForMaskedLM"),PCo=o(" (Wav2Vec2 model)"),ICo=l(),R0=a("li"),Xie=a("strong"),qCo=o("xlm"),NCo=o(" \u2014 "),mj=a("a"),jCo=o("XLMWithLMHeadModel"),DCo=o(" (XLM model)"),GCo=l(),B0=a("li"),zie=a("strong"),OCo=o("xlm-roberta"),VCo=o(" \u2014 "),gj=a("a"),XCo=o("XLMRobertaForMaskedLM"),zCo=o(" (XLM-RoBERTa model)"),QCo=l(),P0=a("li"),Qie=a("strong"),WCo=o("xlm-roberta-xl"),HCo=o(" \u2014 "),hj=a("a"),UCo=o("XLMRobertaXLForMaskedLM"),JCo=o(" (XLM-RoBERTa-XL model)"),YCo=l(),I0=a("li"),Wie=a("strong"),KCo=o("yoso"),ZCo=o(" \u2014 "),pj=a("a"),e3o=o("YosoForMaskedLM"),o3o=o(" (YOSO model)"),r3o=l(),q0=a("p"),t3o=o("The model is set in evaluation mode by default using "),Hie=a("code"),a3o=o("model.eval()"),n3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=a("code"),s3o=o("model.train()"),l3o=l(),F(N0.$$.fragment),hPe=l(),Li=a("h2"),j0=a("a"),Jie=a("span"),F(CA.$$.fragment),i3o=l(),Yie=a("span"),d3o=o("AutoModelForSeq2SeqLM"),pPe=l(),So=a("div"),F(wA.$$.fragment),c3o=l(),xi=a("p"),f3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uj=a("a"),m3o=o("from_pretrained()"),g3o=o(" class method or the "),_j=a("a"),h3o=o("from_config()"),p3o=o(` class
method.`),u3o=l(),AA=a("p"),_3o=o("This class cannot be instantiated directly using "),Kie=a("code"),b3o=o("__init__()"),v3o=o(" (throws an error)."),F3o=l(),tt=a("div"),F(yA.$$.fragment),T3o=l(),Zie=a("p"),M3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E3o=l(),$i=a("p"),C3o=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),w3o=o("not"),A3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bj=a("a"),y3o=o("from_pretrained()"),L3o=o(" to load the model weights."),x3o=l(),F(D0.$$.fragment),$3o=l(),Ke=a("div"),F(LA.$$.fragment),k3o=l(),ode=a("p"),S3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R3o=l(),ya=a("p"),B3o=o("The model class to instantiate is selected based on the "),rde=a("code"),P3o=o("model_type"),I3o=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),q3o=o("pretrained_model_name_or_path"),N3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),j3o=o("pretrained_model_name_or_path"),D3o=o(":"),G3o=l(),he=a("ul"),G0=a("li"),nde=a("strong"),O3o=o("bart"),V3o=o(" \u2014 "),vj=a("a"),X3o=o("BartForConditionalGeneration"),z3o=o(" (BART model)"),Q3o=l(),O0=a("li"),sde=a("strong"),W3o=o("bigbird_pegasus"),H3o=o(" \u2014 "),Fj=a("a"),U3o=o("BigBirdPegasusForConditionalGeneration"),J3o=o(" (BigBirdPegasus model)"),Y3o=l(),V0=a("li"),lde=a("strong"),K3o=o("blenderbot"),Z3o=o(" \u2014 "),Tj=a("a"),ewo=o("BlenderbotForConditionalGeneration"),owo=o(" (Blenderbot model)"),rwo=l(),X0=a("li"),ide=a("strong"),two=o("blenderbot-small"),awo=o(" \u2014 "),Mj=a("a"),nwo=o("BlenderbotSmallForConditionalGeneration"),swo=o(" (BlenderbotSmall model)"),lwo=l(),z0=a("li"),dde=a("strong"),iwo=o("encoder-decoder"),dwo=o(" \u2014 "),Ej=a("a"),cwo=o("EncoderDecoderModel"),fwo=o(" (Encoder decoder model)"),mwo=l(),Q0=a("li"),cde=a("strong"),gwo=o("fsmt"),hwo=o(" \u2014 "),Cj=a("a"),pwo=o("FSMTForConditionalGeneration"),uwo=o(" (FairSeq Machine-Translation model)"),_wo=l(),W0=a("li"),fde=a("strong"),bwo=o("led"),vwo=o(" \u2014 "),wj=a("a"),Fwo=o("LEDForConditionalGeneration"),Two=o(" (LED model)"),Mwo=l(),H0=a("li"),mde=a("strong"),Ewo=o("m2m_100"),Cwo=o(" \u2014 "),Aj=a("a"),wwo=o("M2M100ForConditionalGeneration"),Awo=o(" (M2M100 model)"),ywo=l(),U0=a("li"),gde=a("strong"),Lwo=o("marian"),xwo=o(" \u2014 "),yj=a("a"),$wo=o("MarianMTModel"),kwo=o(" (Marian model)"),Swo=l(),J0=a("li"),hde=a("strong"),Rwo=o("mbart"),Bwo=o(" \u2014 "),Lj=a("a"),Pwo=o("MBartForConditionalGeneration"),Iwo=o(" (mBART model)"),qwo=l(),Y0=a("li"),pde=a("strong"),Nwo=o("mt5"),jwo=o(" \u2014 "),xj=a("a"),Dwo=o("MT5ForConditionalGeneration"),Gwo=o(" (mT5 model)"),Owo=l(),K0=a("li"),ude=a("strong"),Vwo=o("pegasus"),Xwo=o(" \u2014 "),$j=a("a"),zwo=o("PegasusForConditionalGeneration"),Qwo=o(" (Pegasus model)"),Wwo=l(),Z0=a("li"),_de=a("strong"),Hwo=o("plbart"),Uwo=o(" \u2014 "),kj=a("a"),Jwo=o("PLBartForConditionalGeneration"),Ywo=o(" (PLBart model)"),Kwo=l(),e1=a("li"),bde=a("strong"),Zwo=o("prophetnet"),eAo=o(" \u2014 "),Sj=a("a"),oAo=o("ProphetNetForConditionalGeneration"),rAo=o(" (ProphetNet model)"),tAo=l(),o1=a("li"),vde=a("strong"),aAo=o("t5"),nAo=o(" \u2014 "),Rj=a("a"),sAo=o("T5ForConditionalGeneration"),lAo=o(" (T5 model)"),iAo=l(),r1=a("li"),Fde=a("strong"),dAo=o("tapex"),cAo=o(" \u2014 "),Bj=a("a"),fAo=o("BartForConditionalGeneration"),mAo=o(" (TAPEX model)"),gAo=l(),t1=a("li"),Tde=a("strong"),hAo=o("xlm-prophetnet"),pAo=o(" \u2014 "),Pj=a("a"),uAo=o("XLMProphetNetForConditionalGeneration"),_Ao=o(" (XLMProphetNet model)"),bAo=l(),a1=a("p"),vAo=o("The model is set in evaluation mode by default using "),Mde=a("code"),FAo=o("model.eval()"),TAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=a("code"),MAo=o("model.train()"),EAo=l(),F(n1.$$.fragment),uPe=l(),ki=a("h2"),s1=a("a"),Cde=a("span"),F(xA.$$.fragment),CAo=l(),wde=a("span"),wAo=o("AutoModelForSequenceClassification"),_Pe=l(),Ro=a("div"),F($A.$$.fragment),AAo=l(),Si=a("p"),yAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ij=a("a"),LAo=o("from_pretrained()"),xAo=o(" class method or the "),qj=a("a"),$Ao=o("from_config()"),kAo=o(` class
method.`),SAo=l(),kA=a("p"),RAo=o("This class cannot be instantiated directly using "),Ade=a("code"),BAo=o("__init__()"),PAo=o(" (throws an error)."),IAo=l(),at=a("div"),F(SA.$$.fragment),qAo=l(),yde=a("p"),NAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jAo=l(),Ri=a("p"),DAo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),GAo=o("not"),OAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nj=a("a"),VAo=o("from_pretrained()"),XAo=o(" to load the model weights."),zAo=l(),F(l1.$$.fragment),QAo=l(),Ze=a("div"),F(RA.$$.fragment),WAo=l(),xde=a("p"),HAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UAo=l(),La=a("p"),JAo=o("The model class to instantiate is selected based on the "),$de=a("code"),YAo=o("model_type"),KAo=o(` property of the config object (either
passed as an argument or loaded from `),kde=a("code"),ZAo=o("pretrained_model_name_or_path"),eyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),oyo=o("pretrained_model_name_or_path"),ryo=o(":"),tyo=l(),q=a("ul"),i1=a("li"),Rde=a("strong"),ayo=o("albert"),nyo=o(" \u2014 "),jj=a("a"),syo=o("AlbertForSequenceClassification"),lyo=o(" (ALBERT model)"),iyo=l(),d1=a("li"),Bde=a("strong"),dyo=o("bart"),cyo=o(" \u2014 "),Dj=a("a"),fyo=o("BartForSequenceClassification"),myo=o(" (BART model)"),gyo=l(),c1=a("li"),Pde=a("strong"),hyo=o("bert"),pyo=o(" \u2014 "),Gj=a("a"),uyo=o("BertForSequenceClassification"),_yo=o(" (BERT model)"),byo=l(),f1=a("li"),Ide=a("strong"),vyo=o("big_bird"),Fyo=o(" \u2014 "),Oj=a("a"),Tyo=o("BigBirdForSequenceClassification"),Myo=o(" (BigBird model)"),Eyo=l(),m1=a("li"),qde=a("strong"),Cyo=o("bigbird_pegasus"),wyo=o(" \u2014 "),Vj=a("a"),Ayo=o("BigBirdPegasusForSequenceClassification"),yyo=o(" (BigBirdPegasus model)"),Lyo=l(),g1=a("li"),Nde=a("strong"),xyo=o("camembert"),$yo=o(" \u2014 "),Xj=a("a"),kyo=o("CamembertForSequenceClassification"),Syo=o(" (CamemBERT model)"),Ryo=l(),h1=a("li"),jde=a("strong"),Byo=o("canine"),Pyo=o(" \u2014 "),zj=a("a"),Iyo=o("CanineForSequenceClassification"),qyo=o(" (Canine model)"),Nyo=l(),p1=a("li"),Dde=a("strong"),jyo=o("convbert"),Dyo=o(" \u2014 "),Qj=a("a"),Gyo=o("ConvBertForSequenceClassification"),Oyo=o(" (ConvBERT model)"),Vyo=l(),u1=a("li"),Gde=a("strong"),Xyo=o("ctrl"),zyo=o(" \u2014 "),Wj=a("a"),Qyo=o("CTRLForSequenceClassification"),Wyo=o(" (CTRL model)"),Hyo=l(),_1=a("li"),Ode=a("strong"),Uyo=o("data2vec-text"),Jyo=o(" \u2014 "),Hj=a("a"),Yyo=o("Data2VecTextForSequenceClassification"),Kyo=o(" (Data2VecText model)"),Zyo=l(),b1=a("li"),Vde=a("strong"),eLo=o("deberta"),oLo=o(" \u2014 "),Uj=a("a"),rLo=o("DebertaForSequenceClassification"),tLo=o(" (DeBERTa model)"),aLo=l(),v1=a("li"),Xde=a("strong"),nLo=o("deberta-v2"),sLo=o(" \u2014 "),Jj=a("a"),lLo=o("DebertaV2ForSequenceClassification"),iLo=o(" (DeBERTa-v2 model)"),dLo=l(),F1=a("li"),zde=a("strong"),cLo=o("distilbert"),fLo=o(" \u2014 "),Yj=a("a"),mLo=o("DistilBertForSequenceClassification"),gLo=o(" (DistilBERT model)"),hLo=l(),T1=a("li"),Qde=a("strong"),pLo=o("electra"),uLo=o(" \u2014 "),Kj=a("a"),_Lo=o("ElectraForSequenceClassification"),bLo=o(" (ELECTRA model)"),vLo=l(),M1=a("li"),Wde=a("strong"),FLo=o("flaubert"),TLo=o(" \u2014 "),Zj=a("a"),MLo=o("FlaubertForSequenceClassification"),ELo=o(" (FlauBERT model)"),CLo=l(),E1=a("li"),Hde=a("strong"),wLo=o("fnet"),ALo=o(" \u2014 "),eD=a("a"),yLo=o("FNetForSequenceClassification"),LLo=o(" (FNet model)"),xLo=l(),C1=a("li"),Ude=a("strong"),$Lo=o("funnel"),kLo=o(" \u2014 "),oD=a("a"),SLo=o("FunnelForSequenceClassification"),RLo=o(" (Funnel Transformer model)"),BLo=l(),w1=a("li"),Jde=a("strong"),PLo=o("gpt2"),ILo=o(" \u2014 "),rD=a("a"),qLo=o("GPT2ForSequenceClassification"),NLo=o(" (OpenAI GPT-2 model)"),jLo=l(),A1=a("li"),Yde=a("strong"),DLo=o("gpt_neo"),GLo=o(" \u2014 "),tD=a("a"),OLo=o("GPTNeoForSequenceClassification"),VLo=o(" (GPT Neo model)"),XLo=l(),y1=a("li"),Kde=a("strong"),zLo=o("gptj"),QLo=o(" \u2014 "),aD=a("a"),WLo=o("GPTJForSequenceClassification"),HLo=o(" (GPT-J model)"),ULo=l(),L1=a("li"),Zde=a("strong"),JLo=o("ibert"),YLo=o(" \u2014 "),nD=a("a"),KLo=o("IBertForSequenceClassification"),ZLo=o(" (I-BERT model)"),e8o=l(),x1=a("li"),ece=a("strong"),o8o=o("layoutlm"),r8o=o(" \u2014 "),sD=a("a"),t8o=o("LayoutLMForSequenceClassification"),a8o=o(" (LayoutLM model)"),n8o=l(),$1=a("li"),oce=a("strong"),s8o=o("layoutlmv2"),l8o=o(" \u2014 "),lD=a("a"),i8o=o("LayoutLMv2ForSequenceClassification"),d8o=o(" (LayoutLMv2 model)"),c8o=l(),k1=a("li"),rce=a("strong"),f8o=o("layoutlmv3"),m8o=o(" \u2014 "),iD=a("a"),g8o=o("LayoutLMv3ForSequenceClassification"),h8o=o(" (LayoutLMv3 model)"),p8o=l(),S1=a("li"),tce=a("strong"),u8o=o("led"),_8o=o(" \u2014 "),dD=a("a"),b8o=o("LEDForSequenceClassification"),v8o=o(" (LED model)"),F8o=l(),R1=a("li"),ace=a("strong"),T8o=o("longformer"),M8o=o(" \u2014 "),cD=a("a"),E8o=o("LongformerForSequenceClassification"),C8o=o(" (Longformer model)"),w8o=l(),B1=a("li"),nce=a("strong"),A8o=o("mbart"),y8o=o(" \u2014 "),fD=a("a"),L8o=o("MBartForSequenceClassification"),x8o=o(" (mBART model)"),$8o=l(),P1=a("li"),sce=a("strong"),k8o=o("megatron-bert"),S8o=o(" \u2014 "),mD=a("a"),R8o=o("MegatronBertForSequenceClassification"),B8o=o(" (MegatronBert model)"),P8o=l(),I1=a("li"),lce=a("strong"),I8o=o("mobilebert"),q8o=o(" \u2014 "),gD=a("a"),N8o=o("MobileBertForSequenceClassification"),j8o=o(" (MobileBERT model)"),D8o=l(),q1=a("li"),ice=a("strong"),G8o=o("mpnet"),O8o=o(" \u2014 "),hD=a("a"),V8o=o("MPNetForSequenceClassification"),X8o=o(" (MPNet model)"),z8o=l(),N1=a("li"),dce=a("strong"),Q8o=o("nystromformer"),W8o=o(" \u2014 "),pD=a("a"),H8o=o("NystromformerForSequenceClassification"),U8o=o(" (Nystromformer model)"),J8o=l(),j1=a("li"),cce=a("strong"),Y8o=o("openai-gpt"),K8o=o(" \u2014 "),uD=a("a"),Z8o=o("OpenAIGPTForSequenceClassification"),exo=o(" (OpenAI GPT model)"),oxo=l(),D1=a("li"),fce=a("strong"),rxo=o("perceiver"),txo=o(" \u2014 "),_D=a("a"),axo=o("PerceiverForSequenceClassification"),nxo=o(" (Perceiver model)"),sxo=l(),G1=a("li"),mce=a("strong"),lxo=o("plbart"),ixo=o(" \u2014 "),bD=a("a"),dxo=o("PLBartForSequenceClassification"),cxo=o(" (PLBart model)"),fxo=l(),O1=a("li"),gce=a("strong"),mxo=o("qdqbert"),gxo=o(" \u2014 "),vD=a("a"),hxo=o("QDQBertForSequenceClassification"),pxo=o(" (QDQBert model)"),uxo=l(),V1=a("li"),hce=a("strong"),_xo=o("reformer"),bxo=o(" \u2014 "),FD=a("a"),vxo=o("ReformerForSequenceClassification"),Fxo=o(" (Reformer model)"),Txo=l(),X1=a("li"),pce=a("strong"),Mxo=o("rembert"),Exo=o(" \u2014 "),TD=a("a"),Cxo=o("RemBertForSequenceClassification"),wxo=o(" (RemBERT model)"),Axo=l(),z1=a("li"),uce=a("strong"),yxo=o("roberta"),Lxo=o(" \u2014 "),MD=a("a"),xxo=o("RobertaForSequenceClassification"),$xo=o(" (RoBERTa model)"),kxo=l(),Q1=a("li"),_ce=a("strong"),Sxo=o("roformer"),Rxo=o(" \u2014 "),ED=a("a"),Bxo=o("RoFormerForSequenceClassification"),Pxo=o(" (RoFormer model)"),Ixo=l(),W1=a("li"),bce=a("strong"),qxo=o("squeezebert"),Nxo=o(" \u2014 "),CD=a("a"),jxo=o("SqueezeBertForSequenceClassification"),Dxo=o(" (SqueezeBERT model)"),Gxo=l(),H1=a("li"),vce=a("strong"),Oxo=o("tapas"),Vxo=o(" \u2014 "),wD=a("a"),Xxo=o("TapasForSequenceClassification"),zxo=o(" (TAPAS model)"),Qxo=l(),U1=a("li"),Fce=a("strong"),Wxo=o("tapex"),Hxo=o(" \u2014 "),AD=a("a"),Uxo=o("BartForSequenceClassification"),Jxo=o(" (TAPEX model)"),Yxo=l(),J1=a("li"),Tce=a("strong"),Kxo=o("transfo-xl"),Zxo=o(" \u2014 "),yD=a("a"),e9o=o("TransfoXLForSequenceClassification"),o9o=o(" (Transformer-XL model)"),r9o=l(),Y1=a("li"),Mce=a("strong"),t9o=o("xlm"),a9o=o(" \u2014 "),LD=a("a"),n9o=o("XLMForSequenceClassification"),s9o=o(" (XLM model)"),l9o=l(),K1=a("li"),Ece=a("strong"),i9o=o("xlm-roberta"),d9o=o(" \u2014 "),xD=a("a"),c9o=o("XLMRobertaForSequenceClassification"),f9o=o(" (XLM-RoBERTa model)"),m9o=l(),Z1=a("li"),Cce=a("strong"),g9o=o("xlm-roberta-xl"),h9o=o(" \u2014 "),$D=a("a"),p9o=o("XLMRobertaXLForSequenceClassification"),u9o=o(" (XLM-RoBERTa-XL model)"),_9o=l(),eb=a("li"),wce=a("strong"),b9o=o("xlnet"),v9o=o(" \u2014 "),kD=a("a"),F9o=o("XLNetForSequenceClassification"),T9o=o(" (XLNet model)"),M9o=l(),ob=a("li"),Ace=a("strong"),E9o=o("yoso"),C9o=o(" \u2014 "),SD=a("a"),w9o=o("YosoForSequenceClassification"),A9o=o(" (YOSO model)"),y9o=l(),rb=a("p"),L9o=o("The model is set in evaluation mode by default using "),yce=a("code"),x9o=o("model.eval()"),$9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),k9o=o("model.train()"),S9o=l(),F(tb.$$.fragment),bPe=l(),Bi=a("h2"),ab=a("a"),xce=a("span"),F(BA.$$.fragment),R9o=l(),$ce=a("span"),B9o=o("AutoModelForMultipleChoice"),vPe=l(),Bo=a("div"),F(PA.$$.fragment),P9o=l(),Pi=a("p"),I9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RD=a("a"),q9o=o("from_pretrained()"),N9o=o(" class method or the "),BD=a("a"),j9o=o("from_config()"),D9o=o(` class
method.`),G9o=l(),IA=a("p"),O9o=o("This class cannot be instantiated directly using "),kce=a("code"),V9o=o("__init__()"),X9o=o(" (throws an error)."),z9o=l(),nt=a("div"),F(qA.$$.fragment),Q9o=l(),Sce=a("p"),W9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H9o=l(),Ii=a("p"),U9o=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),J9o=o("not"),Y9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=a("a"),K9o=o("from_pretrained()"),Z9o=o(" to load the model weights."),e$o=l(),F(nb.$$.fragment),o$o=l(),eo=a("div"),F(NA.$$.fragment),r$o=l(),Bce=a("p"),t$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a$o=l(),xa=a("p"),n$o=o("The model class to instantiate is selected based on the "),Pce=a("code"),s$o=o("model_type"),l$o=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),i$o=o("pretrained_model_name_or_path"),d$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=a("code"),c$o=o("pretrained_model_name_or_path"),f$o=o(":"),m$o=l(),Y=a("ul"),sb=a("li"),Nce=a("strong"),g$o=o("albert"),h$o=o(" \u2014 "),ID=a("a"),p$o=o("AlbertForMultipleChoice"),u$o=o(" (ALBERT model)"),_$o=l(),lb=a("li"),jce=a("strong"),b$o=o("bert"),v$o=o(" \u2014 "),qD=a("a"),F$o=o("BertForMultipleChoice"),T$o=o(" (BERT model)"),M$o=l(),ib=a("li"),Dce=a("strong"),E$o=o("big_bird"),C$o=o(" \u2014 "),ND=a("a"),w$o=o("BigBirdForMultipleChoice"),A$o=o(" (BigBird model)"),y$o=l(),db=a("li"),Gce=a("strong"),L$o=o("camembert"),x$o=o(" \u2014 "),jD=a("a"),$$o=o("CamembertForMultipleChoice"),k$o=o(" (CamemBERT model)"),S$o=l(),cb=a("li"),Oce=a("strong"),R$o=o("canine"),B$o=o(" \u2014 "),DD=a("a"),P$o=o("CanineForMultipleChoice"),I$o=o(" (Canine model)"),q$o=l(),fb=a("li"),Vce=a("strong"),N$o=o("convbert"),j$o=o(" \u2014 "),GD=a("a"),D$o=o("ConvBertForMultipleChoice"),G$o=o(" (ConvBERT model)"),O$o=l(),mb=a("li"),Xce=a("strong"),V$o=o("data2vec-text"),X$o=o(" \u2014 "),OD=a("a"),z$o=o("Data2VecTextForMultipleChoice"),Q$o=o(" (Data2VecText model)"),W$o=l(),gb=a("li"),zce=a("strong"),H$o=o("distilbert"),U$o=o(" \u2014 "),VD=a("a"),J$o=o("DistilBertForMultipleChoice"),Y$o=o(" (DistilBERT model)"),K$o=l(),hb=a("li"),Qce=a("strong"),Z$o=o("electra"),eko=o(" \u2014 "),XD=a("a"),oko=o("ElectraForMultipleChoice"),rko=o(" (ELECTRA model)"),tko=l(),pb=a("li"),Wce=a("strong"),ako=o("flaubert"),nko=o(" \u2014 "),zD=a("a"),sko=o("FlaubertForMultipleChoice"),lko=o(" (FlauBERT model)"),iko=l(),ub=a("li"),Hce=a("strong"),dko=o("fnet"),cko=o(" \u2014 "),QD=a("a"),fko=o("FNetForMultipleChoice"),mko=o(" (FNet model)"),gko=l(),_b=a("li"),Uce=a("strong"),hko=o("funnel"),pko=o(" \u2014 "),WD=a("a"),uko=o("FunnelForMultipleChoice"),_ko=o(" (Funnel Transformer model)"),bko=l(),bb=a("li"),Jce=a("strong"),vko=o("ibert"),Fko=o(" \u2014 "),HD=a("a"),Tko=o("IBertForMultipleChoice"),Mko=o(" (I-BERT model)"),Eko=l(),vb=a("li"),Yce=a("strong"),Cko=o("longformer"),wko=o(" \u2014 "),UD=a("a"),Ako=o("LongformerForMultipleChoice"),yko=o(" (Longformer model)"),Lko=l(),Fb=a("li"),Kce=a("strong"),xko=o("megatron-bert"),$ko=o(" \u2014 "),JD=a("a"),kko=o("MegatronBertForMultipleChoice"),Sko=o(" (MegatronBert model)"),Rko=l(),Tb=a("li"),Zce=a("strong"),Bko=o("mobilebert"),Pko=o(" \u2014 "),YD=a("a"),Iko=o("MobileBertForMultipleChoice"),qko=o(" (MobileBERT model)"),Nko=l(),Mb=a("li"),efe=a("strong"),jko=o("mpnet"),Dko=o(" \u2014 "),KD=a("a"),Gko=o("MPNetForMultipleChoice"),Oko=o(" (MPNet model)"),Vko=l(),Eb=a("li"),ofe=a("strong"),Xko=o("nystromformer"),zko=o(" \u2014 "),ZD=a("a"),Qko=o("NystromformerForMultipleChoice"),Wko=o(" (Nystromformer model)"),Hko=l(),Cb=a("li"),rfe=a("strong"),Uko=o("qdqbert"),Jko=o(" \u2014 "),eG=a("a"),Yko=o("QDQBertForMultipleChoice"),Kko=o(" (QDQBert model)"),Zko=l(),wb=a("li"),tfe=a("strong"),eSo=o("rembert"),oSo=o(" \u2014 "),oG=a("a"),rSo=o("RemBertForMultipleChoice"),tSo=o(" (RemBERT model)"),aSo=l(),Ab=a("li"),afe=a("strong"),nSo=o("roberta"),sSo=o(" \u2014 "),rG=a("a"),lSo=o("RobertaForMultipleChoice"),iSo=o(" (RoBERTa model)"),dSo=l(),yb=a("li"),nfe=a("strong"),cSo=o("roformer"),fSo=o(" \u2014 "),tG=a("a"),mSo=o("RoFormerForMultipleChoice"),gSo=o(" (RoFormer model)"),hSo=l(),Lb=a("li"),sfe=a("strong"),pSo=o("squeezebert"),uSo=o(" \u2014 "),aG=a("a"),_So=o("SqueezeBertForMultipleChoice"),bSo=o(" (SqueezeBERT model)"),vSo=l(),xb=a("li"),lfe=a("strong"),FSo=o("xlm"),TSo=o(" \u2014 "),nG=a("a"),MSo=o("XLMForMultipleChoice"),ESo=o(" (XLM model)"),CSo=l(),$b=a("li"),ife=a("strong"),wSo=o("xlm-roberta"),ASo=o(" \u2014 "),sG=a("a"),ySo=o("XLMRobertaForMultipleChoice"),LSo=o(" (XLM-RoBERTa model)"),xSo=l(),kb=a("li"),dfe=a("strong"),$So=o("xlm-roberta-xl"),kSo=o(" \u2014 "),lG=a("a"),SSo=o("XLMRobertaXLForMultipleChoice"),RSo=o(" (XLM-RoBERTa-XL model)"),BSo=l(),Sb=a("li"),cfe=a("strong"),PSo=o("xlnet"),ISo=o(" \u2014 "),iG=a("a"),qSo=o("XLNetForMultipleChoice"),NSo=o(" (XLNet model)"),jSo=l(),Rb=a("li"),ffe=a("strong"),DSo=o("yoso"),GSo=o(" \u2014 "),dG=a("a"),OSo=o("YosoForMultipleChoice"),VSo=o(" (YOSO model)"),XSo=l(),Bb=a("p"),zSo=o("The model is set in evaluation mode by default using "),mfe=a("code"),QSo=o("model.eval()"),WSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),HSo=o("model.train()"),USo=l(),F(Pb.$$.fragment),FPe=l(),qi=a("h2"),Ib=a("a"),hfe=a("span"),F(jA.$$.fragment),JSo=l(),pfe=a("span"),YSo=o("AutoModelForNextSentencePrediction"),TPe=l(),Po=a("div"),F(DA.$$.fragment),KSo=l(),Ni=a("p"),ZSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cG=a("a"),eRo=o("from_pretrained()"),oRo=o(" class method or the "),fG=a("a"),rRo=o("from_config()"),tRo=o(` class
method.`),aRo=l(),GA=a("p"),nRo=o("This class cannot be instantiated directly using "),ufe=a("code"),sRo=o("__init__()"),lRo=o(" (throws an error)."),iRo=l(),st=a("div"),F(OA.$$.fragment),dRo=l(),_fe=a("p"),cRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fRo=l(),ji=a("p"),mRo=o(`Note:
Loading a model from its configuration file does `),bfe=a("strong"),gRo=o("not"),hRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),pRo=o("from_pretrained()"),uRo=o(" to load the model weights."),_Ro=l(),F(qb.$$.fragment),bRo=l(),oo=a("div"),F(VA.$$.fragment),vRo=l(),vfe=a("p"),FRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TRo=l(),$a=a("p"),MRo=o("The model class to instantiate is selected based on the "),Ffe=a("code"),ERo=o("model_type"),CRo=o(` property of the config object (either
passed as an argument or loaded from `),Tfe=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=a("code"),yRo=o("pretrained_model_name_or_path"),LRo=o(":"),xRo=l(),Ur=a("ul"),Nb=a("li"),Efe=a("strong"),$Ro=o("bert"),kRo=o(" \u2014 "),gG=a("a"),SRo=o("BertForNextSentencePrediction"),RRo=o(" (BERT model)"),BRo=l(),jb=a("li"),Cfe=a("strong"),PRo=o("fnet"),IRo=o(" \u2014 "),hG=a("a"),qRo=o("FNetForNextSentencePrediction"),NRo=o(" (FNet model)"),jRo=l(),Db=a("li"),wfe=a("strong"),DRo=o("megatron-bert"),GRo=o(" \u2014 "),pG=a("a"),ORo=o("MegatronBertForNextSentencePrediction"),VRo=o(" (MegatronBert model)"),XRo=l(),Gb=a("li"),Afe=a("strong"),zRo=o("mobilebert"),QRo=o(" \u2014 "),uG=a("a"),WRo=o("MobileBertForNextSentencePrediction"),HRo=o(" (MobileBERT model)"),URo=l(),Ob=a("li"),yfe=a("strong"),JRo=o("qdqbert"),YRo=o(" \u2014 "),_G=a("a"),KRo=o("QDQBertForNextSentencePrediction"),ZRo=o(" (QDQBert model)"),eBo=l(),Vb=a("p"),oBo=o("The model is set in evaluation mode by default using "),Lfe=a("code"),rBo=o("model.eval()"),tBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),aBo=o("model.train()"),nBo=l(),F(Xb.$$.fragment),MPe=l(),Di=a("h2"),zb=a("a"),$fe=a("span"),F(XA.$$.fragment),sBo=l(),kfe=a("span"),lBo=o("AutoModelForTokenClassification"),EPe=l(),Io=a("div"),F(zA.$$.fragment),iBo=l(),Gi=a("p"),dBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bG=a("a"),cBo=o("from_pretrained()"),fBo=o(" class method or the "),vG=a("a"),mBo=o("from_config()"),gBo=o(` class
method.`),hBo=l(),QA=a("p"),pBo=o("This class cannot be instantiated directly using "),Sfe=a("code"),uBo=o("__init__()"),_Bo=o(" (throws an error)."),bBo=l(),lt=a("div"),F(WA.$$.fragment),vBo=l(),Rfe=a("p"),FBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TBo=l(),Oi=a("p"),MBo=o(`Note:
Loading a model from its configuration file does `),Bfe=a("strong"),EBo=o("not"),CBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),wBo=o("from_pretrained()"),ABo=o(" to load the model weights."),yBo=l(),F(Qb.$$.fragment),LBo=l(),ro=a("div"),F(HA.$$.fragment),xBo=l(),Pfe=a("p"),$Bo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kBo=l(),ka=a("p"),SBo=o("The model class to instantiate is selected based on the "),Ife=a("code"),RBo=o("model_type"),BBo=o(` property of the config object (either
passed as an argument or loaded from `),qfe=a("code"),PBo=o("pretrained_model_name_or_path"),IBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),qBo=o("pretrained_model_name_or_path"),NBo=o(":"),jBo=l(),W=a("ul"),Wb=a("li"),jfe=a("strong"),DBo=o("albert"),GBo=o(" \u2014 "),TG=a("a"),OBo=o("AlbertForTokenClassification"),VBo=o(" (ALBERT model)"),XBo=l(),Hb=a("li"),Dfe=a("strong"),zBo=o("bert"),QBo=o(" \u2014 "),MG=a("a"),WBo=o("BertForTokenClassification"),HBo=o(" (BERT model)"),UBo=l(),Ub=a("li"),Gfe=a("strong"),JBo=o("big_bird"),YBo=o(" \u2014 "),EG=a("a"),KBo=o("BigBirdForTokenClassification"),ZBo=o(" (BigBird model)"),ePo=l(),Jb=a("li"),Ofe=a("strong"),oPo=o("camembert"),rPo=o(" \u2014 "),CG=a("a"),tPo=o("CamembertForTokenClassification"),aPo=o(" (CamemBERT model)"),nPo=l(),Yb=a("li"),Vfe=a("strong"),sPo=o("canine"),lPo=o(" \u2014 "),wG=a("a"),iPo=o("CanineForTokenClassification"),dPo=o(" (Canine model)"),cPo=l(),Kb=a("li"),Xfe=a("strong"),fPo=o("convbert"),mPo=o(" \u2014 "),AG=a("a"),gPo=o("ConvBertForTokenClassification"),hPo=o(" (ConvBERT model)"),pPo=l(),Zb=a("li"),zfe=a("strong"),uPo=o("data2vec-text"),_Po=o(" \u2014 "),yG=a("a"),bPo=o("Data2VecTextForTokenClassification"),vPo=o(" (Data2VecText model)"),FPo=l(),e2=a("li"),Qfe=a("strong"),TPo=o("deberta"),MPo=o(" \u2014 "),LG=a("a"),EPo=o("DebertaForTokenClassification"),CPo=o(" (DeBERTa model)"),wPo=l(),o2=a("li"),Wfe=a("strong"),APo=o("deberta-v2"),yPo=o(" \u2014 "),xG=a("a"),LPo=o("DebertaV2ForTokenClassification"),xPo=o(" (DeBERTa-v2 model)"),$Po=l(),r2=a("li"),Hfe=a("strong"),kPo=o("distilbert"),SPo=o(" \u2014 "),$G=a("a"),RPo=o("DistilBertForTokenClassification"),BPo=o(" (DistilBERT model)"),PPo=l(),t2=a("li"),Ufe=a("strong"),IPo=o("electra"),qPo=o(" \u2014 "),kG=a("a"),NPo=o("ElectraForTokenClassification"),jPo=o(" (ELECTRA model)"),DPo=l(),a2=a("li"),Jfe=a("strong"),GPo=o("flaubert"),OPo=o(" \u2014 "),SG=a("a"),VPo=o("FlaubertForTokenClassification"),XPo=o(" (FlauBERT model)"),zPo=l(),n2=a("li"),Yfe=a("strong"),QPo=o("fnet"),WPo=o(" \u2014 "),RG=a("a"),HPo=o("FNetForTokenClassification"),UPo=o(" (FNet model)"),JPo=l(),s2=a("li"),Kfe=a("strong"),YPo=o("funnel"),KPo=o(" \u2014 "),BG=a("a"),ZPo=o("FunnelForTokenClassification"),eIo=o(" (Funnel Transformer model)"),oIo=l(),l2=a("li"),Zfe=a("strong"),rIo=o("gpt2"),tIo=o(" \u2014 "),PG=a("a"),aIo=o("GPT2ForTokenClassification"),nIo=o(" (OpenAI GPT-2 model)"),sIo=l(),i2=a("li"),eme=a("strong"),lIo=o("ibert"),iIo=o(" \u2014 "),IG=a("a"),dIo=o("IBertForTokenClassification"),cIo=o(" (I-BERT model)"),fIo=l(),d2=a("li"),ome=a("strong"),mIo=o("layoutlm"),gIo=o(" \u2014 "),qG=a("a"),hIo=o("LayoutLMForTokenClassification"),pIo=o(" (LayoutLM model)"),uIo=l(),c2=a("li"),rme=a("strong"),_Io=o("layoutlmv2"),bIo=o(" \u2014 "),NG=a("a"),vIo=o("LayoutLMv2ForTokenClassification"),FIo=o(" (LayoutLMv2 model)"),TIo=l(),f2=a("li"),tme=a("strong"),MIo=o("layoutlmv3"),EIo=o(" \u2014 "),jG=a("a"),CIo=o("LayoutLMv3ForTokenClassification"),wIo=o(" (LayoutLMv3 model)"),AIo=l(),m2=a("li"),ame=a("strong"),yIo=o("longformer"),LIo=o(" \u2014 "),DG=a("a"),xIo=o("LongformerForTokenClassification"),$Io=o(" (Longformer model)"),kIo=l(),g2=a("li"),nme=a("strong"),SIo=o("megatron-bert"),RIo=o(" \u2014 "),GG=a("a"),BIo=o("MegatronBertForTokenClassification"),PIo=o(" (MegatronBert model)"),IIo=l(),h2=a("li"),sme=a("strong"),qIo=o("mobilebert"),NIo=o(" \u2014 "),OG=a("a"),jIo=o("MobileBertForTokenClassification"),DIo=o(" (MobileBERT model)"),GIo=l(),p2=a("li"),lme=a("strong"),OIo=o("mpnet"),VIo=o(" \u2014 "),VG=a("a"),XIo=o("MPNetForTokenClassification"),zIo=o(" (MPNet model)"),QIo=l(),u2=a("li"),ime=a("strong"),WIo=o("nystromformer"),HIo=o(" \u2014 "),XG=a("a"),UIo=o("NystromformerForTokenClassification"),JIo=o(" (Nystromformer model)"),YIo=l(),_2=a("li"),dme=a("strong"),KIo=o("qdqbert"),ZIo=o(" \u2014 "),zG=a("a"),eqo=o("QDQBertForTokenClassification"),oqo=o(" (QDQBert model)"),rqo=l(),b2=a("li"),cme=a("strong"),tqo=o("rembert"),aqo=o(" \u2014 "),QG=a("a"),nqo=o("RemBertForTokenClassification"),sqo=o(" (RemBERT model)"),lqo=l(),v2=a("li"),fme=a("strong"),iqo=o("roberta"),dqo=o(" \u2014 "),WG=a("a"),cqo=o("RobertaForTokenClassification"),fqo=o(" (RoBERTa model)"),mqo=l(),F2=a("li"),mme=a("strong"),gqo=o("roformer"),hqo=o(" \u2014 "),HG=a("a"),pqo=o("RoFormerForTokenClassification"),uqo=o(" (RoFormer model)"),_qo=l(),T2=a("li"),gme=a("strong"),bqo=o("squeezebert"),vqo=o(" \u2014 "),UG=a("a"),Fqo=o("SqueezeBertForTokenClassification"),Tqo=o(" (SqueezeBERT model)"),Mqo=l(),M2=a("li"),hme=a("strong"),Eqo=o("xlm"),Cqo=o(" \u2014 "),JG=a("a"),wqo=o("XLMForTokenClassification"),Aqo=o(" (XLM model)"),yqo=l(),E2=a("li"),pme=a("strong"),Lqo=o("xlm-roberta"),xqo=o(" \u2014 "),YG=a("a"),$qo=o("XLMRobertaForTokenClassification"),kqo=o(" (XLM-RoBERTa model)"),Sqo=l(),C2=a("li"),ume=a("strong"),Rqo=o("xlm-roberta-xl"),Bqo=o(" \u2014 "),KG=a("a"),Pqo=o("XLMRobertaXLForTokenClassification"),Iqo=o(" (XLM-RoBERTa-XL model)"),qqo=l(),w2=a("li"),_me=a("strong"),Nqo=o("xlnet"),jqo=o(" \u2014 "),ZG=a("a"),Dqo=o("XLNetForTokenClassification"),Gqo=o(" (XLNet model)"),Oqo=l(),A2=a("li"),bme=a("strong"),Vqo=o("yoso"),Xqo=o(" \u2014 "),eO=a("a"),zqo=o("YosoForTokenClassification"),Qqo=o(" (YOSO model)"),Wqo=l(),y2=a("p"),Hqo=o("The model is set in evaluation mode by default using "),vme=a("code"),Uqo=o("model.eval()"),Jqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),Yqo=o("model.train()"),Kqo=l(),F(L2.$$.fragment),CPe=l(),Vi=a("h2"),x2=a("a"),Tme=a("span"),F(UA.$$.fragment),Zqo=l(),Mme=a("span"),eNo=o("AutoModelForQuestionAnswering"),wPe=l(),qo=a("div"),F(JA.$$.fragment),oNo=l(),Xi=a("p"),rNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oO=a("a"),tNo=o("from_pretrained()"),aNo=o(" class method or the "),rO=a("a"),nNo=o("from_config()"),sNo=o(` class
method.`),lNo=l(),YA=a("p"),iNo=o("This class cannot be instantiated directly using "),Eme=a("code"),dNo=o("__init__()"),cNo=o(" (throws an error)."),fNo=l(),it=a("div"),F(KA.$$.fragment),mNo=l(),Cme=a("p"),gNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hNo=l(),zi=a("p"),pNo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),uNo=o("not"),_No=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),bNo=o("from_pretrained()"),vNo=o(" to load the model weights."),FNo=l(),F($2.$$.fragment),TNo=l(),to=a("div"),F(ZA.$$.fragment),MNo=l(),Ame=a("p"),ENo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CNo=l(),Sa=a("p"),wNo=o("The model class to instantiate is selected based on the "),yme=a("code"),ANo=o("model_type"),yNo=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),LNo=o("pretrained_model_name_or_path"),xNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=a("code"),$No=o("pretrained_model_name_or_path"),kNo=o(":"),SNo=l(),G=a("ul"),k2=a("li"),$me=a("strong"),RNo=o("albert"),BNo=o(" \u2014 "),aO=a("a"),PNo=o("AlbertForQuestionAnswering"),INo=o(" (ALBERT model)"),qNo=l(),S2=a("li"),kme=a("strong"),NNo=o("bart"),jNo=o(" \u2014 "),nO=a("a"),DNo=o("BartForQuestionAnswering"),GNo=o(" (BART model)"),ONo=l(),R2=a("li"),Sme=a("strong"),VNo=o("bert"),XNo=o(" \u2014 "),sO=a("a"),zNo=o("BertForQuestionAnswering"),QNo=o(" (BERT model)"),WNo=l(),B2=a("li"),Rme=a("strong"),HNo=o("big_bird"),UNo=o(" \u2014 "),lO=a("a"),JNo=o("BigBirdForQuestionAnswering"),YNo=o(" (BigBird model)"),KNo=l(),P2=a("li"),Bme=a("strong"),ZNo=o("bigbird_pegasus"),ejo=o(" \u2014 "),iO=a("a"),ojo=o("BigBirdPegasusForQuestionAnswering"),rjo=o(" (BigBirdPegasus model)"),tjo=l(),I2=a("li"),Pme=a("strong"),ajo=o("camembert"),njo=o(" \u2014 "),dO=a("a"),sjo=o("CamembertForQuestionAnswering"),ljo=o(" (CamemBERT model)"),ijo=l(),q2=a("li"),Ime=a("strong"),djo=o("canine"),cjo=o(" \u2014 "),cO=a("a"),fjo=o("CanineForQuestionAnswering"),mjo=o(" (Canine model)"),gjo=l(),N2=a("li"),qme=a("strong"),hjo=o("convbert"),pjo=o(" \u2014 "),fO=a("a"),ujo=o("ConvBertForQuestionAnswering"),_jo=o(" (ConvBERT model)"),bjo=l(),j2=a("li"),Nme=a("strong"),vjo=o("data2vec-text"),Fjo=o(" \u2014 "),mO=a("a"),Tjo=o("Data2VecTextForQuestionAnswering"),Mjo=o(" (Data2VecText model)"),Ejo=l(),D2=a("li"),jme=a("strong"),Cjo=o("deberta"),wjo=o(" \u2014 "),gO=a("a"),Ajo=o("DebertaForQuestionAnswering"),yjo=o(" (DeBERTa model)"),Ljo=l(),G2=a("li"),Dme=a("strong"),xjo=o("deberta-v2"),$jo=o(" \u2014 "),hO=a("a"),kjo=o("DebertaV2ForQuestionAnswering"),Sjo=o(" (DeBERTa-v2 model)"),Rjo=l(),O2=a("li"),Gme=a("strong"),Bjo=o("distilbert"),Pjo=o(" \u2014 "),pO=a("a"),Ijo=o("DistilBertForQuestionAnswering"),qjo=o(" (DistilBERT model)"),Njo=l(),V2=a("li"),Ome=a("strong"),jjo=o("electra"),Djo=o(" \u2014 "),uO=a("a"),Gjo=o("ElectraForQuestionAnswering"),Ojo=o(" (ELECTRA model)"),Vjo=l(),X2=a("li"),Vme=a("strong"),Xjo=o("flaubert"),zjo=o(" \u2014 "),_O=a("a"),Qjo=o("FlaubertForQuestionAnsweringSimple"),Wjo=o(" (FlauBERT model)"),Hjo=l(),z2=a("li"),Xme=a("strong"),Ujo=o("fnet"),Jjo=o(" \u2014 "),bO=a("a"),Yjo=o("FNetForQuestionAnswering"),Kjo=o(" (FNet model)"),Zjo=l(),Q2=a("li"),zme=a("strong"),eDo=o("funnel"),oDo=o(" \u2014 "),vO=a("a"),rDo=o("FunnelForQuestionAnswering"),tDo=o(" (Funnel Transformer model)"),aDo=l(),W2=a("li"),Qme=a("strong"),nDo=o("gptj"),sDo=o(" \u2014 "),FO=a("a"),lDo=o("GPTJForQuestionAnswering"),iDo=o(" (GPT-J model)"),dDo=l(),H2=a("li"),Wme=a("strong"),cDo=o("ibert"),fDo=o(" \u2014 "),TO=a("a"),mDo=o("IBertForQuestionAnswering"),gDo=o(" (I-BERT model)"),hDo=l(),U2=a("li"),Hme=a("strong"),pDo=o("layoutlmv2"),uDo=o(" \u2014 "),MO=a("a"),_Do=o("LayoutLMv2ForQuestionAnswering"),bDo=o(" (LayoutLMv2 model)"),vDo=l(),J2=a("li"),Ume=a("strong"),FDo=o("layoutlmv3"),TDo=o(" \u2014 "),EO=a("a"),MDo=o("LayoutLMv3ForQuestionAnswering"),EDo=o(" (LayoutLMv3 model)"),CDo=l(),Y2=a("li"),Jme=a("strong"),wDo=o("led"),ADo=o(" \u2014 "),CO=a("a"),yDo=o("LEDForQuestionAnswering"),LDo=o(" (LED model)"),xDo=l(),K2=a("li"),Yme=a("strong"),$Do=o("longformer"),kDo=o(" \u2014 "),wO=a("a"),SDo=o("LongformerForQuestionAnswering"),RDo=o(" (Longformer model)"),BDo=l(),Z2=a("li"),Kme=a("strong"),PDo=o("lxmert"),IDo=o(" \u2014 "),AO=a("a"),qDo=o("LxmertForQuestionAnswering"),NDo=o(" (LXMERT model)"),jDo=l(),ev=a("li"),Zme=a("strong"),DDo=o("mbart"),GDo=o(" \u2014 "),yO=a("a"),ODo=o("MBartForQuestionAnswering"),VDo=o(" (mBART model)"),XDo=l(),ov=a("li"),ege=a("strong"),zDo=o("megatron-bert"),QDo=o(" \u2014 "),LO=a("a"),WDo=o("MegatronBertForQuestionAnswering"),HDo=o(" (MegatronBert model)"),UDo=l(),rv=a("li"),oge=a("strong"),JDo=o("mobilebert"),YDo=o(" \u2014 "),xO=a("a"),KDo=o("MobileBertForQuestionAnswering"),ZDo=o(" (MobileBERT model)"),eGo=l(),tv=a("li"),rge=a("strong"),oGo=o("mpnet"),rGo=o(" \u2014 "),$O=a("a"),tGo=o("MPNetForQuestionAnswering"),aGo=o(" (MPNet model)"),nGo=l(),av=a("li"),tge=a("strong"),sGo=o("nystromformer"),lGo=o(" \u2014 "),kO=a("a"),iGo=o("NystromformerForQuestionAnswering"),dGo=o(" (Nystromformer model)"),cGo=l(),nv=a("li"),age=a("strong"),fGo=o("qdqbert"),mGo=o(" \u2014 "),SO=a("a"),gGo=o("QDQBertForQuestionAnswering"),hGo=o(" (QDQBert model)"),pGo=l(),sv=a("li"),nge=a("strong"),uGo=o("reformer"),_Go=o(" \u2014 "),RO=a("a"),bGo=o("ReformerForQuestionAnswering"),vGo=o(" (Reformer model)"),FGo=l(),lv=a("li"),sge=a("strong"),TGo=o("rembert"),MGo=o(" \u2014 "),BO=a("a"),EGo=o("RemBertForQuestionAnswering"),CGo=o(" (RemBERT model)"),wGo=l(),iv=a("li"),lge=a("strong"),AGo=o("roberta"),yGo=o(" \u2014 "),PO=a("a"),LGo=o("RobertaForQuestionAnswering"),xGo=o(" (RoBERTa model)"),$Go=l(),dv=a("li"),ige=a("strong"),kGo=o("roformer"),SGo=o(" \u2014 "),IO=a("a"),RGo=o("RoFormerForQuestionAnswering"),BGo=o(" (RoFormer model)"),PGo=l(),cv=a("li"),dge=a("strong"),IGo=o("splinter"),qGo=o(" \u2014 "),qO=a("a"),NGo=o("SplinterForQuestionAnswering"),jGo=o(" (Splinter model)"),DGo=l(),fv=a("li"),cge=a("strong"),GGo=o("squeezebert"),OGo=o(" \u2014 "),NO=a("a"),VGo=o("SqueezeBertForQuestionAnswering"),XGo=o(" (SqueezeBERT model)"),zGo=l(),mv=a("li"),fge=a("strong"),QGo=o("xlm"),WGo=o(" \u2014 "),jO=a("a"),HGo=o("XLMForQuestionAnsweringSimple"),UGo=o(" (XLM model)"),JGo=l(),gv=a("li"),mge=a("strong"),YGo=o("xlm-roberta"),KGo=o(" \u2014 "),DO=a("a"),ZGo=o("XLMRobertaForQuestionAnswering"),eOo=o(" (XLM-RoBERTa model)"),oOo=l(),hv=a("li"),gge=a("strong"),rOo=o("xlm-roberta-xl"),tOo=o(" \u2014 "),GO=a("a"),aOo=o("XLMRobertaXLForQuestionAnswering"),nOo=o(" (XLM-RoBERTa-XL model)"),sOo=l(),pv=a("li"),hge=a("strong"),lOo=o("xlnet"),iOo=o(" \u2014 "),OO=a("a"),dOo=o("XLNetForQuestionAnsweringSimple"),cOo=o(" (XLNet model)"),fOo=l(),uv=a("li"),pge=a("strong"),mOo=o("yoso"),gOo=o(" \u2014 "),VO=a("a"),hOo=o("YosoForQuestionAnswering"),pOo=o(" (YOSO model)"),uOo=l(),_v=a("p"),_Oo=o("The model is set in evaluation mode by default using "),uge=a("code"),bOo=o("model.eval()"),vOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=a("code"),FOo=o("model.train()"),TOo=l(),F(bv.$$.fragment),APe=l(),Qi=a("h2"),vv=a("a"),bge=a("span"),F(ey.$$.fragment),MOo=l(),vge=a("span"),EOo=o("AutoModelForTableQuestionAnswering"),yPe=l(),No=a("div"),F(oy.$$.fragment),COo=l(),Wi=a("p"),wOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XO=a("a"),AOo=o("from_pretrained()"),yOo=o(" class method or the "),zO=a("a"),LOo=o("from_config()"),xOo=o(` class
method.`),$Oo=l(),ry=a("p"),kOo=o("This class cannot be instantiated directly using "),Fge=a("code"),SOo=o("__init__()"),ROo=o(" (throws an error)."),BOo=l(),dt=a("div"),F(ty.$$.fragment),POo=l(),Tge=a("p"),IOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qOo=l(),Hi=a("p"),NOo=o(`Note:
Loading a model from its configuration file does `),Mge=a("strong"),jOo=o("not"),DOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),GOo=o("from_pretrained()"),OOo=o(" to load the model weights."),VOo=l(),F(Fv.$$.fragment),XOo=l(),ao=a("div"),F(ay.$$.fragment),zOo=l(),Ege=a("p"),QOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WOo=l(),Ra=a("p"),HOo=o("The model class to instantiate is selected based on the "),Cge=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),yge=a("ul"),Tv=a("li"),Lge=a("strong"),rVo=o("tapas"),tVo=o(" \u2014 "),WO=a("a"),aVo=o("TapasForQuestionAnswering"),nVo=o(" (TAPAS model)"),sVo=l(),Mv=a("p"),lVo=o("The model is set in evaluation mode by default using "),xge=a("code"),iVo=o("model.eval()"),dVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ge=a("code"),cVo=o("model.train()"),fVo=l(),F(Ev.$$.fragment),LPe=l(),Ui=a("h2"),Cv=a("a"),kge=a("span"),F(ny.$$.fragment),mVo=l(),Sge=a("span"),gVo=o("AutoModelForImageClassification"),xPe=l(),jo=a("div"),F(sy.$$.fragment),hVo=l(),Ji=a("p"),pVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HO=a("a"),uVo=o("from_pretrained()"),_Vo=o(" class method or the "),UO=a("a"),bVo=o("from_config()"),vVo=o(` class
method.`),FVo=l(),ly=a("p"),TVo=o("This class cannot be instantiated directly using "),Rge=a("code"),MVo=o("__init__()"),EVo=o(" (throws an error)."),CVo=l(),ct=a("div"),F(iy.$$.fragment),wVo=l(),Bge=a("p"),AVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yVo=l(),Yi=a("p"),LVo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),xVo=o("not"),$Vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),kVo=o("from_pretrained()"),SVo=o(" to load the model weights."),RVo=l(),F(wv.$$.fragment),BVo=l(),no=a("div"),F(dy.$$.fragment),PVo=l(),Ige=a("p"),IVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qVo=l(),Ba=a("p"),NVo=o("The model class to instantiate is selected based on the "),qge=a("code"),jVo=o("model_type"),DVo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),GVo=o("pretrained_model_name_or_path"),OVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=a("code"),VVo=o("pretrained_model_name_or_path"),XVo=o(":"),zVo=l(),Fe=a("ul"),Av=a("li"),Dge=a("strong"),QVo=o("beit"),WVo=o(" \u2014 "),YO=a("a"),HVo=o("BeitForImageClassification"),UVo=o(" (BEiT model)"),JVo=l(),yv=a("li"),Gge=a("strong"),YVo=o("convnext"),KVo=o(" \u2014 "),KO=a("a"),ZVo=o("ConvNextForImageClassification"),eXo=o(" (ConvNext model)"),oXo=l(),Lv=a("li"),Oge=a("strong"),rXo=o("data2vec-vision"),tXo=o(" \u2014 "),ZO=a("a"),aXo=o("Data2VecVisionForImageClassification"),nXo=o(" (Data2VecVision model)"),sXo=l(),$s=a("li"),Vge=a("strong"),lXo=o("deit"),iXo=o(" \u2014 "),eV=a("a"),dXo=o("DeiTForImageClassification"),cXo=o(" or "),oV=a("a"),fXo=o("DeiTForImageClassificationWithTeacher"),mXo=o(" (DeiT model)"),gXo=l(),xv=a("li"),Xge=a("strong"),hXo=o("imagegpt"),pXo=o(" \u2014 "),rV=a("a"),uXo=o("ImageGPTForImageClassification"),_Xo=o(" (ImageGPT model)"),bXo=l(),ft=a("li"),zge=a("strong"),vXo=o("perceiver"),FXo=o(" \u2014 "),tV=a("a"),TXo=o("PerceiverForImageClassificationLearned"),MXo=o(" or "),aV=a("a"),EXo=o("PerceiverForImageClassificationFourier"),CXo=o(" or "),nV=a("a"),wXo=o("PerceiverForImageClassificationConvProcessing"),AXo=o(" (Perceiver model)"),yXo=l(),$v=a("li"),Qge=a("strong"),LXo=o("poolformer"),xXo=o(" \u2014 "),sV=a("a"),$Xo=o("PoolFormerForImageClassification"),kXo=o(" (PoolFormer model)"),SXo=l(),kv=a("li"),Wge=a("strong"),RXo=o("regnet"),BXo=o(" \u2014 "),lV=a("a"),PXo=o("RegNetForImageClassification"),IXo=o(" (RegNet model)"),qXo=l(),Sv=a("li"),Hge=a("strong"),NXo=o("resnet"),jXo=o(" \u2014 "),iV=a("a"),DXo=o("ResNetForImageClassification"),GXo=o(" (ResNet model)"),OXo=l(),Rv=a("li"),Uge=a("strong"),VXo=o("segformer"),XXo=o(" \u2014 "),dV=a("a"),zXo=o("SegformerForImageClassification"),QXo=o(" (SegFormer model)"),WXo=l(),Bv=a("li"),Jge=a("strong"),HXo=o("swin"),UXo=o(" \u2014 "),cV=a("a"),JXo=o("SwinForImageClassification"),YXo=o(" (Swin model)"),KXo=l(),Pv=a("li"),Yge=a("strong"),ZXo=o("van"),ezo=o(" \u2014 "),fV=a("a"),ozo=o("VanForImageClassification"),rzo=o(" (VAN model)"),tzo=l(),Iv=a("li"),Kge=a("strong"),azo=o("vit"),nzo=o(" \u2014 "),mV=a("a"),szo=o("ViTForImageClassification"),lzo=o(" (ViT model)"),izo=l(),qv=a("p"),dzo=o("The model is set in evaluation mode by default using "),Zge=a("code"),czo=o("model.eval()"),fzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=a("code"),mzo=o("model.train()"),gzo=l(),F(Nv.$$.fragment),$Pe=l(),Ki=a("h2"),jv=a("a"),ohe=a("span"),F(cy.$$.fragment),hzo=l(),rhe=a("span"),pzo=o("AutoModelForVision2Seq"),kPe=l(),Do=a("div"),F(fy.$$.fragment),uzo=l(),Zi=a("p"),_zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gV=a("a"),bzo=o("from_pretrained()"),vzo=o(" class method or the "),hV=a("a"),Fzo=o("from_config()"),Tzo=o(` class
method.`),Mzo=l(),my=a("p"),Ezo=o("This class cannot be instantiated directly using "),the=a("code"),Czo=o("__init__()"),wzo=o(" (throws an error)."),Azo=l(),mt=a("div"),F(gy.$$.fragment),yzo=l(),ahe=a("p"),Lzo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xzo=l(),ed=a("p"),$zo=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),kzo=o("not"),Szo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),Rzo=o("from_pretrained()"),Bzo=o(" to load the model weights."),Pzo=l(),F(Dv.$$.fragment),Izo=l(),so=a("div"),F(hy.$$.fragment),qzo=l(),she=a("p"),Nzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jzo=l(),Pa=a("p"),Dzo=o("The model class to instantiate is selected based on the "),lhe=a("code"),Gzo=o("model_type"),Ozo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),Vzo=o("pretrained_model_name_or_path"),Xzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),zzo=o("pretrained_model_name_or_path"),Qzo=o(":"),Wzo=l(),che=a("ul"),Gv=a("li"),fhe=a("strong"),Hzo=o("vision-encoder-decoder"),Uzo=o(" \u2014 "),uV=a("a"),Jzo=o("VisionEncoderDecoderModel"),Yzo=o(" (Vision Encoder decoder model)"),Kzo=l(),Ov=a("p"),Zzo=o("The model is set in evaluation mode by default using "),mhe=a("code"),eQo=o("model.eval()"),oQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),rQo=o("model.train()"),tQo=l(),F(Vv.$$.fragment),SPe=l(),od=a("h2"),Xv=a("a"),hhe=a("span"),F(py.$$.fragment),aQo=l(),phe=a("span"),nQo=o("AutoModelForAudioClassification"),RPe=l(),Go=a("div"),F(uy.$$.fragment),sQo=l(),rd=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_V=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),bV=a("a"),cQo=o("from_config()"),fQo=o(` class
method.`),mQo=l(),_y=a("p"),gQo=o("This class cannot be instantiated directly using "),uhe=a("code"),hQo=o("__init__()"),pQo=o(" (throws an error)."),uQo=l(),gt=a("div"),F(by.$$.fragment),_Qo=l(),_he=a("p"),bQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vQo=l(),td=a("p"),FQo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),F(zv.$$.fragment),AQo=l(),lo=a("div"),F(vy.$$.fragment),yQo=l(),vhe=a("p"),LQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xQo=l(),Ia=a("p"),$Qo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),kQo=o("model_type"),SQo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),RQo=o("pretrained_model_name_or_path"),BQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),PQo=o("pretrained_model_name_or_path"),IQo=o(":"),qQo=l(),Ne=a("ul"),Qv=a("li"),Ehe=a("strong"),NQo=o("data2vec-audio"),jQo=o(" \u2014 "),FV=a("a"),DQo=o("Data2VecAudioForSequenceClassification"),GQo=o(" (Data2VecAudio model)"),OQo=l(),Wv=a("li"),Che=a("strong"),VQo=o("hubert"),XQo=o(" \u2014 "),TV=a("a"),zQo=o("HubertForSequenceClassification"),QQo=o(" (Hubert model)"),WQo=l(),Hv=a("li"),whe=a("strong"),HQo=o("sew"),UQo=o(" \u2014 "),MV=a("a"),JQo=o("SEWForSequenceClassification"),YQo=o(" (SEW model)"),KQo=l(),Uv=a("li"),Ahe=a("strong"),ZQo=o("sew-d"),eWo=o(" \u2014 "),EV=a("a"),oWo=o("SEWDForSequenceClassification"),rWo=o(" (SEW-D model)"),tWo=l(),Jv=a("li"),yhe=a("strong"),aWo=o("unispeech"),nWo=o(" \u2014 "),CV=a("a"),sWo=o("UniSpeechForSequenceClassification"),lWo=o(" (UniSpeech model)"),iWo=l(),Yv=a("li"),Lhe=a("strong"),dWo=o("unispeech-sat"),cWo=o(" \u2014 "),wV=a("a"),fWo=o("UniSpeechSatForSequenceClassification"),mWo=o(" (UniSpeechSat model)"),gWo=l(),Kv=a("li"),xhe=a("strong"),hWo=o("wav2vec2"),pWo=o(" \u2014 "),AV=a("a"),uWo=o("Wav2Vec2ForSequenceClassification"),_Wo=o(" (Wav2Vec2 model)"),bWo=l(),Zv=a("li"),$he=a("strong"),vWo=o("wavlm"),FWo=o(" \u2014 "),yV=a("a"),TWo=o("WavLMForSequenceClassification"),MWo=o(" (WavLM model)"),EWo=l(),eF=a("p"),CWo=o("The model is set in evaluation mode by default using "),khe=a("code"),wWo=o("model.eval()"),AWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=a("code"),yWo=o("model.train()"),LWo=l(),F(oF.$$.fragment),BPe=l(),ad=a("h2"),rF=a("a"),Rhe=a("span"),F(Fy.$$.fragment),xWo=l(),Bhe=a("span"),$Wo=o("AutoModelForAudioFrameClassification"),PPe=l(),Oo=a("div"),F(Ty.$$.fragment),kWo=l(),nd=a("p"),SWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LV=a("a"),RWo=o("from_pretrained()"),BWo=o(" class method or the "),xV=a("a"),PWo=o("from_config()"),IWo=o(` class
method.`),qWo=l(),My=a("p"),NWo=o("This class cannot be instantiated directly using "),Phe=a("code"),jWo=o("__init__()"),DWo=o(" (throws an error)."),GWo=l(),ht=a("div"),F(Ey.$$.fragment),OWo=l(),Ihe=a("p"),VWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),XWo=l(),sd=a("p"),zWo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),QWo=o("not"),WWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),HWo=o("from_pretrained()"),UWo=o(" to load the model weights."),JWo=l(),F(tF.$$.fragment),YWo=l(),io=a("div"),F(Cy.$$.fragment),KWo=l(),Nhe=a("p"),ZWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),eHo=l(),qa=a("p"),oHo=o("The model class to instantiate is selected based on the "),jhe=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),Na=a("ul"),aF=a("li"),Ohe=a("strong"),dHo=o("data2vec-audio"),cHo=o(" \u2014 "),kV=a("a"),fHo=o("Data2VecAudioForAudioFrameClassification"),mHo=o(" (Data2VecAudio model)"),gHo=l(),nF=a("li"),Vhe=a("strong"),hHo=o("unispeech-sat"),pHo=o(" \u2014 "),SV=a("a"),uHo=o("UniSpeechSatForAudioFrameClassification"),_Ho=o(" (UniSpeechSat model)"),bHo=l(),sF=a("li"),Xhe=a("strong"),vHo=o("wav2vec2"),FHo=o(" \u2014 "),RV=a("a"),THo=o("Wav2Vec2ForAudioFrameClassification"),MHo=o(" (Wav2Vec2 model)"),EHo=l(),lF=a("li"),zhe=a("strong"),CHo=o("wavlm"),wHo=o(" \u2014 "),BV=a("a"),AHo=o("WavLMForAudioFrameClassification"),yHo=o(" (WavLM model)"),LHo=l(),iF=a("p"),xHo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),$Ho=o("model.eval()"),kHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),SHo=o("model.train()"),RHo=l(),F(dF.$$.fragment),IPe=l(),ld=a("h2"),cF=a("a"),Hhe=a("span"),F(wy.$$.fragment),BHo=l(),Uhe=a("span"),PHo=o("AutoModelForCTC"),qPe=l(),Vo=a("div"),F(Ay.$$.fragment),IHo=l(),id=a("p"),qHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PV=a("a"),NHo=o("from_pretrained()"),jHo=o(" class method or the "),IV=a("a"),DHo=o("from_config()"),GHo=o(` class
method.`),OHo=l(),yy=a("p"),VHo=o("This class cannot be instantiated directly using "),Jhe=a("code"),XHo=o("__init__()"),zHo=o(" (throws an error)."),QHo=l(),pt=a("div"),F(Ly.$$.fragment),WHo=l(),Yhe=a("p"),HHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),UHo=l(),dd=a("p"),JHo=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),YHo=o("not"),KHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),ZHo=o("from_pretrained()"),eUo=o(" to load the model weights."),oUo=l(),F(fF.$$.fragment),rUo=l(),co=a("div"),F(xy.$$.fragment),tUo=l(),Zhe=a("p"),aUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),nUo=l(),ja=a("p"),sUo=o("The model class to instantiate is selected based on the "),epe=a("code"),lUo=o("model_type"),iUo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),fUo=o("pretrained_model_name_or_path"),mUo=o(":"),gUo=l(),je=a("ul"),mF=a("li"),tpe=a("strong"),hUo=o("data2vec-audio"),pUo=o(" \u2014 "),NV=a("a"),uUo=o("Data2VecAudioForCTC"),_Uo=o(" (Data2VecAudio model)"),bUo=l(),gF=a("li"),ape=a("strong"),vUo=o("hubert"),FUo=o(" \u2014 "),jV=a("a"),TUo=o("HubertForCTC"),MUo=o(" (Hubert model)"),EUo=l(),hF=a("li"),npe=a("strong"),CUo=o("sew"),wUo=o(" \u2014 "),DV=a("a"),AUo=o("SEWForCTC"),yUo=o(" (SEW model)"),LUo=l(),pF=a("li"),spe=a("strong"),xUo=o("sew-d"),$Uo=o(" \u2014 "),GV=a("a"),kUo=o("SEWDForCTC"),SUo=o(" (SEW-D model)"),RUo=l(),uF=a("li"),lpe=a("strong"),BUo=o("unispeech"),PUo=o(" \u2014 "),OV=a("a"),IUo=o("UniSpeechForCTC"),qUo=o(" (UniSpeech model)"),NUo=l(),_F=a("li"),ipe=a("strong"),jUo=o("unispeech-sat"),DUo=o(" \u2014 "),VV=a("a"),GUo=o("UniSpeechSatForCTC"),OUo=o(" (UniSpeechSat model)"),VUo=l(),bF=a("li"),dpe=a("strong"),XUo=o("wav2vec2"),zUo=o(" \u2014 "),XV=a("a"),QUo=o("Wav2Vec2ForCTC"),WUo=o(" (Wav2Vec2 model)"),HUo=l(),vF=a("li"),cpe=a("strong"),UUo=o("wavlm"),JUo=o(" \u2014 "),zV=a("a"),YUo=o("WavLMForCTC"),KUo=o(" (WavLM model)"),ZUo=l(),FF=a("p"),eJo=o("The model is set in evaluation mode by default using "),fpe=a("code"),oJo=o("model.eval()"),rJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),tJo=o("model.train()"),aJo=l(),F(TF.$$.fragment),NPe=l(),cd=a("h2"),MF=a("a"),gpe=a("span"),F($y.$$.fragment),nJo=l(),hpe=a("span"),sJo=o("AutoModelForSpeechSeq2Seq"),jPe=l(),Xo=a("div"),F(ky.$$.fragment),lJo=l(),fd=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QV=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),WV=a("a"),fJo=o("from_config()"),mJo=o(` class
method.`),gJo=l(),Sy=a("p"),hJo=o("This class cannot be instantiated directly using "),ppe=a("code"),pJo=o("__init__()"),uJo=o(" (throws an error)."),_Jo=l(),ut=a("div"),F(Ry.$$.fragment),bJo=l(),upe=a("p"),vJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),FJo=l(),md=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),F(EF.$$.fragment),yJo=l(),fo=a("div"),F(By.$$.fragment),LJo=l(),bpe=a("p"),xJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$Jo=l(),Da=a("p"),kJo=o("The model class to instantiate is selected based on the "),vpe=a("code"),SJo=o("model_type"),RJo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),BJo=o("pretrained_model_name_or_path"),PJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(":"),NJo=l(),Py=a("ul"),CF=a("li"),Mpe=a("strong"),jJo=o("speech-encoder-decoder"),DJo=o(" \u2014 "),UV=a("a"),GJo=o("SpeechEncoderDecoderModel"),OJo=o(" (Speech Encoder decoder model)"),VJo=l(),wF=a("li"),Epe=a("strong"),XJo=o("speech_to_text"),zJo=o(" \u2014 "),JV=a("a"),QJo=o("Speech2TextForConditionalGeneration"),WJo=o(" (Speech2Text model)"),HJo=l(),AF=a("p"),UJo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),JJo=o("model.eval()"),YJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),KJo=o("model.train()"),ZJo=l(),F(yF.$$.fragment),DPe=l(),gd=a("h2"),LF=a("a"),Ape=a("span"),F(Iy.$$.fragment),eYo=l(),ype=a("span"),oYo=o("AutoModelForAudioXVector"),GPe=l(),zo=a("div"),F(qy.$$.fragment),rYo=l(),hd=a("p"),tYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YV=a("a"),aYo=o("from_pretrained()"),nYo=o(" class method or the "),KV=a("a"),sYo=o("from_config()"),lYo=o(` class
method.`),iYo=l(),Ny=a("p"),dYo=o("This class cannot be instantiated directly using "),Lpe=a("code"),cYo=o("__init__()"),fYo=o(" (throws an error)."),mYo=l(),_t=a("div"),F(jy.$$.fragment),gYo=l(),xpe=a("p"),hYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pYo=l(),pd=a("p"),uYo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),_Yo=o("not"),bYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),vYo=o("from_pretrained()"),FYo=o(" to load the model weights."),TYo=l(),F(xF.$$.fragment),MYo=l(),mo=a("div"),F(Dy.$$.fragment),EYo=l(),kpe=a("p"),CYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),wYo=l(),Ga=a("p"),AYo=o("The model class to instantiate is selected based on the "),Spe=a("code"),yYo=o("model_type"),LYo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),xYo=o("pretrained_model_name_or_path"),$Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),kYo=o("pretrained_model_name_or_path"),SYo=o(":"),RYo=l(),Oa=a("ul"),$F=a("li"),Ppe=a("strong"),BYo=o("data2vec-audio"),PYo=o(" \u2014 "),eX=a("a"),IYo=o("Data2VecAudioForXVector"),qYo=o(" (Data2VecAudio model)"),NYo=l(),kF=a("li"),Ipe=a("strong"),jYo=o("unispeech-sat"),DYo=o(" \u2014 "),oX=a("a"),GYo=o("UniSpeechSatForXVector"),OYo=o(" (UniSpeechSat model)"),VYo=l(),SF=a("li"),qpe=a("strong"),XYo=o("wav2vec2"),zYo=o(" \u2014 "),rX=a("a"),QYo=o("Wav2Vec2ForXVector"),WYo=o(" (Wav2Vec2 model)"),HYo=l(),RF=a("li"),Npe=a("strong"),UYo=o("wavlm"),JYo=o(" \u2014 "),tX=a("a"),YYo=o("WavLMForXVector"),KYo=o(" (WavLM model)"),ZYo=l(),BF=a("p"),eKo=o("The model is set in evaluation mode by default using "),jpe=a("code"),oKo=o("model.eval()"),rKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),tKo=o("model.train()"),aKo=l(),F(PF.$$.fragment),OPe=l(),ud=a("h2"),IF=a("a"),Gpe=a("span"),F(Gy.$$.fragment),nKo=l(),Ope=a("span"),sKo=o("AutoModelForMaskedImageModeling"),VPe=l(),Qo=a("div"),F(Oy.$$.fragment),lKo=l(),_d=a("p"),iKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aX=a("a"),dKo=o("from_pretrained()"),cKo=o(" class method or the "),nX=a("a"),fKo=o("from_config()"),mKo=o(` class
method.`),gKo=l(),Vy=a("p"),hKo=o("This class cannot be instantiated directly using "),Vpe=a("code"),pKo=o("__init__()"),uKo=o(" (throws an error)."),_Ko=l(),bt=a("div"),F(Xy.$$.fragment),bKo=l(),Xpe=a("p"),vKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),FKo=l(),bd=a("p"),TKo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),MKo=o("not"),EKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),CKo=o("from_pretrained()"),wKo=o(" to load the model weights."),AKo=l(),F(qF.$$.fragment),yKo=l(),go=a("div"),F(zy.$$.fragment),LKo=l(),Qpe=a("p"),xKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$Ko=l(),Va=a("p"),kKo=o("The model class to instantiate is selected based on the "),Wpe=a("code"),SKo=o("model_type"),RKo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),BKo=o("pretrained_model_name_or_path"),PKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),IKo=o("pretrained_model_name_or_path"),qKo=o(":"),NKo=l(),vd=a("ul"),NF=a("li"),Jpe=a("strong"),jKo=o("deit"),DKo=o(" \u2014 "),lX=a("a"),GKo=o("DeiTForMaskedImageModeling"),OKo=o(" (DeiT model)"),VKo=l(),jF=a("li"),Ype=a("strong"),XKo=o("swin"),zKo=o(" \u2014 "),iX=a("a"),QKo=o("SwinForMaskedImageModeling"),WKo=o(" (Swin model)"),HKo=l(),DF=a("li"),Kpe=a("strong"),UKo=o("vit"),JKo=o(" \u2014 "),dX=a("a"),YKo=o("ViTForMaskedImageModeling"),KKo=o(" (ViT model)"),ZKo=l(),GF=a("p"),eZo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),oZo=o("model.eval()"),rZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),tZo=o("model.train()"),aZo=l(),F(OF.$$.fragment),XPe=l(),Fd=a("h2"),VF=a("a"),oue=a("span"),F(Qy.$$.fragment),nZo=l(),rue=a("span"),sZo=o("AutoModelForObjectDetection"),zPe=l(),Wo=a("div"),F(Wy.$$.fragment),lZo=l(),Td=a("p"),iZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cX=a("a"),dZo=o("from_pretrained()"),cZo=o(" class method or the "),fX=a("a"),fZo=o("from_config()"),mZo=o(` class
method.`),gZo=l(),Hy=a("p"),hZo=o("This class cannot be instantiated directly using "),tue=a("code"),pZo=o("__init__()"),uZo=o(" (throws an error)."),_Zo=l(),vt=a("div"),F(Uy.$$.fragment),bZo=l(),aue=a("p"),vZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),FZo=l(),Md=a("p"),TZo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),MZo=o("not"),EZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),CZo=o("from_pretrained()"),wZo=o(" to load the model weights."),AZo=l(),F(XF.$$.fragment),yZo=l(),ho=a("div"),F(Jy.$$.fragment),LZo=l(),sue=a("p"),xZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$Zo=l(),Xa=a("p"),kZo=o("The model class to instantiate is selected based on the "),lue=a("code"),SZo=o("model_type"),RZo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),BZo=o("pretrained_model_name_or_path"),PZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),IZo=o("pretrained_model_name_or_path"),qZo=o(":"),NZo=l(),Yy=a("ul"),zF=a("li"),cue=a("strong"),jZo=o("detr"),DZo=o(" \u2014 "),gX=a("a"),GZo=o("DetrForObjectDetection"),OZo=o(" (DETR model)"),VZo=l(),QF=a("li"),fue=a("strong"),XZo=o("yolos"),zZo=o(" \u2014 "),hX=a("a"),QZo=o("YolosForObjectDetection"),WZo=o(" (YOLOS model)"),HZo=l(),WF=a("p"),UZo=o("The model is set in evaluation mode by default using "),mue=a("code"),JZo=o("model.eval()"),YZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),KZo=o("model.train()"),ZZo=l(),F(HF.$$.fragment),QPe=l(),Ed=a("h2"),UF=a("a"),hue=a("span"),F(Ky.$$.fragment),eer=l(),pue=a("span"),oer=o("AutoModelForImageSegmentation"),WPe=l(),Ho=a("div"),F(Zy.$$.fragment),rer=l(),Cd=a("p"),ter=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pX=a("a"),aer=o("from_pretrained()"),ner=o(" class method or the "),uX=a("a"),ser=o("from_config()"),ler=o(` class
method.`),ier=l(),eL=a("p"),der=o("This class cannot be instantiated directly using "),uue=a("code"),cer=o("__init__()"),fer=o(" (throws an error)."),mer=l(),Ft=a("div"),F(oL.$$.fragment),ger=l(),_ue=a("p"),her=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),per=l(),wd=a("p"),uer=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),_er=o("not"),ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),ver=o("from_pretrained()"),Fer=o(" to load the model weights."),Ter=l(),F(JF.$$.fragment),Mer=l(),po=a("div"),F(rL.$$.fragment),Eer=l(),vue=a("p"),Cer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wer=l(),za=a("p"),Aer=o("The model class to instantiate is selected based on the "),Fue=a("code"),yer=o("model_type"),Ler=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),xer=o("pretrained_model_name_or_path"),$er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),ker=o("pretrained_model_name_or_path"),Ser=o(":"),Rer=l(),Eue=a("ul"),YF=a("li"),Cue=a("strong"),Ber=o("detr"),Per=o(" \u2014 "),bX=a("a"),Ier=o("DetrForSegmentation"),qer=o(" (DETR model)"),Ner=l(),KF=a("p"),jer=o("The model is set in evaluation mode by default using "),wue=a("code"),Der=o("model.eval()"),Ger=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),Oer=o("model.train()"),Ver=l(),F(ZF.$$.fragment),HPe=l(),Ad=a("h2"),e6=a("a"),yue=a("span"),F(tL.$$.fragment),Xer=l(),Lue=a("span"),zer=o("AutoModelForSemanticSegmentation"),UPe=l(),Uo=a("div"),F(aL.$$.fragment),Qer=l(),yd=a("p"),Wer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vX=a("a"),Her=o("from_pretrained()"),Uer=o(" class method or the "),FX=a("a"),Jer=o("from_config()"),Yer=o(` class
method.`),Ker=l(),nL=a("p"),Zer=o("This class cannot be instantiated directly using "),xue=a("code"),eor=o("__init__()"),oor=o(" (throws an error)."),ror=l(),Tt=a("div"),F(sL.$$.fragment),tor=l(),$ue=a("p"),aor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),nor=l(),Ld=a("p"),sor=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),lor=o("not"),ior=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),dor=o("from_pretrained()"),cor=o(" to load the model weights."),mor=l(),F(o6.$$.fragment),gor=l(),uo=a("div"),F(lL.$$.fragment),hor=l(),Sue=a("p"),por=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uor=l(),Qa=a("p"),_or=o("The model class to instantiate is selected based on the "),Rue=a("code"),bor=o("model_type"),vor=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),For=o("pretrained_model_name_or_path"),Tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),Mor=o("pretrained_model_name_or_path"),Eor=o(":"),Cor=l(),Wa=a("ul"),r6=a("li"),Iue=a("strong"),wor=o("beit"),Aor=o(" \u2014 "),MX=a("a"),yor=o("BeitForSemanticSegmentation"),Lor=o(" (BEiT model)"),xor=l(),t6=a("li"),que=a("strong"),$or=o("data2vec-vision"),kor=o(" \u2014 "),EX=a("a"),Sor=o("Data2VecVisionForSemanticSegmentation"),Ror=o(" (Data2VecVision model)"),Bor=l(),a6=a("li"),Nue=a("strong"),Por=o("dpt"),Ior=o(" \u2014 "),CX=a("a"),qor=o("DPTForSemanticSegmentation"),Nor=o(" (DPT model)"),jor=l(),n6=a("li"),jue=a("strong"),Dor=o("segformer"),Gor=o(" \u2014 "),wX=a("a"),Oor=o("SegformerForSemanticSegmentation"),Vor=o(" (SegFormer model)"),Xor=l(),s6=a("p"),zor=o("The model is set in evaluation mode by default using "),Due=a("code"),Qor=o("model.eval()"),Wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),Hor=o("model.train()"),Uor=l(),F(l6.$$.fragment),JPe=l(),xd=a("h2"),i6=a("a"),Oue=a("span"),F(iL.$$.fragment),Jor=l(),Vue=a("span"),Yor=o("AutoModelForInstanceSegmentation"),YPe=l(),Jo=a("div"),F(dL.$$.fragment),Kor=l(),$d=a("p"),Zor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),AX=a("a"),err=o("from_pretrained()"),orr=o(" class method or the "),yX=a("a"),rrr=o("from_config()"),trr=o(` class
method.`),arr=l(),cL=a("p"),nrr=o("This class cannot be instantiated directly using "),Xue=a("code"),srr=o("__init__()"),lrr=o(" (throws an error)."),irr=l(),Mt=a("div"),F(fL.$$.fragment),drr=l(),zue=a("p"),crr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),frr=l(),kd=a("p"),mrr=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),grr=o("not"),hrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),prr=o("from_pretrained()"),urr=o(" to load the model weights."),_rr=l(),F(d6.$$.fragment),brr=l(),_o=a("div"),F(mL.$$.fragment),vrr=l(),Wue=a("p"),Frr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Trr=l(),Ha=a("p"),Mrr=o("The model class to instantiate is selected based on the "),Hue=a("code"),Err=o("model_type"),Crr=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),yrr=o("pretrained_model_name_or_path"),Lrr=o(":"),xrr=l(),Yue=a("ul"),c6=a("li"),Kue=a("strong"),$rr=o("maskformer"),krr=o(" \u2014 "),xX=a("a"),Srr=o("MaskFormerForInstanceSegmentation"),Rrr=o(" (MaskFormer model)"),Brr=l(),f6=a("p"),Prr=o("The model is set in evaluation mode by default using "),Zue=a("code"),Irr=o("model.eval()"),qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),Nrr=o("model.train()"),jrr=l(),F(m6.$$.fragment),KPe=l(),Sd=a("h2"),g6=a("a"),o_e=a("span"),F(gL.$$.fragment),Drr=l(),r_e=a("span"),Grr=o("TFAutoModel"),ZPe=l(),Yo=a("div"),F(hL.$$.fragment),Orr=l(),Rd=a("p"),Vrr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$X=a("a"),Xrr=o("from_pretrained()"),zrr=o(" class method or the "),kX=a("a"),Qrr=o("from_config()"),Wrr=o(` class
method.`),Hrr=l(),pL=a("p"),Urr=o("This class cannot be instantiated directly using "),t_e=a("code"),Jrr=o("__init__()"),Yrr=o(" (throws an error)."),Krr=l(),Et=a("div"),F(uL.$$.fragment),Zrr=l(),a_e=a("p"),etr=o("Instantiates one of the base model classes of the library from a configuration."),otr=l(),Bd=a("p"),rtr=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),ttr=o("not"),atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),ntr=o("from_pretrained()"),str=o(" to load the model weights."),ltr=l(),F(h6.$$.fragment),itr=l(),Cr=a("div"),F(_L.$$.fragment),dtr=l(),s_e=a("p"),ctr=o("Instantiate one of the base model classes of the library from a pretrained model."),ftr=l(),Ua=a("p"),mtr=o("The model class to instantiate is selected based on the "),l_e=a("code"),gtr=o("model_type"),htr=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),ptr=o("pretrained_model_name_or_path"),utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),_tr=o("pretrained_model_name_or_path"),btr=o(":"),vtr=l(),j=a("ul"),p6=a("li"),c_e=a("strong"),Ftr=o("albert"),Ttr=o(" \u2014 "),RX=a("a"),Mtr=o("TFAlbertModel"),Etr=o(" (ALBERT model)"),Ctr=l(),u6=a("li"),f_e=a("strong"),wtr=o("bart"),Atr=o(" \u2014 "),BX=a("a"),ytr=o("TFBartModel"),Ltr=o(" (BART model)"),xtr=l(),_6=a("li"),m_e=a("strong"),$tr=o("bert"),ktr=o(" \u2014 "),PX=a("a"),Str=o("TFBertModel"),Rtr=o(" (BERT model)"),Btr=l(),b6=a("li"),g_e=a("strong"),Ptr=o("blenderbot"),Itr=o(" \u2014 "),IX=a("a"),qtr=o("TFBlenderbotModel"),Ntr=o(" (Blenderbot model)"),jtr=l(),v6=a("li"),h_e=a("strong"),Dtr=o("blenderbot-small"),Gtr=o(" \u2014 "),qX=a("a"),Otr=o("TFBlenderbotSmallModel"),Vtr=o(" (BlenderbotSmall model)"),Xtr=l(),F6=a("li"),p_e=a("strong"),ztr=o("camembert"),Qtr=o(" \u2014 "),NX=a("a"),Wtr=o("TFCamembertModel"),Htr=o(" (CamemBERT model)"),Utr=l(),T6=a("li"),u_e=a("strong"),Jtr=o("clip"),Ytr=o(" \u2014 "),jX=a("a"),Ktr=o("TFCLIPModel"),Ztr=o(" (CLIP model)"),ear=l(),M6=a("li"),__e=a("strong"),oar=o("convbert"),rar=o(" \u2014 "),DX=a("a"),tar=o("TFConvBertModel"),aar=o(" (ConvBERT model)"),nar=l(),E6=a("li"),b_e=a("strong"),sar=o("convnext"),lar=o(" \u2014 "),GX=a("a"),iar=o("TFConvNextModel"),dar=o(" (ConvNext model)"),car=l(),C6=a("li"),v_e=a("strong"),far=o("ctrl"),mar=o(" \u2014 "),OX=a("a"),gar=o("TFCTRLModel"),har=o(" (CTRL model)"),par=l(),w6=a("li"),F_e=a("strong"),uar=o("data2vec-vision"),_ar=o(" \u2014 "),VX=a("a"),bar=o("TFData2VecVisionModel"),Far=o(" (Data2VecVision model)"),Tar=l(),A6=a("li"),T_e=a("strong"),Mar=o("deberta"),Ear=o(" \u2014 "),XX=a("a"),Car=o("TFDebertaModel"),war=o(" (DeBERTa model)"),Aar=l(),y6=a("li"),M_e=a("strong"),yar=o("deberta-v2"),Lar=o(" \u2014 "),zX=a("a"),xar=o("TFDebertaV2Model"),$ar=o(" (DeBERTa-v2 model)"),kar=l(),L6=a("li"),E_e=a("strong"),Sar=o("distilbert"),Rar=o(" \u2014 "),QX=a("a"),Bar=o("TFDistilBertModel"),Par=o(" (DistilBERT model)"),Iar=l(),x6=a("li"),C_e=a("strong"),qar=o("dpr"),Nar=o(" \u2014 "),WX=a("a"),jar=o("TFDPRQuestionEncoder"),Dar=o(" (DPR model)"),Gar=l(),$6=a("li"),w_e=a("strong"),Oar=o("electra"),Var=o(" \u2014 "),HX=a("a"),Xar=o("TFElectraModel"),zar=o(" (ELECTRA model)"),Qar=l(),k6=a("li"),A_e=a("strong"),War=o("flaubert"),Har=o(" \u2014 "),UX=a("a"),Uar=o("TFFlaubertModel"),Jar=o(" (FlauBERT model)"),Yar=l(),ks=a("li"),y_e=a("strong"),Kar=o("funnel"),Zar=o(" \u2014 "),JX=a("a"),enr=o("TFFunnelModel"),onr=o(" or "),YX=a("a"),rnr=o("TFFunnelBaseModel"),tnr=o(" (Funnel Transformer model)"),anr=l(),S6=a("li"),L_e=a("strong"),nnr=o("gpt2"),snr=o(" \u2014 "),KX=a("a"),lnr=o("TFGPT2Model"),inr=o(" (OpenAI GPT-2 model)"),dnr=l(),R6=a("li"),x_e=a("strong"),cnr=o("gptj"),fnr=o(" \u2014 "),ZX=a("a"),mnr=o("TFGPTJModel"),gnr=o(" (GPT-J model)"),hnr=l(),B6=a("li"),$_e=a("strong"),pnr=o("hubert"),unr=o(" \u2014 "),ez=a("a"),_nr=o("TFHubertModel"),bnr=o(" (Hubert model)"),vnr=l(),P6=a("li"),k_e=a("strong"),Fnr=o("layoutlm"),Tnr=o(" \u2014 "),oz=a("a"),Mnr=o("TFLayoutLMModel"),Enr=o(" (LayoutLM model)"),Cnr=l(),I6=a("li"),S_e=a("strong"),wnr=o("led"),Anr=o(" \u2014 "),rz=a("a"),ynr=o("TFLEDModel"),Lnr=o(" (LED model)"),xnr=l(),q6=a("li"),R_e=a("strong"),$nr=o("longformer"),knr=o(" \u2014 "),tz=a("a"),Snr=o("TFLongformerModel"),Rnr=o(" (Longformer model)"),Bnr=l(),N6=a("li"),B_e=a("strong"),Pnr=o("lxmert"),Inr=o(" \u2014 "),az=a("a"),qnr=o("TFLxmertModel"),Nnr=o(" (LXMERT model)"),jnr=l(),j6=a("li"),P_e=a("strong"),Dnr=o("marian"),Gnr=o(" \u2014 "),nz=a("a"),Onr=o("TFMarianModel"),Vnr=o(" (Marian model)"),Xnr=l(),D6=a("li"),I_e=a("strong"),znr=o("mbart"),Qnr=o(" \u2014 "),sz=a("a"),Wnr=o("TFMBartModel"),Hnr=o(" (mBART model)"),Unr=l(),G6=a("li"),q_e=a("strong"),Jnr=o("mobilebert"),Ynr=o(" \u2014 "),lz=a("a"),Knr=o("TFMobileBertModel"),Znr=o(" (MobileBERT model)"),esr=l(),O6=a("li"),N_e=a("strong"),osr=o("mpnet"),rsr=o(" \u2014 "),iz=a("a"),tsr=o("TFMPNetModel"),asr=o(" (MPNet model)"),nsr=l(),V6=a("li"),j_e=a("strong"),ssr=o("mt5"),lsr=o(" \u2014 "),dz=a("a"),isr=o("TFMT5Model"),dsr=o(" (mT5 model)"),csr=l(),X6=a("li"),D_e=a("strong"),fsr=o("openai-gpt"),msr=o(" \u2014 "),cz=a("a"),gsr=o("TFOpenAIGPTModel"),hsr=o(" (OpenAI GPT model)"),psr=l(),z6=a("li"),G_e=a("strong"),usr=o("pegasus"),_sr=o(" \u2014 "),fz=a("a"),bsr=o("TFPegasusModel"),vsr=o(" (Pegasus model)"),Fsr=l(),Q6=a("li"),O_e=a("strong"),Tsr=o("rembert"),Msr=o(" \u2014 "),mz=a("a"),Esr=o("TFRemBertModel"),Csr=o(" (RemBERT model)"),wsr=l(),W6=a("li"),V_e=a("strong"),Asr=o("roberta"),ysr=o(" \u2014 "),gz=a("a"),Lsr=o("TFRobertaModel"),xsr=o(" (RoBERTa model)"),$sr=l(),H6=a("li"),X_e=a("strong"),ksr=o("roformer"),Ssr=o(" \u2014 "),hz=a("a"),Rsr=o("TFRoFormerModel"),Bsr=o(" (RoFormer model)"),Psr=l(),U6=a("li"),z_e=a("strong"),Isr=o("speech_to_text"),qsr=o(" \u2014 "),pz=a("a"),Nsr=o("TFSpeech2TextModel"),jsr=o(" (Speech2Text model)"),Dsr=l(),J6=a("li"),Q_e=a("strong"),Gsr=o("t5"),Osr=o(" \u2014 "),uz=a("a"),Vsr=o("TFT5Model"),Xsr=o(" (T5 model)"),zsr=l(),Y6=a("li"),W_e=a("strong"),Qsr=o("tapas"),Wsr=o(" \u2014 "),_z=a("a"),Hsr=o("TFTapasModel"),Usr=o(" (TAPAS model)"),Jsr=l(),K6=a("li"),H_e=a("strong"),Ysr=o("transfo-xl"),Ksr=o(" \u2014 "),bz=a("a"),Zsr=o("TFTransfoXLModel"),elr=o(" (Transformer-XL model)"),olr=l(),Z6=a("li"),U_e=a("strong"),rlr=o("vit"),tlr=o(" \u2014 "),vz=a("a"),alr=o("TFViTModel"),nlr=o(" (ViT model)"),slr=l(),eT=a("li"),J_e=a("strong"),llr=o("vit_mae"),ilr=o(" \u2014 "),Fz=a("a"),dlr=o("TFViTMAEModel"),clr=o(" (ViTMAE model)"),flr=l(),oT=a("li"),Y_e=a("strong"),mlr=o("wav2vec2"),glr=o(" \u2014 "),Tz=a("a"),hlr=o("TFWav2Vec2Model"),plr=o(" (Wav2Vec2 model)"),ulr=l(),rT=a("li"),K_e=a("strong"),_lr=o("xlm"),blr=o(" \u2014 "),Mz=a("a"),vlr=o("TFXLMModel"),Flr=o(" (XLM model)"),Tlr=l(),tT=a("li"),Z_e=a("strong"),Mlr=o("xlm-roberta"),Elr=o(" \u2014 "),Ez=a("a"),Clr=o("TFXLMRobertaModel"),wlr=o(" (XLM-RoBERTa model)"),Alr=l(),aT=a("li"),e0e=a("strong"),ylr=o("xlnet"),Llr=o(" \u2014 "),Cz=a("a"),xlr=o("TFXLNetModel"),$lr=o(" (XLNet model)"),klr=l(),F(nT.$$.fragment),eIe=l(),Pd=a("h2"),sT=a("a"),o0e=a("span"),F(bL.$$.fragment),Slr=l(),r0e=a("span"),Rlr=o("TFAutoModelForPreTraining"),oIe=l(),Ko=a("div"),F(vL.$$.fragment),Blr=l(),Id=a("p"),Plr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wz=a("a"),Ilr=o("from_pretrained()"),qlr=o(" class method or the "),Az=a("a"),Nlr=o("from_config()"),jlr=o(` class
method.`),Dlr=l(),FL=a("p"),Glr=o("This class cannot be instantiated directly using "),t0e=a("code"),Olr=o("__init__()"),Vlr=o(" (throws an error)."),Xlr=l(),Ct=a("div"),F(TL.$$.fragment),zlr=l(),a0e=a("p"),Qlr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wlr=l(),qd=a("p"),Hlr=o(`Note:
Loading a model from its configuration file does `),n0e=a("strong"),Ulr=o("not"),Jlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),Ylr=o("from_pretrained()"),Klr=o(" to load the model weights."),Zlr=l(),F(lT.$$.fragment),eir=l(),wr=a("div"),F(ML.$$.fragment),oir=l(),s0e=a("p"),rir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tir=l(),Ja=a("p"),air=o("The model class to instantiate is selected based on the "),l0e=a("code"),nir=o("model_type"),sir=o(` property of the config object (either
passed as an argument or loaded from `),i0e=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=a("code"),dir=o("pretrained_model_name_or_path"),cir=o(":"),fir=l(),se=a("ul"),iT=a("li"),c0e=a("strong"),mir=o("albert"),gir=o(" \u2014 "),Lz=a("a"),hir=o("TFAlbertForPreTraining"),pir=o(" (ALBERT model)"),uir=l(),dT=a("li"),f0e=a("strong"),_ir=o("bart"),bir=o(" \u2014 "),xz=a("a"),vir=o("TFBartForConditionalGeneration"),Fir=o(" (BART model)"),Tir=l(),cT=a("li"),m0e=a("strong"),Mir=o("bert"),Eir=o(" \u2014 "),$z=a("a"),Cir=o("TFBertForPreTraining"),wir=o(" (BERT model)"),Air=l(),fT=a("li"),g0e=a("strong"),yir=o("camembert"),Lir=o(" \u2014 "),kz=a("a"),xir=o("TFCamembertForMaskedLM"),$ir=o(" (CamemBERT model)"),kir=l(),mT=a("li"),h0e=a("strong"),Sir=o("ctrl"),Rir=o(" \u2014 "),Sz=a("a"),Bir=o("TFCTRLLMHeadModel"),Pir=o(" (CTRL model)"),Iir=l(),gT=a("li"),p0e=a("strong"),qir=o("distilbert"),Nir=o(" \u2014 "),Rz=a("a"),jir=o("TFDistilBertForMaskedLM"),Dir=o(" (DistilBERT model)"),Gir=l(),hT=a("li"),u0e=a("strong"),Oir=o("electra"),Vir=o(" \u2014 "),Bz=a("a"),Xir=o("TFElectraForPreTraining"),zir=o(" (ELECTRA model)"),Qir=l(),pT=a("li"),_0e=a("strong"),Wir=o("flaubert"),Hir=o(" \u2014 "),Pz=a("a"),Uir=o("TFFlaubertWithLMHeadModel"),Jir=o(" (FlauBERT model)"),Yir=l(),uT=a("li"),b0e=a("strong"),Kir=o("funnel"),Zir=o(" \u2014 "),Iz=a("a"),edr=o("TFFunnelForPreTraining"),odr=o(" (Funnel Transformer model)"),rdr=l(),_T=a("li"),v0e=a("strong"),tdr=o("gpt2"),adr=o(" \u2014 "),qz=a("a"),ndr=o("TFGPT2LMHeadModel"),sdr=o(" (OpenAI GPT-2 model)"),ldr=l(),bT=a("li"),F0e=a("strong"),idr=o("layoutlm"),ddr=o(" \u2014 "),Nz=a("a"),cdr=o("TFLayoutLMForMaskedLM"),fdr=o(" (LayoutLM model)"),mdr=l(),vT=a("li"),T0e=a("strong"),gdr=o("lxmert"),hdr=o(" \u2014 "),jz=a("a"),pdr=o("TFLxmertForPreTraining"),udr=o(" (LXMERT model)"),_dr=l(),FT=a("li"),M0e=a("strong"),bdr=o("mobilebert"),vdr=o(" \u2014 "),Dz=a("a"),Fdr=o("TFMobileBertForPreTraining"),Tdr=o(" (MobileBERT model)"),Mdr=l(),TT=a("li"),E0e=a("strong"),Edr=o("mpnet"),Cdr=o(" \u2014 "),Gz=a("a"),wdr=o("TFMPNetForMaskedLM"),Adr=o(" (MPNet model)"),ydr=l(),MT=a("li"),C0e=a("strong"),Ldr=o("openai-gpt"),xdr=o(" \u2014 "),Oz=a("a"),$dr=o("TFOpenAIGPTLMHeadModel"),kdr=o(" (OpenAI GPT model)"),Sdr=l(),ET=a("li"),w0e=a("strong"),Rdr=o("roberta"),Bdr=o(" \u2014 "),Vz=a("a"),Pdr=o("TFRobertaForMaskedLM"),Idr=o(" (RoBERTa model)"),qdr=l(),CT=a("li"),A0e=a("strong"),Ndr=o("t5"),jdr=o(" \u2014 "),Xz=a("a"),Ddr=o("TFT5ForConditionalGeneration"),Gdr=o(" (T5 model)"),Odr=l(),wT=a("li"),y0e=a("strong"),Vdr=o("tapas"),Xdr=o(" \u2014 "),zz=a("a"),zdr=o("TFTapasForMaskedLM"),Qdr=o(" (TAPAS model)"),Wdr=l(),AT=a("li"),L0e=a("strong"),Hdr=o("transfo-xl"),Udr=o(" \u2014 "),Qz=a("a"),Jdr=o("TFTransfoXLLMHeadModel"),Ydr=o(" (Transformer-XL model)"),Kdr=l(),yT=a("li"),x0e=a("strong"),Zdr=o("vit_mae"),ecr=o(" \u2014 "),Wz=a("a"),ocr=o("TFViTMAEForPreTraining"),rcr=o(" (ViTMAE model)"),tcr=l(),LT=a("li"),$0e=a("strong"),acr=o("xlm"),ncr=o(" \u2014 "),Hz=a("a"),scr=o("TFXLMWithLMHeadModel"),lcr=o(" (XLM model)"),icr=l(),xT=a("li"),k0e=a("strong"),dcr=o("xlm-roberta"),ccr=o(" \u2014 "),Uz=a("a"),fcr=o("TFXLMRobertaForMaskedLM"),mcr=o(" (XLM-RoBERTa model)"),gcr=l(),$T=a("li"),S0e=a("strong"),hcr=o("xlnet"),pcr=o(" \u2014 "),Jz=a("a"),ucr=o("TFXLNetLMHeadModel"),_cr=o(" (XLNet model)"),bcr=l(),F(kT.$$.fragment),rIe=l(),Nd=a("h2"),ST=a("a"),R0e=a("span"),F(EL.$$.fragment),vcr=l(),B0e=a("span"),Fcr=o("TFAutoModelForCausalLM"),tIe=l(),Zo=a("div"),F(CL.$$.fragment),Tcr=l(),jd=a("p"),Mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Yz=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" class method or the "),Kz=a("a"),wcr=o("from_config()"),Acr=o(` class
method.`),ycr=l(),wL=a("p"),Lcr=o("This class cannot be instantiated directly using "),P0e=a("code"),xcr=o("__init__()"),$cr=o(" (throws an error)."),kcr=l(),wt=a("div"),F(AL.$$.fragment),Scr=l(),I0e=a("p"),Rcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bcr=l(),Dd=a("p"),Pcr=o(`Note:
Loading a model from its configuration file does `),q0e=a("strong"),Icr=o("not"),qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),Ncr=o("from_pretrained()"),jcr=o(" to load the model weights."),Dcr=l(),F(RT.$$.fragment),Gcr=l(),Ar=a("div"),F(yL.$$.fragment),Ocr=l(),N0e=a("p"),Vcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xcr=l(),Ya=a("p"),zcr=o("The model class to instantiate is selected based on the "),j0e=a("code"),Qcr=o("model_type"),Wcr=o(` property of the config object (either
passed as an argument or loaded from `),D0e=a("code"),Hcr=o("pretrained_model_name_or_path"),Ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(":"),Kcr=l(),Te=a("ul"),BT=a("li"),O0e=a("strong"),Zcr=o("bert"),efr=o(" \u2014 "),eQ=a("a"),ofr=o("TFBertLMHeadModel"),rfr=o(" (BERT model)"),tfr=l(),PT=a("li"),V0e=a("strong"),afr=o("camembert"),nfr=o(" \u2014 "),oQ=a("a"),sfr=o("TFCamembertForCausalLM"),lfr=o(" (CamemBERT model)"),ifr=l(),IT=a("li"),X0e=a("strong"),dfr=o("ctrl"),cfr=o(" \u2014 "),rQ=a("a"),ffr=o("TFCTRLLMHeadModel"),mfr=o(" (CTRL model)"),gfr=l(),qT=a("li"),z0e=a("strong"),hfr=o("gpt2"),pfr=o(" \u2014 "),tQ=a("a"),ufr=o("TFGPT2LMHeadModel"),_fr=o(" (OpenAI GPT-2 model)"),bfr=l(),NT=a("li"),Q0e=a("strong"),vfr=o("gptj"),Ffr=o(" \u2014 "),aQ=a("a"),Tfr=o("TFGPTJForCausalLM"),Mfr=o(" (GPT-J model)"),Efr=l(),jT=a("li"),W0e=a("strong"),Cfr=o("openai-gpt"),wfr=o(" \u2014 "),nQ=a("a"),Afr=o("TFOpenAIGPTLMHeadModel"),yfr=o(" (OpenAI GPT model)"),Lfr=l(),DT=a("li"),H0e=a("strong"),xfr=o("rembert"),$fr=o(" \u2014 "),sQ=a("a"),kfr=o("TFRemBertForCausalLM"),Sfr=o(" (RemBERT model)"),Rfr=l(),GT=a("li"),U0e=a("strong"),Bfr=o("roberta"),Pfr=o(" \u2014 "),lQ=a("a"),Ifr=o("TFRobertaForCausalLM"),qfr=o(" (RoBERTa model)"),Nfr=l(),OT=a("li"),J0e=a("strong"),jfr=o("roformer"),Dfr=o(" \u2014 "),iQ=a("a"),Gfr=o("TFRoFormerForCausalLM"),Ofr=o(" (RoFormer model)"),Vfr=l(),VT=a("li"),Y0e=a("strong"),Xfr=o("transfo-xl"),zfr=o(" \u2014 "),dQ=a("a"),Qfr=o("TFTransfoXLLMHeadModel"),Wfr=o(" (Transformer-XL model)"),Hfr=l(),XT=a("li"),K0e=a("strong"),Ufr=o("xlm"),Jfr=o(" \u2014 "),cQ=a("a"),Yfr=o("TFXLMWithLMHeadModel"),Kfr=o(" (XLM model)"),Zfr=l(),zT=a("li"),Z0e=a("strong"),emr=o("xlnet"),omr=o(" \u2014 "),fQ=a("a"),rmr=o("TFXLNetLMHeadModel"),tmr=o(" (XLNet model)"),amr=l(),F(QT.$$.fragment),aIe=l(),Gd=a("h2"),WT=a("a"),e1e=a("span"),F(LL.$$.fragment),nmr=l(),o1e=a("span"),smr=o("TFAutoModelForImageClassification"),nIe=l(),er=a("div"),F(xL.$$.fragment),lmr=l(),Od=a("p"),imr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mQ=a("a"),dmr=o("from_pretrained()"),cmr=o(" class method or the "),gQ=a("a"),fmr=o("from_config()"),mmr=o(` class
method.`),gmr=l(),$L=a("p"),hmr=o("This class cannot be instantiated directly using "),r1e=a("code"),pmr=o("__init__()"),umr=o(" (throws an error)."),_mr=l(),At=a("div"),F(kL.$$.fragment),bmr=l(),t1e=a("p"),vmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fmr=l(),Vd=a("p"),Tmr=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),Mmr=o("not"),Emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=a("a"),Cmr=o("from_pretrained()"),wmr=o(" to load the model weights."),Amr=l(),F(HT.$$.fragment),ymr=l(),yr=a("div"),F(SL.$$.fragment),Lmr=l(),n1e=a("p"),xmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$mr=l(),Ka=a("p"),kmr=o("The model class to instantiate is selected based on the "),s1e=a("code"),Smr=o("model_type"),Rmr=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),Bmr=o("pretrained_model_name_or_path"),Pmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),Imr=o("pretrained_model_name_or_path"),qmr=o(":"),Nmr=l(),Xd=a("ul"),UT=a("li"),d1e=a("strong"),jmr=o("convnext"),Dmr=o(" \u2014 "),pQ=a("a"),Gmr=o("TFConvNextForImageClassification"),Omr=o(" (ConvNext model)"),Vmr=l(),JT=a("li"),c1e=a("strong"),Xmr=o("data2vec-vision"),zmr=o(" \u2014 "),uQ=a("a"),Qmr=o("TFData2VecVisionForImageClassification"),Wmr=o(" (Data2VecVision model)"),Hmr=l(),YT=a("li"),f1e=a("strong"),Umr=o("vit"),Jmr=o(" \u2014 "),_Q=a("a"),Ymr=o("TFViTForImageClassification"),Kmr=o(" (ViT model)"),Zmr=l(),F(KT.$$.fragment),sIe=l(),zd=a("h2"),ZT=a("a"),m1e=a("span"),F(RL.$$.fragment),egr=l(),g1e=a("span"),ogr=o("TFAutoModelForMaskedLM"),lIe=l(),or=a("div"),F(BL.$$.fragment),rgr=l(),Qd=a("p"),tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bQ=a("a"),agr=o("from_pretrained()"),ngr=o(" class method or the "),vQ=a("a"),sgr=o("from_config()"),lgr=o(` class
method.`),igr=l(),PL=a("p"),dgr=o("This class cannot be instantiated directly using "),h1e=a("code"),cgr=o("__init__()"),fgr=o(" (throws an error)."),mgr=l(),yt=a("div"),F(IL.$$.fragment),ggr=l(),p1e=a("p"),hgr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pgr=l(),Wd=a("p"),ugr=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),_gr=o("not"),bgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),vgr=o("from_pretrained()"),Fgr=o(" to load the model weights."),Tgr=l(),F(e7.$$.fragment),Mgr=l(),Lr=a("div"),F(qL.$$.fragment),Egr=l(),_1e=a("p"),Cgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wgr=l(),Za=a("p"),Agr=o("The model class to instantiate is selected based on the "),b1e=a("code"),ygr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),xgr=o("pretrained_model_name_or_path"),$gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),kgr=o("pretrained_model_name_or_path"),Sgr=o(":"),Rgr=l(),ie=a("ul"),o7=a("li"),T1e=a("strong"),Bgr=o("albert"),Pgr=o(" \u2014 "),TQ=a("a"),Igr=o("TFAlbertForMaskedLM"),qgr=o(" (ALBERT model)"),Ngr=l(),r7=a("li"),M1e=a("strong"),jgr=o("bert"),Dgr=o(" \u2014 "),MQ=a("a"),Ggr=o("TFBertForMaskedLM"),Ogr=o(" (BERT model)"),Vgr=l(),t7=a("li"),E1e=a("strong"),Xgr=o("camembert"),zgr=o(" \u2014 "),EQ=a("a"),Qgr=o("TFCamembertForMaskedLM"),Wgr=o(" (CamemBERT model)"),Hgr=l(),a7=a("li"),C1e=a("strong"),Ugr=o("convbert"),Jgr=o(" \u2014 "),CQ=a("a"),Ygr=o("TFConvBertForMaskedLM"),Kgr=o(" (ConvBERT model)"),Zgr=l(),n7=a("li"),w1e=a("strong"),ehr=o("deberta"),ohr=o(" \u2014 "),wQ=a("a"),rhr=o("TFDebertaForMaskedLM"),thr=o(" (DeBERTa model)"),ahr=l(),s7=a("li"),A1e=a("strong"),nhr=o("deberta-v2"),shr=o(" \u2014 "),AQ=a("a"),lhr=o("TFDebertaV2ForMaskedLM"),ihr=o(" (DeBERTa-v2 model)"),dhr=l(),l7=a("li"),y1e=a("strong"),chr=o("distilbert"),fhr=o(" \u2014 "),yQ=a("a"),mhr=o("TFDistilBertForMaskedLM"),ghr=o(" (DistilBERT model)"),hhr=l(),i7=a("li"),L1e=a("strong"),phr=o("electra"),uhr=o(" \u2014 "),LQ=a("a"),_hr=o("TFElectraForMaskedLM"),bhr=o(" (ELECTRA model)"),vhr=l(),d7=a("li"),x1e=a("strong"),Fhr=o("flaubert"),Thr=o(" \u2014 "),xQ=a("a"),Mhr=o("TFFlaubertWithLMHeadModel"),Ehr=o(" (FlauBERT model)"),Chr=l(),c7=a("li"),$1e=a("strong"),whr=o("funnel"),Ahr=o(" \u2014 "),$Q=a("a"),yhr=o("TFFunnelForMaskedLM"),Lhr=o(" (Funnel Transformer model)"),xhr=l(),f7=a("li"),k1e=a("strong"),$hr=o("layoutlm"),khr=o(" \u2014 "),kQ=a("a"),Shr=o("TFLayoutLMForMaskedLM"),Rhr=o(" (LayoutLM model)"),Bhr=l(),m7=a("li"),S1e=a("strong"),Phr=o("longformer"),Ihr=o(" \u2014 "),SQ=a("a"),qhr=o("TFLongformerForMaskedLM"),Nhr=o(" (Longformer model)"),jhr=l(),g7=a("li"),R1e=a("strong"),Dhr=o("mobilebert"),Ghr=o(" \u2014 "),RQ=a("a"),Ohr=o("TFMobileBertForMaskedLM"),Vhr=o(" (MobileBERT model)"),Xhr=l(),h7=a("li"),B1e=a("strong"),zhr=o("mpnet"),Qhr=o(" \u2014 "),BQ=a("a"),Whr=o("TFMPNetForMaskedLM"),Hhr=o(" (MPNet model)"),Uhr=l(),p7=a("li"),P1e=a("strong"),Jhr=o("rembert"),Yhr=o(" \u2014 "),PQ=a("a"),Khr=o("TFRemBertForMaskedLM"),Zhr=o(" (RemBERT model)"),epr=l(),u7=a("li"),I1e=a("strong"),opr=o("roberta"),rpr=o(" \u2014 "),IQ=a("a"),tpr=o("TFRobertaForMaskedLM"),apr=o(" (RoBERTa model)"),npr=l(),_7=a("li"),q1e=a("strong"),spr=o("roformer"),lpr=o(" \u2014 "),qQ=a("a"),ipr=o("TFRoFormerForMaskedLM"),dpr=o(" (RoFormer model)"),cpr=l(),b7=a("li"),N1e=a("strong"),fpr=o("tapas"),mpr=o(" \u2014 "),NQ=a("a"),gpr=o("TFTapasForMaskedLM"),hpr=o(" (TAPAS model)"),ppr=l(),v7=a("li"),j1e=a("strong"),upr=o("xlm"),_pr=o(" \u2014 "),jQ=a("a"),bpr=o("TFXLMWithLMHeadModel"),vpr=o(" (XLM model)"),Fpr=l(),F7=a("li"),D1e=a("strong"),Tpr=o("xlm-roberta"),Mpr=o(" \u2014 "),DQ=a("a"),Epr=o("TFXLMRobertaForMaskedLM"),Cpr=o(" (XLM-RoBERTa model)"),wpr=l(),F(T7.$$.fragment),iIe=l(),Hd=a("h2"),M7=a("a"),G1e=a("span"),F(NL.$$.fragment),Apr=l(),O1e=a("span"),ypr=o("TFAutoModelForSeq2SeqLM"),dIe=l(),rr=a("div"),F(jL.$$.fragment),Lpr=l(),Ud=a("p"),xpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GQ=a("a"),$pr=o("from_pretrained()"),kpr=o(" class method or the "),OQ=a("a"),Spr=o("from_config()"),Rpr=o(` class
method.`),Bpr=l(),DL=a("p"),Ppr=o("This class cannot be instantiated directly using "),V1e=a("code"),Ipr=o("__init__()"),qpr=o(" (throws an error)."),Npr=l(),Lt=a("div"),F(GL.$$.fragment),jpr=l(),X1e=a("p"),Dpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gpr=l(),Jd=a("p"),Opr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),Vpr=o("not"),Xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),zpr=o("from_pretrained()"),Qpr=o(" to load the model weights."),Wpr=l(),F(E7.$$.fragment),Hpr=l(),xr=a("div"),F(OL.$$.fragment),Upr=l(),Q1e=a("p"),Jpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ypr=l(),en=a("p"),Kpr=o("The model class to instantiate is selected based on the "),W1e=a("code"),Zpr=o("model_type"),eur=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),our=o("pretrained_model_name_or_path"),rur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),tur=o("pretrained_model_name_or_path"),aur=o(":"),nur=l(),ye=a("ul"),C7=a("li"),J1e=a("strong"),sur=o("bart"),lur=o(" \u2014 "),XQ=a("a"),iur=o("TFBartForConditionalGeneration"),dur=o(" (BART model)"),cur=l(),w7=a("li"),Y1e=a("strong"),fur=o("blenderbot"),mur=o(" \u2014 "),zQ=a("a"),gur=o("TFBlenderbotForConditionalGeneration"),hur=o(" (Blenderbot model)"),pur=l(),A7=a("li"),K1e=a("strong"),uur=o("blenderbot-small"),_ur=o(" \u2014 "),QQ=a("a"),bur=o("TFBlenderbotSmallForConditionalGeneration"),vur=o(" (BlenderbotSmall model)"),Fur=l(),y7=a("li"),Z1e=a("strong"),Tur=o("encoder-decoder"),Mur=o(" \u2014 "),WQ=a("a"),Eur=o("TFEncoderDecoderModel"),Cur=o(" (Encoder decoder model)"),wur=l(),L7=a("li"),ebe=a("strong"),Aur=o("led"),yur=o(" \u2014 "),HQ=a("a"),Lur=o("TFLEDForConditionalGeneration"),xur=o(" (LED model)"),$ur=l(),x7=a("li"),obe=a("strong"),kur=o("marian"),Sur=o(" \u2014 "),UQ=a("a"),Rur=o("TFMarianMTModel"),Bur=o(" (Marian model)"),Pur=l(),$7=a("li"),rbe=a("strong"),Iur=o("mbart"),qur=o(" \u2014 "),JQ=a("a"),Nur=o("TFMBartForConditionalGeneration"),jur=o(" (mBART model)"),Dur=l(),k7=a("li"),tbe=a("strong"),Gur=o("mt5"),Our=o(" \u2014 "),YQ=a("a"),Vur=o("TFMT5ForConditionalGeneration"),Xur=o(" (mT5 model)"),zur=l(),S7=a("li"),abe=a("strong"),Qur=o("pegasus"),Wur=o(" \u2014 "),KQ=a("a"),Hur=o("TFPegasusForConditionalGeneration"),Uur=o(" (Pegasus model)"),Jur=l(),R7=a("li"),nbe=a("strong"),Yur=o("t5"),Kur=o(" \u2014 "),ZQ=a("a"),Zur=o("TFT5ForConditionalGeneration"),e_r=o(" (T5 model)"),o_r=l(),F(B7.$$.fragment),cIe=l(),Yd=a("h2"),P7=a("a"),sbe=a("span"),F(VL.$$.fragment),r_r=l(),lbe=a("span"),t_r=o("TFAutoModelForSequenceClassification"),fIe=l(),tr=a("div"),F(XL.$$.fragment),a_r=l(),Kd=a("p"),n_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eW=a("a"),s_r=o("from_pretrained()"),l_r=o(" class method or the "),oW=a("a"),i_r=o("from_config()"),d_r=o(` class
method.`),c_r=l(),zL=a("p"),f_r=o("This class cannot be instantiated directly using "),ibe=a("code"),m_r=o("__init__()"),g_r=o(" (throws an error)."),h_r=l(),xt=a("div"),F(QL.$$.fragment),p_r=l(),dbe=a("p"),u_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),__r=l(),Zd=a("p"),b_r=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),v_r=o("not"),F_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),T_r=o("from_pretrained()"),M_r=o(" to load the model weights."),E_r=l(),F(I7.$$.fragment),C_r=l(),$r=a("div"),F(WL.$$.fragment),w_r=l(),fbe=a("p"),A_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y_r=l(),on=a("p"),L_r=o("The model class to instantiate is selected based on the "),mbe=a("code"),x_r=o("model_type"),$_r=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),k_r=o("pretrained_model_name_or_path"),S_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),R_r=o("pretrained_model_name_or_path"),B_r=o(":"),P_r=l(),Z=a("ul"),q7=a("li"),pbe=a("strong"),I_r=o("albert"),q_r=o(" \u2014 "),tW=a("a"),N_r=o("TFAlbertForSequenceClassification"),j_r=o(" (ALBERT model)"),D_r=l(),N7=a("li"),ube=a("strong"),G_r=o("bert"),O_r=o(" \u2014 "),aW=a("a"),V_r=o("TFBertForSequenceClassification"),X_r=o(" (BERT model)"),z_r=l(),j7=a("li"),_be=a("strong"),Q_r=o("camembert"),W_r=o(" \u2014 "),nW=a("a"),H_r=o("TFCamembertForSequenceClassification"),U_r=o(" (CamemBERT model)"),J_r=l(),D7=a("li"),bbe=a("strong"),Y_r=o("convbert"),K_r=o(" \u2014 "),sW=a("a"),Z_r=o("TFConvBertForSequenceClassification"),e0r=o(" (ConvBERT model)"),o0r=l(),G7=a("li"),vbe=a("strong"),r0r=o("ctrl"),t0r=o(" \u2014 "),lW=a("a"),a0r=o("TFCTRLForSequenceClassification"),n0r=o(" (CTRL model)"),s0r=l(),O7=a("li"),Fbe=a("strong"),l0r=o("deberta"),i0r=o(" \u2014 "),iW=a("a"),d0r=o("TFDebertaForSequenceClassification"),c0r=o(" (DeBERTa model)"),f0r=l(),V7=a("li"),Tbe=a("strong"),m0r=o("deberta-v2"),g0r=o(" \u2014 "),dW=a("a"),h0r=o("TFDebertaV2ForSequenceClassification"),p0r=o(" (DeBERTa-v2 model)"),u0r=l(),X7=a("li"),Mbe=a("strong"),_0r=o("distilbert"),b0r=o(" \u2014 "),cW=a("a"),v0r=o("TFDistilBertForSequenceClassification"),F0r=o(" (DistilBERT model)"),T0r=l(),z7=a("li"),Ebe=a("strong"),M0r=o("electra"),E0r=o(" \u2014 "),fW=a("a"),C0r=o("TFElectraForSequenceClassification"),w0r=o(" (ELECTRA model)"),A0r=l(),Q7=a("li"),Cbe=a("strong"),y0r=o("flaubert"),L0r=o(" \u2014 "),mW=a("a"),x0r=o("TFFlaubertForSequenceClassification"),$0r=o(" (FlauBERT model)"),k0r=l(),W7=a("li"),wbe=a("strong"),S0r=o("funnel"),R0r=o(" \u2014 "),gW=a("a"),B0r=o("TFFunnelForSequenceClassification"),P0r=o(" (Funnel Transformer model)"),I0r=l(),H7=a("li"),Abe=a("strong"),q0r=o("gpt2"),N0r=o(" \u2014 "),hW=a("a"),j0r=o("TFGPT2ForSequenceClassification"),D0r=o(" (OpenAI GPT-2 model)"),G0r=l(),U7=a("li"),ybe=a("strong"),O0r=o("gptj"),V0r=o(" \u2014 "),pW=a("a"),X0r=o("TFGPTJForSequenceClassification"),z0r=o(" (GPT-J model)"),Q0r=l(),J7=a("li"),Lbe=a("strong"),W0r=o("layoutlm"),H0r=o(" \u2014 "),uW=a("a"),U0r=o("TFLayoutLMForSequenceClassification"),J0r=o(" (LayoutLM model)"),Y0r=l(),Y7=a("li"),xbe=a("strong"),K0r=o("longformer"),Z0r=o(" \u2014 "),_W=a("a"),e1r=o("TFLongformerForSequenceClassification"),o1r=o(" (Longformer model)"),r1r=l(),K7=a("li"),$be=a("strong"),t1r=o("mobilebert"),a1r=o(" \u2014 "),bW=a("a"),n1r=o("TFMobileBertForSequenceClassification"),s1r=o(" (MobileBERT model)"),l1r=l(),Z7=a("li"),kbe=a("strong"),i1r=o("mpnet"),d1r=o(" \u2014 "),vW=a("a"),c1r=o("TFMPNetForSequenceClassification"),f1r=o(" (MPNet model)"),m1r=l(),eM=a("li"),Sbe=a("strong"),g1r=o("openai-gpt"),h1r=o(" \u2014 "),FW=a("a"),p1r=o("TFOpenAIGPTForSequenceClassification"),u1r=o(" (OpenAI GPT model)"),_1r=l(),oM=a("li"),Rbe=a("strong"),b1r=o("rembert"),v1r=o(" \u2014 "),TW=a("a"),F1r=o("TFRemBertForSequenceClassification"),T1r=o(" (RemBERT model)"),M1r=l(),rM=a("li"),Bbe=a("strong"),E1r=o("roberta"),C1r=o(" \u2014 "),MW=a("a"),w1r=o("TFRobertaForSequenceClassification"),A1r=o(" (RoBERTa model)"),y1r=l(),tM=a("li"),Pbe=a("strong"),L1r=o("roformer"),x1r=o(" \u2014 "),EW=a("a"),$1r=o("TFRoFormerForSequenceClassification"),k1r=o(" (RoFormer model)"),S1r=l(),aM=a("li"),Ibe=a("strong"),R1r=o("tapas"),B1r=o(" \u2014 "),CW=a("a"),P1r=o("TFTapasForSequenceClassification"),I1r=o(" (TAPAS model)"),q1r=l(),nM=a("li"),qbe=a("strong"),N1r=o("transfo-xl"),j1r=o(" \u2014 "),wW=a("a"),D1r=o("TFTransfoXLForSequenceClassification"),G1r=o(" (Transformer-XL model)"),O1r=l(),sM=a("li"),Nbe=a("strong"),V1r=o("xlm"),X1r=o(" \u2014 "),AW=a("a"),z1r=o("TFXLMForSequenceClassification"),Q1r=o(" (XLM model)"),W1r=l(),lM=a("li"),jbe=a("strong"),H1r=o("xlm-roberta"),U1r=o(" \u2014 "),yW=a("a"),J1r=o("TFXLMRobertaForSequenceClassification"),Y1r=o(" (XLM-RoBERTa model)"),K1r=l(),iM=a("li"),Dbe=a("strong"),Z1r=o("xlnet"),ebr=o(" \u2014 "),LW=a("a"),obr=o("TFXLNetForSequenceClassification"),rbr=o(" (XLNet model)"),tbr=l(),F(dM.$$.fragment),mIe=l(),ec=a("h2"),cM=a("a"),Gbe=a("span"),F(HL.$$.fragment),abr=l(),Obe=a("span"),nbr=o("TFAutoModelForMultipleChoice"),gIe=l(),ar=a("div"),F(UL.$$.fragment),sbr=l(),oc=a("p"),lbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xW=a("a"),ibr=o("from_pretrained()"),dbr=o(" class method or the "),$W=a("a"),cbr=o("from_config()"),fbr=o(` class
method.`),mbr=l(),JL=a("p"),gbr=o("This class cannot be instantiated directly using "),Vbe=a("code"),hbr=o("__init__()"),pbr=o(" (throws an error)."),ubr=l(),$t=a("div"),F(YL.$$.fragment),_br=l(),Xbe=a("p"),bbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vbr=l(),rc=a("p"),Fbr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),Tbr=o("not"),Mbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),Ebr=o("from_pretrained()"),Cbr=o(" to load the model weights."),wbr=l(),F(fM.$$.fragment),Abr=l(),kr=a("div"),F(KL.$$.fragment),ybr=l(),Qbe=a("p"),Lbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xbr=l(),rn=a("p"),$br=o("The model class to instantiate is selected based on the "),Wbe=a("code"),kbr=o("model_type"),Sbr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),Rbr=o("pretrained_model_name_or_path"),Bbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),Pbr=o("pretrained_model_name_or_path"),Ibr=o(":"),qbr=l(),pe=a("ul"),mM=a("li"),Jbe=a("strong"),Nbr=o("albert"),jbr=o(" \u2014 "),SW=a("a"),Dbr=o("TFAlbertForMultipleChoice"),Gbr=o(" (ALBERT model)"),Obr=l(),gM=a("li"),Ybe=a("strong"),Vbr=o("bert"),Xbr=o(" \u2014 "),RW=a("a"),zbr=o("TFBertForMultipleChoice"),Qbr=o(" (BERT model)"),Wbr=l(),hM=a("li"),Kbe=a("strong"),Hbr=o("camembert"),Ubr=o(" \u2014 "),BW=a("a"),Jbr=o("TFCamembertForMultipleChoice"),Ybr=o(" (CamemBERT model)"),Kbr=l(),pM=a("li"),Zbe=a("strong"),Zbr=o("convbert"),e2r=o(" \u2014 "),PW=a("a"),o2r=o("TFConvBertForMultipleChoice"),r2r=o(" (ConvBERT model)"),t2r=l(),uM=a("li"),e2e=a("strong"),a2r=o("distilbert"),n2r=o(" \u2014 "),IW=a("a"),s2r=o("TFDistilBertForMultipleChoice"),l2r=o(" (DistilBERT model)"),i2r=l(),_M=a("li"),o2e=a("strong"),d2r=o("electra"),c2r=o(" \u2014 "),qW=a("a"),f2r=o("TFElectraForMultipleChoice"),m2r=o(" (ELECTRA model)"),g2r=l(),bM=a("li"),r2e=a("strong"),h2r=o("flaubert"),p2r=o(" \u2014 "),NW=a("a"),u2r=o("TFFlaubertForMultipleChoice"),_2r=o(" (FlauBERT model)"),b2r=l(),vM=a("li"),t2e=a("strong"),v2r=o("funnel"),F2r=o(" \u2014 "),jW=a("a"),T2r=o("TFFunnelForMultipleChoice"),M2r=o(" (Funnel Transformer model)"),E2r=l(),FM=a("li"),a2e=a("strong"),C2r=o("longformer"),w2r=o(" \u2014 "),DW=a("a"),A2r=o("TFLongformerForMultipleChoice"),y2r=o(" (Longformer model)"),L2r=l(),TM=a("li"),n2e=a("strong"),x2r=o("mobilebert"),$2r=o(" \u2014 "),GW=a("a"),k2r=o("TFMobileBertForMultipleChoice"),S2r=o(" (MobileBERT model)"),R2r=l(),MM=a("li"),s2e=a("strong"),B2r=o("mpnet"),P2r=o(" \u2014 "),OW=a("a"),I2r=o("TFMPNetForMultipleChoice"),q2r=o(" (MPNet model)"),N2r=l(),EM=a("li"),l2e=a("strong"),j2r=o("rembert"),D2r=o(" \u2014 "),VW=a("a"),G2r=o("TFRemBertForMultipleChoice"),O2r=o(" (RemBERT model)"),V2r=l(),CM=a("li"),i2e=a("strong"),X2r=o("roberta"),z2r=o(" \u2014 "),XW=a("a"),Q2r=o("TFRobertaForMultipleChoice"),W2r=o(" (RoBERTa model)"),H2r=l(),wM=a("li"),d2e=a("strong"),U2r=o("roformer"),J2r=o(" \u2014 "),zW=a("a"),Y2r=o("TFRoFormerForMultipleChoice"),K2r=o(" (RoFormer model)"),Z2r=l(),AM=a("li"),c2e=a("strong"),evr=o("xlm"),ovr=o(" \u2014 "),QW=a("a"),rvr=o("TFXLMForMultipleChoice"),tvr=o(" (XLM model)"),avr=l(),yM=a("li"),f2e=a("strong"),nvr=o("xlm-roberta"),svr=o(" \u2014 "),WW=a("a"),lvr=o("TFXLMRobertaForMultipleChoice"),ivr=o(" (XLM-RoBERTa model)"),dvr=l(),LM=a("li"),m2e=a("strong"),cvr=o("xlnet"),fvr=o(" \u2014 "),HW=a("a"),mvr=o("TFXLNetForMultipleChoice"),gvr=o(" (XLNet model)"),hvr=l(),F(xM.$$.fragment),hIe=l(),tc=a("h2"),$M=a("a"),g2e=a("span"),F(ZL.$$.fragment),pvr=l(),h2e=a("span"),uvr=o("TFAutoModelForTableQuestionAnswering"),pIe=l(),nr=a("div"),F(e8.$$.fragment),_vr=l(),ac=a("p"),bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UW=a("a"),vvr=o("from_pretrained()"),Fvr=o(" class method or the "),JW=a("a"),Tvr=o("from_config()"),Mvr=o(` class
method.`),Evr=l(),o8=a("p"),Cvr=o("This class cannot be instantiated directly using "),p2e=a("code"),wvr=o("__init__()"),Avr=o(" (throws an error)."),yvr=l(),kt=a("div"),F(r8.$$.fragment),Lvr=l(),u2e=a("p"),xvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$vr=l(),nc=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),Bvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),Ivr=l(),F(kM.$$.fragment),qvr=l(),Sr=a("div"),F(t8.$$.fragment),Nvr=l(),b2e=a("p"),jvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dvr=l(),tn=a("p"),Gvr=o("The model class to instantiate is selected based on the "),v2e=a("code"),Ovr=o("model_type"),Vvr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),Qvr=o("pretrained_model_name_or_path"),Wvr=o(":"),Hvr=l(),M2e=a("ul"),SM=a("li"),E2e=a("strong"),Uvr=o("tapas"),Jvr=o(" \u2014 "),KW=a("a"),Yvr=o("TFTapasForQuestionAnswering"),Kvr=o(" (TAPAS model)"),Zvr=l(),F(RM.$$.fragment),uIe=l(),sc=a("h2"),BM=a("a"),C2e=a("span"),F(a8.$$.fragment),eFr=l(),w2e=a("span"),oFr=o("TFAutoModelForTokenClassification"),_Ie=l(),sr=a("div"),F(n8.$$.fragment),rFr=l(),lc=a("p"),tFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZW=a("a"),aFr=o("from_pretrained()"),nFr=o(" class method or the "),eH=a("a"),sFr=o("from_config()"),lFr=o(` class
method.`),iFr=l(),s8=a("p"),dFr=o("This class cannot be instantiated directly using "),A2e=a("code"),cFr=o("__init__()"),fFr=o(" (throws an error)."),mFr=l(),St=a("div"),F(l8.$$.fragment),gFr=l(),y2e=a("p"),hFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pFr=l(),ic=a("p"),uFr=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),_Fr=o("not"),bFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),vFr=o("from_pretrained()"),FFr=o(" to load the model weights."),TFr=l(),F(PM.$$.fragment),MFr=l(),Rr=a("div"),F(i8.$$.fragment),EFr=l(),x2e=a("p"),CFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wFr=l(),an=a("p"),AFr=o("The model class to instantiate is selected based on the "),$2e=a("code"),yFr=o("model_type"),LFr=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),xFr=o("pretrained_model_name_or_path"),$Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),kFr=o("pretrained_model_name_or_path"),SFr=o(":"),RFr=l(),de=a("ul"),IM=a("li"),R2e=a("strong"),BFr=o("albert"),PFr=o(" \u2014 "),rH=a("a"),IFr=o("TFAlbertForTokenClassification"),qFr=o(" (ALBERT model)"),NFr=l(),qM=a("li"),B2e=a("strong"),jFr=o("bert"),DFr=o(" \u2014 "),tH=a("a"),GFr=o("TFBertForTokenClassification"),OFr=o(" (BERT model)"),VFr=l(),NM=a("li"),P2e=a("strong"),XFr=o("camembert"),zFr=o(" \u2014 "),aH=a("a"),QFr=o("TFCamembertForTokenClassification"),WFr=o(" (CamemBERT model)"),HFr=l(),jM=a("li"),I2e=a("strong"),UFr=o("convbert"),JFr=o(" \u2014 "),nH=a("a"),YFr=o("TFConvBertForTokenClassification"),KFr=o(" (ConvBERT model)"),ZFr=l(),DM=a("li"),q2e=a("strong"),e6r=o("deberta"),o6r=o(" \u2014 "),sH=a("a"),r6r=o("TFDebertaForTokenClassification"),t6r=o(" (DeBERTa model)"),a6r=l(),GM=a("li"),N2e=a("strong"),n6r=o("deberta-v2"),s6r=o(" \u2014 "),lH=a("a"),l6r=o("TFDebertaV2ForTokenClassification"),i6r=o(" (DeBERTa-v2 model)"),d6r=l(),OM=a("li"),j2e=a("strong"),c6r=o("distilbert"),f6r=o(" \u2014 "),iH=a("a"),m6r=o("TFDistilBertForTokenClassification"),g6r=o(" (DistilBERT model)"),h6r=l(),VM=a("li"),D2e=a("strong"),p6r=o("electra"),u6r=o(" \u2014 "),dH=a("a"),_6r=o("TFElectraForTokenClassification"),b6r=o(" (ELECTRA model)"),v6r=l(),XM=a("li"),G2e=a("strong"),F6r=o("flaubert"),T6r=o(" \u2014 "),cH=a("a"),M6r=o("TFFlaubertForTokenClassification"),E6r=o(" (FlauBERT model)"),C6r=l(),zM=a("li"),O2e=a("strong"),w6r=o("funnel"),A6r=o(" \u2014 "),fH=a("a"),y6r=o("TFFunnelForTokenClassification"),L6r=o(" (Funnel Transformer model)"),x6r=l(),QM=a("li"),V2e=a("strong"),$6r=o("layoutlm"),k6r=o(" \u2014 "),mH=a("a"),S6r=o("TFLayoutLMForTokenClassification"),R6r=o(" (LayoutLM model)"),B6r=l(),WM=a("li"),X2e=a("strong"),P6r=o("longformer"),I6r=o(" \u2014 "),gH=a("a"),q6r=o("TFLongformerForTokenClassification"),N6r=o(" (Longformer model)"),j6r=l(),HM=a("li"),z2e=a("strong"),D6r=o("mobilebert"),G6r=o(" \u2014 "),hH=a("a"),O6r=o("TFMobileBertForTokenClassification"),V6r=o(" (MobileBERT model)"),X6r=l(),UM=a("li"),Q2e=a("strong"),z6r=o("mpnet"),Q6r=o(" \u2014 "),pH=a("a"),W6r=o("TFMPNetForTokenClassification"),H6r=o(" (MPNet model)"),U6r=l(),JM=a("li"),W2e=a("strong"),J6r=o("rembert"),Y6r=o(" \u2014 "),uH=a("a"),K6r=o("TFRemBertForTokenClassification"),Z6r=o(" (RemBERT model)"),eTr=l(),YM=a("li"),H2e=a("strong"),oTr=o("roberta"),rTr=o(" \u2014 "),_H=a("a"),tTr=o("TFRobertaForTokenClassification"),aTr=o(" (RoBERTa model)"),nTr=l(),KM=a("li"),U2e=a("strong"),sTr=o("roformer"),lTr=o(" \u2014 "),bH=a("a"),iTr=o("TFRoFormerForTokenClassification"),dTr=o(" (RoFormer model)"),cTr=l(),ZM=a("li"),J2e=a("strong"),fTr=o("xlm"),mTr=o(" \u2014 "),vH=a("a"),gTr=o("TFXLMForTokenClassification"),hTr=o(" (XLM model)"),pTr=l(),e4=a("li"),Y2e=a("strong"),uTr=o("xlm-roberta"),_Tr=o(" \u2014 "),FH=a("a"),bTr=o("TFXLMRobertaForTokenClassification"),vTr=o(" (XLM-RoBERTa model)"),FTr=l(),o4=a("li"),K2e=a("strong"),TTr=o("xlnet"),MTr=o(" \u2014 "),TH=a("a"),ETr=o("TFXLNetForTokenClassification"),CTr=o(" (XLNet model)"),wTr=l(),F(r4.$$.fragment),bIe=l(),dc=a("h2"),t4=a("a"),Z2e=a("span"),F(d8.$$.fragment),ATr=l(),eve=a("span"),yTr=o("TFAutoModelForQuestionAnswering"),vIe=l(),lr=a("div"),F(c8.$$.fragment),LTr=l(),cc=a("p"),xTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MH=a("a"),$Tr=o("from_pretrained()"),kTr=o(" class method or the "),EH=a("a"),STr=o("from_config()"),RTr=o(` class
method.`),BTr=l(),f8=a("p"),PTr=o("This class cannot be instantiated directly using "),ove=a("code"),ITr=o("__init__()"),qTr=o(" (throws an error)."),NTr=l(),Rt=a("div"),F(m8.$$.fragment),jTr=l(),rve=a("p"),DTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GTr=l(),fc=a("p"),OTr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),VTr=o("not"),XTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),zTr=o("from_pretrained()"),QTr=o(" to load the model weights."),WTr=l(),F(a4.$$.fragment),HTr=l(),Br=a("div"),F(g8.$$.fragment),UTr=l(),ave=a("p"),JTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YTr=l(),nn=a("p"),KTr=o("The model class to instantiate is selected based on the "),nve=a("code"),ZTr=o("model_type"),e7r=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),o7r=o("pretrained_model_name_or_path"),r7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),t7r=o("pretrained_model_name_or_path"),a7r=o(":"),n7r=l(),ce=a("ul"),n4=a("li"),ive=a("strong"),s7r=o("albert"),l7r=o(" \u2014 "),wH=a("a"),i7r=o("TFAlbertForQuestionAnswering"),d7r=o(" (ALBERT model)"),c7r=l(),s4=a("li"),dve=a("strong"),f7r=o("bert"),m7r=o(" \u2014 "),AH=a("a"),g7r=o("TFBertForQuestionAnswering"),h7r=o(" (BERT model)"),p7r=l(),l4=a("li"),cve=a("strong"),u7r=o("camembert"),_7r=o(" \u2014 "),yH=a("a"),b7r=o("TFCamembertForQuestionAnswering"),v7r=o(" (CamemBERT model)"),F7r=l(),i4=a("li"),fve=a("strong"),T7r=o("convbert"),M7r=o(" \u2014 "),LH=a("a"),E7r=o("TFConvBertForQuestionAnswering"),C7r=o(" (ConvBERT model)"),w7r=l(),d4=a("li"),mve=a("strong"),A7r=o("deberta"),y7r=o(" \u2014 "),xH=a("a"),L7r=o("TFDebertaForQuestionAnswering"),x7r=o(" (DeBERTa model)"),$7r=l(),c4=a("li"),gve=a("strong"),k7r=o("deberta-v2"),S7r=o(" \u2014 "),$H=a("a"),R7r=o("TFDebertaV2ForQuestionAnswering"),B7r=o(" (DeBERTa-v2 model)"),P7r=l(),f4=a("li"),hve=a("strong"),I7r=o("distilbert"),q7r=o(" \u2014 "),kH=a("a"),N7r=o("TFDistilBertForQuestionAnswering"),j7r=o(" (DistilBERT model)"),D7r=l(),m4=a("li"),pve=a("strong"),G7r=o("electra"),O7r=o(" \u2014 "),SH=a("a"),V7r=o("TFElectraForQuestionAnswering"),X7r=o(" (ELECTRA model)"),z7r=l(),g4=a("li"),uve=a("strong"),Q7r=o("flaubert"),W7r=o(" \u2014 "),RH=a("a"),H7r=o("TFFlaubertForQuestionAnsweringSimple"),U7r=o(" (FlauBERT model)"),J7r=l(),h4=a("li"),_ve=a("strong"),Y7r=o("funnel"),K7r=o(" \u2014 "),BH=a("a"),Z7r=o("TFFunnelForQuestionAnswering"),eMr=o(" (Funnel Transformer model)"),oMr=l(),p4=a("li"),bve=a("strong"),rMr=o("gptj"),tMr=o(" \u2014 "),PH=a("a"),aMr=o("TFGPTJForQuestionAnswering"),nMr=o(" (GPT-J model)"),sMr=l(),u4=a("li"),vve=a("strong"),lMr=o("longformer"),iMr=o(" \u2014 "),IH=a("a"),dMr=o("TFLongformerForQuestionAnswering"),cMr=o(" (Longformer model)"),fMr=l(),_4=a("li"),Fve=a("strong"),mMr=o("mobilebert"),gMr=o(" \u2014 "),qH=a("a"),hMr=o("TFMobileBertForQuestionAnswering"),pMr=o(" (MobileBERT model)"),uMr=l(),b4=a("li"),Tve=a("strong"),_Mr=o("mpnet"),bMr=o(" \u2014 "),NH=a("a"),vMr=o("TFMPNetForQuestionAnswering"),FMr=o(" (MPNet model)"),TMr=l(),v4=a("li"),Mve=a("strong"),MMr=o("rembert"),EMr=o(" \u2014 "),jH=a("a"),CMr=o("TFRemBertForQuestionAnswering"),wMr=o(" (RemBERT model)"),AMr=l(),F4=a("li"),Eve=a("strong"),yMr=o("roberta"),LMr=o(" \u2014 "),DH=a("a"),xMr=o("TFRobertaForQuestionAnswering"),$Mr=o(" (RoBERTa model)"),kMr=l(),T4=a("li"),Cve=a("strong"),SMr=o("roformer"),RMr=o(" \u2014 "),GH=a("a"),BMr=o("TFRoFormerForQuestionAnswering"),PMr=o(" (RoFormer model)"),IMr=l(),M4=a("li"),wve=a("strong"),qMr=o("xlm"),NMr=o(" \u2014 "),OH=a("a"),jMr=o("TFXLMForQuestionAnsweringSimple"),DMr=o(" (XLM model)"),GMr=l(),E4=a("li"),Ave=a("strong"),OMr=o("xlm-roberta"),VMr=o(" \u2014 "),VH=a("a"),XMr=o("TFXLMRobertaForQuestionAnswering"),zMr=o(" (XLM-RoBERTa model)"),QMr=l(),C4=a("li"),yve=a("strong"),WMr=o("xlnet"),HMr=o(" \u2014 "),XH=a("a"),UMr=o("TFXLNetForQuestionAnsweringSimple"),JMr=o(" (XLNet model)"),YMr=l(),F(w4.$$.fragment),FIe=l(),mc=a("h2"),A4=a("a"),Lve=a("span"),F(h8.$$.fragment),KMr=l(),xve=a("span"),ZMr=o("TFAutoModelForVision2Seq"),TIe=l(),ir=a("div"),F(p8.$$.fragment),e4r=l(),gc=a("p"),o4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zH=a("a"),r4r=o("from_pretrained()"),t4r=o(" class method or the "),QH=a("a"),a4r=o("from_config()"),n4r=o(` class
method.`),s4r=l(),u8=a("p"),l4r=o("This class cannot be instantiated directly using "),$ve=a("code"),i4r=o("__init__()"),d4r=o(" (throws an error)."),c4r=l(),Bt=a("div"),F(_8.$$.fragment),f4r=l(),kve=a("p"),m4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),g4r=l(),hc=a("p"),h4r=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),p4r=o("not"),u4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),_4r=o("from_pretrained()"),b4r=o(" to load the model weights."),v4r=l(),F(y4.$$.fragment),F4r=l(),Pr=a("div"),F(b8.$$.fragment),T4r=l(),Rve=a("p"),M4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),E4r=l(),sn=a("p"),C4r=o("The model class to instantiate is selected based on the "),Bve=a("code"),w4r=o("model_type"),A4r=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),y4r=o("pretrained_model_name_or_path"),L4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),x4r=o("pretrained_model_name_or_path"),$4r=o(":"),k4r=l(),qve=a("ul"),L4=a("li"),Nve=a("strong"),S4r=o("vision-encoder-decoder"),R4r=o(" \u2014 "),HH=a("a"),B4r=o("TFVisionEncoderDecoderModel"),P4r=o(" (Vision Encoder decoder model)"),I4r=l(),F(x4.$$.fragment),MIe=l(),pc=a("h2"),$4=a("a"),jve=a("span"),F(v8.$$.fragment),q4r=l(),Dve=a("span"),N4r=o("TFAutoModelForSpeechSeq2Seq"),EIe=l(),dr=a("div"),F(F8.$$.fragment),j4r=l(),uc=a("p"),D4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UH=a("a"),G4r=o("from_pretrained()"),O4r=o(" class method or the "),JH=a("a"),V4r=o("from_config()"),X4r=o(` class
method.`),z4r=l(),T8=a("p"),Q4r=o("This class cannot be instantiated directly using "),Gve=a("code"),W4r=o("__init__()"),H4r=o(" (throws an error)."),U4r=l(),Pt=a("div"),F(M8.$$.fragment),J4r=l(),Ove=a("p"),Y4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),K4r=l(),_c=a("p"),Z4r=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),eEr=o("not"),oEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),rEr=o("from_pretrained()"),tEr=o(" to load the model weights."),aEr=l(),F(k4.$$.fragment),nEr=l(),Ir=a("div"),F(E8.$$.fragment),sEr=l(),Xve=a("p"),lEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iEr=l(),ln=a("p"),dEr=o("The model class to instantiate is selected based on the "),zve=a("code"),cEr=o("model_type"),fEr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),mEr=o("pretrained_model_name_or_path"),gEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),hEr=o("pretrained_model_name_or_path"),pEr=o(":"),uEr=l(),Hve=a("ul"),S4=a("li"),Uve=a("strong"),_Er=o("speech_to_text"),bEr=o(" \u2014 "),KH=a("a"),vEr=o("TFSpeech2TextForConditionalGeneration"),FEr=o(" (Speech2Text model)"),TEr=l(),F(R4.$$.fragment),CIe=l(),bc=a("h2"),B4=a("a"),Jve=a("span"),F(C8.$$.fragment),MEr=l(),Yve=a("span"),EEr=o("FlaxAutoModel"),wIe=l(),cr=a("div"),F(w8.$$.fragment),CEr=l(),vc=a("p"),wEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZH=a("a"),AEr=o("from_pretrained()"),yEr=o(" class method or the "),eU=a("a"),LEr=o("from_config()"),xEr=o(` class
method.`),$Er=l(),A8=a("p"),kEr=o("This class cannot be instantiated directly using "),Kve=a("code"),SEr=o("__init__()"),REr=o(" (throws an error)."),BEr=l(),It=a("div"),F(y8.$$.fragment),PEr=l(),Zve=a("p"),IEr=o("Instantiates one of the base model classes of the library from a configuration."),qEr=l(),Fc=a("p"),NEr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),jEr=o("not"),DEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),GEr=o("from_pretrained()"),OEr=o(" to load the model weights."),VEr=l(),F(P4.$$.fragment),XEr=l(),qr=a("div"),F(L8.$$.fragment),zEr=l(),oFe=a("p"),QEr=o("Instantiate one of the base model classes of the library from a pretrained model."),WEr=l(),dn=a("p"),HEr=o("The model class to instantiate is selected based on the "),rFe=a("code"),UEr=o("model_type"),JEr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),YEr=o("pretrained_model_name_or_path"),KEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),ZEr=o("pretrained_model_name_or_path"),e5r=o(":"),o5r=l(),re=a("ul"),I4=a("li"),nFe=a("strong"),r5r=o("albert"),t5r=o(" \u2014 "),rU=a("a"),a5r=o("FlaxAlbertModel"),n5r=o(" (ALBERT model)"),s5r=l(),q4=a("li"),sFe=a("strong"),l5r=o("bart"),i5r=o(" \u2014 "),tU=a("a"),d5r=o("FlaxBartModel"),c5r=o(" (BART model)"),f5r=l(),N4=a("li"),lFe=a("strong"),m5r=o("beit"),g5r=o(" \u2014 "),aU=a("a"),h5r=o("FlaxBeitModel"),p5r=o(" (BEiT model)"),u5r=l(),j4=a("li"),iFe=a("strong"),_5r=o("bert"),b5r=o(" \u2014 "),nU=a("a"),v5r=o("FlaxBertModel"),F5r=o(" (BERT model)"),T5r=l(),D4=a("li"),dFe=a("strong"),M5r=o("big_bird"),E5r=o(" \u2014 "),sU=a("a"),C5r=o("FlaxBigBirdModel"),w5r=o(" (BigBird model)"),A5r=l(),G4=a("li"),cFe=a("strong"),y5r=o("blenderbot"),L5r=o(" \u2014 "),lU=a("a"),x5r=o("FlaxBlenderbotModel"),$5r=o(" (Blenderbot model)"),k5r=l(),O4=a("li"),fFe=a("strong"),S5r=o("blenderbot-small"),R5r=o(" \u2014 "),iU=a("a"),B5r=o("FlaxBlenderbotSmallModel"),P5r=o(" (BlenderbotSmall model)"),I5r=l(),V4=a("li"),mFe=a("strong"),q5r=o("clip"),N5r=o(" \u2014 "),dU=a("a"),j5r=o("FlaxCLIPModel"),D5r=o(" (CLIP model)"),G5r=l(),X4=a("li"),gFe=a("strong"),O5r=o("distilbert"),V5r=o(" \u2014 "),cU=a("a"),X5r=o("FlaxDistilBertModel"),z5r=o(" (DistilBERT model)"),Q5r=l(),z4=a("li"),hFe=a("strong"),W5r=o("electra"),H5r=o(" \u2014 "),fU=a("a"),U5r=o("FlaxElectraModel"),J5r=o(" (ELECTRA model)"),Y5r=l(),Q4=a("li"),pFe=a("strong"),K5r=o("gpt2"),Z5r=o(" \u2014 "),mU=a("a"),eCr=o("FlaxGPT2Model"),oCr=o(" (OpenAI GPT-2 model)"),rCr=l(),W4=a("li"),uFe=a("strong"),tCr=o("gpt_neo"),aCr=o(" \u2014 "),gU=a("a"),nCr=o("FlaxGPTNeoModel"),sCr=o(" (GPT Neo model)"),lCr=l(),H4=a("li"),_Fe=a("strong"),iCr=o("gptj"),dCr=o(" \u2014 "),hU=a("a"),cCr=o("FlaxGPTJModel"),fCr=o(" (GPT-J model)"),mCr=l(),U4=a("li"),bFe=a("strong"),gCr=o("marian"),hCr=o(" \u2014 "),pU=a("a"),pCr=o("FlaxMarianModel"),uCr=o(" (Marian model)"),_Cr=l(),J4=a("li"),vFe=a("strong"),bCr=o("mbart"),vCr=o(" \u2014 "),uU=a("a"),FCr=o("FlaxMBartModel"),TCr=o(" (mBART model)"),MCr=l(),Y4=a("li"),FFe=a("strong"),ECr=o("mt5"),CCr=o(" \u2014 "),_U=a("a"),wCr=o("FlaxMT5Model"),ACr=o(" (mT5 model)"),yCr=l(),K4=a("li"),TFe=a("strong"),LCr=o("pegasus"),xCr=o(" \u2014 "),bU=a("a"),$Cr=o("FlaxPegasusModel"),kCr=o(" (Pegasus model)"),SCr=l(),Z4=a("li"),MFe=a("strong"),RCr=o("roberta"),BCr=o(" \u2014 "),vU=a("a"),PCr=o("FlaxRobertaModel"),ICr=o(" (RoBERTa model)"),qCr=l(),eE=a("li"),EFe=a("strong"),NCr=o("roformer"),jCr=o(" \u2014 "),FU=a("a"),DCr=o("FlaxRoFormerModel"),GCr=o(" (RoFormer model)"),OCr=l(),oE=a("li"),CFe=a("strong"),VCr=o("t5"),XCr=o(" \u2014 "),TU=a("a"),zCr=o("FlaxT5Model"),QCr=o(" (T5 model)"),WCr=l(),rE=a("li"),wFe=a("strong"),HCr=o("vision-text-dual-encoder"),UCr=o(" \u2014 "),MU=a("a"),JCr=o("FlaxVisionTextDualEncoderModel"),YCr=o(" (VisionTextDualEncoder model)"),KCr=l(),tE=a("li"),AFe=a("strong"),ZCr=o("vit"),e3r=o(" \u2014 "),EU=a("a"),o3r=o("FlaxViTModel"),r3r=o(" (ViT model)"),t3r=l(),aE=a("li"),yFe=a("strong"),a3r=o("wav2vec2"),n3r=o(" \u2014 "),CU=a("a"),s3r=o("FlaxWav2Vec2Model"),l3r=o(" (Wav2Vec2 model)"),i3r=l(),nE=a("li"),LFe=a("strong"),d3r=o("xglm"),c3r=o(" \u2014 "),wU=a("a"),f3r=o("FlaxXGLMModel"),m3r=o(" (XGLM model)"),g3r=l(),sE=a("li"),xFe=a("strong"),h3r=o("xlm-roberta"),p3r=o(" \u2014 "),AU=a("a"),u3r=o("FlaxXLMRobertaModel"),_3r=o(" (XLM-RoBERTa model)"),b3r=l(),F(lE.$$.fragment),AIe=l(),Tc=a("h2"),iE=a("a"),$Fe=a("span"),F(x8.$$.fragment),v3r=l(),kFe=a("span"),F3r=o("FlaxAutoModelForCausalLM"),yIe=l(),fr=a("div"),F($8.$$.fragment),T3r=l(),Mc=a("p"),M3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yU=a("a"),E3r=o("from_pretrained()"),C3r=o(" class method or the "),LU=a("a"),w3r=o("from_config()"),A3r=o(` class
method.`),y3r=l(),k8=a("p"),L3r=o("This class cannot be instantiated directly using "),SFe=a("code"),x3r=o("__init__()"),$3r=o(" (throws an error)."),k3r=l(),qt=a("div"),F(S8.$$.fragment),S3r=l(),RFe=a("p"),R3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),B3r=l(),Ec=a("p"),P3r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),I3r=o("not"),q3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),N3r=o("from_pretrained()"),j3r=o(" to load the model weights."),D3r=l(),F(dE.$$.fragment),G3r=l(),Nr=a("div"),F(R8.$$.fragment),O3r=l(),PFe=a("p"),V3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X3r=l(),cn=a("p"),z3r=o("The model class to instantiate is selected based on the "),IFe=a("code"),Q3r=o("model_type"),W3r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),H3r=o("pretrained_model_name_or_path"),U3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),J3r=o("pretrained_model_name_or_path"),Y3r=o(":"),K3r=l(),ke=a("ul"),cE=a("li"),jFe=a("strong"),Z3r=o("bart"),ewr=o(" \u2014 "),$U=a("a"),owr=o("FlaxBartForCausalLM"),rwr=o(" (BART model)"),twr=l(),fE=a("li"),DFe=a("strong"),awr=o("bert"),nwr=o(" \u2014 "),kU=a("a"),swr=o("FlaxBertForCausalLM"),lwr=o(" (BERT model)"),iwr=l(),mE=a("li"),GFe=a("strong"),dwr=o("big_bird"),cwr=o(" \u2014 "),SU=a("a"),fwr=o("FlaxBigBirdForCausalLM"),mwr=o(" (BigBird model)"),gwr=l(),gE=a("li"),OFe=a("strong"),hwr=o("electra"),pwr=o(" \u2014 "),RU=a("a"),uwr=o("FlaxElectraForCausalLM"),_wr=o(" (ELECTRA model)"),bwr=l(),hE=a("li"),VFe=a("strong"),vwr=o("gpt2"),Fwr=o(" \u2014 "),BU=a("a"),Twr=o("FlaxGPT2LMHeadModel"),Mwr=o(" (OpenAI GPT-2 model)"),Ewr=l(),pE=a("li"),XFe=a("strong"),Cwr=o("gpt_neo"),wwr=o(" \u2014 "),PU=a("a"),Awr=o("FlaxGPTNeoForCausalLM"),ywr=o(" (GPT Neo model)"),Lwr=l(),uE=a("li"),zFe=a("strong"),xwr=o("gptj"),$wr=o(" \u2014 "),IU=a("a"),kwr=o("FlaxGPTJForCausalLM"),Swr=o(" (GPT-J model)"),Rwr=l(),_E=a("li"),QFe=a("strong"),Bwr=o("roberta"),Pwr=o(" \u2014 "),qU=a("a"),Iwr=o("FlaxRobertaForCausalLM"),qwr=o(" (RoBERTa model)"),Nwr=l(),bE=a("li"),WFe=a("strong"),jwr=o("xglm"),Dwr=o(" \u2014 "),NU=a("a"),Gwr=o("FlaxXGLMForCausalLM"),Owr=o(" (XGLM model)"),Vwr=l(),F(vE.$$.fragment),LIe=l(),Cc=a("h2"),FE=a("a"),HFe=a("span"),F(B8.$$.fragment),Xwr=l(),UFe=a("span"),zwr=o("FlaxAutoModelForPreTraining"),xIe=l(),mr=a("div"),F(P8.$$.fragment),Qwr=l(),wc=a("p"),Wwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jU=a("a"),Hwr=o("from_pretrained()"),Uwr=o(" class method or the "),DU=a("a"),Jwr=o("from_config()"),Ywr=o(` class
method.`),Kwr=l(),I8=a("p"),Zwr=o("This class cannot be instantiated directly using "),JFe=a("code"),eAr=o("__init__()"),oAr=o(" (throws an error)."),rAr=l(),Nt=a("div"),F(q8.$$.fragment),tAr=l(),YFe=a("p"),aAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nAr=l(),Ac=a("p"),sAr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),lAr=o("not"),iAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),dAr=o("from_pretrained()"),cAr=o(" to load the model weights."),fAr=l(),F(TE.$$.fragment),mAr=l(),jr=a("div"),F(N8.$$.fragment),gAr=l(),ZFe=a("p"),hAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pAr=l(),fn=a("p"),uAr=o("The model class to instantiate is selected based on the "),e6e=a("code"),_Ar=o("model_type"),bAr=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),vAr=o("pretrained_model_name_or_path"),FAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),TAr=o("pretrained_model_name_or_path"),MAr=o(":"),EAr=l(),Me=a("ul"),ME=a("li"),t6e=a("strong"),CAr=o("albert"),wAr=o(" \u2014 "),OU=a("a"),AAr=o("FlaxAlbertForPreTraining"),yAr=o(" (ALBERT model)"),LAr=l(),EE=a("li"),a6e=a("strong"),xAr=o("bart"),$Ar=o(" \u2014 "),VU=a("a"),kAr=o("FlaxBartForConditionalGeneration"),SAr=o(" (BART model)"),RAr=l(),CE=a("li"),n6e=a("strong"),BAr=o("bert"),PAr=o(" \u2014 "),XU=a("a"),IAr=o("FlaxBertForPreTraining"),qAr=o(" (BERT model)"),NAr=l(),wE=a("li"),s6e=a("strong"),jAr=o("big_bird"),DAr=o(" \u2014 "),zU=a("a"),GAr=o("FlaxBigBirdForPreTraining"),OAr=o(" (BigBird model)"),VAr=l(),AE=a("li"),l6e=a("strong"),XAr=o("electra"),zAr=o(" \u2014 "),QU=a("a"),QAr=o("FlaxElectraForPreTraining"),WAr=o(" (ELECTRA model)"),HAr=l(),yE=a("li"),i6e=a("strong"),UAr=o("mbart"),JAr=o(" \u2014 "),WU=a("a"),YAr=o("FlaxMBartForConditionalGeneration"),KAr=o(" (mBART model)"),ZAr=l(),LE=a("li"),d6e=a("strong"),eyr=o("mt5"),oyr=o(" \u2014 "),HU=a("a"),ryr=o("FlaxMT5ForConditionalGeneration"),tyr=o(" (mT5 model)"),ayr=l(),xE=a("li"),c6e=a("strong"),nyr=o("roberta"),syr=o(" \u2014 "),UU=a("a"),lyr=o("FlaxRobertaForMaskedLM"),iyr=o(" (RoBERTa model)"),dyr=l(),$E=a("li"),f6e=a("strong"),cyr=o("roformer"),fyr=o(" \u2014 "),JU=a("a"),myr=o("FlaxRoFormerForMaskedLM"),gyr=o(" (RoFormer model)"),hyr=l(),kE=a("li"),m6e=a("strong"),pyr=o("t5"),uyr=o(" \u2014 "),YU=a("a"),_yr=o("FlaxT5ForConditionalGeneration"),byr=o(" (T5 model)"),vyr=l(),SE=a("li"),g6e=a("strong"),Fyr=o("wav2vec2"),Tyr=o(" \u2014 "),KU=a("a"),Myr=o("FlaxWav2Vec2ForPreTraining"),Eyr=o(" (Wav2Vec2 model)"),Cyr=l(),RE=a("li"),h6e=a("strong"),wyr=o("xlm-roberta"),Ayr=o(" \u2014 "),ZU=a("a"),yyr=o("FlaxXLMRobertaForMaskedLM"),Lyr=o(" (XLM-RoBERTa model)"),xyr=l(),F(BE.$$.fragment),$Ie=l(),yc=a("h2"),PE=a("a"),p6e=a("span"),F(j8.$$.fragment),$yr=l(),u6e=a("span"),kyr=o("FlaxAutoModelForMaskedLM"),kIe=l(),gr=a("div"),F(D8.$$.fragment),Syr=l(),Lc=a("p"),Ryr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eJ=a("a"),Byr=o("from_pretrained()"),Pyr=o(" class method or the "),oJ=a("a"),Iyr=o("from_config()"),qyr=o(` class
method.`),Nyr=l(),G8=a("p"),jyr=o("This class cannot be instantiated directly using "),_6e=a("code"),Dyr=o("__init__()"),Gyr=o(" (throws an error)."),Oyr=l(),jt=a("div"),F(O8.$$.fragment),Vyr=l(),b6e=a("p"),Xyr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zyr=l(),xc=a("p"),Qyr=o(`Note:
Loading a model from its configuration file does `),v6e=a("strong"),Wyr=o("not"),Hyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" to load the model weights."),Yyr=l(),F(IE.$$.fragment),Kyr=l(),Dr=a("div"),F(V8.$$.fragment),Zyr=l(),F6e=a("p"),eLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oLr=l(),mn=a("p"),rLr=o("The model class to instantiate is selected based on the "),T6e=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),M6e=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),Le=a("ul"),qE=a("li"),C6e=a("strong"),cLr=o("albert"),fLr=o(" \u2014 "),tJ=a("a"),mLr=o("FlaxAlbertForMaskedLM"),gLr=o(" (ALBERT model)"),hLr=l(),NE=a("li"),w6e=a("strong"),pLr=o("bart"),uLr=o(" \u2014 "),aJ=a("a"),_Lr=o("FlaxBartForConditionalGeneration"),bLr=o(" (BART model)"),vLr=l(),jE=a("li"),A6e=a("strong"),FLr=o("bert"),TLr=o(" \u2014 "),nJ=a("a"),MLr=o("FlaxBertForMaskedLM"),ELr=o(" (BERT model)"),CLr=l(),DE=a("li"),y6e=a("strong"),wLr=o("big_bird"),ALr=o(" \u2014 "),sJ=a("a"),yLr=o("FlaxBigBirdForMaskedLM"),LLr=o(" (BigBird model)"),xLr=l(),GE=a("li"),L6e=a("strong"),$Lr=o("distilbert"),kLr=o(" \u2014 "),lJ=a("a"),SLr=o("FlaxDistilBertForMaskedLM"),RLr=o(" (DistilBERT model)"),BLr=l(),OE=a("li"),x6e=a("strong"),PLr=o("electra"),ILr=o(" \u2014 "),iJ=a("a"),qLr=o("FlaxElectraForMaskedLM"),NLr=o(" (ELECTRA model)"),jLr=l(),VE=a("li"),$6e=a("strong"),DLr=o("mbart"),GLr=o(" \u2014 "),dJ=a("a"),OLr=o("FlaxMBartForConditionalGeneration"),VLr=o(" (mBART model)"),XLr=l(),XE=a("li"),k6e=a("strong"),zLr=o("roberta"),QLr=o(" \u2014 "),cJ=a("a"),WLr=o("FlaxRobertaForMaskedLM"),HLr=o(" (RoBERTa model)"),ULr=l(),zE=a("li"),S6e=a("strong"),JLr=o("roformer"),YLr=o(" \u2014 "),fJ=a("a"),KLr=o("FlaxRoFormerForMaskedLM"),ZLr=o(" (RoFormer model)"),e8r=l(),QE=a("li"),R6e=a("strong"),o8r=o("xlm-roberta"),r8r=o(" \u2014 "),mJ=a("a"),t8r=o("FlaxXLMRobertaForMaskedLM"),a8r=o(" (XLM-RoBERTa model)"),n8r=l(),F(WE.$$.fragment),SIe=l(),$c=a("h2"),HE=a("a"),B6e=a("span"),F(X8.$$.fragment),s8r=l(),P6e=a("span"),l8r=o("FlaxAutoModelForSeq2SeqLM"),RIe=l(),hr=a("div"),F(z8.$$.fragment),i8r=l(),kc=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gJ=a("a"),c8r=o("from_pretrained()"),f8r=o(" class method or the "),hJ=a("a"),m8r=o("from_config()"),g8r=o(` class
method.`),h8r=l(),Q8=a("p"),p8r=o("This class cannot be instantiated directly using "),I6e=a("code"),u8r=o("__init__()"),_8r=o(" (throws an error)."),b8r=l(),Dt=a("div"),F(W8.$$.fragment),v8r=l(),q6e=a("p"),F8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T8r=l(),Sc=a("p"),M8r=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),E8r=o("not"),C8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),w8r=o("from_pretrained()"),A8r=o(" to load the model weights."),y8r=l(),F(UE.$$.fragment),L8r=l(),Gr=a("div"),F(H8.$$.fragment),x8r=l(),j6e=a("p"),$8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k8r=l(),gn=a("p"),S8r=o("The model class to instantiate is selected based on the "),D6e=a("code"),R8r=o("model_type"),B8r=o(` property of the config object (either
passed as an argument or loaded from `),G6e=a("code"),P8r=o("pretrained_model_name_or_path"),I8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=a("code"),q8r=o("pretrained_model_name_or_path"),N8r=o(":"),j8r=l(),Se=a("ul"),JE=a("li"),V6e=a("strong"),D8r=o("bart"),G8r=o(" \u2014 "),uJ=a("a"),O8r=o("FlaxBartForConditionalGeneration"),V8r=o(" (BART model)"),X8r=l(),YE=a("li"),X6e=a("strong"),z8r=o("blenderbot"),Q8r=o(" \u2014 "),_J=a("a"),W8r=o("FlaxBlenderbotForConditionalGeneration"),H8r=o(" (Blenderbot model)"),U8r=l(),KE=a("li"),z6e=a("strong"),J8r=o("blenderbot-small"),Y8r=o(" \u2014 "),bJ=a("a"),K8r=o("FlaxBlenderbotSmallForConditionalGeneration"),Z8r=o(" (BlenderbotSmall model)"),exr=l(),ZE=a("li"),Q6e=a("strong"),oxr=o("encoder-decoder"),rxr=o(" \u2014 "),vJ=a("a"),txr=o("FlaxEncoderDecoderModel"),axr=o(" (Encoder decoder model)"),nxr=l(),e5=a("li"),W6e=a("strong"),sxr=o("marian"),lxr=o(" \u2014 "),FJ=a("a"),ixr=o("FlaxMarianMTModel"),dxr=o(" (Marian model)"),cxr=l(),o5=a("li"),H6e=a("strong"),fxr=o("mbart"),mxr=o(" \u2014 "),TJ=a("a"),gxr=o("FlaxMBartForConditionalGeneration"),hxr=o(" (mBART model)"),pxr=l(),r5=a("li"),U6e=a("strong"),uxr=o("mt5"),_xr=o(" \u2014 "),MJ=a("a"),bxr=o("FlaxMT5ForConditionalGeneration"),vxr=o(" (mT5 model)"),Fxr=l(),t5=a("li"),J6e=a("strong"),Txr=o("pegasus"),Mxr=o(" \u2014 "),EJ=a("a"),Exr=o("FlaxPegasusForConditionalGeneration"),Cxr=o(" (Pegasus model)"),wxr=l(),a5=a("li"),Y6e=a("strong"),Axr=o("t5"),yxr=o(" \u2014 "),CJ=a("a"),Lxr=o("FlaxT5ForConditionalGeneration"),xxr=o(" (T5 model)"),$xr=l(),F(n5.$$.fragment),BIe=l(),Rc=a("h2"),s5=a("a"),K6e=a("span"),F(U8.$$.fragment),kxr=l(),Z6e=a("span"),Sxr=o("FlaxAutoModelForSequenceClassification"),PIe=l(),pr=a("div"),F(J8.$$.fragment),Rxr=l(),Bc=a("p"),Bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wJ=a("a"),Pxr=o("from_pretrained()"),Ixr=o(" class method or the "),AJ=a("a"),qxr=o("from_config()"),Nxr=o(` class
method.`),jxr=l(),Y8=a("p"),Dxr=o("This class cannot be instantiated directly using "),eTe=a("code"),Gxr=o("__init__()"),Oxr=o(" (throws an error)."),Vxr=l(),Gt=a("div"),F(K8.$$.fragment),Xxr=l(),oTe=a("p"),zxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Qxr=l(),Pc=a("p"),Wxr=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),Hxr=o("not"),Uxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),Jxr=o("from_pretrained()"),Yxr=o(" to load the model weights."),Kxr=l(),F(l5.$$.fragment),Zxr=l(),Or=a("div"),F(Z8.$$.fragment),e9r=l(),tTe=a("p"),o9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),r9r=l(),hn=a("p"),t9r=o("The model class to instantiate is selected based on the "),aTe=a("code"),a9r=o("model_type"),n9r=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),s9r=o("pretrained_model_name_or_path"),l9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),i9r=o("pretrained_model_name_or_path"),d9r=o(":"),c9r=l(),xe=a("ul"),i5=a("li"),lTe=a("strong"),f9r=o("albert"),m9r=o(" \u2014 "),LJ=a("a"),g9r=o("FlaxAlbertForSequenceClassification"),h9r=o(" (ALBERT model)"),p9r=l(),d5=a("li"),iTe=a("strong"),u9r=o("bart"),_9r=o(" \u2014 "),xJ=a("a"),b9r=o("FlaxBartForSequenceClassification"),v9r=o(" (BART model)"),F9r=l(),c5=a("li"),dTe=a("strong"),T9r=o("bert"),M9r=o(" \u2014 "),$J=a("a"),E9r=o("FlaxBertForSequenceClassification"),C9r=o(" (BERT model)"),w9r=l(),f5=a("li"),cTe=a("strong"),A9r=o("big_bird"),y9r=o(" \u2014 "),kJ=a("a"),L9r=o("FlaxBigBirdForSequenceClassification"),x9r=o(" (BigBird model)"),$9r=l(),m5=a("li"),fTe=a("strong"),k9r=o("distilbert"),S9r=o(" \u2014 "),SJ=a("a"),R9r=o("FlaxDistilBertForSequenceClassification"),B9r=o(" (DistilBERT model)"),P9r=l(),g5=a("li"),mTe=a("strong"),I9r=o("electra"),q9r=o(" \u2014 "),RJ=a("a"),N9r=o("FlaxElectraForSequenceClassification"),j9r=o(" (ELECTRA model)"),D9r=l(),h5=a("li"),gTe=a("strong"),G9r=o("mbart"),O9r=o(" \u2014 "),BJ=a("a"),V9r=o("FlaxMBartForSequenceClassification"),X9r=o(" (mBART model)"),z9r=l(),p5=a("li"),hTe=a("strong"),Q9r=o("roberta"),W9r=o(" \u2014 "),PJ=a("a"),H9r=o("FlaxRobertaForSequenceClassification"),U9r=o(" (RoBERTa model)"),J9r=l(),u5=a("li"),pTe=a("strong"),Y9r=o("roformer"),K9r=o(" \u2014 "),IJ=a("a"),Z9r=o("FlaxRoFormerForSequenceClassification"),e$r=o(" (RoFormer model)"),o$r=l(),_5=a("li"),uTe=a("strong"),r$r=o("xlm-roberta"),t$r=o(" \u2014 "),qJ=a("a"),a$r=o("FlaxXLMRobertaForSequenceClassification"),n$r=o(" (XLM-RoBERTa model)"),s$r=l(),F(b5.$$.fragment),IIe=l(),Ic=a("h2"),v5=a("a"),_Te=a("span"),F(ex.$$.fragment),l$r=l(),bTe=a("span"),i$r=o("FlaxAutoModelForQuestionAnswering"),qIe=l(),ur=a("div"),F(ox.$$.fragment),d$r=l(),qc=a("p"),c$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NJ=a("a"),f$r=o("from_pretrained()"),m$r=o(" class method or the "),jJ=a("a"),g$r=o("from_config()"),h$r=o(` class
method.`),p$r=l(),rx=a("p"),u$r=o("This class cannot be instantiated directly using "),vTe=a("code"),_$r=o("__init__()"),b$r=o(" (throws an error)."),v$r=l(),Ot=a("div"),F(tx.$$.fragment),F$r=l(),FTe=a("p"),T$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M$r=l(),Nc=a("p"),E$r=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),C$r=o("not"),w$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),A$r=o("from_pretrained()"),y$r=o(" to load the model weights."),L$r=l(),F(F5.$$.fragment),x$r=l(),Vr=a("div"),F(ax.$$.fragment),$$r=l(),MTe=a("p"),k$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S$r=l(),pn=a("p"),R$r=o("The model class to instantiate is selected based on the "),ETe=a("code"),B$r=o("model_type"),P$r=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),I$r=o("pretrained_model_name_or_path"),q$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),N$r=o("pretrained_model_name_or_path"),j$r=o(":"),D$r=l(),$e=a("ul"),T5=a("li"),ATe=a("strong"),G$r=o("albert"),O$r=o(" \u2014 "),GJ=a("a"),V$r=o("FlaxAlbertForQuestionAnswering"),X$r=o(" (ALBERT model)"),z$r=l(),M5=a("li"),yTe=a("strong"),Q$r=o("bart"),W$r=o(" \u2014 "),OJ=a("a"),H$r=o("FlaxBartForQuestionAnswering"),U$r=o(" (BART model)"),J$r=l(),E5=a("li"),LTe=a("strong"),Y$r=o("bert"),K$r=o(" \u2014 "),VJ=a("a"),Z$r=o("FlaxBertForQuestionAnswering"),ekr=o(" (BERT model)"),okr=l(),C5=a("li"),xTe=a("strong"),rkr=o("big_bird"),tkr=o(" \u2014 "),XJ=a("a"),akr=o("FlaxBigBirdForQuestionAnswering"),nkr=o(" (BigBird model)"),skr=l(),w5=a("li"),$Te=a("strong"),lkr=o("distilbert"),ikr=o(" \u2014 "),zJ=a("a"),dkr=o("FlaxDistilBertForQuestionAnswering"),ckr=o(" (DistilBERT model)"),fkr=l(),A5=a("li"),kTe=a("strong"),mkr=o("electra"),gkr=o(" \u2014 "),QJ=a("a"),hkr=o("FlaxElectraForQuestionAnswering"),pkr=o(" (ELECTRA model)"),ukr=l(),y5=a("li"),STe=a("strong"),_kr=o("mbart"),bkr=o(" \u2014 "),WJ=a("a"),vkr=o("FlaxMBartForQuestionAnswering"),Fkr=o(" (mBART model)"),Tkr=l(),L5=a("li"),RTe=a("strong"),Mkr=o("roberta"),Ekr=o(" \u2014 "),HJ=a("a"),Ckr=o("FlaxRobertaForQuestionAnswering"),wkr=o(" (RoBERTa model)"),Akr=l(),x5=a("li"),BTe=a("strong"),ykr=o("roformer"),Lkr=o(" \u2014 "),UJ=a("a"),xkr=o("FlaxRoFormerForQuestionAnswering"),$kr=o(" (RoFormer model)"),kkr=l(),$5=a("li"),PTe=a("strong"),Skr=o("xlm-roberta"),Rkr=o(" \u2014 "),JJ=a("a"),Bkr=o("FlaxXLMRobertaForQuestionAnswering"),Pkr=o(" (XLM-RoBERTa model)"),Ikr=l(),F(k5.$$.fragment),NIe=l(),jc=a("h2"),S5=a("a"),ITe=a("span"),F(nx.$$.fragment),qkr=l(),qTe=a("span"),Nkr=o("FlaxAutoModelForTokenClassification"),jIe=l(),_r=a("div"),F(sx.$$.fragment),jkr=l(),Dc=a("p"),Dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YJ=a("a"),Gkr=o("from_pretrained()"),Okr=o(" class method or the "),KJ=a("a"),Vkr=o("from_config()"),Xkr=o(` class
method.`),zkr=l(),lx=a("p"),Qkr=o("This class cannot be instantiated directly using "),NTe=a("code"),Wkr=o("__init__()"),Hkr=o(" (throws an error)."),Ukr=l(),Vt=a("div"),F(ix.$$.fragment),Jkr=l(),jTe=a("p"),Ykr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kkr=l(),Gc=a("p"),Zkr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),eSr=o("not"),oSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),rSr=o("from_pretrained()"),tSr=o(" to load the model weights."),aSr=l(),F(R5.$$.fragment),nSr=l(),Xr=a("div"),F(dx.$$.fragment),sSr=l(),GTe=a("p"),lSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iSr=l(),un=a("p"),dSr=o("The model class to instantiate is selected based on the "),OTe=a("code"),cSr=o("model_type"),fSr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),mSr=o("pretrained_model_name_or_path"),gSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),hSr=o("pretrained_model_name_or_path"),pSr=o(":"),uSr=l(),De=a("ul"),B5=a("li"),zTe=a("strong"),_Sr=o("albert"),bSr=o(" \u2014 "),eY=a("a"),vSr=o("FlaxAlbertForTokenClassification"),FSr=o(" (ALBERT model)"),TSr=l(),P5=a("li"),QTe=a("strong"),MSr=o("bert"),ESr=o(" \u2014 "),oY=a("a"),CSr=o("FlaxBertForTokenClassification"),wSr=o(" (BERT model)"),ASr=l(),I5=a("li"),WTe=a("strong"),ySr=o("big_bird"),LSr=o(" \u2014 "),rY=a("a"),xSr=o("FlaxBigBirdForTokenClassification"),$Sr=o(" (BigBird model)"),kSr=l(),q5=a("li"),HTe=a("strong"),SSr=o("distilbert"),RSr=o(" \u2014 "),tY=a("a"),BSr=o("FlaxDistilBertForTokenClassification"),PSr=o(" (DistilBERT model)"),ISr=l(),N5=a("li"),UTe=a("strong"),qSr=o("electra"),NSr=o(" \u2014 "),aY=a("a"),jSr=o("FlaxElectraForTokenClassification"),DSr=o(" (ELECTRA model)"),GSr=l(),j5=a("li"),JTe=a("strong"),OSr=o("roberta"),VSr=o(" \u2014 "),nY=a("a"),XSr=o("FlaxRobertaForTokenClassification"),zSr=o(" (RoBERTa model)"),QSr=l(),D5=a("li"),YTe=a("strong"),WSr=o("roformer"),HSr=o(" \u2014 "),sY=a("a"),USr=o("FlaxRoFormerForTokenClassification"),JSr=o(" (RoFormer model)"),YSr=l(),G5=a("li"),KTe=a("strong"),KSr=o("xlm-roberta"),ZSr=o(" \u2014 "),lY=a("a"),eRr=o("FlaxXLMRobertaForTokenClassification"),oRr=o(" (XLM-RoBERTa model)"),rRr=l(),F(O5.$$.fragment),DIe=l(),Oc=a("h2"),V5=a("a"),ZTe=a("span"),F(cx.$$.fragment),tRr=l(),e7e=a("span"),aRr=o("FlaxAutoModelForMultipleChoice"),GIe=l(),br=a("div"),F(fx.$$.fragment),nRr=l(),Vc=a("p"),sRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iY=a("a"),lRr=o("from_pretrained()"),iRr=o(" class method or the "),dY=a("a"),dRr=o("from_config()"),cRr=o(` class
method.`),fRr=l(),mx=a("p"),mRr=o("This class cannot be instantiated directly using "),o7e=a("code"),gRr=o("__init__()"),hRr=o(" (throws an error)."),pRr=l(),Xt=a("div"),F(gx.$$.fragment),uRr=l(),r7e=a("p"),_Rr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bRr=l(),Xc=a("p"),vRr=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),FRr=o("not"),TRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),MRr=o("from_pretrained()"),ERr=o(" to load the model weights."),CRr=l(),F(X5.$$.fragment),wRr=l(),zr=a("div"),F(hx.$$.fragment),ARr=l(),a7e=a("p"),yRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LRr=l(),_n=a("p"),xRr=o("The model class to instantiate is selected based on the "),n7e=a("code"),$Rr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),BRr=o("pretrained_model_name_or_path"),PRr=o(":"),IRr=l(),Ge=a("ul"),z5=a("li"),i7e=a("strong"),qRr=o("albert"),NRr=o(" \u2014 "),fY=a("a"),jRr=o("FlaxAlbertForMultipleChoice"),DRr=o(" (ALBERT model)"),GRr=l(),Q5=a("li"),d7e=a("strong"),ORr=o("bert"),VRr=o(" \u2014 "),mY=a("a"),XRr=o("FlaxBertForMultipleChoice"),zRr=o(" (BERT model)"),QRr=l(),W5=a("li"),c7e=a("strong"),WRr=o("big_bird"),HRr=o(" \u2014 "),gY=a("a"),URr=o("FlaxBigBirdForMultipleChoice"),JRr=o(" (BigBird model)"),YRr=l(),H5=a("li"),f7e=a("strong"),KRr=o("distilbert"),ZRr=o(" \u2014 "),hY=a("a"),eBr=o("FlaxDistilBertForMultipleChoice"),oBr=o(" (DistilBERT model)"),rBr=l(),U5=a("li"),m7e=a("strong"),tBr=o("electra"),aBr=o(" \u2014 "),pY=a("a"),nBr=o("FlaxElectraForMultipleChoice"),sBr=o(" (ELECTRA model)"),lBr=l(),J5=a("li"),g7e=a("strong"),iBr=o("roberta"),dBr=o(" \u2014 "),uY=a("a"),cBr=o("FlaxRobertaForMultipleChoice"),fBr=o(" (RoBERTa model)"),mBr=l(),Y5=a("li"),h7e=a("strong"),gBr=o("roformer"),hBr=o(" \u2014 "),_Y=a("a"),pBr=o("FlaxRoFormerForMultipleChoice"),uBr=o(" (RoFormer model)"),_Br=l(),K5=a("li"),p7e=a("strong"),bBr=o("xlm-roberta"),vBr=o(" \u2014 "),bY=a("a"),FBr=o("FlaxXLMRobertaForMultipleChoice"),TBr=o(" (XLM-RoBERTa model)"),MBr=l(),F(Z5.$$.fragment),OIe=l(),zc=a("h2"),eC=a("a"),u7e=a("span"),F(px.$$.fragment),EBr=l(),_7e=a("span"),CBr=o("FlaxAutoModelForNextSentencePrediction"),VIe=l(),vr=a("div"),F(ux.$$.fragment),wBr=l(),Qc=a("p"),ABr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vY=a("a"),yBr=o("from_pretrained()"),LBr=o(" class method or the "),FY=a("a"),xBr=o("from_config()"),$Br=o(` class
method.`),kBr=l(),_x=a("p"),SBr=o("This class cannot be instantiated directly using "),b7e=a("code"),RBr=o("__init__()"),BBr=o(" (throws an error)."),PBr=l(),zt=a("div"),F(bx.$$.fragment),IBr=l(),v7e=a("p"),qBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NBr=l(),Wc=a("p"),jBr=o(`Note:
Loading a model from its configuration file does `),F7e=a("strong"),DBr=o("not"),GBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),OBr=o("from_pretrained()"),VBr=o(" to load the model weights."),XBr=l(),F(oC.$$.fragment),zBr=l(),Qr=a("div"),F(vx.$$.fragment),QBr=l(),T7e=a("p"),WBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HBr=l(),bn=a("p"),UBr=o("The model class to instantiate is selected based on the "),M7e=a("code"),JBr=o("model_type"),YBr=o(` property of the config object (either
passed as an argument or loaded from `),E7e=a("code"),KBr=o("pretrained_model_name_or_path"),ZBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),ePr=o("pretrained_model_name_or_path"),oPr=o(":"),rPr=l(),w7e=a("ul"),rC=a("li"),A7e=a("strong"),tPr=o("bert"),aPr=o(" \u2014 "),MY=a("a"),nPr=o("FlaxBertForNextSentencePrediction"),sPr=o(" (BERT model)"),lPr=l(),F(tC.$$.fragment),XIe=l(),Hc=a("h2"),aC=a("a"),y7e=a("span"),F(Fx.$$.fragment),iPr=l(),L7e=a("span"),dPr=o("FlaxAutoModelForImageClassification"),zIe=l(),Fr=a("div"),F(Tx.$$.fragment),cPr=l(),Uc=a("p"),fPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EY=a("a"),mPr=o("from_pretrained()"),gPr=o(" class method or the "),CY=a("a"),hPr=o("from_config()"),pPr=o(` class
method.`),uPr=l(),Mx=a("p"),_Pr=o("This class cannot be instantiated directly using "),x7e=a("code"),bPr=o("__init__()"),vPr=o(" (throws an error)."),FPr=l(),Qt=a("div"),F(Ex.$$.fragment),TPr=l(),$7e=a("p"),MPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EPr=l(),Jc=a("p"),CPr=o(`Note:
Loading a model from its configuration file does `),k7e=a("strong"),wPr=o("not"),APr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),yPr=o("from_pretrained()"),LPr=o(" to load the model weights."),xPr=l(),F(nC.$$.fragment),$Pr=l(),Wr=a("div"),F(Cx.$$.fragment),kPr=l(),S7e=a("p"),SPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RPr=l(),vn=a("p"),BPr=o("The model class to instantiate is selected based on the "),R7e=a("code"),PPr=o("model_type"),IPr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),qPr=o("pretrained_model_name_or_path"),NPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),jPr=o("pretrained_model_name_or_path"),DPr=o(":"),GPr=l(),wx=a("ul"),sC=a("li"),I7e=a("strong"),OPr=o("beit"),VPr=o(" \u2014 "),AY=a("a"),XPr=o("FlaxBeitForImageClassification"),zPr=o(" (BEiT model)"),QPr=l(),lC=a("li"),q7e=a("strong"),WPr=o("vit"),HPr=o(" \u2014 "),yY=a("a"),UPr=o("FlaxViTForImageClassification"),JPr=o(" (ViT model)"),YPr=l(),F(iC.$$.fragment),QIe=l(),Yc=a("h2"),dC=a("a"),N7e=a("span"),F(Ax.$$.fragment),KPr=l(),j7e=a("span"),ZPr=o("FlaxAutoModelForVision2Seq"),WIe=l(),Tr=a("div"),F(yx.$$.fragment),eIr=l(),Kc=a("p"),oIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LY=a("a"),rIr=o("from_pretrained()"),tIr=o(" class method or the "),xY=a("a"),aIr=o("from_config()"),nIr=o(` class
method.`),sIr=l(),Lx=a("p"),lIr=o("This class cannot be instantiated directly using "),D7e=a("code"),iIr=o("__init__()"),dIr=o(" (throws an error)."),cIr=l(),Wt=a("div"),F(xx.$$.fragment),fIr=l(),G7e=a("p"),mIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gIr=l(),Zc=a("p"),hIr=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),pIr=o("not"),uIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),_Ir=o("from_pretrained()"),bIr=o(" to load the model weights."),vIr=l(),F(cC.$$.fragment),FIr=l(),Hr=a("div"),F($x.$$.fragment),TIr=l(),V7e=a("p"),MIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EIr=l(),Fn=a("p"),CIr=o("The model class to instantiate is selected based on the "),X7e=a("code"),wIr=o("model_type"),AIr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),yIr=o("pretrained_model_name_or_path"),LIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),xIr=o("pretrained_model_name_or_path"),$Ir=o(":"),kIr=l(),W7e=a("ul"),fC=a("li"),H7e=a("strong"),SIr=o("vision-encoder-decoder"),RIr=o(" \u2014 "),kY=a("a"),BIr=o("FlaxVisionEncoderDecoderModel"),PIr=o(" (Vision Encoder decoder model)"),IIr=l(),F(mC.$$.fragment),this.h()},l(f){const _=QCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var kx=s(p);m=n(kx,"A",{id:!0,class:!0,href:!0});var U7e=s(m);u=n(U7e,"SPAN",{});var J7e=s(u);T(d.$$.fragment,J7e),J7e.forEach(t),U7e.forEach(t),h=i(kx),Mo=n(kx,"SPAN",{});var Y7e=s(Mo);ri=r(Y7e,"Auto Classes"),Y7e.forEach(t),kx.forEach(t),tf=i(f),Kr=n(f,"P",{});var Sx=s(Kr);ti=r(Sx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=n(Sx,"CODE",{});var K7e=s(ai);Lw=r(K7e,"from_pretrained()"),K7e.forEach(t),af=r(Sx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Sx.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ni=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var Z7e=s(Mn);xw=r(Z7e,"AutoConfig"),Z7e.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var eMe=s(Cn);$w=r(eMe,"AutoModel"),eMe.forEach(t),si=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var oMe=s(wn);kw=r(oMe,"AutoTokenizer"),oMe.forEach(t),li=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),nf=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Rx=s(Ae);X9=r(Rx,"will create a model that is an instance of "),ii=n(Rx,"A",{href:!0});var rMe=s(ii);z9=r(rMe,"BertModel"),rMe.forEach(t),Q9=r(Rx,"."),Rx.forEach(t),Eo=i(f),Fa=n(f,"P",{});var Bx=s(Fa);W9=r(Bx,"There is one class of "),sf=n(Bx,"CODE",{});var tMe=s(sf);H9=r(tMe,"AutoModel"),tMe.forEach(t),ZNe=r(Bx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bx.forEach(t),WBe=i(f),di=n(f,"H2",{class:!0});var Px=s(di);lf=n(Px,"A",{id:!0,class:!0,href:!0});var aMe=s(lf);EZ=n(aMe,"SPAN",{});var nMe=s(EZ);T(Sw.$$.fragment,nMe),nMe.forEach(t),aMe.forEach(t),eje=i(Px),CZ=n(Px,"SPAN",{});var sMe=s(CZ);oje=r(sMe,"Extending the Auto Classes"),sMe.forEach(t),Px.forEach(t),HBe=i(f),An=n(f,"P",{});var ef=s(An);rje=r(ef,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wZ=n(ef,"CODE",{});var lMe=s(wZ);tje=r(lMe,"NewModel"),lMe.forEach(t),aje=r(ef,", make sure you have a "),AZ=n(ef,"CODE",{});var iMe=s(AZ);nje=r(iMe,"NewModelConfig"),iMe.forEach(t),sje=r(ef,` then you can add those to the auto
classes like this:`),ef.forEach(t),UBe=i(f),T(Rw.$$.fragment,f),JBe=i(f),U9=n(f,"P",{});var dMe=s(U9);lje=r(dMe,"You will then be able to use the auto classes like you would usually do!"),dMe.forEach(t),YBe=i(f),T(df.$$.fragment,f),KBe=i(f),ci=n(f,"H2",{class:!0});var Ix=s(ci);cf=n(Ix,"A",{id:!0,class:!0,href:!0});var cMe=s(cf);yZ=n(cMe,"SPAN",{});var fMe=s(yZ);T(Bw.$$.fragment,fMe),fMe.forEach(t),cMe.forEach(t),ije=i(Ix),LZ=n(Ix,"SPAN",{});var mMe=s(LZ);dje=r(mMe,"AutoConfig"),mMe.forEach(t),Ix.forEach(t),ZBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(Pw.$$.fragment,Jr),cje=i(Jr),Iw=n(Jr,"P",{});var qx=s(Iw);fje=r(qx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),J9=n(qx,"A",{href:!0});var gMe=s(J9);mje=r(gMe,"from_pretrained()"),gMe.forEach(t),gje=r(qx," class method."),qx.forEach(t),hje=i(Jr),qw=n(Jr,"P",{});var Nx=s(qw);pje=r(Nx,"This class cannot be instantiated directly using "),xZ=n(Nx,"CODE",{});var hMe=s(xZ);uje=r(hMe,"__init__()"),hMe.forEach(t),_je=r(Nx," (throws an error)."),Nx.forEach(t),bje=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(Nw.$$.fragment,Yr),vje=i(Yr),$Z=n(Yr,"P",{});var pMe=s($Z);Fje=r(pMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),pMe.forEach(t),Tje=i(Yr),fi=n(Yr,"P",{});var of=s(fi);Mje=r(of,"The configuration class to instantiate is selected based on the "),kZ=n(of,"CODE",{});var uMe=s(kZ);Eje=r(uMe,"model_type"),uMe.forEach(t),Cje=r(of,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),SZ=n(of,"CODE",{});var _Me=s(SZ);wje=r(_Me,"pretrained_model_name_or_path"),_Me.forEach(t),Aje=r(of,":"),of.forEach(t),yje=i(Yr),A=n(Yr,"UL",{});var y=s(A);ff=n(y,"LI",{});var gC=s(ff);RZ=n(gC,"STRONG",{});var bMe=s(RZ);Lje=r(bMe,"albert"),bMe.forEach(t),xje=r(gC," \u2014 "),Y9=n(gC,"A",{href:!0});var vMe=s(Y9);$je=r(vMe,"AlbertConfig"),vMe.forEach(t),kje=r(gC," (ALBERT model)"),gC.forEach(t),Sje=i(y),mf=n(y,"LI",{});var hC=s(mf);BZ=n(hC,"STRONG",{});var FMe=s(BZ);Rje=r(FMe,"bart"),FMe.forEach(t),Bje=r(hC," \u2014 "),K9=n(hC,"A",{href:!0});var TMe=s(K9);Pje=r(TMe,"BartConfig"),TMe.forEach(t),Ije=r(hC," (BART model)"),hC.forEach(t),qje=i(y),gf=n(y,"LI",{});var pC=s(gf);PZ=n(pC,"STRONG",{});var MMe=s(PZ);Nje=r(MMe,"beit"),MMe.forEach(t),jje=r(pC," \u2014 "),Z9=n(pC,"A",{href:!0});var EMe=s(Z9);Dje=r(EMe,"BeitConfig"),EMe.forEach(t),Gje=r(pC," (BEiT model)"),pC.forEach(t),Oje=i(y),hf=n(y,"LI",{});var uC=s(hf);IZ=n(uC,"STRONG",{});var CMe=s(IZ);Vje=r(CMe,"bert"),CMe.forEach(t),Xje=r(uC," \u2014 "),e$=n(uC,"A",{href:!0});var wMe=s(e$);zje=r(wMe,"BertConfig"),wMe.forEach(t),Qje=r(uC," (BERT model)"),uC.forEach(t),Wje=i(y),pf=n(y,"LI",{});var _C=s(pf);qZ=n(_C,"STRONG",{});var AMe=s(qZ);Hje=r(AMe,"bert-generation"),AMe.forEach(t),Uje=r(_C," \u2014 "),o$=n(_C,"A",{href:!0});var yMe=s(o$);Jje=r(yMe,"BertGenerationConfig"),yMe.forEach(t),Yje=r(_C," (Bert Generation model)"),_C.forEach(t),Kje=i(y),uf=n(y,"LI",{});var bC=s(uf);NZ=n(bC,"STRONG",{});var LMe=s(NZ);Zje=r(LMe,"big_bird"),LMe.forEach(t),eDe=r(bC," \u2014 "),r$=n(bC,"A",{href:!0});var xMe=s(r$);oDe=r(xMe,"BigBirdConfig"),xMe.forEach(t),rDe=r(bC," (BigBird model)"),bC.forEach(t),tDe=i(y),_f=n(y,"LI",{});var vC=s(_f);jZ=n(vC,"STRONG",{});var $Me=s(jZ);aDe=r($Me,"bigbird_pegasus"),$Me.forEach(t),nDe=r(vC," \u2014 "),t$=n(vC,"A",{href:!0});var kMe=s(t$);sDe=r(kMe,"BigBirdPegasusConfig"),kMe.forEach(t),lDe=r(vC," (BigBirdPegasus model)"),vC.forEach(t),iDe=i(y),bf=n(y,"LI",{});var FC=s(bf);DZ=n(FC,"STRONG",{});var SMe=s(DZ);dDe=r(SMe,"blenderbot"),SMe.forEach(t),cDe=r(FC," \u2014 "),a$=n(FC,"A",{href:!0});var RMe=s(a$);fDe=r(RMe,"BlenderbotConfig"),RMe.forEach(t),mDe=r(FC," (Blenderbot model)"),FC.forEach(t),gDe=i(y),vf=n(y,"LI",{});var TC=s(vf);GZ=n(TC,"STRONG",{});var BMe=s(GZ);hDe=r(BMe,"blenderbot-small"),BMe.forEach(t),pDe=r(TC," \u2014 "),n$=n(TC,"A",{href:!0});var PMe=s(n$);uDe=r(PMe,"BlenderbotSmallConfig"),PMe.forEach(t),_De=r(TC," (BlenderbotSmall model)"),TC.forEach(t),bDe=i(y),Ff=n(y,"LI",{});var MC=s(Ff);OZ=n(MC,"STRONG",{});var IMe=s(OZ);vDe=r(IMe,"camembert"),IMe.forEach(t),FDe=r(MC," \u2014 "),s$=n(MC,"A",{href:!0});var qMe=s(s$);TDe=r(qMe,"CamembertConfig"),qMe.forEach(t),MDe=r(MC," (CamemBERT model)"),MC.forEach(t),EDe=i(y),Tf=n(y,"LI",{});var EC=s(Tf);VZ=n(EC,"STRONG",{});var NMe=s(VZ);CDe=r(NMe,"canine"),NMe.forEach(t),wDe=r(EC," \u2014 "),l$=n(EC,"A",{href:!0});var jMe=s(l$);ADe=r(jMe,"CanineConfig"),jMe.forEach(t),yDe=r(EC," (Canine model)"),EC.forEach(t),LDe=i(y),Mf=n(y,"LI",{});var CC=s(Mf);XZ=n(CC,"STRONG",{});var DMe=s(XZ);xDe=r(DMe,"clip"),DMe.forEach(t),$De=r(CC," \u2014 "),i$=n(CC,"A",{href:!0});var GMe=s(i$);kDe=r(GMe,"CLIPConfig"),GMe.forEach(t),SDe=r(CC," (CLIP model)"),CC.forEach(t),RDe=i(y),Ef=n(y,"LI",{});var wC=s(Ef);zZ=n(wC,"STRONG",{});var OMe=s(zZ);BDe=r(OMe,"convbert"),OMe.forEach(t),PDe=r(wC," \u2014 "),d$=n(wC,"A",{href:!0});var VMe=s(d$);IDe=r(VMe,"ConvBertConfig"),VMe.forEach(t),qDe=r(wC," (ConvBERT model)"),wC.forEach(t),NDe=i(y),Cf=n(y,"LI",{});var AC=s(Cf);QZ=n(AC,"STRONG",{});var XMe=s(QZ);jDe=r(XMe,"convnext"),XMe.forEach(t),DDe=r(AC," \u2014 "),c$=n(AC,"A",{href:!0});var zMe=s(c$);GDe=r(zMe,"ConvNextConfig"),zMe.forEach(t),ODe=r(AC," (ConvNext model)"),AC.forEach(t),VDe=i(y),wf=n(y,"LI",{});var yC=s(wf);WZ=n(yC,"STRONG",{});var QMe=s(WZ);XDe=r(QMe,"ctrl"),QMe.forEach(t),zDe=r(yC," \u2014 "),f$=n(yC,"A",{href:!0});var WMe=s(f$);QDe=r(WMe,"CTRLConfig"),WMe.forEach(t),WDe=r(yC," (CTRL model)"),yC.forEach(t),HDe=i(y),Af=n(y,"LI",{});var LC=s(Af);HZ=n(LC,"STRONG",{});var HMe=s(HZ);UDe=r(HMe,"data2vec-audio"),HMe.forEach(t),JDe=r(LC," \u2014 "),m$=n(LC,"A",{href:!0});var UMe=s(m$);YDe=r(UMe,"Data2VecAudioConfig"),UMe.forEach(t),KDe=r(LC," (Data2VecAudio model)"),LC.forEach(t),ZDe=i(y),yf=n(y,"LI",{});var xC=s(yf);UZ=n(xC,"STRONG",{});var JMe=s(UZ);eGe=r(JMe,"data2vec-text"),JMe.forEach(t),oGe=r(xC," \u2014 "),g$=n(xC,"A",{href:!0});var YMe=s(g$);rGe=r(YMe,"Data2VecTextConfig"),YMe.forEach(t),tGe=r(xC," (Data2VecText model)"),xC.forEach(t),aGe=i(y),Lf=n(y,"LI",{});var $C=s(Lf);JZ=n($C,"STRONG",{});var KMe=s(JZ);nGe=r(KMe,"data2vec-vision"),KMe.forEach(t),sGe=r($C," \u2014 "),h$=n($C,"A",{href:!0});var ZMe=s(h$);lGe=r(ZMe,"Data2VecVisionConfig"),ZMe.forEach(t),iGe=r($C," (Data2VecVision model)"),$C.forEach(t),dGe=i(y),xf=n(y,"LI",{});var kC=s(xf);YZ=n(kC,"STRONG",{});var e4e=s(YZ);cGe=r(e4e,"deberta"),e4e.forEach(t),fGe=r(kC," \u2014 "),p$=n(kC,"A",{href:!0});var o4e=s(p$);mGe=r(o4e,"DebertaConfig"),o4e.forEach(t),gGe=r(kC," (DeBERTa model)"),kC.forEach(t),hGe=i(y),$f=n(y,"LI",{});var SC=s($f);KZ=n(SC,"STRONG",{});var r4e=s(KZ);pGe=r(r4e,"deberta-v2"),r4e.forEach(t),uGe=r(SC," \u2014 "),u$=n(SC,"A",{href:!0});var t4e=s(u$);_Ge=r(t4e,"DebertaV2Config"),t4e.forEach(t),bGe=r(SC," (DeBERTa-v2 model)"),SC.forEach(t),vGe=i(y),kf=n(y,"LI",{});var RC=s(kf);ZZ=n(RC,"STRONG",{});var a4e=s(ZZ);FGe=r(a4e,"decision_transformer"),a4e.forEach(t),TGe=r(RC," \u2014 "),_$=n(RC,"A",{href:!0});var n4e=s(_$);MGe=r(n4e,"DecisionTransformerConfig"),n4e.forEach(t),EGe=r(RC," (Decision Transformer model)"),RC.forEach(t),CGe=i(y),Sf=n(y,"LI",{});var BC=s(Sf);eee=n(BC,"STRONG",{});var s4e=s(eee);wGe=r(s4e,"deit"),s4e.forEach(t),AGe=r(BC," \u2014 "),b$=n(BC,"A",{href:!0});var l4e=s(b$);yGe=r(l4e,"DeiTConfig"),l4e.forEach(t),LGe=r(BC," (DeiT model)"),BC.forEach(t),xGe=i(y),Rf=n(y,"LI",{});var i4e=s(Rf);oee=n(i4e,"STRONG",{});var NIr=s(oee);$Ge=r(NIr,"detr"),NIr.forEach(t),kGe=r(i4e," \u2014 "),v$=n(i4e,"A",{href:!0});var jIr=s(v$);SGe=r(jIr,"DetrConfig"),jIr.forEach(t),RGe=r(i4e," (DETR model)"),i4e.forEach(t),BGe=i(y),Bf=n(y,"LI",{});var d4e=s(Bf);ree=n(d4e,"STRONG",{});var DIr=s(ree);PGe=r(DIr,"distilbert"),DIr.forEach(t),IGe=r(d4e," \u2014 "),F$=n(d4e,"A",{href:!0});var GIr=s(F$);qGe=r(GIr,"DistilBertConfig"),GIr.forEach(t),NGe=r(d4e," (DistilBERT model)"),d4e.forEach(t),jGe=i(y),Pf=n(y,"LI",{});var c4e=s(Pf);tee=n(c4e,"STRONG",{});var OIr=s(tee);DGe=r(OIr,"dpr"),OIr.forEach(t),GGe=r(c4e," \u2014 "),T$=n(c4e,"A",{href:!0});var VIr=s(T$);OGe=r(VIr,"DPRConfig"),VIr.forEach(t),VGe=r(c4e," (DPR model)"),c4e.forEach(t),XGe=i(y),If=n(y,"LI",{});var f4e=s(If);aee=n(f4e,"STRONG",{});var XIr=s(aee);zGe=r(XIr,"dpt"),XIr.forEach(t),QGe=r(f4e," \u2014 "),M$=n(f4e,"A",{href:!0});var zIr=s(M$);WGe=r(zIr,"DPTConfig"),zIr.forEach(t),HGe=r(f4e," (DPT model)"),f4e.forEach(t),UGe=i(y),qf=n(y,"LI",{});var m4e=s(qf);nee=n(m4e,"STRONG",{});var QIr=s(nee);JGe=r(QIr,"electra"),QIr.forEach(t),YGe=r(m4e," \u2014 "),E$=n(m4e,"A",{href:!0});var WIr=s(E$);KGe=r(WIr,"ElectraConfig"),WIr.forEach(t),ZGe=r(m4e," (ELECTRA model)"),m4e.forEach(t),eOe=i(y),Nf=n(y,"LI",{});var g4e=s(Nf);see=n(g4e,"STRONG",{});var HIr=s(see);oOe=r(HIr,"encoder-decoder"),HIr.forEach(t),rOe=r(g4e," \u2014 "),C$=n(g4e,"A",{href:!0});var UIr=s(C$);tOe=r(UIr,"EncoderDecoderConfig"),UIr.forEach(t),aOe=r(g4e," (Encoder decoder model)"),g4e.forEach(t),nOe=i(y),jf=n(y,"LI",{});var h4e=s(jf);lee=n(h4e,"STRONG",{});var JIr=s(lee);sOe=r(JIr,"flaubert"),JIr.forEach(t),lOe=r(h4e," \u2014 "),w$=n(h4e,"A",{href:!0});var YIr=s(w$);iOe=r(YIr,"FlaubertConfig"),YIr.forEach(t),dOe=r(h4e," (FlauBERT model)"),h4e.forEach(t),cOe=i(y),Df=n(y,"LI",{});var p4e=s(Df);iee=n(p4e,"STRONG",{});var KIr=s(iee);fOe=r(KIr,"fnet"),KIr.forEach(t),mOe=r(p4e," \u2014 "),A$=n(p4e,"A",{href:!0});var ZIr=s(A$);gOe=r(ZIr,"FNetConfig"),ZIr.forEach(t),hOe=r(p4e," (FNet model)"),p4e.forEach(t),pOe=i(y),Gf=n(y,"LI",{});var u4e=s(Gf);dee=n(u4e,"STRONG",{});var eqr=s(dee);uOe=r(eqr,"fsmt"),eqr.forEach(t),_Oe=r(u4e," \u2014 "),y$=n(u4e,"A",{href:!0});var oqr=s(y$);bOe=r(oqr,"FSMTConfig"),oqr.forEach(t),vOe=r(u4e," (FairSeq Machine-Translation model)"),u4e.forEach(t),FOe=i(y),Of=n(y,"LI",{});var _4e=s(Of);cee=n(_4e,"STRONG",{});var rqr=s(cee);TOe=r(rqr,"funnel"),rqr.forEach(t),MOe=r(_4e," \u2014 "),L$=n(_4e,"A",{href:!0});var tqr=s(L$);EOe=r(tqr,"FunnelConfig"),tqr.forEach(t),COe=r(_4e," (Funnel Transformer model)"),_4e.forEach(t),wOe=i(y),Vf=n(y,"LI",{});var b4e=s(Vf);fee=n(b4e,"STRONG",{});var aqr=s(fee);AOe=r(aqr,"glpn"),aqr.forEach(t),yOe=r(b4e," \u2014 "),x$=n(b4e,"A",{href:!0});var nqr=s(x$);LOe=r(nqr,"GLPNConfig"),nqr.forEach(t),xOe=r(b4e," (GLPN model)"),b4e.forEach(t),$Oe=i(y),Xf=n(y,"LI",{});var v4e=s(Xf);mee=n(v4e,"STRONG",{});var sqr=s(mee);kOe=r(sqr,"gpt2"),sqr.forEach(t),SOe=r(v4e," \u2014 "),$$=n(v4e,"A",{href:!0});var lqr=s($$);ROe=r(lqr,"GPT2Config"),lqr.forEach(t),BOe=r(v4e," (OpenAI GPT-2 model)"),v4e.forEach(t),POe=i(y),zf=n(y,"LI",{});var F4e=s(zf);gee=n(F4e,"STRONG",{});var iqr=s(gee);IOe=r(iqr,"gpt_neo"),iqr.forEach(t),qOe=r(F4e," \u2014 "),k$=n(F4e,"A",{href:!0});var dqr=s(k$);NOe=r(dqr,"GPTNeoConfig"),dqr.forEach(t),jOe=r(F4e," (GPT Neo model)"),F4e.forEach(t),DOe=i(y),Qf=n(y,"LI",{});var T4e=s(Qf);hee=n(T4e,"STRONG",{});var cqr=s(hee);GOe=r(cqr,"gptj"),cqr.forEach(t),OOe=r(T4e," \u2014 "),S$=n(T4e,"A",{href:!0});var fqr=s(S$);VOe=r(fqr,"GPTJConfig"),fqr.forEach(t),XOe=r(T4e," (GPT-J model)"),T4e.forEach(t),zOe=i(y),Wf=n(y,"LI",{});var M4e=s(Wf);pee=n(M4e,"STRONG",{});var mqr=s(pee);QOe=r(mqr,"hubert"),mqr.forEach(t),WOe=r(M4e," \u2014 "),R$=n(M4e,"A",{href:!0});var gqr=s(R$);HOe=r(gqr,"HubertConfig"),gqr.forEach(t),UOe=r(M4e," (Hubert model)"),M4e.forEach(t),JOe=i(y),Hf=n(y,"LI",{});var E4e=s(Hf);uee=n(E4e,"STRONG",{});var hqr=s(uee);YOe=r(hqr,"ibert"),hqr.forEach(t),KOe=r(E4e," \u2014 "),B$=n(E4e,"A",{href:!0});var pqr=s(B$);ZOe=r(pqr,"IBertConfig"),pqr.forEach(t),eVe=r(E4e," (I-BERT model)"),E4e.forEach(t),oVe=i(y),Uf=n(y,"LI",{});var C4e=s(Uf);_ee=n(C4e,"STRONG",{});var uqr=s(_ee);rVe=r(uqr,"imagegpt"),uqr.forEach(t),tVe=r(C4e," \u2014 "),P$=n(C4e,"A",{href:!0});var _qr=s(P$);aVe=r(_qr,"ImageGPTConfig"),_qr.forEach(t),nVe=r(C4e," (ImageGPT model)"),C4e.forEach(t),sVe=i(y),Jf=n(y,"LI",{});var w4e=s(Jf);bee=n(w4e,"STRONG",{});var bqr=s(bee);lVe=r(bqr,"layoutlm"),bqr.forEach(t),iVe=r(w4e," \u2014 "),I$=n(w4e,"A",{href:!0});var vqr=s(I$);dVe=r(vqr,"LayoutLMConfig"),vqr.forEach(t),cVe=r(w4e," (LayoutLM model)"),w4e.forEach(t),fVe=i(y),Yf=n(y,"LI",{});var A4e=s(Yf);vee=n(A4e,"STRONG",{});var Fqr=s(vee);mVe=r(Fqr,"layoutlmv2"),Fqr.forEach(t),gVe=r(A4e," \u2014 "),q$=n(A4e,"A",{href:!0});var Tqr=s(q$);hVe=r(Tqr,"LayoutLMv2Config"),Tqr.forEach(t),pVe=r(A4e," (LayoutLMv2 model)"),A4e.forEach(t),uVe=i(y),Kf=n(y,"LI",{});var y4e=s(Kf);Fee=n(y4e,"STRONG",{});var Mqr=s(Fee);_Ve=r(Mqr,"layoutlmv3"),Mqr.forEach(t),bVe=r(y4e," \u2014 "),N$=n(y4e,"A",{href:!0});var Eqr=s(N$);vVe=r(Eqr,"LayoutLMv3Config"),Eqr.forEach(t),FVe=r(y4e," (LayoutLMv3 model)"),y4e.forEach(t),TVe=i(y),Zf=n(y,"LI",{});var L4e=s(Zf);Tee=n(L4e,"STRONG",{});var Cqr=s(Tee);MVe=r(Cqr,"led"),Cqr.forEach(t),EVe=r(L4e," \u2014 "),j$=n(L4e,"A",{href:!0});var wqr=s(j$);CVe=r(wqr,"LEDConfig"),wqr.forEach(t),wVe=r(L4e," (LED model)"),L4e.forEach(t),AVe=i(y),em=n(y,"LI",{});var x4e=s(em);Mee=n(x4e,"STRONG",{});var Aqr=s(Mee);yVe=r(Aqr,"longformer"),Aqr.forEach(t),LVe=r(x4e," \u2014 "),D$=n(x4e,"A",{href:!0});var yqr=s(D$);xVe=r(yqr,"LongformerConfig"),yqr.forEach(t),$Ve=r(x4e," (Longformer model)"),x4e.forEach(t),kVe=i(y),om=n(y,"LI",{});var $4e=s(om);Eee=n($4e,"STRONG",{});var Lqr=s(Eee);SVe=r(Lqr,"luke"),Lqr.forEach(t),RVe=r($4e," \u2014 "),G$=n($4e,"A",{href:!0});var xqr=s(G$);BVe=r(xqr,"LukeConfig"),xqr.forEach(t),PVe=r($4e," (LUKE model)"),$4e.forEach(t),IVe=i(y),rm=n(y,"LI",{});var k4e=s(rm);Cee=n(k4e,"STRONG",{});var $qr=s(Cee);qVe=r($qr,"lxmert"),$qr.forEach(t),NVe=r(k4e," \u2014 "),O$=n(k4e,"A",{href:!0});var kqr=s(O$);jVe=r(kqr,"LxmertConfig"),kqr.forEach(t),DVe=r(k4e," (LXMERT model)"),k4e.forEach(t),GVe=i(y),tm=n(y,"LI",{});var S4e=s(tm);wee=n(S4e,"STRONG",{});var Sqr=s(wee);OVe=r(Sqr,"m2m_100"),Sqr.forEach(t),VVe=r(S4e," \u2014 "),V$=n(S4e,"A",{href:!0});var Rqr=s(V$);XVe=r(Rqr,"M2M100Config"),Rqr.forEach(t),zVe=r(S4e," (M2M100 model)"),S4e.forEach(t),QVe=i(y),am=n(y,"LI",{});var R4e=s(am);Aee=n(R4e,"STRONG",{});var Bqr=s(Aee);WVe=r(Bqr,"marian"),Bqr.forEach(t),HVe=r(R4e," \u2014 "),X$=n(R4e,"A",{href:!0});var Pqr=s(X$);UVe=r(Pqr,"MarianConfig"),Pqr.forEach(t),JVe=r(R4e," (Marian model)"),R4e.forEach(t),YVe=i(y),nm=n(y,"LI",{});var B4e=s(nm);yee=n(B4e,"STRONG",{});var Iqr=s(yee);KVe=r(Iqr,"maskformer"),Iqr.forEach(t),ZVe=r(B4e," \u2014 "),z$=n(B4e,"A",{href:!0});var qqr=s(z$);eXe=r(qqr,"MaskFormerConfig"),qqr.forEach(t),oXe=r(B4e," (MaskFormer model)"),B4e.forEach(t),rXe=i(y),sm=n(y,"LI",{});var P4e=s(sm);Lee=n(P4e,"STRONG",{});var Nqr=s(Lee);tXe=r(Nqr,"mbart"),Nqr.forEach(t),aXe=r(P4e," \u2014 "),Q$=n(P4e,"A",{href:!0});var jqr=s(Q$);nXe=r(jqr,"MBartConfig"),jqr.forEach(t),sXe=r(P4e," (mBART model)"),P4e.forEach(t),lXe=i(y),lm=n(y,"LI",{});var I4e=s(lm);xee=n(I4e,"STRONG",{});var Dqr=s(xee);iXe=r(Dqr,"megatron-bert"),Dqr.forEach(t),dXe=r(I4e," \u2014 "),W$=n(I4e,"A",{href:!0});var Gqr=s(W$);cXe=r(Gqr,"MegatronBertConfig"),Gqr.forEach(t),fXe=r(I4e," (MegatronBert model)"),I4e.forEach(t),mXe=i(y),im=n(y,"LI",{});var q4e=s(im);$ee=n(q4e,"STRONG",{});var Oqr=s($ee);gXe=r(Oqr,"mobilebert"),Oqr.forEach(t),hXe=r(q4e," \u2014 "),H$=n(q4e,"A",{href:!0});var Vqr=s(H$);pXe=r(Vqr,"MobileBertConfig"),Vqr.forEach(t),uXe=r(q4e," (MobileBERT model)"),q4e.forEach(t),_Xe=i(y),dm=n(y,"LI",{});var N4e=s(dm);kee=n(N4e,"STRONG",{});var Xqr=s(kee);bXe=r(Xqr,"mpnet"),Xqr.forEach(t),vXe=r(N4e," \u2014 "),U$=n(N4e,"A",{href:!0});var zqr=s(U$);FXe=r(zqr,"MPNetConfig"),zqr.forEach(t),TXe=r(N4e," (MPNet model)"),N4e.forEach(t),MXe=i(y),cm=n(y,"LI",{});var j4e=s(cm);See=n(j4e,"STRONG",{});var Qqr=s(See);EXe=r(Qqr,"mt5"),Qqr.forEach(t),CXe=r(j4e," \u2014 "),J$=n(j4e,"A",{href:!0});var Wqr=s(J$);wXe=r(Wqr,"MT5Config"),Wqr.forEach(t),AXe=r(j4e," (mT5 model)"),j4e.forEach(t),yXe=i(y),fm=n(y,"LI",{});var D4e=s(fm);Ree=n(D4e,"STRONG",{});var Hqr=s(Ree);LXe=r(Hqr,"nystromformer"),Hqr.forEach(t),xXe=r(D4e," \u2014 "),Y$=n(D4e,"A",{href:!0});var Uqr=s(Y$);$Xe=r(Uqr,"NystromformerConfig"),Uqr.forEach(t),kXe=r(D4e," (Nystromformer model)"),D4e.forEach(t),SXe=i(y),mm=n(y,"LI",{});var G4e=s(mm);Bee=n(G4e,"STRONG",{});var Jqr=s(Bee);RXe=r(Jqr,"openai-gpt"),Jqr.forEach(t),BXe=r(G4e," \u2014 "),K$=n(G4e,"A",{href:!0});var Yqr=s(K$);PXe=r(Yqr,"OpenAIGPTConfig"),Yqr.forEach(t),IXe=r(G4e," (OpenAI GPT model)"),G4e.forEach(t),qXe=i(y),gm=n(y,"LI",{});var O4e=s(gm);Pee=n(O4e,"STRONG",{});var Kqr=s(Pee);NXe=r(Kqr,"pegasus"),Kqr.forEach(t),jXe=r(O4e," \u2014 "),Z$=n(O4e,"A",{href:!0});var Zqr=s(Z$);DXe=r(Zqr,"PegasusConfig"),Zqr.forEach(t),GXe=r(O4e," (Pegasus model)"),O4e.forEach(t),OXe=i(y),hm=n(y,"LI",{});var V4e=s(hm);Iee=n(V4e,"STRONG",{});var eNr=s(Iee);VXe=r(eNr,"perceiver"),eNr.forEach(t),XXe=r(V4e," \u2014 "),ek=n(V4e,"A",{href:!0});var oNr=s(ek);zXe=r(oNr,"PerceiverConfig"),oNr.forEach(t),QXe=r(V4e," (Perceiver model)"),V4e.forEach(t),WXe=i(y),pm=n(y,"LI",{});var X4e=s(pm);qee=n(X4e,"STRONG",{});var rNr=s(qee);HXe=r(rNr,"plbart"),rNr.forEach(t),UXe=r(X4e," \u2014 "),ok=n(X4e,"A",{href:!0});var tNr=s(ok);JXe=r(tNr,"PLBartConfig"),tNr.forEach(t),YXe=r(X4e," (PLBart model)"),X4e.forEach(t),KXe=i(y),um=n(y,"LI",{});var z4e=s(um);Nee=n(z4e,"STRONG",{});var aNr=s(Nee);ZXe=r(aNr,"poolformer"),aNr.forEach(t),eze=r(z4e," \u2014 "),rk=n(z4e,"A",{href:!0});var nNr=s(rk);oze=r(nNr,"PoolFormerConfig"),nNr.forEach(t),rze=r(z4e," (PoolFormer model)"),z4e.forEach(t),tze=i(y),_m=n(y,"LI",{});var Q4e=s(_m);jee=n(Q4e,"STRONG",{});var sNr=s(jee);aze=r(sNr,"prophetnet"),sNr.forEach(t),nze=r(Q4e," \u2014 "),tk=n(Q4e,"A",{href:!0});var lNr=s(tk);sze=r(lNr,"ProphetNetConfig"),lNr.forEach(t),lze=r(Q4e," (ProphetNet model)"),Q4e.forEach(t),ize=i(y),bm=n(y,"LI",{});var W4e=s(bm);Dee=n(W4e,"STRONG",{});var iNr=s(Dee);dze=r(iNr,"qdqbert"),iNr.forEach(t),cze=r(W4e," \u2014 "),ak=n(W4e,"A",{href:!0});var dNr=s(ak);fze=r(dNr,"QDQBertConfig"),dNr.forEach(t),mze=r(W4e," (QDQBert model)"),W4e.forEach(t),gze=i(y),vm=n(y,"LI",{});var H4e=s(vm);Gee=n(H4e,"STRONG",{});var cNr=s(Gee);hze=r(cNr,"rag"),cNr.forEach(t),pze=r(H4e," \u2014 "),nk=n(H4e,"A",{href:!0});var fNr=s(nk);uze=r(fNr,"RagConfig"),fNr.forEach(t),_ze=r(H4e," (RAG model)"),H4e.forEach(t),bze=i(y),Fm=n(y,"LI",{});var U4e=s(Fm);Oee=n(U4e,"STRONG",{});var mNr=s(Oee);vze=r(mNr,"realm"),mNr.forEach(t),Fze=r(U4e," \u2014 "),sk=n(U4e,"A",{href:!0});var gNr=s(sk);Tze=r(gNr,"RealmConfig"),gNr.forEach(t),Mze=r(U4e," (Realm model)"),U4e.forEach(t),Eze=i(y),Tm=n(y,"LI",{});var J4e=s(Tm);Vee=n(J4e,"STRONG",{});var hNr=s(Vee);Cze=r(hNr,"reformer"),hNr.forEach(t),wze=r(J4e," \u2014 "),lk=n(J4e,"A",{href:!0});var pNr=s(lk);Aze=r(pNr,"ReformerConfig"),pNr.forEach(t),yze=r(J4e," (Reformer model)"),J4e.forEach(t),Lze=i(y),Mm=n(y,"LI",{});var Y4e=s(Mm);Xee=n(Y4e,"STRONG",{});var uNr=s(Xee);xze=r(uNr,"regnet"),uNr.forEach(t),$ze=r(Y4e," \u2014 "),ik=n(Y4e,"A",{href:!0});var _Nr=s(ik);kze=r(_Nr,"RegNetConfig"),_Nr.forEach(t),Sze=r(Y4e," (RegNet model)"),Y4e.forEach(t),Rze=i(y),Em=n(y,"LI",{});var K4e=s(Em);zee=n(K4e,"STRONG",{});var bNr=s(zee);Bze=r(bNr,"rembert"),bNr.forEach(t),Pze=r(K4e," \u2014 "),dk=n(K4e,"A",{href:!0});var vNr=s(dk);Ize=r(vNr,"RemBertConfig"),vNr.forEach(t),qze=r(K4e," (RemBERT model)"),K4e.forEach(t),Nze=i(y),Cm=n(y,"LI",{});var Z4e=s(Cm);Qee=n(Z4e,"STRONG",{});var FNr=s(Qee);jze=r(FNr,"resnet"),FNr.forEach(t),Dze=r(Z4e," \u2014 "),ck=n(Z4e,"A",{href:!0});var TNr=s(ck);Gze=r(TNr,"ResNetConfig"),TNr.forEach(t),Oze=r(Z4e," (ResNet model)"),Z4e.forEach(t),Vze=i(y),wm=n(y,"LI",{});var eEe=s(wm);Wee=n(eEe,"STRONG",{});var MNr=s(Wee);Xze=r(MNr,"retribert"),MNr.forEach(t),zze=r(eEe," \u2014 "),fk=n(eEe,"A",{href:!0});var ENr=s(fk);Qze=r(ENr,"RetriBertConfig"),ENr.forEach(t),Wze=r(eEe," (RetriBERT model)"),eEe.forEach(t),Hze=i(y),Am=n(y,"LI",{});var oEe=s(Am);Hee=n(oEe,"STRONG",{});var CNr=s(Hee);Uze=r(CNr,"roberta"),CNr.forEach(t),Jze=r(oEe," \u2014 "),mk=n(oEe,"A",{href:!0});var wNr=s(mk);Yze=r(wNr,"RobertaConfig"),wNr.forEach(t),Kze=r(oEe," (RoBERTa model)"),oEe.forEach(t),Zze=i(y),ym=n(y,"LI",{});var rEe=s(ym);Uee=n(rEe,"STRONG",{});var ANr=s(Uee);eQe=r(ANr,"roformer"),ANr.forEach(t),oQe=r(rEe," \u2014 "),gk=n(rEe,"A",{href:!0});var yNr=s(gk);rQe=r(yNr,"RoFormerConfig"),yNr.forEach(t),tQe=r(rEe," (RoFormer model)"),rEe.forEach(t),aQe=i(y),Lm=n(y,"LI",{});var tEe=s(Lm);Jee=n(tEe,"STRONG",{});var LNr=s(Jee);nQe=r(LNr,"segformer"),LNr.forEach(t),sQe=r(tEe," \u2014 "),hk=n(tEe,"A",{href:!0});var xNr=s(hk);lQe=r(xNr,"SegformerConfig"),xNr.forEach(t),iQe=r(tEe," (SegFormer model)"),tEe.forEach(t),dQe=i(y),xm=n(y,"LI",{});var aEe=s(xm);Yee=n(aEe,"STRONG",{});var $Nr=s(Yee);cQe=r($Nr,"sew"),$Nr.forEach(t),fQe=r(aEe," \u2014 "),pk=n(aEe,"A",{href:!0});var kNr=s(pk);mQe=r(kNr,"SEWConfig"),kNr.forEach(t),gQe=r(aEe," (SEW model)"),aEe.forEach(t),hQe=i(y),$m=n(y,"LI",{});var nEe=s($m);Kee=n(nEe,"STRONG",{});var SNr=s(Kee);pQe=r(SNr,"sew-d"),SNr.forEach(t),uQe=r(nEe," \u2014 "),uk=n(nEe,"A",{href:!0});var RNr=s(uk);_Qe=r(RNr,"SEWDConfig"),RNr.forEach(t),bQe=r(nEe," (SEW-D model)"),nEe.forEach(t),vQe=i(y),km=n(y,"LI",{});var sEe=s(km);Zee=n(sEe,"STRONG",{});var BNr=s(Zee);FQe=r(BNr,"speech-encoder-decoder"),BNr.forEach(t),TQe=r(sEe," \u2014 "),_k=n(sEe,"A",{href:!0});var PNr=s(_k);MQe=r(PNr,"SpeechEncoderDecoderConfig"),PNr.forEach(t),EQe=r(sEe," (Speech Encoder decoder model)"),sEe.forEach(t),CQe=i(y),Sm=n(y,"LI",{});var lEe=s(Sm);eoe=n(lEe,"STRONG",{});var INr=s(eoe);wQe=r(INr,"speech_to_text"),INr.forEach(t),AQe=r(lEe," \u2014 "),bk=n(lEe,"A",{href:!0});var qNr=s(bk);yQe=r(qNr,"Speech2TextConfig"),qNr.forEach(t),LQe=r(lEe," (Speech2Text model)"),lEe.forEach(t),xQe=i(y),Rm=n(y,"LI",{});var iEe=s(Rm);ooe=n(iEe,"STRONG",{});var NNr=s(ooe);$Qe=r(NNr,"speech_to_text_2"),NNr.forEach(t),kQe=r(iEe," \u2014 "),vk=n(iEe,"A",{href:!0});var jNr=s(vk);SQe=r(jNr,"Speech2Text2Config"),jNr.forEach(t),RQe=r(iEe," (Speech2Text2 model)"),iEe.forEach(t),BQe=i(y),Bm=n(y,"LI",{});var dEe=s(Bm);roe=n(dEe,"STRONG",{});var DNr=s(roe);PQe=r(DNr,"splinter"),DNr.forEach(t),IQe=r(dEe," \u2014 "),Fk=n(dEe,"A",{href:!0});var GNr=s(Fk);qQe=r(GNr,"SplinterConfig"),GNr.forEach(t),NQe=r(dEe," (Splinter model)"),dEe.forEach(t),jQe=i(y),Pm=n(y,"LI",{});var cEe=s(Pm);toe=n(cEe,"STRONG",{});var ONr=s(toe);DQe=r(ONr,"squeezebert"),ONr.forEach(t),GQe=r(cEe," \u2014 "),Tk=n(cEe,"A",{href:!0});var VNr=s(Tk);OQe=r(VNr,"SqueezeBertConfig"),VNr.forEach(t),VQe=r(cEe," (SqueezeBERT model)"),cEe.forEach(t),XQe=i(y),Im=n(y,"LI",{});var fEe=s(Im);aoe=n(fEe,"STRONG",{});var XNr=s(aoe);zQe=r(XNr,"swin"),XNr.forEach(t),QQe=r(fEe," \u2014 "),Mk=n(fEe,"A",{href:!0});var zNr=s(Mk);WQe=r(zNr,"SwinConfig"),zNr.forEach(t),HQe=r(fEe," (Swin model)"),fEe.forEach(t),UQe=i(y),qm=n(y,"LI",{});var mEe=s(qm);noe=n(mEe,"STRONG",{});var QNr=s(noe);JQe=r(QNr,"t5"),QNr.forEach(t),YQe=r(mEe," \u2014 "),Ek=n(mEe,"A",{href:!0});var WNr=s(Ek);KQe=r(WNr,"T5Config"),WNr.forEach(t),ZQe=r(mEe," (T5 model)"),mEe.forEach(t),eWe=i(y),Nm=n(y,"LI",{});var gEe=s(Nm);soe=n(gEe,"STRONG",{});var HNr=s(soe);oWe=r(HNr,"tapas"),HNr.forEach(t),rWe=r(gEe," \u2014 "),Ck=n(gEe,"A",{href:!0});var UNr=s(Ck);tWe=r(UNr,"TapasConfig"),UNr.forEach(t),aWe=r(gEe," (TAPAS model)"),gEe.forEach(t),nWe=i(y),jm=n(y,"LI",{});var hEe=s(jm);loe=n(hEe,"STRONG",{});var JNr=s(loe);sWe=r(JNr,"tapex"),JNr.forEach(t),lWe=r(hEe," \u2014 "),wk=n(hEe,"A",{href:!0});var YNr=s(wk);iWe=r(YNr,"BartConfig"),YNr.forEach(t),dWe=r(hEe," (TAPEX model)"),hEe.forEach(t),cWe=i(y),Dm=n(y,"LI",{});var pEe=s(Dm);ioe=n(pEe,"STRONG",{});var KNr=s(ioe);fWe=r(KNr,"transfo-xl"),KNr.forEach(t),mWe=r(pEe," \u2014 "),Ak=n(pEe,"A",{href:!0});var ZNr=s(Ak);gWe=r(ZNr,"TransfoXLConfig"),ZNr.forEach(t),hWe=r(pEe," (Transformer-XL model)"),pEe.forEach(t),pWe=i(y),Gm=n(y,"LI",{});var uEe=s(Gm);doe=n(uEe,"STRONG",{});var ejr=s(doe);uWe=r(ejr,"trocr"),ejr.forEach(t),_We=r(uEe," \u2014 "),yk=n(uEe,"A",{href:!0});var ojr=s(yk);bWe=r(ojr,"TrOCRConfig"),ojr.forEach(t),vWe=r(uEe," (TrOCR model)"),uEe.forEach(t),FWe=i(y),Om=n(y,"LI",{});var _Ee=s(Om);coe=n(_Ee,"STRONG",{});var rjr=s(coe);TWe=r(rjr,"unispeech"),rjr.forEach(t),MWe=r(_Ee," \u2014 "),Lk=n(_Ee,"A",{href:!0});var tjr=s(Lk);EWe=r(tjr,"UniSpeechConfig"),tjr.forEach(t),CWe=r(_Ee," (UniSpeech model)"),_Ee.forEach(t),wWe=i(y),Vm=n(y,"LI",{});var bEe=s(Vm);foe=n(bEe,"STRONG",{});var ajr=s(foe);AWe=r(ajr,"unispeech-sat"),ajr.forEach(t),yWe=r(bEe," \u2014 "),xk=n(bEe,"A",{href:!0});var njr=s(xk);LWe=r(njr,"UniSpeechSatConfig"),njr.forEach(t),xWe=r(bEe," (UniSpeechSat model)"),bEe.forEach(t),$We=i(y),Xm=n(y,"LI",{});var vEe=s(Xm);moe=n(vEe,"STRONG",{});var sjr=s(moe);kWe=r(sjr,"van"),sjr.forEach(t),SWe=r(vEe," \u2014 "),$k=n(vEe,"A",{href:!0});var ljr=s($k);RWe=r(ljr,"VanConfig"),ljr.forEach(t),BWe=r(vEe," (VAN model)"),vEe.forEach(t),PWe=i(y),zm=n(y,"LI",{});var FEe=s(zm);goe=n(FEe,"STRONG",{});var ijr=s(goe);IWe=r(ijr,"vilt"),ijr.forEach(t),qWe=r(FEe," \u2014 "),kk=n(FEe,"A",{href:!0});var djr=s(kk);NWe=r(djr,"ViltConfig"),djr.forEach(t),jWe=r(FEe," (ViLT model)"),FEe.forEach(t),DWe=i(y),Qm=n(y,"LI",{});var TEe=s(Qm);hoe=n(TEe,"STRONG",{});var cjr=s(hoe);GWe=r(cjr,"vision-encoder-decoder"),cjr.forEach(t),OWe=r(TEe," \u2014 "),Sk=n(TEe,"A",{href:!0});var fjr=s(Sk);VWe=r(fjr,"VisionEncoderDecoderConfig"),fjr.forEach(t),XWe=r(TEe," (Vision Encoder decoder model)"),TEe.forEach(t),zWe=i(y),Wm=n(y,"LI",{});var MEe=s(Wm);poe=n(MEe,"STRONG",{});var mjr=s(poe);QWe=r(mjr,"vision-text-dual-encoder"),mjr.forEach(t),WWe=r(MEe," \u2014 "),Rk=n(MEe,"A",{href:!0});var gjr=s(Rk);HWe=r(gjr,"VisionTextDualEncoderConfig"),gjr.forEach(t),UWe=r(MEe," (VisionTextDualEncoder model)"),MEe.forEach(t),JWe=i(y),Hm=n(y,"LI",{});var EEe=s(Hm);uoe=n(EEe,"STRONG",{});var hjr=s(uoe);YWe=r(hjr,"visual_bert"),hjr.forEach(t),KWe=r(EEe," \u2014 "),Bk=n(EEe,"A",{href:!0});var pjr=s(Bk);ZWe=r(pjr,"VisualBertConfig"),pjr.forEach(t),eHe=r(EEe," (VisualBert model)"),EEe.forEach(t),oHe=i(y),Um=n(y,"LI",{});var CEe=s(Um);_oe=n(CEe,"STRONG",{});var ujr=s(_oe);rHe=r(ujr,"vit"),ujr.forEach(t),tHe=r(CEe," \u2014 "),Pk=n(CEe,"A",{href:!0});var _jr=s(Pk);aHe=r(_jr,"ViTConfig"),_jr.forEach(t),nHe=r(CEe," (ViT model)"),CEe.forEach(t),sHe=i(y),Jm=n(y,"LI",{});var wEe=s(Jm);boe=n(wEe,"STRONG",{});var bjr=s(boe);lHe=r(bjr,"vit_mae"),bjr.forEach(t),iHe=r(wEe," \u2014 "),Ik=n(wEe,"A",{href:!0});var vjr=s(Ik);dHe=r(vjr,"ViTMAEConfig"),vjr.forEach(t),cHe=r(wEe," (ViTMAE model)"),wEe.forEach(t),fHe=i(y),Ym=n(y,"LI",{});var AEe=s(Ym);voe=n(AEe,"STRONG",{});var Fjr=s(voe);mHe=r(Fjr,"wav2vec2"),Fjr.forEach(t),gHe=r(AEe," \u2014 "),qk=n(AEe,"A",{href:!0});var Tjr=s(qk);hHe=r(Tjr,"Wav2Vec2Config"),Tjr.forEach(t),pHe=r(AEe," (Wav2Vec2 model)"),AEe.forEach(t),uHe=i(y),Km=n(y,"LI",{});var yEe=s(Km);Foe=n(yEe,"STRONG",{});var Mjr=s(Foe);_He=r(Mjr,"wavlm"),Mjr.forEach(t),bHe=r(yEe," \u2014 "),Nk=n(yEe,"A",{href:!0});var Ejr=s(Nk);vHe=r(Ejr,"WavLMConfig"),Ejr.forEach(t),FHe=r(yEe," (WavLM model)"),yEe.forEach(t),THe=i(y),Zm=n(y,"LI",{});var LEe=s(Zm);Toe=n(LEe,"STRONG",{});var Cjr=s(Toe);MHe=r(Cjr,"xglm"),Cjr.forEach(t),EHe=r(LEe," \u2014 "),jk=n(LEe,"A",{href:!0});var wjr=s(jk);CHe=r(wjr,"XGLMConfig"),wjr.forEach(t),wHe=r(LEe," (XGLM model)"),LEe.forEach(t),AHe=i(y),eg=n(y,"LI",{});var xEe=s(eg);Moe=n(xEe,"STRONG",{});var Ajr=s(Moe);yHe=r(Ajr,"xlm"),Ajr.forEach(t),LHe=r(xEe," \u2014 "),Dk=n(xEe,"A",{href:!0});var yjr=s(Dk);xHe=r(yjr,"XLMConfig"),yjr.forEach(t),$He=r(xEe," (XLM model)"),xEe.forEach(t),kHe=i(y),og=n(y,"LI",{});var $Ee=s(og);Eoe=n($Ee,"STRONG",{});var Ljr=s(Eoe);SHe=r(Ljr,"xlm-prophetnet"),Ljr.forEach(t),RHe=r($Ee," \u2014 "),Gk=n($Ee,"A",{href:!0});var xjr=s(Gk);BHe=r(xjr,"XLMProphetNetConfig"),xjr.forEach(t),PHe=r($Ee," (XLMProphetNet model)"),$Ee.forEach(t),IHe=i(y),rg=n(y,"LI",{});var kEe=s(rg);Coe=n(kEe,"STRONG",{});var $jr=s(Coe);qHe=r($jr,"xlm-roberta"),$jr.forEach(t),NHe=r(kEe," \u2014 "),Ok=n(kEe,"A",{href:!0});var kjr=s(Ok);jHe=r(kjr,"XLMRobertaConfig"),kjr.forEach(t),DHe=r(kEe," (XLM-RoBERTa model)"),kEe.forEach(t),GHe=i(y),tg=n(y,"LI",{});var SEe=s(tg);woe=n(SEe,"STRONG",{});var Sjr=s(woe);OHe=r(Sjr,"xlm-roberta-xl"),Sjr.forEach(t),VHe=r(SEe," \u2014 "),Vk=n(SEe,"A",{href:!0});var Rjr=s(Vk);XHe=r(Rjr,"XLMRobertaXLConfig"),Rjr.forEach(t),zHe=r(SEe," (XLM-RoBERTa-XL model)"),SEe.forEach(t),QHe=i(y),ag=n(y,"LI",{});var REe=s(ag);Aoe=n(REe,"STRONG",{});var Bjr=s(Aoe);WHe=r(Bjr,"xlnet"),Bjr.forEach(t),HHe=r(REe," \u2014 "),Xk=n(REe,"A",{href:!0});var Pjr=s(Xk);UHe=r(Pjr,"XLNetConfig"),Pjr.forEach(t),JHe=r(REe," (XLNet model)"),REe.forEach(t),YHe=i(y),ng=n(y,"LI",{});var BEe=s(ng);yoe=n(BEe,"STRONG",{});var Ijr=s(yoe);KHe=r(Ijr,"yolos"),Ijr.forEach(t),ZHe=r(BEe," \u2014 "),zk=n(BEe,"A",{href:!0});var qjr=s(zk);eUe=r(qjr,"YolosConfig"),qjr.forEach(t),oUe=r(BEe," (YOLOS model)"),BEe.forEach(t),rUe=i(y),sg=n(y,"LI",{});var PEe=s(sg);Loe=n(PEe,"STRONG",{});var Njr=s(Loe);tUe=r(Njr,"yoso"),Njr.forEach(t),aUe=r(PEe," \u2014 "),Qk=n(PEe,"A",{href:!0});var jjr=s(Qk);nUe=r(jjr,"YosoConfig"),jjr.forEach(t),sUe=r(PEe," (YOSO model)"),PEe.forEach(t),y.forEach(t),lUe=i(Yr),T(lg.$$.fragment,Yr),Yr.forEach(t),iUe=i(Jr),ig=n(Jr,"DIV",{class:!0});var UIe=s(ig);T(jw.$$.fragment,UIe),dUe=i(UIe),xoe=n(UIe,"P",{});var Djr=s(xoe);cUe=r(Djr,"Register a new configuration for this class."),Djr.forEach(t),UIe.forEach(t),Jr.forEach(t),ePe=i(f),mi=n(f,"H2",{class:!0});var JIe=s(mi);dg=n(JIe,"A",{id:!0,class:!0,href:!0});var Gjr=s(dg);$oe=n(Gjr,"SPAN",{});var Ojr=s($oe);T(Dw.$$.fragment,Ojr),Ojr.forEach(t),Gjr.forEach(t),fUe=i(JIe),koe=n(JIe,"SPAN",{});var Vjr=s(koe);mUe=r(Vjr,"AutoTokenizer"),Vjr.forEach(t),JIe.forEach(t),oPe=i(f),wo=n(f,"DIV",{class:!0});var Ss=s(wo);T(Gw.$$.fragment,Ss),gUe=i(Ss),Ow=n(Ss,"P",{});var YIe=s(Ow);hUe=r(YIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Wk=n(YIe,"A",{href:!0});var Xjr=s(Wk);pUe=r(Xjr,"AutoTokenizer.from_pretrained()"),Xjr.forEach(t),uUe=r(YIe," class method."),YIe.forEach(t),_Ue=i(Ss),Vw=n(Ss,"P",{});var KIe=s(Vw);bUe=r(KIe,"This class cannot be instantiated directly using "),Soe=n(KIe,"CODE",{});var zjr=s(Soe);vUe=r(zjr,"__init__()"),zjr.forEach(t),FUe=r(KIe," (throws an error)."),KIe.forEach(t),TUe=i(Ss),Er=n(Ss,"DIV",{class:!0});var Rs=s(Er);T(Xw.$$.fragment,Rs),MUe=i(Rs),Roe=n(Rs,"P",{});var Qjr=s(Roe);EUe=r(Qjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Qjr.forEach(t),CUe=i(Rs),Ta=n(Rs,"P",{});var PC=s(Ta);wUe=r(PC,"The tokenizer class to instantiate is selected based on the "),Boe=n(PC,"CODE",{});var Wjr=s(Boe);AUe=r(Wjr,"model_type"),Wjr.forEach(t),yUe=r(PC,` property of the config object (either
passed as an argument or loaded from `),Poe=n(PC,"CODE",{});var Hjr=s(Poe);LUe=r(Hjr,"pretrained_model_name_or_path"),Hjr.forEach(t),xUe=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=n(PC,"CODE",{});var Ujr=s(Ioe);$Ue=r(Ujr,"pretrained_model_name_or_path"),Ujr.forEach(t),kUe=r(PC,":"),PC.forEach(t),SUe=i(Rs),k=n(Rs,"UL",{});var S=s(k);yn=n(S,"LI",{});var jx=s(yn);qoe=n(jx,"STRONG",{});var Jjr=s(qoe);RUe=r(Jjr,"albert"),Jjr.forEach(t),BUe=r(jx," \u2014 "),Hk=n(jx,"A",{href:!0});var Yjr=s(Hk);PUe=r(Yjr,"AlbertTokenizer"),Yjr.forEach(t),IUe=r(jx," or "),Uk=n(jx,"A",{href:!0});var Kjr=s(Uk);qUe=r(Kjr,"AlbertTokenizerFast"),Kjr.forEach(t),NUe=r(jx," (ALBERT model)"),jx.forEach(t),jUe=i(S),Ln=n(S,"LI",{});var Dx=s(Ln);Noe=n(Dx,"STRONG",{});var Zjr=s(Noe);DUe=r(Zjr,"bart"),Zjr.forEach(t),GUe=r(Dx," \u2014 "),Jk=n(Dx,"A",{href:!0});var eDr=s(Jk);OUe=r(eDr,"BartTokenizer"),eDr.forEach(t),VUe=r(Dx," or "),Yk=n(Dx,"A",{href:!0});var oDr=s(Yk);XUe=r(oDr,"BartTokenizerFast"),oDr.forEach(t),zUe=r(Dx," (BART model)"),Dx.forEach(t),QUe=i(S),xn=n(S,"LI",{});var Gx=s(xn);joe=n(Gx,"STRONG",{});var rDr=s(joe);WUe=r(rDr,"barthez"),rDr.forEach(t),HUe=r(Gx," \u2014 "),Kk=n(Gx,"A",{href:!0});var tDr=s(Kk);UUe=r(tDr,"BarthezTokenizer"),tDr.forEach(t),JUe=r(Gx," or "),Zk=n(Gx,"A",{href:!0});var aDr=s(Zk);YUe=r(aDr,"BarthezTokenizerFast"),aDr.forEach(t),KUe=r(Gx," (BARThez model)"),Gx.forEach(t),ZUe=i(S),cg=n(S,"LI",{});var IEe=s(cg);Doe=n(IEe,"STRONG",{});var nDr=s(Doe);eJe=r(nDr,"bartpho"),nDr.forEach(t),oJe=r(IEe," \u2014 "),eS=n(IEe,"A",{href:!0});var sDr=s(eS);rJe=r(sDr,"BartphoTokenizer"),sDr.forEach(t),tJe=r(IEe," (BARTpho model)"),IEe.forEach(t),aJe=i(S),$n=n(S,"LI",{});var Ox=s($n);Goe=n(Ox,"STRONG",{});var lDr=s(Goe);nJe=r(lDr,"bert"),lDr.forEach(t),sJe=r(Ox," \u2014 "),oS=n(Ox,"A",{href:!0});var iDr=s(oS);lJe=r(iDr,"BertTokenizer"),iDr.forEach(t),iJe=r(Ox," or "),rS=n(Ox,"A",{href:!0});var dDr=s(rS);dJe=r(dDr,"BertTokenizerFast"),dDr.forEach(t),cJe=r(Ox," (BERT model)"),Ox.forEach(t),fJe=i(S),fg=n(S,"LI",{});var qEe=s(fg);Ooe=n(qEe,"STRONG",{});var cDr=s(Ooe);mJe=r(cDr,"bert-generation"),cDr.forEach(t),gJe=r(qEe," \u2014 "),tS=n(qEe,"A",{href:!0});var fDr=s(tS);hJe=r(fDr,"BertGenerationTokenizer"),fDr.forEach(t),pJe=r(qEe," (Bert Generation model)"),qEe.forEach(t),uJe=i(S),mg=n(S,"LI",{});var NEe=s(mg);Voe=n(NEe,"STRONG",{});var mDr=s(Voe);_Je=r(mDr,"bert-japanese"),mDr.forEach(t),bJe=r(NEe," \u2014 "),aS=n(NEe,"A",{href:!0});var gDr=s(aS);vJe=r(gDr,"BertJapaneseTokenizer"),gDr.forEach(t),FJe=r(NEe," (BertJapanese model)"),NEe.forEach(t),TJe=i(S),gg=n(S,"LI",{});var jEe=s(gg);Xoe=n(jEe,"STRONG",{});var hDr=s(Xoe);MJe=r(hDr,"bertweet"),hDr.forEach(t),EJe=r(jEe," \u2014 "),nS=n(jEe,"A",{href:!0});var pDr=s(nS);CJe=r(pDr,"BertweetTokenizer"),pDr.forEach(t),wJe=r(jEe," (Bertweet model)"),jEe.forEach(t),AJe=i(S),kn=n(S,"LI",{});var Vx=s(kn);zoe=n(Vx,"STRONG",{});var uDr=s(zoe);yJe=r(uDr,"big_bird"),uDr.forEach(t),LJe=r(Vx," \u2014 "),sS=n(Vx,"A",{href:!0});var _Dr=s(sS);xJe=r(_Dr,"BigBirdTokenizer"),_Dr.forEach(t),$Je=r(Vx," or "),lS=n(Vx,"A",{href:!0});var bDr=s(lS);kJe=r(bDr,"BigBirdTokenizerFast"),bDr.forEach(t),SJe=r(Vx," (BigBird model)"),Vx.forEach(t),RJe=i(S),Sn=n(S,"LI",{});var Xx=s(Sn);Qoe=n(Xx,"STRONG",{});var vDr=s(Qoe);BJe=r(vDr,"bigbird_pegasus"),vDr.forEach(t),PJe=r(Xx," \u2014 "),iS=n(Xx,"A",{href:!0});var FDr=s(iS);IJe=r(FDr,"PegasusTokenizer"),FDr.forEach(t),qJe=r(Xx," or "),dS=n(Xx,"A",{href:!0});var TDr=s(dS);NJe=r(TDr,"PegasusTokenizerFast"),TDr.forEach(t),jJe=r(Xx," (BigBirdPegasus model)"),Xx.forEach(t),DJe=i(S),Rn=n(S,"LI",{});var zx=s(Rn);Woe=n(zx,"STRONG",{});var MDr=s(Woe);GJe=r(MDr,"blenderbot"),MDr.forEach(t),OJe=r(zx," \u2014 "),cS=n(zx,"A",{href:!0});var EDr=s(cS);VJe=r(EDr,"BlenderbotTokenizer"),EDr.forEach(t),XJe=r(zx," or "),fS=n(zx,"A",{href:!0});var CDr=s(fS);zJe=r(CDr,"BlenderbotTokenizerFast"),CDr.forEach(t),QJe=r(zx," (Blenderbot model)"),zx.forEach(t),WJe=i(S),hg=n(S,"LI",{});var DEe=s(hg);Hoe=n(DEe,"STRONG",{});var wDr=s(Hoe);HJe=r(wDr,"blenderbot-small"),wDr.forEach(t),UJe=r(DEe," \u2014 "),mS=n(DEe,"A",{href:!0});var ADr=s(mS);JJe=r(ADr,"BlenderbotSmallTokenizer"),ADr.forEach(t),YJe=r(DEe," (BlenderbotSmall model)"),DEe.forEach(t),KJe=i(S),pg=n(S,"LI",{});var GEe=s(pg);Uoe=n(GEe,"STRONG",{});var yDr=s(Uoe);ZJe=r(yDr,"byt5"),yDr.forEach(t),eYe=r(GEe," \u2014 "),gS=n(GEe,"A",{href:!0});var LDr=s(gS);oYe=r(LDr,"ByT5Tokenizer"),LDr.forEach(t),rYe=r(GEe," (ByT5 model)"),GEe.forEach(t),tYe=i(S),Bn=n(S,"LI",{});var Qx=s(Bn);Joe=n(Qx,"STRONG",{});var xDr=s(Joe);aYe=r(xDr,"camembert"),xDr.forEach(t),nYe=r(Qx," \u2014 "),hS=n(Qx,"A",{href:!0});var $Dr=s(hS);sYe=r($Dr,"CamembertTokenizer"),$Dr.forEach(t),lYe=r(Qx," or "),pS=n(Qx,"A",{href:!0});var kDr=s(pS);iYe=r(kDr,"CamembertTokenizerFast"),kDr.forEach(t),dYe=r(Qx," (CamemBERT model)"),Qx.forEach(t),cYe=i(S),ug=n(S,"LI",{});var OEe=s(ug);Yoe=n(OEe,"STRONG",{});var SDr=s(Yoe);fYe=r(SDr,"canine"),SDr.forEach(t),mYe=r(OEe," \u2014 "),uS=n(OEe,"A",{href:!0});var RDr=s(uS);gYe=r(RDr,"CanineTokenizer"),RDr.forEach(t),hYe=r(OEe," (Canine model)"),OEe.forEach(t),pYe=i(S),Pn=n(S,"LI",{});var Wx=s(Pn);Koe=n(Wx,"STRONG",{});var BDr=s(Koe);uYe=r(BDr,"clip"),BDr.forEach(t),_Ye=r(Wx," \u2014 "),_S=n(Wx,"A",{href:!0});var PDr=s(_S);bYe=r(PDr,"CLIPTokenizer"),PDr.forEach(t),vYe=r(Wx," or "),bS=n(Wx,"A",{href:!0});var IDr=s(bS);FYe=r(IDr,"CLIPTokenizerFast"),IDr.forEach(t),TYe=r(Wx," (CLIP model)"),Wx.forEach(t),MYe=i(S),In=n(S,"LI",{});var Hx=s(In);Zoe=n(Hx,"STRONG",{});var qDr=s(Zoe);EYe=r(qDr,"convbert"),qDr.forEach(t),CYe=r(Hx," \u2014 "),vS=n(Hx,"A",{href:!0});var NDr=s(vS);wYe=r(NDr,"ConvBertTokenizer"),NDr.forEach(t),AYe=r(Hx," or "),FS=n(Hx,"A",{href:!0});var jDr=s(FS);yYe=r(jDr,"ConvBertTokenizerFast"),jDr.forEach(t),LYe=r(Hx," (ConvBERT model)"),Hx.forEach(t),xYe=i(S),qn=n(S,"LI",{});var Ux=s(qn);ere=n(Ux,"STRONG",{});var DDr=s(ere);$Ye=r(DDr,"cpm"),DDr.forEach(t),kYe=r(Ux," \u2014 "),TS=n(Ux,"A",{href:!0});var GDr=s(TS);SYe=r(GDr,"CpmTokenizer"),GDr.forEach(t),RYe=r(Ux," or "),MS=n(Ux,"A",{href:!0});var ODr=s(MS);BYe=r(ODr,"CpmTokenizerFast"),ODr.forEach(t),PYe=r(Ux," (CPM model)"),Ux.forEach(t),IYe=i(S),_g=n(S,"LI",{});var VEe=s(_g);ore=n(VEe,"STRONG",{});var VDr=s(ore);qYe=r(VDr,"ctrl"),VDr.forEach(t),NYe=r(VEe," \u2014 "),ES=n(VEe,"A",{href:!0});var XDr=s(ES);jYe=r(XDr,"CTRLTokenizer"),XDr.forEach(t),DYe=r(VEe," (CTRL model)"),VEe.forEach(t),GYe=i(S),Nn=n(S,"LI",{});var Jx=s(Nn);rre=n(Jx,"STRONG",{});var zDr=s(rre);OYe=r(zDr,"data2vec-text"),zDr.forEach(t),VYe=r(Jx," \u2014 "),CS=n(Jx,"A",{href:!0});var QDr=s(CS);XYe=r(QDr,"RobertaTokenizer"),QDr.forEach(t),zYe=r(Jx," or "),wS=n(Jx,"A",{href:!0});var WDr=s(wS);QYe=r(WDr,"RobertaTokenizerFast"),WDr.forEach(t),WYe=r(Jx," (Data2VecText model)"),Jx.forEach(t),HYe=i(S),jn=n(S,"LI",{});var Yx=s(jn);tre=n(Yx,"STRONG",{});var HDr=s(tre);UYe=r(HDr,"deberta"),HDr.forEach(t),JYe=r(Yx," \u2014 "),AS=n(Yx,"A",{href:!0});var UDr=s(AS);YYe=r(UDr,"DebertaTokenizer"),UDr.forEach(t),KYe=r(Yx," or "),yS=n(Yx,"A",{href:!0});var JDr=s(yS);ZYe=r(JDr,"DebertaTokenizerFast"),JDr.forEach(t),eKe=r(Yx," (DeBERTa model)"),Yx.forEach(t),oKe=i(S),Dn=n(S,"LI",{});var Kx=s(Dn);are=n(Kx,"STRONG",{});var YDr=s(are);rKe=r(YDr,"deberta-v2"),YDr.forEach(t),tKe=r(Kx," \u2014 "),LS=n(Kx,"A",{href:!0});var KDr=s(LS);aKe=r(KDr,"DebertaV2Tokenizer"),KDr.forEach(t),nKe=r(Kx," or "),xS=n(Kx,"A",{href:!0});var ZDr=s(xS);sKe=r(ZDr,"DebertaV2TokenizerFast"),ZDr.forEach(t),lKe=r(Kx," (DeBERTa-v2 model)"),Kx.forEach(t),iKe=i(S),Gn=n(S,"LI",{});var Zx=s(Gn);nre=n(Zx,"STRONG",{});var eGr=s(nre);dKe=r(eGr,"distilbert"),eGr.forEach(t),cKe=r(Zx," \u2014 "),$S=n(Zx,"A",{href:!0});var oGr=s($S);fKe=r(oGr,"DistilBertTokenizer"),oGr.forEach(t),mKe=r(Zx," or "),kS=n(Zx,"A",{href:!0});var rGr=s(kS);gKe=r(rGr,"DistilBertTokenizerFast"),rGr.forEach(t),hKe=r(Zx," (DistilBERT model)"),Zx.forEach(t),pKe=i(S),On=n(S,"LI",{});var e9=s(On);sre=n(e9,"STRONG",{});var tGr=s(sre);uKe=r(tGr,"dpr"),tGr.forEach(t),_Ke=r(e9," \u2014 "),SS=n(e9,"A",{href:!0});var aGr=s(SS);bKe=r(aGr,"DPRQuestionEncoderTokenizer"),aGr.forEach(t),vKe=r(e9," or "),RS=n(e9,"A",{href:!0});var nGr=s(RS);FKe=r(nGr,"DPRQuestionEncoderTokenizerFast"),nGr.forEach(t),TKe=r(e9," (DPR model)"),e9.forEach(t),MKe=i(S),Vn=n(S,"LI",{});var o9=s(Vn);lre=n(o9,"STRONG",{});var sGr=s(lre);EKe=r(sGr,"electra"),sGr.forEach(t),CKe=r(o9," \u2014 "),BS=n(o9,"A",{href:!0});var lGr=s(BS);wKe=r(lGr,"ElectraTokenizer"),lGr.forEach(t),AKe=r(o9," or "),PS=n(o9,"A",{href:!0});var iGr=s(PS);yKe=r(iGr,"ElectraTokenizerFast"),iGr.forEach(t),LKe=r(o9," (ELECTRA model)"),o9.forEach(t),xKe=i(S),bg=n(S,"LI",{});var XEe=s(bg);ire=n(XEe,"STRONG",{});var dGr=s(ire);$Ke=r(dGr,"flaubert"),dGr.forEach(t),kKe=r(XEe," \u2014 "),IS=n(XEe,"A",{href:!0});var cGr=s(IS);SKe=r(cGr,"FlaubertTokenizer"),cGr.forEach(t),RKe=r(XEe," (FlauBERT model)"),XEe.forEach(t),BKe=i(S),Xn=n(S,"LI",{});var r9=s(Xn);dre=n(r9,"STRONG",{});var fGr=s(dre);PKe=r(fGr,"fnet"),fGr.forEach(t),IKe=r(r9," \u2014 "),qS=n(r9,"A",{href:!0});var mGr=s(qS);qKe=r(mGr,"FNetTokenizer"),mGr.forEach(t),NKe=r(r9," or "),NS=n(r9,"A",{href:!0});var gGr=s(NS);jKe=r(gGr,"FNetTokenizerFast"),gGr.forEach(t),DKe=r(r9," (FNet model)"),r9.forEach(t),GKe=i(S),vg=n(S,"LI",{});var zEe=s(vg);cre=n(zEe,"STRONG",{});var hGr=s(cre);OKe=r(hGr,"fsmt"),hGr.forEach(t),VKe=r(zEe," \u2014 "),jS=n(zEe,"A",{href:!0});var pGr=s(jS);XKe=r(pGr,"FSMTTokenizer"),pGr.forEach(t),zKe=r(zEe," (FairSeq Machine-Translation model)"),zEe.forEach(t),QKe=i(S),zn=n(S,"LI",{});var t9=s(zn);fre=n(t9,"STRONG",{});var uGr=s(fre);WKe=r(uGr,"funnel"),uGr.forEach(t),HKe=r(t9," \u2014 "),DS=n(t9,"A",{href:!0});var _Gr=s(DS);UKe=r(_Gr,"FunnelTokenizer"),_Gr.forEach(t),JKe=r(t9," or "),GS=n(t9,"A",{href:!0});var bGr=s(GS);YKe=r(bGr,"FunnelTokenizerFast"),bGr.forEach(t),KKe=r(t9," (Funnel Transformer model)"),t9.forEach(t),ZKe=i(S),Qn=n(S,"LI",{});var a9=s(Qn);mre=n(a9,"STRONG",{});var vGr=s(mre);eZe=r(vGr,"gpt2"),vGr.forEach(t),oZe=r(a9," \u2014 "),OS=n(a9,"A",{href:!0});var FGr=s(OS);rZe=r(FGr,"GPT2Tokenizer"),FGr.forEach(t),tZe=r(a9," or "),VS=n(a9,"A",{href:!0});var TGr=s(VS);aZe=r(TGr,"GPT2TokenizerFast"),TGr.forEach(t),nZe=r(a9," (OpenAI GPT-2 model)"),a9.forEach(t),sZe=i(S),Wn=n(S,"LI",{});var n9=s(Wn);gre=n(n9,"STRONG",{});var MGr=s(gre);lZe=r(MGr,"gpt_neo"),MGr.forEach(t),iZe=r(n9," \u2014 "),XS=n(n9,"A",{href:!0});var EGr=s(XS);dZe=r(EGr,"GPT2Tokenizer"),EGr.forEach(t),cZe=r(n9," or "),zS=n(n9,"A",{href:!0});var CGr=s(zS);fZe=r(CGr,"GPT2TokenizerFast"),CGr.forEach(t),mZe=r(n9," (GPT Neo model)"),n9.forEach(t),gZe=i(S),Hn=n(S,"LI",{});var s9=s(Hn);hre=n(s9,"STRONG",{});var wGr=s(hre);hZe=r(wGr,"gptj"),wGr.forEach(t),pZe=r(s9," \u2014 "),QS=n(s9,"A",{href:!0});var AGr=s(QS);uZe=r(AGr,"GPT2Tokenizer"),AGr.forEach(t),_Ze=r(s9," or "),WS=n(s9,"A",{href:!0});var yGr=s(WS);bZe=r(yGr,"GPT2TokenizerFast"),yGr.forEach(t),vZe=r(s9," (GPT-J model)"),s9.forEach(t),FZe=i(S),Un=n(S,"LI",{});var l9=s(Un);pre=n(l9,"STRONG",{});var LGr=s(pre);TZe=r(LGr,"herbert"),LGr.forEach(t),MZe=r(l9," \u2014 "),HS=n(l9,"A",{href:!0});var xGr=s(HS);EZe=r(xGr,"HerbertTokenizer"),xGr.forEach(t),CZe=r(l9," or "),US=n(l9,"A",{href:!0});var $Gr=s(US);wZe=r($Gr,"HerbertTokenizerFast"),$Gr.forEach(t),AZe=r(l9," (HerBERT model)"),l9.forEach(t),yZe=i(S),Fg=n(S,"LI",{});var QEe=s(Fg);ure=n(QEe,"STRONG",{});var kGr=s(ure);LZe=r(kGr,"hubert"),kGr.forEach(t),xZe=r(QEe," \u2014 "),JS=n(QEe,"A",{href:!0});var SGr=s(JS);$Ze=r(SGr,"Wav2Vec2CTCTokenizer"),SGr.forEach(t),kZe=r(QEe," (Hubert model)"),QEe.forEach(t),SZe=i(S),Jn=n(S,"LI",{});var i9=s(Jn);_re=n(i9,"STRONG",{});var RGr=s(_re);RZe=r(RGr,"ibert"),RGr.forEach(t),BZe=r(i9," \u2014 "),YS=n(i9,"A",{href:!0});var BGr=s(YS);PZe=r(BGr,"RobertaTokenizer"),BGr.forEach(t),IZe=r(i9," or "),KS=n(i9,"A",{href:!0});var PGr=s(KS);qZe=r(PGr,"RobertaTokenizerFast"),PGr.forEach(t),NZe=r(i9," (I-BERT model)"),i9.forEach(t),jZe=i(S),Yn=n(S,"LI",{});var d9=s(Yn);bre=n(d9,"STRONG",{});var IGr=s(bre);DZe=r(IGr,"layoutlm"),IGr.forEach(t),GZe=r(d9," \u2014 "),ZS=n(d9,"A",{href:!0});var qGr=s(ZS);OZe=r(qGr,"LayoutLMTokenizer"),qGr.forEach(t),VZe=r(d9," or "),eR=n(d9,"A",{href:!0});var NGr=s(eR);XZe=r(NGr,"LayoutLMTokenizerFast"),NGr.forEach(t),zZe=r(d9," (LayoutLM model)"),d9.forEach(t),QZe=i(S),Kn=n(S,"LI",{});var c9=s(Kn);vre=n(c9,"STRONG",{});var jGr=s(vre);WZe=r(jGr,"layoutlmv2"),jGr.forEach(t),HZe=r(c9," \u2014 "),oR=n(c9,"A",{href:!0});var DGr=s(oR);UZe=r(DGr,"LayoutLMv2Tokenizer"),DGr.forEach(t),JZe=r(c9," or "),rR=n(c9,"A",{href:!0});var GGr=s(rR);YZe=r(GGr,"LayoutLMv2TokenizerFast"),GGr.forEach(t),KZe=r(c9," (LayoutLMv2 model)"),c9.forEach(t),ZZe=i(S),Zn=n(S,"LI",{});var f9=s(Zn);Fre=n(f9,"STRONG",{});var OGr=s(Fre);eeo=r(OGr,"layoutlmv3"),OGr.forEach(t),oeo=r(f9," \u2014 "),tR=n(f9,"A",{href:!0});var VGr=s(tR);reo=r(VGr,"LayoutLMv3Tokenizer"),VGr.forEach(t),teo=r(f9," or "),aR=n(f9,"A",{href:!0});var XGr=s(aR);aeo=r(XGr,"LayoutLMv3TokenizerFast"),XGr.forEach(t),neo=r(f9," (LayoutLMv3 model)"),f9.forEach(t),seo=i(S),es=n(S,"LI",{});var m9=s(es);Tre=n(m9,"STRONG",{});var zGr=s(Tre);leo=r(zGr,"layoutxlm"),zGr.forEach(t),ieo=r(m9," \u2014 "),nR=n(m9,"A",{href:!0});var QGr=s(nR);deo=r(QGr,"LayoutXLMTokenizer"),QGr.forEach(t),ceo=r(m9," or "),sR=n(m9,"A",{href:!0});var WGr=s(sR);feo=r(WGr,"LayoutXLMTokenizerFast"),WGr.forEach(t),meo=r(m9," (LayoutXLM model)"),m9.forEach(t),geo=i(S),os=n(S,"LI",{});var g9=s(os);Mre=n(g9,"STRONG",{});var HGr=s(Mre);heo=r(HGr,"led"),HGr.forEach(t),peo=r(g9," \u2014 "),lR=n(g9,"A",{href:!0});var UGr=s(lR);ueo=r(UGr,"LEDTokenizer"),UGr.forEach(t),_eo=r(g9," or "),iR=n(g9,"A",{href:!0});var JGr=s(iR);beo=r(JGr,"LEDTokenizerFast"),JGr.forEach(t),veo=r(g9," (LED model)"),g9.forEach(t),Feo=i(S),rs=n(S,"LI",{});var h9=s(rs);Ere=n(h9,"STRONG",{});var YGr=s(Ere);Teo=r(YGr,"longformer"),YGr.forEach(t),Meo=r(h9," \u2014 "),dR=n(h9,"A",{href:!0});var KGr=s(dR);Eeo=r(KGr,"LongformerTokenizer"),KGr.forEach(t),Ceo=r(h9," or "),cR=n(h9,"A",{href:!0});var ZGr=s(cR);weo=r(ZGr,"LongformerTokenizerFast"),ZGr.forEach(t),Aeo=r(h9," (Longformer model)"),h9.forEach(t),yeo=i(S),Tg=n(S,"LI",{});var WEe=s(Tg);Cre=n(WEe,"STRONG",{});var eOr=s(Cre);Leo=r(eOr,"luke"),eOr.forEach(t),xeo=r(WEe," \u2014 "),fR=n(WEe,"A",{href:!0});var oOr=s(fR);$eo=r(oOr,"LukeTokenizer"),oOr.forEach(t),keo=r(WEe," (LUKE model)"),WEe.forEach(t),Seo=i(S),ts=n(S,"LI",{});var p9=s(ts);wre=n(p9,"STRONG",{});var rOr=s(wre);Reo=r(rOr,"lxmert"),rOr.forEach(t),Beo=r(p9," \u2014 "),mR=n(p9,"A",{href:!0});var tOr=s(mR);Peo=r(tOr,"LxmertTokenizer"),tOr.forEach(t),Ieo=r(p9," or "),gR=n(p9,"A",{href:!0});var aOr=s(gR);qeo=r(aOr,"LxmertTokenizerFast"),aOr.forEach(t),Neo=r(p9," (LXMERT model)"),p9.forEach(t),jeo=i(S),Mg=n(S,"LI",{});var HEe=s(Mg);Are=n(HEe,"STRONG",{});var nOr=s(Are);Deo=r(nOr,"m2m_100"),nOr.forEach(t),Geo=r(HEe," \u2014 "),hR=n(HEe,"A",{href:!0});var sOr=s(hR);Oeo=r(sOr,"M2M100Tokenizer"),sOr.forEach(t),Veo=r(HEe," (M2M100 model)"),HEe.forEach(t),Xeo=i(S),Eg=n(S,"LI",{});var UEe=s(Eg);yre=n(UEe,"STRONG",{});var lOr=s(yre);zeo=r(lOr,"marian"),lOr.forEach(t),Qeo=r(UEe," \u2014 "),pR=n(UEe,"A",{href:!0});var iOr=s(pR);Weo=r(iOr,"MarianTokenizer"),iOr.forEach(t),Heo=r(UEe," (Marian model)"),UEe.forEach(t),Ueo=i(S),as=n(S,"LI",{});var u9=s(as);Lre=n(u9,"STRONG",{});var dOr=s(Lre);Jeo=r(dOr,"mbart"),dOr.forEach(t),Yeo=r(u9," \u2014 "),uR=n(u9,"A",{href:!0});var cOr=s(uR);Keo=r(cOr,"MBartTokenizer"),cOr.forEach(t),Zeo=r(u9," or "),_R=n(u9,"A",{href:!0});var fOr=s(_R);eoo=r(fOr,"MBartTokenizerFast"),fOr.forEach(t),ooo=r(u9," (mBART model)"),u9.forEach(t),roo=i(S),ns=n(S,"LI",{});var _9=s(ns);xre=n(_9,"STRONG",{});var mOr=s(xre);too=r(mOr,"mbart50"),mOr.forEach(t),aoo=r(_9," \u2014 "),bR=n(_9,"A",{href:!0});var gOr=s(bR);noo=r(gOr,"MBart50Tokenizer"),gOr.forEach(t),soo=r(_9," or "),vR=n(_9,"A",{href:!0});var hOr=s(vR);loo=r(hOr,"MBart50TokenizerFast"),hOr.forEach(t),ioo=r(_9," (mBART-50 model)"),_9.forEach(t),doo=i(S),ss=n(S,"LI",{});var b9=s(ss);$re=n(b9,"STRONG",{});var pOr=s($re);coo=r(pOr,"megatron-bert"),pOr.forEach(t),foo=r(b9," \u2014 "),FR=n(b9,"A",{href:!0});var uOr=s(FR);moo=r(uOr,"BertTokenizer"),uOr.forEach(t),goo=r(b9," or "),TR=n(b9,"A",{href:!0});var _Or=s(TR);hoo=r(_Or,"BertTokenizerFast"),_Or.forEach(t),poo=r(b9," (MegatronBert model)"),b9.forEach(t),uoo=i(S),Cg=n(S,"LI",{});var JEe=s(Cg);kre=n(JEe,"STRONG",{});var bOr=s(kre);_oo=r(bOr,"mluke"),bOr.forEach(t),boo=r(JEe," \u2014 "),MR=n(JEe,"A",{href:!0});var vOr=s(MR);voo=r(vOr,"MLukeTokenizer"),vOr.forEach(t),Foo=r(JEe," (mLUKE model)"),JEe.forEach(t),Too=i(S),ls=n(S,"LI",{});var v9=s(ls);Sre=n(v9,"STRONG",{});var FOr=s(Sre);Moo=r(FOr,"mobilebert"),FOr.forEach(t),Eoo=r(v9," \u2014 "),ER=n(v9,"A",{href:!0});var TOr=s(ER);Coo=r(TOr,"MobileBertTokenizer"),TOr.forEach(t),woo=r(v9," or "),CR=n(v9,"A",{href:!0});var MOr=s(CR);Aoo=r(MOr,"MobileBertTokenizerFast"),MOr.forEach(t),yoo=r(v9," (MobileBERT model)"),v9.forEach(t),Loo=i(S),is=n(S,"LI",{});var F9=s(is);Rre=n(F9,"STRONG",{});var EOr=s(Rre);xoo=r(EOr,"mpnet"),EOr.forEach(t),$oo=r(F9," \u2014 "),wR=n(F9,"A",{href:!0});var COr=s(wR);koo=r(COr,"MPNetTokenizer"),COr.forEach(t),Soo=r(F9," or "),AR=n(F9,"A",{href:!0});var wOr=s(AR);Roo=r(wOr,"MPNetTokenizerFast"),wOr.forEach(t),Boo=r(F9," (MPNet model)"),F9.forEach(t),Poo=i(S),ds=n(S,"LI",{});var T9=s(ds);Bre=n(T9,"STRONG",{});var AOr=s(Bre);Ioo=r(AOr,"mt5"),AOr.forEach(t),qoo=r(T9," \u2014 "),yR=n(T9,"A",{href:!0});var yOr=s(yR);Noo=r(yOr,"MT5Tokenizer"),yOr.forEach(t),joo=r(T9," or "),LR=n(T9,"A",{href:!0});var LOr=s(LR);Doo=r(LOr,"MT5TokenizerFast"),LOr.forEach(t),Goo=r(T9," (mT5 model)"),T9.forEach(t),Ooo=i(S),cs=n(S,"LI",{});var M9=s(cs);Pre=n(M9,"STRONG",{});var xOr=s(Pre);Voo=r(xOr,"nystromformer"),xOr.forEach(t),Xoo=r(M9," \u2014 "),xR=n(M9,"A",{href:!0});var $Or=s(xR);zoo=r($Or,"AlbertTokenizer"),$Or.forEach(t),Qoo=r(M9," or "),$R=n(M9,"A",{href:!0});var kOr=s($R);Woo=r(kOr,"AlbertTokenizerFast"),kOr.forEach(t),Hoo=r(M9," (Nystromformer model)"),M9.forEach(t),Uoo=i(S),fs=n(S,"LI",{});var E9=s(fs);Ire=n(E9,"STRONG",{});var SOr=s(Ire);Joo=r(SOr,"openai-gpt"),SOr.forEach(t),Yoo=r(E9," \u2014 "),kR=n(E9,"A",{href:!0});var ROr=s(kR);Koo=r(ROr,"OpenAIGPTTokenizer"),ROr.forEach(t),Zoo=r(E9," or "),SR=n(E9,"A",{href:!0});var BOr=s(SR);ero=r(BOr,"OpenAIGPTTokenizerFast"),BOr.forEach(t),oro=r(E9," (OpenAI GPT model)"),E9.forEach(t),rro=i(S),ms=n(S,"LI",{});var C9=s(ms);qre=n(C9,"STRONG",{});var POr=s(qre);tro=r(POr,"pegasus"),POr.forEach(t),aro=r(C9," \u2014 "),RR=n(C9,"A",{href:!0});var IOr=s(RR);nro=r(IOr,"PegasusTokenizer"),IOr.forEach(t),sro=r(C9," or "),BR=n(C9,"A",{href:!0});var qOr=s(BR);lro=r(qOr,"PegasusTokenizerFast"),qOr.forEach(t),iro=r(C9," (Pegasus model)"),C9.forEach(t),dro=i(S),wg=n(S,"LI",{});var YEe=s(wg);Nre=n(YEe,"STRONG",{});var NOr=s(Nre);cro=r(NOr,"perceiver"),NOr.forEach(t),fro=r(YEe," \u2014 "),PR=n(YEe,"A",{href:!0});var jOr=s(PR);mro=r(jOr,"PerceiverTokenizer"),jOr.forEach(t),gro=r(YEe," (Perceiver model)"),YEe.forEach(t),hro=i(S),Ag=n(S,"LI",{});var KEe=s(Ag);jre=n(KEe,"STRONG",{});var DOr=s(jre);pro=r(DOr,"phobert"),DOr.forEach(t),uro=r(KEe," \u2014 "),IR=n(KEe,"A",{href:!0});var GOr=s(IR);_ro=r(GOr,"PhobertTokenizer"),GOr.forEach(t),bro=r(KEe," (PhoBERT model)"),KEe.forEach(t),vro=i(S),yg=n(S,"LI",{});var ZEe=s(yg);Dre=n(ZEe,"STRONG",{});var OOr=s(Dre);Fro=r(OOr,"plbart"),OOr.forEach(t),Tro=r(ZEe," \u2014 "),qR=n(ZEe,"A",{href:!0});var VOr=s(qR);Mro=r(VOr,"PLBartTokenizer"),VOr.forEach(t),Ero=r(ZEe," (PLBart model)"),ZEe.forEach(t),Cro=i(S),Lg=n(S,"LI",{});var e5e=s(Lg);Gre=n(e5e,"STRONG",{});var XOr=s(Gre);wro=r(XOr,"prophetnet"),XOr.forEach(t),Aro=r(e5e," \u2014 "),NR=n(e5e,"A",{href:!0});var zOr=s(NR);yro=r(zOr,"ProphetNetTokenizer"),zOr.forEach(t),Lro=r(e5e," (ProphetNet model)"),e5e.forEach(t),xro=i(S),gs=n(S,"LI",{});var w9=s(gs);Ore=n(w9,"STRONG",{});var QOr=s(Ore);$ro=r(QOr,"qdqbert"),QOr.forEach(t),kro=r(w9," \u2014 "),jR=n(w9,"A",{href:!0});var WOr=s(jR);Sro=r(WOr,"BertTokenizer"),WOr.forEach(t),Rro=r(w9," or "),DR=n(w9,"A",{href:!0});var HOr=s(DR);Bro=r(HOr,"BertTokenizerFast"),HOr.forEach(t),Pro=r(w9," (QDQBert model)"),w9.forEach(t),Iro=i(S),xg=n(S,"LI",{});var o5e=s(xg);Vre=n(o5e,"STRONG",{});var UOr=s(Vre);qro=r(UOr,"rag"),UOr.forEach(t),Nro=r(o5e," \u2014 "),GR=n(o5e,"A",{href:!0});var JOr=s(GR);jro=r(JOr,"RagTokenizer"),JOr.forEach(t),Dro=r(o5e," (RAG model)"),o5e.forEach(t),Gro=i(S),hs=n(S,"LI",{});var A9=s(hs);Xre=n(A9,"STRONG",{});var YOr=s(Xre);Oro=r(YOr,"realm"),YOr.forEach(t),Vro=r(A9," \u2014 "),OR=n(A9,"A",{href:!0});var KOr=s(OR);Xro=r(KOr,"RealmTokenizer"),KOr.forEach(t),zro=r(A9," or "),VR=n(A9,"A",{href:!0});var ZOr=s(VR);Qro=r(ZOr,"RealmTokenizerFast"),ZOr.forEach(t),Wro=r(A9," (Realm model)"),A9.forEach(t),Hro=i(S),ps=n(S,"LI",{});var y9=s(ps);zre=n(y9,"STRONG",{});var eVr=s(zre);Uro=r(eVr,"reformer"),eVr.forEach(t),Jro=r(y9," \u2014 "),XR=n(y9,"A",{href:!0});var oVr=s(XR);Yro=r(oVr,"ReformerTokenizer"),oVr.forEach(t),Kro=r(y9," or "),zR=n(y9,"A",{href:!0});var rVr=s(zR);Zro=r(rVr,"ReformerTokenizerFast"),rVr.forEach(t),eto=r(y9," (Reformer model)"),y9.forEach(t),oto=i(S),us=n(S,"LI",{});var L9=s(us);Qre=n(L9,"STRONG",{});var tVr=s(Qre);rto=r(tVr,"rembert"),tVr.forEach(t),tto=r(L9," \u2014 "),QR=n(L9,"A",{href:!0});var aVr=s(QR);ato=r(aVr,"RemBertTokenizer"),aVr.forEach(t),nto=r(L9," or "),WR=n(L9,"A",{href:!0});var nVr=s(WR);sto=r(nVr,"RemBertTokenizerFast"),nVr.forEach(t),lto=r(L9," (RemBERT model)"),L9.forEach(t),ito=i(S),_s=n(S,"LI",{});var x9=s(_s);Wre=n(x9,"STRONG",{});var sVr=s(Wre);dto=r(sVr,"retribert"),sVr.forEach(t),cto=r(x9," \u2014 "),HR=n(x9,"A",{href:!0});var lVr=s(HR);fto=r(lVr,"RetriBertTokenizer"),lVr.forEach(t),mto=r(x9," or "),UR=n(x9,"A",{href:!0});var iVr=s(UR);gto=r(iVr,"RetriBertTokenizerFast"),iVr.forEach(t),hto=r(x9," (RetriBERT model)"),x9.forEach(t),pto=i(S),bs=n(S,"LI",{});var $9=s(bs);Hre=n($9,"STRONG",{});var dVr=s(Hre);uto=r(dVr,"roberta"),dVr.forEach(t),_to=r($9," \u2014 "),JR=n($9,"A",{href:!0});var cVr=s(JR);bto=r(cVr,"RobertaTokenizer"),cVr.forEach(t),vto=r($9," or "),YR=n($9,"A",{href:!0});var fVr=s(YR);Fto=r(fVr,"RobertaTokenizerFast"),fVr.forEach(t),Tto=r($9," (RoBERTa model)"),$9.forEach(t),Mto=i(S),vs=n(S,"LI",{});var k9=s(vs);Ure=n(k9,"STRONG",{});var mVr=s(Ure);Eto=r(mVr,"roformer"),mVr.forEach(t),Cto=r(k9," \u2014 "),KR=n(k9,"A",{href:!0});var gVr=s(KR);wto=r(gVr,"RoFormerTokenizer"),gVr.forEach(t),Ato=r(k9," or "),ZR=n(k9,"A",{href:!0});var hVr=s(ZR);yto=r(hVr,"RoFormerTokenizerFast"),hVr.forEach(t),Lto=r(k9," (RoFormer model)"),k9.forEach(t),xto=i(S),$g=n(S,"LI",{});var r5e=s($g);Jre=n(r5e,"STRONG",{});var pVr=s(Jre);$to=r(pVr,"speech_to_text"),pVr.forEach(t),kto=r(r5e," \u2014 "),eB=n(r5e,"A",{href:!0});var uVr=s(eB);Sto=r(uVr,"Speech2TextTokenizer"),uVr.forEach(t),Rto=r(r5e," (Speech2Text model)"),r5e.forEach(t),Bto=i(S),kg=n(S,"LI",{});var t5e=s(kg);Yre=n(t5e,"STRONG",{});var _Vr=s(Yre);Pto=r(_Vr,"speech_to_text_2"),_Vr.forEach(t),Ito=r(t5e," \u2014 "),oB=n(t5e,"A",{href:!0});var bVr=s(oB);qto=r(bVr,"Speech2Text2Tokenizer"),bVr.forEach(t),Nto=r(t5e," (Speech2Text2 model)"),t5e.forEach(t),jto=i(S),Fs=n(S,"LI",{});var S9=s(Fs);Kre=n(S9,"STRONG",{});var vVr=s(Kre);Dto=r(vVr,"splinter"),vVr.forEach(t),Gto=r(S9," \u2014 "),rB=n(S9,"A",{href:!0});var FVr=s(rB);Oto=r(FVr,"SplinterTokenizer"),FVr.forEach(t),Vto=r(S9," or "),tB=n(S9,"A",{href:!0});var TVr=s(tB);Xto=r(TVr,"SplinterTokenizerFast"),TVr.forEach(t),zto=r(S9," (Splinter model)"),S9.forEach(t),Qto=i(S),Ts=n(S,"LI",{});var R9=s(Ts);Zre=n(R9,"STRONG",{});var MVr=s(Zre);Wto=r(MVr,"squeezebert"),MVr.forEach(t),Hto=r(R9," \u2014 "),aB=n(R9,"A",{href:!0});var EVr=s(aB);Uto=r(EVr,"SqueezeBertTokenizer"),EVr.forEach(t),Jto=r(R9," or "),nB=n(R9,"A",{href:!0});var CVr=s(nB);Yto=r(CVr,"SqueezeBertTokenizerFast"),CVr.forEach(t),Kto=r(R9," (SqueezeBERT model)"),R9.forEach(t),Zto=i(S),Ms=n(S,"LI",{});var B9=s(Ms);ete=n(B9,"STRONG",{});var wVr=s(ete);eao=r(wVr,"t5"),wVr.forEach(t),oao=r(B9," \u2014 "),sB=n(B9,"A",{href:!0});var AVr=s(sB);rao=r(AVr,"T5Tokenizer"),AVr.forEach(t),tao=r(B9," or "),lB=n(B9,"A",{href:!0});var yVr=s(lB);aao=r(yVr,"T5TokenizerFast"),yVr.forEach(t),nao=r(B9," (T5 model)"),B9.forEach(t),sao=i(S),Sg=n(S,"LI",{});var a5e=s(Sg);ote=n(a5e,"STRONG",{});var LVr=s(ote);lao=r(LVr,"tapas"),LVr.forEach(t),iao=r(a5e," \u2014 "),iB=n(a5e,"A",{href:!0});var xVr=s(iB);dao=r(xVr,"TapasTokenizer"),xVr.forEach(t),cao=r(a5e," (TAPAS model)"),a5e.forEach(t),fao=i(S),Rg=n(S,"LI",{});var n5e=s(Rg);rte=n(n5e,"STRONG",{});var $Vr=s(rte);mao=r($Vr,"tapex"),$Vr.forEach(t),gao=r(n5e," \u2014 "),dB=n(n5e,"A",{href:!0});var kVr=s(dB);hao=r(kVr,"TapexTokenizer"),kVr.forEach(t),pao=r(n5e," (TAPEX model)"),n5e.forEach(t),uao=i(S),Bg=n(S,"LI",{});var s5e=s(Bg);tte=n(s5e,"STRONG",{});var SVr=s(tte);_ao=r(SVr,"transfo-xl"),SVr.forEach(t),bao=r(s5e," \u2014 "),cB=n(s5e,"A",{href:!0});var RVr=s(cB);vao=r(RVr,"TransfoXLTokenizer"),RVr.forEach(t),Fao=r(s5e," (Transformer-XL model)"),s5e.forEach(t),Tao=i(S),Es=n(S,"LI",{});var P9=s(Es);ate=n(P9,"STRONG",{});var BVr=s(ate);Mao=r(BVr,"visual_bert"),BVr.forEach(t),Eao=r(P9," \u2014 "),fB=n(P9,"A",{href:!0});var PVr=s(fB);Cao=r(PVr,"BertTokenizer"),PVr.forEach(t),wao=r(P9," or "),mB=n(P9,"A",{href:!0});var IVr=s(mB);Aao=r(IVr,"BertTokenizerFast"),IVr.forEach(t),yao=r(P9," (VisualBert model)"),P9.forEach(t),Lao=i(S),Pg=n(S,"LI",{});var l5e=s(Pg);nte=n(l5e,"STRONG",{});var qVr=s(nte);xao=r(qVr,"wav2vec2"),qVr.forEach(t),$ao=r(l5e," \u2014 "),gB=n(l5e,"A",{href:!0});var NVr=s(gB);kao=r(NVr,"Wav2Vec2CTCTokenizer"),NVr.forEach(t),Sao=r(l5e," (Wav2Vec2 model)"),l5e.forEach(t),Rao=i(S),Ig=n(S,"LI",{});var i5e=s(Ig);ste=n(i5e,"STRONG",{});var jVr=s(ste);Bao=r(jVr,"wav2vec2_phoneme"),jVr.forEach(t),Pao=r(i5e," \u2014 "),hB=n(i5e,"A",{href:!0});var DVr=s(hB);Iao=r(DVr,"Wav2Vec2PhonemeCTCTokenizer"),DVr.forEach(t),qao=r(i5e," (Wav2Vec2Phoneme model)"),i5e.forEach(t),Nao=i(S),Cs=n(S,"LI",{});var I9=s(Cs);lte=n(I9,"STRONG",{});var GVr=s(lte);jao=r(GVr,"xglm"),GVr.forEach(t),Dao=r(I9," \u2014 "),pB=n(I9,"A",{href:!0});var OVr=s(pB);Gao=r(OVr,"XGLMTokenizer"),OVr.forEach(t),Oao=r(I9," or "),uB=n(I9,"A",{href:!0});var VVr=s(uB);Vao=r(VVr,"XGLMTokenizerFast"),VVr.forEach(t),Xao=r(I9," (XGLM model)"),I9.forEach(t),zao=i(S),qg=n(S,"LI",{});var d5e=s(qg);ite=n(d5e,"STRONG",{});var XVr=s(ite);Qao=r(XVr,"xlm"),XVr.forEach(t),Wao=r(d5e," \u2014 "),_B=n(d5e,"A",{href:!0});var zVr=s(_B);Hao=r(zVr,"XLMTokenizer"),zVr.forEach(t),Uao=r(d5e," (XLM model)"),d5e.forEach(t),Jao=i(S),Ng=n(S,"LI",{});var c5e=s(Ng);dte=n(c5e,"STRONG",{});var QVr=s(dte);Yao=r(QVr,"xlm-prophetnet"),QVr.forEach(t),Kao=r(c5e," \u2014 "),bB=n(c5e,"A",{href:!0});var WVr=s(bB);Zao=r(WVr,"XLMProphetNetTokenizer"),WVr.forEach(t),eno=r(c5e," (XLMProphetNet model)"),c5e.forEach(t),ono=i(S),ws=n(S,"LI",{});var q9=s(ws);cte=n(q9,"STRONG",{});var HVr=s(cte);rno=r(HVr,"xlm-roberta"),HVr.forEach(t),tno=r(q9," \u2014 "),vB=n(q9,"A",{href:!0});var UVr=s(vB);ano=r(UVr,"XLMRobertaTokenizer"),UVr.forEach(t),nno=r(q9," or "),FB=n(q9,"A",{href:!0});var JVr=s(FB);sno=r(JVr,"XLMRobertaTokenizerFast"),JVr.forEach(t),lno=r(q9," (XLM-RoBERTa model)"),q9.forEach(t),ino=i(S),As=n(S,"LI",{});var N9=s(As);fte=n(N9,"STRONG",{});var YVr=s(fte);dno=r(YVr,"xlm-roberta-xl"),YVr.forEach(t),cno=r(N9," \u2014 "),TB=n(N9,"A",{href:!0});var KVr=s(TB);fno=r(KVr,"RobertaTokenizer"),KVr.forEach(t),mno=r(N9," or "),MB=n(N9,"A",{href:!0});var ZVr=s(MB);gno=r(ZVr,"RobertaTokenizerFast"),ZVr.forEach(t),hno=r(N9," (XLM-RoBERTa-XL model)"),N9.forEach(t),pno=i(S),ys=n(S,"LI",{});var j9=s(ys);mte=n(j9,"STRONG",{});var eXr=s(mte);uno=r(eXr,"xlnet"),eXr.forEach(t),_no=r(j9," \u2014 "),EB=n(j9,"A",{href:!0});var oXr=s(EB);bno=r(oXr,"XLNetTokenizer"),oXr.forEach(t),vno=r(j9," or "),CB=n(j9,"A",{href:!0});var rXr=s(CB);Fno=r(rXr,"XLNetTokenizerFast"),rXr.forEach(t),Tno=r(j9," (XLNet model)"),j9.forEach(t),Mno=i(S),Ls=n(S,"LI",{});var D9=s(Ls);gte=n(D9,"STRONG",{});var tXr=s(gte);Eno=r(tXr,"yoso"),tXr.forEach(t),Cno=r(D9," \u2014 "),wB=n(D9,"A",{href:!0});var aXr=s(wB);wno=r(aXr,"AlbertTokenizer"),aXr.forEach(t),Ano=r(D9," or "),AB=n(D9,"A",{href:!0});var nXr=s(AB);yno=r(nXr,"AlbertTokenizerFast"),nXr.forEach(t),Lno=r(D9," (YOSO model)"),D9.forEach(t),S.forEach(t),xno=i(Rs),T(jg.$$.fragment,Rs),Rs.forEach(t),$no=i(Ss),Dg=n(Ss,"DIV",{class:!0});var ZIe=s(Dg);T(zw.$$.fragment,ZIe),kno=i(ZIe),hte=n(ZIe,"P",{});var sXr=s(hte);Sno=r(sXr,"Register a new tokenizer in this mapping."),sXr.forEach(t),ZIe.forEach(t),Ss.forEach(t),rPe=i(f),gi=n(f,"H2",{class:!0});var eqe=s(gi);Gg=n(eqe,"A",{id:!0,class:!0,href:!0});var lXr=s(Gg);pte=n(lXr,"SPAN",{});var iXr=s(pte);T(Qw.$$.fragment,iXr),iXr.forEach(t),lXr.forEach(t),Rno=i(eqe),ute=n(eqe,"SPAN",{});var dXr=s(ute);Bno=r(dXr,"AutoFeatureExtractor"),dXr.forEach(t),eqe.forEach(t),tPe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(Ww.$$.fragment,Bs),Pno=i(Bs),Hw=n(Bs,"P",{});var oqe=s(Hw);Ino=r(oqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),yB=n(oqe,"A",{href:!0});var cXr=s(yB);qno=r(cXr,"AutoFeatureExtractor.from_pretrained()"),cXr.forEach(t),Nno=r(oqe," class method."),oqe.forEach(t),jno=i(Bs),Uw=n(Bs,"P",{});var rqe=s(Uw);Dno=r(rqe,"This class cannot be instantiated directly using "),_te=n(rqe,"CODE",{});var fXr=s(_te);Gno=r(fXr,"__init__()"),fXr.forEach(t),Ono=r(rqe," (throws an error)."),rqe.forEach(t),Vno=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ht=s(Qe);T(Jw.$$.fragment,Ht),Xno=i(Ht),bte=n(Ht,"P",{});var mXr=s(bte);zno=r(mXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mXr.forEach(t),Qno=i(Ht),Ma=n(Ht,"P",{});var IC=s(Ma);Wno=r(IC,"The feature extractor class to instantiate is selected based on the "),vte=n(IC,"CODE",{});var gXr=s(vte);Hno=r(gXr,"model_type"),gXr.forEach(t),Uno=r(IC,` property of the config object
(either passed as an argument or loaded from `),Fte=n(IC,"CODE",{});var hXr=s(Fte);Jno=r(hXr,"pretrained_model_name_or_path"),hXr.forEach(t),Yno=r(IC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Tte=n(IC,"CODE",{});var pXr=s(Tte);Kno=r(pXr,"pretrained_model_name_or_path"),pXr.forEach(t),Zno=r(IC,":"),IC.forEach(t),eso=i(Ht),oe=n(Ht,"UL",{});var ae=s(oe);Og=n(ae,"LI",{});var f5e=s(Og);Mte=n(f5e,"STRONG",{});var uXr=s(Mte);oso=r(uXr,"beit"),uXr.forEach(t),rso=r(f5e," \u2014 "),LB=n(f5e,"A",{href:!0});var _Xr=s(LB);tso=r(_Xr,"BeitFeatureExtractor"),_Xr.forEach(t),aso=r(f5e," (BEiT model)"),f5e.forEach(t),nso=i(ae),Vg=n(ae,"LI",{});var m5e=s(Vg);Ete=n(m5e,"STRONG",{});var bXr=s(Ete);sso=r(bXr,"clip"),bXr.forEach(t),lso=r(m5e," \u2014 "),xB=n(m5e,"A",{href:!0});var vXr=s(xB);iso=r(vXr,"CLIPFeatureExtractor"),vXr.forEach(t),dso=r(m5e," (CLIP model)"),m5e.forEach(t),cso=i(ae),Xg=n(ae,"LI",{});var g5e=s(Xg);Cte=n(g5e,"STRONG",{});var FXr=s(Cte);fso=r(FXr,"convnext"),FXr.forEach(t),mso=r(g5e," \u2014 "),$B=n(g5e,"A",{href:!0});var TXr=s($B);gso=r(TXr,"ConvNextFeatureExtractor"),TXr.forEach(t),hso=r(g5e," (ConvNext model)"),g5e.forEach(t),pso=i(ae),zg=n(ae,"LI",{});var h5e=s(zg);wte=n(h5e,"STRONG",{});var MXr=s(wte);uso=r(MXr,"data2vec-audio"),MXr.forEach(t),_so=r(h5e," \u2014 "),kB=n(h5e,"A",{href:!0});var EXr=s(kB);bso=r(EXr,"Wav2Vec2FeatureExtractor"),EXr.forEach(t),vso=r(h5e," (Data2VecAudio model)"),h5e.forEach(t),Fso=i(ae),Qg=n(ae,"LI",{});var p5e=s(Qg);Ate=n(p5e,"STRONG",{});var CXr=s(Ate);Tso=r(CXr,"data2vec-vision"),CXr.forEach(t),Mso=r(p5e," \u2014 "),SB=n(p5e,"A",{href:!0});var wXr=s(SB);Eso=r(wXr,"BeitFeatureExtractor"),wXr.forEach(t),Cso=r(p5e," (Data2VecVision model)"),p5e.forEach(t),wso=i(ae),Wg=n(ae,"LI",{});var u5e=s(Wg);yte=n(u5e,"STRONG",{});var AXr=s(yte);Aso=r(AXr,"deit"),AXr.forEach(t),yso=r(u5e," \u2014 "),RB=n(u5e,"A",{href:!0});var yXr=s(RB);Lso=r(yXr,"DeiTFeatureExtractor"),yXr.forEach(t),xso=r(u5e," (DeiT model)"),u5e.forEach(t),$so=i(ae),Hg=n(ae,"LI",{});var _5e=s(Hg);Lte=n(_5e,"STRONG",{});var LXr=s(Lte);kso=r(LXr,"detr"),LXr.forEach(t),Sso=r(_5e," \u2014 "),BB=n(_5e,"A",{href:!0});var xXr=s(BB);Rso=r(xXr,"DetrFeatureExtractor"),xXr.forEach(t),Bso=r(_5e," (DETR model)"),_5e.forEach(t),Pso=i(ae),Ug=n(ae,"LI",{});var b5e=s(Ug);xte=n(b5e,"STRONG",{});var $Xr=s(xte);Iso=r($Xr,"dpt"),$Xr.forEach(t),qso=r(b5e," \u2014 "),PB=n(b5e,"A",{href:!0});var kXr=s(PB);Nso=r(kXr,"DPTFeatureExtractor"),kXr.forEach(t),jso=r(b5e," (DPT model)"),b5e.forEach(t),Dso=i(ae),Jg=n(ae,"LI",{});var v5e=s(Jg);$te=n(v5e,"STRONG",{});var SXr=s($te);Gso=r(SXr,"glpn"),SXr.forEach(t),Oso=r(v5e," \u2014 "),IB=n(v5e,"A",{href:!0});var RXr=s(IB);Vso=r(RXr,"GLPNFeatureExtractor"),RXr.forEach(t),Xso=r(v5e," (GLPN model)"),v5e.forEach(t),zso=i(ae),Yg=n(ae,"LI",{});var F5e=s(Yg);kte=n(F5e,"STRONG",{});var BXr=s(kte);Qso=r(BXr,"hubert"),BXr.forEach(t),Wso=r(F5e," \u2014 "),qB=n(F5e,"A",{href:!0});var PXr=s(qB);Hso=r(PXr,"Wav2Vec2FeatureExtractor"),PXr.forEach(t),Uso=r(F5e," (Hubert model)"),F5e.forEach(t),Jso=i(ae),Kg=n(ae,"LI",{});var T5e=s(Kg);Ste=n(T5e,"STRONG",{});var IXr=s(Ste);Yso=r(IXr,"layoutlmv2"),IXr.forEach(t),Kso=r(T5e," \u2014 "),NB=n(T5e,"A",{href:!0});var qXr=s(NB);Zso=r(qXr,"LayoutLMv2FeatureExtractor"),qXr.forEach(t),elo=r(T5e," (LayoutLMv2 model)"),T5e.forEach(t),olo=i(ae),Zg=n(ae,"LI",{});var M5e=s(Zg);Rte=n(M5e,"STRONG",{});var NXr=s(Rte);rlo=r(NXr,"layoutlmv3"),NXr.forEach(t),tlo=r(M5e," \u2014 "),jB=n(M5e,"A",{href:!0});var jXr=s(jB);alo=r(jXr,"LayoutLMv3FeatureExtractor"),jXr.forEach(t),nlo=r(M5e," (LayoutLMv3 model)"),M5e.forEach(t),slo=i(ae),eh=n(ae,"LI",{});var E5e=s(eh);Bte=n(E5e,"STRONG",{});var DXr=s(Bte);llo=r(DXr,"maskformer"),DXr.forEach(t),ilo=r(E5e," \u2014 "),DB=n(E5e,"A",{href:!0});var GXr=s(DB);dlo=r(GXr,"MaskFormerFeatureExtractor"),GXr.forEach(t),clo=r(E5e," (MaskFormer model)"),E5e.forEach(t),flo=i(ae),oh=n(ae,"LI",{});var C5e=s(oh);Pte=n(C5e,"STRONG",{});var OXr=s(Pte);mlo=r(OXr,"perceiver"),OXr.forEach(t),glo=r(C5e," \u2014 "),GB=n(C5e,"A",{href:!0});var VXr=s(GB);hlo=r(VXr,"PerceiverFeatureExtractor"),VXr.forEach(t),plo=r(C5e," (Perceiver model)"),C5e.forEach(t),ulo=i(ae),rh=n(ae,"LI",{});var w5e=s(rh);Ite=n(w5e,"STRONG",{});var XXr=s(Ite);_lo=r(XXr,"poolformer"),XXr.forEach(t),blo=r(w5e," \u2014 "),OB=n(w5e,"A",{href:!0});var zXr=s(OB);vlo=r(zXr,"PoolFormerFeatureExtractor"),zXr.forEach(t),Flo=r(w5e," (PoolFormer model)"),w5e.forEach(t),Tlo=i(ae),th=n(ae,"LI",{});var A5e=s(th);qte=n(A5e,"STRONG",{});var QXr=s(qte);Mlo=r(QXr,"regnet"),QXr.forEach(t),Elo=r(A5e," \u2014 "),VB=n(A5e,"A",{href:!0});var WXr=s(VB);Clo=r(WXr,"ConvNextFeatureExtractor"),WXr.forEach(t),wlo=r(A5e," (RegNet model)"),A5e.forEach(t),Alo=i(ae),ah=n(ae,"LI",{});var y5e=s(ah);Nte=n(y5e,"STRONG",{});var HXr=s(Nte);ylo=r(HXr,"resnet"),HXr.forEach(t),Llo=r(y5e," \u2014 "),XB=n(y5e,"A",{href:!0});var UXr=s(XB);xlo=r(UXr,"ConvNextFeatureExtractor"),UXr.forEach(t),$lo=r(y5e," (ResNet model)"),y5e.forEach(t),klo=i(ae),nh=n(ae,"LI",{});var L5e=s(nh);jte=n(L5e,"STRONG",{});var JXr=s(jte);Slo=r(JXr,"segformer"),JXr.forEach(t),Rlo=r(L5e," \u2014 "),zB=n(L5e,"A",{href:!0});var YXr=s(zB);Blo=r(YXr,"SegformerFeatureExtractor"),YXr.forEach(t),Plo=r(L5e," (SegFormer model)"),L5e.forEach(t),Ilo=i(ae),sh=n(ae,"LI",{});var x5e=s(sh);Dte=n(x5e,"STRONG",{});var KXr=s(Dte);qlo=r(KXr,"speech_to_text"),KXr.forEach(t),Nlo=r(x5e," \u2014 "),QB=n(x5e,"A",{href:!0});var ZXr=s(QB);jlo=r(ZXr,"Speech2TextFeatureExtractor"),ZXr.forEach(t),Dlo=r(x5e," (Speech2Text model)"),x5e.forEach(t),Glo=i(ae),lh=n(ae,"LI",{});var $5e=s(lh);Gte=n($5e,"STRONG",{});var ezr=s(Gte);Olo=r(ezr,"swin"),ezr.forEach(t),Vlo=r($5e," \u2014 "),WB=n($5e,"A",{href:!0});var ozr=s(WB);Xlo=r(ozr,"ViTFeatureExtractor"),ozr.forEach(t),zlo=r($5e," (Swin model)"),$5e.forEach(t),Qlo=i(ae),ih=n(ae,"LI",{});var k5e=s(ih);Ote=n(k5e,"STRONG",{});var rzr=s(Ote);Wlo=r(rzr,"van"),rzr.forEach(t),Hlo=r(k5e," \u2014 "),HB=n(k5e,"A",{href:!0});var tzr=s(HB);Ulo=r(tzr,"ConvNextFeatureExtractor"),tzr.forEach(t),Jlo=r(k5e," (VAN model)"),k5e.forEach(t),Ylo=i(ae),dh=n(ae,"LI",{});var S5e=s(dh);Vte=n(S5e,"STRONG",{});var azr=s(Vte);Klo=r(azr,"vit"),azr.forEach(t),Zlo=r(S5e," \u2014 "),UB=n(S5e,"A",{href:!0});var nzr=s(UB);eio=r(nzr,"ViTFeatureExtractor"),nzr.forEach(t),oio=r(S5e," (ViT model)"),S5e.forEach(t),rio=i(ae),ch=n(ae,"LI",{});var R5e=s(ch);Xte=n(R5e,"STRONG",{});var szr=s(Xte);tio=r(szr,"vit_mae"),szr.forEach(t),aio=r(R5e," \u2014 "),JB=n(R5e,"A",{href:!0});var lzr=s(JB);nio=r(lzr,"ViTFeatureExtractor"),lzr.forEach(t),sio=r(R5e," (ViTMAE model)"),R5e.forEach(t),lio=i(ae),fh=n(ae,"LI",{});var B5e=s(fh);zte=n(B5e,"STRONG",{});var izr=s(zte);iio=r(izr,"wav2vec2"),izr.forEach(t),dio=r(B5e," \u2014 "),YB=n(B5e,"A",{href:!0});var dzr=s(YB);cio=r(dzr,"Wav2Vec2FeatureExtractor"),dzr.forEach(t),fio=r(B5e," (Wav2Vec2 model)"),B5e.forEach(t),mio=i(ae),mh=n(ae,"LI",{});var P5e=s(mh);Qte=n(P5e,"STRONG",{});var czr=s(Qte);gio=r(czr,"yolos"),czr.forEach(t),hio=r(P5e," \u2014 "),KB=n(P5e,"A",{href:!0});var fzr=s(KB);pio=r(fzr,"YolosFeatureExtractor"),fzr.forEach(t),uio=r(P5e," (YOLOS model)"),P5e.forEach(t),ae.forEach(t),_io=i(Ht),T(gh.$$.fragment,Ht),bio=i(Ht),T(hh.$$.fragment,Ht),Ht.forEach(t),vio=i(Bs),ph=n(Bs,"DIV",{class:!0});var tqe=s(ph);T(Yw.$$.fragment,tqe),Fio=i(tqe),Wte=n(tqe,"P",{});var mzr=s(Wte);Tio=r(mzr,"Register a new feature extractor for this class."),mzr.forEach(t),tqe.forEach(t),Bs.forEach(t),aPe=i(f),hi=n(f,"H2",{class:!0});var aqe=s(hi);uh=n(aqe,"A",{id:!0,class:!0,href:!0});var gzr=s(uh);Hte=n(gzr,"SPAN",{});var hzr=s(Hte);T(Kw.$$.fragment,hzr),hzr.forEach(t),gzr.forEach(t),Mio=i(aqe),Ute=n(aqe,"SPAN",{});var pzr=s(Ute);Eio=r(pzr,"AutoProcessor"),pzr.forEach(t),aqe.forEach(t),nPe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(Zw.$$.fragment,Ps),Cio=i(Ps),eA=n(Ps,"P",{});var nqe=s(eA);wio=r(nqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZB=n(nqe,"A",{href:!0});var uzr=s(ZB);Aio=r(uzr,"AutoProcessor.from_pretrained()"),uzr.forEach(t),yio=r(nqe," class method."),nqe.forEach(t),Lio=i(Ps),oA=n(Ps,"P",{});var sqe=s(oA);xio=r(sqe,"This class cannot be instantiated directly using "),Jte=n(sqe,"CODE",{});var _zr=s(Jte);$io=r(_zr,"__init__()"),_zr.forEach(t),kio=r(sqe," (throws an error)."),sqe.forEach(t),Sio=i(Ps),We=n(Ps,"DIV",{class:!0});var Ut=s(We);T(rA.$$.fragment,Ut),Rio=i(Ut),Yte=n(Ut,"P",{});var bzr=s(Yte);Bio=r(bzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bzr.forEach(t),Pio=i(Ut),pi=n(Ut,"P",{});var SY=s(pi);Iio=r(SY,"The processor class to instantiate is selected based on the "),Kte=n(SY,"CODE",{});var vzr=s(Kte);qio=r(vzr,"model_type"),vzr.forEach(t),Nio=r(SY,` property of the config object (either
passed as an argument or loaded from `),Zte=n(SY,"CODE",{});var Fzr=s(Zte);jio=r(Fzr,"pretrained_model_name_or_path"),Fzr.forEach(t),Dio=r(SY," if possible):"),SY.forEach(t),Gio=i(Ut),be=n(Ut,"UL",{});var ve=s(be);_h=n(ve,"LI",{});var I5e=s(_h);eae=n(I5e,"STRONG",{});var Tzr=s(eae);Oio=r(Tzr,"clip"),Tzr.forEach(t),Vio=r(I5e," \u2014 "),eP=n(I5e,"A",{href:!0});var Mzr=s(eP);Xio=r(Mzr,"CLIPProcessor"),Mzr.forEach(t),zio=r(I5e," (CLIP model)"),I5e.forEach(t),Qio=i(ve),bh=n(ve,"LI",{});var q5e=s(bh);oae=n(q5e,"STRONG",{});var Ezr=s(oae);Wio=r(Ezr,"layoutlmv2"),Ezr.forEach(t),Hio=r(q5e," \u2014 "),oP=n(q5e,"A",{href:!0});var Czr=s(oP);Uio=r(Czr,"LayoutLMv2Processor"),Czr.forEach(t),Jio=r(q5e," (LayoutLMv2 model)"),q5e.forEach(t),Yio=i(ve),vh=n(ve,"LI",{});var N5e=s(vh);rae=n(N5e,"STRONG",{});var wzr=s(rae);Kio=r(wzr,"layoutlmv3"),wzr.forEach(t),Zio=r(N5e," \u2014 "),rP=n(N5e,"A",{href:!0});var Azr=s(rP);edo=r(Azr,"LayoutLMv3Processor"),Azr.forEach(t),odo=r(N5e," (LayoutLMv3 model)"),N5e.forEach(t),rdo=i(ve),Fh=n(ve,"LI",{});var j5e=s(Fh);tae=n(j5e,"STRONG",{});var yzr=s(tae);tdo=r(yzr,"layoutxlm"),yzr.forEach(t),ado=r(j5e," \u2014 "),tP=n(j5e,"A",{href:!0});var Lzr=s(tP);ndo=r(Lzr,"LayoutXLMProcessor"),Lzr.forEach(t),sdo=r(j5e," (LayoutXLM model)"),j5e.forEach(t),ldo=i(ve),Th=n(ve,"LI",{});var D5e=s(Th);aae=n(D5e,"STRONG",{});var xzr=s(aae);ido=r(xzr,"sew"),xzr.forEach(t),ddo=r(D5e," \u2014 "),aP=n(D5e,"A",{href:!0});var $zr=s(aP);cdo=r($zr,"Wav2Vec2Processor"),$zr.forEach(t),fdo=r(D5e," (SEW model)"),D5e.forEach(t),mdo=i(ve),Mh=n(ve,"LI",{});var G5e=s(Mh);nae=n(G5e,"STRONG",{});var kzr=s(nae);gdo=r(kzr,"sew-d"),kzr.forEach(t),hdo=r(G5e," \u2014 "),nP=n(G5e,"A",{href:!0});var Szr=s(nP);pdo=r(Szr,"Wav2Vec2Processor"),Szr.forEach(t),udo=r(G5e," (SEW-D model)"),G5e.forEach(t),_do=i(ve),Eh=n(ve,"LI",{});var O5e=s(Eh);sae=n(O5e,"STRONG",{});var Rzr=s(sae);bdo=r(Rzr,"speech_to_text"),Rzr.forEach(t),vdo=r(O5e," \u2014 "),sP=n(O5e,"A",{href:!0});var Bzr=s(sP);Fdo=r(Bzr,"Speech2TextProcessor"),Bzr.forEach(t),Tdo=r(O5e," (Speech2Text model)"),O5e.forEach(t),Mdo=i(ve),Ch=n(ve,"LI",{});var V5e=s(Ch);lae=n(V5e,"STRONG",{});var Pzr=s(lae);Edo=r(Pzr,"speech_to_text_2"),Pzr.forEach(t),Cdo=r(V5e," \u2014 "),lP=n(V5e,"A",{href:!0});var Izr=s(lP);wdo=r(Izr,"Speech2Text2Processor"),Izr.forEach(t),Ado=r(V5e," (Speech2Text2 model)"),V5e.forEach(t),ydo=i(ve),wh=n(ve,"LI",{});var X5e=s(wh);iae=n(X5e,"STRONG",{});var qzr=s(iae);Ldo=r(qzr,"trocr"),qzr.forEach(t),xdo=r(X5e," \u2014 "),iP=n(X5e,"A",{href:!0});var Nzr=s(iP);$do=r(Nzr,"TrOCRProcessor"),Nzr.forEach(t),kdo=r(X5e," (TrOCR model)"),X5e.forEach(t),Sdo=i(ve),Ah=n(ve,"LI",{});var z5e=s(Ah);dae=n(z5e,"STRONG",{});var jzr=s(dae);Rdo=r(jzr,"unispeech"),jzr.forEach(t),Bdo=r(z5e," \u2014 "),dP=n(z5e,"A",{href:!0});var Dzr=s(dP);Pdo=r(Dzr,"Wav2Vec2Processor"),Dzr.forEach(t),Ido=r(z5e," (UniSpeech model)"),z5e.forEach(t),qdo=i(ve),yh=n(ve,"LI",{});var Q5e=s(yh);cae=n(Q5e,"STRONG",{});var Gzr=s(cae);Ndo=r(Gzr,"unispeech-sat"),Gzr.forEach(t),jdo=r(Q5e," \u2014 "),cP=n(Q5e,"A",{href:!0});var Ozr=s(cP);Ddo=r(Ozr,"Wav2Vec2Processor"),Ozr.forEach(t),Gdo=r(Q5e," (UniSpeechSat model)"),Q5e.forEach(t),Odo=i(ve),Lh=n(ve,"LI",{});var W5e=s(Lh);fae=n(W5e,"STRONG",{});var Vzr=s(fae);Vdo=r(Vzr,"vilt"),Vzr.forEach(t),Xdo=r(W5e," \u2014 "),fP=n(W5e,"A",{href:!0});var Xzr=s(fP);zdo=r(Xzr,"ViltProcessor"),Xzr.forEach(t),Qdo=r(W5e," (ViLT model)"),W5e.forEach(t),Wdo=i(ve),xh=n(ve,"LI",{});var H5e=s(xh);mae=n(H5e,"STRONG",{});var zzr=s(mae);Hdo=r(zzr,"vision-text-dual-encoder"),zzr.forEach(t),Udo=r(H5e," \u2014 "),mP=n(H5e,"A",{href:!0});var Qzr=s(mP);Jdo=r(Qzr,"VisionTextDualEncoderProcessor"),Qzr.forEach(t),Ydo=r(H5e," (VisionTextDualEncoder model)"),H5e.forEach(t),Kdo=i(ve),$h=n(ve,"LI",{});var U5e=s($h);gae=n(U5e,"STRONG",{});var Wzr=s(gae);Zdo=r(Wzr,"wav2vec2"),Wzr.forEach(t),eco=r(U5e," \u2014 "),gP=n(U5e,"A",{href:!0});var Hzr=s(gP);oco=r(Hzr,"Wav2Vec2Processor"),Hzr.forEach(t),rco=r(U5e," (Wav2Vec2 model)"),U5e.forEach(t),tco=i(ve),kh=n(ve,"LI",{});var J5e=s(kh);hae=n(J5e,"STRONG",{});var Uzr=s(hae);aco=r(Uzr,"wavlm"),Uzr.forEach(t),nco=r(J5e," \u2014 "),hP=n(J5e,"A",{href:!0});var Jzr=s(hP);sco=r(Jzr,"Wav2Vec2Processor"),Jzr.forEach(t),lco=r(J5e," (WavLM model)"),J5e.forEach(t),ve.forEach(t),ico=i(Ut),T(Sh.$$.fragment,Ut),dco=i(Ut),T(Rh.$$.fragment,Ut),Ut.forEach(t),cco=i(Ps),Bh=n(Ps,"DIV",{class:!0});var lqe=s(Bh);T(tA.$$.fragment,lqe),fco=i(lqe),pae=n(lqe,"P",{});var Yzr=s(pae);mco=r(Yzr,"Register a new processor for this class."),Yzr.forEach(t),lqe.forEach(t),Ps.forEach(t),sPe=i(f),ui=n(f,"H2",{class:!0});var iqe=s(ui);Ph=n(iqe,"A",{id:!0,class:!0,href:!0});var Kzr=s(Ph);uae=n(Kzr,"SPAN",{});var Zzr=s(uae);T(aA.$$.fragment,Zzr),Zzr.forEach(t),Kzr.forEach(t),gco=i(iqe),_ae=n(iqe,"SPAN",{});var eQr=s(_ae);hco=r(eQr,"AutoModel"),eQr.forEach(t),iqe.forEach(t),lPe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(nA.$$.fragment,Is),pco=i(Is),_i=n(Is,"P",{});var RY=s(_i);uco=r(RY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pP=n(RY,"A",{href:!0});var oQr=s(pP);_co=r(oQr,"from_pretrained()"),oQr.forEach(t),bco=r(RY," class method or the "),uP=n(RY,"A",{href:!0});var rQr=s(uP);vco=r(rQr,"from_config()"),rQr.forEach(t),Fco=r(RY,` class
method.`),RY.forEach(t),Tco=i(Is),sA=n(Is,"P",{});var dqe=s(sA);Mco=r(dqe,"This class cannot be instantiated directly using "),bae=n(dqe,"CODE",{});var tQr=s(bae);Eco=r(tQr,"__init__()"),tQr.forEach(t),Cco=r(dqe," (throws an error)."),dqe.forEach(t),wco=i(Is),Zr=n(Is,"DIV",{class:!0});var qC=s(Zr);T(lA.$$.fragment,qC),Aco=i(qC),vae=n(qC,"P",{});var aQr=s(vae);yco=r(aQr,"Instantiates one of the base model classes of the library from a configuration."),aQr.forEach(t),Lco=i(qC),bi=n(qC,"P",{});var BY=s(bi);xco=r(BY,`Note:
Loading a model from its configuration file does `),Fae=n(BY,"STRONG",{});var nQr=s(Fae);$co=r(nQr,"not"),nQr.forEach(t),kco=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_P=n(BY,"A",{href:!0});var sQr=s(_P);Sco=r(sQr,"from_pretrained()"),sQr.forEach(t),Rco=r(BY," to load the model weights."),BY.forEach(t),Bco=i(qC),T(Ih.$$.fragment,qC),qC.forEach(t),Pco=i(Is),He=n(Is,"DIV",{class:!0});var Jt=s(He);T(iA.$$.fragment,Jt),Ico=i(Jt),Tae=n(Jt,"P",{});var lQr=s(Tae);qco=r(lQr,"Instantiate one of the base model classes of the library from a pretrained model."),lQr.forEach(t),Nco=i(Jt),Ea=n(Jt,"P",{});var NC=s(Ea);jco=r(NC,"The model class to instantiate is selected based on the "),Mae=n(NC,"CODE",{});var iQr=s(Mae);Dco=r(iQr,"model_type"),iQr.forEach(t),Gco=r(NC,` property of the config object (either
passed as an argument or loaded from `),Eae=n(NC,"CODE",{});var dQr=s(Eae);Oco=r(dQr,"pretrained_model_name_or_path"),dQr.forEach(t),Vco=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cae=n(NC,"CODE",{});var cQr=s(Cae);Xco=r(cQr,"pretrained_model_name_or_path"),cQr.forEach(t),zco=r(NC,":"),NC.forEach(t),Qco=i(Jt),x=n(Jt,"UL",{});var $=s(x);qh=n($,"LI",{});var Y5e=s(qh);wae=n(Y5e,"STRONG",{});var fQr=s(wae);Wco=r(fQr,"albert"),fQr.forEach(t),Hco=r(Y5e," \u2014 "),bP=n(Y5e,"A",{href:!0});var mQr=s(bP);Uco=r(mQr,"AlbertModel"),mQr.forEach(t),Jco=r(Y5e," (ALBERT model)"),Y5e.forEach(t),Yco=i($),Nh=n($,"LI",{});var K5e=s(Nh);Aae=n(K5e,"STRONG",{});var gQr=s(Aae);Kco=r(gQr,"bart"),gQr.forEach(t),Zco=r(K5e," \u2014 "),vP=n(K5e,"A",{href:!0});var hQr=s(vP);efo=r(hQr,"BartModel"),hQr.forEach(t),ofo=r(K5e," (BART model)"),K5e.forEach(t),rfo=i($),jh=n($,"LI",{});var Z5e=s(jh);yae=n(Z5e,"STRONG",{});var pQr=s(yae);tfo=r(pQr,"beit"),pQr.forEach(t),afo=r(Z5e," \u2014 "),FP=n(Z5e,"A",{href:!0});var uQr=s(FP);nfo=r(uQr,"BeitModel"),uQr.forEach(t),sfo=r(Z5e," (BEiT model)"),Z5e.forEach(t),lfo=i($),Dh=n($,"LI",{});var eCe=s(Dh);Lae=n(eCe,"STRONG",{});var _Qr=s(Lae);ifo=r(_Qr,"bert"),_Qr.forEach(t),dfo=r(eCe," \u2014 "),TP=n(eCe,"A",{href:!0});var bQr=s(TP);cfo=r(bQr,"BertModel"),bQr.forEach(t),ffo=r(eCe," (BERT model)"),eCe.forEach(t),mfo=i($),Gh=n($,"LI",{});var oCe=s(Gh);xae=n(oCe,"STRONG",{});var vQr=s(xae);gfo=r(vQr,"bert-generation"),vQr.forEach(t),hfo=r(oCe," \u2014 "),MP=n(oCe,"A",{href:!0});var FQr=s(MP);pfo=r(FQr,"BertGenerationEncoder"),FQr.forEach(t),ufo=r(oCe," (Bert Generation model)"),oCe.forEach(t),_fo=i($),Oh=n($,"LI",{});var rCe=s(Oh);$ae=n(rCe,"STRONG",{});var TQr=s($ae);bfo=r(TQr,"big_bird"),TQr.forEach(t),vfo=r(rCe," \u2014 "),EP=n(rCe,"A",{href:!0});var MQr=s(EP);Ffo=r(MQr,"BigBirdModel"),MQr.forEach(t),Tfo=r(rCe," (BigBird model)"),rCe.forEach(t),Mfo=i($),Vh=n($,"LI",{});var tCe=s(Vh);kae=n(tCe,"STRONG",{});var EQr=s(kae);Efo=r(EQr,"bigbird_pegasus"),EQr.forEach(t),Cfo=r(tCe," \u2014 "),CP=n(tCe,"A",{href:!0});var CQr=s(CP);wfo=r(CQr,"BigBirdPegasusModel"),CQr.forEach(t),Afo=r(tCe," (BigBirdPegasus model)"),tCe.forEach(t),yfo=i($),Xh=n($,"LI",{});var aCe=s(Xh);Sae=n(aCe,"STRONG",{});var wQr=s(Sae);Lfo=r(wQr,"blenderbot"),wQr.forEach(t),xfo=r(aCe," \u2014 "),wP=n(aCe,"A",{href:!0});var AQr=s(wP);$fo=r(AQr,"BlenderbotModel"),AQr.forEach(t),kfo=r(aCe," (Blenderbot model)"),aCe.forEach(t),Sfo=i($),zh=n($,"LI",{});var nCe=s(zh);Rae=n(nCe,"STRONG",{});var yQr=s(Rae);Rfo=r(yQr,"blenderbot-small"),yQr.forEach(t),Bfo=r(nCe," \u2014 "),AP=n(nCe,"A",{href:!0});var LQr=s(AP);Pfo=r(LQr,"BlenderbotSmallModel"),LQr.forEach(t),Ifo=r(nCe," (BlenderbotSmall model)"),nCe.forEach(t),qfo=i($),Qh=n($,"LI",{});var sCe=s(Qh);Bae=n(sCe,"STRONG",{});var xQr=s(Bae);Nfo=r(xQr,"camembert"),xQr.forEach(t),jfo=r(sCe," \u2014 "),yP=n(sCe,"A",{href:!0});var $Qr=s(yP);Dfo=r($Qr,"CamembertModel"),$Qr.forEach(t),Gfo=r(sCe," (CamemBERT model)"),sCe.forEach(t),Ofo=i($),Wh=n($,"LI",{});var lCe=s(Wh);Pae=n(lCe,"STRONG",{});var kQr=s(Pae);Vfo=r(kQr,"canine"),kQr.forEach(t),Xfo=r(lCe," \u2014 "),LP=n(lCe,"A",{href:!0});var SQr=s(LP);zfo=r(SQr,"CanineModel"),SQr.forEach(t),Qfo=r(lCe," (Canine model)"),lCe.forEach(t),Wfo=i($),Hh=n($,"LI",{});var iCe=s(Hh);Iae=n(iCe,"STRONG",{});var RQr=s(Iae);Hfo=r(RQr,"clip"),RQr.forEach(t),Ufo=r(iCe," \u2014 "),xP=n(iCe,"A",{href:!0});var BQr=s(xP);Jfo=r(BQr,"CLIPModel"),BQr.forEach(t),Yfo=r(iCe," (CLIP model)"),iCe.forEach(t),Kfo=i($),Uh=n($,"LI",{});var dCe=s(Uh);qae=n(dCe,"STRONG",{});var PQr=s(qae);Zfo=r(PQr,"convbert"),PQr.forEach(t),emo=r(dCe," \u2014 "),$P=n(dCe,"A",{href:!0});var IQr=s($P);omo=r(IQr,"ConvBertModel"),IQr.forEach(t),rmo=r(dCe," (ConvBERT model)"),dCe.forEach(t),tmo=i($),Jh=n($,"LI",{});var cCe=s(Jh);Nae=n(cCe,"STRONG",{});var qQr=s(Nae);amo=r(qQr,"convnext"),qQr.forEach(t),nmo=r(cCe," \u2014 "),kP=n(cCe,"A",{href:!0});var NQr=s(kP);smo=r(NQr,"ConvNextModel"),NQr.forEach(t),lmo=r(cCe," (ConvNext model)"),cCe.forEach(t),imo=i($),Yh=n($,"LI",{});var fCe=s(Yh);jae=n(fCe,"STRONG",{});var jQr=s(jae);dmo=r(jQr,"ctrl"),jQr.forEach(t),cmo=r(fCe," \u2014 "),SP=n(fCe,"A",{href:!0});var DQr=s(SP);fmo=r(DQr,"CTRLModel"),DQr.forEach(t),mmo=r(fCe," (CTRL model)"),fCe.forEach(t),gmo=i($),Kh=n($,"LI",{});var mCe=s(Kh);Dae=n(mCe,"STRONG",{});var GQr=s(Dae);hmo=r(GQr,"data2vec-audio"),GQr.forEach(t),pmo=r(mCe," \u2014 "),RP=n(mCe,"A",{href:!0});var OQr=s(RP);umo=r(OQr,"Data2VecAudioModel"),OQr.forEach(t),_mo=r(mCe," (Data2VecAudio model)"),mCe.forEach(t),bmo=i($),Zh=n($,"LI",{});var gCe=s(Zh);Gae=n(gCe,"STRONG",{});var VQr=s(Gae);vmo=r(VQr,"data2vec-text"),VQr.forEach(t),Fmo=r(gCe," \u2014 "),BP=n(gCe,"A",{href:!0});var XQr=s(BP);Tmo=r(XQr,"Data2VecTextModel"),XQr.forEach(t),Mmo=r(gCe," (Data2VecText model)"),gCe.forEach(t),Emo=i($),ep=n($,"LI",{});var hCe=s(ep);Oae=n(hCe,"STRONG",{});var zQr=s(Oae);Cmo=r(zQr,"data2vec-vision"),zQr.forEach(t),wmo=r(hCe," \u2014 "),PP=n(hCe,"A",{href:!0});var QQr=s(PP);Amo=r(QQr,"Data2VecVisionModel"),QQr.forEach(t),ymo=r(hCe," (Data2VecVision model)"),hCe.forEach(t),Lmo=i($),op=n($,"LI",{});var pCe=s(op);Vae=n(pCe,"STRONG",{});var WQr=s(Vae);xmo=r(WQr,"deberta"),WQr.forEach(t),$mo=r(pCe," \u2014 "),IP=n(pCe,"A",{href:!0});var HQr=s(IP);kmo=r(HQr,"DebertaModel"),HQr.forEach(t),Smo=r(pCe," (DeBERTa model)"),pCe.forEach(t),Rmo=i($),rp=n($,"LI",{});var uCe=s(rp);Xae=n(uCe,"STRONG",{});var UQr=s(Xae);Bmo=r(UQr,"deberta-v2"),UQr.forEach(t),Pmo=r(uCe," \u2014 "),qP=n(uCe,"A",{href:!0});var JQr=s(qP);Imo=r(JQr,"DebertaV2Model"),JQr.forEach(t),qmo=r(uCe," (DeBERTa-v2 model)"),uCe.forEach(t),Nmo=i($),tp=n($,"LI",{});var _Ce=s(tp);zae=n(_Ce,"STRONG",{});var YQr=s(zae);jmo=r(YQr,"decision_transformer"),YQr.forEach(t),Dmo=r(_Ce," \u2014 "),NP=n(_Ce,"A",{href:!0});var KQr=s(NP);Gmo=r(KQr,"DecisionTransformerModel"),KQr.forEach(t),Omo=r(_Ce," (Decision Transformer model)"),_Ce.forEach(t),Vmo=i($),ap=n($,"LI",{});var bCe=s(ap);Qae=n(bCe,"STRONG",{});var ZQr=s(Qae);Xmo=r(ZQr,"deit"),ZQr.forEach(t),zmo=r(bCe," \u2014 "),jP=n(bCe,"A",{href:!0});var eWr=s(jP);Qmo=r(eWr,"DeiTModel"),eWr.forEach(t),Wmo=r(bCe," (DeiT model)"),bCe.forEach(t),Hmo=i($),np=n($,"LI",{});var vCe=s(np);Wae=n(vCe,"STRONG",{});var oWr=s(Wae);Umo=r(oWr,"detr"),oWr.forEach(t),Jmo=r(vCe," \u2014 "),DP=n(vCe,"A",{href:!0});var rWr=s(DP);Ymo=r(rWr,"DetrModel"),rWr.forEach(t),Kmo=r(vCe," (DETR model)"),vCe.forEach(t),Zmo=i($),sp=n($,"LI",{});var FCe=s(sp);Hae=n(FCe,"STRONG",{});var tWr=s(Hae);ego=r(tWr,"distilbert"),tWr.forEach(t),ogo=r(FCe," \u2014 "),GP=n(FCe,"A",{href:!0});var aWr=s(GP);rgo=r(aWr,"DistilBertModel"),aWr.forEach(t),tgo=r(FCe," (DistilBERT model)"),FCe.forEach(t),ago=i($),lp=n($,"LI",{});var TCe=s(lp);Uae=n(TCe,"STRONG",{});var nWr=s(Uae);ngo=r(nWr,"dpr"),nWr.forEach(t),sgo=r(TCe," \u2014 "),OP=n(TCe,"A",{href:!0});var sWr=s(OP);lgo=r(sWr,"DPRQuestionEncoder"),sWr.forEach(t),igo=r(TCe," (DPR model)"),TCe.forEach(t),dgo=i($),ip=n($,"LI",{});var MCe=s(ip);Jae=n(MCe,"STRONG",{});var lWr=s(Jae);cgo=r(lWr,"dpt"),lWr.forEach(t),fgo=r(MCe," \u2014 "),VP=n(MCe,"A",{href:!0});var iWr=s(VP);mgo=r(iWr,"DPTModel"),iWr.forEach(t),ggo=r(MCe," (DPT model)"),MCe.forEach(t),hgo=i($),dp=n($,"LI",{});var ECe=s(dp);Yae=n(ECe,"STRONG",{});var dWr=s(Yae);pgo=r(dWr,"electra"),dWr.forEach(t),ugo=r(ECe," \u2014 "),XP=n(ECe,"A",{href:!0});var cWr=s(XP);_go=r(cWr,"ElectraModel"),cWr.forEach(t),bgo=r(ECe," (ELECTRA model)"),ECe.forEach(t),vgo=i($),cp=n($,"LI",{});var CCe=s(cp);Kae=n(CCe,"STRONG",{});var fWr=s(Kae);Fgo=r(fWr,"flaubert"),fWr.forEach(t),Tgo=r(CCe," \u2014 "),zP=n(CCe,"A",{href:!0});var mWr=s(zP);Mgo=r(mWr,"FlaubertModel"),mWr.forEach(t),Ego=r(CCe," (FlauBERT model)"),CCe.forEach(t),Cgo=i($),fp=n($,"LI",{});var wCe=s(fp);Zae=n(wCe,"STRONG",{});var gWr=s(Zae);wgo=r(gWr,"fnet"),gWr.forEach(t),Ago=r(wCe," \u2014 "),QP=n(wCe,"A",{href:!0});var hWr=s(QP);ygo=r(hWr,"FNetModel"),hWr.forEach(t),Lgo=r(wCe," (FNet model)"),wCe.forEach(t),xgo=i($),mp=n($,"LI",{});var ACe=s(mp);ene=n(ACe,"STRONG",{});var pWr=s(ene);$go=r(pWr,"fsmt"),pWr.forEach(t),kgo=r(ACe," \u2014 "),WP=n(ACe,"A",{href:!0});var uWr=s(WP);Sgo=r(uWr,"FSMTModel"),uWr.forEach(t),Rgo=r(ACe," (FairSeq Machine-Translation model)"),ACe.forEach(t),Bgo=i($),xs=n($,"LI",{});var G9=s(xs);one=n(G9,"STRONG",{});var _Wr=s(one);Pgo=r(_Wr,"funnel"),_Wr.forEach(t),Igo=r(G9," \u2014 "),HP=n(G9,"A",{href:!0});var bWr=s(HP);qgo=r(bWr,"FunnelModel"),bWr.forEach(t),Ngo=r(G9," or "),UP=n(G9,"A",{href:!0});var vWr=s(UP);jgo=r(vWr,"FunnelBaseModel"),vWr.forEach(t),Dgo=r(G9," (Funnel Transformer model)"),G9.forEach(t),Ggo=i($),gp=n($,"LI",{});var yCe=s(gp);rne=n(yCe,"STRONG",{});var FWr=s(rne);Ogo=r(FWr,"glpn"),FWr.forEach(t),Vgo=r(yCe," \u2014 "),JP=n(yCe,"A",{href:!0});var TWr=s(JP);Xgo=r(TWr,"GLPNModel"),TWr.forEach(t),zgo=r(yCe," (GLPN model)"),yCe.forEach(t),Qgo=i($),hp=n($,"LI",{});var LCe=s(hp);tne=n(LCe,"STRONG",{});var MWr=s(tne);Wgo=r(MWr,"gpt2"),MWr.forEach(t),Hgo=r(LCe," \u2014 "),YP=n(LCe,"A",{href:!0});var EWr=s(YP);Ugo=r(EWr,"GPT2Model"),EWr.forEach(t),Jgo=r(LCe," (OpenAI GPT-2 model)"),LCe.forEach(t),Ygo=i($),pp=n($,"LI",{});var xCe=s(pp);ane=n(xCe,"STRONG",{});var CWr=s(ane);Kgo=r(CWr,"gpt_neo"),CWr.forEach(t),Zgo=r(xCe," \u2014 "),KP=n(xCe,"A",{href:!0});var wWr=s(KP);eho=r(wWr,"GPTNeoModel"),wWr.forEach(t),oho=r(xCe," (GPT Neo model)"),xCe.forEach(t),rho=i($),up=n($,"LI",{});var $Ce=s(up);nne=n($Ce,"STRONG",{});var AWr=s(nne);tho=r(AWr,"gptj"),AWr.forEach(t),aho=r($Ce," \u2014 "),ZP=n($Ce,"A",{href:!0});var yWr=s(ZP);nho=r(yWr,"GPTJModel"),yWr.forEach(t),sho=r($Ce," (GPT-J model)"),$Ce.forEach(t),lho=i($),_p=n($,"LI",{});var kCe=s(_p);sne=n(kCe,"STRONG",{});var LWr=s(sne);iho=r(LWr,"hubert"),LWr.forEach(t),dho=r(kCe," \u2014 "),eI=n(kCe,"A",{href:!0});var xWr=s(eI);cho=r(xWr,"HubertModel"),xWr.forEach(t),fho=r(kCe," (Hubert model)"),kCe.forEach(t),mho=i($),bp=n($,"LI",{});var SCe=s(bp);lne=n(SCe,"STRONG",{});var $Wr=s(lne);gho=r($Wr,"ibert"),$Wr.forEach(t),hho=r(SCe," \u2014 "),oI=n(SCe,"A",{href:!0});var kWr=s(oI);pho=r(kWr,"IBertModel"),kWr.forEach(t),uho=r(SCe," (I-BERT model)"),SCe.forEach(t),_ho=i($),vp=n($,"LI",{});var RCe=s(vp);ine=n(RCe,"STRONG",{});var SWr=s(ine);bho=r(SWr,"imagegpt"),SWr.forEach(t),vho=r(RCe," \u2014 "),rI=n(RCe,"A",{href:!0});var RWr=s(rI);Fho=r(RWr,"ImageGPTModel"),RWr.forEach(t),Tho=r(RCe," (ImageGPT model)"),RCe.forEach(t),Mho=i($),Fp=n($,"LI",{});var BCe=s(Fp);dne=n(BCe,"STRONG",{});var BWr=s(dne);Eho=r(BWr,"layoutlm"),BWr.forEach(t),Cho=r(BCe," \u2014 "),tI=n(BCe,"A",{href:!0});var PWr=s(tI);who=r(PWr,"LayoutLMModel"),PWr.forEach(t),Aho=r(BCe," (LayoutLM model)"),BCe.forEach(t),yho=i($),Tp=n($,"LI",{});var PCe=s(Tp);cne=n(PCe,"STRONG",{});var IWr=s(cne);Lho=r(IWr,"layoutlmv2"),IWr.forEach(t),xho=r(PCe," \u2014 "),aI=n(PCe,"A",{href:!0});var qWr=s(aI);$ho=r(qWr,"LayoutLMv2Model"),qWr.forEach(t),kho=r(PCe," (LayoutLMv2 model)"),PCe.forEach(t),Sho=i($),Mp=n($,"LI",{});var ICe=s(Mp);fne=n(ICe,"STRONG",{});var NWr=s(fne);Rho=r(NWr,"layoutlmv3"),NWr.forEach(t),Bho=r(ICe," \u2014 "),nI=n(ICe,"A",{href:!0});var jWr=s(nI);Pho=r(jWr,"LayoutLMv3Model"),jWr.forEach(t),Iho=r(ICe," (LayoutLMv3 model)"),ICe.forEach(t),qho=i($),Ep=n($,"LI",{});var qCe=s(Ep);mne=n(qCe,"STRONG",{});var DWr=s(mne);Nho=r(DWr,"led"),DWr.forEach(t),jho=r(qCe," \u2014 "),sI=n(qCe,"A",{href:!0});var GWr=s(sI);Dho=r(GWr,"LEDModel"),GWr.forEach(t),Gho=r(qCe," (LED model)"),qCe.forEach(t),Oho=i($),Cp=n($,"LI",{});var NCe=s(Cp);gne=n(NCe,"STRONG",{});var OWr=s(gne);Vho=r(OWr,"longformer"),OWr.forEach(t),Xho=r(NCe," \u2014 "),lI=n(NCe,"A",{href:!0});var VWr=s(lI);zho=r(VWr,"LongformerModel"),VWr.forEach(t),Qho=r(NCe," (Longformer model)"),NCe.forEach(t),Who=i($),wp=n($,"LI",{});var jCe=s(wp);hne=n(jCe,"STRONG",{});var XWr=s(hne);Hho=r(XWr,"luke"),XWr.forEach(t),Uho=r(jCe," \u2014 "),iI=n(jCe,"A",{href:!0});var zWr=s(iI);Jho=r(zWr,"LukeModel"),zWr.forEach(t),Yho=r(jCe," (LUKE model)"),jCe.forEach(t),Kho=i($),Ap=n($,"LI",{});var DCe=s(Ap);pne=n(DCe,"STRONG",{});var QWr=s(pne);Zho=r(QWr,"lxmert"),QWr.forEach(t),epo=r(DCe," \u2014 "),dI=n(DCe,"A",{href:!0});var WWr=s(dI);opo=r(WWr,"LxmertModel"),WWr.forEach(t),rpo=r(DCe," (LXMERT model)"),DCe.forEach(t),tpo=i($),yp=n($,"LI",{});var GCe=s(yp);une=n(GCe,"STRONG",{});var HWr=s(une);apo=r(HWr,"m2m_100"),HWr.forEach(t),npo=r(GCe," \u2014 "),cI=n(GCe,"A",{href:!0});var UWr=s(cI);spo=r(UWr,"M2M100Model"),UWr.forEach(t),lpo=r(GCe," (M2M100 model)"),GCe.forEach(t),ipo=i($),Lp=n($,"LI",{});var OCe=s(Lp);_ne=n(OCe,"STRONG",{});var JWr=s(_ne);dpo=r(JWr,"marian"),JWr.forEach(t),cpo=r(OCe," \u2014 "),fI=n(OCe,"A",{href:!0});var YWr=s(fI);fpo=r(YWr,"MarianModel"),YWr.forEach(t),mpo=r(OCe," (Marian model)"),OCe.forEach(t),gpo=i($),xp=n($,"LI",{});var VCe=s(xp);bne=n(VCe,"STRONG",{});var KWr=s(bne);hpo=r(KWr,"maskformer"),KWr.forEach(t),ppo=r(VCe," \u2014 "),mI=n(VCe,"A",{href:!0});var ZWr=s(mI);upo=r(ZWr,"MaskFormerModel"),ZWr.forEach(t),_po=r(VCe," (MaskFormer model)"),VCe.forEach(t),bpo=i($),$p=n($,"LI",{});var XCe=s($p);vne=n(XCe,"STRONG",{});var eHr=s(vne);vpo=r(eHr,"mbart"),eHr.forEach(t),Fpo=r(XCe," \u2014 "),gI=n(XCe,"A",{href:!0});var oHr=s(gI);Tpo=r(oHr,"MBartModel"),oHr.forEach(t),Mpo=r(XCe," (mBART model)"),XCe.forEach(t),Epo=i($),kp=n($,"LI",{});var zCe=s(kp);Fne=n(zCe,"STRONG",{});var rHr=s(Fne);Cpo=r(rHr,"megatron-bert"),rHr.forEach(t),wpo=r(zCe," \u2014 "),hI=n(zCe,"A",{href:!0});var tHr=s(hI);Apo=r(tHr,"MegatronBertModel"),tHr.forEach(t),ypo=r(zCe," (MegatronBert model)"),zCe.forEach(t),Lpo=i($),Sp=n($,"LI",{});var QCe=s(Sp);Tne=n(QCe,"STRONG",{});var aHr=s(Tne);xpo=r(aHr,"mobilebert"),aHr.forEach(t),$po=r(QCe," \u2014 "),pI=n(QCe,"A",{href:!0});var nHr=s(pI);kpo=r(nHr,"MobileBertModel"),nHr.forEach(t),Spo=r(QCe," (MobileBERT model)"),QCe.forEach(t),Rpo=i($),Rp=n($,"LI",{});var WCe=s(Rp);Mne=n(WCe,"STRONG",{});var sHr=s(Mne);Bpo=r(sHr,"mpnet"),sHr.forEach(t),Ppo=r(WCe," \u2014 "),uI=n(WCe,"A",{href:!0});var lHr=s(uI);Ipo=r(lHr,"MPNetModel"),lHr.forEach(t),qpo=r(WCe," (MPNet model)"),WCe.forEach(t),Npo=i($),Bp=n($,"LI",{});var HCe=s(Bp);Ene=n(HCe,"STRONG",{});var iHr=s(Ene);jpo=r(iHr,"mt5"),iHr.forEach(t),Dpo=r(HCe," \u2014 "),_I=n(HCe,"A",{href:!0});var dHr=s(_I);Gpo=r(dHr,"MT5Model"),dHr.forEach(t),Opo=r(HCe," (mT5 model)"),HCe.forEach(t),Vpo=i($),Pp=n($,"LI",{});var UCe=s(Pp);Cne=n(UCe,"STRONG",{});var cHr=s(Cne);Xpo=r(cHr,"nystromformer"),cHr.forEach(t),zpo=r(UCe," \u2014 "),bI=n(UCe,"A",{href:!0});var fHr=s(bI);Qpo=r(fHr,"NystromformerModel"),fHr.forEach(t),Wpo=r(UCe," (Nystromformer model)"),UCe.forEach(t),Hpo=i($),Ip=n($,"LI",{});var JCe=s(Ip);wne=n(JCe,"STRONG",{});var mHr=s(wne);Upo=r(mHr,"openai-gpt"),mHr.forEach(t),Jpo=r(JCe," \u2014 "),vI=n(JCe,"A",{href:!0});var gHr=s(vI);Ypo=r(gHr,"OpenAIGPTModel"),gHr.forEach(t),Kpo=r(JCe," (OpenAI GPT model)"),JCe.forEach(t),Zpo=i($),qp=n($,"LI",{});var YCe=s(qp);Ane=n(YCe,"STRONG",{});var hHr=s(Ane);euo=r(hHr,"pegasus"),hHr.forEach(t),ouo=r(YCe," \u2014 "),FI=n(YCe,"A",{href:!0});var pHr=s(FI);ruo=r(pHr,"PegasusModel"),pHr.forEach(t),tuo=r(YCe," (Pegasus model)"),YCe.forEach(t),auo=i($),Np=n($,"LI",{});var KCe=s(Np);yne=n(KCe,"STRONG",{});var uHr=s(yne);nuo=r(uHr,"perceiver"),uHr.forEach(t),suo=r(KCe," \u2014 "),TI=n(KCe,"A",{href:!0});var _Hr=s(TI);luo=r(_Hr,"PerceiverModel"),_Hr.forEach(t),iuo=r(KCe," (Perceiver model)"),KCe.forEach(t),duo=i($),jp=n($,"LI",{});var ZCe=s(jp);Lne=n(ZCe,"STRONG",{});var bHr=s(Lne);cuo=r(bHr,"plbart"),bHr.forEach(t),fuo=r(ZCe," \u2014 "),MI=n(ZCe,"A",{href:!0});var vHr=s(MI);muo=r(vHr,"PLBartModel"),vHr.forEach(t),guo=r(ZCe," (PLBart model)"),ZCe.forEach(t),huo=i($),Dp=n($,"LI",{});var e3e=s(Dp);xne=n(e3e,"STRONG",{});var FHr=s(xne);puo=r(FHr,"poolformer"),FHr.forEach(t),uuo=r(e3e," \u2014 "),EI=n(e3e,"A",{href:!0});var THr=s(EI);_uo=r(THr,"PoolFormerModel"),THr.forEach(t),buo=r(e3e," (PoolFormer model)"),e3e.forEach(t),vuo=i($),Gp=n($,"LI",{});var o3e=s(Gp);$ne=n(o3e,"STRONG",{});var MHr=s($ne);Fuo=r(MHr,"prophetnet"),MHr.forEach(t),Tuo=r(o3e," \u2014 "),CI=n(o3e,"A",{href:!0});var EHr=s(CI);Muo=r(EHr,"ProphetNetModel"),EHr.forEach(t),Euo=r(o3e," (ProphetNet model)"),o3e.forEach(t),Cuo=i($),Op=n($,"LI",{});var r3e=s(Op);kne=n(r3e,"STRONG",{});var CHr=s(kne);wuo=r(CHr,"qdqbert"),CHr.forEach(t),Auo=r(r3e," \u2014 "),wI=n(r3e,"A",{href:!0});var wHr=s(wI);yuo=r(wHr,"QDQBertModel"),wHr.forEach(t),Luo=r(r3e," (QDQBert model)"),r3e.forEach(t),xuo=i($),Vp=n($,"LI",{});var t3e=s(Vp);Sne=n(t3e,"STRONG",{});var AHr=s(Sne);$uo=r(AHr,"reformer"),AHr.forEach(t),kuo=r(t3e," \u2014 "),AI=n(t3e,"A",{href:!0});var yHr=s(AI);Suo=r(yHr,"ReformerModel"),yHr.forEach(t),Ruo=r(t3e," (Reformer model)"),t3e.forEach(t),Buo=i($),Xp=n($,"LI",{});var a3e=s(Xp);Rne=n(a3e,"STRONG",{});var LHr=s(Rne);Puo=r(LHr,"regnet"),LHr.forEach(t),Iuo=r(a3e," \u2014 "),yI=n(a3e,"A",{href:!0});var xHr=s(yI);quo=r(xHr,"RegNetModel"),xHr.forEach(t),Nuo=r(a3e," (RegNet model)"),a3e.forEach(t),juo=i($),zp=n($,"LI",{});var n3e=s(zp);Bne=n(n3e,"STRONG",{});var $Hr=s(Bne);Duo=r($Hr,"rembert"),$Hr.forEach(t),Guo=r(n3e," \u2014 "),LI=n(n3e,"A",{href:!0});var kHr=s(LI);Ouo=r(kHr,"RemBertModel"),kHr.forEach(t),Vuo=r(n3e," (RemBERT model)"),n3e.forEach(t),Xuo=i($),Qp=n($,"LI",{});var s3e=s(Qp);Pne=n(s3e,"STRONG",{});var SHr=s(Pne);zuo=r(SHr,"resnet"),SHr.forEach(t),Quo=r(s3e," \u2014 "),xI=n(s3e,"A",{href:!0});var RHr=s(xI);Wuo=r(RHr,"ResNetModel"),RHr.forEach(t),Huo=r(s3e," (ResNet model)"),s3e.forEach(t),Uuo=i($),Wp=n($,"LI",{});var l3e=s(Wp);Ine=n(l3e,"STRONG",{});var BHr=s(Ine);Juo=r(BHr,"retribert"),BHr.forEach(t),Yuo=r(l3e," \u2014 "),$I=n(l3e,"A",{href:!0});var PHr=s($I);Kuo=r(PHr,"RetriBertModel"),PHr.forEach(t),Zuo=r(l3e," (RetriBERT model)"),l3e.forEach(t),e_o=i($),Hp=n($,"LI",{});var i3e=s(Hp);qne=n(i3e,"STRONG",{});var IHr=s(qne);o_o=r(IHr,"roberta"),IHr.forEach(t),r_o=r(i3e," \u2014 "),kI=n(i3e,"A",{href:!0});var qHr=s(kI);t_o=r(qHr,"RobertaModel"),qHr.forEach(t),a_o=r(i3e," (RoBERTa model)"),i3e.forEach(t),n_o=i($),Up=n($,"LI",{});var d3e=s(Up);Nne=n(d3e,"STRONG",{});var NHr=s(Nne);s_o=r(NHr,"roformer"),NHr.forEach(t),l_o=r(d3e," \u2014 "),SI=n(d3e,"A",{href:!0});var jHr=s(SI);i_o=r(jHr,"RoFormerModel"),jHr.forEach(t),d_o=r(d3e," (RoFormer model)"),d3e.forEach(t),c_o=i($),Jp=n($,"LI",{});var c3e=s(Jp);jne=n(c3e,"STRONG",{});var DHr=s(jne);f_o=r(DHr,"segformer"),DHr.forEach(t),m_o=r(c3e," \u2014 "),RI=n(c3e,"A",{href:!0});var GHr=s(RI);g_o=r(GHr,"SegformerModel"),GHr.forEach(t),h_o=r(c3e," (SegFormer model)"),c3e.forEach(t),p_o=i($),Yp=n($,"LI",{});var f3e=s(Yp);Dne=n(f3e,"STRONG",{});var OHr=s(Dne);u_o=r(OHr,"sew"),OHr.forEach(t),__o=r(f3e," \u2014 "),BI=n(f3e,"A",{href:!0});var VHr=s(BI);b_o=r(VHr,"SEWModel"),VHr.forEach(t),v_o=r(f3e," (SEW model)"),f3e.forEach(t),F_o=i($),Kp=n($,"LI",{});var m3e=s(Kp);Gne=n(m3e,"STRONG",{});var XHr=s(Gne);T_o=r(XHr,"sew-d"),XHr.forEach(t),M_o=r(m3e," \u2014 "),PI=n(m3e,"A",{href:!0});var zHr=s(PI);E_o=r(zHr,"SEWDModel"),zHr.forEach(t),C_o=r(m3e," (SEW-D model)"),m3e.forEach(t),w_o=i($),Zp=n($,"LI",{});var g3e=s(Zp);One=n(g3e,"STRONG",{});var QHr=s(One);A_o=r(QHr,"speech_to_text"),QHr.forEach(t),y_o=r(g3e," \u2014 "),II=n(g3e,"A",{href:!0});var WHr=s(II);L_o=r(WHr,"Speech2TextModel"),WHr.forEach(t),x_o=r(g3e," (Speech2Text model)"),g3e.forEach(t),$_o=i($),eu=n($,"LI",{});var h3e=s(eu);Vne=n(h3e,"STRONG",{});var HHr=s(Vne);k_o=r(HHr,"splinter"),HHr.forEach(t),S_o=r(h3e," \u2014 "),qI=n(h3e,"A",{href:!0});var UHr=s(qI);R_o=r(UHr,"SplinterModel"),UHr.forEach(t),B_o=r(h3e," (Splinter model)"),h3e.forEach(t),P_o=i($),ou=n($,"LI",{});var p3e=s(ou);Xne=n(p3e,"STRONG",{});var JHr=s(Xne);I_o=r(JHr,"squeezebert"),JHr.forEach(t),q_o=r(p3e," \u2014 "),NI=n(p3e,"A",{href:!0});var YHr=s(NI);N_o=r(YHr,"SqueezeBertModel"),YHr.forEach(t),j_o=r(p3e," (SqueezeBERT model)"),p3e.forEach(t),D_o=i($),ru=n($,"LI",{});var u3e=s(ru);zne=n(u3e,"STRONG",{});var KHr=s(zne);G_o=r(KHr,"swin"),KHr.forEach(t),O_o=r(u3e," \u2014 "),jI=n(u3e,"A",{href:!0});var ZHr=s(jI);V_o=r(ZHr,"SwinModel"),ZHr.forEach(t),X_o=r(u3e," (Swin model)"),u3e.forEach(t),z_o=i($),tu=n($,"LI",{});var _3e=s(tu);Qne=n(_3e,"STRONG",{});var eUr=s(Qne);Q_o=r(eUr,"t5"),eUr.forEach(t),W_o=r(_3e," \u2014 "),DI=n(_3e,"A",{href:!0});var oUr=s(DI);H_o=r(oUr,"T5Model"),oUr.forEach(t),U_o=r(_3e," (T5 model)"),_3e.forEach(t),J_o=i($),au=n($,"LI",{});var b3e=s(au);Wne=n(b3e,"STRONG",{});var rUr=s(Wne);Y_o=r(rUr,"tapas"),rUr.forEach(t),K_o=r(b3e," \u2014 "),GI=n(b3e,"A",{href:!0});var tUr=s(GI);Z_o=r(tUr,"TapasModel"),tUr.forEach(t),e0o=r(b3e," (TAPAS model)"),b3e.forEach(t),o0o=i($),nu=n($,"LI",{});var v3e=s(nu);Hne=n(v3e,"STRONG",{});var aUr=s(Hne);r0o=r(aUr,"transfo-xl"),aUr.forEach(t),t0o=r(v3e," \u2014 "),OI=n(v3e,"A",{href:!0});var nUr=s(OI);a0o=r(nUr,"TransfoXLModel"),nUr.forEach(t),n0o=r(v3e," (Transformer-XL model)"),v3e.forEach(t),s0o=i($),su=n($,"LI",{});var F3e=s(su);Une=n(F3e,"STRONG",{});var sUr=s(Une);l0o=r(sUr,"unispeech"),sUr.forEach(t),i0o=r(F3e," \u2014 "),VI=n(F3e,"A",{href:!0});var lUr=s(VI);d0o=r(lUr,"UniSpeechModel"),lUr.forEach(t),c0o=r(F3e," (UniSpeech model)"),F3e.forEach(t),f0o=i($),lu=n($,"LI",{});var T3e=s(lu);Jne=n(T3e,"STRONG",{});var iUr=s(Jne);m0o=r(iUr,"unispeech-sat"),iUr.forEach(t),g0o=r(T3e," \u2014 "),XI=n(T3e,"A",{href:!0});var dUr=s(XI);h0o=r(dUr,"UniSpeechSatModel"),dUr.forEach(t),p0o=r(T3e," (UniSpeechSat model)"),T3e.forEach(t),u0o=i($),iu=n($,"LI",{});var M3e=s(iu);Yne=n(M3e,"STRONG",{});var cUr=s(Yne);_0o=r(cUr,"van"),cUr.forEach(t),b0o=r(M3e," \u2014 "),zI=n(M3e,"A",{href:!0});var fUr=s(zI);v0o=r(fUr,"VanModel"),fUr.forEach(t),F0o=r(M3e," (VAN model)"),M3e.forEach(t),T0o=i($),du=n($,"LI",{});var E3e=s(du);Kne=n(E3e,"STRONG",{});var mUr=s(Kne);M0o=r(mUr,"vilt"),mUr.forEach(t),E0o=r(E3e," \u2014 "),QI=n(E3e,"A",{href:!0});var gUr=s(QI);C0o=r(gUr,"ViltModel"),gUr.forEach(t),w0o=r(E3e," (ViLT model)"),E3e.forEach(t),A0o=i($),cu=n($,"LI",{});var C3e=s(cu);Zne=n(C3e,"STRONG",{});var hUr=s(Zne);y0o=r(hUr,"vision-text-dual-encoder"),hUr.forEach(t),L0o=r(C3e," \u2014 "),WI=n(C3e,"A",{href:!0});var pUr=s(WI);x0o=r(pUr,"VisionTextDualEncoderModel"),pUr.forEach(t),$0o=r(C3e," (VisionTextDualEncoder model)"),C3e.forEach(t),k0o=i($),fu=n($,"LI",{});var w3e=s(fu);ese=n(w3e,"STRONG",{});var uUr=s(ese);S0o=r(uUr,"visual_bert"),uUr.forEach(t),R0o=r(w3e," \u2014 "),HI=n(w3e,"A",{href:!0});var _Ur=s(HI);B0o=r(_Ur,"VisualBertModel"),_Ur.forEach(t),P0o=r(w3e," (VisualBert model)"),w3e.forEach(t),I0o=i($),mu=n($,"LI",{});var A3e=s(mu);ose=n(A3e,"STRONG",{});var bUr=s(ose);q0o=r(bUr,"vit"),bUr.forEach(t),N0o=r(A3e," \u2014 "),UI=n(A3e,"A",{href:!0});var vUr=s(UI);j0o=r(vUr,"ViTModel"),vUr.forEach(t),D0o=r(A3e," (ViT model)"),A3e.forEach(t),G0o=i($),gu=n($,"LI",{});var y3e=s(gu);rse=n(y3e,"STRONG",{});var FUr=s(rse);O0o=r(FUr,"vit_mae"),FUr.forEach(t),V0o=r(y3e," \u2014 "),JI=n(y3e,"A",{href:!0});var TUr=s(JI);X0o=r(TUr,"ViTMAEModel"),TUr.forEach(t),z0o=r(y3e," (ViTMAE model)"),y3e.forEach(t),Q0o=i($),hu=n($,"LI",{});var L3e=s(hu);tse=n(L3e,"STRONG",{});var MUr=s(tse);W0o=r(MUr,"wav2vec2"),MUr.forEach(t),H0o=r(L3e," \u2014 "),YI=n(L3e,"A",{href:!0});var EUr=s(YI);U0o=r(EUr,"Wav2Vec2Model"),EUr.forEach(t),J0o=r(L3e," (Wav2Vec2 model)"),L3e.forEach(t),Y0o=i($),pu=n($,"LI",{});var x3e=s(pu);ase=n(x3e,"STRONG",{});var CUr=s(ase);K0o=r(CUr,"wavlm"),CUr.forEach(t),Z0o=r(x3e," \u2014 "),KI=n(x3e,"A",{href:!0});var wUr=s(KI);e1o=r(wUr,"WavLMModel"),wUr.forEach(t),o1o=r(x3e," (WavLM model)"),x3e.forEach(t),r1o=i($),uu=n($,"LI",{});var $3e=s(uu);nse=n($3e,"STRONG",{});var AUr=s(nse);t1o=r(AUr,"xglm"),AUr.forEach(t),a1o=r($3e," \u2014 "),ZI=n($3e,"A",{href:!0});var yUr=s(ZI);n1o=r(yUr,"XGLMModel"),yUr.forEach(t),s1o=r($3e," (XGLM model)"),$3e.forEach(t),l1o=i($),_u=n($,"LI",{});var k3e=s(_u);sse=n(k3e,"STRONG",{});var LUr=s(sse);i1o=r(LUr,"xlm"),LUr.forEach(t),d1o=r(k3e," \u2014 "),eq=n(k3e,"A",{href:!0});var xUr=s(eq);c1o=r(xUr,"XLMModel"),xUr.forEach(t),f1o=r(k3e," (XLM model)"),k3e.forEach(t),m1o=i($),bu=n($,"LI",{});var S3e=s(bu);lse=n(S3e,"STRONG",{});var $Ur=s(lse);g1o=r($Ur,"xlm-prophetnet"),$Ur.forEach(t),h1o=r(S3e," \u2014 "),oq=n(S3e,"A",{href:!0});var kUr=s(oq);p1o=r(kUr,"XLMProphetNetModel"),kUr.forEach(t),u1o=r(S3e," (XLMProphetNet model)"),S3e.forEach(t),_1o=i($),vu=n($,"LI",{});var R3e=s(vu);ise=n(R3e,"STRONG",{});var SUr=s(ise);b1o=r(SUr,"xlm-roberta"),SUr.forEach(t),v1o=r(R3e," \u2014 "),rq=n(R3e,"A",{href:!0});var RUr=s(rq);F1o=r(RUr,"XLMRobertaModel"),RUr.forEach(t),T1o=r(R3e," (XLM-RoBERTa model)"),R3e.forEach(t),M1o=i($),Fu=n($,"LI",{});var B3e=s(Fu);dse=n(B3e,"STRONG",{});var BUr=s(dse);E1o=r(BUr,"xlm-roberta-xl"),BUr.forEach(t),C1o=r(B3e," \u2014 "),tq=n(B3e,"A",{href:!0});var PUr=s(tq);w1o=r(PUr,"XLMRobertaXLModel"),PUr.forEach(t),A1o=r(B3e," (XLM-RoBERTa-XL model)"),B3e.forEach(t),y1o=i($),Tu=n($,"LI",{});var P3e=s(Tu);cse=n(P3e,"STRONG",{});var IUr=s(cse);L1o=r(IUr,"xlnet"),IUr.forEach(t),x1o=r(P3e," \u2014 "),aq=n(P3e,"A",{href:!0});var qUr=s(aq);$1o=r(qUr,"XLNetModel"),qUr.forEach(t),k1o=r(P3e," (XLNet model)"),P3e.forEach(t),S1o=i($),Mu=n($,"LI",{});var I3e=s(Mu);fse=n(I3e,"STRONG",{});var NUr=s(fse);R1o=r(NUr,"yolos"),NUr.forEach(t),B1o=r(I3e," \u2014 "),nq=n(I3e,"A",{href:!0});var jUr=s(nq);P1o=r(jUr,"YolosModel"),jUr.forEach(t),I1o=r(I3e," (YOLOS model)"),I3e.forEach(t),q1o=i($),Eu=n($,"LI",{});var q3e=s(Eu);mse=n(q3e,"STRONG",{});var DUr=s(mse);N1o=r(DUr,"yoso"),DUr.forEach(t),j1o=r(q3e," \u2014 "),sq=n(q3e,"A",{href:!0});var GUr=s(sq);D1o=r(GUr,"YosoModel"),GUr.forEach(t),G1o=r(q3e," (YOSO model)"),q3e.forEach(t),$.forEach(t),O1o=i(Jt),Cu=n(Jt,"P",{});var N3e=s(Cu);V1o=r(N3e,"The model is set in evaluation mode by default using "),gse=n(N3e,"CODE",{});var OUr=s(gse);X1o=r(OUr,"model.eval()"),OUr.forEach(t),z1o=r(N3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=n(N3e,"CODE",{});var VUr=s(hse);Q1o=r(VUr,"model.train()"),VUr.forEach(t),N3e.forEach(t),W1o=i(Jt),T(wu.$$.fragment,Jt),Jt.forEach(t),Is.forEach(t),iPe=i(f),vi=n(f,"H2",{class:!0});var cqe=s(vi);Au=n(cqe,"A",{id:!0,class:!0,href:!0});var XUr=s(Au);pse=n(XUr,"SPAN",{});var zUr=s(pse);T(dA.$$.fragment,zUr),zUr.forEach(t),XUr.forEach(t),H1o=i(cqe),use=n(cqe,"SPAN",{});var QUr=s(use);U1o=r(QUr,"AutoModelForPreTraining"),QUr.forEach(t),cqe.forEach(t),dPe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(cA.$$.fragment,qs),J1o=i(qs),Fi=n(qs,"P",{});var PY=s(Fi);Y1o=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lq=n(PY,"A",{href:!0});var WUr=s(lq);K1o=r(WUr,"from_pretrained()"),WUr.forEach(t),Z1o=r(PY," class method or the "),iq=n(PY,"A",{href:!0});var HUr=s(iq);ebo=r(HUr,"from_config()"),HUr.forEach(t),obo=r(PY,` class
method.`),PY.forEach(t),rbo=i(qs),fA=n(qs,"P",{});var fqe=s(fA);tbo=r(fqe,"This class cannot be instantiated directly using "),_se=n(fqe,"CODE",{});var UUr=s(_se);abo=r(UUr,"__init__()"),UUr.forEach(t),nbo=r(fqe," (throws an error)."),fqe.forEach(t),sbo=i(qs),et=n(qs,"DIV",{class:!0});var jC=s(et);T(mA.$$.fragment,jC),lbo=i(jC),bse=n(jC,"P",{});var JUr=s(bse);ibo=r(JUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JUr.forEach(t),dbo=i(jC),Ti=n(jC,"P",{});var IY=s(Ti);cbo=r(IY,`Note:
Loading a model from its configuration file does `),vse=n(IY,"STRONG",{});var YUr=s(vse);fbo=r(YUr,"not"),YUr.forEach(t),mbo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dq=n(IY,"A",{href:!0});var KUr=s(dq);gbo=r(KUr,"from_pretrained()"),KUr.forEach(t),hbo=r(IY," to load the model weights."),IY.forEach(t),pbo=i(jC),T(yu.$$.fragment,jC),jC.forEach(t),ubo=i(qs),Ue=n(qs,"DIV",{class:!0});var Yt=s(Ue);T(gA.$$.fragment,Yt),_bo=i(Yt),Fse=n(Yt,"P",{});var ZUr=s(Fse);bbo=r(ZUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZUr.forEach(t),vbo=i(Yt),Ca=n(Yt,"P",{});var DC=s(Ca);Fbo=r(DC,"The model class to instantiate is selected based on the "),Tse=n(DC,"CODE",{});var eJr=s(Tse);Tbo=r(eJr,"model_type"),eJr.forEach(t),Mbo=r(DC,` property of the config object (either
passed as an argument or loaded from `),Mse=n(DC,"CODE",{});var oJr=s(Mse);Ebo=r(oJr,"pretrained_model_name_or_path"),oJr.forEach(t),Cbo=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=n(DC,"CODE",{});var rJr=s(Ese);wbo=r(rJr,"pretrained_model_name_or_path"),rJr.forEach(t),Abo=r(DC,":"),DC.forEach(t),ybo=i(Yt),O=n(Yt,"UL",{});var X=s(O);Lu=n(X,"LI",{});var j3e=s(Lu);Cse=n(j3e,"STRONG",{});var tJr=s(Cse);Lbo=r(tJr,"albert"),tJr.forEach(t),xbo=r(j3e," \u2014 "),cq=n(j3e,"A",{href:!0});var aJr=s(cq);$bo=r(aJr,"AlbertForPreTraining"),aJr.forEach(t),kbo=r(j3e," (ALBERT model)"),j3e.forEach(t),Sbo=i(X),xu=n(X,"LI",{});var D3e=s(xu);wse=n(D3e,"STRONG",{});var nJr=s(wse);Rbo=r(nJr,"bart"),nJr.forEach(t),Bbo=r(D3e," \u2014 "),fq=n(D3e,"A",{href:!0});var sJr=s(fq);Pbo=r(sJr,"BartForConditionalGeneration"),sJr.forEach(t),Ibo=r(D3e," (BART model)"),D3e.forEach(t),qbo=i(X),$u=n(X,"LI",{});var G3e=s($u);Ase=n(G3e,"STRONG",{});var lJr=s(Ase);Nbo=r(lJr,"bert"),lJr.forEach(t),jbo=r(G3e," \u2014 "),mq=n(G3e,"A",{href:!0});var iJr=s(mq);Dbo=r(iJr,"BertForPreTraining"),iJr.forEach(t),Gbo=r(G3e," (BERT model)"),G3e.forEach(t),Obo=i(X),ku=n(X,"LI",{});var O3e=s(ku);yse=n(O3e,"STRONG",{});var dJr=s(yse);Vbo=r(dJr,"big_bird"),dJr.forEach(t),Xbo=r(O3e," \u2014 "),gq=n(O3e,"A",{href:!0});var cJr=s(gq);zbo=r(cJr,"BigBirdForPreTraining"),cJr.forEach(t),Qbo=r(O3e," (BigBird model)"),O3e.forEach(t),Wbo=i(X),Su=n(X,"LI",{});var V3e=s(Su);Lse=n(V3e,"STRONG",{});var fJr=s(Lse);Hbo=r(fJr,"camembert"),fJr.forEach(t),Ubo=r(V3e," \u2014 "),hq=n(V3e,"A",{href:!0});var mJr=s(hq);Jbo=r(mJr,"CamembertForMaskedLM"),mJr.forEach(t),Ybo=r(V3e," (CamemBERT model)"),V3e.forEach(t),Kbo=i(X),Ru=n(X,"LI",{});var X3e=s(Ru);xse=n(X3e,"STRONG",{});var gJr=s(xse);Zbo=r(gJr,"ctrl"),gJr.forEach(t),e2o=r(X3e," \u2014 "),pq=n(X3e,"A",{href:!0});var hJr=s(pq);o2o=r(hJr,"CTRLLMHeadModel"),hJr.forEach(t),r2o=r(X3e," (CTRL model)"),X3e.forEach(t),t2o=i(X),Bu=n(X,"LI",{});var z3e=s(Bu);$se=n(z3e,"STRONG",{});var pJr=s($se);a2o=r(pJr,"data2vec-text"),pJr.forEach(t),n2o=r(z3e," \u2014 "),uq=n(z3e,"A",{href:!0});var uJr=s(uq);s2o=r(uJr,"Data2VecTextForMaskedLM"),uJr.forEach(t),l2o=r(z3e," (Data2VecText model)"),z3e.forEach(t),i2o=i(X),Pu=n(X,"LI",{});var Q3e=s(Pu);kse=n(Q3e,"STRONG",{});var _Jr=s(kse);d2o=r(_Jr,"deberta"),_Jr.forEach(t),c2o=r(Q3e," \u2014 "),_q=n(Q3e,"A",{href:!0});var bJr=s(_q);f2o=r(bJr,"DebertaForMaskedLM"),bJr.forEach(t),m2o=r(Q3e," (DeBERTa model)"),Q3e.forEach(t),g2o=i(X),Iu=n(X,"LI",{});var W3e=s(Iu);Sse=n(W3e,"STRONG",{});var vJr=s(Sse);h2o=r(vJr,"deberta-v2"),vJr.forEach(t),p2o=r(W3e," \u2014 "),bq=n(W3e,"A",{href:!0});var FJr=s(bq);u2o=r(FJr,"DebertaV2ForMaskedLM"),FJr.forEach(t),_2o=r(W3e," (DeBERTa-v2 model)"),W3e.forEach(t),b2o=i(X),qu=n(X,"LI",{});var H3e=s(qu);Rse=n(H3e,"STRONG",{});var TJr=s(Rse);v2o=r(TJr,"distilbert"),TJr.forEach(t),F2o=r(H3e," \u2014 "),vq=n(H3e,"A",{href:!0});var MJr=s(vq);T2o=r(MJr,"DistilBertForMaskedLM"),MJr.forEach(t),M2o=r(H3e," (DistilBERT model)"),H3e.forEach(t),E2o=i(X),Nu=n(X,"LI",{});var U3e=s(Nu);Bse=n(U3e,"STRONG",{});var EJr=s(Bse);C2o=r(EJr,"electra"),EJr.forEach(t),w2o=r(U3e," \u2014 "),Fq=n(U3e,"A",{href:!0});var CJr=s(Fq);A2o=r(CJr,"ElectraForPreTraining"),CJr.forEach(t),y2o=r(U3e," (ELECTRA model)"),U3e.forEach(t),L2o=i(X),ju=n(X,"LI",{});var J3e=s(ju);Pse=n(J3e,"STRONG",{});var wJr=s(Pse);x2o=r(wJr,"flaubert"),wJr.forEach(t),$2o=r(J3e," \u2014 "),Tq=n(J3e,"A",{href:!0});var AJr=s(Tq);k2o=r(AJr,"FlaubertWithLMHeadModel"),AJr.forEach(t),S2o=r(J3e," (FlauBERT model)"),J3e.forEach(t),R2o=i(X),Du=n(X,"LI",{});var Y3e=s(Du);Ise=n(Y3e,"STRONG",{});var yJr=s(Ise);B2o=r(yJr,"fnet"),yJr.forEach(t),P2o=r(Y3e," \u2014 "),Mq=n(Y3e,"A",{href:!0});var LJr=s(Mq);I2o=r(LJr,"FNetForPreTraining"),LJr.forEach(t),q2o=r(Y3e," (FNet model)"),Y3e.forEach(t),N2o=i(X),Gu=n(X,"LI",{});var K3e=s(Gu);qse=n(K3e,"STRONG",{});var xJr=s(qse);j2o=r(xJr,"fsmt"),xJr.forEach(t),D2o=r(K3e," \u2014 "),Eq=n(K3e,"A",{href:!0});var $Jr=s(Eq);G2o=r($Jr,"FSMTForConditionalGeneration"),$Jr.forEach(t),O2o=r(K3e," (FairSeq Machine-Translation model)"),K3e.forEach(t),V2o=i(X),Ou=n(X,"LI",{});var Z3e=s(Ou);Nse=n(Z3e,"STRONG",{});var kJr=s(Nse);X2o=r(kJr,"funnel"),kJr.forEach(t),z2o=r(Z3e," \u2014 "),Cq=n(Z3e,"A",{href:!0});var SJr=s(Cq);Q2o=r(SJr,"FunnelForPreTraining"),SJr.forEach(t),W2o=r(Z3e," (Funnel Transformer model)"),Z3e.forEach(t),H2o=i(X),Vu=n(X,"LI",{});var ewe=s(Vu);jse=n(ewe,"STRONG",{});var RJr=s(jse);U2o=r(RJr,"gpt2"),RJr.forEach(t),J2o=r(ewe," \u2014 "),wq=n(ewe,"A",{href:!0});var BJr=s(wq);Y2o=r(BJr,"GPT2LMHeadModel"),BJr.forEach(t),K2o=r(ewe," (OpenAI GPT-2 model)"),ewe.forEach(t),Z2o=i(X),Xu=n(X,"LI",{});var owe=s(Xu);Dse=n(owe,"STRONG",{});var PJr=s(Dse);evo=r(PJr,"ibert"),PJr.forEach(t),ovo=r(owe," \u2014 "),Aq=n(owe,"A",{href:!0});var IJr=s(Aq);rvo=r(IJr,"IBertForMaskedLM"),IJr.forEach(t),tvo=r(owe," (I-BERT model)"),owe.forEach(t),avo=i(X),zu=n(X,"LI",{});var rwe=s(zu);Gse=n(rwe,"STRONG",{});var qJr=s(Gse);nvo=r(qJr,"layoutlm"),qJr.forEach(t),svo=r(rwe," \u2014 "),yq=n(rwe,"A",{href:!0});var NJr=s(yq);lvo=r(NJr,"LayoutLMForMaskedLM"),NJr.forEach(t),ivo=r(rwe," (LayoutLM model)"),rwe.forEach(t),dvo=i(X),Qu=n(X,"LI",{});var twe=s(Qu);Ose=n(twe,"STRONG",{});var jJr=s(Ose);cvo=r(jJr,"longformer"),jJr.forEach(t),fvo=r(twe," \u2014 "),Lq=n(twe,"A",{href:!0});var DJr=s(Lq);mvo=r(DJr,"LongformerForMaskedLM"),DJr.forEach(t),gvo=r(twe," (Longformer model)"),twe.forEach(t),hvo=i(X),Wu=n(X,"LI",{});var awe=s(Wu);Vse=n(awe,"STRONG",{});var GJr=s(Vse);pvo=r(GJr,"lxmert"),GJr.forEach(t),uvo=r(awe," \u2014 "),xq=n(awe,"A",{href:!0});var OJr=s(xq);_vo=r(OJr,"LxmertForPreTraining"),OJr.forEach(t),bvo=r(awe," (LXMERT model)"),awe.forEach(t),vvo=i(X),Hu=n(X,"LI",{});var nwe=s(Hu);Xse=n(nwe,"STRONG",{});var VJr=s(Xse);Fvo=r(VJr,"megatron-bert"),VJr.forEach(t),Tvo=r(nwe," \u2014 "),$q=n(nwe,"A",{href:!0});var XJr=s($q);Mvo=r(XJr,"MegatronBertForPreTraining"),XJr.forEach(t),Evo=r(nwe," (MegatronBert model)"),nwe.forEach(t),Cvo=i(X),Uu=n(X,"LI",{});var swe=s(Uu);zse=n(swe,"STRONG",{});var zJr=s(zse);wvo=r(zJr,"mobilebert"),zJr.forEach(t),Avo=r(swe," \u2014 "),kq=n(swe,"A",{href:!0});var QJr=s(kq);yvo=r(QJr,"MobileBertForPreTraining"),QJr.forEach(t),Lvo=r(swe," (MobileBERT model)"),swe.forEach(t),xvo=i(X),Ju=n(X,"LI",{});var lwe=s(Ju);Qse=n(lwe,"STRONG",{});var WJr=s(Qse);$vo=r(WJr,"mpnet"),WJr.forEach(t),kvo=r(lwe," \u2014 "),Sq=n(lwe,"A",{href:!0});var HJr=s(Sq);Svo=r(HJr,"MPNetForMaskedLM"),HJr.forEach(t),Rvo=r(lwe," (MPNet model)"),lwe.forEach(t),Bvo=i(X),Yu=n(X,"LI",{});var iwe=s(Yu);Wse=n(iwe,"STRONG",{});var UJr=s(Wse);Pvo=r(UJr,"openai-gpt"),UJr.forEach(t),Ivo=r(iwe," \u2014 "),Rq=n(iwe,"A",{href:!0});var JJr=s(Rq);qvo=r(JJr,"OpenAIGPTLMHeadModel"),JJr.forEach(t),Nvo=r(iwe," (OpenAI GPT model)"),iwe.forEach(t),jvo=i(X),Ku=n(X,"LI",{});var dwe=s(Ku);Hse=n(dwe,"STRONG",{});var YJr=s(Hse);Dvo=r(YJr,"retribert"),YJr.forEach(t),Gvo=r(dwe," \u2014 "),Bq=n(dwe,"A",{href:!0});var KJr=s(Bq);Ovo=r(KJr,"RetriBertModel"),KJr.forEach(t),Vvo=r(dwe," (RetriBERT model)"),dwe.forEach(t),Xvo=i(X),Zu=n(X,"LI",{});var cwe=s(Zu);Use=n(cwe,"STRONG",{});var ZJr=s(Use);zvo=r(ZJr,"roberta"),ZJr.forEach(t),Qvo=r(cwe," \u2014 "),Pq=n(cwe,"A",{href:!0});var eYr=s(Pq);Wvo=r(eYr,"RobertaForMaskedLM"),eYr.forEach(t),Hvo=r(cwe," (RoBERTa model)"),cwe.forEach(t),Uvo=i(X),e_=n(X,"LI",{});var fwe=s(e_);Jse=n(fwe,"STRONG",{});var oYr=s(Jse);Jvo=r(oYr,"squeezebert"),oYr.forEach(t),Yvo=r(fwe," \u2014 "),Iq=n(fwe,"A",{href:!0});var rYr=s(Iq);Kvo=r(rYr,"SqueezeBertForMaskedLM"),rYr.forEach(t),Zvo=r(fwe," (SqueezeBERT model)"),fwe.forEach(t),eFo=i(X),o_=n(X,"LI",{});var mwe=s(o_);Yse=n(mwe,"STRONG",{});var tYr=s(Yse);oFo=r(tYr,"t5"),tYr.forEach(t),rFo=r(mwe," \u2014 "),qq=n(mwe,"A",{href:!0});var aYr=s(qq);tFo=r(aYr,"T5ForConditionalGeneration"),aYr.forEach(t),aFo=r(mwe," (T5 model)"),mwe.forEach(t),nFo=i(X),r_=n(X,"LI",{});var gwe=s(r_);Kse=n(gwe,"STRONG",{});var nYr=s(Kse);sFo=r(nYr,"tapas"),nYr.forEach(t),lFo=r(gwe," \u2014 "),Nq=n(gwe,"A",{href:!0});var sYr=s(Nq);iFo=r(sYr,"TapasForMaskedLM"),sYr.forEach(t),dFo=r(gwe," (TAPAS model)"),gwe.forEach(t),cFo=i(X),t_=n(X,"LI",{});var hwe=s(t_);Zse=n(hwe,"STRONG",{});var lYr=s(Zse);fFo=r(lYr,"transfo-xl"),lYr.forEach(t),mFo=r(hwe," \u2014 "),jq=n(hwe,"A",{href:!0});var iYr=s(jq);gFo=r(iYr,"TransfoXLLMHeadModel"),iYr.forEach(t),hFo=r(hwe," (Transformer-XL model)"),hwe.forEach(t),pFo=i(X),a_=n(X,"LI",{});var pwe=s(a_);ele=n(pwe,"STRONG",{});var dYr=s(ele);uFo=r(dYr,"unispeech"),dYr.forEach(t),_Fo=r(pwe," \u2014 "),Dq=n(pwe,"A",{href:!0});var cYr=s(Dq);bFo=r(cYr,"UniSpeechForPreTraining"),cYr.forEach(t),vFo=r(pwe," (UniSpeech model)"),pwe.forEach(t),FFo=i(X),n_=n(X,"LI",{});var uwe=s(n_);ole=n(uwe,"STRONG",{});var fYr=s(ole);TFo=r(fYr,"unispeech-sat"),fYr.forEach(t),MFo=r(uwe," \u2014 "),Gq=n(uwe,"A",{href:!0});var mYr=s(Gq);EFo=r(mYr,"UniSpeechSatForPreTraining"),mYr.forEach(t),CFo=r(uwe," (UniSpeechSat model)"),uwe.forEach(t),wFo=i(X),s_=n(X,"LI",{});var _we=s(s_);rle=n(_we,"STRONG",{});var gYr=s(rle);AFo=r(gYr,"visual_bert"),gYr.forEach(t),yFo=r(_we," \u2014 "),Oq=n(_we,"A",{href:!0});var hYr=s(Oq);LFo=r(hYr,"VisualBertForPreTraining"),hYr.forEach(t),xFo=r(_we," (VisualBert model)"),_we.forEach(t),$Fo=i(X),l_=n(X,"LI",{});var bwe=s(l_);tle=n(bwe,"STRONG",{});var pYr=s(tle);kFo=r(pYr,"vit_mae"),pYr.forEach(t),SFo=r(bwe," \u2014 "),Vq=n(bwe,"A",{href:!0});var uYr=s(Vq);RFo=r(uYr,"ViTMAEForPreTraining"),uYr.forEach(t),BFo=r(bwe," (ViTMAE model)"),bwe.forEach(t),PFo=i(X),i_=n(X,"LI",{});var vwe=s(i_);ale=n(vwe,"STRONG",{});var _Yr=s(ale);IFo=r(_Yr,"wav2vec2"),_Yr.forEach(t),qFo=r(vwe," \u2014 "),Xq=n(vwe,"A",{href:!0});var bYr=s(Xq);NFo=r(bYr,"Wav2Vec2ForPreTraining"),bYr.forEach(t),jFo=r(vwe," (Wav2Vec2 model)"),vwe.forEach(t),DFo=i(X),d_=n(X,"LI",{});var Fwe=s(d_);nle=n(Fwe,"STRONG",{});var vYr=s(nle);GFo=r(vYr,"xlm"),vYr.forEach(t),OFo=r(Fwe," \u2014 "),zq=n(Fwe,"A",{href:!0});var FYr=s(zq);VFo=r(FYr,"XLMWithLMHeadModel"),FYr.forEach(t),XFo=r(Fwe," (XLM model)"),Fwe.forEach(t),zFo=i(X),c_=n(X,"LI",{});var Twe=s(c_);sle=n(Twe,"STRONG",{});var TYr=s(sle);QFo=r(TYr,"xlm-roberta"),TYr.forEach(t),WFo=r(Twe," \u2014 "),Qq=n(Twe,"A",{href:!0});var MYr=s(Qq);HFo=r(MYr,"XLMRobertaForMaskedLM"),MYr.forEach(t),UFo=r(Twe," (XLM-RoBERTa model)"),Twe.forEach(t),JFo=i(X),f_=n(X,"LI",{});var Mwe=s(f_);lle=n(Mwe,"STRONG",{});var EYr=s(lle);YFo=r(EYr,"xlm-roberta-xl"),EYr.forEach(t),KFo=r(Mwe," \u2014 "),Wq=n(Mwe,"A",{href:!0});var CYr=s(Wq);ZFo=r(CYr,"XLMRobertaXLForMaskedLM"),CYr.forEach(t),e6o=r(Mwe," (XLM-RoBERTa-XL model)"),Mwe.forEach(t),o6o=i(X),m_=n(X,"LI",{});var Ewe=s(m_);ile=n(Ewe,"STRONG",{});var wYr=s(ile);r6o=r(wYr,"xlnet"),wYr.forEach(t),t6o=r(Ewe," \u2014 "),Hq=n(Ewe,"A",{href:!0});var AYr=s(Hq);a6o=r(AYr,"XLNetLMHeadModel"),AYr.forEach(t),n6o=r(Ewe," (XLNet model)"),Ewe.forEach(t),X.forEach(t),s6o=i(Yt),g_=n(Yt,"P",{});var Cwe=s(g_);l6o=r(Cwe,"The model is set in evaluation mode by default using "),dle=n(Cwe,"CODE",{});var yYr=s(dle);i6o=r(yYr,"model.eval()"),yYr.forEach(t),d6o=r(Cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cle=n(Cwe,"CODE",{});var LYr=s(cle);c6o=r(LYr,"model.train()"),LYr.forEach(t),Cwe.forEach(t),f6o=i(Yt),T(h_.$$.fragment,Yt),Yt.forEach(t),qs.forEach(t),cPe=i(f),Mi=n(f,"H2",{class:!0});var mqe=s(Mi);p_=n(mqe,"A",{id:!0,class:!0,href:!0});var xYr=s(p_);fle=n(xYr,"SPAN",{});var $Yr=s(fle);T(hA.$$.fragment,$Yr),$Yr.forEach(t),xYr.forEach(t),m6o=i(mqe),mle=n(mqe,"SPAN",{});var kYr=s(mle);g6o=r(kYr,"AutoModelForCausalLM"),kYr.forEach(t),mqe.forEach(t),fPe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(pA.$$.fragment,Ns),h6o=i(Ns),Ei=n(Ns,"P",{});var qY=s(Ei);p6o=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uq=n(qY,"A",{href:!0});var SYr=s(Uq);u6o=r(SYr,"from_pretrained()"),SYr.forEach(t),_6o=r(qY," class method or the "),Jq=n(qY,"A",{href:!0});var RYr=s(Jq);b6o=r(RYr,"from_config()"),RYr.forEach(t),v6o=r(qY,` class
method.`),qY.forEach(t),F6o=i(Ns),uA=n(Ns,"P",{});var gqe=s(uA);T6o=r(gqe,"This class cannot be instantiated directly using "),gle=n(gqe,"CODE",{});var BYr=s(gle);M6o=r(BYr,"__init__()"),BYr.forEach(t),E6o=r(gqe," (throws an error)."),gqe.forEach(t),C6o=i(Ns),ot=n(Ns,"DIV",{class:!0});var GC=s(ot);T(_A.$$.fragment,GC),w6o=i(GC),hle=n(GC,"P",{});var PYr=s(hle);A6o=r(PYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PYr.forEach(t),y6o=i(GC),Ci=n(GC,"P",{});var NY=s(Ci);L6o=r(NY,`Note:
Loading a model from its configuration file does `),ple=n(NY,"STRONG",{});var IYr=s(ple);x6o=r(IYr,"not"),IYr.forEach(t),$6o=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=n(NY,"A",{href:!0});var qYr=s(Yq);k6o=r(qYr,"from_pretrained()"),qYr.forEach(t),S6o=r(NY," to load the model weights."),NY.forEach(t),R6o=i(GC),T(u_.$$.fragment,GC),GC.forEach(t),B6o=i(Ns),Je=n(Ns,"DIV",{class:!0});var Kt=s(Je);T(bA.$$.fragment,Kt),P6o=i(Kt),ule=n(Kt,"P",{});var NYr=s(ule);I6o=r(NYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NYr.forEach(t),q6o=i(Kt),wa=n(Kt,"P",{});var OC=s(wa);N6o=r(OC,"The model class to instantiate is selected based on the "),_le=n(OC,"CODE",{});var jYr=s(_le);j6o=r(jYr,"model_type"),jYr.forEach(t),D6o=r(OC,` property of the config object (either
passed as an argument or loaded from `),ble=n(OC,"CODE",{});var DYr=s(ble);G6o=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),O6o=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=n(OC,"CODE",{});var GYr=s(vle);V6o=r(GYr,"pretrained_model_name_or_path"),GYr.forEach(t),X6o=r(OC,":"),OC.forEach(t),z6o=i(Kt),z=n(Kt,"UL",{});var H=s(z);__=n(H,"LI",{});var wwe=s(__);Fle=n(wwe,"STRONG",{});var OYr=s(Fle);Q6o=r(OYr,"bart"),OYr.forEach(t),W6o=r(wwe," \u2014 "),Kq=n(wwe,"A",{href:!0});var VYr=s(Kq);H6o=r(VYr,"BartForCausalLM"),VYr.forEach(t),U6o=r(wwe," (BART model)"),wwe.forEach(t),J6o=i(H),b_=n(H,"LI",{});var Awe=s(b_);Tle=n(Awe,"STRONG",{});var XYr=s(Tle);Y6o=r(XYr,"bert"),XYr.forEach(t),K6o=r(Awe," \u2014 "),Zq=n(Awe,"A",{href:!0});var zYr=s(Zq);Z6o=r(zYr,"BertLMHeadModel"),zYr.forEach(t),eTo=r(Awe," (BERT model)"),Awe.forEach(t),oTo=i(H),v_=n(H,"LI",{});var ywe=s(v_);Mle=n(ywe,"STRONG",{});var QYr=s(Mle);rTo=r(QYr,"bert-generation"),QYr.forEach(t),tTo=r(ywe," \u2014 "),eN=n(ywe,"A",{href:!0});var WYr=s(eN);aTo=r(WYr,"BertGenerationDecoder"),WYr.forEach(t),nTo=r(ywe," (Bert Generation model)"),ywe.forEach(t),sTo=i(H),F_=n(H,"LI",{});var Lwe=s(F_);Ele=n(Lwe,"STRONG",{});var HYr=s(Ele);lTo=r(HYr,"big_bird"),HYr.forEach(t),iTo=r(Lwe," \u2014 "),oN=n(Lwe,"A",{href:!0});var UYr=s(oN);dTo=r(UYr,"BigBirdForCausalLM"),UYr.forEach(t),cTo=r(Lwe," (BigBird model)"),Lwe.forEach(t),fTo=i(H),T_=n(H,"LI",{});var xwe=s(T_);Cle=n(xwe,"STRONG",{});var JYr=s(Cle);mTo=r(JYr,"bigbird_pegasus"),JYr.forEach(t),gTo=r(xwe," \u2014 "),rN=n(xwe,"A",{href:!0});var YYr=s(rN);hTo=r(YYr,"BigBirdPegasusForCausalLM"),YYr.forEach(t),pTo=r(xwe," (BigBirdPegasus model)"),xwe.forEach(t),uTo=i(H),M_=n(H,"LI",{});var $we=s(M_);wle=n($we,"STRONG",{});var KYr=s(wle);_To=r(KYr,"blenderbot"),KYr.forEach(t),bTo=r($we," \u2014 "),tN=n($we,"A",{href:!0});var ZYr=s(tN);vTo=r(ZYr,"BlenderbotForCausalLM"),ZYr.forEach(t),FTo=r($we," (Blenderbot model)"),$we.forEach(t),TTo=i(H),E_=n(H,"LI",{});var kwe=s(E_);Ale=n(kwe,"STRONG",{});var eKr=s(Ale);MTo=r(eKr,"blenderbot-small"),eKr.forEach(t),ETo=r(kwe," \u2014 "),aN=n(kwe,"A",{href:!0});var oKr=s(aN);CTo=r(oKr,"BlenderbotSmallForCausalLM"),oKr.forEach(t),wTo=r(kwe," (BlenderbotSmall model)"),kwe.forEach(t),ATo=i(H),C_=n(H,"LI",{});var Swe=s(C_);yle=n(Swe,"STRONG",{});var rKr=s(yle);yTo=r(rKr,"camembert"),rKr.forEach(t),LTo=r(Swe," \u2014 "),nN=n(Swe,"A",{href:!0});var tKr=s(nN);xTo=r(tKr,"CamembertForCausalLM"),tKr.forEach(t),$To=r(Swe," (CamemBERT model)"),Swe.forEach(t),kTo=i(H),w_=n(H,"LI",{});var Rwe=s(w_);Lle=n(Rwe,"STRONG",{});var aKr=s(Lle);STo=r(aKr,"ctrl"),aKr.forEach(t),RTo=r(Rwe," \u2014 "),sN=n(Rwe,"A",{href:!0});var nKr=s(sN);BTo=r(nKr,"CTRLLMHeadModel"),nKr.forEach(t),PTo=r(Rwe," (CTRL model)"),Rwe.forEach(t),ITo=i(H),A_=n(H,"LI",{});var Bwe=s(A_);xle=n(Bwe,"STRONG",{});var sKr=s(xle);qTo=r(sKr,"data2vec-text"),sKr.forEach(t),NTo=r(Bwe," \u2014 "),lN=n(Bwe,"A",{href:!0});var lKr=s(lN);jTo=r(lKr,"Data2VecTextForCausalLM"),lKr.forEach(t),DTo=r(Bwe," (Data2VecText model)"),Bwe.forEach(t),GTo=i(H),y_=n(H,"LI",{});var Pwe=s(y_);$le=n(Pwe,"STRONG",{});var iKr=s($le);OTo=r(iKr,"electra"),iKr.forEach(t),VTo=r(Pwe," \u2014 "),iN=n(Pwe,"A",{href:!0});var dKr=s(iN);XTo=r(dKr,"ElectraForCausalLM"),dKr.forEach(t),zTo=r(Pwe," (ELECTRA model)"),Pwe.forEach(t),QTo=i(H),L_=n(H,"LI",{});var Iwe=s(L_);kle=n(Iwe,"STRONG",{});var cKr=s(kle);WTo=r(cKr,"gpt2"),cKr.forEach(t),HTo=r(Iwe," \u2014 "),dN=n(Iwe,"A",{href:!0});var fKr=s(dN);UTo=r(fKr,"GPT2LMHeadModel"),fKr.forEach(t),JTo=r(Iwe," (OpenAI GPT-2 model)"),Iwe.forEach(t),YTo=i(H),x_=n(H,"LI",{});var qwe=s(x_);Sle=n(qwe,"STRONG",{});var mKr=s(Sle);KTo=r(mKr,"gpt_neo"),mKr.forEach(t),ZTo=r(qwe," \u2014 "),cN=n(qwe,"A",{href:!0});var gKr=s(cN);e7o=r(gKr,"GPTNeoForCausalLM"),gKr.forEach(t),o7o=r(qwe," (GPT Neo model)"),qwe.forEach(t),r7o=i(H),$_=n(H,"LI",{});var Nwe=s($_);Rle=n(Nwe,"STRONG",{});var hKr=s(Rle);t7o=r(hKr,"gptj"),hKr.forEach(t),a7o=r(Nwe," \u2014 "),fN=n(Nwe,"A",{href:!0});var pKr=s(fN);n7o=r(pKr,"GPTJForCausalLM"),pKr.forEach(t),s7o=r(Nwe," (GPT-J model)"),Nwe.forEach(t),l7o=i(H),k_=n(H,"LI",{});var jwe=s(k_);Ble=n(jwe,"STRONG",{});var uKr=s(Ble);i7o=r(uKr,"marian"),uKr.forEach(t),d7o=r(jwe," \u2014 "),mN=n(jwe,"A",{href:!0});var _Kr=s(mN);c7o=r(_Kr,"MarianForCausalLM"),_Kr.forEach(t),f7o=r(jwe," (Marian model)"),jwe.forEach(t),m7o=i(H),S_=n(H,"LI",{});var Dwe=s(S_);Ple=n(Dwe,"STRONG",{});var bKr=s(Ple);g7o=r(bKr,"mbart"),bKr.forEach(t),h7o=r(Dwe," \u2014 "),gN=n(Dwe,"A",{href:!0});var vKr=s(gN);p7o=r(vKr,"MBartForCausalLM"),vKr.forEach(t),u7o=r(Dwe," (mBART model)"),Dwe.forEach(t),_7o=i(H),R_=n(H,"LI",{});var Gwe=s(R_);Ile=n(Gwe,"STRONG",{});var FKr=s(Ile);b7o=r(FKr,"megatron-bert"),FKr.forEach(t),v7o=r(Gwe," \u2014 "),hN=n(Gwe,"A",{href:!0});var TKr=s(hN);F7o=r(TKr,"MegatronBertForCausalLM"),TKr.forEach(t),T7o=r(Gwe," (MegatronBert model)"),Gwe.forEach(t),M7o=i(H),B_=n(H,"LI",{});var Owe=s(B_);qle=n(Owe,"STRONG",{});var MKr=s(qle);E7o=r(MKr,"openai-gpt"),MKr.forEach(t),C7o=r(Owe," \u2014 "),pN=n(Owe,"A",{href:!0});var EKr=s(pN);w7o=r(EKr,"OpenAIGPTLMHeadModel"),EKr.forEach(t),A7o=r(Owe," (OpenAI GPT model)"),Owe.forEach(t),y7o=i(H),P_=n(H,"LI",{});var Vwe=s(P_);Nle=n(Vwe,"STRONG",{});var CKr=s(Nle);L7o=r(CKr,"pegasus"),CKr.forEach(t),x7o=r(Vwe," \u2014 "),uN=n(Vwe,"A",{href:!0});var wKr=s(uN);$7o=r(wKr,"PegasusForCausalLM"),wKr.forEach(t),k7o=r(Vwe," (Pegasus model)"),Vwe.forEach(t),S7o=i(H),I_=n(H,"LI",{});var Xwe=s(I_);jle=n(Xwe,"STRONG",{});var AKr=s(jle);R7o=r(AKr,"plbart"),AKr.forEach(t),B7o=r(Xwe," \u2014 "),_N=n(Xwe,"A",{href:!0});var yKr=s(_N);P7o=r(yKr,"PLBartForCausalLM"),yKr.forEach(t),I7o=r(Xwe," (PLBart model)"),Xwe.forEach(t),q7o=i(H),q_=n(H,"LI",{});var zwe=s(q_);Dle=n(zwe,"STRONG",{});var LKr=s(Dle);N7o=r(LKr,"prophetnet"),LKr.forEach(t),j7o=r(zwe," \u2014 "),bN=n(zwe,"A",{href:!0});var xKr=s(bN);D7o=r(xKr,"ProphetNetForCausalLM"),xKr.forEach(t),G7o=r(zwe," (ProphetNet model)"),zwe.forEach(t),O7o=i(H),N_=n(H,"LI",{});var Qwe=s(N_);Gle=n(Qwe,"STRONG",{});var $Kr=s(Gle);V7o=r($Kr,"qdqbert"),$Kr.forEach(t),X7o=r(Qwe," \u2014 "),vN=n(Qwe,"A",{href:!0});var kKr=s(vN);z7o=r(kKr,"QDQBertLMHeadModel"),kKr.forEach(t),Q7o=r(Qwe," (QDQBert model)"),Qwe.forEach(t),W7o=i(H),j_=n(H,"LI",{});var Wwe=s(j_);Ole=n(Wwe,"STRONG",{});var SKr=s(Ole);H7o=r(SKr,"reformer"),SKr.forEach(t),U7o=r(Wwe," \u2014 "),FN=n(Wwe,"A",{href:!0});var RKr=s(FN);J7o=r(RKr,"ReformerModelWithLMHead"),RKr.forEach(t),Y7o=r(Wwe," (Reformer model)"),Wwe.forEach(t),K7o=i(H),D_=n(H,"LI",{});var Hwe=s(D_);Vle=n(Hwe,"STRONG",{});var BKr=s(Vle);Z7o=r(BKr,"rembert"),BKr.forEach(t),eMo=r(Hwe," \u2014 "),TN=n(Hwe,"A",{href:!0});var PKr=s(TN);oMo=r(PKr,"RemBertForCausalLM"),PKr.forEach(t),rMo=r(Hwe," (RemBERT model)"),Hwe.forEach(t),tMo=i(H),G_=n(H,"LI",{});var Uwe=s(G_);Xle=n(Uwe,"STRONG",{});var IKr=s(Xle);aMo=r(IKr,"roberta"),IKr.forEach(t),nMo=r(Uwe," \u2014 "),MN=n(Uwe,"A",{href:!0});var qKr=s(MN);sMo=r(qKr,"RobertaForCausalLM"),qKr.forEach(t),lMo=r(Uwe," (RoBERTa model)"),Uwe.forEach(t),iMo=i(H),O_=n(H,"LI",{});var Jwe=s(O_);zle=n(Jwe,"STRONG",{});var NKr=s(zle);dMo=r(NKr,"roformer"),NKr.forEach(t),cMo=r(Jwe," \u2014 "),EN=n(Jwe,"A",{href:!0});var jKr=s(EN);fMo=r(jKr,"RoFormerForCausalLM"),jKr.forEach(t),mMo=r(Jwe," (RoFormer model)"),Jwe.forEach(t),gMo=i(H),V_=n(H,"LI",{});var Ywe=s(V_);Qle=n(Ywe,"STRONG",{});var DKr=s(Qle);hMo=r(DKr,"speech_to_text_2"),DKr.forEach(t),pMo=r(Ywe," \u2014 "),CN=n(Ywe,"A",{href:!0});var GKr=s(CN);uMo=r(GKr,"Speech2Text2ForCausalLM"),GKr.forEach(t),_Mo=r(Ywe," (Speech2Text2 model)"),Ywe.forEach(t),bMo=i(H),X_=n(H,"LI",{});var Kwe=s(X_);Wle=n(Kwe,"STRONG",{});var OKr=s(Wle);vMo=r(OKr,"transfo-xl"),OKr.forEach(t),FMo=r(Kwe," \u2014 "),wN=n(Kwe,"A",{href:!0});var VKr=s(wN);TMo=r(VKr,"TransfoXLLMHeadModel"),VKr.forEach(t),MMo=r(Kwe," (Transformer-XL model)"),Kwe.forEach(t),EMo=i(H),z_=n(H,"LI",{});var Zwe=s(z_);Hle=n(Zwe,"STRONG",{});var XKr=s(Hle);CMo=r(XKr,"trocr"),XKr.forEach(t),wMo=r(Zwe," \u2014 "),AN=n(Zwe,"A",{href:!0});var zKr=s(AN);AMo=r(zKr,"TrOCRForCausalLM"),zKr.forEach(t),yMo=r(Zwe," (TrOCR model)"),Zwe.forEach(t),LMo=i(H),Q_=n(H,"LI",{});var eAe=s(Q_);Ule=n(eAe,"STRONG",{});var QKr=s(Ule);xMo=r(QKr,"xglm"),QKr.forEach(t),$Mo=r(eAe," \u2014 "),yN=n(eAe,"A",{href:!0});var WKr=s(yN);kMo=r(WKr,"XGLMForCausalLM"),WKr.forEach(t),SMo=r(eAe," (XGLM model)"),eAe.forEach(t),RMo=i(H),W_=n(H,"LI",{});var oAe=s(W_);Jle=n(oAe,"STRONG",{});var HKr=s(Jle);BMo=r(HKr,"xlm"),HKr.forEach(t),PMo=r(oAe," \u2014 "),LN=n(oAe,"A",{href:!0});var UKr=s(LN);IMo=r(UKr,"XLMWithLMHeadModel"),UKr.forEach(t),qMo=r(oAe," (XLM model)"),oAe.forEach(t),NMo=i(H),H_=n(H,"LI",{});var rAe=s(H_);Yle=n(rAe,"STRONG",{});var JKr=s(Yle);jMo=r(JKr,"xlm-prophetnet"),JKr.forEach(t),DMo=r(rAe," \u2014 "),xN=n(rAe,"A",{href:!0});var YKr=s(xN);GMo=r(YKr,"XLMProphetNetForCausalLM"),YKr.forEach(t),OMo=r(rAe," (XLMProphetNet model)"),rAe.forEach(t),VMo=i(H),U_=n(H,"LI",{});var tAe=s(U_);Kle=n(tAe,"STRONG",{});var KKr=s(Kle);XMo=r(KKr,"xlm-roberta"),KKr.forEach(t),zMo=r(tAe," \u2014 "),$N=n(tAe,"A",{href:!0});var ZKr=s($N);QMo=r(ZKr,"XLMRobertaForCausalLM"),ZKr.forEach(t),WMo=r(tAe," (XLM-RoBERTa model)"),tAe.forEach(t),HMo=i(H),J_=n(H,"LI",{});var aAe=s(J_);Zle=n(aAe,"STRONG",{});var eZr=s(Zle);UMo=r(eZr,"xlm-roberta-xl"),eZr.forEach(t),JMo=r(aAe," \u2014 "),kN=n(aAe,"A",{href:!0});var oZr=s(kN);YMo=r(oZr,"XLMRobertaXLForCausalLM"),oZr.forEach(t),KMo=r(aAe," (XLM-RoBERTa-XL model)"),aAe.forEach(t),ZMo=i(H),Y_=n(H,"LI",{});var nAe=s(Y_);eie=n(nAe,"STRONG",{});var rZr=s(eie);e4o=r(rZr,"xlnet"),rZr.forEach(t),o4o=r(nAe," \u2014 "),SN=n(nAe,"A",{href:!0});var tZr=s(SN);r4o=r(tZr,"XLNetLMHeadModel"),tZr.forEach(t),t4o=r(nAe," (XLNet model)"),nAe.forEach(t),H.forEach(t),a4o=i(Kt),K_=n(Kt,"P",{});var sAe=s(K_);n4o=r(sAe,"The model is set in evaluation mode by default using "),oie=n(sAe,"CODE",{});var aZr=s(oie);s4o=r(aZr,"model.eval()"),aZr.forEach(t),l4o=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(sAe,"CODE",{});var nZr=s(rie);i4o=r(nZr,"model.train()"),nZr.forEach(t),sAe.forEach(t),d4o=i(Kt),T(Z_.$$.fragment,Kt),Kt.forEach(t),Ns.forEach(t),mPe=i(f),wi=n(f,"H2",{class:!0});var hqe=s(wi);e0=n(hqe,"A",{id:!0,class:!0,href:!0});var sZr=s(e0);tie=n(sZr,"SPAN",{});var lZr=s(tie);T(vA.$$.fragment,lZr),lZr.forEach(t),sZr.forEach(t),c4o=i(hqe),aie=n(hqe,"SPAN",{});var iZr=s(aie);f4o=r(iZr,"AutoModelForMaskedLM"),iZr.forEach(t),hqe.forEach(t),gPe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(FA.$$.fragment,js),m4o=i(js),Ai=n(js,"P",{});var jY=s(Ai);g4o=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RN=n(jY,"A",{href:!0});var dZr=s(RN);h4o=r(dZr,"from_pretrained()"),dZr.forEach(t),p4o=r(jY," class method or the "),BN=n(jY,"A",{href:!0});var cZr=s(BN);u4o=r(cZr,"from_config()"),cZr.forEach(t),_4o=r(jY,` class
method.`),jY.forEach(t),b4o=i(js),TA=n(js,"P",{});var pqe=s(TA);v4o=r(pqe,"This class cannot be instantiated directly using "),nie=n(pqe,"CODE",{});var fZr=s(nie);F4o=r(fZr,"__init__()"),fZr.forEach(t),T4o=r(pqe," (throws an error)."),pqe.forEach(t),M4o=i(js),rt=n(js,"DIV",{class:!0});var VC=s(rt);T(MA.$$.fragment,VC),E4o=i(VC),sie=n(VC,"P",{});var mZr=s(sie);C4o=r(mZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mZr.forEach(t),w4o=i(VC),yi=n(VC,"P",{});var DY=s(yi);A4o=r(DY,`Note:
Loading a model from its configuration file does `),lie=n(DY,"STRONG",{});var gZr=s(lie);y4o=r(gZr,"not"),gZr.forEach(t),L4o=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PN=n(DY,"A",{href:!0});var hZr=s(PN);x4o=r(hZr,"from_pretrained()"),hZr.forEach(t),$4o=r(DY," to load the model weights."),DY.forEach(t),k4o=i(VC),T(o0.$$.fragment,VC),VC.forEach(t),S4o=i(js),Ye=n(js,"DIV",{class:!0});var Zt=s(Ye);T(EA.$$.fragment,Zt),R4o=i(Zt),iie=n(Zt,"P",{});var pZr=s(iie);B4o=r(pZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pZr.forEach(t),P4o=i(Zt),Aa=n(Zt,"P",{});var XC=s(Aa);I4o=r(XC,"The model class to instantiate is selected based on the "),die=n(XC,"CODE",{});var uZr=s(die);q4o=r(uZr,"model_type"),uZr.forEach(t),N4o=r(XC,` property of the config object (either
passed as an argument or loaded from `),cie=n(XC,"CODE",{});var _Zr=s(cie);j4o=r(_Zr,"pretrained_model_name_or_path"),_Zr.forEach(t),D4o=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=n(XC,"CODE",{});var bZr=s(fie);G4o=r(bZr,"pretrained_model_name_or_path"),bZr.forEach(t),O4o=r(XC,":"),XC.forEach(t),V4o=i(Zt),Q=n(Zt,"UL",{});var U=s(Q);r0=n(U,"LI",{});var lAe=s(r0);mie=n(lAe,"STRONG",{});var vZr=s(mie);X4o=r(vZr,"albert"),vZr.forEach(t),z4o=r(lAe," \u2014 "),IN=n(lAe,"A",{href:!0});var FZr=s(IN);Q4o=r(FZr,"AlbertForMaskedLM"),FZr.forEach(t),W4o=r(lAe," (ALBERT model)"),lAe.forEach(t),H4o=i(U),t0=n(U,"LI",{});var iAe=s(t0);gie=n(iAe,"STRONG",{});var TZr=s(gie);U4o=r(TZr,"bart"),TZr.forEach(t),J4o=r(iAe," \u2014 "),qN=n(iAe,"A",{href:!0});var MZr=s(qN);Y4o=r(MZr,"BartForConditionalGeneration"),MZr.forEach(t),K4o=r(iAe," (BART model)"),iAe.forEach(t),Z4o=i(U),a0=n(U,"LI",{});var dAe=s(a0);hie=n(dAe,"STRONG",{});var EZr=s(hie);eEo=r(EZr,"bert"),EZr.forEach(t),oEo=r(dAe," \u2014 "),NN=n(dAe,"A",{href:!0});var CZr=s(NN);rEo=r(CZr,"BertForMaskedLM"),CZr.forEach(t),tEo=r(dAe," (BERT model)"),dAe.forEach(t),aEo=i(U),n0=n(U,"LI",{});var cAe=s(n0);pie=n(cAe,"STRONG",{});var wZr=s(pie);nEo=r(wZr,"big_bird"),wZr.forEach(t),sEo=r(cAe," \u2014 "),jN=n(cAe,"A",{href:!0});var AZr=s(jN);lEo=r(AZr,"BigBirdForMaskedLM"),AZr.forEach(t),iEo=r(cAe," (BigBird model)"),cAe.forEach(t),dEo=i(U),s0=n(U,"LI",{});var fAe=s(s0);uie=n(fAe,"STRONG",{});var yZr=s(uie);cEo=r(yZr,"camembert"),yZr.forEach(t),fEo=r(fAe," \u2014 "),DN=n(fAe,"A",{href:!0});var LZr=s(DN);mEo=r(LZr,"CamembertForMaskedLM"),LZr.forEach(t),gEo=r(fAe," (CamemBERT model)"),fAe.forEach(t),hEo=i(U),l0=n(U,"LI",{});var mAe=s(l0);_ie=n(mAe,"STRONG",{});var xZr=s(_ie);pEo=r(xZr,"convbert"),xZr.forEach(t),uEo=r(mAe," \u2014 "),GN=n(mAe,"A",{href:!0});var $Zr=s(GN);_Eo=r($Zr,"ConvBertForMaskedLM"),$Zr.forEach(t),bEo=r(mAe," (ConvBERT model)"),mAe.forEach(t),vEo=i(U),i0=n(U,"LI",{});var gAe=s(i0);bie=n(gAe,"STRONG",{});var kZr=s(bie);FEo=r(kZr,"data2vec-text"),kZr.forEach(t),TEo=r(gAe," \u2014 "),ON=n(gAe,"A",{href:!0});var SZr=s(ON);MEo=r(SZr,"Data2VecTextForMaskedLM"),SZr.forEach(t),EEo=r(gAe," (Data2VecText model)"),gAe.forEach(t),CEo=i(U),d0=n(U,"LI",{});var hAe=s(d0);vie=n(hAe,"STRONG",{});var RZr=s(vie);wEo=r(RZr,"deberta"),RZr.forEach(t),AEo=r(hAe," \u2014 "),VN=n(hAe,"A",{href:!0});var BZr=s(VN);yEo=r(BZr,"DebertaForMaskedLM"),BZr.forEach(t),LEo=r(hAe," (DeBERTa model)"),hAe.forEach(t),xEo=i(U),c0=n(U,"LI",{});var pAe=s(c0);Fie=n(pAe,"STRONG",{});var PZr=s(Fie);$Eo=r(PZr,"deberta-v2"),PZr.forEach(t),kEo=r(pAe," \u2014 "),XN=n(pAe,"A",{href:!0});var IZr=s(XN);SEo=r(IZr,"DebertaV2ForMaskedLM"),IZr.forEach(t),REo=r(pAe," (DeBERTa-v2 model)"),pAe.forEach(t),BEo=i(U),f0=n(U,"LI",{});var uAe=s(f0);Tie=n(uAe,"STRONG",{});var qZr=s(Tie);PEo=r(qZr,"distilbert"),qZr.forEach(t),IEo=r(uAe," \u2014 "),zN=n(uAe,"A",{href:!0});var NZr=s(zN);qEo=r(NZr,"DistilBertForMaskedLM"),NZr.forEach(t),NEo=r(uAe," (DistilBERT model)"),uAe.forEach(t),jEo=i(U),m0=n(U,"LI",{});var _Ae=s(m0);Mie=n(_Ae,"STRONG",{});var jZr=s(Mie);DEo=r(jZr,"electra"),jZr.forEach(t),GEo=r(_Ae," \u2014 "),QN=n(_Ae,"A",{href:!0});var DZr=s(QN);OEo=r(DZr,"ElectraForMaskedLM"),DZr.forEach(t),VEo=r(_Ae," (ELECTRA model)"),_Ae.forEach(t),XEo=i(U),g0=n(U,"LI",{});var bAe=s(g0);Eie=n(bAe,"STRONG",{});var GZr=s(Eie);zEo=r(GZr,"flaubert"),GZr.forEach(t),QEo=r(bAe," \u2014 "),WN=n(bAe,"A",{href:!0});var OZr=s(WN);WEo=r(OZr,"FlaubertWithLMHeadModel"),OZr.forEach(t),HEo=r(bAe," (FlauBERT model)"),bAe.forEach(t),UEo=i(U),h0=n(U,"LI",{});var vAe=s(h0);Cie=n(vAe,"STRONG",{});var VZr=s(Cie);JEo=r(VZr,"fnet"),VZr.forEach(t),YEo=r(vAe," \u2014 "),HN=n(vAe,"A",{href:!0});var XZr=s(HN);KEo=r(XZr,"FNetForMaskedLM"),XZr.forEach(t),ZEo=r(vAe," (FNet model)"),vAe.forEach(t),e5o=i(U),p0=n(U,"LI",{});var FAe=s(p0);wie=n(FAe,"STRONG",{});var zZr=s(wie);o5o=r(zZr,"funnel"),zZr.forEach(t),r5o=r(FAe," \u2014 "),UN=n(FAe,"A",{href:!0});var QZr=s(UN);t5o=r(QZr,"FunnelForMaskedLM"),QZr.forEach(t),a5o=r(FAe," (Funnel Transformer model)"),FAe.forEach(t),n5o=i(U),u0=n(U,"LI",{});var TAe=s(u0);Aie=n(TAe,"STRONG",{});var WZr=s(Aie);s5o=r(WZr,"ibert"),WZr.forEach(t),l5o=r(TAe," \u2014 "),JN=n(TAe,"A",{href:!0});var HZr=s(JN);i5o=r(HZr,"IBertForMaskedLM"),HZr.forEach(t),d5o=r(TAe," (I-BERT model)"),TAe.forEach(t),c5o=i(U),_0=n(U,"LI",{});var MAe=s(_0);yie=n(MAe,"STRONG",{});var UZr=s(yie);f5o=r(UZr,"layoutlm"),UZr.forEach(t),m5o=r(MAe," \u2014 "),YN=n(MAe,"A",{href:!0});var JZr=s(YN);g5o=r(JZr,"LayoutLMForMaskedLM"),JZr.forEach(t),h5o=r(MAe," (LayoutLM model)"),MAe.forEach(t),p5o=i(U),b0=n(U,"LI",{});var EAe=s(b0);Lie=n(EAe,"STRONG",{});var YZr=s(Lie);u5o=r(YZr,"longformer"),YZr.forEach(t),_5o=r(EAe," \u2014 "),KN=n(EAe,"A",{href:!0});var KZr=s(KN);b5o=r(KZr,"LongformerForMaskedLM"),KZr.forEach(t),v5o=r(EAe," (Longformer model)"),EAe.forEach(t),F5o=i(U),v0=n(U,"LI",{});var CAe=s(v0);xie=n(CAe,"STRONG",{});var ZZr=s(xie);T5o=r(ZZr,"mbart"),ZZr.forEach(t),M5o=r(CAe," \u2014 "),ZN=n(CAe,"A",{href:!0});var eet=s(ZN);E5o=r(eet,"MBartForConditionalGeneration"),eet.forEach(t),C5o=r(CAe," (mBART model)"),CAe.forEach(t),w5o=i(U),F0=n(U,"LI",{});var wAe=s(F0);$ie=n(wAe,"STRONG",{});var oet=s($ie);A5o=r(oet,"megatron-bert"),oet.forEach(t),y5o=r(wAe," \u2014 "),ej=n(wAe,"A",{href:!0});var ret=s(ej);L5o=r(ret,"MegatronBertForMaskedLM"),ret.forEach(t),x5o=r(wAe," (MegatronBert model)"),wAe.forEach(t),$5o=i(U),T0=n(U,"LI",{});var AAe=s(T0);kie=n(AAe,"STRONG",{});var tet=s(kie);k5o=r(tet,"mobilebert"),tet.forEach(t),S5o=r(AAe," \u2014 "),oj=n(AAe,"A",{href:!0});var aet=s(oj);R5o=r(aet,"MobileBertForMaskedLM"),aet.forEach(t),B5o=r(AAe," (MobileBERT model)"),AAe.forEach(t),P5o=i(U),M0=n(U,"LI",{});var yAe=s(M0);Sie=n(yAe,"STRONG",{});var net=s(Sie);I5o=r(net,"mpnet"),net.forEach(t),q5o=r(yAe," \u2014 "),rj=n(yAe,"A",{href:!0});var set=s(rj);N5o=r(set,"MPNetForMaskedLM"),set.forEach(t),j5o=r(yAe," (MPNet model)"),yAe.forEach(t),D5o=i(U),E0=n(U,"LI",{});var LAe=s(E0);Rie=n(LAe,"STRONG",{});var iet=s(Rie);G5o=r(iet,"nystromformer"),iet.forEach(t),O5o=r(LAe," \u2014 "),tj=n(LAe,"A",{href:!0});var det=s(tj);V5o=r(det,"NystromformerForMaskedLM"),det.forEach(t),X5o=r(LAe," (Nystromformer model)"),LAe.forEach(t),z5o=i(U),C0=n(U,"LI",{});var xAe=s(C0);Bie=n(xAe,"STRONG",{});var cet=s(Bie);Q5o=r(cet,"perceiver"),cet.forEach(t),W5o=r(xAe," \u2014 "),aj=n(xAe,"A",{href:!0});var fet=s(aj);H5o=r(fet,"PerceiverForMaskedLM"),fet.forEach(t),U5o=r(xAe," (Perceiver model)"),xAe.forEach(t),J5o=i(U),w0=n(U,"LI",{});var $Ae=s(w0);Pie=n($Ae,"STRONG",{});var met=s(Pie);Y5o=r(met,"qdqbert"),met.forEach(t),K5o=r($Ae," \u2014 "),nj=n($Ae,"A",{href:!0});var get=s(nj);Z5o=r(get,"QDQBertForMaskedLM"),get.forEach(t),eCo=r($Ae," (QDQBert model)"),$Ae.forEach(t),oCo=i(U),A0=n(U,"LI",{});var kAe=s(A0);Iie=n(kAe,"STRONG",{});var het=s(Iie);rCo=r(het,"reformer"),het.forEach(t),tCo=r(kAe," \u2014 "),sj=n(kAe,"A",{href:!0});var pet=s(sj);aCo=r(pet,"ReformerForMaskedLM"),pet.forEach(t),nCo=r(kAe," (Reformer model)"),kAe.forEach(t),sCo=i(U),y0=n(U,"LI",{});var SAe=s(y0);qie=n(SAe,"STRONG",{});var uet=s(qie);lCo=r(uet,"rembert"),uet.forEach(t),iCo=r(SAe," \u2014 "),lj=n(SAe,"A",{href:!0});var _et=s(lj);dCo=r(_et,"RemBertForMaskedLM"),_et.forEach(t),cCo=r(SAe," (RemBERT model)"),SAe.forEach(t),fCo=i(U),L0=n(U,"LI",{});var RAe=s(L0);Nie=n(RAe,"STRONG",{});var bet=s(Nie);mCo=r(bet,"roberta"),bet.forEach(t),gCo=r(RAe," \u2014 "),ij=n(RAe,"A",{href:!0});var vet=s(ij);hCo=r(vet,"RobertaForMaskedLM"),vet.forEach(t),pCo=r(RAe," (RoBERTa model)"),RAe.forEach(t),uCo=i(U),x0=n(U,"LI",{});var BAe=s(x0);jie=n(BAe,"STRONG",{});var Fet=s(jie);_Co=r(Fet,"roformer"),Fet.forEach(t),bCo=r(BAe," \u2014 "),dj=n(BAe,"A",{href:!0});var Tet=s(dj);vCo=r(Tet,"RoFormerForMaskedLM"),Tet.forEach(t),FCo=r(BAe," (RoFormer model)"),BAe.forEach(t),TCo=i(U),$0=n(U,"LI",{});var PAe=s($0);Die=n(PAe,"STRONG",{});var Met=s(Die);MCo=r(Met,"squeezebert"),Met.forEach(t),ECo=r(PAe," \u2014 "),cj=n(PAe,"A",{href:!0});var Eet=s(cj);CCo=r(Eet,"SqueezeBertForMaskedLM"),Eet.forEach(t),wCo=r(PAe," (SqueezeBERT model)"),PAe.forEach(t),ACo=i(U),k0=n(U,"LI",{});var IAe=s(k0);Gie=n(IAe,"STRONG",{});var Cet=s(Gie);yCo=r(Cet,"tapas"),Cet.forEach(t),LCo=r(IAe," \u2014 "),fj=n(IAe,"A",{href:!0});var wet=s(fj);xCo=r(wet,"TapasForMaskedLM"),wet.forEach(t),$Co=r(IAe," (TAPAS model)"),IAe.forEach(t),kCo=i(U),S0=n(U,"LI",{});var qAe=s(S0);Oie=n(qAe,"STRONG",{});var Aet=s(Oie);SCo=r(Aet,"wav2vec2"),Aet.forEach(t),RCo=r(qAe," \u2014 "),Vie=n(qAe,"CODE",{});var yet=s(Vie);BCo=r(yet,"Wav2Vec2ForMaskedLM"),yet.forEach(t),PCo=r(qAe," (Wav2Vec2 model)"),qAe.forEach(t),ICo=i(U),R0=n(U,"LI",{});var NAe=s(R0);Xie=n(NAe,"STRONG",{});var Let=s(Xie);qCo=r(Let,"xlm"),Let.forEach(t),NCo=r(NAe," \u2014 "),mj=n(NAe,"A",{href:!0});var xet=s(mj);jCo=r(xet,"XLMWithLMHeadModel"),xet.forEach(t),DCo=r(NAe," (XLM model)"),NAe.forEach(t),GCo=i(U),B0=n(U,"LI",{});var jAe=s(B0);zie=n(jAe,"STRONG",{});var $et=s(zie);OCo=r($et,"xlm-roberta"),$et.forEach(t),VCo=r(jAe," \u2014 "),gj=n(jAe,"A",{href:!0});var ket=s(gj);XCo=r(ket,"XLMRobertaForMaskedLM"),ket.forEach(t),zCo=r(jAe," (XLM-RoBERTa model)"),jAe.forEach(t),QCo=i(U),P0=n(U,"LI",{});var DAe=s(P0);Qie=n(DAe,"STRONG",{});var Set=s(Qie);WCo=r(Set,"xlm-roberta-xl"),Set.forEach(t),HCo=r(DAe," \u2014 "),hj=n(DAe,"A",{href:!0});var Ret=s(hj);UCo=r(Ret,"XLMRobertaXLForMaskedLM"),Ret.forEach(t),JCo=r(DAe," (XLM-RoBERTa-XL model)"),DAe.forEach(t),YCo=i(U),I0=n(U,"LI",{});var GAe=s(I0);Wie=n(GAe,"STRONG",{});var Bet=s(Wie);KCo=r(Bet,"yoso"),Bet.forEach(t),ZCo=r(GAe," \u2014 "),pj=n(GAe,"A",{href:!0});var Pet=s(pj);e3o=r(Pet,"YosoForMaskedLM"),Pet.forEach(t),o3o=r(GAe," (YOSO model)"),GAe.forEach(t),U.forEach(t),r3o=i(Zt),q0=n(Zt,"P",{});var OAe=s(q0);t3o=r(OAe,"The model is set in evaluation mode by default using "),Hie=n(OAe,"CODE",{});var Iet=s(Hie);a3o=r(Iet,"model.eval()"),Iet.forEach(t),n3o=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=n(OAe,"CODE",{});var qet=s(Uie);s3o=r(qet,"model.train()"),qet.forEach(t),OAe.forEach(t),l3o=i(Zt),T(N0.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),hPe=i(f),Li=n(f,"H2",{class:!0});var uqe=s(Li);j0=n(uqe,"A",{id:!0,class:!0,href:!0});var Net=s(j0);Jie=n(Net,"SPAN",{});var jet=s(Jie);T(CA.$$.fragment,jet),jet.forEach(t),Net.forEach(t),i3o=i(uqe),Yie=n(uqe,"SPAN",{});var Det=s(Yie);d3o=r(Det,"AutoModelForSeq2SeqLM"),Det.forEach(t),uqe.forEach(t),pPe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(wA.$$.fragment,Ds),c3o=i(Ds),xi=n(Ds,"P",{});var GY=s(xi);f3o=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uj=n(GY,"A",{href:!0});var Get=s(uj);m3o=r(Get,"from_pretrained()"),Get.forEach(t),g3o=r(GY," class method or the "),_j=n(GY,"A",{href:!0});var Oet=s(_j);h3o=r(Oet,"from_config()"),Oet.forEach(t),p3o=r(GY,` class
method.`),GY.forEach(t),u3o=i(Ds),AA=n(Ds,"P",{});var _qe=s(AA);_3o=r(_qe,"This class cannot be instantiated directly using "),Kie=n(_qe,"CODE",{});var Vet=s(Kie);b3o=r(Vet,"__init__()"),Vet.forEach(t),v3o=r(_qe," (throws an error)."),_qe.forEach(t),F3o=i(Ds),tt=n(Ds,"DIV",{class:!0});var zC=s(tt);T(yA.$$.fragment,zC),T3o=i(zC),Zie=n(zC,"P",{});var Xet=s(Zie);M3o=r(Xet,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xet.forEach(t),E3o=i(zC),$i=n(zC,"P",{});var OY=s($i);C3o=r(OY,`Note:
Loading a model from its configuration file does `),ede=n(OY,"STRONG",{});var zet=s(ede);w3o=r(zet,"not"),zet.forEach(t),A3o=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bj=n(OY,"A",{href:!0});var Qet=s(bj);y3o=r(Qet,"from_pretrained()"),Qet.forEach(t),L3o=r(OY," to load the model weights."),OY.forEach(t),x3o=i(zC),T(D0.$$.fragment,zC),zC.forEach(t),$3o=i(Ds),Ke=n(Ds,"DIV",{class:!0});var ea=s(Ke);T(LA.$$.fragment,ea),k3o=i(ea),ode=n(ea,"P",{});var Wet=s(ode);S3o=r(Wet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wet.forEach(t),R3o=i(ea),ya=n(ea,"P",{});var QC=s(ya);B3o=r(QC,"The model class to instantiate is selected based on the "),rde=n(QC,"CODE",{});var Het=s(rde);P3o=r(Het,"model_type"),Het.forEach(t),I3o=r(QC,` property of the config object (either
passed as an argument or loaded from `),tde=n(QC,"CODE",{});var Uet=s(tde);q3o=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),N3o=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(QC,"CODE",{});var Jet=s(ade);j3o=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),D3o=r(QC,":"),QC.forEach(t),G3o=i(ea),he=n(ea,"UL",{});var ue=s(he);G0=n(ue,"LI",{});var VAe=s(G0);nde=n(VAe,"STRONG",{});var Yet=s(nde);O3o=r(Yet,"bart"),Yet.forEach(t),V3o=r(VAe," \u2014 "),vj=n(VAe,"A",{href:!0});var Ket=s(vj);X3o=r(Ket,"BartForConditionalGeneration"),Ket.forEach(t),z3o=r(VAe," (BART model)"),VAe.forEach(t),Q3o=i(ue),O0=n(ue,"LI",{});var XAe=s(O0);sde=n(XAe,"STRONG",{});var Zet=s(sde);W3o=r(Zet,"bigbird_pegasus"),Zet.forEach(t),H3o=r(XAe," \u2014 "),Fj=n(XAe,"A",{href:!0});var eot=s(Fj);U3o=r(eot,"BigBirdPegasusForConditionalGeneration"),eot.forEach(t),J3o=r(XAe," (BigBirdPegasus model)"),XAe.forEach(t),Y3o=i(ue),V0=n(ue,"LI",{});var zAe=s(V0);lde=n(zAe,"STRONG",{});var oot=s(lde);K3o=r(oot,"blenderbot"),oot.forEach(t),Z3o=r(zAe," \u2014 "),Tj=n(zAe,"A",{href:!0});var rot=s(Tj);ewo=r(rot,"BlenderbotForConditionalGeneration"),rot.forEach(t),owo=r(zAe," (Blenderbot model)"),zAe.forEach(t),rwo=i(ue),X0=n(ue,"LI",{});var QAe=s(X0);ide=n(QAe,"STRONG",{});var tot=s(ide);two=r(tot,"blenderbot-small"),tot.forEach(t),awo=r(QAe," \u2014 "),Mj=n(QAe,"A",{href:!0});var aot=s(Mj);nwo=r(aot,"BlenderbotSmallForConditionalGeneration"),aot.forEach(t),swo=r(QAe," (BlenderbotSmall model)"),QAe.forEach(t),lwo=i(ue),z0=n(ue,"LI",{});var WAe=s(z0);dde=n(WAe,"STRONG",{});var not=s(dde);iwo=r(not,"encoder-decoder"),not.forEach(t),dwo=r(WAe," \u2014 "),Ej=n(WAe,"A",{href:!0});var sot=s(Ej);cwo=r(sot,"EncoderDecoderModel"),sot.forEach(t),fwo=r(WAe," (Encoder decoder model)"),WAe.forEach(t),mwo=i(ue),Q0=n(ue,"LI",{});var HAe=s(Q0);cde=n(HAe,"STRONG",{});var lot=s(cde);gwo=r(lot,"fsmt"),lot.forEach(t),hwo=r(HAe," \u2014 "),Cj=n(HAe,"A",{href:!0});var iot=s(Cj);pwo=r(iot,"FSMTForConditionalGeneration"),iot.forEach(t),uwo=r(HAe," (FairSeq Machine-Translation model)"),HAe.forEach(t),_wo=i(ue),W0=n(ue,"LI",{});var UAe=s(W0);fde=n(UAe,"STRONG",{});var dot=s(fde);bwo=r(dot,"led"),dot.forEach(t),vwo=r(UAe," \u2014 "),wj=n(UAe,"A",{href:!0});var cot=s(wj);Fwo=r(cot,"LEDForConditionalGeneration"),cot.forEach(t),Two=r(UAe," (LED model)"),UAe.forEach(t),Mwo=i(ue),H0=n(ue,"LI",{});var JAe=s(H0);mde=n(JAe,"STRONG",{});var fot=s(mde);Ewo=r(fot,"m2m_100"),fot.forEach(t),Cwo=r(JAe," \u2014 "),Aj=n(JAe,"A",{href:!0});var mot=s(Aj);wwo=r(mot,"M2M100ForConditionalGeneration"),mot.forEach(t),Awo=r(JAe," (M2M100 model)"),JAe.forEach(t),ywo=i(ue),U0=n(ue,"LI",{});var YAe=s(U0);gde=n(YAe,"STRONG",{});var got=s(gde);Lwo=r(got,"marian"),got.forEach(t),xwo=r(YAe," \u2014 "),yj=n(YAe,"A",{href:!0});var hot=s(yj);$wo=r(hot,"MarianMTModel"),hot.forEach(t),kwo=r(YAe," (Marian model)"),YAe.forEach(t),Swo=i(ue),J0=n(ue,"LI",{});var KAe=s(J0);hde=n(KAe,"STRONG",{});var pot=s(hde);Rwo=r(pot,"mbart"),pot.forEach(t),Bwo=r(KAe," \u2014 "),Lj=n(KAe,"A",{href:!0});var uot=s(Lj);Pwo=r(uot,"MBartForConditionalGeneration"),uot.forEach(t),Iwo=r(KAe," (mBART model)"),KAe.forEach(t),qwo=i(ue),Y0=n(ue,"LI",{});var ZAe=s(Y0);pde=n(ZAe,"STRONG",{});var _ot=s(pde);Nwo=r(_ot,"mt5"),_ot.forEach(t),jwo=r(ZAe," \u2014 "),xj=n(ZAe,"A",{href:!0});var bot=s(xj);Dwo=r(bot,"MT5ForConditionalGeneration"),bot.forEach(t),Gwo=r(ZAe," (mT5 model)"),ZAe.forEach(t),Owo=i(ue),K0=n(ue,"LI",{});var eye=s(K0);ude=n(eye,"STRONG",{});var vot=s(ude);Vwo=r(vot,"pegasus"),vot.forEach(t),Xwo=r(eye," \u2014 "),$j=n(eye,"A",{href:!0});var Fot=s($j);zwo=r(Fot,"PegasusForConditionalGeneration"),Fot.forEach(t),Qwo=r(eye," (Pegasus model)"),eye.forEach(t),Wwo=i(ue),Z0=n(ue,"LI",{});var oye=s(Z0);_de=n(oye,"STRONG",{});var Tot=s(_de);Hwo=r(Tot,"plbart"),Tot.forEach(t),Uwo=r(oye," \u2014 "),kj=n(oye,"A",{href:!0});var Mot=s(kj);Jwo=r(Mot,"PLBartForConditionalGeneration"),Mot.forEach(t),Ywo=r(oye," (PLBart model)"),oye.forEach(t),Kwo=i(ue),e1=n(ue,"LI",{});var rye=s(e1);bde=n(rye,"STRONG",{});var Eot=s(bde);Zwo=r(Eot,"prophetnet"),Eot.forEach(t),eAo=r(rye," \u2014 "),Sj=n(rye,"A",{href:!0});var Cot=s(Sj);oAo=r(Cot,"ProphetNetForConditionalGeneration"),Cot.forEach(t),rAo=r(rye," (ProphetNet model)"),rye.forEach(t),tAo=i(ue),o1=n(ue,"LI",{});var tye=s(o1);vde=n(tye,"STRONG",{});var wot=s(vde);aAo=r(wot,"t5"),wot.forEach(t),nAo=r(tye," \u2014 "),Rj=n(tye,"A",{href:!0});var Aot=s(Rj);sAo=r(Aot,"T5ForConditionalGeneration"),Aot.forEach(t),lAo=r(tye," (T5 model)"),tye.forEach(t),iAo=i(ue),r1=n(ue,"LI",{});var aye=s(r1);Fde=n(aye,"STRONG",{});var yot=s(Fde);dAo=r(yot,"tapex"),yot.forEach(t),cAo=r(aye," \u2014 "),Bj=n(aye,"A",{href:!0});var Lot=s(Bj);fAo=r(Lot,"BartForConditionalGeneration"),Lot.forEach(t),mAo=r(aye," (TAPEX model)"),aye.forEach(t),gAo=i(ue),t1=n(ue,"LI",{});var nye=s(t1);Tde=n(nye,"STRONG",{});var xot=s(Tde);hAo=r(xot,"xlm-prophetnet"),xot.forEach(t),pAo=r(nye," \u2014 "),Pj=n(nye,"A",{href:!0});var $ot=s(Pj);uAo=r($ot,"XLMProphetNetForConditionalGeneration"),$ot.forEach(t),_Ao=r(nye," (XLMProphetNet model)"),nye.forEach(t),ue.forEach(t),bAo=i(ea),a1=n(ea,"P",{});var sye=s(a1);vAo=r(sye,"The model is set in evaluation mode by default using "),Mde=n(sye,"CODE",{});var kot=s(Mde);FAo=r(kot,"model.eval()"),kot.forEach(t),TAo=r(sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=n(sye,"CODE",{});var Sot=s(Ede);MAo=r(Sot,"model.train()"),Sot.forEach(t),sye.forEach(t),EAo=i(ea),T(n1.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),uPe=i(f),ki=n(f,"H2",{class:!0});var bqe=s(ki);s1=n(bqe,"A",{id:!0,class:!0,href:!0});var Rot=s(s1);Cde=n(Rot,"SPAN",{});var Bot=s(Cde);T(xA.$$.fragment,Bot),Bot.forEach(t),Rot.forEach(t),CAo=i(bqe),wde=n(bqe,"SPAN",{});var Pot=s(wde);wAo=r(Pot,"AutoModelForSequenceClassification"),Pot.forEach(t),bqe.forEach(t),_Pe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T($A.$$.fragment,Gs),AAo=i(Gs),Si=n(Gs,"P",{});var VY=s(Si);yAo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ij=n(VY,"A",{href:!0});var Iot=s(Ij);LAo=r(Iot,"from_pretrained()"),Iot.forEach(t),xAo=r(VY," class method or the "),qj=n(VY,"A",{href:!0});var qot=s(qj);$Ao=r(qot,"from_config()"),qot.forEach(t),kAo=r(VY,` class
method.`),VY.forEach(t),SAo=i(Gs),kA=n(Gs,"P",{});var vqe=s(kA);RAo=r(vqe,"This class cannot be instantiated directly using "),Ade=n(vqe,"CODE",{});var Not=s(Ade);BAo=r(Not,"__init__()"),Not.forEach(t),PAo=r(vqe," (throws an error)."),vqe.forEach(t),IAo=i(Gs),at=n(Gs,"DIV",{class:!0});var WC=s(at);T(SA.$$.fragment,WC),qAo=i(WC),yde=n(WC,"P",{});var jot=s(yde);NAo=r(jot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jot.forEach(t),jAo=i(WC),Ri=n(WC,"P",{});var XY=s(Ri);DAo=r(XY,`Note:
Loading a model from its configuration file does `),Lde=n(XY,"STRONG",{});var Dot=s(Lde);GAo=r(Dot,"not"),Dot.forEach(t),OAo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nj=n(XY,"A",{href:!0});var Got=s(Nj);VAo=r(Got,"from_pretrained()"),Got.forEach(t),XAo=r(XY," to load the model weights."),XY.forEach(t),zAo=i(WC),T(l1.$$.fragment,WC),WC.forEach(t),QAo=i(Gs),Ze=n(Gs,"DIV",{class:!0});var oa=s(Ze);T(RA.$$.fragment,oa),WAo=i(oa),xde=n(oa,"P",{});var Oot=s(xde);HAo=r(Oot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Oot.forEach(t),UAo=i(oa),La=n(oa,"P",{});var HC=s(La);JAo=r(HC,"The model class to instantiate is selected based on the "),$de=n(HC,"CODE",{});var Vot=s($de);YAo=r(Vot,"model_type"),Vot.forEach(t),KAo=r(HC,` property of the config object (either
passed as an argument or loaded from `),kde=n(HC,"CODE",{});var Xot=s(kde);ZAo=r(Xot,"pretrained_model_name_or_path"),Xot.forEach(t),eyo=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(HC,"CODE",{});var zot=s(Sde);oyo=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),ryo=r(HC,":"),HC.forEach(t),tyo=i(oa),q=n(oa,"UL",{});var N=s(q);i1=n(N,"LI",{});var lye=s(i1);Rde=n(lye,"STRONG",{});var Qot=s(Rde);ayo=r(Qot,"albert"),Qot.forEach(t),nyo=r(lye," \u2014 "),jj=n(lye,"A",{href:!0});var Wot=s(jj);syo=r(Wot,"AlbertForSequenceClassification"),Wot.forEach(t),lyo=r(lye," (ALBERT model)"),lye.forEach(t),iyo=i(N),d1=n(N,"LI",{});var iye=s(d1);Bde=n(iye,"STRONG",{});var Hot=s(Bde);dyo=r(Hot,"bart"),Hot.forEach(t),cyo=r(iye," \u2014 "),Dj=n(iye,"A",{href:!0});var Uot=s(Dj);fyo=r(Uot,"BartForSequenceClassification"),Uot.forEach(t),myo=r(iye," (BART model)"),iye.forEach(t),gyo=i(N),c1=n(N,"LI",{});var dye=s(c1);Pde=n(dye,"STRONG",{});var Jot=s(Pde);hyo=r(Jot,"bert"),Jot.forEach(t),pyo=r(dye," \u2014 "),Gj=n(dye,"A",{href:!0});var Yot=s(Gj);uyo=r(Yot,"BertForSequenceClassification"),Yot.forEach(t),_yo=r(dye," (BERT model)"),dye.forEach(t),byo=i(N),f1=n(N,"LI",{});var cye=s(f1);Ide=n(cye,"STRONG",{});var Kot=s(Ide);vyo=r(Kot,"big_bird"),Kot.forEach(t),Fyo=r(cye," \u2014 "),Oj=n(cye,"A",{href:!0});var Zot=s(Oj);Tyo=r(Zot,"BigBirdForSequenceClassification"),Zot.forEach(t),Myo=r(cye," (BigBird model)"),cye.forEach(t),Eyo=i(N),m1=n(N,"LI",{});var fye=s(m1);qde=n(fye,"STRONG",{});var ert=s(qde);Cyo=r(ert,"bigbird_pegasus"),ert.forEach(t),wyo=r(fye," \u2014 "),Vj=n(fye,"A",{href:!0});var ort=s(Vj);Ayo=r(ort,"BigBirdPegasusForSequenceClassification"),ort.forEach(t),yyo=r(fye," (BigBirdPegasus model)"),fye.forEach(t),Lyo=i(N),g1=n(N,"LI",{});var mye=s(g1);Nde=n(mye,"STRONG",{});var rrt=s(Nde);xyo=r(rrt,"camembert"),rrt.forEach(t),$yo=r(mye," \u2014 "),Xj=n(mye,"A",{href:!0});var trt=s(Xj);kyo=r(trt,"CamembertForSequenceClassification"),trt.forEach(t),Syo=r(mye," (CamemBERT model)"),mye.forEach(t),Ryo=i(N),h1=n(N,"LI",{});var gye=s(h1);jde=n(gye,"STRONG",{});var art=s(jde);Byo=r(art,"canine"),art.forEach(t),Pyo=r(gye," \u2014 "),zj=n(gye,"A",{href:!0});var nrt=s(zj);Iyo=r(nrt,"CanineForSequenceClassification"),nrt.forEach(t),qyo=r(gye," (Canine model)"),gye.forEach(t),Nyo=i(N),p1=n(N,"LI",{});var hye=s(p1);Dde=n(hye,"STRONG",{});var srt=s(Dde);jyo=r(srt,"convbert"),srt.forEach(t),Dyo=r(hye," \u2014 "),Qj=n(hye,"A",{href:!0});var lrt=s(Qj);Gyo=r(lrt,"ConvBertForSequenceClassification"),lrt.forEach(t),Oyo=r(hye," (ConvBERT model)"),hye.forEach(t),Vyo=i(N),u1=n(N,"LI",{});var pye=s(u1);Gde=n(pye,"STRONG",{});var irt=s(Gde);Xyo=r(irt,"ctrl"),irt.forEach(t),zyo=r(pye," \u2014 "),Wj=n(pye,"A",{href:!0});var drt=s(Wj);Qyo=r(drt,"CTRLForSequenceClassification"),drt.forEach(t),Wyo=r(pye," (CTRL model)"),pye.forEach(t),Hyo=i(N),_1=n(N,"LI",{});var uye=s(_1);Ode=n(uye,"STRONG",{});var crt=s(Ode);Uyo=r(crt,"data2vec-text"),crt.forEach(t),Jyo=r(uye," \u2014 "),Hj=n(uye,"A",{href:!0});var frt=s(Hj);Yyo=r(frt,"Data2VecTextForSequenceClassification"),frt.forEach(t),Kyo=r(uye," (Data2VecText model)"),uye.forEach(t),Zyo=i(N),b1=n(N,"LI",{});var _ye=s(b1);Vde=n(_ye,"STRONG",{});var mrt=s(Vde);eLo=r(mrt,"deberta"),mrt.forEach(t),oLo=r(_ye," \u2014 "),Uj=n(_ye,"A",{href:!0});var grt=s(Uj);rLo=r(grt,"DebertaForSequenceClassification"),grt.forEach(t),tLo=r(_ye," (DeBERTa model)"),_ye.forEach(t),aLo=i(N),v1=n(N,"LI",{});var bye=s(v1);Xde=n(bye,"STRONG",{});var hrt=s(Xde);nLo=r(hrt,"deberta-v2"),hrt.forEach(t),sLo=r(bye," \u2014 "),Jj=n(bye,"A",{href:!0});var prt=s(Jj);lLo=r(prt,"DebertaV2ForSequenceClassification"),prt.forEach(t),iLo=r(bye," (DeBERTa-v2 model)"),bye.forEach(t),dLo=i(N),F1=n(N,"LI",{});var vye=s(F1);zde=n(vye,"STRONG",{});var urt=s(zde);cLo=r(urt,"distilbert"),urt.forEach(t),fLo=r(vye," \u2014 "),Yj=n(vye,"A",{href:!0});var _rt=s(Yj);mLo=r(_rt,"DistilBertForSequenceClassification"),_rt.forEach(t),gLo=r(vye," (DistilBERT model)"),vye.forEach(t),hLo=i(N),T1=n(N,"LI",{});var Fye=s(T1);Qde=n(Fye,"STRONG",{});var brt=s(Qde);pLo=r(brt,"electra"),brt.forEach(t),uLo=r(Fye," \u2014 "),Kj=n(Fye,"A",{href:!0});var vrt=s(Kj);_Lo=r(vrt,"ElectraForSequenceClassification"),vrt.forEach(t),bLo=r(Fye," (ELECTRA model)"),Fye.forEach(t),vLo=i(N),M1=n(N,"LI",{});var Tye=s(M1);Wde=n(Tye,"STRONG",{});var Frt=s(Wde);FLo=r(Frt,"flaubert"),Frt.forEach(t),TLo=r(Tye," \u2014 "),Zj=n(Tye,"A",{href:!0});var Trt=s(Zj);MLo=r(Trt,"FlaubertForSequenceClassification"),Trt.forEach(t),ELo=r(Tye," (FlauBERT model)"),Tye.forEach(t),CLo=i(N),E1=n(N,"LI",{});var Mye=s(E1);Hde=n(Mye,"STRONG",{});var Mrt=s(Hde);wLo=r(Mrt,"fnet"),Mrt.forEach(t),ALo=r(Mye," \u2014 "),eD=n(Mye,"A",{href:!0});var Ert=s(eD);yLo=r(Ert,"FNetForSequenceClassification"),Ert.forEach(t),LLo=r(Mye," (FNet model)"),Mye.forEach(t),xLo=i(N),C1=n(N,"LI",{});var Eye=s(C1);Ude=n(Eye,"STRONG",{});var Crt=s(Ude);$Lo=r(Crt,"funnel"),Crt.forEach(t),kLo=r(Eye," \u2014 "),oD=n(Eye,"A",{href:!0});var wrt=s(oD);SLo=r(wrt,"FunnelForSequenceClassification"),wrt.forEach(t),RLo=r(Eye," (Funnel Transformer model)"),Eye.forEach(t),BLo=i(N),w1=n(N,"LI",{});var Cye=s(w1);Jde=n(Cye,"STRONG",{});var Art=s(Jde);PLo=r(Art,"gpt2"),Art.forEach(t),ILo=r(Cye," \u2014 "),rD=n(Cye,"A",{href:!0});var yrt=s(rD);qLo=r(yrt,"GPT2ForSequenceClassification"),yrt.forEach(t),NLo=r(Cye," (OpenAI GPT-2 model)"),Cye.forEach(t),jLo=i(N),A1=n(N,"LI",{});var wye=s(A1);Yde=n(wye,"STRONG",{});var Lrt=s(Yde);DLo=r(Lrt,"gpt_neo"),Lrt.forEach(t),GLo=r(wye," \u2014 "),tD=n(wye,"A",{href:!0});var xrt=s(tD);OLo=r(xrt,"GPTNeoForSequenceClassification"),xrt.forEach(t),VLo=r(wye," (GPT Neo model)"),wye.forEach(t),XLo=i(N),y1=n(N,"LI",{});var Aye=s(y1);Kde=n(Aye,"STRONG",{});var $rt=s(Kde);zLo=r($rt,"gptj"),$rt.forEach(t),QLo=r(Aye," \u2014 "),aD=n(Aye,"A",{href:!0});var krt=s(aD);WLo=r(krt,"GPTJForSequenceClassification"),krt.forEach(t),HLo=r(Aye," (GPT-J model)"),Aye.forEach(t),ULo=i(N),L1=n(N,"LI",{});var yye=s(L1);Zde=n(yye,"STRONG",{});var Srt=s(Zde);JLo=r(Srt,"ibert"),Srt.forEach(t),YLo=r(yye," \u2014 "),nD=n(yye,"A",{href:!0});var Rrt=s(nD);KLo=r(Rrt,"IBertForSequenceClassification"),Rrt.forEach(t),ZLo=r(yye," (I-BERT model)"),yye.forEach(t),e8o=i(N),x1=n(N,"LI",{});var Lye=s(x1);ece=n(Lye,"STRONG",{});var Brt=s(ece);o8o=r(Brt,"layoutlm"),Brt.forEach(t),r8o=r(Lye," \u2014 "),sD=n(Lye,"A",{href:!0});var Prt=s(sD);t8o=r(Prt,"LayoutLMForSequenceClassification"),Prt.forEach(t),a8o=r(Lye," (LayoutLM model)"),Lye.forEach(t),n8o=i(N),$1=n(N,"LI",{});var xye=s($1);oce=n(xye,"STRONG",{});var Irt=s(oce);s8o=r(Irt,"layoutlmv2"),Irt.forEach(t),l8o=r(xye," \u2014 "),lD=n(xye,"A",{href:!0});var qrt=s(lD);i8o=r(qrt,"LayoutLMv2ForSequenceClassification"),qrt.forEach(t),d8o=r(xye," (LayoutLMv2 model)"),xye.forEach(t),c8o=i(N),k1=n(N,"LI",{});var $ye=s(k1);rce=n($ye,"STRONG",{});var Nrt=s(rce);f8o=r(Nrt,"layoutlmv3"),Nrt.forEach(t),m8o=r($ye," \u2014 "),iD=n($ye,"A",{href:!0});var jrt=s(iD);g8o=r(jrt,"LayoutLMv3ForSequenceClassification"),jrt.forEach(t),h8o=r($ye," (LayoutLMv3 model)"),$ye.forEach(t),p8o=i(N),S1=n(N,"LI",{});var kye=s(S1);tce=n(kye,"STRONG",{});var Drt=s(tce);u8o=r(Drt,"led"),Drt.forEach(t),_8o=r(kye," \u2014 "),dD=n(kye,"A",{href:!0});var Grt=s(dD);b8o=r(Grt,"LEDForSequenceClassification"),Grt.forEach(t),v8o=r(kye," (LED model)"),kye.forEach(t),F8o=i(N),R1=n(N,"LI",{});var Sye=s(R1);ace=n(Sye,"STRONG",{});var Ort=s(ace);T8o=r(Ort,"longformer"),Ort.forEach(t),M8o=r(Sye," \u2014 "),cD=n(Sye,"A",{href:!0});var Vrt=s(cD);E8o=r(Vrt,"LongformerForSequenceClassification"),Vrt.forEach(t),C8o=r(Sye," (Longformer model)"),Sye.forEach(t),w8o=i(N),B1=n(N,"LI",{});var Rye=s(B1);nce=n(Rye,"STRONG",{});var Xrt=s(nce);A8o=r(Xrt,"mbart"),Xrt.forEach(t),y8o=r(Rye," \u2014 "),fD=n(Rye,"A",{href:!0});var zrt=s(fD);L8o=r(zrt,"MBartForSequenceClassification"),zrt.forEach(t),x8o=r(Rye," (mBART model)"),Rye.forEach(t),$8o=i(N),P1=n(N,"LI",{});var Bye=s(P1);sce=n(Bye,"STRONG",{});var Qrt=s(sce);k8o=r(Qrt,"megatron-bert"),Qrt.forEach(t),S8o=r(Bye," \u2014 "),mD=n(Bye,"A",{href:!0});var Wrt=s(mD);R8o=r(Wrt,"MegatronBertForSequenceClassification"),Wrt.forEach(t),B8o=r(Bye," (MegatronBert model)"),Bye.forEach(t),P8o=i(N),I1=n(N,"LI",{});var Pye=s(I1);lce=n(Pye,"STRONG",{});var Hrt=s(lce);I8o=r(Hrt,"mobilebert"),Hrt.forEach(t),q8o=r(Pye," \u2014 "),gD=n(Pye,"A",{href:!0});var Urt=s(gD);N8o=r(Urt,"MobileBertForSequenceClassification"),Urt.forEach(t),j8o=r(Pye," (MobileBERT model)"),Pye.forEach(t),D8o=i(N),q1=n(N,"LI",{});var Iye=s(q1);ice=n(Iye,"STRONG",{});var Jrt=s(ice);G8o=r(Jrt,"mpnet"),Jrt.forEach(t),O8o=r(Iye," \u2014 "),hD=n(Iye,"A",{href:!0});var Yrt=s(hD);V8o=r(Yrt,"MPNetForSequenceClassification"),Yrt.forEach(t),X8o=r(Iye," (MPNet model)"),Iye.forEach(t),z8o=i(N),N1=n(N,"LI",{});var qye=s(N1);dce=n(qye,"STRONG",{});var Krt=s(dce);Q8o=r(Krt,"nystromformer"),Krt.forEach(t),W8o=r(qye," \u2014 "),pD=n(qye,"A",{href:!0});var Zrt=s(pD);H8o=r(Zrt,"NystromformerForSequenceClassification"),Zrt.forEach(t),U8o=r(qye," (Nystromformer model)"),qye.forEach(t),J8o=i(N),j1=n(N,"LI",{});var Nye=s(j1);cce=n(Nye,"STRONG",{});var ett=s(cce);Y8o=r(ett,"openai-gpt"),ett.forEach(t),K8o=r(Nye," \u2014 "),uD=n(Nye,"A",{href:!0});var ott=s(uD);Z8o=r(ott,"OpenAIGPTForSequenceClassification"),ott.forEach(t),exo=r(Nye," (OpenAI GPT model)"),Nye.forEach(t),oxo=i(N),D1=n(N,"LI",{});var jye=s(D1);fce=n(jye,"STRONG",{});var rtt=s(fce);rxo=r(rtt,"perceiver"),rtt.forEach(t),txo=r(jye," \u2014 "),_D=n(jye,"A",{href:!0});var ttt=s(_D);axo=r(ttt,"PerceiverForSequenceClassification"),ttt.forEach(t),nxo=r(jye," (Perceiver model)"),jye.forEach(t),sxo=i(N),G1=n(N,"LI",{});var Dye=s(G1);mce=n(Dye,"STRONG",{});var att=s(mce);lxo=r(att,"plbart"),att.forEach(t),ixo=r(Dye," \u2014 "),bD=n(Dye,"A",{href:!0});var ntt=s(bD);dxo=r(ntt,"PLBartForSequenceClassification"),ntt.forEach(t),cxo=r(Dye," (PLBart model)"),Dye.forEach(t),fxo=i(N),O1=n(N,"LI",{});var Gye=s(O1);gce=n(Gye,"STRONG",{});var stt=s(gce);mxo=r(stt,"qdqbert"),stt.forEach(t),gxo=r(Gye," \u2014 "),vD=n(Gye,"A",{href:!0});var ltt=s(vD);hxo=r(ltt,"QDQBertForSequenceClassification"),ltt.forEach(t),pxo=r(Gye," (QDQBert model)"),Gye.forEach(t),uxo=i(N),V1=n(N,"LI",{});var Oye=s(V1);hce=n(Oye,"STRONG",{});var itt=s(hce);_xo=r(itt,"reformer"),itt.forEach(t),bxo=r(Oye," \u2014 "),FD=n(Oye,"A",{href:!0});var dtt=s(FD);vxo=r(dtt,"ReformerForSequenceClassification"),dtt.forEach(t),Fxo=r(Oye," (Reformer model)"),Oye.forEach(t),Txo=i(N),X1=n(N,"LI",{});var Vye=s(X1);pce=n(Vye,"STRONG",{});var ctt=s(pce);Mxo=r(ctt,"rembert"),ctt.forEach(t),Exo=r(Vye," \u2014 "),TD=n(Vye,"A",{href:!0});var ftt=s(TD);Cxo=r(ftt,"RemBertForSequenceClassification"),ftt.forEach(t),wxo=r(Vye," (RemBERT model)"),Vye.forEach(t),Axo=i(N),z1=n(N,"LI",{});var Xye=s(z1);uce=n(Xye,"STRONG",{});var mtt=s(uce);yxo=r(mtt,"roberta"),mtt.forEach(t),Lxo=r(Xye," \u2014 "),MD=n(Xye,"A",{href:!0});var gtt=s(MD);xxo=r(gtt,"RobertaForSequenceClassification"),gtt.forEach(t),$xo=r(Xye," (RoBERTa model)"),Xye.forEach(t),kxo=i(N),Q1=n(N,"LI",{});var zye=s(Q1);_ce=n(zye,"STRONG",{});var htt=s(_ce);Sxo=r(htt,"roformer"),htt.forEach(t),Rxo=r(zye," \u2014 "),ED=n(zye,"A",{href:!0});var ptt=s(ED);Bxo=r(ptt,"RoFormerForSequenceClassification"),ptt.forEach(t),Pxo=r(zye," (RoFormer model)"),zye.forEach(t),Ixo=i(N),W1=n(N,"LI",{});var Qye=s(W1);bce=n(Qye,"STRONG",{});var utt=s(bce);qxo=r(utt,"squeezebert"),utt.forEach(t),Nxo=r(Qye," \u2014 "),CD=n(Qye,"A",{href:!0});var _tt=s(CD);jxo=r(_tt,"SqueezeBertForSequenceClassification"),_tt.forEach(t),Dxo=r(Qye," (SqueezeBERT model)"),Qye.forEach(t),Gxo=i(N),H1=n(N,"LI",{});var Wye=s(H1);vce=n(Wye,"STRONG",{});var btt=s(vce);Oxo=r(btt,"tapas"),btt.forEach(t),Vxo=r(Wye," \u2014 "),wD=n(Wye,"A",{href:!0});var vtt=s(wD);Xxo=r(vtt,"TapasForSequenceClassification"),vtt.forEach(t),zxo=r(Wye," (TAPAS model)"),Wye.forEach(t),Qxo=i(N),U1=n(N,"LI",{});var Hye=s(U1);Fce=n(Hye,"STRONG",{});var Ftt=s(Fce);Wxo=r(Ftt,"tapex"),Ftt.forEach(t),Hxo=r(Hye," \u2014 "),AD=n(Hye,"A",{href:!0});var Ttt=s(AD);Uxo=r(Ttt,"BartForSequenceClassification"),Ttt.forEach(t),Jxo=r(Hye," (TAPEX model)"),Hye.forEach(t),Yxo=i(N),J1=n(N,"LI",{});var Uye=s(J1);Tce=n(Uye,"STRONG",{});var Mtt=s(Tce);Kxo=r(Mtt,"transfo-xl"),Mtt.forEach(t),Zxo=r(Uye," \u2014 "),yD=n(Uye,"A",{href:!0});var Ett=s(yD);e9o=r(Ett,"TransfoXLForSequenceClassification"),Ett.forEach(t),o9o=r(Uye," (Transformer-XL model)"),Uye.forEach(t),r9o=i(N),Y1=n(N,"LI",{});var Jye=s(Y1);Mce=n(Jye,"STRONG",{});var Ctt=s(Mce);t9o=r(Ctt,"xlm"),Ctt.forEach(t),a9o=r(Jye," \u2014 "),LD=n(Jye,"A",{href:!0});var wtt=s(LD);n9o=r(wtt,"XLMForSequenceClassification"),wtt.forEach(t),s9o=r(Jye," (XLM model)"),Jye.forEach(t),l9o=i(N),K1=n(N,"LI",{});var Yye=s(K1);Ece=n(Yye,"STRONG",{});var Att=s(Ece);i9o=r(Att,"xlm-roberta"),Att.forEach(t),d9o=r(Yye," \u2014 "),xD=n(Yye,"A",{href:!0});var ytt=s(xD);c9o=r(ytt,"XLMRobertaForSequenceClassification"),ytt.forEach(t),f9o=r(Yye," (XLM-RoBERTa model)"),Yye.forEach(t),m9o=i(N),Z1=n(N,"LI",{});var Kye=s(Z1);Cce=n(Kye,"STRONG",{});var Ltt=s(Cce);g9o=r(Ltt,"xlm-roberta-xl"),Ltt.forEach(t),h9o=r(Kye," \u2014 "),$D=n(Kye,"A",{href:!0});var xtt=s($D);p9o=r(xtt,"XLMRobertaXLForSequenceClassification"),xtt.forEach(t),u9o=r(Kye," (XLM-RoBERTa-XL model)"),Kye.forEach(t),_9o=i(N),eb=n(N,"LI",{});var Zye=s(eb);wce=n(Zye,"STRONG",{});var $tt=s(wce);b9o=r($tt,"xlnet"),$tt.forEach(t),v9o=r(Zye," \u2014 "),kD=n(Zye,"A",{href:!0});var ktt=s(kD);F9o=r(ktt,"XLNetForSequenceClassification"),ktt.forEach(t),T9o=r(Zye," (XLNet model)"),Zye.forEach(t),M9o=i(N),ob=n(N,"LI",{});var eLe=s(ob);Ace=n(eLe,"STRONG",{});var Stt=s(Ace);E9o=r(Stt,"yoso"),Stt.forEach(t),C9o=r(eLe," \u2014 "),SD=n(eLe,"A",{href:!0});var Rtt=s(SD);w9o=r(Rtt,"YosoForSequenceClassification"),Rtt.forEach(t),A9o=r(eLe," (YOSO model)"),eLe.forEach(t),N.forEach(t),y9o=i(oa),rb=n(oa,"P",{});var oLe=s(rb);L9o=r(oLe,"The model is set in evaluation mode by default using "),yce=n(oLe,"CODE",{});var Btt=s(yce);x9o=r(Btt,"model.eval()"),Btt.forEach(t),$9o=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(oLe,"CODE",{});var Ptt=s(Lce);k9o=r(Ptt,"model.train()"),Ptt.forEach(t),oLe.forEach(t),S9o=i(oa),T(tb.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),bPe=i(f),Bi=n(f,"H2",{class:!0});var Fqe=s(Bi);ab=n(Fqe,"A",{id:!0,class:!0,href:!0});var Itt=s(ab);xce=n(Itt,"SPAN",{});var qtt=s(xce);T(BA.$$.fragment,qtt),qtt.forEach(t),Itt.forEach(t),R9o=i(Fqe),$ce=n(Fqe,"SPAN",{});var Ntt=s($ce);B9o=r(Ntt,"AutoModelForMultipleChoice"),Ntt.forEach(t),Fqe.forEach(t),vPe=i(f),Bo=n(f,"DIV",{class:!0});var Os=s(Bo);T(PA.$$.fragment,Os),P9o=i(Os),Pi=n(Os,"P",{});var zY=s(Pi);I9o=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RD=n(zY,"A",{href:!0});var jtt=s(RD);q9o=r(jtt,"from_pretrained()"),jtt.forEach(t),N9o=r(zY," class method or the "),BD=n(zY,"A",{href:!0});var Dtt=s(BD);j9o=r(Dtt,"from_config()"),Dtt.forEach(t),D9o=r(zY,` class
method.`),zY.forEach(t),G9o=i(Os),IA=n(Os,"P",{});var Tqe=s(IA);O9o=r(Tqe,"This class cannot be instantiated directly using "),kce=n(Tqe,"CODE",{});var Gtt=s(kce);V9o=r(Gtt,"__init__()"),Gtt.forEach(t),X9o=r(Tqe," (throws an error)."),Tqe.forEach(t),z9o=i(Os),nt=n(Os,"DIV",{class:!0});var UC=s(nt);T(qA.$$.fragment,UC),Q9o=i(UC),Sce=n(UC,"P",{});var Ott=s(Sce);W9o=r(Ott,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ott.forEach(t),H9o=i(UC),Ii=n(UC,"P",{});var QY=s(Ii);U9o=r(QY,`Note:
Loading a model from its configuration file does `),Rce=n(QY,"STRONG",{});var Vtt=s(Rce);J9o=r(Vtt,"not"),Vtt.forEach(t),Y9o=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=n(QY,"A",{href:!0});var Xtt=s(PD);K9o=r(Xtt,"from_pretrained()"),Xtt.forEach(t),Z9o=r(QY," to load the model weights."),QY.forEach(t),e$o=i(UC),T(nb.$$.fragment,UC),UC.forEach(t),o$o=i(Os),eo=n(Os,"DIV",{class:!0});var ra=s(eo);T(NA.$$.fragment,ra),r$o=i(ra),Bce=n(ra,"P",{});var ztt=s(Bce);t$o=r(ztt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ztt.forEach(t),a$o=i(ra),xa=n(ra,"P",{});var JC=s(xa);n$o=r(JC,"The model class to instantiate is selected based on the "),Pce=n(JC,"CODE",{});var Qtt=s(Pce);s$o=r(Qtt,"model_type"),Qtt.forEach(t),l$o=r(JC,` property of the config object (either
passed as an argument or loaded from `),Ice=n(JC,"CODE",{});var Wtt=s(Ice);i$o=r(Wtt,"pretrained_model_name_or_path"),Wtt.forEach(t),d$o=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=n(JC,"CODE",{});var Htt=s(qce);c$o=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),f$o=r(JC,":"),JC.forEach(t),m$o=i(ra),Y=n(ra,"UL",{});var K=s(Y);sb=n(K,"LI",{});var rLe=s(sb);Nce=n(rLe,"STRONG",{});var Utt=s(Nce);g$o=r(Utt,"albert"),Utt.forEach(t),h$o=r(rLe," \u2014 "),ID=n(rLe,"A",{href:!0});var Jtt=s(ID);p$o=r(Jtt,"AlbertForMultipleChoice"),Jtt.forEach(t),u$o=r(rLe," (ALBERT model)"),rLe.forEach(t),_$o=i(K),lb=n(K,"LI",{});var tLe=s(lb);jce=n(tLe,"STRONG",{});var Ytt=s(jce);b$o=r(Ytt,"bert"),Ytt.forEach(t),v$o=r(tLe," \u2014 "),qD=n(tLe,"A",{href:!0});var Ktt=s(qD);F$o=r(Ktt,"BertForMultipleChoice"),Ktt.forEach(t),T$o=r(tLe," (BERT model)"),tLe.forEach(t),M$o=i(K),ib=n(K,"LI",{});var aLe=s(ib);Dce=n(aLe,"STRONG",{});var Ztt=s(Dce);E$o=r(Ztt,"big_bird"),Ztt.forEach(t),C$o=r(aLe," \u2014 "),ND=n(aLe,"A",{href:!0});var eat=s(ND);w$o=r(eat,"BigBirdForMultipleChoice"),eat.forEach(t),A$o=r(aLe," (BigBird model)"),aLe.forEach(t),y$o=i(K),db=n(K,"LI",{});var nLe=s(db);Gce=n(nLe,"STRONG",{});var oat=s(Gce);L$o=r(oat,"camembert"),oat.forEach(t),x$o=r(nLe," \u2014 "),jD=n(nLe,"A",{href:!0});var rat=s(jD);$$o=r(rat,"CamembertForMultipleChoice"),rat.forEach(t),k$o=r(nLe," (CamemBERT model)"),nLe.forEach(t),S$o=i(K),cb=n(K,"LI",{});var sLe=s(cb);Oce=n(sLe,"STRONG",{});var tat=s(Oce);R$o=r(tat,"canine"),tat.forEach(t),B$o=r(sLe," \u2014 "),DD=n(sLe,"A",{href:!0});var aat=s(DD);P$o=r(aat,"CanineForMultipleChoice"),aat.forEach(t),I$o=r(sLe," (Canine model)"),sLe.forEach(t),q$o=i(K),fb=n(K,"LI",{});var lLe=s(fb);Vce=n(lLe,"STRONG",{});var nat=s(Vce);N$o=r(nat,"convbert"),nat.forEach(t),j$o=r(lLe," \u2014 "),GD=n(lLe,"A",{href:!0});var sat=s(GD);D$o=r(sat,"ConvBertForMultipleChoice"),sat.forEach(t),G$o=r(lLe," (ConvBERT model)"),lLe.forEach(t),O$o=i(K),mb=n(K,"LI",{});var iLe=s(mb);Xce=n(iLe,"STRONG",{});var lat=s(Xce);V$o=r(lat,"data2vec-text"),lat.forEach(t),X$o=r(iLe," \u2014 "),OD=n(iLe,"A",{href:!0});var iat=s(OD);z$o=r(iat,"Data2VecTextForMultipleChoice"),iat.forEach(t),Q$o=r(iLe," (Data2VecText model)"),iLe.forEach(t),W$o=i(K),gb=n(K,"LI",{});var dLe=s(gb);zce=n(dLe,"STRONG",{});var dat=s(zce);H$o=r(dat,"distilbert"),dat.forEach(t),U$o=r(dLe," \u2014 "),VD=n(dLe,"A",{href:!0});var cat=s(VD);J$o=r(cat,"DistilBertForMultipleChoice"),cat.forEach(t),Y$o=r(dLe," (DistilBERT model)"),dLe.forEach(t),K$o=i(K),hb=n(K,"LI",{});var cLe=s(hb);Qce=n(cLe,"STRONG",{});var fat=s(Qce);Z$o=r(fat,"electra"),fat.forEach(t),eko=r(cLe," \u2014 "),XD=n(cLe,"A",{href:!0});var mat=s(XD);oko=r(mat,"ElectraForMultipleChoice"),mat.forEach(t),rko=r(cLe," (ELECTRA model)"),cLe.forEach(t),tko=i(K),pb=n(K,"LI",{});var fLe=s(pb);Wce=n(fLe,"STRONG",{});var gat=s(Wce);ako=r(gat,"flaubert"),gat.forEach(t),nko=r(fLe," \u2014 "),zD=n(fLe,"A",{href:!0});var hat=s(zD);sko=r(hat,"FlaubertForMultipleChoice"),hat.forEach(t),lko=r(fLe," (FlauBERT model)"),fLe.forEach(t),iko=i(K),ub=n(K,"LI",{});var mLe=s(ub);Hce=n(mLe,"STRONG",{});var pat=s(Hce);dko=r(pat,"fnet"),pat.forEach(t),cko=r(mLe," \u2014 "),QD=n(mLe,"A",{href:!0});var uat=s(QD);fko=r(uat,"FNetForMultipleChoice"),uat.forEach(t),mko=r(mLe," (FNet model)"),mLe.forEach(t),gko=i(K),_b=n(K,"LI",{});var gLe=s(_b);Uce=n(gLe,"STRONG",{});var _at=s(Uce);hko=r(_at,"funnel"),_at.forEach(t),pko=r(gLe," \u2014 "),WD=n(gLe,"A",{href:!0});var bat=s(WD);uko=r(bat,"FunnelForMultipleChoice"),bat.forEach(t),_ko=r(gLe," (Funnel Transformer model)"),gLe.forEach(t),bko=i(K),bb=n(K,"LI",{});var hLe=s(bb);Jce=n(hLe,"STRONG",{});var vat=s(Jce);vko=r(vat,"ibert"),vat.forEach(t),Fko=r(hLe," \u2014 "),HD=n(hLe,"A",{href:!0});var Fat=s(HD);Tko=r(Fat,"IBertForMultipleChoice"),Fat.forEach(t),Mko=r(hLe," (I-BERT model)"),hLe.forEach(t),Eko=i(K),vb=n(K,"LI",{});var pLe=s(vb);Yce=n(pLe,"STRONG",{});var Tat=s(Yce);Cko=r(Tat,"longformer"),Tat.forEach(t),wko=r(pLe," \u2014 "),UD=n(pLe,"A",{href:!0});var Mat=s(UD);Ako=r(Mat,"LongformerForMultipleChoice"),Mat.forEach(t),yko=r(pLe," (Longformer model)"),pLe.forEach(t),Lko=i(K),Fb=n(K,"LI",{});var uLe=s(Fb);Kce=n(uLe,"STRONG",{});var Eat=s(Kce);xko=r(Eat,"megatron-bert"),Eat.forEach(t),$ko=r(uLe," \u2014 "),JD=n(uLe,"A",{href:!0});var Cat=s(JD);kko=r(Cat,"MegatronBertForMultipleChoice"),Cat.forEach(t),Sko=r(uLe," (MegatronBert model)"),uLe.forEach(t),Rko=i(K),Tb=n(K,"LI",{});var _Le=s(Tb);Zce=n(_Le,"STRONG",{});var wat=s(Zce);Bko=r(wat,"mobilebert"),wat.forEach(t),Pko=r(_Le," \u2014 "),YD=n(_Le,"A",{href:!0});var Aat=s(YD);Iko=r(Aat,"MobileBertForMultipleChoice"),Aat.forEach(t),qko=r(_Le," (MobileBERT model)"),_Le.forEach(t),Nko=i(K),Mb=n(K,"LI",{});var bLe=s(Mb);efe=n(bLe,"STRONG",{});var yat=s(efe);jko=r(yat,"mpnet"),yat.forEach(t),Dko=r(bLe," \u2014 "),KD=n(bLe,"A",{href:!0});var Lat=s(KD);Gko=r(Lat,"MPNetForMultipleChoice"),Lat.forEach(t),Oko=r(bLe," (MPNet model)"),bLe.forEach(t),Vko=i(K),Eb=n(K,"LI",{});var vLe=s(Eb);ofe=n(vLe,"STRONG",{});var xat=s(ofe);Xko=r(xat,"nystromformer"),xat.forEach(t),zko=r(vLe," \u2014 "),ZD=n(vLe,"A",{href:!0});var $at=s(ZD);Qko=r($at,"NystromformerForMultipleChoice"),$at.forEach(t),Wko=r(vLe," (Nystromformer model)"),vLe.forEach(t),Hko=i(K),Cb=n(K,"LI",{});var FLe=s(Cb);rfe=n(FLe,"STRONG",{});var kat=s(rfe);Uko=r(kat,"qdqbert"),kat.forEach(t),Jko=r(FLe," \u2014 "),eG=n(FLe,"A",{href:!0});var Sat=s(eG);Yko=r(Sat,"QDQBertForMultipleChoice"),Sat.forEach(t),Kko=r(FLe," (QDQBert model)"),FLe.forEach(t),Zko=i(K),wb=n(K,"LI",{});var TLe=s(wb);tfe=n(TLe,"STRONG",{});var Rat=s(tfe);eSo=r(Rat,"rembert"),Rat.forEach(t),oSo=r(TLe," \u2014 "),oG=n(TLe,"A",{href:!0});var Bat=s(oG);rSo=r(Bat,"RemBertForMultipleChoice"),Bat.forEach(t),tSo=r(TLe," (RemBERT model)"),TLe.forEach(t),aSo=i(K),Ab=n(K,"LI",{});var MLe=s(Ab);afe=n(MLe,"STRONG",{});var Pat=s(afe);nSo=r(Pat,"roberta"),Pat.forEach(t),sSo=r(MLe," \u2014 "),rG=n(MLe,"A",{href:!0});var Iat=s(rG);lSo=r(Iat,"RobertaForMultipleChoice"),Iat.forEach(t),iSo=r(MLe," (RoBERTa model)"),MLe.forEach(t),dSo=i(K),yb=n(K,"LI",{});var ELe=s(yb);nfe=n(ELe,"STRONG",{});var qat=s(nfe);cSo=r(qat,"roformer"),qat.forEach(t),fSo=r(ELe," \u2014 "),tG=n(ELe,"A",{href:!0});var Nat=s(tG);mSo=r(Nat,"RoFormerForMultipleChoice"),Nat.forEach(t),gSo=r(ELe," (RoFormer model)"),ELe.forEach(t),hSo=i(K),Lb=n(K,"LI",{});var CLe=s(Lb);sfe=n(CLe,"STRONG",{});var jat=s(sfe);pSo=r(jat,"squeezebert"),jat.forEach(t),uSo=r(CLe," \u2014 "),aG=n(CLe,"A",{href:!0});var Dat=s(aG);_So=r(Dat,"SqueezeBertForMultipleChoice"),Dat.forEach(t),bSo=r(CLe," (SqueezeBERT model)"),CLe.forEach(t),vSo=i(K),xb=n(K,"LI",{});var wLe=s(xb);lfe=n(wLe,"STRONG",{});var Gat=s(lfe);FSo=r(Gat,"xlm"),Gat.forEach(t),TSo=r(wLe," \u2014 "),nG=n(wLe,"A",{href:!0});var Oat=s(nG);MSo=r(Oat,"XLMForMultipleChoice"),Oat.forEach(t),ESo=r(wLe," (XLM model)"),wLe.forEach(t),CSo=i(K),$b=n(K,"LI",{});var ALe=s($b);ife=n(ALe,"STRONG",{});var Vat=s(ife);wSo=r(Vat,"xlm-roberta"),Vat.forEach(t),ASo=r(ALe," \u2014 "),sG=n(ALe,"A",{href:!0});var Xat=s(sG);ySo=r(Xat,"XLMRobertaForMultipleChoice"),Xat.forEach(t),LSo=r(ALe," (XLM-RoBERTa model)"),ALe.forEach(t),xSo=i(K),kb=n(K,"LI",{});var yLe=s(kb);dfe=n(yLe,"STRONG",{});var zat=s(dfe);$So=r(zat,"xlm-roberta-xl"),zat.forEach(t),kSo=r(yLe," \u2014 "),lG=n(yLe,"A",{href:!0});var Qat=s(lG);SSo=r(Qat,"XLMRobertaXLForMultipleChoice"),Qat.forEach(t),RSo=r(yLe," (XLM-RoBERTa-XL model)"),yLe.forEach(t),BSo=i(K),Sb=n(K,"LI",{});var LLe=s(Sb);cfe=n(LLe,"STRONG",{});var Wat=s(cfe);PSo=r(Wat,"xlnet"),Wat.forEach(t),ISo=r(LLe," \u2014 "),iG=n(LLe,"A",{href:!0});var Hat=s(iG);qSo=r(Hat,"XLNetForMultipleChoice"),Hat.forEach(t),NSo=r(LLe," (XLNet model)"),LLe.forEach(t),jSo=i(K),Rb=n(K,"LI",{});var xLe=s(Rb);ffe=n(xLe,"STRONG",{});var Uat=s(ffe);DSo=r(Uat,"yoso"),Uat.forEach(t),GSo=r(xLe," \u2014 "),dG=n(xLe,"A",{href:!0});var Jat=s(dG);OSo=r(Jat,"YosoForMultipleChoice"),Jat.forEach(t),VSo=r(xLe," (YOSO model)"),xLe.forEach(t),K.forEach(t),XSo=i(ra),Bb=n(ra,"P",{});var $Le=s(Bb);zSo=r($Le,"The model is set in evaluation mode by default using "),mfe=n($Le,"CODE",{});var Yat=s(mfe);QSo=r(Yat,"model.eval()"),Yat.forEach(t),WSo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=n($Le,"CODE",{});var Kat=s(gfe);HSo=r(Kat,"model.train()"),Kat.forEach(t),$Le.forEach(t),USo=i(ra),T(Pb.$$.fragment,ra),ra.forEach(t),Os.forEach(t),FPe=i(f),qi=n(f,"H2",{class:!0});var Mqe=s(qi);Ib=n(Mqe,"A",{id:!0,class:!0,href:!0});var Zat=s(Ib);hfe=n(Zat,"SPAN",{});var ent=s(hfe);T(jA.$$.fragment,ent),ent.forEach(t),Zat.forEach(t),JSo=i(Mqe),pfe=n(Mqe,"SPAN",{});var ont=s(pfe);YSo=r(ont,"AutoModelForNextSentencePrediction"),ont.forEach(t),Mqe.forEach(t),TPe=i(f),Po=n(f,"DIV",{class:!0});var Vs=s(Po);T(DA.$$.fragment,Vs),KSo=i(Vs),Ni=n(Vs,"P",{});var WY=s(Ni);ZSo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cG=n(WY,"A",{href:!0});var rnt=s(cG);eRo=r(rnt,"from_pretrained()"),rnt.forEach(t),oRo=r(WY," class method or the "),fG=n(WY,"A",{href:!0});var tnt=s(fG);rRo=r(tnt,"from_config()"),tnt.forEach(t),tRo=r(WY,` class
method.`),WY.forEach(t),aRo=i(Vs),GA=n(Vs,"P",{});var Eqe=s(GA);nRo=r(Eqe,"This class cannot be instantiated directly using "),ufe=n(Eqe,"CODE",{});var ant=s(ufe);sRo=r(ant,"__init__()"),ant.forEach(t),lRo=r(Eqe," (throws an error)."),Eqe.forEach(t),iRo=i(Vs),st=n(Vs,"DIV",{class:!0});var YC=s(st);T(OA.$$.fragment,YC),dRo=i(YC),_fe=n(YC,"P",{});var nnt=s(_fe);cRo=r(nnt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nnt.forEach(t),fRo=i(YC),ji=n(YC,"P",{});var HY=s(ji);mRo=r(HY,`Note:
Loading a model from its configuration file does `),bfe=n(HY,"STRONG",{});var snt=s(bfe);gRo=r(snt,"not"),snt.forEach(t),hRo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n(HY,"A",{href:!0});var lnt=s(mG);pRo=r(lnt,"from_pretrained()"),lnt.forEach(t),uRo=r(HY," to load the model weights."),HY.forEach(t),_Ro=i(YC),T(qb.$$.fragment,YC),YC.forEach(t),bRo=i(Vs),oo=n(Vs,"DIV",{class:!0});var ta=s(oo);T(VA.$$.fragment,ta),vRo=i(ta),vfe=n(ta,"P",{});var int=s(vfe);FRo=r(int,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),int.forEach(t),TRo=i(ta),$a=n(ta,"P",{});var KC=s($a);MRo=r(KC,"The model class to instantiate is selected based on the "),Ffe=n(KC,"CODE",{});var dnt=s(Ffe);ERo=r(dnt,"model_type"),dnt.forEach(t),CRo=r(KC,` property of the config object (either
passed as an argument or loaded from `),Tfe=n(KC,"CODE",{});var cnt=s(Tfe);wRo=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),ARo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=n(KC,"CODE",{});var fnt=s(Mfe);yRo=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),LRo=r(KC,":"),KC.forEach(t),xRo=i(ta),Ur=n(ta,"UL",{});var Xs=s(Ur);Nb=n(Xs,"LI",{});var kLe=s(Nb);Efe=n(kLe,"STRONG",{});var mnt=s(Efe);$Ro=r(mnt,"bert"),mnt.forEach(t),kRo=r(kLe," \u2014 "),gG=n(kLe,"A",{href:!0});var gnt=s(gG);SRo=r(gnt,"BertForNextSentencePrediction"),gnt.forEach(t),RRo=r(kLe," (BERT model)"),kLe.forEach(t),BRo=i(Xs),jb=n(Xs,"LI",{});var SLe=s(jb);Cfe=n(SLe,"STRONG",{});var hnt=s(Cfe);PRo=r(hnt,"fnet"),hnt.forEach(t),IRo=r(SLe," \u2014 "),hG=n(SLe,"A",{href:!0});var pnt=s(hG);qRo=r(pnt,"FNetForNextSentencePrediction"),pnt.forEach(t),NRo=r(SLe," (FNet model)"),SLe.forEach(t),jRo=i(Xs),Db=n(Xs,"LI",{});var RLe=s(Db);wfe=n(RLe,"STRONG",{});var unt=s(wfe);DRo=r(unt,"megatron-bert"),unt.forEach(t),GRo=r(RLe," \u2014 "),pG=n(RLe,"A",{href:!0});var _nt=s(pG);ORo=r(_nt,"MegatronBertForNextSentencePrediction"),_nt.forEach(t),VRo=r(RLe," (MegatronBert model)"),RLe.forEach(t),XRo=i(Xs),Gb=n(Xs,"LI",{});var BLe=s(Gb);Afe=n(BLe,"STRONG",{});var bnt=s(Afe);zRo=r(bnt,"mobilebert"),bnt.forEach(t),QRo=r(BLe," \u2014 "),uG=n(BLe,"A",{href:!0});var vnt=s(uG);WRo=r(vnt,"MobileBertForNextSentencePrediction"),vnt.forEach(t),HRo=r(BLe," (MobileBERT model)"),BLe.forEach(t),URo=i(Xs),Ob=n(Xs,"LI",{});var PLe=s(Ob);yfe=n(PLe,"STRONG",{});var Fnt=s(yfe);JRo=r(Fnt,"qdqbert"),Fnt.forEach(t),YRo=r(PLe," \u2014 "),_G=n(PLe,"A",{href:!0});var Tnt=s(_G);KRo=r(Tnt,"QDQBertForNextSentencePrediction"),Tnt.forEach(t),ZRo=r(PLe," (QDQBert model)"),PLe.forEach(t),Xs.forEach(t),eBo=i(ta),Vb=n(ta,"P",{});var ILe=s(Vb);oBo=r(ILe,"The model is set in evaluation mode by default using "),Lfe=n(ILe,"CODE",{});var Mnt=s(Lfe);rBo=r(Mnt,"model.eval()"),Mnt.forEach(t),tBo=r(ILe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(ILe,"CODE",{});var Ent=s(xfe);aBo=r(Ent,"model.train()"),Ent.forEach(t),ILe.forEach(t),nBo=i(ta),T(Xb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),MPe=i(f),Di=n(f,"H2",{class:!0});var Cqe=s(Di);zb=n(Cqe,"A",{id:!0,class:!0,href:!0});var Cnt=s(zb);$fe=n(Cnt,"SPAN",{});var wnt=s($fe);T(XA.$$.fragment,wnt),wnt.forEach(t),Cnt.forEach(t),sBo=i(Cqe),kfe=n(Cqe,"SPAN",{});var Ant=s(kfe);lBo=r(Ant,"AutoModelForTokenClassification"),Ant.forEach(t),Cqe.forEach(t),EPe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(zA.$$.fragment,zs),iBo=i(zs),Gi=n(zs,"P",{});var UY=s(Gi);dBo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bG=n(UY,"A",{href:!0});var ynt=s(bG);cBo=r(ynt,"from_pretrained()"),ynt.forEach(t),fBo=r(UY," class method or the "),vG=n(UY,"A",{href:!0});var Lnt=s(vG);mBo=r(Lnt,"from_config()"),Lnt.forEach(t),gBo=r(UY,` class
method.`),UY.forEach(t),hBo=i(zs),QA=n(zs,"P",{});var wqe=s(QA);pBo=r(wqe,"This class cannot be instantiated directly using "),Sfe=n(wqe,"CODE",{});var xnt=s(Sfe);uBo=r(xnt,"__init__()"),xnt.forEach(t),_Bo=r(wqe," (throws an error)."),wqe.forEach(t),bBo=i(zs),lt=n(zs,"DIV",{class:!0});var ZC=s(lt);T(WA.$$.fragment,ZC),vBo=i(ZC),Rfe=n(ZC,"P",{});var $nt=s(Rfe);FBo=r($nt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$nt.forEach(t),TBo=i(ZC),Oi=n(ZC,"P",{});var JY=s(Oi);MBo=r(JY,`Note:
Loading a model from its configuration file does `),Bfe=n(JY,"STRONG",{});var knt=s(Bfe);EBo=r(knt,"not"),knt.forEach(t),CBo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(JY,"A",{href:!0});var Snt=s(FG);wBo=r(Snt,"from_pretrained()"),Snt.forEach(t),ABo=r(JY," to load the model weights."),JY.forEach(t),yBo=i(ZC),T(Qb.$$.fragment,ZC),ZC.forEach(t),LBo=i(zs),ro=n(zs,"DIV",{class:!0});var aa=s(ro);T(HA.$$.fragment,aa),xBo=i(aa),Pfe=n(aa,"P",{});var Rnt=s(Pfe);$Bo=r(Rnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Rnt.forEach(t),kBo=i(aa),ka=n(aa,"P",{});var e3=s(ka);SBo=r(e3,"The model class to instantiate is selected based on the "),Ife=n(e3,"CODE",{});var Bnt=s(Ife);RBo=r(Bnt,"model_type"),Bnt.forEach(t),BBo=r(e3,` property of the config object (either
passed as an argument or loaded from `),qfe=n(e3,"CODE",{});var Pnt=s(qfe);PBo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),IBo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=n(e3,"CODE",{});var Int=s(Nfe);qBo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),NBo=r(e3,":"),e3.forEach(t),jBo=i(aa),W=n(aa,"UL",{});var J=s(W);Wb=n(J,"LI",{});var qLe=s(Wb);jfe=n(qLe,"STRONG",{});var qnt=s(jfe);DBo=r(qnt,"albert"),qnt.forEach(t),GBo=r(qLe," \u2014 "),TG=n(qLe,"A",{href:!0});var Nnt=s(TG);OBo=r(Nnt,"AlbertForTokenClassification"),Nnt.forEach(t),VBo=r(qLe," (ALBERT model)"),qLe.forEach(t),XBo=i(J),Hb=n(J,"LI",{});var NLe=s(Hb);Dfe=n(NLe,"STRONG",{});var jnt=s(Dfe);zBo=r(jnt,"bert"),jnt.forEach(t),QBo=r(NLe," \u2014 "),MG=n(NLe,"A",{href:!0});var Dnt=s(MG);WBo=r(Dnt,"BertForTokenClassification"),Dnt.forEach(t),HBo=r(NLe," (BERT model)"),NLe.forEach(t),UBo=i(J),Ub=n(J,"LI",{});var jLe=s(Ub);Gfe=n(jLe,"STRONG",{});var Gnt=s(Gfe);JBo=r(Gnt,"big_bird"),Gnt.forEach(t),YBo=r(jLe," \u2014 "),EG=n(jLe,"A",{href:!0});var Ont=s(EG);KBo=r(Ont,"BigBirdForTokenClassification"),Ont.forEach(t),ZBo=r(jLe," (BigBird model)"),jLe.forEach(t),ePo=i(J),Jb=n(J,"LI",{});var DLe=s(Jb);Ofe=n(DLe,"STRONG",{});var Vnt=s(Ofe);oPo=r(Vnt,"camembert"),Vnt.forEach(t),rPo=r(DLe," \u2014 "),CG=n(DLe,"A",{href:!0});var Xnt=s(CG);tPo=r(Xnt,"CamembertForTokenClassification"),Xnt.forEach(t),aPo=r(DLe," (CamemBERT model)"),DLe.forEach(t),nPo=i(J),Yb=n(J,"LI",{});var GLe=s(Yb);Vfe=n(GLe,"STRONG",{});var znt=s(Vfe);sPo=r(znt,"canine"),znt.forEach(t),lPo=r(GLe," \u2014 "),wG=n(GLe,"A",{href:!0});var Qnt=s(wG);iPo=r(Qnt,"CanineForTokenClassification"),Qnt.forEach(t),dPo=r(GLe," (Canine model)"),GLe.forEach(t),cPo=i(J),Kb=n(J,"LI",{});var OLe=s(Kb);Xfe=n(OLe,"STRONG",{});var Wnt=s(Xfe);fPo=r(Wnt,"convbert"),Wnt.forEach(t),mPo=r(OLe," \u2014 "),AG=n(OLe,"A",{href:!0});var Hnt=s(AG);gPo=r(Hnt,"ConvBertForTokenClassification"),Hnt.forEach(t),hPo=r(OLe," (ConvBERT model)"),OLe.forEach(t),pPo=i(J),Zb=n(J,"LI",{});var VLe=s(Zb);zfe=n(VLe,"STRONG",{});var Unt=s(zfe);uPo=r(Unt,"data2vec-text"),Unt.forEach(t),_Po=r(VLe," \u2014 "),yG=n(VLe,"A",{href:!0});var Jnt=s(yG);bPo=r(Jnt,"Data2VecTextForTokenClassification"),Jnt.forEach(t),vPo=r(VLe," (Data2VecText model)"),VLe.forEach(t),FPo=i(J),e2=n(J,"LI",{});var XLe=s(e2);Qfe=n(XLe,"STRONG",{});var Ynt=s(Qfe);TPo=r(Ynt,"deberta"),Ynt.forEach(t),MPo=r(XLe," \u2014 "),LG=n(XLe,"A",{href:!0});var Knt=s(LG);EPo=r(Knt,"DebertaForTokenClassification"),Knt.forEach(t),CPo=r(XLe," (DeBERTa model)"),XLe.forEach(t),wPo=i(J),o2=n(J,"LI",{});var zLe=s(o2);Wfe=n(zLe,"STRONG",{});var Znt=s(Wfe);APo=r(Znt,"deberta-v2"),Znt.forEach(t),yPo=r(zLe," \u2014 "),xG=n(zLe,"A",{href:!0});var est=s(xG);LPo=r(est,"DebertaV2ForTokenClassification"),est.forEach(t),xPo=r(zLe," (DeBERTa-v2 model)"),zLe.forEach(t),$Po=i(J),r2=n(J,"LI",{});var QLe=s(r2);Hfe=n(QLe,"STRONG",{});var ost=s(Hfe);kPo=r(ost,"distilbert"),ost.forEach(t),SPo=r(QLe," \u2014 "),$G=n(QLe,"A",{href:!0});var rst=s($G);RPo=r(rst,"DistilBertForTokenClassification"),rst.forEach(t),BPo=r(QLe," (DistilBERT model)"),QLe.forEach(t),PPo=i(J),t2=n(J,"LI",{});var WLe=s(t2);Ufe=n(WLe,"STRONG",{});var tst=s(Ufe);IPo=r(tst,"electra"),tst.forEach(t),qPo=r(WLe," \u2014 "),kG=n(WLe,"A",{href:!0});var ast=s(kG);NPo=r(ast,"ElectraForTokenClassification"),ast.forEach(t),jPo=r(WLe," (ELECTRA model)"),WLe.forEach(t),DPo=i(J),a2=n(J,"LI",{});var HLe=s(a2);Jfe=n(HLe,"STRONG",{});var nst=s(Jfe);GPo=r(nst,"flaubert"),nst.forEach(t),OPo=r(HLe," \u2014 "),SG=n(HLe,"A",{href:!0});var sst=s(SG);VPo=r(sst,"FlaubertForTokenClassification"),sst.forEach(t),XPo=r(HLe," (FlauBERT model)"),HLe.forEach(t),zPo=i(J),n2=n(J,"LI",{});var ULe=s(n2);Yfe=n(ULe,"STRONG",{});var lst=s(Yfe);QPo=r(lst,"fnet"),lst.forEach(t),WPo=r(ULe," \u2014 "),RG=n(ULe,"A",{href:!0});var ist=s(RG);HPo=r(ist,"FNetForTokenClassification"),ist.forEach(t),UPo=r(ULe," (FNet model)"),ULe.forEach(t),JPo=i(J),s2=n(J,"LI",{});var JLe=s(s2);Kfe=n(JLe,"STRONG",{});var dst=s(Kfe);YPo=r(dst,"funnel"),dst.forEach(t),KPo=r(JLe," \u2014 "),BG=n(JLe,"A",{href:!0});var cst=s(BG);ZPo=r(cst,"FunnelForTokenClassification"),cst.forEach(t),eIo=r(JLe," (Funnel Transformer model)"),JLe.forEach(t),oIo=i(J),l2=n(J,"LI",{});var YLe=s(l2);Zfe=n(YLe,"STRONG",{});var fst=s(Zfe);rIo=r(fst,"gpt2"),fst.forEach(t),tIo=r(YLe," \u2014 "),PG=n(YLe,"A",{href:!0});var mst=s(PG);aIo=r(mst,"GPT2ForTokenClassification"),mst.forEach(t),nIo=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),sIo=i(J),i2=n(J,"LI",{});var KLe=s(i2);eme=n(KLe,"STRONG",{});var gst=s(eme);lIo=r(gst,"ibert"),gst.forEach(t),iIo=r(KLe," \u2014 "),IG=n(KLe,"A",{href:!0});var hst=s(IG);dIo=r(hst,"IBertForTokenClassification"),hst.forEach(t),cIo=r(KLe," (I-BERT model)"),KLe.forEach(t),fIo=i(J),d2=n(J,"LI",{});var ZLe=s(d2);ome=n(ZLe,"STRONG",{});var pst=s(ome);mIo=r(pst,"layoutlm"),pst.forEach(t),gIo=r(ZLe," \u2014 "),qG=n(ZLe,"A",{href:!0});var ust=s(qG);hIo=r(ust,"LayoutLMForTokenClassification"),ust.forEach(t),pIo=r(ZLe," (LayoutLM model)"),ZLe.forEach(t),uIo=i(J),c2=n(J,"LI",{});var e8e=s(c2);rme=n(e8e,"STRONG",{});var _st=s(rme);_Io=r(_st,"layoutlmv2"),_st.forEach(t),bIo=r(e8e," \u2014 "),NG=n(e8e,"A",{href:!0});var bst=s(NG);vIo=r(bst,"LayoutLMv2ForTokenClassification"),bst.forEach(t),FIo=r(e8e," (LayoutLMv2 model)"),e8e.forEach(t),TIo=i(J),f2=n(J,"LI",{});var o8e=s(f2);tme=n(o8e,"STRONG",{});var vst=s(tme);MIo=r(vst,"layoutlmv3"),vst.forEach(t),EIo=r(o8e," \u2014 "),jG=n(o8e,"A",{href:!0});var Fst=s(jG);CIo=r(Fst,"LayoutLMv3ForTokenClassification"),Fst.forEach(t),wIo=r(o8e," (LayoutLMv3 model)"),o8e.forEach(t),AIo=i(J),m2=n(J,"LI",{});var r8e=s(m2);ame=n(r8e,"STRONG",{});var Tst=s(ame);yIo=r(Tst,"longformer"),Tst.forEach(t),LIo=r(r8e," \u2014 "),DG=n(r8e,"A",{href:!0});var Mst=s(DG);xIo=r(Mst,"LongformerForTokenClassification"),Mst.forEach(t),$Io=r(r8e," (Longformer model)"),r8e.forEach(t),kIo=i(J),g2=n(J,"LI",{});var t8e=s(g2);nme=n(t8e,"STRONG",{});var Est=s(nme);SIo=r(Est,"megatron-bert"),Est.forEach(t),RIo=r(t8e," \u2014 "),GG=n(t8e,"A",{href:!0});var Cst=s(GG);BIo=r(Cst,"MegatronBertForTokenClassification"),Cst.forEach(t),PIo=r(t8e," (MegatronBert model)"),t8e.forEach(t),IIo=i(J),h2=n(J,"LI",{});var a8e=s(h2);sme=n(a8e,"STRONG",{});var wst=s(sme);qIo=r(wst,"mobilebert"),wst.forEach(t),NIo=r(a8e," \u2014 "),OG=n(a8e,"A",{href:!0});var Ast=s(OG);jIo=r(Ast,"MobileBertForTokenClassification"),Ast.forEach(t),DIo=r(a8e," (MobileBERT model)"),a8e.forEach(t),GIo=i(J),p2=n(J,"LI",{});var n8e=s(p2);lme=n(n8e,"STRONG",{});var yst=s(lme);OIo=r(yst,"mpnet"),yst.forEach(t),VIo=r(n8e," \u2014 "),VG=n(n8e,"A",{href:!0});var Lst=s(VG);XIo=r(Lst,"MPNetForTokenClassification"),Lst.forEach(t),zIo=r(n8e," (MPNet model)"),n8e.forEach(t),QIo=i(J),u2=n(J,"LI",{});var s8e=s(u2);ime=n(s8e,"STRONG",{});var xst=s(ime);WIo=r(xst,"nystromformer"),xst.forEach(t),HIo=r(s8e," \u2014 "),XG=n(s8e,"A",{href:!0});var $st=s(XG);UIo=r($st,"NystromformerForTokenClassification"),$st.forEach(t),JIo=r(s8e," (Nystromformer model)"),s8e.forEach(t),YIo=i(J),_2=n(J,"LI",{});var l8e=s(_2);dme=n(l8e,"STRONG",{});var kst=s(dme);KIo=r(kst,"qdqbert"),kst.forEach(t),ZIo=r(l8e," \u2014 "),zG=n(l8e,"A",{href:!0});var Sst=s(zG);eqo=r(Sst,"QDQBertForTokenClassification"),Sst.forEach(t),oqo=r(l8e," (QDQBert model)"),l8e.forEach(t),rqo=i(J),b2=n(J,"LI",{});var i8e=s(b2);cme=n(i8e,"STRONG",{});var Rst=s(cme);tqo=r(Rst,"rembert"),Rst.forEach(t),aqo=r(i8e," \u2014 "),QG=n(i8e,"A",{href:!0});var Bst=s(QG);nqo=r(Bst,"RemBertForTokenClassification"),Bst.forEach(t),sqo=r(i8e," (RemBERT model)"),i8e.forEach(t),lqo=i(J),v2=n(J,"LI",{});var d8e=s(v2);fme=n(d8e,"STRONG",{});var Pst=s(fme);iqo=r(Pst,"roberta"),Pst.forEach(t),dqo=r(d8e," \u2014 "),WG=n(d8e,"A",{href:!0});var Ist=s(WG);cqo=r(Ist,"RobertaForTokenClassification"),Ist.forEach(t),fqo=r(d8e," (RoBERTa model)"),d8e.forEach(t),mqo=i(J),F2=n(J,"LI",{});var c8e=s(F2);mme=n(c8e,"STRONG",{});var qst=s(mme);gqo=r(qst,"roformer"),qst.forEach(t),hqo=r(c8e," \u2014 "),HG=n(c8e,"A",{href:!0});var Nst=s(HG);pqo=r(Nst,"RoFormerForTokenClassification"),Nst.forEach(t),uqo=r(c8e," (RoFormer model)"),c8e.forEach(t),_qo=i(J),T2=n(J,"LI",{});var f8e=s(T2);gme=n(f8e,"STRONG",{});var jst=s(gme);bqo=r(jst,"squeezebert"),jst.forEach(t),vqo=r(f8e," \u2014 "),UG=n(f8e,"A",{href:!0});var Dst=s(UG);Fqo=r(Dst,"SqueezeBertForTokenClassification"),Dst.forEach(t),Tqo=r(f8e," (SqueezeBERT model)"),f8e.forEach(t),Mqo=i(J),M2=n(J,"LI",{});var m8e=s(M2);hme=n(m8e,"STRONG",{});var Gst=s(hme);Eqo=r(Gst,"xlm"),Gst.forEach(t),Cqo=r(m8e," \u2014 "),JG=n(m8e,"A",{href:!0});var Ost=s(JG);wqo=r(Ost,"XLMForTokenClassification"),Ost.forEach(t),Aqo=r(m8e," (XLM model)"),m8e.forEach(t),yqo=i(J),E2=n(J,"LI",{});var g8e=s(E2);pme=n(g8e,"STRONG",{});var Vst=s(pme);Lqo=r(Vst,"xlm-roberta"),Vst.forEach(t),xqo=r(g8e," \u2014 "),YG=n(g8e,"A",{href:!0});var Xst=s(YG);$qo=r(Xst,"XLMRobertaForTokenClassification"),Xst.forEach(t),kqo=r(g8e," (XLM-RoBERTa model)"),g8e.forEach(t),Sqo=i(J),C2=n(J,"LI",{});var h8e=s(C2);ume=n(h8e,"STRONG",{});var zst=s(ume);Rqo=r(zst,"xlm-roberta-xl"),zst.forEach(t),Bqo=r(h8e," \u2014 "),KG=n(h8e,"A",{href:!0});var Qst=s(KG);Pqo=r(Qst,"XLMRobertaXLForTokenClassification"),Qst.forEach(t),Iqo=r(h8e," (XLM-RoBERTa-XL model)"),h8e.forEach(t),qqo=i(J),w2=n(J,"LI",{});var p8e=s(w2);_me=n(p8e,"STRONG",{});var Wst=s(_me);Nqo=r(Wst,"xlnet"),Wst.forEach(t),jqo=r(p8e," \u2014 "),ZG=n(p8e,"A",{href:!0});var Hst=s(ZG);Dqo=r(Hst,"XLNetForTokenClassification"),Hst.forEach(t),Gqo=r(p8e," (XLNet model)"),p8e.forEach(t),Oqo=i(J),A2=n(J,"LI",{});var u8e=s(A2);bme=n(u8e,"STRONG",{});var Ust=s(bme);Vqo=r(Ust,"yoso"),Ust.forEach(t),Xqo=r(u8e," \u2014 "),eO=n(u8e,"A",{href:!0});var Jst=s(eO);zqo=r(Jst,"YosoForTokenClassification"),Jst.forEach(t),Qqo=r(u8e," (YOSO model)"),u8e.forEach(t),J.forEach(t),Wqo=i(aa),y2=n(aa,"P",{});var _8e=s(y2);Hqo=r(_8e,"The model is set in evaluation mode by default using "),vme=n(_8e,"CODE",{});var Yst=s(vme);Uqo=r(Yst,"model.eval()"),Yst.forEach(t),Jqo=r(_8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n(_8e,"CODE",{});var Kst=s(Fme);Yqo=r(Kst,"model.train()"),Kst.forEach(t),_8e.forEach(t),Kqo=i(aa),T(L2.$$.fragment,aa),aa.forEach(t),zs.forEach(t),CPe=i(f),Vi=n(f,"H2",{class:!0});var Aqe=s(Vi);x2=n(Aqe,"A",{id:!0,class:!0,href:!0});var Zst=s(x2);Tme=n(Zst,"SPAN",{});var elt=s(Tme);T(UA.$$.fragment,elt),elt.forEach(t),Zst.forEach(t),Zqo=i(Aqe),Mme=n(Aqe,"SPAN",{});var olt=s(Mme);eNo=r(olt,"AutoModelForQuestionAnswering"),olt.forEach(t),Aqe.forEach(t),wPe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(JA.$$.fragment,Qs),oNo=i(Qs),Xi=n(Qs,"P",{});var YY=s(Xi);rNo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oO=n(YY,"A",{href:!0});var rlt=s(oO);tNo=r(rlt,"from_pretrained()"),rlt.forEach(t),aNo=r(YY," class method or the "),rO=n(YY,"A",{href:!0});var tlt=s(rO);nNo=r(tlt,"from_config()"),tlt.forEach(t),sNo=r(YY,` class
method.`),YY.forEach(t),lNo=i(Qs),YA=n(Qs,"P",{});var yqe=s(YA);iNo=r(yqe,"This class cannot be instantiated directly using "),Eme=n(yqe,"CODE",{});var alt=s(Eme);dNo=r(alt,"__init__()"),alt.forEach(t),cNo=r(yqe," (throws an error)."),yqe.forEach(t),fNo=i(Qs),it=n(Qs,"DIV",{class:!0});var o3=s(it);T(KA.$$.fragment,o3),mNo=i(o3),Cme=n(o3,"P",{});var nlt=s(Cme);gNo=r(nlt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nlt.forEach(t),hNo=i(o3),zi=n(o3,"P",{});var KY=s(zi);pNo=r(KY,`Note:
Loading a model from its configuration file does `),wme=n(KY,"STRONG",{});var slt=s(wme);uNo=r(slt,"not"),slt.forEach(t),_No=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(KY,"A",{href:!0});var llt=s(tO);bNo=r(llt,"from_pretrained()"),llt.forEach(t),vNo=r(KY," to load the model weights."),KY.forEach(t),FNo=i(o3),T($2.$$.fragment,o3),o3.forEach(t),TNo=i(Qs),to=n(Qs,"DIV",{class:!0});var na=s(to);T(ZA.$$.fragment,na),MNo=i(na),Ame=n(na,"P",{});var ilt=s(Ame);ENo=r(ilt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ilt.forEach(t),CNo=i(na),Sa=n(na,"P",{});var r3=s(Sa);wNo=r(r3,"The model class to instantiate is selected based on the "),yme=n(r3,"CODE",{});var dlt=s(yme);ANo=r(dlt,"model_type"),dlt.forEach(t),yNo=r(r3,` property of the config object (either
passed as an argument or loaded from `),Lme=n(r3,"CODE",{});var clt=s(Lme);LNo=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),xNo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=n(r3,"CODE",{});var flt=s(xme);$No=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),kNo=r(r3,":"),r3.forEach(t),SNo=i(na),G=n(na,"UL",{});var V=s(G);k2=n(V,"LI",{});var b8e=s(k2);$me=n(b8e,"STRONG",{});var mlt=s($me);RNo=r(mlt,"albert"),mlt.forEach(t),BNo=r(b8e," \u2014 "),aO=n(b8e,"A",{href:!0});var glt=s(aO);PNo=r(glt,"AlbertForQuestionAnswering"),glt.forEach(t),INo=r(b8e," (ALBERT model)"),b8e.forEach(t),qNo=i(V),S2=n(V,"LI",{});var v8e=s(S2);kme=n(v8e,"STRONG",{});var hlt=s(kme);NNo=r(hlt,"bart"),hlt.forEach(t),jNo=r(v8e," \u2014 "),nO=n(v8e,"A",{href:!0});var plt=s(nO);DNo=r(plt,"BartForQuestionAnswering"),plt.forEach(t),GNo=r(v8e," (BART model)"),v8e.forEach(t),ONo=i(V),R2=n(V,"LI",{});var F8e=s(R2);Sme=n(F8e,"STRONG",{});var ult=s(Sme);VNo=r(ult,"bert"),ult.forEach(t),XNo=r(F8e," \u2014 "),sO=n(F8e,"A",{href:!0});var _lt=s(sO);zNo=r(_lt,"BertForQuestionAnswering"),_lt.forEach(t),QNo=r(F8e," (BERT model)"),F8e.forEach(t),WNo=i(V),B2=n(V,"LI",{});var T8e=s(B2);Rme=n(T8e,"STRONG",{});var blt=s(Rme);HNo=r(blt,"big_bird"),blt.forEach(t),UNo=r(T8e," \u2014 "),lO=n(T8e,"A",{href:!0});var vlt=s(lO);JNo=r(vlt,"BigBirdForQuestionAnswering"),vlt.forEach(t),YNo=r(T8e," (BigBird model)"),T8e.forEach(t),KNo=i(V),P2=n(V,"LI",{});var M8e=s(P2);Bme=n(M8e,"STRONG",{});var Flt=s(Bme);ZNo=r(Flt,"bigbird_pegasus"),Flt.forEach(t),ejo=r(M8e," \u2014 "),iO=n(M8e,"A",{href:!0});var Tlt=s(iO);ojo=r(Tlt,"BigBirdPegasusForQuestionAnswering"),Tlt.forEach(t),rjo=r(M8e," (BigBirdPegasus model)"),M8e.forEach(t),tjo=i(V),I2=n(V,"LI",{});var E8e=s(I2);Pme=n(E8e,"STRONG",{});var Mlt=s(Pme);ajo=r(Mlt,"camembert"),Mlt.forEach(t),njo=r(E8e," \u2014 "),dO=n(E8e,"A",{href:!0});var Elt=s(dO);sjo=r(Elt,"CamembertForQuestionAnswering"),Elt.forEach(t),ljo=r(E8e," (CamemBERT model)"),E8e.forEach(t),ijo=i(V),q2=n(V,"LI",{});var C8e=s(q2);Ime=n(C8e,"STRONG",{});var Clt=s(Ime);djo=r(Clt,"canine"),Clt.forEach(t),cjo=r(C8e," \u2014 "),cO=n(C8e,"A",{href:!0});var wlt=s(cO);fjo=r(wlt,"CanineForQuestionAnswering"),wlt.forEach(t),mjo=r(C8e," (Canine model)"),C8e.forEach(t),gjo=i(V),N2=n(V,"LI",{});var w8e=s(N2);qme=n(w8e,"STRONG",{});var Alt=s(qme);hjo=r(Alt,"convbert"),Alt.forEach(t),pjo=r(w8e," \u2014 "),fO=n(w8e,"A",{href:!0});var ylt=s(fO);ujo=r(ylt,"ConvBertForQuestionAnswering"),ylt.forEach(t),_jo=r(w8e," (ConvBERT model)"),w8e.forEach(t),bjo=i(V),j2=n(V,"LI",{});var A8e=s(j2);Nme=n(A8e,"STRONG",{});var Llt=s(Nme);vjo=r(Llt,"data2vec-text"),Llt.forEach(t),Fjo=r(A8e," \u2014 "),mO=n(A8e,"A",{href:!0});var xlt=s(mO);Tjo=r(xlt,"Data2VecTextForQuestionAnswering"),xlt.forEach(t),Mjo=r(A8e," (Data2VecText model)"),A8e.forEach(t),Ejo=i(V),D2=n(V,"LI",{});var y8e=s(D2);jme=n(y8e,"STRONG",{});var $lt=s(jme);Cjo=r($lt,"deberta"),$lt.forEach(t),wjo=r(y8e," \u2014 "),gO=n(y8e,"A",{href:!0});var klt=s(gO);Ajo=r(klt,"DebertaForQuestionAnswering"),klt.forEach(t),yjo=r(y8e," (DeBERTa model)"),y8e.forEach(t),Ljo=i(V),G2=n(V,"LI",{});var L8e=s(G2);Dme=n(L8e,"STRONG",{});var Slt=s(Dme);xjo=r(Slt,"deberta-v2"),Slt.forEach(t),$jo=r(L8e," \u2014 "),hO=n(L8e,"A",{href:!0});var Rlt=s(hO);kjo=r(Rlt,"DebertaV2ForQuestionAnswering"),Rlt.forEach(t),Sjo=r(L8e," (DeBERTa-v2 model)"),L8e.forEach(t),Rjo=i(V),O2=n(V,"LI",{});var x8e=s(O2);Gme=n(x8e,"STRONG",{});var Blt=s(Gme);Bjo=r(Blt,"distilbert"),Blt.forEach(t),Pjo=r(x8e," \u2014 "),pO=n(x8e,"A",{href:!0});var Plt=s(pO);Ijo=r(Plt,"DistilBertForQuestionAnswering"),Plt.forEach(t),qjo=r(x8e," (DistilBERT model)"),x8e.forEach(t),Njo=i(V),V2=n(V,"LI",{});var $8e=s(V2);Ome=n($8e,"STRONG",{});var Ilt=s(Ome);jjo=r(Ilt,"electra"),Ilt.forEach(t),Djo=r($8e," \u2014 "),uO=n($8e,"A",{href:!0});var qlt=s(uO);Gjo=r(qlt,"ElectraForQuestionAnswering"),qlt.forEach(t),Ojo=r($8e," (ELECTRA model)"),$8e.forEach(t),Vjo=i(V),X2=n(V,"LI",{});var k8e=s(X2);Vme=n(k8e,"STRONG",{});var Nlt=s(Vme);Xjo=r(Nlt,"flaubert"),Nlt.forEach(t),zjo=r(k8e," \u2014 "),_O=n(k8e,"A",{href:!0});var jlt=s(_O);Qjo=r(jlt,"FlaubertForQuestionAnsweringSimple"),jlt.forEach(t),Wjo=r(k8e," (FlauBERT model)"),k8e.forEach(t),Hjo=i(V),z2=n(V,"LI",{});var S8e=s(z2);Xme=n(S8e,"STRONG",{});var Dlt=s(Xme);Ujo=r(Dlt,"fnet"),Dlt.forEach(t),Jjo=r(S8e," \u2014 "),bO=n(S8e,"A",{href:!0});var Glt=s(bO);Yjo=r(Glt,"FNetForQuestionAnswering"),Glt.forEach(t),Kjo=r(S8e," (FNet model)"),S8e.forEach(t),Zjo=i(V),Q2=n(V,"LI",{});var R8e=s(Q2);zme=n(R8e,"STRONG",{});var Olt=s(zme);eDo=r(Olt,"funnel"),Olt.forEach(t),oDo=r(R8e," \u2014 "),vO=n(R8e,"A",{href:!0});var Vlt=s(vO);rDo=r(Vlt,"FunnelForQuestionAnswering"),Vlt.forEach(t),tDo=r(R8e," (Funnel Transformer model)"),R8e.forEach(t),aDo=i(V),W2=n(V,"LI",{});var B8e=s(W2);Qme=n(B8e,"STRONG",{});var Xlt=s(Qme);nDo=r(Xlt,"gptj"),Xlt.forEach(t),sDo=r(B8e," \u2014 "),FO=n(B8e,"A",{href:!0});var zlt=s(FO);lDo=r(zlt,"GPTJForQuestionAnswering"),zlt.forEach(t),iDo=r(B8e," (GPT-J model)"),B8e.forEach(t),dDo=i(V),H2=n(V,"LI",{});var P8e=s(H2);Wme=n(P8e,"STRONG",{});var Qlt=s(Wme);cDo=r(Qlt,"ibert"),Qlt.forEach(t),fDo=r(P8e," \u2014 "),TO=n(P8e,"A",{href:!0});var Wlt=s(TO);mDo=r(Wlt,"IBertForQuestionAnswering"),Wlt.forEach(t),gDo=r(P8e," (I-BERT model)"),P8e.forEach(t),hDo=i(V),U2=n(V,"LI",{});var I8e=s(U2);Hme=n(I8e,"STRONG",{});var Hlt=s(Hme);pDo=r(Hlt,"layoutlmv2"),Hlt.forEach(t),uDo=r(I8e," \u2014 "),MO=n(I8e,"A",{href:!0});var Ult=s(MO);_Do=r(Ult,"LayoutLMv2ForQuestionAnswering"),Ult.forEach(t),bDo=r(I8e," (LayoutLMv2 model)"),I8e.forEach(t),vDo=i(V),J2=n(V,"LI",{});var q8e=s(J2);Ume=n(q8e,"STRONG",{});var Jlt=s(Ume);FDo=r(Jlt,"layoutlmv3"),Jlt.forEach(t),TDo=r(q8e," \u2014 "),EO=n(q8e,"A",{href:!0});var Ylt=s(EO);MDo=r(Ylt,"LayoutLMv3ForQuestionAnswering"),Ylt.forEach(t),EDo=r(q8e," (LayoutLMv3 model)"),q8e.forEach(t),CDo=i(V),Y2=n(V,"LI",{});var N8e=s(Y2);Jme=n(N8e,"STRONG",{});var Klt=s(Jme);wDo=r(Klt,"led"),Klt.forEach(t),ADo=r(N8e," \u2014 "),CO=n(N8e,"A",{href:!0});var Zlt=s(CO);yDo=r(Zlt,"LEDForQuestionAnswering"),Zlt.forEach(t),LDo=r(N8e," (LED model)"),N8e.forEach(t),xDo=i(V),K2=n(V,"LI",{});var j8e=s(K2);Yme=n(j8e,"STRONG",{});var eit=s(Yme);$Do=r(eit,"longformer"),eit.forEach(t),kDo=r(j8e," \u2014 "),wO=n(j8e,"A",{href:!0});var oit=s(wO);SDo=r(oit,"LongformerForQuestionAnswering"),oit.forEach(t),RDo=r(j8e," (Longformer model)"),j8e.forEach(t),BDo=i(V),Z2=n(V,"LI",{});var D8e=s(Z2);Kme=n(D8e,"STRONG",{});var rit=s(Kme);PDo=r(rit,"lxmert"),rit.forEach(t),IDo=r(D8e," \u2014 "),AO=n(D8e,"A",{href:!0});var tit=s(AO);qDo=r(tit,"LxmertForQuestionAnswering"),tit.forEach(t),NDo=r(D8e," (LXMERT model)"),D8e.forEach(t),jDo=i(V),ev=n(V,"LI",{});var G8e=s(ev);Zme=n(G8e,"STRONG",{});var ait=s(Zme);DDo=r(ait,"mbart"),ait.forEach(t),GDo=r(G8e," \u2014 "),yO=n(G8e,"A",{href:!0});var nit=s(yO);ODo=r(nit,"MBartForQuestionAnswering"),nit.forEach(t),VDo=r(G8e," (mBART model)"),G8e.forEach(t),XDo=i(V),ov=n(V,"LI",{});var O8e=s(ov);ege=n(O8e,"STRONG",{});var sit=s(ege);zDo=r(sit,"megatron-bert"),sit.forEach(t),QDo=r(O8e," \u2014 "),LO=n(O8e,"A",{href:!0});var lit=s(LO);WDo=r(lit,"MegatronBertForQuestionAnswering"),lit.forEach(t),HDo=r(O8e," (MegatronBert model)"),O8e.forEach(t),UDo=i(V),rv=n(V,"LI",{});var V8e=s(rv);oge=n(V8e,"STRONG",{});var iit=s(oge);JDo=r(iit,"mobilebert"),iit.forEach(t),YDo=r(V8e," \u2014 "),xO=n(V8e,"A",{href:!0});var dit=s(xO);KDo=r(dit,"MobileBertForQuestionAnswering"),dit.forEach(t),ZDo=r(V8e," (MobileBERT model)"),V8e.forEach(t),eGo=i(V),tv=n(V,"LI",{});var X8e=s(tv);rge=n(X8e,"STRONG",{});var cit=s(rge);oGo=r(cit,"mpnet"),cit.forEach(t),rGo=r(X8e," \u2014 "),$O=n(X8e,"A",{href:!0});var fit=s($O);tGo=r(fit,"MPNetForQuestionAnswering"),fit.forEach(t),aGo=r(X8e," (MPNet model)"),X8e.forEach(t),nGo=i(V),av=n(V,"LI",{});var z8e=s(av);tge=n(z8e,"STRONG",{});var mit=s(tge);sGo=r(mit,"nystromformer"),mit.forEach(t),lGo=r(z8e," \u2014 "),kO=n(z8e,"A",{href:!0});var git=s(kO);iGo=r(git,"NystromformerForQuestionAnswering"),git.forEach(t),dGo=r(z8e," (Nystromformer model)"),z8e.forEach(t),cGo=i(V),nv=n(V,"LI",{});var Q8e=s(nv);age=n(Q8e,"STRONG",{});var hit=s(age);fGo=r(hit,"qdqbert"),hit.forEach(t),mGo=r(Q8e," \u2014 "),SO=n(Q8e,"A",{href:!0});var pit=s(SO);gGo=r(pit,"QDQBertForQuestionAnswering"),pit.forEach(t),hGo=r(Q8e," (QDQBert model)"),Q8e.forEach(t),pGo=i(V),sv=n(V,"LI",{});var W8e=s(sv);nge=n(W8e,"STRONG",{});var uit=s(nge);uGo=r(uit,"reformer"),uit.forEach(t),_Go=r(W8e," \u2014 "),RO=n(W8e,"A",{href:!0});var _it=s(RO);bGo=r(_it,"ReformerForQuestionAnswering"),_it.forEach(t),vGo=r(W8e," (Reformer model)"),W8e.forEach(t),FGo=i(V),lv=n(V,"LI",{});var H8e=s(lv);sge=n(H8e,"STRONG",{});var bit=s(sge);TGo=r(bit,"rembert"),bit.forEach(t),MGo=r(H8e," \u2014 "),BO=n(H8e,"A",{href:!0});var vit=s(BO);EGo=r(vit,"RemBertForQuestionAnswering"),vit.forEach(t),CGo=r(H8e," (RemBERT model)"),H8e.forEach(t),wGo=i(V),iv=n(V,"LI",{});var U8e=s(iv);lge=n(U8e,"STRONG",{});var Fit=s(lge);AGo=r(Fit,"roberta"),Fit.forEach(t),yGo=r(U8e," \u2014 "),PO=n(U8e,"A",{href:!0});var Tit=s(PO);LGo=r(Tit,"RobertaForQuestionAnswering"),Tit.forEach(t),xGo=r(U8e," (RoBERTa model)"),U8e.forEach(t),$Go=i(V),dv=n(V,"LI",{});var J8e=s(dv);ige=n(J8e,"STRONG",{});var Mit=s(ige);kGo=r(Mit,"roformer"),Mit.forEach(t),SGo=r(J8e," \u2014 "),IO=n(J8e,"A",{href:!0});var Eit=s(IO);RGo=r(Eit,"RoFormerForQuestionAnswering"),Eit.forEach(t),BGo=r(J8e," (RoFormer model)"),J8e.forEach(t),PGo=i(V),cv=n(V,"LI",{});var Y8e=s(cv);dge=n(Y8e,"STRONG",{});var Cit=s(dge);IGo=r(Cit,"splinter"),Cit.forEach(t),qGo=r(Y8e," \u2014 "),qO=n(Y8e,"A",{href:!0});var wit=s(qO);NGo=r(wit,"SplinterForQuestionAnswering"),wit.forEach(t),jGo=r(Y8e," (Splinter model)"),Y8e.forEach(t),DGo=i(V),fv=n(V,"LI",{});var K8e=s(fv);cge=n(K8e,"STRONG",{});var Ait=s(cge);GGo=r(Ait,"squeezebert"),Ait.forEach(t),OGo=r(K8e," \u2014 "),NO=n(K8e,"A",{href:!0});var yit=s(NO);VGo=r(yit,"SqueezeBertForQuestionAnswering"),yit.forEach(t),XGo=r(K8e," (SqueezeBERT model)"),K8e.forEach(t),zGo=i(V),mv=n(V,"LI",{});var Z8e=s(mv);fge=n(Z8e,"STRONG",{});var Lit=s(fge);QGo=r(Lit,"xlm"),Lit.forEach(t),WGo=r(Z8e," \u2014 "),jO=n(Z8e,"A",{href:!0});var xit=s(jO);HGo=r(xit,"XLMForQuestionAnsweringSimple"),xit.forEach(t),UGo=r(Z8e," (XLM model)"),Z8e.forEach(t),JGo=i(V),gv=n(V,"LI",{});var exe=s(gv);mge=n(exe,"STRONG",{});var $it=s(mge);YGo=r($it,"xlm-roberta"),$it.forEach(t),KGo=r(exe," \u2014 "),DO=n(exe,"A",{href:!0});var kit=s(DO);ZGo=r(kit,"XLMRobertaForQuestionAnswering"),kit.forEach(t),eOo=r(exe," (XLM-RoBERTa model)"),exe.forEach(t),oOo=i(V),hv=n(V,"LI",{});var oxe=s(hv);gge=n(oxe,"STRONG",{});var Sit=s(gge);rOo=r(Sit,"xlm-roberta-xl"),Sit.forEach(t),tOo=r(oxe," \u2014 "),GO=n(oxe,"A",{href:!0});var Rit=s(GO);aOo=r(Rit,"XLMRobertaXLForQuestionAnswering"),Rit.forEach(t),nOo=r(oxe," (XLM-RoBERTa-XL model)"),oxe.forEach(t),sOo=i(V),pv=n(V,"LI",{});var rxe=s(pv);hge=n(rxe,"STRONG",{});var Bit=s(hge);lOo=r(Bit,"xlnet"),Bit.forEach(t),iOo=r(rxe," \u2014 "),OO=n(rxe,"A",{href:!0});var Pit=s(OO);dOo=r(Pit,"XLNetForQuestionAnsweringSimple"),Pit.forEach(t),cOo=r(rxe," (XLNet model)"),rxe.forEach(t),fOo=i(V),uv=n(V,"LI",{});var txe=s(uv);pge=n(txe,"STRONG",{});var Iit=s(pge);mOo=r(Iit,"yoso"),Iit.forEach(t),gOo=r(txe," \u2014 "),VO=n(txe,"A",{href:!0});var qit=s(VO);hOo=r(qit,"YosoForQuestionAnswering"),qit.forEach(t),pOo=r(txe," (YOSO model)"),txe.forEach(t),V.forEach(t),uOo=i(na),_v=n(na,"P",{});var axe=s(_v);_Oo=r(axe,"The model is set in evaluation mode by default using "),uge=n(axe,"CODE",{});var Nit=s(uge);bOo=r(Nit,"model.eval()"),Nit.forEach(t),vOo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=n(axe,"CODE",{});var jit=s(_ge);FOo=r(jit,"model.train()"),jit.forEach(t),axe.forEach(t),TOo=i(na),T(bv.$$.fragment,na),na.forEach(t),Qs.forEach(t),APe=i(f),Qi=n(f,"H2",{class:!0});var Lqe=s(Qi);vv=n(Lqe,"A",{id:!0,class:!0,href:!0});var Dit=s(vv);bge=n(Dit,"SPAN",{});var Git=s(bge);T(ey.$$.fragment,Git),Git.forEach(t),Dit.forEach(t),MOo=i(Lqe),vge=n(Lqe,"SPAN",{});var Oit=s(vge);EOo=r(Oit,"AutoModelForTableQuestionAnswering"),Oit.forEach(t),Lqe.forEach(t),yPe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(oy.$$.fragment,Ws),COo=i(Ws),Wi=n(Ws,"P",{});var ZY=s(Wi);wOo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XO=n(ZY,"A",{href:!0});var Vit=s(XO);AOo=r(Vit,"from_pretrained()"),Vit.forEach(t),yOo=r(ZY," class method or the "),zO=n(ZY,"A",{href:!0});var Xit=s(zO);LOo=r(Xit,"from_config()"),Xit.forEach(t),xOo=r(ZY,` class
method.`),ZY.forEach(t),$Oo=i(Ws),ry=n(Ws,"P",{});var xqe=s(ry);kOo=r(xqe,"This class cannot be instantiated directly using "),Fge=n(xqe,"CODE",{});var zit=s(Fge);SOo=r(zit,"__init__()"),zit.forEach(t),ROo=r(xqe," (throws an error)."),xqe.forEach(t),BOo=i(Ws),dt=n(Ws,"DIV",{class:!0});var t3=s(dt);T(ty.$$.fragment,t3),POo=i(t3),Tge=n(t3,"P",{});var Qit=s(Tge);IOo=r(Qit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qit.forEach(t),qOo=i(t3),Hi=n(t3,"P",{});var eK=s(Hi);NOo=r(eK,`Note:
Loading a model from its configuration file does `),Mge=n(eK,"STRONG",{});var Wit=s(Mge);jOo=r(Wit,"not"),Wit.forEach(t),DOo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(eK,"A",{href:!0});var Hit=s(QO);GOo=r(Hit,"from_pretrained()"),Hit.forEach(t),OOo=r(eK," to load the model weights."),eK.forEach(t),VOo=i(t3),T(Fv.$$.fragment,t3),t3.forEach(t),XOo=i(Ws),ao=n(Ws,"DIV",{class:!0});var sa=s(ao);T(ay.$$.fragment,sa),zOo=i(sa),Ege=n(sa,"P",{});var Uit=s(Ege);QOo=r(Uit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Uit.forEach(t),WOo=i(sa),Ra=n(sa,"P",{});var a3=s(Ra);HOo=r(a3,"The model class to instantiate is selected based on the "),Cge=n(a3,"CODE",{});var Jit=s(Cge);UOo=r(Jit,"model_type"),Jit.forEach(t),JOo=r(a3,` property of the config object (either
passed as an argument or loaded from `),wge=n(a3,"CODE",{});var Yit=s(wge);YOo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),KOo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(a3,"CODE",{});var Kit=s(Age);ZOo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),eVo=r(a3,":"),a3.forEach(t),oVo=i(sa),yge=n(sa,"UL",{});var Zit=s(yge);Tv=n(Zit,"LI",{});var nxe=s(Tv);Lge=n(nxe,"STRONG",{});var edt=s(Lge);rVo=r(edt,"tapas"),edt.forEach(t),tVo=r(nxe," \u2014 "),WO=n(nxe,"A",{href:!0});var odt=s(WO);aVo=r(odt,"TapasForQuestionAnswering"),odt.forEach(t),nVo=r(nxe," (TAPAS model)"),nxe.forEach(t),Zit.forEach(t),sVo=i(sa),Mv=n(sa,"P",{});var sxe=s(Mv);lVo=r(sxe,"The model is set in evaluation mode by default using "),xge=n(sxe,"CODE",{});var rdt=s(xge);iVo=r(rdt,"model.eval()"),rdt.forEach(t),dVo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ge=n(sxe,"CODE",{});var tdt=s($ge);cVo=r(tdt,"model.train()"),tdt.forEach(t),sxe.forEach(t),fVo=i(sa),T(Ev.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),LPe=i(f),Ui=n(f,"H2",{class:!0});var $qe=s(Ui);Cv=n($qe,"A",{id:!0,class:!0,href:!0});var adt=s(Cv);kge=n(adt,"SPAN",{});var ndt=s(kge);T(ny.$$.fragment,ndt),ndt.forEach(t),adt.forEach(t),mVo=i($qe),Sge=n($qe,"SPAN",{});var sdt=s(Sge);gVo=r(sdt,"AutoModelForImageClassification"),sdt.forEach(t),$qe.forEach(t),xPe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(sy.$$.fragment,Hs),hVo=i(Hs),Ji=n(Hs,"P",{});var oK=s(Ji);pVo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HO=n(oK,"A",{href:!0});var ldt=s(HO);uVo=r(ldt,"from_pretrained()"),ldt.forEach(t),_Vo=r(oK," class method or the "),UO=n(oK,"A",{href:!0});var idt=s(UO);bVo=r(idt,"from_config()"),idt.forEach(t),vVo=r(oK,` class
method.`),oK.forEach(t),FVo=i(Hs),ly=n(Hs,"P",{});var kqe=s(ly);TVo=r(kqe,"This class cannot be instantiated directly using "),Rge=n(kqe,"CODE",{});var ddt=s(Rge);MVo=r(ddt,"__init__()"),ddt.forEach(t),EVo=r(kqe," (throws an error)."),kqe.forEach(t),CVo=i(Hs),ct=n(Hs,"DIV",{class:!0});var n3=s(ct);T(iy.$$.fragment,n3),wVo=i(n3),Bge=n(n3,"P",{});var cdt=s(Bge);AVo=r(cdt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cdt.forEach(t),yVo=i(n3),Yi=n(n3,"P",{});var rK=s(Yi);LVo=r(rK,`Note:
Loading a model from its configuration file does `),Pge=n(rK,"STRONG",{});var fdt=s(Pge);xVo=r(fdt,"not"),fdt.forEach(t),$Vo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(rK,"A",{href:!0});var mdt=s(JO);kVo=r(mdt,"from_pretrained()"),mdt.forEach(t),SVo=r(rK," to load the model weights."),rK.forEach(t),RVo=i(n3),T(wv.$$.fragment,n3),n3.forEach(t),BVo=i(Hs),no=n(Hs,"DIV",{class:!0});var la=s(no);T(dy.$$.fragment,la),PVo=i(la),Ige=n(la,"P",{});var gdt=s(Ige);IVo=r(gdt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gdt.forEach(t),qVo=i(la),Ba=n(la,"P",{});var s3=s(Ba);NVo=r(s3,"The model class to instantiate is selected based on the "),qge=n(s3,"CODE",{});var hdt=s(qge);jVo=r(hdt,"model_type"),hdt.forEach(t),DVo=r(s3,` property of the config object (either
passed as an argument or loaded from `),Nge=n(s3,"CODE",{});var pdt=s(Nge);GVo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),OVo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=n(s3,"CODE",{});var udt=s(jge);VVo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),XVo=r(s3,":"),s3.forEach(t),zVo=i(la),Fe=n(la,"UL",{});var Ee=s(Fe);Av=n(Ee,"LI",{});var lxe=s(Av);Dge=n(lxe,"STRONG",{});var _dt=s(Dge);QVo=r(_dt,"beit"),_dt.forEach(t),WVo=r(lxe," \u2014 "),YO=n(lxe,"A",{href:!0});var bdt=s(YO);HVo=r(bdt,"BeitForImageClassification"),bdt.forEach(t),UVo=r(lxe," (BEiT model)"),lxe.forEach(t),JVo=i(Ee),yv=n(Ee,"LI",{});var ixe=s(yv);Gge=n(ixe,"STRONG",{});var vdt=s(Gge);YVo=r(vdt,"convnext"),vdt.forEach(t),KVo=r(ixe," \u2014 "),KO=n(ixe,"A",{href:!0});var Fdt=s(KO);ZVo=r(Fdt,"ConvNextForImageClassification"),Fdt.forEach(t),eXo=r(ixe," (ConvNext model)"),ixe.forEach(t),oXo=i(Ee),Lv=n(Ee,"LI",{});var dxe=s(Lv);Oge=n(dxe,"STRONG",{});var Tdt=s(Oge);rXo=r(Tdt,"data2vec-vision"),Tdt.forEach(t),tXo=r(dxe," \u2014 "),ZO=n(dxe,"A",{href:!0});var Mdt=s(ZO);aXo=r(Mdt,"Data2VecVisionForImageClassification"),Mdt.forEach(t),nXo=r(dxe," (Data2VecVision model)"),dxe.forEach(t),sXo=i(Ee),$s=n(Ee,"LI",{});var O9=s($s);Vge=n(O9,"STRONG",{});var Edt=s(Vge);lXo=r(Edt,"deit"),Edt.forEach(t),iXo=r(O9," \u2014 "),eV=n(O9,"A",{href:!0});var Cdt=s(eV);dXo=r(Cdt,"DeiTForImageClassification"),Cdt.forEach(t),cXo=r(O9," or "),oV=n(O9,"A",{href:!0});var wdt=s(oV);fXo=r(wdt,"DeiTForImageClassificationWithTeacher"),wdt.forEach(t),mXo=r(O9," (DeiT model)"),O9.forEach(t),gXo=i(Ee),xv=n(Ee,"LI",{});var cxe=s(xv);Xge=n(cxe,"STRONG",{});var Adt=s(Xge);hXo=r(Adt,"imagegpt"),Adt.forEach(t),pXo=r(cxe," \u2014 "),rV=n(cxe,"A",{href:!0});var ydt=s(rV);uXo=r(ydt,"ImageGPTForImageClassification"),ydt.forEach(t),_Xo=r(cxe," (ImageGPT model)"),cxe.forEach(t),bXo=i(Ee),ft=n(Ee,"LI",{});var rf=s(ft);zge=n(rf,"STRONG",{});var Ldt=s(zge);vXo=r(Ldt,"perceiver"),Ldt.forEach(t),FXo=r(rf," \u2014 "),tV=n(rf,"A",{href:!0});var xdt=s(tV);TXo=r(xdt,"PerceiverForImageClassificationLearned"),xdt.forEach(t),MXo=r(rf," or "),aV=n(rf,"A",{href:!0});var $dt=s(aV);EXo=r($dt,"PerceiverForImageClassificationFourier"),$dt.forEach(t),CXo=r(rf," or "),nV=n(rf,"A",{href:!0});var kdt=s(nV);wXo=r(kdt,"PerceiverForImageClassificationConvProcessing"),kdt.forEach(t),AXo=r(rf," (Perceiver model)"),rf.forEach(t),yXo=i(Ee),$v=n(Ee,"LI",{});var fxe=s($v);Qge=n(fxe,"STRONG",{});var Sdt=s(Qge);LXo=r(Sdt,"poolformer"),Sdt.forEach(t),xXo=r(fxe," \u2014 "),sV=n(fxe,"A",{href:!0});var Rdt=s(sV);$Xo=r(Rdt,"PoolFormerForImageClassification"),Rdt.forEach(t),kXo=r(fxe," (PoolFormer model)"),fxe.forEach(t),SXo=i(Ee),kv=n(Ee,"LI",{});var mxe=s(kv);Wge=n(mxe,"STRONG",{});var Bdt=s(Wge);RXo=r(Bdt,"regnet"),Bdt.forEach(t),BXo=r(mxe," \u2014 "),lV=n(mxe,"A",{href:!0});var Pdt=s(lV);PXo=r(Pdt,"RegNetForImageClassification"),Pdt.forEach(t),IXo=r(mxe," (RegNet model)"),mxe.forEach(t),qXo=i(Ee),Sv=n(Ee,"LI",{});var gxe=s(Sv);Hge=n(gxe,"STRONG",{});var Idt=s(Hge);NXo=r(Idt,"resnet"),Idt.forEach(t),jXo=r(gxe," \u2014 "),iV=n(gxe,"A",{href:!0});var qdt=s(iV);DXo=r(qdt,"ResNetForImageClassification"),qdt.forEach(t),GXo=r(gxe," (ResNet model)"),gxe.forEach(t),OXo=i(Ee),Rv=n(Ee,"LI",{});var hxe=s(Rv);Uge=n(hxe,"STRONG",{});var Ndt=s(Uge);VXo=r(Ndt,"segformer"),Ndt.forEach(t),XXo=r(hxe," \u2014 "),dV=n(hxe,"A",{href:!0});var jdt=s(dV);zXo=r(jdt,"SegformerForImageClassification"),jdt.forEach(t),QXo=r(hxe," (SegFormer model)"),hxe.forEach(t),WXo=i(Ee),Bv=n(Ee,"LI",{});var pxe=s(Bv);Jge=n(pxe,"STRONG",{});var Ddt=s(Jge);HXo=r(Ddt,"swin"),Ddt.forEach(t),UXo=r(pxe," \u2014 "),cV=n(pxe,"A",{href:!0});var Gdt=s(cV);JXo=r(Gdt,"SwinForImageClassification"),Gdt.forEach(t),YXo=r(pxe," (Swin model)"),pxe.forEach(t),KXo=i(Ee),Pv=n(Ee,"LI",{});var uxe=s(Pv);Yge=n(uxe,"STRONG",{});var Odt=s(Yge);ZXo=r(Odt,"van"),Odt.forEach(t),ezo=r(uxe," \u2014 "),fV=n(uxe,"A",{href:!0});var Vdt=s(fV);ozo=r(Vdt,"VanForImageClassification"),Vdt.forEach(t),rzo=r(uxe," (VAN model)"),uxe.forEach(t),tzo=i(Ee),Iv=n(Ee,"LI",{});var _xe=s(Iv);Kge=n(_xe,"STRONG",{});var Xdt=s(Kge);azo=r(Xdt,"vit"),Xdt.forEach(t),nzo=r(_xe," \u2014 "),mV=n(_xe,"A",{href:!0});var zdt=s(mV);szo=r(zdt,"ViTForImageClassification"),zdt.forEach(t),lzo=r(_xe," (ViT model)"),_xe.forEach(t),Ee.forEach(t),izo=i(la),qv=n(la,"P",{});var bxe=s(qv);dzo=r(bxe,"The model is set in evaluation mode by default using "),Zge=n(bxe,"CODE",{});var Qdt=s(Zge);czo=r(Qdt,"model.eval()"),Qdt.forEach(t),fzo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=n(bxe,"CODE",{});var Wdt=s(ehe);mzo=r(Wdt,"model.train()"),Wdt.forEach(t),bxe.forEach(t),gzo=i(la),T(Nv.$$.fragment,la),la.forEach(t),Hs.forEach(t),$Pe=i(f),Ki=n(f,"H2",{class:!0});var Sqe=s(Ki);jv=n(Sqe,"A",{id:!0,class:!0,href:!0});var Hdt=s(jv);ohe=n(Hdt,"SPAN",{});var Udt=s(ohe);T(cy.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),hzo=i(Sqe),rhe=n(Sqe,"SPAN",{});var Jdt=s(rhe);pzo=r(Jdt,"AutoModelForVision2Seq"),Jdt.forEach(t),Sqe.forEach(t),kPe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(fy.$$.fragment,Us),uzo=i(Us),Zi=n(Us,"P",{});var tK=s(Zi);_zo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gV=n(tK,"A",{href:!0});var Ydt=s(gV);bzo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),vzo=r(tK," class method or the "),hV=n(tK,"A",{href:!0});var Kdt=s(hV);Fzo=r(Kdt,"from_config()"),Kdt.forEach(t),Tzo=r(tK,` class
method.`),tK.forEach(t),Mzo=i(Us),my=n(Us,"P",{});var Rqe=s(my);Ezo=r(Rqe,"This class cannot be instantiated directly using "),the=n(Rqe,"CODE",{});var Zdt=s(the);Czo=r(Zdt,"__init__()"),Zdt.forEach(t),wzo=r(Rqe," (throws an error)."),Rqe.forEach(t),Azo=i(Us),mt=n(Us,"DIV",{class:!0});var l3=s(mt);T(gy.$$.fragment,l3),yzo=i(l3),ahe=n(l3,"P",{});var ect=s(ahe);Lzo=r(ect,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ect.forEach(t),xzo=i(l3),ed=n(l3,"P",{});var aK=s(ed);$zo=r(aK,`Note:
Loading a model from its configuration file does `),nhe=n(aK,"STRONG",{});var oct=s(nhe);kzo=r(oct,"not"),oct.forEach(t),Szo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(aK,"A",{href:!0});var rct=s(pV);Rzo=r(rct,"from_pretrained()"),rct.forEach(t),Bzo=r(aK," to load the model weights."),aK.forEach(t),Pzo=i(l3),T(Dv.$$.fragment,l3),l3.forEach(t),Izo=i(Us),so=n(Us,"DIV",{class:!0});var ia=s(so);T(hy.$$.fragment,ia),qzo=i(ia),she=n(ia,"P",{});var tct=s(she);Nzo=r(tct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tct.forEach(t),jzo=i(ia),Pa=n(ia,"P",{});var i3=s(Pa);Dzo=r(i3,"The model class to instantiate is selected based on the "),lhe=n(i3,"CODE",{});var act=s(lhe);Gzo=r(act,"model_type"),act.forEach(t),Ozo=r(i3,` property of the config object (either
passed as an argument or loaded from `),ihe=n(i3,"CODE",{});var nct=s(ihe);Vzo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),Xzo=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(i3,"CODE",{});var sct=s(dhe);zzo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),Qzo=r(i3,":"),i3.forEach(t),Wzo=i(ia),che=n(ia,"UL",{});var lct=s(che);Gv=n(lct,"LI",{});var vxe=s(Gv);fhe=n(vxe,"STRONG",{});var ict=s(fhe);Hzo=r(ict,"vision-encoder-decoder"),ict.forEach(t),Uzo=r(vxe," \u2014 "),uV=n(vxe,"A",{href:!0});var dct=s(uV);Jzo=r(dct,"VisionEncoderDecoderModel"),dct.forEach(t),Yzo=r(vxe," (Vision Encoder decoder model)"),vxe.forEach(t),lct.forEach(t),Kzo=i(ia),Ov=n(ia,"P",{});var Fxe=s(Ov);Zzo=r(Fxe,"The model is set in evaluation mode by default using "),mhe=n(Fxe,"CODE",{});var cct=s(mhe);eQo=r(cct,"model.eval()"),cct.forEach(t),oQo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(Fxe,"CODE",{});var fct=s(ghe);rQo=r(fct,"model.train()"),fct.forEach(t),Fxe.forEach(t),tQo=i(ia),T(Vv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),SPe=i(f),od=n(f,"H2",{class:!0});var Bqe=s(od);Xv=n(Bqe,"A",{id:!0,class:!0,href:!0});var mct=s(Xv);hhe=n(mct,"SPAN",{});var gct=s(hhe);T(py.$$.fragment,gct),gct.forEach(t),mct.forEach(t),aQo=i(Bqe),phe=n(Bqe,"SPAN",{});var hct=s(phe);nQo=r(hct,"AutoModelForAudioClassification"),hct.forEach(t),Bqe.forEach(t),RPe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(uy.$$.fragment,Js),sQo=i(Js),rd=n(Js,"P",{});var nK=s(rd);lQo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_V=n(nK,"A",{href:!0});var pct=s(_V);iQo=r(pct,"from_pretrained()"),pct.forEach(t),dQo=r(nK," class method or the "),bV=n(nK,"A",{href:!0});var uct=s(bV);cQo=r(uct,"from_config()"),uct.forEach(t),fQo=r(nK,` class
method.`),nK.forEach(t),mQo=i(Js),_y=n(Js,"P",{});var Pqe=s(_y);gQo=r(Pqe,"This class cannot be instantiated directly using "),uhe=n(Pqe,"CODE",{});var _ct=s(uhe);hQo=r(_ct,"__init__()"),_ct.forEach(t),pQo=r(Pqe," (throws an error)."),Pqe.forEach(t),uQo=i(Js),gt=n(Js,"DIV",{class:!0});var d3=s(gt);T(by.$$.fragment,d3),_Qo=i(d3),_he=n(d3,"P",{});var bct=s(_he);bQo=r(bct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bct.forEach(t),vQo=i(d3),td=n(d3,"P",{});var sK=s(td);FQo=r(sK,`Note:
Loading a model from its configuration file does `),bhe=n(sK,"STRONG",{});var vct=s(bhe);TQo=r(vct,"not"),vct.forEach(t),MQo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(sK,"A",{href:!0});var Fct=s(vV);EQo=r(Fct,"from_pretrained()"),Fct.forEach(t),CQo=r(sK," to load the model weights."),sK.forEach(t),wQo=i(d3),T(zv.$$.fragment,d3),d3.forEach(t),AQo=i(Js),lo=n(Js,"DIV",{class:!0});var da=s(lo);T(vy.$$.fragment,da),yQo=i(da),vhe=n(da,"P",{});var Tct=s(vhe);LQo=r(Tct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Tct.forEach(t),xQo=i(da),Ia=n(da,"P",{});var c3=s(Ia);$Qo=r(c3,"The model class to instantiate is selected based on the "),Fhe=n(c3,"CODE",{});var Mct=s(Fhe);kQo=r(Mct,"model_type"),Mct.forEach(t),SQo=r(c3,` property of the config object (either
passed as an argument or loaded from `),The=n(c3,"CODE",{});var Ect=s(The);RQo=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),BQo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(c3,"CODE",{});var Cct=s(Mhe);PQo=r(Cct,"pretrained_model_name_or_path"),Cct.forEach(t),IQo=r(c3,":"),c3.forEach(t),qQo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);Qv=n(bo,"LI",{});var Txe=s(Qv);Ehe=n(Txe,"STRONG",{});var wct=s(Ehe);NQo=r(wct,"data2vec-audio"),wct.forEach(t),jQo=r(Txe," \u2014 "),FV=n(Txe,"A",{href:!0});var Act=s(FV);DQo=r(Act,"Data2VecAudioForSequenceClassification"),Act.forEach(t),GQo=r(Txe," (Data2VecAudio model)"),Txe.forEach(t),OQo=i(bo),Wv=n(bo,"LI",{});var Mxe=s(Wv);Che=n(Mxe,"STRONG",{});var yct=s(Che);VQo=r(yct,"hubert"),yct.forEach(t),XQo=r(Mxe," \u2014 "),TV=n(Mxe,"A",{href:!0});var Lct=s(TV);zQo=r(Lct,"HubertForSequenceClassification"),Lct.forEach(t),QQo=r(Mxe," (Hubert model)"),Mxe.forEach(t),WQo=i(bo),Hv=n(bo,"LI",{});var Exe=s(Hv);whe=n(Exe,"STRONG",{});var xct=s(whe);HQo=r(xct,"sew"),xct.forEach(t),UQo=r(Exe," \u2014 "),MV=n(Exe,"A",{href:!0});var $ct=s(MV);JQo=r($ct,"SEWForSequenceClassification"),$ct.forEach(t),YQo=r(Exe," (SEW model)"),Exe.forEach(t),KQo=i(bo),Uv=n(bo,"LI",{});var Cxe=s(Uv);Ahe=n(Cxe,"STRONG",{});var kct=s(Ahe);ZQo=r(kct,"sew-d"),kct.forEach(t),eWo=r(Cxe," \u2014 "),EV=n(Cxe,"A",{href:!0});var Sct=s(EV);oWo=r(Sct,"SEWDForSequenceClassification"),Sct.forEach(t),rWo=r(Cxe," (SEW-D model)"),Cxe.forEach(t),tWo=i(bo),Jv=n(bo,"LI",{});var wxe=s(Jv);yhe=n(wxe,"STRONG",{});var Rct=s(yhe);aWo=r(Rct,"unispeech"),Rct.forEach(t),nWo=r(wxe," \u2014 "),CV=n(wxe,"A",{href:!0});var Bct=s(CV);sWo=r(Bct,"UniSpeechForSequenceClassification"),Bct.forEach(t),lWo=r(wxe," (UniSpeech model)"),wxe.forEach(t),iWo=i(bo),Yv=n(bo,"LI",{});var Axe=s(Yv);Lhe=n(Axe,"STRONG",{});var Pct=s(Lhe);dWo=r(Pct,"unispeech-sat"),Pct.forEach(t),cWo=r(Axe," \u2014 "),wV=n(Axe,"A",{href:!0});var Ict=s(wV);fWo=r(Ict,"UniSpeechSatForSequenceClassification"),Ict.forEach(t),mWo=r(Axe," (UniSpeechSat model)"),Axe.forEach(t),gWo=i(bo),Kv=n(bo,"LI",{});var yxe=s(Kv);xhe=n(yxe,"STRONG",{});var qct=s(xhe);hWo=r(qct,"wav2vec2"),qct.forEach(t),pWo=r(yxe," \u2014 "),AV=n(yxe,"A",{href:!0});var Nct=s(AV);uWo=r(Nct,"Wav2Vec2ForSequenceClassification"),Nct.forEach(t),_Wo=r(yxe," (Wav2Vec2 model)"),yxe.forEach(t),bWo=i(bo),Zv=n(bo,"LI",{});var Lxe=s(Zv);$he=n(Lxe,"STRONG",{});var jct=s($he);vWo=r(jct,"wavlm"),jct.forEach(t),FWo=r(Lxe," \u2014 "),yV=n(Lxe,"A",{href:!0});var Dct=s(yV);TWo=r(Dct,"WavLMForSequenceClassification"),Dct.forEach(t),MWo=r(Lxe," (WavLM model)"),Lxe.forEach(t),bo.forEach(t),EWo=i(da),eF=n(da,"P",{});var xxe=s(eF);CWo=r(xxe,"The model is set in evaluation mode by default using "),khe=n(xxe,"CODE",{});var Gct=s(khe);wWo=r(Gct,"model.eval()"),Gct.forEach(t),AWo=r(xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=n(xxe,"CODE",{});var Oct=s(She);yWo=r(Oct,"model.train()"),Oct.forEach(t),xxe.forEach(t),LWo=i(da),T(oF.$$.fragment,da),da.forEach(t),Js.forEach(t),BPe=i(f),ad=n(f,"H2",{class:!0});var Iqe=s(ad);rF=n(Iqe,"A",{id:!0,class:!0,href:!0});var Vct=s(rF);Rhe=n(Vct,"SPAN",{});var Xct=s(Rhe);T(Fy.$$.fragment,Xct),Xct.forEach(t),Vct.forEach(t),xWo=i(Iqe),Bhe=n(Iqe,"SPAN",{});var zct=s(Bhe);$Wo=r(zct,"AutoModelForAudioFrameClassification"),zct.forEach(t),Iqe.forEach(t),PPe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(Ty.$$.fragment,Ys),kWo=i(Ys),nd=n(Ys,"P",{});var lK=s(nd);SWo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LV=n(lK,"A",{href:!0});var Qct=s(LV);RWo=r(Qct,"from_pretrained()"),Qct.forEach(t),BWo=r(lK," class method or the "),xV=n(lK,"A",{href:!0});var Wct=s(xV);PWo=r(Wct,"from_config()"),Wct.forEach(t),IWo=r(lK,` class
method.`),lK.forEach(t),qWo=i(Ys),My=n(Ys,"P",{});var qqe=s(My);NWo=r(qqe,"This class cannot be instantiated directly using "),Phe=n(qqe,"CODE",{});var Hct=s(Phe);jWo=r(Hct,"__init__()"),Hct.forEach(t),DWo=r(qqe," (throws an error)."),qqe.forEach(t),GWo=i(Ys),ht=n(Ys,"DIV",{class:!0});var f3=s(ht);T(Ey.$$.fragment,f3),OWo=i(f3),Ihe=n(f3,"P",{});var Uct=s(Ihe);VWo=r(Uct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Uct.forEach(t),XWo=i(f3),sd=n(f3,"P",{});var iK=s(sd);zWo=r(iK,`Note:
Loading a model from its configuration file does `),qhe=n(iK,"STRONG",{});var Jct=s(qhe);QWo=r(Jct,"not"),Jct.forEach(t),WWo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(iK,"A",{href:!0});var Yct=s($V);HWo=r(Yct,"from_pretrained()"),Yct.forEach(t),UWo=r(iK," to load the model weights."),iK.forEach(t),JWo=i(f3),T(tF.$$.fragment,f3),f3.forEach(t),YWo=i(Ys),io=n(Ys,"DIV",{class:!0});var ca=s(io);T(Cy.$$.fragment,ca),KWo=i(ca),Nhe=n(ca,"P",{});var Kct=s(Nhe);ZWo=r(Kct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Kct.forEach(t),eHo=i(ca),qa=n(ca,"P",{});var m3=s(qa);oHo=r(m3,"The model class to instantiate is selected based on the "),jhe=n(m3,"CODE",{});var Zct=s(jhe);rHo=r(Zct,"model_type"),Zct.forEach(t),tHo=r(m3,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(m3,"CODE",{});var eft=s(Dhe);aHo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),nHo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(m3,"CODE",{});var oft=s(Ghe);sHo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),lHo=r(m3,":"),m3.forEach(t),iHo=i(ca),Na=n(ca,"UL",{});var g3=s(Na);aF=n(g3,"LI",{});var $xe=s(aF);Ohe=n($xe,"STRONG",{});var rft=s(Ohe);dHo=r(rft,"data2vec-audio"),rft.forEach(t),cHo=r($xe," \u2014 "),kV=n($xe,"A",{href:!0});var tft=s(kV);fHo=r(tft,"Data2VecAudioForAudioFrameClassification"),tft.forEach(t),mHo=r($xe," (Data2VecAudio model)"),$xe.forEach(t),gHo=i(g3),nF=n(g3,"LI",{});var kxe=s(nF);Vhe=n(kxe,"STRONG",{});var aft=s(Vhe);hHo=r(aft,"unispeech-sat"),aft.forEach(t),pHo=r(kxe," \u2014 "),SV=n(kxe,"A",{href:!0});var nft=s(SV);uHo=r(nft,"UniSpeechSatForAudioFrameClassification"),nft.forEach(t),_Ho=r(kxe," (UniSpeechSat model)"),kxe.forEach(t),bHo=i(g3),sF=n(g3,"LI",{});var Sxe=s(sF);Xhe=n(Sxe,"STRONG",{});var sft=s(Xhe);vHo=r(sft,"wav2vec2"),sft.forEach(t),FHo=r(Sxe," \u2014 "),RV=n(Sxe,"A",{href:!0});var lft=s(RV);THo=r(lft,"Wav2Vec2ForAudioFrameClassification"),lft.forEach(t),MHo=r(Sxe," (Wav2Vec2 model)"),Sxe.forEach(t),EHo=i(g3),lF=n(g3,"LI",{});var Rxe=s(lF);zhe=n(Rxe,"STRONG",{});var ift=s(zhe);CHo=r(ift,"wavlm"),ift.forEach(t),wHo=r(Rxe," \u2014 "),BV=n(Rxe,"A",{href:!0});var dft=s(BV);AHo=r(dft,"WavLMForAudioFrameClassification"),dft.forEach(t),yHo=r(Rxe," (WavLM model)"),Rxe.forEach(t),g3.forEach(t),LHo=i(ca),iF=n(ca,"P",{});var Bxe=s(iF);xHo=r(Bxe,"The model is set in evaluation mode by default using "),Qhe=n(Bxe,"CODE",{});var cft=s(Qhe);$Ho=r(cft,"model.eval()"),cft.forEach(t),kHo=r(Bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(Bxe,"CODE",{});var fft=s(Whe);SHo=r(fft,"model.train()"),fft.forEach(t),Bxe.forEach(t),RHo=i(ca),T(dF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),IPe=i(f),ld=n(f,"H2",{class:!0});var Nqe=s(ld);cF=n(Nqe,"A",{id:!0,class:!0,href:!0});var mft=s(cF);Hhe=n(mft,"SPAN",{});var gft=s(Hhe);T(wy.$$.fragment,gft),gft.forEach(t),mft.forEach(t),BHo=i(Nqe),Uhe=n(Nqe,"SPAN",{});var hft=s(Uhe);PHo=r(hft,"AutoModelForCTC"),hft.forEach(t),Nqe.forEach(t),qPe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(Ay.$$.fragment,Ks),IHo=i(Ks),id=n(Ks,"P",{});var dK=s(id);qHo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PV=n(dK,"A",{href:!0});var pft=s(PV);NHo=r(pft,"from_pretrained()"),pft.forEach(t),jHo=r(dK," class method or the "),IV=n(dK,"A",{href:!0});var uft=s(IV);DHo=r(uft,"from_config()"),uft.forEach(t),GHo=r(dK,` class
method.`),dK.forEach(t),OHo=i(Ks),yy=n(Ks,"P",{});var jqe=s(yy);VHo=r(jqe,"This class cannot be instantiated directly using "),Jhe=n(jqe,"CODE",{});var _ft=s(Jhe);XHo=r(_ft,"__init__()"),_ft.forEach(t),zHo=r(jqe," (throws an error)."),jqe.forEach(t),QHo=i(Ks),pt=n(Ks,"DIV",{class:!0});var h3=s(pt);T(Ly.$$.fragment,h3),WHo=i(h3),Yhe=n(h3,"P",{});var bft=s(Yhe);HHo=r(bft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bft.forEach(t),UHo=i(h3),dd=n(h3,"P",{});var cK=s(dd);JHo=r(cK,`Note:
Loading a model from its configuration file does `),Khe=n(cK,"STRONG",{});var vft=s(Khe);YHo=r(vft,"not"),vft.forEach(t),KHo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(cK,"A",{href:!0});var Fft=s(qV);ZHo=r(Fft,"from_pretrained()"),Fft.forEach(t),eUo=r(cK," to load the model weights."),cK.forEach(t),oUo=i(h3),T(fF.$$.fragment,h3),h3.forEach(t),rUo=i(Ks),co=n(Ks,"DIV",{class:!0});var fa=s(co);T(xy.$$.fragment,fa),tUo=i(fa),Zhe=n(fa,"P",{});var Tft=s(Zhe);aUo=r(Tft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Tft.forEach(t),nUo=i(fa),ja=n(fa,"P",{});var p3=s(ja);sUo=r(p3,"The model class to instantiate is selected based on the "),epe=n(p3,"CODE",{});var Mft=s(epe);lUo=r(Mft,"model_type"),Mft.forEach(t),iUo=r(p3,` property of the config object (either
passed as an argument or loaded from `),ope=n(p3,"CODE",{});var Eft=s(ope);dUo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),cUo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(p3,"CODE",{});var Cft=s(rpe);fUo=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),mUo=r(p3,":"),p3.forEach(t),gUo=i(fa),je=n(fa,"UL",{});var vo=s(je);mF=n(vo,"LI",{});var Pxe=s(mF);tpe=n(Pxe,"STRONG",{});var wft=s(tpe);hUo=r(wft,"data2vec-audio"),wft.forEach(t),pUo=r(Pxe," \u2014 "),NV=n(Pxe,"A",{href:!0});var Aft=s(NV);uUo=r(Aft,"Data2VecAudioForCTC"),Aft.forEach(t),_Uo=r(Pxe," (Data2VecAudio model)"),Pxe.forEach(t),bUo=i(vo),gF=n(vo,"LI",{});var Ixe=s(gF);ape=n(Ixe,"STRONG",{});var yft=s(ape);vUo=r(yft,"hubert"),yft.forEach(t),FUo=r(Ixe," \u2014 "),jV=n(Ixe,"A",{href:!0});var Lft=s(jV);TUo=r(Lft,"HubertForCTC"),Lft.forEach(t),MUo=r(Ixe," (Hubert model)"),Ixe.forEach(t),EUo=i(vo),hF=n(vo,"LI",{});var qxe=s(hF);npe=n(qxe,"STRONG",{});var xft=s(npe);CUo=r(xft,"sew"),xft.forEach(t),wUo=r(qxe," \u2014 "),DV=n(qxe,"A",{href:!0});var $ft=s(DV);AUo=r($ft,"SEWForCTC"),$ft.forEach(t),yUo=r(qxe," (SEW model)"),qxe.forEach(t),LUo=i(vo),pF=n(vo,"LI",{});var Nxe=s(pF);spe=n(Nxe,"STRONG",{});var kft=s(spe);xUo=r(kft,"sew-d"),kft.forEach(t),$Uo=r(Nxe," \u2014 "),GV=n(Nxe,"A",{href:!0});var Sft=s(GV);kUo=r(Sft,"SEWDForCTC"),Sft.forEach(t),SUo=r(Nxe," (SEW-D model)"),Nxe.forEach(t),RUo=i(vo),uF=n(vo,"LI",{});var jxe=s(uF);lpe=n(jxe,"STRONG",{});var Rft=s(lpe);BUo=r(Rft,"unispeech"),Rft.forEach(t),PUo=r(jxe," \u2014 "),OV=n(jxe,"A",{href:!0});var Bft=s(OV);IUo=r(Bft,"UniSpeechForCTC"),Bft.forEach(t),qUo=r(jxe," (UniSpeech model)"),jxe.forEach(t),NUo=i(vo),_F=n(vo,"LI",{});var Dxe=s(_F);ipe=n(Dxe,"STRONG",{});var Pft=s(ipe);jUo=r(Pft,"unispeech-sat"),Pft.forEach(t),DUo=r(Dxe," \u2014 "),VV=n(Dxe,"A",{href:!0});var Ift=s(VV);GUo=r(Ift,"UniSpeechSatForCTC"),Ift.forEach(t),OUo=r(Dxe," (UniSpeechSat model)"),Dxe.forEach(t),VUo=i(vo),bF=n(vo,"LI",{});var Gxe=s(bF);dpe=n(Gxe,"STRONG",{});var qft=s(dpe);XUo=r(qft,"wav2vec2"),qft.forEach(t),zUo=r(Gxe," \u2014 "),XV=n(Gxe,"A",{href:!0});var Nft=s(XV);QUo=r(Nft,"Wav2Vec2ForCTC"),Nft.forEach(t),WUo=r(Gxe," (Wav2Vec2 model)"),Gxe.forEach(t),HUo=i(vo),vF=n(vo,"LI",{});var Oxe=s(vF);cpe=n(Oxe,"STRONG",{});var jft=s(cpe);UUo=r(jft,"wavlm"),jft.forEach(t),JUo=r(Oxe," \u2014 "),zV=n(Oxe,"A",{href:!0});var Dft=s(zV);YUo=r(Dft,"WavLMForCTC"),Dft.forEach(t),KUo=r(Oxe," (WavLM model)"),Oxe.forEach(t),vo.forEach(t),ZUo=i(fa),FF=n(fa,"P",{});var Vxe=s(FF);eJo=r(Vxe,"The model is set in evaluation mode by default using "),fpe=n(Vxe,"CODE",{});var Gft=s(fpe);oJo=r(Gft,"model.eval()"),Gft.forEach(t),rJo=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(Vxe,"CODE",{});var Oft=s(mpe);tJo=r(Oft,"model.train()"),Oft.forEach(t),Vxe.forEach(t),aJo=i(fa),T(TF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),NPe=i(f),cd=n(f,"H2",{class:!0});var Dqe=s(cd);MF=n(Dqe,"A",{id:!0,class:!0,href:!0});var Vft=s(MF);gpe=n(Vft,"SPAN",{});var Xft=s(gpe);T($y.$$.fragment,Xft),Xft.forEach(t),Vft.forEach(t),nJo=i(Dqe),hpe=n(Dqe,"SPAN",{});var zft=s(hpe);sJo=r(zft,"AutoModelForSpeechSeq2Seq"),zft.forEach(t),Dqe.forEach(t),jPe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(ky.$$.fragment,Zs),lJo=i(Zs),fd=n(Zs,"P",{});var fK=s(fd);iJo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QV=n(fK,"A",{href:!0});var Qft=s(QV);dJo=r(Qft,"from_pretrained()"),Qft.forEach(t),cJo=r(fK," class method or the "),WV=n(fK,"A",{href:!0});var Wft=s(WV);fJo=r(Wft,"from_config()"),Wft.forEach(t),mJo=r(fK,` class
method.`),fK.forEach(t),gJo=i(Zs),Sy=n(Zs,"P",{});var Gqe=s(Sy);hJo=r(Gqe,"This class cannot be instantiated directly using "),ppe=n(Gqe,"CODE",{});var Hft=s(ppe);pJo=r(Hft,"__init__()"),Hft.forEach(t),uJo=r(Gqe," (throws an error)."),Gqe.forEach(t),_Jo=i(Zs),ut=n(Zs,"DIV",{class:!0});var u3=s(ut);T(Ry.$$.fragment,u3),bJo=i(u3),upe=n(u3,"P",{});var Uft=s(upe);vJo=r(Uft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Uft.forEach(t),FJo=i(u3),md=n(u3,"P",{});var mK=s(md);TJo=r(mK,`Note:
Loading a model from its configuration file does `),_pe=n(mK,"STRONG",{});var Jft=s(_pe);MJo=r(Jft,"not"),Jft.forEach(t),EJo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(mK,"A",{href:!0});var Yft=s(HV);CJo=r(Yft,"from_pretrained()"),Yft.forEach(t),wJo=r(mK," to load the model weights."),mK.forEach(t),AJo=i(u3),T(EF.$$.fragment,u3),u3.forEach(t),yJo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ma=s(fo);T(By.$$.fragment,ma),LJo=i(ma),bpe=n(ma,"P",{});var Kft=s(bpe);xJo=r(Kft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kft.forEach(t),$Jo=i(ma),Da=n(ma,"P",{});var _3=s(Da);kJo=r(_3,"The model class to instantiate is selected based on the "),vpe=n(_3,"CODE",{});var Zft=s(vpe);SJo=r(Zft,"model_type"),Zft.forEach(t),RJo=r(_3,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(_3,"CODE",{});var emt=s(Fpe);BJo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),PJo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(_3,"CODE",{});var omt=s(Tpe);IJo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),qJo=r(_3,":"),_3.forEach(t),NJo=i(ma),Py=n(ma,"UL",{});var Oqe=s(Py);CF=n(Oqe,"LI",{});var Xxe=s(CF);Mpe=n(Xxe,"STRONG",{});var rmt=s(Mpe);jJo=r(rmt,"speech-encoder-decoder"),rmt.forEach(t),DJo=r(Xxe," \u2014 "),UV=n(Xxe,"A",{href:!0});var tmt=s(UV);GJo=r(tmt,"SpeechEncoderDecoderModel"),tmt.forEach(t),OJo=r(Xxe," (Speech Encoder decoder model)"),Xxe.forEach(t),VJo=i(Oqe),wF=n(Oqe,"LI",{});var zxe=s(wF);Epe=n(zxe,"STRONG",{});var amt=s(Epe);XJo=r(amt,"speech_to_text"),amt.forEach(t),zJo=r(zxe," \u2014 "),JV=n(zxe,"A",{href:!0});var nmt=s(JV);QJo=r(nmt,"Speech2TextForConditionalGeneration"),nmt.forEach(t),WJo=r(zxe," (Speech2Text model)"),zxe.forEach(t),Oqe.forEach(t),HJo=i(ma),AF=n(ma,"P",{});var Qxe=s(AF);UJo=r(Qxe,"The model is set in evaluation mode by default using "),Cpe=n(Qxe,"CODE",{});var smt=s(Cpe);JJo=r(smt,"model.eval()"),smt.forEach(t),YJo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(Qxe,"CODE",{});var lmt=s(wpe);KJo=r(lmt,"model.train()"),lmt.forEach(t),Qxe.forEach(t),ZJo=i(ma),T(yF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),DPe=i(f),gd=n(f,"H2",{class:!0});var Vqe=s(gd);LF=n(Vqe,"A",{id:!0,class:!0,href:!0});var imt=s(LF);Ape=n(imt,"SPAN",{});var dmt=s(Ape);T(Iy.$$.fragment,dmt),dmt.forEach(t),imt.forEach(t),eYo=i(Vqe),ype=n(Vqe,"SPAN",{});var cmt=s(ype);oYo=r(cmt,"AutoModelForAudioXVector"),cmt.forEach(t),Vqe.forEach(t),GPe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(qy.$$.fragment,el),rYo=i(el),hd=n(el,"P",{});var gK=s(hd);tYo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YV=n(gK,"A",{href:!0});var fmt=s(YV);aYo=r(fmt,"from_pretrained()"),fmt.forEach(t),nYo=r(gK," class method or the "),KV=n(gK,"A",{href:!0});var mmt=s(KV);sYo=r(mmt,"from_config()"),mmt.forEach(t),lYo=r(gK,` class
method.`),gK.forEach(t),iYo=i(el),Ny=n(el,"P",{});var Xqe=s(Ny);dYo=r(Xqe,"This class cannot be instantiated directly using "),Lpe=n(Xqe,"CODE",{});var gmt=s(Lpe);cYo=r(gmt,"__init__()"),gmt.forEach(t),fYo=r(Xqe," (throws an error)."),Xqe.forEach(t),mYo=i(el),_t=n(el,"DIV",{class:!0});var b3=s(_t);T(jy.$$.fragment,b3),gYo=i(b3),xpe=n(b3,"P",{});var hmt=s(xpe);hYo=r(hmt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),hmt.forEach(t),pYo=i(b3),pd=n(b3,"P",{});var hK=s(pd);uYo=r(hK,`Note:
Loading a model from its configuration file does `),$pe=n(hK,"STRONG",{});var pmt=s($pe);_Yo=r(pmt,"not"),pmt.forEach(t),bYo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(hK,"A",{href:!0});var umt=s(ZV);vYo=r(umt,"from_pretrained()"),umt.forEach(t),FYo=r(hK," to load the model weights."),hK.forEach(t),TYo=i(b3),T(xF.$$.fragment,b3),b3.forEach(t),MYo=i(el),mo=n(el,"DIV",{class:!0});var ga=s(mo);T(Dy.$$.fragment,ga),EYo=i(ga),kpe=n(ga,"P",{});var _mt=s(kpe);CYo=r(_mt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_mt.forEach(t),wYo=i(ga),Ga=n(ga,"P",{});var v3=s(Ga);AYo=r(v3,"The model class to instantiate is selected based on the "),Spe=n(v3,"CODE",{});var bmt=s(Spe);yYo=r(bmt,"model_type"),bmt.forEach(t),LYo=r(v3,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(v3,"CODE",{});var vmt=s(Rpe);xYo=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),$Yo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(v3,"CODE",{});var Fmt=s(Bpe);kYo=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),SYo=r(v3,":"),v3.forEach(t),RYo=i(ga),Oa=n(ga,"UL",{});var F3=s(Oa);$F=n(F3,"LI",{});var Wxe=s($F);Ppe=n(Wxe,"STRONG",{});var Tmt=s(Ppe);BYo=r(Tmt,"data2vec-audio"),Tmt.forEach(t),PYo=r(Wxe," \u2014 "),eX=n(Wxe,"A",{href:!0});var Mmt=s(eX);IYo=r(Mmt,"Data2VecAudioForXVector"),Mmt.forEach(t),qYo=r(Wxe," (Data2VecAudio model)"),Wxe.forEach(t),NYo=i(F3),kF=n(F3,"LI",{});var Hxe=s(kF);Ipe=n(Hxe,"STRONG",{});var Emt=s(Ipe);jYo=r(Emt,"unispeech-sat"),Emt.forEach(t),DYo=r(Hxe," \u2014 "),oX=n(Hxe,"A",{href:!0});var Cmt=s(oX);GYo=r(Cmt,"UniSpeechSatForXVector"),Cmt.forEach(t),OYo=r(Hxe," (UniSpeechSat model)"),Hxe.forEach(t),VYo=i(F3),SF=n(F3,"LI",{});var Uxe=s(SF);qpe=n(Uxe,"STRONG",{});var wmt=s(qpe);XYo=r(wmt,"wav2vec2"),wmt.forEach(t),zYo=r(Uxe," \u2014 "),rX=n(Uxe,"A",{href:!0});var Amt=s(rX);QYo=r(Amt,"Wav2Vec2ForXVector"),Amt.forEach(t),WYo=r(Uxe," (Wav2Vec2 model)"),Uxe.forEach(t),HYo=i(F3),RF=n(F3,"LI",{});var Jxe=s(RF);Npe=n(Jxe,"STRONG",{});var ymt=s(Npe);UYo=r(ymt,"wavlm"),ymt.forEach(t),JYo=r(Jxe," \u2014 "),tX=n(Jxe,"A",{href:!0});var Lmt=s(tX);YYo=r(Lmt,"WavLMForXVector"),Lmt.forEach(t),KYo=r(Jxe," (WavLM model)"),Jxe.forEach(t),F3.forEach(t),ZYo=i(ga),BF=n(ga,"P",{});var Yxe=s(BF);eKo=r(Yxe,"The model is set in evaluation mode by default using "),jpe=n(Yxe,"CODE",{});var xmt=s(jpe);oKo=r(xmt,"model.eval()"),xmt.forEach(t),rKo=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(Yxe,"CODE",{});var $mt=s(Dpe);tKo=r($mt,"model.train()"),$mt.forEach(t),Yxe.forEach(t),aKo=i(ga),T(PF.$$.fragment,ga),ga.forEach(t),el.forEach(t),OPe=i(f),ud=n(f,"H2",{class:!0});var zqe=s(ud);IF=n(zqe,"A",{id:!0,class:!0,href:!0});var kmt=s(IF);Gpe=n(kmt,"SPAN",{});var Smt=s(Gpe);T(Gy.$$.fragment,Smt),Smt.forEach(t),kmt.forEach(t),nKo=i(zqe),Ope=n(zqe,"SPAN",{});var Rmt=s(Ope);sKo=r(Rmt,"AutoModelForMaskedImageModeling"),Rmt.forEach(t),zqe.forEach(t),VPe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(Oy.$$.fragment,ol),lKo=i(ol),_d=n(ol,"P",{});var pK=s(_d);iKo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aX=n(pK,"A",{href:!0});var Bmt=s(aX);dKo=r(Bmt,"from_pretrained()"),Bmt.forEach(t),cKo=r(pK," class method or the "),nX=n(pK,"A",{href:!0});var Pmt=s(nX);fKo=r(Pmt,"from_config()"),Pmt.forEach(t),mKo=r(pK,` class
method.`),pK.forEach(t),gKo=i(ol),Vy=n(ol,"P",{});var Qqe=s(Vy);hKo=r(Qqe,"This class cannot be instantiated directly using "),Vpe=n(Qqe,"CODE",{});var Imt=s(Vpe);pKo=r(Imt,"__init__()"),Imt.forEach(t),uKo=r(Qqe," (throws an error)."),Qqe.forEach(t),_Ko=i(ol),bt=n(ol,"DIV",{class:!0});var T3=s(bt);T(Xy.$$.fragment,T3),bKo=i(T3),Xpe=n(T3,"P",{});var qmt=s(Xpe);vKo=r(qmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qmt.forEach(t),FKo=i(T3),bd=n(T3,"P",{});var uK=s(bd);TKo=r(uK,`Note:
Loading a model from its configuration file does `),zpe=n(uK,"STRONG",{});var Nmt=s(zpe);MKo=r(Nmt,"not"),Nmt.forEach(t),EKo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(uK,"A",{href:!0});var jmt=s(sX);CKo=r(jmt,"from_pretrained()"),jmt.forEach(t),wKo=r(uK," to load the model weights."),uK.forEach(t),AKo=i(T3),T(qF.$$.fragment,T3),T3.forEach(t),yKo=i(ol),go=n(ol,"DIV",{class:!0});var ha=s(go);T(zy.$$.fragment,ha),LKo=i(ha),Qpe=n(ha,"P",{});var Dmt=s(Qpe);xKo=r(Dmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Dmt.forEach(t),$Ko=i(ha),Va=n(ha,"P",{});var M3=s(Va);kKo=r(M3,"The model class to instantiate is selected based on the "),Wpe=n(M3,"CODE",{});var Gmt=s(Wpe);SKo=r(Gmt,"model_type"),Gmt.forEach(t),RKo=r(M3,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(M3,"CODE",{});var Omt=s(Hpe);BKo=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),PKo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(M3,"CODE",{});var Vmt=s(Upe);IKo=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),qKo=r(M3,":"),M3.forEach(t),NKo=i(ha),vd=n(ha,"UL",{});var _K=s(vd);NF=n(_K,"LI",{});var Kxe=s(NF);Jpe=n(Kxe,"STRONG",{});var Xmt=s(Jpe);jKo=r(Xmt,"deit"),Xmt.forEach(t),DKo=r(Kxe," \u2014 "),lX=n(Kxe,"A",{href:!0});var zmt=s(lX);GKo=r(zmt,"DeiTForMaskedImageModeling"),zmt.forEach(t),OKo=r(Kxe," (DeiT model)"),Kxe.forEach(t),VKo=i(_K),jF=n(_K,"LI",{});var Zxe=s(jF);Ype=n(Zxe,"STRONG",{});var Qmt=s(Ype);XKo=r(Qmt,"swin"),Qmt.forEach(t),zKo=r(Zxe," \u2014 "),iX=n(Zxe,"A",{href:!0});var Wmt=s(iX);QKo=r(Wmt,"SwinForMaskedImageModeling"),Wmt.forEach(t),WKo=r(Zxe," (Swin model)"),Zxe.forEach(t),HKo=i(_K),DF=n(_K,"LI",{});var e9e=s(DF);Kpe=n(e9e,"STRONG",{});var Hmt=s(Kpe);UKo=r(Hmt,"vit"),Hmt.forEach(t),JKo=r(e9e," \u2014 "),dX=n(e9e,"A",{href:!0});var Umt=s(dX);YKo=r(Umt,"ViTForMaskedImageModeling"),Umt.forEach(t),KKo=r(e9e," (ViT model)"),e9e.forEach(t),_K.forEach(t),ZKo=i(ha),GF=n(ha,"P",{});var o9e=s(GF);eZo=r(o9e,"The model is set in evaluation mode by default using "),Zpe=n(o9e,"CODE",{});var Jmt=s(Zpe);oZo=r(Jmt,"model.eval()"),Jmt.forEach(t),rZo=r(o9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(o9e,"CODE",{});var Ymt=s(eue);tZo=r(Ymt,"model.train()"),Ymt.forEach(t),o9e.forEach(t),aZo=i(ha),T(OF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),XPe=i(f),Fd=n(f,"H2",{class:!0});var Wqe=s(Fd);VF=n(Wqe,"A",{id:!0,class:!0,href:!0});var Kmt=s(VF);oue=n(Kmt,"SPAN",{});var Zmt=s(oue);T(Qy.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),nZo=i(Wqe),rue=n(Wqe,"SPAN",{});var egt=s(rue);sZo=r(egt,"AutoModelForObjectDetection"),egt.forEach(t),Wqe.forEach(t),zPe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(Wy.$$.fragment,rl),lZo=i(rl),Td=n(rl,"P",{});var bK=s(Td);iZo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cX=n(bK,"A",{href:!0});var ogt=s(cX);dZo=r(ogt,"from_pretrained()"),ogt.forEach(t),cZo=r(bK," class method or the "),fX=n(bK,"A",{href:!0});var rgt=s(fX);fZo=r(rgt,"from_config()"),rgt.forEach(t),mZo=r(bK,` class
method.`),bK.forEach(t),gZo=i(rl),Hy=n(rl,"P",{});var Hqe=s(Hy);hZo=r(Hqe,"This class cannot be instantiated directly using "),tue=n(Hqe,"CODE",{});var tgt=s(tue);pZo=r(tgt,"__init__()"),tgt.forEach(t),uZo=r(Hqe," (throws an error)."),Hqe.forEach(t),_Zo=i(rl),vt=n(rl,"DIV",{class:!0});var E3=s(vt);T(Uy.$$.fragment,E3),bZo=i(E3),aue=n(E3,"P",{});var agt=s(aue);vZo=r(agt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),agt.forEach(t),FZo=i(E3),Md=n(E3,"P",{});var vK=s(Md);TZo=r(vK,`Note:
Loading a model from its configuration file does `),nue=n(vK,"STRONG",{});var ngt=s(nue);MZo=r(ngt,"not"),ngt.forEach(t),EZo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(vK,"A",{href:!0});var sgt=s(mX);CZo=r(sgt,"from_pretrained()"),sgt.forEach(t),wZo=r(vK," to load the model weights."),vK.forEach(t),AZo=i(E3),T(XF.$$.fragment,E3),E3.forEach(t),yZo=i(rl),ho=n(rl,"DIV",{class:!0});var pa=s(ho);T(Jy.$$.fragment,pa),LZo=i(pa),sue=n(pa,"P",{});var lgt=s(sue);xZo=r(lgt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lgt.forEach(t),$Zo=i(pa),Xa=n(pa,"P",{});var C3=s(Xa);kZo=r(C3,"The model class to instantiate is selected based on the "),lue=n(C3,"CODE",{});var igt=s(lue);SZo=r(igt,"model_type"),igt.forEach(t),RZo=r(C3,` property of the config object (either
passed as an argument or loaded from `),iue=n(C3,"CODE",{});var dgt=s(iue);BZo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),PZo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(C3,"CODE",{});var cgt=s(due);IZo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),qZo=r(C3,":"),C3.forEach(t),NZo=i(pa),Yy=n(pa,"UL",{});var Uqe=s(Yy);zF=n(Uqe,"LI",{});var r9e=s(zF);cue=n(r9e,"STRONG",{});var fgt=s(cue);jZo=r(fgt,"detr"),fgt.forEach(t),DZo=r(r9e," \u2014 "),gX=n(r9e,"A",{href:!0});var mgt=s(gX);GZo=r(mgt,"DetrForObjectDetection"),mgt.forEach(t),OZo=r(r9e," (DETR model)"),r9e.forEach(t),VZo=i(Uqe),QF=n(Uqe,"LI",{});var t9e=s(QF);fue=n(t9e,"STRONG",{});var ggt=s(fue);XZo=r(ggt,"yolos"),ggt.forEach(t),zZo=r(t9e," \u2014 "),hX=n(t9e,"A",{href:!0});var hgt=s(hX);QZo=r(hgt,"YolosForObjectDetection"),hgt.forEach(t),WZo=r(t9e," (YOLOS model)"),t9e.forEach(t),Uqe.forEach(t),HZo=i(pa),WF=n(pa,"P",{});var a9e=s(WF);UZo=r(a9e,"The model is set in evaluation mode by default using "),mue=n(a9e,"CODE",{});var pgt=s(mue);JZo=r(pgt,"model.eval()"),pgt.forEach(t),YZo=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(a9e,"CODE",{});var ugt=s(gue);KZo=r(ugt,"model.train()"),ugt.forEach(t),a9e.forEach(t),ZZo=i(pa),T(HF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),QPe=i(f),Ed=n(f,"H2",{class:!0});var Jqe=s(Ed);UF=n(Jqe,"A",{id:!0,class:!0,href:!0});var _gt=s(UF);hue=n(_gt,"SPAN",{});var bgt=s(hue);T(Ky.$$.fragment,bgt),bgt.forEach(t),_gt.forEach(t),eer=i(Jqe),pue=n(Jqe,"SPAN",{});var vgt=s(pue);oer=r(vgt,"AutoModelForImageSegmentation"),vgt.forEach(t),Jqe.forEach(t),WPe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(Zy.$$.fragment,tl),rer=i(tl),Cd=n(tl,"P",{});var FK=s(Cd);ter=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pX=n(FK,"A",{href:!0});var Fgt=s(pX);aer=r(Fgt,"from_pretrained()"),Fgt.forEach(t),ner=r(FK," class method or the "),uX=n(FK,"A",{href:!0});var Tgt=s(uX);ser=r(Tgt,"from_config()"),Tgt.forEach(t),ler=r(FK,` class
method.`),FK.forEach(t),ier=i(tl),eL=n(tl,"P",{});var Yqe=s(eL);der=r(Yqe,"This class cannot be instantiated directly using "),uue=n(Yqe,"CODE",{});var Mgt=s(uue);cer=r(Mgt,"__init__()"),Mgt.forEach(t),fer=r(Yqe," (throws an error)."),Yqe.forEach(t),mer=i(tl),Ft=n(tl,"DIV",{class:!0});var w3=s(Ft);T(oL.$$.fragment,w3),ger=i(w3),_ue=n(w3,"P",{});var Egt=s(_ue);her=r(Egt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Egt.forEach(t),per=i(w3),wd=n(w3,"P",{});var TK=s(wd);uer=r(TK,`Note:
Loading a model from its configuration file does `),bue=n(TK,"STRONG",{});var Cgt=s(bue);_er=r(Cgt,"not"),Cgt.forEach(t),ber=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(TK,"A",{href:!0});var wgt=s(_X);ver=r(wgt,"from_pretrained()"),wgt.forEach(t),Fer=r(TK," to load the model weights."),TK.forEach(t),Ter=i(w3),T(JF.$$.fragment,w3),w3.forEach(t),Mer=i(tl),po=n(tl,"DIV",{class:!0});var ua=s(po);T(rL.$$.fragment,ua),Eer=i(ua),vue=n(ua,"P",{});var Agt=s(vue);Cer=r(Agt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Agt.forEach(t),wer=i(ua),za=n(ua,"P",{});var A3=s(za);Aer=r(A3,"The model class to instantiate is selected based on the "),Fue=n(A3,"CODE",{});var ygt=s(Fue);yer=r(ygt,"model_type"),ygt.forEach(t),Ler=r(A3,` property of the config object (either
passed as an argument or loaded from `),Tue=n(A3,"CODE",{});var Lgt=s(Tue);xer=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),$er=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(A3,"CODE",{});var xgt=s(Mue);ker=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),Ser=r(A3,":"),A3.forEach(t),Rer=i(ua),Eue=n(ua,"UL",{});var $gt=s(Eue);YF=n($gt,"LI",{});var n9e=s(YF);Cue=n(n9e,"STRONG",{});var kgt=s(Cue);Ber=r(kgt,"detr"),kgt.forEach(t),Per=r(n9e," \u2014 "),bX=n(n9e,"A",{href:!0});var Sgt=s(bX);Ier=r(Sgt,"DetrForSegmentation"),Sgt.forEach(t),qer=r(n9e," (DETR model)"),n9e.forEach(t),$gt.forEach(t),Ner=i(ua),KF=n(ua,"P",{});var s9e=s(KF);jer=r(s9e,"The model is set in evaluation mode by default using "),wue=n(s9e,"CODE",{});var Rgt=s(wue);Der=r(Rgt,"model.eval()"),Rgt.forEach(t),Ger=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(s9e,"CODE",{});var Bgt=s(Aue);Oer=r(Bgt,"model.train()"),Bgt.forEach(t),s9e.forEach(t),Ver=i(ua),T(ZF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),HPe=i(f),Ad=n(f,"H2",{class:!0});var Kqe=s(Ad);e6=n(Kqe,"A",{id:!0,class:!0,href:!0});var Pgt=s(e6);yue=n(Pgt,"SPAN",{});var Igt=s(yue);T(tL.$$.fragment,Igt),Igt.forEach(t),Pgt.forEach(t),Xer=i(Kqe),Lue=n(Kqe,"SPAN",{});var qgt=s(Lue);zer=r(qgt,"AutoModelForSemanticSegmentation"),qgt.forEach(t),Kqe.forEach(t),UPe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(aL.$$.fragment,al),Qer=i(al),yd=n(al,"P",{});var MK=s(yd);Wer=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vX=n(MK,"A",{href:!0});var Ngt=s(vX);Her=r(Ngt,"from_pretrained()"),Ngt.forEach(t),Uer=r(MK," class method or the "),FX=n(MK,"A",{href:!0});var jgt=s(FX);Jer=r(jgt,"from_config()"),jgt.forEach(t),Yer=r(MK,` class
method.`),MK.forEach(t),Ker=i(al),nL=n(al,"P",{});var Zqe=s(nL);Zer=r(Zqe,"This class cannot be instantiated directly using "),xue=n(Zqe,"CODE",{});var Dgt=s(xue);eor=r(Dgt,"__init__()"),Dgt.forEach(t),oor=r(Zqe," (throws an error)."),Zqe.forEach(t),ror=i(al),Tt=n(al,"DIV",{class:!0});var y3=s(Tt);T(sL.$$.fragment,y3),tor=i(y3),$ue=n(y3,"P",{});var Ggt=s($ue);aor=r(Ggt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ggt.forEach(t),nor=i(y3),Ld=n(y3,"P",{});var EK=s(Ld);sor=r(EK,`Note:
Loading a model from its configuration file does `),kue=n(EK,"STRONG",{});var Ogt=s(kue);lor=r(Ogt,"not"),Ogt.forEach(t),ior=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(EK,"A",{href:!0});var Vgt=s(TX);dor=r(Vgt,"from_pretrained()"),Vgt.forEach(t),cor=r(EK," to load the model weights."),EK.forEach(t),mor=i(y3),T(o6.$$.fragment,y3),y3.forEach(t),gor=i(al),uo=n(al,"DIV",{class:!0});var _a=s(uo);T(lL.$$.fragment,_a),hor=i(_a),Sue=n(_a,"P",{});var Xgt=s(Sue);por=r(Xgt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Xgt.forEach(t),uor=i(_a),Qa=n(_a,"P",{});var L3=s(Qa);_or=r(L3,"The model class to instantiate is selected based on the "),Rue=n(L3,"CODE",{});var zgt=s(Rue);bor=r(zgt,"model_type"),zgt.forEach(t),vor=r(L3,` property of the config object (either
passed as an argument or loaded from `),Bue=n(L3,"CODE",{});var Qgt=s(Bue);For=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),Tor=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(L3,"CODE",{});var Wgt=s(Pue);Mor=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),Eor=r(L3,":"),L3.forEach(t),Cor=i(_a),Wa=n(_a,"UL",{});var x3=s(Wa);r6=n(x3,"LI",{});var l9e=s(r6);Iue=n(l9e,"STRONG",{});var Hgt=s(Iue);wor=r(Hgt,"beit"),Hgt.forEach(t),Aor=r(l9e," \u2014 "),MX=n(l9e,"A",{href:!0});var Ugt=s(MX);yor=r(Ugt,"BeitForSemanticSegmentation"),Ugt.forEach(t),Lor=r(l9e," (BEiT model)"),l9e.forEach(t),xor=i(x3),t6=n(x3,"LI",{});var i9e=s(t6);que=n(i9e,"STRONG",{});var Jgt=s(que);$or=r(Jgt,"data2vec-vision"),Jgt.forEach(t),kor=r(i9e," \u2014 "),EX=n(i9e,"A",{href:!0});var Ygt=s(EX);Sor=r(Ygt,"Data2VecVisionForSemanticSegmentation"),Ygt.forEach(t),Ror=r(i9e," (Data2VecVision model)"),i9e.forEach(t),Bor=i(x3),a6=n(x3,"LI",{});var d9e=s(a6);Nue=n(d9e,"STRONG",{});var Kgt=s(Nue);Por=r(Kgt,"dpt"),Kgt.forEach(t),Ior=r(d9e," \u2014 "),CX=n(d9e,"A",{href:!0});var Zgt=s(CX);qor=r(Zgt,"DPTForSemanticSegmentation"),Zgt.forEach(t),Nor=r(d9e," (DPT model)"),d9e.forEach(t),jor=i(x3),n6=n(x3,"LI",{});var c9e=s(n6);jue=n(c9e,"STRONG",{});var eht=s(jue);Dor=r(eht,"segformer"),eht.forEach(t),Gor=r(c9e," \u2014 "),wX=n(c9e,"A",{href:!0});var oht=s(wX);Oor=r(oht,"SegformerForSemanticSegmentation"),oht.forEach(t),Vor=r(c9e," (SegFormer model)"),c9e.forEach(t),x3.forEach(t),Xor=i(_a),s6=n(_a,"P",{});var f9e=s(s6);zor=r(f9e,"The model is set in evaluation mode by default using "),Due=n(f9e,"CODE",{});var rht=s(Due);Qor=r(rht,"model.eval()"),rht.forEach(t),Wor=r(f9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(f9e,"CODE",{});var tht=s(Gue);Hor=r(tht,"model.train()"),tht.forEach(t),f9e.forEach(t),Uor=i(_a),T(l6.$$.fragment,_a),_a.forEach(t),al.forEach(t),JPe=i(f),xd=n(f,"H2",{class:!0});var eNe=s(xd);i6=n(eNe,"A",{id:!0,class:!0,href:!0});var aht=s(i6);Oue=n(aht,"SPAN",{});var nht=s(Oue);T(iL.$$.fragment,nht),nht.forEach(t),aht.forEach(t),Jor=i(eNe),Vue=n(eNe,"SPAN",{});var sht=s(Vue);Yor=r(sht,"AutoModelForInstanceSegmentation"),sht.forEach(t),eNe.forEach(t),YPe=i(f),Jo=n(f,"DIV",{class:!0});var nl=s(Jo);T(dL.$$.fragment,nl),Kor=i(nl),$d=n(nl,"P",{});var CK=s($d);Zor=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),AX=n(CK,"A",{href:!0});var lht=s(AX);err=r(lht,"from_pretrained()"),lht.forEach(t),orr=r(CK," class method or the "),yX=n(CK,"A",{href:!0});var iht=s(yX);rrr=r(iht,"from_config()"),iht.forEach(t),trr=r(CK,` class
method.`),CK.forEach(t),arr=i(nl),cL=n(nl,"P",{});var oNe=s(cL);nrr=r(oNe,"This class cannot be instantiated directly using "),Xue=n(oNe,"CODE",{});var dht=s(Xue);srr=r(dht,"__init__()"),dht.forEach(t),lrr=r(oNe," (throws an error)."),oNe.forEach(t),irr=i(nl),Mt=n(nl,"DIV",{class:!0});var $3=s(Mt);T(fL.$$.fragment,$3),drr=i($3),zue=n($3,"P",{});var cht=s(zue);crr=r(cht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cht.forEach(t),frr=i($3),kd=n($3,"P",{});var wK=s(kd);mrr=r(wK,`Note:
Loading a model from its configuration file does `),Que=n(wK,"STRONG",{});var fht=s(Que);grr=r(fht,"not"),fht.forEach(t),hrr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(wK,"A",{href:!0});var mht=s(LX);prr=r(mht,"from_pretrained()"),mht.forEach(t),urr=r(wK," to load the model weights."),wK.forEach(t),_rr=i($3),T(d6.$$.fragment,$3),$3.forEach(t),brr=i(nl),_o=n(nl,"DIV",{class:!0});var ba=s(_o);T(mL.$$.fragment,ba),vrr=i(ba),Wue=n(ba,"P",{});var ght=s(Wue);Frr=r(ght,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ght.forEach(t),Trr=i(ba),Ha=n(ba,"P",{});var k3=s(Ha);Mrr=r(k3,"The model class to instantiate is selected based on the "),Hue=n(k3,"CODE",{});var hht=s(Hue);Err=r(hht,"model_type"),hht.forEach(t),Crr=r(k3,` property of the config object (either
passed as an argument or loaded from `),Uue=n(k3,"CODE",{});var pht=s(Uue);wrr=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),Arr=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(k3,"CODE",{});var uht=s(Jue);yrr=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),Lrr=r(k3,":"),k3.forEach(t),xrr=i(ba),Yue=n(ba,"UL",{});var _ht=s(Yue);c6=n(_ht,"LI",{});var m9e=s(c6);Kue=n(m9e,"STRONG",{});var bht=s(Kue);$rr=r(bht,"maskformer"),bht.forEach(t),krr=r(m9e," \u2014 "),xX=n(m9e,"A",{href:!0});var vht=s(xX);Srr=r(vht,"MaskFormerForInstanceSegmentation"),vht.forEach(t),Rrr=r(m9e," (MaskFormer model)"),m9e.forEach(t),_ht.forEach(t),Brr=i(ba),f6=n(ba,"P",{});var g9e=s(f6);Prr=r(g9e,"The model is set in evaluation mode by default using "),Zue=n(g9e,"CODE",{});var Fht=s(Zue);Irr=r(Fht,"model.eval()"),Fht.forEach(t),qrr=r(g9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(g9e,"CODE",{});var Tht=s(e_e);Nrr=r(Tht,"model.train()"),Tht.forEach(t),g9e.forEach(t),jrr=i(ba),T(m6.$$.fragment,ba),ba.forEach(t),nl.forEach(t),KPe=i(f),Sd=n(f,"H2",{class:!0});var rNe=s(Sd);g6=n(rNe,"A",{id:!0,class:!0,href:!0});var Mht=s(g6);o_e=n(Mht,"SPAN",{});var Eht=s(o_e);T(gL.$$.fragment,Eht),Eht.forEach(t),Mht.forEach(t),Drr=i(rNe),r_e=n(rNe,"SPAN",{});var Cht=s(r_e);Grr=r(Cht,"TFAutoModel"),Cht.forEach(t),rNe.forEach(t),ZPe=i(f),Yo=n(f,"DIV",{class:!0});var sl=s(Yo);T(hL.$$.fragment,sl),Orr=i(sl),Rd=n(sl,"P",{});var AK=s(Rd);Vrr=r(AK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$X=n(AK,"A",{href:!0});var wht=s($X);Xrr=r(wht,"from_pretrained()"),wht.forEach(t),zrr=r(AK," class method or the "),kX=n(AK,"A",{href:!0});var Aht=s(kX);Qrr=r(Aht,"from_config()"),Aht.forEach(t),Wrr=r(AK,` class
method.`),AK.forEach(t),Hrr=i(sl),pL=n(sl,"P",{});var tNe=s(pL);Urr=r(tNe,"This class cannot be instantiated directly using "),t_e=n(tNe,"CODE",{});var yht=s(t_e);Jrr=r(yht,"__init__()"),yht.forEach(t),Yrr=r(tNe," (throws an error)."),tNe.forEach(t),Krr=i(sl),Et=n(sl,"DIV",{class:!0});var S3=s(Et);T(uL.$$.fragment,S3),Zrr=i(S3),a_e=n(S3,"P",{});var Lht=s(a_e);etr=r(Lht,"Instantiates one of the base model classes of the library from a configuration."),Lht.forEach(t),otr=i(S3),Bd=n(S3,"P",{});var yK=s(Bd);rtr=r(yK,`Note:
Loading a model from its configuration file does `),n_e=n(yK,"STRONG",{});var xht=s(n_e);ttr=r(xht,"not"),xht.forEach(t),atr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(yK,"A",{href:!0});var $ht=s(SX);ntr=r($ht,"from_pretrained()"),$ht.forEach(t),str=r(yK," to load the model weights."),yK.forEach(t),ltr=i(S3),T(h6.$$.fragment,S3),S3.forEach(t),itr=i(sl),Cr=n(sl,"DIV",{class:!0});var ll=s(Cr);T(_L.$$.fragment,ll),dtr=i(ll),s_e=n(ll,"P",{});var kht=s(s_e);ctr=r(kht,"Instantiate one of the base model classes of the library from a pretrained model."),kht.forEach(t),ftr=i(ll),Ua=n(ll,"P",{});var R3=s(Ua);mtr=r(R3,"The model class to instantiate is selected based on the "),l_e=n(R3,"CODE",{});var Sht=s(l_e);gtr=r(Sht,"model_type"),Sht.forEach(t),htr=r(R3,` property of the config object (either
passed as an argument or loaded from `),i_e=n(R3,"CODE",{});var Rht=s(i_e);ptr=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),utr=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(R3,"CODE",{});var Bht=s(d_e);_tr=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),btr=r(R3,":"),R3.forEach(t),vtr=i(ll),j=n(ll,"UL",{});var D=s(j);p6=n(D,"LI",{});var h9e=s(p6);c_e=n(h9e,"STRONG",{});var Pht=s(c_e);Ftr=r(Pht,"albert"),Pht.forEach(t),Ttr=r(h9e," \u2014 "),RX=n(h9e,"A",{href:!0});var Iht=s(RX);Mtr=r(Iht,"TFAlbertModel"),Iht.forEach(t),Etr=r(h9e," (ALBERT model)"),h9e.forEach(t),Ctr=i(D),u6=n(D,"LI",{});var p9e=s(u6);f_e=n(p9e,"STRONG",{});var qht=s(f_e);wtr=r(qht,"bart"),qht.forEach(t),Atr=r(p9e," \u2014 "),BX=n(p9e,"A",{href:!0});var Nht=s(BX);ytr=r(Nht,"TFBartModel"),Nht.forEach(t),Ltr=r(p9e," (BART model)"),p9e.forEach(t),xtr=i(D),_6=n(D,"LI",{});var u9e=s(_6);m_e=n(u9e,"STRONG",{});var jht=s(m_e);$tr=r(jht,"bert"),jht.forEach(t),ktr=r(u9e," \u2014 "),PX=n(u9e,"A",{href:!0});var Dht=s(PX);Str=r(Dht,"TFBertModel"),Dht.forEach(t),Rtr=r(u9e," (BERT model)"),u9e.forEach(t),Btr=i(D),b6=n(D,"LI",{});var _9e=s(b6);g_e=n(_9e,"STRONG",{});var Ght=s(g_e);Ptr=r(Ght,"blenderbot"),Ght.forEach(t),Itr=r(_9e," \u2014 "),IX=n(_9e,"A",{href:!0});var Oht=s(IX);qtr=r(Oht,"TFBlenderbotModel"),Oht.forEach(t),Ntr=r(_9e," (Blenderbot model)"),_9e.forEach(t),jtr=i(D),v6=n(D,"LI",{});var b9e=s(v6);h_e=n(b9e,"STRONG",{});var Vht=s(h_e);Dtr=r(Vht,"blenderbot-small"),Vht.forEach(t),Gtr=r(b9e," \u2014 "),qX=n(b9e,"A",{href:!0});var Xht=s(qX);Otr=r(Xht,"TFBlenderbotSmallModel"),Xht.forEach(t),Vtr=r(b9e," (BlenderbotSmall model)"),b9e.forEach(t),Xtr=i(D),F6=n(D,"LI",{});var v9e=s(F6);p_e=n(v9e,"STRONG",{});var zht=s(p_e);ztr=r(zht,"camembert"),zht.forEach(t),Qtr=r(v9e," \u2014 "),NX=n(v9e,"A",{href:!0});var Qht=s(NX);Wtr=r(Qht,"TFCamembertModel"),Qht.forEach(t),Htr=r(v9e," (CamemBERT model)"),v9e.forEach(t),Utr=i(D),T6=n(D,"LI",{});var F9e=s(T6);u_e=n(F9e,"STRONG",{});var Wht=s(u_e);Jtr=r(Wht,"clip"),Wht.forEach(t),Ytr=r(F9e," \u2014 "),jX=n(F9e,"A",{href:!0});var Hht=s(jX);Ktr=r(Hht,"TFCLIPModel"),Hht.forEach(t),Ztr=r(F9e," (CLIP model)"),F9e.forEach(t),ear=i(D),M6=n(D,"LI",{});var T9e=s(M6);__e=n(T9e,"STRONG",{});var Uht=s(__e);oar=r(Uht,"convbert"),Uht.forEach(t),rar=r(T9e," \u2014 "),DX=n(T9e,"A",{href:!0});var Jht=s(DX);tar=r(Jht,"TFConvBertModel"),Jht.forEach(t),aar=r(T9e," (ConvBERT model)"),T9e.forEach(t),nar=i(D),E6=n(D,"LI",{});var M9e=s(E6);b_e=n(M9e,"STRONG",{});var Yht=s(b_e);sar=r(Yht,"convnext"),Yht.forEach(t),lar=r(M9e," \u2014 "),GX=n(M9e,"A",{href:!0});var Kht=s(GX);iar=r(Kht,"TFConvNextModel"),Kht.forEach(t),dar=r(M9e," (ConvNext model)"),M9e.forEach(t),car=i(D),C6=n(D,"LI",{});var E9e=s(C6);v_e=n(E9e,"STRONG",{});var Zht=s(v_e);far=r(Zht,"ctrl"),Zht.forEach(t),mar=r(E9e," \u2014 "),OX=n(E9e,"A",{href:!0});var ept=s(OX);gar=r(ept,"TFCTRLModel"),ept.forEach(t),har=r(E9e," (CTRL model)"),E9e.forEach(t),par=i(D),w6=n(D,"LI",{});var C9e=s(w6);F_e=n(C9e,"STRONG",{});var opt=s(F_e);uar=r(opt,"data2vec-vision"),opt.forEach(t),_ar=r(C9e," \u2014 "),VX=n(C9e,"A",{href:!0});var rpt=s(VX);bar=r(rpt,"TFData2VecVisionModel"),rpt.forEach(t),Far=r(C9e," (Data2VecVision model)"),C9e.forEach(t),Tar=i(D),A6=n(D,"LI",{});var w9e=s(A6);T_e=n(w9e,"STRONG",{});var tpt=s(T_e);Mar=r(tpt,"deberta"),tpt.forEach(t),Ear=r(w9e," \u2014 "),XX=n(w9e,"A",{href:!0});var apt=s(XX);Car=r(apt,"TFDebertaModel"),apt.forEach(t),war=r(w9e," (DeBERTa model)"),w9e.forEach(t),Aar=i(D),y6=n(D,"LI",{});var A9e=s(y6);M_e=n(A9e,"STRONG",{});var npt=s(M_e);yar=r(npt,"deberta-v2"),npt.forEach(t),Lar=r(A9e," \u2014 "),zX=n(A9e,"A",{href:!0});var spt=s(zX);xar=r(spt,"TFDebertaV2Model"),spt.forEach(t),$ar=r(A9e," (DeBERTa-v2 model)"),A9e.forEach(t),kar=i(D),L6=n(D,"LI",{});var y9e=s(L6);E_e=n(y9e,"STRONG",{});var lpt=s(E_e);Sar=r(lpt,"distilbert"),lpt.forEach(t),Rar=r(y9e," \u2014 "),QX=n(y9e,"A",{href:!0});var ipt=s(QX);Bar=r(ipt,"TFDistilBertModel"),ipt.forEach(t),Par=r(y9e," (DistilBERT model)"),y9e.forEach(t),Iar=i(D),x6=n(D,"LI",{});var L9e=s(x6);C_e=n(L9e,"STRONG",{});var dpt=s(C_e);qar=r(dpt,"dpr"),dpt.forEach(t),Nar=r(L9e," \u2014 "),WX=n(L9e,"A",{href:!0});var cpt=s(WX);jar=r(cpt,"TFDPRQuestionEncoder"),cpt.forEach(t),Dar=r(L9e," (DPR model)"),L9e.forEach(t),Gar=i(D),$6=n(D,"LI",{});var x9e=s($6);w_e=n(x9e,"STRONG",{});var fpt=s(w_e);Oar=r(fpt,"electra"),fpt.forEach(t),Var=r(x9e," \u2014 "),HX=n(x9e,"A",{href:!0});var mpt=s(HX);Xar=r(mpt,"TFElectraModel"),mpt.forEach(t),zar=r(x9e," (ELECTRA model)"),x9e.forEach(t),Qar=i(D),k6=n(D,"LI",{});var $9e=s(k6);A_e=n($9e,"STRONG",{});var gpt=s(A_e);War=r(gpt,"flaubert"),gpt.forEach(t),Har=r($9e," \u2014 "),UX=n($9e,"A",{href:!0});var hpt=s(UX);Uar=r(hpt,"TFFlaubertModel"),hpt.forEach(t),Jar=r($9e," (FlauBERT model)"),$9e.forEach(t),Yar=i(D),ks=n(D,"LI",{});var V9=s(ks);y_e=n(V9,"STRONG",{});var ppt=s(y_e);Kar=r(ppt,"funnel"),ppt.forEach(t),Zar=r(V9," \u2014 "),JX=n(V9,"A",{href:!0});var upt=s(JX);enr=r(upt,"TFFunnelModel"),upt.forEach(t),onr=r(V9," or "),YX=n(V9,"A",{href:!0});var _pt=s(YX);rnr=r(_pt,"TFFunnelBaseModel"),_pt.forEach(t),tnr=r(V9," (Funnel Transformer model)"),V9.forEach(t),anr=i(D),S6=n(D,"LI",{});var k9e=s(S6);L_e=n(k9e,"STRONG",{});var bpt=s(L_e);nnr=r(bpt,"gpt2"),bpt.forEach(t),snr=r(k9e," \u2014 "),KX=n(k9e,"A",{href:!0});var vpt=s(KX);lnr=r(vpt,"TFGPT2Model"),vpt.forEach(t),inr=r(k9e," (OpenAI GPT-2 model)"),k9e.forEach(t),dnr=i(D),R6=n(D,"LI",{});var S9e=s(R6);x_e=n(S9e,"STRONG",{});var Fpt=s(x_e);cnr=r(Fpt,"gptj"),Fpt.forEach(t),fnr=r(S9e," \u2014 "),ZX=n(S9e,"A",{href:!0});var Tpt=s(ZX);mnr=r(Tpt,"TFGPTJModel"),Tpt.forEach(t),gnr=r(S9e," (GPT-J model)"),S9e.forEach(t),hnr=i(D),B6=n(D,"LI",{});var R9e=s(B6);$_e=n(R9e,"STRONG",{});var Mpt=s($_e);pnr=r(Mpt,"hubert"),Mpt.forEach(t),unr=r(R9e," \u2014 "),ez=n(R9e,"A",{href:!0});var Ept=s(ez);_nr=r(Ept,"TFHubertModel"),Ept.forEach(t),bnr=r(R9e," (Hubert model)"),R9e.forEach(t),vnr=i(D),P6=n(D,"LI",{});var B9e=s(P6);k_e=n(B9e,"STRONG",{});var Cpt=s(k_e);Fnr=r(Cpt,"layoutlm"),Cpt.forEach(t),Tnr=r(B9e," \u2014 "),oz=n(B9e,"A",{href:!0});var wpt=s(oz);Mnr=r(wpt,"TFLayoutLMModel"),wpt.forEach(t),Enr=r(B9e," (LayoutLM model)"),B9e.forEach(t),Cnr=i(D),I6=n(D,"LI",{});var P9e=s(I6);S_e=n(P9e,"STRONG",{});var Apt=s(S_e);wnr=r(Apt,"led"),Apt.forEach(t),Anr=r(P9e," \u2014 "),rz=n(P9e,"A",{href:!0});var ypt=s(rz);ynr=r(ypt,"TFLEDModel"),ypt.forEach(t),Lnr=r(P9e," (LED model)"),P9e.forEach(t),xnr=i(D),q6=n(D,"LI",{});var I9e=s(q6);R_e=n(I9e,"STRONG",{});var Lpt=s(R_e);$nr=r(Lpt,"longformer"),Lpt.forEach(t),knr=r(I9e," \u2014 "),tz=n(I9e,"A",{href:!0});var xpt=s(tz);Snr=r(xpt,"TFLongformerModel"),xpt.forEach(t),Rnr=r(I9e," (Longformer model)"),I9e.forEach(t),Bnr=i(D),N6=n(D,"LI",{});var q9e=s(N6);B_e=n(q9e,"STRONG",{});var $pt=s(B_e);Pnr=r($pt,"lxmert"),$pt.forEach(t),Inr=r(q9e," \u2014 "),az=n(q9e,"A",{href:!0});var kpt=s(az);qnr=r(kpt,"TFLxmertModel"),kpt.forEach(t),Nnr=r(q9e," (LXMERT model)"),q9e.forEach(t),jnr=i(D),j6=n(D,"LI",{});var N9e=s(j6);P_e=n(N9e,"STRONG",{});var Spt=s(P_e);Dnr=r(Spt,"marian"),Spt.forEach(t),Gnr=r(N9e," \u2014 "),nz=n(N9e,"A",{href:!0});var Rpt=s(nz);Onr=r(Rpt,"TFMarianModel"),Rpt.forEach(t),Vnr=r(N9e," (Marian model)"),N9e.forEach(t),Xnr=i(D),D6=n(D,"LI",{});var j9e=s(D6);I_e=n(j9e,"STRONG",{});var Bpt=s(I_e);znr=r(Bpt,"mbart"),Bpt.forEach(t),Qnr=r(j9e," \u2014 "),sz=n(j9e,"A",{href:!0});var Ppt=s(sz);Wnr=r(Ppt,"TFMBartModel"),Ppt.forEach(t),Hnr=r(j9e," (mBART model)"),j9e.forEach(t),Unr=i(D),G6=n(D,"LI",{});var D9e=s(G6);q_e=n(D9e,"STRONG",{});var Ipt=s(q_e);Jnr=r(Ipt,"mobilebert"),Ipt.forEach(t),Ynr=r(D9e," \u2014 "),lz=n(D9e,"A",{href:!0});var qpt=s(lz);Knr=r(qpt,"TFMobileBertModel"),qpt.forEach(t),Znr=r(D9e," (MobileBERT model)"),D9e.forEach(t),esr=i(D),O6=n(D,"LI",{});var G9e=s(O6);N_e=n(G9e,"STRONG",{});var Npt=s(N_e);osr=r(Npt,"mpnet"),Npt.forEach(t),rsr=r(G9e," \u2014 "),iz=n(G9e,"A",{href:!0});var jpt=s(iz);tsr=r(jpt,"TFMPNetModel"),jpt.forEach(t),asr=r(G9e," (MPNet model)"),G9e.forEach(t),nsr=i(D),V6=n(D,"LI",{});var O9e=s(V6);j_e=n(O9e,"STRONG",{});var Dpt=s(j_e);ssr=r(Dpt,"mt5"),Dpt.forEach(t),lsr=r(O9e," \u2014 "),dz=n(O9e,"A",{href:!0});var Gpt=s(dz);isr=r(Gpt,"TFMT5Model"),Gpt.forEach(t),dsr=r(O9e," (mT5 model)"),O9e.forEach(t),csr=i(D),X6=n(D,"LI",{});var V9e=s(X6);D_e=n(V9e,"STRONG",{});var Opt=s(D_e);fsr=r(Opt,"openai-gpt"),Opt.forEach(t),msr=r(V9e," \u2014 "),cz=n(V9e,"A",{href:!0});var Vpt=s(cz);gsr=r(Vpt,"TFOpenAIGPTModel"),Vpt.forEach(t),hsr=r(V9e," (OpenAI GPT model)"),V9e.forEach(t),psr=i(D),z6=n(D,"LI",{});var X9e=s(z6);G_e=n(X9e,"STRONG",{});var Xpt=s(G_e);usr=r(Xpt,"pegasus"),Xpt.forEach(t),_sr=r(X9e," \u2014 "),fz=n(X9e,"A",{href:!0});var zpt=s(fz);bsr=r(zpt,"TFPegasusModel"),zpt.forEach(t),vsr=r(X9e," (Pegasus model)"),X9e.forEach(t),Fsr=i(D),Q6=n(D,"LI",{});var z9e=s(Q6);O_e=n(z9e,"STRONG",{});var Qpt=s(O_e);Tsr=r(Qpt,"rembert"),Qpt.forEach(t),Msr=r(z9e," \u2014 "),mz=n(z9e,"A",{href:!0});var Wpt=s(mz);Esr=r(Wpt,"TFRemBertModel"),Wpt.forEach(t),Csr=r(z9e," (RemBERT model)"),z9e.forEach(t),wsr=i(D),W6=n(D,"LI",{});var Q9e=s(W6);V_e=n(Q9e,"STRONG",{});var Hpt=s(V_e);Asr=r(Hpt,"roberta"),Hpt.forEach(t),ysr=r(Q9e," \u2014 "),gz=n(Q9e,"A",{href:!0});var Upt=s(gz);Lsr=r(Upt,"TFRobertaModel"),Upt.forEach(t),xsr=r(Q9e," (RoBERTa model)"),Q9e.forEach(t),$sr=i(D),H6=n(D,"LI",{});var W9e=s(H6);X_e=n(W9e,"STRONG",{});var Jpt=s(X_e);ksr=r(Jpt,"roformer"),Jpt.forEach(t),Ssr=r(W9e," \u2014 "),hz=n(W9e,"A",{href:!0});var Ypt=s(hz);Rsr=r(Ypt,"TFRoFormerModel"),Ypt.forEach(t),Bsr=r(W9e," (RoFormer model)"),W9e.forEach(t),Psr=i(D),U6=n(D,"LI",{});var H9e=s(U6);z_e=n(H9e,"STRONG",{});var Kpt=s(z_e);Isr=r(Kpt,"speech_to_text"),Kpt.forEach(t),qsr=r(H9e," \u2014 "),pz=n(H9e,"A",{href:!0});var Zpt=s(pz);Nsr=r(Zpt,"TFSpeech2TextModel"),Zpt.forEach(t),jsr=r(H9e," (Speech2Text model)"),H9e.forEach(t),Dsr=i(D),J6=n(D,"LI",{});var U9e=s(J6);Q_e=n(U9e,"STRONG",{});var eut=s(Q_e);Gsr=r(eut,"t5"),eut.forEach(t),Osr=r(U9e," \u2014 "),uz=n(U9e,"A",{href:!0});var out=s(uz);Vsr=r(out,"TFT5Model"),out.forEach(t),Xsr=r(U9e," (T5 model)"),U9e.forEach(t),zsr=i(D),Y6=n(D,"LI",{});var J9e=s(Y6);W_e=n(J9e,"STRONG",{});var rut=s(W_e);Qsr=r(rut,"tapas"),rut.forEach(t),Wsr=r(J9e," \u2014 "),_z=n(J9e,"A",{href:!0});var tut=s(_z);Hsr=r(tut,"TFTapasModel"),tut.forEach(t),Usr=r(J9e," (TAPAS model)"),J9e.forEach(t),Jsr=i(D),K6=n(D,"LI",{});var Y9e=s(K6);H_e=n(Y9e,"STRONG",{});var aut=s(H_e);Ysr=r(aut,"transfo-xl"),aut.forEach(t),Ksr=r(Y9e," \u2014 "),bz=n(Y9e,"A",{href:!0});var nut=s(bz);Zsr=r(nut,"TFTransfoXLModel"),nut.forEach(t),elr=r(Y9e," (Transformer-XL model)"),Y9e.forEach(t),olr=i(D),Z6=n(D,"LI",{});var K9e=s(Z6);U_e=n(K9e,"STRONG",{});var sut=s(U_e);rlr=r(sut,"vit"),sut.forEach(t),tlr=r(K9e," \u2014 "),vz=n(K9e,"A",{href:!0});var lut=s(vz);alr=r(lut,"TFViTModel"),lut.forEach(t),nlr=r(K9e," (ViT model)"),K9e.forEach(t),slr=i(D),eT=n(D,"LI",{});var Z9e=s(eT);J_e=n(Z9e,"STRONG",{});var iut=s(J_e);llr=r(iut,"vit_mae"),iut.forEach(t),ilr=r(Z9e," \u2014 "),Fz=n(Z9e,"A",{href:!0});var dut=s(Fz);dlr=r(dut,"TFViTMAEModel"),dut.forEach(t),clr=r(Z9e," (ViTMAE model)"),Z9e.forEach(t),flr=i(D),oT=n(D,"LI",{});var e$e=s(oT);Y_e=n(e$e,"STRONG",{});var cut=s(Y_e);mlr=r(cut,"wav2vec2"),cut.forEach(t),glr=r(e$e," \u2014 "),Tz=n(e$e,"A",{href:!0});var fut=s(Tz);hlr=r(fut,"TFWav2Vec2Model"),fut.forEach(t),plr=r(e$e," (Wav2Vec2 model)"),e$e.forEach(t),ulr=i(D),rT=n(D,"LI",{});var o$e=s(rT);K_e=n(o$e,"STRONG",{});var mut=s(K_e);_lr=r(mut,"xlm"),mut.forEach(t),blr=r(o$e," \u2014 "),Mz=n(o$e,"A",{href:!0});var gut=s(Mz);vlr=r(gut,"TFXLMModel"),gut.forEach(t),Flr=r(o$e," (XLM model)"),o$e.forEach(t),Tlr=i(D),tT=n(D,"LI",{});var r$e=s(tT);Z_e=n(r$e,"STRONG",{});var hut=s(Z_e);Mlr=r(hut,"xlm-roberta"),hut.forEach(t),Elr=r(r$e," \u2014 "),Ez=n(r$e,"A",{href:!0});var put=s(Ez);Clr=r(put,"TFXLMRobertaModel"),put.forEach(t),wlr=r(r$e," (XLM-RoBERTa model)"),r$e.forEach(t),Alr=i(D),aT=n(D,"LI",{});var t$e=s(aT);e0e=n(t$e,"STRONG",{});var uut=s(e0e);ylr=r(uut,"xlnet"),uut.forEach(t),Llr=r(t$e," \u2014 "),Cz=n(t$e,"A",{href:!0});var _ut=s(Cz);xlr=r(_ut,"TFXLNetModel"),_ut.forEach(t),$lr=r(t$e," (XLNet model)"),t$e.forEach(t),D.forEach(t),klr=i(ll),T(nT.$$.fragment,ll),ll.forEach(t),sl.forEach(t),eIe=i(f),Pd=n(f,"H2",{class:!0});var aNe=s(Pd);sT=n(aNe,"A",{id:!0,class:!0,href:!0});var but=s(sT);o0e=n(but,"SPAN",{});var vut=s(o0e);T(bL.$$.fragment,vut),vut.forEach(t),but.forEach(t),Slr=i(aNe),r0e=n(aNe,"SPAN",{});var Fut=s(r0e);Rlr=r(Fut,"TFAutoModelForPreTraining"),Fut.forEach(t),aNe.forEach(t),oIe=i(f),Ko=n(f,"DIV",{class:!0});var il=s(Ko);T(vL.$$.fragment,il),Blr=i(il),Id=n(il,"P",{});var LK=s(Id);Plr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wz=n(LK,"A",{href:!0});var Tut=s(wz);Ilr=r(Tut,"from_pretrained()"),Tut.forEach(t),qlr=r(LK," class method or the "),Az=n(LK,"A",{href:!0});var Mut=s(Az);Nlr=r(Mut,"from_config()"),Mut.forEach(t),jlr=r(LK,` class
method.`),LK.forEach(t),Dlr=i(il),FL=n(il,"P",{});var nNe=s(FL);Glr=r(nNe,"This class cannot be instantiated directly using "),t0e=n(nNe,"CODE",{});var Eut=s(t0e);Olr=r(Eut,"__init__()"),Eut.forEach(t),Vlr=r(nNe," (throws an error)."),nNe.forEach(t),Xlr=i(il),Ct=n(il,"DIV",{class:!0});var B3=s(Ct);T(TL.$$.fragment,B3),zlr=i(B3),a0e=n(B3,"P",{});var Cut=s(a0e);Qlr=r(Cut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cut.forEach(t),Wlr=i(B3),qd=n(B3,"P",{});var xK=s(qd);Hlr=r(xK,`Note:
Loading a model from its configuration file does `),n0e=n(xK,"STRONG",{});var wut=s(n0e);Ulr=r(wut,"not"),wut.forEach(t),Jlr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(xK,"A",{href:!0});var Aut=s(yz);Ylr=r(Aut,"from_pretrained()"),Aut.forEach(t),Klr=r(xK," to load the model weights."),xK.forEach(t),Zlr=i(B3),T(lT.$$.fragment,B3),B3.forEach(t),eir=i(il),wr=n(il,"DIV",{class:!0});var dl=s(wr);T(ML.$$.fragment,dl),oir=i(dl),s0e=n(dl,"P",{});var yut=s(s0e);rir=r(yut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yut.forEach(t),tir=i(dl),Ja=n(dl,"P",{});var P3=s(Ja);air=r(P3,"The model class to instantiate is selected based on the "),l0e=n(P3,"CODE",{});var Lut=s(l0e);nir=r(Lut,"model_type"),Lut.forEach(t),sir=r(P3,` property of the config object (either
passed as an argument or loaded from `),i0e=n(P3,"CODE",{});var xut=s(i0e);lir=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),iir=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=n(P3,"CODE",{});var $ut=s(d0e);dir=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),cir=r(P3,":"),P3.forEach(t),fir=i(dl),se=n(dl,"UL",{});var le=s(se);iT=n(le,"LI",{});var a$e=s(iT);c0e=n(a$e,"STRONG",{});var kut=s(c0e);mir=r(kut,"albert"),kut.forEach(t),gir=r(a$e," \u2014 "),Lz=n(a$e,"A",{href:!0});var Sut=s(Lz);hir=r(Sut,"TFAlbertForPreTraining"),Sut.forEach(t),pir=r(a$e," (ALBERT model)"),a$e.forEach(t),uir=i(le),dT=n(le,"LI",{});var n$e=s(dT);f0e=n(n$e,"STRONG",{});var Rut=s(f0e);_ir=r(Rut,"bart"),Rut.forEach(t),bir=r(n$e," \u2014 "),xz=n(n$e,"A",{href:!0});var But=s(xz);vir=r(But,"TFBartForConditionalGeneration"),But.forEach(t),Fir=r(n$e," (BART model)"),n$e.forEach(t),Tir=i(le),cT=n(le,"LI",{});var s$e=s(cT);m0e=n(s$e,"STRONG",{});var Put=s(m0e);Mir=r(Put,"bert"),Put.forEach(t),Eir=r(s$e," \u2014 "),$z=n(s$e,"A",{href:!0});var Iut=s($z);Cir=r(Iut,"TFBertForPreTraining"),Iut.forEach(t),wir=r(s$e," (BERT model)"),s$e.forEach(t),Air=i(le),fT=n(le,"LI",{});var l$e=s(fT);g0e=n(l$e,"STRONG",{});var qut=s(g0e);yir=r(qut,"camembert"),qut.forEach(t),Lir=r(l$e," \u2014 "),kz=n(l$e,"A",{href:!0});var Nut=s(kz);xir=r(Nut,"TFCamembertForMaskedLM"),Nut.forEach(t),$ir=r(l$e," (CamemBERT model)"),l$e.forEach(t),kir=i(le),mT=n(le,"LI",{});var i$e=s(mT);h0e=n(i$e,"STRONG",{});var jut=s(h0e);Sir=r(jut,"ctrl"),jut.forEach(t),Rir=r(i$e," \u2014 "),Sz=n(i$e,"A",{href:!0});var Dut=s(Sz);Bir=r(Dut,"TFCTRLLMHeadModel"),Dut.forEach(t),Pir=r(i$e," (CTRL model)"),i$e.forEach(t),Iir=i(le),gT=n(le,"LI",{});var d$e=s(gT);p0e=n(d$e,"STRONG",{});var Gut=s(p0e);qir=r(Gut,"distilbert"),Gut.forEach(t),Nir=r(d$e," \u2014 "),Rz=n(d$e,"A",{href:!0});var Out=s(Rz);jir=r(Out,"TFDistilBertForMaskedLM"),Out.forEach(t),Dir=r(d$e," (DistilBERT model)"),d$e.forEach(t),Gir=i(le),hT=n(le,"LI",{});var c$e=s(hT);u0e=n(c$e,"STRONG",{});var Vut=s(u0e);Oir=r(Vut,"electra"),Vut.forEach(t),Vir=r(c$e," \u2014 "),Bz=n(c$e,"A",{href:!0});var Xut=s(Bz);Xir=r(Xut,"TFElectraForPreTraining"),Xut.forEach(t),zir=r(c$e," (ELECTRA model)"),c$e.forEach(t),Qir=i(le),pT=n(le,"LI",{});var f$e=s(pT);_0e=n(f$e,"STRONG",{});var zut=s(_0e);Wir=r(zut,"flaubert"),zut.forEach(t),Hir=r(f$e," \u2014 "),Pz=n(f$e,"A",{href:!0});var Qut=s(Pz);Uir=r(Qut,"TFFlaubertWithLMHeadModel"),Qut.forEach(t),Jir=r(f$e," (FlauBERT model)"),f$e.forEach(t),Yir=i(le),uT=n(le,"LI",{});var m$e=s(uT);b0e=n(m$e,"STRONG",{});var Wut=s(b0e);Kir=r(Wut,"funnel"),Wut.forEach(t),Zir=r(m$e," \u2014 "),Iz=n(m$e,"A",{href:!0});var Hut=s(Iz);edr=r(Hut,"TFFunnelForPreTraining"),Hut.forEach(t),odr=r(m$e," (Funnel Transformer model)"),m$e.forEach(t),rdr=i(le),_T=n(le,"LI",{});var g$e=s(_T);v0e=n(g$e,"STRONG",{});var Uut=s(v0e);tdr=r(Uut,"gpt2"),Uut.forEach(t),adr=r(g$e," \u2014 "),qz=n(g$e,"A",{href:!0});var Jut=s(qz);ndr=r(Jut,"TFGPT2LMHeadModel"),Jut.forEach(t),sdr=r(g$e," (OpenAI GPT-2 model)"),g$e.forEach(t),ldr=i(le),bT=n(le,"LI",{});var h$e=s(bT);F0e=n(h$e,"STRONG",{});var Yut=s(F0e);idr=r(Yut,"layoutlm"),Yut.forEach(t),ddr=r(h$e," \u2014 "),Nz=n(h$e,"A",{href:!0});var Kut=s(Nz);cdr=r(Kut,"TFLayoutLMForMaskedLM"),Kut.forEach(t),fdr=r(h$e," (LayoutLM model)"),h$e.forEach(t),mdr=i(le),vT=n(le,"LI",{});var p$e=s(vT);T0e=n(p$e,"STRONG",{});var Zut=s(T0e);gdr=r(Zut,"lxmert"),Zut.forEach(t),hdr=r(p$e," \u2014 "),jz=n(p$e,"A",{href:!0});var e_t=s(jz);pdr=r(e_t,"TFLxmertForPreTraining"),e_t.forEach(t),udr=r(p$e," (LXMERT model)"),p$e.forEach(t),_dr=i(le),FT=n(le,"LI",{});var u$e=s(FT);M0e=n(u$e,"STRONG",{});var o_t=s(M0e);bdr=r(o_t,"mobilebert"),o_t.forEach(t),vdr=r(u$e," \u2014 "),Dz=n(u$e,"A",{href:!0});var r_t=s(Dz);Fdr=r(r_t,"TFMobileBertForPreTraining"),r_t.forEach(t),Tdr=r(u$e," (MobileBERT model)"),u$e.forEach(t),Mdr=i(le),TT=n(le,"LI",{});var _$e=s(TT);E0e=n(_$e,"STRONG",{});var t_t=s(E0e);Edr=r(t_t,"mpnet"),t_t.forEach(t),Cdr=r(_$e," \u2014 "),Gz=n(_$e,"A",{href:!0});var a_t=s(Gz);wdr=r(a_t,"TFMPNetForMaskedLM"),a_t.forEach(t),Adr=r(_$e," (MPNet model)"),_$e.forEach(t),ydr=i(le),MT=n(le,"LI",{});var b$e=s(MT);C0e=n(b$e,"STRONG",{});var n_t=s(C0e);Ldr=r(n_t,"openai-gpt"),n_t.forEach(t),xdr=r(b$e," \u2014 "),Oz=n(b$e,"A",{href:!0});var s_t=s(Oz);$dr=r(s_t,"TFOpenAIGPTLMHeadModel"),s_t.forEach(t),kdr=r(b$e," (OpenAI GPT model)"),b$e.forEach(t),Sdr=i(le),ET=n(le,"LI",{});var v$e=s(ET);w0e=n(v$e,"STRONG",{});var l_t=s(w0e);Rdr=r(l_t,"roberta"),l_t.forEach(t),Bdr=r(v$e," \u2014 "),Vz=n(v$e,"A",{href:!0});var i_t=s(Vz);Pdr=r(i_t,"TFRobertaForMaskedLM"),i_t.forEach(t),Idr=r(v$e," (RoBERTa model)"),v$e.forEach(t),qdr=i(le),CT=n(le,"LI",{});var F$e=s(CT);A0e=n(F$e,"STRONG",{});var d_t=s(A0e);Ndr=r(d_t,"t5"),d_t.forEach(t),jdr=r(F$e," \u2014 "),Xz=n(F$e,"A",{href:!0});var c_t=s(Xz);Ddr=r(c_t,"TFT5ForConditionalGeneration"),c_t.forEach(t),Gdr=r(F$e," (T5 model)"),F$e.forEach(t),Odr=i(le),wT=n(le,"LI",{});var T$e=s(wT);y0e=n(T$e,"STRONG",{});var f_t=s(y0e);Vdr=r(f_t,"tapas"),f_t.forEach(t),Xdr=r(T$e," \u2014 "),zz=n(T$e,"A",{href:!0});var m_t=s(zz);zdr=r(m_t,"TFTapasForMaskedLM"),m_t.forEach(t),Qdr=r(T$e," (TAPAS model)"),T$e.forEach(t),Wdr=i(le),AT=n(le,"LI",{});var M$e=s(AT);L0e=n(M$e,"STRONG",{});var g_t=s(L0e);Hdr=r(g_t,"transfo-xl"),g_t.forEach(t),Udr=r(M$e," \u2014 "),Qz=n(M$e,"A",{href:!0});var h_t=s(Qz);Jdr=r(h_t,"TFTransfoXLLMHeadModel"),h_t.forEach(t),Ydr=r(M$e," (Transformer-XL model)"),M$e.forEach(t),Kdr=i(le),yT=n(le,"LI",{});var E$e=s(yT);x0e=n(E$e,"STRONG",{});var p_t=s(x0e);Zdr=r(p_t,"vit_mae"),p_t.forEach(t),ecr=r(E$e," \u2014 "),Wz=n(E$e,"A",{href:!0});var u_t=s(Wz);ocr=r(u_t,"TFViTMAEForPreTraining"),u_t.forEach(t),rcr=r(E$e," (ViTMAE model)"),E$e.forEach(t),tcr=i(le),LT=n(le,"LI",{});var C$e=s(LT);$0e=n(C$e,"STRONG",{});var __t=s($0e);acr=r(__t,"xlm"),__t.forEach(t),ncr=r(C$e," \u2014 "),Hz=n(C$e,"A",{href:!0});var b_t=s(Hz);scr=r(b_t,"TFXLMWithLMHeadModel"),b_t.forEach(t),lcr=r(C$e," (XLM model)"),C$e.forEach(t),icr=i(le),xT=n(le,"LI",{});var w$e=s(xT);k0e=n(w$e,"STRONG",{});var v_t=s(k0e);dcr=r(v_t,"xlm-roberta"),v_t.forEach(t),ccr=r(w$e," \u2014 "),Uz=n(w$e,"A",{href:!0});var F_t=s(Uz);fcr=r(F_t,"TFXLMRobertaForMaskedLM"),F_t.forEach(t),mcr=r(w$e," (XLM-RoBERTa model)"),w$e.forEach(t),gcr=i(le),$T=n(le,"LI",{});var A$e=s($T);S0e=n(A$e,"STRONG",{});var T_t=s(S0e);hcr=r(T_t,"xlnet"),T_t.forEach(t),pcr=r(A$e," \u2014 "),Jz=n(A$e,"A",{href:!0});var M_t=s(Jz);ucr=r(M_t,"TFXLNetLMHeadModel"),M_t.forEach(t),_cr=r(A$e," (XLNet model)"),A$e.forEach(t),le.forEach(t),bcr=i(dl),T(kT.$$.fragment,dl),dl.forEach(t),il.forEach(t),rIe=i(f),Nd=n(f,"H2",{class:!0});var sNe=s(Nd);ST=n(sNe,"A",{id:!0,class:!0,href:!0});var E_t=s(ST);R0e=n(E_t,"SPAN",{});var C_t=s(R0e);T(EL.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),vcr=i(sNe),B0e=n(sNe,"SPAN",{});var w_t=s(B0e);Fcr=r(w_t,"TFAutoModelForCausalLM"),w_t.forEach(t),sNe.forEach(t),tIe=i(f),Zo=n(f,"DIV",{class:!0});var cl=s(Zo);T(CL.$$.fragment,cl),Tcr=i(cl),jd=n(cl,"P",{});var $K=s(jd);Mcr=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Yz=n($K,"A",{href:!0});var A_t=s(Yz);Ecr=r(A_t,"from_pretrained()"),A_t.forEach(t),Ccr=r($K," class method or the "),Kz=n($K,"A",{href:!0});var y_t=s(Kz);wcr=r(y_t,"from_config()"),y_t.forEach(t),Acr=r($K,` class
method.`),$K.forEach(t),ycr=i(cl),wL=n(cl,"P",{});var lNe=s(wL);Lcr=r(lNe,"This class cannot be instantiated directly using "),P0e=n(lNe,"CODE",{});var L_t=s(P0e);xcr=r(L_t,"__init__()"),L_t.forEach(t),$cr=r(lNe," (throws an error)."),lNe.forEach(t),kcr=i(cl),wt=n(cl,"DIV",{class:!0});var I3=s(wt);T(AL.$$.fragment,I3),Scr=i(I3),I0e=n(I3,"P",{});var x_t=s(I0e);Rcr=r(x_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x_t.forEach(t),Bcr=i(I3),Dd=n(I3,"P",{});var kK=s(Dd);Pcr=r(kK,`Note:
Loading a model from its configuration file does `),q0e=n(kK,"STRONG",{});var $_t=s(q0e);Icr=r($_t,"not"),$_t.forEach(t),qcr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(kK,"A",{href:!0});var k_t=s(Zz);Ncr=r(k_t,"from_pretrained()"),k_t.forEach(t),jcr=r(kK," to load the model weights."),kK.forEach(t),Dcr=i(I3),T(RT.$$.fragment,I3),I3.forEach(t),Gcr=i(cl),Ar=n(cl,"DIV",{class:!0});var fl=s(Ar);T(yL.$$.fragment,fl),Ocr=i(fl),N0e=n(fl,"P",{});var S_t=s(N0e);Vcr=r(S_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),S_t.forEach(t),Xcr=i(fl),Ya=n(fl,"P",{});var q3=s(Ya);zcr=r(q3,"The model class to instantiate is selected based on the "),j0e=n(q3,"CODE",{});var R_t=s(j0e);Qcr=r(R_t,"model_type"),R_t.forEach(t),Wcr=r(q3,` property of the config object (either
passed as an argument or loaded from `),D0e=n(q3,"CODE",{});var B_t=s(D0e);Hcr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),Ucr=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n(q3,"CODE",{});var P_t=s(G0e);Jcr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),Ycr=r(q3,":"),q3.forEach(t),Kcr=i(fl),Te=n(fl,"UL",{});var Ce=s(Te);BT=n(Ce,"LI",{});var y$e=s(BT);O0e=n(y$e,"STRONG",{});var I_t=s(O0e);Zcr=r(I_t,"bert"),I_t.forEach(t),efr=r(y$e," \u2014 "),eQ=n(y$e,"A",{href:!0});var q_t=s(eQ);ofr=r(q_t,"TFBertLMHeadModel"),q_t.forEach(t),rfr=r(y$e," (BERT model)"),y$e.forEach(t),tfr=i(Ce),PT=n(Ce,"LI",{});var L$e=s(PT);V0e=n(L$e,"STRONG",{});var N_t=s(V0e);afr=r(N_t,"camembert"),N_t.forEach(t),nfr=r(L$e," \u2014 "),oQ=n(L$e,"A",{href:!0});var j_t=s(oQ);sfr=r(j_t,"TFCamembertForCausalLM"),j_t.forEach(t),lfr=r(L$e," (CamemBERT model)"),L$e.forEach(t),ifr=i(Ce),IT=n(Ce,"LI",{});var x$e=s(IT);X0e=n(x$e,"STRONG",{});var D_t=s(X0e);dfr=r(D_t,"ctrl"),D_t.forEach(t),cfr=r(x$e," \u2014 "),rQ=n(x$e,"A",{href:!0});var G_t=s(rQ);ffr=r(G_t,"TFCTRLLMHeadModel"),G_t.forEach(t),mfr=r(x$e," (CTRL model)"),x$e.forEach(t),gfr=i(Ce),qT=n(Ce,"LI",{});var $$e=s(qT);z0e=n($$e,"STRONG",{});var O_t=s(z0e);hfr=r(O_t,"gpt2"),O_t.forEach(t),pfr=r($$e," \u2014 "),tQ=n($$e,"A",{href:!0});var V_t=s(tQ);ufr=r(V_t,"TFGPT2LMHeadModel"),V_t.forEach(t),_fr=r($$e," (OpenAI GPT-2 model)"),$$e.forEach(t),bfr=i(Ce),NT=n(Ce,"LI",{});var k$e=s(NT);Q0e=n(k$e,"STRONG",{});var X_t=s(Q0e);vfr=r(X_t,"gptj"),X_t.forEach(t),Ffr=r(k$e," \u2014 "),aQ=n(k$e,"A",{href:!0});var z_t=s(aQ);Tfr=r(z_t,"TFGPTJForCausalLM"),z_t.forEach(t),Mfr=r(k$e," (GPT-J model)"),k$e.forEach(t),Efr=i(Ce),jT=n(Ce,"LI",{});var S$e=s(jT);W0e=n(S$e,"STRONG",{});var Q_t=s(W0e);Cfr=r(Q_t,"openai-gpt"),Q_t.forEach(t),wfr=r(S$e," \u2014 "),nQ=n(S$e,"A",{href:!0});var W_t=s(nQ);Afr=r(W_t,"TFOpenAIGPTLMHeadModel"),W_t.forEach(t),yfr=r(S$e," (OpenAI GPT model)"),S$e.forEach(t),Lfr=i(Ce),DT=n(Ce,"LI",{});var R$e=s(DT);H0e=n(R$e,"STRONG",{});var H_t=s(H0e);xfr=r(H_t,"rembert"),H_t.forEach(t),$fr=r(R$e," \u2014 "),sQ=n(R$e,"A",{href:!0});var U_t=s(sQ);kfr=r(U_t,"TFRemBertForCausalLM"),U_t.forEach(t),Sfr=r(R$e," (RemBERT model)"),R$e.forEach(t),Rfr=i(Ce),GT=n(Ce,"LI",{});var B$e=s(GT);U0e=n(B$e,"STRONG",{});var J_t=s(U0e);Bfr=r(J_t,"roberta"),J_t.forEach(t),Pfr=r(B$e," \u2014 "),lQ=n(B$e,"A",{href:!0});var Y_t=s(lQ);Ifr=r(Y_t,"TFRobertaForCausalLM"),Y_t.forEach(t),qfr=r(B$e," (RoBERTa model)"),B$e.forEach(t),Nfr=i(Ce),OT=n(Ce,"LI",{});var P$e=s(OT);J0e=n(P$e,"STRONG",{});var K_t=s(J0e);jfr=r(K_t,"roformer"),K_t.forEach(t),Dfr=r(P$e," \u2014 "),iQ=n(P$e,"A",{href:!0});var Z_t=s(iQ);Gfr=r(Z_t,"TFRoFormerForCausalLM"),Z_t.forEach(t),Ofr=r(P$e," (RoFormer model)"),P$e.forEach(t),Vfr=i(Ce),VT=n(Ce,"LI",{});var I$e=s(VT);Y0e=n(I$e,"STRONG",{});var e0t=s(Y0e);Xfr=r(e0t,"transfo-xl"),e0t.forEach(t),zfr=r(I$e," \u2014 "),dQ=n(I$e,"A",{href:!0});var o0t=s(dQ);Qfr=r(o0t,"TFTransfoXLLMHeadModel"),o0t.forEach(t),Wfr=r(I$e," (Transformer-XL model)"),I$e.forEach(t),Hfr=i(Ce),XT=n(Ce,"LI",{});var q$e=s(XT);K0e=n(q$e,"STRONG",{});var r0t=s(K0e);Ufr=r(r0t,"xlm"),r0t.forEach(t),Jfr=r(q$e," \u2014 "),cQ=n(q$e,"A",{href:!0});var t0t=s(cQ);Yfr=r(t0t,"TFXLMWithLMHeadModel"),t0t.forEach(t),Kfr=r(q$e," (XLM model)"),q$e.forEach(t),Zfr=i(Ce),zT=n(Ce,"LI",{});var N$e=s(zT);Z0e=n(N$e,"STRONG",{});var a0t=s(Z0e);emr=r(a0t,"xlnet"),a0t.forEach(t),omr=r(N$e," \u2014 "),fQ=n(N$e,"A",{href:!0});var n0t=s(fQ);rmr=r(n0t,"TFXLNetLMHeadModel"),n0t.forEach(t),tmr=r(N$e," (XLNet model)"),N$e.forEach(t),Ce.forEach(t),amr=i(fl),T(QT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),aIe=i(f),Gd=n(f,"H2",{class:!0});var iNe=s(Gd);WT=n(iNe,"A",{id:!0,class:!0,href:!0});var s0t=s(WT);e1e=n(s0t,"SPAN",{});var l0t=s(e1e);T(LL.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),nmr=i(iNe),o1e=n(iNe,"SPAN",{});var i0t=s(o1e);smr=r(i0t,"TFAutoModelForImageClassification"),i0t.forEach(t),iNe.forEach(t),nIe=i(f),er=n(f,"DIV",{class:!0});var ml=s(er);T(xL.$$.fragment,ml),lmr=i(ml),Od=n(ml,"P",{});var SK=s(Od);imr=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mQ=n(SK,"A",{href:!0});var d0t=s(mQ);dmr=r(d0t,"from_pretrained()"),d0t.forEach(t),cmr=r(SK," class method or the "),gQ=n(SK,"A",{href:!0});var c0t=s(gQ);fmr=r(c0t,"from_config()"),c0t.forEach(t),mmr=r(SK,` class
method.`),SK.forEach(t),gmr=i(ml),$L=n(ml,"P",{});var dNe=s($L);hmr=r(dNe,"This class cannot be instantiated directly using "),r1e=n(dNe,"CODE",{});var f0t=s(r1e);pmr=r(f0t,"__init__()"),f0t.forEach(t),umr=r(dNe," (throws an error)."),dNe.forEach(t),_mr=i(ml),At=n(ml,"DIV",{class:!0});var N3=s(At);T(kL.$$.fragment,N3),bmr=i(N3),t1e=n(N3,"P",{});var m0t=s(t1e);vmr=r(m0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m0t.forEach(t),Fmr=i(N3),Vd=n(N3,"P",{});var RK=s(Vd);Tmr=r(RK,`Note:
Loading a model from its configuration file does `),a1e=n(RK,"STRONG",{});var g0t=s(a1e);Mmr=r(g0t,"not"),g0t.forEach(t),Emr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=n(RK,"A",{href:!0});var h0t=s(hQ);Cmr=r(h0t,"from_pretrained()"),h0t.forEach(t),wmr=r(RK," to load the model weights."),RK.forEach(t),Amr=i(N3),T(HT.$$.fragment,N3),N3.forEach(t),ymr=i(ml),yr=n(ml,"DIV",{class:!0});var gl=s(yr);T(SL.$$.fragment,gl),Lmr=i(gl),n1e=n(gl,"P",{});var p0t=s(n1e);xmr=r(p0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p0t.forEach(t),$mr=i(gl),Ka=n(gl,"P",{});var j3=s(Ka);kmr=r(j3,"The model class to instantiate is selected based on the "),s1e=n(j3,"CODE",{});var u0t=s(s1e);Smr=r(u0t,"model_type"),u0t.forEach(t),Rmr=r(j3,` property of the config object (either
passed as an argument or loaded from `),l1e=n(j3,"CODE",{});var _0t=s(l1e);Bmr=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),Pmr=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(j3,"CODE",{});var b0t=s(i1e);Imr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),qmr=r(j3,":"),j3.forEach(t),Nmr=i(gl),Xd=n(gl,"UL",{});var BK=s(Xd);UT=n(BK,"LI",{});var j$e=s(UT);d1e=n(j$e,"STRONG",{});var v0t=s(d1e);jmr=r(v0t,"convnext"),v0t.forEach(t),Dmr=r(j$e," \u2014 "),pQ=n(j$e,"A",{href:!0});var F0t=s(pQ);Gmr=r(F0t,"TFConvNextForImageClassification"),F0t.forEach(t),Omr=r(j$e," (ConvNext model)"),j$e.forEach(t),Vmr=i(BK),JT=n(BK,"LI",{});var D$e=s(JT);c1e=n(D$e,"STRONG",{});var T0t=s(c1e);Xmr=r(T0t,"data2vec-vision"),T0t.forEach(t),zmr=r(D$e," \u2014 "),uQ=n(D$e,"A",{href:!0});var M0t=s(uQ);Qmr=r(M0t,"TFData2VecVisionForImageClassification"),M0t.forEach(t),Wmr=r(D$e," (Data2VecVision model)"),D$e.forEach(t),Hmr=i(BK),YT=n(BK,"LI",{});var G$e=s(YT);f1e=n(G$e,"STRONG",{});var E0t=s(f1e);Umr=r(E0t,"vit"),E0t.forEach(t),Jmr=r(G$e," \u2014 "),_Q=n(G$e,"A",{href:!0});var C0t=s(_Q);Ymr=r(C0t,"TFViTForImageClassification"),C0t.forEach(t),Kmr=r(G$e," (ViT model)"),G$e.forEach(t),BK.forEach(t),Zmr=i(gl),T(KT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),sIe=i(f),zd=n(f,"H2",{class:!0});var cNe=s(zd);ZT=n(cNe,"A",{id:!0,class:!0,href:!0});var w0t=s(ZT);m1e=n(w0t,"SPAN",{});var A0t=s(m1e);T(RL.$$.fragment,A0t),A0t.forEach(t),w0t.forEach(t),egr=i(cNe),g1e=n(cNe,"SPAN",{});var y0t=s(g1e);ogr=r(y0t,"TFAutoModelForMaskedLM"),y0t.forEach(t),cNe.forEach(t),lIe=i(f),or=n(f,"DIV",{class:!0});var hl=s(or);T(BL.$$.fragment,hl),rgr=i(hl),Qd=n(hl,"P",{});var PK=s(Qd);tgr=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bQ=n(PK,"A",{href:!0});var L0t=s(bQ);agr=r(L0t,"from_pretrained()"),L0t.forEach(t),ngr=r(PK," class method or the "),vQ=n(PK,"A",{href:!0});var x0t=s(vQ);sgr=r(x0t,"from_config()"),x0t.forEach(t),lgr=r(PK,` class
method.`),PK.forEach(t),igr=i(hl),PL=n(hl,"P",{});var fNe=s(PL);dgr=r(fNe,"This class cannot be instantiated directly using "),h1e=n(fNe,"CODE",{});var $0t=s(h1e);cgr=r($0t,"__init__()"),$0t.forEach(t),fgr=r(fNe," (throws an error)."),fNe.forEach(t),mgr=i(hl),yt=n(hl,"DIV",{class:!0});var D3=s(yt);T(IL.$$.fragment,D3),ggr=i(D3),p1e=n(D3,"P",{});var k0t=s(p1e);hgr=r(k0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),k0t.forEach(t),pgr=i(D3),Wd=n(D3,"P",{});var IK=s(Wd);ugr=r(IK,`Note:
Loading a model from its configuration file does `),u1e=n(IK,"STRONG",{});var S0t=s(u1e);_gr=r(S0t,"not"),S0t.forEach(t),bgr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(IK,"A",{href:!0});var R0t=s(FQ);vgr=r(R0t,"from_pretrained()"),R0t.forEach(t),Fgr=r(IK," to load the model weights."),IK.forEach(t),Tgr=i(D3),T(e7.$$.fragment,D3),D3.forEach(t),Mgr=i(hl),Lr=n(hl,"DIV",{class:!0});var pl=s(Lr);T(qL.$$.fragment,pl),Egr=i(pl),_1e=n(pl,"P",{});var B0t=s(_1e);Cgr=r(B0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B0t.forEach(t),wgr=i(pl),Za=n(pl,"P",{});var G3=s(Za);Agr=r(G3,"The model class to instantiate is selected based on the "),b1e=n(G3,"CODE",{});var P0t=s(b1e);ygr=r(P0t,"model_type"),P0t.forEach(t),Lgr=r(G3,` property of the config object (either
passed as an argument or loaded from `),v1e=n(G3,"CODE",{});var I0t=s(v1e);xgr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),$gr=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(G3,"CODE",{});var q0t=s(F1e);kgr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),Sgr=r(G3,":"),G3.forEach(t),Rgr=i(pl),ie=n(pl,"UL",{});var fe=s(ie);o7=n(fe,"LI",{});var O$e=s(o7);T1e=n(O$e,"STRONG",{});var N0t=s(T1e);Bgr=r(N0t,"albert"),N0t.forEach(t),Pgr=r(O$e," \u2014 "),TQ=n(O$e,"A",{href:!0});var j0t=s(TQ);Igr=r(j0t,"TFAlbertForMaskedLM"),j0t.forEach(t),qgr=r(O$e," (ALBERT model)"),O$e.forEach(t),Ngr=i(fe),r7=n(fe,"LI",{});var V$e=s(r7);M1e=n(V$e,"STRONG",{});var D0t=s(M1e);jgr=r(D0t,"bert"),D0t.forEach(t),Dgr=r(V$e," \u2014 "),MQ=n(V$e,"A",{href:!0});var G0t=s(MQ);Ggr=r(G0t,"TFBertForMaskedLM"),G0t.forEach(t),Ogr=r(V$e," (BERT model)"),V$e.forEach(t),Vgr=i(fe),t7=n(fe,"LI",{});var X$e=s(t7);E1e=n(X$e,"STRONG",{});var O0t=s(E1e);Xgr=r(O0t,"camembert"),O0t.forEach(t),zgr=r(X$e," \u2014 "),EQ=n(X$e,"A",{href:!0});var V0t=s(EQ);Qgr=r(V0t,"TFCamembertForMaskedLM"),V0t.forEach(t),Wgr=r(X$e," (CamemBERT model)"),X$e.forEach(t),Hgr=i(fe),a7=n(fe,"LI",{});var z$e=s(a7);C1e=n(z$e,"STRONG",{});var X0t=s(C1e);Ugr=r(X0t,"convbert"),X0t.forEach(t),Jgr=r(z$e," \u2014 "),CQ=n(z$e,"A",{href:!0});var z0t=s(CQ);Ygr=r(z0t,"TFConvBertForMaskedLM"),z0t.forEach(t),Kgr=r(z$e," (ConvBERT model)"),z$e.forEach(t),Zgr=i(fe),n7=n(fe,"LI",{});var Q$e=s(n7);w1e=n(Q$e,"STRONG",{});var Q0t=s(w1e);ehr=r(Q0t,"deberta"),Q0t.forEach(t),ohr=r(Q$e," \u2014 "),wQ=n(Q$e,"A",{href:!0});var W0t=s(wQ);rhr=r(W0t,"TFDebertaForMaskedLM"),W0t.forEach(t),thr=r(Q$e," (DeBERTa model)"),Q$e.forEach(t),ahr=i(fe),s7=n(fe,"LI",{});var W$e=s(s7);A1e=n(W$e,"STRONG",{});var H0t=s(A1e);nhr=r(H0t,"deberta-v2"),H0t.forEach(t),shr=r(W$e," \u2014 "),AQ=n(W$e,"A",{href:!0});var U0t=s(AQ);lhr=r(U0t,"TFDebertaV2ForMaskedLM"),U0t.forEach(t),ihr=r(W$e," (DeBERTa-v2 model)"),W$e.forEach(t),dhr=i(fe),l7=n(fe,"LI",{});var H$e=s(l7);y1e=n(H$e,"STRONG",{});var J0t=s(y1e);chr=r(J0t,"distilbert"),J0t.forEach(t),fhr=r(H$e," \u2014 "),yQ=n(H$e,"A",{href:!0});var Y0t=s(yQ);mhr=r(Y0t,"TFDistilBertForMaskedLM"),Y0t.forEach(t),ghr=r(H$e," (DistilBERT model)"),H$e.forEach(t),hhr=i(fe),i7=n(fe,"LI",{});var U$e=s(i7);L1e=n(U$e,"STRONG",{});var K0t=s(L1e);phr=r(K0t,"electra"),K0t.forEach(t),uhr=r(U$e," \u2014 "),LQ=n(U$e,"A",{href:!0});var Z0t=s(LQ);_hr=r(Z0t,"TFElectraForMaskedLM"),Z0t.forEach(t),bhr=r(U$e," (ELECTRA model)"),U$e.forEach(t),vhr=i(fe),d7=n(fe,"LI",{});var J$e=s(d7);x1e=n(J$e,"STRONG",{});var e1t=s(x1e);Fhr=r(e1t,"flaubert"),e1t.forEach(t),Thr=r(J$e," \u2014 "),xQ=n(J$e,"A",{href:!0});var o1t=s(xQ);Mhr=r(o1t,"TFFlaubertWithLMHeadModel"),o1t.forEach(t),Ehr=r(J$e," (FlauBERT model)"),J$e.forEach(t),Chr=i(fe),c7=n(fe,"LI",{});var Y$e=s(c7);$1e=n(Y$e,"STRONG",{});var r1t=s($1e);whr=r(r1t,"funnel"),r1t.forEach(t),Ahr=r(Y$e," \u2014 "),$Q=n(Y$e,"A",{href:!0});var t1t=s($Q);yhr=r(t1t,"TFFunnelForMaskedLM"),t1t.forEach(t),Lhr=r(Y$e," (Funnel Transformer model)"),Y$e.forEach(t),xhr=i(fe),f7=n(fe,"LI",{});var K$e=s(f7);k1e=n(K$e,"STRONG",{});var a1t=s(k1e);$hr=r(a1t,"layoutlm"),a1t.forEach(t),khr=r(K$e," \u2014 "),kQ=n(K$e,"A",{href:!0});var n1t=s(kQ);Shr=r(n1t,"TFLayoutLMForMaskedLM"),n1t.forEach(t),Rhr=r(K$e," (LayoutLM model)"),K$e.forEach(t),Bhr=i(fe),m7=n(fe,"LI",{});var Z$e=s(m7);S1e=n(Z$e,"STRONG",{});var s1t=s(S1e);Phr=r(s1t,"longformer"),s1t.forEach(t),Ihr=r(Z$e," \u2014 "),SQ=n(Z$e,"A",{href:!0});var l1t=s(SQ);qhr=r(l1t,"TFLongformerForMaskedLM"),l1t.forEach(t),Nhr=r(Z$e," (Longformer model)"),Z$e.forEach(t),jhr=i(fe),g7=n(fe,"LI",{});var eke=s(g7);R1e=n(eke,"STRONG",{});var i1t=s(R1e);Dhr=r(i1t,"mobilebert"),i1t.forEach(t),Ghr=r(eke," \u2014 "),RQ=n(eke,"A",{href:!0});var d1t=s(RQ);Ohr=r(d1t,"TFMobileBertForMaskedLM"),d1t.forEach(t),Vhr=r(eke," (MobileBERT model)"),eke.forEach(t),Xhr=i(fe),h7=n(fe,"LI",{});var oke=s(h7);B1e=n(oke,"STRONG",{});var c1t=s(B1e);zhr=r(c1t,"mpnet"),c1t.forEach(t),Qhr=r(oke," \u2014 "),BQ=n(oke,"A",{href:!0});var f1t=s(BQ);Whr=r(f1t,"TFMPNetForMaskedLM"),f1t.forEach(t),Hhr=r(oke," (MPNet model)"),oke.forEach(t),Uhr=i(fe),p7=n(fe,"LI",{});var rke=s(p7);P1e=n(rke,"STRONG",{});var m1t=s(P1e);Jhr=r(m1t,"rembert"),m1t.forEach(t),Yhr=r(rke," \u2014 "),PQ=n(rke,"A",{href:!0});var g1t=s(PQ);Khr=r(g1t,"TFRemBertForMaskedLM"),g1t.forEach(t),Zhr=r(rke," (RemBERT model)"),rke.forEach(t),epr=i(fe),u7=n(fe,"LI",{});var tke=s(u7);I1e=n(tke,"STRONG",{});var h1t=s(I1e);opr=r(h1t,"roberta"),h1t.forEach(t),rpr=r(tke," \u2014 "),IQ=n(tke,"A",{href:!0});var p1t=s(IQ);tpr=r(p1t,"TFRobertaForMaskedLM"),p1t.forEach(t),apr=r(tke," (RoBERTa model)"),tke.forEach(t),npr=i(fe),_7=n(fe,"LI",{});var ake=s(_7);q1e=n(ake,"STRONG",{});var u1t=s(q1e);spr=r(u1t,"roformer"),u1t.forEach(t),lpr=r(ake," \u2014 "),qQ=n(ake,"A",{href:!0});var _1t=s(qQ);ipr=r(_1t,"TFRoFormerForMaskedLM"),_1t.forEach(t),dpr=r(ake," (RoFormer model)"),ake.forEach(t),cpr=i(fe),b7=n(fe,"LI",{});var nke=s(b7);N1e=n(nke,"STRONG",{});var b1t=s(N1e);fpr=r(b1t,"tapas"),b1t.forEach(t),mpr=r(nke," \u2014 "),NQ=n(nke,"A",{href:!0});var v1t=s(NQ);gpr=r(v1t,"TFTapasForMaskedLM"),v1t.forEach(t),hpr=r(nke," (TAPAS model)"),nke.forEach(t),ppr=i(fe),v7=n(fe,"LI",{});var ske=s(v7);j1e=n(ske,"STRONG",{});var F1t=s(j1e);upr=r(F1t,"xlm"),F1t.forEach(t),_pr=r(ske," \u2014 "),jQ=n(ske,"A",{href:!0});var T1t=s(jQ);bpr=r(T1t,"TFXLMWithLMHeadModel"),T1t.forEach(t),vpr=r(ske," (XLM model)"),ske.forEach(t),Fpr=i(fe),F7=n(fe,"LI",{});var lke=s(F7);D1e=n(lke,"STRONG",{});var M1t=s(D1e);Tpr=r(M1t,"xlm-roberta"),M1t.forEach(t),Mpr=r(lke," \u2014 "),DQ=n(lke,"A",{href:!0});var E1t=s(DQ);Epr=r(E1t,"TFXLMRobertaForMaskedLM"),E1t.forEach(t),Cpr=r(lke," (XLM-RoBERTa model)"),lke.forEach(t),fe.forEach(t),wpr=i(pl),T(T7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),iIe=i(f),Hd=n(f,"H2",{class:!0});var mNe=s(Hd);M7=n(mNe,"A",{id:!0,class:!0,href:!0});var C1t=s(M7);G1e=n(C1t,"SPAN",{});var w1t=s(G1e);T(NL.$$.fragment,w1t),w1t.forEach(t),C1t.forEach(t),Apr=i(mNe),O1e=n(mNe,"SPAN",{});var A1t=s(O1e);ypr=r(A1t,"TFAutoModelForSeq2SeqLM"),A1t.forEach(t),mNe.forEach(t),dIe=i(f),rr=n(f,"DIV",{class:!0});var ul=s(rr);T(jL.$$.fragment,ul),Lpr=i(ul),Ud=n(ul,"P",{});var qK=s(Ud);xpr=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GQ=n(qK,"A",{href:!0});var y1t=s(GQ);$pr=r(y1t,"from_pretrained()"),y1t.forEach(t),kpr=r(qK," class method or the "),OQ=n(qK,"A",{href:!0});var L1t=s(OQ);Spr=r(L1t,"from_config()"),L1t.forEach(t),Rpr=r(qK,` class
method.`),qK.forEach(t),Bpr=i(ul),DL=n(ul,"P",{});var gNe=s(DL);Ppr=r(gNe,"This class cannot be instantiated directly using "),V1e=n(gNe,"CODE",{});var x1t=s(V1e);Ipr=r(x1t,"__init__()"),x1t.forEach(t),qpr=r(gNe," (throws an error)."),gNe.forEach(t),Npr=i(ul),Lt=n(ul,"DIV",{class:!0});var O3=s(Lt);T(GL.$$.fragment,O3),jpr=i(O3),X1e=n(O3,"P",{});var $1t=s(X1e);Dpr=r($1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$1t.forEach(t),Gpr=i(O3),Jd=n(O3,"P",{});var NK=s(Jd);Opr=r(NK,`Note:
Loading a model from its configuration file does `),z1e=n(NK,"STRONG",{});var k1t=s(z1e);Vpr=r(k1t,"not"),k1t.forEach(t),Xpr=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(NK,"A",{href:!0});var S1t=s(VQ);zpr=r(S1t,"from_pretrained()"),S1t.forEach(t),Qpr=r(NK," to load the model weights."),NK.forEach(t),Wpr=i(O3),T(E7.$$.fragment,O3),O3.forEach(t),Hpr=i(ul),xr=n(ul,"DIV",{class:!0});var _l=s(xr);T(OL.$$.fragment,_l),Upr=i(_l),Q1e=n(_l,"P",{});var R1t=s(Q1e);Jpr=r(R1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R1t.forEach(t),Ypr=i(_l),en=n(_l,"P",{});var V3=s(en);Kpr=r(V3,"The model class to instantiate is selected based on the "),W1e=n(V3,"CODE",{});var B1t=s(W1e);Zpr=r(B1t,"model_type"),B1t.forEach(t),eur=r(V3,` property of the config object (either
passed as an argument or loaded from `),H1e=n(V3,"CODE",{});var P1t=s(H1e);our=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),rur=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(V3,"CODE",{});var I1t=s(U1e);tur=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),aur=r(V3,":"),V3.forEach(t),nur=i(_l),ye=n(_l,"UL",{});var Re=s(ye);C7=n(Re,"LI",{});var ike=s(C7);J1e=n(ike,"STRONG",{});var q1t=s(J1e);sur=r(q1t,"bart"),q1t.forEach(t),lur=r(ike," \u2014 "),XQ=n(ike,"A",{href:!0});var N1t=s(XQ);iur=r(N1t,"TFBartForConditionalGeneration"),N1t.forEach(t),dur=r(ike," (BART model)"),ike.forEach(t),cur=i(Re),w7=n(Re,"LI",{});var dke=s(w7);Y1e=n(dke,"STRONG",{});var j1t=s(Y1e);fur=r(j1t,"blenderbot"),j1t.forEach(t),mur=r(dke," \u2014 "),zQ=n(dke,"A",{href:!0});var D1t=s(zQ);gur=r(D1t,"TFBlenderbotForConditionalGeneration"),D1t.forEach(t),hur=r(dke," (Blenderbot model)"),dke.forEach(t),pur=i(Re),A7=n(Re,"LI",{});var cke=s(A7);K1e=n(cke,"STRONG",{});var G1t=s(K1e);uur=r(G1t,"blenderbot-small"),G1t.forEach(t),_ur=r(cke," \u2014 "),QQ=n(cke,"A",{href:!0});var O1t=s(QQ);bur=r(O1t,"TFBlenderbotSmallForConditionalGeneration"),O1t.forEach(t),vur=r(cke," (BlenderbotSmall model)"),cke.forEach(t),Fur=i(Re),y7=n(Re,"LI",{});var fke=s(y7);Z1e=n(fke,"STRONG",{});var V1t=s(Z1e);Tur=r(V1t,"encoder-decoder"),V1t.forEach(t),Mur=r(fke," \u2014 "),WQ=n(fke,"A",{href:!0});var X1t=s(WQ);Eur=r(X1t,"TFEncoderDecoderModel"),X1t.forEach(t),Cur=r(fke," (Encoder decoder model)"),fke.forEach(t),wur=i(Re),L7=n(Re,"LI",{});var mke=s(L7);ebe=n(mke,"STRONG",{});var z1t=s(ebe);Aur=r(z1t,"led"),z1t.forEach(t),yur=r(mke," \u2014 "),HQ=n(mke,"A",{href:!0});var Q1t=s(HQ);Lur=r(Q1t,"TFLEDForConditionalGeneration"),Q1t.forEach(t),xur=r(mke," (LED model)"),mke.forEach(t),$ur=i(Re),x7=n(Re,"LI",{});var gke=s(x7);obe=n(gke,"STRONG",{});var W1t=s(obe);kur=r(W1t,"marian"),W1t.forEach(t),Sur=r(gke," \u2014 "),UQ=n(gke,"A",{href:!0});var H1t=s(UQ);Rur=r(H1t,"TFMarianMTModel"),H1t.forEach(t),Bur=r(gke," (Marian model)"),gke.forEach(t),Pur=i(Re),$7=n(Re,"LI",{});var hke=s($7);rbe=n(hke,"STRONG",{});var U1t=s(rbe);Iur=r(U1t,"mbart"),U1t.forEach(t),qur=r(hke," \u2014 "),JQ=n(hke,"A",{href:!0});var J1t=s(JQ);Nur=r(J1t,"TFMBartForConditionalGeneration"),J1t.forEach(t),jur=r(hke," (mBART model)"),hke.forEach(t),Dur=i(Re),k7=n(Re,"LI",{});var pke=s(k7);tbe=n(pke,"STRONG",{});var Y1t=s(tbe);Gur=r(Y1t,"mt5"),Y1t.forEach(t),Our=r(pke," \u2014 "),YQ=n(pke,"A",{href:!0});var K1t=s(YQ);Vur=r(K1t,"TFMT5ForConditionalGeneration"),K1t.forEach(t),Xur=r(pke," (mT5 model)"),pke.forEach(t),zur=i(Re),S7=n(Re,"LI",{});var uke=s(S7);abe=n(uke,"STRONG",{});var Z1t=s(abe);Qur=r(Z1t,"pegasus"),Z1t.forEach(t),Wur=r(uke," \u2014 "),KQ=n(uke,"A",{href:!0});var ebt=s(KQ);Hur=r(ebt,"TFPegasusForConditionalGeneration"),ebt.forEach(t),Uur=r(uke," (Pegasus model)"),uke.forEach(t),Jur=i(Re),R7=n(Re,"LI",{});var _ke=s(R7);nbe=n(_ke,"STRONG",{});var obt=s(nbe);Yur=r(obt,"t5"),obt.forEach(t),Kur=r(_ke," \u2014 "),ZQ=n(_ke,"A",{href:!0});var rbt=s(ZQ);Zur=r(rbt,"TFT5ForConditionalGeneration"),rbt.forEach(t),e_r=r(_ke," (T5 model)"),_ke.forEach(t),Re.forEach(t),o_r=i(_l),T(B7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),cIe=i(f),Yd=n(f,"H2",{class:!0});var hNe=s(Yd);P7=n(hNe,"A",{id:!0,class:!0,href:!0});var tbt=s(P7);sbe=n(tbt,"SPAN",{});var abt=s(sbe);T(VL.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),r_r=i(hNe),lbe=n(hNe,"SPAN",{});var nbt=s(lbe);t_r=r(nbt,"TFAutoModelForSequenceClassification"),nbt.forEach(t),hNe.forEach(t),fIe=i(f),tr=n(f,"DIV",{class:!0});var bl=s(tr);T(XL.$$.fragment,bl),a_r=i(bl),Kd=n(bl,"P",{});var jK=s(Kd);n_r=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eW=n(jK,"A",{href:!0});var sbt=s(eW);s_r=r(sbt,"from_pretrained()"),sbt.forEach(t),l_r=r(jK," class method or the "),oW=n(jK,"A",{href:!0});var lbt=s(oW);i_r=r(lbt,"from_config()"),lbt.forEach(t),d_r=r(jK,` class
method.`),jK.forEach(t),c_r=i(bl),zL=n(bl,"P",{});var pNe=s(zL);f_r=r(pNe,"This class cannot be instantiated directly using "),ibe=n(pNe,"CODE",{});var ibt=s(ibe);m_r=r(ibt,"__init__()"),ibt.forEach(t),g_r=r(pNe," (throws an error)."),pNe.forEach(t),h_r=i(bl),xt=n(bl,"DIV",{class:!0});var X3=s(xt);T(QL.$$.fragment,X3),p_r=i(X3),dbe=n(X3,"P",{});var dbt=s(dbe);u_r=r(dbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dbt.forEach(t),__r=i(X3),Zd=n(X3,"P",{});var DK=s(Zd);b_r=r(DK,`Note:
Loading a model from its configuration file does `),cbe=n(DK,"STRONG",{});var cbt=s(cbe);v_r=r(cbt,"not"),cbt.forEach(t),F_r=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(DK,"A",{href:!0});var fbt=s(rW);T_r=r(fbt,"from_pretrained()"),fbt.forEach(t),M_r=r(DK," to load the model weights."),DK.forEach(t),E_r=i(X3),T(I7.$$.fragment,X3),X3.forEach(t),C_r=i(bl),$r=n(bl,"DIV",{class:!0});var vl=s($r);T(WL.$$.fragment,vl),w_r=i(vl),fbe=n(vl,"P",{});var mbt=s(fbe);A_r=r(mbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mbt.forEach(t),y_r=i(vl),on=n(vl,"P",{});var z3=s(on);L_r=r(z3,"The model class to instantiate is selected based on the "),mbe=n(z3,"CODE",{});var gbt=s(mbe);x_r=r(gbt,"model_type"),gbt.forEach(t),$_r=r(z3,` property of the config object (either
passed as an argument or loaded from `),gbe=n(z3,"CODE",{});var hbt=s(gbe);k_r=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),S_r=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(z3,"CODE",{});var pbt=s(hbe);R_r=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),B_r=r(z3,":"),z3.forEach(t),P_r=i(vl),Z=n(vl,"UL",{});var te=s(Z);q7=n(te,"LI",{});var bke=s(q7);pbe=n(bke,"STRONG",{});var ubt=s(pbe);I_r=r(ubt,"albert"),ubt.forEach(t),q_r=r(bke," \u2014 "),tW=n(bke,"A",{href:!0});var _bt=s(tW);N_r=r(_bt,"TFAlbertForSequenceClassification"),_bt.forEach(t),j_r=r(bke," (ALBERT model)"),bke.forEach(t),D_r=i(te),N7=n(te,"LI",{});var vke=s(N7);ube=n(vke,"STRONG",{});var bbt=s(ube);G_r=r(bbt,"bert"),bbt.forEach(t),O_r=r(vke," \u2014 "),aW=n(vke,"A",{href:!0});var vbt=s(aW);V_r=r(vbt,"TFBertForSequenceClassification"),vbt.forEach(t),X_r=r(vke," (BERT model)"),vke.forEach(t),z_r=i(te),j7=n(te,"LI",{});var Fke=s(j7);_be=n(Fke,"STRONG",{});var Fbt=s(_be);Q_r=r(Fbt,"camembert"),Fbt.forEach(t),W_r=r(Fke," \u2014 "),nW=n(Fke,"A",{href:!0});var Tbt=s(nW);H_r=r(Tbt,"TFCamembertForSequenceClassification"),Tbt.forEach(t),U_r=r(Fke," (CamemBERT model)"),Fke.forEach(t),J_r=i(te),D7=n(te,"LI",{});var Tke=s(D7);bbe=n(Tke,"STRONG",{});var Mbt=s(bbe);Y_r=r(Mbt,"convbert"),Mbt.forEach(t),K_r=r(Tke," \u2014 "),sW=n(Tke,"A",{href:!0});var Ebt=s(sW);Z_r=r(Ebt,"TFConvBertForSequenceClassification"),Ebt.forEach(t),e0r=r(Tke," (ConvBERT model)"),Tke.forEach(t),o0r=i(te),G7=n(te,"LI",{});var Mke=s(G7);vbe=n(Mke,"STRONG",{});var Cbt=s(vbe);r0r=r(Cbt,"ctrl"),Cbt.forEach(t),t0r=r(Mke," \u2014 "),lW=n(Mke,"A",{href:!0});var wbt=s(lW);a0r=r(wbt,"TFCTRLForSequenceClassification"),wbt.forEach(t),n0r=r(Mke," (CTRL model)"),Mke.forEach(t),s0r=i(te),O7=n(te,"LI",{});var Eke=s(O7);Fbe=n(Eke,"STRONG",{});var Abt=s(Fbe);l0r=r(Abt,"deberta"),Abt.forEach(t),i0r=r(Eke," \u2014 "),iW=n(Eke,"A",{href:!0});var ybt=s(iW);d0r=r(ybt,"TFDebertaForSequenceClassification"),ybt.forEach(t),c0r=r(Eke," (DeBERTa model)"),Eke.forEach(t),f0r=i(te),V7=n(te,"LI",{});var Cke=s(V7);Tbe=n(Cke,"STRONG",{});var Lbt=s(Tbe);m0r=r(Lbt,"deberta-v2"),Lbt.forEach(t),g0r=r(Cke," \u2014 "),dW=n(Cke,"A",{href:!0});var xbt=s(dW);h0r=r(xbt,"TFDebertaV2ForSequenceClassification"),xbt.forEach(t),p0r=r(Cke," (DeBERTa-v2 model)"),Cke.forEach(t),u0r=i(te),X7=n(te,"LI",{});var wke=s(X7);Mbe=n(wke,"STRONG",{});var $bt=s(Mbe);_0r=r($bt,"distilbert"),$bt.forEach(t),b0r=r(wke," \u2014 "),cW=n(wke,"A",{href:!0});var kbt=s(cW);v0r=r(kbt,"TFDistilBertForSequenceClassification"),kbt.forEach(t),F0r=r(wke," (DistilBERT model)"),wke.forEach(t),T0r=i(te),z7=n(te,"LI",{});var Ake=s(z7);Ebe=n(Ake,"STRONG",{});var Sbt=s(Ebe);M0r=r(Sbt,"electra"),Sbt.forEach(t),E0r=r(Ake," \u2014 "),fW=n(Ake,"A",{href:!0});var Rbt=s(fW);C0r=r(Rbt,"TFElectraForSequenceClassification"),Rbt.forEach(t),w0r=r(Ake," (ELECTRA model)"),Ake.forEach(t),A0r=i(te),Q7=n(te,"LI",{});var yke=s(Q7);Cbe=n(yke,"STRONG",{});var Bbt=s(Cbe);y0r=r(Bbt,"flaubert"),Bbt.forEach(t),L0r=r(yke," \u2014 "),mW=n(yke,"A",{href:!0});var Pbt=s(mW);x0r=r(Pbt,"TFFlaubertForSequenceClassification"),Pbt.forEach(t),$0r=r(yke," (FlauBERT model)"),yke.forEach(t),k0r=i(te),W7=n(te,"LI",{});var Lke=s(W7);wbe=n(Lke,"STRONG",{});var Ibt=s(wbe);S0r=r(Ibt,"funnel"),Ibt.forEach(t),R0r=r(Lke," \u2014 "),gW=n(Lke,"A",{href:!0});var qbt=s(gW);B0r=r(qbt,"TFFunnelForSequenceClassification"),qbt.forEach(t),P0r=r(Lke," (Funnel Transformer model)"),Lke.forEach(t),I0r=i(te),H7=n(te,"LI",{});var xke=s(H7);Abe=n(xke,"STRONG",{});var Nbt=s(Abe);q0r=r(Nbt,"gpt2"),Nbt.forEach(t),N0r=r(xke," \u2014 "),hW=n(xke,"A",{href:!0});var jbt=s(hW);j0r=r(jbt,"TFGPT2ForSequenceClassification"),jbt.forEach(t),D0r=r(xke," (OpenAI GPT-2 model)"),xke.forEach(t),G0r=i(te),U7=n(te,"LI",{});var $ke=s(U7);ybe=n($ke,"STRONG",{});var Dbt=s(ybe);O0r=r(Dbt,"gptj"),Dbt.forEach(t),V0r=r($ke," \u2014 "),pW=n($ke,"A",{href:!0});var Gbt=s(pW);X0r=r(Gbt,"TFGPTJForSequenceClassification"),Gbt.forEach(t),z0r=r($ke," (GPT-J model)"),$ke.forEach(t),Q0r=i(te),J7=n(te,"LI",{});var kke=s(J7);Lbe=n(kke,"STRONG",{});var Obt=s(Lbe);W0r=r(Obt,"layoutlm"),Obt.forEach(t),H0r=r(kke," \u2014 "),uW=n(kke,"A",{href:!0});var Vbt=s(uW);U0r=r(Vbt,"TFLayoutLMForSequenceClassification"),Vbt.forEach(t),J0r=r(kke," (LayoutLM model)"),kke.forEach(t),Y0r=i(te),Y7=n(te,"LI",{});var Ske=s(Y7);xbe=n(Ske,"STRONG",{});var Xbt=s(xbe);K0r=r(Xbt,"longformer"),Xbt.forEach(t),Z0r=r(Ske," \u2014 "),_W=n(Ske,"A",{href:!0});var zbt=s(_W);e1r=r(zbt,"TFLongformerForSequenceClassification"),zbt.forEach(t),o1r=r(Ske," (Longformer model)"),Ske.forEach(t),r1r=i(te),K7=n(te,"LI",{});var Rke=s(K7);$be=n(Rke,"STRONG",{});var Qbt=s($be);t1r=r(Qbt,"mobilebert"),Qbt.forEach(t),a1r=r(Rke," \u2014 "),bW=n(Rke,"A",{href:!0});var Wbt=s(bW);n1r=r(Wbt,"TFMobileBertForSequenceClassification"),Wbt.forEach(t),s1r=r(Rke," (MobileBERT model)"),Rke.forEach(t),l1r=i(te),Z7=n(te,"LI",{});var Bke=s(Z7);kbe=n(Bke,"STRONG",{});var Hbt=s(kbe);i1r=r(Hbt,"mpnet"),Hbt.forEach(t),d1r=r(Bke," \u2014 "),vW=n(Bke,"A",{href:!0});var Ubt=s(vW);c1r=r(Ubt,"TFMPNetForSequenceClassification"),Ubt.forEach(t),f1r=r(Bke," (MPNet model)"),Bke.forEach(t),m1r=i(te),eM=n(te,"LI",{});var Pke=s(eM);Sbe=n(Pke,"STRONG",{});var Jbt=s(Sbe);g1r=r(Jbt,"openai-gpt"),Jbt.forEach(t),h1r=r(Pke," \u2014 "),FW=n(Pke,"A",{href:!0});var Ybt=s(FW);p1r=r(Ybt,"TFOpenAIGPTForSequenceClassification"),Ybt.forEach(t),u1r=r(Pke," (OpenAI GPT model)"),Pke.forEach(t),_1r=i(te),oM=n(te,"LI",{});var Ike=s(oM);Rbe=n(Ike,"STRONG",{});var Kbt=s(Rbe);b1r=r(Kbt,"rembert"),Kbt.forEach(t),v1r=r(Ike," \u2014 "),TW=n(Ike,"A",{href:!0});var Zbt=s(TW);F1r=r(Zbt,"TFRemBertForSequenceClassification"),Zbt.forEach(t),T1r=r(Ike," (RemBERT model)"),Ike.forEach(t),M1r=i(te),rM=n(te,"LI",{});var qke=s(rM);Bbe=n(qke,"STRONG",{});var e2t=s(Bbe);E1r=r(e2t,"roberta"),e2t.forEach(t),C1r=r(qke," \u2014 "),MW=n(qke,"A",{href:!0});var o2t=s(MW);w1r=r(o2t,"TFRobertaForSequenceClassification"),o2t.forEach(t),A1r=r(qke," (RoBERTa model)"),qke.forEach(t),y1r=i(te),tM=n(te,"LI",{});var Nke=s(tM);Pbe=n(Nke,"STRONG",{});var r2t=s(Pbe);L1r=r(r2t,"roformer"),r2t.forEach(t),x1r=r(Nke," \u2014 "),EW=n(Nke,"A",{href:!0});var t2t=s(EW);$1r=r(t2t,"TFRoFormerForSequenceClassification"),t2t.forEach(t),k1r=r(Nke," (RoFormer model)"),Nke.forEach(t),S1r=i(te),aM=n(te,"LI",{});var jke=s(aM);Ibe=n(jke,"STRONG",{});var a2t=s(Ibe);R1r=r(a2t,"tapas"),a2t.forEach(t),B1r=r(jke," \u2014 "),CW=n(jke,"A",{href:!0});var n2t=s(CW);P1r=r(n2t,"TFTapasForSequenceClassification"),n2t.forEach(t),I1r=r(jke," (TAPAS model)"),jke.forEach(t),q1r=i(te),nM=n(te,"LI",{});var Dke=s(nM);qbe=n(Dke,"STRONG",{});var s2t=s(qbe);N1r=r(s2t,"transfo-xl"),s2t.forEach(t),j1r=r(Dke," \u2014 "),wW=n(Dke,"A",{href:!0});var l2t=s(wW);D1r=r(l2t,"TFTransfoXLForSequenceClassification"),l2t.forEach(t),G1r=r(Dke," (Transformer-XL model)"),Dke.forEach(t),O1r=i(te),sM=n(te,"LI",{});var Gke=s(sM);Nbe=n(Gke,"STRONG",{});var i2t=s(Nbe);V1r=r(i2t,"xlm"),i2t.forEach(t),X1r=r(Gke," \u2014 "),AW=n(Gke,"A",{href:!0});var d2t=s(AW);z1r=r(d2t,"TFXLMForSequenceClassification"),d2t.forEach(t),Q1r=r(Gke," (XLM model)"),Gke.forEach(t),W1r=i(te),lM=n(te,"LI",{});var Oke=s(lM);jbe=n(Oke,"STRONG",{});var c2t=s(jbe);H1r=r(c2t,"xlm-roberta"),c2t.forEach(t),U1r=r(Oke," \u2014 "),yW=n(Oke,"A",{href:!0});var f2t=s(yW);J1r=r(f2t,"TFXLMRobertaForSequenceClassification"),f2t.forEach(t),Y1r=r(Oke," (XLM-RoBERTa model)"),Oke.forEach(t),K1r=i(te),iM=n(te,"LI",{});var Vke=s(iM);Dbe=n(Vke,"STRONG",{});var m2t=s(Dbe);Z1r=r(m2t,"xlnet"),m2t.forEach(t),ebr=r(Vke," \u2014 "),LW=n(Vke,"A",{href:!0});var g2t=s(LW);obr=r(g2t,"TFXLNetForSequenceClassification"),g2t.forEach(t),rbr=r(Vke," (XLNet model)"),Vke.forEach(t),te.forEach(t),tbr=i(vl),T(dM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),mIe=i(f),ec=n(f,"H2",{class:!0});var uNe=s(ec);cM=n(uNe,"A",{id:!0,class:!0,href:!0});var h2t=s(cM);Gbe=n(h2t,"SPAN",{});var p2t=s(Gbe);T(HL.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),abr=i(uNe),Obe=n(uNe,"SPAN",{});var u2t=s(Obe);nbr=r(u2t,"TFAutoModelForMultipleChoice"),u2t.forEach(t),uNe.forEach(t),gIe=i(f),ar=n(f,"DIV",{class:!0});var Fl=s(ar);T(UL.$$.fragment,Fl),sbr=i(Fl),oc=n(Fl,"P",{});var GK=s(oc);lbr=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xW=n(GK,"A",{href:!0});var _2t=s(xW);ibr=r(_2t,"from_pretrained()"),_2t.forEach(t),dbr=r(GK," class method or the "),$W=n(GK,"A",{href:!0});var b2t=s($W);cbr=r(b2t,"from_config()"),b2t.forEach(t),fbr=r(GK,` class
method.`),GK.forEach(t),mbr=i(Fl),JL=n(Fl,"P",{});var _Ne=s(JL);gbr=r(_Ne,"This class cannot be instantiated directly using "),Vbe=n(_Ne,"CODE",{});var v2t=s(Vbe);hbr=r(v2t,"__init__()"),v2t.forEach(t),pbr=r(_Ne," (throws an error)."),_Ne.forEach(t),ubr=i(Fl),$t=n(Fl,"DIV",{class:!0});var Q3=s($t);T(YL.$$.fragment,Q3),_br=i(Q3),Xbe=n(Q3,"P",{});var F2t=s(Xbe);bbr=r(F2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F2t.forEach(t),vbr=i(Q3),rc=n(Q3,"P",{});var OK=s(rc);Fbr=r(OK,`Note:
Loading a model from its configuration file does `),zbe=n(OK,"STRONG",{});var T2t=s(zbe);Tbr=r(T2t,"not"),T2t.forEach(t),Mbr=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(OK,"A",{href:!0});var M2t=s(kW);Ebr=r(M2t,"from_pretrained()"),M2t.forEach(t),Cbr=r(OK," to load the model weights."),OK.forEach(t),wbr=i(Q3),T(fM.$$.fragment,Q3),Q3.forEach(t),Abr=i(Fl),kr=n(Fl,"DIV",{class:!0});var Tl=s(kr);T(KL.$$.fragment,Tl),ybr=i(Tl),Qbe=n(Tl,"P",{});var E2t=s(Qbe);Lbr=r(E2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E2t.forEach(t),xbr=i(Tl),rn=n(Tl,"P",{});var W3=s(rn);$br=r(W3,"The model class to instantiate is selected based on the "),Wbe=n(W3,"CODE",{});var C2t=s(Wbe);kbr=r(C2t,"model_type"),C2t.forEach(t),Sbr=r(W3,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(W3,"CODE",{});var w2t=s(Hbe);Rbr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Bbr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(W3,"CODE",{});var A2t=s(Ube);Pbr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),Ibr=r(W3,":"),W3.forEach(t),qbr=i(Tl),pe=n(Tl,"UL",{});var _e=s(pe);mM=n(_e,"LI",{});var Xke=s(mM);Jbe=n(Xke,"STRONG",{});var y2t=s(Jbe);Nbr=r(y2t,"albert"),y2t.forEach(t),jbr=r(Xke," \u2014 "),SW=n(Xke,"A",{href:!0});var L2t=s(SW);Dbr=r(L2t,"TFAlbertForMultipleChoice"),L2t.forEach(t),Gbr=r(Xke," (ALBERT model)"),Xke.forEach(t),Obr=i(_e),gM=n(_e,"LI",{});var zke=s(gM);Ybe=n(zke,"STRONG",{});var x2t=s(Ybe);Vbr=r(x2t,"bert"),x2t.forEach(t),Xbr=r(zke," \u2014 "),RW=n(zke,"A",{href:!0});var $2t=s(RW);zbr=r($2t,"TFBertForMultipleChoice"),$2t.forEach(t),Qbr=r(zke," (BERT model)"),zke.forEach(t),Wbr=i(_e),hM=n(_e,"LI",{});var Qke=s(hM);Kbe=n(Qke,"STRONG",{});var k2t=s(Kbe);Hbr=r(k2t,"camembert"),k2t.forEach(t),Ubr=r(Qke," \u2014 "),BW=n(Qke,"A",{href:!0});var S2t=s(BW);Jbr=r(S2t,"TFCamembertForMultipleChoice"),S2t.forEach(t),Ybr=r(Qke," (CamemBERT model)"),Qke.forEach(t),Kbr=i(_e),pM=n(_e,"LI",{});var Wke=s(pM);Zbe=n(Wke,"STRONG",{});var R2t=s(Zbe);Zbr=r(R2t,"convbert"),R2t.forEach(t),e2r=r(Wke," \u2014 "),PW=n(Wke,"A",{href:!0});var B2t=s(PW);o2r=r(B2t,"TFConvBertForMultipleChoice"),B2t.forEach(t),r2r=r(Wke," (ConvBERT model)"),Wke.forEach(t),t2r=i(_e),uM=n(_e,"LI",{});var Hke=s(uM);e2e=n(Hke,"STRONG",{});var P2t=s(e2e);a2r=r(P2t,"distilbert"),P2t.forEach(t),n2r=r(Hke," \u2014 "),IW=n(Hke,"A",{href:!0});var I2t=s(IW);s2r=r(I2t,"TFDistilBertForMultipleChoice"),I2t.forEach(t),l2r=r(Hke," (DistilBERT model)"),Hke.forEach(t),i2r=i(_e),_M=n(_e,"LI",{});var Uke=s(_M);o2e=n(Uke,"STRONG",{});var q2t=s(o2e);d2r=r(q2t,"electra"),q2t.forEach(t),c2r=r(Uke," \u2014 "),qW=n(Uke,"A",{href:!0});var N2t=s(qW);f2r=r(N2t,"TFElectraForMultipleChoice"),N2t.forEach(t),m2r=r(Uke," (ELECTRA model)"),Uke.forEach(t),g2r=i(_e),bM=n(_e,"LI",{});var Jke=s(bM);r2e=n(Jke,"STRONG",{});var j2t=s(r2e);h2r=r(j2t,"flaubert"),j2t.forEach(t),p2r=r(Jke," \u2014 "),NW=n(Jke,"A",{href:!0});var D2t=s(NW);u2r=r(D2t,"TFFlaubertForMultipleChoice"),D2t.forEach(t),_2r=r(Jke," (FlauBERT model)"),Jke.forEach(t),b2r=i(_e),vM=n(_e,"LI",{});var Yke=s(vM);t2e=n(Yke,"STRONG",{});var G2t=s(t2e);v2r=r(G2t,"funnel"),G2t.forEach(t),F2r=r(Yke," \u2014 "),jW=n(Yke,"A",{href:!0});var O2t=s(jW);T2r=r(O2t,"TFFunnelForMultipleChoice"),O2t.forEach(t),M2r=r(Yke," (Funnel Transformer model)"),Yke.forEach(t),E2r=i(_e),FM=n(_e,"LI",{});var Kke=s(FM);a2e=n(Kke,"STRONG",{});var V2t=s(a2e);C2r=r(V2t,"longformer"),V2t.forEach(t),w2r=r(Kke," \u2014 "),DW=n(Kke,"A",{href:!0});var X2t=s(DW);A2r=r(X2t,"TFLongformerForMultipleChoice"),X2t.forEach(t),y2r=r(Kke," (Longformer model)"),Kke.forEach(t),L2r=i(_e),TM=n(_e,"LI",{});var Zke=s(TM);n2e=n(Zke,"STRONG",{});var z2t=s(n2e);x2r=r(z2t,"mobilebert"),z2t.forEach(t),$2r=r(Zke," \u2014 "),GW=n(Zke,"A",{href:!0});var Q2t=s(GW);k2r=r(Q2t,"TFMobileBertForMultipleChoice"),Q2t.forEach(t),S2r=r(Zke," (MobileBERT model)"),Zke.forEach(t),R2r=i(_e),MM=n(_e,"LI",{});var eSe=s(MM);s2e=n(eSe,"STRONG",{});var W2t=s(s2e);B2r=r(W2t,"mpnet"),W2t.forEach(t),P2r=r(eSe," \u2014 "),OW=n(eSe,"A",{href:!0});var H2t=s(OW);I2r=r(H2t,"TFMPNetForMultipleChoice"),H2t.forEach(t),q2r=r(eSe," (MPNet model)"),eSe.forEach(t),N2r=i(_e),EM=n(_e,"LI",{});var oSe=s(EM);l2e=n(oSe,"STRONG",{});var U2t=s(l2e);j2r=r(U2t,"rembert"),U2t.forEach(t),D2r=r(oSe," \u2014 "),VW=n(oSe,"A",{href:!0});var J2t=s(VW);G2r=r(J2t,"TFRemBertForMultipleChoice"),J2t.forEach(t),O2r=r(oSe," (RemBERT model)"),oSe.forEach(t),V2r=i(_e),CM=n(_e,"LI",{});var rSe=s(CM);i2e=n(rSe,"STRONG",{});var Y2t=s(i2e);X2r=r(Y2t,"roberta"),Y2t.forEach(t),z2r=r(rSe," \u2014 "),XW=n(rSe,"A",{href:!0});var K2t=s(XW);Q2r=r(K2t,"TFRobertaForMultipleChoice"),K2t.forEach(t),W2r=r(rSe," (RoBERTa model)"),rSe.forEach(t),H2r=i(_e),wM=n(_e,"LI",{});var tSe=s(wM);d2e=n(tSe,"STRONG",{});var Z2t=s(d2e);U2r=r(Z2t,"roformer"),Z2t.forEach(t),J2r=r(tSe," \u2014 "),zW=n(tSe,"A",{href:!0});var evt=s(zW);Y2r=r(evt,"TFRoFormerForMultipleChoice"),evt.forEach(t),K2r=r(tSe," (RoFormer model)"),tSe.forEach(t),Z2r=i(_e),AM=n(_e,"LI",{});var aSe=s(AM);c2e=n(aSe,"STRONG",{});var ovt=s(c2e);evr=r(ovt,"xlm"),ovt.forEach(t),ovr=r(aSe," \u2014 "),QW=n(aSe,"A",{href:!0});var rvt=s(QW);rvr=r(rvt,"TFXLMForMultipleChoice"),rvt.forEach(t),tvr=r(aSe," (XLM model)"),aSe.forEach(t),avr=i(_e),yM=n(_e,"LI",{});var nSe=s(yM);f2e=n(nSe,"STRONG",{});var tvt=s(f2e);nvr=r(tvt,"xlm-roberta"),tvt.forEach(t),svr=r(nSe," \u2014 "),WW=n(nSe,"A",{href:!0});var avt=s(WW);lvr=r(avt,"TFXLMRobertaForMultipleChoice"),avt.forEach(t),ivr=r(nSe," (XLM-RoBERTa model)"),nSe.forEach(t),dvr=i(_e),LM=n(_e,"LI",{});var sSe=s(LM);m2e=n(sSe,"STRONG",{});var nvt=s(m2e);cvr=r(nvt,"xlnet"),nvt.forEach(t),fvr=r(sSe," \u2014 "),HW=n(sSe,"A",{href:!0});var svt=s(HW);mvr=r(svt,"TFXLNetForMultipleChoice"),svt.forEach(t),gvr=r(sSe," (XLNet model)"),sSe.forEach(t),_e.forEach(t),hvr=i(Tl),T(xM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),hIe=i(f),tc=n(f,"H2",{class:!0});var bNe=s(tc);$M=n(bNe,"A",{id:!0,class:!0,href:!0});var lvt=s($M);g2e=n(lvt,"SPAN",{});var ivt=s(g2e);T(ZL.$$.fragment,ivt),ivt.forEach(t),lvt.forEach(t),pvr=i(bNe),h2e=n(bNe,"SPAN",{});var dvt=s(h2e);uvr=r(dvt,"TFAutoModelForTableQuestionAnswering"),dvt.forEach(t),bNe.forEach(t),pIe=i(f),nr=n(f,"DIV",{class:!0});var Ml=s(nr);T(e8.$$.fragment,Ml),_vr=i(Ml),ac=n(Ml,"P",{});var VK=s(ac);bvr=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UW=n(VK,"A",{href:!0});var cvt=s(UW);vvr=r(cvt,"from_pretrained()"),cvt.forEach(t),Fvr=r(VK," class method or the "),JW=n(VK,"A",{href:!0});var fvt=s(JW);Tvr=r(fvt,"from_config()"),fvt.forEach(t),Mvr=r(VK,` class
method.`),VK.forEach(t),Evr=i(Ml),o8=n(Ml,"P",{});var vNe=s(o8);Cvr=r(vNe,"This class cannot be instantiated directly using "),p2e=n(vNe,"CODE",{});var mvt=s(p2e);wvr=r(mvt,"__init__()"),mvt.forEach(t),Avr=r(vNe," (throws an error)."),vNe.forEach(t),yvr=i(Ml),kt=n(Ml,"DIV",{class:!0});var H3=s(kt);T(r8.$$.fragment,H3),Lvr=i(H3),u2e=n(H3,"P",{});var gvt=s(u2e);xvr=r(gvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gvt.forEach(t),$vr=i(H3),nc=n(H3,"P",{});var XK=s(nc);kvr=r(XK,`Note:
Loading a model from its configuration file does `),_2e=n(XK,"STRONG",{});var hvt=s(_2e);Svr=r(hvt,"not"),hvt.forEach(t),Rvr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(XK,"A",{href:!0});var pvt=s(YW);Bvr=r(pvt,"from_pretrained()"),pvt.forEach(t),Pvr=r(XK," to load the model weights."),XK.forEach(t),Ivr=i(H3),T(kM.$$.fragment,H3),H3.forEach(t),qvr=i(Ml),Sr=n(Ml,"DIV",{class:!0});var El=s(Sr);T(t8.$$.fragment,El),Nvr=i(El),b2e=n(El,"P",{});var uvt=s(b2e);jvr=r(uvt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uvt.forEach(t),Dvr=i(El),tn=n(El,"P",{});var U3=s(tn);Gvr=r(U3,"The model class to instantiate is selected based on the "),v2e=n(U3,"CODE",{});var _vt=s(v2e);Ovr=r(_vt,"model_type"),_vt.forEach(t),Vvr=r(U3,` property of the config object (either
passed as an argument or loaded from `),F2e=n(U3,"CODE",{});var bvt=s(F2e);Xvr=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),zvr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(U3,"CODE",{});var vvt=s(T2e);Qvr=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),Wvr=r(U3,":"),U3.forEach(t),Hvr=i(El),M2e=n(El,"UL",{});var Fvt=s(M2e);SM=n(Fvt,"LI",{});var lSe=s(SM);E2e=n(lSe,"STRONG",{});var Tvt=s(E2e);Uvr=r(Tvt,"tapas"),Tvt.forEach(t),Jvr=r(lSe," \u2014 "),KW=n(lSe,"A",{href:!0});var Mvt=s(KW);Yvr=r(Mvt,"TFTapasForQuestionAnswering"),Mvt.forEach(t),Kvr=r(lSe," (TAPAS model)"),lSe.forEach(t),Fvt.forEach(t),Zvr=i(El),T(RM.$$.fragment,El),El.forEach(t),Ml.forEach(t),uIe=i(f),sc=n(f,"H2",{class:!0});var FNe=s(sc);BM=n(FNe,"A",{id:!0,class:!0,href:!0});var Evt=s(BM);C2e=n(Evt,"SPAN",{});var Cvt=s(C2e);T(a8.$$.fragment,Cvt),Cvt.forEach(t),Evt.forEach(t),eFr=i(FNe),w2e=n(FNe,"SPAN",{});var wvt=s(w2e);oFr=r(wvt,"TFAutoModelForTokenClassification"),wvt.forEach(t),FNe.forEach(t),_Ie=i(f),sr=n(f,"DIV",{class:!0});var Cl=s(sr);T(n8.$$.fragment,Cl),rFr=i(Cl),lc=n(Cl,"P",{});var zK=s(lc);tFr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZW=n(zK,"A",{href:!0});var Avt=s(ZW);aFr=r(Avt,"from_pretrained()"),Avt.forEach(t),nFr=r(zK," class method or the "),eH=n(zK,"A",{href:!0});var yvt=s(eH);sFr=r(yvt,"from_config()"),yvt.forEach(t),lFr=r(zK,` class
method.`),zK.forEach(t),iFr=i(Cl),s8=n(Cl,"P",{});var TNe=s(s8);dFr=r(TNe,"This class cannot be instantiated directly using "),A2e=n(TNe,"CODE",{});var Lvt=s(A2e);cFr=r(Lvt,"__init__()"),Lvt.forEach(t),fFr=r(TNe," (throws an error)."),TNe.forEach(t),mFr=i(Cl),St=n(Cl,"DIV",{class:!0});var J3=s(St);T(l8.$$.fragment,J3),gFr=i(J3),y2e=n(J3,"P",{});var xvt=s(y2e);hFr=r(xvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xvt.forEach(t),pFr=i(J3),ic=n(J3,"P",{});var QK=s(ic);uFr=r(QK,`Note:
Loading a model from its configuration file does `),L2e=n(QK,"STRONG",{});var $vt=s(L2e);_Fr=r($vt,"not"),$vt.forEach(t),bFr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(QK,"A",{href:!0});var kvt=s(oH);vFr=r(kvt,"from_pretrained()"),kvt.forEach(t),FFr=r(QK," to load the model weights."),QK.forEach(t),TFr=i(J3),T(PM.$$.fragment,J3),J3.forEach(t),MFr=i(Cl),Rr=n(Cl,"DIV",{class:!0});var wl=s(Rr);T(i8.$$.fragment,wl),EFr=i(wl),x2e=n(wl,"P",{});var Svt=s(x2e);CFr=r(Svt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Svt.forEach(t),wFr=i(wl),an=n(wl,"P",{});var Y3=s(an);AFr=r(Y3,"The model class to instantiate is selected based on the "),$2e=n(Y3,"CODE",{});var Rvt=s($2e);yFr=r(Rvt,"model_type"),Rvt.forEach(t),LFr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),k2e=n(Y3,"CODE",{});var Bvt=s(k2e);xFr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),$Fr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(Y3,"CODE",{});var Pvt=s(S2e);kFr=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),SFr=r(Y3,":"),Y3.forEach(t),RFr=i(wl),de=n(wl,"UL",{});var me=s(de);IM=n(me,"LI",{});var iSe=s(IM);R2e=n(iSe,"STRONG",{});var Ivt=s(R2e);BFr=r(Ivt,"albert"),Ivt.forEach(t),PFr=r(iSe," \u2014 "),rH=n(iSe,"A",{href:!0});var qvt=s(rH);IFr=r(qvt,"TFAlbertForTokenClassification"),qvt.forEach(t),qFr=r(iSe," (ALBERT model)"),iSe.forEach(t),NFr=i(me),qM=n(me,"LI",{});var dSe=s(qM);B2e=n(dSe,"STRONG",{});var Nvt=s(B2e);jFr=r(Nvt,"bert"),Nvt.forEach(t),DFr=r(dSe," \u2014 "),tH=n(dSe,"A",{href:!0});var jvt=s(tH);GFr=r(jvt,"TFBertForTokenClassification"),jvt.forEach(t),OFr=r(dSe," (BERT model)"),dSe.forEach(t),VFr=i(me),NM=n(me,"LI",{});var cSe=s(NM);P2e=n(cSe,"STRONG",{});var Dvt=s(P2e);XFr=r(Dvt,"camembert"),Dvt.forEach(t),zFr=r(cSe," \u2014 "),aH=n(cSe,"A",{href:!0});var Gvt=s(aH);QFr=r(Gvt,"TFCamembertForTokenClassification"),Gvt.forEach(t),WFr=r(cSe," (CamemBERT model)"),cSe.forEach(t),HFr=i(me),jM=n(me,"LI",{});var fSe=s(jM);I2e=n(fSe,"STRONG",{});var Ovt=s(I2e);UFr=r(Ovt,"convbert"),Ovt.forEach(t),JFr=r(fSe," \u2014 "),nH=n(fSe,"A",{href:!0});var Vvt=s(nH);YFr=r(Vvt,"TFConvBertForTokenClassification"),Vvt.forEach(t),KFr=r(fSe," (ConvBERT model)"),fSe.forEach(t),ZFr=i(me),DM=n(me,"LI",{});var mSe=s(DM);q2e=n(mSe,"STRONG",{});var Xvt=s(q2e);e6r=r(Xvt,"deberta"),Xvt.forEach(t),o6r=r(mSe," \u2014 "),sH=n(mSe,"A",{href:!0});var zvt=s(sH);r6r=r(zvt,"TFDebertaForTokenClassification"),zvt.forEach(t),t6r=r(mSe," (DeBERTa model)"),mSe.forEach(t),a6r=i(me),GM=n(me,"LI",{});var gSe=s(GM);N2e=n(gSe,"STRONG",{});var Qvt=s(N2e);n6r=r(Qvt,"deberta-v2"),Qvt.forEach(t),s6r=r(gSe," \u2014 "),lH=n(gSe,"A",{href:!0});var Wvt=s(lH);l6r=r(Wvt,"TFDebertaV2ForTokenClassification"),Wvt.forEach(t),i6r=r(gSe," (DeBERTa-v2 model)"),gSe.forEach(t),d6r=i(me),OM=n(me,"LI",{});var hSe=s(OM);j2e=n(hSe,"STRONG",{});var Hvt=s(j2e);c6r=r(Hvt,"distilbert"),Hvt.forEach(t),f6r=r(hSe," \u2014 "),iH=n(hSe,"A",{href:!0});var Uvt=s(iH);m6r=r(Uvt,"TFDistilBertForTokenClassification"),Uvt.forEach(t),g6r=r(hSe," (DistilBERT model)"),hSe.forEach(t),h6r=i(me),VM=n(me,"LI",{});var pSe=s(VM);D2e=n(pSe,"STRONG",{});var Jvt=s(D2e);p6r=r(Jvt,"electra"),Jvt.forEach(t),u6r=r(pSe," \u2014 "),dH=n(pSe,"A",{href:!0});var Yvt=s(dH);_6r=r(Yvt,"TFElectraForTokenClassification"),Yvt.forEach(t),b6r=r(pSe," (ELECTRA model)"),pSe.forEach(t),v6r=i(me),XM=n(me,"LI",{});var uSe=s(XM);G2e=n(uSe,"STRONG",{});var Kvt=s(G2e);F6r=r(Kvt,"flaubert"),Kvt.forEach(t),T6r=r(uSe," \u2014 "),cH=n(uSe,"A",{href:!0});var Zvt=s(cH);M6r=r(Zvt,"TFFlaubertForTokenClassification"),Zvt.forEach(t),E6r=r(uSe," (FlauBERT model)"),uSe.forEach(t),C6r=i(me),zM=n(me,"LI",{});var _Se=s(zM);O2e=n(_Se,"STRONG",{});var eFt=s(O2e);w6r=r(eFt,"funnel"),eFt.forEach(t),A6r=r(_Se," \u2014 "),fH=n(_Se,"A",{href:!0});var oFt=s(fH);y6r=r(oFt,"TFFunnelForTokenClassification"),oFt.forEach(t),L6r=r(_Se," (Funnel Transformer model)"),_Se.forEach(t),x6r=i(me),QM=n(me,"LI",{});var bSe=s(QM);V2e=n(bSe,"STRONG",{});var rFt=s(V2e);$6r=r(rFt,"layoutlm"),rFt.forEach(t),k6r=r(bSe," \u2014 "),mH=n(bSe,"A",{href:!0});var tFt=s(mH);S6r=r(tFt,"TFLayoutLMForTokenClassification"),tFt.forEach(t),R6r=r(bSe," (LayoutLM model)"),bSe.forEach(t),B6r=i(me),WM=n(me,"LI",{});var vSe=s(WM);X2e=n(vSe,"STRONG",{});var aFt=s(X2e);P6r=r(aFt,"longformer"),aFt.forEach(t),I6r=r(vSe," \u2014 "),gH=n(vSe,"A",{href:!0});var nFt=s(gH);q6r=r(nFt,"TFLongformerForTokenClassification"),nFt.forEach(t),N6r=r(vSe," (Longformer model)"),vSe.forEach(t),j6r=i(me),HM=n(me,"LI",{});var FSe=s(HM);z2e=n(FSe,"STRONG",{});var sFt=s(z2e);D6r=r(sFt,"mobilebert"),sFt.forEach(t),G6r=r(FSe," \u2014 "),hH=n(FSe,"A",{href:!0});var lFt=s(hH);O6r=r(lFt,"TFMobileBertForTokenClassification"),lFt.forEach(t),V6r=r(FSe," (MobileBERT model)"),FSe.forEach(t),X6r=i(me),UM=n(me,"LI",{});var TSe=s(UM);Q2e=n(TSe,"STRONG",{});var iFt=s(Q2e);z6r=r(iFt,"mpnet"),iFt.forEach(t),Q6r=r(TSe," \u2014 "),pH=n(TSe,"A",{href:!0});var dFt=s(pH);W6r=r(dFt,"TFMPNetForTokenClassification"),dFt.forEach(t),H6r=r(TSe," (MPNet model)"),TSe.forEach(t),U6r=i(me),JM=n(me,"LI",{});var MSe=s(JM);W2e=n(MSe,"STRONG",{});var cFt=s(W2e);J6r=r(cFt,"rembert"),cFt.forEach(t),Y6r=r(MSe," \u2014 "),uH=n(MSe,"A",{href:!0});var fFt=s(uH);K6r=r(fFt,"TFRemBertForTokenClassification"),fFt.forEach(t),Z6r=r(MSe," (RemBERT model)"),MSe.forEach(t),eTr=i(me),YM=n(me,"LI",{});var ESe=s(YM);H2e=n(ESe,"STRONG",{});var mFt=s(H2e);oTr=r(mFt,"roberta"),mFt.forEach(t),rTr=r(ESe," \u2014 "),_H=n(ESe,"A",{href:!0});var gFt=s(_H);tTr=r(gFt,"TFRobertaForTokenClassification"),gFt.forEach(t),aTr=r(ESe," (RoBERTa model)"),ESe.forEach(t),nTr=i(me),KM=n(me,"LI",{});var CSe=s(KM);U2e=n(CSe,"STRONG",{});var hFt=s(U2e);sTr=r(hFt,"roformer"),hFt.forEach(t),lTr=r(CSe," \u2014 "),bH=n(CSe,"A",{href:!0});var pFt=s(bH);iTr=r(pFt,"TFRoFormerForTokenClassification"),pFt.forEach(t),dTr=r(CSe," (RoFormer model)"),CSe.forEach(t),cTr=i(me),ZM=n(me,"LI",{});var wSe=s(ZM);J2e=n(wSe,"STRONG",{});var uFt=s(J2e);fTr=r(uFt,"xlm"),uFt.forEach(t),mTr=r(wSe," \u2014 "),vH=n(wSe,"A",{href:!0});var _Ft=s(vH);gTr=r(_Ft,"TFXLMForTokenClassification"),_Ft.forEach(t),hTr=r(wSe," (XLM model)"),wSe.forEach(t),pTr=i(me),e4=n(me,"LI",{});var ASe=s(e4);Y2e=n(ASe,"STRONG",{});var bFt=s(Y2e);uTr=r(bFt,"xlm-roberta"),bFt.forEach(t),_Tr=r(ASe," \u2014 "),FH=n(ASe,"A",{href:!0});var vFt=s(FH);bTr=r(vFt,"TFXLMRobertaForTokenClassification"),vFt.forEach(t),vTr=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),FTr=i(me),o4=n(me,"LI",{});var ySe=s(o4);K2e=n(ySe,"STRONG",{});var FFt=s(K2e);TTr=r(FFt,"xlnet"),FFt.forEach(t),MTr=r(ySe," \u2014 "),TH=n(ySe,"A",{href:!0});var TFt=s(TH);ETr=r(TFt,"TFXLNetForTokenClassification"),TFt.forEach(t),CTr=r(ySe," (XLNet model)"),ySe.forEach(t),me.forEach(t),wTr=i(wl),T(r4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),bIe=i(f),dc=n(f,"H2",{class:!0});var MNe=s(dc);t4=n(MNe,"A",{id:!0,class:!0,href:!0});var MFt=s(t4);Z2e=n(MFt,"SPAN",{});var EFt=s(Z2e);T(d8.$$.fragment,EFt),EFt.forEach(t),MFt.forEach(t),ATr=i(MNe),eve=n(MNe,"SPAN",{});var CFt=s(eve);yTr=r(CFt,"TFAutoModelForQuestionAnswering"),CFt.forEach(t),MNe.forEach(t),vIe=i(f),lr=n(f,"DIV",{class:!0});var Al=s(lr);T(c8.$$.fragment,Al),LTr=i(Al),cc=n(Al,"P",{});var WK=s(cc);xTr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MH=n(WK,"A",{href:!0});var wFt=s(MH);$Tr=r(wFt,"from_pretrained()"),wFt.forEach(t),kTr=r(WK," class method or the "),EH=n(WK,"A",{href:!0});var AFt=s(EH);STr=r(AFt,"from_config()"),AFt.forEach(t),RTr=r(WK,` class
method.`),WK.forEach(t),BTr=i(Al),f8=n(Al,"P",{});var ENe=s(f8);PTr=r(ENe,"This class cannot be instantiated directly using "),ove=n(ENe,"CODE",{});var yFt=s(ove);ITr=r(yFt,"__init__()"),yFt.forEach(t),qTr=r(ENe," (throws an error)."),ENe.forEach(t),NTr=i(Al),Rt=n(Al,"DIV",{class:!0});var K3=s(Rt);T(m8.$$.fragment,K3),jTr=i(K3),rve=n(K3,"P",{});var LFt=s(rve);DTr=r(LFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LFt.forEach(t),GTr=i(K3),fc=n(K3,"P",{});var HK=s(fc);OTr=r(HK,`Note:
Loading a model from its configuration file does `),tve=n(HK,"STRONG",{});var xFt=s(tve);VTr=r(xFt,"not"),xFt.forEach(t),XTr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(HK,"A",{href:!0});var $Ft=s(CH);zTr=r($Ft,"from_pretrained()"),$Ft.forEach(t),QTr=r(HK," to load the model weights."),HK.forEach(t),WTr=i(K3),T(a4.$$.fragment,K3),K3.forEach(t),HTr=i(Al),Br=n(Al,"DIV",{class:!0});var yl=s(Br);T(g8.$$.fragment,yl),UTr=i(yl),ave=n(yl,"P",{});var kFt=s(ave);JTr=r(kFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kFt.forEach(t),YTr=i(yl),nn=n(yl,"P",{});var Z3=s(nn);KTr=r(Z3,"The model class to instantiate is selected based on the "),nve=n(Z3,"CODE",{});var SFt=s(nve);ZTr=r(SFt,"model_type"),SFt.forEach(t),e7r=r(Z3,` property of the config object (either
passed as an argument or loaded from `),sve=n(Z3,"CODE",{});var RFt=s(sve);o7r=r(RFt,"pretrained_model_name_or_path"),RFt.forEach(t),r7r=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(Z3,"CODE",{});var BFt=s(lve);t7r=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),a7r=r(Z3,":"),Z3.forEach(t),n7r=i(yl),ce=n(yl,"UL",{});var ge=s(ce);n4=n(ge,"LI",{});var LSe=s(n4);ive=n(LSe,"STRONG",{});var PFt=s(ive);s7r=r(PFt,"albert"),PFt.forEach(t),l7r=r(LSe," \u2014 "),wH=n(LSe,"A",{href:!0});var IFt=s(wH);i7r=r(IFt,"TFAlbertForQuestionAnswering"),IFt.forEach(t),d7r=r(LSe," (ALBERT model)"),LSe.forEach(t),c7r=i(ge),s4=n(ge,"LI",{});var xSe=s(s4);dve=n(xSe,"STRONG",{});var qFt=s(dve);f7r=r(qFt,"bert"),qFt.forEach(t),m7r=r(xSe," \u2014 "),AH=n(xSe,"A",{href:!0});var NFt=s(AH);g7r=r(NFt,"TFBertForQuestionAnswering"),NFt.forEach(t),h7r=r(xSe," (BERT model)"),xSe.forEach(t),p7r=i(ge),l4=n(ge,"LI",{});var $Se=s(l4);cve=n($Se,"STRONG",{});var jFt=s(cve);u7r=r(jFt,"camembert"),jFt.forEach(t),_7r=r($Se," \u2014 "),yH=n($Se,"A",{href:!0});var DFt=s(yH);b7r=r(DFt,"TFCamembertForQuestionAnswering"),DFt.forEach(t),v7r=r($Se," (CamemBERT model)"),$Se.forEach(t),F7r=i(ge),i4=n(ge,"LI",{});var kSe=s(i4);fve=n(kSe,"STRONG",{});var GFt=s(fve);T7r=r(GFt,"convbert"),GFt.forEach(t),M7r=r(kSe," \u2014 "),LH=n(kSe,"A",{href:!0});var OFt=s(LH);E7r=r(OFt,"TFConvBertForQuestionAnswering"),OFt.forEach(t),C7r=r(kSe," (ConvBERT model)"),kSe.forEach(t),w7r=i(ge),d4=n(ge,"LI",{});var SSe=s(d4);mve=n(SSe,"STRONG",{});var VFt=s(mve);A7r=r(VFt,"deberta"),VFt.forEach(t),y7r=r(SSe," \u2014 "),xH=n(SSe,"A",{href:!0});var XFt=s(xH);L7r=r(XFt,"TFDebertaForQuestionAnswering"),XFt.forEach(t),x7r=r(SSe," (DeBERTa model)"),SSe.forEach(t),$7r=i(ge),c4=n(ge,"LI",{});var RSe=s(c4);gve=n(RSe,"STRONG",{});var zFt=s(gve);k7r=r(zFt,"deberta-v2"),zFt.forEach(t),S7r=r(RSe," \u2014 "),$H=n(RSe,"A",{href:!0});var QFt=s($H);R7r=r(QFt,"TFDebertaV2ForQuestionAnswering"),QFt.forEach(t),B7r=r(RSe," (DeBERTa-v2 model)"),RSe.forEach(t),P7r=i(ge),f4=n(ge,"LI",{});var BSe=s(f4);hve=n(BSe,"STRONG",{});var WFt=s(hve);I7r=r(WFt,"distilbert"),WFt.forEach(t),q7r=r(BSe," \u2014 "),kH=n(BSe,"A",{href:!0});var HFt=s(kH);N7r=r(HFt,"TFDistilBertForQuestionAnswering"),HFt.forEach(t),j7r=r(BSe," (DistilBERT model)"),BSe.forEach(t),D7r=i(ge),m4=n(ge,"LI",{});var PSe=s(m4);pve=n(PSe,"STRONG",{});var UFt=s(pve);G7r=r(UFt,"electra"),UFt.forEach(t),O7r=r(PSe," \u2014 "),SH=n(PSe,"A",{href:!0});var JFt=s(SH);V7r=r(JFt,"TFElectraForQuestionAnswering"),JFt.forEach(t),X7r=r(PSe," (ELECTRA model)"),PSe.forEach(t),z7r=i(ge),g4=n(ge,"LI",{});var ISe=s(g4);uve=n(ISe,"STRONG",{});var YFt=s(uve);Q7r=r(YFt,"flaubert"),YFt.forEach(t),W7r=r(ISe," \u2014 "),RH=n(ISe,"A",{href:!0});var KFt=s(RH);H7r=r(KFt,"TFFlaubertForQuestionAnsweringSimple"),KFt.forEach(t),U7r=r(ISe," (FlauBERT model)"),ISe.forEach(t),J7r=i(ge),h4=n(ge,"LI",{});var qSe=s(h4);_ve=n(qSe,"STRONG",{});var ZFt=s(_ve);Y7r=r(ZFt,"funnel"),ZFt.forEach(t),K7r=r(qSe," \u2014 "),BH=n(qSe,"A",{href:!0});var e6t=s(BH);Z7r=r(e6t,"TFFunnelForQuestionAnswering"),e6t.forEach(t),eMr=r(qSe," (Funnel Transformer model)"),qSe.forEach(t),oMr=i(ge),p4=n(ge,"LI",{});var NSe=s(p4);bve=n(NSe,"STRONG",{});var o6t=s(bve);rMr=r(o6t,"gptj"),o6t.forEach(t),tMr=r(NSe," \u2014 "),PH=n(NSe,"A",{href:!0});var r6t=s(PH);aMr=r(r6t,"TFGPTJForQuestionAnswering"),r6t.forEach(t),nMr=r(NSe," (GPT-J model)"),NSe.forEach(t),sMr=i(ge),u4=n(ge,"LI",{});var jSe=s(u4);vve=n(jSe,"STRONG",{});var t6t=s(vve);lMr=r(t6t,"longformer"),t6t.forEach(t),iMr=r(jSe," \u2014 "),IH=n(jSe,"A",{href:!0});var a6t=s(IH);dMr=r(a6t,"TFLongformerForQuestionAnswering"),a6t.forEach(t),cMr=r(jSe," (Longformer model)"),jSe.forEach(t),fMr=i(ge),_4=n(ge,"LI",{});var DSe=s(_4);Fve=n(DSe,"STRONG",{});var n6t=s(Fve);mMr=r(n6t,"mobilebert"),n6t.forEach(t),gMr=r(DSe," \u2014 "),qH=n(DSe,"A",{href:!0});var s6t=s(qH);hMr=r(s6t,"TFMobileBertForQuestionAnswering"),s6t.forEach(t),pMr=r(DSe," (MobileBERT model)"),DSe.forEach(t),uMr=i(ge),b4=n(ge,"LI",{});var GSe=s(b4);Tve=n(GSe,"STRONG",{});var l6t=s(Tve);_Mr=r(l6t,"mpnet"),l6t.forEach(t),bMr=r(GSe," \u2014 "),NH=n(GSe,"A",{href:!0});var i6t=s(NH);vMr=r(i6t,"TFMPNetForQuestionAnswering"),i6t.forEach(t),FMr=r(GSe," (MPNet model)"),GSe.forEach(t),TMr=i(ge),v4=n(ge,"LI",{});var OSe=s(v4);Mve=n(OSe,"STRONG",{});var d6t=s(Mve);MMr=r(d6t,"rembert"),d6t.forEach(t),EMr=r(OSe," \u2014 "),jH=n(OSe,"A",{href:!0});var c6t=s(jH);CMr=r(c6t,"TFRemBertForQuestionAnswering"),c6t.forEach(t),wMr=r(OSe," (RemBERT model)"),OSe.forEach(t),AMr=i(ge),F4=n(ge,"LI",{});var VSe=s(F4);Eve=n(VSe,"STRONG",{});var f6t=s(Eve);yMr=r(f6t,"roberta"),f6t.forEach(t),LMr=r(VSe," \u2014 "),DH=n(VSe,"A",{href:!0});var m6t=s(DH);xMr=r(m6t,"TFRobertaForQuestionAnswering"),m6t.forEach(t),$Mr=r(VSe," (RoBERTa model)"),VSe.forEach(t),kMr=i(ge),T4=n(ge,"LI",{});var XSe=s(T4);Cve=n(XSe,"STRONG",{});var g6t=s(Cve);SMr=r(g6t,"roformer"),g6t.forEach(t),RMr=r(XSe," \u2014 "),GH=n(XSe,"A",{href:!0});var h6t=s(GH);BMr=r(h6t,"TFRoFormerForQuestionAnswering"),h6t.forEach(t),PMr=r(XSe," (RoFormer model)"),XSe.forEach(t),IMr=i(ge),M4=n(ge,"LI",{});var zSe=s(M4);wve=n(zSe,"STRONG",{});var p6t=s(wve);qMr=r(p6t,"xlm"),p6t.forEach(t),NMr=r(zSe," \u2014 "),OH=n(zSe,"A",{href:!0});var u6t=s(OH);jMr=r(u6t,"TFXLMForQuestionAnsweringSimple"),u6t.forEach(t),DMr=r(zSe," (XLM model)"),zSe.forEach(t),GMr=i(ge),E4=n(ge,"LI",{});var QSe=s(E4);Ave=n(QSe,"STRONG",{});var _6t=s(Ave);OMr=r(_6t,"xlm-roberta"),_6t.forEach(t),VMr=r(QSe," \u2014 "),VH=n(QSe,"A",{href:!0});var b6t=s(VH);XMr=r(b6t,"TFXLMRobertaForQuestionAnswering"),b6t.forEach(t),zMr=r(QSe," (XLM-RoBERTa model)"),QSe.forEach(t),QMr=i(ge),C4=n(ge,"LI",{});var WSe=s(C4);yve=n(WSe,"STRONG",{});var v6t=s(yve);WMr=r(v6t,"xlnet"),v6t.forEach(t),HMr=r(WSe," \u2014 "),XH=n(WSe,"A",{href:!0});var F6t=s(XH);UMr=r(F6t,"TFXLNetForQuestionAnsweringSimple"),F6t.forEach(t),JMr=r(WSe," (XLNet model)"),WSe.forEach(t),ge.forEach(t),YMr=i(yl),T(w4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),FIe=i(f),mc=n(f,"H2",{class:!0});var CNe=s(mc);A4=n(CNe,"A",{id:!0,class:!0,href:!0});var T6t=s(A4);Lve=n(T6t,"SPAN",{});var M6t=s(Lve);T(h8.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),KMr=i(CNe),xve=n(CNe,"SPAN",{});var E6t=s(xve);ZMr=r(E6t,"TFAutoModelForVision2Seq"),E6t.forEach(t),CNe.forEach(t),TIe=i(f),ir=n(f,"DIV",{class:!0});var Ll=s(ir);T(p8.$$.fragment,Ll),e4r=i(Ll),gc=n(Ll,"P",{});var UK=s(gc);o4r=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zH=n(UK,"A",{href:!0});var C6t=s(zH);r4r=r(C6t,"from_pretrained()"),C6t.forEach(t),t4r=r(UK," class method or the "),QH=n(UK,"A",{href:!0});var w6t=s(QH);a4r=r(w6t,"from_config()"),w6t.forEach(t),n4r=r(UK,` class
method.`),UK.forEach(t),s4r=i(Ll),u8=n(Ll,"P",{});var wNe=s(u8);l4r=r(wNe,"This class cannot be instantiated directly using "),$ve=n(wNe,"CODE",{});var A6t=s($ve);i4r=r(A6t,"__init__()"),A6t.forEach(t),d4r=r(wNe," (throws an error)."),wNe.forEach(t),c4r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var ew=s(Bt);T(_8.$$.fragment,ew),f4r=i(ew),kve=n(ew,"P",{});var y6t=s(kve);m4r=r(y6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y6t.forEach(t),g4r=i(ew),hc=n(ew,"P",{});var JK=s(hc);h4r=r(JK,`Note:
Loading a model from its configuration file does `),Sve=n(JK,"STRONG",{});var L6t=s(Sve);p4r=r(L6t,"not"),L6t.forEach(t),u4r=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(JK,"A",{href:!0});var x6t=s(WH);_4r=r(x6t,"from_pretrained()"),x6t.forEach(t),b4r=r(JK," to load the model weights."),JK.forEach(t),v4r=i(ew),T(y4.$$.fragment,ew),ew.forEach(t),F4r=i(Ll),Pr=n(Ll,"DIV",{class:!0});var xl=s(Pr);T(b8.$$.fragment,xl),T4r=i(xl),Rve=n(xl,"P",{});var $6t=s(Rve);M4r=r($6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$6t.forEach(t),E4r=i(xl),sn=n(xl,"P",{});var ow=s(sn);C4r=r(ow,"The model class to instantiate is selected based on the "),Bve=n(ow,"CODE",{});var k6t=s(Bve);w4r=r(k6t,"model_type"),k6t.forEach(t),A4r=r(ow,` property of the config object (either
passed as an argument or loaded from `),Pve=n(ow,"CODE",{});var S6t=s(Pve);y4r=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),L4r=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(ow,"CODE",{});var R6t=s(Ive);x4r=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),$4r=r(ow,":"),ow.forEach(t),k4r=i(xl),qve=n(xl,"UL",{});var B6t=s(qve);L4=n(B6t,"LI",{});var HSe=s(L4);Nve=n(HSe,"STRONG",{});var P6t=s(Nve);S4r=r(P6t,"vision-encoder-decoder"),P6t.forEach(t),R4r=r(HSe," \u2014 "),HH=n(HSe,"A",{href:!0});var I6t=s(HH);B4r=r(I6t,"TFVisionEncoderDecoderModel"),I6t.forEach(t),P4r=r(HSe," (Vision Encoder decoder model)"),HSe.forEach(t),B6t.forEach(t),I4r=i(xl),T(x4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),MIe=i(f),pc=n(f,"H2",{class:!0});var ANe=s(pc);$4=n(ANe,"A",{id:!0,class:!0,href:!0});var q6t=s($4);jve=n(q6t,"SPAN",{});var N6t=s(jve);T(v8.$$.fragment,N6t),N6t.forEach(t),q6t.forEach(t),q4r=i(ANe),Dve=n(ANe,"SPAN",{});var j6t=s(Dve);N4r=r(j6t,"TFAutoModelForSpeechSeq2Seq"),j6t.forEach(t),ANe.forEach(t),EIe=i(f),dr=n(f,"DIV",{class:!0});var $l=s(dr);T(F8.$$.fragment,$l),j4r=i($l),uc=n($l,"P",{});var YK=s(uc);D4r=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UH=n(YK,"A",{href:!0});var D6t=s(UH);G4r=r(D6t,"from_pretrained()"),D6t.forEach(t),O4r=r(YK," class method or the "),JH=n(YK,"A",{href:!0});var G6t=s(JH);V4r=r(G6t,"from_config()"),G6t.forEach(t),X4r=r(YK,` class
method.`),YK.forEach(t),z4r=i($l),T8=n($l,"P",{});var yNe=s(T8);Q4r=r(yNe,"This class cannot be instantiated directly using "),Gve=n(yNe,"CODE",{});var O6t=s(Gve);W4r=r(O6t,"__init__()"),O6t.forEach(t),H4r=r(yNe," (throws an error)."),yNe.forEach(t),U4r=i($l),Pt=n($l,"DIV",{class:!0});var rw=s(Pt);T(M8.$$.fragment,rw),J4r=i(rw),Ove=n(rw,"P",{});var V6t=s(Ove);Y4r=r(V6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),V6t.forEach(t),K4r=i(rw),_c=n(rw,"P",{});var KK=s(_c);Z4r=r(KK,`Note:
Loading a model from its configuration file does `),Vve=n(KK,"STRONG",{});var X6t=s(Vve);eEr=r(X6t,"not"),X6t.forEach(t),oEr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(KK,"A",{href:!0});var z6t=s(YH);rEr=r(z6t,"from_pretrained()"),z6t.forEach(t),tEr=r(KK," to load the model weights."),KK.forEach(t),aEr=i(rw),T(k4.$$.fragment,rw),rw.forEach(t),nEr=i($l),Ir=n($l,"DIV",{class:!0});var kl=s(Ir);T(E8.$$.fragment,kl),sEr=i(kl),Xve=n(kl,"P",{});var Q6t=s(Xve);lEr=r(Q6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Q6t.forEach(t),iEr=i(kl),ln=n(kl,"P",{});var tw=s(ln);dEr=r(tw,"The model class to instantiate is selected based on the "),zve=n(tw,"CODE",{});var W6t=s(zve);cEr=r(W6t,"model_type"),W6t.forEach(t),fEr=r(tw,` property of the config object (either
passed as an argument or loaded from `),Qve=n(tw,"CODE",{});var H6t=s(Qve);mEr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),gEr=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(tw,"CODE",{});var U6t=s(Wve);hEr=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),pEr=r(tw,":"),tw.forEach(t),uEr=i(kl),Hve=n(kl,"UL",{});var J6t=s(Hve);S4=n(J6t,"LI",{});var USe=s(S4);Uve=n(USe,"STRONG",{});var Y6t=s(Uve);_Er=r(Y6t,"speech_to_text"),Y6t.forEach(t),bEr=r(USe," \u2014 "),KH=n(USe,"A",{href:!0});var K6t=s(KH);vEr=r(K6t,"TFSpeech2TextForConditionalGeneration"),K6t.forEach(t),FEr=r(USe," (Speech2Text model)"),USe.forEach(t),J6t.forEach(t),TEr=i(kl),T(R4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),CIe=i(f),bc=n(f,"H2",{class:!0});var LNe=s(bc);B4=n(LNe,"A",{id:!0,class:!0,href:!0});var Z6t=s(B4);Jve=n(Z6t,"SPAN",{});var eTt=s(Jve);T(C8.$$.fragment,eTt),eTt.forEach(t),Z6t.forEach(t),MEr=i(LNe),Yve=n(LNe,"SPAN",{});var oTt=s(Yve);EEr=r(oTt,"FlaxAutoModel"),oTt.forEach(t),LNe.forEach(t),wIe=i(f),cr=n(f,"DIV",{class:!0});var Sl=s(cr);T(w8.$$.fragment,Sl),CEr=i(Sl),vc=n(Sl,"P",{});var ZK=s(vc);wEr=r(ZK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZH=n(ZK,"A",{href:!0});var rTt=s(ZH);AEr=r(rTt,"from_pretrained()"),rTt.forEach(t),yEr=r(ZK," class method or the "),eU=n(ZK,"A",{href:!0});var tTt=s(eU);LEr=r(tTt,"from_config()"),tTt.forEach(t),xEr=r(ZK,` class
method.`),ZK.forEach(t),$Er=i(Sl),A8=n(Sl,"P",{});var xNe=s(A8);kEr=r(xNe,"This class cannot be instantiated directly using "),Kve=n(xNe,"CODE",{});var aTt=s(Kve);SEr=r(aTt,"__init__()"),aTt.forEach(t),REr=r(xNe," (throws an error)."),xNe.forEach(t),BEr=i(Sl),It=n(Sl,"DIV",{class:!0});var aw=s(It);T(y8.$$.fragment,aw),PEr=i(aw),Zve=n(aw,"P",{});var nTt=s(Zve);IEr=r(nTt,"Instantiates one of the base model classes of the library from a configuration."),nTt.forEach(t),qEr=i(aw),Fc=n(aw,"P",{});var eZ=s(Fc);NEr=r(eZ,`Note:
Loading a model from its configuration file does `),eFe=n(eZ,"STRONG",{});var sTt=s(eFe);jEr=r(sTt,"not"),sTt.forEach(t),DEr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(eZ,"A",{href:!0});var lTt=s(oU);GEr=r(lTt,"from_pretrained()"),lTt.forEach(t),OEr=r(eZ," to load the model weights."),eZ.forEach(t),VEr=i(aw),T(P4.$$.fragment,aw),aw.forEach(t),XEr=i(Sl),qr=n(Sl,"DIV",{class:!0});var Rl=s(qr);T(L8.$$.fragment,Rl),zEr=i(Rl),oFe=n(Rl,"P",{});var iTt=s(oFe);QEr=r(iTt,"Instantiate one of the base model classes of the library from a pretrained model."),iTt.forEach(t),WEr=i(Rl),dn=n(Rl,"P",{});var nw=s(dn);HEr=r(nw,"The model class to instantiate is selected based on the "),rFe=n(nw,"CODE",{});var dTt=s(rFe);UEr=r(dTt,"model_type"),dTt.forEach(t),JEr=r(nw,` property of the config object (either
passed as an argument or loaded from `),tFe=n(nw,"CODE",{});var cTt=s(tFe);YEr=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),KEr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(nw,"CODE",{});var fTt=s(aFe);ZEr=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),e5r=r(nw,":"),nw.forEach(t),o5r=i(Rl),re=n(Rl,"UL",{});var ne=s(re);I4=n(ne,"LI",{});var JSe=s(I4);nFe=n(JSe,"STRONG",{});var mTt=s(nFe);r5r=r(mTt,"albert"),mTt.forEach(t),t5r=r(JSe," \u2014 "),rU=n(JSe,"A",{href:!0});var gTt=s(rU);a5r=r(gTt,"FlaxAlbertModel"),gTt.forEach(t),n5r=r(JSe," (ALBERT model)"),JSe.forEach(t),s5r=i(ne),q4=n(ne,"LI",{});var YSe=s(q4);sFe=n(YSe,"STRONG",{});var hTt=s(sFe);l5r=r(hTt,"bart"),hTt.forEach(t),i5r=r(YSe," \u2014 "),tU=n(YSe,"A",{href:!0});var pTt=s(tU);d5r=r(pTt,"FlaxBartModel"),pTt.forEach(t),c5r=r(YSe," (BART model)"),YSe.forEach(t),f5r=i(ne),N4=n(ne,"LI",{});var KSe=s(N4);lFe=n(KSe,"STRONG",{});var uTt=s(lFe);m5r=r(uTt,"beit"),uTt.forEach(t),g5r=r(KSe," \u2014 "),aU=n(KSe,"A",{href:!0});var _Tt=s(aU);h5r=r(_Tt,"FlaxBeitModel"),_Tt.forEach(t),p5r=r(KSe," (BEiT model)"),KSe.forEach(t),u5r=i(ne),j4=n(ne,"LI",{});var ZSe=s(j4);iFe=n(ZSe,"STRONG",{});var bTt=s(iFe);_5r=r(bTt,"bert"),bTt.forEach(t),b5r=r(ZSe," \u2014 "),nU=n(ZSe,"A",{href:!0});var vTt=s(nU);v5r=r(vTt,"FlaxBertModel"),vTt.forEach(t),F5r=r(ZSe," (BERT model)"),ZSe.forEach(t),T5r=i(ne),D4=n(ne,"LI",{});var eRe=s(D4);dFe=n(eRe,"STRONG",{});var FTt=s(dFe);M5r=r(FTt,"big_bird"),FTt.forEach(t),E5r=r(eRe," \u2014 "),sU=n(eRe,"A",{href:!0});var TTt=s(sU);C5r=r(TTt,"FlaxBigBirdModel"),TTt.forEach(t),w5r=r(eRe," (BigBird model)"),eRe.forEach(t),A5r=i(ne),G4=n(ne,"LI",{});var oRe=s(G4);cFe=n(oRe,"STRONG",{});var MTt=s(cFe);y5r=r(MTt,"blenderbot"),MTt.forEach(t),L5r=r(oRe," \u2014 "),lU=n(oRe,"A",{href:!0});var ETt=s(lU);x5r=r(ETt,"FlaxBlenderbotModel"),ETt.forEach(t),$5r=r(oRe," (Blenderbot model)"),oRe.forEach(t),k5r=i(ne),O4=n(ne,"LI",{});var rRe=s(O4);fFe=n(rRe,"STRONG",{});var CTt=s(fFe);S5r=r(CTt,"blenderbot-small"),CTt.forEach(t),R5r=r(rRe," \u2014 "),iU=n(rRe,"A",{href:!0});var wTt=s(iU);B5r=r(wTt,"FlaxBlenderbotSmallModel"),wTt.forEach(t),P5r=r(rRe," (BlenderbotSmall model)"),rRe.forEach(t),I5r=i(ne),V4=n(ne,"LI",{});var tRe=s(V4);mFe=n(tRe,"STRONG",{});var ATt=s(mFe);q5r=r(ATt,"clip"),ATt.forEach(t),N5r=r(tRe," \u2014 "),dU=n(tRe,"A",{href:!0});var yTt=s(dU);j5r=r(yTt,"FlaxCLIPModel"),yTt.forEach(t),D5r=r(tRe," (CLIP model)"),tRe.forEach(t),G5r=i(ne),X4=n(ne,"LI",{});var aRe=s(X4);gFe=n(aRe,"STRONG",{});var LTt=s(gFe);O5r=r(LTt,"distilbert"),LTt.forEach(t),V5r=r(aRe," \u2014 "),cU=n(aRe,"A",{href:!0});var xTt=s(cU);X5r=r(xTt,"FlaxDistilBertModel"),xTt.forEach(t),z5r=r(aRe," (DistilBERT model)"),aRe.forEach(t),Q5r=i(ne),z4=n(ne,"LI",{});var nRe=s(z4);hFe=n(nRe,"STRONG",{});var $Tt=s(hFe);W5r=r($Tt,"electra"),$Tt.forEach(t),H5r=r(nRe," \u2014 "),fU=n(nRe,"A",{href:!0});var kTt=s(fU);U5r=r(kTt,"FlaxElectraModel"),kTt.forEach(t),J5r=r(nRe," (ELECTRA model)"),nRe.forEach(t),Y5r=i(ne),Q4=n(ne,"LI",{});var sRe=s(Q4);pFe=n(sRe,"STRONG",{});var STt=s(pFe);K5r=r(STt,"gpt2"),STt.forEach(t),Z5r=r(sRe," \u2014 "),mU=n(sRe,"A",{href:!0});var RTt=s(mU);eCr=r(RTt,"FlaxGPT2Model"),RTt.forEach(t),oCr=r(sRe," (OpenAI GPT-2 model)"),sRe.forEach(t),rCr=i(ne),W4=n(ne,"LI",{});var lRe=s(W4);uFe=n(lRe,"STRONG",{});var BTt=s(uFe);tCr=r(BTt,"gpt_neo"),BTt.forEach(t),aCr=r(lRe," \u2014 "),gU=n(lRe,"A",{href:!0});var PTt=s(gU);nCr=r(PTt,"FlaxGPTNeoModel"),PTt.forEach(t),sCr=r(lRe," (GPT Neo model)"),lRe.forEach(t),lCr=i(ne),H4=n(ne,"LI",{});var iRe=s(H4);_Fe=n(iRe,"STRONG",{});var ITt=s(_Fe);iCr=r(ITt,"gptj"),ITt.forEach(t),dCr=r(iRe," \u2014 "),hU=n(iRe,"A",{href:!0});var qTt=s(hU);cCr=r(qTt,"FlaxGPTJModel"),qTt.forEach(t),fCr=r(iRe," (GPT-J model)"),iRe.forEach(t),mCr=i(ne),U4=n(ne,"LI",{});var dRe=s(U4);bFe=n(dRe,"STRONG",{});var NTt=s(bFe);gCr=r(NTt,"marian"),NTt.forEach(t),hCr=r(dRe," \u2014 "),pU=n(dRe,"A",{href:!0});var jTt=s(pU);pCr=r(jTt,"FlaxMarianModel"),jTt.forEach(t),uCr=r(dRe," (Marian model)"),dRe.forEach(t),_Cr=i(ne),J4=n(ne,"LI",{});var cRe=s(J4);vFe=n(cRe,"STRONG",{});var DTt=s(vFe);bCr=r(DTt,"mbart"),DTt.forEach(t),vCr=r(cRe," \u2014 "),uU=n(cRe,"A",{href:!0});var GTt=s(uU);FCr=r(GTt,"FlaxMBartModel"),GTt.forEach(t),TCr=r(cRe," (mBART model)"),cRe.forEach(t),MCr=i(ne),Y4=n(ne,"LI",{});var fRe=s(Y4);FFe=n(fRe,"STRONG",{});var OTt=s(FFe);ECr=r(OTt,"mt5"),OTt.forEach(t),CCr=r(fRe," \u2014 "),_U=n(fRe,"A",{href:!0});var VTt=s(_U);wCr=r(VTt,"FlaxMT5Model"),VTt.forEach(t),ACr=r(fRe," (mT5 model)"),fRe.forEach(t),yCr=i(ne),K4=n(ne,"LI",{});var mRe=s(K4);TFe=n(mRe,"STRONG",{});var XTt=s(TFe);LCr=r(XTt,"pegasus"),XTt.forEach(t),xCr=r(mRe," \u2014 "),bU=n(mRe,"A",{href:!0});var zTt=s(bU);$Cr=r(zTt,"FlaxPegasusModel"),zTt.forEach(t),kCr=r(mRe," (Pegasus model)"),mRe.forEach(t),SCr=i(ne),Z4=n(ne,"LI",{});var gRe=s(Z4);MFe=n(gRe,"STRONG",{});var QTt=s(MFe);RCr=r(QTt,"roberta"),QTt.forEach(t),BCr=r(gRe," \u2014 "),vU=n(gRe,"A",{href:!0});var WTt=s(vU);PCr=r(WTt,"FlaxRobertaModel"),WTt.forEach(t),ICr=r(gRe," (RoBERTa model)"),gRe.forEach(t),qCr=i(ne),eE=n(ne,"LI",{});var hRe=s(eE);EFe=n(hRe,"STRONG",{});var HTt=s(EFe);NCr=r(HTt,"roformer"),HTt.forEach(t),jCr=r(hRe," \u2014 "),FU=n(hRe,"A",{href:!0});var UTt=s(FU);DCr=r(UTt,"FlaxRoFormerModel"),UTt.forEach(t),GCr=r(hRe," (RoFormer model)"),hRe.forEach(t),OCr=i(ne),oE=n(ne,"LI",{});var pRe=s(oE);CFe=n(pRe,"STRONG",{});var JTt=s(CFe);VCr=r(JTt,"t5"),JTt.forEach(t),XCr=r(pRe," \u2014 "),TU=n(pRe,"A",{href:!0});var YTt=s(TU);zCr=r(YTt,"FlaxT5Model"),YTt.forEach(t),QCr=r(pRe," (T5 model)"),pRe.forEach(t),WCr=i(ne),rE=n(ne,"LI",{});var uRe=s(rE);wFe=n(uRe,"STRONG",{});var KTt=s(wFe);HCr=r(KTt,"vision-text-dual-encoder"),KTt.forEach(t),UCr=r(uRe," \u2014 "),MU=n(uRe,"A",{href:!0});var ZTt=s(MU);JCr=r(ZTt,"FlaxVisionTextDualEncoderModel"),ZTt.forEach(t),YCr=r(uRe," (VisionTextDualEncoder model)"),uRe.forEach(t),KCr=i(ne),tE=n(ne,"LI",{});var _Re=s(tE);AFe=n(_Re,"STRONG",{});var e7t=s(AFe);ZCr=r(e7t,"vit"),e7t.forEach(t),e3r=r(_Re," \u2014 "),EU=n(_Re,"A",{href:!0});var o7t=s(EU);o3r=r(o7t,"FlaxViTModel"),o7t.forEach(t),r3r=r(_Re," (ViT model)"),_Re.forEach(t),t3r=i(ne),aE=n(ne,"LI",{});var bRe=s(aE);yFe=n(bRe,"STRONG",{});var r7t=s(yFe);a3r=r(r7t,"wav2vec2"),r7t.forEach(t),n3r=r(bRe," \u2014 "),CU=n(bRe,"A",{href:!0});var t7t=s(CU);s3r=r(t7t,"FlaxWav2Vec2Model"),t7t.forEach(t),l3r=r(bRe," (Wav2Vec2 model)"),bRe.forEach(t),i3r=i(ne),nE=n(ne,"LI",{});var vRe=s(nE);LFe=n(vRe,"STRONG",{});var a7t=s(LFe);d3r=r(a7t,"xglm"),a7t.forEach(t),c3r=r(vRe," \u2014 "),wU=n(vRe,"A",{href:!0});var n7t=s(wU);f3r=r(n7t,"FlaxXGLMModel"),n7t.forEach(t),m3r=r(vRe," (XGLM model)"),vRe.forEach(t),g3r=i(ne),sE=n(ne,"LI",{});var FRe=s(sE);xFe=n(FRe,"STRONG",{});var s7t=s(xFe);h3r=r(s7t,"xlm-roberta"),s7t.forEach(t),p3r=r(FRe," \u2014 "),AU=n(FRe,"A",{href:!0});var l7t=s(AU);u3r=r(l7t,"FlaxXLMRobertaModel"),l7t.forEach(t),_3r=r(FRe," (XLM-RoBERTa model)"),FRe.forEach(t),ne.forEach(t),b3r=i(Rl),T(lE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),AIe=i(f),Tc=n(f,"H2",{class:!0});var $Ne=s(Tc);iE=n($Ne,"A",{id:!0,class:!0,href:!0});var i7t=s(iE);$Fe=n(i7t,"SPAN",{});var d7t=s($Fe);T(x8.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),v3r=i($Ne),kFe=n($Ne,"SPAN",{});var c7t=s(kFe);F3r=r(c7t,"FlaxAutoModelForCausalLM"),c7t.forEach(t),$Ne.forEach(t),yIe=i(f),fr=n(f,"DIV",{class:!0});var Bl=s(fr);T($8.$$.fragment,Bl),T3r=i(Bl),Mc=n(Bl,"P",{});var oZ=s(Mc);M3r=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yU=n(oZ,"A",{href:!0});var f7t=s(yU);E3r=r(f7t,"from_pretrained()"),f7t.forEach(t),C3r=r(oZ," class method or the "),LU=n(oZ,"A",{href:!0});var m7t=s(LU);w3r=r(m7t,"from_config()"),m7t.forEach(t),A3r=r(oZ,` class
method.`),oZ.forEach(t),y3r=i(Bl),k8=n(Bl,"P",{});var kNe=s(k8);L3r=r(kNe,"This class cannot be instantiated directly using "),SFe=n(kNe,"CODE",{});var g7t=s(SFe);x3r=r(g7t,"__init__()"),g7t.forEach(t),$3r=r(kNe," (throws an error)."),kNe.forEach(t),k3r=i(Bl),qt=n(Bl,"DIV",{class:!0});var sw=s(qt);T(S8.$$.fragment,sw),S3r=i(sw),RFe=n(sw,"P",{});var h7t=s(RFe);R3r=r(h7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),h7t.forEach(t),B3r=i(sw),Ec=n(sw,"P",{});var rZ=s(Ec);P3r=r(rZ,`Note:
Loading a model from its configuration file does `),BFe=n(rZ,"STRONG",{});var p7t=s(BFe);I3r=r(p7t,"not"),p7t.forEach(t),q3r=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(rZ,"A",{href:!0});var u7t=s(xU);N3r=r(u7t,"from_pretrained()"),u7t.forEach(t),j3r=r(rZ," to load the model weights."),rZ.forEach(t),D3r=i(sw),T(dE.$$.fragment,sw),sw.forEach(t),G3r=i(Bl),Nr=n(Bl,"DIV",{class:!0});var Pl=s(Nr);T(R8.$$.fragment,Pl),O3r=i(Pl),PFe=n(Pl,"P",{});var _7t=s(PFe);V3r=r(_7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_7t.forEach(t),X3r=i(Pl),cn=n(Pl,"P",{});var lw=s(cn);z3r=r(lw,"The model class to instantiate is selected based on the "),IFe=n(lw,"CODE",{});var b7t=s(IFe);Q3r=r(b7t,"model_type"),b7t.forEach(t),W3r=r(lw,` property of the config object (either
passed as an argument or loaded from `),qFe=n(lw,"CODE",{});var v7t=s(qFe);H3r=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),U3r=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(lw,"CODE",{});var F7t=s(NFe);J3r=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),Y3r=r(lw,":"),lw.forEach(t),K3r=i(Pl),ke=n(Pl,"UL",{});var Oe=s(ke);cE=n(Oe,"LI",{});var TRe=s(cE);jFe=n(TRe,"STRONG",{});var T7t=s(jFe);Z3r=r(T7t,"bart"),T7t.forEach(t),ewr=r(TRe," \u2014 "),$U=n(TRe,"A",{href:!0});var M7t=s($U);owr=r(M7t,"FlaxBartForCausalLM"),M7t.forEach(t),rwr=r(TRe," (BART model)"),TRe.forEach(t),twr=i(Oe),fE=n(Oe,"LI",{});var MRe=s(fE);DFe=n(MRe,"STRONG",{});var E7t=s(DFe);awr=r(E7t,"bert"),E7t.forEach(t),nwr=r(MRe," \u2014 "),kU=n(MRe,"A",{href:!0});var C7t=s(kU);swr=r(C7t,"FlaxBertForCausalLM"),C7t.forEach(t),lwr=r(MRe," (BERT model)"),MRe.forEach(t),iwr=i(Oe),mE=n(Oe,"LI",{});var ERe=s(mE);GFe=n(ERe,"STRONG",{});var w7t=s(GFe);dwr=r(w7t,"big_bird"),w7t.forEach(t),cwr=r(ERe," \u2014 "),SU=n(ERe,"A",{href:!0});var A7t=s(SU);fwr=r(A7t,"FlaxBigBirdForCausalLM"),A7t.forEach(t),mwr=r(ERe," (BigBird model)"),ERe.forEach(t),gwr=i(Oe),gE=n(Oe,"LI",{});var CRe=s(gE);OFe=n(CRe,"STRONG",{});var y7t=s(OFe);hwr=r(y7t,"electra"),y7t.forEach(t),pwr=r(CRe," \u2014 "),RU=n(CRe,"A",{href:!0});var L7t=s(RU);uwr=r(L7t,"FlaxElectraForCausalLM"),L7t.forEach(t),_wr=r(CRe," (ELECTRA model)"),CRe.forEach(t),bwr=i(Oe),hE=n(Oe,"LI",{});var wRe=s(hE);VFe=n(wRe,"STRONG",{});var x7t=s(VFe);vwr=r(x7t,"gpt2"),x7t.forEach(t),Fwr=r(wRe," \u2014 "),BU=n(wRe,"A",{href:!0});var $7t=s(BU);Twr=r($7t,"FlaxGPT2LMHeadModel"),$7t.forEach(t),Mwr=r(wRe," (OpenAI GPT-2 model)"),wRe.forEach(t),Ewr=i(Oe),pE=n(Oe,"LI",{});var ARe=s(pE);XFe=n(ARe,"STRONG",{});var k7t=s(XFe);Cwr=r(k7t,"gpt_neo"),k7t.forEach(t),wwr=r(ARe," \u2014 "),PU=n(ARe,"A",{href:!0});var S7t=s(PU);Awr=r(S7t,"FlaxGPTNeoForCausalLM"),S7t.forEach(t),ywr=r(ARe," (GPT Neo model)"),ARe.forEach(t),Lwr=i(Oe),uE=n(Oe,"LI",{});var yRe=s(uE);zFe=n(yRe,"STRONG",{});var R7t=s(zFe);xwr=r(R7t,"gptj"),R7t.forEach(t),$wr=r(yRe," \u2014 "),IU=n(yRe,"A",{href:!0});var B7t=s(IU);kwr=r(B7t,"FlaxGPTJForCausalLM"),B7t.forEach(t),Swr=r(yRe," (GPT-J model)"),yRe.forEach(t),Rwr=i(Oe),_E=n(Oe,"LI",{});var LRe=s(_E);QFe=n(LRe,"STRONG",{});var P7t=s(QFe);Bwr=r(P7t,"roberta"),P7t.forEach(t),Pwr=r(LRe," \u2014 "),qU=n(LRe,"A",{href:!0});var I7t=s(qU);Iwr=r(I7t,"FlaxRobertaForCausalLM"),I7t.forEach(t),qwr=r(LRe," (RoBERTa model)"),LRe.forEach(t),Nwr=i(Oe),bE=n(Oe,"LI",{});var xRe=s(bE);WFe=n(xRe,"STRONG",{});var q7t=s(WFe);jwr=r(q7t,"xglm"),q7t.forEach(t),Dwr=r(xRe," \u2014 "),NU=n(xRe,"A",{href:!0});var N7t=s(NU);Gwr=r(N7t,"FlaxXGLMForCausalLM"),N7t.forEach(t),Owr=r(xRe," (XGLM model)"),xRe.forEach(t),Oe.forEach(t),Vwr=i(Pl),T(vE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),LIe=i(f),Cc=n(f,"H2",{class:!0});var SNe=s(Cc);FE=n(SNe,"A",{id:!0,class:!0,href:!0});var j7t=s(FE);HFe=n(j7t,"SPAN",{});var D7t=s(HFe);T(B8.$$.fragment,D7t),D7t.forEach(t),j7t.forEach(t),Xwr=i(SNe),UFe=n(SNe,"SPAN",{});var G7t=s(UFe);zwr=r(G7t,"FlaxAutoModelForPreTraining"),G7t.forEach(t),SNe.forEach(t),xIe=i(f),mr=n(f,"DIV",{class:!0});var Il=s(mr);T(P8.$$.fragment,Il),Qwr=i(Il),wc=n(Il,"P",{});var tZ=s(wc);Wwr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jU=n(tZ,"A",{href:!0});var O7t=s(jU);Hwr=r(O7t,"from_pretrained()"),O7t.forEach(t),Uwr=r(tZ," class method or the "),DU=n(tZ,"A",{href:!0});var V7t=s(DU);Jwr=r(V7t,"from_config()"),V7t.forEach(t),Ywr=r(tZ,` class
method.`),tZ.forEach(t),Kwr=i(Il),I8=n(Il,"P",{});var RNe=s(I8);Zwr=r(RNe,"This class cannot be instantiated directly using "),JFe=n(RNe,"CODE",{});var X7t=s(JFe);eAr=r(X7t,"__init__()"),X7t.forEach(t),oAr=r(RNe," (throws an error)."),RNe.forEach(t),rAr=i(Il),Nt=n(Il,"DIV",{class:!0});var iw=s(Nt);T(q8.$$.fragment,iw),tAr=i(iw),YFe=n(iw,"P",{});var z7t=s(YFe);aAr=r(z7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),z7t.forEach(t),nAr=i(iw),Ac=n(iw,"P",{});var aZ=s(Ac);sAr=r(aZ,`Note:
Loading a model from its configuration file does `),KFe=n(aZ,"STRONG",{});var Q7t=s(KFe);lAr=r(Q7t,"not"),Q7t.forEach(t),iAr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(aZ,"A",{href:!0});var W7t=s(GU);dAr=r(W7t,"from_pretrained()"),W7t.forEach(t),cAr=r(aZ," to load the model weights."),aZ.forEach(t),fAr=i(iw),T(TE.$$.fragment,iw),iw.forEach(t),mAr=i(Il),jr=n(Il,"DIV",{class:!0});var ql=s(jr);T(N8.$$.fragment,ql),gAr=i(ql),ZFe=n(ql,"P",{});var H7t=s(ZFe);hAr=r(H7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),H7t.forEach(t),pAr=i(ql),fn=n(ql,"P",{});var dw=s(fn);uAr=r(dw,"The model class to instantiate is selected based on the "),e6e=n(dw,"CODE",{});var U7t=s(e6e);_Ar=r(U7t,"model_type"),U7t.forEach(t),bAr=r(dw,` property of the config object (either
passed as an argument or loaded from `),o6e=n(dw,"CODE",{});var J7t=s(o6e);vAr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),FAr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(dw,"CODE",{});var Y7t=s(r6e);TAr=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),MAr=r(dw,":"),dw.forEach(t),EAr=i(ql),Me=n(ql,"UL",{});var we=s(Me);ME=n(we,"LI",{});var $Re=s(ME);t6e=n($Re,"STRONG",{});var K7t=s(t6e);CAr=r(K7t,"albert"),K7t.forEach(t),wAr=r($Re," \u2014 "),OU=n($Re,"A",{href:!0});var Z7t=s(OU);AAr=r(Z7t,"FlaxAlbertForPreTraining"),Z7t.forEach(t),yAr=r($Re," (ALBERT model)"),$Re.forEach(t),LAr=i(we),EE=n(we,"LI",{});var kRe=s(EE);a6e=n(kRe,"STRONG",{});var eMt=s(a6e);xAr=r(eMt,"bart"),eMt.forEach(t),$Ar=r(kRe," \u2014 "),VU=n(kRe,"A",{href:!0});var oMt=s(VU);kAr=r(oMt,"FlaxBartForConditionalGeneration"),oMt.forEach(t),SAr=r(kRe," (BART model)"),kRe.forEach(t),RAr=i(we),CE=n(we,"LI",{});var SRe=s(CE);n6e=n(SRe,"STRONG",{});var rMt=s(n6e);BAr=r(rMt,"bert"),rMt.forEach(t),PAr=r(SRe," \u2014 "),XU=n(SRe,"A",{href:!0});var tMt=s(XU);IAr=r(tMt,"FlaxBertForPreTraining"),tMt.forEach(t),qAr=r(SRe," (BERT model)"),SRe.forEach(t),NAr=i(we),wE=n(we,"LI",{});var RRe=s(wE);s6e=n(RRe,"STRONG",{});var aMt=s(s6e);jAr=r(aMt,"big_bird"),aMt.forEach(t),DAr=r(RRe," \u2014 "),zU=n(RRe,"A",{href:!0});var nMt=s(zU);GAr=r(nMt,"FlaxBigBirdForPreTraining"),nMt.forEach(t),OAr=r(RRe," (BigBird model)"),RRe.forEach(t),VAr=i(we),AE=n(we,"LI",{});var BRe=s(AE);l6e=n(BRe,"STRONG",{});var sMt=s(l6e);XAr=r(sMt,"electra"),sMt.forEach(t),zAr=r(BRe," \u2014 "),QU=n(BRe,"A",{href:!0});var lMt=s(QU);QAr=r(lMt,"FlaxElectraForPreTraining"),lMt.forEach(t),WAr=r(BRe," (ELECTRA model)"),BRe.forEach(t),HAr=i(we),yE=n(we,"LI",{});var PRe=s(yE);i6e=n(PRe,"STRONG",{});var iMt=s(i6e);UAr=r(iMt,"mbart"),iMt.forEach(t),JAr=r(PRe," \u2014 "),WU=n(PRe,"A",{href:!0});var dMt=s(WU);YAr=r(dMt,"FlaxMBartForConditionalGeneration"),dMt.forEach(t),KAr=r(PRe," (mBART model)"),PRe.forEach(t),ZAr=i(we),LE=n(we,"LI",{});var IRe=s(LE);d6e=n(IRe,"STRONG",{});var cMt=s(d6e);eyr=r(cMt,"mt5"),cMt.forEach(t),oyr=r(IRe," \u2014 "),HU=n(IRe,"A",{href:!0});var fMt=s(HU);ryr=r(fMt,"FlaxMT5ForConditionalGeneration"),fMt.forEach(t),tyr=r(IRe," (mT5 model)"),IRe.forEach(t),ayr=i(we),xE=n(we,"LI",{});var qRe=s(xE);c6e=n(qRe,"STRONG",{});var mMt=s(c6e);nyr=r(mMt,"roberta"),mMt.forEach(t),syr=r(qRe," \u2014 "),UU=n(qRe,"A",{href:!0});var gMt=s(UU);lyr=r(gMt,"FlaxRobertaForMaskedLM"),gMt.forEach(t),iyr=r(qRe," (RoBERTa model)"),qRe.forEach(t),dyr=i(we),$E=n(we,"LI",{});var NRe=s($E);f6e=n(NRe,"STRONG",{});var hMt=s(f6e);cyr=r(hMt,"roformer"),hMt.forEach(t),fyr=r(NRe," \u2014 "),JU=n(NRe,"A",{href:!0});var pMt=s(JU);myr=r(pMt,"FlaxRoFormerForMaskedLM"),pMt.forEach(t),gyr=r(NRe," (RoFormer model)"),NRe.forEach(t),hyr=i(we),kE=n(we,"LI",{});var jRe=s(kE);m6e=n(jRe,"STRONG",{});var uMt=s(m6e);pyr=r(uMt,"t5"),uMt.forEach(t),uyr=r(jRe," \u2014 "),YU=n(jRe,"A",{href:!0});var _Mt=s(YU);_yr=r(_Mt,"FlaxT5ForConditionalGeneration"),_Mt.forEach(t),byr=r(jRe," (T5 model)"),jRe.forEach(t),vyr=i(we),SE=n(we,"LI",{});var DRe=s(SE);g6e=n(DRe,"STRONG",{});var bMt=s(g6e);Fyr=r(bMt,"wav2vec2"),bMt.forEach(t),Tyr=r(DRe," \u2014 "),KU=n(DRe,"A",{href:!0});var vMt=s(KU);Myr=r(vMt,"FlaxWav2Vec2ForPreTraining"),vMt.forEach(t),Eyr=r(DRe," (Wav2Vec2 model)"),DRe.forEach(t),Cyr=i(we),RE=n(we,"LI",{});var GRe=s(RE);h6e=n(GRe,"STRONG",{});var FMt=s(h6e);wyr=r(FMt,"xlm-roberta"),FMt.forEach(t),Ayr=r(GRe," \u2014 "),ZU=n(GRe,"A",{href:!0});var TMt=s(ZU);yyr=r(TMt,"FlaxXLMRobertaForMaskedLM"),TMt.forEach(t),Lyr=r(GRe," (XLM-RoBERTa model)"),GRe.forEach(t),we.forEach(t),xyr=i(ql),T(BE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),$Ie=i(f),yc=n(f,"H2",{class:!0});var BNe=s(yc);PE=n(BNe,"A",{id:!0,class:!0,href:!0});var MMt=s(PE);p6e=n(MMt,"SPAN",{});var EMt=s(p6e);T(j8.$$.fragment,EMt),EMt.forEach(t),MMt.forEach(t),$yr=i(BNe),u6e=n(BNe,"SPAN",{});var CMt=s(u6e);kyr=r(CMt,"FlaxAutoModelForMaskedLM"),CMt.forEach(t),BNe.forEach(t),kIe=i(f),gr=n(f,"DIV",{class:!0});var Nl=s(gr);T(D8.$$.fragment,Nl),Syr=i(Nl),Lc=n(Nl,"P",{});var nZ=s(Lc);Ryr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eJ=n(nZ,"A",{href:!0});var wMt=s(eJ);Byr=r(wMt,"from_pretrained()"),wMt.forEach(t),Pyr=r(nZ," class method or the "),oJ=n(nZ,"A",{href:!0});var AMt=s(oJ);Iyr=r(AMt,"from_config()"),AMt.forEach(t),qyr=r(nZ,` class
method.`),nZ.forEach(t),Nyr=i(Nl),G8=n(Nl,"P",{});var PNe=s(G8);jyr=r(PNe,"This class cannot be instantiated directly using "),_6e=n(PNe,"CODE",{});var yMt=s(_6e);Dyr=r(yMt,"__init__()"),yMt.forEach(t),Gyr=r(PNe," (throws an error)."),PNe.forEach(t),Oyr=i(Nl),jt=n(Nl,"DIV",{class:!0});var cw=s(jt);T(O8.$$.fragment,cw),Vyr=i(cw),b6e=n(cw,"P",{});var LMt=s(b6e);Xyr=r(LMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LMt.forEach(t),zyr=i(cw),xc=n(cw,"P",{});var sZ=s(xc);Qyr=r(sZ,`Note:
Loading a model from its configuration file does `),v6e=n(sZ,"STRONG",{});var xMt=s(v6e);Wyr=r(xMt,"not"),xMt.forEach(t),Hyr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(sZ,"A",{href:!0});var $Mt=s(rJ);Uyr=r($Mt,"from_pretrained()"),$Mt.forEach(t),Jyr=r(sZ," to load the model weights."),sZ.forEach(t),Yyr=i(cw),T(IE.$$.fragment,cw),cw.forEach(t),Kyr=i(Nl),Dr=n(Nl,"DIV",{class:!0});var jl=s(Dr);T(V8.$$.fragment,jl),Zyr=i(jl),F6e=n(jl,"P",{});var kMt=s(F6e);eLr=r(kMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kMt.forEach(t),oLr=i(jl),mn=n(jl,"P",{});var fw=s(mn);rLr=r(fw,"The model class to instantiate is selected based on the "),T6e=n(fw,"CODE",{});var SMt=s(T6e);tLr=r(SMt,"model_type"),SMt.forEach(t),aLr=r(fw,` property of the config object (either
passed as an argument or loaded from `),M6e=n(fw,"CODE",{});var RMt=s(M6e);nLr=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),sLr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=n(fw,"CODE",{});var BMt=s(E6e);lLr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),iLr=r(fw,":"),fw.forEach(t),dLr=i(jl),Le=n(jl,"UL",{});var Be=s(Le);qE=n(Be,"LI",{});var ORe=s(qE);C6e=n(ORe,"STRONG",{});var PMt=s(C6e);cLr=r(PMt,"albert"),PMt.forEach(t),fLr=r(ORe," \u2014 "),tJ=n(ORe,"A",{href:!0});var IMt=s(tJ);mLr=r(IMt,"FlaxAlbertForMaskedLM"),IMt.forEach(t),gLr=r(ORe," (ALBERT model)"),ORe.forEach(t),hLr=i(Be),NE=n(Be,"LI",{});var VRe=s(NE);w6e=n(VRe,"STRONG",{});var qMt=s(w6e);pLr=r(qMt,"bart"),qMt.forEach(t),uLr=r(VRe," \u2014 "),aJ=n(VRe,"A",{href:!0});var NMt=s(aJ);_Lr=r(NMt,"FlaxBartForConditionalGeneration"),NMt.forEach(t),bLr=r(VRe," (BART model)"),VRe.forEach(t),vLr=i(Be),jE=n(Be,"LI",{});var XRe=s(jE);A6e=n(XRe,"STRONG",{});var jMt=s(A6e);FLr=r(jMt,"bert"),jMt.forEach(t),TLr=r(XRe," \u2014 "),nJ=n(XRe,"A",{href:!0});var DMt=s(nJ);MLr=r(DMt,"FlaxBertForMaskedLM"),DMt.forEach(t),ELr=r(XRe," (BERT model)"),XRe.forEach(t),CLr=i(Be),DE=n(Be,"LI",{});var zRe=s(DE);y6e=n(zRe,"STRONG",{});var GMt=s(y6e);wLr=r(GMt,"big_bird"),GMt.forEach(t),ALr=r(zRe," \u2014 "),sJ=n(zRe,"A",{href:!0});var OMt=s(sJ);yLr=r(OMt,"FlaxBigBirdForMaskedLM"),OMt.forEach(t),LLr=r(zRe," (BigBird model)"),zRe.forEach(t),xLr=i(Be),GE=n(Be,"LI",{});var QRe=s(GE);L6e=n(QRe,"STRONG",{});var VMt=s(L6e);$Lr=r(VMt,"distilbert"),VMt.forEach(t),kLr=r(QRe," \u2014 "),lJ=n(QRe,"A",{href:!0});var XMt=s(lJ);SLr=r(XMt,"FlaxDistilBertForMaskedLM"),XMt.forEach(t),RLr=r(QRe," (DistilBERT model)"),QRe.forEach(t),BLr=i(Be),OE=n(Be,"LI",{});var WRe=s(OE);x6e=n(WRe,"STRONG",{});var zMt=s(x6e);PLr=r(zMt,"electra"),zMt.forEach(t),ILr=r(WRe," \u2014 "),iJ=n(WRe,"A",{href:!0});var QMt=s(iJ);qLr=r(QMt,"FlaxElectraForMaskedLM"),QMt.forEach(t),NLr=r(WRe," (ELECTRA model)"),WRe.forEach(t),jLr=i(Be),VE=n(Be,"LI",{});var HRe=s(VE);$6e=n(HRe,"STRONG",{});var WMt=s($6e);DLr=r(WMt,"mbart"),WMt.forEach(t),GLr=r(HRe," \u2014 "),dJ=n(HRe,"A",{href:!0});var HMt=s(dJ);OLr=r(HMt,"FlaxMBartForConditionalGeneration"),HMt.forEach(t),VLr=r(HRe," (mBART model)"),HRe.forEach(t),XLr=i(Be),XE=n(Be,"LI",{});var URe=s(XE);k6e=n(URe,"STRONG",{});var UMt=s(k6e);zLr=r(UMt,"roberta"),UMt.forEach(t),QLr=r(URe," \u2014 "),cJ=n(URe,"A",{href:!0});var JMt=s(cJ);WLr=r(JMt,"FlaxRobertaForMaskedLM"),JMt.forEach(t),HLr=r(URe," (RoBERTa model)"),URe.forEach(t),ULr=i(Be),zE=n(Be,"LI",{});var JRe=s(zE);S6e=n(JRe,"STRONG",{});var YMt=s(S6e);JLr=r(YMt,"roformer"),YMt.forEach(t),YLr=r(JRe," \u2014 "),fJ=n(JRe,"A",{href:!0});var KMt=s(fJ);KLr=r(KMt,"FlaxRoFormerForMaskedLM"),KMt.forEach(t),ZLr=r(JRe," (RoFormer model)"),JRe.forEach(t),e8r=i(Be),QE=n(Be,"LI",{});var YRe=s(QE);R6e=n(YRe,"STRONG",{});var ZMt=s(R6e);o8r=r(ZMt,"xlm-roberta"),ZMt.forEach(t),r8r=r(YRe," \u2014 "),mJ=n(YRe,"A",{href:!0});var e4t=s(mJ);t8r=r(e4t,"FlaxXLMRobertaForMaskedLM"),e4t.forEach(t),a8r=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),Be.forEach(t),n8r=i(jl),T(WE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),SIe=i(f),$c=n(f,"H2",{class:!0});var INe=s($c);HE=n(INe,"A",{id:!0,class:!0,href:!0});var o4t=s(HE);B6e=n(o4t,"SPAN",{});var r4t=s(B6e);T(X8.$$.fragment,r4t),r4t.forEach(t),o4t.forEach(t),s8r=i(INe),P6e=n(INe,"SPAN",{});var t4t=s(P6e);l8r=r(t4t,"FlaxAutoModelForSeq2SeqLM"),t4t.forEach(t),INe.forEach(t),RIe=i(f),hr=n(f,"DIV",{class:!0});var Dl=s(hr);T(z8.$$.fragment,Dl),i8r=i(Dl),kc=n(Dl,"P",{});var lZ=s(kc);d8r=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gJ=n(lZ,"A",{href:!0});var a4t=s(gJ);c8r=r(a4t,"from_pretrained()"),a4t.forEach(t),f8r=r(lZ," class method or the "),hJ=n(lZ,"A",{href:!0});var n4t=s(hJ);m8r=r(n4t,"from_config()"),n4t.forEach(t),g8r=r(lZ,` class
method.`),lZ.forEach(t),h8r=i(Dl),Q8=n(Dl,"P",{});var qNe=s(Q8);p8r=r(qNe,"This class cannot be instantiated directly using "),I6e=n(qNe,"CODE",{});var s4t=s(I6e);u8r=r(s4t,"__init__()"),s4t.forEach(t),_8r=r(qNe," (throws an error)."),qNe.forEach(t),b8r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var mw=s(Dt);T(W8.$$.fragment,mw),v8r=i(mw),q6e=n(mw,"P",{});var l4t=s(q6e);F8r=r(l4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l4t.forEach(t),T8r=i(mw),Sc=n(mw,"P",{});var iZ=s(Sc);M8r=r(iZ,`Note:
Loading a model from its configuration file does `),N6e=n(iZ,"STRONG",{});var i4t=s(N6e);E8r=r(i4t,"not"),i4t.forEach(t),C8r=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(iZ,"A",{href:!0});var d4t=s(pJ);w8r=r(d4t,"from_pretrained()"),d4t.forEach(t),A8r=r(iZ," to load the model weights."),iZ.forEach(t),y8r=i(mw),T(UE.$$.fragment,mw),mw.forEach(t),L8r=i(Dl),Gr=n(Dl,"DIV",{class:!0});var Gl=s(Gr);T(H8.$$.fragment,Gl),x8r=i(Gl),j6e=n(Gl,"P",{});var c4t=s(j6e);$8r=r(c4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),c4t.forEach(t),k8r=i(Gl),gn=n(Gl,"P",{});var gw=s(gn);S8r=r(gw,"The model class to instantiate is selected based on the "),D6e=n(gw,"CODE",{});var f4t=s(D6e);R8r=r(f4t,"model_type"),f4t.forEach(t),B8r=r(gw,` property of the config object (either
passed as an argument or loaded from `),G6e=n(gw,"CODE",{});var m4t=s(G6e);P8r=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),I8r=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=n(gw,"CODE",{});var g4t=s(O6e);q8r=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),N8r=r(gw,":"),gw.forEach(t),j8r=i(Gl),Se=n(Gl,"UL",{});var Ve=s(Se);JE=n(Ve,"LI",{});var KRe=s(JE);V6e=n(KRe,"STRONG",{});var h4t=s(V6e);D8r=r(h4t,"bart"),h4t.forEach(t),G8r=r(KRe," \u2014 "),uJ=n(KRe,"A",{href:!0});var p4t=s(uJ);O8r=r(p4t,"FlaxBartForConditionalGeneration"),p4t.forEach(t),V8r=r(KRe," (BART model)"),KRe.forEach(t),X8r=i(Ve),YE=n(Ve,"LI",{});var ZRe=s(YE);X6e=n(ZRe,"STRONG",{});var u4t=s(X6e);z8r=r(u4t,"blenderbot"),u4t.forEach(t),Q8r=r(ZRe," \u2014 "),_J=n(ZRe,"A",{href:!0});var _4t=s(_J);W8r=r(_4t,"FlaxBlenderbotForConditionalGeneration"),_4t.forEach(t),H8r=r(ZRe," (Blenderbot model)"),ZRe.forEach(t),U8r=i(Ve),KE=n(Ve,"LI",{});var eBe=s(KE);z6e=n(eBe,"STRONG",{});var b4t=s(z6e);J8r=r(b4t,"blenderbot-small"),b4t.forEach(t),Y8r=r(eBe," \u2014 "),bJ=n(eBe,"A",{href:!0});var v4t=s(bJ);K8r=r(v4t,"FlaxBlenderbotSmallForConditionalGeneration"),v4t.forEach(t),Z8r=r(eBe," (BlenderbotSmall model)"),eBe.forEach(t),exr=i(Ve),ZE=n(Ve,"LI",{});var oBe=s(ZE);Q6e=n(oBe,"STRONG",{});var F4t=s(Q6e);oxr=r(F4t,"encoder-decoder"),F4t.forEach(t),rxr=r(oBe," \u2014 "),vJ=n(oBe,"A",{href:!0});var T4t=s(vJ);txr=r(T4t,"FlaxEncoderDecoderModel"),T4t.forEach(t),axr=r(oBe," (Encoder decoder model)"),oBe.forEach(t),nxr=i(Ve),e5=n(Ve,"LI",{});var rBe=s(e5);W6e=n(rBe,"STRONG",{});var M4t=s(W6e);sxr=r(M4t,"marian"),M4t.forEach(t),lxr=r(rBe," \u2014 "),FJ=n(rBe,"A",{href:!0});var E4t=s(FJ);ixr=r(E4t,"FlaxMarianMTModel"),E4t.forEach(t),dxr=r(rBe," (Marian model)"),rBe.forEach(t),cxr=i(Ve),o5=n(Ve,"LI",{});var tBe=s(o5);H6e=n(tBe,"STRONG",{});var C4t=s(H6e);fxr=r(C4t,"mbart"),C4t.forEach(t),mxr=r(tBe," \u2014 "),TJ=n(tBe,"A",{href:!0});var w4t=s(TJ);gxr=r(w4t,"FlaxMBartForConditionalGeneration"),w4t.forEach(t),hxr=r(tBe," (mBART model)"),tBe.forEach(t),pxr=i(Ve),r5=n(Ve,"LI",{});var aBe=s(r5);U6e=n(aBe,"STRONG",{});var A4t=s(U6e);uxr=r(A4t,"mt5"),A4t.forEach(t),_xr=r(aBe," \u2014 "),MJ=n(aBe,"A",{href:!0});var y4t=s(MJ);bxr=r(y4t,"FlaxMT5ForConditionalGeneration"),y4t.forEach(t),vxr=r(aBe," (mT5 model)"),aBe.forEach(t),Fxr=i(Ve),t5=n(Ve,"LI",{});var nBe=s(t5);J6e=n(nBe,"STRONG",{});var L4t=s(J6e);Txr=r(L4t,"pegasus"),L4t.forEach(t),Mxr=r(nBe," \u2014 "),EJ=n(nBe,"A",{href:!0});var x4t=s(EJ);Exr=r(x4t,"FlaxPegasusForConditionalGeneration"),x4t.forEach(t),Cxr=r(nBe," (Pegasus model)"),nBe.forEach(t),wxr=i(Ve),a5=n(Ve,"LI",{});var sBe=s(a5);Y6e=n(sBe,"STRONG",{});var $4t=s(Y6e);Axr=r($4t,"t5"),$4t.forEach(t),yxr=r(sBe," \u2014 "),CJ=n(sBe,"A",{href:!0});var k4t=s(CJ);Lxr=r(k4t,"FlaxT5ForConditionalGeneration"),k4t.forEach(t),xxr=r(sBe," (T5 model)"),sBe.forEach(t),Ve.forEach(t),$xr=i(Gl),T(n5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),BIe=i(f),Rc=n(f,"H2",{class:!0});var NNe=s(Rc);s5=n(NNe,"A",{id:!0,class:!0,href:!0});var S4t=s(s5);K6e=n(S4t,"SPAN",{});var R4t=s(K6e);T(U8.$$.fragment,R4t),R4t.forEach(t),S4t.forEach(t),kxr=i(NNe),Z6e=n(NNe,"SPAN",{});var B4t=s(Z6e);Sxr=r(B4t,"FlaxAutoModelForSequenceClassification"),B4t.forEach(t),NNe.forEach(t),PIe=i(f),pr=n(f,"DIV",{class:!0});var Ol=s(pr);T(J8.$$.fragment,Ol),Rxr=i(Ol),Bc=n(Ol,"P",{});var dZ=s(Bc);Bxr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wJ=n(dZ,"A",{href:!0});var P4t=s(wJ);Pxr=r(P4t,"from_pretrained()"),P4t.forEach(t),Ixr=r(dZ," class method or the "),AJ=n(dZ,"A",{href:!0});var I4t=s(AJ);qxr=r(I4t,"from_config()"),I4t.forEach(t),Nxr=r(dZ,` class
method.`),dZ.forEach(t),jxr=i(Ol),Y8=n(Ol,"P",{});var jNe=s(Y8);Dxr=r(jNe,"This class cannot be instantiated directly using "),eTe=n(jNe,"CODE",{});var q4t=s(eTe);Gxr=r(q4t,"__init__()"),q4t.forEach(t),Oxr=r(jNe," (throws an error)."),jNe.forEach(t),Vxr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var hw=s(Gt);T(K8.$$.fragment,hw),Xxr=i(hw),oTe=n(hw,"P",{});var N4t=s(oTe);zxr=r(N4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),N4t.forEach(t),Qxr=i(hw),Pc=n(hw,"P",{});var cZ=s(Pc);Wxr=r(cZ,`Note:
Loading a model from its configuration file does `),rTe=n(cZ,"STRONG",{});var j4t=s(rTe);Hxr=r(j4t,"not"),j4t.forEach(t),Uxr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(cZ,"A",{href:!0});var D4t=s(yJ);Jxr=r(D4t,"from_pretrained()"),D4t.forEach(t),Yxr=r(cZ," to load the model weights."),cZ.forEach(t),Kxr=i(hw),T(l5.$$.fragment,hw),hw.forEach(t),Zxr=i(Ol),Or=n(Ol,"DIV",{class:!0});var Vl=s(Or);T(Z8.$$.fragment,Vl),e9r=i(Vl),tTe=n(Vl,"P",{});var G4t=s(tTe);o9r=r(G4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G4t.forEach(t),r9r=i(Vl),hn=n(Vl,"P",{});var pw=s(hn);t9r=r(pw,"The model class to instantiate is selected based on the "),aTe=n(pw,"CODE",{});var O4t=s(aTe);a9r=r(O4t,"model_type"),O4t.forEach(t),n9r=r(pw,` property of the config object (either
passed as an argument or loaded from `),nTe=n(pw,"CODE",{});var V4t=s(nTe);s9r=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),l9r=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(pw,"CODE",{});var X4t=s(sTe);i9r=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),d9r=r(pw,":"),pw.forEach(t),c9r=i(Vl),xe=n(Vl,"UL",{});var Pe=s(xe);i5=n(Pe,"LI",{});var lBe=s(i5);lTe=n(lBe,"STRONG",{});var z4t=s(lTe);f9r=r(z4t,"albert"),z4t.forEach(t),m9r=r(lBe," \u2014 "),LJ=n(lBe,"A",{href:!0});var Q4t=s(LJ);g9r=r(Q4t,"FlaxAlbertForSequenceClassification"),Q4t.forEach(t),h9r=r(lBe," (ALBERT model)"),lBe.forEach(t),p9r=i(Pe),d5=n(Pe,"LI",{});var iBe=s(d5);iTe=n(iBe,"STRONG",{});var W4t=s(iTe);u9r=r(W4t,"bart"),W4t.forEach(t),_9r=r(iBe," \u2014 "),xJ=n(iBe,"A",{href:!0});var H4t=s(xJ);b9r=r(H4t,"FlaxBartForSequenceClassification"),H4t.forEach(t),v9r=r(iBe," (BART model)"),iBe.forEach(t),F9r=i(Pe),c5=n(Pe,"LI",{});var dBe=s(c5);dTe=n(dBe,"STRONG",{});var U4t=s(dTe);T9r=r(U4t,"bert"),U4t.forEach(t),M9r=r(dBe," \u2014 "),$J=n(dBe,"A",{href:!0});var J4t=s($J);E9r=r(J4t,"FlaxBertForSequenceClassification"),J4t.forEach(t),C9r=r(dBe," (BERT model)"),dBe.forEach(t),w9r=i(Pe),f5=n(Pe,"LI",{});var cBe=s(f5);cTe=n(cBe,"STRONG",{});var Y4t=s(cTe);A9r=r(Y4t,"big_bird"),Y4t.forEach(t),y9r=r(cBe," \u2014 "),kJ=n(cBe,"A",{href:!0});var K4t=s(kJ);L9r=r(K4t,"FlaxBigBirdForSequenceClassification"),K4t.forEach(t),x9r=r(cBe," (BigBird model)"),cBe.forEach(t),$9r=i(Pe),m5=n(Pe,"LI",{});var fBe=s(m5);fTe=n(fBe,"STRONG",{});var Z4t=s(fTe);k9r=r(Z4t,"distilbert"),Z4t.forEach(t),S9r=r(fBe," \u2014 "),SJ=n(fBe,"A",{href:!0});var eEt=s(SJ);R9r=r(eEt,"FlaxDistilBertForSequenceClassification"),eEt.forEach(t),B9r=r(fBe," (DistilBERT model)"),fBe.forEach(t),P9r=i(Pe),g5=n(Pe,"LI",{});var mBe=s(g5);mTe=n(mBe,"STRONG",{});var oEt=s(mTe);I9r=r(oEt,"electra"),oEt.forEach(t),q9r=r(mBe," \u2014 "),RJ=n(mBe,"A",{href:!0});var rEt=s(RJ);N9r=r(rEt,"FlaxElectraForSequenceClassification"),rEt.forEach(t),j9r=r(mBe," (ELECTRA model)"),mBe.forEach(t),D9r=i(Pe),h5=n(Pe,"LI",{});var gBe=s(h5);gTe=n(gBe,"STRONG",{});var tEt=s(gTe);G9r=r(tEt,"mbart"),tEt.forEach(t),O9r=r(gBe," \u2014 "),BJ=n(gBe,"A",{href:!0});var aEt=s(BJ);V9r=r(aEt,"FlaxMBartForSequenceClassification"),aEt.forEach(t),X9r=r(gBe," (mBART model)"),gBe.forEach(t),z9r=i(Pe),p5=n(Pe,"LI",{});var hBe=s(p5);hTe=n(hBe,"STRONG",{});var nEt=s(hTe);Q9r=r(nEt,"roberta"),nEt.forEach(t),W9r=r(hBe," \u2014 "),PJ=n(hBe,"A",{href:!0});var sEt=s(PJ);H9r=r(sEt,"FlaxRobertaForSequenceClassification"),sEt.forEach(t),U9r=r(hBe," (RoBERTa model)"),hBe.forEach(t),J9r=i(Pe),u5=n(Pe,"LI",{});var pBe=s(u5);pTe=n(pBe,"STRONG",{});var lEt=s(pTe);Y9r=r(lEt,"roformer"),lEt.forEach(t),K9r=r(pBe," \u2014 "),IJ=n(pBe,"A",{href:!0});var iEt=s(IJ);Z9r=r(iEt,"FlaxRoFormerForSequenceClassification"),iEt.forEach(t),e$r=r(pBe," (RoFormer model)"),pBe.forEach(t),o$r=i(Pe),_5=n(Pe,"LI",{});var uBe=s(_5);uTe=n(uBe,"STRONG",{});var dEt=s(uTe);r$r=r(dEt,"xlm-roberta"),dEt.forEach(t),t$r=r(uBe," \u2014 "),qJ=n(uBe,"A",{href:!0});var cEt=s(qJ);a$r=r(cEt,"FlaxXLMRobertaForSequenceClassification"),cEt.forEach(t),n$r=r(uBe," (XLM-RoBERTa model)"),uBe.forEach(t),Pe.forEach(t),s$r=i(Vl),T(b5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),IIe=i(f),Ic=n(f,"H2",{class:!0});var DNe=s(Ic);v5=n(DNe,"A",{id:!0,class:!0,href:!0});var fEt=s(v5);_Te=n(fEt,"SPAN",{});var mEt=s(_Te);T(ex.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),l$r=i(DNe),bTe=n(DNe,"SPAN",{});var gEt=s(bTe);i$r=r(gEt,"FlaxAutoModelForQuestionAnswering"),gEt.forEach(t),DNe.forEach(t),qIe=i(f),ur=n(f,"DIV",{class:!0});var Xl=s(ur);T(ox.$$.fragment,Xl),d$r=i(Xl),qc=n(Xl,"P",{});var fZ=s(qc);c$r=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NJ=n(fZ,"A",{href:!0});var hEt=s(NJ);f$r=r(hEt,"from_pretrained()"),hEt.forEach(t),m$r=r(fZ," class method or the "),jJ=n(fZ,"A",{href:!0});var pEt=s(jJ);g$r=r(pEt,"from_config()"),pEt.forEach(t),h$r=r(fZ,` class
method.`),fZ.forEach(t),p$r=i(Xl),rx=n(Xl,"P",{});var GNe=s(rx);u$r=r(GNe,"This class cannot be instantiated directly using "),vTe=n(GNe,"CODE",{});var uEt=s(vTe);_$r=r(uEt,"__init__()"),uEt.forEach(t),b$r=r(GNe," (throws an error)."),GNe.forEach(t),v$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var uw=s(Ot);T(tx.$$.fragment,uw),F$r=i(uw),FTe=n(uw,"P",{});var _Et=s(FTe);T$r=r(_Et,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Et.forEach(t),M$r=i(uw),Nc=n(uw,"P",{});var mZ=s(Nc);E$r=r(mZ,`Note:
Loading a model from its configuration file does `),TTe=n(mZ,"STRONG",{});var bEt=s(TTe);C$r=r(bEt,"not"),bEt.forEach(t),w$r=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(mZ,"A",{href:!0});var vEt=s(DJ);A$r=r(vEt,"from_pretrained()"),vEt.forEach(t),y$r=r(mZ," to load the model weights."),mZ.forEach(t),L$r=i(uw),T(F5.$$.fragment,uw),uw.forEach(t),x$r=i(Xl),Vr=n(Xl,"DIV",{class:!0});var zl=s(Vr);T(ax.$$.fragment,zl),$$r=i(zl),MTe=n(zl,"P",{});var FEt=s(MTe);k$r=r(FEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FEt.forEach(t),S$r=i(zl),pn=n(zl,"P",{});var _w=s(pn);R$r=r(_w,"The model class to instantiate is selected based on the "),ETe=n(_w,"CODE",{});var TEt=s(ETe);B$r=r(TEt,"model_type"),TEt.forEach(t),P$r=r(_w,` property of the config object (either
passed as an argument or loaded from `),CTe=n(_w,"CODE",{});var MEt=s(CTe);I$r=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),q$r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(_w,"CODE",{});var EEt=s(wTe);N$r=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),j$r=r(_w,":"),_w.forEach(t),D$r=i(zl),$e=n(zl,"UL",{});var Ie=s($e);T5=n(Ie,"LI",{});var _Be=s(T5);ATe=n(_Be,"STRONG",{});var CEt=s(ATe);G$r=r(CEt,"albert"),CEt.forEach(t),O$r=r(_Be," \u2014 "),GJ=n(_Be,"A",{href:!0});var wEt=s(GJ);V$r=r(wEt,"FlaxAlbertForQuestionAnswering"),wEt.forEach(t),X$r=r(_Be," (ALBERT model)"),_Be.forEach(t),z$r=i(Ie),M5=n(Ie,"LI",{});var bBe=s(M5);yTe=n(bBe,"STRONG",{});var AEt=s(yTe);Q$r=r(AEt,"bart"),AEt.forEach(t),W$r=r(bBe," \u2014 "),OJ=n(bBe,"A",{href:!0});var yEt=s(OJ);H$r=r(yEt,"FlaxBartForQuestionAnswering"),yEt.forEach(t),U$r=r(bBe," (BART model)"),bBe.forEach(t),J$r=i(Ie),E5=n(Ie,"LI",{});var vBe=s(E5);LTe=n(vBe,"STRONG",{});var LEt=s(LTe);Y$r=r(LEt,"bert"),LEt.forEach(t),K$r=r(vBe," \u2014 "),VJ=n(vBe,"A",{href:!0});var xEt=s(VJ);Z$r=r(xEt,"FlaxBertForQuestionAnswering"),xEt.forEach(t),ekr=r(vBe," (BERT model)"),vBe.forEach(t),okr=i(Ie),C5=n(Ie,"LI",{});var FBe=s(C5);xTe=n(FBe,"STRONG",{});var $Et=s(xTe);rkr=r($Et,"big_bird"),$Et.forEach(t),tkr=r(FBe," \u2014 "),XJ=n(FBe,"A",{href:!0});var kEt=s(XJ);akr=r(kEt,"FlaxBigBirdForQuestionAnswering"),kEt.forEach(t),nkr=r(FBe," (BigBird model)"),FBe.forEach(t),skr=i(Ie),w5=n(Ie,"LI",{});var TBe=s(w5);$Te=n(TBe,"STRONG",{});var SEt=s($Te);lkr=r(SEt,"distilbert"),SEt.forEach(t),ikr=r(TBe," \u2014 "),zJ=n(TBe,"A",{href:!0});var REt=s(zJ);dkr=r(REt,"FlaxDistilBertForQuestionAnswering"),REt.forEach(t),ckr=r(TBe," (DistilBERT model)"),TBe.forEach(t),fkr=i(Ie),A5=n(Ie,"LI",{});var MBe=s(A5);kTe=n(MBe,"STRONG",{});var BEt=s(kTe);mkr=r(BEt,"electra"),BEt.forEach(t),gkr=r(MBe," \u2014 "),QJ=n(MBe,"A",{href:!0});var PEt=s(QJ);hkr=r(PEt,"FlaxElectraForQuestionAnswering"),PEt.forEach(t),pkr=r(MBe," (ELECTRA model)"),MBe.forEach(t),ukr=i(Ie),y5=n(Ie,"LI",{});var EBe=s(y5);STe=n(EBe,"STRONG",{});var IEt=s(STe);_kr=r(IEt,"mbart"),IEt.forEach(t),bkr=r(EBe," \u2014 "),WJ=n(EBe,"A",{href:!0});var qEt=s(WJ);vkr=r(qEt,"FlaxMBartForQuestionAnswering"),qEt.forEach(t),Fkr=r(EBe," (mBART model)"),EBe.forEach(t),Tkr=i(Ie),L5=n(Ie,"LI",{});var CBe=s(L5);RTe=n(CBe,"STRONG",{});var NEt=s(RTe);Mkr=r(NEt,"roberta"),NEt.forEach(t),Ekr=r(CBe," \u2014 "),HJ=n(CBe,"A",{href:!0});var jEt=s(HJ);Ckr=r(jEt,"FlaxRobertaForQuestionAnswering"),jEt.forEach(t),wkr=r(CBe," (RoBERTa model)"),CBe.forEach(t),Akr=i(Ie),x5=n(Ie,"LI",{});var wBe=s(x5);BTe=n(wBe,"STRONG",{});var DEt=s(BTe);ykr=r(DEt,"roformer"),DEt.forEach(t),Lkr=r(wBe," \u2014 "),UJ=n(wBe,"A",{href:!0});var GEt=s(UJ);xkr=r(GEt,"FlaxRoFormerForQuestionAnswering"),GEt.forEach(t),$kr=r(wBe," (RoFormer model)"),wBe.forEach(t),kkr=i(Ie),$5=n(Ie,"LI",{});var ABe=s($5);PTe=n(ABe,"STRONG",{});var OEt=s(PTe);Skr=r(OEt,"xlm-roberta"),OEt.forEach(t),Rkr=r(ABe," \u2014 "),JJ=n(ABe,"A",{href:!0});var VEt=s(JJ);Bkr=r(VEt,"FlaxXLMRobertaForQuestionAnswering"),VEt.forEach(t),Pkr=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),Ie.forEach(t),Ikr=i(zl),T(k5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),NIe=i(f),jc=n(f,"H2",{class:!0});var ONe=s(jc);S5=n(ONe,"A",{id:!0,class:!0,href:!0});var XEt=s(S5);ITe=n(XEt,"SPAN",{});var zEt=s(ITe);T(nx.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),qkr=i(ONe),qTe=n(ONe,"SPAN",{});var QEt=s(qTe);Nkr=r(QEt,"FlaxAutoModelForTokenClassification"),QEt.forEach(t),ONe.forEach(t),jIe=i(f),_r=n(f,"DIV",{class:!0});var Ql=s(_r);T(sx.$$.fragment,Ql),jkr=i(Ql),Dc=n(Ql,"P",{});var gZ=s(Dc);Dkr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YJ=n(gZ,"A",{href:!0});var WEt=s(YJ);Gkr=r(WEt,"from_pretrained()"),WEt.forEach(t),Okr=r(gZ," class method or the "),KJ=n(gZ,"A",{href:!0});var HEt=s(KJ);Vkr=r(HEt,"from_config()"),HEt.forEach(t),Xkr=r(gZ,` class
method.`),gZ.forEach(t),zkr=i(Ql),lx=n(Ql,"P",{});var VNe=s(lx);Qkr=r(VNe,"This class cannot be instantiated directly using "),NTe=n(VNe,"CODE",{});var UEt=s(NTe);Wkr=r(UEt,"__init__()"),UEt.forEach(t),Hkr=r(VNe," (throws an error)."),VNe.forEach(t),Ukr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var bw=s(Vt);T(ix.$$.fragment,bw),Jkr=i(bw),jTe=n(bw,"P",{});var JEt=s(jTe);Ykr=r(JEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JEt.forEach(t),Kkr=i(bw),Gc=n(bw,"P",{});var hZ=s(Gc);Zkr=r(hZ,`Note:
Loading a model from its configuration file does `),DTe=n(hZ,"STRONG",{});var YEt=s(DTe);eSr=r(YEt,"not"),YEt.forEach(t),oSr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(hZ,"A",{href:!0});var KEt=s(ZJ);rSr=r(KEt,"from_pretrained()"),KEt.forEach(t),tSr=r(hZ," to load the model weights."),hZ.forEach(t),aSr=i(bw),T(R5.$$.fragment,bw),bw.forEach(t),nSr=i(Ql),Xr=n(Ql,"DIV",{class:!0});var Wl=s(Xr);T(dx.$$.fragment,Wl),sSr=i(Wl),GTe=n(Wl,"P",{});var ZEt=s(GTe);lSr=r(ZEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZEt.forEach(t),iSr=i(Wl),un=n(Wl,"P",{});var vw=s(un);dSr=r(vw,"The model class to instantiate is selected based on the "),OTe=n(vw,"CODE",{});var e5t=s(OTe);cSr=r(e5t,"model_type"),e5t.forEach(t),fSr=r(vw,` property of the config object (either
passed as an argument or loaded from `),VTe=n(vw,"CODE",{});var o5t=s(VTe);mSr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),gSr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(vw,"CODE",{});var r5t=s(XTe);hSr=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),pSr=r(vw,":"),vw.forEach(t),uSr=i(Wl),De=n(Wl,"UL",{});var Fo=s(De);B5=n(Fo,"LI",{});var yBe=s(B5);zTe=n(yBe,"STRONG",{});var t5t=s(zTe);_Sr=r(t5t,"albert"),t5t.forEach(t),bSr=r(yBe," \u2014 "),eY=n(yBe,"A",{href:!0});var a5t=s(eY);vSr=r(a5t,"FlaxAlbertForTokenClassification"),a5t.forEach(t),FSr=r(yBe," (ALBERT model)"),yBe.forEach(t),TSr=i(Fo),P5=n(Fo,"LI",{});var LBe=s(P5);QTe=n(LBe,"STRONG",{});var n5t=s(QTe);MSr=r(n5t,"bert"),n5t.forEach(t),ESr=r(LBe," \u2014 "),oY=n(LBe,"A",{href:!0});var s5t=s(oY);CSr=r(s5t,"FlaxBertForTokenClassification"),s5t.forEach(t),wSr=r(LBe," (BERT model)"),LBe.forEach(t),ASr=i(Fo),I5=n(Fo,"LI",{});var xBe=s(I5);WTe=n(xBe,"STRONG",{});var l5t=s(WTe);ySr=r(l5t,"big_bird"),l5t.forEach(t),LSr=r(xBe," \u2014 "),rY=n(xBe,"A",{href:!0});var i5t=s(rY);xSr=r(i5t,"FlaxBigBirdForTokenClassification"),i5t.forEach(t),$Sr=r(xBe," (BigBird model)"),xBe.forEach(t),kSr=i(Fo),q5=n(Fo,"LI",{});var $Be=s(q5);HTe=n($Be,"STRONG",{});var d5t=s(HTe);SSr=r(d5t,"distilbert"),d5t.forEach(t),RSr=r($Be," \u2014 "),tY=n($Be,"A",{href:!0});var c5t=s(tY);BSr=r(c5t,"FlaxDistilBertForTokenClassification"),c5t.forEach(t),PSr=r($Be," (DistilBERT model)"),$Be.forEach(t),ISr=i(Fo),N5=n(Fo,"LI",{});var kBe=s(N5);UTe=n(kBe,"STRONG",{});var f5t=s(UTe);qSr=r(f5t,"electra"),f5t.forEach(t),NSr=r(kBe," \u2014 "),aY=n(kBe,"A",{href:!0});var m5t=s(aY);jSr=r(m5t,"FlaxElectraForTokenClassification"),m5t.forEach(t),DSr=r(kBe," (ELECTRA model)"),kBe.forEach(t),GSr=i(Fo),j5=n(Fo,"LI",{});var SBe=s(j5);JTe=n(SBe,"STRONG",{});var g5t=s(JTe);OSr=r(g5t,"roberta"),g5t.forEach(t),VSr=r(SBe," \u2014 "),nY=n(SBe,"A",{href:!0});var h5t=s(nY);XSr=r(h5t,"FlaxRobertaForTokenClassification"),h5t.forEach(t),zSr=r(SBe," (RoBERTa model)"),SBe.forEach(t),QSr=i(Fo),D5=n(Fo,"LI",{});var RBe=s(D5);YTe=n(RBe,"STRONG",{});var p5t=s(YTe);WSr=r(p5t,"roformer"),p5t.forEach(t),HSr=r(RBe," \u2014 "),sY=n(RBe,"A",{href:!0});var u5t=s(sY);USr=r(u5t,"FlaxRoFormerForTokenClassification"),u5t.forEach(t),JSr=r(RBe," (RoFormer model)"),RBe.forEach(t),YSr=i(Fo),G5=n(Fo,"LI",{});var BBe=s(G5);KTe=n(BBe,"STRONG",{});var _5t=s(KTe);KSr=r(_5t,"xlm-roberta"),_5t.forEach(t),ZSr=r(BBe," \u2014 "),lY=n(BBe,"A",{href:!0});var b5t=s(lY);eRr=r(b5t,"FlaxXLMRobertaForTokenClassification"),b5t.forEach(t),oRr=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),Fo.forEach(t),rRr=i(Wl),T(O5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),DIe=i(f),Oc=n(f,"H2",{class:!0});var XNe=s(Oc);V5=n(XNe,"A",{id:!0,class:!0,href:!0});var v5t=s(V5);ZTe=n(v5t,"SPAN",{});var F5t=s(ZTe);T(cx.$$.fragment,F5t),F5t.forEach(t),v5t.forEach(t),tRr=i(XNe),e7e=n(XNe,"SPAN",{});var T5t=s(e7e);aRr=r(T5t,"FlaxAutoModelForMultipleChoice"),T5t.forEach(t),XNe.forEach(t),GIe=i(f),br=n(f,"DIV",{class:!0});var Hl=s(br);T(fx.$$.fragment,Hl),nRr=i(Hl),Vc=n(Hl,"P",{});var pZ=s(Vc);sRr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iY=n(pZ,"A",{href:!0});var M5t=s(iY);lRr=r(M5t,"from_pretrained()"),M5t.forEach(t),iRr=r(pZ," class method or the "),dY=n(pZ,"A",{href:!0});var E5t=s(dY);dRr=r(E5t,"from_config()"),E5t.forEach(t),cRr=r(pZ,` class
method.`),pZ.forEach(t),fRr=i(Hl),mx=n(Hl,"P",{});var zNe=s(mx);mRr=r(zNe,"This class cannot be instantiated directly using "),o7e=n(zNe,"CODE",{});var C5t=s(o7e);gRr=r(C5t,"__init__()"),C5t.forEach(t),hRr=r(zNe," (throws an error)."),zNe.forEach(t),pRr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var Fw=s(Xt);T(gx.$$.fragment,Fw),uRr=i(Fw),r7e=n(Fw,"P",{});var w5t=s(r7e);_Rr=r(w5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w5t.forEach(t),bRr=i(Fw),Xc=n(Fw,"P",{});var uZ=s(Xc);vRr=r(uZ,`Note:
Loading a model from its configuration file does `),t7e=n(uZ,"STRONG",{});var A5t=s(t7e);FRr=r(A5t,"not"),A5t.forEach(t),TRr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(uZ,"A",{href:!0});var y5t=s(cY);MRr=r(y5t,"from_pretrained()"),y5t.forEach(t),ERr=r(uZ," to load the model weights."),uZ.forEach(t),CRr=i(Fw),T(X5.$$.fragment,Fw),Fw.forEach(t),wRr=i(Hl),zr=n(Hl,"DIV",{class:!0});var Ul=s(zr);T(hx.$$.fragment,Ul),ARr=i(Ul),a7e=n(Ul,"P",{});var L5t=s(a7e);yRr=r(L5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L5t.forEach(t),LRr=i(Ul),_n=n(Ul,"P",{});var Tw=s(_n);xRr=r(Tw,"The model class to instantiate is selected based on the "),n7e=n(Tw,"CODE",{});var x5t=s(n7e);$Rr=r(x5t,"model_type"),x5t.forEach(t),kRr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),s7e=n(Tw,"CODE",{});var $5t=s(s7e);SRr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),RRr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(Tw,"CODE",{});var k5t=s(l7e);BRr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),PRr=r(Tw,":"),Tw.forEach(t),IRr=i(Ul),Ge=n(Ul,"UL",{});var To=s(Ge);z5=n(To,"LI",{});var PBe=s(z5);i7e=n(PBe,"STRONG",{});var S5t=s(i7e);qRr=r(S5t,"albert"),S5t.forEach(t),NRr=r(PBe," \u2014 "),fY=n(PBe,"A",{href:!0});var R5t=s(fY);jRr=r(R5t,"FlaxAlbertForMultipleChoice"),R5t.forEach(t),DRr=r(PBe," (ALBERT model)"),PBe.forEach(t),GRr=i(To),Q5=n(To,"LI",{});var IBe=s(Q5);d7e=n(IBe,"STRONG",{});var B5t=s(d7e);ORr=r(B5t,"bert"),B5t.forEach(t),VRr=r(IBe," \u2014 "),mY=n(IBe,"A",{href:!0});var P5t=s(mY);XRr=r(P5t,"FlaxBertForMultipleChoice"),P5t.forEach(t),zRr=r(IBe," (BERT model)"),IBe.forEach(t),QRr=i(To),W5=n(To,"LI",{});var qBe=s(W5);c7e=n(qBe,"STRONG",{});var I5t=s(c7e);WRr=r(I5t,"big_bird"),I5t.forEach(t),HRr=r(qBe," \u2014 "),gY=n(qBe,"A",{href:!0});var q5t=s(gY);URr=r(q5t,"FlaxBigBirdForMultipleChoice"),q5t.forEach(t),JRr=r(qBe," (BigBird model)"),qBe.forEach(t),YRr=i(To),H5=n(To,"LI",{});var NBe=s(H5);f7e=n(NBe,"STRONG",{});var N5t=s(f7e);KRr=r(N5t,"distilbert"),N5t.forEach(t),ZRr=r(NBe," \u2014 "),hY=n(NBe,"A",{href:!0});var j5t=s(hY);eBr=r(j5t,"FlaxDistilBertForMultipleChoice"),j5t.forEach(t),oBr=r(NBe," (DistilBERT model)"),NBe.forEach(t),rBr=i(To),U5=n(To,"LI",{});var jBe=s(U5);m7e=n(jBe,"STRONG",{});var D5t=s(m7e);tBr=r(D5t,"electra"),D5t.forEach(t),aBr=r(jBe," \u2014 "),pY=n(jBe,"A",{href:!0});var G5t=s(pY);nBr=r(G5t,"FlaxElectraForMultipleChoice"),G5t.forEach(t),sBr=r(jBe," (ELECTRA model)"),jBe.forEach(t),lBr=i(To),J5=n(To,"LI",{});var DBe=s(J5);g7e=n(DBe,"STRONG",{});var O5t=s(g7e);iBr=r(O5t,"roberta"),O5t.forEach(t),dBr=r(DBe," \u2014 "),uY=n(DBe,"A",{href:!0});var V5t=s(uY);cBr=r(V5t,"FlaxRobertaForMultipleChoice"),V5t.forEach(t),fBr=r(DBe," (RoBERTa model)"),DBe.forEach(t),mBr=i(To),Y5=n(To,"LI",{});var GBe=s(Y5);h7e=n(GBe,"STRONG",{});var X5t=s(h7e);gBr=r(X5t,"roformer"),X5t.forEach(t),hBr=r(GBe," \u2014 "),_Y=n(GBe,"A",{href:!0});var z5t=s(_Y);pBr=r(z5t,"FlaxRoFormerForMultipleChoice"),z5t.forEach(t),uBr=r(GBe," (RoFormer model)"),GBe.forEach(t),_Br=i(To),K5=n(To,"LI",{});var OBe=s(K5);p7e=n(OBe,"STRONG",{});var Q5t=s(p7e);bBr=r(Q5t,"xlm-roberta"),Q5t.forEach(t),vBr=r(OBe," \u2014 "),bY=n(OBe,"A",{href:!0});var W5t=s(bY);FBr=r(W5t,"FlaxXLMRobertaForMultipleChoice"),W5t.forEach(t),TBr=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),To.forEach(t),MBr=i(Ul),T(Z5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),OIe=i(f),zc=n(f,"H2",{class:!0});var QNe=s(zc);eC=n(QNe,"A",{id:!0,class:!0,href:!0});var H5t=s(eC);u7e=n(H5t,"SPAN",{});var U5t=s(u7e);T(px.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),EBr=i(QNe),_7e=n(QNe,"SPAN",{});var J5t=s(_7e);CBr=r(J5t,"FlaxAutoModelForNextSentencePrediction"),J5t.forEach(t),QNe.forEach(t),VIe=i(f),vr=n(f,"DIV",{class:!0});var Jl=s(vr);T(ux.$$.fragment,Jl),wBr=i(Jl),Qc=n(Jl,"P",{});var _Z=s(Qc);ABr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vY=n(_Z,"A",{href:!0});var Y5t=s(vY);yBr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),LBr=r(_Z," class method or the "),FY=n(_Z,"A",{href:!0});var K5t=s(FY);xBr=r(K5t,"from_config()"),K5t.forEach(t),$Br=r(_Z,` class
method.`),_Z.forEach(t),kBr=i(Jl),_x=n(Jl,"P",{});var WNe=s(_x);SBr=r(WNe,"This class cannot be instantiated directly using "),b7e=n(WNe,"CODE",{});var Z5t=s(b7e);RBr=r(Z5t,"__init__()"),Z5t.forEach(t),BBr=r(WNe," (throws an error)."),WNe.forEach(t),PBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Mw=s(zt);T(bx.$$.fragment,Mw),IBr=i(Mw),v7e=n(Mw,"P",{});var eCt=s(v7e);qBr=r(eCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eCt.forEach(t),NBr=i(Mw),Wc=n(Mw,"P",{});var bZ=s(Wc);jBr=r(bZ,`Note:
Loading a model from its configuration file does `),F7e=n(bZ,"STRONG",{});var oCt=s(F7e);DBr=r(oCt,"not"),oCt.forEach(t),GBr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(bZ,"A",{href:!0});var rCt=s(TY);OBr=r(rCt,"from_pretrained()"),rCt.forEach(t),VBr=r(bZ," to load the model weights."),bZ.forEach(t),XBr=i(Mw),T(oC.$$.fragment,Mw),Mw.forEach(t),zBr=i(Jl),Qr=n(Jl,"DIV",{class:!0});var Yl=s(Qr);T(vx.$$.fragment,Yl),QBr=i(Yl),T7e=n(Yl,"P",{});var tCt=s(T7e);WBr=r(tCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tCt.forEach(t),HBr=i(Yl),bn=n(Yl,"P",{});var Ew=s(bn);UBr=r(Ew,"The model class to instantiate is selected based on the "),M7e=n(Ew,"CODE",{});var aCt=s(M7e);JBr=r(aCt,"model_type"),aCt.forEach(t),YBr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),E7e=n(Ew,"CODE",{});var nCt=s(E7e);KBr=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),ZBr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(Ew,"CODE",{});var sCt=s(C7e);ePr=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),oPr=r(Ew,":"),Ew.forEach(t),rPr=i(Yl),w7e=n(Yl,"UL",{});var lCt=s(w7e);rC=n(lCt,"LI",{});var VBe=s(rC);A7e=n(VBe,"STRONG",{});var iCt=s(A7e);tPr=r(iCt,"bert"),iCt.forEach(t),aPr=r(VBe," \u2014 "),MY=n(VBe,"A",{href:!0});var dCt=s(MY);nPr=r(dCt,"FlaxBertForNextSentencePrediction"),dCt.forEach(t),sPr=r(VBe," (BERT model)"),VBe.forEach(t),lCt.forEach(t),lPr=i(Yl),T(tC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),XIe=i(f),Hc=n(f,"H2",{class:!0});var HNe=s(Hc);aC=n(HNe,"A",{id:!0,class:!0,href:!0});var cCt=s(aC);y7e=n(cCt,"SPAN",{});var fCt=s(y7e);T(Fx.$$.fragment,fCt),fCt.forEach(t),cCt.forEach(t),iPr=i(HNe),L7e=n(HNe,"SPAN",{});var mCt=s(L7e);dPr=r(mCt,"FlaxAutoModelForImageClassification"),mCt.forEach(t),HNe.forEach(t),zIe=i(f),Fr=n(f,"DIV",{class:!0});var Kl=s(Fr);T(Tx.$$.fragment,Kl),cPr=i(Kl),Uc=n(Kl,"P",{});var vZ=s(Uc);fPr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EY=n(vZ,"A",{href:!0});var gCt=s(EY);mPr=r(gCt,"from_pretrained()"),gCt.forEach(t),gPr=r(vZ," class method or the "),CY=n(vZ,"A",{href:!0});var hCt=s(CY);hPr=r(hCt,"from_config()"),hCt.forEach(t),pPr=r(vZ,` class
method.`),vZ.forEach(t),uPr=i(Kl),Mx=n(Kl,"P",{});var UNe=s(Mx);_Pr=r(UNe,"This class cannot be instantiated directly using "),x7e=n(UNe,"CODE",{});var pCt=s(x7e);bPr=r(pCt,"__init__()"),pCt.forEach(t),vPr=r(UNe," (throws an error)."),UNe.forEach(t),FPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Cw=s(Qt);T(Ex.$$.fragment,Cw),TPr=i(Cw),$7e=n(Cw,"P",{});var uCt=s($7e);MPr=r(uCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uCt.forEach(t),EPr=i(Cw),Jc=n(Cw,"P",{});var FZ=s(Jc);CPr=r(FZ,`Note:
Loading a model from its configuration file does `),k7e=n(FZ,"STRONG",{});var _Ct=s(k7e);wPr=r(_Ct,"not"),_Ct.forEach(t),APr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(FZ,"A",{href:!0});var bCt=s(wY);yPr=r(bCt,"from_pretrained()"),bCt.forEach(t),LPr=r(FZ," to load the model weights."),FZ.forEach(t),xPr=i(Cw),T(nC.$$.fragment,Cw),Cw.forEach(t),$Pr=i(Kl),Wr=n(Kl,"DIV",{class:!0});var Zl=s(Wr);T(Cx.$$.fragment,Zl),kPr=i(Zl),S7e=n(Zl,"P",{});var vCt=s(S7e);SPr=r(vCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vCt.forEach(t),RPr=i(Zl),vn=n(Zl,"P",{});var ww=s(vn);BPr=r(ww,"The model class to instantiate is selected based on the "),R7e=n(ww,"CODE",{});var FCt=s(R7e);PPr=r(FCt,"model_type"),FCt.forEach(t),IPr=r(ww,` property of the config object (either
passed as an argument or loaded from `),B7e=n(ww,"CODE",{});var TCt=s(B7e);qPr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),NPr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(ww,"CODE",{});var MCt=s(P7e);jPr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),DPr=r(ww,":"),ww.forEach(t),GPr=i(Zl),wx=n(Zl,"UL",{});var JNe=s(wx);sC=n(JNe,"LI",{});var XBe=s(sC);I7e=n(XBe,"STRONG",{});var ECt=s(I7e);OPr=r(ECt,"beit"),ECt.forEach(t),VPr=r(XBe," \u2014 "),AY=n(XBe,"A",{href:!0});var CCt=s(AY);XPr=r(CCt,"FlaxBeitForImageClassification"),CCt.forEach(t),zPr=r(XBe," (BEiT model)"),XBe.forEach(t),QPr=i(JNe),lC=n(JNe,"LI",{});var zBe=s(lC);q7e=n(zBe,"STRONG",{});var wCt=s(q7e);WPr=r(wCt,"vit"),wCt.forEach(t),HPr=r(zBe," \u2014 "),yY=n(zBe,"A",{href:!0});var ACt=s(yY);UPr=r(ACt,"FlaxViTForImageClassification"),ACt.forEach(t),JPr=r(zBe," (ViT model)"),zBe.forEach(t),JNe.forEach(t),YPr=i(Zl),T(iC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),QIe=i(f),Yc=n(f,"H2",{class:!0});var YNe=s(Yc);dC=n(YNe,"A",{id:!0,class:!0,href:!0});var yCt=s(dC);N7e=n(yCt,"SPAN",{});var LCt=s(N7e);T(Ax.$$.fragment,LCt),LCt.forEach(t),yCt.forEach(t),KPr=i(YNe),j7e=n(YNe,"SPAN",{});var xCt=s(j7e);ZPr=r(xCt,"FlaxAutoModelForVision2Seq"),xCt.forEach(t),YNe.forEach(t),WIe=i(f),Tr=n(f,"DIV",{class:!0});var ei=s(Tr);T(yx.$$.fragment,ei),eIr=i(ei),Kc=n(ei,"P",{});var TZ=s(Kc);oIr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LY=n(TZ,"A",{href:!0});var $Ct=s(LY);rIr=r($Ct,"from_pretrained()"),$Ct.forEach(t),tIr=r(TZ," class method or the "),xY=n(TZ,"A",{href:!0});var kCt=s(xY);aIr=r(kCt,"from_config()"),kCt.forEach(t),nIr=r(TZ,` class
method.`),TZ.forEach(t),sIr=i(ei),Lx=n(ei,"P",{});var KNe=s(Lx);lIr=r(KNe,"This class cannot be instantiated directly using "),D7e=n(KNe,"CODE",{});var SCt=s(D7e);iIr=r(SCt,"__init__()"),SCt.forEach(t),dIr=r(KNe," (throws an error)."),KNe.forEach(t),cIr=i(ei),Wt=n(ei,"DIV",{class:!0});var Aw=s(Wt);T(xx.$$.fragment,Aw),fIr=i(Aw),G7e=n(Aw,"P",{});var RCt=s(G7e);mIr=r(RCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RCt.forEach(t),gIr=i(Aw),Zc=n(Aw,"P",{});var MZ=s(Zc);hIr=r(MZ,`Note:
Loading a model from its configuration file does `),O7e=n(MZ,"STRONG",{});var BCt=s(O7e);pIr=r(BCt,"not"),BCt.forEach(t),uIr=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(MZ,"A",{href:!0});var PCt=s($Y);_Ir=r(PCt,"from_pretrained()"),PCt.forEach(t),bIr=r(MZ," to load the model weights."),MZ.forEach(t),vIr=i(Aw),T(cC.$$.fragment,Aw),Aw.forEach(t),FIr=i(ei),Hr=n(ei,"DIV",{class:!0});var oi=s(Hr);T($x.$$.fragment,oi),TIr=i(oi),V7e=n(oi,"P",{});var ICt=s(V7e);MIr=r(ICt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ICt.forEach(t),EIr=i(oi),Fn=n(oi,"P",{});var yw=s(Fn);CIr=r(yw,"The model class to instantiate is selected based on the "),X7e=n(yw,"CODE",{});var qCt=s(X7e);wIr=r(qCt,"model_type"),qCt.forEach(t),AIr=r(yw,` property of the config object (either
passed as an argument or loaded from `),z7e=n(yw,"CODE",{});var NCt=s(z7e);yIr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),LIr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(yw,"CODE",{});var jCt=s(Q7e);xIr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),$Ir=r(yw,":"),yw.forEach(t),kIr=i(oi),W7e=n(oi,"UL",{});var DCt=s(W7e);fC=n(DCt,"LI",{});var QBe=s(fC);H7e=n(QBe,"STRONG",{});var GCt=s(H7e);SIr=r(GCt,"vision-encoder-decoder"),GCt.forEach(t),RIr=r(QBe," \u2014 "),kY=n(QBe,"A",{href:!0});var OCt=s(kY);BIr=r(OCt,"FlaxVisionEncoderDecoderModel"),OCt.forEach(t),PIr=r(QBe," (Vision Encoder decoder model)"),QBe.forEach(t),DCt.forEach(t),IIr=i(oi),T(mC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Xwt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer"),c(ii,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(lf,"id","extending-the-auto-classes"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#extending-the-auto-classes"),c(di,"class","relative group"),c(cf,"id","transformers.AutoConfig"),c(cf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cf,"href","#transformers.AutoConfig"),c(ci,"class","relative group"),c(J9,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Y9,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig"),c(K9,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(Z9,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig"),c(e$,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig"),c(o$,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(r$,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig"),c(t$,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(a$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(n$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(s$,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig"),c(l$,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig"),c(i$,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig"),c(d$,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig"),c(c$,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig"),c(f$,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig"),c(m$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(g$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(h$,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(p$,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig"),c(u$,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(_$,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(b$,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig"),c(v$,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig"),c(F$,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig"),c(T$,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig"),c(M$,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig"),c(E$,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig"),c(C$,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(w$,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig"),c(A$,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig"),c(y$,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig"),c(L$,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig"),c(x$,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig"),c($$,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config"),c(k$,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(S$,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig"),c(R$,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig"),c(B$,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig"),c(P$,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(I$,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(q$,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(N$,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(j$,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig"),c(D$,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig"),c(G$,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig"),c(O$,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig"),c(V$,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config"),c(X$,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig"),c(z$,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Q$,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig"),c(W$,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(H$,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(U$,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig"),c(J$,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config"),c(Y$,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(K$,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Z$,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig"),c(ek,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ok,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig"),c(rk,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(tk,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(ak,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(nk,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagConfig"),c(sk,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmConfig"),c(lk,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig"),c(ik,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig"),c(dk,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig"),c(ck,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig"),c(fk,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig"),c(mk,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig"),c(gk,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig"),c(hk,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig"),c(pk,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig"),c(uk,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig"),c(_k,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(bk,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(vk,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Fk,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig"),c(Tk,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Mk,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig"),c(Ek,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config"),c(Ck,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig"),c(wk,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(Ak,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yk,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig"),c(Lk,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(xk,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c($k,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig"),c(kk,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig"),c(Sk,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Rk,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Bk,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Pk,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig"),c(Ik,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(qk,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Nk,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig"),c(jk,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig"),c(Dk,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig"),c(Gk,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ok,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Vk,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Xk,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig"),c(zk,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig"),c(Qk,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dg,"id","transformers.AutoTokenizer"),c(dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dg,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(Wk,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Hk,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(Uk,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Jk,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizer"),c(Yk,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizerFast"),c(Kk,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Zk,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(eS,"href","/docs/transformers/pr_17060/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(oS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(rS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(tS,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(aS,"href","/docs/transformers/pr_17060/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(nS,"href","/docs/transformers/pr_17060/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(sS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(lS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(iS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(fS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(mS,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(gS,"href","/docs/transformers/pr_17060/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(hS,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizer"),c(pS,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(uS,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineTokenizer"),c(_S,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizer"),c(bS,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(vS,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(FS,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(TS,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizer"),c(MS,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(ES,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(CS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AS,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizer"),c(yS,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(LS,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(xS,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c($S,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(kS,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(SS,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(RS,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(BS,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizer"),c(PS,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(IS,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(qS,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizer"),c(NS,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(jS,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(DS,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizer"),c(GS,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(OS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(QS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WS,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(HS,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizer"),c(US,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(JS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(eR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(oR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(rR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(tR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(aR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(nR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(sR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(lR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizer"),c(iR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizerFast"),c(dR,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizer"),c(cR,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(fR,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeTokenizer"),c(mR,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(gR,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(hR,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(pR,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianTokenizer"),c(uR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizer"),c(_R,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(bR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(vR,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(FR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(TR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(MR,"href","/docs/transformers/pr_17060/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ER,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(CR,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(wR,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(AR,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(yR,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(LR,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(xR,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c($R,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kR,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(SR,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(RR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(PR,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(IR,"href","/docs/transformers/pr_17060/en/model_doc/phobert#transformers.PhobertTokenizer"),c(qR,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartTokenizer"),c(NR,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(jR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(DR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(GR,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagTokenizer"),c(OR,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizer"),c(VR,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizerFast"),c(XR,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizer"),c(zR,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(QR,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizer"),c(WR,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(HR,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(UR,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(ZR,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(eB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(oB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(rB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizer"),c(tB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(aB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(nB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(lB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(iB,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasTokenizer"),c(dB,"href","/docs/transformers/pr_17060/en/model_doc/tapex#transformers.TapexTokenizer"),c(cB,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(fB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(mB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(pB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizer"),c(uB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(_B,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMTokenizer"),c(bB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(vB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(FB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(TB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(CB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(wB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(AB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoFeatureExtractor"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoFeatureExtractor"),c(gi,"class","relative group"),c(yB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(LB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c($B,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(jB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(DB,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uh,"id","transformers.AutoProcessor"),c(uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uh,"href","#transformers.AutoProcessor"),c(hi,"class","relative group"),c(ZB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(eP,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPProcessor"),c(oP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(rP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(tP,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(aP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(lP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(iP,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRProcessor"),c(dP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fP,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltProcessor"),c(mP,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(gP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hP,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoModel"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(pP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uP,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_P,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel"),c(vP,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel"),c(FP,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel"),c(TP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(MP,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(EP,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel"),c(CP,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(wP,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(AP,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(yP,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel"),c(LP,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel"),c(xP,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel"),c($P,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel"),c(kP,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel"),c(SP,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel"),c(RP,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(BP,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(PP,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(IP,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel"),c(qP,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(NP,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(jP,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel"),c(DP,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel"),c(GP,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel"),c(OP,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(VP,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel"),c(XP,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel"),c(zP,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel"),c(QP,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel"),c(WP,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel"),c(HP,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel"),c(UP,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel"),c(JP,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel"),c(YP,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model"),c(KP,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(ZP,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel"),c(eI,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel"),c(oI,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel"),c(rI,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(tI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(aI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(nI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(sI,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel"),c(lI,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel"),c(iI,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel"),c(dI,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel"),c(cI,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model"),c(fI,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel"),c(mI,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel"),c(gI,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel"),c(hI,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(pI,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel"),c(uI,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel"),c(_I,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model"),c(bI,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel"),c(vI,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(FI,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel"),c(TI,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel"),c(MI,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel"),c(EI,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel"),c(CI,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(wI,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel"),c(AI,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel"),c(yI,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel"),c(LI,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel"),c(xI,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel"),c($I,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(kI,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel"),c(SI,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel"),c(RI,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel"),c(BI,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel"),c(PI,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel"),c(II,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(qI,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel"),c(NI,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(jI,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel"),c(DI,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model"),c(GI,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel"),c(OI,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(VI,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel"),c(XI,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(zI,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel"),c(QI,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel"),c(WI,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(HI,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel"),c(UI,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel"),c(JI,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(YI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(KI,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel"),c(ZI,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel"),c(eq,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel"),c(oq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(rq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(tq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(aq,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel"),c(nq,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel"),c(sq,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Au,"id","transformers.AutoModelForPreTraining"),c(Au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Au,"href","#transformers.AutoModelForPreTraining"),c(vi,"class","relative group"),c(lq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cq,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining"),c(fq,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mq,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining"),c(gq,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(hq,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pq,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uq,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(_q,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bq,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vq,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Fq,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Tq,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Mq,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Eq,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Cq,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(wq,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Aq,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Lq,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(xq,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c($q,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(kq,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Sq,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Rq,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Bq,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(Pq,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Iq,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qq,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Nq,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jq,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Gq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Oq,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Vq,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Xq,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zq,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Qq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p_,"id","transformers.AutoModelForCausalLM"),c(p_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p_,"href","#transformers.AutoModelForCausalLM"),c(Mi,"class","relative group"),c(Uq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yq,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kq,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM"),c(Zq,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel"),c(eN,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(oN,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(rN,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(tN,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(aN,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(nN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(sN,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lN,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(iN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM"),c(dN,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cN,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(fN,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(mN,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM"),c(gN,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM"),c(hN,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(pN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uN,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(_N,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(bN,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(vN,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(FN,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(TN,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(MN,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(EN,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(CN,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(wN,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(AN,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yN,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(LN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c($N,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(kN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(SN,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.AutoModelForMaskedLM"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.AutoModelForMaskedLM"),c(wi,"class","relative group"),c(RN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IN,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qN,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(NN,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(DN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(GN,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(ON,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(VN,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(XN,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zN,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(QN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(WN,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(HN,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(UN,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(JN,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(YN,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(KN,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(oj,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(rj,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tj,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(aj,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(nj,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(lj,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ij,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(dj,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(cj,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mj,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(pj,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j0,"id","transformers.AutoModelForSeq2SeqLM"),c(j0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j0,"href","#transformers.AutoModelForSeq2SeqLM"),c(Li,"class","relative group"),c(uj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_j,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Cj,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel"),c(Lj,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c($j,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Bj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s1,"id","transformers.AutoModelForSequenceClassification"),c(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s1,"href","#transformers.AutoModelForSequenceClassification"),c(ki,"class","relative group"),c(Ij,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jj,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c($D,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ab,"id","transformers.AutoModelForMultipleChoice"),c(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ab,"href","#transformers.AutoModelForMultipleChoice"),c(Bi,"class","relative group"),c(RD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ID,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(qD,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ND,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(jD,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(DD,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(GD,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(OD,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(VD,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(XD,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(zD,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(QD,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(WD,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(HD,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(UD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(JD,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(YD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(KD,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(eG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ib,"id","transformers.AutoModelForNextSentencePrediction"),c(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ib,"href","#transformers.AutoModelForNextSentencePrediction"),c(qi,"class","relative group"),c(cG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(hG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(pG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(uG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(_G,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForTokenClassification"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForTokenClassification"),c(Di,"class","relative group"),c(bG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(MG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification"),c(EG,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(CG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(wG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification"),c(AG,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(yG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(LG,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(xG,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c($G,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kG,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(SG,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(RG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(BG,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(PG,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(IG,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(qG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(NG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(jG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(DG,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(GG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(OG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(VG,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(XG,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(zG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(QG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(WG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(HG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(UG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(JG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(YG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(KG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(eO,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x2,"id","transformers.AutoModelForQuestionAnswering"),c(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x2,"href","#transformers.AutoModelForQuestionAnswering"),c(Vi,"class","relative group"),c(oO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aO,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(bO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(DO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(VO,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForTableQuestionAnswering"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qi,"class","relative group"),c(XO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WO,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForImageClassification"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForImageClassification"),c(Ui,"class","relative group"),c(HO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification"),c(KO,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(ZO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(eV,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification"),c(oV,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(rV,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(tV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(aV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(nV,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(sV,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(lV,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(iV,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(dV,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(cV,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification"),c(fV,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification"),c(mV,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForVision2Seq"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForVision2Seq"),c(Ki,"class","relative group"),c(gV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForAudioClassification"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForAudioClassification"),c(od,"class","relative group"),c(_V,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForAudioFrameClassification"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForAudioFrameClassification"),c(ad,"class","relative group"),c(LV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($V,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(SV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(RV,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(BV,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForCTC"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForCTC"),c(ld,"class","relative group"),c(PV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(jV,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC"),c(DV,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC"),c(GV,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC"),c(OV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(VV,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(XV,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(zV,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(cd,"class","relative group"),c(QV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(JV,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForAudioXVector"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForAudioXVector"),c(gd,"class","relative group"),c(YV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(oX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(rX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(tX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForMaskedImageModeling"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(aX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(iX,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(dX,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForObjectDetection"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForObjectDetection"),c(Fd,"class","relative group"),c(cX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection"),c(hX,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForImageSegmentation"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForImageSegmentation"),c(Ed,"class","relative group"),c(pX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.AutoModelForSemanticSegmentation"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ad,"class","relative group"),c(vX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MX,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(EX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(CX,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(wX,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i6,"id","transformers.AutoModelForInstanceSegmentation"),c(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i6,"href","#transformers.AutoModelForInstanceSegmentation"),c(xd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.TFAutoModel"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.TFAutoModel"),c(Sd,"class","relative group"),c($X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel"),c(BX,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel"),c(PX,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel"),c(IX,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(qX,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(NX,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel"),c(jX,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel"),c(DX,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel"),c(GX,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel"),c(OX,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel"),c(VX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(XX,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel"),c(zX,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(QX,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(WX,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(HX,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel"),c(UX,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(JX,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel"),c(YX,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(KX,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model"),c(ZX,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel"),c(ez,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel"),c(oz,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(rz,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel"),c(tz,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel"),c(az,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel"),c(nz,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel"),c(sz,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel"),c(lz,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(iz,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel"),c(dz,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model"),c(cz,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(fz,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel"),c(mz,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel"),c(gz,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel"),c(hz,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel"),c(pz,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(uz,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model"),c(_z,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel"),c(bz,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(vz,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel"),c(Fz,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Tz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Mz,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel"),c(Ez,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Cz,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.TFAutoModelForPreTraining"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.TFAutoModelForPreTraining"),c(Pd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(xz,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c($z,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining"),c(kz,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Sz,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Rz,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Bz,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Pz,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Iz,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(qz,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Nz,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(jz,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Dz,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Gz,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Oz,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Vz,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Xz,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(zz,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Qz,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Wz,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Hz,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Uz,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Jz,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.TFAutoModelForCausalLM"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.TFAutoModelForCausalLM"),c(Nd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(rQ,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aQ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(nQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(sQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(lQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(iQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(dQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.TFAutoModelForImageClassification"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.TFAutoModelForImageClassification"),c(Gd,"class","relative group"),c(mQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(uQ,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(_Q,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForMaskedLM"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForMaskedLM"),c(zd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($Q,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Hd,"class","relative group"),c(GQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(zQ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(QQ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(HQ,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel"),c(JQ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(ZQ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.TFAutoModelForSequenceClassification"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.TFAutoModelForSequenceClassification"),c(Yd,"class","relative group"),c(eW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForMultipleChoice"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ec,"class","relative group"),c(xW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(RW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(BW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(PW,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(IW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(qW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(NW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(jW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(DW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(GW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(OW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(VW,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(zW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(QW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(WW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(HW,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForTableQuestionAnswering"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(tc,"class","relative group"),c(UW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.TFAutoModelForTokenClassification"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.TFAutoModelForTokenClassification"),c(sc,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(tH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(aH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(nH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(sH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(lH,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(iH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(dH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(cH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(fH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(mH,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(gH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(hH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(pH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(uH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(_H,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(bH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(vH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(FH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(TH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForQuestionAnswering"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(dc,"class","relative group"),c(MH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c($H,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(kH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(SH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(RH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(BH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(PH,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(qH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(jH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(DH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(GH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(OH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(VH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(XH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForVision2Seq"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForVision2Seq"),c(mc,"class","relative group"),c(zH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(pc,"class","relative group"),c(UH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.FlaxAutoModel"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.FlaxAutoModel"),c(bc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel"),c(tU,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel"),c(aU,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel"),c(nU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel"),c(sU,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(lU,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(iU,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(dU,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel"),c(cU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(fU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel"),c(mU,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(gU,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(hU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(pU,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel"),c(uU,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel"),c(_U,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bU,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(vU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(FU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(TU,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model"),c(MU,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(EU,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel"),c(CU,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(wU,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(AU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.FlaxAutoModelForCausalLM"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Tc,"class","relative group"),c(yU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(kU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(SU,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(RU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(BU,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PU,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(IU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(NU,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.FlaxAutoModelForPreTraining"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Cc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(VU,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zU,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(QU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(WU,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HU,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(JU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(YU,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(KU,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ZU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.FlaxAutoModelForMaskedLM"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(yc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(aJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(sJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(iJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c($c,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(vJ,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(FJ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(TJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Rc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($J,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Ic,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForTokenClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(jc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Oc,"class","relative group"),c(iY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(uY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(_Y,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(zc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForImageClassification"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Hc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(yY,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModelForVision2Seq"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Yc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ri),b(f,tf,_),b(f,Kr,_),e(Kr,ti),e(Kr,ai),e(ai,Lw),e(Kr,af),b(f,qe,_),b(f,Xe,_),e(Xe,ni),e(Xe,Mn),e(Mn,xw),e(Xe,En),e(Xe,Cn),e(Cn,$w),e(Xe,si),e(Xe,wn),e(wn,kw),e(Xe,li),b(f,nf,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,X9),e(Ae,ii),e(ii,z9),e(Ae,Q9),b(f,Eo,_),b(f,Fa,_),e(Fa,W9),e(Fa,sf),e(sf,H9),e(Fa,ZNe),b(f,WBe,_),b(f,di,_),e(di,lf),e(lf,EZ),M(Sw,EZ,null),e(di,eje),e(di,CZ),e(CZ,oje),b(f,HBe,_),b(f,An,_),e(An,rje),e(An,wZ),e(wZ,tje),e(An,aje),e(An,AZ),e(AZ,nje),e(An,sje),b(f,UBe,_),M(Rw,f,_),b(f,JBe,_),b(f,U9,_),e(U9,lje),b(f,YBe,_),M(df,f,_),b(f,KBe,_),b(f,ci,_),e(ci,cf),e(cf,yZ),M(Bw,yZ,null),e(ci,ije),e(ci,LZ),e(LZ,dje),b(f,ZBe,_),b(f,Co,_),M(Pw,Co,null),e(Co,cje),e(Co,Iw),e(Iw,fje),e(Iw,J9),e(J9,mje),e(Iw,gje),e(Co,hje),e(Co,qw),e(qw,pje),e(qw,xZ),e(xZ,uje),e(qw,_je),e(Co,bje),e(Co,Mr),M(Nw,Mr,null),e(Mr,vje),e(Mr,$Z),e($Z,Fje),e(Mr,Tje),e(Mr,fi),e(fi,Mje),e(fi,kZ),e(kZ,Eje),e(fi,Cje),e(fi,SZ),e(SZ,wje),e(fi,Aje),e(Mr,yje),e(Mr,A),e(A,ff),e(ff,RZ),e(RZ,Lje),e(ff,xje),e(ff,Y9),e(Y9,$je),e(ff,kje),e(A,Sje),e(A,mf),e(mf,BZ),e(BZ,Rje),e(mf,Bje),e(mf,K9),e(K9,Pje),e(mf,Ije),e(A,qje),e(A,gf),e(gf,PZ),e(PZ,Nje),e(gf,jje),e(gf,Z9),e(Z9,Dje),e(gf,Gje),e(A,Oje),e(A,hf),e(hf,IZ),e(IZ,Vje),e(hf,Xje),e(hf,e$),e(e$,zje),e(hf,Qje),e(A,Wje),e(A,pf),e(pf,qZ),e(qZ,Hje),e(pf,Uje),e(pf,o$),e(o$,Jje),e(pf,Yje),e(A,Kje),e(A,uf),e(uf,NZ),e(NZ,Zje),e(uf,eDe),e(uf,r$),e(r$,oDe),e(uf,rDe),e(A,tDe),e(A,_f),e(_f,jZ),e(jZ,aDe),e(_f,nDe),e(_f,t$),e(t$,sDe),e(_f,lDe),e(A,iDe),e(A,bf),e(bf,DZ),e(DZ,dDe),e(bf,cDe),e(bf,a$),e(a$,fDe),e(bf,mDe),e(A,gDe),e(A,vf),e(vf,GZ),e(GZ,hDe),e(vf,pDe),e(vf,n$),e(n$,uDe),e(vf,_De),e(A,bDe),e(A,Ff),e(Ff,OZ),e(OZ,vDe),e(Ff,FDe),e(Ff,s$),e(s$,TDe),e(Ff,MDe),e(A,EDe),e(A,Tf),e(Tf,VZ),e(VZ,CDe),e(Tf,wDe),e(Tf,l$),e(l$,ADe),e(Tf,yDe),e(A,LDe),e(A,Mf),e(Mf,XZ),e(XZ,xDe),e(Mf,$De),e(Mf,i$),e(i$,kDe),e(Mf,SDe),e(A,RDe),e(A,Ef),e(Ef,zZ),e(zZ,BDe),e(Ef,PDe),e(Ef,d$),e(d$,IDe),e(Ef,qDe),e(A,NDe),e(A,Cf),e(Cf,QZ),e(QZ,jDe),e(Cf,DDe),e(Cf,c$),e(c$,GDe),e(Cf,ODe),e(A,VDe),e(A,wf),e(wf,WZ),e(WZ,XDe),e(wf,zDe),e(wf,f$),e(f$,QDe),e(wf,WDe),e(A,HDe),e(A,Af),e(Af,HZ),e(HZ,UDe),e(Af,JDe),e(Af,m$),e(m$,YDe),e(Af,KDe),e(A,ZDe),e(A,yf),e(yf,UZ),e(UZ,eGe),e(yf,oGe),e(yf,g$),e(g$,rGe),e(yf,tGe),e(A,aGe),e(A,Lf),e(Lf,JZ),e(JZ,nGe),e(Lf,sGe),e(Lf,h$),e(h$,lGe),e(Lf,iGe),e(A,dGe),e(A,xf),e(xf,YZ),e(YZ,cGe),e(xf,fGe),e(xf,p$),e(p$,mGe),e(xf,gGe),e(A,hGe),e(A,$f),e($f,KZ),e(KZ,pGe),e($f,uGe),e($f,u$),e(u$,_Ge),e($f,bGe),e(A,vGe),e(A,kf),e(kf,ZZ),e(ZZ,FGe),e(kf,TGe),e(kf,_$),e(_$,MGe),e(kf,EGe),e(A,CGe),e(A,Sf),e(Sf,eee),e(eee,wGe),e(Sf,AGe),e(Sf,b$),e(b$,yGe),e(Sf,LGe),e(A,xGe),e(A,Rf),e(Rf,oee),e(oee,$Ge),e(Rf,kGe),e(Rf,v$),e(v$,SGe),e(Rf,RGe),e(A,BGe),e(A,Bf),e(Bf,ree),e(ree,PGe),e(Bf,IGe),e(Bf,F$),e(F$,qGe),e(Bf,NGe),e(A,jGe),e(A,Pf),e(Pf,tee),e(tee,DGe),e(Pf,GGe),e(Pf,T$),e(T$,OGe),e(Pf,VGe),e(A,XGe),e(A,If),e(If,aee),e(aee,zGe),e(If,QGe),e(If,M$),e(M$,WGe),e(If,HGe),e(A,UGe),e(A,qf),e(qf,nee),e(nee,JGe),e(qf,YGe),e(qf,E$),e(E$,KGe),e(qf,ZGe),e(A,eOe),e(A,Nf),e(Nf,see),e(see,oOe),e(Nf,rOe),e(Nf,C$),e(C$,tOe),e(Nf,aOe),e(A,nOe),e(A,jf),e(jf,lee),e(lee,sOe),e(jf,lOe),e(jf,w$),e(w$,iOe),e(jf,dOe),e(A,cOe),e(A,Df),e(Df,iee),e(iee,fOe),e(Df,mOe),e(Df,A$),e(A$,gOe),e(Df,hOe),e(A,pOe),e(A,Gf),e(Gf,dee),e(dee,uOe),e(Gf,_Oe),e(Gf,y$),e(y$,bOe),e(Gf,vOe),e(A,FOe),e(A,Of),e(Of,cee),e(cee,TOe),e(Of,MOe),e(Of,L$),e(L$,EOe),e(Of,COe),e(A,wOe),e(A,Vf),e(Vf,fee),e(fee,AOe),e(Vf,yOe),e(Vf,x$),e(x$,LOe),e(Vf,xOe),e(A,$Oe),e(A,Xf),e(Xf,mee),e(mee,kOe),e(Xf,SOe),e(Xf,$$),e($$,ROe),e(Xf,BOe),e(A,POe),e(A,zf),e(zf,gee),e(gee,IOe),e(zf,qOe),e(zf,k$),e(k$,NOe),e(zf,jOe),e(A,DOe),e(A,Qf),e(Qf,hee),e(hee,GOe),e(Qf,OOe),e(Qf,S$),e(S$,VOe),e(Qf,XOe),e(A,zOe),e(A,Wf),e(Wf,pee),e(pee,QOe),e(Wf,WOe),e(Wf,R$),e(R$,HOe),e(Wf,UOe),e(A,JOe),e(A,Hf),e(Hf,uee),e(uee,YOe),e(Hf,KOe),e(Hf,B$),e(B$,ZOe),e(Hf,eVe),e(A,oVe),e(A,Uf),e(Uf,_ee),e(_ee,rVe),e(Uf,tVe),e(Uf,P$),e(P$,aVe),e(Uf,nVe),e(A,sVe),e(A,Jf),e(Jf,bee),e(bee,lVe),e(Jf,iVe),e(Jf,I$),e(I$,dVe),e(Jf,cVe),e(A,fVe),e(A,Yf),e(Yf,vee),e(vee,mVe),e(Yf,gVe),e(Yf,q$),e(q$,hVe),e(Yf,pVe),e(A,uVe),e(A,Kf),e(Kf,Fee),e(Fee,_Ve),e(Kf,bVe),e(Kf,N$),e(N$,vVe),e(Kf,FVe),e(A,TVe),e(A,Zf),e(Zf,Tee),e(Tee,MVe),e(Zf,EVe),e(Zf,j$),e(j$,CVe),e(Zf,wVe),e(A,AVe),e(A,em),e(em,Mee),e(Mee,yVe),e(em,LVe),e(em,D$),e(D$,xVe),e(em,$Ve),e(A,kVe),e(A,om),e(om,Eee),e(Eee,SVe),e(om,RVe),e(om,G$),e(G$,BVe),e(om,PVe),e(A,IVe),e(A,rm),e(rm,Cee),e(Cee,qVe),e(rm,NVe),e(rm,O$),e(O$,jVe),e(rm,DVe),e(A,GVe),e(A,tm),e(tm,wee),e(wee,OVe),e(tm,VVe),e(tm,V$),e(V$,XVe),e(tm,zVe),e(A,QVe),e(A,am),e(am,Aee),e(Aee,WVe),e(am,HVe),e(am,X$),e(X$,UVe),e(am,JVe),e(A,YVe),e(A,nm),e(nm,yee),e(yee,KVe),e(nm,ZVe),e(nm,z$),e(z$,eXe),e(nm,oXe),e(A,rXe),e(A,sm),e(sm,Lee),e(Lee,tXe),e(sm,aXe),e(sm,Q$),e(Q$,nXe),e(sm,sXe),e(A,lXe),e(A,lm),e(lm,xee),e(xee,iXe),e(lm,dXe),e(lm,W$),e(W$,cXe),e(lm,fXe),e(A,mXe),e(A,im),e(im,$ee),e($ee,gXe),e(im,hXe),e(im,H$),e(H$,pXe),e(im,uXe),e(A,_Xe),e(A,dm),e(dm,kee),e(kee,bXe),e(dm,vXe),e(dm,U$),e(U$,FXe),e(dm,TXe),e(A,MXe),e(A,cm),e(cm,See),e(See,EXe),e(cm,CXe),e(cm,J$),e(J$,wXe),e(cm,AXe),e(A,yXe),e(A,fm),e(fm,Ree),e(Ree,LXe),e(fm,xXe),e(fm,Y$),e(Y$,$Xe),e(fm,kXe),e(A,SXe),e(A,mm),e(mm,Bee),e(Bee,RXe),e(mm,BXe),e(mm,K$),e(K$,PXe),e(mm,IXe),e(A,qXe),e(A,gm),e(gm,Pee),e(Pee,NXe),e(gm,jXe),e(gm,Z$),e(Z$,DXe),e(gm,GXe),e(A,OXe),e(A,hm),e(hm,Iee),e(Iee,VXe),e(hm,XXe),e(hm,ek),e(ek,zXe),e(hm,QXe),e(A,WXe),e(A,pm),e(pm,qee),e(qee,HXe),e(pm,UXe),e(pm,ok),e(ok,JXe),e(pm,YXe),e(A,KXe),e(A,um),e(um,Nee),e(Nee,ZXe),e(um,eze),e(um,rk),e(rk,oze),e(um,rze),e(A,tze),e(A,_m),e(_m,jee),e(jee,aze),e(_m,nze),e(_m,tk),e(tk,sze),e(_m,lze),e(A,ize),e(A,bm),e(bm,Dee),e(Dee,dze),e(bm,cze),e(bm,ak),e(ak,fze),e(bm,mze),e(A,gze),e(A,vm),e(vm,Gee),e(Gee,hze),e(vm,pze),e(vm,nk),e(nk,uze),e(vm,_ze),e(A,bze),e(A,Fm),e(Fm,Oee),e(Oee,vze),e(Fm,Fze),e(Fm,sk),e(sk,Tze),e(Fm,Mze),e(A,Eze),e(A,Tm),e(Tm,Vee),e(Vee,Cze),e(Tm,wze),e(Tm,lk),e(lk,Aze),e(Tm,yze),e(A,Lze),e(A,Mm),e(Mm,Xee),e(Xee,xze),e(Mm,$ze),e(Mm,ik),e(ik,kze),e(Mm,Sze),e(A,Rze),e(A,Em),e(Em,zee),e(zee,Bze),e(Em,Pze),e(Em,dk),e(dk,Ize),e(Em,qze),e(A,Nze),e(A,Cm),e(Cm,Qee),e(Qee,jze),e(Cm,Dze),e(Cm,ck),e(ck,Gze),e(Cm,Oze),e(A,Vze),e(A,wm),e(wm,Wee),e(Wee,Xze),e(wm,zze),e(wm,fk),e(fk,Qze),e(wm,Wze),e(A,Hze),e(A,Am),e(Am,Hee),e(Hee,Uze),e(Am,Jze),e(Am,mk),e(mk,Yze),e(Am,Kze),e(A,Zze),e(A,ym),e(ym,Uee),e(Uee,eQe),e(ym,oQe),e(ym,gk),e(gk,rQe),e(ym,tQe),e(A,aQe),e(A,Lm),e(Lm,Jee),e(Jee,nQe),e(Lm,sQe),e(Lm,hk),e(hk,lQe),e(Lm,iQe),e(A,dQe),e(A,xm),e(xm,Yee),e(Yee,cQe),e(xm,fQe),e(xm,pk),e(pk,mQe),e(xm,gQe),e(A,hQe),e(A,$m),e($m,Kee),e(Kee,pQe),e($m,uQe),e($m,uk),e(uk,_Qe),e($m,bQe),e(A,vQe),e(A,km),e(km,Zee),e(Zee,FQe),e(km,TQe),e(km,_k),e(_k,MQe),e(km,EQe),e(A,CQe),e(A,Sm),e(Sm,eoe),e(eoe,wQe),e(Sm,AQe),e(Sm,bk),e(bk,yQe),e(Sm,LQe),e(A,xQe),e(A,Rm),e(Rm,ooe),e(ooe,$Qe),e(Rm,kQe),e(Rm,vk),e(vk,SQe),e(Rm,RQe),e(A,BQe),e(A,Bm),e(Bm,roe),e(roe,PQe),e(Bm,IQe),e(Bm,Fk),e(Fk,qQe),e(Bm,NQe),e(A,jQe),e(A,Pm),e(Pm,toe),e(toe,DQe),e(Pm,GQe),e(Pm,Tk),e(Tk,OQe),e(Pm,VQe),e(A,XQe),e(A,Im),e(Im,aoe),e(aoe,zQe),e(Im,QQe),e(Im,Mk),e(Mk,WQe),e(Im,HQe),e(A,UQe),e(A,qm),e(qm,noe),e(noe,JQe),e(qm,YQe),e(qm,Ek),e(Ek,KQe),e(qm,ZQe),e(A,eWe),e(A,Nm),e(Nm,soe),e(soe,oWe),e(Nm,rWe),e(Nm,Ck),e(Ck,tWe),e(Nm,aWe),e(A,nWe),e(A,jm),e(jm,loe),e(loe,sWe),e(jm,lWe),e(jm,wk),e(wk,iWe),e(jm,dWe),e(A,cWe),e(A,Dm),e(Dm,ioe),e(ioe,fWe),e(Dm,mWe),e(Dm,Ak),e(Ak,gWe),e(Dm,hWe),e(A,pWe),e(A,Gm),e(Gm,doe),e(doe,uWe),e(Gm,_We),e(Gm,yk),e(yk,bWe),e(Gm,vWe),e(A,FWe),e(A,Om),e(Om,coe),e(coe,TWe),e(Om,MWe),e(Om,Lk),e(Lk,EWe),e(Om,CWe),e(A,wWe),e(A,Vm),e(Vm,foe),e(foe,AWe),e(Vm,yWe),e(Vm,xk),e(xk,LWe),e(Vm,xWe),e(A,$We),e(A,Xm),e(Xm,moe),e(moe,kWe),e(Xm,SWe),e(Xm,$k),e($k,RWe),e(Xm,BWe),e(A,PWe),e(A,zm),e(zm,goe),e(goe,IWe),e(zm,qWe),e(zm,kk),e(kk,NWe),e(zm,jWe),e(A,DWe),e(A,Qm),e(Qm,hoe),e(hoe,GWe),e(Qm,OWe),e(Qm,Sk),e(Sk,VWe),e(Qm,XWe),e(A,zWe),e(A,Wm),e(Wm,poe),e(poe,QWe),e(Wm,WWe),e(Wm,Rk),e(Rk,HWe),e(Wm,UWe),e(A,JWe),e(A,Hm),e(Hm,uoe),e(uoe,YWe),e(Hm,KWe),e(Hm,Bk),e(Bk,ZWe),e(Hm,eHe),e(A,oHe),e(A,Um),e(Um,_oe),e(_oe,rHe),e(Um,tHe),e(Um,Pk),e(Pk,aHe),e(Um,nHe),e(A,sHe),e(A,Jm),e(Jm,boe),e(boe,lHe),e(Jm,iHe),e(Jm,Ik),e(Ik,dHe),e(Jm,cHe),e(A,fHe),e(A,Ym),e(Ym,voe),e(voe,mHe),e(Ym,gHe),e(Ym,qk),e(qk,hHe),e(Ym,pHe),e(A,uHe),e(A,Km),e(Km,Foe),e(Foe,_He),e(Km,bHe),e(Km,Nk),e(Nk,vHe),e(Km,FHe),e(A,THe),e(A,Zm),e(Zm,Toe),e(Toe,MHe),e(Zm,EHe),e(Zm,jk),e(jk,CHe),e(Zm,wHe),e(A,AHe),e(A,eg),e(eg,Moe),e(Moe,yHe),e(eg,LHe),e(eg,Dk),e(Dk,xHe),e(eg,$He),e(A,kHe),e(A,og),e(og,Eoe),e(Eoe,SHe),e(og,RHe),e(og,Gk),e(Gk,BHe),e(og,PHe),e(A,IHe),e(A,rg),e(rg,Coe),e(Coe,qHe),e(rg,NHe),e(rg,Ok),e(Ok,jHe),e(rg,DHe),e(A,GHe),e(A,tg),e(tg,woe),e(woe,OHe),e(tg,VHe),e(tg,Vk),e(Vk,XHe),e(tg,zHe),e(A,QHe),e(A,ag),e(ag,Aoe),e(Aoe,WHe),e(ag,HHe),e(ag,Xk),e(Xk,UHe),e(ag,JHe),e(A,YHe),e(A,ng),e(ng,yoe),e(yoe,KHe),e(ng,ZHe),e(ng,zk),e(zk,eUe),e(ng,oUe),e(A,rUe),e(A,sg),e(sg,Loe),e(Loe,tUe),e(sg,aUe),e(sg,Qk),e(Qk,nUe),e(sg,sUe),e(Mr,lUe),M(lg,Mr,null),e(Co,iUe),e(Co,ig),M(jw,ig,null),e(ig,dUe),e(ig,xoe),e(xoe,cUe),b(f,ePe,_),b(f,mi,_),e(mi,dg),e(dg,$oe),M(Dw,$oe,null),e(mi,fUe),e(mi,koe),e(koe,mUe),b(f,oPe,_),b(f,wo,_),M(Gw,wo,null),e(wo,gUe),e(wo,Ow),e(Ow,hUe),e(Ow,Wk),e(Wk,pUe),e(Ow,uUe),e(wo,_Ue),e(wo,Vw),e(Vw,bUe),e(Vw,Soe),e(Soe,vUe),e(Vw,FUe),e(wo,TUe),e(wo,Er),M(Xw,Er,null),e(Er,MUe),e(Er,Roe),e(Roe,EUe),e(Er,CUe),e(Er,Ta),e(Ta,wUe),e(Ta,Boe),e(Boe,AUe),e(Ta,yUe),e(Ta,Poe),e(Poe,LUe),e(Ta,xUe),e(Ta,Ioe),e(Ioe,$Ue),e(Ta,kUe),e(Er,SUe),e(Er,k),e(k,yn),e(yn,qoe),e(qoe,RUe),e(yn,BUe),e(yn,Hk),e(Hk,PUe),e(yn,IUe),e(yn,Uk),e(Uk,qUe),e(yn,NUe),e(k,jUe),e(k,Ln),e(Ln,Noe),e(Noe,DUe),e(Ln,GUe),e(Ln,Jk),e(Jk,OUe),e(Ln,VUe),e(Ln,Yk),e(Yk,XUe),e(Ln,zUe),e(k,QUe),e(k,xn),e(xn,joe),e(joe,WUe),e(xn,HUe),e(xn,Kk),e(Kk,UUe),e(xn,JUe),e(xn,Zk),e(Zk,YUe),e(xn,KUe),e(k,ZUe),e(k,cg),e(cg,Doe),e(Doe,eJe),e(cg,oJe),e(cg,eS),e(eS,rJe),e(cg,tJe),e(k,aJe),e(k,$n),e($n,Goe),e(Goe,nJe),e($n,sJe),e($n,oS),e(oS,lJe),e($n,iJe),e($n,rS),e(rS,dJe),e($n,cJe),e(k,fJe),e(k,fg),e(fg,Ooe),e(Ooe,mJe),e(fg,gJe),e(fg,tS),e(tS,hJe),e(fg,pJe),e(k,uJe),e(k,mg),e(mg,Voe),e(Voe,_Je),e(mg,bJe),e(mg,aS),e(aS,vJe),e(mg,FJe),e(k,TJe),e(k,gg),e(gg,Xoe),e(Xoe,MJe),e(gg,EJe),e(gg,nS),e(nS,CJe),e(gg,wJe),e(k,AJe),e(k,kn),e(kn,zoe),e(zoe,yJe),e(kn,LJe),e(kn,sS),e(sS,xJe),e(kn,$Je),e(kn,lS),e(lS,kJe),e(kn,SJe),e(k,RJe),e(k,Sn),e(Sn,Qoe),e(Qoe,BJe),e(Sn,PJe),e(Sn,iS),e(iS,IJe),e(Sn,qJe),e(Sn,dS),e(dS,NJe),e(Sn,jJe),e(k,DJe),e(k,Rn),e(Rn,Woe),e(Woe,GJe),e(Rn,OJe),e(Rn,cS),e(cS,VJe),e(Rn,XJe),e(Rn,fS),e(fS,zJe),e(Rn,QJe),e(k,WJe),e(k,hg),e(hg,Hoe),e(Hoe,HJe),e(hg,UJe),e(hg,mS),e(mS,JJe),e(hg,YJe),e(k,KJe),e(k,pg),e(pg,Uoe),e(Uoe,ZJe),e(pg,eYe),e(pg,gS),e(gS,oYe),e(pg,rYe),e(k,tYe),e(k,Bn),e(Bn,Joe),e(Joe,aYe),e(Bn,nYe),e(Bn,hS),e(hS,sYe),e(Bn,lYe),e(Bn,pS),e(pS,iYe),e(Bn,dYe),e(k,cYe),e(k,ug),e(ug,Yoe),e(Yoe,fYe),e(ug,mYe),e(ug,uS),e(uS,gYe),e(ug,hYe),e(k,pYe),e(k,Pn),e(Pn,Koe),e(Koe,uYe),e(Pn,_Ye),e(Pn,_S),e(_S,bYe),e(Pn,vYe),e(Pn,bS),e(bS,FYe),e(Pn,TYe),e(k,MYe),e(k,In),e(In,Zoe),e(Zoe,EYe),e(In,CYe),e(In,vS),e(vS,wYe),e(In,AYe),e(In,FS),e(FS,yYe),e(In,LYe),e(k,xYe),e(k,qn),e(qn,ere),e(ere,$Ye),e(qn,kYe),e(qn,TS),e(TS,SYe),e(qn,RYe),e(qn,MS),e(MS,BYe),e(qn,PYe),e(k,IYe),e(k,_g),e(_g,ore),e(ore,qYe),e(_g,NYe),e(_g,ES),e(ES,jYe),e(_g,DYe),e(k,GYe),e(k,Nn),e(Nn,rre),e(rre,OYe),e(Nn,VYe),e(Nn,CS),e(CS,XYe),e(Nn,zYe),e(Nn,wS),e(wS,QYe),e(Nn,WYe),e(k,HYe),e(k,jn),e(jn,tre),e(tre,UYe),e(jn,JYe),e(jn,AS),e(AS,YYe),e(jn,KYe),e(jn,yS),e(yS,ZYe),e(jn,eKe),e(k,oKe),e(k,Dn),e(Dn,are),e(are,rKe),e(Dn,tKe),e(Dn,LS),e(LS,aKe),e(Dn,nKe),e(Dn,xS),e(xS,sKe),e(Dn,lKe),e(k,iKe),e(k,Gn),e(Gn,nre),e(nre,dKe),e(Gn,cKe),e(Gn,$S),e($S,fKe),e(Gn,mKe),e(Gn,kS),e(kS,gKe),e(Gn,hKe),e(k,pKe),e(k,On),e(On,sre),e(sre,uKe),e(On,_Ke),e(On,SS),e(SS,bKe),e(On,vKe),e(On,RS),e(RS,FKe),e(On,TKe),e(k,MKe),e(k,Vn),e(Vn,lre),e(lre,EKe),e(Vn,CKe),e(Vn,BS),e(BS,wKe),e(Vn,AKe),e(Vn,PS),e(PS,yKe),e(Vn,LKe),e(k,xKe),e(k,bg),e(bg,ire),e(ire,$Ke),e(bg,kKe),e(bg,IS),e(IS,SKe),e(bg,RKe),e(k,BKe),e(k,Xn),e(Xn,dre),e(dre,PKe),e(Xn,IKe),e(Xn,qS),e(qS,qKe),e(Xn,NKe),e(Xn,NS),e(NS,jKe),e(Xn,DKe),e(k,GKe),e(k,vg),e(vg,cre),e(cre,OKe),e(vg,VKe),e(vg,jS),e(jS,XKe),e(vg,zKe),e(k,QKe),e(k,zn),e(zn,fre),e(fre,WKe),e(zn,HKe),e(zn,DS),e(DS,UKe),e(zn,JKe),e(zn,GS),e(GS,YKe),e(zn,KKe),e(k,ZKe),e(k,Qn),e(Qn,mre),e(mre,eZe),e(Qn,oZe),e(Qn,OS),e(OS,rZe),e(Qn,tZe),e(Qn,VS),e(VS,aZe),e(Qn,nZe),e(k,sZe),e(k,Wn),e(Wn,gre),e(gre,lZe),e(Wn,iZe),e(Wn,XS),e(XS,dZe),e(Wn,cZe),e(Wn,zS),e(zS,fZe),e(Wn,mZe),e(k,gZe),e(k,Hn),e(Hn,hre),e(hre,hZe),e(Hn,pZe),e(Hn,QS),e(QS,uZe),e(Hn,_Ze),e(Hn,WS),e(WS,bZe),e(Hn,vZe),e(k,FZe),e(k,Un),e(Un,pre),e(pre,TZe),e(Un,MZe),e(Un,HS),e(HS,EZe),e(Un,CZe),e(Un,US),e(US,wZe),e(Un,AZe),e(k,yZe),e(k,Fg),e(Fg,ure),e(ure,LZe),e(Fg,xZe),e(Fg,JS),e(JS,$Ze),e(Fg,kZe),e(k,SZe),e(k,Jn),e(Jn,_re),e(_re,RZe),e(Jn,BZe),e(Jn,YS),e(YS,PZe),e(Jn,IZe),e(Jn,KS),e(KS,qZe),e(Jn,NZe),e(k,jZe),e(k,Yn),e(Yn,bre),e(bre,DZe),e(Yn,GZe),e(Yn,ZS),e(ZS,OZe),e(Yn,VZe),e(Yn,eR),e(eR,XZe),e(Yn,zZe),e(k,QZe),e(k,Kn),e(Kn,vre),e(vre,WZe),e(Kn,HZe),e(Kn,oR),e(oR,UZe),e(Kn,JZe),e(Kn,rR),e(rR,YZe),e(Kn,KZe),e(k,ZZe),e(k,Zn),e(Zn,Fre),e(Fre,eeo),e(Zn,oeo),e(Zn,tR),e(tR,reo),e(Zn,teo),e(Zn,aR),e(aR,aeo),e(Zn,neo),e(k,seo),e(k,es),e(es,Tre),e(Tre,leo),e(es,ieo),e(es,nR),e(nR,deo),e(es,ceo),e(es,sR),e(sR,feo),e(es,meo),e(k,geo),e(k,os),e(os,Mre),e(Mre,heo),e(os,peo),e(os,lR),e(lR,ueo),e(os,_eo),e(os,iR),e(iR,beo),e(os,veo),e(k,Feo),e(k,rs),e(rs,Ere),e(Ere,Teo),e(rs,Meo),e(rs,dR),e(dR,Eeo),e(rs,Ceo),e(rs,cR),e(cR,weo),e(rs,Aeo),e(k,yeo),e(k,Tg),e(Tg,Cre),e(Cre,Leo),e(Tg,xeo),e(Tg,fR),e(fR,$eo),e(Tg,keo),e(k,Seo),e(k,ts),e(ts,wre),e(wre,Reo),e(ts,Beo),e(ts,mR),e(mR,Peo),e(ts,Ieo),e(ts,gR),e(gR,qeo),e(ts,Neo),e(k,jeo),e(k,Mg),e(Mg,Are),e(Are,Deo),e(Mg,Geo),e(Mg,hR),e(hR,Oeo),e(Mg,Veo),e(k,Xeo),e(k,Eg),e(Eg,yre),e(yre,zeo),e(Eg,Qeo),e(Eg,pR),e(pR,Weo),e(Eg,Heo),e(k,Ueo),e(k,as),e(as,Lre),e(Lre,Jeo),e(as,Yeo),e(as,uR),e(uR,Keo),e(as,Zeo),e(as,_R),e(_R,eoo),e(as,ooo),e(k,roo),e(k,ns),e(ns,xre),e(xre,too),e(ns,aoo),e(ns,bR),e(bR,noo),e(ns,soo),e(ns,vR),e(vR,loo),e(ns,ioo),e(k,doo),e(k,ss),e(ss,$re),e($re,coo),e(ss,foo),e(ss,FR),e(FR,moo),e(ss,goo),e(ss,TR),e(TR,hoo),e(ss,poo),e(k,uoo),e(k,Cg),e(Cg,kre),e(kre,_oo),e(Cg,boo),e(Cg,MR),e(MR,voo),e(Cg,Foo),e(k,Too),e(k,ls),e(ls,Sre),e(Sre,Moo),e(ls,Eoo),e(ls,ER),e(ER,Coo),e(ls,woo),e(ls,CR),e(CR,Aoo),e(ls,yoo),e(k,Loo),e(k,is),e(is,Rre),e(Rre,xoo),e(is,$oo),e(is,wR),e(wR,koo),e(is,Soo),e(is,AR),e(AR,Roo),e(is,Boo),e(k,Poo),e(k,ds),e(ds,Bre),e(Bre,Ioo),e(ds,qoo),e(ds,yR),e(yR,Noo),e(ds,joo),e(ds,LR),e(LR,Doo),e(ds,Goo),e(k,Ooo),e(k,cs),e(cs,Pre),e(Pre,Voo),e(cs,Xoo),e(cs,xR),e(xR,zoo),e(cs,Qoo),e(cs,$R),e($R,Woo),e(cs,Hoo),e(k,Uoo),e(k,fs),e(fs,Ire),e(Ire,Joo),e(fs,Yoo),e(fs,kR),e(kR,Koo),e(fs,Zoo),e(fs,SR),e(SR,ero),e(fs,oro),e(k,rro),e(k,ms),e(ms,qre),e(qre,tro),e(ms,aro),e(ms,RR),e(RR,nro),e(ms,sro),e(ms,BR),e(BR,lro),e(ms,iro),e(k,dro),e(k,wg),e(wg,Nre),e(Nre,cro),e(wg,fro),e(wg,PR),e(PR,mro),e(wg,gro),e(k,hro),e(k,Ag),e(Ag,jre),e(jre,pro),e(Ag,uro),e(Ag,IR),e(IR,_ro),e(Ag,bro),e(k,vro),e(k,yg),e(yg,Dre),e(Dre,Fro),e(yg,Tro),e(yg,qR),e(qR,Mro),e(yg,Ero),e(k,Cro),e(k,Lg),e(Lg,Gre),e(Gre,wro),e(Lg,Aro),e(Lg,NR),e(NR,yro),e(Lg,Lro),e(k,xro),e(k,gs),e(gs,Ore),e(Ore,$ro),e(gs,kro),e(gs,jR),e(jR,Sro),e(gs,Rro),e(gs,DR),e(DR,Bro),e(gs,Pro),e(k,Iro),e(k,xg),e(xg,Vre),e(Vre,qro),e(xg,Nro),e(xg,GR),e(GR,jro),e(xg,Dro),e(k,Gro),e(k,hs),e(hs,Xre),e(Xre,Oro),e(hs,Vro),e(hs,OR),e(OR,Xro),e(hs,zro),e(hs,VR),e(VR,Qro),e(hs,Wro),e(k,Hro),e(k,ps),e(ps,zre),e(zre,Uro),e(ps,Jro),e(ps,XR),e(XR,Yro),e(ps,Kro),e(ps,zR),e(zR,Zro),e(ps,eto),e(k,oto),e(k,us),e(us,Qre),e(Qre,rto),e(us,tto),e(us,QR),e(QR,ato),e(us,nto),e(us,WR),e(WR,sto),e(us,lto),e(k,ito),e(k,_s),e(_s,Wre),e(Wre,dto),e(_s,cto),e(_s,HR),e(HR,fto),e(_s,mto),e(_s,UR),e(UR,gto),e(_s,hto),e(k,pto),e(k,bs),e(bs,Hre),e(Hre,uto),e(bs,_to),e(bs,JR),e(JR,bto),e(bs,vto),e(bs,YR),e(YR,Fto),e(bs,Tto),e(k,Mto),e(k,vs),e(vs,Ure),e(Ure,Eto),e(vs,Cto),e(vs,KR),e(KR,wto),e(vs,Ato),e(vs,ZR),e(ZR,yto),e(vs,Lto),e(k,xto),e(k,$g),e($g,Jre),e(Jre,$to),e($g,kto),e($g,eB),e(eB,Sto),e($g,Rto),e(k,Bto),e(k,kg),e(kg,Yre),e(Yre,Pto),e(kg,Ito),e(kg,oB),e(oB,qto),e(kg,Nto),e(k,jto),e(k,Fs),e(Fs,Kre),e(Kre,Dto),e(Fs,Gto),e(Fs,rB),e(rB,Oto),e(Fs,Vto),e(Fs,tB),e(tB,Xto),e(Fs,zto),e(k,Qto),e(k,Ts),e(Ts,Zre),e(Zre,Wto),e(Ts,Hto),e(Ts,aB),e(aB,Uto),e(Ts,Jto),e(Ts,nB),e(nB,Yto),e(Ts,Kto),e(k,Zto),e(k,Ms),e(Ms,ete),e(ete,eao),e(Ms,oao),e(Ms,sB),e(sB,rao),e(Ms,tao),e(Ms,lB),e(lB,aao),e(Ms,nao),e(k,sao),e(k,Sg),e(Sg,ote),e(ote,lao),e(Sg,iao),e(Sg,iB),e(iB,dao),e(Sg,cao),e(k,fao),e(k,Rg),e(Rg,rte),e(rte,mao),e(Rg,gao),e(Rg,dB),e(dB,hao),e(Rg,pao),e(k,uao),e(k,Bg),e(Bg,tte),e(tte,_ao),e(Bg,bao),e(Bg,cB),e(cB,vao),e(Bg,Fao),e(k,Tao),e(k,Es),e(Es,ate),e(ate,Mao),e(Es,Eao),e(Es,fB),e(fB,Cao),e(Es,wao),e(Es,mB),e(mB,Aao),e(Es,yao),e(k,Lao),e(k,Pg),e(Pg,nte),e(nte,xao),e(Pg,$ao),e(Pg,gB),e(gB,kao),e(Pg,Sao),e(k,Rao),e(k,Ig),e(Ig,ste),e(ste,Bao),e(Ig,Pao),e(Ig,hB),e(hB,Iao),e(Ig,qao),e(k,Nao),e(k,Cs),e(Cs,lte),e(lte,jao),e(Cs,Dao),e(Cs,pB),e(pB,Gao),e(Cs,Oao),e(Cs,uB),e(uB,Vao),e(Cs,Xao),e(k,zao),e(k,qg),e(qg,ite),e(ite,Qao),e(qg,Wao),e(qg,_B),e(_B,Hao),e(qg,Uao),e(k,Jao),e(k,Ng),e(Ng,dte),e(dte,Yao),e(Ng,Kao),e(Ng,bB),e(bB,Zao),e(Ng,eno),e(k,ono),e(k,ws),e(ws,cte),e(cte,rno),e(ws,tno),e(ws,vB),e(vB,ano),e(ws,nno),e(ws,FB),e(FB,sno),e(ws,lno),e(k,ino),e(k,As),e(As,fte),e(fte,dno),e(As,cno),e(As,TB),e(TB,fno),e(As,mno),e(As,MB),e(MB,gno),e(As,hno),e(k,pno),e(k,ys),e(ys,mte),e(mte,uno),e(ys,_no),e(ys,EB),e(EB,bno),e(ys,vno),e(ys,CB),e(CB,Fno),e(ys,Tno),e(k,Mno),e(k,Ls),e(Ls,gte),e(gte,Eno),e(Ls,Cno),e(Ls,wB),e(wB,wno),e(Ls,Ano),e(Ls,AB),e(AB,yno),e(Ls,Lno),e(Er,xno),M(jg,Er,null),e(wo,$no),e(wo,Dg),M(zw,Dg,null),e(Dg,kno),e(Dg,hte),e(hte,Sno),b(f,rPe,_),b(f,gi,_),e(gi,Gg),e(Gg,pte),M(Qw,pte,null),e(gi,Rno),e(gi,ute),e(ute,Bno),b(f,tPe,_),b(f,Ao,_),M(Ww,Ao,null),e(Ao,Pno),e(Ao,Hw),e(Hw,Ino),e(Hw,yB),e(yB,qno),e(Hw,Nno),e(Ao,jno),e(Ao,Uw),e(Uw,Dno),e(Uw,_te),e(_te,Gno),e(Uw,Ono),e(Ao,Vno),e(Ao,Qe),M(Jw,Qe,null),e(Qe,Xno),e(Qe,bte),e(bte,zno),e(Qe,Qno),e(Qe,Ma),e(Ma,Wno),e(Ma,vte),e(vte,Hno),e(Ma,Uno),e(Ma,Fte),e(Fte,Jno),e(Ma,Yno),e(Ma,Tte),e(Tte,Kno),e(Ma,Zno),e(Qe,eso),e(Qe,oe),e(oe,Og),e(Og,Mte),e(Mte,oso),e(Og,rso),e(Og,LB),e(LB,tso),e(Og,aso),e(oe,nso),e(oe,Vg),e(Vg,Ete),e(Ete,sso),e(Vg,lso),e(Vg,xB),e(xB,iso),e(Vg,dso),e(oe,cso),e(oe,Xg),e(Xg,Cte),e(Cte,fso),e(Xg,mso),e(Xg,$B),e($B,gso),e(Xg,hso),e(oe,pso),e(oe,zg),e(zg,wte),e(wte,uso),e(zg,_so),e(zg,kB),e(kB,bso),e(zg,vso),e(oe,Fso),e(oe,Qg),e(Qg,Ate),e(Ate,Tso),e(Qg,Mso),e(Qg,SB),e(SB,Eso),e(Qg,Cso),e(oe,wso),e(oe,Wg),e(Wg,yte),e(yte,Aso),e(Wg,yso),e(Wg,RB),e(RB,Lso),e(Wg,xso),e(oe,$so),e(oe,Hg),e(Hg,Lte),e(Lte,kso),e(Hg,Sso),e(Hg,BB),e(BB,Rso),e(Hg,Bso),e(oe,Pso),e(oe,Ug),e(Ug,xte),e(xte,Iso),e(Ug,qso),e(Ug,PB),e(PB,Nso),e(Ug,jso),e(oe,Dso),e(oe,Jg),e(Jg,$te),e($te,Gso),e(Jg,Oso),e(Jg,IB),e(IB,Vso),e(Jg,Xso),e(oe,zso),e(oe,Yg),e(Yg,kte),e(kte,Qso),e(Yg,Wso),e(Yg,qB),e(qB,Hso),e(Yg,Uso),e(oe,Jso),e(oe,Kg),e(Kg,Ste),e(Ste,Yso),e(Kg,Kso),e(Kg,NB),e(NB,Zso),e(Kg,elo),e(oe,olo),e(oe,Zg),e(Zg,Rte),e(Rte,rlo),e(Zg,tlo),e(Zg,jB),e(jB,alo),e(Zg,nlo),e(oe,slo),e(oe,eh),e(eh,Bte),e(Bte,llo),e(eh,ilo),e(eh,DB),e(DB,dlo),e(eh,clo),e(oe,flo),e(oe,oh),e(oh,Pte),e(Pte,mlo),e(oh,glo),e(oh,GB),e(GB,hlo),e(oh,plo),e(oe,ulo),e(oe,rh),e(rh,Ite),e(Ite,_lo),e(rh,blo),e(rh,OB),e(OB,vlo),e(rh,Flo),e(oe,Tlo),e(oe,th),e(th,qte),e(qte,Mlo),e(th,Elo),e(th,VB),e(VB,Clo),e(th,wlo),e(oe,Alo),e(oe,ah),e(ah,Nte),e(Nte,ylo),e(ah,Llo),e(ah,XB),e(XB,xlo),e(ah,$lo),e(oe,klo),e(oe,nh),e(nh,jte),e(jte,Slo),e(nh,Rlo),e(nh,zB),e(zB,Blo),e(nh,Plo),e(oe,Ilo),e(oe,sh),e(sh,Dte),e(Dte,qlo),e(sh,Nlo),e(sh,QB),e(QB,jlo),e(sh,Dlo),e(oe,Glo),e(oe,lh),e(lh,Gte),e(Gte,Olo),e(lh,Vlo),e(lh,WB),e(WB,Xlo),e(lh,zlo),e(oe,Qlo),e(oe,ih),e(ih,Ote),e(Ote,Wlo),e(ih,Hlo),e(ih,HB),e(HB,Ulo),e(ih,Jlo),e(oe,Ylo),e(oe,dh),e(dh,Vte),e(Vte,Klo),e(dh,Zlo),e(dh,UB),e(UB,eio),e(dh,oio),e(oe,rio),e(oe,ch),e(ch,Xte),e(Xte,tio),e(ch,aio),e(ch,JB),e(JB,nio),e(ch,sio),e(oe,lio),e(oe,fh),e(fh,zte),e(zte,iio),e(fh,dio),e(fh,YB),e(YB,cio),e(fh,fio),e(oe,mio),e(oe,mh),e(mh,Qte),e(Qte,gio),e(mh,hio),e(mh,KB),e(KB,pio),e(mh,uio),e(Qe,_io),M(gh,Qe,null),e(Qe,bio),M(hh,Qe,null),e(Ao,vio),e(Ao,ph),M(Yw,ph,null),e(ph,Fio),e(ph,Wte),e(Wte,Tio),b(f,aPe,_),b(f,hi,_),e(hi,uh),e(uh,Hte),M(Kw,Hte,null),e(hi,Mio),e(hi,Ute),e(Ute,Eio),b(f,nPe,_),b(f,yo,_),M(Zw,yo,null),e(yo,Cio),e(yo,eA),e(eA,wio),e(eA,ZB),e(ZB,Aio),e(eA,yio),e(yo,Lio),e(yo,oA),e(oA,xio),e(oA,Jte),e(Jte,$io),e(oA,kio),e(yo,Sio),e(yo,We),M(rA,We,null),e(We,Rio),e(We,Yte),e(Yte,Bio),e(We,Pio),e(We,pi),e(pi,Iio),e(pi,Kte),e(Kte,qio),e(pi,Nio),e(pi,Zte),e(Zte,jio),e(pi,Dio),e(We,Gio),e(We,be),e(be,_h),e(_h,eae),e(eae,Oio),e(_h,Vio),e(_h,eP),e(eP,Xio),e(_h,zio),e(be,Qio),e(be,bh),e(bh,oae),e(oae,Wio),e(bh,Hio),e(bh,oP),e(oP,Uio),e(bh,Jio),e(be,Yio),e(be,vh),e(vh,rae),e(rae,Kio),e(vh,Zio),e(vh,rP),e(rP,edo),e(vh,odo),e(be,rdo),e(be,Fh),e(Fh,tae),e(tae,tdo),e(Fh,ado),e(Fh,tP),e(tP,ndo),e(Fh,sdo),e(be,ldo),e(be,Th),e(Th,aae),e(aae,ido),e(Th,ddo),e(Th,aP),e(aP,cdo),e(Th,fdo),e(be,mdo),e(be,Mh),e(Mh,nae),e(nae,gdo),e(Mh,hdo),e(Mh,nP),e(nP,pdo),e(Mh,udo),e(be,_do),e(be,Eh),e(Eh,sae),e(sae,bdo),e(Eh,vdo),e(Eh,sP),e(sP,Fdo),e(Eh,Tdo),e(be,Mdo),e(be,Ch),e(Ch,lae),e(lae,Edo),e(Ch,Cdo),e(Ch,lP),e(lP,wdo),e(Ch,Ado),e(be,ydo),e(be,wh),e(wh,iae),e(iae,Ldo),e(wh,xdo),e(wh,iP),e(iP,$do),e(wh,kdo),e(be,Sdo),e(be,Ah),e(Ah,dae),e(dae,Rdo),e(Ah,Bdo),e(Ah,dP),e(dP,Pdo),e(Ah,Ido),e(be,qdo),e(be,yh),e(yh,cae),e(cae,Ndo),e(yh,jdo),e(yh,cP),e(cP,Ddo),e(yh,Gdo),e(be,Odo),e(be,Lh),e(Lh,fae),e(fae,Vdo),e(Lh,Xdo),e(Lh,fP),e(fP,zdo),e(Lh,Qdo),e(be,Wdo),e(be,xh),e(xh,mae),e(mae,Hdo),e(xh,Udo),e(xh,mP),e(mP,Jdo),e(xh,Ydo),e(be,Kdo),e(be,$h),e($h,gae),e(gae,Zdo),e($h,eco),e($h,gP),e(gP,oco),e($h,rco),e(be,tco),e(be,kh),e(kh,hae),e(hae,aco),e(kh,nco),e(kh,hP),e(hP,sco),e(kh,lco),e(We,ico),M(Sh,We,null),e(We,dco),M(Rh,We,null),e(yo,cco),e(yo,Bh),M(tA,Bh,null),e(Bh,fco),e(Bh,pae),e(pae,mco),b(f,sPe,_),b(f,ui,_),e(ui,Ph),e(Ph,uae),M(aA,uae,null),e(ui,gco),e(ui,_ae),e(_ae,hco),b(f,lPe,_),b(f,Lo,_),M(nA,Lo,null),e(Lo,pco),e(Lo,_i),e(_i,uco),e(_i,pP),e(pP,_co),e(_i,bco),e(_i,uP),e(uP,vco),e(_i,Fco),e(Lo,Tco),e(Lo,sA),e(sA,Mco),e(sA,bae),e(bae,Eco),e(sA,Cco),e(Lo,wco),e(Lo,Zr),M(lA,Zr,null),e(Zr,Aco),e(Zr,vae),e(vae,yco),e(Zr,Lco),e(Zr,bi),e(bi,xco),e(bi,Fae),e(Fae,$co),e(bi,kco),e(bi,_P),e(_P,Sco),e(bi,Rco),e(Zr,Bco),M(Ih,Zr,null),e(Lo,Pco),e(Lo,He),M(iA,He,null),e(He,Ico),e(He,Tae),e(Tae,qco),e(He,Nco),e(He,Ea),e(Ea,jco),e(Ea,Mae),e(Mae,Dco),e(Ea,Gco),e(Ea,Eae),e(Eae,Oco),e(Ea,Vco),e(Ea,Cae),e(Cae,Xco),e(Ea,zco),e(He,Qco),e(He,x),e(x,qh),e(qh,wae),e(wae,Wco),e(qh,Hco),e(qh,bP),e(bP,Uco),e(qh,Jco),e(x,Yco),e(x,Nh),e(Nh,Aae),e(Aae,Kco),e(Nh,Zco),e(Nh,vP),e(vP,efo),e(Nh,ofo),e(x,rfo),e(x,jh),e(jh,yae),e(yae,tfo),e(jh,afo),e(jh,FP),e(FP,nfo),e(jh,sfo),e(x,lfo),e(x,Dh),e(Dh,Lae),e(Lae,ifo),e(Dh,dfo),e(Dh,TP),e(TP,cfo),e(Dh,ffo),e(x,mfo),e(x,Gh),e(Gh,xae),e(xae,gfo),e(Gh,hfo),e(Gh,MP),e(MP,pfo),e(Gh,ufo),e(x,_fo),e(x,Oh),e(Oh,$ae),e($ae,bfo),e(Oh,vfo),e(Oh,EP),e(EP,Ffo),e(Oh,Tfo),e(x,Mfo),e(x,Vh),e(Vh,kae),e(kae,Efo),e(Vh,Cfo),e(Vh,CP),e(CP,wfo),e(Vh,Afo),e(x,yfo),e(x,Xh),e(Xh,Sae),e(Sae,Lfo),e(Xh,xfo),e(Xh,wP),e(wP,$fo),e(Xh,kfo),e(x,Sfo),e(x,zh),e(zh,Rae),e(Rae,Rfo),e(zh,Bfo),e(zh,AP),e(AP,Pfo),e(zh,Ifo),e(x,qfo),e(x,Qh),e(Qh,Bae),e(Bae,Nfo),e(Qh,jfo),e(Qh,yP),e(yP,Dfo),e(Qh,Gfo),e(x,Ofo),e(x,Wh),e(Wh,Pae),e(Pae,Vfo),e(Wh,Xfo),e(Wh,LP),e(LP,zfo),e(Wh,Qfo),e(x,Wfo),e(x,Hh),e(Hh,Iae),e(Iae,Hfo),e(Hh,Ufo),e(Hh,xP),e(xP,Jfo),e(Hh,Yfo),e(x,Kfo),e(x,Uh),e(Uh,qae),e(qae,Zfo),e(Uh,emo),e(Uh,$P),e($P,omo),e(Uh,rmo),e(x,tmo),e(x,Jh),e(Jh,Nae),e(Nae,amo),e(Jh,nmo),e(Jh,kP),e(kP,smo),e(Jh,lmo),e(x,imo),e(x,Yh),e(Yh,jae),e(jae,dmo),e(Yh,cmo),e(Yh,SP),e(SP,fmo),e(Yh,mmo),e(x,gmo),e(x,Kh),e(Kh,Dae),e(Dae,hmo),e(Kh,pmo),e(Kh,RP),e(RP,umo),e(Kh,_mo),e(x,bmo),e(x,Zh),e(Zh,Gae),e(Gae,vmo),e(Zh,Fmo),e(Zh,BP),e(BP,Tmo),e(Zh,Mmo),e(x,Emo),e(x,ep),e(ep,Oae),e(Oae,Cmo),e(ep,wmo),e(ep,PP),e(PP,Amo),e(ep,ymo),e(x,Lmo),e(x,op),e(op,Vae),e(Vae,xmo),e(op,$mo),e(op,IP),e(IP,kmo),e(op,Smo),e(x,Rmo),e(x,rp),e(rp,Xae),e(Xae,Bmo),e(rp,Pmo),e(rp,qP),e(qP,Imo),e(rp,qmo),e(x,Nmo),e(x,tp),e(tp,zae),e(zae,jmo),e(tp,Dmo),e(tp,NP),e(NP,Gmo),e(tp,Omo),e(x,Vmo),e(x,ap),e(ap,Qae),e(Qae,Xmo),e(ap,zmo),e(ap,jP),e(jP,Qmo),e(ap,Wmo),e(x,Hmo),e(x,np),e(np,Wae),e(Wae,Umo),e(np,Jmo),e(np,DP),e(DP,Ymo),e(np,Kmo),e(x,Zmo),e(x,sp),e(sp,Hae),e(Hae,ego),e(sp,ogo),e(sp,GP),e(GP,rgo),e(sp,tgo),e(x,ago),e(x,lp),e(lp,Uae),e(Uae,ngo),e(lp,sgo),e(lp,OP),e(OP,lgo),e(lp,igo),e(x,dgo),e(x,ip),e(ip,Jae),e(Jae,cgo),e(ip,fgo),e(ip,VP),e(VP,mgo),e(ip,ggo),e(x,hgo),e(x,dp),e(dp,Yae),e(Yae,pgo),e(dp,ugo),e(dp,XP),e(XP,_go),e(dp,bgo),e(x,vgo),e(x,cp),e(cp,Kae),e(Kae,Fgo),e(cp,Tgo),e(cp,zP),e(zP,Mgo),e(cp,Ego),e(x,Cgo),e(x,fp),e(fp,Zae),e(Zae,wgo),e(fp,Ago),e(fp,QP),e(QP,ygo),e(fp,Lgo),e(x,xgo),e(x,mp),e(mp,ene),e(ene,$go),e(mp,kgo),e(mp,WP),e(WP,Sgo),e(mp,Rgo),e(x,Bgo),e(x,xs),e(xs,one),e(one,Pgo),e(xs,Igo),e(xs,HP),e(HP,qgo),e(xs,Ngo),e(xs,UP),e(UP,jgo),e(xs,Dgo),e(x,Ggo),e(x,gp),e(gp,rne),e(rne,Ogo),e(gp,Vgo),e(gp,JP),e(JP,Xgo),e(gp,zgo),e(x,Qgo),e(x,hp),e(hp,tne),e(tne,Wgo),e(hp,Hgo),e(hp,YP),e(YP,Ugo),e(hp,Jgo),e(x,Ygo),e(x,pp),e(pp,ane),e(ane,Kgo),e(pp,Zgo),e(pp,KP),e(KP,eho),e(pp,oho),e(x,rho),e(x,up),e(up,nne),e(nne,tho),e(up,aho),e(up,ZP),e(ZP,nho),e(up,sho),e(x,lho),e(x,_p),e(_p,sne),e(sne,iho),e(_p,dho),e(_p,eI),e(eI,cho),e(_p,fho),e(x,mho),e(x,bp),e(bp,lne),e(lne,gho),e(bp,hho),e(bp,oI),e(oI,pho),e(bp,uho),e(x,_ho),e(x,vp),e(vp,ine),e(ine,bho),e(vp,vho),e(vp,rI),e(rI,Fho),e(vp,Tho),e(x,Mho),e(x,Fp),e(Fp,dne),e(dne,Eho),e(Fp,Cho),e(Fp,tI),e(tI,who),e(Fp,Aho),e(x,yho),e(x,Tp),e(Tp,cne),e(cne,Lho),e(Tp,xho),e(Tp,aI),e(aI,$ho),e(Tp,kho),e(x,Sho),e(x,Mp),e(Mp,fne),e(fne,Rho),e(Mp,Bho),e(Mp,nI),e(nI,Pho),e(Mp,Iho),e(x,qho),e(x,Ep),e(Ep,mne),e(mne,Nho),e(Ep,jho),e(Ep,sI),e(sI,Dho),e(Ep,Gho),e(x,Oho),e(x,Cp),e(Cp,gne),e(gne,Vho),e(Cp,Xho),e(Cp,lI),e(lI,zho),e(Cp,Qho),e(x,Who),e(x,wp),e(wp,hne),e(hne,Hho),e(wp,Uho),e(wp,iI),e(iI,Jho),e(wp,Yho),e(x,Kho),e(x,Ap),e(Ap,pne),e(pne,Zho),e(Ap,epo),e(Ap,dI),e(dI,opo),e(Ap,rpo),e(x,tpo),e(x,yp),e(yp,une),e(une,apo),e(yp,npo),e(yp,cI),e(cI,spo),e(yp,lpo),e(x,ipo),e(x,Lp),e(Lp,_ne),e(_ne,dpo),e(Lp,cpo),e(Lp,fI),e(fI,fpo),e(Lp,mpo),e(x,gpo),e(x,xp),e(xp,bne),e(bne,hpo),e(xp,ppo),e(xp,mI),e(mI,upo),e(xp,_po),e(x,bpo),e(x,$p),e($p,vne),e(vne,vpo),e($p,Fpo),e($p,gI),e(gI,Tpo),e($p,Mpo),e(x,Epo),e(x,kp),e(kp,Fne),e(Fne,Cpo),e(kp,wpo),e(kp,hI),e(hI,Apo),e(kp,ypo),e(x,Lpo),e(x,Sp),e(Sp,Tne),e(Tne,xpo),e(Sp,$po),e(Sp,pI),e(pI,kpo),e(Sp,Spo),e(x,Rpo),e(x,Rp),e(Rp,Mne),e(Mne,Bpo),e(Rp,Ppo),e(Rp,uI),e(uI,Ipo),e(Rp,qpo),e(x,Npo),e(x,Bp),e(Bp,Ene),e(Ene,jpo),e(Bp,Dpo),e(Bp,_I),e(_I,Gpo),e(Bp,Opo),e(x,Vpo),e(x,Pp),e(Pp,Cne),e(Cne,Xpo),e(Pp,zpo),e(Pp,bI),e(bI,Qpo),e(Pp,Wpo),e(x,Hpo),e(x,Ip),e(Ip,wne),e(wne,Upo),e(Ip,Jpo),e(Ip,vI),e(vI,Ypo),e(Ip,Kpo),e(x,Zpo),e(x,qp),e(qp,Ane),e(Ane,euo),e(qp,ouo),e(qp,FI),e(FI,ruo),e(qp,tuo),e(x,auo),e(x,Np),e(Np,yne),e(yne,nuo),e(Np,suo),e(Np,TI),e(TI,luo),e(Np,iuo),e(x,duo),e(x,jp),e(jp,Lne),e(Lne,cuo),e(jp,fuo),e(jp,MI),e(MI,muo),e(jp,guo),e(x,huo),e(x,Dp),e(Dp,xne),e(xne,puo),e(Dp,uuo),e(Dp,EI),e(EI,_uo),e(Dp,buo),e(x,vuo),e(x,Gp),e(Gp,$ne),e($ne,Fuo),e(Gp,Tuo),e(Gp,CI),e(CI,Muo),e(Gp,Euo),e(x,Cuo),e(x,Op),e(Op,kne),e(kne,wuo),e(Op,Auo),e(Op,wI),e(wI,yuo),e(Op,Luo),e(x,xuo),e(x,Vp),e(Vp,Sne),e(Sne,$uo),e(Vp,kuo),e(Vp,AI),e(AI,Suo),e(Vp,Ruo),e(x,Buo),e(x,Xp),e(Xp,Rne),e(Rne,Puo),e(Xp,Iuo),e(Xp,yI),e(yI,quo),e(Xp,Nuo),e(x,juo),e(x,zp),e(zp,Bne),e(Bne,Duo),e(zp,Guo),e(zp,LI),e(LI,Ouo),e(zp,Vuo),e(x,Xuo),e(x,Qp),e(Qp,Pne),e(Pne,zuo),e(Qp,Quo),e(Qp,xI),e(xI,Wuo),e(Qp,Huo),e(x,Uuo),e(x,Wp),e(Wp,Ine),e(Ine,Juo),e(Wp,Yuo),e(Wp,$I),e($I,Kuo),e(Wp,Zuo),e(x,e_o),e(x,Hp),e(Hp,qne),e(qne,o_o),e(Hp,r_o),e(Hp,kI),e(kI,t_o),e(Hp,a_o),e(x,n_o),e(x,Up),e(Up,Nne),e(Nne,s_o),e(Up,l_o),e(Up,SI),e(SI,i_o),e(Up,d_o),e(x,c_o),e(x,Jp),e(Jp,jne),e(jne,f_o),e(Jp,m_o),e(Jp,RI),e(RI,g_o),e(Jp,h_o),e(x,p_o),e(x,Yp),e(Yp,Dne),e(Dne,u_o),e(Yp,__o),e(Yp,BI),e(BI,b_o),e(Yp,v_o),e(x,F_o),e(x,Kp),e(Kp,Gne),e(Gne,T_o),e(Kp,M_o),e(Kp,PI),e(PI,E_o),e(Kp,C_o),e(x,w_o),e(x,Zp),e(Zp,One),e(One,A_o),e(Zp,y_o),e(Zp,II),e(II,L_o),e(Zp,x_o),e(x,$_o),e(x,eu),e(eu,Vne),e(Vne,k_o),e(eu,S_o),e(eu,qI),e(qI,R_o),e(eu,B_o),e(x,P_o),e(x,ou),e(ou,Xne),e(Xne,I_o),e(ou,q_o),e(ou,NI),e(NI,N_o),e(ou,j_o),e(x,D_o),e(x,ru),e(ru,zne),e(zne,G_o),e(ru,O_o),e(ru,jI),e(jI,V_o),e(ru,X_o),e(x,z_o),e(x,tu),e(tu,Qne),e(Qne,Q_o),e(tu,W_o),e(tu,DI),e(DI,H_o),e(tu,U_o),e(x,J_o),e(x,au),e(au,Wne),e(Wne,Y_o),e(au,K_o),e(au,GI),e(GI,Z_o),e(au,e0o),e(x,o0o),e(x,nu),e(nu,Hne),e(Hne,r0o),e(nu,t0o),e(nu,OI),e(OI,a0o),e(nu,n0o),e(x,s0o),e(x,su),e(su,Une),e(Une,l0o),e(su,i0o),e(su,VI),e(VI,d0o),e(su,c0o),e(x,f0o),e(x,lu),e(lu,Jne),e(Jne,m0o),e(lu,g0o),e(lu,XI),e(XI,h0o),e(lu,p0o),e(x,u0o),e(x,iu),e(iu,Yne),e(Yne,_0o),e(iu,b0o),e(iu,zI),e(zI,v0o),e(iu,F0o),e(x,T0o),e(x,du),e(du,Kne),e(Kne,M0o),e(du,E0o),e(du,QI),e(QI,C0o),e(du,w0o),e(x,A0o),e(x,cu),e(cu,Zne),e(Zne,y0o),e(cu,L0o),e(cu,WI),e(WI,x0o),e(cu,$0o),e(x,k0o),e(x,fu),e(fu,ese),e(ese,S0o),e(fu,R0o),e(fu,HI),e(HI,B0o),e(fu,P0o),e(x,I0o),e(x,mu),e(mu,ose),e(ose,q0o),e(mu,N0o),e(mu,UI),e(UI,j0o),e(mu,D0o),e(x,G0o),e(x,gu),e(gu,rse),e(rse,O0o),e(gu,V0o),e(gu,JI),e(JI,X0o),e(gu,z0o),e(x,Q0o),e(x,hu),e(hu,tse),e(tse,W0o),e(hu,H0o),e(hu,YI),e(YI,U0o),e(hu,J0o),e(x,Y0o),e(x,pu),e(pu,ase),e(ase,K0o),e(pu,Z0o),e(pu,KI),e(KI,e1o),e(pu,o1o),e(x,r1o),e(x,uu),e(uu,nse),e(nse,t1o),e(uu,a1o),e(uu,ZI),e(ZI,n1o),e(uu,s1o),e(x,l1o),e(x,_u),e(_u,sse),e(sse,i1o),e(_u,d1o),e(_u,eq),e(eq,c1o),e(_u,f1o),e(x,m1o),e(x,bu),e(bu,lse),e(lse,g1o),e(bu,h1o),e(bu,oq),e(oq,p1o),e(bu,u1o),e(x,_1o),e(x,vu),e(vu,ise),e(ise,b1o),e(vu,v1o),e(vu,rq),e(rq,F1o),e(vu,T1o),e(x,M1o),e(x,Fu),e(Fu,dse),e(dse,E1o),e(Fu,C1o),e(Fu,tq),e(tq,w1o),e(Fu,A1o),e(x,y1o),e(x,Tu),e(Tu,cse),e(cse,L1o),e(Tu,x1o),e(Tu,aq),e(aq,$1o),e(Tu,k1o),e(x,S1o),e(x,Mu),e(Mu,fse),e(fse,R1o),e(Mu,B1o),e(Mu,nq),e(nq,P1o),e(Mu,I1o),e(x,q1o),e(x,Eu),e(Eu,mse),e(mse,N1o),e(Eu,j1o),e(Eu,sq),e(sq,D1o),e(Eu,G1o),e(He,O1o),e(He,Cu),e(Cu,V1o),e(Cu,gse),e(gse,X1o),e(Cu,z1o),e(Cu,hse),e(hse,Q1o),e(He,W1o),M(wu,He,null),b(f,iPe,_),b(f,vi,_),e(vi,Au),e(Au,pse),M(dA,pse,null),e(vi,H1o),e(vi,use),e(use,U1o),b(f,dPe,_),b(f,xo,_),M(cA,xo,null),e(xo,J1o),e(xo,Fi),e(Fi,Y1o),e(Fi,lq),e(lq,K1o),e(Fi,Z1o),e(Fi,iq),e(iq,ebo),e(Fi,obo),e(xo,rbo),e(xo,fA),e(fA,tbo),e(fA,_se),e(_se,abo),e(fA,nbo),e(xo,sbo),e(xo,et),M(mA,et,null),e(et,lbo),e(et,bse),e(bse,ibo),e(et,dbo),e(et,Ti),e(Ti,cbo),e(Ti,vse),e(vse,fbo),e(Ti,mbo),e(Ti,dq),e(dq,gbo),e(Ti,hbo),e(et,pbo),M(yu,et,null),e(xo,ubo),e(xo,Ue),M(gA,Ue,null),e(Ue,_bo),e(Ue,Fse),e(Fse,bbo),e(Ue,vbo),e(Ue,Ca),e(Ca,Fbo),e(Ca,Tse),e(Tse,Tbo),e(Ca,Mbo),e(Ca,Mse),e(Mse,Ebo),e(Ca,Cbo),e(Ca,Ese),e(Ese,wbo),e(Ca,Abo),e(Ue,ybo),e(Ue,O),e(O,Lu),e(Lu,Cse),e(Cse,Lbo),e(Lu,xbo),e(Lu,cq),e(cq,$bo),e(Lu,kbo),e(O,Sbo),e(O,xu),e(xu,wse),e(wse,Rbo),e(xu,Bbo),e(xu,fq),e(fq,Pbo),e(xu,Ibo),e(O,qbo),e(O,$u),e($u,Ase),e(Ase,Nbo),e($u,jbo),e($u,mq),e(mq,Dbo),e($u,Gbo),e(O,Obo),e(O,ku),e(ku,yse),e(yse,Vbo),e(ku,Xbo),e(ku,gq),e(gq,zbo),e(ku,Qbo),e(O,Wbo),e(O,Su),e(Su,Lse),e(Lse,Hbo),e(Su,Ubo),e(Su,hq),e(hq,Jbo),e(Su,Ybo),e(O,Kbo),e(O,Ru),e(Ru,xse),e(xse,Zbo),e(Ru,e2o),e(Ru,pq),e(pq,o2o),e(Ru,r2o),e(O,t2o),e(O,Bu),e(Bu,$se),e($se,a2o),e(Bu,n2o),e(Bu,uq),e(uq,s2o),e(Bu,l2o),e(O,i2o),e(O,Pu),e(Pu,kse),e(kse,d2o),e(Pu,c2o),e(Pu,_q),e(_q,f2o),e(Pu,m2o),e(O,g2o),e(O,Iu),e(Iu,Sse),e(Sse,h2o),e(Iu,p2o),e(Iu,bq),e(bq,u2o),e(Iu,_2o),e(O,b2o),e(O,qu),e(qu,Rse),e(Rse,v2o),e(qu,F2o),e(qu,vq),e(vq,T2o),e(qu,M2o),e(O,E2o),e(O,Nu),e(Nu,Bse),e(Bse,C2o),e(Nu,w2o),e(Nu,Fq),e(Fq,A2o),e(Nu,y2o),e(O,L2o),e(O,ju),e(ju,Pse),e(Pse,x2o),e(ju,$2o),e(ju,Tq),e(Tq,k2o),e(ju,S2o),e(O,R2o),e(O,Du),e(Du,Ise),e(Ise,B2o),e(Du,P2o),e(Du,Mq),e(Mq,I2o),e(Du,q2o),e(O,N2o),e(O,Gu),e(Gu,qse),e(qse,j2o),e(Gu,D2o),e(Gu,Eq),e(Eq,G2o),e(Gu,O2o),e(O,V2o),e(O,Ou),e(Ou,Nse),e(Nse,X2o),e(Ou,z2o),e(Ou,Cq),e(Cq,Q2o),e(Ou,W2o),e(O,H2o),e(O,Vu),e(Vu,jse),e(jse,U2o),e(Vu,J2o),e(Vu,wq),e(wq,Y2o),e(Vu,K2o),e(O,Z2o),e(O,Xu),e(Xu,Dse),e(Dse,evo),e(Xu,ovo),e(Xu,Aq),e(Aq,rvo),e(Xu,tvo),e(O,avo),e(O,zu),e(zu,Gse),e(Gse,nvo),e(zu,svo),e(zu,yq),e(yq,lvo),e(zu,ivo),e(O,dvo),e(O,Qu),e(Qu,Ose),e(Ose,cvo),e(Qu,fvo),e(Qu,Lq),e(Lq,mvo),e(Qu,gvo),e(O,hvo),e(O,Wu),e(Wu,Vse),e(Vse,pvo),e(Wu,uvo),e(Wu,xq),e(xq,_vo),e(Wu,bvo),e(O,vvo),e(O,Hu),e(Hu,Xse),e(Xse,Fvo),e(Hu,Tvo),e(Hu,$q),e($q,Mvo),e(Hu,Evo),e(O,Cvo),e(O,Uu),e(Uu,zse),e(zse,wvo),e(Uu,Avo),e(Uu,kq),e(kq,yvo),e(Uu,Lvo),e(O,xvo),e(O,Ju),e(Ju,Qse),e(Qse,$vo),e(Ju,kvo),e(Ju,Sq),e(Sq,Svo),e(Ju,Rvo),e(O,Bvo),e(O,Yu),e(Yu,Wse),e(Wse,Pvo),e(Yu,Ivo),e(Yu,Rq),e(Rq,qvo),e(Yu,Nvo),e(O,jvo),e(O,Ku),e(Ku,Hse),e(Hse,Dvo),e(Ku,Gvo),e(Ku,Bq),e(Bq,Ovo),e(Ku,Vvo),e(O,Xvo),e(O,Zu),e(Zu,Use),e(Use,zvo),e(Zu,Qvo),e(Zu,Pq),e(Pq,Wvo),e(Zu,Hvo),e(O,Uvo),e(O,e_),e(e_,Jse),e(Jse,Jvo),e(e_,Yvo),e(e_,Iq),e(Iq,Kvo),e(e_,Zvo),e(O,eFo),e(O,o_),e(o_,Yse),e(Yse,oFo),e(o_,rFo),e(o_,qq),e(qq,tFo),e(o_,aFo),e(O,nFo),e(O,r_),e(r_,Kse),e(Kse,sFo),e(r_,lFo),e(r_,Nq),e(Nq,iFo),e(r_,dFo),e(O,cFo),e(O,t_),e(t_,Zse),e(Zse,fFo),e(t_,mFo),e(t_,jq),e(jq,gFo),e(t_,hFo),e(O,pFo),e(O,a_),e(a_,ele),e(ele,uFo),e(a_,_Fo),e(a_,Dq),e(Dq,bFo),e(a_,vFo),e(O,FFo),e(O,n_),e(n_,ole),e(ole,TFo),e(n_,MFo),e(n_,Gq),e(Gq,EFo),e(n_,CFo),e(O,wFo),e(O,s_),e(s_,rle),e(rle,AFo),e(s_,yFo),e(s_,Oq),e(Oq,LFo),e(s_,xFo),e(O,$Fo),e(O,l_),e(l_,tle),e(tle,kFo),e(l_,SFo),e(l_,Vq),e(Vq,RFo),e(l_,BFo),e(O,PFo),e(O,i_),e(i_,ale),e(ale,IFo),e(i_,qFo),e(i_,Xq),e(Xq,NFo),e(i_,jFo),e(O,DFo),e(O,d_),e(d_,nle),e(nle,GFo),e(d_,OFo),e(d_,zq),e(zq,VFo),e(d_,XFo),e(O,zFo),e(O,c_),e(c_,sle),e(sle,QFo),e(c_,WFo),e(c_,Qq),e(Qq,HFo),e(c_,UFo),e(O,JFo),e(O,f_),e(f_,lle),e(lle,YFo),e(f_,KFo),e(f_,Wq),e(Wq,ZFo),e(f_,e6o),e(O,o6o),e(O,m_),e(m_,ile),e(ile,r6o),e(m_,t6o),e(m_,Hq),e(Hq,a6o),e(m_,n6o),e(Ue,s6o),e(Ue,g_),e(g_,l6o),e(g_,dle),e(dle,i6o),e(g_,d6o),e(g_,cle),e(cle,c6o),e(Ue,f6o),M(h_,Ue,null),b(f,cPe,_),b(f,Mi,_),e(Mi,p_),e(p_,fle),M(hA,fle,null),e(Mi,m6o),e(Mi,mle),e(mle,g6o),b(f,fPe,_),b(f,$o,_),M(pA,$o,null),e($o,h6o),e($o,Ei),e(Ei,p6o),e(Ei,Uq),e(Uq,u6o),e(Ei,_6o),e(Ei,Jq),e(Jq,b6o),e(Ei,v6o),e($o,F6o),e($o,uA),e(uA,T6o),e(uA,gle),e(gle,M6o),e(uA,E6o),e($o,C6o),e($o,ot),M(_A,ot,null),e(ot,w6o),e(ot,hle),e(hle,A6o),e(ot,y6o),e(ot,Ci),e(Ci,L6o),e(Ci,ple),e(ple,x6o),e(Ci,$6o),e(Ci,Yq),e(Yq,k6o),e(Ci,S6o),e(ot,R6o),M(u_,ot,null),e($o,B6o),e($o,Je),M(bA,Je,null),e(Je,P6o),e(Je,ule),e(ule,I6o),e(Je,q6o),e(Je,wa),e(wa,N6o),e(wa,_le),e(_le,j6o),e(wa,D6o),e(wa,ble),e(ble,G6o),e(wa,O6o),e(wa,vle),e(vle,V6o),e(wa,X6o),e(Je,z6o),e(Je,z),e(z,__),e(__,Fle),e(Fle,Q6o),e(__,W6o),e(__,Kq),e(Kq,H6o),e(__,U6o),e(z,J6o),e(z,b_),e(b_,Tle),e(Tle,Y6o),e(b_,K6o),e(b_,Zq),e(Zq,Z6o),e(b_,eTo),e(z,oTo),e(z,v_),e(v_,Mle),e(Mle,rTo),e(v_,tTo),e(v_,eN),e(eN,aTo),e(v_,nTo),e(z,sTo),e(z,F_),e(F_,Ele),e(Ele,lTo),e(F_,iTo),e(F_,oN),e(oN,dTo),e(F_,cTo),e(z,fTo),e(z,T_),e(T_,Cle),e(Cle,mTo),e(T_,gTo),e(T_,rN),e(rN,hTo),e(T_,pTo),e(z,uTo),e(z,M_),e(M_,wle),e(wle,_To),e(M_,bTo),e(M_,tN),e(tN,vTo),e(M_,FTo),e(z,TTo),e(z,E_),e(E_,Ale),e(Ale,MTo),e(E_,ETo),e(E_,aN),e(aN,CTo),e(E_,wTo),e(z,ATo),e(z,C_),e(C_,yle),e(yle,yTo),e(C_,LTo),e(C_,nN),e(nN,xTo),e(C_,$To),e(z,kTo),e(z,w_),e(w_,Lle),e(Lle,STo),e(w_,RTo),e(w_,sN),e(sN,BTo),e(w_,PTo),e(z,ITo),e(z,A_),e(A_,xle),e(xle,qTo),e(A_,NTo),e(A_,lN),e(lN,jTo),e(A_,DTo),e(z,GTo),e(z,y_),e(y_,$le),e($le,OTo),e(y_,VTo),e(y_,iN),e(iN,XTo),e(y_,zTo),e(z,QTo),e(z,L_),e(L_,kle),e(kle,WTo),e(L_,HTo),e(L_,dN),e(dN,UTo),e(L_,JTo),e(z,YTo),e(z,x_),e(x_,Sle),e(Sle,KTo),e(x_,ZTo),e(x_,cN),e(cN,e7o),e(x_,o7o),e(z,r7o),e(z,$_),e($_,Rle),e(Rle,t7o),e($_,a7o),e($_,fN),e(fN,n7o),e($_,s7o),e(z,l7o),e(z,k_),e(k_,Ble),e(Ble,i7o),e(k_,d7o),e(k_,mN),e(mN,c7o),e(k_,f7o),e(z,m7o),e(z,S_),e(S_,Ple),e(Ple,g7o),e(S_,h7o),e(S_,gN),e(gN,p7o),e(S_,u7o),e(z,_7o),e(z,R_),e(R_,Ile),e(Ile,b7o),e(R_,v7o),e(R_,hN),e(hN,F7o),e(R_,T7o),e(z,M7o),e(z,B_),e(B_,qle),e(qle,E7o),e(B_,C7o),e(B_,pN),e(pN,w7o),e(B_,A7o),e(z,y7o),e(z,P_),e(P_,Nle),e(Nle,L7o),e(P_,x7o),e(P_,uN),e(uN,$7o),e(P_,k7o),e(z,S7o),e(z,I_),e(I_,jle),e(jle,R7o),e(I_,B7o),e(I_,_N),e(_N,P7o),e(I_,I7o),e(z,q7o),e(z,q_),e(q_,Dle),e(Dle,N7o),e(q_,j7o),e(q_,bN),e(bN,D7o),e(q_,G7o),e(z,O7o),e(z,N_),e(N_,Gle),e(Gle,V7o),e(N_,X7o),e(N_,vN),e(vN,z7o),e(N_,Q7o),e(z,W7o),e(z,j_),e(j_,Ole),e(Ole,H7o),e(j_,U7o),e(j_,FN),e(FN,J7o),e(j_,Y7o),e(z,K7o),e(z,D_),e(D_,Vle),e(Vle,Z7o),e(D_,eMo),e(D_,TN),e(TN,oMo),e(D_,rMo),e(z,tMo),e(z,G_),e(G_,Xle),e(Xle,aMo),e(G_,nMo),e(G_,MN),e(MN,sMo),e(G_,lMo),e(z,iMo),e(z,O_),e(O_,zle),e(zle,dMo),e(O_,cMo),e(O_,EN),e(EN,fMo),e(O_,mMo),e(z,gMo),e(z,V_),e(V_,Qle),e(Qle,hMo),e(V_,pMo),e(V_,CN),e(CN,uMo),e(V_,_Mo),e(z,bMo),e(z,X_),e(X_,Wle),e(Wle,vMo),e(X_,FMo),e(X_,wN),e(wN,TMo),e(X_,MMo),e(z,EMo),e(z,z_),e(z_,Hle),e(Hle,CMo),e(z_,wMo),e(z_,AN),e(AN,AMo),e(z_,yMo),e(z,LMo),e(z,Q_),e(Q_,Ule),e(Ule,xMo),e(Q_,$Mo),e(Q_,yN),e(yN,kMo),e(Q_,SMo),e(z,RMo),e(z,W_),e(W_,Jle),e(Jle,BMo),e(W_,PMo),e(W_,LN),e(LN,IMo),e(W_,qMo),e(z,NMo),e(z,H_),e(H_,Yle),e(Yle,jMo),e(H_,DMo),e(H_,xN),e(xN,GMo),e(H_,OMo),e(z,VMo),e(z,U_),e(U_,Kle),e(Kle,XMo),e(U_,zMo),e(U_,$N),e($N,QMo),e(U_,WMo),e(z,HMo),e(z,J_),e(J_,Zle),e(Zle,UMo),e(J_,JMo),e(J_,kN),e(kN,YMo),e(J_,KMo),e(z,ZMo),e(z,Y_),e(Y_,eie),e(eie,e4o),e(Y_,o4o),e(Y_,SN),e(SN,r4o),e(Y_,t4o),e(Je,a4o),e(Je,K_),e(K_,n4o),e(K_,oie),e(oie,s4o),e(K_,l4o),e(K_,rie),e(rie,i4o),e(Je,d4o),M(Z_,Je,null),b(f,mPe,_),b(f,wi,_),e(wi,e0),e(e0,tie),M(vA,tie,null),e(wi,c4o),e(wi,aie),e(aie,f4o),b(f,gPe,_),b(f,ko,_),M(FA,ko,null),e(ko,m4o),e(ko,Ai),e(Ai,g4o),e(Ai,RN),e(RN,h4o),e(Ai,p4o),e(Ai,BN),e(BN,u4o),e(Ai,_4o),e(ko,b4o),e(ko,TA),e(TA,v4o),e(TA,nie),e(nie,F4o),e(TA,T4o),e(ko,M4o),e(ko,rt),M(MA,rt,null),e(rt,E4o),e(rt,sie),e(sie,C4o),e(rt,w4o),e(rt,yi),e(yi,A4o),e(yi,lie),e(lie,y4o),e(yi,L4o),e(yi,PN),e(PN,x4o),e(yi,$4o),e(rt,k4o),M(o0,rt,null),e(ko,S4o),e(ko,Ye),M(EA,Ye,null),e(Ye,R4o),e(Ye,iie),e(iie,B4o),e(Ye,P4o),e(Ye,Aa),e(Aa,I4o),e(Aa,die),e(die,q4o),e(Aa,N4o),e(Aa,cie),e(cie,j4o),e(Aa,D4o),e(Aa,fie),e(fie,G4o),e(Aa,O4o),e(Ye,V4o),e(Ye,Q),e(Q,r0),e(r0,mie),e(mie,X4o),e(r0,z4o),e(r0,IN),e(IN,Q4o),e(r0,W4o),e(Q,H4o),e(Q,t0),e(t0,gie),e(gie,U4o),e(t0,J4o),e(t0,qN),e(qN,Y4o),e(t0,K4o),e(Q,Z4o),e(Q,a0),e(a0,hie),e(hie,eEo),e(a0,oEo),e(a0,NN),e(NN,rEo),e(a0,tEo),e(Q,aEo),e(Q,n0),e(n0,pie),e(pie,nEo),e(n0,sEo),e(n0,jN),e(jN,lEo),e(n0,iEo),e(Q,dEo),e(Q,s0),e(s0,uie),e(uie,cEo),e(s0,fEo),e(s0,DN),e(DN,mEo),e(s0,gEo),e(Q,hEo),e(Q,l0),e(l0,_ie),e(_ie,pEo),e(l0,uEo),e(l0,GN),e(GN,_Eo),e(l0,bEo),e(Q,vEo),e(Q,i0),e(i0,bie),e(bie,FEo),e(i0,TEo),e(i0,ON),e(ON,MEo),e(i0,EEo),e(Q,CEo),e(Q,d0),e(d0,vie),e(vie,wEo),e(d0,AEo),e(d0,VN),e(VN,yEo),e(d0,LEo),e(Q,xEo),e(Q,c0),e(c0,Fie),e(Fie,$Eo),e(c0,kEo),e(c0,XN),e(XN,SEo),e(c0,REo),e(Q,BEo),e(Q,f0),e(f0,Tie),e(Tie,PEo),e(f0,IEo),e(f0,zN),e(zN,qEo),e(f0,NEo),e(Q,jEo),e(Q,m0),e(m0,Mie),e(Mie,DEo),e(m0,GEo),e(m0,QN),e(QN,OEo),e(m0,VEo),e(Q,XEo),e(Q,g0),e(g0,Eie),e(Eie,zEo),e(g0,QEo),e(g0,WN),e(WN,WEo),e(g0,HEo),e(Q,UEo),e(Q,h0),e(h0,Cie),e(Cie,JEo),e(h0,YEo),e(h0,HN),e(HN,KEo),e(h0,ZEo),e(Q,e5o),e(Q,p0),e(p0,wie),e(wie,o5o),e(p0,r5o),e(p0,UN),e(UN,t5o),e(p0,a5o),e(Q,n5o),e(Q,u0),e(u0,Aie),e(Aie,s5o),e(u0,l5o),e(u0,JN),e(JN,i5o),e(u0,d5o),e(Q,c5o),e(Q,_0),e(_0,yie),e(yie,f5o),e(_0,m5o),e(_0,YN),e(YN,g5o),e(_0,h5o),e(Q,p5o),e(Q,b0),e(b0,Lie),e(Lie,u5o),e(b0,_5o),e(b0,KN),e(KN,b5o),e(b0,v5o),e(Q,F5o),e(Q,v0),e(v0,xie),e(xie,T5o),e(v0,M5o),e(v0,ZN),e(ZN,E5o),e(v0,C5o),e(Q,w5o),e(Q,F0),e(F0,$ie),e($ie,A5o),e(F0,y5o),e(F0,ej),e(ej,L5o),e(F0,x5o),e(Q,$5o),e(Q,T0),e(T0,kie),e(kie,k5o),e(T0,S5o),e(T0,oj),e(oj,R5o),e(T0,B5o),e(Q,P5o),e(Q,M0),e(M0,Sie),e(Sie,I5o),e(M0,q5o),e(M0,rj),e(rj,N5o),e(M0,j5o),e(Q,D5o),e(Q,E0),e(E0,Rie),e(Rie,G5o),e(E0,O5o),e(E0,tj),e(tj,V5o),e(E0,X5o),e(Q,z5o),e(Q,C0),e(C0,Bie),e(Bie,Q5o),e(C0,W5o),e(C0,aj),e(aj,H5o),e(C0,U5o),e(Q,J5o),e(Q,w0),e(w0,Pie),e(Pie,Y5o),e(w0,K5o),e(w0,nj),e(nj,Z5o),e(w0,eCo),e(Q,oCo),e(Q,A0),e(A0,Iie),e(Iie,rCo),e(A0,tCo),e(A0,sj),e(sj,aCo),e(A0,nCo),e(Q,sCo),e(Q,y0),e(y0,qie),e(qie,lCo),e(y0,iCo),e(y0,lj),e(lj,dCo),e(y0,cCo),e(Q,fCo),e(Q,L0),e(L0,Nie),e(Nie,mCo),e(L0,gCo),e(L0,ij),e(ij,hCo),e(L0,pCo),e(Q,uCo),e(Q,x0),e(x0,jie),e(jie,_Co),e(x0,bCo),e(x0,dj),e(dj,vCo),e(x0,FCo),e(Q,TCo),e(Q,$0),e($0,Die),e(Die,MCo),e($0,ECo),e($0,cj),e(cj,CCo),e($0,wCo),e(Q,ACo),e(Q,k0),e(k0,Gie),e(Gie,yCo),e(k0,LCo),e(k0,fj),e(fj,xCo),e(k0,$Co),e(Q,kCo),e(Q,S0),e(S0,Oie),e(Oie,SCo),e(S0,RCo),e(S0,Vie),e(Vie,BCo),e(S0,PCo),e(Q,ICo),e(Q,R0),e(R0,Xie),e(Xie,qCo),e(R0,NCo),e(R0,mj),e(mj,jCo),e(R0,DCo),e(Q,GCo),e(Q,B0),e(B0,zie),e(zie,OCo),e(B0,VCo),e(B0,gj),e(gj,XCo),e(B0,zCo),e(Q,QCo),e(Q,P0),e(P0,Qie),e(Qie,WCo),e(P0,HCo),e(P0,hj),e(hj,UCo),e(P0,JCo),e(Q,YCo),e(Q,I0),e(I0,Wie),e(Wie,KCo),e(I0,ZCo),e(I0,pj),e(pj,e3o),e(I0,o3o),e(Ye,r3o),e(Ye,q0),e(q0,t3o),e(q0,Hie),e(Hie,a3o),e(q0,n3o),e(q0,Uie),e(Uie,s3o),e(Ye,l3o),M(N0,Ye,null),b(f,hPe,_),b(f,Li,_),e(Li,j0),e(j0,Jie),M(CA,Jie,null),e(Li,i3o),e(Li,Yie),e(Yie,d3o),b(f,pPe,_),b(f,So,_),M(wA,So,null),e(So,c3o),e(So,xi),e(xi,f3o),e(xi,uj),e(uj,m3o),e(xi,g3o),e(xi,_j),e(_j,h3o),e(xi,p3o),e(So,u3o),e(So,AA),e(AA,_3o),e(AA,Kie),e(Kie,b3o),e(AA,v3o),e(So,F3o),e(So,tt),M(yA,tt,null),e(tt,T3o),e(tt,Zie),e(Zie,M3o),e(tt,E3o),e(tt,$i),e($i,C3o),e($i,ede),e(ede,w3o),e($i,A3o),e($i,bj),e(bj,y3o),e($i,L3o),e(tt,x3o),M(D0,tt,null),e(So,$3o),e(So,Ke),M(LA,Ke,null),e(Ke,k3o),e(Ke,ode),e(ode,S3o),e(Ke,R3o),e(Ke,ya),e(ya,B3o),e(ya,rde),e(rde,P3o),e(ya,I3o),e(ya,tde),e(tde,q3o),e(ya,N3o),e(ya,ade),e(ade,j3o),e(ya,D3o),e(Ke,G3o),e(Ke,he),e(he,G0),e(G0,nde),e(nde,O3o),e(G0,V3o),e(G0,vj),e(vj,X3o),e(G0,z3o),e(he,Q3o),e(he,O0),e(O0,sde),e(sde,W3o),e(O0,H3o),e(O0,Fj),e(Fj,U3o),e(O0,J3o),e(he,Y3o),e(he,V0),e(V0,lde),e(lde,K3o),e(V0,Z3o),e(V0,Tj),e(Tj,ewo),e(V0,owo),e(he,rwo),e(he,X0),e(X0,ide),e(ide,two),e(X0,awo),e(X0,Mj),e(Mj,nwo),e(X0,swo),e(he,lwo),e(he,z0),e(z0,dde),e(dde,iwo),e(z0,dwo),e(z0,Ej),e(Ej,cwo),e(z0,fwo),e(he,mwo),e(he,Q0),e(Q0,cde),e(cde,gwo),e(Q0,hwo),e(Q0,Cj),e(Cj,pwo),e(Q0,uwo),e(he,_wo),e(he,W0),e(W0,fde),e(fde,bwo),e(W0,vwo),e(W0,wj),e(wj,Fwo),e(W0,Two),e(he,Mwo),e(he,H0),e(H0,mde),e(mde,Ewo),e(H0,Cwo),e(H0,Aj),e(Aj,wwo),e(H0,Awo),e(he,ywo),e(he,U0),e(U0,gde),e(gde,Lwo),e(U0,xwo),e(U0,yj),e(yj,$wo),e(U0,kwo),e(he,Swo),e(he,J0),e(J0,hde),e(hde,Rwo),e(J0,Bwo),e(J0,Lj),e(Lj,Pwo),e(J0,Iwo),e(he,qwo),e(he,Y0),e(Y0,pde),e(pde,Nwo),e(Y0,jwo),e(Y0,xj),e(xj,Dwo),e(Y0,Gwo),e(he,Owo),e(he,K0),e(K0,ude),e(ude,Vwo),e(K0,Xwo),e(K0,$j),e($j,zwo),e(K0,Qwo),e(he,Wwo),e(he,Z0),e(Z0,_de),e(_de,Hwo),e(Z0,Uwo),e(Z0,kj),e(kj,Jwo),e(Z0,Ywo),e(he,Kwo),e(he,e1),e(e1,bde),e(bde,Zwo),e(e1,eAo),e(e1,Sj),e(Sj,oAo),e(e1,rAo),e(he,tAo),e(he,o1),e(o1,vde),e(vde,aAo),e(o1,nAo),e(o1,Rj),e(Rj,sAo),e(o1,lAo),e(he,iAo),e(he,r1),e(r1,Fde),e(Fde,dAo),e(r1,cAo),e(r1,Bj),e(Bj,fAo),e(r1,mAo),e(he,gAo),e(he,t1),e(t1,Tde),e(Tde,hAo),e(t1,pAo),e(t1,Pj),e(Pj,uAo),e(t1,_Ao),e(Ke,bAo),e(Ke,a1),e(a1,vAo),e(a1,Mde),e(Mde,FAo),e(a1,TAo),e(a1,Ede),e(Ede,MAo),e(Ke,EAo),M(n1,Ke,null),b(f,uPe,_),b(f,ki,_),e(ki,s1),e(s1,Cde),M(xA,Cde,null),e(ki,CAo),e(ki,wde),e(wde,wAo),b(f,_Pe,_),b(f,Ro,_),M($A,Ro,null),e(Ro,AAo),e(Ro,Si),e(Si,yAo),e(Si,Ij),e(Ij,LAo),e(Si,xAo),e(Si,qj),e(qj,$Ao),e(Si,kAo),e(Ro,SAo),e(Ro,kA),e(kA,RAo),e(kA,Ade),e(Ade,BAo),e(kA,PAo),e(Ro,IAo),e(Ro,at),M(SA,at,null),e(at,qAo),e(at,yde),e(yde,NAo),e(at,jAo),e(at,Ri),e(Ri,DAo),e(Ri,Lde),e(Lde,GAo),e(Ri,OAo),e(Ri,Nj),e(Nj,VAo),e(Ri,XAo),e(at,zAo),M(l1,at,null),e(Ro,QAo),e(Ro,Ze),M(RA,Ze,null),e(Ze,WAo),e(Ze,xde),e(xde,HAo),e(Ze,UAo),e(Ze,La),e(La,JAo),e(La,$de),e($de,YAo),e(La,KAo),e(La,kde),e(kde,ZAo),e(La,eyo),e(La,Sde),e(Sde,oyo),e(La,ryo),e(Ze,tyo),e(Ze,q),e(q,i1),e(i1,Rde),e(Rde,ayo),e(i1,nyo),e(i1,jj),e(jj,syo),e(i1,lyo),e(q,iyo),e(q,d1),e(d1,Bde),e(Bde,dyo),e(d1,cyo),e(d1,Dj),e(Dj,fyo),e(d1,myo),e(q,gyo),e(q,c1),e(c1,Pde),e(Pde,hyo),e(c1,pyo),e(c1,Gj),e(Gj,uyo),e(c1,_yo),e(q,byo),e(q,f1),e(f1,Ide),e(Ide,vyo),e(f1,Fyo),e(f1,Oj),e(Oj,Tyo),e(f1,Myo),e(q,Eyo),e(q,m1),e(m1,qde),e(qde,Cyo),e(m1,wyo),e(m1,Vj),e(Vj,Ayo),e(m1,yyo),e(q,Lyo),e(q,g1),e(g1,Nde),e(Nde,xyo),e(g1,$yo),e(g1,Xj),e(Xj,kyo),e(g1,Syo),e(q,Ryo),e(q,h1),e(h1,jde),e(jde,Byo),e(h1,Pyo),e(h1,zj),e(zj,Iyo),e(h1,qyo),e(q,Nyo),e(q,p1),e(p1,Dde),e(Dde,jyo),e(p1,Dyo),e(p1,Qj),e(Qj,Gyo),e(p1,Oyo),e(q,Vyo),e(q,u1),e(u1,Gde),e(Gde,Xyo),e(u1,zyo),e(u1,Wj),e(Wj,Qyo),e(u1,Wyo),e(q,Hyo),e(q,_1),e(_1,Ode),e(Ode,Uyo),e(_1,Jyo),e(_1,Hj),e(Hj,Yyo),e(_1,Kyo),e(q,Zyo),e(q,b1),e(b1,Vde),e(Vde,eLo),e(b1,oLo),e(b1,Uj),e(Uj,rLo),e(b1,tLo),e(q,aLo),e(q,v1),e(v1,Xde),e(Xde,nLo),e(v1,sLo),e(v1,Jj),e(Jj,lLo),e(v1,iLo),e(q,dLo),e(q,F1),e(F1,zde),e(zde,cLo),e(F1,fLo),e(F1,Yj),e(Yj,mLo),e(F1,gLo),e(q,hLo),e(q,T1),e(T1,Qde),e(Qde,pLo),e(T1,uLo),e(T1,Kj),e(Kj,_Lo),e(T1,bLo),e(q,vLo),e(q,M1),e(M1,Wde),e(Wde,FLo),e(M1,TLo),e(M1,Zj),e(Zj,MLo),e(M1,ELo),e(q,CLo),e(q,E1),e(E1,Hde),e(Hde,wLo),e(E1,ALo),e(E1,eD),e(eD,yLo),e(E1,LLo),e(q,xLo),e(q,C1),e(C1,Ude),e(Ude,$Lo),e(C1,kLo),e(C1,oD),e(oD,SLo),e(C1,RLo),e(q,BLo),e(q,w1),e(w1,Jde),e(Jde,PLo),e(w1,ILo),e(w1,rD),e(rD,qLo),e(w1,NLo),e(q,jLo),e(q,A1),e(A1,Yde),e(Yde,DLo),e(A1,GLo),e(A1,tD),e(tD,OLo),e(A1,VLo),e(q,XLo),e(q,y1),e(y1,Kde),e(Kde,zLo),e(y1,QLo),e(y1,aD),e(aD,WLo),e(y1,HLo),e(q,ULo),e(q,L1),e(L1,Zde),e(Zde,JLo),e(L1,YLo),e(L1,nD),e(nD,KLo),e(L1,ZLo),e(q,e8o),e(q,x1),e(x1,ece),e(ece,o8o),e(x1,r8o),e(x1,sD),e(sD,t8o),e(x1,a8o),e(q,n8o),e(q,$1),e($1,oce),e(oce,s8o),e($1,l8o),e($1,lD),e(lD,i8o),e($1,d8o),e(q,c8o),e(q,k1),e(k1,rce),e(rce,f8o),e(k1,m8o),e(k1,iD),e(iD,g8o),e(k1,h8o),e(q,p8o),e(q,S1),e(S1,tce),e(tce,u8o),e(S1,_8o),e(S1,dD),e(dD,b8o),e(S1,v8o),e(q,F8o),e(q,R1),e(R1,ace),e(ace,T8o),e(R1,M8o),e(R1,cD),e(cD,E8o),e(R1,C8o),e(q,w8o),e(q,B1),e(B1,nce),e(nce,A8o),e(B1,y8o),e(B1,fD),e(fD,L8o),e(B1,x8o),e(q,$8o),e(q,P1),e(P1,sce),e(sce,k8o),e(P1,S8o),e(P1,mD),e(mD,R8o),e(P1,B8o),e(q,P8o),e(q,I1),e(I1,lce),e(lce,I8o),e(I1,q8o),e(I1,gD),e(gD,N8o),e(I1,j8o),e(q,D8o),e(q,q1),e(q1,ice),e(ice,G8o),e(q1,O8o),e(q1,hD),e(hD,V8o),e(q1,X8o),e(q,z8o),e(q,N1),e(N1,dce),e(dce,Q8o),e(N1,W8o),e(N1,pD),e(pD,H8o),e(N1,U8o),e(q,J8o),e(q,j1),e(j1,cce),e(cce,Y8o),e(j1,K8o),e(j1,uD),e(uD,Z8o),e(j1,exo),e(q,oxo),e(q,D1),e(D1,fce),e(fce,rxo),e(D1,txo),e(D1,_D),e(_D,axo),e(D1,nxo),e(q,sxo),e(q,G1),e(G1,mce),e(mce,lxo),e(G1,ixo),e(G1,bD),e(bD,dxo),e(G1,cxo),e(q,fxo),e(q,O1),e(O1,gce),e(gce,mxo),e(O1,gxo),e(O1,vD),e(vD,hxo),e(O1,pxo),e(q,uxo),e(q,V1),e(V1,hce),e(hce,_xo),e(V1,bxo),e(V1,FD),e(FD,vxo),e(V1,Fxo),e(q,Txo),e(q,X1),e(X1,pce),e(pce,Mxo),e(X1,Exo),e(X1,TD),e(TD,Cxo),e(X1,wxo),e(q,Axo),e(q,z1),e(z1,uce),e(uce,yxo),e(z1,Lxo),e(z1,MD),e(MD,xxo),e(z1,$xo),e(q,kxo),e(q,Q1),e(Q1,_ce),e(_ce,Sxo),e(Q1,Rxo),e(Q1,ED),e(ED,Bxo),e(Q1,Pxo),e(q,Ixo),e(q,W1),e(W1,bce),e(bce,qxo),e(W1,Nxo),e(W1,CD),e(CD,jxo),e(W1,Dxo),e(q,Gxo),e(q,H1),e(H1,vce),e(vce,Oxo),e(H1,Vxo),e(H1,wD),e(wD,Xxo),e(H1,zxo),e(q,Qxo),e(q,U1),e(U1,Fce),e(Fce,Wxo),e(U1,Hxo),e(U1,AD),e(AD,Uxo),e(U1,Jxo),e(q,Yxo),e(q,J1),e(J1,Tce),e(Tce,Kxo),e(J1,Zxo),e(J1,yD),e(yD,e9o),e(J1,o9o),e(q,r9o),e(q,Y1),e(Y1,Mce),e(Mce,t9o),e(Y1,a9o),e(Y1,LD),e(LD,n9o),e(Y1,s9o),e(q,l9o),e(q,K1),e(K1,Ece),e(Ece,i9o),e(K1,d9o),e(K1,xD),e(xD,c9o),e(K1,f9o),e(q,m9o),e(q,Z1),e(Z1,Cce),e(Cce,g9o),e(Z1,h9o),e(Z1,$D),e($D,p9o),e(Z1,u9o),e(q,_9o),e(q,eb),e(eb,wce),e(wce,b9o),e(eb,v9o),e(eb,kD),e(kD,F9o),e(eb,T9o),e(q,M9o),e(q,ob),e(ob,Ace),e(Ace,E9o),e(ob,C9o),e(ob,SD),e(SD,w9o),e(ob,A9o),e(Ze,y9o),e(Ze,rb),e(rb,L9o),e(rb,yce),e(yce,x9o),e(rb,$9o),e(rb,Lce),e(Lce,k9o),e(Ze,S9o),M(tb,Ze,null),b(f,bPe,_),b(f,Bi,_),e(Bi,ab),e(ab,xce),M(BA,xce,null),e(Bi,R9o),e(Bi,$ce),e($ce,B9o),b(f,vPe,_),b(f,Bo,_),M(PA,Bo,null),e(Bo,P9o),e(Bo,Pi),e(Pi,I9o),e(Pi,RD),e(RD,q9o),e(Pi,N9o),e(Pi,BD),e(BD,j9o),e(Pi,D9o),e(Bo,G9o),e(Bo,IA),e(IA,O9o),e(IA,kce),e(kce,V9o),e(IA,X9o),e(Bo,z9o),e(Bo,nt),M(qA,nt,null),e(nt,Q9o),e(nt,Sce),e(Sce,W9o),e(nt,H9o),e(nt,Ii),e(Ii,U9o),e(Ii,Rce),e(Rce,J9o),e(Ii,Y9o),e(Ii,PD),e(PD,K9o),e(Ii,Z9o),e(nt,e$o),M(nb,nt,null),e(Bo,o$o),e(Bo,eo),M(NA,eo,null),e(eo,r$o),e(eo,Bce),e(Bce,t$o),e(eo,a$o),e(eo,xa),e(xa,n$o),e(xa,Pce),e(Pce,s$o),e(xa,l$o),e(xa,Ice),e(Ice,i$o),e(xa,d$o),e(xa,qce),e(qce,c$o),e(xa,f$o),e(eo,m$o),e(eo,Y),e(Y,sb),e(sb,Nce),e(Nce,g$o),e(sb,h$o),e(sb,ID),e(ID,p$o),e(sb,u$o),e(Y,_$o),e(Y,lb),e(lb,jce),e(jce,b$o),e(lb,v$o),e(lb,qD),e(qD,F$o),e(lb,T$o),e(Y,M$o),e(Y,ib),e(ib,Dce),e(Dce,E$o),e(ib,C$o),e(ib,ND),e(ND,w$o),e(ib,A$o),e(Y,y$o),e(Y,db),e(db,Gce),e(Gce,L$o),e(db,x$o),e(db,jD),e(jD,$$o),e(db,k$o),e(Y,S$o),e(Y,cb),e(cb,Oce),e(Oce,R$o),e(cb,B$o),e(cb,DD),e(DD,P$o),e(cb,I$o),e(Y,q$o),e(Y,fb),e(fb,Vce),e(Vce,N$o),e(fb,j$o),e(fb,GD),e(GD,D$o),e(fb,G$o),e(Y,O$o),e(Y,mb),e(mb,Xce),e(Xce,V$o),e(mb,X$o),e(mb,OD),e(OD,z$o),e(mb,Q$o),e(Y,W$o),e(Y,gb),e(gb,zce),e(zce,H$o),e(gb,U$o),e(gb,VD),e(VD,J$o),e(gb,Y$o),e(Y,K$o),e(Y,hb),e(hb,Qce),e(Qce,Z$o),e(hb,eko),e(hb,XD),e(XD,oko),e(hb,rko),e(Y,tko),e(Y,pb),e(pb,Wce),e(Wce,ako),e(pb,nko),e(pb,zD),e(zD,sko),e(pb,lko),e(Y,iko),e(Y,ub),e(ub,Hce),e(Hce,dko),e(ub,cko),e(ub,QD),e(QD,fko),e(ub,mko),e(Y,gko),e(Y,_b),e(_b,Uce),e(Uce,hko),e(_b,pko),e(_b,WD),e(WD,uko),e(_b,_ko),e(Y,bko),e(Y,bb),e(bb,Jce),e(Jce,vko),e(bb,Fko),e(bb,HD),e(HD,Tko),e(bb,Mko),e(Y,Eko),e(Y,vb),e(vb,Yce),e(Yce,Cko),e(vb,wko),e(vb,UD),e(UD,Ako),e(vb,yko),e(Y,Lko),e(Y,Fb),e(Fb,Kce),e(Kce,xko),e(Fb,$ko),e(Fb,JD),e(JD,kko),e(Fb,Sko),e(Y,Rko),e(Y,Tb),e(Tb,Zce),e(Zce,Bko),e(Tb,Pko),e(Tb,YD),e(YD,Iko),e(Tb,qko),e(Y,Nko),e(Y,Mb),e(Mb,efe),e(efe,jko),e(Mb,Dko),e(Mb,KD),e(KD,Gko),e(Mb,Oko),e(Y,Vko),e(Y,Eb),e(Eb,ofe),e(ofe,Xko),e(Eb,zko),e(Eb,ZD),e(ZD,Qko),e(Eb,Wko),e(Y,Hko),e(Y,Cb),e(Cb,rfe),e(rfe,Uko),e(Cb,Jko),e(Cb,eG),e(eG,Yko),e(Cb,Kko),e(Y,Zko),e(Y,wb),e(wb,tfe),e(tfe,eSo),e(wb,oSo),e(wb,oG),e(oG,rSo),e(wb,tSo),e(Y,aSo),e(Y,Ab),e(Ab,afe),e(afe,nSo),e(Ab,sSo),e(Ab,rG),e(rG,lSo),e(Ab,iSo),e(Y,dSo),e(Y,yb),e(yb,nfe),e(nfe,cSo),e(yb,fSo),e(yb,tG),e(tG,mSo),e(yb,gSo),e(Y,hSo),e(Y,Lb),e(Lb,sfe),e(sfe,pSo),e(Lb,uSo),e(Lb,aG),e(aG,_So),e(Lb,bSo),e(Y,vSo),e(Y,xb),e(xb,lfe),e(lfe,FSo),e(xb,TSo),e(xb,nG),e(nG,MSo),e(xb,ESo),e(Y,CSo),e(Y,$b),e($b,ife),e(ife,wSo),e($b,ASo),e($b,sG),e(sG,ySo),e($b,LSo),e(Y,xSo),e(Y,kb),e(kb,dfe),e(dfe,$So),e(kb,kSo),e(kb,lG),e(lG,SSo),e(kb,RSo),e(Y,BSo),e(Y,Sb),e(Sb,cfe),e(cfe,PSo),e(Sb,ISo),e(Sb,iG),e(iG,qSo),e(Sb,NSo),e(Y,jSo),e(Y,Rb),e(Rb,ffe),e(ffe,DSo),e(Rb,GSo),e(Rb,dG),e(dG,OSo),e(Rb,VSo),e(eo,XSo),e(eo,Bb),e(Bb,zSo),e(Bb,mfe),e(mfe,QSo),e(Bb,WSo),e(Bb,gfe),e(gfe,HSo),e(eo,USo),M(Pb,eo,null),b(f,FPe,_),b(f,qi,_),e(qi,Ib),e(Ib,hfe),M(jA,hfe,null),e(qi,JSo),e(qi,pfe),e(pfe,YSo),b(f,TPe,_),b(f,Po,_),M(DA,Po,null),e(Po,KSo),e(Po,Ni),e(Ni,ZSo),e(Ni,cG),e(cG,eRo),e(Ni,oRo),e(Ni,fG),e(fG,rRo),e(Ni,tRo),e(Po,aRo),e(Po,GA),e(GA,nRo),e(GA,ufe),e(ufe,sRo),e(GA,lRo),e(Po,iRo),e(Po,st),M(OA,st,null),e(st,dRo),e(st,_fe),e(_fe,cRo),e(st,fRo),e(st,ji),e(ji,mRo),e(ji,bfe),e(bfe,gRo),e(ji,hRo),e(ji,mG),e(mG,pRo),e(ji,uRo),e(st,_Ro),M(qb,st,null),e(Po,bRo),e(Po,oo),M(VA,oo,null),e(oo,vRo),e(oo,vfe),e(vfe,FRo),e(oo,TRo),e(oo,$a),e($a,MRo),e($a,Ffe),e(Ffe,ERo),e($a,CRo),e($a,Tfe),e(Tfe,wRo),e($a,ARo),e($a,Mfe),e(Mfe,yRo),e($a,LRo),e(oo,xRo),e(oo,Ur),e(Ur,Nb),e(Nb,Efe),e(Efe,$Ro),e(Nb,kRo),e(Nb,gG),e(gG,SRo),e(Nb,RRo),e(Ur,BRo),e(Ur,jb),e(jb,Cfe),e(Cfe,PRo),e(jb,IRo),e(jb,hG),e(hG,qRo),e(jb,NRo),e(Ur,jRo),e(Ur,Db),e(Db,wfe),e(wfe,DRo),e(Db,GRo),e(Db,pG),e(pG,ORo),e(Db,VRo),e(Ur,XRo),e(Ur,Gb),e(Gb,Afe),e(Afe,zRo),e(Gb,QRo),e(Gb,uG),e(uG,WRo),e(Gb,HRo),e(Ur,URo),e(Ur,Ob),e(Ob,yfe),e(yfe,JRo),e(Ob,YRo),e(Ob,_G),e(_G,KRo),e(Ob,ZRo),e(oo,eBo),e(oo,Vb),e(Vb,oBo),e(Vb,Lfe),e(Lfe,rBo),e(Vb,tBo),e(Vb,xfe),e(xfe,aBo),e(oo,nBo),M(Xb,oo,null),b(f,MPe,_),b(f,Di,_),e(Di,zb),e(zb,$fe),M(XA,$fe,null),e(Di,sBo),e(Di,kfe),e(kfe,lBo),b(f,EPe,_),b(f,Io,_),M(zA,Io,null),e(Io,iBo),e(Io,Gi),e(Gi,dBo),e(Gi,bG),e(bG,cBo),e(Gi,fBo),e(Gi,vG),e(vG,mBo),e(Gi,gBo),e(Io,hBo),e(Io,QA),e(QA,pBo),e(QA,Sfe),e(Sfe,uBo),e(QA,_Bo),e(Io,bBo),e(Io,lt),M(WA,lt,null),e(lt,vBo),e(lt,Rfe),e(Rfe,FBo),e(lt,TBo),e(lt,Oi),e(Oi,MBo),e(Oi,Bfe),e(Bfe,EBo),e(Oi,CBo),e(Oi,FG),e(FG,wBo),e(Oi,ABo),e(lt,yBo),M(Qb,lt,null),e(Io,LBo),e(Io,ro),M(HA,ro,null),e(ro,xBo),e(ro,Pfe),e(Pfe,$Bo),e(ro,kBo),e(ro,ka),e(ka,SBo),e(ka,Ife),e(Ife,RBo),e(ka,BBo),e(ka,qfe),e(qfe,PBo),e(ka,IBo),e(ka,Nfe),e(Nfe,qBo),e(ka,NBo),e(ro,jBo),e(ro,W),e(W,Wb),e(Wb,jfe),e(jfe,DBo),e(Wb,GBo),e(Wb,TG),e(TG,OBo),e(Wb,VBo),e(W,XBo),e(W,Hb),e(Hb,Dfe),e(Dfe,zBo),e(Hb,QBo),e(Hb,MG),e(MG,WBo),e(Hb,HBo),e(W,UBo),e(W,Ub),e(Ub,Gfe),e(Gfe,JBo),e(Ub,YBo),e(Ub,EG),e(EG,KBo),e(Ub,ZBo),e(W,ePo),e(W,Jb),e(Jb,Ofe),e(Ofe,oPo),e(Jb,rPo),e(Jb,CG),e(CG,tPo),e(Jb,aPo),e(W,nPo),e(W,Yb),e(Yb,Vfe),e(Vfe,sPo),e(Yb,lPo),e(Yb,wG),e(wG,iPo),e(Yb,dPo),e(W,cPo),e(W,Kb),e(Kb,Xfe),e(Xfe,fPo),e(Kb,mPo),e(Kb,AG),e(AG,gPo),e(Kb,hPo),e(W,pPo),e(W,Zb),e(Zb,zfe),e(zfe,uPo),e(Zb,_Po),e(Zb,yG),e(yG,bPo),e(Zb,vPo),e(W,FPo),e(W,e2),e(e2,Qfe),e(Qfe,TPo),e(e2,MPo),e(e2,LG),e(LG,EPo),e(e2,CPo),e(W,wPo),e(W,o2),e(o2,Wfe),e(Wfe,APo),e(o2,yPo),e(o2,xG),e(xG,LPo),e(o2,xPo),e(W,$Po),e(W,r2),e(r2,Hfe),e(Hfe,kPo),e(r2,SPo),e(r2,$G),e($G,RPo),e(r2,BPo),e(W,PPo),e(W,t2),e(t2,Ufe),e(Ufe,IPo),e(t2,qPo),e(t2,kG),e(kG,NPo),e(t2,jPo),e(W,DPo),e(W,a2),e(a2,Jfe),e(Jfe,GPo),e(a2,OPo),e(a2,SG),e(SG,VPo),e(a2,XPo),e(W,zPo),e(W,n2),e(n2,Yfe),e(Yfe,QPo),e(n2,WPo),e(n2,RG),e(RG,HPo),e(n2,UPo),e(W,JPo),e(W,s2),e(s2,Kfe),e(Kfe,YPo),e(s2,KPo),e(s2,BG),e(BG,ZPo),e(s2,eIo),e(W,oIo),e(W,l2),e(l2,Zfe),e(Zfe,rIo),e(l2,tIo),e(l2,PG),e(PG,aIo),e(l2,nIo),e(W,sIo),e(W,i2),e(i2,eme),e(eme,lIo),e(i2,iIo),e(i2,IG),e(IG,dIo),e(i2,cIo),e(W,fIo),e(W,d2),e(d2,ome),e(ome,mIo),e(d2,gIo),e(d2,qG),e(qG,hIo),e(d2,pIo),e(W,uIo),e(W,c2),e(c2,rme),e(rme,_Io),e(c2,bIo),e(c2,NG),e(NG,vIo),e(c2,FIo),e(W,TIo),e(W,f2),e(f2,tme),e(tme,MIo),e(f2,EIo),e(f2,jG),e(jG,CIo),e(f2,wIo),e(W,AIo),e(W,m2),e(m2,ame),e(ame,yIo),e(m2,LIo),e(m2,DG),e(DG,xIo),e(m2,$Io),e(W,kIo),e(W,g2),e(g2,nme),e(nme,SIo),e(g2,RIo),e(g2,GG),e(GG,BIo),e(g2,PIo),e(W,IIo),e(W,h2),e(h2,sme),e(sme,qIo),e(h2,NIo),e(h2,OG),e(OG,jIo),e(h2,DIo),e(W,GIo),e(W,p2),e(p2,lme),e(lme,OIo),e(p2,VIo),e(p2,VG),e(VG,XIo),e(p2,zIo),e(W,QIo),e(W,u2),e(u2,ime),e(ime,WIo),e(u2,HIo),e(u2,XG),e(XG,UIo),e(u2,JIo),e(W,YIo),e(W,_2),e(_2,dme),e(dme,KIo),e(_2,ZIo),e(_2,zG),e(zG,eqo),e(_2,oqo),e(W,rqo),e(W,b2),e(b2,cme),e(cme,tqo),e(b2,aqo),e(b2,QG),e(QG,nqo),e(b2,sqo),e(W,lqo),e(W,v2),e(v2,fme),e(fme,iqo),e(v2,dqo),e(v2,WG),e(WG,cqo),e(v2,fqo),e(W,mqo),e(W,F2),e(F2,mme),e(mme,gqo),e(F2,hqo),e(F2,HG),e(HG,pqo),e(F2,uqo),e(W,_qo),e(W,T2),e(T2,gme),e(gme,bqo),e(T2,vqo),e(T2,UG),e(UG,Fqo),e(T2,Tqo),e(W,Mqo),e(W,M2),e(M2,hme),e(hme,Eqo),e(M2,Cqo),e(M2,JG),e(JG,wqo),e(M2,Aqo),e(W,yqo),e(W,E2),e(E2,pme),e(pme,Lqo),e(E2,xqo),e(E2,YG),e(YG,$qo),e(E2,kqo),e(W,Sqo),e(W,C2),e(C2,ume),e(ume,Rqo),e(C2,Bqo),e(C2,KG),e(KG,Pqo),e(C2,Iqo),e(W,qqo),e(W,w2),e(w2,_me),e(_me,Nqo),e(w2,jqo),e(w2,ZG),e(ZG,Dqo),e(w2,Gqo),e(W,Oqo),e(W,A2),e(A2,bme),e(bme,Vqo),e(A2,Xqo),e(A2,eO),e(eO,zqo),e(A2,Qqo),e(ro,Wqo),e(ro,y2),e(y2,Hqo),e(y2,vme),e(vme,Uqo),e(y2,Jqo),e(y2,Fme),e(Fme,Yqo),e(ro,Kqo),M(L2,ro,null),b(f,CPe,_),b(f,Vi,_),e(Vi,x2),e(x2,Tme),M(UA,Tme,null),e(Vi,Zqo),e(Vi,Mme),e(Mme,eNo),b(f,wPe,_),b(f,qo,_),M(JA,qo,null),e(qo,oNo),e(qo,Xi),e(Xi,rNo),e(Xi,oO),e(oO,tNo),e(Xi,aNo),e(Xi,rO),e(rO,nNo),e(Xi,sNo),e(qo,lNo),e(qo,YA),e(YA,iNo),e(YA,Eme),e(Eme,dNo),e(YA,cNo),e(qo,fNo),e(qo,it),M(KA,it,null),e(it,mNo),e(it,Cme),e(Cme,gNo),e(it,hNo),e(it,zi),e(zi,pNo),e(zi,wme),e(wme,uNo),e(zi,_No),e(zi,tO),e(tO,bNo),e(zi,vNo),e(it,FNo),M($2,it,null),e(qo,TNo),e(qo,to),M(ZA,to,null),e(to,MNo),e(to,Ame),e(Ame,ENo),e(to,CNo),e(to,Sa),e(Sa,wNo),e(Sa,yme),e(yme,ANo),e(Sa,yNo),e(Sa,Lme),e(Lme,LNo),e(Sa,xNo),e(Sa,xme),e(xme,$No),e(Sa,kNo),e(to,SNo),e(to,G),e(G,k2),e(k2,$me),e($me,RNo),e(k2,BNo),e(k2,aO),e(aO,PNo),e(k2,INo),e(G,qNo),e(G,S2),e(S2,kme),e(kme,NNo),e(S2,jNo),e(S2,nO),e(nO,DNo),e(S2,GNo),e(G,ONo),e(G,R2),e(R2,Sme),e(Sme,VNo),e(R2,XNo),e(R2,sO),e(sO,zNo),e(R2,QNo),e(G,WNo),e(G,B2),e(B2,Rme),e(Rme,HNo),e(B2,UNo),e(B2,lO),e(lO,JNo),e(B2,YNo),e(G,KNo),e(G,P2),e(P2,Bme),e(Bme,ZNo),e(P2,ejo),e(P2,iO),e(iO,ojo),e(P2,rjo),e(G,tjo),e(G,I2),e(I2,Pme),e(Pme,ajo),e(I2,njo),e(I2,dO),e(dO,sjo),e(I2,ljo),e(G,ijo),e(G,q2),e(q2,Ime),e(Ime,djo),e(q2,cjo),e(q2,cO),e(cO,fjo),e(q2,mjo),e(G,gjo),e(G,N2),e(N2,qme),e(qme,hjo),e(N2,pjo),e(N2,fO),e(fO,ujo),e(N2,_jo),e(G,bjo),e(G,j2),e(j2,Nme),e(Nme,vjo),e(j2,Fjo),e(j2,mO),e(mO,Tjo),e(j2,Mjo),e(G,Ejo),e(G,D2),e(D2,jme),e(jme,Cjo),e(D2,wjo),e(D2,gO),e(gO,Ajo),e(D2,yjo),e(G,Ljo),e(G,G2),e(G2,Dme),e(Dme,xjo),e(G2,$jo),e(G2,hO),e(hO,kjo),e(G2,Sjo),e(G,Rjo),e(G,O2),e(O2,Gme),e(Gme,Bjo),e(O2,Pjo),e(O2,pO),e(pO,Ijo),e(O2,qjo),e(G,Njo),e(G,V2),e(V2,Ome),e(Ome,jjo),e(V2,Djo),e(V2,uO),e(uO,Gjo),e(V2,Ojo),e(G,Vjo),e(G,X2),e(X2,Vme),e(Vme,Xjo),e(X2,zjo),e(X2,_O),e(_O,Qjo),e(X2,Wjo),e(G,Hjo),e(G,z2),e(z2,Xme),e(Xme,Ujo),e(z2,Jjo),e(z2,bO),e(bO,Yjo),e(z2,Kjo),e(G,Zjo),e(G,Q2),e(Q2,zme),e(zme,eDo),e(Q2,oDo),e(Q2,vO),e(vO,rDo),e(Q2,tDo),e(G,aDo),e(G,W2),e(W2,Qme),e(Qme,nDo),e(W2,sDo),e(W2,FO),e(FO,lDo),e(W2,iDo),e(G,dDo),e(G,H2),e(H2,Wme),e(Wme,cDo),e(H2,fDo),e(H2,TO),e(TO,mDo),e(H2,gDo),e(G,hDo),e(G,U2),e(U2,Hme),e(Hme,pDo),e(U2,uDo),e(U2,MO),e(MO,_Do),e(U2,bDo),e(G,vDo),e(G,J2),e(J2,Ume),e(Ume,FDo),e(J2,TDo),e(J2,EO),e(EO,MDo),e(J2,EDo),e(G,CDo),e(G,Y2),e(Y2,Jme),e(Jme,wDo),e(Y2,ADo),e(Y2,CO),e(CO,yDo),e(Y2,LDo),e(G,xDo),e(G,K2),e(K2,Yme),e(Yme,$Do),e(K2,kDo),e(K2,wO),e(wO,SDo),e(K2,RDo),e(G,BDo),e(G,Z2),e(Z2,Kme),e(Kme,PDo),e(Z2,IDo),e(Z2,AO),e(AO,qDo),e(Z2,NDo),e(G,jDo),e(G,ev),e(ev,Zme),e(Zme,DDo),e(ev,GDo),e(ev,yO),e(yO,ODo),e(ev,VDo),e(G,XDo),e(G,ov),e(ov,ege),e(ege,zDo),e(ov,QDo),e(ov,LO),e(LO,WDo),e(ov,HDo),e(G,UDo),e(G,rv),e(rv,oge),e(oge,JDo),e(rv,YDo),e(rv,xO),e(xO,KDo),e(rv,ZDo),e(G,eGo),e(G,tv),e(tv,rge),e(rge,oGo),e(tv,rGo),e(tv,$O),e($O,tGo),e(tv,aGo),e(G,nGo),e(G,av),e(av,tge),e(tge,sGo),e(av,lGo),e(av,kO),e(kO,iGo),e(av,dGo),e(G,cGo),e(G,nv),e(nv,age),e(age,fGo),e(nv,mGo),e(nv,SO),e(SO,gGo),e(nv,hGo),e(G,pGo),e(G,sv),e(sv,nge),e(nge,uGo),e(sv,_Go),e(sv,RO),e(RO,bGo),e(sv,vGo),e(G,FGo),e(G,lv),e(lv,sge),e(sge,TGo),e(lv,MGo),e(lv,BO),e(BO,EGo),e(lv,CGo),e(G,wGo),e(G,iv),e(iv,lge),e(lge,AGo),e(iv,yGo),e(iv,PO),e(PO,LGo),e(iv,xGo),e(G,$Go),e(G,dv),e(dv,ige),e(ige,kGo),e(dv,SGo),e(dv,IO),e(IO,RGo),e(dv,BGo),e(G,PGo),e(G,cv),e(cv,dge),e(dge,IGo),e(cv,qGo),e(cv,qO),e(qO,NGo),e(cv,jGo),e(G,DGo),e(G,fv),e(fv,cge),e(cge,GGo),e(fv,OGo),e(fv,NO),e(NO,VGo),e(fv,XGo),e(G,zGo),e(G,mv),e(mv,fge),e(fge,QGo),e(mv,WGo),e(mv,jO),e(jO,HGo),e(mv,UGo),e(G,JGo),e(G,gv),e(gv,mge),e(mge,YGo),e(gv,KGo),e(gv,DO),e(DO,ZGo),e(gv,eOo),e(G,oOo),e(G,hv),e(hv,gge),e(gge,rOo),e(hv,tOo),e(hv,GO),e(GO,aOo),e(hv,nOo),e(G,sOo),e(G,pv),e(pv,hge),e(hge,lOo),e(pv,iOo),e(pv,OO),e(OO,dOo),e(pv,cOo),e(G,fOo),e(G,uv),e(uv,pge),e(pge,mOo),e(uv,gOo),e(uv,VO),e(VO,hOo),e(uv,pOo),e(to,uOo),e(to,_v),e(_v,_Oo),e(_v,uge),e(uge,bOo),e(_v,vOo),e(_v,_ge),e(_ge,FOo),e(to,TOo),M(bv,to,null),b(f,APe,_),b(f,Qi,_),e(Qi,vv),e(vv,bge),M(ey,bge,null),e(Qi,MOo),e(Qi,vge),e(vge,EOo),b(f,yPe,_),b(f,No,_),M(oy,No,null),e(No,COo),e(No,Wi),e(Wi,wOo),e(Wi,XO),e(XO,AOo),e(Wi,yOo),e(Wi,zO),e(zO,LOo),e(Wi,xOo),e(No,$Oo),e(No,ry),e(ry,kOo),e(ry,Fge),e(Fge,SOo),e(ry,ROo),e(No,BOo),e(No,dt),M(ty,dt,null),e(dt,POo),e(dt,Tge),e(Tge,IOo),e(dt,qOo),e(dt,Hi),e(Hi,NOo),e(Hi,Mge),e(Mge,jOo),e(Hi,DOo),e(Hi,QO),e(QO,GOo),e(Hi,OOo),e(dt,VOo),M(Fv,dt,null),e(No,XOo),e(No,ao),M(ay,ao,null),e(ao,zOo),e(ao,Ege),e(Ege,QOo),e(ao,WOo),e(ao,Ra),e(Ra,HOo),e(Ra,Cge),e(Cge,UOo),e(Ra,JOo),e(Ra,wge),e(wge,YOo),e(Ra,KOo),e(Ra,Age),e(Age,ZOo),e(Ra,eVo),e(ao,oVo),e(ao,yge),e(yge,Tv),e(Tv,Lge),e(Lge,rVo),e(Tv,tVo),e(Tv,WO),e(WO,aVo),e(Tv,nVo),e(ao,sVo),e(ao,Mv),e(Mv,lVo),e(Mv,xge),e(xge,iVo),e(Mv,dVo),e(Mv,$ge),e($ge,cVo),e(ao,fVo),M(Ev,ao,null),b(f,LPe,_),b(f,Ui,_),e(Ui,Cv),e(Cv,kge),M(ny,kge,null),e(Ui,mVo),e(Ui,Sge),e(Sge,gVo),b(f,xPe,_),b(f,jo,_),M(sy,jo,null),e(jo,hVo),e(jo,Ji),e(Ji,pVo),e(Ji,HO),e(HO,uVo),e(Ji,_Vo),e(Ji,UO),e(UO,bVo),e(Ji,vVo),e(jo,FVo),e(jo,ly),e(ly,TVo),e(ly,Rge),e(Rge,MVo),e(ly,EVo),e(jo,CVo),e(jo,ct),M(iy,ct,null),e(ct,wVo),e(ct,Bge),e(Bge,AVo),e(ct,yVo),e(ct,Yi),e(Yi,LVo),e(Yi,Pge),e(Pge,xVo),e(Yi,$Vo),e(Yi,JO),e(JO,kVo),e(Yi,SVo),e(ct,RVo),M(wv,ct,null),e(jo,BVo),e(jo,no),M(dy,no,null),e(no,PVo),e(no,Ige),e(Ige,IVo),e(no,qVo),e(no,Ba),e(Ba,NVo),e(Ba,qge),e(qge,jVo),e(Ba,DVo),e(Ba,Nge),e(Nge,GVo),e(Ba,OVo),e(Ba,jge),e(jge,VVo),e(Ba,XVo),e(no,zVo),e(no,Fe),e(Fe,Av),e(Av,Dge),e(Dge,QVo),e(Av,WVo),e(Av,YO),e(YO,HVo),e(Av,UVo),e(Fe,JVo),e(Fe,yv),e(yv,Gge),e(Gge,YVo),e(yv,KVo),e(yv,KO),e(KO,ZVo),e(yv,eXo),e(Fe,oXo),e(Fe,Lv),e(Lv,Oge),e(Oge,rXo),e(Lv,tXo),e(Lv,ZO),e(ZO,aXo),e(Lv,nXo),e(Fe,sXo),e(Fe,$s),e($s,Vge),e(Vge,lXo),e($s,iXo),e($s,eV),e(eV,dXo),e($s,cXo),e($s,oV),e(oV,fXo),e($s,mXo),e(Fe,gXo),e(Fe,xv),e(xv,Xge),e(Xge,hXo),e(xv,pXo),e(xv,rV),e(rV,uXo),e(xv,_Xo),e(Fe,bXo),e(Fe,ft),e(ft,zge),e(zge,vXo),e(ft,FXo),e(ft,tV),e(tV,TXo),e(ft,MXo),e(ft,aV),e(aV,EXo),e(ft,CXo),e(ft,nV),e(nV,wXo),e(ft,AXo),e(Fe,yXo),e(Fe,$v),e($v,Qge),e(Qge,LXo),e($v,xXo),e($v,sV),e(sV,$Xo),e($v,kXo),e(Fe,SXo),e(Fe,kv),e(kv,Wge),e(Wge,RXo),e(kv,BXo),e(kv,lV),e(lV,PXo),e(kv,IXo),e(Fe,qXo),e(Fe,Sv),e(Sv,Hge),e(Hge,NXo),e(Sv,jXo),e(Sv,iV),e(iV,DXo),e(Sv,GXo),e(Fe,OXo),e(Fe,Rv),e(Rv,Uge),e(Uge,VXo),e(Rv,XXo),e(Rv,dV),e(dV,zXo),e(Rv,QXo),e(Fe,WXo),e(Fe,Bv),e(Bv,Jge),e(Jge,HXo),e(Bv,UXo),e(Bv,cV),e(cV,JXo),e(Bv,YXo),e(Fe,KXo),e(Fe,Pv),e(Pv,Yge),e(Yge,ZXo),e(Pv,ezo),e(Pv,fV),e(fV,ozo),e(Pv,rzo),e(Fe,tzo),e(Fe,Iv),e(Iv,Kge),e(Kge,azo),e(Iv,nzo),e(Iv,mV),e(mV,szo),e(Iv,lzo),e(no,izo),e(no,qv),e(qv,dzo),e(qv,Zge),e(Zge,czo),e(qv,fzo),e(qv,ehe),e(ehe,mzo),e(no,gzo),M(Nv,no,null),b(f,$Pe,_),b(f,Ki,_),e(Ki,jv),e(jv,ohe),M(cy,ohe,null),e(Ki,hzo),e(Ki,rhe),e(rhe,pzo),b(f,kPe,_),b(f,Do,_),M(fy,Do,null),e(Do,uzo),e(Do,Zi),e(Zi,_zo),e(Zi,gV),e(gV,bzo),e(Zi,vzo),e(Zi,hV),e(hV,Fzo),e(Zi,Tzo),e(Do,Mzo),e(Do,my),e(my,Ezo),e(my,the),e(the,Czo),e(my,wzo),e(Do,Azo),e(Do,mt),M(gy,mt,null),e(mt,yzo),e(mt,ahe),e(ahe,Lzo),e(mt,xzo),e(mt,ed),e(ed,$zo),e(ed,nhe),e(nhe,kzo),e(ed,Szo),e(ed,pV),e(pV,Rzo),e(ed,Bzo),e(mt,Pzo),M(Dv,mt,null),e(Do,Izo),e(Do,so),M(hy,so,null),e(so,qzo),e(so,she),e(she,Nzo),e(so,jzo),e(so,Pa),e(Pa,Dzo),e(Pa,lhe),e(lhe,Gzo),e(Pa,Ozo),e(Pa,ihe),e(ihe,Vzo),e(Pa,Xzo),e(Pa,dhe),e(dhe,zzo),e(Pa,Qzo),e(so,Wzo),e(so,che),e(che,Gv),e(Gv,fhe),e(fhe,Hzo),e(Gv,Uzo),e(Gv,uV),e(uV,Jzo),e(Gv,Yzo),e(so,Kzo),e(so,Ov),e(Ov,Zzo),e(Ov,mhe),e(mhe,eQo),e(Ov,oQo),e(Ov,ghe),e(ghe,rQo),e(so,tQo),M(Vv,so,null),b(f,SPe,_),b(f,od,_),e(od,Xv),e(Xv,hhe),M(py,hhe,null),e(od,aQo),e(od,phe),e(phe,nQo),b(f,RPe,_),b(f,Go,_),M(uy,Go,null),e(Go,sQo),e(Go,rd),e(rd,lQo),e(rd,_V),e(_V,iQo),e(rd,dQo),e(rd,bV),e(bV,cQo),e(rd,fQo),e(Go,mQo),e(Go,_y),e(_y,gQo),e(_y,uhe),e(uhe,hQo),e(_y,pQo),e(Go,uQo),e(Go,gt),M(by,gt,null),e(gt,_Qo),e(gt,_he),e(_he,bQo),e(gt,vQo),e(gt,td),e(td,FQo),e(td,bhe),e(bhe,TQo),e(td,MQo),e(td,vV),e(vV,EQo),e(td,CQo),e(gt,wQo),M(zv,gt,null),e(Go,AQo),e(Go,lo),M(vy,lo,null),e(lo,yQo),e(lo,vhe),e(vhe,LQo),e(lo,xQo),e(lo,Ia),e(Ia,$Qo),e(Ia,Fhe),e(Fhe,kQo),e(Ia,SQo),e(Ia,The),e(The,RQo),e(Ia,BQo),e(Ia,Mhe),e(Mhe,PQo),e(Ia,IQo),e(lo,qQo),e(lo,Ne),e(Ne,Qv),e(Qv,Ehe),e(Ehe,NQo),e(Qv,jQo),e(Qv,FV),e(FV,DQo),e(Qv,GQo),e(Ne,OQo),e(Ne,Wv),e(Wv,Che),e(Che,VQo),e(Wv,XQo),e(Wv,TV),e(TV,zQo),e(Wv,QQo),e(Ne,WQo),e(Ne,Hv),e(Hv,whe),e(whe,HQo),e(Hv,UQo),e(Hv,MV),e(MV,JQo),e(Hv,YQo),e(Ne,KQo),e(Ne,Uv),e(Uv,Ahe),e(Ahe,ZQo),e(Uv,eWo),e(Uv,EV),e(EV,oWo),e(Uv,rWo),e(Ne,tWo),e(Ne,Jv),e(Jv,yhe),e(yhe,aWo),e(Jv,nWo),e(Jv,CV),e(CV,sWo),e(Jv,lWo),e(Ne,iWo),e(Ne,Yv),e(Yv,Lhe),e(Lhe,dWo),e(Yv,cWo),e(Yv,wV),e(wV,fWo),e(Yv,mWo),e(Ne,gWo),e(Ne,Kv),e(Kv,xhe),e(xhe,hWo),e(Kv,pWo),e(Kv,AV),e(AV,uWo),e(Kv,_Wo),e(Ne,bWo),e(Ne,Zv),e(Zv,$he),e($he,vWo),e(Zv,FWo),e(Zv,yV),e(yV,TWo),e(Zv,MWo),e(lo,EWo),e(lo,eF),e(eF,CWo),e(eF,khe),e(khe,wWo),e(eF,AWo),e(eF,She),e(She,yWo),e(lo,LWo),M(oF,lo,null),b(f,BPe,_),b(f,ad,_),e(ad,rF),e(rF,Rhe),M(Fy,Rhe,null),e(ad,xWo),e(ad,Bhe),e(Bhe,$Wo),b(f,PPe,_),b(f,Oo,_),M(Ty,Oo,null),e(Oo,kWo),e(Oo,nd),e(nd,SWo),e(nd,LV),e(LV,RWo),e(nd,BWo),e(nd,xV),e(xV,PWo),e(nd,IWo),e(Oo,qWo),e(Oo,My),e(My,NWo),e(My,Phe),e(Phe,jWo),e(My,DWo),e(Oo,GWo),e(Oo,ht),M(Ey,ht,null),e(ht,OWo),e(ht,Ihe),e(Ihe,VWo),e(ht,XWo),e(ht,sd),e(sd,zWo),e(sd,qhe),e(qhe,QWo),e(sd,WWo),e(sd,$V),e($V,HWo),e(sd,UWo),e(ht,JWo),M(tF,ht,null),e(Oo,YWo),e(Oo,io),M(Cy,io,null),e(io,KWo),e(io,Nhe),e(Nhe,ZWo),e(io,eHo),e(io,qa),e(qa,oHo),e(qa,jhe),e(jhe,rHo),e(qa,tHo),e(qa,Dhe),e(Dhe,aHo),e(qa,nHo),e(qa,Ghe),e(Ghe,sHo),e(qa,lHo),e(io,iHo),e(io,Na),e(Na,aF),e(aF,Ohe),e(Ohe,dHo),e(aF,cHo),e(aF,kV),e(kV,fHo),e(aF,mHo),e(Na,gHo),e(Na,nF),e(nF,Vhe),e(Vhe,hHo),e(nF,pHo),e(nF,SV),e(SV,uHo),e(nF,_Ho),e(Na,bHo),e(Na,sF),e(sF,Xhe),e(Xhe,vHo),e(sF,FHo),e(sF,RV),e(RV,THo),e(sF,MHo),e(Na,EHo),e(Na,lF),e(lF,zhe),e(zhe,CHo),e(lF,wHo),e(lF,BV),e(BV,AHo),e(lF,yHo),e(io,LHo),e(io,iF),e(iF,xHo),e(iF,Qhe),e(Qhe,$Ho),e(iF,kHo),e(iF,Whe),e(Whe,SHo),e(io,RHo),M(dF,io,null),b(f,IPe,_),b(f,ld,_),e(ld,cF),e(cF,Hhe),M(wy,Hhe,null),e(ld,BHo),e(ld,Uhe),e(Uhe,PHo),b(f,qPe,_),b(f,Vo,_),M(Ay,Vo,null),e(Vo,IHo),e(Vo,id),e(id,qHo),e(id,PV),e(PV,NHo),e(id,jHo),e(id,IV),e(IV,DHo),e(id,GHo),e(Vo,OHo),e(Vo,yy),e(yy,VHo),e(yy,Jhe),e(Jhe,XHo),e(yy,zHo),e(Vo,QHo),e(Vo,pt),M(Ly,pt,null),e(pt,WHo),e(pt,Yhe),e(Yhe,HHo),e(pt,UHo),e(pt,dd),e(dd,JHo),e(dd,Khe),e(Khe,YHo),e(dd,KHo),e(dd,qV),e(qV,ZHo),e(dd,eUo),e(pt,oUo),M(fF,pt,null),e(Vo,rUo),e(Vo,co),M(xy,co,null),e(co,tUo),e(co,Zhe),e(Zhe,aUo),e(co,nUo),e(co,ja),e(ja,sUo),e(ja,epe),e(epe,lUo),e(ja,iUo),e(ja,ope),e(ope,dUo),e(ja,cUo),e(ja,rpe),e(rpe,fUo),e(ja,mUo),e(co,gUo),e(co,je),e(je,mF),e(mF,tpe),e(tpe,hUo),e(mF,pUo),e(mF,NV),e(NV,uUo),e(mF,_Uo),e(je,bUo),e(je,gF),e(gF,ape),e(ape,vUo),e(gF,FUo),e(gF,jV),e(jV,TUo),e(gF,MUo),e(je,EUo),e(je,hF),e(hF,npe),e(npe,CUo),e(hF,wUo),e(hF,DV),e(DV,AUo),e(hF,yUo),e(je,LUo),e(je,pF),e(pF,spe),e(spe,xUo),e(pF,$Uo),e(pF,GV),e(GV,kUo),e(pF,SUo),e(je,RUo),e(je,uF),e(uF,lpe),e(lpe,BUo),e(uF,PUo),e(uF,OV),e(OV,IUo),e(uF,qUo),e(je,NUo),e(je,_F),e(_F,ipe),e(ipe,jUo),e(_F,DUo),e(_F,VV),e(VV,GUo),e(_F,OUo),e(je,VUo),e(je,bF),e(bF,dpe),e(dpe,XUo),e(bF,zUo),e(bF,XV),e(XV,QUo),e(bF,WUo),e(je,HUo),e(je,vF),e(vF,cpe),e(cpe,UUo),e(vF,JUo),e(vF,zV),e(zV,YUo),e(vF,KUo),e(co,ZUo),e(co,FF),e(FF,eJo),e(FF,fpe),e(fpe,oJo),e(FF,rJo),e(FF,mpe),e(mpe,tJo),e(co,aJo),M(TF,co,null),b(f,NPe,_),b(f,cd,_),e(cd,MF),e(MF,gpe),M($y,gpe,null),e(cd,nJo),e(cd,hpe),e(hpe,sJo),b(f,jPe,_),b(f,Xo,_),M(ky,Xo,null),e(Xo,lJo),e(Xo,fd),e(fd,iJo),e(fd,QV),e(QV,dJo),e(fd,cJo),e(fd,WV),e(WV,fJo),e(fd,mJo),e(Xo,gJo),e(Xo,Sy),e(Sy,hJo),e(Sy,ppe),e(ppe,pJo),e(Sy,uJo),e(Xo,_Jo),e(Xo,ut),M(Ry,ut,null),e(ut,bJo),e(ut,upe),e(upe,vJo),e(ut,FJo),e(ut,md),e(md,TJo),e(md,_pe),e(_pe,MJo),e(md,EJo),e(md,HV),e(HV,CJo),e(md,wJo),e(ut,AJo),M(EF,ut,null),e(Xo,yJo),e(Xo,fo),M(By,fo,null),e(fo,LJo),e(fo,bpe),e(bpe,xJo),e(fo,$Jo),e(fo,Da),e(Da,kJo),e(Da,vpe),e(vpe,SJo),e(Da,RJo),e(Da,Fpe),e(Fpe,BJo),e(Da,PJo),e(Da,Tpe),e(Tpe,IJo),e(Da,qJo),e(fo,NJo),e(fo,Py),e(Py,CF),e(CF,Mpe),e(Mpe,jJo),e(CF,DJo),e(CF,UV),e(UV,GJo),e(CF,OJo),e(Py,VJo),e(Py,wF),e(wF,Epe),e(Epe,XJo),e(wF,zJo),e(wF,JV),e(JV,QJo),e(wF,WJo),e(fo,HJo),e(fo,AF),e(AF,UJo),e(AF,Cpe),e(Cpe,JJo),e(AF,YJo),e(AF,wpe),e(wpe,KJo),e(fo,ZJo),M(yF,fo,null),b(f,DPe,_),b(f,gd,_),e(gd,LF),e(LF,Ape),M(Iy,Ape,null),e(gd,eYo),e(gd,ype),e(ype,oYo),b(f,GPe,_),b(f,zo,_),M(qy,zo,null),e(zo,rYo),e(zo,hd),e(hd,tYo),e(hd,YV),e(YV,aYo),e(hd,nYo),e(hd,KV),e(KV,sYo),e(hd,lYo),e(zo,iYo),e(zo,Ny),e(Ny,dYo),e(Ny,Lpe),e(Lpe,cYo),e(Ny,fYo),e(zo,mYo),e(zo,_t),M(jy,_t,null),e(_t,gYo),e(_t,xpe),e(xpe,hYo),e(_t,pYo),e(_t,pd),e(pd,uYo),e(pd,$pe),e($pe,_Yo),e(pd,bYo),e(pd,ZV),e(ZV,vYo),e(pd,FYo),e(_t,TYo),M(xF,_t,null),e(zo,MYo),e(zo,mo),M(Dy,mo,null),e(mo,EYo),e(mo,kpe),e(kpe,CYo),e(mo,wYo),e(mo,Ga),e(Ga,AYo),e(Ga,Spe),e(Spe,yYo),e(Ga,LYo),e(Ga,Rpe),e(Rpe,xYo),e(Ga,$Yo),e(Ga,Bpe),e(Bpe,kYo),e(Ga,SYo),e(mo,RYo),e(mo,Oa),e(Oa,$F),e($F,Ppe),e(Ppe,BYo),e($F,PYo),e($F,eX),e(eX,IYo),e($F,qYo),e(Oa,NYo),e(Oa,kF),e(kF,Ipe),e(Ipe,jYo),e(kF,DYo),e(kF,oX),e(oX,GYo),e(kF,OYo),e(Oa,VYo),e(Oa,SF),e(SF,qpe),e(qpe,XYo),e(SF,zYo),e(SF,rX),e(rX,QYo),e(SF,WYo),e(Oa,HYo),e(Oa,RF),e(RF,Npe),e(Npe,UYo),e(RF,JYo),e(RF,tX),e(tX,YYo),e(RF,KYo),e(mo,ZYo),e(mo,BF),e(BF,eKo),e(BF,jpe),e(jpe,oKo),e(BF,rKo),e(BF,Dpe),e(Dpe,tKo),e(mo,aKo),M(PF,mo,null),b(f,OPe,_),b(f,ud,_),e(ud,IF),e(IF,Gpe),M(Gy,Gpe,null),e(ud,nKo),e(ud,Ope),e(Ope,sKo),b(f,VPe,_),b(f,Qo,_),M(Oy,Qo,null),e(Qo,lKo),e(Qo,_d),e(_d,iKo),e(_d,aX),e(aX,dKo),e(_d,cKo),e(_d,nX),e(nX,fKo),e(_d,mKo),e(Qo,gKo),e(Qo,Vy),e(Vy,hKo),e(Vy,Vpe),e(Vpe,pKo),e(Vy,uKo),e(Qo,_Ko),e(Qo,bt),M(Xy,bt,null),e(bt,bKo),e(bt,Xpe),e(Xpe,vKo),e(bt,FKo),e(bt,bd),e(bd,TKo),e(bd,zpe),e(zpe,MKo),e(bd,EKo),e(bd,sX),e(sX,CKo),e(bd,wKo),e(bt,AKo),M(qF,bt,null),e(Qo,yKo),e(Qo,go),M(zy,go,null),e(go,LKo),e(go,Qpe),e(Qpe,xKo),e(go,$Ko),e(go,Va),e(Va,kKo),e(Va,Wpe),e(Wpe,SKo),e(Va,RKo),e(Va,Hpe),e(Hpe,BKo),e(Va,PKo),e(Va,Upe),e(Upe,IKo),e(Va,qKo),e(go,NKo),e(go,vd),e(vd,NF),e(NF,Jpe),e(Jpe,jKo),e(NF,DKo),e(NF,lX),e(lX,GKo),e(NF,OKo),e(vd,VKo),e(vd,jF),e(jF,Ype),e(Ype,XKo),e(jF,zKo),e(jF,iX),e(iX,QKo),e(jF,WKo),e(vd,HKo),e(vd,DF),e(DF,Kpe),e(Kpe,UKo),e(DF,JKo),e(DF,dX),e(dX,YKo),e(DF,KKo),e(go,ZKo),e(go,GF),e(GF,eZo),e(GF,Zpe),e(Zpe,oZo),e(GF,rZo),e(GF,eue),e(eue,tZo),e(go,aZo),M(OF,go,null),b(f,XPe,_),b(f,Fd,_),e(Fd,VF),e(VF,oue),M(Qy,oue,null),e(Fd,nZo),e(Fd,rue),e(rue,sZo),b(f,zPe,_),b(f,Wo,_),M(Wy,Wo,null),e(Wo,lZo),e(Wo,Td),e(Td,iZo),e(Td,cX),e(cX,dZo),e(Td,cZo),e(Td,fX),e(fX,fZo),e(Td,mZo),e(Wo,gZo),e(Wo,Hy),e(Hy,hZo),e(Hy,tue),e(tue,pZo),e(Hy,uZo),e(Wo,_Zo),e(Wo,vt),M(Uy,vt,null),e(vt,bZo),e(vt,aue),e(aue,vZo),e(vt,FZo),e(vt,Md),e(Md,TZo),e(Md,nue),e(nue,MZo),e(Md,EZo),e(Md,mX),e(mX,CZo),e(Md,wZo),e(vt,AZo),M(XF,vt,null),e(Wo,yZo),e(Wo,ho),M(Jy,ho,null),e(ho,LZo),e(ho,sue),e(sue,xZo),e(ho,$Zo),e(ho,Xa),e(Xa,kZo),e(Xa,lue),e(lue,SZo),e(Xa,RZo),e(Xa,iue),e(iue,BZo),e(Xa,PZo),e(Xa,due),e(due,IZo),e(Xa,qZo),e(ho,NZo),e(ho,Yy),e(Yy,zF),e(zF,cue),e(cue,jZo),e(zF,DZo),e(zF,gX),e(gX,GZo),e(zF,OZo),e(Yy,VZo),e(Yy,QF),e(QF,fue),e(fue,XZo),e(QF,zZo),e(QF,hX),e(hX,QZo),e(QF,WZo),e(ho,HZo),e(ho,WF),e(WF,UZo),e(WF,mue),e(mue,JZo),e(WF,YZo),e(WF,gue),e(gue,KZo),e(ho,ZZo),M(HF,ho,null),b(f,QPe,_),b(f,Ed,_),e(Ed,UF),e(UF,hue),M(Ky,hue,null),e(Ed,eer),e(Ed,pue),e(pue,oer),b(f,WPe,_),b(f,Ho,_),M(Zy,Ho,null),e(Ho,rer),e(Ho,Cd),e(Cd,ter),e(Cd,pX),e(pX,aer),e(Cd,ner),e(Cd,uX),e(uX,ser),e(Cd,ler),e(Ho,ier),e(Ho,eL),e(eL,der),e(eL,uue),e(uue,cer),e(eL,fer),e(Ho,mer),e(Ho,Ft),M(oL,Ft,null),e(Ft,ger),e(Ft,_ue),e(_ue,her),e(Ft,per),e(Ft,wd),e(wd,uer),e(wd,bue),e(bue,_er),e(wd,ber),e(wd,_X),e(_X,ver),e(wd,Fer),e(Ft,Ter),M(JF,Ft,null),e(Ho,Mer),e(Ho,po),M(rL,po,null),e(po,Eer),e(po,vue),e(vue,Cer),e(po,wer),e(po,za),e(za,Aer),e(za,Fue),e(Fue,yer),e(za,Ler),e(za,Tue),e(Tue,xer),e(za,$er),e(za,Mue),e(Mue,ker),e(za,Ser),e(po,Rer),e(po,Eue),e(Eue,YF),e(YF,Cue),e(Cue,Ber),e(YF,Per),e(YF,bX),e(bX,Ier),e(YF,qer),e(po,Ner),e(po,KF),e(KF,jer),e(KF,wue),e(wue,Der),e(KF,Ger),e(KF,Aue),e(Aue,Oer),e(po,Ver),M(ZF,po,null),b(f,HPe,_),b(f,Ad,_),e(Ad,e6),e(e6,yue),M(tL,yue,null),e(Ad,Xer),e(Ad,Lue),e(Lue,zer),b(f,UPe,_),b(f,Uo,_),M(aL,Uo,null),e(Uo,Qer),e(Uo,yd),e(yd,Wer),e(yd,vX),e(vX,Her),e(yd,Uer),e(yd,FX),e(FX,Jer),e(yd,Yer),e(Uo,Ker),e(Uo,nL),e(nL,Zer),e(nL,xue),e(xue,eor),e(nL,oor),e(Uo,ror),e(Uo,Tt),M(sL,Tt,null),e(Tt,tor),e(Tt,$ue),e($ue,aor),e(Tt,nor),e(Tt,Ld),e(Ld,sor),e(Ld,kue),e(kue,lor),e(Ld,ior),e(Ld,TX),e(TX,dor),e(Ld,cor),e(Tt,mor),M(o6,Tt,null),e(Uo,gor),e(Uo,uo),M(lL,uo,null),e(uo,hor),e(uo,Sue),e(Sue,por),e(uo,uor),e(uo,Qa),e(Qa,_or),e(Qa,Rue),e(Rue,bor),e(Qa,vor),e(Qa,Bue),e(Bue,For),e(Qa,Tor),e(Qa,Pue),e(Pue,Mor),e(Qa,Eor),e(uo,Cor),e(uo,Wa),e(Wa,r6),e(r6,Iue),e(Iue,wor),e(r6,Aor),e(r6,MX),e(MX,yor),e(r6,Lor),e(Wa,xor),e(Wa,t6),e(t6,que),e(que,$or),e(t6,kor),e(t6,EX),e(EX,Sor),e(t6,Ror),e(Wa,Bor),e(Wa,a6),e(a6,Nue),e(Nue,Por),e(a6,Ior),e(a6,CX),e(CX,qor),e(a6,Nor),e(Wa,jor),e(Wa,n6),e(n6,jue),e(jue,Dor),e(n6,Gor),e(n6,wX),e(wX,Oor),e(n6,Vor),e(uo,Xor),e(uo,s6),e(s6,zor),e(s6,Due),e(Due,Qor),e(s6,Wor),e(s6,Gue),e(Gue,Hor),e(uo,Uor),M(l6,uo,null),b(f,JPe,_),b(f,xd,_),e(xd,i6),e(i6,Oue),M(iL,Oue,null),e(xd,Jor),e(xd,Vue),e(Vue,Yor),b(f,YPe,_),b(f,Jo,_),M(dL,Jo,null),e(Jo,Kor),e(Jo,$d),e($d,Zor),e($d,AX),e(AX,err),e($d,orr),e($d,yX),e(yX,rrr),e($d,trr),e(Jo,arr),e(Jo,cL),e(cL,nrr),e(cL,Xue),e(Xue,srr),e(cL,lrr),e(Jo,irr),e(Jo,Mt),M(fL,Mt,null),e(Mt,drr),e(Mt,zue),e(zue,crr),e(Mt,frr),e(Mt,kd),e(kd,mrr),e(kd,Que),e(Que,grr),e(kd,hrr),e(kd,LX),e(LX,prr),e(kd,urr),e(Mt,_rr),M(d6,Mt,null),e(Jo,brr),e(Jo,_o),M(mL,_o,null),e(_o,vrr),e(_o,Wue),e(Wue,Frr),e(_o,Trr),e(_o,Ha),e(Ha,Mrr),e(Ha,Hue),e(Hue,Err),e(Ha,Crr),e(Ha,Uue),e(Uue,wrr),e(Ha,Arr),e(Ha,Jue),e(Jue,yrr),e(Ha,Lrr),e(_o,xrr),e(_o,Yue),e(Yue,c6),e(c6,Kue),e(Kue,$rr),e(c6,krr),e(c6,xX),e(xX,Srr),e(c6,Rrr),e(_o,Brr),e(_o,f6),e(f6,Prr),e(f6,Zue),e(Zue,Irr),e(f6,qrr),e(f6,e_e),e(e_e,Nrr),e(_o,jrr),M(m6,_o,null),b(f,KPe,_),b(f,Sd,_),e(Sd,g6),e(g6,o_e),M(gL,o_e,null),e(Sd,Drr),e(Sd,r_e),e(r_e,Grr),b(f,ZPe,_),b(f,Yo,_),M(hL,Yo,null),e(Yo,Orr),e(Yo,Rd),e(Rd,Vrr),e(Rd,$X),e($X,Xrr),e(Rd,zrr),e(Rd,kX),e(kX,Qrr),e(Rd,Wrr),e(Yo,Hrr),e(Yo,pL),e(pL,Urr),e(pL,t_e),e(t_e,Jrr),e(pL,Yrr),e(Yo,Krr),e(Yo,Et),M(uL,Et,null),e(Et,Zrr),e(Et,a_e),e(a_e,etr),e(Et,otr),e(Et,Bd),e(Bd,rtr),e(Bd,n_e),e(n_e,ttr),e(Bd,atr),e(Bd,SX),e(SX,ntr),e(Bd,str),e(Et,ltr),M(h6,Et,null),e(Yo,itr),e(Yo,Cr),M(_L,Cr,null),e(Cr,dtr),e(Cr,s_e),e(s_e,ctr),e(Cr,ftr),e(Cr,Ua),e(Ua,mtr),e(Ua,l_e),e(l_e,gtr),e(Ua,htr),e(Ua,i_e),e(i_e,ptr),e(Ua,utr),e(Ua,d_e),e(d_e,_tr),e(Ua,btr),e(Cr,vtr),e(Cr,j),e(j,p6),e(p6,c_e),e(c_e,Ftr),e(p6,Ttr),e(p6,RX),e(RX,Mtr),e(p6,Etr),e(j,Ctr),e(j,u6),e(u6,f_e),e(f_e,wtr),e(u6,Atr),e(u6,BX),e(BX,ytr),e(u6,Ltr),e(j,xtr),e(j,_6),e(_6,m_e),e(m_e,$tr),e(_6,ktr),e(_6,PX),e(PX,Str),e(_6,Rtr),e(j,Btr),e(j,b6),e(b6,g_e),e(g_e,Ptr),e(b6,Itr),e(b6,IX),e(IX,qtr),e(b6,Ntr),e(j,jtr),e(j,v6),e(v6,h_e),e(h_e,Dtr),e(v6,Gtr),e(v6,qX),e(qX,Otr),e(v6,Vtr),e(j,Xtr),e(j,F6),e(F6,p_e),e(p_e,ztr),e(F6,Qtr),e(F6,NX),e(NX,Wtr),e(F6,Htr),e(j,Utr),e(j,T6),e(T6,u_e),e(u_e,Jtr),e(T6,Ytr),e(T6,jX),e(jX,Ktr),e(T6,Ztr),e(j,ear),e(j,M6),e(M6,__e),e(__e,oar),e(M6,rar),e(M6,DX),e(DX,tar),e(M6,aar),e(j,nar),e(j,E6),e(E6,b_e),e(b_e,sar),e(E6,lar),e(E6,GX),e(GX,iar),e(E6,dar),e(j,car),e(j,C6),e(C6,v_e),e(v_e,far),e(C6,mar),e(C6,OX),e(OX,gar),e(C6,har),e(j,par),e(j,w6),e(w6,F_e),e(F_e,uar),e(w6,_ar),e(w6,VX),e(VX,bar),e(w6,Far),e(j,Tar),e(j,A6),e(A6,T_e),e(T_e,Mar),e(A6,Ear),e(A6,XX),e(XX,Car),e(A6,war),e(j,Aar),e(j,y6),e(y6,M_e),e(M_e,yar),e(y6,Lar),e(y6,zX),e(zX,xar),e(y6,$ar),e(j,kar),e(j,L6),e(L6,E_e),e(E_e,Sar),e(L6,Rar),e(L6,QX),e(QX,Bar),e(L6,Par),e(j,Iar),e(j,x6),e(x6,C_e),e(C_e,qar),e(x6,Nar),e(x6,WX),e(WX,jar),e(x6,Dar),e(j,Gar),e(j,$6),e($6,w_e),e(w_e,Oar),e($6,Var),e($6,HX),e(HX,Xar),e($6,zar),e(j,Qar),e(j,k6),e(k6,A_e),e(A_e,War),e(k6,Har),e(k6,UX),e(UX,Uar),e(k6,Jar),e(j,Yar),e(j,ks),e(ks,y_e),e(y_e,Kar),e(ks,Zar),e(ks,JX),e(JX,enr),e(ks,onr),e(ks,YX),e(YX,rnr),e(ks,tnr),e(j,anr),e(j,S6),e(S6,L_e),e(L_e,nnr),e(S6,snr),e(S6,KX),e(KX,lnr),e(S6,inr),e(j,dnr),e(j,R6),e(R6,x_e),e(x_e,cnr),e(R6,fnr),e(R6,ZX),e(ZX,mnr),e(R6,gnr),e(j,hnr),e(j,B6),e(B6,$_e),e($_e,pnr),e(B6,unr),e(B6,ez),e(ez,_nr),e(B6,bnr),e(j,vnr),e(j,P6),e(P6,k_e),e(k_e,Fnr),e(P6,Tnr),e(P6,oz),e(oz,Mnr),e(P6,Enr),e(j,Cnr),e(j,I6),e(I6,S_e),e(S_e,wnr),e(I6,Anr),e(I6,rz),e(rz,ynr),e(I6,Lnr),e(j,xnr),e(j,q6),e(q6,R_e),e(R_e,$nr),e(q6,knr),e(q6,tz),e(tz,Snr),e(q6,Rnr),e(j,Bnr),e(j,N6),e(N6,B_e),e(B_e,Pnr),e(N6,Inr),e(N6,az),e(az,qnr),e(N6,Nnr),e(j,jnr),e(j,j6),e(j6,P_e),e(P_e,Dnr),e(j6,Gnr),e(j6,nz),e(nz,Onr),e(j6,Vnr),e(j,Xnr),e(j,D6),e(D6,I_e),e(I_e,znr),e(D6,Qnr),e(D6,sz),e(sz,Wnr),e(D6,Hnr),e(j,Unr),e(j,G6),e(G6,q_e),e(q_e,Jnr),e(G6,Ynr),e(G6,lz),e(lz,Knr),e(G6,Znr),e(j,esr),e(j,O6),e(O6,N_e),e(N_e,osr),e(O6,rsr),e(O6,iz),e(iz,tsr),e(O6,asr),e(j,nsr),e(j,V6),e(V6,j_e),e(j_e,ssr),e(V6,lsr),e(V6,dz),e(dz,isr),e(V6,dsr),e(j,csr),e(j,X6),e(X6,D_e),e(D_e,fsr),e(X6,msr),e(X6,cz),e(cz,gsr),e(X6,hsr),e(j,psr),e(j,z6),e(z6,G_e),e(G_e,usr),e(z6,_sr),e(z6,fz),e(fz,bsr),e(z6,vsr),e(j,Fsr),e(j,Q6),e(Q6,O_e),e(O_e,Tsr),e(Q6,Msr),e(Q6,mz),e(mz,Esr),e(Q6,Csr),e(j,wsr),e(j,W6),e(W6,V_e),e(V_e,Asr),e(W6,ysr),e(W6,gz),e(gz,Lsr),e(W6,xsr),e(j,$sr),e(j,H6),e(H6,X_e),e(X_e,ksr),e(H6,Ssr),e(H6,hz),e(hz,Rsr),e(H6,Bsr),e(j,Psr),e(j,U6),e(U6,z_e),e(z_e,Isr),e(U6,qsr),e(U6,pz),e(pz,Nsr),e(U6,jsr),e(j,Dsr),e(j,J6),e(J6,Q_e),e(Q_e,Gsr),e(J6,Osr),e(J6,uz),e(uz,Vsr),e(J6,Xsr),e(j,zsr),e(j,Y6),e(Y6,W_e),e(W_e,Qsr),e(Y6,Wsr),e(Y6,_z),e(_z,Hsr),e(Y6,Usr),e(j,Jsr),e(j,K6),e(K6,H_e),e(H_e,Ysr),e(K6,Ksr),e(K6,bz),e(bz,Zsr),e(K6,elr),e(j,olr),e(j,Z6),e(Z6,U_e),e(U_e,rlr),e(Z6,tlr),e(Z6,vz),e(vz,alr),e(Z6,nlr),e(j,slr),e(j,eT),e(eT,J_e),e(J_e,llr),e(eT,ilr),e(eT,Fz),e(Fz,dlr),e(eT,clr),e(j,flr),e(j,oT),e(oT,Y_e),e(Y_e,mlr),e(oT,glr),e(oT,Tz),e(Tz,hlr),e(oT,plr),e(j,ulr),e(j,rT),e(rT,K_e),e(K_e,_lr),e(rT,blr),e(rT,Mz),e(Mz,vlr),e(rT,Flr),e(j,Tlr),e(j,tT),e(tT,Z_e),e(Z_e,Mlr),e(tT,Elr),e(tT,Ez),e(Ez,Clr),e(tT,wlr),e(j,Alr),e(j,aT),e(aT,e0e),e(e0e,ylr),e(aT,Llr),e(aT,Cz),e(Cz,xlr),e(aT,$lr),e(Cr,klr),M(nT,Cr,null),b(f,eIe,_),b(f,Pd,_),e(Pd,sT),e(sT,o0e),M(bL,o0e,null),e(Pd,Slr),e(Pd,r0e),e(r0e,Rlr),b(f,oIe,_),b(f,Ko,_),M(vL,Ko,null),e(Ko,Blr),e(Ko,Id),e(Id,Plr),e(Id,wz),e(wz,Ilr),e(Id,qlr),e(Id,Az),e(Az,Nlr),e(Id,jlr),e(Ko,Dlr),e(Ko,FL),e(FL,Glr),e(FL,t0e),e(t0e,Olr),e(FL,Vlr),e(Ko,Xlr),e(Ko,Ct),M(TL,Ct,null),e(Ct,zlr),e(Ct,a0e),e(a0e,Qlr),e(Ct,Wlr),e(Ct,qd),e(qd,Hlr),e(qd,n0e),e(n0e,Ulr),e(qd,Jlr),e(qd,yz),e(yz,Ylr),e(qd,Klr),e(Ct,Zlr),M(lT,Ct,null),e(Ko,eir),e(Ko,wr),M(ML,wr,null),e(wr,oir),e(wr,s0e),e(s0e,rir),e(wr,tir),e(wr,Ja),e(Ja,air),e(Ja,l0e),e(l0e,nir),e(Ja,sir),e(Ja,i0e),e(i0e,lir),e(Ja,iir),e(Ja,d0e),e(d0e,dir),e(Ja,cir),e(wr,fir),e(wr,se),e(se,iT),e(iT,c0e),e(c0e,mir),e(iT,gir),e(iT,Lz),e(Lz,hir),e(iT,pir),e(se,uir),e(se,dT),e(dT,f0e),e(f0e,_ir),e(dT,bir),e(dT,xz),e(xz,vir),e(dT,Fir),e(se,Tir),e(se,cT),e(cT,m0e),e(m0e,Mir),e(cT,Eir),e(cT,$z),e($z,Cir),e(cT,wir),e(se,Air),e(se,fT),e(fT,g0e),e(g0e,yir),e(fT,Lir),e(fT,kz),e(kz,xir),e(fT,$ir),e(se,kir),e(se,mT),e(mT,h0e),e(h0e,Sir),e(mT,Rir),e(mT,Sz),e(Sz,Bir),e(mT,Pir),e(se,Iir),e(se,gT),e(gT,p0e),e(p0e,qir),e(gT,Nir),e(gT,Rz),e(Rz,jir),e(gT,Dir),e(se,Gir),e(se,hT),e(hT,u0e),e(u0e,Oir),e(hT,Vir),e(hT,Bz),e(Bz,Xir),e(hT,zir),e(se,Qir),e(se,pT),e(pT,_0e),e(_0e,Wir),e(pT,Hir),e(pT,Pz),e(Pz,Uir),e(pT,Jir),e(se,Yir),e(se,uT),e(uT,b0e),e(b0e,Kir),e(uT,Zir),e(uT,Iz),e(Iz,edr),e(uT,odr),e(se,rdr),e(se,_T),e(_T,v0e),e(v0e,tdr),e(_T,adr),e(_T,qz),e(qz,ndr),e(_T,sdr),e(se,ldr),e(se,bT),e(bT,F0e),e(F0e,idr),e(bT,ddr),e(bT,Nz),e(Nz,cdr),e(bT,fdr),e(se,mdr),e(se,vT),e(vT,T0e),e(T0e,gdr),e(vT,hdr),e(vT,jz),e(jz,pdr),e(vT,udr),e(se,_dr),e(se,FT),e(FT,M0e),e(M0e,bdr),e(FT,vdr),e(FT,Dz),e(Dz,Fdr),e(FT,Tdr),e(se,Mdr),e(se,TT),e(TT,E0e),e(E0e,Edr),e(TT,Cdr),e(TT,Gz),e(Gz,wdr),e(TT,Adr),e(se,ydr),e(se,MT),e(MT,C0e),e(C0e,Ldr),e(MT,xdr),e(MT,Oz),e(Oz,$dr),e(MT,kdr),e(se,Sdr),e(se,ET),e(ET,w0e),e(w0e,Rdr),e(ET,Bdr),e(ET,Vz),e(Vz,Pdr),e(ET,Idr),e(se,qdr),e(se,CT),e(CT,A0e),e(A0e,Ndr),e(CT,jdr),e(CT,Xz),e(Xz,Ddr),e(CT,Gdr),e(se,Odr),e(se,wT),e(wT,y0e),e(y0e,Vdr),e(wT,Xdr),e(wT,zz),e(zz,zdr),e(wT,Qdr),e(se,Wdr),e(se,AT),e(AT,L0e),e(L0e,Hdr),e(AT,Udr),e(AT,Qz),e(Qz,Jdr),e(AT,Ydr),e(se,Kdr),e(se,yT),e(yT,x0e),e(x0e,Zdr),e(yT,ecr),e(yT,Wz),e(Wz,ocr),e(yT,rcr),e(se,tcr),e(se,LT),e(LT,$0e),e($0e,acr),e(LT,ncr),e(LT,Hz),e(Hz,scr),e(LT,lcr),e(se,icr),e(se,xT),e(xT,k0e),e(k0e,dcr),e(xT,ccr),e(xT,Uz),e(Uz,fcr),e(xT,mcr),e(se,gcr),e(se,$T),e($T,S0e),e(S0e,hcr),e($T,pcr),e($T,Jz),e(Jz,ucr),e($T,_cr),e(wr,bcr),M(kT,wr,null),b(f,rIe,_),b(f,Nd,_),e(Nd,ST),e(ST,R0e),M(EL,R0e,null),e(Nd,vcr),e(Nd,B0e),e(B0e,Fcr),b(f,tIe,_),b(f,Zo,_),M(CL,Zo,null),e(Zo,Tcr),e(Zo,jd),e(jd,Mcr),e(jd,Yz),e(Yz,Ecr),e(jd,Ccr),e(jd,Kz),e(Kz,wcr),e(jd,Acr),e(Zo,ycr),e(Zo,wL),e(wL,Lcr),e(wL,P0e),e(P0e,xcr),e(wL,$cr),e(Zo,kcr),e(Zo,wt),M(AL,wt,null),e(wt,Scr),e(wt,I0e),e(I0e,Rcr),e(wt,Bcr),e(wt,Dd),e(Dd,Pcr),e(Dd,q0e),e(q0e,Icr),e(Dd,qcr),e(Dd,Zz),e(Zz,Ncr),e(Dd,jcr),e(wt,Dcr),M(RT,wt,null),e(Zo,Gcr),e(Zo,Ar),M(yL,Ar,null),e(Ar,Ocr),e(Ar,N0e),e(N0e,Vcr),e(Ar,Xcr),e(Ar,Ya),e(Ya,zcr),e(Ya,j0e),e(j0e,Qcr),e(Ya,Wcr),e(Ya,D0e),e(D0e,Hcr),e(Ya,Ucr),e(Ya,G0e),e(G0e,Jcr),e(Ya,Ycr),e(Ar,Kcr),e(Ar,Te),e(Te,BT),e(BT,O0e),e(O0e,Zcr),e(BT,efr),e(BT,eQ),e(eQ,ofr),e(BT,rfr),e(Te,tfr),e(Te,PT),e(PT,V0e),e(V0e,afr),e(PT,nfr),e(PT,oQ),e(oQ,sfr),e(PT,lfr),e(Te,ifr),e(Te,IT),e(IT,X0e),e(X0e,dfr),e(IT,cfr),e(IT,rQ),e(rQ,ffr),e(IT,mfr),e(Te,gfr),e(Te,qT),e(qT,z0e),e(z0e,hfr),e(qT,pfr),e(qT,tQ),e(tQ,ufr),e(qT,_fr),e(Te,bfr),e(Te,NT),e(NT,Q0e),e(Q0e,vfr),e(NT,Ffr),e(NT,aQ),e(aQ,Tfr),e(NT,Mfr),e(Te,Efr),e(Te,jT),e(jT,W0e),e(W0e,Cfr),e(jT,wfr),e(jT,nQ),e(nQ,Afr),e(jT,yfr),e(Te,Lfr),e(Te,DT),e(DT,H0e),e(H0e,xfr),e(DT,$fr),e(DT,sQ),e(sQ,kfr),e(DT,Sfr),e(Te,Rfr),e(Te,GT),e(GT,U0e),e(U0e,Bfr),e(GT,Pfr),e(GT,lQ),e(lQ,Ifr),e(GT,qfr),e(Te,Nfr),e(Te,OT),e(OT,J0e),e(J0e,jfr),e(OT,Dfr),e(OT,iQ),e(iQ,Gfr),e(OT,Ofr),e(Te,Vfr),e(Te,VT),e(VT,Y0e),e(Y0e,Xfr),e(VT,zfr),e(VT,dQ),e(dQ,Qfr),e(VT,Wfr),e(Te,Hfr),e(Te,XT),e(XT,K0e),e(K0e,Ufr),e(XT,Jfr),e(XT,cQ),e(cQ,Yfr),e(XT,Kfr),e(Te,Zfr),e(Te,zT),e(zT,Z0e),e(Z0e,emr),e(zT,omr),e(zT,fQ),e(fQ,rmr),e(zT,tmr),e(Ar,amr),M(QT,Ar,null),b(f,aIe,_),b(f,Gd,_),e(Gd,WT),e(WT,e1e),M(LL,e1e,null),e(Gd,nmr),e(Gd,o1e),e(o1e,smr),b(f,nIe,_),b(f,er,_),M(xL,er,null),e(er,lmr),e(er,Od),e(Od,imr),e(Od,mQ),e(mQ,dmr),e(Od,cmr),e(Od,gQ),e(gQ,fmr),e(Od,mmr),e(er,gmr),e(er,$L),e($L,hmr),e($L,r1e),e(r1e,pmr),e($L,umr),e(er,_mr),e(er,At),M(kL,At,null),e(At,bmr),e(At,t1e),e(t1e,vmr),e(At,Fmr),e(At,Vd),e(Vd,Tmr),e(Vd,a1e),e(a1e,Mmr),e(Vd,Emr),e(Vd,hQ),e(hQ,Cmr),e(Vd,wmr),e(At,Amr),M(HT,At,null),e(er,ymr),e(er,yr),M(SL,yr,null),e(yr,Lmr),e(yr,n1e),e(n1e,xmr),e(yr,$mr),e(yr,Ka),e(Ka,kmr),e(Ka,s1e),e(s1e,Smr),e(Ka,Rmr),e(Ka,l1e),e(l1e,Bmr),e(Ka,Pmr),e(Ka,i1e),e(i1e,Imr),e(Ka,qmr),e(yr,Nmr),e(yr,Xd),e(Xd,UT),e(UT,d1e),e(d1e,jmr),e(UT,Dmr),e(UT,pQ),e(pQ,Gmr),e(UT,Omr),e(Xd,Vmr),e(Xd,JT),e(JT,c1e),e(c1e,Xmr),e(JT,zmr),e(JT,uQ),e(uQ,Qmr),e(JT,Wmr),e(Xd,Hmr),e(Xd,YT),e(YT,f1e),e(f1e,Umr),e(YT,Jmr),e(YT,_Q),e(_Q,Ymr),e(YT,Kmr),e(yr,Zmr),M(KT,yr,null),b(f,sIe,_),b(f,zd,_),e(zd,ZT),e(ZT,m1e),M(RL,m1e,null),e(zd,egr),e(zd,g1e),e(g1e,ogr),b(f,lIe,_),b(f,or,_),M(BL,or,null),e(or,rgr),e(or,Qd),e(Qd,tgr),e(Qd,bQ),e(bQ,agr),e(Qd,ngr),e(Qd,vQ),e(vQ,sgr),e(Qd,lgr),e(or,igr),e(or,PL),e(PL,dgr),e(PL,h1e),e(h1e,cgr),e(PL,fgr),e(or,mgr),e(or,yt),M(IL,yt,null),e(yt,ggr),e(yt,p1e),e(p1e,hgr),e(yt,pgr),e(yt,Wd),e(Wd,ugr),e(Wd,u1e),e(u1e,_gr),e(Wd,bgr),e(Wd,FQ),e(FQ,vgr),e(Wd,Fgr),e(yt,Tgr),M(e7,yt,null),e(or,Mgr),e(or,Lr),M(qL,Lr,null),e(Lr,Egr),e(Lr,_1e),e(_1e,Cgr),e(Lr,wgr),e(Lr,Za),e(Za,Agr),e(Za,b1e),e(b1e,ygr),e(Za,Lgr),e(Za,v1e),e(v1e,xgr),e(Za,$gr),e(Za,F1e),e(F1e,kgr),e(Za,Sgr),e(Lr,Rgr),e(Lr,ie),e(ie,o7),e(o7,T1e),e(T1e,Bgr),e(o7,Pgr),e(o7,TQ),e(TQ,Igr),e(o7,qgr),e(ie,Ngr),e(ie,r7),e(r7,M1e),e(M1e,jgr),e(r7,Dgr),e(r7,MQ),e(MQ,Ggr),e(r7,Ogr),e(ie,Vgr),e(ie,t7),e(t7,E1e),e(E1e,Xgr),e(t7,zgr),e(t7,EQ),e(EQ,Qgr),e(t7,Wgr),e(ie,Hgr),e(ie,a7),e(a7,C1e),e(C1e,Ugr),e(a7,Jgr),e(a7,CQ),e(CQ,Ygr),e(a7,Kgr),e(ie,Zgr),e(ie,n7),e(n7,w1e),e(w1e,ehr),e(n7,ohr),e(n7,wQ),e(wQ,rhr),e(n7,thr),e(ie,ahr),e(ie,s7),e(s7,A1e),e(A1e,nhr),e(s7,shr),e(s7,AQ),e(AQ,lhr),e(s7,ihr),e(ie,dhr),e(ie,l7),e(l7,y1e),e(y1e,chr),e(l7,fhr),e(l7,yQ),e(yQ,mhr),e(l7,ghr),e(ie,hhr),e(ie,i7),e(i7,L1e),e(L1e,phr),e(i7,uhr),e(i7,LQ),e(LQ,_hr),e(i7,bhr),e(ie,vhr),e(ie,d7),e(d7,x1e),e(x1e,Fhr),e(d7,Thr),e(d7,xQ),e(xQ,Mhr),e(d7,Ehr),e(ie,Chr),e(ie,c7),e(c7,$1e),e($1e,whr),e(c7,Ahr),e(c7,$Q),e($Q,yhr),e(c7,Lhr),e(ie,xhr),e(ie,f7),e(f7,k1e),e(k1e,$hr),e(f7,khr),e(f7,kQ),e(kQ,Shr),e(f7,Rhr),e(ie,Bhr),e(ie,m7),e(m7,S1e),e(S1e,Phr),e(m7,Ihr),e(m7,SQ),e(SQ,qhr),e(m7,Nhr),e(ie,jhr),e(ie,g7),e(g7,R1e),e(R1e,Dhr),e(g7,Ghr),e(g7,RQ),e(RQ,Ohr),e(g7,Vhr),e(ie,Xhr),e(ie,h7),e(h7,B1e),e(B1e,zhr),e(h7,Qhr),e(h7,BQ),e(BQ,Whr),e(h7,Hhr),e(ie,Uhr),e(ie,p7),e(p7,P1e),e(P1e,Jhr),e(p7,Yhr),e(p7,PQ),e(PQ,Khr),e(p7,Zhr),e(ie,epr),e(ie,u7),e(u7,I1e),e(I1e,opr),e(u7,rpr),e(u7,IQ),e(IQ,tpr),e(u7,apr),e(ie,npr),e(ie,_7),e(_7,q1e),e(q1e,spr),e(_7,lpr),e(_7,qQ),e(qQ,ipr),e(_7,dpr),e(ie,cpr),e(ie,b7),e(b7,N1e),e(N1e,fpr),e(b7,mpr),e(b7,NQ),e(NQ,gpr),e(b7,hpr),e(ie,ppr),e(ie,v7),e(v7,j1e),e(j1e,upr),e(v7,_pr),e(v7,jQ),e(jQ,bpr),e(v7,vpr),e(ie,Fpr),e(ie,F7),e(F7,D1e),e(D1e,Tpr),e(F7,Mpr),e(F7,DQ),e(DQ,Epr),e(F7,Cpr),e(Lr,wpr),M(T7,Lr,null),b(f,iIe,_),b(f,Hd,_),e(Hd,M7),e(M7,G1e),M(NL,G1e,null),e(Hd,Apr),e(Hd,O1e),e(O1e,ypr),b(f,dIe,_),b(f,rr,_),M(jL,rr,null),e(rr,Lpr),e(rr,Ud),e(Ud,xpr),e(Ud,GQ),e(GQ,$pr),e(Ud,kpr),e(Ud,OQ),e(OQ,Spr),e(Ud,Rpr),e(rr,Bpr),e(rr,DL),e(DL,Ppr),e(DL,V1e),e(V1e,Ipr),e(DL,qpr),e(rr,Npr),e(rr,Lt),M(GL,Lt,null),e(Lt,jpr),e(Lt,X1e),e(X1e,Dpr),e(Lt,Gpr),e(Lt,Jd),e(Jd,Opr),e(Jd,z1e),e(z1e,Vpr),e(Jd,Xpr),e(Jd,VQ),e(VQ,zpr),e(Jd,Qpr),e(Lt,Wpr),M(E7,Lt,null),e(rr,Hpr),e(rr,xr),M(OL,xr,null),e(xr,Upr),e(xr,Q1e),e(Q1e,Jpr),e(xr,Ypr),e(xr,en),e(en,Kpr),e(en,W1e),e(W1e,Zpr),e(en,eur),e(en,H1e),e(H1e,our),e(en,rur),e(en,U1e),e(U1e,tur),e(en,aur),e(xr,nur),e(xr,ye),e(ye,C7),e(C7,J1e),e(J1e,sur),e(C7,lur),e(C7,XQ),e(XQ,iur),e(C7,dur),e(ye,cur),e(ye,w7),e(w7,Y1e),e(Y1e,fur),e(w7,mur),e(w7,zQ),e(zQ,gur),e(w7,hur),e(ye,pur),e(ye,A7),e(A7,K1e),e(K1e,uur),e(A7,_ur),e(A7,QQ),e(QQ,bur),e(A7,vur),e(ye,Fur),e(ye,y7),e(y7,Z1e),e(Z1e,Tur),e(y7,Mur),e(y7,WQ),e(WQ,Eur),e(y7,Cur),e(ye,wur),e(ye,L7),e(L7,ebe),e(ebe,Aur),e(L7,yur),e(L7,HQ),e(HQ,Lur),e(L7,xur),e(ye,$ur),e(ye,x7),e(x7,obe),e(obe,kur),e(x7,Sur),e(x7,UQ),e(UQ,Rur),e(x7,Bur),e(ye,Pur),e(ye,$7),e($7,rbe),e(rbe,Iur),e($7,qur),e($7,JQ),e(JQ,Nur),e($7,jur),e(ye,Dur),e(ye,k7),e(k7,tbe),e(tbe,Gur),e(k7,Our),e(k7,YQ),e(YQ,Vur),e(k7,Xur),e(ye,zur),e(ye,S7),e(S7,abe),e(abe,Qur),e(S7,Wur),e(S7,KQ),e(KQ,Hur),e(S7,Uur),e(ye,Jur),e(ye,R7),e(R7,nbe),e(nbe,Yur),e(R7,Kur),e(R7,ZQ),e(ZQ,Zur),e(R7,e_r),e(xr,o_r),M(B7,xr,null),b(f,cIe,_),b(f,Yd,_),e(Yd,P7),e(P7,sbe),M(VL,sbe,null),e(Yd,r_r),e(Yd,lbe),e(lbe,t_r),b(f,fIe,_),b(f,tr,_),M(XL,tr,null),e(tr,a_r),e(tr,Kd),e(Kd,n_r),e(Kd,eW),e(eW,s_r),e(Kd,l_r),e(Kd,oW),e(oW,i_r),e(Kd,d_r),e(tr,c_r),e(tr,zL),e(zL,f_r),e(zL,ibe),e(ibe,m_r),e(zL,g_r),e(tr,h_r),e(tr,xt),M(QL,xt,null),e(xt,p_r),e(xt,dbe),e(dbe,u_r),e(xt,__r),e(xt,Zd),e(Zd,b_r),e(Zd,cbe),e(cbe,v_r),e(Zd,F_r),e(Zd,rW),e(rW,T_r),e(Zd,M_r),e(xt,E_r),M(I7,xt,null),e(tr,C_r),e(tr,$r),M(WL,$r,null),e($r,w_r),e($r,fbe),e(fbe,A_r),e($r,y_r),e($r,on),e(on,L_r),e(on,mbe),e(mbe,x_r),e(on,$_r),e(on,gbe),e(gbe,k_r),e(on,S_r),e(on,hbe),e(hbe,R_r),e(on,B_r),e($r,P_r),e($r,Z),e(Z,q7),e(q7,pbe),e(pbe,I_r),e(q7,q_r),e(q7,tW),e(tW,N_r),e(q7,j_r),e(Z,D_r),e(Z,N7),e(N7,ube),e(ube,G_r),e(N7,O_r),e(N7,aW),e(aW,V_r),e(N7,X_r),e(Z,z_r),e(Z,j7),e(j7,_be),e(_be,Q_r),e(j7,W_r),e(j7,nW),e(nW,H_r),e(j7,U_r),e(Z,J_r),e(Z,D7),e(D7,bbe),e(bbe,Y_r),e(D7,K_r),e(D7,sW),e(sW,Z_r),e(D7,e0r),e(Z,o0r),e(Z,G7),e(G7,vbe),e(vbe,r0r),e(G7,t0r),e(G7,lW),e(lW,a0r),e(G7,n0r),e(Z,s0r),e(Z,O7),e(O7,Fbe),e(Fbe,l0r),e(O7,i0r),e(O7,iW),e(iW,d0r),e(O7,c0r),e(Z,f0r),e(Z,V7),e(V7,Tbe),e(Tbe,m0r),e(V7,g0r),e(V7,dW),e(dW,h0r),e(V7,p0r),e(Z,u0r),e(Z,X7),e(X7,Mbe),e(Mbe,_0r),e(X7,b0r),e(X7,cW),e(cW,v0r),e(X7,F0r),e(Z,T0r),e(Z,z7),e(z7,Ebe),e(Ebe,M0r),e(z7,E0r),e(z7,fW),e(fW,C0r),e(z7,w0r),e(Z,A0r),e(Z,Q7),e(Q7,Cbe),e(Cbe,y0r),e(Q7,L0r),e(Q7,mW),e(mW,x0r),e(Q7,$0r),e(Z,k0r),e(Z,W7),e(W7,wbe),e(wbe,S0r),e(W7,R0r),e(W7,gW),e(gW,B0r),e(W7,P0r),e(Z,I0r),e(Z,H7),e(H7,Abe),e(Abe,q0r),e(H7,N0r),e(H7,hW),e(hW,j0r),e(H7,D0r),e(Z,G0r),e(Z,U7),e(U7,ybe),e(ybe,O0r),e(U7,V0r),e(U7,pW),e(pW,X0r),e(U7,z0r),e(Z,Q0r),e(Z,J7),e(J7,Lbe),e(Lbe,W0r),e(J7,H0r),e(J7,uW),e(uW,U0r),e(J7,J0r),e(Z,Y0r),e(Z,Y7),e(Y7,xbe),e(xbe,K0r),e(Y7,Z0r),e(Y7,_W),e(_W,e1r),e(Y7,o1r),e(Z,r1r),e(Z,K7),e(K7,$be),e($be,t1r),e(K7,a1r),e(K7,bW),e(bW,n1r),e(K7,s1r),e(Z,l1r),e(Z,Z7),e(Z7,kbe),e(kbe,i1r),e(Z7,d1r),e(Z7,vW),e(vW,c1r),e(Z7,f1r),e(Z,m1r),e(Z,eM),e(eM,Sbe),e(Sbe,g1r),e(eM,h1r),e(eM,FW),e(FW,p1r),e(eM,u1r),e(Z,_1r),e(Z,oM),e(oM,Rbe),e(Rbe,b1r),e(oM,v1r),e(oM,TW),e(TW,F1r),e(oM,T1r),e(Z,M1r),e(Z,rM),e(rM,Bbe),e(Bbe,E1r),e(rM,C1r),e(rM,MW),e(MW,w1r),e(rM,A1r),e(Z,y1r),e(Z,tM),e(tM,Pbe),e(Pbe,L1r),e(tM,x1r),e(tM,EW),e(EW,$1r),e(tM,k1r),e(Z,S1r),e(Z,aM),e(aM,Ibe),e(Ibe,R1r),e(aM,B1r),e(aM,CW),e(CW,P1r),e(aM,I1r),e(Z,q1r),e(Z,nM),e(nM,qbe),e(qbe,N1r),e(nM,j1r),e(nM,wW),e(wW,D1r),e(nM,G1r),e(Z,O1r),e(Z,sM),e(sM,Nbe),e(Nbe,V1r),e(sM,X1r),e(sM,AW),e(AW,z1r),e(sM,Q1r),e(Z,W1r),e(Z,lM),e(lM,jbe),e(jbe,H1r),e(lM,U1r),e(lM,yW),e(yW,J1r),e(lM,Y1r),e(Z,K1r),e(Z,iM),e(iM,Dbe),e(Dbe,Z1r),e(iM,ebr),e(iM,LW),e(LW,obr),e(iM,rbr),e($r,tbr),M(dM,$r,null),b(f,mIe,_),b(f,ec,_),e(ec,cM),e(cM,Gbe),M(HL,Gbe,null),e(ec,abr),e(ec,Obe),e(Obe,nbr),b(f,gIe,_),b(f,ar,_),M(UL,ar,null),e(ar,sbr),e(ar,oc),e(oc,lbr),e(oc,xW),e(xW,ibr),e(oc,dbr),e(oc,$W),e($W,cbr),e(oc,fbr),e(ar,mbr),e(ar,JL),e(JL,gbr),e(JL,Vbe),e(Vbe,hbr),e(JL,pbr),e(ar,ubr),e(ar,$t),M(YL,$t,null),e($t,_br),e($t,Xbe),e(Xbe,bbr),e($t,vbr),e($t,rc),e(rc,Fbr),e(rc,zbe),e(zbe,Tbr),e(rc,Mbr),e(rc,kW),e(kW,Ebr),e(rc,Cbr),e($t,wbr),M(fM,$t,null),e(ar,Abr),e(ar,kr),M(KL,kr,null),e(kr,ybr),e(kr,Qbe),e(Qbe,Lbr),e(kr,xbr),e(kr,rn),e(rn,$br),e(rn,Wbe),e(Wbe,kbr),e(rn,Sbr),e(rn,Hbe),e(Hbe,Rbr),e(rn,Bbr),e(rn,Ube),e(Ube,Pbr),e(rn,Ibr),e(kr,qbr),e(kr,pe),e(pe,mM),e(mM,Jbe),e(Jbe,Nbr),e(mM,jbr),e(mM,SW),e(SW,Dbr),e(mM,Gbr),e(pe,Obr),e(pe,gM),e(gM,Ybe),e(Ybe,Vbr),e(gM,Xbr),e(gM,RW),e(RW,zbr),e(gM,Qbr),e(pe,Wbr),e(pe,hM),e(hM,Kbe),e(Kbe,Hbr),e(hM,Ubr),e(hM,BW),e(BW,Jbr),e(hM,Ybr),e(pe,Kbr),e(pe,pM),e(pM,Zbe),e(Zbe,Zbr),e(pM,e2r),e(pM,PW),e(PW,o2r),e(pM,r2r),e(pe,t2r),e(pe,uM),e(uM,e2e),e(e2e,a2r),e(uM,n2r),e(uM,IW),e(IW,s2r),e(uM,l2r),e(pe,i2r),e(pe,_M),e(_M,o2e),e(o2e,d2r),e(_M,c2r),e(_M,qW),e(qW,f2r),e(_M,m2r),e(pe,g2r),e(pe,bM),e(bM,r2e),e(r2e,h2r),e(bM,p2r),e(bM,NW),e(NW,u2r),e(bM,_2r),e(pe,b2r),e(pe,vM),e(vM,t2e),e(t2e,v2r),e(vM,F2r),e(vM,jW),e(jW,T2r),e(vM,M2r),e(pe,E2r),e(pe,FM),e(FM,a2e),e(a2e,C2r),e(FM,w2r),e(FM,DW),e(DW,A2r),e(FM,y2r),e(pe,L2r),e(pe,TM),e(TM,n2e),e(n2e,x2r),e(TM,$2r),e(TM,GW),e(GW,k2r),e(TM,S2r),e(pe,R2r),e(pe,MM),e(MM,s2e),e(s2e,B2r),e(MM,P2r),e(MM,OW),e(OW,I2r),e(MM,q2r),e(pe,N2r),e(pe,EM),e(EM,l2e),e(l2e,j2r),e(EM,D2r),e(EM,VW),e(VW,G2r),e(EM,O2r),e(pe,V2r),e(pe,CM),e(CM,i2e),e(i2e,X2r),e(CM,z2r),e(CM,XW),e(XW,Q2r),e(CM,W2r),e(pe,H2r),e(pe,wM),e(wM,d2e),e(d2e,U2r),e(wM,J2r),e(wM,zW),e(zW,Y2r),e(wM,K2r),e(pe,Z2r),e(pe,AM),e(AM,c2e),e(c2e,evr),e(AM,ovr),e(AM,QW),e(QW,rvr),e(AM,tvr),e(pe,avr),e(pe,yM),e(yM,f2e),e(f2e,nvr),e(yM,svr),e(yM,WW),e(WW,lvr),e(yM,ivr),e(pe,dvr),e(pe,LM),e(LM,m2e),e(m2e,cvr),e(LM,fvr),e(LM,HW),e(HW,mvr),e(LM,gvr),e(kr,hvr),M(xM,kr,null),b(f,hIe,_),b(f,tc,_),e(tc,$M),e($M,g2e),M(ZL,g2e,null),e(tc,pvr),e(tc,h2e),e(h2e,uvr),b(f,pIe,_),b(f,nr,_),M(e8,nr,null),e(nr,_vr),e(nr,ac),e(ac,bvr),e(ac,UW),e(UW,vvr),e(ac,Fvr),e(ac,JW),e(JW,Tvr),e(ac,Mvr),e(nr,Evr),e(nr,o8),e(o8,Cvr),e(o8,p2e),e(p2e,wvr),e(o8,Avr),e(nr,yvr),e(nr,kt),M(r8,kt,null),e(kt,Lvr),e(kt,u2e),e(u2e,xvr),e(kt,$vr),e(kt,nc),e(nc,kvr),e(nc,_2e),e(_2e,Svr),e(nc,Rvr),e(nc,YW),e(YW,Bvr),e(nc,Pvr),e(kt,Ivr),M(kM,kt,null),e(nr,qvr),e(nr,Sr),M(t8,Sr,null),e(Sr,Nvr),e(Sr,b2e),e(b2e,jvr),e(Sr,Dvr),e(Sr,tn),e(tn,Gvr),e(tn,v2e),e(v2e,Ovr),e(tn,Vvr),e(tn,F2e),e(F2e,Xvr),e(tn,zvr),e(tn,T2e),e(T2e,Qvr),e(tn,Wvr),e(Sr,Hvr),e(Sr,M2e),e(M2e,SM),e(SM,E2e),e(E2e,Uvr),e(SM,Jvr),e(SM,KW),e(KW,Yvr),e(SM,Kvr),e(Sr,Zvr),M(RM,Sr,null),b(f,uIe,_),b(f,sc,_),e(sc,BM),e(BM,C2e),M(a8,C2e,null),e(sc,eFr),e(sc,w2e),e(w2e,oFr),b(f,_Ie,_),b(f,sr,_),M(n8,sr,null),e(sr,rFr),e(sr,lc),e(lc,tFr),e(lc,ZW),e(ZW,aFr),e(lc,nFr),e(lc,eH),e(eH,sFr),e(lc,lFr),e(sr,iFr),e(sr,s8),e(s8,dFr),e(s8,A2e),e(A2e,cFr),e(s8,fFr),e(sr,mFr),e(sr,St),M(l8,St,null),e(St,gFr),e(St,y2e),e(y2e,hFr),e(St,pFr),e(St,ic),e(ic,uFr),e(ic,L2e),e(L2e,_Fr),e(ic,bFr),e(ic,oH),e(oH,vFr),e(ic,FFr),e(St,TFr),M(PM,St,null),e(sr,MFr),e(sr,Rr),M(i8,Rr,null),e(Rr,EFr),e(Rr,x2e),e(x2e,CFr),e(Rr,wFr),e(Rr,an),e(an,AFr),e(an,$2e),e($2e,yFr),e(an,LFr),e(an,k2e),e(k2e,xFr),e(an,$Fr),e(an,S2e),e(S2e,kFr),e(an,SFr),e(Rr,RFr),e(Rr,de),e(de,IM),e(IM,R2e),e(R2e,BFr),e(IM,PFr),e(IM,rH),e(rH,IFr),e(IM,qFr),e(de,NFr),e(de,qM),e(qM,B2e),e(B2e,jFr),e(qM,DFr),e(qM,tH),e(tH,GFr),e(qM,OFr),e(de,VFr),e(de,NM),e(NM,P2e),e(P2e,XFr),e(NM,zFr),e(NM,aH),e(aH,QFr),e(NM,WFr),e(de,HFr),e(de,jM),e(jM,I2e),e(I2e,UFr),e(jM,JFr),e(jM,nH),e(nH,YFr),e(jM,KFr),e(de,ZFr),e(de,DM),e(DM,q2e),e(q2e,e6r),e(DM,o6r),e(DM,sH),e(sH,r6r),e(DM,t6r),e(de,a6r),e(de,GM),e(GM,N2e),e(N2e,n6r),e(GM,s6r),e(GM,lH),e(lH,l6r),e(GM,i6r),e(de,d6r),e(de,OM),e(OM,j2e),e(j2e,c6r),e(OM,f6r),e(OM,iH),e(iH,m6r),e(OM,g6r),e(de,h6r),e(de,VM),e(VM,D2e),e(D2e,p6r),e(VM,u6r),e(VM,dH),e(dH,_6r),e(VM,b6r),e(de,v6r),e(de,XM),e(XM,G2e),e(G2e,F6r),e(XM,T6r),e(XM,cH),e(cH,M6r),e(XM,E6r),e(de,C6r),e(de,zM),e(zM,O2e),e(O2e,w6r),e(zM,A6r),e(zM,fH),e(fH,y6r),e(zM,L6r),e(de,x6r),e(de,QM),e(QM,V2e),e(V2e,$6r),e(QM,k6r),e(QM,mH),e(mH,S6r),e(QM,R6r),e(de,B6r),e(de,WM),e(WM,X2e),e(X2e,P6r),e(WM,I6r),e(WM,gH),e(gH,q6r),e(WM,N6r),e(de,j6r),e(de,HM),e(HM,z2e),e(z2e,D6r),e(HM,G6r),e(HM,hH),e(hH,O6r),e(HM,V6r),e(de,X6r),e(de,UM),e(UM,Q2e),e(Q2e,z6r),e(UM,Q6r),e(UM,pH),e(pH,W6r),e(UM,H6r),e(de,U6r),e(de,JM),e(JM,W2e),e(W2e,J6r),e(JM,Y6r),e(JM,uH),e(uH,K6r),e(JM,Z6r),e(de,eTr),e(de,YM),e(YM,H2e),e(H2e,oTr),e(YM,rTr),e(YM,_H),e(_H,tTr),e(YM,aTr),e(de,nTr),e(de,KM),e(KM,U2e),e(U2e,sTr),e(KM,lTr),e(KM,bH),e(bH,iTr),e(KM,dTr),e(de,cTr),e(de,ZM),e(ZM,J2e),e(J2e,fTr),e(ZM,mTr),e(ZM,vH),e(vH,gTr),e(ZM,hTr),e(de,pTr),e(de,e4),e(e4,Y2e),e(Y2e,uTr),e(e4,_Tr),e(e4,FH),e(FH,bTr),e(e4,vTr),e(de,FTr),e(de,o4),e(o4,K2e),e(K2e,TTr),e(o4,MTr),e(o4,TH),e(TH,ETr),e(o4,CTr),e(Rr,wTr),M(r4,Rr,null),b(f,bIe,_),b(f,dc,_),e(dc,t4),e(t4,Z2e),M(d8,Z2e,null),e(dc,ATr),e(dc,eve),e(eve,yTr),b(f,vIe,_),b(f,lr,_),M(c8,lr,null),e(lr,LTr),e(lr,cc),e(cc,xTr),e(cc,MH),e(MH,$Tr),e(cc,kTr),e(cc,EH),e(EH,STr),e(cc,RTr),e(lr,BTr),e(lr,f8),e(f8,PTr),e(f8,ove),e(ove,ITr),e(f8,qTr),e(lr,NTr),e(lr,Rt),M(m8,Rt,null),e(Rt,jTr),e(Rt,rve),e(rve,DTr),e(Rt,GTr),e(Rt,fc),e(fc,OTr),e(fc,tve),e(tve,VTr),e(fc,XTr),e(fc,CH),e(CH,zTr),e(fc,QTr),e(Rt,WTr),M(a4,Rt,null),e(lr,HTr),e(lr,Br),M(g8,Br,null),e(Br,UTr),e(Br,ave),e(ave,JTr),e(Br,YTr),e(Br,nn),e(nn,KTr),e(nn,nve),e(nve,ZTr),e(nn,e7r),e(nn,sve),e(sve,o7r),e(nn,r7r),e(nn,lve),e(lve,t7r),e(nn,a7r),e(Br,n7r),e(Br,ce),e(ce,n4),e(n4,ive),e(ive,s7r),e(n4,l7r),e(n4,wH),e(wH,i7r),e(n4,d7r),e(ce,c7r),e(ce,s4),e(s4,dve),e(dve,f7r),e(s4,m7r),e(s4,AH),e(AH,g7r),e(s4,h7r),e(ce,p7r),e(ce,l4),e(l4,cve),e(cve,u7r),e(l4,_7r),e(l4,yH),e(yH,b7r),e(l4,v7r),e(ce,F7r),e(ce,i4),e(i4,fve),e(fve,T7r),e(i4,M7r),e(i4,LH),e(LH,E7r),e(i4,C7r),e(ce,w7r),e(ce,d4),e(d4,mve),e(mve,A7r),e(d4,y7r),e(d4,xH),e(xH,L7r),e(d4,x7r),e(ce,$7r),e(ce,c4),e(c4,gve),e(gve,k7r),e(c4,S7r),e(c4,$H),e($H,R7r),e(c4,B7r),e(ce,P7r),e(ce,f4),e(f4,hve),e(hve,I7r),e(f4,q7r),e(f4,kH),e(kH,N7r),e(f4,j7r),e(ce,D7r),e(ce,m4),e(m4,pve),e(pve,G7r),e(m4,O7r),e(m4,SH),e(SH,V7r),e(m4,X7r),e(ce,z7r),e(ce,g4),e(g4,uve),e(uve,Q7r),e(g4,W7r),e(g4,RH),e(RH,H7r),e(g4,U7r),e(ce,J7r),e(ce,h4),e(h4,_ve),e(_ve,Y7r),e(h4,K7r),e(h4,BH),e(BH,Z7r),e(h4,eMr),e(ce,oMr),e(ce,p4),e(p4,bve),e(bve,rMr),e(p4,tMr),e(p4,PH),e(PH,aMr),e(p4,nMr),e(ce,sMr),e(ce,u4),e(u4,vve),e(vve,lMr),e(u4,iMr),e(u4,IH),e(IH,dMr),e(u4,cMr),e(ce,fMr),e(ce,_4),e(_4,Fve),e(Fve,mMr),e(_4,gMr),e(_4,qH),e(qH,hMr),e(_4,pMr),e(ce,uMr),e(ce,b4),e(b4,Tve),e(Tve,_Mr),e(b4,bMr),e(b4,NH),e(NH,vMr),e(b4,FMr),e(ce,TMr),e(ce,v4),e(v4,Mve),e(Mve,MMr),e(v4,EMr),e(v4,jH),e(jH,CMr),e(v4,wMr),e(ce,AMr),e(ce,F4),e(F4,Eve),e(Eve,yMr),e(F4,LMr),e(F4,DH),e(DH,xMr),e(F4,$Mr),e(ce,kMr),e(ce,T4),e(T4,Cve),e(Cve,SMr),e(T4,RMr),e(T4,GH),e(GH,BMr),e(T4,PMr),e(ce,IMr),e(ce,M4),e(M4,wve),e(wve,qMr),e(M4,NMr),e(M4,OH),e(OH,jMr),e(M4,DMr),e(ce,GMr),e(ce,E4),e(E4,Ave),e(Ave,OMr),e(E4,VMr),e(E4,VH),e(VH,XMr),e(E4,zMr),e(ce,QMr),e(ce,C4),e(C4,yve),e(yve,WMr),e(C4,HMr),e(C4,XH),e(XH,UMr),e(C4,JMr),e(Br,YMr),M(w4,Br,null),b(f,FIe,_),b(f,mc,_),e(mc,A4),e(A4,Lve),M(h8,Lve,null),e(mc,KMr),e(mc,xve),e(xve,ZMr),b(f,TIe,_),b(f,ir,_),M(p8,ir,null),e(ir,e4r),e(ir,gc),e(gc,o4r),e(gc,zH),e(zH,r4r),e(gc,t4r),e(gc,QH),e(QH,a4r),e(gc,n4r),e(ir,s4r),e(ir,u8),e(u8,l4r),e(u8,$ve),e($ve,i4r),e(u8,d4r),e(ir,c4r),e(ir,Bt),M(_8,Bt,null),e(Bt,f4r),e(Bt,kve),e(kve,m4r),e(Bt,g4r),e(Bt,hc),e(hc,h4r),e(hc,Sve),e(Sve,p4r),e(hc,u4r),e(hc,WH),e(WH,_4r),e(hc,b4r),e(Bt,v4r),M(y4,Bt,null),e(ir,F4r),e(ir,Pr),M(b8,Pr,null),e(Pr,T4r),e(Pr,Rve),e(Rve,M4r),e(Pr,E4r),e(Pr,sn),e(sn,C4r),e(sn,Bve),e(Bve,w4r),e(sn,A4r),e(sn,Pve),e(Pve,y4r),e(sn,L4r),e(sn,Ive),e(Ive,x4r),e(sn,$4r),e(Pr,k4r),e(Pr,qve),e(qve,L4),e(L4,Nve),e(Nve,S4r),e(L4,R4r),e(L4,HH),e(HH,B4r),e(L4,P4r),e(Pr,I4r),M(x4,Pr,null),b(f,MIe,_),b(f,pc,_),e(pc,$4),e($4,jve),M(v8,jve,null),e(pc,q4r),e(pc,Dve),e(Dve,N4r),b(f,EIe,_),b(f,dr,_),M(F8,dr,null),e(dr,j4r),e(dr,uc),e(uc,D4r),e(uc,UH),e(UH,G4r),e(uc,O4r),e(uc,JH),e(JH,V4r),e(uc,X4r),e(dr,z4r),e(dr,T8),e(T8,Q4r),e(T8,Gve),e(Gve,W4r),e(T8,H4r),e(dr,U4r),e(dr,Pt),M(M8,Pt,null),e(Pt,J4r),e(Pt,Ove),e(Ove,Y4r),e(Pt,K4r),e(Pt,_c),e(_c,Z4r),e(_c,Vve),e(Vve,eEr),e(_c,oEr),e(_c,YH),e(YH,rEr),e(_c,tEr),e(Pt,aEr),M(k4,Pt,null),e(dr,nEr),e(dr,Ir),M(E8,Ir,null),e(Ir,sEr),e(Ir,Xve),e(Xve,lEr),e(Ir,iEr),e(Ir,ln),e(ln,dEr),e(ln,zve),e(zve,cEr),e(ln,fEr),e(ln,Qve),e(Qve,mEr),e(ln,gEr),e(ln,Wve),e(Wve,hEr),e(ln,pEr),e(Ir,uEr),e(Ir,Hve),e(Hve,S4),e(S4,Uve),e(Uve,_Er),e(S4,bEr),e(S4,KH),e(KH,vEr),e(S4,FEr),e(Ir,TEr),M(R4,Ir,null),b(f,CIe,_),b(f,bc,_),e(bc,B4),e(B4,Jve),M(C8,Jve,null),e(bc,MEr),e(bc,Yve),e(Yve,EEr),b(f,wIe,_),b(f,cr,_),M(w8,cr,null),e(cr,CEr),e(cr,vc),e(vc,wEr),e(vc,ZH),e(ZH,AEr),e(vc,yEr),e(vc,eU),e(eU,LEr),e(vc,xEr),e(cr,$Er),e(cr,A8),e(A8,kEr),e(A8,Kve),e(Kve,SEr),e(A8,REr),e(cr,BEr),e(cr,It),M(y8,It,null),e(It,PEr),e(It,Zve),e(Zve,IEr),e(It,qEr),e(It,Fc),e(Fc,NEr),e(Fc,eFe),e(eFe,jEr),e(Fc,DEr),e(Fc,oU),e(oU,GEr),e(Fc,OEr),e(It,VEr),M(P4,It,null),e(cr,XEr),e(cr,qr),M(L8,qr,null),e(qr,zEr),e(qr,oFe),e(oFe,QEr),e(qr,WEr),e(qr,dn),e(dn,HEr),e(dn,rFe),e(rFe,UEr),e(dn,JEr),e(dn,tFe),e(tFe,YEr),e(dn,KEr),e(dn,aFe),e(aFe,ZEr),e(dn,e5r),e(qr,o5r),e(qr,re),e(re,I4),e(I4,nFe),e(nFe,r5r),e(I4,t5r),e(I4,rU),e(rU,a5r),e(I4,n5r),e(re,s5r),e(re,q4),e(q4,sFe),e(sFe,l5r),e(q4,i5r),e(q4,tU),e(tU,d5r),e(q4,c5r),e(re,f5r),e(re,N4),e(N4,lFe),e(lFe,m5r),e(N4,g5r),e(N4,aU),e(aU,h5r),e(N4,p5r),e(re,u5r),e(re,j4),e(j4,iFe),e(iFe,_5r),e(j4,b5r),e(j4,nU),e(nU,v5r),e(j4,F5r),e(re,T5r),e(re,D4),e(D4,dFe),e(dFe,M5r),e(D4,E5r),e(D4,sU),e(sU,C5r),e(D4,w5r),e(re,A5r),e(re,G4),e(G4,cFe),e(cFe,y5r),e(G4,L5r),e(G4,lU),e(lU,x5r),e(G4,$5r),e(re,k5r),e(re,O4),e(O4,fFe),e(fFe,S5r),e(O4,R5r),e(O4,iU),e(iU,B5r),e(O4,P5r),e(re,I5r),e(re,V4),e(V4,mFe),e(mFe,q5r),e(V4,N5r),e(V4,dU),e(dU,j5r),e(V4,D5r),e(re,G5r),e(re,X4),e(X4,gFe),e(gFe,O5r),e(X4,V5r),e(X4,cU),e(cU,X5r),e(X4,z5r),e(re,Q5r),e(re,z4),e(z4,hFe),e(hFe,W5r),e(z4,H5r),e(z4,fU),e(fU,U5r),e(z4,J5r),e(re,Y5r),e(re,Q4),e(Q4,pFe),e(pFe,K5r),e(Q4,Z5r),e(Q4,mU),e(mU,eCr),e(Q4,oCr),e(re,rCr),e(re,W4),e(W4,uFe),e(uFe,tCr),e(W4,aCr),e(W4,gU),e(gU,nCr),e(W4,sCr),e(re,lCr),e(re,H4),e(H4,_Fe),e(_Fe,iCr),e(H4,dCr),e(H4,hU),e(hU,cCr),e(H4,fCr),e(re,mCr),e(re,U4),e(U4,bFe),e(bFe,gCr),e(U4,hCr),e(U4,pU),e(pU,pCr),e(U4,uCr),e(re,_Cr),e(re,J4),e(J4,vFe),e(vFe,bCr),e(J4,vCr),e(J4,uU),e(uU,FCr),e(J4,TCr),e(re,MCr),e(re,Y4),e(Y4,FFe),e(FFe,ECr),e(Y4,CCr),e(Y4,_U),e(_U,wCr),e(Y4,ACr),e(re,yCr),e(re,K4),e(K4,TFe),e(TFe,LCr),e(K4,xCr),e(K4,bU),e(bU,$Cr),e(K4,kCr),e(re,SCr),e(re,Z4),e(Z4,MFe),e(MFe,RCr),e(Z4,BCr),e(Z4,vU),e(vU,PCr),e(Z4,ICr),e(re,qCr),e(re,eE),e(eE,EFe),e(EFe,NCr),e(eE,jCr),e(eE,FU),e(FU,DCr),e(eE,GCr),e(re,OCr),e(re,oE),e(oE,CFe),e(CFe,VCr),e(oE,XCr),e(oE,TU),e(TU,zCr),e(oE,QCr),e(re,WCr),e(re,rE),e(rE,wFe),e(wFe,HCr),e(rE,UCr),e(rE,MU),e(MU,JCr),e(rE,YCr),e(re,KCr),e(re,tE),e(tE,AFe),e(AFe,ZCr),e(tE,e3r),e(tE,EU),e(EU,o3r),e(tE,r3r),e(re,t3r),e(re,aE),e(aE,yFe),e(yFe,a3r),e(aE,n3r),e(aE,CU),e(CU,s3r),e(aE,l3r),e(re,i3r),e(re,nE),e(nE,LFe),e(LFe,d3r),e(nE,c3r),e(nE,wU),e(wU,f3r),e(nE,m3r),e(re,g3r),e(re,sE),e(sE,xFe),e(xFe,h3r),e(sE,p3r),e(sE,AU),e(AU,u3r),e(sE,_3r),e(qr,b3r),M(lE,qr,null),b(f,AIe,_),b(f,Tc,_),e(Tc,iE),e(iE,$Fe),M(x8,$Fe,null),e(Tc,v3r),e(Tc,kFe),e(kFe,F3r),b(f,yIe,_),b(f,fr,_),M($8,fr,null),e(fr,T3r),e(fr,Mc),e(Mc,M3r),e(Mc,yU),e(yU,E3r),e(Mc,C3r),e(Mc,LU),e(LU,w3r),e(Mc,A3r),e(fr,y3r),e(fr,k8),e(k8,L3r),e(k8,SFe),e(SFe,x3r),e(k8,$3r),e(fr,k3r),e(fr,qt),M(S8,qt,null),e(qt,S3r),e(qt,RFe),e(RFe,R3r),e(qt,B3r),e(qt,Ec),e(Ec,P3r),e(Ec,BFe),e(BFe,I3r),e(Ec,q3r),e(Ec,xU),e(xU,N3r),e(Ec,j3r),e(qt,D3r),M(dE,qt,null),e(fr,G3r),e(fr,Nr),M(R8,Nr,null),e(Nr,O3r),e(Nr,PFe),e(PFe,V3r),e(Nr,X3r),e(Nr,cn),e(cn,z3r),e(cn,IFe),e(IFe,Q3r),e(cn,W3r),e(cn,qFe),e(qFe,H3r),e(cn,U3r),e(cn,NFe),e(NFe,J3r),e(cn,Y3r),e(Nr,K3r),e(Nr,ke),e(ke,cE),e(cE,jFe),e(jFe,Z3r),e(cE,ewr),e(cE,$U),e($U,owr),e(cE,rwr),e(ke,twr),e(ke,fE),e(fE,DFe),e(DFe,awr),e(fE,nwr),e(fE,kU),e(kU,swr),e(fE,lwr),e(ke,iwr),e(ke,mE),e(mE,GFe),e(GFe,dwr),e(mE,cwr),e(mE,SU),e(SU,fwr),e(mE,mwr),e(ke,gwr),e(ke,gE),e(gE,OFe),e(OFe,hwr),e(gE,pwr),e(gE,RU),e(RU,uwr),e(gE,_wr),e(ke,bwr),e(ke,hE),e(hE,VFe),e(VFe,vwr),e(hE,Fwr),e(hE,BU),e(BU,Twr),e(hE,Mwr),e(ke,Ewr),e(ke,pE),e(pE,XFe),e(XFe,Cwr),e(pE,wwr),e(pE,PU),e(PU,Awr),e(pE,ywr),e(ke,Lwr),e(ke,uE),e(uE,zFe),e(zFe,xwr),e(uE,$wr),e(uE,IU),e(IU,kwr),e(uE,Swr),e(ke,Rwr),e(ke,_E),e(_E,QFe),e(QFe,Bwr),e(_E,Pwr),e(_E,qU),e(qU,Iwr),e(_E,qwr),e(ke,Nwr),e(ke,bE),e(bE,WFe),e(WFe,jwr),e(bE,Dwr),e(bE,NU),e(NU,Gwr),e(bE,Owr),e(Nr,Vwr),M(vE,Nr,null),b(f,LIe,_),b(f,Cc,_),e(Cc,FE),e(FE,HFe),M(B8,HFe,null),e(Cc,Xwr),e(Cc,UFe),e(UFe,zwr),b(f,xIe,_),b(f,mr,_),M(P8,mr,null),e(mr,Qwr),e(mr,wc),e(wc,Wwr),e(wc,jU),e(jU,Hwr),e(wc,Uwr),e(wc,DU),e(DU,Jwr),e(wc,Ywr),e(mr,Kwr),e(mr,I8),e(I8,Zwr),e(I8,JFe),e(JFe,eAr),e(I8,oAr),e(mr,rAr),e(mr,Nt),M(q8,Nt,null),e(Nt,tAr),e(Nt,YFe),e(YFe,aAr),e(Nt,nAr),e(Nt,Ac),e(Ac,sAr),e(Ac,KFe),e(KFe,lAr),e(Ac,iAr),e(Ac,GU),e(GU,dAr),e(Ac,cAr),e(Nt,fAr),M(TE,Nt,null),e(mr,mAr),e(mr,jr),M(N8,jr,null),e(jr,gAr),e(jr,ZFe),e(ZFe,hAr),e(jr,pAr),e(jr,fn),e(fn,uAr),e(fn,e6e),e(e6e,_Ar),e(fn,bAr),e(fn,o6e),e(o6e,vAr),e(fn,FAr),e(fn,r6e),e(r6e,TAr),e(fn,MAr),e(jr,EAr),e(jr,Me),e(Me,ME),e(ME,t6e),e(t6e,CAr),e(ME,wAr),e(ME,OU),e(OU,AAr),e(ME,yAr),e(Me,LAr),e(Me,EE),e(EE,a6e),e(a6e,xAr),e(EE,$Ar),e(EE,VU),e(VU,kAr),e(EE,SAr),e(Me,RAr),e(Me,CE),e(CE,n6e),e(n6e,BAr),e(CE,PAr),e(CE,XU),e(XU,IAr),e(CE,qAr),e(Me,NAr),e(Me,wE),e(wE,s6e),e(s6e,jAr),e(wE,DAr),e(wE,zU),e(zU,GAr),e(wE,OAr),e(Me,VAr),e(Me,AE),e(AE,l6e),e(l6e,XAr),e(AE,zAr),e(AE,QU),e(QU,QAr),e(AE,WAr),e(Me,HAr),e(Me,yE),e(yE,i6e),e(i6e,UAr),e(yE,JAr),e(yE,WU),e(WU,YAr),e(yE,KAr),e(Me,ZAr),e(Me,LE),e(LE,d6e),e(d6e,eyr),e(LE,oyr),e(LE,HU),e(HU,ryr),e(LE,tyr),e(Me,ayr),e(Me,xE),e(xE,c6e),e(c6e,nyr),e(xE,syr),e(xE,UU),e(UU,lyr),e(xE,iyr),e(Me,dyr),e(Me,$E),e($E,f6e),e(f6e,cyr),e($E,fyr),e($E,JU),e(JU,myr),e($E,gyr),e(Me,hyr),e(Me,kE),e(kE,m6e),e(m6e,pyr),e(kE,uyr),e(kE,YU),e(YU,_yr),e(kE,byr),e(Me,vyr),e(Me,SE),e(SE,g6e),e(g6e,Fyr),e(SE,Tyr),e(SE,KU),e(KU,Myr),e(SE,Eyr),e(Me,Cyr),e(Me,RE),e(RE,h6e),e(h6e,wyr),e(RE,Ayr),e(RE,ZU),e(ZU,yyr),e(RE,Lyr),e(jr,xyr),M(BE,jr,null),b(f,$Ie,_),b(f,yc,_),e(yc,PE),e(PE,p6e),M(j8,p6e,null),e(yc,$yr),e(yc,u6e),e(u6e,kyr),b(f,kIe,_),b(f,gr,_),M(D8,gr,null),e(gr,Syr),e(gr,Lc),e(Lc,Ryr),e(Lc,eJ),e(eJ,Byr),e(Lc,Pyr),e(Lc,oJ),e(oJ,Iyr),e(Lc,qyr),e(gr,Nyr),e(gr,G8),e(G8,jyr),e(G8,_6e),e(_6e,Dyr),e(G8,Gyr),e(gr,Oyr),e(gr,jt),M(O8,jt,null),e(jt,Vyr),e(jt,b6e),e(b6e,Xyr),e(jt,zyr),e(jt,xc),e(xc,Qyr),e(xc,v6e),e(v6e,Wyr),e(xc,Hyr),e(xc,rJ),e(rJ,Uyr),e(xc,Jyr),e(jt,Yyr),M(IE,jt,null),e(gr,Kyr),e(gr,Dr),M(V8,Dr,null),e(Dr,Zyr),e(Dr,F6e),e(F6e,eLr),e(Dr,oLr),e(Dr,mn),e(mn,rLr),e(mn,T6e),e(T6e,tLr),e(mn,aLr),e(mn,M6e),e(M6e,nLr),e(mn,sLr),e(mn,E6e),e(E6e,lLr),e(mn,iLr),e(Dr,dLr),e(Dr,Le),e(Le,qE),e(qE,C6e),e(C6e,cLr),e(qE,fLr),e(qE,tJ),e(tJ,mLr),e(qE,gLr),e(Le,hLr),e(Le,NE),e(NE,w6e),e(w6e,pLr),e(NE,uLr),e(NE,aJ),e(aJ,_Lr),e(NE,bLr),e(Le,vLr),e(Le,jE),e(jE,A6e),e(A6e,FLr),e(jE,TLr),e(jE,nJ),e(nJ,MLr),e(jE,ELr),e(Le,CLr),e(Le,DE),e(DE,y6e),e(y6e,wLr),e(DE,ALr),e(DE,sJ),e(sJ,yLr),e(DE,LLr),e(Le,xLr),e(Le,GE),e(GE,L6e),e(L6e,$Lr),e(GE,kLr),e(GE,lJ),e(lJ,SLr),e(GE,RLr),e(Le,BLr),e(Le,OE),e(OE,x6e),e(x6e,PLr),e(OE,ILr),e(OE,iJ),e(iJ,qLr),e(OE,NLr),e(Le,jLr),e(Le,VE),e(VE,$6e),e($6e,DLr),e(VE,GLr),e(VE,dJ),e(dJ,OLr),e(VE,VLr),e(Le,XLr),e(Le,XE),e(XE,k6e),e(k6e,zLr),e(XE,QLr),e(XE,cJ),e(cJ,WLr),e(XE,HLr),e(Le,ULr),e(Le,zE),e(zE,S6e),e(S6e,JLr),e(zE,YLr),e(zE,fJ),e(fJ,KLr),e(zE,ZLr),e(Le,e8r),e(Le,QE),e(QE,R6e),e(R6e,o8r),e(QE,r8r),e(QE,mJ),e(mJ,t8r),e(QE,a8r),e(Dr,n8r),M(WE,Dr,null),b(f,SIe,_),b(f,$c,_),e($c,HE),e(HE,B6e),M(X8,B6e,null),e($c,s8r),e($c,P6e),e(P6e,l8r),b(f,RIe,_),b(f,hr,_),M(z8,hr,null),e(hr,i8r),e(hr,kc),e(kc,d8r),e(kc,gJ),e(gJ,c8r),e(kc,f8r),e(kc,hJ),e(hJ,m8r),e(kc,g8r),e(hr,h8r),e(hr,Q8),e(Q8,p8r),e(Q8,I6e),e(I6e,u8r),e(Q8,_8r),e(hr,b8r),e(hr,Dt),M(W8,Dt,null),e(Dt,v8r),e(Dt,q6e),e(q6e,F8r),e(Dt,T8r),e(Dt,Sc),e(Sc,M8r),e(Sc,N6e),e(N6e,E8r),e(Sc,C8r),e(Sc,pJ),e(pJ,w8r),e(Sc,A8r),e(Dt,y8r),M(UE,Dt,null),e(hr,L8r),e(hr,Gr),M(H8,Gr,null),e(Gr,x8r),e(Gr,j6e),e(j6e,$8r),e(Gr,k8r),e(Gr,gn),e(gn,S8r),e(gn,D6e),e(D6e,R8r),e(gn,B8r),e(gn,G6e),e(G6e,P8r),e(gn,I8r),e(gn,O6e),e(O6e,q8r),e(gn,N8r),e(Gr,j8r),e(Gr,Se),e(Se,JE),e(JE,V6e),e(V6e,D8r),e(JE,G8r),e(JE,uJ),e(uJ,O8r),e(JE,V8r),e(Se,X8r),e(Se,YE),e(YE,X6e),e(X6e,z8r),e(YE,Q8r),e(YE,_J),e(_J,W8r),e(YE,H8r),e(Se,U8r),e(Se,KE),e(KE,z6e),e(z6e,J8r),e(KE,Y8r),e(KE,bJ),e(bJ,K8r),e(KE,Z8r),e(Se,exr),e(Se,ZE),e(ZE,Q6e),e(Q6e,oxr),e(ZE,rxr),e(ZE,vJ),e(vJ,txr),e(ZE,axr),e(Se,nxr),e(Se,e5),e(e5,W6e),e(W6e,sxr),e(e5,lxr),e(e5,FJ),e(FJ,ixr),e(e5,dxr),e(Se,cxr),e(Se,o5),e(o5,H6e),e(H6e,fxr),e(o5,mxr),e(o5,TJ),e(TJ,gxr),e(o5,hxr),e(Se,pxr),e(Se,r5),e(r5,U6e),e(U6e,uxr),e(r5,_xr),e(r5,MJ),e(MJ,bxr),e(r5,vxr),e(Se,Fxr),e(Se,t5),e(t5,J6e),e(J6e,Txr),e(t5,Mxr),e(t5,EJ),e(EJ,Exr),e(t5,Cxr),e(Se,wxr),e(Se,a5),e(a5,Y6e),e(Y6e,Axr),e(a5,yxr),e(a5,CJ),e(CJ,Lxr),e(a5,xxr),e(Gr,$xr),M(n5,Gr,null),b(f,BIe,_),b(f,Rc,_),e(Rc,s5),e(s5,K6e),M(U8,K6e,null),e(Rc,kxr),e(Rc,Z6e),e(Z6e,Sxr),b(f,PIe,_),b(f,pr,_),M(J8,pr,null),e(pr,Rxr),e(pr,Bc),e(Bc,Bxr),e(Bc,wJ),e(wJ,Pxr),e(Bc,Ixr),e(Bc,AJ),e(AJ,qxr),e(Bc,Nxr),e(pr,jxr),e(pr,Y8),e(Y8,Dxr),e(Y8,eTe),e(eTe,Gxr),e(Y8,Oxr),e(pr,Vxr),e(pr,Gt),M(K8,Gt,null),e(Gt,Xxr),e(Gt,oTe),e(oTe,zxr),e(Gt,Qxr),e(Gt,Pc),e(Pc,Wxr),e(Pc,rTe),e(rTe,Hxr),e(Pc,Uxr),e(Pc,yJ),e(yJ,Jxr),e(Pc,Yxr),e(Gt,Kxr),M(l5,Gt,null),e(pr,Zxr),e(pr,Or),M(Z8,Or,null),e(Or,e9r),e(Or,tTe),e(tTe,o9r),e(Or,r9r),e(Or,hn),e(hn,t9r),e(hn,aTe),e(aTe,a9r),e(hn,n9r),e(hn,nTe),e(nTe,s9r),e(hn,l9r),e(hn,sTe),e(sTe,i9r),e(hn,d9r),e(Or,c9r),e(Or,xe),e(xe,i5),e(i5,lTe),e(lTe,f9r),e(i5,m9r),e(i5,LJ),e(LJ,g9r),e(i5,h9r),e(xe,p9r),e(xe,d5),e(d5,iTe),e(iTe,u9r),e(d5,_9r),e(d5,xJ),e(xJ,b9r),e(d5,v9r),e(xe,F9r),e(xe,c5),e(c5,dTe),e(dTe,T9r),e(c5,M9r),e(c5,$J),e($J,E9r),e(c5,C9r),e(xe,w9r),e(xe,f5),e(f5,cTe),e(cTe,A9r),e(f5,y9r),e(f5,kJ),e(kJ,L9r),e(f5,x9r),e(xe,$9r),e(xe,m5),e(m5,fTe),e(fTe,k9r),e(m5,S9r),e(m5,SJ),e(SJ,R9r),e(m5,B9r),e(xe,P9r),e(xe,g5),e(g5,mTe),e(mTe,I9r),e(g5,q9r),e(g5,RJ),e(RJ,N9r),e(g5,j9r),e(xe,D9r),e(xe,h5),e(h5,gTe),e(gTe,G9r),e(h5,O9r),e(h5,BJ),e(BJ,V9r),e(h5,X9r),e(xe,z9r),e(xe,p5),e(p5,hTe),e(hTe,Q9r),e(p5,W9r),e(p5,PJ),e(PJ,H9r),e(p5,U9r),e(xe,J9r),e(xe,u5),e(u5,pTe),e(pTe,Y9r),e(u5,K9r),e(u5,IJ),e(IJ,Z9r),e(u5,e$r),e(xe,o$r),e(xe,_5),e(_5,uTe),e(uTe,r$r),e(_5,t$r),e(_5,qJ),e(qJ,a$r),e(_5,n$r),e(Or,s$r),M(b5,Or,null),b(f,IIe,_),b(f,Ic,_),e(Ic,v5),e(v5,_Te),M(ex,_Te,null),e(Ic,l$r),e(Ic,bTe),e(bTe,i$r),b(f,qIe,_),b(f,ur,_),M(ox,ur,null),e(ur,d$r),e(ur,qc),e(qc,c$r),e(qc,NJ),e(NJ,f$r),e(qc,m$r),e(qc,jJ),e(jJ,g$r),e(qc,h$r),e(ur,p$r),e(ur,rx),e(rx,u$r),e(rx,vTe),e(vTe,_$r),e(rx,b$r),e(ur,v$r),e(ur,Ot),M(tx,Ot,null),e(Ot,F$r),e(Ot,FTe),e(FTe,T$r),e(Ot,M$r),e(Ot,Nc),e(Nc,E$r),e(Nc,TTe),e(TTe,C$r),e(Nc,w$r),e(Nc,DJ),e(DJ,A$r),e(Nc,y$r),e(Ot,L$r),M(F5,Ot,null),e(ur,x$r),e(ur,Vr),M(ax,Vr,null),e(Vr,$$r),e(Vr,MTe),e(MTe,k$r),e(Vr,S$r),e(Vr,pn),e(pn,R$r),e(pn,ETe),e(ETe,B$r),e(pn,P$r),e(pn,CTe),e(CTe,I$r),e(pn,q$r),e(pn,wTe),e(wTe,N$r),e(pn,j$r),e(Vr,D$r),e(Vr,$e),e($e,T5),e(T5,ATe),e(ATe,G$r),e(T5,O$r),e(T5,GJ),e(GJ,V$r),e(T5,X$r),e($e,z$r),e($e,M5),e(M5,yTe),e(yTe,Q$r),e(M5,W$r),e(M5,OJ),e(OJ,H$r),e(M5,U$r),e($e,J$r),e($e,E5),e(E5,LTe),e(LTe,Y$r),e(E5,K$r),e(E5,VJ),e(VJ,Z$r),e(E5,ekr),e($e,okr),e($e,C5),e(C5,xTe),e(xTe,rkr),e(C5,tkr),e(C5,XJ),e(XJ,akr),e(C5,nkr),e($e,skr),e($e,w5),e(w5,$Te),e($Te,lkr),e(w5,ikr),e(w5,zJ),e(zJ,dkr),e(w5,ckr),e($e,fkr),e($e,A5),e(A5,kTe),e(kTe,mkr),e(A5,gkr),e(A5,QJ),e(QJ,hkr),e(A5,pkr),e($e,ukr),e($e,y5),e(y5,STe),e(STe,_kr),e(y5,bkr),e(y5,WJ),e(WJ,vkr),e(y5,Fkr),e($e,Tkr),e($e,L5),e(L5,RTe),e(RTe,Mkr),e(L5,Ekr),e(L5,HJ),e(HJ,Ckr),e(L5,wkr),e($e,Akr),e($e,x5),e(x5,BTe),e(BTe,ykr),e(x5,Lkr),e(x5,UJ),e(UJ,xkr),e(x5,$kr),e($e,kkr),e($e,$5),e($5,PTe),e(PTe,Skr),e($5,Rkr),e($5,JJ),e(JJ,Bkr),e($5,Pkr),e(Vr,Ikr),M(k5,Vr,null),b(f,NIe,_),b(f,jc,_),e(jc,S5),e(S5,ITe),M(nx,ITe,null),e(jc,qkr),e(jc,qTe),e(qTe,Nkr),b(f,jIe,_),b(f,_r,_),M(sx,_r,null),e(_r,jkr),e(_r,Dc),e(Dc,Dkr),e(Dc,YJ),e(YJ,Gkr),e(Dc,Okr),e(Dc,KJ),e(KJ,Vkr),e(Dc,Xkr),e(_r,zkr),e(_r,lx),e(lx,Qkr),e(lx,NTe),e(NTe,Wkr),e(lx,Hkr),e(_r,Ukr),e(_r,Vt),M(ix,Vt,null),e(Vt,Jkr),e(Vt,jTe),e(jTe,Ykr),e(Vt,Kkr),e(Vt,Gc),e(Gc,Zkr),e(Gc,DTe),e(DTe,eSr),e(Gc,oSr),e(Gc,ZJ),e(ZJ,rSr),e(Gc,tSr),e(Vt,aSr),M(R5,Vt,null),e(_r,nSr),e(_r,Xr),M(dx,Xr,null),e(Xr,sSr),e(Xr,GTe),e(GTe,lSr),e(Xr,iSr),e(Xr,un),e(un,dSr),e(un,OTe),e(OTe,cSr),e(un,fSr),e(un,VTe),e(VTe,mSr),e(un,gSr),e(un,XTe),e(XTe,hSr),e(un,pSr),e(Xr,uSr),e(Xr,De),e(De,B5),e(B5,zTe),e(zTe,_Sr),e(B5,bSr),e(B5,eY),e(eY,vSr),e(B5,FSr),e(De,TSr),e(De,P5),e(P5,QTe),e(QTe,MSr),e(P5,ESr),e(P5,oY),e(oY,CSr),e(P5,wSr),e(De,ASr),e(De,I5),e(I5,WTe),e(WTe,ySr),e(I5,LSr),e(I5,rY),e(rY,xSr),e(I5,$Sr),e(De,kSr),e(De,q5),e(q5,HTe),e(HTe,SSr),e(q5,RSr),e(q5,tY),e(tY,BSr),e(q5,PSr),e(De,ISr),e(De,N5),e(N5,UTe),e(UTe,qSr),e(N5,NSr),e(N5,aY),e(aY,jSr),e(N5,DSr),e(De,GSr),e(De,j5),e(j5,JTe),e(JTe,OSr),e(j5,VSr),e(j5,nY),e(nY,XSr),e(j5,zSr),e(De,QSr),e(De,D5),e(D5,YTe),e(YTe,WSr),e(D5,HSr),e(D5,sY),e(sY,USr),e(D5,JSr),e(De,YSr),e(De,G5),e(G5,KTe),e(KTe,KSr),e(G5,ZSr),e(G5,lY),e(lY,eRr),e(G5,oRr),e(Xr,rRr),M(O5,Xr,null),b(f,DIe,_),b(f,Oc,_),e(Oc,V5),e(V5,ZTe),M(cx,ZTe,null),e(Oc,tRr),e(Oc,e7e),e(e7e,aRr),b(f,GIe,_),b(f,br,_),M(fx,br,null),e(br,nRr),e(br,Vc),e(Vc,sRr),e(Vc,iY),e(iY,lRr),e(Vc,iRr),e(Vc,dY),e(dY,dRr),e(Vc,cRr),e(br,fRr),e(br,mx),e(mx,mRr),e(mx,o7e),e(o7e,gRr),e(mx,hRr),e(br,pRr),e(br,Xt),M(gx,Xt,null),e(Xt,uRr),e(Xt,r7e),e(r7e,_Rr),e(Xt,bRr),e(Xt,Xc),e(Xc,vRr),e(Xc,t7e),e(t7e,FRr),e(Xc,TRr),e(Xc,cY),e(cY,MRr),e(Xc,ERr),e(Xt,CRr),M(X5,Xt,null),e(br,wRr),e(br,zr),M(hx,zr,null),e(zr,ARr),e(zr,a7e),e(a7e,yRr),e(zr,LRr),e(zr,_n),e(_n,xRr),e(_n,n7e),e(n7e,$Rr),e(_n,kRr),e(_n,s7e),e(s7e,SRr),e(_n,RRr),e(_n,l7e),e(l7e,BRr),e(_n,PRr),e(zr,IRr),e(zr,Ge),e(Ge,z5),e(z5,i7e),e(i7e,qRr),e(z5,NRr),e(z5,fY),e(fY,jRr),e(z5,DRr),e(Ge,GRr),e(Ge,Q5),e(Q5,d7e),e(d7e,ORr),e(Q5,VRr),e(Q5,mY),e(mY,XRr),e(Q5,zRr),e(Ge,QRr),e(Ge,W5),e(W5,c7e),e(c7e,WRr),e(W5,HRr),e(W5,gY),e(gY,URr),e(W5,JRr),e(Ge,YRr),e(Ge,H5),e(H5,f7e),e(f7e,KRr),e(H5,ZRr),e(H5,hY),e(hY,eBr),e(H5,oBr),e(Ge,rBr),e(Ge,U5),e(U5,m7e),e(m7e,tBr),e(U5,aBr),e(U5,pY),e(pY,nBr),e(U5,sBr),e(Ge,lBr),e(Ge,J5),e(J5,g7e),e(g7e,iBr),e(J5,dBr),e(J5,uY),e(uY,cBr),e(J5,fBr),e(Ge,mBr),e(Ge,Y5),e(Y5,h7e),e(h7e,gBr),e(Y5,hBr),e(Y5,_Y),e(_Y,pBr),e(Y5,uBr),e(Ge,_Br),e(Ge,K5),e(K5,p7e),e(p7e,bBr),e(K5,vBr),e(K5,bY),e(bY,FBr),e(K5,TBr),e(zr,MBr),M(Z5,zr,null),b(f,OIe,_),b(f,zc,_),e(zc,eC),e(eC,u7e),M(px,u7e,null),e(zc,EBr),e(zc,_7e),e(_7e,CBr),b(f,VIe,_),b(f,vr,_),M(ux,vr,null),e(vr,wBr),e(vr,Qc),e(Qc,ABr),e(Qc,vY),e(vY,yBr),e(Qc,LBr),e(Qc,FY),e(FY,xBr),e(Qc,$Br),e(vr,kBr),e(vr,_x),e(_x,SBr),e(_x,b7e),e(b7e,RBr),e(_x,BBr),e(vr,PBr),e(vr,zt),M(bx,zt,null),e(zt,IBr),e(zt,v7e),e(v7e,qBr),e(zt,NBr),e(zt,Wc),e(Wc,jBr),e(Wc,F7e),e(F7e,DBr),e(Wc,GBr),e(Wc,TY),e(TY,OBr),e(Wc,VBr),e(zt,XBr),M(oC,zt,null),e(vr,zBr),e(vr,Qr),M(vx,Qr,null),e(Qr,QBr),e(Qr,T7e),e(T7e,WBr),e(Qr,HBr),e(Qr,bn),e(bn,UBr),e(bn,M7e),e(M7e,JBr),e(bn,YBr),e(bn,E7e),e(E7e,KBr),e(bn,ZBr),e(bn,C7e),e(C7e,ePr),e(bn,oPr),e(Qr,rPr),e(Qr,w7e),e(w7e,rC),e(rC,A7e),e(A7e,tPr),e(rC,aPr),e(rC,MY),e(MY,nPr),e(rC,sPr),e(Qr,lPr),M(tC,Qr,null),b(f,XIe,_),b(f,Hc,_),e(Hc,aC),e(aC,y7e),M(Fx,y7e,null),e(Hc,iPr),e(Hc,L7e),e(L7e,dPr),b(f,zIe,_),b(f,Fr,_),M(Tx,Fr,null),e(Fr,cPr),e(Fr,Uc),e(Uc,fPr),e(Uc,EY),e(EY,mPr),e(Uc,gPr),e(Uc,CY),e(CY,hPr),e(Uc,pPr),e(Fr,uPr),e(Fr,Mx),e(Mx,_Pr),e(Mx,x7e),e(x7e,bPr),e(Mx,vPr),e(Fr,FPr),e(Fr,Qt),M(Ex,Qt,null),e(Qt,TPr),e(Qt,$7e),e($7e,MPr),e(Qt,EPr),e(Qt,Jc),e(Jc,CPr),e(Jc,k7e),e(k7e,wPr),e(Jc,APr),e(Jc,wY),e(wY,yPr),e(Jc,LPr),e(Qt,xPr),M(nC,Qt,null),e(Fr,$Pr),e(Fr,Wr),M(Cx,Wr,null),e(Wr,kPr),e(Wr,S7e),e(S7e,SPr),e(Wr,RPr),e(Wr,vn),e(vn,BPr),e(vn,R7e),e(R7e,PPr),e(vn,IPr),e(vn,B7e),e(B7e,qPr),e(vn,NPr),e(vn,P7e),e(P7e,jPr),e(vn,DPr),e(Wr,GPr),e(Wr,wx),e(wx,sC),e(sC,I7e),e(I7e,OPr),e(sC,VPr),e(sC,AY),e(AY,XPr),e(sC,zPr),e(wx,QPr),e(wx,lC),e(lC,q7e),e(q7e,WPr),e(lC,HPr),e(lC,yY),e(yY,UPr),e(lC,JPr),e(Wr,YPr),M(iC,Wr,null),b(f,QIe,_),b(f,Yc,_),e(Yc,dC),e(dC,N7e),M(Ax,N7e,null),e(Yc,KPr),e(Yc,j7e),e(j7e,ZPr),b(f,WIe,_),b(f,Tr,_),M(yx,Tr,null),e(Tr,eIr),e(Tr,Kc),e(Kc,oIr),e(Kc,LY),e(LY,rIr),e(Kc,tIr),e(Kc,xY),e(xY,aIr),e(Kc,nIr),e(Tr,sIr),e(Tr,Lx),e(Lx,lIr),e(Lx,D7e),e(D7e,iIr),e(Lx,dIr),e(Tr,cIr),e(Tr,Wt),M(xx,Wt,null),e(Wt,fIr),e(Wt,G7e),e(G7e,mIr),e(Wt,gIr),e(Wt,Zc),e(Zc,hIr),e(Zc,O7e),e(O7e,pIr),e(Zc,uIr),e(Zc,$Y),e($Y,_Ir),e(Zc,bIr),e(Wt,vIr),M(cC,Wt,null),e(Tr,FIr),e(Tr,Hr),M($x,Hr,null),e(Hr,TIr),e(Hr,V7e),e(V7e,MIr),e(Hr,EIr),e(Hr,Fn),e(Fn,CIr),e(Fn,X7e),e(X7e,wIr),e(Fn,AIr),e(Fn,z7e),e(z7e,yIr),e(Fn,LIr),e(Fn,Q7e),e(Q7e,xIr),e(Fn,$Ir),e(Hr,kIr),e(Hr,W7e),e(W7e,fC),e(fC,H7e),e(H7e,SIr),e(fC,RIr),e(fC,kY),e(kY,BIr),e(fC,PIr),e(Hr,IIr),M(mC,Hr,null),HIe=!0},p(f,[_]){const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),df.$set(kx);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:f}),lg.$set(U7e);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:f}),jg.$set(J7e);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:f}),gh.$set(Y7e);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),hh.$set(Sx);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:f}),Sh.$set(K7e);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),Rh.$set(Tn);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:f}),Ih.$set(Z7e);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),wu.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),yu.$set(oMe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),h_.$set(Rx);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),u_.$set(rMe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),Z_.$set(Bx);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),o0.$set(tMe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),N0.$set(Px);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),D0.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),n1.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),l1.$set(sMe);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),tb.$set(ef);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),nb.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),Pb.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),qb.$set(dMe);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),Xb.$set(Ix);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),Qb.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),L2.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),$2.$set(mMe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),bv.$set(Jr);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),Fv.$set(qx);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),Ev.$set(gMe);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),wv.$set(Nx);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),Nv.$set(hMe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),Dv.$set(Yr);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),Vv.$set(pMe);const of={};_&2&&(of.$$scope={dirty:_,ctx:f}),zv.$set(of);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),oF.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),tF.$set(_Me);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),dF.$set(y);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),fF.$set(gC);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),TF.$set(bMe);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),EF.$set(vMe);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),yF.$set(hC);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),xF.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),PF.$set(TMe);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),qF.$set(pC);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),OF.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),XF.$set(EMe);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),HF.$set(uC);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),JF.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),ZF.$set(wMe);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),o6.$set(_C);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),l6.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),d6.$set(yMe);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),m6.$set(bC);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),h6.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),nT.$set(xMe);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),lT.$set(vC);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),kT.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),RT.$set(kMe);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),QT.$set(FC);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),HT.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),KT.$set(RMe);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),e7.$set(TC);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),T7.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),E7.$set(PMe);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),B7.$set(MC);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),I7.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),dM.$set(qMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),fM.$set(EC);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),xM.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),kM.$set(jMe);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),RM.$set(CC);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),PM.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),r4.$set(GMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),a4.$set(wC);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),w4.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),y4.$set(VMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),x4.$set(AC);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),k4.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),R4.$set(zMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),P4.$set(yC);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),lE.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),dE.$set(WMe);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),vE.$set(LC);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),TE.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),BE.$set(UMe);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),IE.$set(xC);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),WE.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),UE.$set(YMe);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),n5.$set($C);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),l5.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),b5.$set(ZMe);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),F5.$set(kC);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),k5.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),R5.$set(o4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),O5.$set(SC);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),X5.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),Z5.$set(t4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),oC.$set(RC);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),tC.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),nC.$set(n4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),iC.$set(BC);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),cC.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),mC.$set(l4e)},i(f){HIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(Sw.$$.fragment,f),E(Rw.$$.fragment,f),E(df.$$.fragment,f),E(Bw.$$.fragment,f),E(Pw.$$.fragment,f),E(Nw.$$.fragment,f),E(lg.$$.fragment,f),E(jw.$$.fragment,f),E(Dw.$$.fragment,f),E(Gw.$$.fragment,f),E(Xw.$$.fragment,f),E(jg.$$.fragment,f),E(zw.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(Jw.$$.fragment,f),E(gh.$$.fragment,f),E(hh.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(rA.$$.fragment,f),E(Sh.$$.fragment,f),E(Rh.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(lA.$$.fragment,f),E(Ih.$$.fragment,f),E(iA.$$.fragment,f),E(wu.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(mA.$$.fragment,f),E(yu.$$.fragment,f),E(gA.$$.fragment,f),E(h_.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(_A.$$.fragment,f),E(u_.$$.fragment,f),E(bA.$$.fragment,f),E(Z_.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(o0.$$.fragment,f),E(EA.$$.fragment,f),E(N0.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(D0.$$.fragment,f),E(LA.$$.fragment,f),E(n1.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(l1.$$.fragment,f),E(RA.$$.fragment,f),E(tb.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(nb.$$.fragment,f),E(NA.$$.fragment,f),E(Pb.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(qb.$$.fragment,f),E(VA.$$.fragment,f),E(Xb.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(Qb.$$.fragment,f),E(HA.$$.fragment,f),E(L2.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E($2.$$.fragment,f),E(ZA.$$.fragment,f),E(bv.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Fv.$$.fragment,f),E(ay.$$.fragment,f),E(Ev.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(wv.$$.fragment,f),E(dy.$$.fragment,f),E(Nv.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(Dv.$$.fragment,f),E(hy.$$.fragment,f),E(Vv.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(zv.$$.fragment,f),E(vy.$$.fragment,f),E(oF.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(tF.$$.fragment,f),E(Cy.$$.fragment,f),E(dF.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(fF.$$.fragment,f),E(xy.$$.fragment,f),E(TF.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(EF.$$.fragment,f),E(By.$$.fragment,f),E(yF.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(xF.$$.fragment,f),E(Dy.$$.fragment,f),E(PF.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(qF.$$.fragment,f),E(zy.$$.fragment,f),E(OF.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(XF.$$.fragment,f),E(Jy.$$.fragment,f),E(HF.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(JF.$$.fragment,f),E(rL.$$.fragment,f),E(ZF.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(o6.$$.fragment,f),E(lL.$$.fragment,f),E(l6.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(d6.$$.fragment,f),E(mL.$$.fragment,f),E(m6.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(h6.$$.fragment,f),E(_L.$$.fragment,f),E(nT.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(lT.$$.fragment,f),E(ML.$$.fragment,f),E(kT.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(RT.$$.fragment,f),E(yL.$$.fragment,f),E(QT.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(HT.$$.fragment,f),E(SL.$$.fragment,f),E(KT.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(e7.$$.fragment,f),E(qL.$$.fragment,f),E(T7.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(E7.$$.fragment,f),E(OL.$$.fragment,f),E(B7.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(I7.$$.fragment,f),E(WL.$$.fragment,f),E(dM.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(fM.$$.fragment,f),E(KL.$$.fragment,f),E(xM.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(kM.$$.fragment,f),E(t8.$$.fragment,f),E(RM.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(PM.$$.fragment,f),E(i8.$$.fragment,f),E(r4.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(a4.$$.fragment,f),E(g8.$$.fragment,f),E(w4.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(y4.$$.fragment,f),E(b8.$$.fragment,f),E(x4.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(k4.$$.fragment,f),E(E8.$$.fragment,f),E(R4.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(P4.$$.fragment,f),E(L8.$$.fragment,f),E(lE.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(dE.$$.fragment,f),E(R8.$$.fragment,f),E(vE.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(TE.$$.fragment,f),E(N8.$$.fragment,f),E(BE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(IE.$$.fragment,f),E(V8.$$.fragment,f),E(WE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(UE.$$.fragment,f),E(H8.$$.fragment,f),E(n5.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(l5.$$.fragment,f),E(Z8.$$.fragment,f),E(b5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(F5.$$.fragment,f),E(ax.$$.fragment,f),E(k5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(R5.$$.fragment,f),E(dx.$$.fragment,f),E(O5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(X5.$$.fragment,f),E(hx.$$.fragment,f),E(Z5.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(oC.$$.fragment,f),E(vx.$$.fragment,f),E(tC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(nC.$$.fragment,f),E(Cx.$$.fragment,f),E(iC.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(cC.$$.fragment,f),E($x.$$.fragment,f),E(mC.$$.fragment,f),HIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(Sw.$$.fragment,f),C(Rw.$$.fragment,f),C(df.$$.fragment,f),C(Bw.$$.fragment,f),C(Pw.$$.fragment,f),C(Nw.$$.fragment,f),C(lg.$$.fragment,f),C(jw.$$.fragment,f),C(Dw.$$.fragment,f),C(Gw.$$.fragment,f),C(Xw.$$.fragment,f),C(jg.$$.fragment,f),C(zw.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(Jw.$$.fragment,f),C(gh.$$.fragment,f),C(hh.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(rA.$$.fragment,f),C(Sh.$$.fragment,f),C(Rh.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(lA.$$.fragment,f),C(Ih.$$.fragment,f),C(iA.$$.fragment,f),C(wu.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(mA.$$.fragment,f),C(yu.$$.fragment,f),C(gA.$$.fragment,f),C(h_.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(_A.$$.fragment,f),C(u_.$$.fragment,f),C(bA.$$.fragment,f),C(Z_.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(o0.$$.fragment,f),C(EA.$$.fragment,f),C(N0.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(D0.$$.fragment,f),C(LA.$$.fragment,f),C(n1.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(l1.$$.fragment,f),C(RA.$$.fragment,f),C(tb.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(nb.$$.fragment,f),C(NA.$$.fragment,f),C(Pb.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(qb.$$.fragment,f),C(VA.$$.fragment,f),C(Xb.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(Qb.$$.fragment,f),C(HA.$$.fragment,f),C(L2.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C($2.$$.fragment,f),C(ZA.$$.fragment,f),C(bv.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Fv.$$.fragment,f),C(ay.$$.fragment,f),C(Ev.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(wv.$$.fragment,f),C(dy.$$.fragment,f),C(Nv.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(Dv.$$.fragment,f),C(hy.$$.fragment,f),C(Vv.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(zv.$$.fragment,f),C(vy.$$.fragment,f),C(oF.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(tF.$$.fragment,f),C(Cy.$$.fragment,f),C(dF.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(fF.$$.fragment,f),C(xy.$$.fragment,f),C(TF.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(EF.$$.fragment,f),C(By.$$.fragment,f),C(yF.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(xF.$$.fragment,f),C(Dy.$$.fragment,f),C(PF.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(qF.$$.fragment,f),C(zy.$$.fragment,f),C(OF.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(XF.$$.fragment,f),C(Jy.$$.fragment,f),C(HF.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(JF.$$.fragment,f),C(rL.$$.fragment,f),C(ZF.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(o6.$$.fragment,f),C(lL.$$.fragment,f),C(l6.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(d6.$$.fragment,f),C(mL.$$.fragment,f),C(m6.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(h6.$$.fragment,f),C(_L.$$.fragment,f),C(nT.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(lT.$$.fragment,f),C(ML.$$.fragment,f),C(kT.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(RT.$$.fragment,f),C(yL.$$.fragment,f),C(QT.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(HT.$$.fragment,f),C(SL.$$.fragment,f),C(KT.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(e7.$$.fragment,f),C(qL.$$.fragment,f),C(T7.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(E7.$$.fragment,f),C(OL.$$.fragment,f),C(B7.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(I7.$$.fragment,f),C(WL.$$.fragment,f),C(dM.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(fM.$$.fragment,f),C(KL.$$.fragment,f),C(xM.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(kM.$$.fragment,f),C(t8.$$.fragment,f),C(RM.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(PM.$$.fragment,f),C(i8.$$.fragment,f),C(r4.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(a4.$$.fragment,f),C(g8.$$.fragment,f),C(w4.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(y4.$$.fragment,f),C(b8.$$.fragment,f),C(x4.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(k4.$$.fragment,f),C(E8.$$.fragment,f),C(R4.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(P4.$$.fragment,f),C(L8.$$.fragment,f),C(lE.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(dE.$$.fragment,f),C(R8.$$.fragment,f),C(vE.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(TE.$$.fragment,f),C(N8.$$.fragment,f),C(BE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(IE.$$.fragment,f),C(V8.$$.fragment,f),C(WE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(UE.$$.fragment,f),C(H8.$$.fragment,f),C(n5.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(l5.$$.fragment,f),C(Z8.$$.fragment,f),C(b5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(F5.$$.fragment,f),C(ax.$$.fragment,f),C(k5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(R5.$$.fragment,f),C(dx.$$.fragment,f),C(O5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(X5.$$.fragment,f),C(hx.$$.fragment,f),C(Z5.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(oC.$$.fragment,f),C(vx.$$.fragment,f),C(tC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(nC.$$.fragment,f),C(Cx.$$.fragment,f),C(iC.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(cC.$$.fragment,f),C($x.$$.fragment,f),C(mC.$$.fragment,f),HIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(tf),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(nf),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(WBe),f&&t(di),w(Sw),f&&t(HBe),f&&t(An),f&&t(UBe),w(Rw,f),f&&t(JBe),f&&t(U9),f&&t(YBe),w(df,f),f&&t(KBe),f&&t(ci),w(Bw),f&&t(ZBe),f&&t(Co),w(Pw),w(Nw),w(lg),w(jw),f&&t(ePe),f&&t(mi),w(Dw),f&&t(oPe),f&&t(wo),w(Gw),w(Xw),w(jg),w(zw),f&&t(rPe),f&&t(gi),w(Qw),f&&t(tPe),f&&t(Ao),w(Ww),w(Jw),w(gh),w(hh),w(Yw),f&&t(aPe),f&&t(hi),w(Kw),f&&t(nPe),f&&t(yo),w(Zw),w(rA),w(Sh),w(Rh),w(tA),f&&t(sPe),f&&t(ui),w(aA),f&&t(lPe),f&&t(Lo),w(nA),w(lA),w(Ih),w(iA),w(wu),f&&t(iPe),f&&t(vi),w(dA),f&&t(dPe),f&&t(xo),w(cA),w(mA),w(yu),w(gA),w(h_),f&&t(cPe),f&&t(Mi),w(hA),f&&t(fPe),f&&t($o),w(pA),w(_A),w(u_),w(bA),w(Z_),f&&t(mPe),f&&t(wi),w(vA),f&&t(gPe),f&&t(ko),w(FA),w(MA),w(o0),w(EA),w(N0),f&&t(hPe),f&&t(Li),w(CA),f&&t(pPe),f&&t(So),w(wA),w(yA),w(D0),w(LA),w(n1),f&&t(uPe),f&&t(ki),w(xA),f&&t(_Pe),f&&t(Ro),w($A),w(SA),w(l1),w(RA),w(tb),f&&t(bPe),f&&t(Bi),w(BA),f&&t(vPe),f&&t(Bo),w(PA),w(qA),w(nb),w(NA),w(Pb),f&&t(FPe),f&&t(qi),w(jA),f&&t(TPe),f&&t(Po),w(DA),w(OA),w(qb),w(VA),w(Xb),f&&t(MPe),f&&t(Di),w(XA),f&&t(EPe),f&&t(Io),w(zA),w(WA),w(Qb),w(HA),w(L2),f&&t(CPe),f&&t(Vi),w(UA),f&&t(wPe),f&&t(qo),w(JA),w(KA),w($2),w(ZA),w(bv),f&&t(APe),f&&t(Qi),w(ey),f&&t(yPe),f&&t(No),w(oy),w(ty),w(Fv),w(ay),w(Ev),f&&t(LPe),f&&t(Ui),w(ny),f&&t(xPe),f&&t(jo),w(sy),w(iy),w(wv),w(dy),w(Nv),f&&t($Pe),f&&t(Ki),w(cy),f&&t(kPe),f&&t(Do),w(fy),w(gy),w(Dv),w(hy),w(Vv),f&&t(SPe),f&&t(od),w(py),f&&t(RPe),f&&t(Go),w(uy),w(by),w(zv),w(vy),w(oF),f&&t(BPe),f&&t(ad),w(Fy),f&&t(PPe),f&&t(Oo),w(Ty),w(Ey),w(tF),w(Cy),w(dF),f&&t(IPe),f&&t(ld),w(wy),f&&t(qPe),f&&t(Vo),w(Ay),w(Ly),w(fF),w(xy),w(TF),f&&t(NPe),f&&t(cd),w($y),f&&t(jPe),f&&t(Xo),w(ky),w(Ry),w(EF),w(By),w(yF),f&&t(DPe),f&&t(gd),w(Iy),f&&t(GPe),f&&t(zo),w(qy),w(jy),w(xF),w(Dy),w(PF),f&&t(OPe),f&&t(ud),w(Gy),f&&t(VPe),f&&t(Qo),w(Oy),w(Xy),w(qF),w(zy),w(OF),f&&t(XPe),f&&t(Fd),w(Qy),f&&t(zPe),f&&t(Wo),w(Wy),w(Uy),w(XF),w(Jy),w(HF),f&&t(QPe),f&&t(Ed),w(Ky),f&&t(WPe),f&&t(Ho),w(Zy),w(oL),w(JF),w(rL),w(ZF),f&&t(HPe),f&&t(Ad),w(tL),f&&t(UPe),f&&t(Uo),w(aL),w(sL),w(o6),w(lL),w(l6),f&&t(JPe),f&&t(xd),w(iL),f&&t(YPe),f&&t(Jo),w(dL),w(fL),w(d6),w(mL),w(m6),f&&t(KPe),f&&t(Sd),w(gL),f&&t(ZPe),f&&t(Yo),w(hL),w(uL),w(h6),w(_L),w(nT),f&&t(eIe),f&&t(Pd),w(bL),f&&t(oIe),f&&t(Ko),w(vL),w(TL),w(lT),w(ML),w(kT),f&&t(rIe),f&&t(Nd),w(EL),f&&t(tIe),f&&t(Zo),w(CL),w(AL),w(RT),w(yL),w(QT),f&&t(aIe),f&&t(Gd),w(LL),f&&t(nIe),f&&t(er),w(xL),w(kL),w(HT),w(SL),w(KT),f&&t(sIe),f&&t(zd),w(RL),f&&t(lIe),f&&t(or),w(BL),w(IL),w(e7),w(qL),w(T7),f&&t(iIe),f&&t(Hd),w(NL),f&&t(dIe),f&&t(rr),w(jL),w(GL),w(E7),w(OL),w(B7),f&&t(cIe),f&&t(Yd),w(VL),f&&t(fIe),f&&t(tr),w(XL),w(QL),w(I7),w(WL),w(dM),f&&t(mIe),f&&t(ec),w(HL),f&&t(gIe),f&&t(ar),w(UL),w(YL),w(fM),w(KL),w(xM),f&&t(hIe),f&&t(tc),w(ZL),f&&t(pIe),f&&t(nr),w(e8),w(r8),w(kM),w(t8),w(RM),f&&t(uIe),f&&t(sc),w(a8),f&&t(_Ie),f&&t(sr),w(n8),w(l8),w(PM),w(i8),w(r4),f&&t(bIe),f&&t(dc),w(d8),f&&t(vIe),f&&t(lr),w(c8),w(m8),w(a4),w(g8),w(w4),f&&t(FIe),f&&t(mc),w(h8),f&&t(TIe),f&&t(ir),w(p8),w(_8),w(y4),w(b8),w(x4),f&&t(MIe),f&&t(pc),w(v8),f&&t(EIe),f&&t(dr),w(F8),w(M8),w(k4),w(E8),w(R4),f&&t(CIe),f&&t(bc),w(C8),f&&t(wIe),f&&t(cr),w(w8),w(y8),w(P4),w(L8),w(lE),f&&t(AIe),f&&t(Tc),w(x8),f&&t(yIe),f&&t(fr),w($8),w(S8),w(dE),w(R8),w(vE),f&&t(LIe),f&&t(Cc),w(B8),f&&t(xIe),f&&t(mr),w(P8),w(q8),w(TE),w(N8),w(BE),f&&t($Ie),f&&t(yc),w(j8),f&&t(kIe),f&&t(gr),w(D8),w(O8),w(IE),w(V8),w(WE),f&&t(SIe),f&&t($c),w(X8),f&&t(RIe),f&&t(hr),w(z8),w(W8),w(UE),w(H8),w(n5),f&&t(BIe),f&&t(Rc),w(U8),f&&t(PIe),f&&t(pr),w(J8),w(K8),w(l5),w(Z8),w(b5),f&&t(IIe),f&&t(Ic),w(ex),f&&t(qIe),f&&t(ur),w(ox),w(tx),w(F5),w(ax),w(k5),f&&t(NIe),f&&t(jc),w(nx),f&&t(jIe),f&&t(_r),w(sx),w(ix),w(R5),w(dx),w(O5),f&&t(DIe),f&&t(Oc),w(cx),f&&t(GIe),f&&t(br),w(fx),w(gx),w(X5),w(hx),w(Z5),f&&t(OIe),f&&t(zc),w(px),f&&t(VIe),f&&t(vr),w(ux),w(bx),w(oC),w(vx),w(tC),f&&t(XIe),f&&t(Hc),w(Fx),f&&t(zIe),f&&t(Fr),w(Tx),w(Ex),w(nC),w(Cx),w(iC),f&&t(QIe),f&&t(Yc),w(Ax),f&&t(WIe),f&&t(Tr),w(yx),w(xx),w(cC),w($x),w(mC)}}}const Xwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function zwt(L){return WCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Kwt extends VCt{constructor(g){super();XCt(this,g,zwt,Vwt,zCt,{})}}export{Kwt as default,Xwt as metadata};
