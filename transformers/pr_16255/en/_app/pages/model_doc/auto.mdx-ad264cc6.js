import{S as nMt,i as sMt,s as lMt,e as a,k as l,w as f,t as o,M as iMt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-6b77c823.js";import{T as ikr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function dMt(Ii){let J,$e,de,pe,io,fe,Me,Vo,Ni,If,fa,ji,Di,n3,Nf,Be,co,qi,Gn,s3,On,Xn,l3,Gi,Vn,i3,Oi,jf,qa;return{c(){J=a("p"),$e=o("If your "),de=a("code"),pe=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Me=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ni=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Di=o('"new-model"'),n3=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),qi=a("code"),Gn=o("NewModel"),s3=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),l3=o(`, make sure its
`),Gi=a("code"),Vn=o("config_class"),i3=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var _e=s(J);$e=r(_e,"If your "),de=n(_e,"CODE",{});var K7=s(de);pe=r(K7,"NewModelConfig"),K7.forEach(t),io=r(_e," is a subclass of "),fe=n(_e,"CODE",{});var Xi=s(fe);Me=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(_e,`, make sure its
`),Ni=n(_e,"CODE",{});var Z7=s(Ni);If=r(Z7,"model_type"),Z7.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),ji=n(_e,"CODE",{});var e9=s(ji);Di=r(e9,'"new-model"'),e9.forEach(t),n3=r(_e,")."),_e.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Ga=s(qi);Gn=r(Ga,"NewModel"),Ga.forEach(t),s3=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var o9=s(On);Xn=r(o9,"PreTrainedModel"),o9.forEach(t),l3=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Df=s(Gi);Vn=r(Df,"config_class"),Df.forEach(t),i3=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var r9=s(Oi);jf=r(r9,"NewModelConfig"),r9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,J,_e),e(J,$e),e(J,de),e(de,pe),e(J,io),e(J,fe),e(fe,Me),e(J,Vo),e(J,Ni),e(Ni,If),e(J,fa),e(J,ji),e(ji,Di),e(J,n3),b(fo,Nf,_e),b(fo,Be,_e),e(Be,co),e(Be,qi),e(qi,Gn),e(Be,s3),e(Be,On),e(On,Xn),e(Be,l3),e(Be,Gi),e(Gi,Vn),e(Be,i3),e(Be,Oi),e(Oi,jf),e(Be,qa)},d(fo){fo&&t(J),fo&&t(Nf),fo&&t(Be)}}}function cMt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function fMt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function mMt(Ii){let J,$e,de,pe,io,fe,Me,Vo,Ni,If,fa,ji,Di,n3,Nf,Be,co,qi,Gn,s3,On,Xn,l3,Gi,Vn,i3,Oi,jf,qa,fo,_e,K7,Xi,Z7,e9,zo,Ga,o9,Df,r9,h$e,eke,Vi,qf,jQ,d3,p$e,DQ,_$e,oke,zn,u$e,qQ,b$e,v$e,GQ,T$e,F$e,rke,c3,tke,t9,C$e,ake,Gf,nke,zi,Of,OQ,f3,M$e,XQ,E$e,ske,Wo,m3,y$e,g3,w$e,a9,A$e,L$e,B$e,h3,x$e,VQ,k$e,R$e,S$e,mo,p3,P$e,zQ,$$e,I$e,Wi,N$e,WQ,j$e,D$e,QQ,q$e,G$e,O$e,v,Xf,HQ,X$e,V$e,n9,z$e,W$e,Q$e,Vf,UQ,H$e,U$e,s9,J$e,Y$e,K$e,zf,JQ,Z$e,eIe,l9,oIe,rIe,tIe,Wf,YQ,aIe,nIe,i9,sIe,lIe,iIe,Qf,KQ,dIe,cIe,d9,fIe,mIe,gIe,Hf,ZQ,hIe,pIe,c9,_Ie,uIe,bIe,Uf,eH,vIe,TIe,f9,FIe,CIe,MIe,Jf,oH,EIe,yIe,m9,wIe,AIe,LIe,Yf,rH,BIe,xIe,g9,kIe,RIe,SIe,Kf,tH,PIe,$Ie,h9,IIe,NIe,jIe,Zf,aH,DIe,qIe,p9,GIe,OIe,XIe,em,nH,VIe,zIe,_9,WIe,QIe,HIe,om,sH,UIe,JIe,u9,YIe,KIe,ZIe,rm,lH,eNe,oNe,b9,rNe,tNe,aNe,tm,iH,nNe,sNe,v9,lNe,iNe,dNe,am,dH,cNe,fNe,T9,mNe,gNe,hNe,nm,cH,pNe,_Ne,F9,uNe,bNe,vNe,sm,fH,TNe,FNe,C9,CNe,MNe,ENe,lm,mH,yNe,wNe,M9,ANe,LNe,BNe,im,gH,xNe,kNe,E9,RNe,SNe,PNe,dm,hH,$Ne,INe,y9,NNe,jNe,DNe,cm,pH,qNe,GNe,w9,ONe,XNe,VNe,fm,_H,zNe,WNe,A9,QNe,HNe,UNe,mm,uH,JNe,YNe,L9,KNe,ZNe,eje,gm,bH,oje,rje,B9,tje,aje,nje,hm,vH,sje,lje,x9,ije,dje,cje,pm,TH,fje,mje,k9,gje,hje,pje,_m,FH,_je,uje,R9,bje,vje,Tje,um,CH,Fje,Cje,S9,Mje,Eje,yje,bm,MH,wje,Aje,P9,Lje,Bje,xje,vm,EH,kje,Rje,$9,Sje,Pje,$je,Tm,yH,Ije,Nje,I9,jje,Dje,qje,Fm,wH,Gje,Oje,N9,Xje,Vje,zje,Cm,AH,Wje,Qje,j9,Hje,Uje,Jje,Mm,LH,Yje,Kje,D9,Zje,eDe,oDe,Em,BH,rDe,tDe,q9,aDe,nDe,sDe,ym,xH,lDe,iDe,G9,dDe,cDe,fDe,wm,kH,mDe,gDe,O9,hDe,pDe,_De,Am,RH,uDe,bDe,X9,vDe,TDe,FDe,Lm,SH,CDe,MDe,V9,EDe,yDe,wDe,Bm,PH,ADe,LDe,z9,BDe,xDe,kDe,xm,$H,RDe,SDe,W9,PDe,$De,IDe,km,IH,NDe,jDe,Q9,DDe,qDe,GDe,Rm,NH,ODe,XDe,H9,VDe,zDe,WDe,Sm,jH,QDe,HDe,U9,UDe,JDe,YDe,Pm,DH,KDe,ZDe,J9,eqe,oqe,rqe,$m,qH,tqe,aqe,Y9,nqe,sqe,lqe,Im,GH,iqe,dqe,K9,cqe,fqe,mqe,Nm,OH,gqe,hqe,Z9,pqe,_qe,uqe,jm,XH,bqe,vqe,eB,Tqe,Fqe,Cqe,Dm,VH,Mqe,Eqe,oB,yqe,wqe,Aqe,qm,zH,Lqe,Bqe,rB,xqe,kqe,Rqe,Gm,WH,Sqe,Pqe,tB,$qe,Iqe,Nqe,Om,QH,jqe,Dqe,aB,qqe,Gqe,Oqe,Xm,HH,Xqe,Vqe,nB,zqe,Wqe,Qqe,Vm,UH,Hqe,Uqe,sB,Jqe,Yqe,Kqe,zm,JH,Zqe,eGe,lB,oGe,rGe,tGe,Wm,YH,aGe,nGe,iB,sGe,lGe,iGe,Qm,KH,dGe,cGe,dB,fGe,mGe,gGe,Hm,ZH,hGe,pGe,cB,_Ge,uGe,bGe,Um,eU,vGe,TGe,fB,FGe,CGe,MGe,Jm,oU,EGe,yGe,mB,wGe,AGe,LGe,Ym,rU,BGe,xGe,gB,kGe,RGe,SGe,Km,tU,PGe,$Ge,hB,IGe,NGe,jGe,Zm,aU,DGe,qGe,pB,GGe,OGe,XGe,eg,nU,VGe,zGe,_B,WGe,QGe,HGe,og,sU,UGe,JGe,uB,YGe,KGe,ZGe,rg,lU,eOe,oOe,bB,rOe,tOe,aOe,tg,iU,nOe,sOe,vB,lOe,iOe,dOe,ag,dU,cOe,fOe,TB,mOe,gOe,hOe,ng,cU,pOe,_Oe,FB,uOe,bOe,vOe,sg,fU,TOe,FOe,CB,COe,MOe,EOe,lg,mU,yOe,wOe,MB,AOe,LOe,BOe,ig,gU,xOe,kOe,EB,ROe,SOe,POe,dg,hU,$Oe,IOe,yB,NOe,jOe,DOe,cg,pU,qOe,GOe,wB,OOe,XOe,VOe,fg,_U,zOe,WOe,AB,QOe,HOe,UOe,mg,uU,JOe,YOe,LB,KOe,ZOe,eXe,gg,bU,oXe,rXe,BB,tXe,aXe,nXe,hg,vU,sXe,lXe,xB,iXe,dXe,cXe,pg,TU,fXe,mXe,kB,gXe,hXe,pXe,_g,FU,_Xe,uXe,RB,bXe,vXe,TXe,ug,CU,FXe,CXe,SB,MXe,EXe,yXe,bg,MU,wXe,AXe,PB,LXe,BXe,xXe,vg,EU,kXe,RXe,$B,SXe,PXe,$Xe,Tg,yU,IXe,NXe,IB,jXe,DXe,qXe,Fg,wU,GXe,OXe,NB,XXe,VXe,zXe,Cg,AU,WXe,QXe,jB,HXe,UXe,JXe,Mg,LU,YXe,KXe,DB,ZXe,eVe,oVe,Eg,BU,rVe,tVe,qB,aVe,nVe,sVe,yg,xU,lVe,iVe,GB,dVe,cVe,fVe,wg,kU,mVe,gVe,OB,hVe,pVe,_Ve,Ag,RU,uVe,bVe,XB,vVe,TVe,FVe,Lg,SU,CVe,MVe,VB,EVe,yVe,wVe,Bg,PU,AVe,LVe,zB,BVe,xVe,kVe,xg,$U,RVe,SVe,WB,PVe,$Ve,IVe,kg,IU,NVe,jVe,QB,DVe,qVe,GVe,NU,OVe,XVe,_3,VVe,Rg,u3,zVe,jU,WVe,lke,Qi,Sg,DU,b3,QVe,qU,HVe,ike,Qo,v3,UVe,T3,JVe,HB,YVe,KVe,ZVe,F3,eze,GU,oze,rze,tze,go,C3,aze,OU,nze,sze,Oa,lze,XU,ize,dze,VU,cze,fze,zU,mze,gze,hze,E,Wn,WU,pze,_ze,UB,uze,bze,JB,vze,Tze,Fze,Qn,QU,Cze,Mze,YB,Eze,yze,KB,wze,Aze,Lze,Hn,HU,Bze,xze,ZB,kze,Rze,ex,Sze,Pze,$ze,Pg,UU,Ize,Nze,ox,jze,Dze,qze,Un,JU,Gze,Oze,rx,Xze,Vze,tx,zze,Wze,Qze,$g,YU,Hze,Uze,ax,Jze,Yze,Kze,Ig,KU,Zze,eWe,nx,oWe,rWe,tWe,Ng,ZU,aWe,nWe,sx,sWe,lWe,iWe,Jn,eJ,dWe,cWe,lx,fWe,mWe,ix,gWe,hWe,pWe,Yn,oJ,_We,uWe,dx,bWe,vWe,cx,TWe,FWe,CWe,Kn,rJ,MWe,EWe,fx,yWe,wWe,mx,AWe,LWe,BWe,jg,tJ,xWe,kWe,gx,RWe,SWe,PWe,Dg,aJ,$We,IWe,hx,NWe,jWe,DWe,Zn,nJ,qWe,GWe,px,OWe,XWe,_x,VWe,zWe,WWe,qg,sJ,QWe,HWe,ux,UWe,JWe,YWe,es,lJ,KWe,ZWe,bx,eQe,oQe,vx,rQe,tQe,aQe,os,iJ,nQe,sQe,Tx,lQe,iQe,Fx,dQe,cQe,fQe,rs,dJ,mQe,gQe,Cx,hQe,pQe,cJ,_Qe,uQe,bQe,Gg,fJ,vQe,TQe,Mx,FQe,CQe,MQe,ts,mJ,EQe,yQe,Ex,wQe,AQe,yx,LQe,BQe,xQe,Og,gJ,kQe,RQe,wx,SQe,PQe,$Qe,as,hJ,IQe,NQe,Ax,jQe,DQe,Lx,qQe,GQe,OQe,ns,pJ,XQe,VQe,Bx,zQe,WQe,xx,QQe,HQe,UQe,ss,_J,JQe,YQe,kx,KQe,ZQe,Rx,eHe,oHe,rHe,Xg,uJ,tHe,aHe,Sx,nHe,sHe,lHe,ls,bJ,iHe,dHe,Px,cHe,fHe,$x,mHe,gHe,hHe,Vg,vJ,pHe,_He,Ix,uHe,bHe,vHe,is,TJ,THe,FHe,Nx,CHe,MHe,jx,EHe,yHe,wHe,ds,FJ,AHe,LHe,Dx,BHe,xHe,qx,kHe,RHe,SHe,cs,CJ,PHe,$He,Gx,IHe,NHe,Ox,jHe,DHe,qHe,fs,MJ,GHe,OHe,Xx,XHe,VHe,Vx,zHe,WHe,QHe,zg,EJ,HHe,UHe,zx,JHe,YHe,KHe,ms,yJ,ZHe,eUe,Wx,oUe,rUe,Qx,tUe,aUe,nUe,gs,wJ,sUe,lUe,Hx,iUe,dUe,Ux,cUe,fUe,mUe,hs,AJ,gUe,hUe,Jx,pUe,_Ue,Yx,uUe,bUe,vUe,ps,LJ,TUe,FUe,Kx,CUe,MUe,Zx,EUe,yUe,wUe,_s,BJ,AUe,LUe,ek,BUe,xUe,ok,kUe,RUe,SUe,us,xJ,PUe,$Ue,rk,IUe,NUe,tk,jUe,DUe,qUe,Wg,kJ,GUe,OUe,ak,XUe,VUe,zUe,bs,RJ,WUe,QUe,nk,HUe,UUe,sk,JUe,YUe,KUe,Qg,SJ,ZUe,eJe,lk,oJe,rJe,tJe,Hg,PJ,aJe,nJe,ik,sJe,lJe,iJe,vs,$J,dJe,cJe,dk,fJe,mJe,ck,gJe,hJe,pJe,Ts,IJ,_Je,uJe,fk,bJe,vJe,mk,TJe,FJe,CJe,Ug,NJ,MJe,EJe,gk,yJe,wJe,AJe,Fs,jJ,LJe,BJe,hk,xJe,kJe,pk,RJe,SJe,PJe,Cs,DJ,$Je,IJe,_k,NJe,jJe,uk,DJe,qJe,GJe,Ms,qJ,OJe,XJe,bk,VJe,zJe,vk,WJe,QJe,HJe,Es,GJ,UJe,JJe,Tk,YJe,KJe,Fk,ZJe,eYe,oYe,ys,OJ,rYe,tYe,Ck,aYe,nYe,Mk,sYe,lYe,iYe,Jg,XJ,dYe,cYe,Ek,fYe,mYe,gYe,Yg,VJ,hYe,pYe,yk,_Ye,uYe,bYe,Kg,zJ,vYe,TYe,wk,FYe,CYe,MYe,Zg,WJ,EYe,yYe,Ak,wYe,AYe,LYe,ws,QJ,BYe,xYe,Lk,kYe,RYe,Bk,SYe,PYe,$Ye,eh,HJ,IYe,NYe,xk,jYe,DYe,qYe,As,UJ,GYe,OYe,kk,XYe,VYe,Rk,zYe,WYe,QYe,Ls,JJ,HYe,UYe,Sk,JYe,YYe,Pk,KYe,ZYe,eKe,Bs,YJ,oKe,rKe,$k,tKe,aKe,Ik,nKe,sKe,lKe,xs,KJ,iKe,dKe,Nk,cKe,fKe,jk,mKe,gKe,hKe,ks,ZJ,pKe,_Ke,Dk,uKe,bKe,qk,vKe,TKe,FKe,Rs,eY,CKe,MKe,Gk,EKe,yKe,Ok,wKe,AKe,LKe,oh,oY,BKe,xKe,Xk,kKe,RKe,SKe,rh,rY,PKe,$Ke,Vk,IKe,NKe,jKe,Ss,tY,DKe,qKe,zk,GKe,OKe,Wk,XKe,VKe,zKe,Ps,aY,WKe,QKe,Qk,HKe,UKe,Hk,JKe,YKe,KKe,$s,nY,ZKe,eZe,Uk,oZe,rZe,Jk,tZe,aZe,nZe,th,sY,sZe,lZe,Yk,iZe,dZe,cZe,ah,lY,fZe,mZe,Kk,gZe,hZe,pZe,nh,iY,_Ze,uZe,Zk,bZe,vZe,TZe,sh,dY,FZe,CZe,eR,MZe,EZe,yZe,Is,cY,wZe,AZe,oR,LZe,BZe,rR,xZe,kZe,RZe,lh,fY,SZe,PZe,tR,$Ze,IZe,NZe,ih,mY,jZe,DZe,aR,qZe,GZe,OZe,Ns,gY,XZe,VZe,nR,zZe,WZe,sR,QZe,HZe,UZe,js,hY,JZe,YZe,lR,KZe,ZZe,iR,eeo,oeo,reo,pY,teo,aeo,M3,neo,dh,E3,seo,_Y,leo,dke,Hi,ch,uY,y3,ieo,bY,deo,cke,Ho,w3,ceo,A3,feo,dR,meo,geo,heo,L3,peo,vY,_eo,ueo,beo,Ie,B3,veo,TY,Teo,Feo,Xa,Ceo,FY,Meo,Eeo,CY,yeo,weo,MY,Aeo,Leo,Beo,re,fh,EY,xeo,keo,cR,Reo,Seo,Peo,mh,yY,$eo,Ieo,fR,Neo,jeo,Deo,gh,wY,qeo,Geo,mR,Oeo,Xeo,Veo,hh,AY,zeo,Weo,gR,Qeo,Heo,Ueo,ph,LY,Jeo,Yeo,hR,Keo,Zeo,eoo,_h,BY,ooo,roo,pR,too,aoo,noo,uh,xY,soo,loo,_R,ioo,doo,coo,bh,kY,foo,moo,uR,goo,hoo,poo,vh,RY,_oo,uoo,bR,boo,voo,Too,Th,SY,Foo,Coo,vR,Moo,Eoo,yoo,Fh,PY,woo,Aoo,TR,Loo,Boo,xoo,Ch,$Y,koo,Roo,FR,Soo,Poo,$oo,Mh,IY,Ioo,Noo,CR,joo,Doo,qoo,Eh,NY,Goo,Ooo,MR,Xoo,Voo,zoo,yh,jY,Woo,Qoo,ER,Hoo,Uoo,Joo,wh,DY,Yoo,Koo,yR,Zoo,ero,oro,Ah,qY,rro,tro,wR,aro,nro,sro,Lh,GY,lro,iro,AR,dro,cro,fro,Bh,mro,OY,gro,hro,x3,pro,xh,k3,_ro,XY,uro,fke,Ui,kh,VY,R3,bro,zY,vro,mke,Uo,S3,Tro,P3,Fro,LR,Cro,Mro,Ero,$3,yro,WY,wro,Aro,Lro,Ne,I3,Bro,QY,xro,kro,Ji,Rro,HY,Sro,Pro,UY,$ro,Iro,Nro,xe,Rh,JY,jro,Dro,BR,qro,Gro,Oro,Sh,YY,Xro,Vro,xR,zro,Wro,Qro,Ph,KY,Hro,Uro,kR,Jro,Yro,Kro,$h,ZY,Zro,eto,RR,oto,rto,tto,Ih,eK,ato,nto,SR,sto,lto,ito,Nh,oK,dto,cto,PR,fto,mto,gto,jh,rK,hto,pto,$R,_to,uto,bto,Dh,tK,vto,Tto,IR,Fto,Cto,Mto,qh,Eto,aK,yto,wto,N3,Ato,Gh,j3,Lto,nK,Bto,gke,Yi,Oh,sK,D3,xto,lK,kto,hke,Jo,q3,Rto,Ki,Sto,iK,Pto,$to,dK,Ito,Nto,jto,G3,Dto,cK,qto,Gto,Oto,Vr,O3,Xto,fK,Vto,zto,Zi,Wto,mK,Qto,Hto,gK,Uto,Jto,Yto,hK,Kto,Zto,X3,eao,je,V3,oao,pK,rao,tao,Va,aao,_K,nao,sao,uK,lao,iao,bK,dao,cao,fao,F,Xh,vK,mao,gao,NR,hao,pao,_ao,Vh,TK,uao,bao,jR,vao,Tao,Fao,zh,FK,Cao,Mao,DR,Eao,yao,wao,Wh,CK,Aao,Lao,qR,Bao,xao,kao,Qh,MK,Rao,Sao,GR,Pao,$ao,Iao,Hh,EK,Nao,jao,OR,Dao,qao,Gao,Uh,yK,Oao,Xao,XR,Vao,zao,Wao,Jh,wK,Qao,Hao,VR,Uao,Jao,Yao,Yh,AK,Kao,Zao,zR,eno,ono,rno,Kh,LK,tno,ano,WR,nno,sno,lno,Zh,BK,ino,dno,QR,cno,fno,mno,ep,xK,gno,hno,HR,pno,_no,uno,op,kK,bno,vno,UR,Tno,Fno,Cno,rp,RK,Mno,Eno,JR,yno,wno,Ano,tp,SK,Lno,Bno,YR,xno,kno,Rno,ap,PK,Sno,Pno,KR,$no,Ino,Nno,np,$K,jno,Dno,ZR,qno,Gno,Ono,sp,IK,Xno,Vno,eS,zno,Wno,Qno,lp,NK,Hno,Uno,oS,Jno,Yno,Kno,ip,jK,Zno,eso,rS,oso,rso,tso,dp,DK,aso,nso,tS,sso,lso,iso,cp,qK,dso,cso,aS,fso,mso,gso,fp,GK,hso,pso,nS,_so,uso,bso,mp,OK,vso,Tso,sS,Fso,Cso,Mso,gp,XK,Eso,yso,lS,wso,Aso,Lso,hp,VK,Bso,xso,iS,kso,Rso,Sso,pp,zK,Pso,$so,dS,Iso,Nso,jso,Ds,WK,Dso,qso,cS,Gso,Oso,fS,Xso,Vso,zso,_p,QK,Wso,Qso,mS,Hso,Uso,Jso,up,HK,Yso,Kso,gS,Zso,elo,olo,bp,UK,rlo,tlo,hS,alo,nlo,slo,vp,JK,llo,ilo,pS,dlo,clo,flo,Tp,YK,mlo,glo,_S,hlo,plo,_lo,Fp,KK,ulo,blo,uS,vlo,Tlo,Flo,Cp,ZK,Clo,Mlo,bS,Elo,ylo,wlo,Mp,eZ,Alo,Llo,vS,Blo,xlo,klo,Ep,oZ,Rlo,Slo,TS,Plo,$lo,Ilo,yp,rZ,Nlo,jlo,FS,Dlo,qlo,Glo,wp,tZ,Olo,Xlo,CS,Vlo,zlo,Wlo,Ap,aZ,Qlo,Hlo,MS,Ulo,Jlo,Ylo,Lp,nZ,Klo,Zlo,ES,eio,oio,rio,Bp,sZ,tio,aio,yS,nio,sio,lio,xp,lZ,iio,dio,wS,cio,fio,mio,kp,iZ,gio,hio,AS,pio,_io,uio,Rp,dZ,bio,vio,LS,Tio,Fio,Cio,Sp,cZ,Mio,Eio,BS,yio,wio,Aio,Pp,fZ,Lio,Bio,xS,xio,kio,Rio,$p,mZ,Sio,Pio,kS,$io,Iio,Nio,Ip,gZ,jio,Dio,RS,qio,Gio,Oio,Np,hZ,Xio,Vio,SS,zio,Wio,Qio,jp,pZ,Hio,Uio,PS,Jio,Yio,Kio,Dp,_Z,Zio,edo,$S,odo,rdo,tdo,qp,uZ,ado,ndo,IS,sdo,ldo,ido,Gp,bZ,ddo,cdo,NS,fdo,mdo,gdo,Op,vZ,hdo,pdo,jS,_do,udo,bdo,Xp,TZ,vdo,Tdo,DS,Fdo,Cdo,Mdo,Vp,FZ,Edo,ydo,qS,wdo,Ado,Ldo,zp,CZ,Bdo,xdo,GS,kdo,Rdo,Sdo,Wp,MZ,Pdo,$do,OS,Ido,Ndo,jdo,Qp,EZ,Ddo,qdo,XS,Gdo,Odo,Xdo,Hp,yZ,Vdo,zdo,VS,Wdo,Qdo,Hdo,Up,wZ,Udo,Jdo,zS,Ydo,Kdo,Zdo,Jp,AZ,eco,oco,WS,rco,tco,aco,Yp,LZ,nco,sco,QS,lco,ico,dco,Kp,BZ,cco,fco,HS,mco,gco,hco,Zp,xZ,pco,_co,US,uco,bco,vco,e_,kZ,Tco,Fco,JS,Cco,Mco,Eco,o_,RZ,yco,wco,YS,Aco,Lco,Bco,r_,SZ,xco,kco,KS,Rco,Sco,Pco,t_,PZ,$co,Ico,ZS,Nco,jco,Dco,a_,$Z,qco,Gco,eP,Oco,Xco,Vco,n_,IZ,zco,Wco,oP,Qco,Hco,Uco,s_,NZ,Jco,Yco,rP,Kco,Zco,efo,l_,jZ,ofo,rfo,tP,tfo,afo,nfo,i_,DZ,sfo,lfo,aP,ifo,dfo,cfo,d_,qZ,ffo,mfo,nP,gfo,hfo,pfo,c_,GZ,_fo,ufo,sP,bfo,vfo,Tfo,f_,OZ,Ffo,Cfo,lP,Mfo,Efo,yfo,m_,XZ,wfo,Afo,iP,Lfo,Bfo,xfo,g_,VZ,kfo,Rfo,dP,Sfo,Pfo,$fo,h_,zZ,Ifo,Nfo,cP,jfo,Dfo,qfo,p_,WZ,Gfo,Ofo,fP,Xfo,Vfo,zfo,__,QZ,Wfo,Qfo,mP,Hfo,Ufo,Jfo,u_,HZ,Yfo,Kfo,gP,Zfo,emo,omo,b_,UZ,rmo,tmo,hP,amo,nmo,smo,v_,JZ,lmo,imo,pP,dmo,cmo,fmo,T_,YZ,mmo,gmo,_P,hmo,pmo,_mo,F_,KZ,umo,bmo,uP,vmo,Tmo,Fmo,C_,ZZ,Cmo,Mmo,bP,Emo,ymo,wmo,M_,eee,Amo,Lmo,vP,Bmo,xmo,kmo,E_,Rmo,oee,Smo,Pmo,ree,$mo,Imo,tee,Nmo,jmo,z3,pke,ed,y_,aee,W3,Dmo,nee,qmo,_ke,Yo,Q3,Gmo,od,Omo,see,Xmo,Vmo,lee,zmo,Wmo,Qmo,H3,Hmo,iee,Umo,Jmo,Ymo,zr,U3,Kmo,dee,Zmo,ego,rd,ogo,cee,rgo,tgo,fee,ago,ngo,sgo,mee,lgo,igo,J3,dgo,De,Y3,cgo,gee,fgo,mgo,za,ggo,hee,hgo,pgo,pee,_go,ugo,_ee,bgo,vgo,Tgo,k,w_,uee,Fgo,Cgo,TP,Mgo,Ego,ygo,A_,bee,wgo,Ago,FP,Lgo,Bgo,xgo,L_,vee,kgo,Rgo,CP,Sgo,Pgo,$go,B_,Tee,Igo,Ngo,MP,jgo,Dgo,qgo,x_,Fee,Ggo,Ogo,EP,Xgo,Vgo,zgo,k_,Cee,Wgo,Qgo,yP,Hgo,Ugo,Jgo,R_,Mee,Ygo,Kgo,wP,Zgo,eho,oho,S_,Eee,rho,tho,AP,aho,nho,sho,P_,yee,lho,iho,LP,dho,cho,fho,$_,wee,mho,gho,BP,hho,pho,_ho,I_,Aee,uho,bho,xP,vho,Tho,Fho,N_,Lee,Cho,Mho,kP,Eho,yho,who,j_,Bee,Aho,Lho,RP,Bho,xho,kho,D_,xee,Rho,Sho,SP,Pho,$ho,Iho,q_,kee,Nho,jho,PP,Dho,qho,Gho,G_,Ree,Oho,Xho,$P,Vho,zho,Who,O_,See,Qho,Hho,IP,Uho,Jho,Yho,X_,Pee,Kho,Zho,NP,epo,opo,rpo,V_,$ee,tpo,apo,jP,npo,spo,lpo,z_,Iee,ipo,dpo,DP,cpo,fpo,mpo,W_,Nee,gpo,hpo,qP,ppo,_po,upo,Q_,jee,bpo,vpo,GP,Tpo,Fpo,Cpo,H_,Dee,Mpo,Epo,OP,ypo,wpo,Apo,U_,qee,Lpo,Bpo,XP,xpo,kpo,Rpo,J_,Gee,Spo,Ppo,VP,$po,Ipo,Npo,Y_,Oee,jpo,Dpo,zP,qpo,Gpo,Opo,K_,Xee,Xpo,Vpo,WP,zpo,Wpo,Qpo,Z_,Vee,Hpo,Upo,QP,Jpo,Ypo,Kpo,eu,zee,Zpo,e_o,HP,o_o,r_o,t_o,ou,Wee,a_o,n_o,UP,s_o,l_o,i_o,ru,Qee,d_o,c_o,JP,f_o,m_o,g_o,tu,Hee,h_o,p_o,YP,__o,u_o,b_o,au,Uee,v_o,T_o,KP,F_o,C_o,M_o,nu,Jee,E_o,y_o,ZP,w_o,A_o,L_o,su,Yee,B_o,x_o,e$,k_o,R_o,S_o,lu,Kee,P_o,$_o,o$,I_o,N_o,j_o,iu,Zee,D_o,q_o,r$,G_o,O_o,X_o,du,eoe,V_o,z_o,t$,W_o,Q_o,H_o,cu,ooe,U_o,J_o,a$,Y_o,K_o,Z_o,fu,euo,roe,ouo,ruo,toe,tuo,auo,aoe,nuo,suo,K3,uke,td,mu,noe,Z3,luo,soe,iuo,bke,Ko,ey,duo,ad,cuo,loe,fuo,muo,ioe,guo,huo,puo,oy,_uo,doe,uuo,buo,vuo,Wr,ry,Tuo,coe,Fuo,Cuo,nd,Muo,foe,Euo,yuo,moe,wuo,Auo,Luo,goe,Buo,xuo,ty,kuo,qe,ay,Ruo,hoe,Suo,Puo,Wa,$uo,poe,Iuo,Nuo,_oe,juo,Duo,uoe,quo,Guo,Ouo,$,gu,boe,Xuo,Vuo,n$,zuo,Wuo,Quo,hu,voe,Huo,Uuo,s$,Juo,Yuo,Kuo,pu,Toe,Zuo,e5o,l$,o5o,r5o,t5o,_u,Foe,a5o,n5o,i$,s5o,l5o,i5o,uu,Coe,d5o,c5o,d$,f5o,m5o,g5o,bu,Moe,h5o,p5o,c$,_5o,u5o,b5o,vu,Eoe,v5o,T5o,f$,F5o,C5o,M5o,Tu,yoe,E5o,y5o,m$,w5o,A5o,L5o,Fu,woe,B5o,x5o,g$,k5o,R5o,S5o,Cu,Aoe,P5o,$5o,h$,I5o,N5o,j5o,Mu,Loe,D5o,q5o,p$,G5o,O5o,X5o,Eu,Boe,V5o,z5o,_$,W5o,Q5o,H5o,yu,xoe,U5o,J5o,u$,Y5o,K5o,Z5o,wu,koe,e2o,o2o,b$,r2o,t2o,a2o,Au,Roe,n2o,s2o,v$,l2o,i2o,d2o,Lu,Soe,c2o,f2o,T$,m2o,g2o,h2o,Bu,Poe,p2o,_2o,F$,u2o,b2o,v2o,xu,$oe,T2o,F2o,C$,C2o,M2o,E2o,ku,Ioe,y2o,w2o,M$,A2o,L2o,B2o,Ru,Noe,x2o,k2o,E$,R2o,S2o,P2o,Su,joe,$2o,I2o,y$,N2o,j2o,D2o,Pu,Doe,q2o,G2o,w$,O2o,X2o,V2o,$u,qoe,z2o,W2o,A$,Q2o,H2o,U2o,Iu,Goe,J2o,Y2o,L$,K2o,Z2o,e1o,Nu,Ooe,o1o,r1o,B$,t1o,a1o,n1o,ju,Xoe,s1o,l1o,x$,i1o,d1o,c1o,Du,Voe,f1o,m1o,k$,g1o,h1o,p1o,qu,zoe,_1o,u1o,R$,b1o,v1o,T1o,Gu,Woe,F1o,C1o,S$,M1o,E1o,y1o,Ou,Qoe,w1o,A1o,P$,L1o,B1o,x1o,Xu,Hoe,k1o,R1o,$$,S1o,P1o,$1o,Vu,Uoe,I1o,N1o,I$,j1o,D1o,q1o,zu,Joe,G1o,O1o,N$,X1o,V1o,z1o,Wu,Yoe,W1o,Q1o,j$,H1o,U1o,J1o,Qu,Koe,Y1o,K1o,D$,Z1o,ebo,obo,Hu,rbo,Zoe,tbo,abo,ere,nbo,sbo,ore,lbo,ibo,ny,vke,sd,Uu,rre,sy,dbo,tre,cbo,Tke,Zo,ly,fbo,ld,mbo,are,gbo,hbo,nre,pbo,_bo,ubo,iy,bbo,sre,vbo,Tbo,Fbo,Qr,dy,Cbo,lre,Mbo,Ebo,id,ybo,ire,wbo,Abo,dre,Lbo,Bbo,xbo,cre,kbo,Rbo,cy,Sbo,Ge,fy,Pbo,fre,$bo,Ibo,Qa,Nbo,mre,jbo,Dbo,gre,qbo,Gbo,hre,Obo,Xbo,Vbo,I,Ju,pre,zbo,Wbo,q$,Qbo,Hbo,Ubo,Yu,_re,Jbo,Ybo,G$,Kbo,Zbo,evo,Ku,ure,ovo,rvo,O$,tvo,avo,nvo,Zu,bre,svo,lvo,X$,ivo,dvo,cvo,e5,vre,fvo,mvo,V$,gvo,hvo,pvo,o5,Tre,_vo,uvo,z$,bvo,vvo,Tvo,r5,Fre,Fvo,Cvo,W$,Mvo,Evo,yvo,t5,Cre,wvo,Avo,Q$,Lvo,Bvo,xvo,a5,Mre,kvo,Rvo,H$,Svo,Pvo,$vo,n5,Ere,Ivo,Nvo,U$,jvo,Dvo,qvo,s5,yre,Gvo,Ovo,J$,Xvo,Vvo,zvo,l5,wre,Wvo,Qvo,Y$,Hvo,Uvo,Jvo,i5,Are,Yvo,Kvo,K$,Zvo,e6o,o6o,d5,Lre,r6o,t6o,Z$,a6o,n6o,s6o,c5,Bre,l6o,i6o,eI,d6o,c6o,f6o,f5,xre,m6o,g6o,oI,h6o,p6o,_6o,m5,kre,u6o,b6o,rI,v6o,T6o,F6o,g5,Rre,C6o,M6o,tI,E6o,y6o,w6o,h5,Sre,A6o,L6o,aI,B6o,x6o,k6o,p5,Pre,R6o,S6o,nI,P6o,$6o,I6o,_5,$re,N6o,j6o,sI,D6o,q6o,G6o,u5,Ire,O6o,X6o,lI,V6o,z6o,W6o,b5,Nre,Q6o,H6o,iI,U6o,J6o,Y6o,v5,jre,K6o,Z6o,dI,eTo,oTo,rTo,T5,Dre,tTo,aTo,cI,nTo,sTo,lTo,F5,qre,iTo,dTo,fI,cTo,fTo,mTo,C5,Gre,gTo,hTo,mI,pTo,_To,uTo,M5,Ore,bTo,vTo,gI,TTo,FTo,CTo,E5,Xre,MTo,ETo,hI,yTo,wTo,ATo,y5,Vre,LTo,BTo,pI,xTo,kTo,RTo,w5,zre,STo,PTo,Wre,$To,ITo,NTo,A5,Qre,jTo,DTo,_I,qTo,GTo,OTo,L5,Hre,XTo,VTo,uI,zTo,WTo,QTo,B5,Ure,HTo,UTo,bI,JTo,YTo,KTo,x5,Jre,ZTo,eFo,vI,oFo,rFo,tFo,k5,aFo,Yre,nFo,sFo,Kre,lFo,iFo,Zre,dFo,cFo,my,Fke,dd,R5,ete,gy,fFo,ote,mFo,Cke,er,hy,gFo,cd,hFo,rte,pFo,_Fo,tte,uFo,bFo,vFo,py,TFo,ate,FFo,CFo,MFo,Hr,_y,EFo,nte,yFo,wFo,fd,AFo,ste,LFo,BFo,lte,xFo,kFo,RFo,ite,SFo,PFo,uy,$Fo,Oe,by,IFo,dte,NFo,jFo,Ha,DFo,cte,qFo,GFo,fte,OFo,XFo,mte,VFo,zFo,WFo,se,S5,gte,QFo,HFo,TI,UFo,JFo,YFo,P5,hte,KFo,ZFo,FI,eCo,oCo,rCo,$5,pte,tCo,aCo,CI,nCo,sCo,lCo,I5,_te,iCo,dCo,MI,cCo,fCo,mCo,N5,ute,gCo,hCo,EI,pCo,_Co,uCo,j5,bte,bCo,vCo,yI,TCo,FCo,CCo,D5,vte,MCo,ECo,wI,yCo,wCo,ACo,q5,Tte,LCo,BCo,AI,xCo,kCo,RCo,G5,Fte,SCo,PCo,LI,$Co,ICo,NCo,O5,Cte,jCo,DCo,BI,qCo,GCo,OCo,X5,Mte,XCo,VCo,xI,zCo,WCo,QCo,V5,Ete,HCo,UCo,kI,JCo,YCo,KCo,z5,yte,ZCo,eMo,RI,oMo,rMo,tMo,W5,wte,aMo,nMo,SI,sMo,lMo,iMo,Q5,Ate,dMo,cMo,PI,fMo,mMo,gMo,H5,Lte,hMo,pMo,$I,_Mo,uMo,bMo,U5,vMo,Bte,TMo,FMo,xte,CMo,MMo,kte,EMo,yMo,vy,Mke,md,J5,Rte,Ty,wMo,Ste,AMo,Eke,or,Fy,LMo,gd,BMo,Pte,xMo,kMo,$te,RMo,SMo,PMo,Cy,$Mo,Ite,IMo,NMo,jMo,Ur,My,DMo,Nte,qMo,GMo,hd,OMo,jte,XMo,VMo,Dte,zMo,WMo,QMo,qte,HMo,UMo,Ey,JMo,Xe,yy,YMo,Gte,KMo,ZMo,Ua,e4o,Ote,o4o,r4o,Xte,t4o,a4o,Vte,n4o,s4o,l4o,A,Y5,zte,i4o,d4o,II,c4o,f4o,m4o,K5,Wte,g4o,h4o,NI,p4o,_4o,u4o,Z5,Qte,b4o,v4o,jI,T4o,F4o,C4o,e2,Hte,M4o,E4o,DI,y4o,w4o,A4o,o2,Ute,L4o,B4o,qI,x4o,k4o,R4o,r2,Jte,S4o,P4o,GI,$4o,I4o,N4o,t2,Yte,j4o,D4o,OI,q4o,G4o,O4o,a2,Kte,X4o,V4o,XI,z4o,W4o,Q4o,n2,Zte,H4o,U4o,VI,J4o,Y4o,K4o,s2,eae,Z4o,eEo,zI,oEo,rEo,tEo,l2,oae,aEo,nEo,WI,sEo,lEo,iEo,i2,rae,dEo,cEo,QI,fEo,mEo,gEo,d2,tae,hEo,pEo,HI,_Eo,uEo,bEo,c2,aae,vEo,TEo,UI,FEo,CEo,MEo,f2,nae,EEo,yEo,JI,wEo,AEo,LEo,m2,sae,BEo,xEo,YI,kEo,REo,SEo,g2,lae,PEo,$Eo,KI,IEo,NEo,jEo,h2,iae,DEo,qEo,ZI,GEo,OEo,XEo,p2,dae,VEo,zEo,eN,WEo,QEo,HEo,_2,cae,UEo,JEo,oN,YEo,KEo,ZEo,u2,fae,e3o,o3o,rN,r3o,t3o,a3o,b2,mae,n3o,s3o,tN,l3o,i3o,d3o,v2,gae,c3o,f3o,aN,m3o,g3o,h3o,T2,hae,p3o,_3o,nN,u3o,b3o,v3o,F2,pae,T3o,F3o,sN,C3o,M3o,E3o,C2,_ae,y3o,w3o,lN,A3o,L3o,B3o,M2,uae,x3o,k3o,iN,R3o,S3o,P3o,E2,bae,$3o,I3o,dN,N3o,j3o,D3o,y2,vae,q3o,G3o,cN,O3o,X3o,V3o,w2,Tae,z3o,W3o,fN,Q3o,H3o,U3o,A2,Fae,J3o,Y3o,mN,K3o,Z3o,eyo,L2,Cae,oyo,ryo,gN,tyo,ayo,nyo,B2,Mae,syo,lyo,hN,iyo,dyo,cyo,x2,Eae,fyo,myo,pN,gyo,hyo,pyo,k2,yae,_yo,uyo,_N,byo,vyo,Tyo,R2,wae,Fyo,Cyo,uN,Myo,Eyo,yyo,S2,Aae,wyo,Ayo,bN,Lyo,Byo,xyo,P2,Lae,kyo,Ryo,vN,Syo,Pyo,$yo,$2,Bae,Iyo,Nyo,TN,jyo,Dyo,qyo,I2,xae,Gyo,Oyo,FN,Xyo,Vyo,zyo,N2,kae,Wyo,Qyo,CN,Hyo,Uyo,Jyo,j2,Rae,Yyo,Kyo,MN,Zyo,ewo,owo,D2,Sae,rwo,two,EN,awo,nwo,swo,q2,Pae,lwo,iwo,yN,dwo,cwo,fwo,G2,$ae,mwo,gwo,wN,hwo,pwo,_wo,O2,Iae,uwo,bwo,AN,vwo,Two,Fwo,X2,Cwo,Nae,Mwo,Ewo,jae,ywo,wwo,Dae,Awo,Lwo,wy,yke,pd,V2,qae,Ay,Bwo,Gae,xwo,wke,rr,Ly,kwo,_d,Rwo,Oae,Swo,Pwo,Xae,$wo,Iwo,Nwo,By,jwo,Vae,Dwo,qwo,Gwo,Jr,xy,Owo,zae,Xwo,Vwo,ud,zwo,Wae,Wwo,Qwo,Qae,Hwo,Uwo,Jwo,Hae,Ywo,Kwo,ky,Zwo,Ve,Ry,eAo,Uae,oAo,rAo,Ja,tAo,Jae,aAo,nAo,Yae,sAo,lAo,Kae,iAo,dAo,cAo,G,z2,Zae,fAo,mAo,LN,gAo,hAo,pAo,W2,ene,_Ao,uAo,BN,bAo,vAo,TAo,Q2,one,FAo,CAo,xN,MAo,EAo,yAo,H2,rne,wAo,AAo,kN,LAo,BAo,xAo,U2,tne,kAo,RAo,RN,SAo,PAo,$Ao,J2,ane,IAo,NAo,SN,jAo,DAo,qAo,Y2,nne,GAo,OAo,PN,XAo,VAo,zAo,K2,sne,WAo,QAo,$N,HAo,UAo,JAo,Z2,lne,YAo,KAo,IN,ZAo,e0o,o0o,e1,ine,r0o,t0o,NN,a0o,n0o,s0o,o1,dne,l0o,i0o,jN,d0o,c0o,f0o,r1,cne,m0o,g0o,DN,h0o,p0o,_0o,t1,fne,u0o,b0o,qN,v0o,T0o,F0o,a1,mne,C0o,M0o,GN,E0o,y0o,w0o,n1,gne,A0o,L0o,ON,B0o,x0o,k0o,s1,hne,R0o,S0o,XN,P0o,$0o,I0o,l1,pne,N0o,j0o,VN,D0o,q0o,G0o,i1,_ne,O0o,X0o,zN,V0o,z0o,W0o,d1,une,Q0o,H0o,WN,U0o,J0o,Y0o,c1,bne,K0o,Z0o,QN,eLo,oLo,rLo,f1,vne,tLo,aLo,HN,nLo,sLo,lLo,m1,Tne,iLo,dLo,UN,cLo,fLo,mLo,g1,Fne,gLo,hLo,JN,pLo,_Lo,uLo,h1,Cne,bLo,vLo,YN,TLo,FLo,CLo,p1,Mne,MLo,ELo,KN,yLo,wLo,ALo,_1,Ene,LLo,BLo,ZN,xLo,kLo,RLo,u1,yne,SLo,PLo,ej,$Lo,ILo,NLo,b1,wne,jLo,DLo,oj,qLo,GLo,OLo,v1,XLo,Ane,VLo,zLo,Lne,WLo,QLo,Bne,HLo,ULo,Sy,Ake,bd,T1,xne,Py,JLo,kne,YLo,Lke,tr,$y,KLo,vd,ZLo,Rne,e8o,o8o,Sne,r8o,t8o,a8o,Iy,n8o,Pne,s8o,l8o,i8o,Yr,Ny,d8o,$ne,c8o,f8o,Td,m8o,Ine,g8o,h8o,Nne,p8o,_8o,u8o,jne,b8o,v8o,jy,T8o,ze,Dy,F8o,Dne,C8o,M8o,Ya,E8o,qne,y8o,w8o,Gne,A8o,L8o,One,B8o,x8o,k8o,da,F1,Xne,R8o,S8o,rj,P8o,$8o,I8o,C1,Vne,N8o,j8o,tj,D8o,q8o,G8o,M1,zne,O8o,X8o,aj,V8o,z8o,W8o,E1,Wne,Q8o,H8o,nj,U8o,J8o,Y8o,y1,Qne,K8o,Z8o,sj,e7o,o7o,r7o,w1,t7o,Hne,a7o,n7o,Une,s7o,l7o,Jne,i7o,d7o,qy,Bke,Fd,A1,Yne,Gy,c7o,Kne,f7o,xke,ar,Oy,m7o,Cd,g7o,Zne,h7o,p7o,ese,_7o,u7o,b7o,Xy,v7o,ose,T7o,F7o,C7o,Kr,Vy,M7o,rse,E7o,y7o,Md,w7o,tse,A7o,L7o,ase,B7o,x7o,k7o,nse,R7o,S7o,zy,P7o,We,Wy,$7o,sse,I7o,N7o,Ka,j7o,lse,D7o,q7o,ise,G7o,O7o,dse,X7o,V7o,z7o,D,L1,cse,W7o,Q7o,lj,H7o,U7o,J7o,B1,fse,Y7o,K7o,ij,Z7o,e9o,o9o,x1,mse,r9o,t9o,dj,a9o,n9o,s9o,k1,gse,l9o,i9o,cj,d9o,c9o,f9o,R1,hse,m9o,g9o,fj,h9o,p9o,_9o,S1,pse,u9o,b9o,mj,v9o,T9o,F9o,P1,_se,C9o,M9o,gj,E9o,y9o,w9o,$1,use,A9o,L9o,hj,B9o,x9o,k9o,I1,bse,R9o,S9o,pj,P9o,$9o,I9o,N1,vse,N9o,j9o,_j,D9o,q9o,G9o,j1,Tse,O9o,X9o,uj,V9o,z9o,W9o,D1,Fse,Q9o,H9o,bj,U9o,J9o,Y9o,q1,Cse,K9o,Z9o,vj,eBo,oBo,rBo,G1,Mse,tBo,aBo,Tj,nBo,sBo,lBo,O1,Ese,iBo,dBo,Fj,cBo,fBo,mBo,X1,yse,gBo,hBo,Cj,pBo,_Bo,uBo,V1,wse,bBo,vBo,Mj,TBo,FBo,CBo,z1,Ase,MBo,EBo,Ej,yBo,wBo,ABo,W1,Lse,LBo,BBo,yj,xBo,kBo,RBo,Q1,Bse,SBo,PBo,wj,$Bo,IBo,NBo,H1,xse,jBo,DBo,Aj,qBo,GBo,OBo,U1,kse,XBo,VBo,Lj,zBo,WBo,QBo,J1,Rse,HBo,UBo,Bj,JBo,YBo,KBo,Y1,Sse,ZBo,exo,xj,oxo,rxo,txo,K1,Pse,axo,nxo,kj,sxo,lxo,ixo,Z1,$se,dxo,cxo,Rj,fxo,mxo,gxo,eb,Ise,hxo,pxo,Sj,_xo,uxo,bxo,ob,Nse,vxo,Txo,Pj,Fxo,Cxo,Mxo,rb,jse,Exo,yxo,$j,wxo,Axo,Lxo,tb,Dse,Bxo,xxo,Ij,kxo,Rxo,Sxo,ab,qse,Pxo,$xo,Nj,Ixo,Nxo,jxo,nb,Gse,Dxo,qxo,jj,Gxo,Oxo,Xxo,sb,Ose,Vxo,zxo,Dj,Wxo,Qxo,Hxo,lb,Uxo,Xse,Jxo,Yxo,Vse,Kxo,Zxo,zse,eko,oko,Qy,kke,Ed,ib,Wse,Hy,rko,Qse,tko,Rke,nr,Uy,ako,yd,nko,Hse,sko,lko,Use,iko,dko,cko,Jy,fko,Jse,mko,gko,hko,Zr,Yy,pko,Yse,_ko,uko,wd,bko,Kse,vko,Tko,Zse,Fko,Cko,Mko,ele,Eko,yko,Ky,wko,Qe,Zy,Ako,ole,Lko,Bko,Za,xko,rle,kko,Rko,tle,Sko,Pko,ale,$ko,Iko,Nko,R,db,nle,jko,Dko,qj,qko,Gko,Oko,cb,sle,Xko,Vko,Gj,zko,Wko,Qko,fb,lle,Hko,Uko,Oj,Jko,Yko,Kko,mb,ile,Zko,eRo,Xj,oRo,rRo,tRo,gb,dle,aRo,nRo,Vj,sRo,lRo,iRo,hb,cle,dRo,cRo,zj,fRo,mRo,gRo,pb,fle,hRo,pRo,Wj,_Ro,uRo,bRo,_b,mle,vRo,TRo,Qj,FRo,CRo,MRo,ub,gle,ERo,yRo,Hj,wRo,ARo,LRo,bb,hle,BRo,xRo,Uj,kRo,RRo,SRo,vb,ple,PRo,$Ro,Jj,IRo,NRo,jRo,Tb,_le,DRo,qRo,Yj,GRo,ORo,XRo,Fb,ule,VRo,zRo,Kj,WRo,QRo,HRo,Cb,ble,URo,JRo,Zj,YRo,KRo,ZRo,Mb,vle,eSo,oSo,eD,rSo,tSo,aSo,Eb,Tle,nSo,sSo,oD,lSo,iSo,dSo,yb,Fle,cSo,fSo,rD,mSo,gSo,hSo,wb,Cle,pSo,_So,tD,uSo,bSo,vSo,Ab,Mle,TSo,FSo,aD,CSo,MSo,ESo,Lb,Ele,ySo,wSo,nD,ASo,LSo,BSo,Bb,yle,xSo,kSo,sD,RSo,SSo,PSo,xb,wle,$So,ISo,lD,NSo,jSo,DSo,kb,Ale,qSo,GSo,iD,OSo,XSo,VSo,Rb,Lle,zSo,WSo,dD,QSo,HSo,USo,Sb,Ble,JSo,YSo,cD,KSo,ZSo,ePo,Pb,xle,oPo,rPo,fD,tPo,aPo,nPo,$b,kle,sPo,lPo,mD,iPo,dPo,cPo,Ib,Rle,fPo,mPo,gD,gPo,hPo,pPo,Nb,Sle,_Po,uPo,hD,bPo,vPo,TPo,jb,Ple,FPo,CPo,pD,MPo,EPo,yPo,Db,$le,wPo,APo,_D,LPo,BPo,xPo,qb,Ile,kPo,RPo,uD,SPo,PPo,$Po,Gb,Nle,IPo,NPo,bD,jPo,DPo,qPo,Ob,jle,GPo,OPo,vD,XPo,VPo,zPo,Xb,Dle,WPo,QPo,TD,HPo,UPo,JPo,Vb,qle,YPo,KPo,FD,ZPo,e$o,o$o,zb,Gle,r$o,t$o,CD,a$o,n$o,s$o,Wb,Ole,l$o,i$o,MD,d$o,c$o,f$o,Qb,Xle,m$o,g$o,ED,h$o,p$o,_$o,Hb,u$o,Vle,b$o,v$o,zle,T$o,F$o,Wle,C$o,M$o,ew,Ske,Ad,Ub,Qle,ow,E$o,Hle,y$o,Pke,sr,rw,w$o,Ld,A$o,Ule,L$o,B$o,Jle,x$o,k$o,R$o,tw,S$o,Yle,P$o,$$o,I$o,et,aw,N$o,Kle,j$o,D$o,Bd,q$o,Zle,G$o,O$o,eie,X$o,V$o,z$o,oie,W$o,Q$o,nw,H$o,He,sw,U$o,rie,J$o,Y$o,en,K$o,tie,Z$o,eIo,aie,oIo,rIo,nie,tIo,aIo,nIo,sie,Jb,lie,sIo,lIo,yD,iIo,dIo,cIo,Yb,fIo,iie,mIo,gIo,die,hIo,pIo,cie,_Io,uIo,lw,$ke,xd,Kb,fie,iw,bIo,mie,vIo,Ike,lr,dw,TIo,kd,FIo,gie,CIo,MIo,hie,EIo,yIo,wIo,cw,AIo,pie,LIo,BIo,xIo,ot,fw,kIo,_ie,RIo,SIo,Rd,PIo,uie,$Io,IIo,bie,NIo,jIo,DIo,vie,qIo,GIo,mw,OIo,Ue,gw,XIo,Tie,VIo,zIo,on,WIo,Fie,QIo,HIo,Cie,UIo,JIo,Mie,YIo,KIo,ZIo,me,Zb,Eie,eNo,oNo,wD,rNo,tNo,aNo,ev,yie,nNo,sNo,AD,lNo,iNo,dNo,qs,wie,cNo,fNo,LD,mNo,gNo,BD,hNo,pNo,_No,ov,Aie,uNo,bNo,xD,vNo,TNo,FNo,ma,Lie,CNo,MNo,kD,ENo,yNo,RD,wNo,ANo,SD,LNo,BNo,xNo,rv,Bie,kNo,RNo,PD,SNo,PNo,$No,tv,xie,INo,NNo,$D,jNo,DNo,qNo,av,kie,GNo,ONo,ID,XNo,VNo,zNo,nv,Rie,WNo,QNo,ND,HNo,UNo,JNo,sv,Sie,YNo,KNo,jD,ZNo,ejo,ojo,lv,Pie,rjo,tjo,DD,ajo,njo,sjo,iv,ljo,$ie,ijo,djo,Iie,cjo,fjo,Nie,mjo,gjo,hw,Nke,Sd,dv,jie,pw,hjo,Die,pjo,jke,ir,_w,_jo,Pd,ujo,qie,bjo,vjo,Gie,Tjo,Fjo,Cjo,uw,Mjo,Oie,Ejo,yjo,wjo,rt,bw,Ajo,Xie,Ljo,Bjo,$d,xjo,Vie,kjo,Rjo,zie,Sjo,Pjo,$jo,Wie,Ijo,Njo,vw,jjo,Je,Tw,Djo,Qie,qjo,Gjo,rn,Ojo,Hie,Xjo,Vjo,Uie,zjo,Wjo,Jie,Qjo,Hjo,Ujo,Yie,cv,Kie,Jjo,Yjo,qD,Kjo,Zjo,eDo,fv,oDo,Zie,rDo,tDo,ede,aDo,nDo,ode,sDo,lDo,Fw,Dke,Id,mv,rde,Cw,iDo,tde,dDo,qke,dr,Mw,cDo,Nd,fDo,ade,mDo,gDo,nde,hDo,pDo,_Do,Ew,uDo,sde,bDo,vDo,TDo,tt,yw,FDo,lde,CDo,MDo,jd,EDo,ide,yDo,wDo,dde,ADo,LDo,BDo,cde,xDo,kDo,ww,RDo,Ye,Aw,SDo,fde,PDo,$Do,tn,IDo,mde,NDo,jDo,gde,DDo,qDo,hde,GDo,ODo,XDo,ke,gv,pde,VDo,zDo,GD,WDo,QDo,HDo,hv,_de,UDo,JDo,OD,YDo,KDo,ZDo,pv,ude,eqo,oqo,XD,rqo,tqo,aqo,_v,bde,nqo,sqo,VD,lqo,iqo,dqo,uv,vde,cqo,fqo,zD,mqo,gqo,hqo,bv,Tde,pqo,_qo,WD,uqo,bqo,vqo,vv,Fde,Tqo,Fqo,QD,Cqo,Mqo,Eqo,Tv,Cde,yqo,wqo,HD,Aqo,Lqo,Bqo,Fv,xqo,Mde,kqo,Rqo,Ede,Sqo,Pqo,yde,$qo,Iqo,Lw,Gke,Dd,Cv,wde,Bw,Nqo,Ade,jqo,Oke,cr,xw,Dqo,qd,qqo,Lde,Gqo,Oqo,Bde,Xqo,Vqo,zqo,kw,Wqo,xde,Qqo,Hqo,Uqo,at,Rw,Jqo,kde,Yqo,Kqo,Gd,Zqo,Rde,eGo,oGo,Sde,rGo,tGo,aGo,Pde,nGo,sGo,Sw,lGo,Ke,Pw,iGo,$de,dGo,cGo,an,fGo,Ide,mGo,gGo,Nde,hGo,pGo,jde,_Go,uGo,bGo,nn,Mv,Dde,vGo,TGo,UD,FGo,CGo,MGo,Ev,qde,EGo,yGo,JD,wGo,AGo,LGo,yv,Gde,BGo,xGo,YD,kGo,RGo,SGo,wv,Ode,PGo,$Go,KD,IGo,NGo,jGo,Av,DGo,Xde,qGo,GGo,Vde,OGo,XGo,zde,VGo,zGo,$w,Xke,Od,Lv,Wde,Iw,WGo,Qde,QGo,Vke,fr,Nw,HGo,Xd,UGo,Hde,JGo,YGo,Ude,KGo,ZGo,eOo,jw,oOo,Jde,rOo,tOo,aOo,nt,Dw,nOo,Yde,sOo,lOo,Vd,iOo,Kde,dOo,cOo,Zde,fOo,mOo,gOo,ece,hOo,pOo,qw,_Oo,Ze,Gw,uOo,oce,bOo,vOo,sn,TOo,rce,FOo,COo,tce,MOo,EOo,ace,yOo,wOo,AOo,Re,Bv,nce,LOo,BOo,ZD,xOo,kOo,ROo,xv,sce,SOo,POo,eq,$Oo,IOo,NOo,kv,lce,jOo,DOo,oq,qOo,GOo,OOo,Rv,ice,XOo,VOo,rq,zOo,WOo,QOo,Sv,dce,HOo,UOo,tq,JOo,YOo,KOo,Pv,cce,ZOo,eXo,aq,oXo,rXo,tXo,$v,fce,aXo,nXo,nq,sXo,lXo,iXo,Iv,mce,dXo,cXo,sq,fXo,mXo,gXo,Nv,hXo,gce,pXo,_Xo,hce,uXo,bXo,pce,vXo,TXo,Ow,zke,zd,jv,_ce,Xw,FXo,uce,CXo,Wke,mr,Vw,MXo,Wd,EXo,bce,yXo,wXo,vce,AXo,LXo,BXo,zw,xXo,Tce,kXo,RXo,SXo,st,Ww,PXo,Fce,$Xo,IXo,Qd,NXo,Cce,jXo,DXo,Mce,qXo,GXo,OXo,Ece,XXo,VXo,Qw,zXo,eo,Hw,WXo,yce,QXo,HXo,ln,UXo,wce,JXo,YXo,Ace,KXo,ZXo,Lce,eVo,oVo,rVo,Uw,Dv,Bce,tVo,aVo,lq,nVo,sVo,lVo,qv,xce,iVo,dVo,iq,cVo,fVo,mVo,Gv,gVo,kce,hVo,pVo,Rce,_Vo,uVo,Sce,bVo,vVo,Jw,Qke,Hd,Ov,Pce,Yw,TVo,$ce,FVo,Hke,gr,Kw,CVo,Ud,MVo,Ice,EVo,yVo,Nce,wVo,AVo,LVo,Zw,BVo,jce,xVo,kVo,RVo,lt,eA,SVo,Dce,PVo,$Vo,Jd,IVo,qce,NVo,jVo,Gce,DVo,qVo,GVo,Oce,OVo,XVo,oA,VVo,oo,rA,zVo,Xce,WVo,QVo,dn,HVo,Vce,UVo,JVo,zce,YVo,KVo,Wce,ZVo,ezo,ozo,cn,Xv,Qce,rzo,tzo,dq,azo,nzo,szo,Vv,Hce,lzo,izo,cq,dzo,czo,fzo,zv,Uce,mzo,gzo,fq,hzo,pzo,_zo,Wv,Jce,uzo,bzo,mq,vzo,Tzo,Fzo,Qv,Czo,Yce,Mzo,Ezo,Kce,yzo,wzo,Zce,Azo,Lzo,tA,Uke,Yd,Hv,efe,aA,Bzo,ofe,xzo,Jke,hr,nA,kzo,Kd,Rzo,rfe,Szo,Pzo,tfe,$zo,Izo,Nzo,sA,jzo,afe,Dzo,qzo,Gzo,it,lA,Ozo,nfe,Xzo,Vzo,Zd,zzo,sfe,Wzo,Qzo,lfe,Hzo,Uzo,Jzo,ife,Yzo,Kzo,iA,Zzo,ro,dA,eWo,dfe,oWo,rWo,fn,tWo,cfe,aWo,nWo,ffe,sWo,lWo,mfe,iWo,dWo,cWo,ec,Uv,gfe,fWo,mWo,gq,gWo,hWo,pWo,Jv,hfe,_Wo,uWo,hq,bWo,vWo,TWo,Yv,pfe,FWo,CWo,pq,MWo,EWo,yWo,Kv,wWo,_fe,AWo,LWo,ufe,BWo,xWo,bfe,kWo,RWo,cA,Yke,oc,Zv,vfe,fA,SWo,Tfe,PWo,Kke,pr,mA,$Wo,rc,IWo,Ffe,NWo,jWo,Cfe,DWo,qWo,GWo,gA,OWo,Mfe,XWo,VWo,zWo,dt,hA,WWo,Efe,QWo,HWo,tc,UWo,yfe,JWo,YWo,wfe,KWo,ZWo,eQo,Afe,oQo,rQo,pA,tQo,to,_A,aQo,Lfe,nQo,sQo,mn,lQo,Bfe,iQo,dQo,xfe,cQo,fQo,kfe,mQo,gQo,hQo,Rfe,e6,Sfe,pQo,_Qo,_q,uQo,bQo,vQo,o6,TQo,Pfe,FQo,CQo,$fe,MQo,EQo,Ife,yQo,wQo,uA,Zke,ac,r6,Nfe,bA,AQo,jfe,LQo,eRe,_r,vA,BQo,nc,xQo,Dfe,kQo,RQo,qfe,SQo,PQo,$Qo,TA,IQo,Gfe,NQo,jQo,DQo,ct,FA,qQo,Ofe,GQo,OQo,sc,XQo,Xfe,VQo,zQo,Vfe,WQo,QQo,HQo,zfe,UQo,JQo,CA,YQo,ao,MA,KQo,Wfe,ZQo,eHo,gn,oHo,Qfe,rHo,tHo,Hfe,aHo,nHo,Ufe,sHo,lHo,iHo,Jfe,t6,Yfe,dHo,cHo,uq,fHo,mHo,gHo,a6,hHo,Kfe,pHo,_Ho,Zfe,uHo,bHo,eme,vHo,THo,EA,oRe,lc,n6,ome,yA,FHo,rme,CHo,rRe,ur,wA,MHo,ic,EHo,tme,yHo,wHo,ame,AHo,LHo,BHo,AA,xHo,nme,kHo,RHo,SHo,ft,LA,PHo,sme,$Ho,IHo,dc,NHo,lme,jHo,DHo,ime,qHo,GHo,OHo,dme,XHo,VHo,BA,zHo,no,xA,WHo,cme,QHo,HHo,hn,UHo,fme,JHo,YHo,mme,KHo,ZHo,gme,eUo,oUo,rUo,kA,s6,hme,tUo,aUo,bq,nUo,sUo,lUo,l6,pme,iUo,dUo,vq,cUo,fUo,mUo,i6,gUo,_me,hUo,pUo,ume,_Uo,uUo,bme,bUo,vUo,RA,tRe,cc,d6,vme,SA,TUo,Tme,FUo,aRe,br,PA,CUo,fc,MUo,Fme,EUo,yUo,Cme,wUo,AUo,LUo,$A,BUo,Mme,xUo,kUo,RUo,mt,IA,SUo,Eme,PUo,$Uo,mc,IUo,yme,NUo,jUo,wme,DUo,qUo,GUo,Ame,OUo,XUo,NA,VUo,so,jA,zUo,Lme,WUo,QUo,pn,HUo,Bme,UUo,JUo,xme,YUo,KUo,kme,ZUo,eJo,oJo,Rme,c6,Sme,rJo,tJo,Tq,aJo,nJo,sJo,f6,lJo,Pme,iJo,dJo,$me,cJo,fJo,Ime,mJo,gJo,DA,nRe,gc,m6,Nme,qA,hJo,jme,pJo,sRe,vr,GA,_Jo,hc,uJo,Dme,bJo,vJo,qme,TJo,FJo,CJo,OA,MJo,Gme,EJo,yJo,wJo,gt,XA,AJo,Ome,LJo,BJo,pc,xJo,Xme,kJo,RJo,Vme,SJo,PJo,$Jo,zme,IJo,NJo,VA,jJo,ho,zA,DJo,Wme,qJo,GJo,_n,OJo,Qme,XJo,VJo,Hme,zJo,WJo,Ume,QJo,HJo,UJo,B,g6,Jme,JJo,YJo,Fq,KJo,ZJo,eYo,h6,Yme,oYo,rYo,Cq,tYo,aYo,nYo,p6,Kme,sYo,lYo,Mq,iYo,dYo,cYo,_6,Zme,fYo,mYo,Eq,gYo,hYo,pYo,u6,ege,_Yo,uYo,yq,bYo,vYo,TYo,b6,oge,FYo,CYo,wq,MYo,EYo,yYo,v6,rge,wYo,AYo,Aq,LYo,BYo,xYo,T6,tge,kYo,RYo,Lq,SYo,PYo,$Yo,F6,age,IYo,NYo,Bq,jYo,DYo,qYo,C6,nge,GYo,OYo,xq,XYo,VYo,zYo,M6,sge,WYo,QYo,kq,HYo,UYo,JYo,E6,lge,YYo,KYo,Rq,ZYo,eKo,oKo,y6,ige,rKo,tKo,Sq,aKo,nKo,sKo,w6,dge,lKo,iKo,Pq,dKo,cKo,fKo,A6,cge,mKo,gKo,$q,hKo,pKo,_Ko,L6,fge,uKo,bKo,Iq,vKo,TKo,FKo,Gs,mge,CKo,MKo,Nq,EKo,yKo,jq,wKo,AKo,LKo,B6,gge,BKo,xKo,Dq,kKo,RKo,SKo,x6,hge,PKo,$Ko,qq,IKo,NKo,jKo,k6,pge,DKo,qKo,Gq,GKo,OKo,XKo,R6,_ge,VKo,zKo,Oq,WKo,QKo,HKo,S6,uge,UKo,JKo,Xq,YKo,KKo,ZKo,P6,bge,eZo,oZo,Vq,rZo,tZo,aZo,$6,vge,nZo,sZo,zq,lZo,iZo,dZo,I6,Tge,cZo,fZo,Wq,mZo,gZo,hZo,N6,Fge,pZo,_Zo,Qq,uZo,bZo,vZo,j6,Cge,TZo,FZo,Hq,CZo,MZo,EZo,D6,Mge,yZo,wZo,Uq,AZo,LZo,BZo,q6,Ege,xZo,kZo,Jq,RZo,SZo,PZo,G6,yge,$Zo,IZo,Yq,NZo,jZo,DZo,O6,wge,qZo,GZo,Kq,OZo,XZo,VZo,X6,Age,zZo,WZo,Zq,QZo,HZo,UZo,V6,Lge,JZo,YZo,eG,KZo,ZZo,eer,z6,Bge,oer,rer,oG,ter,aer,ner,W6,xge,ser,ler,rG,ier,der,cer,Q6,kge,fer,mer,tG,ger,her,per,H6,Rge,_er,uer,aG,ber,ver,Ter,U6,Sge,Fer,Cer,nG,Mer,Eer,yer,J6,Pge,wer,Aer,sG,Ler,Ber,xer,Y6,$ge,ker,Rer,lG,Ser,Per,$er,K6,Ige,Ier,Ner,iG,jer,Der,qer,Z6,Nge,Ger,Oer,dG,Xer,Ver,zer,eT,jge,Wer,Qer,cG,Her,Uer,Jer,Dge,Yer,Ker,WA,lRe,_c,oT,qge,QA,Zer,Gge,eor,iRe,Tr,HA,oor,uc,ror,Oge,tor,aor,Xge,nor,sor,lor,UA,ior,Vge,dor,cor,mor,ht,JA,gor,zge,hor,por,bc,_or,Wge,uor,bor,Qge,vor,Tor,For,Hge,Cor,Mor,YA,Eor,po,KA,yor,Uge,wor,Aor,un,Lor,Jge,Bor,xor,Yge,kor,Ror,Kge,Sor,Por,$or,H,rT,Zge,Ior,Nor,fG,jor,Dor,qor,tT,ehe,Gor,Oor,mG,Xor,Vor,zor,aT,ohe,Wor,Qor,gG,Hor,Uor,Jor,nT,rhe,Yor,Kor,hG,Zor,err,orr,sT,the,rrr,trr,pG,arr,nrr,srr,lT,ahe,lrr,irr,_G,drr,crr,frr,iT,nhe,mrr,grr,uG,hrr,prr,_rr,dT,she,urr,brr,bG,vrr,Trr,Frr,cT,lhe,Crr,Mrr,vG,Err,yrr,wrr,fT,ihe,Arr,Lrr,TG,Brr,xrr,krr,mT,dhe,Rrr,Srr,FG,Prr,$rr,Irr,gT,che,Nrr,jrr,CG,Drr,qrr,Grr,hT,fhe,Orr,Xrr,MG,Vrr,zrr,Wrr,pT,mhe,Qrr,Hrr,EG,Urr,Jrr,Yrr,_T,ghe,Krr,Zrr,yG,etr,otr,rtr,uT,hhe,ttr,atr,wG,ntr,str,ltr,bT,phe,itr,dtr,AG,ctr,ftr,mtr,vT,_he,gtr,htr,LG,ptr,_tr,utr,TT,uhe,btr,vtr,BG,Ttr,Ftr,Ctr,FT,bhe,Mtr,Etr,xG,ytr,wtr,Atr,CT,vhe,Ltr,Btr,kG,xtr,ktr,Rtr,MT,The,Str,Ptr,RG,$tr,Itr,Ntr,ET,Fhe,jtr,Dtr,SG,qtr,Gtr,Otr,Che,Xtr,Vtr,ZA,dRe,vc,yT,Mhe,e0,ztr,Ehe,Wtr,cRe,Fr,o0,Qtr,Tc,Htr,yhe,Utr,Jtr,whe,Ytr,Ktr,Ztr,r0,ear,Ahe,oar,rar,tar,pt,t0,aar,Lhe,nar,sar,Fc,lar,Bhe,iar,dar,xhe,car,far,mar,khe,gar,har,a0,par,_o,n0,_ar,Rhe,uar,bar,bn,Tar,She,Far,Car,Phe,Mar,Ear,$he,yar,war,Aar,ge,wT,Ihe,Lar,Bar,PG,xar,kar,Rar,AT,Nhe,Sar,Par,$G,$ar,Iar,Nar,LT,jhe,jar,Dar,IG,qar,Gar,Oar,BT,Dhe,Xar,Var,NG,zar,War,Qar,xT,qhe,Har,Uar,jG,Jar,Yar,Kar,kT,Ghe,Zar,enr,DG,onr,rnr,tnr,RT,Ohe,anr,nnr,qG,snr,lnr,inr,ST,Xhe,dnr,cnr,GG,fnr,mnr,gnr,PT,Vhe,hnr,pnr,OG,_nr,unr,bnr,$T,zhe,vnr,Tnr,XG,Fnr,Cnr,Mnr,IT,Whe,Enr,ynr,VG,wnr,Anr,Lnr,Qhe,Bnr,xnr,s0,fRe,Cc,NT,Hhe,l0,knr,Uhe,Rnr,mRe,Cr,i0,Snr,Mc,Pnr,Jhe,$nr,Inr,Yhe,Nnr,jnr,Dnr,d0,qnr,Khe,Gnr,Onr,Xnr,_t,c0,Vnr,Zhe,znr,Wnr,Ec,Qnr,epe,Hnr,Unr,ope,Jnr,Ynr,Knr,rpe,Znr,esr,f0,osr,uo,m0,rsr,tpe,tsr,asr,vn,nsr,ape,ssr,lsr,npe,isr,dsr,spe,csr,fsr,msr,g0,jT,lpe,gsr,hsr,zG,psr,_sr,usr,DT,ipe,bsr,vsr,WG,Tsr,Fsr,Csr,dpe,Msr,Esr,h0,gRe,yc,qT,cpe,p0,ysr,fpe,wsr,hRe,Mr,_0,Asr,wc,Lsr,mpe,Bsr,xsr,gpe,ksr,Rsr,Ssr,u0,Psr,hpe,$sr,Isr,Nsr,ut,b0,jsr,ppe,Dsr,qsr,Ac,Gsr,_pe,Osr,Xsr,upe,Vsr,zsr,Wsr,bpe,Qsr,Hsr,v0,Usr,bo,T0,Jsr,vpe,Ysr,Ksr,Tn,Zsr,Tpe,elr,olr,Fpe,rlr,tlr,Cpe,alr,nlr,slr,Y,GT,Mpe,llr,ilr,QG,dlr,clr,flr,OT,Epe,mlr,glr,HG,hlr,plr,_lr,XT,ype,ulr,blr,UG,vlr,Tlr,Flr,VT,wpe,Clr,Mlr,JG,Elr,ylr,wlr,zT,Ape,Alr,Llr,YG,Blr,xlr,klr,WT,Lpe,Rlr,Slr,KG,Plr,$lr,Ilr,QT,Bpe,Nlr,jlr,ZG,Dlr,qlr,Glr,HT,xpe,Olr,Xlr,eO,Vlr,zlr,Wlr,UT,kpe,Qlr,Hlr,oO,Ulr,Jlr,Ylr,JT,Rpe,Klr,Zlr,rO,eir,oir,rir,YT,Spe,tir,air,tO,nir,sir,lir,KT,Ppe,iir,dir,aO,cir,fir,mir,ZT,$pe,gir,hir,nO,pir,_ir,uir,eF,Ipe,bir,vir,sO,Tir,Fir,Cir,oF,Npe,Mir,Eir,lO,yir,wir,Air,rF,jpe,Lir,Bir,iO,xir,kir,Rir,tF,Dpe,Sir,Pir,dO,$ir,Iir,Nir,aF,qpe,jir,Dir,cO,qir,Gir,Oir,nF,Gpe,Xir,Vir,fO,zir,Wir,Qir,sF,Ope,Hir,Uir,mO,Jir,Yir,Kir,Xpe,Zir,edr,F0,pRe,Lc,lF,Vpe,C0,odr,zpe,rdr,_Re,Er,M0,tdr,Bc,adr,Wpe,ndr,sdr,Qpe,ldr,idr,ddr,E0,cdr,Hpe,fdr,mdr,gdr,bt,y0,hdr,Upe,pdr,_dr,xc,udr,Jpe,bdr,vdr,Ype,Tdr,Fdr,Cdr,Kpe,Mdr,Edr,w0,ydr,vo,A0,wdr,Zpe,Adr,Ldr,Fn,Bdr,e_e,xdr,kdr,o_e,Rdr,Sdr,r_e,Pdr,$dr,Idr,ue,iF,t_e,Ndr,jdr,gO,Ddr,qdr,Gdr,dF,a_e,Odr,Xdr,hO,Vdr,zdr,Wdr,cF,n_e,Qdr,Hdr,pO,Udr,Jdr,Ydr,fF,s_e,Kdr,Zdr,_O,ecr,ocr,rcr,mF,l_e,tcr,acr,uO,ncr,scr,lcr,gF,i_e,icr,dcr,bO,ccr,fcr,mcr,hF,d_e,gcr,hcr,vO,pcr,_cr,ucr,pF,c_e,bcr,vcr,TO,Tcr,Fcr,Ccr,_F,f_e,Mcr,Ecr,FO,ycr,wcr,Acr,uF,m_e,Lcr,Bcr,CO,xcr,kcr,Rcr,g_e,Scr,Pcr,L0,uRe,kc,bF,h_e,B0,$cr,p_e,Icr,bRe,yr,x0,Ncr,Rc,jcr,__e,Dcr,qcr,u_e,Gcr,Ocr,Xcr,k0,Vcr,b_e,zcr,Wcr,Qcr,vt,R0,Hcr,v_e,Ucr,Jcr,Sc,Ycr,T_e,Kcr,Zcr,F_e,efr,ofr,rfr,C_e,tfr,afr,S0,nfr,To,P0,sfr,M_e,lfr,ifr,Cn,dfr,E_e,cfr,ffr,y_e,mfr,gfr,w_e,hfr,pfr,_fr,V,vF,A_e,ufr,bfr,MO,vfr,Tfr,Ffr,TF,L_e,Cfr,Mfr,EO,Efr,yfr,wfr,FF,B_e,Afr,Lfr,yO,Bfr,xfr,kfr,CF,x_e,Rfr,Sfr,wO,Pfr,$fr,Ifr,MF,k_e,Nfr,jfr,AO,Dfr,qfr,Gfr,EF,R_e,Ofr,Xfr,LO,Vfr,zfr,Wfr,yF,S_e,Qfr,Hfr,BO,Ufr,Jfr,Yfr,wF,P_e,Kfr,Zfr,xO,emr,omr,rmr,AF,$_e,tmr,amr,kO,nmr,smr,lmr,LF,I_e,imr,dmr,RO,cmr,fmr,mmr,BF,N_e,gmr,hmr,SO,pmr,_mr,umr,xF,j_e,bmr,vmr,PO,Tmr,Fmr,Cmr,kF,D_e,Mmr,Emr,$O,ymr,wmr,Amr,RF,q_e,Lmr,Bmr,IO,xmr,kmr,Rmr,SF,G_e,Smr,Pmr,NO,$mr,Imr,Nmr,PF,O_e,jmr,Dmr,jO,qmr,Gmr,Omr,$F,X_e,Xmr,Vmr,DO,zmr,Wmr,Qmr,IF,V_e,Hmr,Umr,qO,Jmr,Ymr,Kmr,NF,z_e,Zmr,egr,GO,ogr,rgr,tgr,jF,W_e,agr,ngr,OO,sgr,lgr,igr,DF,Q_e,dgr,cgr,XO,fgr,mgr,ggr,qF,H_e,hgr,pgr,VO,_gr,ugr,bgr,GF,U_e,vgr,Tgr,zO,Fgr,Cgr,Mgr,OF,J_e,Egr,ygr,WO,wgr,Agr,Lgr,XF,Y_e,Bgr,xgr,QO,kgr,Rgr,Sgr,K_e,Pgr,$gr,$0,vRe,Pc,VF,Z_e,I0,Igr,eue,Ngr,TRe,wr,N0,jgr,$c,Dgr,oue,qgr,Ggr,rue,Ogr,Xgr,Vgr,j0,zgr,tue,Wgr,Qgr,Hgr,Tt,D0,Ugr,aue,Jgr,Ygr,Ic,Kgr,nue,Zgr,ehr,sue,ohr,rhr,thr,lue,ahr,nhr,q0,shr,Fo,G0,lhr,iue,ihr,dhr,Mn,chr,due,fhr,mhr,cue,ghr,hhr,fue,phr,_hr,uhr,ae,zF,mue,bhr,vhr,HO,Thr,Fhr,Chr,WF,gue,Mhr,Ehr,UO,yhr,whr,Ahr,QF,hue,Lhr,Bhr,JO,xhr,khr,Rhr,HF,pue,Shr,Phr,YO,$hr,Ihr,Nhr,UF,_ue,jhr,Dhr,KO,qhr,Ghr,Ohr,JF,uue,Xhr,Vhr,ZO,zhr,Whr,Qhr,YF,bue,Hhr,Uhr,eX,Jhr,Yhr,Khr,KF,vue,Zhr,epr,oX,opr,rpr,tpr,ZF,Tue,apr,npr,rX,spr,lpr,ipr,eC,Fue,dpr,cpr,tX,fpr,mpr,gpr,oC,Cue,hpr,ppr,aX,_pr,upr,bpr,rC,Mue,vpr,Tpr,nX,Fpr,Cpr,Mpr,tC,Eue,Epr,ypr,sX,wpr,Apr,Lpr,aC,yue,Bpr,xpr,lX,kpr,Rpr,Spr,nC,wue,Ppr,$pr,iX,Ipr,Npr,jpr,sC,Aue,Dpr,qpr,dX,Gpr,Opr,Xpr,lC,Lue,Vpr,zpr,cX,Wpr,Qpr,Hpr,Bue,Upr,Jpr,O0,FRe,Nc,iC,xue,X0,Ypr,kue,Kpr,CRe,Ar,V0,Zpr,jc,e_r,Rue,o_r,r_r,Sue,t_r,a_r,n_r,z0,s_r,Pue,l_r,i_r,d_r,Ft,W0,c_r,$ue,f_r,m_r,Dc,g_r,Iue,h_r,p_r,Nue,__r,u_r,b_r,jue,v_r,T_r,Q0,F_r,Co,H0,C_r,Due,M_r,E_r,En,y_r,que,w_r,A_r,Gue,L_r,B_r,Oue,x_r,k_r,R_r,Xue,dC,Vue,S_r,P_r,fX,$_r,I_r,N_r,zue,j_r,D_r,U0,MRe,qc,cC,Wue,J0,q_r,Que,G_r,ERe,Lr,Y0,O_r,Gc,X_r,Hue,V_r,z_r,Uue,W_r,Q_r,H_r,K0,U_r,Jue,J_r,Y_r,K_r,Ct,Z0,Z_r,Yue,eur,our,Oc,rur,Kue,tur,aur,Zue,nur,sur,lur,e5e,iur,dur,eL,cur,Mo,oL,fur,o5e,mur,gur,yn,hur,r5e,pur,_ur,t5e,uur,bur,a5e,vur,Tur,Fur,K,fC,n5e,Cur,Mur,mX,Eur,yur,wur,mC,s5e,Aur,Lur,gX,Bur,xur,kur,gC,l5e,Rur,Sur,hX,Pur,$ur,Iur,hC,i5e,Nur,jur,pX,Dur,qur,Gur,pC,d5e,Our,Xur,_X,Vur,zur,Wur,_C,c5e,Qur,Hur,uX,Uur,Jur,Yur,uC,f5e,Kur,Zur,bX,e5r,o5r,r5r,bC,m5e,t5r,a5r,vX,n5r,s5r,l5r,vC,g5e,i5r,d5r,TX,c5r,f5r,m5r,TC,h5e,g5r,h5r,FX,p5r,_5r,u5r,FC,p5e,b5r,v5r,CX,T5r,F5r,C5r,CC,_5e,M5r,E5r,MX,y5r,w5r,A5r,MC,u5e,L5r,B5r,EX,x5r,k5r,R5r,EC,b5e,S5r,P5r,yX,$5r,I5r,N5r,yC,v5e,j5r,D5r,wX,q5r,G5r,O5r,wC,T5e,X5r,V5r,AX,z5r,W5r,Q5r,AC,F5e,H5r,U5r,LX,J5r,Y5r,K5r,LC,C5e,Z5r,e2r,BX,o2r,r2r,t2r,BC,M5e,a2r,n2r,xX,s2r,l2r,i2r,xC,E5e,d2r,c2r,kX,f2r,m2r,g2r,y5e,h2r,p2r,rL,yRe,Xc,kC,w5e,tL,_2r,A5e,u2r,wRe,Br,aL,b2r,Vc,v2r,L5e,T2r,F2r,B5e,C2r,M2r,E2r,nL,y2r,x5e,w2r,A2r,L2r,Mt,sL,B2r,k5e,x2r,k2r,zc,R2r,R5e,S2r,P2r,S5e,$2r,I2r,N2r,P5e,j2r,D2r,lL,q2r,Eo,iL,G2r,$5e,O2r,X2r,wn,V2r,I5e,z2r,W2r,N5e,Q2r,H2r,j5e,U2r,J2r,Y2r,Z,RC,D5e,K2r,Z2r,RX,e1r,o1r,r1r,SC,q5e,t1r,a1r,SX,n1r,s1r,l1r,PC,G5e,i1r,d1r,PX,c1r,f1r,m1r,$C,O5e,g1r,h1r,$X,p1r,_1r,u1r,IC,X5e,b1r,v1r,IX,T1r,F1r,C1r,NC,V5e,M1r,E1r,NX,y1r,w1r,A1r,jC,z5e,L1r,B1r,jX,x1r,k1r,R1r,DC,W5e,S1r,P1r,DX,$1r,I1r,N1r,qC,Q5e,j1r,D1r,qX,q1r,G1r,O1r,GC,H5e,X1r,V1r,GX,z1r,W1r,Q1r,OC,U5e,H1r,U1r,OX,J1r,Y1r,K1r,XC,J5e,Z1r,ebr,XX,obr,rbr,tbr,VC,Y5e,abr,nbr,VX,sbr,lbr,ibr,zC,K5e,dbr,cbr,zX,fbr,mbr,gbr,WC,Z5e,hbr,pbr,WX,_br,ubr,bbr,QC,e2e,vbr,Tbr,QX,Fbr,Cbr,Mbr,HC,o2e,Ebr,ybr,HX,wbr,Abr,Lbr,UC,r2e,Bbr,xbr,UX,kbr,Rbr,Sbr,JC,t2e,Pbr,$br,JX,Ibr,Nbr,jbr,a2e,Dbr,qbr,dL,ARe,Wc,YC,n2e,cL,Gbr,s2e,Obr,LRe,xr,fL,Xbr,Qc,Vbr,l2e,zbr,Wbr,i2e,Qbr,Hbr,Ubr,mL,Jbr,d2e,Ybr,Kbr,Zbr,Et,gL,evr,c2e,ovr,rvr,Hc,tvr,f2e,avr,nvr,m2e,svr,lvr,ivr,g2e,dvr,cvr,hL,fvr,yo,pL,mvr,h2e,gvr,hvr,An,pvr,p2e,_vr,uvr,_2e,bvr,vvr,u2e,Tvr,Fvr,Cvr,b2e,KC,v2e,Mvr,Evr,YX,yvr,wvr,Avr,T2e,Lvr,Bvr,_L,BRe,Uc,ZC,F2e,uL,xvr,C2e,kvr,xRe,kr,bL,Rvr,Jc,Svr,M2e,Pvr,$vr,E2e,Ivr,Nvr,jvr,vL,Dvr,y2e,qvr,Gvr,Ovr,yt,TL,Xvr,w2e,Vvr,zvr,Yc,Wvr,A2e,Qvr,Hvr,L2e,Uvr,Jvr,Yvr,B2e,Kvr,Zvr,FL,e6r,wo,CL,o6r,x2e,r6r,t6r,Ln,a6r,k2e,n6r,s6r,R2e,l6r,i6r,S2e,d6r,c6r,f6r,P2e,eM,$2e,m6r,g6r,KX,h6r,p6r,_6r,I2e,u6r,b6r,ML,kRe,Kc,oM,N2e,EL,v6r,j2e,T6r,RRe,Rr,yL,F6r,Zc,C6r,D2e,M6r,E6r,q2e,y6r,w6r,A6r,wL,L6r,G2e,B6r,x6r,k6r,wt,AL,R6r,O2e,S6r,P6r,ef,$6r,X2e,I6r,N6r,V2e,j6r,D6r,q6r,z2e,G6r,O6r,LL,X6r,Ao,BL,V6r,W2e,z6r,W6r,Bn,Q6r,Q2e,H6r,U6r,H2e,J6r,Y6r,U2e,K6r,Z6r,eTr,z,rM,J2e,oTr,rTr,ZX,tTr,aTr,nTr,tM,Y2e,sTr,lTr,eV,iTr,dTr,cTr,aM,K2e,fTr,mTr,oV,gTr,hTr,pTr,nM,Z2e,_Tr,uTr,rV,bTr,vTr,TTr,sM,e1e,FTr,CTr,tV,MTr,ETr,yTr,lM,o1e,wTr,ATr,aV,LTr,BTr,xTr,iM,r1e,kTr,RTr,nV,STr,PTr,$Tr,dM,t1e,ITr,NTr,sV,jTr,DTr,qTr,cM,a1e,GTr,OTr,lV,XTr,VTr,zTr,fM,n1e,WTr,QTr,iV,HTr,UTr,JTr,mM,s1e,YTr,KTr,dV,ZTr,eFr,oFr,gM,l1e,rFr,tFr,cV,aFr,nFr,sFr,hM,i1e,lFr,iFr,fV,dFr,cFr,fFr,pM,d1e,mFr,gFr,mV,hFr,pFr,_Fr,_M,c1e,uFr,bFr,gV,vFr,TFr,FFr,uM,f1e,CFr,MFr,hV,EFr,yFr,wFr,bM,m1e,AFr,LFr,pV,BFr,xFr,kFr,vM,g1e,RFr,SFr,_V,PFr,$Fr,IFr,TM,h1e,NFr,jFr,uV,DFr,qFr,GFr,FM,p1e,OFr,XFr,bV,VFr,zFr,WFr,CM,_1e,QFr,HFr,vV,UFr,JFr,YFr,MM,u1e,KFr,ZFr,TV,eCr,oCr,rCr,EM,b1e,tCr,aCr,FV,nCr,sCr,lCr,yM,v1e,iCr,dCr,CV,cCr,fCr,mCr,wM,T1e,gCr,hCr,MV,pCr,_Cr,uCr,F1e,bCr,vCr,xL,SRe,of,AM,C1e,kL,TCr,M1e,FCr,PRe,Sr,RL,CCr,rf,MCr,E1e,ECr,yCr,y1e,wCr,ACr,LCr,SL,BCr,w1e,xCr,kCr,RCr,At,PL,SCr,A1e,PCr,$Cr,tf,ICr,L1e,NCr,jCr,B1e,DCr,qCr,GCr,x1e,OCr,XCr,$L,VCr,Lo,IL,zCr,k1e,WCr,QCr,xn,HCr,R1e,UCr,JCr,S1e,YCr,KCr,P1e,ZCr,eMr,oMr,ca,LM,$1e,rMr,tMr,EV,aMr,nMr,sMr,BM,I1e,lMr,iMr,yV,dMr,cMr,fMr,xM,N1e,mMr,gMr,wV,hMr,pMr,_Mr,kM,j1e,uMr,bMr,AV,vMr,TMr,FMr,RM,D1e,CMr,MMr,LV,EMr,yMr,wMr,q1e,AMr,LMr,NL,$Re,af,SM,G1e,jL,BMr,O1e,xMr,IRe,Pr,DL,kMr,nf,RMr,X1e,SMr,PMr,V1e,$Mr,IMr,NMr,qL,jMr,z1e,DMr,qMr,GMr,Lt,GL,OMr,W1e,XMr,VMr,sf,zMr,Q1e,WMr,QMr,H1e,HMr,UMr,JMr,U1e,YMr,KMr,OL,ZMr,Bo,XL,e4r,J1e,o4r,r4r,kn,t4r,Y1e,a4r,n4r,K1e,s4r,l4r,Z1e,i4r,d4r,c4r,ce,PM,ebe,f4r,m4r,BV,g4r,h4r,p4r,$M,obe,_4r,u4r,xV,b4r,v4r,T4r,IM,rbe,F4r,C4r,kV,M4r,E4r,y4r,NM,tbe,w4r,A4r,RV,L4r,B4r,x4r,jM,abe,k4r,R4r,SV,S4r,P4r,$4r,DM,nbe,I4r,N4r,PV,j4r,D4r,q4r,qM,sbe,G4r,O4r,$V,X4r,V4r,z4r,GM,lbe,W4r,Q4r,IV,H4r,U4r,J4r,OM,ibe,Y4r,K4r,NV,Z4r,eEr,oEr,XM,dbe,rEr,tEr,jV,aEr,nEr,sEr,VM,cbe,lEr,iEr,DV,dEr,cEr,fEr,zM,fbe,mEr,gEr,qV,hEr,pEr,_Er,mbe,uEr,bEr,VL,NRe,lf,WM,gbe,zL,vEr,hbe,TEr,jRe,$r,WL,FEr,df,CEr,pbe,MEr,EEr,_be,yEr,wEr,AEr,QL,LEr,ube,BEr,xEr,kEr,Bt,HL,REr,bbe,SEr,PEr,cf,$Er,vbe,IEr,NEr,Tbe,jEr,DEr,qEr,Fbe,GEr,OEr,UL,XEr,xo,JL,VEr,Cbe,zEr,WEr,Rn,QEr,Mbe,HEr,UEr,Ebe,JEr,YEr,ybe,KEr,ZEr,e3r,be,QM,wbe,o3r,r3r,GV,t3r,a3r,n3r,HM,Abe,s3r,l3r,OV,i3r,d3r,c3r,UM,Lbe,f3r,m3r,XV,g3r,h3r,p3r,JM,Bbe,_3r,u3r,VV,b3r,v3r,T3r,YM,xbe,F3r,C3r,zV,M3r,E3r,y3r,KM,kbe,w3r,A3r,WV,L3r,B3r,x3r,ZM,Rbe,k3r,R3r,QV,S3r,P3r,$3r,e4,Sbe,I3r,N3r,HV,j3r,D3r,q3r,o4,Pbe,G3r,O3r,UV,X3r,V3r,z3r,r4,$be,W3r,Q3r,JV,H3r,U3r,J3r,Ibe,Y3r,K3r,YL,DRe,ff,t4,Nbe,KL,Z3r,jbe,eyr,qRe,Ir,ZL,oyr,mf,ryr,Dbe,tyr,ayr,qbe,nyr,syr,lyr,e8,iyr,Gbe,dyr,cyr,fyr,xt,o8,myr,Obe,gyr,hyr,gf,pyr,Xbe,_yr,uyr,Vbe,byr,vyr,Tyr,zbe,Fyr,Cyr,r8,Myr,ko,t8,Eyr,Wbe,yyr,wyr,Sn,Ayr,Qbe,Lyr,Byr,Hbe,xyr,kyr,Ube,Ryr,Syr,Pyr,Ee,a4,Jbe,$yr,Iyr,YV,Nyr,jyr,Dyr,n4,Ybe,qyr,Gyr,KV,Oyr,Xyr,Vyr,s4,Kbe,zyr,Wyr,ZV,Qyr,Hyr,Uyr,l4,Zbe,Jyr,Yyr,ez,Kyr,Zyr,ewr,i4,eve,owr,rwr,oz,twr,awr,nwr,d4,ove,swr,lwr,rz,iwr,dwr,cwr,c4,rve,fwr,mwr,tz,gwr,hwr,pwr,f4,tve,_wr,uwr,az,bwr,vwr,Twr,m4,ave,Fwr,Cwr,nz,Mwr,Ewr,ywr,nve,wwr,Awr,a8,GRe,hf,g4,sve,n8,Lwr,lve,Bwr,ORe,Nr,s8,xwr,pf,kwr,ive,Rwr,Swr,dve,Pwr,$wr,Iwr,l8,Nwr,cve,jwr,Dwr,qwr,kt,i8,Gwr,fve,Owr,Xwr,_f,Vwr,mve,zwr,Wwr,gve,Qwr,Hwr,Uwr,hve,Jwr,Ywr,d8,Kwr,Ro,c8,Zwr,pve,eAr,oAr,Pn,rAr,_ve,tAr,aAr,uve,nAr,sAr,bve,lAr,iAr,dAr,ve,h4,vve,cAr,fAr,sz,mAr,gAr,hAr,p4,Tve,pAr,_Ar,lz,uAr,bAr,vAr,_4,Fve,TAr,FAr,iz,CAr,MAr,EAr,u4,Cve,yAr,wAr,dz,AAr,LAr,BAr,b4,Mve,xAr,kAr,cz,RAr,SAr,PAr,v4,Eve,$Ar,IAr,fz,NAr,jAr,DAr,T4,yve,qAr,GAr,mz,OAr,XAr,VAr,F4,wve,zAr,WAr,gz,QAr,HAr,UAr,C4,Ave,JAr,YAr,hz,KAr,ZAr,e0r,M4,Lve,o0r,r0r,pz,t0r,a0r,n0r,Bve,s0r,l0r,f8,XRe,uf,E4,xve,m8,i0r,kve,d0r,VRe,jr,g8,c0r,bf,f0r,Rve,m0r,g0r,Sve,h0r,p0r,_0r,h8,u0r,Pve,b0r,v0r,T0r,Rt,p8,F0r,$ve,C0r,M0r,vf,E0r,Ive,y0r,w0r,Nve,A0r,L0r,B0r,jve,x0r,k0r,_8,R0r,So,u8,S0r,Dve,P0r,$0r,$n,I0r,qve,N0r,j0r,Gve,D0r,q0r,Ove,G0r,O0r,X0r,Te,y4,Xve,V0r,z0r,_z,W0r,Q0r,H0r,w4,Vve,U0r,J0r,uz,Y0r,K0r,Z0r,A4,zve,eLr,oLr,bz,rLr,tLr,aLr,L4,Wve,nLr,sLr,vz,lLr,iLr,dLr,B4,Qve,cLr,fLr,Tz,mLr,gLr,hLr,x4,Hve,pLr,_Lr,Fz,uLr,bLr,vLr,k4,Uve,TLr,FLr,Cz,CLr,MLr,ELr,R4,Jve,yLr,wLr,Mz,ALr,LLr,BLr,S4,Yve,xLr,kLr,Ez,RLr,SLr,PLr,P4,Kve,$Lr,ILr,yz,NLr,jLr,DLr,Zve,qLr,GLr,b8,zRe,Tf,$4,e6e,v8,OLr,o6e,XLr,WRe,Dr,T8,VLr,Ff,zLr,r6e,WLr,QLr,t6e,HLr,ULr,JLr,F8,YLr,a6e,KLr,ZLr,e8r,St,C8,o8r,n6e,r8r,t8r,Cf,a8r,s6e,n8r,s8r,l6e,l8r,i8r,d8r,i6e,c8r,f8r,M8,m8r,Po,E8,g8r,d6e,h8r,p8r,In,_8r,c6e,u8r,b8r,f6e,v8r,T8r,m6e,F8r,C8r,M8r,Se,I4,g6e,E8r,y8r,wz,w8r,A8r,L8r,N4,h6e,B8r,x8r,Az,k8r,R8r,S8r,j4,p6e,P8r,$8r,Lz,I8r,N8r,j8r,D4,_6e,D8r,q8r,Bz,G8r,O8r,X8r,q4,u6e,V8r,z8r,xz,W8r,Q8r,H8r,G4,b6e,U8r,J8r,kz,Y8r,K8r,Z8r,O4,v6e,e7r,o7r,Rz,r7r,t7r,a7r,X4,T6e,n7r,s7r,Sz,l7r,i7r,d7r,F6e,c7r,f7r,y8,QRe,Mf,V4,C6e,w8,m7r,M6e,g7r,HRe,qr,A8,h7r,Ef,p7r,E6e,_7r,u7r,y6e,b7r,v7r,T7r,L8,F7r,w6e,C7r,M7r,E7r,Pt,B8,y7r,A6e,w7r,A7r,yf,L7r,L6e,B7r,x7r,B6e,k7r,R7r,S7r,x6e,P7r,$7r,x8,I7r,$o,k8,N7r,k6e,j7r,D7r,Nn,q7r,R6e,G7r,O7r,S6e,X7r,V7r,P6e,z7r,W7r,Q7r,Pe,z4,$6e,H7r,U7r,Pz,J7r,Y7r,K7r,W4,I6e,Z7r,e9r,$z,o9r,r9r,t9r,Q4,N6e,a9r,n9r,Iz,s9r,l9r,i9r,H4,j6e,d9r,c9r,Nz,f9r,m9r,g9r,U4,D6e,h9r,p9r,jz,_9r,u9r,b9r,J4,q6e,v9r,T9r,Dz,F9r,C9r,M9r,Y4,G6e,E9r,y9r,qz,w9r,A9r,L9r,K4,O6e,B9r,x9r,Gz,k9r,R9r,S9r,X6e,P9r,$9r,R8,URe,wf,Z4,V6e,S8,I9r,z6e,N9r,JRe,Gr,P8,j9r,Af,D9r,W6e,q9r,G9r,Q6e,O9r,X9r,V9r,$8,z9r,H6e,W9r,Q9r,H9r,$t,I8,U9r,U6e,J9r,Y9r,Lf,K9r,J6e,Z9r,eBr,Y6e,oBr,rBr,tBr,K6e,aBr,nBr,N8,sBr,Io,j8,lBr,Z6e,iBr,dBr,jn,cBr,eTe,fBr,mBr,oTe,gBr,hBr,rTe,pBr,_Br,uBr,tTe,eE,aTe,bBr,vBr,Oz,TBr,FBr,CBr,nTe,MBr,EBr,D8,YRe,Bf,oE,sTe,q8,yBr,lTe,wBr,KRe,Or,G8,ABr,xf,LBr,iTe,BBr,xBr,dTe,kBr,RBr,SBr,O8,PBr,cTe,$Br,IBr,NBr,It,X8,jBr,fTe,DBr,qBr,kf,GBr,mTe,OBr,XBr,gTe,VBr,zBr,WBr,hTe,QBr,HBr,V8,UBr,No,z8,JBr,pTe,YBr,KBr,Dn,ZBr,_Te,exr,oxr,uTe,rxr,txr,bTe,axr,nxr,sxr,W8,rE,vTe,lxr,ixr,Xz,dxr,cxr,fxr,tE,TTe,mxr,gxr,Vz,hxr,pxr,_xr,FTe,uxr,bxr,Q8,ZRe,Rf,aE,CTe,H8,vxr,MTe,Txr,eSe,Xr,U8,Fxr,Sf,Cxr,ETe,Mxr,Exr,yTe,yxr,wxr,Axr,J8,Lxr,wTe,Bxr,xxr,kxr,Nt,Y8,Rxr,ATe,Sxr,Pxr,Pf,$xr,LTe,Ixr,Nxr,BTe,jxr,Dxr,qxr,xTe,Gxr,Oxr,K8,Xxr,jo,Z8,Vxr,kTe,zxr,Wxr,qn,Qxr,RTe,Hxr,Uxr,STe,Jxr,Yxr,PTe,Kxr,Zxr,ekr,$Te,nE,ITe,okr,rkr,zz,tkr,akr,nkr,NTe,skr,lkr,e7,oSe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),d3=new X({}),c3=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new ikr({props:{warning:"&lcub;true}",$$slots:{default:[dMt]},$$scope:{ctx:Ii}}}),f3=new X({}),m3=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/configuration_auto.py#L536"}}),p3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/configuration_auto.py#L559",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),_3=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),u3=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/configuration_auto.py#L681",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),b3=new X({}),v3=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/tokenization_auto.py#L352"}}),C3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16255/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),M3=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),E3=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),y3=new X({}),w3=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),B3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16255/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Bh=new ikr({props:{$$slots:{default:[cMt]},$$scope:{ctx:Ii}}}),x3=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),k3=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),R3=new X({}),S3=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/processing_auto.py#L71"}}),I3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),qh=new ikr({props:{$$slots:{default:[fMt]},$$scope:{ctx:Ii}}}),N3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),j3=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),D3=new X({}),q3=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L702"}}),O3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),V3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W3=new X({}),Q3=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L709"}}),U3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Y3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z3=new X({}),ey=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L724"}}),ry=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),ay=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L731"}}),dy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),fy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L738"}}),_y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),by=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),Fy=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L747"}}),My=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),Ly=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L781"}}),xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L788"}}),Ny=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Dy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Oy=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L774"}}),Vy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Wy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L756"}}),Yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new X({}),rw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L763"}}),aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new X({}),dw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L797"}}),fw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new X({}),_w=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L836"}}),bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),Mw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L843"}}),yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),xw=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L866"}}),Rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new X({}),Nw=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L850"}}),Dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new X({}),Vw=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L857"}}),Ww=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Hw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L875"}}),eA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),rA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new X({}),nA=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L882"}}),lA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),dA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new X({}),mA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L829"}}),hA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),_A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new X({}),vA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L804"}}),FA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),MA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),wA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L811"}}),LA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),xA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),PA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L820"}}),IA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),jA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),GA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L376"}}),XA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),zA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),HA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),JA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),KA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e0=new X({}),o0=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L398"}}),t0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),a0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),n0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),c0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),f0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),m0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p0=new X({}),_0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),b0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),T0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new X({}),M0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),y0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),A0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new X({}),x0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),R0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),P0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new X({}),N0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),D0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),G0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new X({}),V0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),W0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),H0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new X({}),Y0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Z0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),oL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),sL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),iL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),fL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),gL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),pL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uL=new X({}),bL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),TL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),CL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EL=new X({}),yL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),AL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),BL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kL=new X({}),RL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),PL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),IL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jL=new X({}),DL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),GL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),XL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zL=new X({}),WL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),HL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),UL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),JL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KL=new X({}),ZL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),o8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),r8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),t8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n8=new X({}),s8=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),i8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),d8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),c8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m8=new X({}),g8=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),p8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),u8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v8=new X({}),T8=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),C8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),M8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),E8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w8=new X({}),A8=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),B8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),x8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),k8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S8=new X({}),P8=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),I8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),N8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),j8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q8=new X({}),G8=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),X8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),V8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),z8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H8=new X({}),U8=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Y8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),K8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),Z8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),pe=a("a"),io=a("span"),f(fe.$$.fragment),Me=l(),Vo=a("span"),Ni=o("Auto Classes"),If=l(),fa=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),n3=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),qi=o("Instantiating one of "),Gn=a("a"),s3=o("AutoConfig"),On=o(", "),Xn=a("a"),l3=o("AutoModel"),Gi=o(`, and
`),Vn=a("a"),i3=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),K7=o("will create a model that is an instance of "),Xi=a("a"),Z7=o("BertModel"),e9=o("."),zo=l(),Ga=a("p"),o9=o("There is one class of "),Df=a("code"),r9=o("AutoModel"),h$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),eke=l(),Vi=a("h2"),qf=a("a"),jQ=a("span"),f(d3.$$.fragment),p$e=l(),DQ=a("span"),_$e=o("Extending the Auto Classes"),oke=l(),zn=a("p"),u$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qQ=a("code"),b$e=o("NewModel"),v$e=o(", make sure you have a "),GQ=a("code"),T$e=o("NewModelConfig"),F$e=o(` then you can add those to the auto
classes like this:`),rke=l(),f(c3.$$.fragment),tke=l(),t9=a("p"),C$e=o("You will then be able to use the auto classes like you would usually do!"),ake=l(),f(Gf.$$.fragment),nke=l(),zi=a("h2"),Of=a("a"),OQ=a("span"),f(f3.$$.fragment),M$e=l(),XQ=a("span"),E$e=o("AutoConfig"),ske=l(),Wo=a("div"),f(m3.$$.fragment),y$e=l(),g3=a("p"),w$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),a9=a("a"),A$e=o("from_pretrained()"),L$e=o(" class method."),B$e=l(),h3=a("p"),x$e=o("This class cannot be instantiated directly using "),VQ=a("code"),k$e=o("__init__()"),R$e=o(" (throws an error)."),S$e=l(),mo=a("div"),f(p3.$$.fragment),P$e=l(),zQ=a("p"),$$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),I$e=l(),Wi=a("p"),N$e=o("The configuration class to instantiate is selected based on the "),WQ=a("code"),j$e=o("model_type"),D$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QQ=a("code"),q$e=o("pretrained_model_name_or_path"),G$e=o(":"),O$e=l(),v=a("ul"),Xf=a("li"),HQ=a("strong"),X$e=o("albert"),V$e=o(" \u2014 "),n9=a("a"),z$e=o("AlbertConfig"),W$e=o(" (ALBERT model)"),Q$e=l(),Vf=a("li"),UQ=a("strong"),H$e=o("bart"),U$e=o(" \u2014 "),s9=a("a"),J$e=o("BartConfig"),Y$e=o(" (BART model)"),K$e=l(),zf=a("li"),JQ=a("strong"),Z$e=o("beit"),eIe=o(" \u2014 "),l9=a("a"),oIe=o("BeitConfig"),rIe=o(" (BEiT model)"),tIe=l(),Wf=a("li"),YQ=a("strong"),aIe=o("bert"),nIe=o(" \u2014 "),i9=a("a"),sIe=o("BertConfig"),lIe=o(" (BERT model)"),iIe=l(),Qf=a("li"),KQ=a("strong"),dIe=o("bert-generation"),cIe=o(" \u2014 "),d9=a("a"),fIe=o("BertGenerationConfig"),mIe=o(" (Bert Generation model)"),gIe=l(),Hf=a("li"),ZQ=a("strong"),hIe=o("big_bird"),pIe=o(" \u2014 "),c9=a("a"),_Ie=o("BigBirdConfig"),uIe=o(" (BigBird model)"),bIe=l(),Uf=a("li"),eH=a("strong"),vIe=o("bigbird_pegasus"),TIe=o(" \u2014 "),f9=a("a"),FIe=o("BigBirdPegasusConfig"),CIe=o(" (BigBirdPegasus model)"),MIe=l(),Jf=a("li"),oH=a("strong"),EIe=o("blenderbot"),yIe=o(" \u2014 "),m9=a("a"),wIe=o("BlenderbotConfig"),AIe=o(" (Blenderbot model)"),LIe=l(),Yf=a("li"),rH=a("strong"),BIe=o("blenderbot-small"),xIe=o(" \u2014 "),g9=a("a"),kIe=o("BlenderbotSmallConfig"),RIe=o(" (BlenderbotSmall model)"),SIe=l(),Kf=a("li"),tH=a("strong"),PIe=o("camembert"),$Ie=o(" \u2014 "),h9=a("a"),IIe=o("CamembertConfig"),NIe=o(" (CamemBERT model)"),jIe=l(),Zf=a("li"),aH=a("strong"),DIe=o("canine"),qIe=o(" \u2014 "),p9=a("a"),GIe=o("CanineConfig"),OIe=o(" (Canine model)"),XIe=l(),em=a("li"),nH=a("strong"),VIe=o("clip"),zIe=o(" \u2014 "),_9=a("a"),WIe=o("CLIPConfig"),QIe=o(" (CLIP model)"),HIe=l(),om=a("li"),sH=a("strong"),UIe=o("convbert"),JIe=o(" \u2014 "),u9=a("a"),YIe=o("ConvBertConfig"),KIe=o(" (ConvBERT model)"),ZIe=l(),rm=a("li"),lH=a("strong"),eNe=o("convnext"),oNe=o(" \u2014 "),b9=a("a"),rNe=o("ConvNextConfig"),tNe=o(" (ConvNext model)"),aNe=l(),tm=a("li"),iH=a("strong"),nNe=o("ctrl"),sNe=o(" \u2014 "),v9=a("a"),lNe=o("CTRLConfig"),iNe=o(" (CTRL model)"),dNe=l(),am=a("li"),dH=a("strong"),cNe=o("data2vec-audio"),fNe=o(" \u2014 "),T9=a("a"),mNe=o("Data2VecAudioConfig"),gNe=o(" (Data2VecAudio model)"),hNe=l(),nm=a("li"),cH=a("strong"),pNe=o("data2vec-text"),_Ne=o(" \u2014 "),F9=a("a"),uNe=o("Data2VecTextConfig"),bNe=o(" (Data2VecText model)"),vNe=l(),sm=a("li"),fH=a("strong"),TNe=o("deberta"),FNe=o(" \u2014 "),C9=a("a"),CNe=o("DebertaConfig"),MNe=o(" (DeBERTa model)"),ENe=l(),lm=a("li"),mH=a("strong"),yNe=o("deberta-v2"),wNe=o(" \u2014 "),M9=a("a"),ANe=o("DebertaV2Config"),LNe=o(" (DeBERTa-v2 model)"),BNe=l(),im=a("li"),gH=a("strong"),xNe=o("deit"),kNe=o(" \u2014 "),E9=a("a"),RNe=o("DeiTConfig"),SNe=o(" (DeiT model)"),PNe=l(),dm=a("li"),hH=a("strong"),$Ne=o("detr"),INe=o(" \u2014 "),y9=a("a"),NNe=o("DetrConfig"),jNe=o(" (DETR model)"),DNe=l(),cm=a("li"),pH=a("strong"),qNe=o("distilbert"),GNe=o(" \u2014 "),w9=a("a"),ONe=o("DistilBertConfig"),XNe=o(" (DistilBERT model)"),VNe=l(),fm=a("li"),_H=a("strong"),zNe=o("dpr"),WNe=o(" \u2014 "),A9=a("a"),QNe=o("DPRConfig"),HNe=o(" (DPR model)"),UNe=l(),mm=a("li"),uH=a("strong"),JNe=o("electra"),YNe=o(" \u2014 "),L9=a("a"),KNe=o("ElectraConfig"),ZNe=o(" (ELECTRA model)"),eje=l(),gm=a("li"),bH=a("strong"),oje=o("encoder-decoder"),rje=o(" \u2014 "),B9=a("a"),tje=o("EncoderDecoderConfig"),aje=o(" (Encoder decoder model)"),nje=l(),hm=a("li"),vH=a("strong"),sje=o("flaubert"),lje=o(" \u2014 "),x9=a("a"),ije=o("FlaubertConfig"),dje=o(" (FlauBERT model)"),cje=l(),pm=a("li"),TH=a("strong"),fje=o("fnet"),mje=o(" \u2014 "),k9=a("a"),gje=o("FNetConfig"),hje=o(" (FNet model)"),pje=l(),_m=a("li"),FH=a("strong"),_je=o("fsmt"),uje=o(" \u2014 "),R9=a("a"),bje=o("FSMTConfig"),vje=o(" (FairSeq Machine-Translation model)"),Tje=l(),um=a("li"),CH=a("strong"),Fje=o("funnel"),Cje=o(" \u2014 "),S9=a("a"),Mje=o("FunnelConfig"),Eje=o(" (Funnel Transformer model)"),yje=l(),bm=a("li"),MH=a("strong"),wje=o("glpn"),Aje=o(" \u2014 "),P9=a("a"),Lje=o("GLPNConfig"),Bje=o(" (GLPN model)"),xje=l(),vm=a("li"),EH=a("strong"),kje=o("gpt2"),Rje=o(" \u2014 "),$9=a("a"),Sje=o("GPT2Config"),Pje=o(" (OpenAI GPT-2 model)"),$je=l(),Tm=a("li"),yH=a("strong"),Ije=o("gpt_neo"),Nje=o(" \u2014 "),I9=a("a"),jje=o("GPTNeoConfig"),Dje=o(" (GPT Neo model)"),qje=l(),Fm=a("li"),wH=a("strong"),Gje=o("gptj"),Oje=o(" \u2014 "),N9=a("a"),Xje=o("GPTJConfig"),Vje=o(" (GPT-J model)"),zje=l(),Cm=a("li"),AH=a("strong"),Wje=o("hubert"),Qje=o(" \u2014 "),j9=a("a"),Hje=o("HubertConfig"),Uje=o(" (Hubert model)"),Jje=l(),Mm=a("li"),LH=a("strong"),Yje=o("ibert"),Kje=o(" \u2014 "),D9=a("a"),Zje=o("IBertConfig"),eDe=o(" (I-BERT model)"),oDe=l(),Em=a("li"),BH=a("strong"),rDe=o("imagegpt"),tDe=o(" \u2014 "),q9=a("a"),aDe=o("ImageGPTConfig"),nDe=o(" (ImageGPT model)"),sDe=l(),ym=a("li"),xH=a("strong"),lDe=o("layoutlm"),iDe=o(" \u2014 "),G9=a("a"),dDe=o("LayoutLMConfig"),cDe=o(" (LayoutLM model)"),fDe=l(),wm=a("li"),kH=a("strong"),mDe=o("layoutlmv2"),gDe=o(" \u2014 "),O9=a("a"),hDe=o("LayoutLMv2Config"),pDe=o(" (LayoutLMv2 model)"),_De=l(),Am=a("li"),RH=a("strong"),uDe=o("led"),bDe=o(" \u2014 "),X9=a("a"),vDe=o("LEDConfig"),TDe=o(" (LED model)"),FDe=l(),Lm=a("li"),SH=a("strong"),CDe=o("longformer"),MDe=o(" \u2014 "),V9=a("a"),EDe=o("LongformerConfig"),yDe=o(" (Longformer model)"),wDe=l(),Bm=a("li"),PH=a("strong"),ADe=o("luke"),LDe=o(" \u2014 "),z9=a("a"),BDe=o("LukeConfig"),xDe=o(" (LUKE model)"),kDe=l(),xm=a("li"),$H=a("strong"),RDe=o("lxmert"),SDe=o(" \u2014 "),W9=a("a"),PDe=o("LxmertConfig"),$De=o(" (LXMERT model)"),IDe=l(),km=a("li"),IH=a("strong"),NDe=o("m2m_100"),jDe=o(" \u2014 "),Q9=a("a"),DDe=o("M2M100Config"),qDe=o(" (M2M100 model)"),GDe=l(),Rm=a("li"),NH=a("strong"),ODe=o("marian"),XDe=o(" \u2014 "),H9=a("a"),VDe=o("MarianConfig"),zDe=o(" (Marian model)"),WDe=l(),Sm=a("li"),jH=a("strong"),QDe=o("maskformer"),HDe=o(" \u2014 "),U9=a("a"),UDe=o("MaskFormerConfig"),JDe=o(" (MaskFormer model)"),YDe=l(),Pm=a("li"),DH=a("strong"),KDe=o("mbart"),ZDe=o(" \u2014 "),J9=a("a"),eqe=o("MBartConfig"),oqe=o(" (mBART model)"),rqe=l(),$m=a("li"),qH=a("strong"),tqe=o("megatron-bert"),aqe=o(" \u2014 "),Y9=a("a"),nqe=o("MegatronBertConfig"),sqe=o(" (MegatronBert model)"),lqe=l(),Im=a("li"),GH=a("strong"),iqe=o("mobilebert"),dqe=o(" \u2014 "),K9=a("a"),cqe=o("MobileBertConfig"),fqe=o(" (MobileBERT model)"),mqe=l(),Nm=a("li"),OH=a("strong"),gqe=o("mpnet"),hqe=o(" \u2014 "),Z9=a("a"),pqe=o("MPNetConfig"),_qe=o(" (MPNet model)"),uqe=l(),jm=a("li"),XH=a("strong"),bqe=o("mt5"),vqe=o(" \u2014 "),eB=a("a"),Tqe=o("MT5Config"),Fqe=o(" (mT5 model)"),Cqe=l(),Dm=a("li"),VH=a("strong"),Mqe=o("nystromformer"),Eqe=o(" \u2014 "),oB=a("a"),yqe=o("NystromformerConfig"),wqe=o(" (Nystromformer model)"),Aqe=l(),qm=a("li"),zH=a("strong"),Lqe=o("openai-gpt"),Bqe=o(" \u2014 "),rB=a("a"),xqe=o("OpenAIGPTConfig"),kqe=o(" (OpenAI GPT model)"),Rqe=l(),Gm=a("li"),WH=a("strong"),Sqe=o("pegasus"),Pqe=o(" \u2014 "),tB=a("a"),$qe=o("PegasusConfig"),Iqe=o(" (Pegasus model)"),Nqe=l(),Om=a("li"),QH=a("strong"),jqe=o("perceiver"),Dqe=o(" \u2014 "),aB=a("a"),qqe=o("PerceiverConfig"),Gqe=o(" (Perceiver model)"),Oqe=l(),Xm=a("li"),HH=a("strong"),Xqe=o("plbart"),Vqe=o(" \u2014 "),nB=a("a"),zqe=o("PLBartConfig"),Wqe=o(" (PLBart model)"),Qqe=l(),Vm=a("li"),UH=a("strong"),Hqe=o("poolformer"),Uqe=o(" \u2014 "),sB=a("a"),Jqe=o("PoolFormerConfig"),Yqe=o(" (PoolFormer model)"),Kqe=l(),zm=a("li"),JH=a("strong"),Zqe=o("prophetnet"),eGe=o(" \u2014 "),lB=a("a"),oGe=o("ProphetNetConfig"),rGe=o(" (ProphetNet model)"),tGe=l(),Wm=a("li"),YH=a("strong"),aGe=o("qdqbert"),nGe=o(" \u2014 "),iB=a("a"),sGe=o("QDQBertConfig"),lGe=o(" (QDQBert model)"),iGe=l(),Qm=a("li"),KH=a("strong"),dGe=o("rag"),cGe=o(" \u2014 "),dB=a("a"),fGe=o("RagConfig"),mGe=o(" (RAG model)"),gGe=l(),Hm=a("li"),ZH=a("strong"),hGe=o("realm"),pGe=o(" \u2014 "),cB=a("a"),_Ge=o("RealmConfig"),uGe=o(" (Realm model)"),bGe=l(),Um=a("li"),eU=a("strong"),vGe=o("reformer"),TGe=o(" \u2014 "),fB=a("a"),FGe=o("ReformerConfig"),CGe=o(" (Reformer model)"),MGe=l(),Jm=a("li"),oU=a("strong"),EGe=o("rembert"),yGe=o(" \u2014 "),mB=a("a"),wGe=o("RemBertConfig"),AGe=o(" (RemBERT model)"),LGe=l(),Ym=a("li"),rU=a("strong"),BGe=o("resnet"),xGe=o(" \u2014 "),gB=a("a"),kGe=o("ResNetConfig"),RGe=o(" (ResNet model)"),SGe=l(),Km=a("li"),tU=a("strong"),PGe=o("retribert"),$Ge=o(" \u2014 "),hB=a("a"),IGe=o("RetriBertConfig"),NGe=o(" (RetriBERT model)"),jGe=l(),Zm=a("li"),aU=a("strong"),DGe=o("roberta"),qGe=o(" \u2014 "),pB=a("a"),GGe=o("RobertaConfig"),OGe=o(" (RoBERTa model)"),XGe=l(),eg=a("li"),nU=a("strong"),VGe=o("roformer"),zGe=o(" \u2014 "),_B=a("a"),WGe=o("RoFormerConfig"),QGe=o(" (RoFormer model)"),HGe=l(),og=a("li"),sU=a("strong"),UGe=o("segformer"),JGe=o(" \u2014 "),uB=a("a"),YGe=o("SegformerConfig"),KGe=o(" (SegFormer model)"),ZGe=l(),rg=a("li"),lU=a("strong"),eOe=o("sew"),oOe=o(" \u2014 "),bB=a("a"),rOe=o("SEWConfig"),tOe=o(" (SEW model)"),aOe=l(),tg=a("li"),iU=a("strong"),nOe=o("sew-d"),sOe=o(" \u2014 "),vB=a("a"),lOe=o("SEWDConfig"),iOe=o(" (SEW-D model)"),dOe=l(),ag=a("li"),dU=a("strong"),cOe=o("speech-encoder-decoder"),fOe=o(" \u2014 "),TB=a("a"),mOe=o("SpeechEncoderDecoderConfig"),gOe=o(" (Speech Encoder decoder model)"),hOe=l(),ng=a("li"),cU=a("strong"),pOe=o("speech_to_text"),_Oe=o(" \u2014 "),FB=a("a"),uOe=o("Speech2TextConfig"),bOe=o(" (Speech2Text model)"),vOe=l(),sg=a("li"),fU=a("strong"),TOe=o("speech_to_text_2"),FOe=o(" \u2014 "),CB=a("a"),COe=o("Speech2Text2Config"),MOe=o(" (Speech2Text2 model)"),EOe=l(),lg=a("li"),mU=a("strong"),yOe=o("splinter"),wOe=o(" \u2014 "),MB=a("a"),AOe=o("SplinterConfig"),LOe=o(" (Splinter model)"),BOe=l(),ig=a("li"),gU=a("strong"),xOe=o("squeezebert"),kOe=o(" \u2014 "),EB=a("a"),ROe=o("SqueezeBertConfig"),SOe=o(" (SqueezeBERT model)"),POe=l(),dg=a("li"),hU=a("strong"),$Oe=o("swin"),IOe=o(" \u2014 "),yB=a("a"),NOe=o("SwinConfig"),jOe=o(" (Swin model)"),DOe=l(),cg=a("li"),pU=a("strong"),qOe=o("t5"),GOe=o(" \u2014 "),wB=a("a"),OOe=o("T5Config"),XOe=o(" (T5 model)"),VOe=l(),fg=a("li"),_U=a("strong"),zOe=o("tapas"),WOe=o(" \u2014 "),AB=a("a"),QOe=o("TapasConfig"),HOe=o(" (TAPAS model)"),UOe=l(),mg=a("li"),uU=a("strong"),JOe=o("transfo-xl"),YOe=o(" \u2014 "),LB=a("a"),KOe=o("TransfoXLConfig"),ZOe=o(" (Transformer-XL model)"),eXe=l(),gg=a("li"),bU=a("strong"),oXe=o("trocr"),rXe=o(" \u2014 "),BB=a("a"),tXe=o("TrOCRConfig"),aXe=o(" (TrOCR model)"),nXe=l(),hg=a("li"),vU=a("strong"),sXe=o("unispeech"),lXe=o(" \u2014 "),xB=a("a"),iXe=o("UniSpeechConfig"),dXe=o(" (UniSpeech model)"),cXe=l(),pg=a("li"),TU=a("strong"),fXe=o("unispeech-sat"),mXe=o(" \u2014 "),kB=a("a"),gXe=o("UniSpeechSatConfig"),hXe=o(" (UniSpeechSat model)"),pXe=l(),_g=a("li"),FU=a("strong"),_Xe=o("van"),uXe=o(" \u2014 "),RB=a("a"),bXe=o("VanConfig"),vXe=o(" (VAN model)"),TXe=l(),ug=a("li"),CU=a("strong"),FXe=o("vilt"),CXe=o(" \u2014 "),SB=a("a"),MXe=o("ViltConfig"),EXe=o(" (ViLT model)"),yXe=l(),bg=a("li"),MU=a("strong"),wXe=o("vision-encoder-decoder"),AXe=o(" \u2014 "),PB=a("a"),LXe=o("VisionEncoderDecoderConfig"),BXe=o(" (Vision Encoder decoder model)"),xXe=l(),vg=a("li"),EU=a("strong"),kXe=o("vision-text-dual-encoder"),RXe=o(" \u2014 "),$B=a("a"),SXe=o("VisionTextDualEncoderConfig"),PXe=o(" (VisionTextDualEncoder model)"),$Xe=l(),Tg=a("li"),yU=a("strong"),IXe=o("visual_bert"),NXe=o(" \u2014 "),IB=a("a"),jXe=o("VisualBertConfig"),DXe=o(" (VisualBert model)"),qXe=l(),Fg=a("li"),wU=a("strong"),GXe=o("vit"),OXe=o(" \u2014 "),NB=a("a"),XXe=o("ViTConfig"),VXe=o(" (ViT model)"),zXe=l(),Cg=a("li"),AU=a("strong"),WXe=o("vit_mae"),QXe=o(" \u2014 "),jB=a("a"),HXe=o("ViTMAEConfig"),UXe=o(" (ViTMAE model)"),JXe=l(),Mg=a("li"),LU=a("strong"),YXe=o("wav2vec2"),KXe=o(" \u2014 "),DB=a("a"),ZXe=o("Wav2Vec2Config"),eVe=o(" (Wav2Vec2 model)"),oVe=l(),Eg=a("li"),BU=a("strong"),rVe=o("wavlm"),tVe=o(" \u2014 "),qB=a("a"),aVe=o("WavLMConfig"),nVe=o(" (WavLM model)"),sVe=l(),yg=a("li"),xU=a("strong"),lVe=o("xglm"),iVe=o(" \u2014 "),GB=a("a"),dVe=o("XGLMConfig"),cVe=o(" (XGLM model)"),fVe=l(),wg=a("li"),kU=a("strong"),mVe=o("xlm"),gVe=o(" \u2014 "),OB=a("a"),hVe=o("XLMConfig"),pVe=o(" (XLM model)"),_Ve=l(),Ag=a("li"),RU=a("strong"),uVe=o("xlm-prophetnet"),bVe=o(" \u2014 "),XB=a("a"),vVe=o("XLMProphetNetConfig"),TVe=o(" (XLMProphetNet model)"),FVe=l(),Lg=a("li"),SU=a("strong"),CVe=o("xlm-roberta"),MVe=o(" \u2014 "),VB=a("a"),EVe=o("XLMRobertaConfig"),yVe=o(" (XLM-RoBERTa model)"),wVe=l(),Bg=a("li"),PU=a("strong"),AVe=o("xlm-roberta-xl"),LVe=o(" \u2014 "),zB=a("a"),BVe=o("XLMRobertaXLConfig"),xVe=o(" (XLM-RoBERTa-XL model)"),kVe=l(),xg=a("li"),$U=a("strong"),RVe=o("xlnet"),SVe=o(" \u2014 "),WB=a("a"),PVe=o("XLNetConfig"),$Ve=o(" (XLNet model)"),IVe=l(),kg=a("li"),IU=a("strong"),NVe=o("yoso"),jVe=o(" \u2014 "),QB=a("a"),DVe=o("YosoConfig"),qVe=o(" (YOSO model)"),GVe=l(),NU=a("p"),OVe=o("Examples:"),XVe=l(),f(_3.$$.fragment),VVe=l(),Rg=a("div"),f(u3.$$.fragment),zVe=l(),jU=a("p"),WVe=o("Register a new configuration for this class."),lke=l(),Qi=a("h2"),Sg=a("a"),DU=a("span"),f(b3.$$.fragment),QVe=l(),qU=a("span"),HVe=o("AutoTokenizer"),ike=l(),Qo=a("div"),f(v3.$$.fragment),UVe=l(),T3=a("p"),JVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HB=a("a"),YVe=o("AutoTokenizer.from_pretrained()"),KVe=o(" class method."),ZVe=l(),F3=a("p"),eze=o("This class cannot be instantiated directly using "),GU=a("code"),oze=o("__init__()"),rze=o(" (throws an error)."),tze=l(),go=a("div"),f(C3.$$.fragment),aze=l(),OU=a("p"),nze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sze=l(),Oa=a("p"),lze=o("The tokenizer class to instantiate is selected based on the "),XU=a("code"),ize=o("model_type"),dze=o(` property of the config object (either
passed as an argument or loaded from `),VU=a("code"),cze=o("pretrained_model_name_or_path"),fze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zU=a("code"),mze=o("pretrained_model_name_or_path"),gze=o(":"),hze=l(),E=a("ul"),Wn=a("li"),WU=a("strong"),pze=o("albert"),_ze=o(" \u2014 "),UB=a("a"),uze=o("AlbertTokenizer"),bze=o(" or "),JB=a("a"),vze=o("AlbertTokenizerFast"),Tze=o(" (ALBERT model)"),Fze=l(),Qn=a("li"),QU=a("strong"),Cze=o("bart"),Mze=o(" \u2014 "),YB=a("a"),Eze=o("BartTokenizer"),yze=o(" or "),KB=a("a"),wze=o("BartTokenizerFast"),Aze=o(" (BART model)"),Lze=l(),Hn=a("li"),HU=a("strong"),Bze=o("barthez"),xze=o(" \u2014 "),ZB=a("a"),kze=o("BarthezTokenizer"),Rze=o(" or "),ex=a("a"),Sze=o("BarthezTokenizerFast"),Pze=o(" (BARThez model)"),$ze=l(),Pg=a("li"),UU=a("strong"),Ize=o("bartpho"),Nze=o(" \u2014 "),ox=a("a"),jze=o("BartphoTokenizer"),Dze=o(" (BARTpho model)"),qze=l(),Un=a("li"),JU=a("strong"),Gze=o("bert"),Oze=o(" \u2014 "),rx=a("a"),Xze=o("BertTokenizer"),Vze=o(" or "),tx=a("a"),zze=o("BertTokenizerFast"),Wze=o(" (BERT model)"),Qze=l(),$g=a("li"),YU=a("strong"),Hze=o("bert-generation"),Uze=o(" \u2014 "),ax=a("a"),Jze=o("BertGenerationTokenizer"),Yze=o(" (Bert Generation model)"),Kze=l(),Ig=a("li"),KU=a("strong"),Zze=o("bert-japanese"),eWe=o(" \u2014 "),nx=a("a"),oWe=o("BertJapaneseTokenizer"),rWe=o(" (BertJapanese model)"),tWe=l(),Ng=a("li"),ZU=a("strong"),aWe=o("bertweet"),nWe=o(" \u2014 "),sx=a("a"),sWe=o("BertweetTokenizer"),lWe=o(" (Bertweet model)"),iWe=l(),Jn=a("li"),eJ=a("strong"),dWe=o("big_bird"),cWe=o(" \u2014 "),lx=a("a"),fWe=o("BigBirdTokenizer"),mWe=o(" or "),ix=a("a"),gWe=o("BigBirdTokenizerFast"),hWe=o(" (BigBird model)"),pWe=l(),Yn=a("li"),oJ=a("strong"),_We=o("bigbird_pegasus"),uWe=o(" \u2014 "),dx=a("a"),bWe=o("PegasusTokenizer"),vWe=o(" or "),cx=a("a"),TWe=o("PegasusTokenizerFast"),FWe=o(" (BigBirdPegasus model)"),CWe=l(),Kn=a("li"),rJ=a("strong"),MWe=o("blenderbot"),EWe=o(" \u2014 "),fx=a("a"),yWe=o("BlenderbotTokenizer"),wWe=o(" or "),mx=a("a"),AWe=o("BlenderbotTokenizerFast"),LWe=o(" (Blenderbot model)"),BWe=l(),jg=a("li"),tJ=a("strong"),xWe=o("blenderbot-small"),kWe=o(" \u2014 "),gx=a("a"),RWe=o("BlenderbotSmallTokenizer"),SWe=o(" (BlenderbotSmall model)"),PWe=l(),Dg=a("li"),aJ=a("strong"),$We=o("byt5"),IWe=o(" \u2014 "),hx=a("a"),NWe=o("ByT5Tokenizer"),jWe=o(" (ByT5 model)"),DWe=l(),Zn=a("li"),nJ=a("strong"),qWe=o("camembert"),GWe=o(" \u2014 "),px=a("a"),OWe=o("CamembertTokenizer"),XWe=o(" or "),_x=a("a"),VWe=o("CamembertTokenizerFast"),zWe=o(" (CamemBERT model)"),WWe=l(),qg=a("li"),sJ=a("strong"),QWe=o("canine"),HWe=o(" \u2014 "),ux=a("a"),UWe=o("CanineTokenizer"),JWe=o(" (Canine model)"),YWe=l(),es=a("li"),lJ=a("strong"),KWe=o("clip"),ZWe=o(" \u2014 "),bx=a("a"),eQe=o("CLIPTokenizer"),oQe=o(" or "),vx=a("a"),rQe=o("CLIPTokenizerFast"),tQe=o(" (CLIP model)"),aQe=l(),os=a("li"),iJ=a("strong"),nQe=o("convbert"),sQe=o(" \u2014 "),Tx=a("a"),lQe=o("ConvBertTokenizer"),iQe=o(" or "),Fx=a("a"),dQe=o("ConvBertTokenizerFast"),cQe=o(" (ConvBERT model)"),fQe=l(),rs=a("li"),dJ=a("strong"),mQe=o("cpm"),gQe=o(" \u2014 "),Cx=a("a"),hQe=o("CpmTokenizer"),pQe=o(" or "),cJ=a("code"),_Qe=o("CpmTokenizerFast"),uQe=o(" (CPM model)"),bQe=l(),Gg=a("li"),fJ=a("strong"),vQe=o("ctrl"),TQe=o(" \u2014 "),Mx=a("a"),FQe=o("CTRLTokenizer"),CQe=o(" (CTRL model)"),MQe=l(),ts=a("li"),mJ=a("strong"),EQe=o("deberta"),yQe=o(" \u2014 "),Ex=a("a"),wQe=o("DebertaTokenizer"),AQe=o(" or "),yx=a("a"),LQe=o("DebertaTokenizerFast"),BQe=o(" (DeBERTa model)"),xQe=l(),Og=a("li"),gJ=a("strong"),kQe=o("deberta-v2"),RQe=o(" \u2014 "),wx=a("a"),SQe=o("DebertaV2Tokenizer"),PQe=o(" (DeBERTa-v2 model)"),$Qe=l(),as=a("li"),hJ=a("strong"),IQe=o("distilbert"),NQe=o(" \u2014 "),Ax=a("a"),jQe=o("DistilBertTokenizer"),DQe=o(" or "),Lx=a("a"),qQe=o("DistilBertTokenizerFast"),GQe=o(" (DistilBERT model)"),OQe=l(),ns=a("li"),pJ=a("strong"),XQe=o("dpr"),VQe=o(" \u2014 "),Bx=a("a"),zQe=o("DPRQuestionEncoderTokenizer"),WQe=o(" or "),xx=a("a"),QQe=o("DPRQuestionEncoderTokenizerFast"),HQe=o(" (DPR model)"),UQe=l(),ss=a("li"),_J=a("strong"),JQe=o("electra"),YQe=o(" \u2014 "),kx=a("a"),KQe=o("ElectraTokenizer"),ZQe=o(" or "),Rx=a("a"),eHe=o("ElectraTokenizerFast"),oHe=o(" (ELECTRA model)"),rHe=l(),Xg=a("li"),uJ=a("strong"),tHe=o("flaubert"),aHe=o(" \u2014 "),Sx=a("a"),nHe=o("FlaubertTokenizer"),sHe=o(" (FlauBERT model)"),lHe=l(),ls=a("li"),bJ=a("strong"),iHe=o("fnet"),dHe=o(" \u2014 "),Px=a("a"),cHe=o("FNetTokenizer"),fHe=o(" or "),$x=a("a"),mHe=o("FNetTokenizerFast"),gHe=o(" (FNet model)"),hHe=l(),Vg=a("li"),vJ=a("strong"),pHe=o("fsmt"),_He=o(" \u2014 "),Ix=a("a"),uHe=o("FSMTTokenizer"),bHe=o(" (FairSeq Machine-Translation model)"),vHe=l(),is=a("li"),TJ=a("strong"),THe=o("funnel"),FHe=o(" \u2014 "),Nx=a("a"),CHe=o("FunnelTokenizer"),MHe=o(" or "),jx=a("a"),EHe=o("FunnelTokenizerFast"),yHe=o(" (Funnel Transformer model)"),wHe=l(),ds=a("li"),FJ=a("strong"),AHe=o("gpt2"),LHe=o(" \u2014 "),Dx=a("a"),BHe=o("GPT2Tokenizer"),xHe=o(" or "),qx=a("a"),kHe=o("GPT2TokenizerFast"),RHe=o(" (OpenAI GPT-2 model)"),SHe=l(),cs=a("li"),CJ=a("strong"),PHe=o("gpt_neo"),$He=o(" \u2014 "),Gx=a("a"),IHe=o("GPT2Tokenizer"),NHe=o(" or "),Ox=a("a"),jHe=o("GPT2TokenizerFast"),DHe=o(" (GPT Neo model)"),qHe=l(),fs=a("li"),MJ=a("strong"),GHe=o("herbert"),OHe=o(" \u2014 "),Xx=a("a"),XHe=o("HerbertTokenizer"),VHe=o(" or "),Vx=a("a"),zHe=o("HerbertTokenizerFast"),WHe=o(" (HerBERT model)"),QHe=l(),zg=a("li"),EJ=a("strong"),HHe=o("hubert"),UHe=o(" \u2014 "),zx=a("a"),JHe=o("Wav2Vec2CTCTokenizer"),YHe=o(" (Hubert model)"),KHe=l(),ms=a("li"),yJ=a("strong"),ZHe=o("ibert"),eUe=o(" \u2014 "),Wx=a("a"),oUe=o("RobertaTokenizer"),rUe=o(" or "),Qx=a("a"),tUe=o("RobertaTokenizerFast"),aUe=o(" (I-BERT model)"),nUe=l(),gs=a("li"),wJ=a("strong"),sUe=o("layoutlm"),lUe=o(" \u2014 "),Hx=a("a"),iUe=o("LayoutLMTokenizer"),dUe=o(" or "),Ux=a("a"),cUe=o("LayoutLMTokenizerFast"),fUe=o(" (LayoutLM model)"),mUe=l(),hs=a("li"),AJ=a("strong"),gUe=o("layoutlmv2"),hUe=o(" \u2014 "),Jx=a("a"),pUe=o("LayoutLMv2Tokenizer"),_Ue=o(" or "),Yx=a("a"),uUe=o("LayoutLMv2TokenizerFast"),bUe=o(" (LayoutLMv2 model)"),vUe=l(),ps=a("li"),LJ=a("strong"),TUe=o("layoutxlm"),FUe=o(" \u2014 "),Kx=a("a"),CUe=o("LayoutXLMTokenizer"),MUe=o(" or "),Zx=a("a"),EUe=o("LayoutXLMTokenizerFast"),yUe=o(" (LayoutXLM model)"),wUe=l(),_s=a("li"),BJ=a("strong"),AUe=o("led"),LUe=o(" \u2014 "),ek=a("a"),BUe=o("LEDTokenizer"),xUe=o(" or "),ok=a("a"),kUe=o("LEDTokenizerFast"),RUe=o(" (LED model)"),SUe=l(),us=a("li"),xJ=a("strong"),PUe=o("longformer"),$Ue=o(" \u2014 "),rk=a("a"),IUe=o("LongformerTokenizer"),NUe=o(" or "),tk=a("a"),jUe=o("LongformerTokenizerFast"),DUe=o(" (Longformer model)"),qUe=l(),Wg=a("li"),kJ=a("strong"),GUe=o("luke"),OUe=o(" \u2014 "),ak=a("a"),XUe=o("LukeTokenizer"),VUe=o(" (LUKE model)"),zUe=l(),bs=a("li"),RJ=a("strong"),WUe=o("lxmert"),QUe=o(" \u2014 "),nk=a("a"),HUe=o("LxmertTokenizer"),UUe=o(" or "),sk=a("a"),JUe=o("LxmertTokenizerFast"),YUe=o(" (LXMERT model)"),KUe=l(),Qg=a("li"),SJ=a("strong"),ZUe=o("m2m_100"),eJe=o(" \u2014 "),lk=a("a"),oJe=o("M2M100Tokenizer"),rJe=o(" (M2M100 model)"),tJe=l(),Hg=a("li"),PJ=a("strong"),aJe=o("marian"),nJe=o(" \u2014 "),ik=a("a"),sJe=o("MarianTokenizer"),lJe=o(" (Marian model)"),iJe=l(),vs=a("li"),$J=a("strong"),dJe=o("mbart"),cJe=o(" \u2014 "),dk=a("a"),fJe=o("MBartTokenizer"),mJe=o(" or "),ck=a("a"),gJe=o("MBartTokenizerFast"),hJe=o(" (mBART model)"),pJe=l(),Ts=a("li"),IJ=a("strong"),_Je=o("mbart50"),uJe=o(" \u2014 "),fk=a("a"),bJe=o("MBart50Tokenizer"),vJe=o(" or "),mk=a("a"),TJe=o("MBart50TokenizerFast"),FJe=o(" (mBART-50 model)"),CJe=l(),Ug=a("li"),NJ=a("strong"),MJe=o("mluke"),EJe=o(" \u2014 "),gk=a("a"),yJe=o("MLukeTokenizer"),wJe=o(" (mLUKE model)"),AJe=l(),Fs=a("li"),jJ=a("strong"),LJe=o("mobilebert"),BJe=o(" \u2014 "),hk=a("a"),xJe=o("MobileBertTokenizer"),kJe=o(" or "),pk=a("a"),RJe=o("MobileBertTokenizerFast"),SJe=o(" (MobileBERT model)"),PJe=l(),Cs=a("li"),DJ=a("strong"),$Je=o("mpnet"),IJe=o(" \u2014 "),_k=a("a"),NJe=o("MPNetTokenizer"),jJe=o(" or "),uk=a("a"),DJe=o("MPNetTokenizerFast"),qJe=o(" (MPNet model)"),GJe=l(),Ms=a("li"),qJ=a("strong"),OJe=o("mt5"),XJe=o(" \u2014 "),bk=a("a"),VJe=o("MT5Tokenizer"),zJe=o(" or "),vk=a("a"),WJe=o("MT5TokenizerFast"),QJe=o(" (mT5 model)"),HJe=l(),Es=a("li"),GJ=a("strong"),UJe=o("openai-gpt"),JJe=o(" \u2014 "),Tk=a("a"),YJe=o("OpenAIGPTTokenizer"),KJe=o(" or "),Fk=a("a"),ZJe=o("OpenAIGPTTokenizerFast"),eYe=o(" (OpenAI GPT model)"),oYe=l(),ys=a("li"),OJ=a("strong"),rYe=o("pegasus"),tYe=o(" \u2014 "),Ck=a("a"),aYe=o("PegasusTokenizer"),nYe=o(" or "),Mk=a("a"),sYe=o("PegasusTokenizerFast"),lYe=o(" (Pegasus model)"),iYe=l(),Jg=a("li"),XJ=a("strong"),dYe=o("perceiver"),cYe=o(" \u2014 "),Ek=a("a"),fYe=o("PerceiverTokenizer"),mYe=o(" (Perceiver model)"),gYe=l(),Yg=a("li"),VJ=a("strong"),hYe=o("phobert"),pYe=o(" \u2014 "),yk=a("a"),_Ye=o("PhobertTokenizer"),uYe=o(" (PhoBERT model)"),bYe=l(),Kg=a("li"),zJ=a("strong"),vYe=o("plbart"),TYe=o(" \u2014 "),wk=a("a"),FYe=o("PLBartTokenizer"),CYe=o(" (PLBart model)"),MYe=l(),Zg=a("li"),WJ=a("strong"),EYe=o("prophetnet"),yYe=o(" \u2014 "),Ak=a("a"),wYe=o("ProphetNetTokenizer"),AYe=o(" (ProphetNet model)"),LYe=l(),ws=a("li"),QJ=a("strong"),BYe=o("qdqbert"),xYe=o(" \u2014 "),Lk=a("a"),kYe=o("BertTokenizer"),RYe=o(" or "),Bk=a("a"),SYe=o("BertTokenizerFast"),PYe=o(" (QDQBert model)"),$Ye=l(),eh=a("li"),HJ=a("strong"),IYe=o("rag"),NYe=o(" \u2014 "),xk=a("a"),jYe=o("RagTokenizer"),DYe=o(" (RAG model)"),qYe=l(),As=a("li"),UJ=a("strong"),GYe=o("realm"),OYe=o(" \u2014 "),kk=a("a"),XYe=o("RealmTokenizer"),VYe=o(" or "),Rk=a("a"),zYe=o("RealmTokenizerFast"),WYe=o(" (Realm model)"),QYe=l(),Ls=a("li"),JJ=a("strong"),HYe=o("reformer"),UYe=o(" \u2014 "),Sk=a("a"),JYe=o("ReformerTokenizer"),YYe=o(" or "),Pk=a("a"),KYe=o("ReformerTokenizerFast"),ZYe=o(" (Reformer model)"),eKe=l(),Bs=a("li"),YJ=a("strong"),oKe=o("rembert"),rKe=o(" \u2014 "),$k=a("a"),tKe=o("RemBertTokenizer"),aKe=o(" or "),Ik=a("a"),nKe=o("RemBertTokenizerFast"),sKe=o(" (RemBERT model)"),lKe=l(),xs=a("li"),KJ=a("strong"),iKe=o("retribert"),dKe=o(" \u2014 "),Nk=a("a"),cKe=o("RetriBertTokenizer"),fKe=o(" or "),jk=a("a"),mKe=o("RetriBertTokenizerFast"),gKe=o(" (RetriBERT model)"),hKe=l(),ks=a("li"),ZJ=a("strong"),pKe=o("roberta"),_Ke=o(" \u2014 "),Dk=a("a"),uKe=o("RobertaTokenizer"),bKe=o(" or "),qk=a("a"),vKe=o("RobertaTokenizerFast"),TKe=o(" (RoBERTa model)"),FKe=l(),Rs=a("li"),eY=a("strong"),CKe=o("roformer"),MKe=o(" \u2014 "),Gk=a("a"),EKe=o("RoFormerTokenizer"),yKe=o(" or "),Ok=a("a"),wKe=o("RoFormerTokenizerFast"),AKe=o(" (RoFormer model)"),LKe=l(),oh=a("li"),oY=a("strong"),BKe=o("speech_to_text"),xKe=o(" \u2014 "),Xk=a("a"),kKe=o("Speech2TextTokenizer"),RKe=o(" (Speech2Text model)"),SKe=l(),rh=a("li"),rY=a("strong"),PKe=o("speech_to_text_2"),$Ke=o(" \u2014 "),Vk=a("a"),IKe=o("Speech2Text2Tokenizer"),NKe=o(" (Speech2Text2 model)"),jKe=l(),Ss=a("li"),tY=a("strong"),DKe=o("splinter"),qKe=o(" \u2014 "),zk=a("a"),GKe=o("SplinterTokenizer"),OKe=o(" or "),Wk=a("a"),XKe=o("SplinterTokenizerFast"),VKe=o(" (Splinter model)"),zKe=l(),Ps=a("li"),aY=a("strong"),WKe=o("squeezebert"),QKe=o(" \u2014 "),Qk=a("a"),HKe=o("SqueezeBertTokenizer"),UKe=o(" or "),Hk=a("a"),JKe=o("SqueezeBertTokenizerFast"),YKe=o(" (SqueezeBERT model)"),KKe=l(),$s=a("li"),nY=a("strong"),ZKe=o("t5"),eZe=o(" \u2014 "),Uk=a("a"),oZe=o("T5Tokenizer"),rZe=o(" or "),Jk=a("a"),tZe=o("T5TokenizerFast"),aZe=o(" (T5 model)"),nZe=l(),th=a("li"),sY=a("strong"),sZe=o("tapas"),lZe=o(" \u2014 "),Yk=a("a"),iZe=o("TapasTokenizer"),dZe=o(" (TAPAS model)"),cZe=l(),ah=a("li"),lY=a("strong"),fZe=o("transfo-xl"),mZe=o(" \u2014 "),Kk=a("a"),gZe=o("TransfoXLTokenizer"),hZe=o(" (Transformer-XL model)"),pZe=l(),nh=a("li"),iY=a("strong"),_Ze=o("wav2vec2"),uZe=o(" \u2014 "),Zk=a("a"),bZe=o("Wav2Vec2CTCTokenizer"),vZe=o(" (Wav2Vec2 model)"),TZe=l(),sh=a("li"),dY=a("strong"),FZe=o("wav2vec2_phoneme"),CZe=o(" \u2014 "),eR=a("a"),MZe=o("Wav2Vec2PhonemeCTCTokenizer"),EZe=o(" (Wav2Vec2Phoneme model)"),yZe=l(),Is=a("li"),cY=a("strong"),wZe=o("xglm"),AZe=o(" \u2014 "),oR=a("a"),LZe=o("XGLMTokenizer"),BZe=o(" or "),rR=a("a"),xZe=o("XGLMTokenizerFast"),kZe=o(" (XGLM model)"),RZe=l(),lh=a("li"),fY=a("strong"),SZe=o("xlm"),PZe=o(" \u2014 "),tR=a("a"),$Ze=o("XLMTokenizer"),IZe=o(" (XLM model)"),NZe=l(),ih=a("li"),mY=a("strong"),jZe=o("xlm-prophetnet"),DZe=o(" \u2014 "),aR=a("a"),qZe=o("XLMProphetNetTokenizer"),GZe=o(" (XLMProphetNet model)"),OZe=l(),Ns=a("li"),gY=a("strong"),XZe=o("xlm-roberta"),VZe=o(" \u2014 "),nR=a("a"),zZe=o("XLMRobertaTokenizer"),WZe=o(" or "),sR=a("a"),QZe=o("XLMRobertaTokenizerFast"),HZe=o(" (XLM-RoBERTa model)"),UZe=l(),js=a("li"),hY=a("strong"),JZe=o("xlnet"),YZe=o(" \u2014 "),lR=a("a"),KZe=o("XLNetTokenizer"),ZZe=o(" or "),iR=a("a"),eeo=o("XLNetTokenizerFast"),oeo=o(" (XLNet model)"),reo=l(),pY=a("p"),teo=o("Examples:"),aeo=l(),f(M3.$$.fragment),neo=l(),dh=a("div"),f(E3.$$.fragment),seo=l(),_Y=a("p"),leo=o("Register a new tokenizer in this mapping."),dke=l(),Hi=a("h2"),ch=a("a"),uY=a("span"),f(y3.$$.fragment),ieo=l(),bY=a("span"),deo=o("AutoFeatureExtractor"),cke=l(),Ho=a("div"),f(w3.$$.fragment),ceo=l(),A3=a("p"),feo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dR=a("a"),meo=o("AutoFeatureExtractor.from_pretrained()"),geo=o(" class method."),heo=l(),L3=a("p"),peo=o("This class cannot be instantiated directly using "),vY=a("code"),_eo=o("__init__()"),ueo=o(" (throws an error)."),beo=l(),Ie=a("div"),f(B3.$$.fragment),veo=l(),TY=a("p"),Teo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Feo=l(),Xa=a("p"),Ceo=o("The feature extractor class to instantiate is selected based on the "),FY=a("code"),Meo=o("model_type"),Eeo=o(` property of the config object
(either passed as an argument or loaded from `),CY=a("code"),yeo=o("pretrained_model_name_or_path"),weo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),MY=a("code"),Aeo=o("pretrained_model_name_or_path"),Leo=o(":"),Beo=l(),re=a("ul"),fh=a("li"),EY=a("strong"),xeo=o("beit"),keo=o(" \u2014 "),cR=a("a"),Reo=o("BeitFeatureExtractor"),Seo=o(" (BEiT model)"),Peo=l(),mh=a("li"),yY=a("strong"),$eo=o("clip"),Ieo=o(" \u2014 "),fR=a("a"),Neo=o("CLIPFeatureExtractor"),jeo=o(" (CLIP model)"),Deo=l(),gh=a("li"),wY=a("strong"),qeo=o("convnext"),Geo=o(" \u2014 "),mR=a("a"),Oeo=o("ConvNextFeatureExtractor"),Xeo=o(" (ConvNext model)"),Veo=l(),hh=a("li"),AY=a("strong"),zeo=o("deit"),Weo=o(" \u2014 "),gR=a("a"),Qeo=o("DeiTFeatureExtractor"),Heo=o(" (DeiT model)"),Ueo=l(),ph=a("li"),LY=a("strong"),Jeo=o("detr"),Yeo=o(" \u2014 "),hR=a("a"),Keo=o("DetrFeatureExtractor"),Zeo=o(" (DETR model)"),eoo=l(),_h=a("li"),BY=a("strong"),ooo=o("hubert"),roo=o(" \u2014 "),pR=a("a"),too=o("Wav2Vec2FeatureExtractor"),aoo=o(" (Hubert model)"),noo=l(),uh=a("li"),xY=a("strong"),soo=o("layoutlmv2"),loo=o(" \u2014 "),_R=a("a"),ioo=o("LayoutLMv2FeatureExtractor"),doo=o(" (LayoutLMv2 model)"),coo=l(),bh=a("li"),kY=a("strong"),foo=o("maskformer"),moo=o(" \u2014 "),uR=a("a"),goo=o("MaskFormerFeatureExtractor"),hoo=o(" (MaskFormer model)"),poo=l(),vh=a("li"),RY=a("strong"),_oo=o("perceiver"),uoo=o(" \u2014 "),bR=a("a"),boo=o("PerceiverFeatureExtractor"),voo=o(" (Perceiver model)"),Too=l(),Th=a("li"),SY=a("strong"),Foo=o("poolformer"),Coo=o(" \u2014 "),vR=a("a"),Moo=o("PoolFormerFeatureExtractor"),Eoo=o(" (PoolFormer model)"),yoo=l(),Fh=a("li"),PY=a("strong"),woo=o("resnet"),Aoo=o(" \u2014 "),TR=a("a"),Loo=o("ConvNextFeatureExtractor"),Boo=o(" (ResNet model)"),xoo=l(),Ch=a("li"),$Y=a("strong"),koo=o("segformer"),Roo=o(" \u2014 "),FR=a("a"),Soo=o("SegformerFeatureExtractor"),Poo=o(" (SegFormer model)"),$oo=l(),Mh=a("li"),IY=a("strong"),Ioo=o("speech_to_text"),Noo=o(" \u2014 "),CR=a("a"),joo=o("Speech2TextFeatureExtractor"),Doo=o(" (Speech2Text model)"),qoo=l(),Eh=a("li"),NY=a("strong"),Goo=o("swin"),Ooo=o(" \u2014 "),MR=a("a"),Xoo=o("ViTFeatureExtractor"),Voo=o(" (Swin model)"),zoo=l(),yh=a("li"),jY=a("strong"),Woo=o("van"),Qoo=o(" \u2014 "),ER=a("a"),Hoo=o("ConvNextFeatureExtractor"),Uoo=o(" (VAN model)"),Joo=l(),wh=a("li"),DY=a("strong"),Yoo=o("vit"),Koo=o(" \u2014 "),yR=a("a"),Zoo=o("ViTFeatureExtractor"),ero=o(" (ViT model)"),oro=l(),Ah=a("li"),qY=a("strong"),rro=o("vit_mae"),tro=o(" \u2014 "),wR=a("a"),aro=o("ViTFeatureExtractor"),nro=o(" (ViTMAE model)"),sro=l(),Lh=a("li"),GY=a("strong"),lro=o("wav2vec2"),iro=o(" \u2014 "),AR=a("a"),dro=o("Wav2Vec2FeatureExtractor"),cro=o(" (Wav2Vec2 model)"),fro=l(),f(Bh.$$.fragment),mro=l(),OY=a("p"),gro=o("Examples:"),hro=l(),f(x3.$$.fragment),pro=l(),xh=a("div"),f(k3.$$.fragment),_ro=l(),XY=a("p"),uro=o("Register a new feature extractor for this class."),fke=l(),Ui=a("h2"),kh=a("a"),VY=a("span"),f(R3.$$.fragment),bro=l(),zY=a("span"),vro=o("AutoProcessor"),mke=l(),Uo=a("div"),f(S3.$$.fragment),Tro=l(),P3=a("p"),Fro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),LR=a("a"),Cro=o("AutoProcessor.from_pretrained()"),Mro=o(" class method."),Ero=l(),$3=a("p"),yro=o("This class cannot be instantiated directly using "),WY=a("code"),wro=o("__init__()"),Aro=o(" (throws an error)."),Lro=l(),Ne=a("div"),f(I3.$$.fragment),Bro=l(),QY=a("p"),xro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),kro=l(),Ji=a("p"),Rro=o("The processor class to instantiate is selected based on the "),HY=a("code"),Sro=o("model_type"),Pro=o(` property of the config object (either
passed as an argument or loaded from `),UY=a("code"),$ro=o("pretrained_model_name_or_path"),Iro=o(" if possible):"),Nro=l(),xe=a("ul"),Rh=a("li"),JY=a("strong"),jro=o("clip"),Dro=o(" \u2014 "),BR=a("a"),qro=o("CLIPProcessor"),Gro=o(" (CLIP model)"),Oro=l(),Sh=a("li"),YY=a("strong"),Xro=o("layoutlmv2"),Vro=o(" \u2014 "),xR=a("a"),zro=o("LayoutLMv2Processor"),Wro=o(" (LayoutLMv2 model)"),Qro=l(),Ph=a("li"),KY=a("strong"),Hro=o("layoutxlm"),Uro=o(" \u2014 "),kR=a("a"),Jro=o("LayoutXLMProcessor"),Yro=o(" (LayoutXLM model)"),Kro=l(),$h=a("li"),ZY=a("strong"),Zro=o("speech_to_text"),eto=o(" \u2014 "),RR=a("a"),oto=o("Speech2TextProcessor"),rto=o(" (Speech2Text model)"),tto=l(),Ih=a("li"),eK=a("strong"),ato=o("speech_to_text_2"),nto=o(" \u2014 "),SR=a("a"),sto=o("Speech2Text2Processor"),lto=o(" (Speech2Text2 model)"),ito=l(),Nh=a("li"),oK=a("strong"),dto=o("trocr"),cto=o(" \u2014 "),PR=a("a"),fto=o("TrOCRProcessor"),mto=o(" (TrOCR model)"),gto=l(),jh=a("li"),rK=a("strong"),hto=o("vision-text-dual-encoder"),pto=o(" \u2014 "),$R=a("a"),_to=o("VisionTextDualEncoderProcessor"),uto=o(" (VisionTextDualEncoder model)"),bto=l(),Dh=a("li"),tK=a("strong"),vto=o("wav2vec2"),Tto=o(" \u2014 "),IR=a("a"),Fto=o("Wav2Vec2Processor"),Cto=o(" (Wav2Vec2 model)"),Mto=l(),f(qh.$$.fragment),Eto=l(),aK=a("p"),yto=o("Examples:"),wto=l(),f(N3.$$.fragment),Ato=l(),Gh=a("div"),f(j3.$$.fragment),Lto=l(),nK=a("p"),Bto=o("Register a new processor for this class."),gke=l(),Yi=a("h2"),Oh=a("a"),sK=a("span"),f(D3.$$.fragment),xto=l(),lK=a("span"),kto=o("AutoModel"),hke=l(),Jo=a("div"),f(q3.$$.fragment),Rto=l(),Ki=a("p"),Sto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iK=a("code"),Pto=o("from_pretrained()"),$to=o("class method or the "),dK=a("code"),Ito=o("from_config()"),Nto=o(`class
method.`),jto=l(),G3=a("p"),Dto=o("This class cannot be instantiated directly using "),cK=a("code"),qto=o("__init__()"),Gto=o(" (throws an error)."),Oto=l(),Vr=a("div"),f(O3.$$.fragment),Xto=l(),fK=a("p"),Vto=o("Instantiates one of the base model classes of the library from a configuration."),zto=l(),Zi=a("p"),Wto=o(`Note:
Loading a model from its configuration file does `),mK=a("strong"),Qto=o("not"),Hto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("code"),Uto=o("from_pretrained()"),Jto=o("to load the model weights."),Yto=l(),hK=a("p"),Kto=o("Examples:"),Zto=l(),f(X3.$$.fragment),eao=l(),je=a("div"),f(V3.$$.fragment),oao=l(),pK=a("p"),rao=o("Instantiate one of the base model classes of the library from a pretrained model."),tao=l(),Va=a("p"),aao=o("The model class to instantiate is selected based on the "),_K=a("code"),nao=o("model_type"),sao=o(` property of the config object (either
passed as an argument or loaded from `),uK=a("code"),lao=o("pretrained_model_name_or_path"),iao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bK=a("code"),dao=o("pretrained_model_name_or_path"),cao=o(":"),fao=l(),F=a("ul"),Xh=a("li"),vK=a("strong"),mao=o("albert"),gao=o(" \u2014 "),NR=a("a"),hao=o("AlbertModel"),pao=o(" (ALBERT model)"),_ao=l(),Vh=a("li"),TK=a("strong"),uao=o("bart"),bao=o(" \u2014 "),jR=a("a"),vao=o("BartModel"),Tao=o(" (BART model)"),Fao=l(),zh=a("li"),FK=a("strong"),Cao=o("beit"),Mao=o(" \u2014 "),DR=a("a"),Eao=o("BeitModel"),yao=o(" (BEiT model)"),wao=l(),Wh=a("li"),CK=a("strong"),Aao=o("bert"),Lao=o(" \u2014 "),qR=a("a"),Bao=o("BertModel"),xao=o(" (BERT model)"),kao=l(),Qh=a("li"),MK=a("strong"),Rao=o("bert-generation"),Sao=o(" \u2014 "),GR=a("a"),Pao=o("BertGenerationEncoder"),$ao=o(" (Bert Generation model)"),Iao=l(),Hh=a("li"),EK=a("strong"),Nao=o("big_bird"),jao=o(" \u2014 "),OR=a("a"),Dao=o("BigBirdModel"),qao=o(" (BigBird model)"),Gao=l(),Uh=a("li"),yK=a("strong"),Oao=o("bigbird_pegasus"),Xao=o(" \u2014 "),XR=a("a"),Vao=o("BigBirdPegasusModel"),zao=o(" (BigBirdPegasus model)"),Wao=l(),Jh=a("li"),wK=a("strong"),Qao=o("blenderbot"),Hao=o(" \u2014 "),VR=a("a"),Uao=o("BlenderbotModel"),Jao=o(" (Blenderbot model)"),Yao=l(),Yh=a("li"),AK=a("strong"),Kao=o("blenderbot-small"),Zao=o(" \u2014 "),zR=a("a"),eno=o("BlenderbotSmallModel"),ono=o(" (BlenderbotSmall model)"),rno=l(),Kh=a("li"),LK=a("strong"),tno=o("camembert"),ano=o(" \u2014 "),WR=a("a"),nno=o("CamembertModel"),sno=o(" (CamemBERT model)"),lno=l(),Zh=a("li"),BK=a("strong"),ino=o("canine"),dno=o(" \u2014 "),QR=a("a"),cno=o("CanineModel"),fno=o(" (Canine model)"),mno=l(),ep=a("li"),xK=a("strong"),gno=o("clip"),hno=o(" \u2014 "),HR=a("a"),pno=o("CLIPModel"),_no=o(" (CLIP model)"),uno=l(),op=a("li"),kK=a("strong"),bno=o("convbert"),vno=o(" \u2014 "),UR=a("a"),Tno=o("ConvBertModel"),Fno=o(" (ConvBERT model)"),Cno=l(),rp=a("li"),RK=a("strong"),Mno=o("convnext"),Eno=o(" \u2014 "),JR=a("a"),yno=o("ConvNextModel"),wno=o(" (ConvNext model)"),Ano=l(),tp=a("li"),SK=a("strong"),Lno=o("ctrl"),Bno=o(" \u2014 "),YR=a("a"),xno=o("CTRLModel"),kno=o(" (CTRL model)"),Rno=l(),ap=a("li"),PK=a("strong"),Sno=o("data2vec-audio"),Pno=o(" \u2014 "),KR=a("a"),$no=o("Data2VecAudioModel"),Ino=o(" (Data2VecAudio model)"),Nno=l(),np=a("li"),$K=a("strong"),jno=o("data2vec-text"),Dno=o(" \u2014 "),ZR=a("a"),qno=o("Data2VecTextModel"),Gno=o(" (Data2VecText model)"),Ono=l(),sp=a("li"),IK=a("strong"),Xno=o("deberta"),Vno=o(" \u2014 "),eS=a("a"),zno=o("DebertaModel"),Wno=o(" (DeBERTa model)"),Qno=l(),lp=a("li"),NK=a("strong"),Hno=o("deberta-v2"),Uno=o(" \u2014 "),oS=a("a"),Jno=o("DebertaV2Model"),Yno=o(" (DeBERTa-v2 model)"),Kno=l(),ip=a("li"),jK=a("strong"),Zno=o("deit"),eso=o(" \u2014 "),rS=a("a"),oso=o("DeiTModel"),rso=o(" (DeiT model)"),tso=l(),dp=a("li"),DK=a("strong"),aso=o("detr"),nso=o(" \u2014 "),tS=a("a"),sso=o("DetrModel"),lso=o(" (DETR model)"),iso=l(),cp=a("li"),qK=a("strong"),dso=o("distilbert"),cso=o(" \u2014 "),aS=a("a"),fso=o("DistilBertModel"),mso=o(" (DistilBERT model)"),gso=l(),fp=a("li"),GK=a("strong"),hso=o("dpr"),pso=o(" \u2014 "),nS=a("a"),_so=o("DPRQuestionEncoder"),uso=o(" (DPR model)"),bso=l(),mp=a("li"),OK=a("strong"),vso=o("electra"),Tso=o(" \u2014 "),sS=a("a"),Fso=o("ElectraModel"),Cso=o(" (ELECTRA model)"),Mso=l(),gp=a("li"),XK=a("strong"),Eso=o("flaubert"),yso=o(" \u2014 "),lS=a("a"),wso=o("FlaubertModel"),Aso=o(" (FlauBERT model)"),Lso=l(),hp=a("li"),VK=a("strong"),Bso=o("fnet"),xso=o(" \u2014 "),iS=a("a"),kso=o("FNetModel"),Rso=o(" (FNet model)"),Sso=l(),pp=a("li"),zK=a("strong"),Pso=o("fsmt"),$so=o(" \u2014 "),dS=a("a"),Iso=o("FSMTModel"),Nso=o(" (FairSeq Machine-Translation model)"),jso=l(),Ds=a("li"),WK=a("strong"),Dso=o("funnel"),qso=o(" \u2014 "),cS=a("a"),Gso=o("FunnelModel"),Oso=o(" or "),fS=a("a"),Xso=o("FunnelBaseModel"),Vso=o(" (Funnel Transformer model)"),zso=l(),_p=a("li"),QK=a("strong"),Wso=o("glpn"),Qso=o(" \u2014 "),mS=a("a"),Hso=o("GLPNModel"),Uso=o(" (GLPN model)"),Jso=l(),up=a("li"),HK=a("strong"),Yso=o("gpt2"),Kso=o(" \u2014 "),gS=a("a"),Zso=o("GPT2Model"),elo=o(" (OpenAI GPT-2 model)"),olo=l(),bp=a("li"),UK=a("strong"),rlo=o("gpt_neo"),tlo=o(" \u2014 "),hS=a("a"),alo=o("GPTNeoModel"),nlo=o(" (GPT Neo model)"),slo=l(),vp=a("li"),JK=a("strong"),llo=o("gptj"),ilo=o(" \u2014 "),pS=a("a"),dlo=o("GPTJModel"),clo=o(" (GPT-J model)"),flo=l(),Tp=a("li"),YK=a("strong"),mlo=o("hubert"),glo=o(" \u2014 "),_S=a("a"),hlo=o("HubertModel"),plo=o(" (Hubert model)"),_lo=l(),Fp=a("li"),KK=a("strong"),ulo=o("ibert"),blo=o(" \u2014 "),uS=a("a"),vlo=o("IBertModel"),Tlo=o(" (I-BERT model)"),Flo=l(),Cp=a("li"),ZK=a("strong"),Clo=o("imagegpt"),Mlo=o(" \u2014 "),bS=a("a"),Elo=o("ImageGPTModel"),ylo=o(" (ImageGPT model)"),wlo=l(),Mp=a("li"),eZ=a("strong"),Alo=o("layoutlm"),Llo=o(" \u2014 "),vS=a("a"),Blo=o("LayoutLMModel"),xlo=o(" (LayoutLM model)"),klo=l(),Ep=a("li"),oZ=a("strong"),Rlo=o("layoutlmv2"),Slo=o(" \u2014 "),TS=a("a"),Plo=o("LayoutLMv2Model"),$lo=o(" (LayoutLMv2 model)"),Ilo=l(),yp=a("li"),rZ=a("strong"),Nlo=o("led"),jlo=o(" \u2014 "),FS=a("a"),Dlo=o("LEDModel"),qlo=o(" (LED model)"),Glo=l(),wp=a("li"),tZ=a("strong"),Olo=o("longformer"),Xlo=o(" \u2014 "),CS=a("a"),Vlo=o("LongformerModel"),zlo=o(" (Longformer model)"),Wlo=l(),Ap=a("li"),aZ=a("strong"),Qlo=o("luke"),Hlo=o(" \u2014 "),MS=a("a"),Ulo=o("LukeModel"),Jlo=o(" (LUKE model)"),Ylo=l(),Lp=a("li"),nZ=a("strong"),Klo=o("lxmert"),Zlo=o(" \u2014 "),ES=a("a"),eio=o("LxmertModel"),oio=o(" (LXMERT model)"),rio=l(),Bp=a("li"),sZ=a("strong"),tio=o("m2m_100"),aio=o(" \u2014 "),yS=a("a"),nio=o("M2M100Model"),sio=o(" (M2M100 model)"),lio=l(),xp=a("li"),lZ=a("strong"),iio=o("marian"),dio=o(" \u2014 "),wS=a("a"),cio=o("MarianModel"),fio=o(" (Marian model)"),mio=l(),kp=a("li"),iZ=a("strong"),gio=o("maskformer"),hio=o(" \u2014 "),AS=a("a"),pio=o("MaskFormerModel"),_io=o(" (MaskFormer model)"),uio=l(),Rp=a("li"),dZ=a("strong"),bio=o("mbart"),vio=o(" \u2014 "),LS=a("a"),Tio=o("MBartModel"),Fio=o(" (mBART model)"),Cio=l(),Sp=a("li"),cZ=a("strong"),Mio=o("megatron-bert"),Eio=o(" \u2014 "),BS=a("a"),yio=o("MegatronBertModel"),wio=o(" (MegatronBert model)"),Aio=l(),Pp=a("li"),fZ=a("strong"),Lio=o("mobilebert"),Bio=o(" \u2014 "),xS=a("a"),xio=o("MobileBertModel"),kio=o(" (MobileBERT model)"),Rio=l(),$p=a("li"),mZ=a("strong"),Sio=o("mpnet"),Pio=o(" \u2014 "),kS=a("a"),$io=o("MPNetModel"),Iio=o(" (MPNet model)"),Nio=l(),Ip=a("li"),gZ=a("strong"),jio=o("mt5"),Dio=o(" \u2014 "),RS=a("a"),qio=o("MT5Model"),Gio=o(" (mT5 model)"),Oio=l(),Np=a("li"),hZ=a("strong"),Xio=o("nystromformer"),Vio=o(" \u2014 "),SS=a("a"),zio=o("NystromformerModel"),Wio=o(" (Nystromformer model)"),Qio=l(),jp=a("li"),pZ=a("strong"),Hio=o("openai-gpt"),Uio=o(" \u2014 "),PS=a("a"),Jio=o("OpenAIGPTModel"),Yio=o(" (OpenAI GPT model)"),Kio=l(),Dp=a("li"),_Z=a("strong"),Zio=o("pegasus"),edo=o(" \u2014 "),$S=a("a"),odo=o("PegasusModel"),rdo=o(" (Pegasus model)"),tdo=l(),qp=a("li"),uZ=a("strong"),ado=o("perceiver"),ndo=o(" \u2014 "),IS=a("a"),sdo=o("PerceiverModel"),ldo=o(" (Perceiver model)"),ido=l(),Gp=a("li"),bZ=a("strong"),ddo=o("plbart"),cdo=o(" \u2014 "),NS=a("a"),fdo=o("PLBartModel"),mdo=o(" (PLBart model)"),gdo=l(),Op=a("li"),vZ=a("strong"),hdo=o("poolformer"),pdo=o(" \u2014 "),jS=a("a"),_do=o("PoolFormerModel"),udo=o(" (PoolFormer model)"),bdo=l(),Xp=a("li"),TZ=a("strong"),vdo=o("prophetnet"),Tdo=o(" \u2014 "),DS=a("a"),Fdo=o("ProphetNetModel"),Cdo=o(" (ProphetNet model)"),Mdo=l(),Vp=a("li"),FZ=a("strong"),Edo=o("qdqbert"),ydo=o(" \u2014 "),qS=a("a"),wdo=o("QDQBertModel"),Ado=o(" (QDQBert model)"),Ldo=l(),zp=a("li"),CZ=a("strong"),Bdo=o("reformer"),xdo=o(" \u2014 "),GS=a("a"),kdo=o("ReformerModel"),Rdo=o(" (Reformer model)"),Sdo=l(),Wp=a("li"),MZ=a("strong"),Pdo=o("rembert"),$do=o(" \u2014 "),OS=a("a"),Ido=o("RemBertModel"),Ndo=o(" (RemBERT model)"),jdo=l(),Qp=a("li"),EZ=a("strong"),Ddo=o("resnet"),qdo=o(" \u2014 "),XS=a("a"),Gdo=o("ResNetModel"),Odo=o(" (ResNet model)"),Xdo=l(),Hp=a("li"),yZ=a("strong"),Vdo=o("retribert"),zdo=o(" \u2014 "),VS=a("a"),Wdo=o("RetriBertModel"),Qdo=o(" (RetriBERT model)"),Hdo=l(),Up=a("li"),wZ=a("strong"),Udo=o("roberta"),Jdo=o(" \u2014 "),zS=a("a"),Ydo=o("RobertaModel"),Kdo=o(" (RoBERTa model)"),Zdo=l(),Jp=a("li"),AZ=a("strong"),eco=o("roformer"),oco=o(" \u2014 "),WS=a("a"),rco=o("RoFormerModel"),tco=o(" (RoFormer model)"),aco=l(),Yp=a("li"),LZ=a("strong"),nco=o("segformer"),sco=o(" \u2014 "),QS=a("a"),lco=o("SegformerModel"),ico=o(" (SegFormer model)"),dco=l(),Kp=a("li"),BZ=a("strong"),cco=o("sew"),fco=o(" \u2014 "),HS=a("a"),mco=o("SEWModel"),gco=o(" (SEW model)"),hco=l(),Zp=a("li"),xZ=a("strong"),pco=o("sew-d"),_co=o(" \u2014 "),US=a("a"),uco=o("SEWDModel"),bco=o(" (SEW-D model)"),vco=l(),e_=a("li"),kZ=a("strong"),Tco=o("speech_to_text"),Fco=o(" \u2014 "),JS=a("a"),Cco=o("Speech2TextModel"),Mco=o(" (Speech2Text model)"),Eco=l(),o_=a("li"),RZ=a("strong"),yco=o("splinter"),wco=o(" \u2014 "),YS=a("a"),Aco=o("SplinterModel"),Lco=o(" (Splinter model)"),Bco=l(),r_=a("li"),SZ=a("strong"),xco=o("squeezebert"),kco=o(" \u2014 "),KS=a("a"),Rco=o("SqueezeBertModel"),Sco=o(" (SqueezeBERT model)"),Pco=l(),t_=a("li"),PZ=a("strong"),$co=o("swin"),Ico=o(" \u2014 "),ZS=a("a"),Nco=o("SwinModel"),jco=o(" (Swin model)"),Dco=l(),a_=a("li"),$Z=a("strong"),qco=o("t5"),Gco=o(" \u2014 "),eP=a("a"),Oco=o("T5Model"),Xco=o(" (T5 model)"),Vco=l(),n_=a("li"),IZ=a("strong"),zco=o("tapas"),Wco=o(" \u2014 "),oP=a("a"),Qco=o("TapasModel"),Hco=o(" (TAPAS model)"),Uco=l(),s_=a("li"),NZ=a("strong"),Jco=o("transfo-xl"),Yco=o(" \u2014 "),rP=a("a"),Kco=o("TransfoXLModel"),Zco=o(" (Transformer-XL model)"),efo=l(),l_=a("li"),jZ=a("strong"),ofo=o("unispeech"),rfo=o(" \u2014 "),tP=a("a"),tfo=o("UniSpeechModel"),afo=o(" (UniSpeech model)"),nfo=l(),i_=a("li"),DZ=a("strong"),sfo=o("unispeech-sat"),lfo=o(" \u2014 "),aP=a("a"),ifo=o("UniSpeechSatModel"),dfo=o(" (UniSpeechSat model)"),cfo=l(),d_=a("li"),qZ=a("strong"),ffo=o("van"),mfo=o(" \u2014 "),nP=a("a"),gfo=o("VanModel"),hfo=o(" (VAN model)"),pfo=l(),c_=a("li"),GZ=a("strong"),_fo=o("vilt"),ufo=o(" \u2014 "),sP=a("a"),bfo=o("ViltModel"),vfo=o(" (ViLT model)"),Tfo=l(),f_=a("li"),OZ=a("strong"),Ffo=o("vision-text-dual-encoder"),Cfo=o(" \u2014 "),lP=a("a"),Mfo=o("VisionTextDualEncoderModel"),Efo=o(" (VisionTextDualEncoder model)"),yfo=l(),m_=a("li"),XZ=a("strong"),wfo=o("visual_bert"),Afo=o(" \u2014 "),iP=a("a"),Lfo=o("VisualBertModel"),Bfo=o(" (VisualBert model)"),xfo=l(),g_=a("li"),VZ=a("strong"),kfo=o("vit"),Rfo=o(" \u2014 "),dP=a("a"),Sfo=o("ViTModel"),Pfo=o(" (ViT model)"),$fo=l(),h_=a("li"),zZ=a("strong"),Ifo=o("vit_mae"),Nfo=o(" \u2014 "),cP=a("a"),jfo=o("ViTMAEModel"),Dfo=o(" (ViTMAE model)"),qfo=l(),p_=a("li"),WZ=a("strong"),Gfo=o("wav2vec2"),Ofo=o(" \u2014 "),fP=a("a"),Xfo=o("Wav2Vec2Model"),Vfo=o(" (Wav2Vec2 model)"),zfo=l(),__=a("li"),QZ=a("strong"),Wfo=o("wavlm"),Qfo=o(" \u2014 "),mP=a("a"),Hfo=o("WavLMModel"),Ufo=o(" (WavLM model)"),Jfo=l(),u_=a("li"),HZ=a("strong"),Yfo=o("xglm"),Kfo=o(" \u2014 "),gP=a("a"),Zfo=o("XGLMModel"),emo=o(" (XGLM model)"),omo=l(),b_=a("li"),UZ=a("strong"),rmo=o("xlm"),tmo=o(" \u2014 "),hP=a("a"),amo=o("XLMModel"),nmo=o(" (XLM model)"),smo=l(),v_=a("li"),JZ=a("strong"),lmo=o("xlm-prophetnet"),imo=o(" \u2014 "),pP=a("a"),dmo=o("XLMProphetNetModel"),cmo=o(" (XLMProphetNet model)"),fmo=l(),T_=a("li"),YZ=a("strong"),mmo=o("xlm-roberta"),gmo=o(" \u2014 "),_P=a("a"),hmo=o("XLMRobertaModel"),pmo=o(" (XLM-RoBERTa model)"),_mo=l(),F_=a("li"),KZ=a("strong"),umo=o("xlm-roberta-xl"),bmo=o(" \u2014 "),uP=a("a"),vmo=o("XLMRobertaXLModel"),Tmo=o(" (XLM-RoBERTa-XL model)"),Fmo=l(),C_=a("li"),ZZ=a("strong"),Cmo=o("xlnet"),Mmo=o(" \u2014 "),bP=a("a"),Emo=o("XLNetModel"),ymo=o(" (XLNet model)"),wmo=l(),M_=a("li"),eee=a("strong"),Amo=o("yoso"),Lmo=o(" \u2014 "),vP=a("a"),Bmo=o("YosoModel"),xmo=o(" (YOSO model)"),kmo=l(),E_=a("p"),Rmo=o("The model is set in evaluation mode by default using "),oee=a("code"),Smo=o("model.eval()"),Pmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ree=a("code"),$mo=o("model.train()"),Imo=l(),tee=a("p"),Nmo=o("Examples:"),jmo=l(),f(z3.$$.fragment),pke=l(),ed=a("h2"),y_=a("a"),aee=a("span"),f(W3.$$.fragment),Dmo=l(),nee=a("span"),qmo=o("AutoModelForPreTraining"),_ke=l(),Yo=a("div"),f(Q3.$$.fragment),Gmo=l(),od=a("p"),Omo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),see=a("code"),Xmo=o("from_pretrained()"),Vmo=o("class method or the "),lee=a("code"),zmo=o("from_config()"),Wmo=o(`class
method.`),Qmo=l(),H3=a("p"),Hmo=o("This class cannot be instantiated directly using "),iee=a("code"),Umo=o("__init__()"),Jmo=o(" (throws an error)."),Ymo=l(),zr=a("div"),f(U3.$$.fragment),Kmo=l(),dee=a("p"),Zmo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ego=l(),rd=a("p"),ogo=o(`Note:
Loading a model from its configuration file does `),cee=a("strong"),rgo=o("not"),tgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=a("code"),ago=o("from_pretrained()"),ngo=o("to load the model weights."),sgo=l(),mee=a("p"),lgo=o("Examples:"),igo=l(),f(J3.$$.fragment),dgo=l(),De=a("div"),f(Y3.$$.fragment),cgo=l(),gee=a("p"),fgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mgo=l(),za=a("p"),ggo=o("The model class to instantiate is selected based on the "),hee=a("code"),hgo=o("model_type"),pgo=o(` property of the config object (either
passed as an argument or loaded from `),pee=a("code"),_go=o("pretrained_model_name_or_path"),ugo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ee=a("code"),bgo=o("pretrained_model_name_or_path"),vgo=o(":"),Tgo=l(),k=a("ul"),w_=a("li"),uee=a("strong"),Fgo=o("albert"),Cgo=o(" \u2014 "),TP=a("a"),Mgo=o("AlbertForPreTraining"),Ego=o(" (ALBERT model)"),ygo=l(),A_=a("li"),bee=a("strong"),wgo=o("bart"),Ago=o(" \u2014 "),FP=a("a"),Lgo=o("BartForConditionalGeneration"),Bgo=o(" (BART model)"),xgo=l(),L_=a("li"),vee=a("strong"),kgo=o("bert"),Rgo=o(" \u2014 "),CP=a("a"),Sgo=o("BertForPreTraining"),Pgo=o(" (BERT model)"),$go=l(),B_=a("li"),Tee=a("strong"),Igo=o("big_bird"),Ngo=o(" \u2014 "),MP=a("a"),jgo=o("BigBirdForPreTraining"),Dgo=o(" (BigBird model)"),qgo=l(),x_=a("li"),Fee=a("strong"),Ggo=o("camembert"),Ogo=o(" \u2014 "),EP=a("a"),Xgo=o("CamembertForMaskedLM"),Vgo=o(" (CamemBERT model)"),zgo=l(),k_=a("li"),Cee=a("strong"),Wgo=o("ctrl"),Qgo=o(" \u2014 "),yP=a("a"),Hgo=o("CTRLLMHeadModel"),Ugo=o(" (CTRL model)"),Jgo=l(),R_=a("li"),Mee=a("strong"),Ygo=o("data2vec-text"),Kgo=o(" \u2014 "),wP=a("a"),Zgo=o("Data2VecTextForMaskedLM"),eho=o(" (Data2VecText model)"),oho=l(),S_=a("li"),Eee=a("strong"),rho=o("deberta"),tho=o(" \u2014 "),AP=a("a"),aho=o("DebertaForMaskedLM"),nho=o(" (DeBERTa model)"),sho=l(),P_=a("li"),yee=a("strong"),lho=o("deberta-v2"),iho=o(" \u2014 "),LP=a("a"),dho=o("DebertaV2ForMaskedLM"),cho=o(" (DeBERTa-v2 model)"),fho=l(),$_=a("li"),wee=a("strong"),mho=o("distilbert"),gho=o(" \u2014 "),BP=a("a"),hho=o("DistilBertForMaskedLM"),pho=o(" (DistilBERT model)"),_ho=l(),I_=a("li"),Aee=a("strong"),uho=o("electra"),bho=o(" \u2014 "),xP=a("a"),vho=o("ElectraForPreTraining"),Tho=o(" (ELECTRA model)"),Fho=l(),N_=a("li"),Lee=a("strong"),Cho=o("flaubert"),Mho=o(" \u2014 "),kP=a("a"),Eho=o("FlaubertWithLMHeadModel"),yho=o(" (FlauBERT model)"),who=l(),j_=a("li"),Bee=a("strong"),Aho=o("fnet"),Lho=o(" \u2014 "),RP=a("a"),Bho=o("FNetForPreTraining"),xho=o(" (FNet model)"),kho=l(),D_=a("li"),xee=a("strong"),Rho=o("fsmt"),Sho=o(" \u2014 "),SP=a("a"),Pho=o("FSMTForConditionalGeneration"),$ho=o(" (FairSeq Machine-Translation model)"),Iho=l(),q_=a("li"),kee=a("strong"),Nho=o("funnel"),jho=o(" \u2014 "),PP=a("a"),Dho=o("FunnelForPreTraining"),qho=o(" (Funnel Transformer model)"),Gho=l(),G_=a("li"),Ree=a("strong"),Oho=o("gpt2"),Xho=o(" \u2014 "),$P=a("a"),Vho=o("GPT2LMHeadModel"),zho=o(" (OpenAI GPT-2 model)"),Who=l(),O_=a("li"),See=a("strong"),Qho=o("ibert"),Hho=o(" \u2014 "),IP=a("a"),Uho=o("IBertForMaskedLM"),Jho=o(" (I-BERT model)"),Yho=l(),X_=a("li"),Pee=a("strong"),Kho=o("layoutlm"),Zho=o(" \u2014 "),NP=a("a"),epo=o("LayoutLMForMaskedLM"),opo=o(" (LayoutLM model)"),rpo=l(),V_=a("li"),$ee=a("strong"),tpo=o("longformer"),apo=o(" \u2014 "),jP=a("a"),npo=o("LongformerForMaskedLM"),spo=o(" (Longformer model)"),lpo=l(),z_=a("li"),Iee=a("strong"),ipo=o("lxmert"),dpo=o(" \u2014 "),DP=a("a"),cpo=o("LxmertForPreTraining"),fpo=o(" (LXMERT model)"),mpo=l(),W_=a("li"),Nee=a("strong"),gpo=o("megatron-bert"),hpo=o(" \u2014 "),qP=a("a"),ppo=o("MegatronBertForPreTraining"),_po=o(" (MegatronBert model)"),upo=l(),Q_=a("li"),jee=a("strong"),bpo=o("mobilebert"),vpo=o(" \u2014 "),GP=a("a"),Tpo=o("MobileBertForPreTraining"),Fpo=o(" (MobileBERT model)"),Cpo=l(),H_=a("li"),Dee=a("strong"),Mpo=o("mpnet"),Epo=o(" \u2014 "),OP=a("a"),ypo=o("MPNetForMaskedLM"),wpo=o(" (MPNet model)"),Apo=l(),U_=a("li"),qee=a("strong"),Lpo=o("openai-gpt"),Bpo=o(" \u2014 "),XP=a("a"),xpo=o("OpenAIGPTLMHeadModel"),kpo=o(" (OpenAI GPT model)"),Rpo=l(),J_=a("li"),Gee=a("strong"),Spo=o("retribert"),Ppo=o(" \u2014 "),VP=a("a"),$po=o("RetriBertModel"),Ipo=o(" (RetriBERT model)"),Npo=l(),Y_=a("li"),Oee=a("strong"),jpo=o("roberta"),Dpo=o(" \u2014 "),zP=a("a"),qpo=o("RobertaForMaskedLM"),Gpo=o(" (RoBERTa model)"),Opo=l(),K_=a("li"),Xee=a("strong"),Xpo=o("squeezebert"),Vpo=o(" \u2014 "),WP=a("a"),zpo=o("SqueezeBertForMaskedLM"),Wpo=o(" (SqueezeBERT model)"),Qpo=l(),Z_=a("li"),Vee=a("strong"),Hpo=o("t5"),Upo=o(" \u2014 "),QP=a("a"),Jpo=o("T5ForConditionalGeneration"),Ypo=o(" (T5 model)"),Kpo=l(),eu=a("li"),zee=a("strong"),Zpo=o("tapas"),e_o=o(" \u2014 "),HP=a("a"),o_o=o("TapasForMaskedLM"),r_o=o(" (TAPAS model)"),t_o=l(),ou=a("li"),Wee=a("strong"),a_o=o("transfo-xl"),n_o=o(" \u2014 "),UP=a("a"),s_o=o("TransfoXLLMHeadModel"),l_o=o(" (Transformer-XL model)"),i_o=l(),ru=a("li"),Qee=a("strong"),d_o=o("unispeech"),c_o=o(" \u2014 "),JP=a("a"),f_o=o("UniSpeechForPreTraining"),m_o=o(" (UniSpeech model)"),g_o=l(),tu=a("li"),Hee=a("strong"),h_o=o("unispeech-sat"),p_o=o(" \u2014 "),YP=a("a"),__o=o("UniSpeechSatForPreTraining"),u_o=o(" (UniSpeechSat model)"),b_o=l(),au=a("li"),Uee=a("strong"),v_o=o("visual_bert"),T_o=o(" \u2014 "),KP=a("a"),F_o=o("VisualBertForPreTraining"),C_o=o(" (VisualBert model)"),M_o=l(),nu=a("li"),Jee=a("strong"),E_o=o("vit_mae"),y_o=o(" \u2014 "),ZP=a("a"),w_o=o("ViTMAEForPreTraining"),A_o=o(" (ViTMAE model)"),L_o=l(),su=a("li"),Yee=a("strong"),B_o=o("wav2vec2"),x_o=o(" \u2014 "),e$=a("a"),k_o=o("Wav2Vec2ForPreTraining"),R_o=o(" (Wav2Vec2 model)"),S_o=l(),lu=a("li"),Kee=a("strong"),P_o=o("xlm"),$_o=o(" \u2014 "),o$=a("a"),I_o=o("XLMWithLMHeadModel"),N_o=o(" (XLM model)"),j_o=l(),iu=a("li"),Zee=a("strong"),D_o=o("xlm-roberta"),q_o=o(" \u2014 "),r$=a("a"),G_o=o("XLMRobertaForMaskedLM"),O_o=o(" (XLM-RoBERTa model)"),X_o=l(),du=a("li"),eoe=a("strong"),V_o=o("xlm-roberta-xl"),z_o=o(" \u2014 "),t$=a("a"),W_o=o("XLMRobertaXLForMaskedLM"),Q_o=o(" (XLM-RoBERTa-XL model)"),H_o=l(),cu=a("li"),ooe=a("strong"),U_o=o("xlnet"),J_o=o(" \u2014 "),a$=a("a"),Y_o=o("XLNetLMHeadModel"),K_o=o(" (XLNet model)"),Z_o=l(),fu=a("p"),euo=o("The model is set in evaluation mode by default using "),roe=a("code"),ouo=o("model.eval()"),ruo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),toe=a("code"),tuo=o("model.train()"),auo=l(),aoe=a("p"),nuo=o("Examples:"),suo=l(),f(K3.$$.fragment),uke=l(),td=a("h2"),mu=a("a"),noe=a("span"),f(Z3.$$.fragment),luo=l(),soe=a("span"),iuo=o("AutoModelForCausalLM"),bke=l(),Ko=a("div"),f(ey.$$.fragment),duo=l(),ad=a("p"),cuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),loe=a("code"),fuo=o("from_pretrained()"),muo=o("class method or the "),ioe=a("code"),guo=o("from_config()"),huo=o(`class
method.`),puo=l(),oy=a("p"),_uo=o("This class cannot be instantiated directly using "),doe=a("code"),uuo=o("__init__()"),buo=o(" (throws an error)."),vuo=l(),Wr=a("div"),f(ry.$$.fragment),Tuo=l(),coe=a("p"),Fuo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cuo=l(),nd=a("p"),Muo=o(`Note:
Loading a model from its configuration file does `),foe=a("strong"),Euo=o("not"),yuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=a("code"),wuo=o("from_pretrained()"),Auo=o("to load the model weights."),Luo=l(),goe=a("p"),Buo=o("Examples:"),xuo=l(),f(ty.$$.fragment),kuo=l(),qe=a("div"),f(ay.$$.fragment),Ruo=l(),hoe=a("p"),Suo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Puo=l(),Wa=a("p"),$uo=o("The model class to instantiate is selected based on the "),poe=a("code"),Iuo=o("model_type"),Nuo=o(` property of the config object (either
passed as an argument or loaded from `),_oe=a("code"),juo=o("pretrained_model_name_or_path"),Duo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uoe=a("code"),quo=o("pretrained_model_name_or_path"),Guo=o(":"),Ouo=l(),$=a("ul"),gu=a("li"),boe=a("strong"),Xuo=o("bart"),Vuo=o(" \u2014 "),n$=a("a"),zuo=o("BartForCausalLM"),Wuo=o(" (BART model)"),Quo=l(),hu=a("li"),voe=a("strong"),Huo=o("bert"),Uuo=o(" \u2014 "),s$=a("a"),Juo=o("BertLMHeadModel"),Yuo=o(" (BERT model)"),Kuo=l(),pu=a("li"),Toe=a("strong"),Zuo=o("bert-generation"),e5o=o(" \u2014 "),l$=a("a"),o5o=o("BertGenerationDecoder"),r5o=o(" (Bert Generation model)"),t5o=l(),_u=a("li"),Foe=a("strong"),a5o=o("big_bird"),n5o=o(" \u2014 "),i$=a("a"),s5o=o("BigBirdForCausalLM"),l5o=o(" (BigBird model)"),i5o=l(),uu=a("li"),Coe=a("strong"),d5o=o("bigbird_pegasus"),c5o=o(" \u2014 "),d$=a("a"),f5o=o("BigBirdPegasusForCausalLM"),m5o=o(" (BigBirdPegasus model)"),g5o=l(),bu=a("li"),Moe=a("strong"),h5o=o("blenderbot"),p5o=o(" \u2014 "),c$=a("a"),_5o=o("BlenderbotForCausalLM"),u5o=o(" (Blenderbot model)"),b5o=l(),vu=a("li"),Eoe=a("strong"),v5o=o("blenderbot-small"),T5o=o(" \u2014 "),f$=a("a"),F5o=o("BlenderbotSmallForCausalLM"),C5o=o(" (BlenderbotSmall model)"),M5o=l(),Tu=a("li"),yoe=a("strong"),E5o=o("camembert"),y5o=o(" \u2014 "),m$=a("a"),w5o=o("CamembertForCausalLM"),A5o=o(" (CamemBERT model)"),L5o=l(),Fu=a("li"),woe=a("strong"),B5o=o("ctrl"),x5o=o(" \u2014 "),g$=a("a"),k5o=o("CTRLLMHeadModel"),R5o=o(" (CTRL model)"),S5o=l(),Cu=a("li"),Aoe=a("strong"),P5o=o("data2vec-text"),$5o=o(" \u2014 "),h$=a("a"),I5o=o("Data2VecTextForCausalLM"),N5o=o(" (Data2VecText model)"),j5o=l(),Mu=a("li"),Loe=a("strong"),D5o=o("electra"),q5o=o(" \u2014 "),p$=a("a"),G5o=o("ElectraForCausalLM"),O5o=o(" (ELECTRA model)"),X5o=l(),Eu=a("li"),Boe=a("strong"),V5o=o("gpt2"),z5o=o(" \u2014 "),_$=a("a"),W5o=o("GPT2LMHeadModel"),Q5o=o(" (OpenAI GPT-2 model)"),H5o=l(),yu=a("li"),xoe=a("strong"),U5o=o("gpt_neo"),J5o=o(" \u2014 "),u$=a("a"),Y5o=o("GPTNeoForCausalLM"),K5o=o(" (GPT Neo model)"),Z5o=l(),wu=a("li"),koe=a("strong"),e2o=o("gptj"),o2o=o(" \u2014 "),b$=a("a"),r2o=o("GPTJForCausalLM"),t2o=o(" (GPT-J model)"),a2o=l(),Au=a("li"),Roe=a("strong"),n2o=o("marian"),s2o=o(" \u2014 "),v$=a("a"),l2o=o("MarianForCausalLM"),i2o=o(" (Marian model)"),d2o=l(),Lu=a("li"),Soe=a("strong"),c2o=o("mbart"),f2o=o(" \u2014 "),T$=a("a"),m2o=o("MBartForCausalLM"),g2o=o(" (mBART model)"),h2o=l(),Bu=a("li"),Poe=a("strong"),p2o=o("megatron-bert"),_2o=o(" \u2014 "),F$=a("a"),u2o=o("MegatronBertForCausalLM"),b2o=o(" (MegatronBert model)"),v2o=l(),xu=a("li"),$oe=a("strong"),T2o=o("openai-gpt"),F2o=o(" \u2014 "),C$=a("a"),C2o=o("OpenAIGPTLMHeadModel"),M2o=o(" (OpenAI GPT model)"),E2o=l(),ku=a("li"),Ioe=a("strong"),y2o=o("pegasus"),w2o=o(" \u2014 "),M$=a("a"),A2o=o("PegasusForCausalLM"),L2o=o(" (Pegasus model)"),B2o=l(),Ru=a("li"),Noe=a("strong"),x2o=o("plbart"),k2o=o(" \u2014 "),E$=a("a"),R2o=o("PLBartForCausalLM"),S2o=o(" (PLBart model)"),P2o=l(),Su=a("li"),joe=a("strong"),$2o=o("prophetnet"),I2o=o(" \u2014 "),y$=a("a"),N2o=o("ProphetNetForCausalLM"),j2o=o(" (ProphetNet model)"),D2o=l(),Pu=a("li"),Doe=a("strong"),q2o=o("qdqbert"),G2o=o(" \u2014 "),w$=a("a"),O2o=o("QDQBertLMHeadModel"),X2o=o(" (QDQBert model)"),V2o=l(),$u=a("li"),qoe=a("strong"),z2o=o("reformer"),W2o=o(" \u2014 "),A$=a("a"),Q2o=o("ReformerModelWithLMHead"),H2o=o(" (Reformer model)"),U2o=l(),Iu=a("li"),Goe=a("strong"),J2o=o("rembert"),Y2o=o(" \u2014 "),L$=a("a"),K2o=o("RemBertForCausalLM"),Z2o=o(" (RemBERT model)"),e1o=l(),Nu=a("li"),Ooe=a("strong"),o1o=o("roberta"),r1o=o(" \u2014 "),B$=a("a"),t1o=o("RobertaForCausalLM"),a1o=o(" (RoBERTa model)"),n1o=l(),ju=a("li"),Xoe=a("strong"),s1o=o("roformer"),l1o=o(" \u2014 "),x$=a("a"),i1o=o("RoFormerForCausalLM"),d1o=o(" (RoFormer model)"),c1o=l(),Du=a("li"),Voe=a("strong"),f1o=o("speech_to_text_2"),m1o=o(" \u2014 "),k$=a("a"),g1o=o("Speech2Text2ForCausalLM"),h1o=o(" (Speech2Text2 model)"),p1o=l(),qu=a("li"),zoe=a("strong"),_1o=o("transfo-xl"),u1o=o(" \u2014 "),R$=a("a"),b1o=o("TransfoXLLMHeadModel"),v1o=o(" (Transformer-XL model)"),T1o=l(),Gu=a("li"),Woe=a("strong"),F1o=o("trocr"),C1o=o(" \u2014 "),S$=a("a"),M1o=o("TrOCRForCausalLM"),E1o=o(" (TrOCR model)"),y1o=l(),Ou=a("li"),Qoe=a("strong"),w1o=o("xglm"),A1o=o(" \u2014 "),P$=a("a"),L1o=o("XGLMForCausalLM"),B1o=o(" (XGLM model)"),x1o=l(),Xu=a("li"),Hoe=a("strong"),k1o=o("xlm"),R1o=o(" \u2014 "),$$=a("a"),S1o=o("XLMWithLMHeadModel"),P1o=o(" (XLM model)"),$1o=l(),Vu=a("li"),Uoe=a("strong"),I1o=o("xlm-prophetnet"),N1o=o(" \u2014 "),I$=a("a"),j1o=o("XLMProphetNetForCausalLM"),D1o=o(" (XLMProphetNet model)"),q1o=l(),zu=a("li"),Joe=a("strong"),G1o=o("xlm-roberta"),O1o=o(" \u2014 "),N$=a("a"),X1o=o("XLMRobertaForCausalLM"),V1o=o(" (XLM-RoBERTa model)"),z1o=l(),Wu=a("li"),Yoe=a("strong"),W1o=o("xlm-roberta-xl"),Q1o=o(" \u2014 "),j$=a("a"),H1o=o("XLMRobertaXLForCausalLM"),U1o=o(" (XLM-RoBERTa-XL model)"),J1o=l(),Qu=a("li"),Koe=a("strong"),Y1o=o("xlnet"),K1o=o(" \u2014 "),D$=a("a"),Z1o=o("XLNetLMHeadModel"),ebo=o(" (XLNet model)"),obo=l(),Hu=a("p"),rbo=o("The model is set in evaluation mode by default using "),Zoe=a("code"),tbo=o("model.eval()"),abo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ere=a("code"),nbo=o("model.train()"),sbo=l(),ore=a("p"),lbo=o("Examples:"),ibo=l(),f(ny.$$.fragment),vke=l(),sd=a("h2"),Uu=a("a"),rre=a("span"),f(sy.$$.fragment),dbo=l(),tre=a("span"),cbo=o("AutoModelForMaskedLM"),Tke=l(),Zo=a("div"),f(ly.$$.fragment),fbo=l(),ld=a("p"),mbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),are=a("code"),gbo=o("from_pretrained()"),hbo=o("class method or the "),nre=a("code"),pbo=o("from_config()"),_bo=o(`class
method.`),ubo=l(),iy=a("p"),bbo=o("This class cannot be instantiated directly using "),sre=a("code"),vbo=o("__init__()"),Tbo=o(" (throws an error)."),Fbo=l(),Qr=a("div"),f(dy.$$.fragment),Cbo=l(),lre=a("p"),Mbo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ebo=l(),id=a("p"),ybo=o(`Note:
Loading a model from its configuration file does `),ire=a("strong"),wbo=o("not"),Abo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("code"),Lbo=o("from_pretrained()"),Bbo=o("to load the model weights."),xbo=l(),cre=a("p"),kbo=o("Examples:"),Rbo=l(),f(cy.$$.fragment),Sbo=l(),Ge=a("div"),f(fy.$$.fragment),Pbo=l(),fre=a("p"),$bo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ibo=l(),Qa=a("p"),Nbo=o("The model class to instantiate is selected based on the "),mre=a("code"),jbo=o("model_type"),Dbo=o(` property of the config object (either
passed as an argument or loaded from `),gre=a("code"),qbo=o("pretrained_model_name_or_path"),Gbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hre=a("code"),Obo=o("pretrained_model_name_or_path"),Xbo=o(":"),Vbo=l(),I=a("ul"),Ju=a("li"),pre=a("strong"),zbo=o("albert"),Wbo=o(" \u2014 "),q$=a("a"),Qbo=o("AlbertForMaskedLM"),Hbo=o(" (ALBERT model)"),Ubo=l(),Yu=a("li"),_re=a("strong"),Jbo=o("bart"),Ybo=o(" \u2014 "),G$=a("a"),Kbo=o("BartForConditionalGeneration"),Zbo=o(" (BART model)"),evo=l(),Ku=a("li"),ure=a("strong"),ovo=o("bert"),rvo=o(" \u2014 "),O$=a("a"),tvo=o("BertForMaskedLM"),avo=o(" (BERT model)"),nvo=l(),Zu=a("li"),bre=a("strong"),svo=o("big_bird"),lvo=o(" \u2014 "),X$=a("a"),ivo=o("BigBirdForMaskedLM"),dvo=o(" (BigBird model)"),cvo=l(),e5=a("li"),vre=a("strong"),fvo=o("camembert"),mvo=o(" \u2014 "),V$=a("a"),gvo=o("CamembertForMaskedLM"),hvo=o(" (CamemBERT model)"),pvo=l(),o5=a("li"),Tre=a("strong"),_vo=o("convbert"),uvo=o(" \u2014 "),z$=a("a"),bvo=o("ConvBertForMaskedLM"),vvo=o(" (ConvBERT model)"),Tvo=l(),r5=a("li"),Fre=a("strong"),Fvo=o("data2vec-text"),Cvo=o(" \u2014 "),W$=a("a"),Mvo=o("Data2VecTextForMaskedLM"),Evo=o(" (Data2VecText model)"),yvo=l(),t5=a("li"),Cre=a("strong"),wvo=o("deberta"),Avo=o(" \u2014 "),Q$=a("a"),Lvo=o("DebertaForMaskedLM"),Bvo=o(" (DeBERTa model)"),xvo=l(),a5=a("li"),Mre=a("strong"),kvo=o("deberta-v2"),Rvo=o(" \u2014 "),H$=a("a"),Svo=o("DebertaV2ForMaskedLM"),Pvo=o(" (DeBERTa-v2 model)"),$vo=l(),n5=a("li"),Ere=a("strong"),Ivo=o("distilbert"),Nvo=o(" \u2014 "),U$=a("a"),jvo=o("DistilBertForMaskedLM"),Dvo=o(" (DistilBERT model)"),qvo=l(),s5=a("li"),yre=a("strong"),Gvo=o("electra"),Ovo=o(" \u2014 "),J$=a("a"),Xvo=o("ElectraForMaskedLM"),Vvo=o(" (ELECTRA model)"),zvo=l(),l5=a("li"),wre=a("strong"),Wvo=o("flaubert"),Qvo=o(" \u2014 "),Y$=a("a"),Hvo=o("FlaubertWithLMHeadModel"),Uvo=o(" (FlauBERT model)"),Jvo=l(),i5=a("li"),Are=a("strong"),Yvo=o("fnet"),Kvo=o(" \u2014 "),K$=a("a"),Zvo=o("FNetForMaskedLM"),e6o=o(" (FNet model)"),o6o=l(),d5=a("li"),Lre=a("strong"),r6o=o("funnel"),t6o=o(" \u2014 "),Z$=a("a"),a6o=o("FunnelForMaskedLM"),n6o=o(" (Funnel Transformer model)"),s6o=l(),c5=a("li"),Bre=a("strong"),l6o=o("ibert"),i6o=o(" \u2014 "),eI=a("a"),d6o=o("IBertForMaskedLM"),c6o=o(" (I-BERT model)"),f6o=l(),f5=a("li"),xre=a("strong"),m6o=o("layoutlm"),g6o=o(" \u2014 "),oI=a("a"),h6o=o("LayoutLMForMaskedLM"),p6o=o(" (LayoutLM model)"),_6o=l(),m5=a("li"),kre=a("strong"),u6o=o("longformer"),b6o=o(" \u2014 "),rI=a("a"),v6o=o("LongformerForMaskedLM"),T6o=o(" (Longformer model)"),F6o=l(),g5=a("li"),Rre=a("strong"),C6o=o("mbart"),M6o=o(" \u2014 "),tI=a("a"),E6o=o("MBartForConditionalGeneration"),y6o=o(" (mBART model)"),w6o=l(),h5=a("li"),Sre=a("strong"),A6o=o("megatron-bert"),L6o=o(" \u2014 "),aI=a("a"),B6o=o("MegatronBertForMaskedLM"),x6o=o(" (MegatronBert model)"),k6o=l(),p5=a("li"),Pre=a("strong"),R6o=o("mobilebert"),S6o=o(" \u2014 "),nI=a("a"),P6o=o("MobileBertForMaskedLM"),$6o=o(" (MobileBERT model)"),I6o=l(),_5=a("li"),$re=a("strong"),N6o=o("mpnet"),j6o=o(" \u2014 "),sI=a("a"),D6o=o("MPNetForMaskedLM"),q6o=o(" (MPNet model)"),G6o=l(),u5=a("li"),Ire=a("strong"),O6o=o("nystromformer"),X6o=o(" \u2014 "),lI=a("a"),V6o=o("NystromformerForMaskedLM"),z6o=o(" (Nystromformer model)"),W6o=l(),b5=a("li"),Nre=a("strong"),Q6o=o("perceiver"),H6o=o(" \u2014 "),iI=a("a"),U6o=o("PerceiverForMaskedLM"),J6o=o(" (Perceiver model)"),Y6o=l(),v5=a("li"),jre=a("strong"),K6o=o("qdqbert"),Z6o=o(" \u2014 "),dI=a("a"),eTo=o("QDQBertForMaskedLM"),oTo=o(" (QDQBert model)"),rTo=l(),T5=a("li"),Dre=a("strong"),tTo=o("reformer"),aTo=o(" \u2014 "),cI=a("a"),nTo=o("ReformerForMaskedLM"),sTo=o(" (Reformer model)"),lTo=l(),F5=a("li"),qre=a("strong"),iTo=o("rembert"),dTo=o(" \u2014 "),fI=a("a"),cTo=o("RemBertForMaskedLM"),fTo=o(" (RemBERT model)"),mTo=l(),C5=a("li"),Gre=a("strong"),gTo=o("roberta"),hTo=o(" \u2014 "),mI=a("a"),pTo=o("RobertaForMaskedLM"),_To=o(" (RoBERTa model)"),uTo=l(),M5=a("li"),Ore=a("strong"),bTo=o("roformer"),vTo=o(" \u2014 "),gI=a("a"),TTo=o("RoFormerForMaskedLM"),FTo=o(" (RoFormer model)"),CTo=l(),E5=a("li"),Xre=a("strong"),MTo=o("squeezebert"),ETo=o(" \u2014 "),hI=a("a"),yTo=o("SqueezeBertForMaskedLM"),wTo=o(" (SqueezeBERT model)"),ATo=l(),y5=a("li"),Vre=a("strong"),LTo=o("tapas"),BTo=o(" \u2014 "),pI=a("a"),xTo=o("TapasForMaskedLM"),kTo=o(" (TAPAS model)"),RTo=l(),w5=a("li"),zre=a("strong"),STo=o("wav2vec2"),PTo=o(" \u2014 "),Wre=a("code"),$To=o("Wav2Vec2ForMaskedLM"),ITo=o("(Wav2Vec2 model)"),NTo=l(),A5=a("li"),Qre=a("strong"),jTo=o("xlm"),DTo=o(" \u2014 "),_I=a("a"),qTo=o("XLMWithLMHeadModel"),GTo=o(" (XLM model)"),OTo=l(),L5=a("li"),Hre=a("strong"),XTo=o("xlm-roberta"),VTo=o(" \u2014 "),uI=a("a"),zTo=o("XLMRobertaForMaskedLM"),WTo=o(" (XLM-RoBERTa model)"),QTo=l(),B5=a("li"),Ure=a("strong"),HTo=o("xlm-roberta-xl"),UTo=o(" \u2014 "),bI=a("a"),JTo=o("XLMRobertaXLForMaskedLM"),YTo=o(" (XLM-RoBERTa-XL model)"),KTo=l(),x5=a("li"),Jre=a("strong"),ZTo=o("yoso"),eFo=o(" \u2014 "),vI=a("a"),oFo=o("YosoForMaskedLM"),rFo=o(" (YOSO model)"),tFo=l(),k5=a("p"),aFo=o("The model is set in evaluation mode by default using "),Yre=a("code"),nFo=o("model.eval()"),sFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kre=a("code"),lFo=o("model.train()"),iFo=l(),Zre=a("p"),dFo=o("Examples:"),cFo=l(),f(my.$$.fragment),Fke=l(),dd=a("h2"),R5=a("a"),ete=a("span"),f(gy.$$.fragment),fFo=l(),ote=a("span"),mFo=o("AutoModelForSeq2SeqLM"),Cke=l(),er=a("div"),f(hy.$$.fragment),gFo=l(),cd=a("p"),hFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rte=a("code"),pFo=o("from_pretrained()"),_Fo=o("class method or the "),tte=a("code"),uFo=o("from_config()"),bFo=o(`class
method.`),vFo=l(),py=a("p"),TFo=o("This class cannot be instantiated directly using "),ate=a("code"),FFo=o("__init__()"),CFo=o(" (throws an error)."),MFo=l(),Hr=a("div"),f(_y.$$.fragment),EFo=l(),nte=a("p"),yFo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wFo=l(),fd=a("p"),AFo=o(`Note:
Loading a model from its configuration file does `),ste=a("strong"),LFo=o("not"),BFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=a("code"),xFo=o("from_pretrained()"),kFo=o("to load the model weights."),RFo=l(),ite=a("p"),SFo=o("Examples:"),PFo=l(),f(uy.$$.fragment),$Fo=l(),Oe=a("div"),f(by.$$.fragment),IFo=l(),dte=a("p"),NFo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jFo=l(),Ha=a("p"),DFo=o("The model class to instantiate is selected based on the "),cte=a("code"),qFo=o("model_type"),GFo=o(` property of the config object (either
passed as an argument or loaded from `),fte=a("code"),OFo=o("pretrained_model_name_or_path"),XFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mte=a("code"),VFo=o("pretrained_model_name_or_path"),zFo=o(":"),WFo=l(),se=a("ul"),S5=a("li"),gte=a("strong"),QFo=o("bart"),HFo=o(" \u2014 "),TI=a("a"),UFo=o("BartForConditionalGeneration"),JFo=o(" (BART model)"),YFo=l(),P5=a("li"),hte=a("strong"),KFo=o("bigbird_pegasus"),ZFo=o(" \u2014 "),FI=a("a"),eCo=o("BigBirdPegasusForConditionalGeneration"),oCo=o(" (BigBirdPegasus model)"),rCo=l(),$5=a("li"),pte=a("strong"),tCo=o("blenderbot"),aCo=o(" \u2014 "),CI=a("a"),nCo=o("BlenderbotForConditionalGeneration"),sCo=o(" (Blenderbot model)"),lCo=l(),I5=a("li"),_te=a("strong"),iCo=o("blenderbot-small"),dCo=o(" \u2014 "),MI=a("a"),cCo=o("BlenderbotSmallForConditionalGeneration"),fCo=o(" (BlenderbotSmall model)"),mCo=l(),N5=a("li"),ute=a("strong"),gCo=o("encoder-decoder"),hCo=o(" \u2014 "),EI=a("a"),pCo=o("EncoderDecoderModel"),_Co=o(" (Encoder decoder model)"),uCo=l(),j5=a("li"),bte=a("strong"),bCo=o("fsmt"),vCo=o(" \u2014 "),yI=a("a"),TCo=o("FSMTForConditionalGeneration"),FCo=o(" (FairSeq Machine-Translation model)"),CCo=l(),D5=a("li"),vte=a("strong"),MCo=o("led"),ECo=o(" \u2014 "),wI=a("a"),yCo=o("LEDForConditionalGeneration"),wCo=o(" (LED model)"),ACo=l(),q5=a("li"),Tte=a("strong"),LCo=o("m2m_100"),BCo=o(" \u2014 "),AI=a("a"),xCo=o("M2M100ForConditionalGeneration"),kCo=o(" (M2M100 model)"),RCo=l(),G5=a("li"),Fte=a("strong"),SCo=o("marian"),PCo=o(" \u2014 "),LI=a("a"),$Co=o("MarianMTModel"),ICo=o(" (Marian model)"),NCo=l(),O5=a("li"),Cte=a("strong"),jCo=o("mbart"),DCo=o(" \u2014 "),BI=a("a"),qCo=o("MBartForConditionalGeneration"),GCo=o(" (mBART model)"),OCo=l(),X5=a("li"),Mte=a("strong"),XCo=o("mt5"),VCo=o(" \u2014 "),xI=a("a"),zCo=o("MT5ForConditionalGeneration"),WCo=o(" (mT5 model)"),QCo=l(),V5=a("li"),Ete=a("strong"),HCo=o("pegasus"),UCo=o(" \u2014 "),kI=a("a"),JCo=o("PegasusForConditionalGeneration"),YCo=o(" (Pegasus model)"),KCo=l(),z5=a("li"),yte=a("strong"),ZCo=o("plbart"),eMo=o(" \u2014 "),RI=a("a"),oMo=o("PLBartForConditionalGeneration"),rMo=o(" (PLBart model)"),tMo=l(),W5=a("li"),wte=a("strong"),aMo=o("prophetnet"),nMo=o(" \u2014 "),SI=a("a"),sMo=o("ProphetNetForConditionalGeneration"),lMo=o(" (ProphetNet model)"),iMo=l(),Q5=a("li"),Ate=a("strong"),dMo=o("t5"),cMo=o(" \u2014 "),PI=a("a"),fMo=o("T5ForConditionalGeneration"),mMo=o(" (T5 model)"),gMo=l(),H5=a("li"),Lte=a("strong"),hMo=o("xlm-prophetnet"),pMo=o(" \u2014 "),$I=a("a"),_Mo=o("XLMProphetNetForConditionalGeneration"),uMo=o(" (XLMProphetNet model)"),bMo=l(),U5=a("p"),vMo=o("The model is set in evaluation mode by default using "),Bte=a("code"),TMo=o("model.eval()"),FMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=a("code"),CMo=o("model.train()"),MMo=l(),kte=a("p"),EMo=o("Examples:"),yMo=l(),f(vy.$$.fragment),Mke=l(),md=a("h2"),J5=a("a"),Rte=a("span"),f(Ty.$$.fragment),wMo=l(),Ste=a("span"),AMo=o("AutoModelForSequenceClassification"),Eke=l(),or=a("div"),f(Fy.$$.fragment),LMo=l(),gd=a("p"),BMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Pte=a("code"),xMo=o("from_pretrained()"),kMo=o("class method or the "),$te=a("code"),RMo=o("from_config()"),SMo=o(`class
method.`),PMo=l(),Cy=a("p"),$Mo=o("This class cannot be instantiated directly using "),Ite=a("code"),IMo=o("__init__()"),NMo=o(" (throws an error)."),jMo=l(),Ur=a("div"),f(My.$$.fragment),DMo=l(),Nte=a("p"),qMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GMo=l(),hd=a("p"),OMo=o(`Note:
Loading a model from its configuration file does `),jte=a("strong"),XMo=o("not"),VMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=a("code"),zMo=o("from_pretrained()"),WMo=o("to load the model weights."),QMo=l(),qte=a("p"),HMo=o("Examples:"),UMo=l(),f(Ey.$$.fragment),JMo=l(),Xe=a("div"),f(yy.$$.fragment),YMo=l(),Gte=a("p"),KMo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZMo=l(),Ua=a("p"),e4o=o("The model class to instantiate is selected based on the "),Ote=a("code"),o4o=o("model_type"),r4o=o(` property of the config object (either
passed as an argument or loaded from `),Xte=a("code"),t4o=o("pretrained_model_name_or_path"),a4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=a("code"),n4o=o("pretrained_model_name_or_path"),s4o=o(":"),l4o=l(),A=a("ul"),Y5=a("li"),zte=a("strong"),i4o=o("albert"),d4o=o(" \u2014 "),II=a("a"),c4o=o("AlbertForSequenceClassification"),f4o=o(" (ALBERT model)"),m4o=l(),K5=a("li"),Wte=a("strong"),g4o=o("bart"),h4o=o(" \u2014 "),NI=a("a"),p4o=o("BartForSequenceClassification"),_4o=o(" (BART model)"),u4o=l(),Z5=a("li"),Qte=a("strong"),b4o=o("bert"),v4o=o(" \u2014 "),jI=a("a"),T4o=o("BertForSequenceClassification"),F4o=o(" (BERT model)"),C4o=l(),e2=a("li"),Hte=a("strong"),M4o=o("big_bird"),E4o=o(" \u2014 "),DI=a("a"),y4o=o("BigBirdForSequenceClassification"),w4o=o(" (BigBird model)"),A4o=l(),o2=a("li"),Ute=a("strong"),L4o=o("bigbird_pegasus"),B4o=o(" \u2014 "),qI=a("a"),x4o=o("BigBirdPegasusForSequenceClassification"),k4o=o(" (BigBirdPegasus model)"),R4o=l(),r2=a("li"),Jte=a("strong"),S4o=o("camembert"),P4o=o(" \u2014 "),GI=a("a"),$4o=o("CamembertForSequenceClassification"),I4o=o(" (CamemBERT model)"),N4o=l(),t2=a("li"),Yte=a("strong"),j4o=o("canine"),D4o=o(" \u2014 "),OI=a("a"),q4o=o("CanineForSequenceClassification"),G4o=o(" (Canine model)"),O4o=l(),a2=a("li"),Kte=a("strong"),X4o=o("convbert"),V4o=o(" \u2014 "),XI=a("a"),z4o=o("ConvBertForSequenceClassification"),W4o=o(" (ConvBERT model)"),Q4o=l(),n2=a("li"),Zte=a("strong"),H4o=o("ctrl"),U4o=o(" \u2014 "),VI=a("a"),J4o=o("CTRLForSequenceClassification"),Y4o=o(" (CTRL model)"),K4o=l(),s2=a("li"),eae=a("strong"),Z4o=o("data2vec-text"),eEo=o(" \u2014 "),zI=a("a"),oEo=o("Data2VecTextForSequenceClassification"),rEo=o(" (Data2VecText model)"),tEo=l(),l2=a("li"),oae=a("strong"),aEo=o("deberta"),nEo=o(" \u2014 "),WI=a("a"),sEo=o("DebertaForSequenceClassification"),lEo=o(" (DeBERTa model)"),iEo=l(),i2=a("li"),rae=a("strong"),dEo=o("deberta-v2"),cEo=o(" \u2014 "),QI=a("a"),fEo=o("DebertaV2ForSequenceClassification"),mEo=o(" (DeBERTa-v2 model)"),gEo=l(),d2=a("li"),tae=a("strong"),hEo=o("distilbert"),pEo=o(" \u2014 "),HI=a("a"),_Eo=o("DistilBertForSequenceClassification"),uEo=o(" (DistilBERT model)"),bEo=l(),c2=a("li"),aae=a("strong"),vEo=o("electra"),TEo=o(" \u2014 "),UI=a("a"),FEo=o("ElectraForSequenceClassification"),CEo=o(" (ELECTRA model)"),MEo=l(),f2=a("li"),nae=a("strong"),EEo=o("flaubert"),yEo=o(" \u2014 "),JI=a("a"),wEo=o("FlaubertForSequenceClassification"),AEo=o(" (FlauBERT model)"),LEo=l(),m2=a("li"),sae=a("strong"),BEo=o("fnet"),xEo=o(" \u2014 "),YI=a("a"),kEo=o("FNetForSequenceClassification"),REo=o(" (FNet model)"),SEo=l(),g2=a("li"),lae=a("strong"),PEo=o("funnel"),$Eo=o(" \u2014 "),KI=a("a"),IEo=o("FunnelForSequenceClassification"),NEo=o(" (Funnel Transformer model)"),jEo=l(),h2=a("li"),iae=a("strong"),DEo=o("gpt2"),qEo=o(" \u2014 "),ZI=a("a"),GEo=o("GPT2ForSequenceClassification"),OEo=o(" (OpenAI GPT-2 model)"),XEo=l(),p2=a("li"),dae=a("strong"),VEo=o("gpt_neo"),zEo=o(" \u2014 "),eN=a("a"),WEo=o("GPTNeoForSequenceClassification"),QEo=o(" (GPT Neo model)"),HEo=l(),_2=a("li"),cae=a("strong"),UEo=o("gptj"),JEo=o(" \u2014 "),oN=a("a"),YEo=o("GPTJForSequenceClassification"),KEo=o(" (GPT-J model)"),ZEo=l(),u2=a("li"),fae=a("strong"),e3o=o("ibert"),o3o=o(" \u2014 "),rN=a("a"),r3o=o("IBertForSequenceClassification"),t3o=o(" (I-BERT model)"),a3o=l(),b2=a("li"),mae=a("strong"),n3o=o("layoutlm"),s3o=o(" \u2014 "),tN=a("a"),l3o=o("LayoutLMForSequenceClassification"),i3o=o(" (LayoutLM model)"),d3o=l(),v2=a("li"),gae=a("strong"),c3o=o("layoutlmv2"),f3o=o(" \u2014 "),aN=a("a"),m3o=o("LayoutLMv2ForSequenceClassification"),g3o=o(" (LayoutLMv2 model)"),h3o=l(),T2=a("li"),hae=a("strong"),p3o=o("led"),_3o=o(" \u2014 "),nN=a("a"),u3o=o("LEDForSequenceClassification"),b3o=o(" (LED model)"),v3o=l(),F2=a("li"),pae=a("strong"),T3o=o("longformer"),F3o=o(" \u2014 "),sN=a("a"),C3o=o("LongformerForSequenceClassification"),M3o=o(" (Longformer model)"),E3o=l(),C2=a("li"),_ae=a("strong"),y3o=o("mbart"),w3o=o(" \u2014 "),lN=a("a"),A3o=o("MBartForSequenceClassification"),L3o=o(" (mBART model)"),B3o=l(),M2=a("li"),uae=a("strong"),x3o=o("megatron-bert"),k3o=o(" \u2014 "),iN=a("a"),R3o=o("MegatronBertForSequenceClassification"),S3o=o(" (MegatronBert model)"),P3o=l(),E2=a("li"),bae=a("strong"),$3o=o("mobilebert"),I3o=o(" \u2014 "),dN=a("a"),N3o=o("MobileBertForSequenceClassification"),j3o=o(" (MobileBERT model)"),D3o=l(),y2=a("li"),vae=a("strong"),q3o=o("mpnet"),G3o=o(" \u2014 "),cN=a("a"),O3o=o("MPNetForSequenceClassification"),X3o=o(" (MPNet model)"),V3o=l(),w2=a("li"),Tae=a("strong"),z3o=o("nystromformer"),W3o=o(" \u2014 "),fN=a("a"),Q3o=o("NystromformerForSequenceClassification"),H3o=o(" (Nystromformer model)"),U3o=l(),A2=a("li"),Fae=a("strong"),J3o=o("openai-gpt"),Y3o=o(" \u2014 "),mN=a("a"),K3o=o("OpenAIGPTForSequenceClassification"),Z3o=o(" (OpenAI GPT model)"),eyo=l(),L2=a("li"),Cae=a("strong"),oyo=o("perceiver"),ryo=o(" \u2014 "),gN=a("a"),tyo=o("PerceiverForSequenceClassification"),ayo=o(" (Perceiver model)"),nyo=l(),B2=a("li"),Mae=a("strong"),syo=o("plbart"),lyo=o(" \u2014 "),hN=a("a"),iyo=o("PLBartForSequenceClassification"),dyo=o(" (PLBart model)"),cyo=l(),x2=a("li"),Eae=a("strong"),fyo=o("qdqbert"),myo=o(" \u2014 "),pN=a("a"),gyo=o("QDQBertForSequenceClassification"),hyo=o(" (QDQBert model)"),pyo=l(),k2=a("li"),yae=a("strong"),_yo=o("reformer"),uyo=o(" \u2014 "),_N=a("a"),byo=o("ReformerForSequenceClassification"),vyo=o(" (Reformer model)"),Tyo=l(),R2=a("li"),wae=a("strong"),Fyo=o("rembert"),Cyo=o(" \u2014 "),uN=a("a"),Myo=o("RemBertForSequenceClassification"),Eyo=o(" (RemBERT model)"),yyo=l(),S2=a("li"),Aae=a("strong"),wyo=o("roberta"),Ayo=o(" \u2014 "),bN=a("a"),Lyo=o("RobertaForSequenceClassification"),Byo=o(" (RoBERTa model)"),xyo=l(),P2=a("li"),Lae=a("strong"),kyo=o("roformer"),Ryo=o(" \u2014 "),vN=a("a"),Syo=o("RoFormerForSequenceClassification"),Pyo=o(" (RoFormer model)"),$yo=l(),$2=a("li"),Bae=a("strong"),Iyo=o("squeezebert"),Nyo=o(" \u2014 "),TN=a("a"),jyo=o("SqueezeBertForSequenceClassification"),Dyo=o(" (SqueezeBERT model)"),qyo=l(),I2=a("li"),xae=a("strong"),Gyo=o("tapas"),Oyo=o(" \u2014 "),FN=a("a"),Xyo=o("TapasForSequenceClassification"),Vyo=o(" (TAPAS model)"),zyo=l(),N2=a("li"),kae=a("strong"),Wyo=o("transfo-xl"),Qyo=o(" \u2014 "),CN=a("a"),Hyo=o("TransfoXLForSequenceClassification"),Uyo=o(" (Transformer-XL model)"),Jyo=l(),j2=a("li"),Rae=a("strong"),Yyo=o("xlm"),Kyo=o(" \u2014 "),MN=a("a"),Zyo=o("XLMForSequenceClassification"),ewo=o(" (XLM model)"),owo=l(),D2=a("li"),Sae=a("strong"),rwo=o("xlm-roberta"),two=o(" \u2014 "),EN=a("a"),awo=o("XLMRobertaForSequenceClassification"),nwo=o(" (XLM-RoBERTa model)"),swo=l(),q2=a("li"),Pae=a("strong"),lwo=o("xlm-roberta-xl"),iwo=o(" \u2014 "),yN=a("a"),dwo=o("XLMRobertaXLForSequenceClassification"),cwo=o(" (XLM-RoBERTa-XL model)"),fwo=l(),G2=a("li"),$ae=a("strong"),mwo=o("xlnet"),gwo=o(" \u2014 "),wN=a("a"),hwo=o("XLNetForSequenceClassification"),pwo=o(" (XLNet model)"),_wo=l(),O2=a("li"),Iae=a("strong"),uwo=o("yoso"),bwo=o(" \u2014 "),AN=a("a"),vwo=o("YosoForSequenceClassification"),Two=o(" (YOSO model)"),Fwo=l(),X2=a("p"),Cwo=o("The model is set in evaluation mode by default using "),Nae=a("code"),Mwo=o("model.eval()"),Ewo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jae=a("code"),ywo=o("model.train()"),wwo=l(),Dae=a("p"),Awo=o("Examples:"),Lwo=l(),f(wy.$$.fragment),yke=l(),pd=a("h2"),V2=a("a"),qae=a("span"),f(Ay.$$.fragment),Bwo=l(),Gae=a("span"),xwo=o("AutoModelForMultipleChoice"),wke=l(),rr=a("div"),f(Ly.$$.fragment),kwo=l(),_d=a("p"),Rwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Oae=a("code"),Swo=o("from_pretrained()"),Pwo=o("class method or the "),Xae=a("code"),$wo=o("from_config()"),Iwo=o(`class
method.`),Nwo=l(),By=a("p"),jwo=o("This class cannot be instantiated directly using "),Vae=a("code"),Dwo=o("__init__()"),qwo=o(" (throws an error)."),Gwo=l(),Jr=a("div"),f(xy.$$.fragment),Owo=l(),zae=a("p"),Xwo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vwo=l(),ud=a("p"),zwo=o(`Note:
Loading a model from its configuration file does `),Wae=a("strong"),Wwo=o("not"),Qwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=a("code"),Hwo=o("from_pretrained()"),Uwo=o("to load the model weights."),Jwo=l(),Hae=a("p"),Ywo=o("Examples:"),Kwo=l(),f(ky.$$.fragment),Zwo=l(),Ve=a("div"),f(Ry.$$.fragment),eAo=l(),Uae=a("p"),oAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rAo=l(),Ja=a("p"),tAo=o("The model class to instantiate is selected based on the "),Jae=a("code"),aAo=o("model_type"),nAo=o(` property of the config object (either
passed as an argument or loaded from `),Yae=a("code"),sAo=o("pretrained_model_name_or_path"),lAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kae=a("code"),iAo=o("pretrained_model_name_or_path"),dAo=o(":"),cAo=l(),G=a("ul"),z2=a("li"),Zae=a("strong"),fAo=o("albert"),mAo=o(" \u2014 "),LN=a("a"),gAo=o("AlbertForMultipleChoice"),hAo=o(" (ALBERT model)"),pAo=l(),W2=a("li"),ene=a("strong"),_Ao=o("bert"),uAo=o(" \u2014 "),BN=a("a"),bAo=o("BertForMultipleChoice"),vAo=o(" (BERT model)"),TAo=l(),Q2=a("li"),one=a("strong"),FAo=o("big_bird"),CAo=o(" \u2014 "),xN=a("a"),MAo=o("BigBirdForMultipleChoice"),EAo=o(" (BigBird model)"),yAo=l(),H2=a("li"),rne=a("strong"),wAo=o("camembert"),AAo=o(" \u2014 "),kN=a("a"),LAo=o("CamembertForMultipleChoice"),BAo=o(" (CamemBERT model)"),xAo=l(),U2=a("li"),tne=a("strong"),kAo=o("canine"),RAo=o(" \u2014 "),RN=a("a"),SAo=o("CanineForMultipleChoice"),PAo=o(" (Canine model)"),$Ao=l(),J2=a("li"),ane=a("strong"),IAo=o("convbert"),NAo=o(" \u2014 "),SN=a("a"),jAo=o("ConvBertForMultipleChoice"),DAo=o(" (ConvBERT model)"),qAo=l(),Y2=a("li"),nne=a("strong"),GAo=o("data2vec-text"),OAo=o(" \u2014 "),PN=a("a"),XAo=o("Data2VecTextForMultipleChoice"),VAo=o(" (Data2VecText model)"),zAo=l(),K2=a("li"),sne=a("strong"),WAo=o("distilbert"),QAo=o(" \u2014 "),$N=a("a"),HAo=o("DistilBertForMultipleChoice"),UAo=o(" (DistilBERT model)"),JAo=l(),Z2=a("li"),lne=a("strong"),YAo=o("electra"),KAo=o(" \u2014 "),IN=a("a"),ZAo=o("ElectraForMultipleChoice"),e0o=o(" (ELECTRA model)"),o0o=l(),e1=a("li"),ine=a("strong"),r0o=o("flaubert"),t0o=o(" \u2014 "),NN=a("a"),a0o=o("FlaubertForMultipleChoice"),n0o=o(" (FlauBERT model)"),s0o=l(),o1=a("li"),dne=a("strong"),l0o=o("fnet"),i0o=o(" \u2014 "),jN=a("a"),d0o=o("FNetForMultipleChoice"),c0o=o(" (FNet model)"),f0o=l(),r1=a("li"),cne=a("strong"),m0o=o("funnel"),g0o=o(" \u2014 "),DN=a("a"),h0o=o("FunnelForMultipleChoice"),p0o=o(" (Funnel Transformer model)"),_0o=l(),t1=a("li"),fne=a("strong"),u0o=o("ibert"),b0o=o(" \u2014 "),qN=a("a"),v0o=o("IBertForMultipleChoice"),T0o=o(" (I-BERT model)"),F0o=l(),a1=a("li"),mne=a("strong"),C0o=o("longformer"),M0o=o(" \u2014 "),GN=a("a"),E0o=o("LongformerForMultipleChoice"),y0o=o(" (Longformer model)"),w0o=l(),n1=a("li"),gne=a("strong"),A0o=o("megatron-bert"),L0o=o(" \u2014 "),ON=a("a"),B0o=o("MegatronBertForMultipleChoice"),x0o=o(" (MegatronBert model)"),k0o=l(),s1=a("li"),hne=a("strong"),R0o=o("mobilebert"),S0o=o(" \u2014 "),XN=a("a"),P0o=o("MobileBertForMultipleChoice"),$0o=o(" (MobileBERT model)"),I0o=l(),l1=a("li"),pne=a("strong"),N0o=o("mpnet"),j0o=o(" \u2014 "),VN=a("a"),D0o=o("MPNetForMultipleChoice"),q0o=o(" (MPNet model)"),G0o=l(),i1=a("li"),_ne=a("strong"),O0o=o("nystromformer"),X0o=o(" \u2014 "),zN=a("a"),V0o=o("NystromformerForMultipleChoice"),z0o=o(" (Nystromformer model)"),W0o=l(),d1=a("li"),une=a("strong"),Q0o=o("qdqbert"),H0o=o(" \u2014 "),WN=a("a"),U0o=o("QDQBertForMultipleChoice"),J0o=o(" (QDQBert model)"),Y0o=l(),c1=a("li"),bne=a("strong"),K0o=o("rembert"),Z0o=o(" \u2014 "),QN=a("a"),eLo=o("RemBertForMultipleChoice"),oLo=o(" (RemBERT model)"),rLo=l(),f1=a("li"),vne=a("strong"),tLo=o("roberta"),aLo=o(" \u2014 "),HN=a("a"),nLo=o("RobertaForMultipleChoice"),sLo=o(" (RoBERTa model)"),lLo=l(),m1=a("li"),Tne=a("strong"),iLo=o("roformer"),dLo=o(" \u2014 "),UN=a("a"),cLo=o("RoFormerForMultipleChoice"),fLo=o(" (RoFormer model)"),mLo=l(),g1=a("li"),Fne=a("strong"),gLo=o("squeezebert"),hLo=o(" \u2014 "),JN=a("a"),pLo=o("SqueezeBertForMultipleChoice"),_Lo=o(" (SqueezeBERT model)"),uLo=l(),h1=a("li"),Cne=a("strong"),bLo=o("xlm"),vLo=o(" \u2014 "),YN=a("a"),TLo=o("XLMForMultipleChoice"),FLo=o(" (XLM model)"),CLo=l(),p1=a("li"),Mne=a("strong"),MLo=o("xlm-roberta"),ELo=o(" \u2014 "),KN=a("a"),yLo=o("XLMRobertaForMultipleChoice"),wLo=o(" (XLM-RoBERTa model)"),ALo=l(),_1=a("li"),Ene=a("strong"),LLo=o("xlm-roberta-xl"),BLo=o(" \u2014 "),ZN=a("a"),xLo=o("XLMRobertaXLForMultipleChoice"),kLo=o(" (XLM-RoBERTa-XL model)"),RLo=l(),u1=a("li"),yne=a("strong"),SLo=o("xlnet"),PLo=o(" \u2014 "),ej=a("a"),$Lo=o("XLNetForMultipleChoice"),ILo=o(" (XLNet model)"),NLo=l(),b1=a("li"),wne=a("strong"),jLo=o("yoso"),DLo=o(" \u2014 "),oj=a("a"),qLo=o("YosoForMultipleChoice"),GLo=o(" (YOSO model)"),OLo=l(),v1=a("p"),XLo=o("The model is set in evaluation mode by default using "),Ane=a("code"),VLo=o("model.eval()"),zLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lne=a("code"),WLo=o("model.train()"),QLo=l(),Bne=a("p"),HLo=o("Examples:"),ULo=l(),f(Sy.$$.fragment),Ake=l(),bd=a("h2"),T1=a("a"),xne=a("span"),f(Py.$$.fragment),JLo=l(),kne=a("span"),YLo=o("AutoModelForNextSentencePrediction"),Lke=l(),tr=a("div"),f($y.$$.fragment),KLo=l(),vd=a("p"),ZLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Rne=a("code"),e8o=o("from_pretrained()"),o8o=o("class method or the "),Sne=a("code"),r8o=o("from_config()"),t8o=o(`class
method.`),a8o=l(),Iy=a("p"),n8o=o("This class cannot be instantiated directly using "),Pne=a("code"),s8o=o("__init__()"),l8o=o(" (throws an error)."),i8o=l(),Yr=a("div"),f(Ny.$$.fragment),d8o=l(),$ne=a("p"),c8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f8o=l(),Td=a("p"),m8o=o(`Note:
Loading a model from its configuration file does `),Ine=a("strong"),g8o=o("not"),h8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nne=a("code"),p8o=o("from_pretrained()"),_8o=o("to load the model weights."),u8o=l(),jne=a("p"),b8o=o("Examples:"),v8o=l(),f(jy.$$.fragment),T8o=l(),ze=a("div"),f(Dy.$$.fragment),F8o=l(),Dne=a("p"),C8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M8o=l(),Ya=a("p"),E8o=o("The model class to instantiate is selected based on the "),qne=a("code"),y8o=o("model_type"),w8o=o(` property of the config object (either
passed as an argument or loaded from `),Gne=a("code"),A8o=o("pretrained_model_name_or_path"),L8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),One=a("code"),B8o=o("pretrained_model_name_or_path"),x8o=o(":"),k8o=l(),da=a("ul"),F1=a("li"),Xne=a("strong"),R8o=o("bert"),S8o=o(" \u2014 "),rj=a("a"),P8o=o("BertForNextSentencePrediction"),$8o=o(" (BERT model)"),I8o=l(),C1=a("li"),Vne=a("strong"),N8o=o("fnet"),j8o=o(" \u2014 "),tj=a("a"),D8o=o("FNetForNextSentencePrediction"),q8o=o(" (FNet model)"),G8o=l(),M1=a("li"),zne=a("strong"),O8o=o("megatron-bert"),X8o=o(" \u2014 "),aj=a("a"),V8o=o("MegatronBertForNextSentencePrediction"),z8o=o(" (MegatronBert model)"),W8o=l(),E1=a("li"),Wne=a("strong"),Q8o=o("mobilebert"),H8o=o(" \u2014 "),nj=a("a"),U8o=o("MobileBertForNextSentencePrediction"),J8o=o(" (MobileBERT model)"),Y8o=l(),y1=a("li"),Qne=a("strong"),K8o=o("qdqbert"),Z8o=o(" \u2014 "),sj=a("a"),e7o=o("QDQBertForNextSentencePrediction"),o7o=o(" (QDQBert model)"),r7o=l(),w1=a("p"),t7o=o("The model is set in evaluation mode by default using "),Hne=a("code"),a7o=o("model.eval()"),n7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=a("code"),s7o=o("model.train()"),l7o=l(),Jne=a("p"),i7o=o("Examples:"),d7o=l(),f(qy.$$.fragment),Bke=l(),Fd=a("h2"),A1=a("a"),Yne=a("span"),f(Gy.$$.fragment),c7o=l(),Kne=a("span"),f7o=o("AutoModelForTokenClassification"),xke=l(),ar=a("div"),f(Oy.$$.fragment),m7o=l(),Cd=a("p"),g7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zne=a("code"),h7o=o("from_pretrained()"),p7o=o("class method or the "),ese=a("code"),_7o=o("from_config()"),u7o=o(`class
method.`),b7o=l(),Xy=a("p"),v7o=o("This class cannot be instantiated directly using "),ose=a("code"),T7o=o("__init__()"),F7o=o(" (throws an error)."),C7o=l(),Kr=a("div"),f(Vy.$$.fragment),M7o=l(),rse=a("p"),E7o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y7o=l(),Md=a("p"),w7o=o(`Note:
Loading a model from its configuration file does `),tse=a("strong"),A7o=o("not"),L7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ase=a("code"),B7o=o("from_pretrained()"),x7o=o("to load the model weights."),k7o=l(),nse=a("p"),R7o=o("Examples:"),S7o=l(),f(zy.$$.fragment),P7o=l(),We=a("div"),f(Wy.$$.fragment),$7o=l(),sse=a("p"),I7o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N7o=l(),Ka=a("p"),j7o=o("The model class to instantiate is selected based on the "),lse=a("code"),D7o=o("model_type"),q7o=o(` property of the config object (either
passed as an argument or loaded from `),ise=a("code"),G7o=o("pretrained_model_name_or_path"),O7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=a("code"),X7o=o("pretrained_model_name_or_path"),V7o=o(":"),z7o=l(),D=a("ul"),L1=a("li"),cse=a("strong"),W7o=o("albert"),Q7o=o(" \u2014 "),lj=a("a"),H7o=o("AlbertForTokenClassification"),U7o=o(" (ALBERT model)"),J7o=l(),B1=a("li"),fse=a("strong"),Y7o=o("bert"),K7o=o(" \u2014 "),ij=a("a"),Z7o=o("BertForTokenClassification"),e9o=o(" (BERT model)"),o9o=l(),x1=a("li"),mse=a("strong"),r9o=o("big_bird"),t9o=o(" \u2014 "),dj=a("a"),a9o=o("BigBirdForTokenClassification"),n9o=o(" (BigBird model)"),s9o=l(),k1=a("li"),gse=a("strong"),l9o=o("camembert"),i9o=o(" \u2014 "),cj=a("a"),d9o=o("CamembertForTokenClassification"),c9o=o(" (CamemBERT model)"),f9o=l(),R1=a("li"),hse=a("strong"),m9o=o("canine"),g9o=o(" \u2014 "),fj=a("a"),h9o=o("CanineForTokenClassification"),p9o=o(" (Canine model)"),_9o=l(),S1=a("li"),pse=a("strong"),u9o=o("convbert"),b9o=o(" \u2014 "),mj=a("a"),v9o=o("ConvBertForTokenClassification"),T9o=o(" (ConvBERT model)"),F9o=l(),P1=a("li"),_se=a("strong"),C9o=o("data2vec-text"),M9o=o(" \u2014 "),gj=a("a"),E9o=o("Data2VecTextForTokenClassification"),y9o=o(" (Data2VecText model)"),w9o=l(),$1=a("li"),use=a("strong"),A9o=o("deberta"),L9o=o(" \u2014 "),hj=a("a"),B9o=o("DebertaForTokenClassification"),x9o=o(" (DeBERTa model)"),k9o=l(),I1=a("li"),bse=a("strong"),R9o=o("deberta-v2"),S9o=o(" \u2014 "),pj=a("a"),P9o=o("DebertaV2ForTokenClassification"),$9o=o(" (DeBERTa-v2 model)"),I9o=l(),N1=a("li"),vse=a("strong"),N9o=o("distilbert"),j9o=o(" \u2014 "),_j=a("a"),D9o=o("DistilBertForTokenClassification"),q9o=o(" (DistilBERT model)"),G9o=l(),j1=a("li"),Tse=a("strong"),O9o=o("electra"),X9o=o(" \u2014 "),uj=a("a"),V9o=o("ElectraForTokenClassification"),z9o=o(" (ELECTRA model)"),W9o=l(),D1=a("li"),Fse=a("strong"),Q9o=o("flaubert"),H9o=o(" \u2014 "),bj=a("a"),U9o=o("FlaubertForTokenClassification"),J9o=o(" (FlauBERT model)"),Y9o=l(),q1=a("li"),Cse=a("strong"),K9o=o("fnet"),Z9o=o(" \u2014 "),vj=a("a"),eBo=o("FNetForTokenClassification"),oBo=o(" (FNet model)"),rBo=l(),G1=a("li"),Mse=a("strong"),tBo=o("funnel"),aBo=o(" \u2014 "),Tj=a("a"),nBo=o("FunnelForTokenClassification"),sBo=o(" (Funnel Transformer model)"),lBo=l(),O1=a("li"),Ese=a("strong"),iBo=o("gpt2"),dBo=o(" \u2014 "),Fj=a("a"),cBo=o("GPT2ForTokenClassification"),fBo=o(" (OpenAI GPT-2 model)"),mBo=l(),X1=a("li"),yse=a("strong"),gBo=o("ibert"),hBo=o(" \u2014 "),Cj=a("a"),pBo=o("IBertForTokenClassification"),_Bo=o(" (I-BERT model)"),uBo=l(),V1=a("li"),wse=a("strong"),bBo=o("layoutlm"),vBo=o(" \u2014 "),Mj=a("a"),TBo=o("LayoutLMForTokenClassification"),FBo=o(" (LayoutLM model)"),CBo=l(),z1=a("li"),Ase=a("strong"),MBo=o("layoutlmv2"),EBo=o(" \u2014 "),Ej=a("a"),yBo=o("LayoutLMv2ForTokenClassification"),wBo=o(" (LayoutLMv2 model)"),ABo=l(),W1=a("li"),Lse=a("strong"),LBo=o("longformer"),BBo=o(" \u2014 "),yj=a("a"),xBo=o("LongformerForTokenClassification"),kBo=o(" (Longformer model)"),RBo=l(),Q1=a("li"),Bse=a("strong"),SBo=o("megatron-bert"),PBo=o(" \u2014 "),wj=a("a"),$Bo=o("MegatronBertForTokenClassification"),IBo=o(" (MegatronBert model)"),NBo=l(),H1=a("li"),xse=a("strong"),jBo=o("mobilebert"),DBo=o(" \u2014 "),Aj=a("a"),qBo=o("MobileBertForTokenClassification"),GBo=o(" (MobileBERT model)"),OBo=l(),U1=a("li"),kse=a("strong"),XBo=o("mpnet"),VBo=o(" \u2014 "),Lj=a("a"),zBo=o("MPNetForTokenClassification"),WBo=o(" (MPNet model)"),QBo=l(),J1=a("li"),Rse=a("strong"),HBo=o("nystromformer"),UBo=o(" \u2014 "),Bj=a("a"),JBo=o("NystromformerForTokenClassification"),YBo=o(" (Nystromformer model)"),KBo=l(),Y1=a("li"),Sse=a("strong"),ZBo=o("qdqbert"),exo=o(" \u2014 "),xj=a("a"),oxo=o("QDQBertForTokenClassification"),rxo=o(" (QDQBert model)"),txo=l(),K1=a("li"),Pse=a("strong"),axo=o("rembert"),nxo=o(" \u2014 "),kj=a("a"),sxo=o("RemBertForTokenClassification"),lxo=o(" (RemBERT model)"),ixo=l(),Z1=a("li"),$se=a("strong"),dxo=o("roberta"),cxo=o(" \u2014 "),Rj=a("a"),fxo=o("RobertaForTokenClassification"),mxo=o(" (RoBERTa model)"),gxo=l(),eb=a("li"),Ise=a("strong"),hxo=o("roformer"),pxo=o(" \u2014 "),Sj=a("a"),_xo=o("RoFormerForTokenClassification"),uxo=o(" (RoFormer model)"),bxo=l(),ob=a("li"),Nse=a("strong"),vxo=o("squeezebert"),Txo=o(" \u2014 "),Pj=a("a"),Fxo=o("SqueezeBertForTokenClassification"),Cxo=o(" (SqueezeBERT model)"),Mxo=l(),rb=a("li"),jse=a("strong"),Exo=o("xlm"),yxo=o(" \u2014 "),$j=a("a"),wxo=o("XLMForTokenClassification"),Axo=o(" (XLM model)"),Lxo=l(),tb=a("li"),Dse=a("strong"),Bxo=o("xlm-roberta"),xxo=o(" \u2014 "),Ij=a("a"),kxo=o("XLMRobertaForTokenClassification"),Rxo=o(" (XLM-RoBERTa model)"),Sxo=l(),ab=a("li"),qse=a("strong"),Pxo=o("xlm-roberta-xl"),$xo=o(" \u2014 "),Nj=a("a"),Ixo=o("XLMRobertaXLForTokenClassification"),Nxo=o(" (XLM-RoBERTa-XL model)"),jxo=l(),nb=a("li"),Gse=a("strong"),Dxo=o("xlnet"),qxo=o(" \u2014 "),jj=a("a"),Gxo=o("XLNetForTokenClassification"),Oxo=o(" (XLNet model)"),Xxo=l(),sb=a("li"),Ose=a("strong"),Vxo=o("yoso"),zxo=o(" \u2014 "),Dj=a("a"),Wxo=o("YosoForTokenClassification"),Qxo=o(" (YOSO model)"),Hxo=l(),lb=a("p"),Uxo=o("The model is set in evaluation mode by default using "),Xse=a("code"),Jxo=o("model.eval()"),Yxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=a("code"),Kxo=o("model.train()"),Zxo=l(),zse=a("p"),eko=o("Examples:"),oko=l(),f(Qy.$$.fragment),kke=l(),Ed=a("h2"),ib=a("a"),Wse=a("span"),f(Hy.$$.fragment),rko=l(),Qse=a("span"),tko=o("AutoModelForQuestionAnswering"),Rke=l(),nr=a("div"),f(Uy.$$.fragment),ako=l(),yd=a("p"),nko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hse=a("code"),sko=o("from_pretrained()"),lko=o("class method or the "),Use=a("code"),iko=o("from_config()"),dko=o(`class
method.`),cko=l(),Jy=a("p"),fko=o("This class cannot be instantiated directly using "),Jse=a("code"),mko=o("__init__()"),gko=o(" (throws an error)."),hko=l(),Zr=a("div"),f(Yy.$$.fragment),pko=l(),Yse=a("p"),_ko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uko=l(),wd=a("p"),bko=o(`Note:
Loading a model from its configuration file does `),Kse=a("strong"),vko=o("not"),Tko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zse=a("code"),Fko=o("from_pretrained()"),Cko=o("to load the model weights."),Mko=l(),ele=a("p"),Eko=o("Examples:"),yko=l(),f(Ky.$$.fragment),wko=l(),Qe=a("div"),f(Zy.$$.fragment),Ako=l(),ole=a("p"),Lko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bko=l(),Za=a("p"),xko=o("The model class to instantiate is selected based on the "),rle=a("code"),kko=o("model_type"),Rko=o(` property of the config object (either
passed as an argument or loaded from `),tle=a("code"),Sko=o("pretrained_model_name_or_path"),Pko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=a("code"),$ko=o("pretrained_model_name_or_path"),Iko=o(":"),Nko=l(),R=a("ul"),db=a("li"),nle=a("strong"),jko=o("albert"),Dko=o(" \u2014 "),qj=a("a"),qko=o("AlbertForQuestionAnswering"),Gko=o(" (ALBERT model)"),Oko=l(),cb=a("li"),sle=a("strong"),Xko=o("bart"),Vko=o(" \u2014 "),Gj=a("a"),zko=o("BartForQuestionAnswering"),Wko=o(" (BART model)"),Qko=l(),fb=a("li"),lle=a("strong"),Hko=o("bert"),Uko=o(" \u2014 "),Oj=a("a"),Jko=o("BertForQuestionAnswering"),Yko=o(" (BERT model)"),Kko=l(),mb=a("li"),ile=a("strong"),Zko=o("big_bird"),eRo=o(" \u2014 "),Xj=a("a"),oRo=o("BigBirdForQuestionAnswering"),rRo=o(" (BigBird model)"),tRo=l(),gb=a("li"),dle=a("strong"),aRo=o("bigbird_pegasus"),nRo=o(" \u2014 "),Vj=a("a"),sRo=o("BigBirdPegasusForQuestionAnswering"),lRo=o(" (BigBirdPegasus model)"),iRo=l(),hb=a("li"),cle=a("strong"),dRo=o("camembert"),cRo=o(" \u2014 "),zj=a("a"),fRo=o("CamembertForQuestionAnswering"),mRo=o(" (CamemBERT model)"),gRo=l(),pb=a("li"),fle=a("strong"),hRo=o("canine"),pRo=o(" \u2014 "),Wj=a("a"),_Ro=o("CanineForQuestionAnswering"),uRo=o(" (Canine model)"),bRo=l(),_b=a("li"),mle=a("strong"),vRo=o("convbert"),TRo=o(" \u2014 "),Qj=a("a"),FRo=o("ConvBertForQuestionAnswering"),CRo=o(" (ConvBERT model)"),MRo=l(),ub=a("li"),gle=a("strong"),ERo=o("data2vec-text"),yRo=o(" \u2014 "),Hj=a("a"),wRo=o("Data2VecTextForQuestionAnswering"),ARo=o(" (Data2VecText model)"),LRo=l(),bb=a("li"),hle=a("strong"),BRo=o("deberta"),xRo=o(" \u2014 "),Uj=a("a"),kRo=o("DebertaForQuestionAnswering"),RRo=o(" (DeBERTa model)"),SRo=l(),vb=a("li"),ple=a("strong"),PRo=o("deberta-v2"),$Ro=o(" \u2014 "),Jj=a("a"),IRo=o("DebertaV2ForQuestionAnswering"),NRo=o(" (DeBERTa-v2 model)"),jRo=l(),Tb=a("li"),_le=a("strong"),DRo=o("distilbert"),qRo=o(" \u2014 "),Yj=a("a"),GRo=o("DistilBertForQuestionAnswering"),ORo=o(" (DistilBERT model)"),XRo=l(),Fb=a("li"),ule=a("strong"),VRo=o("electra"),zRo=o(" \u2014 "),Kj=a("a"),WRo=o("ElectraForQuestionAnswering"),QRo=o(" (ELECTRA model)"),HRo=l(),Cb=a("li"),ble=a("strong"),URo=o("flaubert"),JRo=o(" \u2014 "),Zj=a("a"),YRo=o("FlaubertForQuestionAnsweringSimple"),KRo=o(" (FlauBERT model)"),ZRo=l(),Mb=a("li"),vle=a("strong"),eSo=o("fnet"),oSo=o(" \u2014 "),eD=a("a"),rSo=o("FNetForQuestionAnswering"),tSo=o(" (FNet model)"),aSo=l(),Eb=a("li"),Tle=a("strong"),nSo=o("funnel"),sSo=o(" \u2014 "),oD=a("a"),lSo=o("FunnelForQuestionAnswering"),iSo=o(" (Funnel Transformer model)"),dSo=l(),yb=a("li"),Fle=a("strong"),cSo=o("gptj"),fSo=o(" \u2014 "),rD=a("a"),mSo=o("GPTJForQuestionAnswering"),gSo=o(" (GPT-J model)"),hSo=l(),wb=a("li"),Cle=a("strong"),pSo=o("ibert"),_So=o(" \u2014 "),tD=a("a"),uSo=o("IBertForQuestionAnswering"),bSo=o(" (I-BERT model)"),vSo=l(),Ab=a("li"),Mle=a("strong"),TSo=o("layoutlmv2"),FSo=o(" \u2014 "),aD=a("a"),CSo=o("LayoutLMv2ForQuestionAnswering"),MSo=o(" (LayoutLMv2 model)"),ESo=l(),Lb=a("li"),Ele=a("strong"),ySo=o("led"),wSo=o(" \u2014 "),nD=a("a"),ASo=o("LEDForQuestionAnswering"),LSo=o(" (LED model)"),BSo=l(),Bb=a("li"),yle=a("strong"),xSo=o("longformer"),kSo=o(" \u2014 "),sD=a("a"),RSo=o("LongformerForQuestionAnswering"),SSo=o(" (Longformer model)"),PSo=l(),xb=a("li"),wle=a("strong"),$So=o("lxmert"),ISo=o(" \u2014 "),lD=a("a"),NSo=o("LxmertForQuestionAnswering"),jSo=o(" (LXMERT model)"),DSo=l(),kb=a("li"),Ale=a("strong"),qSo=o("mbart"),GSo=o(" \u2014 "),iD=a("a"),OSo=o("MBartForQuestionAnswering"),XSo=o(" (mBART model)"),VSo=l(),Rb=a("li"),Lle=a("strong"),zSo=o("megatron-bert"),WSo=o(" \u2014 "),dD=a("a"),QSo=o("MegatronBertForQuestionAnswering"),HSo=o(" (MegatronBert model)"),USo=l(),Sb=a("li"),Ble=a("strong"),JSo=o("mobilebert"),YSo=o(" \u2014 "),cD=a("a"),KSo=o("MobileBertForQuestionAnswering"),ZSo=o(" (MobileBERT model)"),ePo=l(),Pb=a("li"),xle=a("strong"),oPo=o("mpnet"),rPo=o(" \u2014 "),fD=a("a"),tPo=o("MPNetForQuestionAnswering"),aPo=o(" (MPNet model)"),nPo=l(),$b=a("li"),kle=a("strong"),sPo=o("nystromformer"),lPo=o(" \u2014 "),mD=a("a"),iPo=o("NystromformerForQuestionAnswering"),dPo=o(" (Nystromformer model)"),cPo=l(),Ib=a("li"),Rle=a("strong"),fPo=o("qdqbert"),mPo=o(" \u2014 "),gD=a("a"),gPo=o("QDQBertForQuestionAnswering"),hPo=o(" (QDQBert model)"),pPo=l(),Nb=a("li"),Sle=a("strong"),_Po=o("reformer"),uPo=o(" \u2014 "),hD=a("a"),bPo=o("ReformerForQuestionAnswering"),vPo=o(" (Reformer model)"),TPo=l(),jb=a("li"),Ple=a("strong"),FPo=o("rembert"),CPo=o(" \u2014 "),pD=a("a"),MPo=o("RemBertForQuestionAnswering"),EPo=o(" (RemBERT model)"),yPo=l(),Db=a("li"),$le=a("strong"),wPo=o("roberta"),APo=o(" \u2014 "),_D=a("a"),LPo=o("RobertaForQuestionAnswering"),BPo=o(" (RoBERTa model)"),xPo=l(),qb=a("li"),Ile=a("strong"),kPo=o("roformer"),RPo=o(" \u2014 "),uD=a("a"),SPo=o("RoFormerForQuestionAnswering"),PPo=o(" (RoFormer model)"),$Po=l(),Gb=a("li"),Nle=a("strong"),IPo=o("splinter"),NPo=o(" \u2014 "),bD=a("a"),jPo=o("SplinterForQuestionAnswering"),DPo=o(" (Splinter model)"),qPo=l(),Ob=a("li"),jle=a("strong"),GPo=o("squeezebert"),OPo=o(" \u2014 "),vD=a("a"),XPo=o("SqueezeBertForQuestionAnswering"),VPo=o(" (SqueezeBERT model)"),zPo=l(),Xb=a("li"),Dle=a("strong"),WPo=o("xlm"),QPo=o(" \u2014 "),TD=a("a"),HPo=o("XLMForQuestionAnsweringSimple"),UPo=o(" (XLM model)"),JPo=l(),Vb=a("li"),qle=a("strong"),YPo=o("xlm-roberta"),KPo=o(" \u2014 "),FD=a("a"),ZPo=o("XLMRobertaForQuestionAnswering"),e$o=o(" (XLM-RoBERTa model)"),o$o=l(),zb=a("li"),Gle=a("strong"),r$o=o("xlm-roberta-xl"),t$o=o(" \u2014 "),CD=a("a"),a$o=o("XLMRobertaXLForQuestionAnswering"),n$o=o(" (XLM-RoBERTa-XL model)"),s$o=l(),Wb=a("li"),Ole=a("strong"),l$o=o("xlnet"),i$o=o(" \u2014 "),MD=a("a"),d$o=o("XLNetForQuestionAnsweringSimple"),c$o=o(" (XLNet model)"),f$o=l(),Qb=a("li"),Xle=a("strong"),m$o=o("yoso"),g$o=o(" \u2014 "),ED=a("a"),h$o=o("YosoForQuestionAnswering"),p$o=o(" (YOSO model)"),_$o=l(),Hb=a("p"),u$o=o("The model is set in evaluation mode by default using "),Vle=a("code"),b$o=o("model.eval()"),v$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zle=a("code"),T$o=o("model.train()"),F$o=l(),Wle=a("p"),C$o=o("Examples:"),M$o=l(),f(ew.$$.fragment),Ske=l(),Ad=a("h2"),Ub=a("a"),Qle=a("span"),f(ow.$$.fragment),E$o=l(),Hle=a("span"),y$o=o("AutoModelForTableQuestionAnswering"),Pke=l(),sr=a("div"),f(rw.$$.fragment),w$o=l(),Ld=a("p"),A$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Ule=a("code"),L$o=o("from_pretrained()"),B$o=o("class method or the "),Jle=a("code"),x$o=o("from_config()"),k$o=o(`class
method.`),R$o=l(),tw=a("p"),S$o=o("This class cannot be instantiated directly using "),Yle=a("code"),P$o=o("__init__()"),$$o=o(" (throws an error)."),I$o=l(),et=a("div"),f(aw.$$.fragment),N$o=l(),Kle=a("p"),j$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D$o=l(),Bd=a("p"),q$o=o(`Note:
Loading a model from its configuration file does `),Zle=a("strong"),G$o=o("not"),O$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eie=a("code"),X$o=o("from_pretrained()"),V$o=o("to load the model weights."),z$o=l(),oie=a("p"),W$o=o("Examples:"),Q$o=l(),f(nw.$$.fragment),H$o=l(),He=a("div"),f(sw.$$.fragment),U$o=l(),rie=a("p"),J$o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Y$o=l(),en=a("p"),K$o=o("The model class to instantiate is selected based on the "),tie=a("code"),Z$o=o("model_type"),eIo=o(` property of the config object (either
passed as an argument or loaded from `),aie=a("code"),oIo=o("pretrained_model_name_or_path"),rIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nie=a("code"),tIo=o("pretrained_model_name_or_path"),aIo=o(":"),nIo=l(),sie=a("ul"),Jb=a("li"),lie=a("strong"),sIo=o("tapas"),lIo=o(" \u2014 "),yD=a("a"),iIo=o("TapasForQuestionAnswering"),dIo=o(" (TAPAS model)"),cIo=l(),Yb=a("p"),fIo=o("The model is set in evaluation mode by default using "),iie=a("code"),mIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=a("code"),hIo=o("model.train()"),pIo=l(),cie=a("p"),_Io=o("Examples:"),uIo=l(),f(lw.$$.fragment),$ke=l(),xd=a("h2"),Kb=a("a"),fie=a("span"),f(iw.$$.fragment),bIo=l(),mie=a("span"),vIo=o("AutoModelForImageClassification"),Ike=l(),lr=a("div"),f(dw.$$.fragment),TIo=l(),kd=a("p"),FIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gie=a("code"),CIo=o("from_pretrained()"),MIo=o("class method or the "),hie=a("code"),EIo=o("from_config()"),yIo=o(`class
method.`),wIo=l(),cw=a("p"),AIo=o("This class cannot be instantiated directly using "),pie=a("code"),LIo=o("__init__()"),BIo=o(" (throws an error)."),xIo=l(),ot=a("div"),f(fw.$$.fragment),kIo=l(),_ie=a("p"),RIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SIo=l(),Rd=a("p"),PIo=o(`Note:
Loading a model from its configuration file does `),uie=a("strong"),$Io=o("not"),IIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bie=a("code"),NIo=o("from_pretrained()"),jIo=o("to load the model weights."),DIo=l(),vie=a("p"),qIo=o("Examples:"),GIo=l(),f(mw.$$.fragment),OIo=l(),Ue=a("div"),f(gw.$$.fragment),XIo=l(),Tie=a("p"),VIo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zIo=l(),on=a("p"),WIo=o("The model class to instantiate is selected based on the "),Fie=a("code"),QIo=o("model_type"),HIo=o(` property of the config object (either
passed as an argument or loaded from `),Cie=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(":"),ZIo=l(),me=a("ul"),Zb=a("li"),Eie=a("strong"),eNo=o("beit"),oNo=o(" \u2014 "),wD=a("a"),rNo=o("BeitForImageClassification"),tNo=o(" (BEiT model)"),aNo=l(),ev=a("li"),yie=a("strong"),nNo=o("convnext"),sNo=o(" \u2014 "),AD=a("a"),lNo=o("ConvNextForImageClassification"),iNo=o(" (ConvNext model)"),dNo=l(),qs=a("li"),wie=a("strong"),cNo=o("deit"),fNo=o(" \u2014 "),LD=a("a"),mNo=o("DeiTForImageClassification"),gNo=o(" or "),BD=a("a"),hNo=o("DeiTForImageClassificationWithTeacher"),pNo=o(" (DeiT model)"),_No=l(),ov=a("li"),Aie=a("strong"),uNo=o("imagegpt"),bNo=o(" \u2014 "),xD=a("a"),vNo=o("ImageGPTForImageClassification"),TNo=o(" (ImageGPT model)"),FNo=l(),ma=a("li"),Lie=a("strong"),CNo=o("perceiver"),MNo=o(" \u2014 "),kD=a("a"),ENo=o("PerceiverForImageClassificationLearned"),yNo=o(" or "),RD=a("a"),wNo=o("PerceiverForImageClassificationFourier"),ANo=o(" or "),SD=a("a"),LNo=o("PerceiverForImageClassificationConvProcessing"),BNo=o(" (Perceiver model)"),xNo=l(),rv=a("li"),Bie=a("strong"),kNo=o("poolformer"),RNo=o(" \u2014 "),PD=a("a"),SNo=o("PoolFormerForImageClassification"),PNo=o(" (PoolFormer model)"),$No=l(),tv=a("li"),xie=a("strong"),INo=o("resnet"),NNo=o(" \u2014 "),$D=a("a"),jNo=o("ResNetForImageClassification"),DNo=o(" (ResNet model)"),qNo=l(),av=a("li"),kie=a("strong"),GNo=o("segformer"),ONo=o(" \u2014 "),ID=a("a"),XNo=o("SegformerForImageClassification"),VNo=o(" (SegFormer model)"),zNo=l(),nv=a("li"),Rie=a("strong"),WNo=o("swin"),QNo=o(" \u2014 "),ND=a("a"),HNo=o("SwinForImageClassification"),UNo=o(" (Swin model)"),JNo=l(),sv=a("li"),Sie=a("strong"),YNo=o("van"),KNo=o(" \u2014 "),jD=a("a"),ZNo=o("VanForImageClassification"),ejo=o(" (VAN model)"),ojo=l(),lv=a("li"),Pie=a("strong"),rjo=o("vit"),tjo=o(" \u2014 "),DD=a("a"),ajo=o("ViTForImageClassification"),njo=o(" (ViT model)"),sjo=l(),iv=a("p"),ljo=o("The model is set in evaluation mode by default using "),$ie=a("code"),ijo=o("model.eval()"),djo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iie=a("code"),cjo=o("model.train()"),fjo=l(),Nie=a("p"),mjo=o("Examples:"),gjo=l(),f(hw.$$.fragment),Nke=l(),Sd=a("h2"),dv=a("a"),jie=a("span"),f(pw.$$.fragment),hjo=l(),Die=a("span"),pjo=o("AutoModelForVision2Seq"),jke=l(),ir=a("div"),f(_w.$$.fragment),_jo=l(),Pd=a("p"),ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qie=a("code"),bjo=o("from_pretrained()"),vjo=o("class method or the "),Gie=a("code"),Tjo=o("from_config()"),Fjo=o(`class
method.`),Cjo=l(),uw=a("p"),Mjo=o("This class cannot be instantiated directly using "),Oie=a("code"),Ejo=o("__init__()"),yjo=o(" (throws an error)."),wjo=l(),rt=a("div"),f(bw.$$.fragment),Ajo=l(),Xie=a("p"),Ljo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bjo=l(),$d=a("p"),xjo=o(`Note:
Loading a model from its configuration file does `),Vie=a("strong"),kjo=o("not"),Rjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zie=a("code"),Sjo=o("from_pretrained()"),Pjo=o("to load the model weights."),$jo=l(),Wie=a("p"),Ijo=o("Examples:"),Njo=l(),f(vw.$$.fragment),jjo=l(),Je=a("div"),f(Tw.$$.fragment),Djo=l(),Qie=a("p"),qjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Gjo=l(),rn=a("p"),Ojo=o("The model class to instantiate is selected based on the "),Hie=a("code"),Xjo=o("model_type"),Vjo=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),zjo=o("pretrained_model_name_or_path"),Wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),Qjo=o("pretrained_model_name_or_path"),Hjo=o(":"),Ujo=l(),Yie=a("ul"),cv=a("li"),Kie=a("strong"),Jjo=o("vision-encoder-decoder"),Yjo=o(" \u2014 "),qD=a("a"),Kjo=o("VisionEncoderDecoderModel"),Zjo=o(" (Vision Encoder decoder model)"),eDo=l(),fv=a("p"),oDo=o("The model is set in evaluation mode by default using "),Zie=a("code"),rDo=o("model.eval()"),tDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=a("code"),aDo=o("model.train()"),nDo=l(),ode=a("p"),sDo=o("Examples:"),lDo=l(),f(Fw.$$.fragment),Dke=l(),Id=a("h2"),mv=a("a"),rde=a("span"),f(Cw.$$.fragment),iDo=l(),tde=a("span"),dDo=o("AutoModelForAudioClassification"),qke=l(),dr=a("div"),f(Mw.$$.fragment),cDo=l(),Nd=a("p"),fDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ade=a("code"),mDo=o("from_pretrained()"),gDo=o("class method or the "),nde=a("code"),hDo=o("from_config()"),pDo=o(`class
method.`),_Do=l(),Ew=a("p"),uDo=o("This class cannot be instantiated directly using "),sde=a("code"),bDo=o("__init__()"),vDo=o(" (throws an error)."),TDo=l(),tt=a("div"),f(yw.$$.fragment),FDo=l(),lde=a("p"),CDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),MDo=l(),jd=a("p"),EDo=o(`Note:
Loading a model from its configuration file does `),ide=a("strong"),yDo=o("not"),wDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dde=a("code"),ADo=o("from_pretrained()"),LDo=o("to load the model weights."),BDo=l(),cde=a("p"),xDo=o("Examples:"),kDo=l(),f(ww.$$.fragment),RDo=l(),Ye=a("div"),f(Aw.$$.fragment),SDo=l(),fde=a("p"),PDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),$Do=l(),tn=a("p"),IDo=o("The model class to instantiate is selected based on the "),mde=a("code"),NDo=o("model_type"),jDo=o(` property of the config object (either
passed as an argument or loaded from `),gde=a("code"),DDo=o("pretrained_model_name_or_path"),qDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(":"),XDo=l(),ke=a("ul"),gv=a("li"),pde=a("strong"),VDo=o("data2vec-audio"),zDo=o(" \u2014 "),GD=a("a"),WDo=o("Data2VecAudioForSequenceClassification"),QDo=o(" (Data2VecAudio model)"),HDo=l(),hv=a("li"),_de=a("strong"),UDo=o("hubert"),JDo=o(" \u2014 "),OD=a("a"),YDo=o("HubertForSequenceClassification"),KDo=o(" (Hubert model)"),ZDo=l(),pv=a("li"),ude=a("strong"),eqo=o("sew"),oqo=o(" \u2014 "),XD=a("a"),rqo=o("SEWForSequenceClassification"),tqo=o(" (SEW model)"),aqo=l(),_v=a("li"),bde=a("strong"),nqo=o("sew-d"),sqo=o(" \u2014 "),VD=a("a"),lqo=o("SEWDForSequenceClassification"),iqo=o(" (SEW-D model)"),dqo=l(),uv=a("li"),vde=a("strong"),cqo=o("unispeech"),fqo=o(" \u2014 "),zD=a("a"),mqo=o("UniSpeechForSequenceClassification"),gqo=o(" (UniSpeech model)"),hqo=l(),bv=a("li"),Tde=a("strong"),pqo=o("unispeech-sat"),_qo=o(" \u2014 "),WD=a("a"),uqo=o("UniSpeechSatForSequenceClassification"),bqo=o(" (UniSpeechSat model)"),vqo=l(),vv=a("li"),Fde=a("strong"),Tqo=o("wav2vec2"),Fqo=o(" \u2014 "),QD=a("a"),Cqo=o("Wav2Vec2ForSequenceClassification"),Mqo=o(" (Wav2Vec2 model)"),Eqo=l(),Tv=a("li"),Cde=a("strong"),yqo=o("wavlm"),wqo=o(" \u2014 "),HD=a("a"),Aqo=o("WavLMForSequenceClassification"),Lqo=o(" (WavLM model)"),Bqo=l(),Fv=a("p"),xqo=o("The model is set in evaluation mode by default using "),Mde=a("code"),kqo=o("model.eval()"),Rqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=a("code"),Sqo=o("model.train()"),Pqo=l(),yde=a("p"),$qo=o("Examples:"),Iqo=l(),f(Lw.$$.fragment),Gke=l(),Dd=a("h2"),Cv=a("a"),wde=a("span"),f(Bw.$$.fragment),Nqo=l(),Ade=a("span"),jqo=o("AutoModelForAudioFrameClassification"),Oke=l(),cr=a("div"),f(xw.$$.fragment),Dqo=l(),qd=a("p"),qqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Lde=a("code"),Gqo=o("from_pretrained()"),Oqo=o("class method or the "),Bde=a("code"),Xqo=o("from_config()"),Vqo=o(`class
method.`),zqo=l(),kw=a("p"),Wqo=o("This class cannot be instantiated directly using "),xde=a("code"),Qqo=o("__init__()"),Hqo=o(" (throws an error)."),Uqo=l(),at=a("div"),f(Rw.$$.fragment),Jqo=l(),kde=a("p"),Yqo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Kqo=l(),Gd=a("p"),Zqo=o(`Note:
Loading a model from its configuration file does `),Rde=a("strong"),eGo=o("not"),oGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sde=a("code"),rGo=o("from_pretrained()"),tGo=o("to load the model weights."),aGo=l(),Pde=a("p"),nGo=o("Examples:"),sGo=l(),f(Sw.$$.fragment),lGo=l(),Ke=a("div"),f(Pw.$$.fragment),iGo=l(),$de=a("p"),dGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),cGo=l(),an=a("p"),fGo=o("The model class to instantiate is selected based on the "),Ide=a("code"),mGo=o("model_type"),gGo=o(` property of the config object (either
passed as an argument or loaded from `),Nde=a("code"),hGo=o("pretrained_model_name_or_path"),pGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),_Go=o("pretrained_model_name_or_path"),uGo=o(":"),bGo=l(),nn=a("ul"),Mv=a("li"),Dde=a("strong"),vGo=o("data2vec-audio"),TGo=o(" \u2014 "),UD=a("a"),FGo=o("Data2VecAudioForAudioFrameClassification"),CGo=o(" (Data2VecAudio model)"),MGo=l(),Ev=a("li"),qde=a("strong"),EGo=o("unispeech-sat"),yGo=o(" \u2014 "),JD=a("a"),wGo=o("UniSpeechSatForAudioFrameClassification"),AGo=o(" (UniSpeechSat model)"),LGo=l(),yv=a("li"),Gde=a("strong"),BGo=o("wav2vec2"),xGo=o(" \u2014 "),YD=a("a"),kGo=o("Wav2Vec2ForAudioFrameClassification"),RGo=o(" (Wav2Vec2 model)"),SGo=l(),wv=a("li"),Ode=a("strong"),PGo=o("wavlm"),$Go=o(" \u2014 "),KD=a("a"),IGo=o("WavLMForAudioFrameClassification"),NGo=o(" (WavLM model)"),jGo=l(),Av=a("p"),DGo=o("The model is set in evaluation mode by default using "),Xde=a("code"),qGo=o("model.eval()"),GGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vde=a("code"),OGo=o("model.train()"),XGo=l(),zde=a("p"),VGo=o("Examples:"),zGo=l(),f($w.$$.fragment),Xke=l(),Od=a("h2"),Lv=a("a"),Wde=a("span"),f(Iw.$$.fragment),WGo=l(),Qde=a("span"),QGo=o("AutoModelForCTC"),Vke=l(),fr=a("div"),f(Nw.$$.fragment),HGo=l(),Xd=a("p"),UGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Hde=a("code"),JGo=o("from_pretrained()"),YGo=o("class method or the "),Ude=a("code"),KGo=o("from_config()"),ZGo=o(`class
method.`),eOo=l(),jw=a("p"),oOo=o("This class cannot be instantiated directly using "),Jde=a("code"),rOo=o("__init__()"),tOo=o(" (throws an error)."),aOo=l(),nt=a("div"),f(Dw.$$.fragment),nOo=l(),Yde=a("p"),sOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lOo=l(),Vd=a("p"),iOo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),dOo=o("not"),cOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=a("code"),fOo=o("from_pretrained()"),mOo=o("to load the model weights."),gOo=l(),ece=a("p"),hOo=o("Examples:"),pOo=l(),f(qw.$$.fragment),_Oo=l(),Ze=a("div"),f(Gw.$$.fragment),uOo=l(),oce=a("p"),bOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vOo=l(),sn=a("p"),TOo=o("The model class to instantiate is selected based on the "),rce=a("code"),FOo=o("model_type"),COo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),MOo=o("pretrained_model_name_or_path"),EOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=a("code"),yOo=o("pretrained_model_name_or_path"),wOo=o(":"),AOo=l(),Re=a("ul"),Bv=a("li"),nce=a("strong"),LOo=o("data2vec-audio"),BOo=o(" \u2014 "),ZD=a("a"),xOo=o("Data2VecAudioForCTC"),kOo=o(" (Data2VecAudio model)"),ROo=l(),xv=a("li"),sce=a("strong"),SOo=o("hubert"),POo=o(" \u2014 "),eq=a("a"),$Oo=o("HubertForCTC"),IOo=o(" (Hubert model)"),NOo=l(),kv=a("li"),lce=a("strong"),jOo=o("sew"),DOo=o(" \u2014 "),oq=a("a"),qOo=o("SEWForCTC"),GOo=o(" (SEW model)"),OOo=l(),Rv=a("li"),ice=a("strong"),XOo=o("sew-d"),VOo=o(" \u2014 "),rq=a("a"),zOo=o("SEWDForCTC"),WOo=o(" (SEW-D model)"),QOo=l(),Sv=a("li"),dce=a("strong"),HOo=o("unispeech"),UOo=o(" \u2014 "),tq=a("a"),JOo=o("UniSpeechForCTC"),YOo=o(" (UniSpeech model)"),KOo=l(),Pv=a("li"),cce=a("strong"),ZOo=o("unispeech-sat"),eXo=o(" \u2014 "),aq=a("a"),oXo=o("UniSpeechSatForCTC"),rXo=o(" (UniSpeechSat model)"),tXo=l(),$v=a("li"),fce=a("strong"),aXo=o("wav2vec2"),nXo=o(" \u2014 "),nq=a("a"),sXo=o("Wav2Vec2ForCTC"),lXo=o(" (Wav2Vec2 model)"),iXo=l(),Iv=a("li"),mce=a("strong"),dXo=o("wavlm"),cXo=o(" \u2014 "),sq=a("a"),fXo=o("WavLMForCTC"),mXo=o(" (WavLM model)"),gXo=l(),Nv=a("p"),hXo=o("The model is set in evaluation mode by default using "),gce=a("code"),pXo=o("model.eval()"),_Xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=a("code"),uXo=o("model.train()"),bXo=l(),pce=a("p"),vXo=o("Examples:"),TXo=l(),f(Ow.$$.fragment),zke=l(),zd=a("h2"),jv=a("a"),_ce=a("span"),f(Xw.$$.fragment),FXo=l(),uce=a("span"),CXo=o("AutoModelForSpeechSeq2Seq"),Wke=l(),mr=a("div"),f(Vw.$$.fragment),MXo=l(),Wd=a("p"),EXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bce=a("code"),yXo=o("from_pretrained()"),wXo=o("class method or the "),vce=a("code"),AXo=o("from_config()"),LXo=o(`class
method.`),BXo=l(),zw=a("p"),xXo=o("This class cannot be instantiated directly using "),Tce=a("code"),kXo=o("__init__()"),RXo=o(" (throws an error)."),SXo=l(),st=a("div"),f(Ww.$$.fragment),PXo=l(),Fce=a("p"),$Xo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IXo=l(),Qd=a("p"),NXo=o(`Note:
Loading a model from its configuration file does `),Cce=a("strong"),jXo=o("not"),DXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mce=a("code"),qXo=o("from_pretrained()"),GXo=o("to load the model weights."),OXo=l(),Ece=a("p"),XXo=o("Examples:"),VXo=l(),f(Qw.$$.fragment),zXo=l(),eo=a("div"),f(Hw.$$.fragment),WXo=l(),yce=a("p"),QXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HXo=l(),ln=a("p"),UXo=o("The model class to instantiate is selected based on the "),wce=a("code"),JXo=o("model_type"),YXo=o(` property of the config object (either
passed as an argument or loaded from `),Ace=a("code"),KXo=o("pretrained_model_name_or_path"),ZXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=a("code"),eVo=o("pretrained_model_name_or_path"),oVo=o(":"),rVo=l(),Uw=a("ul"),Dv=a("li"),Bce=a("strong"),tVo=o("speech-encoder-decoder"),aVo=o(" \u2014 "),lq=a("a"),nVo=o("SpeechEncoderDecoderModel"),sVo=o(" (Speech Encoder decoder model)"),lVo=l(),qv=a("li"),xce=a("strong"),iVo=o("speech_to_text"),dVo=o(" \u2014 "),iq=a("a"),cVo=o("Speech2TextForConditionalGeneration"),fVo=o(" (Speech2Text model)"),mVo=l(),Gv=a("p"),gVo=o("The model is set in evaluation mode by default using "),kce=a("code"),hVo=o("model.eval()"),pVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=a("code"),_Vo=o("model.train()"),uVo=l(),Sce=a("p"),bVo=o("Examples:"),vVo=l(),f(Jw.$$.fragment),Qke=l(),Hd=a("h2"),Ov=a("a"),Pce=a("span"),f(Yw.$$.fragment),TVo=l(),$ce=a("span"),FVo=o("AutoModelForAudioXVector"),Hke=l(),gr=a("div"),f(Kw.$$.fragment),CVo=l(),Ud=a("p"),MVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Ice=a("code"),EVo=o("from_pretrained()"),yVo=o("class method or the "),Nce=a("code"),wVo=o("from_config()"),AVo=o(`class
method.`),LVo=l(),Zw=a("p"),BVo=o("This class cannot be instantiated directly using "),jce=a("code"),xVo=o("__init__()"),kVo=o(" (throws an error)."),RVo=l(),lt=a("div"),f(eA.$$.fragment),SVo=l(),Dce=a("p"),PVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$Vo=l(),Jd=a("p"),IVo=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),NVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gce=a("code"),DVo=o("from_pretrained()"),qVo=o("to load the model weights."),GVo=l(),Oce=a("p"),OVo=o("Examples:"),XVo=l(),f(oA.$$.fragment),VVo=l(),oo=a("div"),f(rA.$$.fragment),zVo=l(),Xce=a("p"),WVo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),QVo=l(),dn=a("p"),HVo=o("The model class to instantiate is selected based on the "),Vce=a("code"),UVo=o("model_type"),JVo=o(` property of the config object (either
passed as an argument or loaded from `),zce=a("code"),YVo=o("pretrained_model_name_or_path"),KVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=a("code"),ZVo=o("pretrained_model_name_or_path"),ezo=o(":"),ozo=l(),cn=a("ul"),Xv=a("li"),Qce=a("strong"),rzo=o("data2vec-audio"),tzo=o(" \u2014 "),dq=a("a"),azo=o("Data2VecAudioForXVector"),nzo=o(" (Data2VecAudio model)"),szo=l(),Vv=a("li"),Hce=a("strong"),lzo=o("unispeech-sat"),izo=o(" \u2014 "),cq=a("a"),dzo=o("UniSpeechSatForXVector"),czo=o(" (UniSpeechSat model)"),fzo=l(),zv=a("li"),Uce=a("strong"),mzo=o("wav2vec2"),gzo=o(" \u2014 "),fq=a("a"),hzo=o("Wav2Vec2ForXVector"),pzo=o(" (Wav2Vec2 model)"),_zo=l(),Wv=a("li"),Jce=a("strong"),uzo=o("wavlm"),bzo=o(" \u2014 "),mq=a("a"),vzo=o("WavLMForXVector"),Tzo=o(" (WavLM model)"),Fzo=l(),Qv=a("p"),Czo=o("The model is set in evaluation mode by default using "),Yce=a("code"),Mzo=o("model.eval()"),Ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kce=a("code"),yzo=o("model.train()"),wzo=l(),Zce=a("p"),Azo=o("Examples:"),Lzo=l(),f(tA.$$.fragment),Uke=l(),Yd=a("h2"),Hv=a("a"),efe=a("span"),f(aA.$$.fragment),Bzo=l(),ofe=a("span"),xzo=o("AutoModelForMaskedImageModeling"),Jke=l(),hr=a("div"),f(nA.$$.fragment),kzo=l(),Kd=a("p"),Rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rfe=a("code"),Szo=o("from_pretrained()"),Pzo=o("class method or the "),tfe=a("code"),$zo=o("from_config()"),Izo=o(`class
method.`),Nzo=l(),sA=a("p"),jzo=o("This class cannot be instantiated directly using "),afe=a("code"),Dzo=o("__init__()"),qzo=o(" (throws an error)."),Gzo=l(),it=a("div"),f(lA.$$.fragment),Ozo=l(),nfe=a("p"),Xzo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vzo=l(),Zd=a("p"),zzo=o(`Note:
Loading a model from its configuration file does `),sfe=a("strong"),Wzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lfe=a("code"),Hzo=o("from_pretrained()"),Uzo=o("to load the model weights."),Jzo=l(),ife=a("p"),Yzo=o("Examples:"),Kzo=l(),f(iA.$$.fragment),Zzo=l(),ro=a("div"),f(dA.$$.fragment),eWo=l(),dfe=a("p"),oWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rWo=l(),fn=a("p"),tWo=o("The model class to instantiate is selected based on the "),cfe=a("code"),aWo=o("model_type"),nWo=o(` property of the config object (either
passed as an argument or loaded from `),ffe=a("code"),sWo=o("pretrained_model_name_or_path"),lWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(":"),cWo=l(),ec=a("ul"),Uv=a("li"),gfe=a("strong"),fWo=o("deit"),mWo=o(" \u2014 "),gq=a("a"),gWo=o("DeiTForMaskedImageModeling"),hWo=o(" (DeiT model)"),pWo=l(),Jv=a("li"),hfe=a("strong"),_Wo=o("swin"),uWo=o(" \u2014 "),hq=a("a"),bWo=o("SwinForMaskedImageModeling"),vWo=o(" (Swin model)"),TWo=l(),Yv=a("li"),pfe=a("strong"),FWo=o("vit"),CWo=o(" \u2014 "),pq=a("a"),MWo=o("ViTForMaskedImageModeling"),EWo=o(" (ViT model)"),yWo=l(),Kv=a("p"),wWo=o("The model is set in evaluation mode by default using "),_fe=a("code"),AWo=o("model.eval()"),LWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),BWo=o("model.train()"),xWo=l(),bfe=a("p"),kWo=o("Examples:"),RWo=l(),f(cA.$$.fragment),Yke=l(),oc=a("h2"),Zv=a("a"),vfe=a("span"),f(fA.$$.fragment),SWo=l(),Tfe=a("span"),PWo=o("AutoModelForObjectDetection"),Kke=l(),pr=a("div"),f(mA.$$.fragment),$Wo=l(),rc=a("p"),IWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Ffe=a("code"),NWo=o("from_pretrained()"),jWo=o("class method or the "),Cfe=a("code"),DWo=o("from_config()"),qWo=o(`class
method.`),GWo=l(),gA=a("p"),OWo=o("This class cannot be instantiated directly using "),Mfe=a("code"),XWo=o("__init__()"),VWo=o(" (throws an error)."),zWo=l(),dt=a("div"),f(hA.$$.fragment),WWo=l(),Efe=a("p"),QWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),HWo=l(),tc=a("p"),UWo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),JWo=o("not"),YWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=a("code"),KWo=o("from_pretrained()"),ZWo=o("to load the model weights."),eQo=l(),Afe=a("p"),oQo=o("Examples:"),rQo=l(),f(pA.$$.fragment),tQo=l(),to=a("div"),f(_A.$$.fragment),aQo=l(),Lfe=a("p"),nQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sQo=l(),mn=a("p"),lQo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),iQo=o("model_type"),dQo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),cQo=o("pretrained_model_name_or_path"),fQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),mQo=o("pretrained_model_name_or_path"),gQo=o(":"),hQo=l(),Rfe=a("ul"),e6=a("li"),Sfe=a("strong"),pQo=o("detr"),_Qo=o(" \u2014 "),_q=a("a"),uQo=o("DetrForObjectDetection"),bQo=o(" (DETR model)"),vQo=l(),o6=a("p"),TQo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),FQo=o("model.eval()"),CQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=a("code"),MQo=o("model.train()"),EQo=l(),Ife=a("p"),yQo=o("Examples:"),wQo=l(),f(uA.$$.fragment),Zke=l(),ac=a("h2"),r6=a("a"),Nfe=a("span"),f(bA.$$.fragment),AQo=l(),jfe=a("span"),LQo=o("AutoModelForImageSegmentation"),eRe=l(),_r=a("div"),f(vA.$$.fragment),BQo=l(),nc=a("p"),xQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Dfe=a("code"),kQo=o("from_pretrained()"),RQo=o("class method or the "),qfe=a("code"),SQo=o("from_config()"),PQo=o(`class
method.`),$Qo=l(),TA=a("p"),IQo=o("This class cannot be instantiated directly using "),Gfe=a("code"),NQo=o("__init__()"),jQo=o(" (throws an error)."),DQo=l(),ct=a("div"),f(FA.$$.fragment),qQo=l(),Ofe=a("p"),GQo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),OQo=l(),sc=a("p"),XQo=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),VQo=o("not"),zQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vfe=a("code"),WQo=o("from_pretrained()"),QQo=o("to load the model weights."),HQo=l(),zfe=a("p"),UQo=o("Examples:"),JQo=l(),f(CA.$$.fragment),YQo=l(),ao=a("div"),f(MA.$$.fragment),KQo=l(),Wfe=a("p"),ZQo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),eHo=l(),gn=a("p"),oHo=o("The model class to instantiate is selected based on the "),Qfe=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),Hfe=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),Jfe=a("ul"),t6=a("li"),Yfe=a("strong"),dHo=o("detr"),cHo=o(" \u2014 "),uq=a("a"),fHo=o("DetrForSegmentation"),mHo=o(" (DETR model)"),gHo=l(),a6=a("p"),hHo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),pHo=o("model.eval()"),_Ho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),uHo=o("model.train()"),bHo=l(),eme=a("p"),vHo=o("Examples:"),THo=l(),f(EA.$$.fragment),oRe=l(),lc=a("h2"),n6=a("a"),ome=a("span"),f(yA.$$.fragment),FHo=l(),rme=a("span"),CHo=o("AutoModelForSemanticSegmentation"),rRe=l(),ur=a("div"),f(wA.$$.fragment),MHo=l(),ic=a("p"),EHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tme=a("code"),yHo=o("from_pretrained()"),wHo=o("class method or the "),ame=a("code"),AHo=o("from_config()"),LHo=o(`class
method.`),BHo=l(),AA=a("p"),xHo=o("This class cannot be instantiated directly using "),nme=a("code"),kHo=o("__init__()"),RHo=o(" (throws an error)."),SHo=l(),ft=a("div"),f(LA.$$.fragment),PHo=l(),sme=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),IHo=l(),dc=a("p"),NHo=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),jHo=o("not"),DHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ime=a("code"),qHo=o("from_pretrained()"),GHo=o("to load the model weights."),OHo=l(),dme=a("p"),XHo=o("Examples:"),VHo=l(),f(BA.$$.fragment),zHo=l(),no=a("div"),f(xA.$$.fragment),WHo=l(),cme=a("p"),QHo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),HHo=l(),hn=a("p"),UHo=o("The model class to instantiate is selected based on the "),fme=a("code"),JHo=o("model_type"),YHo=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(":"),rUo=l(),kA=a("ul"),s6=a("li"),hme=a("strong"),tUo=o("beit"),aUo=o(" \u2014 "),bq=a("a"),nUo=o("BeitForSemanticSegmentation"),sUo=o(" (BEiT model)"),lUo=l(),l6=a("li"),pme=a("strong"),iUo=o("segformer"),dUo=o(" \u2014 "),vq=a("a"),cUo=o("SegformerForSemanticSegmentation"),fUo=o(" (SegFormer model)"),mUo=l(),i6=a("p"),gUo=o("The model is set in evaluation mode by default using "),_me=a("code"),hUo=o("model.eval()"),pUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=a("code"),_Uo=o("model.train()"),uUo=l(),bme=a("p"),bUo=o("Examples:"),vUo=l(),f(RA.$$.fragment),tRe=l(),cc=a("h2"),d6=a("a"),vme=a("span"),f(SA.$$.fragment),TUo=l(),Tme=a("span"),FUo=o("AutoModelForInstanceSegmentation"),aRe=l(),br=a("div"),f(PA.$$.fragment),CUo=l(),fc=a("p"),MUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Fme=a("code"),EUo=o("from_pretrained()"),yUo=o("class method or the "),Cme=a("code"),wUo=o("from_config()"),AUo=o(`class
method.`),LUo=l(),$A=a("p"),BUo=o("This class cannot be instantiated directly using "),Mme=a("code"),xUo=o("__init__()"),kUo=o(" (throws an error)."),RUo=l(),mt=a("div"),f(IA.$$.fragment),SUo=l(),Eme=a("p"),PUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$Uo=l(),mc=a("p"),IUo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),NUo=o("not"),jUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wme=a("code"),DUo=o("from_pretrained()"),qUo=o("to load the model weights."),GUo=l(),Ame=a("p"),OUo=o("Examples:"),XUo=l(),f(NA.$$.fragment),VUo=l(),so=a("div"),f(jA.$$.fragment),zUo=l(),Lme=a("p"),WUo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),QUo=l(),pn=a("p"),HUo=o("The model class to instantiate is selected based on the "),Bme=a("code"),UUo=o("model_type"),JUo=o(` property of the config object (either
passed as an argument or loaded from `),xme=a("code"),YUo=o("pretrained_model_name_or_path"),KUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),ZUo=o("pretrained_model_name_or_path"),eJo=o(":"),oJo=l(),Rme=a("ul"),c6=a("li"),Sme=a("strong"),rJo=o("maskformer"),tJo=o(" \u2014 "),Tq=a("a"),aJo=o("MaskFormerForInstanceSegmentation"),nJo=o(" (MaskFormer model)"),sJo=l(),f6=a("p"),lJo=o("The model is set in evaluation mode by default using "),Pme=a("code"),iJo=o("model.eval()"),dJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$me=a("code"),cJo=o("model.train()"),fJo=l(),Ime=a("p"),mJo=o("Examples:"),gJo=l(),f(DA.$$.fragment),nRe=l(),gc=a("h2"),m6=a("a"),Nme=a("span"),f(qA.$$.fragment),hJo=l(),jme=a("span"),pJo=o("TFAutoModel"),sRe=l(),vr=a("div"),f(GA.$$.fragment),_Jo=l(),hc=a("p"),uJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Dme=a("code"),bJo=o("from_pretrained()"),vJo=o("class method or the "),qme=a("code"),TJo=o("from_config()"),FJo=o(`class
method.`),CJo=l(),OA=a("p"),MJo=o("This class cannot be instantiated directly using "),Gme=a("code"),EJo=o("__init__()"),yJo=o(" (throws an error)."),wJo=l(),gt=a("div"),f(XA.$$.fragment),AJo=l(),Ome=a("p"),LJo=o("Instantiates one of the base model classes of the library from a configuration."),BJo=l(),pc=a("p"),xJo=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),kJo=o("not"),RJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vme=a("code"),SJo=o("from_pretrained()"),PJo=o("to load the model weights."),$Jo=l(),zme=a("p"),IJo=o("Examples:"),NJo=l(),f(VA.$$.fragment),jJo=l(),ho=a("div"),f(zA.$$.fragment),DJo=l(),Wme=a("p"),qJo=o("Instantiate one of the base model classes of the library from a pretrained model."),GJo=l(),_n=a("p"),OJo=o("The model class to instantiate is selected based on the "),Qme=a("code"),XJo=o("model_type"),VJo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),zJo=o("pretrained_model_name_or_path"),WJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),QJo=o("pretrained_model_name_or_path"),HJo=o(":"),UJo=l(),B=a("ul"),g6=a("li"),Jme=a("strong"),JJo=o("albert"),YJo=o(" \u2014 "),Fq=a("a"),KJo=o("TFAlbertModel"),ZJo=o(" (ALBERT model)"),eYo=l(),h6=a("li"),Yme=a("strong"),oYo=o("bart"),rYo=o(" \u2014 "),Cq=a("a"),tYo=o("TFBartModel"),aYo=o(" (BART model)"),nYo=l(),p6=a("li"),Kme=a("strong"),sYo=o("bert"),lYo=o(" \u2014 "),Mq=a("a"),iYo=o("TFBertModel"),dYo=o(" (BERT model)"),cYo=l(),_6=a("li"),Zme=a("strong"),fYo=o("blenderbot"),mYo=o(" \u2014 "),Eq=a("a"),gYo=o("TFBlenderbotModel"),hYo=o(" (Blenderbot model)"),pYo=l(),u6=a("li"),ege=a("strong"),_Yo=o("blenderbot-small"),uYo=o(" \u2014 "),yq=a("a"),bYo=o("TFBlenderbotSmallModel"),vYo=o(" (BlenderbotSmall model)"),TYo=l(),b6=a("li"),oge=a("strong"),FYo=o("camembert"),CYo=o(" \u2014 "),wq=a("a"),MYo=o("TFCamembertModel"),EYo=o(" (CamemBERT model)"),yYo=l(),v6=a("li"),rge=a("strong"),wYo=o("clip"),AYo=o(" \u2014 "),Aq=a("a"),LYo=o("TFCLIPModel"),BYo=o(" (CLIP model)"),xYo=l(),T6=a("li"),tge=a("strong"),kYo=o("convbert"),RYo=o(" \u2014 "),Lq=a("a"),SYo=o("TFConvBertModel"),PYo=o(" (ConvBERT model)"),$Yo=l(),F6=a("li"),age=a("strong"),IYo=o("convnext"),NYo=o(" \u2014 "),Bq=a("a"),jYo=o("TFConvNextModel"),DYo=o(" (ConvNext model)"),qYo=l(),C6=a("li"),nge=a("strong"),GYo=o("ctrl"),OYo=o(" \u2014 "),xq=a("a"),XYo=o("TFCTRLModel"),VYo=o(" (CTRL model)"),zYo=l(),M6=a("li"),sge=a("strong"),WYo=o("deberta"),QYo=o(" \u2014 "),kq=a("a"),HYo=o("TFDebertaModel"),UYo=o(" (DeBERTa model)"),JYo=l(),E6=a("li"),lge=a("strong"),YYo=o("deberta-v2"),KYo=o(" \u2014 "),Rq=a("a"),ZYo=o("TFDebertaV2Model"),eKo=o(" (DeBERTa-v2 model)"),oKo=l(),y6=a("li"),ige=a("strong"),rKo=o("distilbert"),tKo=o(" \u2014 "),Sq=a("a"),aKo=o("TFDistilBertModel"),nKo=o(" (DistilBERT model)"),sKo=l(),w6=a("li"),dge=a("strong"),lKo=o("dpr"),iKo=o(" \u2014 "),Pq=a("a"),dKo=o("TFDPRQuestionEncoder"),cKo=o(" (DPR model)"),fKo=l(),A6=a("li"),cge=a("strong"),mKo=o("electra"),gKo=o(" \u2014 "),$q=a("a"),hKo=o("TFElectraModel"),pKo=o(" (ELECTRA model)"),_Ko=l(),L6=a("li"),fge=a("strong"),uKo=o("flaubert"),bKo=o(" \u2014 "),Iq=a("a"),vKo=o("TFFlaubertModel"),TKo=o(" (FlauBERT model)"),FKo=l(),Gs=a("li"),mge=a("strong"),CKo=o("funnel"),MKo=o(" \u2014 "),Nq=a("a"),EKo=o("TFFunnelModel"),yKo=o(" or "),jq=a("a"),wKo=o("TFFunnelBaseModel"),AKo=o(" (Funnel Transformer model)"),LKo=l(),B6=a("li"),gge=a("strong"),BKo=o("gpt2"),xKo=o(" \u2014 "),Dq=a("a"),kKo=o("TFGPT2Model"),RKo=o(" (OpenAI GPT-2 model)"),SKo=l(),x6=a("li"),hge=a("strong"),PKo=o("hubert"),$Ko=o(" \u2014 "),qq=a("a"),IKo=o("TFHubertModel"),NKo=o(" (Hubert model)"),jKo=l(),k6=a("li"),pge=a("strong"),DKo=o("layoutlm"),qKo=o(" \u2014 "),Gq=a("a"),GKo=o("TFLayoutLMModel"),OKo=o(" (LayoutLM model)"),XKo=l(),R6=a("li"),_ge=a("strong"),VKo=o("led"),zKo=o(" \u2014 "),Oq=a("a"),WKo=o("TFLEDModel"),QKo=o(" (LED model)"),HKo=l(),S6=a("li"),uge=a("strong"),UKo=o("longformer"),JKo=o(" \u2014 "),Xq=a("a"),YKo=o("TFLongformerModel"),KKo=o(" (Longformer model)"),ZKo=l(),P6=a("li"),bge=a("strong"),eZo=o("lxmert"),oZo=o(" \u2014 "),Vq=a("a"),rZo=o("TFLxmertModel"),tZo=o(" (LXMERT model)"),aZo=l(),$6=a("li"),vge=a("strong"),nZo=o("marian"),sZo=o(" \u2014 "),zq=a("a"),lZo=o("TFMarianModel"),iZo=o(" (Marian model)"),dZo=l(),I6=a("li"),Tge=a("strong"),cZo=o("mbart"),fZo=o(" \u2014 "),Wq=a("a"),mZo=o("TFMBartModel"),gZo=o(" (mBART model)"),hZo=l(),N6=a("li"),Fge=a("strong"),pZo=o("mobilebert"),_Zo=o(" \u2014 "),Qq=a("a"),uZo=o("TFMobileBertModel"),bZo=o(" (MobileBERT model)"),vZo=l(),j6=a("li"),Cge=a("strong"),TZo=o("mpnet"),FZo=o(" \u2014 "),Hq=a("a"),CZo=o("TFMPNetModel"),MZo=o(" (MPNet model)"),EZo=l(),D6=a("li"),Mge=a("strong"),yZo=o("mt5"),wZo=o(" \u2014 "),Uq=a("a"),AZo=o("TFMT5Model"),LZo=o(" (mT5 model)"),BZo=l(),q6=a("li"),Ege=a("strong"),xZo=o("openai-gpt"),kZo=o(" \u2014 "),Jq=a("a"),RZo=o("TFOpenAIGPTModel"),SZo=o(" (OpenAI GPT model)"),PZo=l(),G6=a("li"),yge=a("strong"),$Zo=o("pegasus"),IZo=o(" \u2014 "),Yq=a("a"),NZo=o("TFPegasusModel"),jZo=o(" (Pegasus model)"),DZo=l(),O6=a("li"),wge=a("strong"),qZo=o("rembert"),GZo=o(" \u2014 "),Kq=a("a"),OZo=o("TFRemBertModel"),XZo=o(" (RemBERT model)"),VZo=l(),X6=a("li"),Age=a("strong"),zZo=o("roberta"),WZo=o(" \u2014 "),Zq=a("a"),QZo=o("TFRobertaModel"),HZo=o(" (RoBERTa model)"),UZo=l(),V6=a("li"),Lge=a("strong"),JZo=o("roformer"),YZo=o(" \u2014 "),eG=a("a"),KZo=o("TFRoFormerModel"),ZZo=o(" (RoFormer model)"),eer=l(),z6=a("li"),Bge=a("strong"),oer=o("speech_to_text"),rer=o(" \u2014 "),oG=a("a"),ter=o("TFSpeech2TextModel"),aer=o(" (Speech2Text model)"),ner=l(),W6=a("li"),xge=a("strong"),ser=o("t5"),ler=o(" \u2014 "),rG=a("a"),ier=o("TFT5Model"),der=o(" (T5 model)"),cer=l(),Q6=a("li"),kge=a("strong"),fer=o("tapas"),mer=o(" \u2014 "),tG=a("a"),ger=o("TFTapasModel"),her=o(" (TAPAS model)"),per=l(),H6=a("li"),Rge=a("strong"),_er=o("transfo-xl"),uer=o(" \u2014 "),aG=a("a"),ber=o("TFTransfoXLModel"),ver=o(" (Transformer-XL model)"),Ter=l(),U6=a("li"),Sge=a("strong"),Fer=o("vit"),Cer=o(" \u2014 "),nG=a("a"),Mer=o("TFViTModel"),Eer=o(" (ViT model)"),yer=l(),J6=a("li"),Pge=a("strong"),wer=o("vit_mae"),Aer=o(" \u2014 "),sG=a("a"),Ler=o("TFViTMAEModel"),Ber=o(" (ViTMAE model)"),xer=l(),Y6=a("li"),$ge=a("strong"),ker=o("wav2vec2"),Rer=o(" \u2014 "),lG=a("a"),Ser=o("TFWav2Vec2Model"),Per=o(" (Wav2Vec2 model)"),$er=l(),K6=a("li"),Ige=a("strong"),Ier=o("xlm"),Ner=o(" \u2014 "),iG=a("a"),jer=o("TFXLMModel"),Der=o(" (XLM model)"),qer=l(),Z6=a("li"),Nge=a("strong"),Ger=o("xlm-roberta"),Oer=o(" \u2014 "),dG=a("a"),Xer=o("TFXLMRobertaModel"),Ver=o(" (XLM-RoBERTa model)"),zer=l(),eT=a("li"),jge=a("strong"),Wer=o("xlnet"),Qer=o(" \u2014 "),cG=a("a"),Her=o("TFXLNetModel"),Uer=o(" (XLNet model)"),Jer=l(),Dge=a("p"),Yer=o("Examples:"),Ker=l(),f(WA.$$.fragment),lRe=l(),_c=a("h2"),oT=a("a"),qge=a("span"),f(QA.$$.fragment),Zer=l(),Gge=a("span"),eor=o("TFAutoModelForPreTraining"),iRe=l(),Tr=a("div"),f(HA.$$.fragment),oor=l(),uc=a("p"),ror=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oge=a("code"),tor=o("from_pretrained()"),aor=o("class method or the "),Xge=a("code"),nor=o("from_config()"),sor=o(`class
method.`),lor=l(),UA=a("p"),ior=o("This class cannot be instantiated directly using "),Vge=a("code"),dor=o("__init__()"),cor=o(" (throws an error)."),mor=l(),ht=a("div"),f(JA.$$.fragment),gor=l(),zge=a("p"),hor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),por=l(),bc=a("p"),_or=o(`Note:
Loading a model from its configuration file does `),Wge=a("strong"),uor=o("not"),bor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qge=a("code"),vor=o("from_pretrained()"),Tor=o("to load the model weights."),For=l(),Hge=a("p"),Cor=o("Examples:"),Mor=l(),f(YA.$$.fragment),Eor=l(),po=a("div"),f(KA.$$.fragment),yor=l(),Uge=a("p"),wor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Aor=l(),un=a("p"),Lor=o("The model class to instantiate is selected based on the "),Jge=a("code"),Bor=o("model_type"),xor=o(` property of the config object (either
passed as an argument or loaded from `),Yge=a("code"),kor=o("pretrained_model_name_or_path"),Ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=a("code"),Sor=o("pretrained_model_name_or_path"),Por=o(":"),$or=l(),H=a("ul"),rT=a("li"),Zge=a("strong"),Ior=o("albert"),Nor=o(" \u2014 "),fG=a("a"),jor=o("TFAlbertForPreTraining"),Dor=o(" (ALBERT model)"),qor=l(),tT=a("li"),ehe=a("strong"),Gor=o("bart"),Oor=o(" \u2014 "),mG=a("a"),Xor=o("TFBartForConditionalGeneration"),Vor=o(" (BART model)"),zor=l(),aT=a("li"),ohe=a("strong"),Wor=o("bert"),Qor=o(" \u2014 "),gG=a("a"),Hor=o("TFBertForPreTraining"),Uor=o(" (BERT model)"),Jor=l(),nT=a("li"),rhe=a("strong"),Yor=o("camembert"),Kor=o(" \u2014 "),hG=a("a"),Zor=o("TFCamembertForMaskedLM"),err=o(" (CamemBERT model)"),orr=l(),sT=a("li"),the=a("strong"),rrr=o("ctrl"),trr=o(" \u2014 "),pG=a("a"),arr=o("TFCTRLLMHeadModel"),nrr=o(" (CTRL model)"),srr=l(),lT=a("li"),ahe=a("strong"),lrr=o("distilbert"),irr=o(" \u2014 "),_G=a("a"),drr=o("TFDistilBertForMaskedLM"),crr=o(" (DistilBERT model)"),frr=l(),iT=a("li"),nhe=a("strong"),mrr=o("electra"),grr=o(" \u2014 "),uG=a("a"),hrr=o("TFElectraForPreTraining"),prr=o(" (ELECTRA model)"),_rr=l(),dT=a("li"),she=a("strong"),urr=o("flaubert"),brr=o(" \u2014 "),bG=a("a"),vrr=o("TFFlaubertWithLMHeadModel"),Trr=o(" (FlauBERT model)"),Frr=l(),cT=a("li"),lhe=a("strong"),Crr=o("funnel"),Mrr=o(" \u2014 "),vG=a("a"),Err=o("TFFunnelForPreTraining"),yrr=o(" (Funnel Transformer model)"),wrr=l(),fT=a("li"),ihe=a("strong"),Arr=o("gpt2"),Lrr=o(" \u2014 "),TG=a("a"),Brr=o("TFGPT2LMHeadModel"),xrr=o(" (OpenAI GPT-2 model)"),krr=l(),mT=a("li"),dhe=a("strong"),Rrr=o("layoutlm"),Srr=o(" \u2014 "),FG=a("a"),Prr=o("TFLayoutLMForMaskedLM"),$rr=o(" (LayoutLM model)"),Irr=l(),gT=a("li"),che=a("strong"),Nrr=o("lxmert"),jrr=o(" \u2014 "),CG=a("a"),Drr=o("TFLxmertForPreTraining"),qrr=o(" (LXMERT model)"),Grr=l(),hT=a("li"),fhe=a("strong"),Orr=o("mobilebert"),Xrr=o(" \u2014 "),MG=a("a"),Vrr=o("TFMobileBertForPreTraining"),zrr=o(" (MobileBERT model)"),Wrr=l(),pT=a("li"),mhe=a("strong"),Qrr=o("mpnet"),Hrr=o(" \u2014 "),EG=a("a"),Urr=o("TFMPNetForMaskedLM"),Jrr=o(" (MPNet model)"),Yrr=l(),_T=a("li"),ghe=a("strong"),Krr=o("openai-gpt"),Zrr=o(" \u2014 "),yG=a("a"),etr=o("TFOpenAIGPTLMHeadModel"),otr=o(" (OpenAI GPT model)"),rtr=l(),uT=a("li"),hhe=a("strong"),ttr=o("roberta"),atr=o(" \u2014 "),wG=a("a"),ntr=o("TFRobertaForMaskedLM"),str=o(" (RoBERTa model)"),ltr=l(),bT=a("li"),phe=a("strong"),itr=o("t5"),dtr=o(" \u2014 "),AG=a("a"),ctr=o("TFT5ForConditionalGeneration"),ftr=o(" (T5 model)"),mtr=l(),vT=a("li"),_he=a("strong"),gtr=o("tapas"),htr=o(" \u2014 "),LG=a("a"),ptr=o("TFTapasForMaskedLM"),_tr=o(" (TAPAS model)"),utr=l(),TT=a("li"),uhe=a("strong"),btr=o("transfo-xl"),vtr=o(" \u2014 "),BG=a("a"),Ttr=o("TFTransfoXLLMHeadModel"),Ftr=o(" (Transformer-XL model)"),Ctr=l(),FT=a("li"),bhe=a("strong"),Mtr=o("vit_mae"),Etr=o(" \u2014 "),xG=a("a"),ytr=o("TFViTMAEForPreTraining"),wtr=o(" (ViTMAE model)"),Atr=l(),CT=a("li"),vhe=a("strong"),Ltr=o("xlm"),Btr=o(" \u2014 "),kG=a("a"),xtr=o("TFXLMWithLMHeadModel"),ktr=o(" (XLM model)"),Rtr=l(),MT=a("li"),The=a("strong"),Str=o("xlm-roberta"),Ptr=o(" \u2014 "),RG=a("a"),$tr=o("TFXLMRobertaForMaskedLM"),Itr=o(" (XLM-RoBERTa model)"),Ntr=l(),ET=a("li"),Fhe=a("strong"),jtr=o("xlnet"),Dtr=o(" \u2014 "),SG=a("a"),qtr=o("TFXLNetLMHeadModel"),Gtr=o(" (XLNet model)"),Otr=l(),Che=a("p"),Xtr=o("Examples:"),Vtr=l(),f(ZA.$$.fragment),dRe=l(),vc=a("h2"),yT=a("a"),Mhe=a("span"),f(e0.$$.fragment),ztr=l(),Ehe=a("span"),Wtr=o("TFAutoModelForCausalLM"),cRe=l(),Fr=a("div"),f(o0.$$.fragment),Qtr=l(),Tc=a("p"),Htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yhe=a("code"),Utr=o("from_pretrained()"),Jtr=o("class method or the "),whe=a("code"),Ytr=o("from_config()"),Ktr=o(`class
method.`),Ztr=l(),r0=a("p"),ear=o("This class cannot be instantiated directly using "),Ahe=a("code"),oar=o("__init__()"),rar=o(" (throws an error)."),tar=l(),pt=a("div"),f(t0.$$.fragment),aar=l(),Lhe=a("p"),nar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sar=l(),Fc=a("p"),lar=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),iar=o("not"),dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=a("code"),car=o("from_pretrained()"),far=o("to load the model weights."),mar=l(),khe=a("p"),gar=o("Examples:"),har=l(),f(a0.$$.fragment),par=l(),_o=a("div"),f(n0.$$.fragment),_ar=l(),Rhe=a("p"),uar=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bar=l(),bn=a("p"),Tar=o("The model class to instantiate is selected based on the "),She=a("code"),Far=o("model_type"),Car=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),yar=o("pretrained_model_name_or_path"),war=o(":"),Aar=l(),ge=a("ul"),wT=a("li"),Ihe=a("strong"),Lar=o("bert"),Bar=o(" \u2014 "),PG=a("a"),xar=o("TFBertLMHeadModel"),kar=o(" (BERT model)"),Rar=l(),AT=a("li"),Nhe=a("strong"),Sar=o("camembert"),Par=o(" \u2014 "),$G=a("a"),$ar=o("TFCamembertForCausalLM"),Iar=o(" (CamemBERT model)"),Nar=l(),LT=a("li"),jhe=a("strong"),jar=o("ctrl"),Dar=o(" \u2014 "),IG=a("a"),qar=o("TFCTRLLMHeadModel"),Gar=o(" (CTRL model)"),Oar=l(),BT=a("li"),Dhe=a("strong"),Xar=o("gpt2"),Var=o(" \u2014 "),NG=a("a"),zar=o("TFGPT2LMHeadModel"),War=o(" (OpenAI GPT-2 model)"),Qar=l(),xT=a("li"),qhe=a("strong"),Har=o("openai-gpt"),Uar=o(" \u2014 "),jG=a("a"),Jar=o("TFOpenAIGPTLMHeadModel"),Yar=o(" (OpenAI GPT model)"),Kar=l(),kT=a("li"),Ghe=a("strong"),Zar=o("rembert"),enr=o(" \u2014 "),DG=a("a"),onr=o("TFRemBertForCausalLM"),rnr=o(" (RemBERT model)"),tnr=l(),RT=a("li"),Ohe=a("strong"),anr=o("roberta"),nnr=o(" \u2014 "),qG=a("a"),snr=o("TFRobertaForCausalLM"),lnr=o(" (RoBERTa model)"),inr=l(),ST=a("li"),Xhe=a("strong"),dnr=o("roformer"),cnr=o(" \u2014 "),GG=a("a"),fnr=o("TFRoFormerForCausalLM"),mnr=o(" (RoFormer model)"),gnr=l(),PT=a("li"),Vhe=a("strong"),hnr=o("transfo-xl"),pnr=o(" \u2014 "),OG=a("a"),_nr=o("TFTransfoXLLMHeadModel"),unr=o(" (Transformer-XL model)"),bnr=l(),$T=a("li"),zhe=a("strong"),vnr=o("xlm"),Tnr=o(" \u2014 "),XG=a("a"),Fnr=o("TFXLMWithLMHeadModel"),Cnr=o(" (XLM model)"),Mnr=l(),IT=a("li"),Whe=a("strong"),Enr=o("xlnet"),ynr=o(" \u2014 "),VG=a("a"),wnr=o("TFXLNetLMHeadModel"),Anr=o(" (XLNet model)"),Lnr=l(),Qhe=a("p"),Bnr=o("Examples:"),xnr=l(),f(s0.$$.fragment),fRe=l(),Cc=a("h2"),NT=a("a"),Hhe=a("span"),f(l0.$$.fragment),knr=l(),Uhe=a("span"),Rnr=o("TFAutoModelForImageClassification"),mRe=l(),Cr=a("div"),f(i0.$$.fragment),Snr=l(),Mc=a("p"),Pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jhe=a("code"),$nr=o("from_pretrained()"),Inr=o("class method or the "),Yhe=a("code"),Nnr=o("from_config()"),jnr=o(`class
method.`),Dnr=l(),d0=a("p"),qnr=o("This class cannot be instantiated directly using "),Khe=a("code"),Gnr=o("__init__()"),Onr=o(" (throws an error)."),Xnr=l(),_t=a("div"),f(c0.$$.fragment),Vnr=l(),Zhe=a("p"),znr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wnr=l(),Ec=a("p"),Qnr=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),Hnr=o("not"),Unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ope=a("code"),Jnr=o("from_pretrained()"),Ynr=o("to load the model weights."),Knr=l(),rpe=a("p"),Znr=o("Examples:"),esr=l(),f(f0.$$.fragment),osr=l(),uo=a("div"),f(m0.$$.fragment),rsr=l(),tpe=a("p"),tsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),asr=l(),vn=a("p"),nsr=o("The model class to instantiate is selected based on the "),ape=a("code"),ssr=o("model_type"),lsr=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(":"),msr=l(),g0=a("ul"),jT=a("li"),lpe=a("strong"),gsr=o("convnext"),hsr=o(" \u2014 "),zG=a("a"),psr=o("TFConvNextForImageClassification"),_sr=o(" (ConvNext model)"),usr=l(),DT=a("li"),ipe=a("strong"),bsr=o("vit"),vsr=o(" \u2014 "),WG=a("a"),Tsr=o("TFViTForImageClassification"),Fsr=o(" (ViT model)"),Csr=l(),dpe=a("p"),Msr=o("Examples:"),Esr=l(),f(h0.$$.fragment),gRe=l(),yc=a("h2"),qT=a("a"),cpe=a("span"),f(p0.$$.fragment),ysr=l(),fpe=a("span"),wsr=o("TFAutoModelForMaskedLM"),hRe=l(),Mr=a("div"),f(_0.$$.fragment),Asr=l(),wc=a("p"),Lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mpe=a("code"),Bsr=o("from_pretrained()"),xsr=o("class method or the "),gpe=a("code"),ksr=o("from_config()"),Rsr=o(`class
method.`),Ssr=l(),u0=a("p"),Psr=o("This class cannot be instantiated directly using "),hpe=a("code"),$sr=o("__init__()"),Isr=o(" (throws an error)."),Nsr=l(),ut=a("div"),f(b0.$$.fragment),jsr=l(),ppe=a("p"),Dsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qsr=l(),Ac=a("p"),Gsr=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),Osr=o("not"),Xsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=a("code"),Vsr=o("from_pretrained()"),zsr=o("to load the model weights."),Wsr=l(),bpe=a("p"),Qsr=o("Examples:"),Hsr=l(),f(v0.$$.fragment),Usr=l(),bo=a("div"),f(T0.$$.fragment),Jsr=l(),vpe=a("p"),Ysr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ksr=l(),Tn=a("p"),Zsr=o("The model class to instantiate is selected based on the "),Tpe=a("code"),elr=o("model_type"),olr=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(":"),slr=l(),Y=a("ul"),GT=a("li"),Mpe=a("strong"),llr=o("albert"),ilr=o(" \u2014 "),QG=a("a"),dlr=o("TFAlbertForMaskedLM"),clr=o(" (ALBERT model)"),flr=l(),OT=a("li"),Epe=a("strong"),mlr=o("bert"),glr=o(" \u2014 "),HG=a("a"),hlr=o("TFBertForMaskedLM"),plr=o(" (BERT model)"),_lr=l(),XT=a("li"),ype=a("strong"),ulr=o("camembert"),blr=o(" \u2014 "),UG=a("a"),vlr=o("TFCamembertForMaskedLM"),Tlr=o(" (CamemBERT model)"),Flr=l(),VT=a("li"),wpe=a("strong"),Clr=o("convbert"),Mlr=o(" \u2014 "),JG=a("a"),Elr=o("TFConvBertForMaskedLM"),ylr=o(" (ConvBERT model)"),wlr=l(),zT=a("li"),Ape=a("strong"),Alr=o("deberta"),Llr=o(" \u2014 "),YG=a("a"),Blr=o("TFDebertaForMaskedLM"),xlr=o(" (DeBERTa model)"),klr=l(),WT=a("li"),Lpe=a("strong"),Rlr=o("deberta-v2"),Slr=o(" \u2014 "),KG=a("a"),Plr=o("TFDebertaV2ForMaskedLM"),$lr=o(" (DeBERTa-v2 model)"),Ilr=l(),QT=a("li"),Bpe=a("strong"),Nlr=o("distilbert"),jlr=o(" \u2014 "),ZG=a("a"),Dlr=o("TFDistilBertForMaskedLM"),qlr=o(" (DistilBERT model)"),Glr=l(),HT=a("li"),xpe=a("strong"),Olr=o("electra"),Xlr=o(" \u2014 "),eO=a("a"),Vlr=o("TFElectraForMaskedLM"),zlr=o(" (ELECTRA model)"),Wlr=l(),UT=a("li"),kpe=a("strong"),Qlr=o("flaubert"),Hlr=o(" \u2014 "),oO=a("a"),Ulr=o("TFFlaubertWithLMHeadModel"),Jlr=o(" (FlauBERT model)"),Ylr=l(),JT=a("li"),Rpe=a("strong"),Klr=o("funnel"),Zlr=o(" \u2014 "),rO=a("a"),eir=o("TFFunnelForMaskedLM"),oir=o(" (Funnel Transformer model)"),rir=l(),YT=a("li"),Spe=a("strong"),tir=o("layoutlm"),air=o(" \u2014 "),tO=a("a"),nir=o("TFLayoutLMForMaskedLM"),sir=o(" (LayoutLM model)"),lir=l(),KT=a("li"),Ppe=a("strong"),iir=o("longformer"),dir=o(" \u2014 "),aO=a("a"),cir=o("TFLongformerForMaskedLM"),fir=o(" (Longformer model)"),mir=l(),ZT=a("li"),$pe=a("strong"),gir=o("mobilebert"),hir=o(" \u2014 "),nO=a("a"),pir=o("TFMobileBertForMaskedLM"),_ir=o(" (MobileBERT model)"),uir=l(),eF=a("li"),Ipe=a("strong"),bir=o("mpnet"),vir=o(" \u2014 "),sO=a("a"),Tir=o("TFMPNetForMaskedLM"),Fir=o(" (MPNet model)"),Cir=l(),oF=a("li"),Npe=a("strong"),Mir=o("rembert"),Eir=o(" \u2014 "),lO=a("a"),yir=o("TFRemBertForMaskedLM"),wir=o(" (RemBERT model)"),Air=l(),rF=a("li"),jpe=a("strong"),Lir=o("roberta"),Bir=o(" \u2014 "),iO=a("a"),xir=o("TFRobertaForMaskedLM"),kir=o(" (RoBERTa model)"),Rir=l(),tF=a("li"),Dpe=a("strong"),Sir=o("roformer"),Pir=o(" \u2014 "),dO=a("a"),$ir=o("TFRoFormerForMaskedLM"),Iir=o(" (RoFormer model)"),Nir=l(),aF=a("li"),qpe=a("strong"),jir=o("tapas"),Dir=o(" \u2014 "),cO=a("a"),qir=o("TFTapasForMaskedLM"),Gir=o(" (TAPAS model)"),Oir=l(),nF=a("li"),Gpe=a("strong"),Xir=o("xlm"),Vir=o(" \u2014 "),fO=a("a"),zir=o("TFXLMWithLMHeadModel"),Wir=o(" (XLM model)"),Qir=l(),sF=a("li"),Ope=a("strong"),Hir=o("xlm-roberta"),Uir=o(" \u2014 "),mO=a("a"),Jir=o("TFXLMRobertaForMaskedLM"),Yir=o(" (XLM-RoBERTa model)"),Kir=l(),Xpe=a("p"),Zir=o("Examples:"),edr=l(),f(F0.$$.fragment),pRe=l(),Lc=a("h2"),lF=a("a"),Vpe=a("span"),f(C0.$$.fragment),odr=l(),zpe=a("span"),rdr=o("TFAutoModelForSeq2SeqLM"),_Re=l(),Er=a("div"),f(M0.$$.fragment),tdr=l(),Bc=a("p"),adr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wpe=a("code"),ndr=o("from_pretrained()"),sdr=o("class method or the "),Qpe=a("code"),ldr=o("from_config()"),idr=o(`class
method.`),ddr=l(),E0=a("p"),cdr=o("This class cannot be instantiated directly using "),Hpe=a("code"),fdr=o("__init__()"),mdr=o(" (throws an error)."),gdr=l(),bt=a("div"),f(y0.$$.fragment),hdr=l(),Upe=a("p"),pdr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_dr=l(),xc=a("p"),udr=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),bdr=o("not"),vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ype=a("code"),Tdr=o("from_pretrained()"),Fdr=o("to load the model weights."),Cdr=l(),Kpe=a("p"),Mdr=o("Examples:"),Edr=l(),f(w0.$$.fragment),ydr=l(),vo=a("div"),f(A0.$$.fragment),wdr=l(),Zpe=a("p"),Adr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ldr=l(),Fn=a("p"),Bdr=o("The model class to instantiate is selected based on the "),e_e=a("code"),xdr=o("model_type"),kdr=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),Rdr=o("pretrained_model_name_or_path"),Sdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),Pdr=o("pretrained_model_name_or_path"),$dr=o(":"),Idr=l(),ue=a("ul"),iF=a("li"),t_e=a("strong"),Ndr=o("bart"),jdr=o(" \u2014 "),gO=a("a"),Ddr=o("TFBartForConditionalGeneration"),qdr=o(" (BART model)"),Gdr=l(),dF=a("li"),a_e=a("strong"),Odr=o("blenderbot"),Xdr=o(" \u2014 "),hO=a("a"),Vdr=o("TFBlenderbotForConditionalGeneration"),zdr=o(" (Blenderbot model)"),Wdr=l(),cF=a("li"),n_e=a("strong"),Qdr=o("blenderbot-small"),Hdr=o(" \u2014 "),pO=a("a"),Udr=o("TFBlenderbotSmallForConditionalGeneration"),Jdr=o(" (BlenderbotSmall model)"),Ydr=l(),fF=a("li"),s_e=a("strong"),Kdr=o("encoder-decoder"),Zdr=o(" \u2014 "),_O=a("a"),ecr=o("TFEncoderDecoderModel"),ocr=o(" (Encoder decoder model)"),rcr=l(),mF=a("li"),l_e=a("strong"),tcr=o("led"),acr=o(" \u2014 "),uO=a("a"),ncr=o("TFLEDForConditionalGeneration"),scr=o(" (LED model)"),lcr=l(),gF=a("li"),i_e=a("strong"),icr=o("marian"),dcr=o(" \u2014 "),bO=a("a"),ccr=o("TFMarianMTModel"),fcr=o(" (Marian model)"),mcr=l(),hF=a("li"),d_e=a("strong"),gcr=o("mbart"),hcr=o(" \u2014 "),vO=a("a"),pcr=o("TFMBartForConditionalGeneration"),_cr=o(" (mBART model)"),ucr=l(),pF=a("li"),c_e=a("strong"),bcr=o("mt5"),vcr=o(" \u2014 "),TO=a("a"),Tcr=o("TFMT5ForConditionalGeneration"),Fcr=o(" (mT5 model)"),Ccr=l(),_F=a("li"),f_e=a("strong"),Mcr=o("pegasus"),Ecr=o(" \u2014 "),FO=a("a"),ycr=o("TFPegasusForConditionalGeneration"),wcr=o(" (Pegasus model)"),Acr=l(),uF=a("li"),m_e=a("strong"),Lcr=o("t5"),Bcr=o(" \u2014 "),CO=a("a"),xcr=o("TFT5ForConditionalGeneration"),kcr=o(" (T5 model)"),Rcr=l(),g_e=a("p"),Scr=o("Examples:"),Pcr=l(),f(L0.$$.fragment),uRe=l(),kc=a("h2"),bF=a("a"),h_e=a("span"),f(B0.$$.fragment),$cr=l(),p_e=a("span"),Icr=o("TFAutoModelForSequenceClassification"),bRe=l(),yr=a("div"),f(x0.$$.fragment),Ncr=l(),Rc=a("p"),jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),__e=a("code"),Dcr=o("from_pretrained()"),qcr=o("class method or the "),u_e=a("code"),Gcr=o("from_config()"),Ocr=o(`class
method.`),Xcr=l(),k0=a("p"),Vcr=o("This class cannot be instantiated directly using "),b_e=a("code"),zcr=o("__init__()"),Wcr=o(" (throws an error)."),Qcr=l(),vt=a("div"),f(R0.$$.fragment),Hcr=l(),v_e=a("p"),Ucr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jcr=l(),Sc=a("p"),Ycr=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),Kcr=o("not"),Zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),F_e=a("code"),efr=o("from_pretrained()"),ofr=o("to load the model weights."),rfr=l(),C_e=a("p"),tfr=o("Examples:"),afr=l(),f(S0.$$.fragment),nfr=l(),To=a("div"),f(P0.$$.fragment),sfr=l(),M_e=a("p"),lfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ifr=l(),Cn=a("p"),dfr=o("The model class to instantiate is selected based on the "),E_e=a("code"),cfr=o("model_type"),ffr=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),hfr=o("pretrained_model_name_or_path"),pfr=o(":"),_fr=l(),V=a("ul"),vF=a("li"),A_e=a("strong"),ufr=o("albert"),bfr=o(" \u2014 "),MO=a("a"),vfr=o("TFAlbertForSequenceClassification"),Tfr=o(" (ALBERT model)"),Ffr=l(),TF=a("li"),L_e=a("strong"),Cfr=o("bert"),Mfr=o(" \u2014 "),EO=a("a"),Efr=o("TFBertForSequenceClassification"),yfr=o(" (BERT model)"),wfr=l(),FF=a("li"),B_e=a("strong"),Afr=o("camembert"),Lfr=o(" \u2014 "),yO=a("a"),Bfr=o("TFCamembertForSequenceClassification"),xfr=o(" (CamemBERT model)"),kfr=l(),CF=a("li"),x_e=a("strong"),Rfr=o("convbert"),Sfr=o(" \u2014 "),wO=a("a"),Pfr=o("TFConvBertForSequenceClassification"),$fr=o(" (ConvBERT model)"),Ifr=l(),MF=a("li"),k_e=a("strong"),Nfr=o("ctrl"),jfr=o(" \u2014 "),AO=a("a"),Dfr=o("TFCTRLForSequenceClassification"),qfr=o(" (CTRL model)"),Gfr=l(),EF=a("li"),R_e=a("strong"),Ofr=o("deberta"),Xfr=o(" \u2014 "),LO=a("a"),Vfr=o("TFDebertaForSequenceClassification"),zfr=o(" (DeBERTa model)"),Wfr=l(),yF=a("li"),S_e=a("strong"),Qfr=o("deberta-v2"),Hfr=o(" \u2014 "),BO=a("a"),Ufr=o("TFDebertaV2ForSequenceClassification"),Jfr=o(" (DeBERTa-v2 model)"),Yfr=l(),wF=a("li"),P_e=a("strong"),Kfr=o("distilbert"),Zfr=o(" \u2014 "),xO=a("a"),emr=o("TFDistilBertForSequenceClassification"),omr=o(" (DistilBERT model)"),rmr=l(),AF=a("li"),$_e=a("strong"),tmr=o("electra"),amr=o(" \u2014 "),kO=a("a"),nmr=o("TFElectraForSequenceClassification"),smr=o(" (ELECTRA model)"),lmr=l(),LF=a("li"),I_e=a("strong"),imr=o("flaubert"),dmr=o(" \u2014 "),RO=a("a"),cmr=o("TFFlaubertForSequenceClassification"),fmr=o(" (FlauBERT model)"),mmr=l(),BF=a("li"),N_e=a("strong"),gmr=o("funnel"),hmr=o(" \u2014 "),SO=a("a"),pmr=o("TFFunnelForSequenceClassification"),_mr=o(" (Funnel Transformer model)"),umr=l(),xF=a("li"),j_e=a("strong"),bmr=o("gpt2"),vmr=o(" \u2014 "),PO=a("a"),Tmr=o("TFGPT2ForSequenceClassification"),Fmr=o(" (OpenAI GPT-2 model)"),Cmr=l(),kF=a("li"),D_e=a("strong"),Mmr=o("layoutlm"),Emr=o(" \u2014 "),$O=a("a"),ymr=o("TFLayoutLMForSequenceClassification"),wmr=o(" (LayoutLM model)"),Amr=l(),RF=a("li"),q_e=a("strong"),Lmr=o("longformer"),Bmr=o(" \u2014 "),IO=a("a"),xmr=o("TFLongformerForSequenceClassification"),kmr=o(" (Longformer model)"),Rmr=l(),SF=a("li"),G_e=a("strong"),Smr=o("mobilebert"),Pmr=o(" \u2014 "),NO=a("a"),$mr=o("TFMobileBertForSequenceClassification"),Imr=o(" (MobileBERT model)"),Nmr=l(),PF=a("li"),O_e=a("strong"),jmr=o("mpnet"),Dmr=o(" \u2014 "),jO=a("a"),qmr=o("TFMPNetForSequenceClassification"),Gmr=o(" (MPNet model)"),Omr=l(),$F=a("li"),X_e=a("strong"),Xmr=o("openai-gpt"),Vmr=o(" \u2014 "),DO=a("a"),zmr=o("TFOpenAIGPTForSequenceClassification"),Wmr=o(" (OpenAI GPT model)"),Qmr=l(),IF=a("li"),V_e=a("strong"),Hmr=o("rembert"),Umr=o(" \u2014 "),qO=a("a"),Jmr=o("TFRemBertForSequenceClassification"),Ymr=o(" (RemBERT model)"),Kmr=l(),NF=a("li"),z_e=a("strong"),Zmr=o("roberta"),egr=o(" \u2014 "),GO=a("a"),ogr=o("TFRobertaForSequenceClassification"),rgr=o(" (RoBERTa model)"),tgr=l(),jF=a("li"),W_e=a("strong"),agr=o("roformer"),ngr=o(" \u2014 "),OO=a("a"),sgr=o("TFRoFormerForSequenceClassification"),lgr=o(" (RoFormer model)"),igr=l(),DF=a("li"),Q_e=a("strong"),dgr=o("tapas"),cgr=o(" \u2014 "),XO=a("a"),fgr=o("TFTapasForSequenceClassification"),mgr=o(" (TAPAS model)"),ggr=l(),qF=a("li"),H_e=a("strong"),hgr=o("transfo-xl"),pgr=o(" \u2014 "),VO=a("a"),_gr=o("TFTransfoXLForSequenceClassification"),ugr=o(" (Transformer-XL model)"),bgr=l(),GF=a("li"),U_e=a("strong"),vgr=o("xlm"),Tgr=o(" \u2014 "),zO=a("a"),Fgr=o("TFXLMForSequenceClassification"),Cgr=o(" (XLM model)"),Mgr=l(),OF=a("li"),J_e=a("strong"),Egr=o("xlm-roberta"),ygr=o(" \u2014 "),WO=a("a"),wgr=o("TFXLMRobertaForSequenceClassification"),Agr=o(" (XLM-RoBERTa model)"),Lgr=l(),XF=a("li"),Y_e=a("strong"),Bgr=o("xlnet"),xgr=o(" \u2014 "),QO=a("a"),kgr=o("TFXLNetForSequenceClassification"),Rgr=o(" (XLNet model)"),Sgr=l(),K_e=a("p"),Pgr=o("Examples:"),$gr=l(),f($0.$$.fragment),vRe=l(),Pc=a("h2"),VF=a("a"),Z_e=a("span"),f(I0.$$.fragment),Igr=l(),eue=a("span"),Ngr=o("TFAutoModelForMultipleChoice"),TRe=l(),wr=a("div"),f(N0.$$.fragment),jgr=l(),$c=a("p"),Dgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oue=a("code"),qgr=o("from_pretrained()"),Ggr=o("class method or the "),rue=a("code"),Ogr=o("from_config()"),Xgr=o(`class
method.`),Vgr=l(),j0=a("p"),zgr=o("This class cannot be instantiated directly using "),tue=a("code"),Wgr=o("__init__()"),Qgr=o(" (throws an error)."),Hgr=l(),Tt=a("div"),f(D0.$$.fragment),Ugr=l(),aue=a("p"),Jgr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ygr=l(),Ic=a("p"),Kgr=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),Zgr=o("not"),ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sue=a("code"),ohr=o("from_pretrained()"),rhr=o("to load the model weights."),thr=l(),lue=a("p"),ahr=o("Examples:"),nhr=l(),f(q0.$$.fragment),shr=l(),Fo=a("div"),f(G0.$$.fragment),lhr=l(),iue=a("p"),ihr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dhr=l(),Mn=a("p"),chr=o("The model class to instantiate is selected based on the "),due=a("code"),fhr=o("model_type"),mhr=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),phr=o("pretrained_model_name_or_path"),_hr=o(":"),uhr=l(),ae=a("ul"),zF=a("li"),mue=a("strong"),bhr=o("albert"),vhr=o(" \u2014 "),HO=a("a"),Thr=o("TFAlbertForMultipleChoice"),Fhr=o(" (ALBERT model)"),Chr=l(),WF=a("li"),gue=a("strong"),Mhr=o("bert"),Ehr=o(" \u2014 "),UO=a("a"),yhr=o("TFBertForMultipleChoice"),whr=o(" (BERT model)"),Ahr=l(),QF=a("li"),hue=a("strong"),Lhr=o("camembert"),Bhr=o(" \u2014 "),JO=a("a"),xhr=o("TFCamembertForMultipleChoice"),khr=o(" (CamemBERT model)"),Rhr=l(),HF=a("li"),pue=a("strong"),Shr=o("convbert"),Phr=o(" \u2014 "),YO=a("a"),$hr=o("TFConvBertForMultipleChoice"),Ihr=o(" (ConvBERT model)"),Nhr=l(),UF=a("li"),_ue=a("strong"),jhr=o("distilbert"),Dhr=o(" \u2014 "),KO=a("a"),qhr=o("TFDistilBertForMultipleChoice"),Ghr=o(" (DistilBERT model)"),Ohr=l(),JF=a("li"),uue=a("strong"),Xhr=o("electra"),Vhr=o(" \u2014 "),ZO=a("a"),zhr=o("TFElectraForMultipleChoice"),Whr=o(" (ELECTRA model)"),Qhr=l(),YF=a("li"),bue=a("strong"),Hhr=o("flaubert"),Uhr=o(" \u2014 "),eX=a("a"),Jhr=o("TFFlaubertForMultipleChoice"),Yhr=o(" (FlauBERT model)"),Khr=l(),KF=a("li"),vue=a("strong"),Zhr=o("funnel"),epr=o(" \u2014 "),oX=a("a"),opr=o("TFFunnelForMultipleChoice"),rpr=o(" (Funnel Transformer model)"),tpr=l(),ZF=a("li"),Tue=a("strong"),apr=o("longformer"),npr=o(" \u2014 "),rX=a("a"),spr=o("TFLongformerForMultipleChoice"),lpr=o(" (Longformer model)"),ipr=l(),eC=a("li"),Fue=a("strong"),dpr=o("mobilebert"),cpr=o(" \u2014 "),tX=a("a"),fpr=o("TFMobileBertForMultipleChoice"),mpr=o(" (MobileBERT model)"),gpr=l(),oC=a("li"),Cue=a("strong"),hpr=o("mpnet"),ppr=o(" \u2014 "),aX=a("a"),_pr=o("TFMPNetForMultipleChoice"),upr=o(" (MPNet model)"),bpr=l(),rC=a("li"),Mue=a("strong"),vpr=o("rembert"),Tpr=o(" \u2014 "),nX=a("a"),Fpr=o("TFRemBertForMultipleChoice"),Cpr=o(" (RemBERT model)"),Mpr=l(),tC=a("li"),Eue=a("strong"),Epr=o("roberta"),ypr=o(" \u2014 "),sX=a("a"),wpr=o("TFRobertaForMultipleChoice"),Apr=o(" (RoBERTa model)"),Lpr=l(),aC=a("li"),yue=a("strong"),Bpr=o("roformer"),xpr=o(" \u2014 "),lX=a("a"),kpr=o("TFRoFormerForMultipleChoice"),Rpr=o(" (RoFormer model)"),Spr=l(),nC=a("li"),wue=a("strong"),Ppr=o("xlm"),$pr=o(" \u2014 "),iX=a("a"),Ipr=o("TFXLMForMultipleChoice"),Npr=o(" (XLM model)"),jpr=l(),sC=a("li"),Aue=a("strong"),Dpr=o("xlm-roberta"),qpr=o(" \u2014 "),dX=a("a"),Gpr=o("TFXLMRobertaForMultipleChoice"),Opr=o(" (XLM-RoBERTa model)"),Xpr=l(),lC=a("li"),Lue=a("strong"),Vpr=o("xlnet"),zpr=o(" \u2014 "),cX=a("a"),Wpr=o("TFXLNetForMultipleChoice"),Qpr=o(" (XLNet model)"),Hpr=l(),Bue=a("p"),Upr=o("Examples:"),Jpr=l(),f(O0.$$.fragment),FRe=l(),Nc=a("h2"),iC=a("a"),xue=a("span"),f(X0.$$.fragment),Ypr=l(),kue=a("span"),Kpr=o("TFAutoModelForTableQuestionAnswering"),CRe=l(),Ar=a("div"),f(V0.$$.fragment),Zpr=l(),jc=a("p"),e_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rue=a("code"),o_r=o("from_pretrained()"),r_r=o("class method or the "),Sue=a("code"),t_r=o("from_config()"),a_r=o(`class
method.`),n_r=l(),z0=a("p"),s_r=o("This class cannot be instantiated directly using "),Pue=a("code"),l_r=o("__init__()"),i_r=o(" (throws an error)."),d_r=l(),Ft=a("div"),f(W0.$$.fragment),c_r=l(),$ue=a("p"),f_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),m_r=l(),Dc=a("p"),g_r=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),h_r=o("not"),p_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nue=a("code"),__r=o("from_pretrained()"),u_r=o("to load the model weights."),b_r=l(),jue=a("p"),v_r=o("Examples:"),T_r=l(),f(Q0.$$.fragment),F_r=l(),Co=a("div"),f(H0.$$.fragment),C_r=l(),Due=a("p"),M_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E_r=l(),En=a("p"),y_r=o("The model class to instantiate is selected based on the "),que=a("code"),w_r=o("model_type"),A_r=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),L_r=o("pretrained_model_name_or_path"),B_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),x_r=o("pretrained_model_name_or_path"),k_r=o(":"),R_r=l(),Xue=a("ul"),dC=a("li"),Vue=a("strong"),S_r=o("tapas"),P_r=o(" \u2014 "),fX=a("a"),$_r=o("TFTapasForQuestionAnswering"),I_r=o(" (TAPAS model)"),N_r=l(),zue=a("p"),j_r=o("Examples:"),D_r=l(),f(U0.$$.fragment),MRe=l(),qc=a("h2"),cC=a("a"),Wue=a("span"),f(J0.$$.fragment),q_r=l(),Que=a("span"),G_r=o("TFAutoModelForTokenClassification"),ERe=l(),Lr=a("div"),f(Y0.$$.fragment),O_r=l(),Gc=a("p"),X_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hue=a("code"),V_r=o("from_pretrained()"),z_r=o("class method or the "),Uue=a("code"),W_r=o("from_config()"),Q_r=o(`class
method.`),H_r=l(),K0=a("p"),U_r=o("This class cannot be instantiated directly using "),Jue=a("code"),J_r=o("__init__()"),Y_r=o(" (throws an error)."),K_r=l(),Ct=a("div"),f(Z0.$$.fragment),Z_r=l(),Yue=a("p"),eur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),our=l(),Oc=a("p"),rur=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),tur=o("not"),aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zue=a("code"),nur=o("from_pretrained()"),sur=o("to load the model weights."),lur=l(),e5e=a("p"),iur=o("Examples:"),dur=l(),f(eL.$$.fragment),cur=l(),Mo=a("div"),f(oL.$$.fragment),fur=l(),o5e=a("p"),mur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gur=l(),yn=a("p"),hur=o("The model class to instantiate is selected based on the "),r5e=a("code"),pur=o("model_type"),_ur=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),uur=o("pretrained_model_name_or_path"),bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),vur=o("pretrained_model_name_or_path"),Tur=o(":"),Fur=l(),K=a("ul"),fC=a("li"),n5e=a("strong"),Cur=o("albert"),Mur=o(" \u2014 "),mX=a("a"),Eur=o("TFAlbertForTokenClassification"),yur=o(" (ALBERT model)"),wur=l(),mC=a("li"),s5e=a("strong"),Aur=o("bert"),Lur=o(" \u2014 "),gX=a("a"),Bur=o("TFBertForTokenClassification"),xur=o(" (BERT model)"),kur=l(),gC=a("li"),l5e=a("strong"),Rur=o("camembert"),Sur=o(" \u2014 "),hX=a("a"),Pur=o("TFCamembertForTokenClassification"),$ur=o(" (CamemBERT model)"),Iur=l(),hC=a("li"),i5e=a("strong"),Nur=o("convbert"),jur=o(" \u2014 "),pX=a("a"),Dur=o("TFConvBertForTokenClassification"),qur=o(" (ConvBERT model)"),Gur=l(),pC=a("li"),d5e=a("strong"),Our=o("deberta"),Xur=o(" \u2014 "),_X=a("a"),Vur=o("TFDebertaForTokenClassification"),zur=o(" (DeBERTa model)"),Wur=l(),_C=a("li"),c5e=a("strong"),Qur=o("deberta-v2"),Hur=o(" \u2014 "),uX=a("a"),Uur=o("TFDebertaV2ForTokenClassification"),Jur=o(" (DeBERTa-v2 model)"),Yur=l(),uC=a("li"),f5e=a("strong"),Kur=o("distilbert"),Zur=o(" \u2014 "),bX=a("a"),e5r=o("TFDistilBertForTokenClassification"),o5r=o(" (DistilBERT model)"),r5r=l(),bC=a("li"),m5e=a("strong"),t5r=o("electra"),a5r=o(" \u2014 "),vX=a("a"),n5r=o("TFElectraForTokenClassification"),s5r=o(" (ELECTRA model)"),l5r=l(),vC=a("li"),g5e=a("strong"),i5r=o("flaubert"),d5r=o(" \u2014 "),TX=a("a"),c5r=o("TFFlaubertForTokenClassification"),f5r=o(" (FlauBERT model)"),m5r=l(),TC=a("li"),h5e=a("strong"),g5r=o("funnel"),h5r=o(" \u2014 "),FX=a("a"),p5r=o("TFFunnelForTokenClassification"),_5r=o(" (Funnel Transformer model)"),u5r=l(),FC=a("li"),p5e=a("strong"),b5r=o("layoutlm"),v5r=o(" \u2014 "),CX=a("a"),T5r=o("TFLayoutLMForTokenClassification"),F5r=o(" (LayoutLM model)"),C5r=l(),CC=a("li"),_5e=a("strong"),M5r=o("longformer"),E5r=o(" \u2014 "),MX=a("a"),y5r=o("TFLongformerForTokenClassification"),w5r=o(" (Longformer model)"),A5r=l(),MC=a("li"),u5e=a("strong"),L5r=o("mobilebert"),B5r=o(" \u2014 "),EX=a("a"),x5r=o("TFMobileBertForTokenClassification"),k5r=o(" (MobileBERT model)"),R5r=l(),EC=a("li"),b5e=a("strong"),S5r=o("mpnet"),P5r=o(" \u2014 "),yX=a("a"),$5r=o("TFMPNetForTokenClassification"),I5r=o(" (MPNet model)"),N5r=l(),yC=a("li"),v5e=a("strong"),j5r=o("rembert"),D5r=o(" \u2014 "),wX=a("a"),q5r=o("TFRemBertForTokenClassification"),G5r=o(" (RemBERT model)"),O5r=l(),wC=a("li"),T5e=a("strong"),X5r=o("roberta"),V5r=o(" \u2014 "),AX=a("a"),z5r=o("TFRobertaForTokenClassification"),W5r=o(" (RoBERTa model)"),Q5r=l(),AC=a("li"),F5e=a("strong"),H5r=o("roformer"),U5r=o(" \u2014 "),LX=a("a"),J5r=o("TFRoFormerForTokenClassification"),Y5r=o(" (RoFormer model)"),K5r=l(),LC=a("li"),C5e=a("strong"),Z5r=o("xlm"),e2r=o(" \u2014 "),BX=a("a"),o2r=o("TFXLMForTokenClassification"),r2r=o(" (XLM model)"),t2r=l(),BC=a("li"),M5e=a("strong"),a2r=o("xlm-roberta"),n2r=o(" \u2014 "),xX=a("a"),s2r=o("TFXLMRobertaForTokenClassification"),l2r=o(" (XLM-RoBERTa model)"),i2r=l(),xC=a("li"),E5e=a("strong"),d2r=o("xlnet"),c2r=o(" \u2014 "),kX=a("a"),f2r=o("TFXLNetForTokenClassification"),m2r=o(" (XLNet model)"),g2r=l(),y5e=a("p"),h2r=o("Examples:"),p2r=l(),f(rL.$$.fragment),yRe=l(),Xc=a("h2"),kC=a("a"),w5e=a("span"),f(tL.$$.fragment),_2r=l(),A5e=a("span"),u2r=o("TFAutoModelForQuestionAnswering"),wRe=l(),Br=a("div"),f(aL.$$.fragment),b2r=l(),Vc=a("p"),v2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),L5e=a("code"),T2r=o("from_pretrained()"),F2r=o("class method or the "),B5e=a("code"),C2r=o("from_config()"),M2r=o(`class
method.`),E2r=l(),nL=a("p"),y2r=o("This class cannot be instantiated directly using "),x5e=a("code"),w2r=o("__init__()"),A2r=o(" (throws an error)."),L2r=l(),Mt=a("div"),f(sL.$$.fragment),B2r=l(),k5e=a("p"),x2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k2r=l(),zc=a("p"),R2r=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),S2r=o("not"),P2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),S5e=a("code"),$2r=o("from_pretrained()"),I2r=o("to load the model weights."),N2r=l(),P5e=a("p"),j2r=o("Examples:"),D2r=l(),f(lL.$$.fragment),q2r=l(),Eo=a("div"),f(iL.$$.fragment),G2r=l(),$5e=a("p"),O2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X2r=l(),wn=a("p"),V2r=o("The model class to instantiate is selected based on the "),I5e=a("code"),z2r=o("model_type"),W2r=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),Q2r=o("pretrained_model_name_or_path"),H2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=a("code"),U2r=o("pretrained_model_name_or_path"),J2r=o(":"),Y2r=l(),Z=a("ul"),RC=a("li"),D5e=a("strong"),K2r=o("albert"),Z2r=o(" \u2014 "),RX=a("a"),e1r=o("TFAlbertForQuestionAnswering"),o1r=o(" (ALBERT model)"),r1r=l(),SC=a("li"),q5e=a("strong"),t1r=o("bert"),a1r=o(" \u2014 "),SX=a("a"),n1r=o("TFBertForQuestionAnswering"),s1r=o(" (BERT model)"),l1r=l(),PC=a("li"),G5e=a("strong"),i1r=o("camembert"),d1r=o(" \u2014 "),PX=a("a"),c1r=o("TFCamembertForQuestionAnswering"),f1r=o(" (CamemBERT model)"),m1r=l(),$C=a("li"),O5e=a("strong"),g1r=o("convbert"),h1r=o(" \u2014 "),$X=a("a"),p1r=o("TFConvBertForQuestionAnswering"),_1r=o(" (ConvBERT model)"),u1r=l(),IC=a("li"),X5e=a("strong"),b1r=o("deberta"),v1r=o(" \u2014 "),IX=a("a"),T1r=o("TFDebertaForQuestionAnswering"),F1r=o(" (DeBERTa model)"),C1r=l(),NC=a("li"),V5e=a("strong"),M1r=o("deberta-v2"),E1r=o(" \u2014 "),NX=a("a"),y1r=o("TFDebertaV2ForQuestionAnswering"),w1r=o(" (DeBERTa-v2 model)"),A1r=l(),jC=a("li"),z5e=a("strong"),L1r=o("distilbert"),B1r=o(" \u2014 "),jX=a("a"),x1r=o("TFDistilBertForQuestionAnswering"),k1r=o(" (DistilBERT model)"),R1r=l(),DC=a("li"),W5e=a("strong"),S1r=o("electra"),P1r=o(" \u2014 "),DX=a("a"),$1r=o("TFElectraForQuestionAnswering"),I1r=o(" (ELECTRA model)"),N1r=l(),qC=a("li"),Q5e=a("strong"),j1r=o("flaubert"),D1r=o(" \u2014 "),qX=a("a"),q1r=o("TFFlaubertForQuestionAnsweringSimple"),G1r=o(" (FlauBERT model)"),O1r=l(),GC=a("li"),H5e=a("strong"),X1r=o("funnel"),V1r=o(" \u2014 "),GX=a("a"),z1r=o("TFFunnelForQuestionAnswering"),W1r=o(" (Funnel Transformer model)"),Q1r=l(),OC=a("li"),U5e=a("strong"),H1r=o("longformer"),U1r=o(" \u2014 "),OX=a("a"),J1r=o("TFLongformerForQuestionAnswering"),Y1r=o(" (Longformer model)"),K1r=l(),XC=a("li"),J5e=a("strong"),Z1r=o("mobilebert"),ebr=o(" \u2014 "),XX=a("a"),obr=o("TFMobileBertForQuestionAnswering"),rbr=o(" (MobileBERT model)"),tbr=l(),VC=a("li"),Y5e=a("strong"),abr=o("mpnet"),nbr=o(" \u2014 "),VX=a("a"),sbr=o("TFMPNetForQuestionAnswering"),lbr=o(" (MPNet model)"),ibr=l(),zC=a("li"),K5e=a("strong"),dbr=o("rembert"),cbr=o(" \u2014 "),zX=a("a"),fbr=o("TFRemBertForQuestionAnswering"),mbr=o(" (RemBERT model)"),gbr=l(),WC=a("li"),Z5e=a("strong"),hbr=o("roberta"),pbr=o(" \u2014 "),WX=a("a"),_br=o("TFRobertaForQuestionAnswering"),ubr=o(" (RoBERTa model)"),bbr=l(),QC=a("li"),e2e=a("strong"),vbr=o("roformer"),Tbr=o(" \u2014 "),QX=a("a"),Fbr=o("TFRoFormerForQuestionAnswering"),Cbr=o(" (RoFormer model)"),Mbr=l(),HC=a("li"),o2e=a("strong"),Ebr=o("xlm"),ybr=o(" \u2014 "),HX=a("a"),wbr=o("TFXLMForQuestionAnsweringSimple"),Abr=o(" (XLM model)"),Lbr=l(),UC=a("li"),r2e=a("strong"),Bbr=o("xlm-roberta"),xbr=o(" \u2014 "),UX=a("a"),kbr=o("TFXLMRobertaForQuestionAnswering"),Rbr=o(" (XLM-RoBERTa model)"),Sbr=l(),JC=a("li"),t2e=a("strong"),Pbr=o("xlnet"),$br=o(" \u2014 "),JX=a("a"),Ibr=o("TFXLNetForQuestionAnsweringSimple"),Nbr=o(" (XLNet model)"),jbr=l(),a2e=a("p"),Dbr=o("Examples:"),qbr=l(),f(dL.$$.fragment),ARe=l(),Wc=a("h2"),YC=a("a"),n2e=a("span"),f(cL.$$.fragment),Gbr=l(),s2e=a("span"),Obr=o("TFAutoModelForVision2Seq"),LRe=l(),xr=a("div"),f(fL.$$.fragment),Xbr=l(),Qc=a("p"),Vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),l2e=a("code"),zbr=o("from_pretrained()"),Wbr=o("class method or the "),i2e=a("code"),Qbr=o("from_config()"),Hbr=o(`class
method.`),Ubr=l(),mL=a("p"),Jbr=o("This class cannot be instantiated directly using "),d2e=a("code"),Ybr=o("__init__()"),Kbr=o(" (throws an error)."),Zbr=l(),Et=a("div"),f(gL.$$.fragment),evr=l(),c2e=a("p"),ovr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rvr=l(),Hc=a("p"),tvr=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),avr=o("not"),nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m2e=a("code"),svr=o("from_pretrained()"),lvr=o("to load the model weights."),ivr=l(),g2e=a("p"),dvr=o("Examples:"),cvr=l(),f(hL.$$.fragment),fvr=l(),yo=a("div"),f(pL.$$.fragment),mvr=l(),h2e=a("p"),gvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hvr=l(),An=a("p"),pvr=o("The model class to instantiate is selected based on the "),p2e=a("code"),_vr=o("model_type"),uvr=o(` property of the config object (either
passed as an argument or loaded from `),_2e=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),Tvr=o("pretrained_model_name_or_path"),Fvr=o(":"),Cvr=l(),b2e=a("ul"),KC=a("li"),v2e=a("strong"),Mvr=o("vision-encoder-decoder"),Evr=o(" \u2014 "),YX=a("a"),yvr=o("TFVisionEncoderDecoderModel"),wvr=o(" (Vision Encoder decoder model)"),Avr=l(),T2e=a("p"),Lvr=o("Examples:"),Bvr=l(),f(_L.$$.fragment),BRe=l(),Uc=a("h2"),ZC=a("a"),F2e=a("span"),f(uL.$$.fragment),xvr=l(),C2e=a("span"),kvr=o("TFAutoModelForSpeechSeq2Seq"),xRe=l(),kr=a("div"),f(bL.$$.fragment),Rvr=l(),Jc=a("p"),Svr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),M2e=a("code"),Pvr=o("from_pretrained()"),$vr=o("class method or the "),E2e=a("code"),Ivr=o("from_config()"),Nvr=o(`class
method.`),jvr=l(),vL=a("p"),Dvr=o("This class cannot be instantiated directly using "),y2e=a("code"),qvr=o("__init__()"),Gvr=o(" (throws an error)."),Ovr=l(),yt=a("div"),f(TL.$$.fragment),Xvr=l(),w2e=a("p"),Vvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zvr=l(),Yc=a("p"),Wvr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),Qvr=o("not"),Hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L2e=a("code"),Uvr=o("from_pretrained()"),Jvr=o("to load the model weights."),Yvr=l(),B2e=a("p"),Kvr=o("Examples:"),Zvr=l(),f(FL.$$.fragment),e6r=l(),wo=a("div"),f(CL.$$.fragment),o6r=l(),x2e=a("p"),r6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),t6r=l(),Ln=a("p"),a6r=o("The model class to instantiate is selected based on the "),k2e=a("code"),n6r=o("model_type"),s6r=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),l6r=o("pretrained_model_name_or_path"),i6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),d6r=o("pretrained_model_name_or_path"),c6r=o(":"),f6r=l(),P2e=a("ul"),eM=a("li"),$2e=a("strong"),m6r=o("speech_to_text"),g6r=o(" \u2014 "),KX=a("a"),h6r=o("TFSpeech2TextForConditionalGeneration"),p6r=o(" (Speech2Text model)"),_6r=l(),I2e=a("p"),u6r=o("Examples:"),b6r=l(),f(ML.$$.fragment),kRe=l(),Kc=a("h2"),oM=a("a"),N2e=a("span"),f(EL.$$.fragment),v6r=l(),j2e=a("span"),T6r=o("FlaxAutoModel"),RRe=l(),Rr=a("div"),f(yL.$$.fragment),F6r=l(),Zc=a("p"),C6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),D2e=a("code"),M6r=o("from_pretrained()"),E6r=o("class method or the "),q2e=a("code"),y6r=o("from_config()"),w6r=o(`class
method.`),A6r=l(),wL=a("p"),L6r=o("This class cannot be instantiated directly using "),G2e=a("code"),B6r=o("__init__()"),x6r=o(" (throws an error)."),k6r=l(),wt=a("div"),f(AL.$$.fragment),R6r=l(),O2e=a("p"),S6r=o("Instantiates one of the base model classes of the library from a configuration."),P6r=l(),ef=a("p"),$6r=o(`Note:
Loading a model from its configuration file does `),X2e=a("strong"),I6r=o("not"),N6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V2e=a("code"),j6r=o("from_pretrained()"),D6r=o("to load the model weights."),q6r=l(),z2e=a("p"),G6r=o("Examples:"),O6r=l(),f(LL.$$.fragment),X6r=l(),Ao=a("div"),f(BL.$$.fragment),V6r=l(),W2e=a("p"),z6r=o("Instantiate one of the base model classes of the library from a pretrained model."),W6r=l(),Bn=a("p"),Q6r=o("The model class to instantiate is selected based on the "),Q2e=a("code"),H6r=o("model_type"),U6r=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(":"),eTr=l(),z=a("ul"),rM=a("li"),J2e=a("strong"),oTr=o("albert"),rTr=o(" \u2014 "),ZX=a("a"),tTr=o("FlaxAlbertModel"),aTr=o(" (ALBERT model)"),nTr=l(),tM=a("li"),Y2e=a("strong"),sTr=o("bart"),lTr=o(" \u2014 "),eV=a("a"),iTr=o("FlaxBartModel"),dTr=o(" (BART model)"),cTr=l(),aM=a("li"),K2e=a("strong"),fTr=o("beit"),mTr=o(" \u2014 "),oV=a("a"),gTr=o("FlaxBeitModel"),hTr=o(" (BEiT model)"),pTr=l(),nM=a("li"),Z2e=a("strong"),_Tr=o("bert"),uTr=o(" \u2014 "),rV=a("a"),bTr=o("FlaxBertModel"),vTr=o(" (BERT model)"),TTr=l(),sM=a("li"),e1e=a("strong"),FTr=o("big_bird"),CTr=o(" \u2014 "),tV=a("a"),MTr=o("FlaxBigBirdModel"),ETr=o(" (BigBird model)"),yTr=l(),lM=a("li"),o1e=a("strong"),wTr=o("blenderbot"),ATr=o(" \u2014 "),aV=a("a"),LTr=o("FlaxBlenderbotModel"),BTr=o(" (Blenderbot model)"),xTr=l(),iM=a("li"),r1e=a("strong"),kTr=o("blenderbot-small"),RTr=o(" \u2014 "),nV=a("a"),STr=o("FlaxBlenderbotSmallModel"),PTr=o(" (BlenderbotSmall model)"),$Tr=l(),dM=a("li"),t1e=a("strong"),ITr=o("clip"),NTr=o(" \u2014 "),sV=a("a"),jTr=o("FlaxCLIPModel"),DTr=o(" (CLIP model)"),qTr=l(),cM=a("li"),a1e=a("strong"),GTr=o("distilbert"),OTr=o(" \u2014 "),lV=a("a"),XTr=o("FlaxDistilBertModel"),VTr=o(" (DistilBERT model)"),zTr=l(),fM=a("li"),n1e=a("strong"),WTr=o("electra"),QTr=o(" \u2014 "),iV=a("a"),HTr=o("FlaxElectraModel"),UTr=o(" (ELECTRA model)"),JTr=l(),mM=a("li"),s1e=a("strong"),YTr=o("gpt2"),KTr=o(" \u2014 "),dV=a("a"),ZTr=o("FlaxGPT2Model"),eFr=o(" (OpenAI GPT-2 model)"),oFr=l(),gM=a("li"),l1e=a("strong"),rFr=o("gpt_neo"),tFr=o(" \u2014 "),cV=a("a"),aFr=o("FlaxGPTNeoModel"),nFr=o(" (GPT Neo model)"),sFr=l(),hM=a("li"),i1e=a("strong"),lFr=o("gptj"),iFr=o(" \u2014 "),fV=a("a"),dFr=o("FlaxGPTJModel"),cFr=o(" (GPT-J model)"),fFr=l(),pM=a("li"),d1e=a("strong"),mFr=o("marian"),gFr=o(" \u2014 "),mV=a("a"),hFr=o("FlaxMarianModel"),pFr=o(" (Marian model)"),_Fr=l(),_M=a("li"),c1e=a("strong"),uFr=o("mbart"),bFr=o(" \u2014 "),gV=a("a"),vFr=o("FlaxMBartModel"),TFr=o(" (mBART model)"),FFr=l(),uM=a("li"),f1e=a("strong"),CFr=o("mt5"),MFr=o(" \u2014 "),hV=a("a"),EFr=o("FlaxMT5Model"),yFr=o(" (mT5 model)"),wFr=l(),bM=a("li"),m1e=a("strong"),AFr=o("pegasus"),LFr=o(" \u2014 "),pV=a("a"),BFr=o("FlaxPegasusModel"),xFr=o(" (Pegasus model)"),kFr=l(),vM=a("li"),g1e=a("strong"),RFr=o("roberta"),SFr=o(" \u2014 "),_V=a("a"),PFr=o("FlaxRobertaModel"),$Fr=o(" (RoBERTa model)"),IFr=l(),TM=a("li"),h1e=a("strong"),NFr=o("roformer"),jFr=o(" \u2014 "),uV=a("a"),DFr=o("FlaxRoFormerModel"),qFr=o(" (RoFormer model)"),GFr=l(),FM=a("li"),p1e=a("strong"),OFr=o("t5"),XFr=o(" \u2014 "),bV=a("a"),VFr=o("FlaxT5Model"),zFr=o(" (T5 model)"),WFr=l(),CM=a("li"),_1e=a("strong"),QFr=o("vision-text-dual-encoder"),HFr=o(" \u2014 "),vV=a("a"),UFr=o("FlaxVisionTextDualEncoderModel"),JFr=o(" (VisionTextDualEncoder model)"),YFr=l(),MM=a("li"),u1e=a("strong"),KFr=o("vit"),ZFr=o(" \u2014 "),TV=a("a"),eCr=o("FlaxViTModel"),oCr=o(" (ViT model)"),rCr=l(),EM=a("li"),b1e=a("strong"),tCr=o("wav2vec2"),aCr=o(" \u2014 "),FV=a("a"),nCr=o("FlaxWav2Vec2Model"),sCr=o(" (Wav2Vec2 model)"),lCr=l(),yM=a("li"),v1e=a("strong"),iCr=o("xglm"),dCr=o(" \u2014 "),CV=a("a"),cCr=o("FlaxXGLMModel"),fCr=o(" (XGLM model)"),mCr=l(),wM=a("li"),T1e=a("strong"),gCr=o("xlm-roberta"),hCr=o(" \u2014 "),MV=a("a"),pCr=o("FlaxXLMRobertaModel"),_Cr=o(" (XLM-RoBERTa model)"),uCr=l(),F1e=a("p"),bCr=o("Examples:"),vCr=l(),f(xL.$$.fragment),SRe=l(),of=a("h2"),AM=a("a"),C1e=a("span"),f(kL.$$.fragment),TCr=l(),M1e=a("span"),FCr=o("FlaxAutoModelForCausalLM"),PRe=l(),Sr=a("div"),f(RL.$$.fragment),CCr=l(),rf=a("p"),MCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),E1e=a("code"),ECr=o("from_pretrained()"),yCr=o("class method or the "),y1e=a("code"),wCr=o("from_config()"),ACr=o(`class
method.`),LCr=l(),SL=a("p"),BCr=o("This class cannot be instantiated directly using "),w1e=a("code"),xCr=o("__init__()"),kCr=o(" (throws an error)."),RCr=l(),At=a("div"),f(PL.$$.fragment),SCr=l(),A1e=a("p"),PCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Cr=l(),tf=a("p"),ICr=o(`Note:
Loading a model from its configuration file does `),L1e=a("strong"),NCr=o("not"),jCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B1e=a("code"),DCr=o("from_pretrained()"),qCr=o("to load the model weights."),GCr=l(),x1e=a("p"),OCr=o("Examples:"),XCr=l(),f($L.$$.fragment),VCr=l(),Lo=a("div"),f(IL.$$.fragment),zCr=l(),k1e=a("p"),WCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QCr=l(),xn=a("p"),HCr=o("The model class to instantiate is selected based on the "),R1e=a("code"),UCr=o("model_type"),JCr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),ZCr=o("pretrained_model_name_or_path"),eMr=o(":"),oMr=l(),ca=a("ul"),LM=a("li"),$1e=a("strong"),rMr=o("bart"),tMr=o(" \u2014 "),EV=a("a"),aMr=o("FlaxBartForCausalLM"),nMr=o(" (BART model)"),sMr=l(),BM=a("li"),I1e=a("strong"),lMr=o("gpt2"),iMr=o(" \u2014 "),yV=a("a"),dMr=o("FlaxGPT2LMHeadModel"),cMr=o(" (OpenAI GPT-2 model)"),fMr=l(),xM=a("li"),N1e=a("strong"),mMr=o("gpt_neo"),gMr=o(" \u2014 "),wV=a("a"),hMr=o("FlaxGPTNeoForCausalLM"),pMr=o(" (GPT Neo model)"),_Mr=l(),kM=a("li"),j1e=a("strong"),uMr=o("gptj"),bMr=o(" \u2014 "),AV=a("a"),vMr=o("FlaxGPTJForCausalLM"),TMr=o(" (GPT-J model)"),FMr=l(),RM=a("li"),D1e=a("strong"),CMr=o("xglm"),MMr=o(" \u2014 "),LV=a("a"),EMr=o("FlaxXGLMForCausalLM"),yMr=o(" (XGLM model)"),wMr=l(),q1e=a("p"),AMr=o("Examples:"),LMr=l(),f(NL.$$.fragment),$Re=l(),af=a("h2"),SM=a("a"),G1e=a("span"),f(jL.$$.fragment),BMr=l(),O1e=a("span"),xMr=o("FlaxAutoModelForPreTraining"),IRe=l(),Pr=a("div"),f(DL.$$.fragment),kMr=l(),nf=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),X1e=a("code"),SMr=o("from_pretrained()"),PMr=o("class method or the "),V1e=a("code"),$Mr=o("from_config()"),IMr=o(`class
method.`),NMr=l(),qL=a("p"),jMr=o("This class cannot be instantiated directly using "),z1e=a("code"),DMr=o("__init__()"),qMr=o(" (throws an error)."),GMr=l(),Lt=a("div"),f(GL.$$.fragment),OMr=l(),W1e=a("p"),XMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VMr=l(),sf=a("p"),zMr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),WMr=o("not"),QMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H1e=a("code"),HMr=o("from_pretrained()"),UMr=o("to load the model weights."),JMr=l(),U1e=a("p"),YMr=o("Examples:"),KMr=l(),f(OL.$$.fragment),ZMr=l(),Bo=a("div"),f(XL.$$.fragment),e4r=l(),J1e=a("p"),o4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r4r=l(),kn=a("p"),t4r=o("The model class to instantiate is selected based on the "),Y1e=a("code"),a4r=o("model_type"),n4r=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(":"),c4r=l(),ce=a("ul"),PM=a("li"),ebe=a("strong"),f4r=o("albert"),m4r=o(" \u2014 "),BV=a("a"),g4r=o("FlaxAlbertForPreTraining"),h4r=o(" (ALBERT model)"),p4r=l(),$M=a("li"),obe=a("strong"),_4r=o("bart"),u4r=o(" \u2014 "),xV=a("a"),b4r=o("FlaxBartForConditionalGeneration"),v4r=o(" (BART model)"),T4r=l(),IM=a("li"),rbe=a("strong"),F4r=o("bert"),C4r=o(" \u2014 "),kV=a("a"),M4r=o("FlaxBertForPreTraining"),E4r=o(" (BERT model)"),y4r=l(),NM=a("li"),tbe=a("strong"),w4r=o("big_bird"),A4r=o(" \u2014 "),RV=a("a"),L4r=o("FlaxBigBirdForPreTraining"),B4r=o(" (BigBird model)"),x4r=l(),jM=a("li"),abe=a("strong"),k4r=o("electra"),R4r=o(" \u2014 "),SV=a("a"),S4r=o("FlaxElectraForPreTraining"),P4r=o(" (ELECTRA model)"),$4r=l(),DM=a("li"),nbe=a("strong"),I4r=o("mbart"),N4r=o(" \u2014 "),PV=a("a"),j4r=o("FlaxMBartForConditionalGeneration"),D4r=o(" (mBART model)"),q4r=l(),qM=a("li"),sbe=a("strong"),G4r=o("mt5"),O4r=o(" \u2014 "),$V=a("a"),X4r=o("FlaxMT5ForConditionalGeneration"),V4r=o(" (mT5 model)"),z4r=l(),GM=a("li"),lbe=a("strong"),W4r=o("roberta"),Q4r=o(" \u2014 "),IV=a("a"),H4r=o("FlaxRobertaForMaskedLM"),U4r=o(" (RoBERTa model)"),J4r=l(),OM=a("li"),ibe=a("strong"),Y4r=o("roformer"),K4r=o(" \u2014 "),NV=a("a"),Z4r=o("FlaxRoFormerForMaskedLM"),eEr=o(" (RoFormer model)"),oEr=l(),XM=a("li"),dbe=a("strong"),rEr=o("t5"),tEr=o(" \u2014 "),jV=a("a"),aEr=o("FlaxT5ForConditionalGeneration"),nEr=o(" (T5 model)"),sEr=l(),VM=a("li"),cbe=a("strong"),lEr=o("wav2vec2"),iEr=o(" \u2014 "),DV=a("a"),dEr=o("FlaxWav2Vec2ForPreTraining"),cEr=o(" (Wav2Vec2 model)"),fEr=l(),zM=a("li"),fbe=a("strong"),mEr=o("xlm-roberta"),gEr=o(" \u2014 "),qV=a("a"),hEr=o("FlaxXLMRobertaForMaskedLM"),pEr=o(" (XLM-RoBERTa model)"),_Er=l(),mbe=a("p"),uEr=o("Examples:"),bEr=l(),f(VL.$$.fragment),NRe=l(),lf=a("h2"),WM=a("a"),gbe=a("span"),f(zL.$$.fragment),vEr=l(),hbe=a("span"),TEr=o("FlaxAutoModelForMaskedLM"),jRe=l(),$r=a("div"),f(WL.$$.fragment),FEr=l(),df=a("p"),CEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pbe=a("code"),MEr=o("from_pretrained()"),EEr=o("class method or the "),_be=a("code"),yEr=o("from_config()"),wEr=o(`class
method.`),AEr=l(),QL=a("p"),LEr=o("This class cannot be instantiated directly using "),ube=a("code"),BEr=o("__init__()"),xEr=o(" (throws an error)."),kEr=l(),Bt=a("div"),f(HL.$$.fragment),REr=l(),bbe=a("p"),SEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PEr=l(),cf=a("p"),$Er=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),IEr=o("not"),NEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tbe=a("code"),jEr=o("from_pretrained()"),DEr=o("to load the model weights."),qEr=l(),Fbe=a("p"),GEr=o("Examples:"),OEr=l(),f(UL.$$.fragment),XEr=l(),xo=a("div"),f(JL.$$.fragment),VEr=l(),Cbe=a("p"),zEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WEr=l(),Rn=a("p"),QEr=o("The model class to instantiate is selected based on the "),Mbe=a("code"),HEr=o("model_type"),UEr=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),KEr=o("pretrained_model_name_or_path"),ZEr=o(":"),e3r=l(),be=a("ul"),QM=a("li"),wbe=a("strong"),o3r=o("albert"),r3r=o(" \u2014 "),GV=a("a"),t3r=o("FlaxAlbertForMaskedLM"),a3r=o(" (ALBERT model)"),n3r=l(),HM=a("li"),Abe=a("strong"),s3r=o("bart"),l3r=o(" \u2014 "),OV=a("a"),i3r=o("FlaxBartForConditionalGeneration"),d3r=o(" (BART model)"),c3r=l(),UM=a("li"),Lbe=a("strong"),f3r=o("bert"),m3r=o(" \u2014 "),XV=a("a"),g3r=o("FlaxBertForMaskedLM"),h3r=o(" (BERT model)"),p3r=l(),JM=a("li"),Bbe=a("strong"),_3r=o("big_bird"),u3r=o(" \u2014 "),VV=a("a"),b3r=o("FlaxBigBirdForMaskedLM"),v3r=o(" (BigBird model)"),T3r=l(),YM=a("li"),xbe=a("strong"),F3r=o("distilbert"),C3r=o(" \u2014 "),zV=a("a"),M3r=o("FlaxDistilBertForMaskedLM"),E3r=o(" (DistilBERT model)"),y3r=l(),KM=a("li"),kbe=a("strong"),w3r=o("electra"),A3r=o(" \u2014 "),WV=a("a"),L3r=o("FlaxElectraForMaskedLM"),B3r=o(" (ELECTRA model)"),x3r=l(),ZM=a("li"),Rbe=a("strong"),k3r=o("mbart"),R3r=o(" \u2014 "),QV=a("a"),S3r=o("FlaxMBartForConditionalGeneration"),P3r=o(" (mBART model)"),$3r=l(),e4=a("li"),Sbe=a("strong"),I3r=o("roberta"),N3r=o(" \u2014 "),HV=a("a"),j3r=o("FlaxRobertaForMaskedLM"),D3r=o(" (RoBERTa model)"),q3r=l(),o4=a("li"),Pbe=a("strong"),G3r=o("roformer"),O3r=o(" \u2014 "),UV=a("a"),X3r=o("FlaxRoFormerForMaskedLM"),V3r=o(" (RoFormer model)"),z3r=l(),r4=a("li"),$be=a("strong"),W3r=o("xlm-roberta"),Q3r=o(" \u2014 "),JV=a("a"),H3r=o("FlaxXLMRobertaForMaskedLM"),U3r=o(" (XLM-RoBERTa model)"),J3r=l(),Ibe=a("p"),Y3r=o("Examples:"),K3r=l(),f(YL.$$.fragment),DRe=l(),ff=a("h2"),t4=a("a"),Nbe=a("span"),f(KL.$$.fragment),Z3r=l(),jbe=a("span"),eyr=o("FlaxAutoModelForSeq2SeqLM"),qRe=l(),Ir=a("div"),f(ZL.$$.fragment),oyr=l(),mf=a("p"),ryr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dbe=a("code"),tyr=o("from_pretrained()"),ayr=o("class method or the "),qbe=a("code"),nyr=o("from_config()"),syr=o(`class
method.`),lyr=l(),e8=a("p"),iyr=o("This class cannot be instantiated directly using "),Gbe=a("code"),dyr=o("__init__()"),cyr=o(" (throws an error)."),fyr=l(),xt=a("div"),f(o8.$$.fragment),myr=l(),Obe=a("p"),gyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hyr=l(),gf=a("p"),pyr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),_yr=o("not"),uyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vbe=a("code"),byr=o("from_pretrained()"),vyr=o("to load the model weights."),Tyr=l(),zbe=a("p"),Fyr=o("Examples:"),Cyr=l(),f(r8.$$.fragment),Myr=l(),ko=a("div"),f(t8.$$.fragment),Eyr=l(),Wbe=a("p"),yyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wyr=l(),Sn=a("p"),Ayr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),Lyr=o("model_type"),Byr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),xyr=o("pretrained_model_name_or_path"),kyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),Ryr=o("pretrained_model_name_or_path"),Syr=o(":"),Pyr=l(),Ee=a("ul"),a4=a("li"),Jbe=a("strong"),$yr=o("bart"),Iyr=o(" \u2014 "),YV=a("a"),Nyr=o("FlaxBartForConditionalGeneration"),jyr=o(" (BART model)"),Dyr=l(),n4=a("li"),Ybe=a("strong"),qyr=o("blenderbot"),Gyr=o(" \u2014 "),KV=a("a"),Oyr=o("FlaxBlenderbotForConditionalGeneration"),Xyr=o(" (Blenderbot model)"),Vyr=l(),s4=a("li"),Kbe=a("strong"),zyr=o("blenderbot-small"),Wyr=o(" \u2014 "),ZV=a("a"),Qyr=o("FlaxBlenderbotSmallForConditionalGeneration"),Hyr=o(" (BlenderbotSmall model)"),Uyr=l(),l4=a("li"),Zbe=a("strong"),Jyr=o("encoder-decoder"),Yyr=o(" \u2014 "),ez=a("a"),Kyr=o("FlaxEncoderDecoderModel"),Zyr=o(" (Encoder decoder model)"),ewr=l(),i4=a("li"),eve=a("strong"),owr=o("marian"),rwr=o(" \u2014 "),oz=a("a"),twr=o("FlaxMarianMTModel"),awr=o(" (Marian model)"),nwr=l(),d4=a("li"),ove=a("strong"),swr=o("mbart"),lwr=o(" \u2014 "),rz=a("a"),iwr=o("FlaxMBartForConditionalGeneration"),dwr=o(" (mBART model)"),cwr=l(),c4=a("li"),rve=a("strong"),fwr=o("mt5"),mwr=o(" \u2014 "),tz=a("a"),gwr=o("FlaxMT5ForConditionalGeneration"),hwr=o(" (mT5 model)"),pwr=l(),f4=a("li"),tve=a("strong"),_wr=o("pegasus"),uwr=o(" \u2014 "),az=a("a"),bwr=o("FlaxPegasusForConditionalGeneration"),vwr=o(" (Pegasus model)"),Twr=l(),m4=a("li"),ave=a("strong"),Fwr=o("t5"),Cwr=o(" \u2014 "),nz=a("a"),Mwr=o("FlaxT5ForConditionalGeneration"),Ewr=o(" (T5 model)"),ywr=l(),nve=a("p"),wwr=o("Examples:"),Awr=l(),f(a8.$$.fragment),GRe=l(),hf=a("h2"),g4=a("a"),sve=a("span"),f(n8.$$.fragment),Lwr=l(),lve=a("span"),Bwr=o("FlaxAutoModelForSequenceClassification"),ORe=l(),Nr=a("div"),f(s8.$$.fragment),xwr=l(),pf=a("p"),kwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ive=a("code"),Rwr=o("from_pretrained()"),Swr=o("class method or the "),dve=a("code"),Pwr=o("from_config()"),$wr=o(`class
method.`),Iwr=l(),l8=a("p"),Nwr=o("This class cannot be instantiated directly using "),cve=a("code"),jwr=o("__init__()"),Dwr=o(" (throws an error)."),qwr=l(),kt=a("div"),f(i8.$$.fragment),Gwr=l(),fve=a("p"),Owr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xwr=l(),_f=a("p"),Vwr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),zwr=o("not"),Wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gve=a("code"),Qwr=o("from_pretrained()"),Hwr=o("to load the model weights."),Uwr=l(),hve=a("p"),Jwr=o("Examples:"),Ywr=l(),f(d8.$$.fragment),Kwr=l(),Ro=a("div"),f(c8.$$.fragment),Zwr=l(),pve=a("p"),eAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oAr=l(),Pn=a("p"),rAr=o("The model class to instantiate is selected based on the "),_ve=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),ve=a("ul"),h4=a("li"),vve=a("strong"),cAr=o("albert"),fAr=o(" \u2014 "),sz=a("a"),mAr=o("FlaxAlbertForSequenceClassification"),gAr=o(" (ALBERT model)"),hAr=l(),p4=a("li"),Tve=a("strong"),pAr=o("bart"),_Ar=o(" \u2014 "),lz=a("a"),uAr=o("FlaxBartForSequenceClassification"),bAr=o(" (BART model)"),vAr=l(),_4=a("li"),Fve=a("strong"),TAr=o("bert"),FAr=o(" \u2014 "),iz=a("a"),CAr=o("FlaxBertForSequenceClassification"),MAr=o(" (BERT model)"),EAr=l(),u4=a("li"),Cve=a("strong"),yAr=o("big_bird"),wAr=o(" \u2014 "),dz=a("a"),AAr=o("FlaxBigBirdForSequenceClassification"),LAr=o(" (BigBird model)"),BAr=l(),b4=a("li"),Mve=a("strong"),xAr=o("distilbert"),kAr=o(" \u2014 "),cz=a("a"),RAr=o("FlaxDistilBertForSequenceClassification"),SAr=o(" (DistilBERT model)"),PAr=l(),v4=a("li"),Eve=a("strong"),$Ar=o("electra"),IAr=o(" \u2014 "),fz=a("a"),NAr=o("FlaxElectraForSequenceClassification"),jAr=o(" (ELECTRA model)"),DAr=l(),T4=a("li"),yve=a("strong"),qAr=o("mbart"),GAr=o(" \u2014 "),mz=a("a"),OAr=o("FlaxMBartForSequenceClassification"),XAr=o(" (mBART model)"),VAr=l(),F4=a("li"),wve=a("strong"),zAr=o("roberta"),WAr=o(" \u2014 "),gz=a("a"),QAr=o("FlaxRobertaForSequenceClassification"),HAr=o(" (RoBERTa model)"),UAr=l(),C4=a("li"),Ave=a("strong"),JAr=o("roformer"),YAr=o(" \u2014 "),hz=a("a"),KAr=o("FlaxRoFormerForSequenceClassification"),ZAr=o(" (RoFormer model)"),e0r=l(),M4=a("li"),Lve=a("strong"),o0r=o("xlm-roberta"),r0r=o(" \u2014 "),pz=a("a"),t0r=o("FlaxXLMRobertaForSequenceClassification"),a0r=o(" (XLM-RoBERTa model)"),n0r=l(),Bve=a("p"),s0r=o("Examples:"),l0r=l(),f(f8.$$.fragment),XRe=l(),uf=a("h2"),E4=a("a"),xve=a("span"),f(m8.$$.fragment),i0r=l(),kve=a("span"),d0r=o("FlaxAutoModelForQuestionAnswering"),VRe=l(),jr=a("div"),f(g8.$$.fragment),c0r=l(),bf=a("p"),f0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Rve=a("code"),m0r=o("from_pretrained()"),g0r=o("class method or the "),Sve=a("code"),h0r=o("from_config()"),p0r=o(`class
method.`),_0r=l(),h8=a("p"),u0r=o("This class cannot be instantiated directly using "),Pve=a("code"),b0r=o("__init__()"),v0r=o(" (throws an error)."),T0r=l(),Rt=a("div"),f(p8.$$.fragment),F0r=l(),$ve=a("p"),C0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M0r=l(),vf=a("p"),E0r=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),y0r=o("not"),w0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nve=a("code"),A0r=o("from_pretrained()"),L0r=o("to load the model weights."),B0r=l(),jve=a("p"),x0r=o("Examples:"),k0r=l(),f(_8.$$.fragment),R0r=l(),So=a("div"),f(u8.$$.fragment),S0r=l(),Dve=a("p"),P0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$0r=l(),$n=a("p"),I0r=o("The model class to instantiate is selected based on the "),qve=a("code"),N0r=o("model_type"),j0r=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),D0r=o("pretrained_model_name_or_path"),q0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(":"),X0r=l(),Te=a("ul"),y4=a("li"),Xve=a("strong"),V0r=o("albert"),z0r=o(" \u2014 "),_z=a("a"),W0r=o("FlaxAlbertForQuestionAnswering"),Q0r=o(" (ALBERT model)"),H0r=l(),w4=a("li"),Vve=a("strong"),U0r=o("bart"),J0r=o(" \u2014 "),uz=a("a"),Y0r=o("FlaxBartForQuestionAnswering"),K0r=o(" (BART model)"),Z0r=l(),A4=a("li"),zve=a("strong"),eLr=o("bert"),oLr=o(" \u2014 "),bz=a("a"),rLr=o("FlaxBertForQuestionAnswering"),tLr=o(" (BERT model)"),aLr=l(),L4=a("li"),Wve=a("strong"),nLr=o("big_bird"),sLr=o(" \u2014 "),vz=a("a"),lLr=o("FlaxBigBirdForQuestionAnswering"),iLr=o(" (BigBird model)"),dLr=l(),B4=a("li"),Qve=a("strong"),cLr=o("distilbert"),fLr=o(" \u2014 "),Tz=a("a"),mLr=o("FlaxDistilBertForQuestionAnswering"),gLr=o(" (DistilBERT model)"),hLr=l(),x4=a("li"),Hve=a("strong"),pLr=o("electra"),_Lr=o(" \u2014 "),Fz=a("a"),uLr=o("FlaxElectraForQuestionAnswering"),bLr=o(" (ELECTRA model)"),vLr=l(),k4=a("li"),Uve=a("strong"),TLr=o("mbart"),FLr=o(" \u2014 "),Cz=a("a"),CLr=o("FlaxMBartForQuestionAnswering"),MLr=o(" (mBART model)"),ELr=l(),R4=a("li"),Jve=a("strong"),yLr=o("roberta"),wLr=o(" \u2014 "),Mz=a("a"),ALr=o("FlaxRobertaForQuestionAnswering"),LLr=o(" (RoBERTa model)"),BLr=l(),S4=a("li"),Yve=a("strong"),xLr=o("roformer"),kLr=o(" \u2014 "),Ez=a("a"),RLr=o("FlaxRoFormerForQuestionAnswering"),SLr=o(" (RoFormer model)"),PLr=l(),P4=a("li"),Kve=a("strong"),$Lr=o("xlm-roberta"),ILr=o(" \u2014 "),yz=a("a"),NLr=o("FlaxXLMRobertaForQuestionAnswering"),jLr=o(" (XLM-RoBERTa model)"),DLr=l(),Zve=a("p"),qLr=o("Examples:"),GLr=l(),f(b8.$$.fragment),zRe=l(),Tf=a("h2"),$4=a("a"),e6e=a("span"),f(v8.$$.fragment),OLr=l(),o6e=a("span"),XLr=o("FlaxAutoModelForTokenClassification"),WRe=l(),Dr=a("div"),f(T8.$$.fragment),VLr=l(),Ff=a("p"),zLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),r6e=a("code"),WLr=o("from_pretrained()"),QLr=o("class method or the "),t6e=a("code"),HLr=o("from_config()"),ULr=o(`class
method.`),JLr=l(),F8=a("p"),YLr=o("This class cannot be instantiated directly using "),a6e=a("code"),KLr=o("__init__()"),ZLr=o(" (throws an error)."),e8r=l(),St=a("div"),f(C8.$$.fragment),o8r=l(),n6e=a("p"),r8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t8r=l(),Cf=a("p"),a8r=o(`Note:
Loading a model from its configuration file does `),s6e=a("strong"),n8r=o("not"),s8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l6e=a("code"),l8r=o("from_pretrained()"),i8r=o("to load the model weights."),d8r=l(),i6e=a("p"),c8r=o("Examples:"),f8r=l(),f(M8.$$.fragment),m8r=l(),Po=a("div"),f(E8.$$.fragment),g8r=l(),d6e=a("p"),h8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p8r=l(),In=a("p"),_8r=o("The model class to instantiate is selected based on the "),c6e=a("code"),u8r=o("model_type"),b8r=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),v8r=o("pretrained_model_name_or_path"),T8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=a("code"),F8r=o("pretrained_model_name_or_path"),C8r=o(":"),M8r=l(),Se=a("ul"),I4=a("li"),g6e=a("strong"),E8r=o("albert"),y8r=o(" \u2014 "),wz=a("a"),w8r=o("FlaxAlbertForTokenClassification"),A8r=o(" (ALBERT model)"),L8r=l(),N4=a("li"),h6e=a("strong"),B8r=o("bert"),x8r=o(" \u2014 "),Az=a("a"),k8r=o("FlaxBertForTokenClassification"),R8r=o(" (BERT model)"),S8r=l(),j4=a("li"),p6e=a("strong"),P8r=o("big_bird"),$8r=o(" \u2014 "),Lz=a("a"),I8r=o("FlaxBigBirdForTokenClassification"),N8r=o(" (BigBird model)"),j8r=l(),D4=a("li"),_6e=a("strong"),D8r=o("distilbert"),q8r=o(" \u2014 "),Bz=a("a"),G8r=o("FlaxDistilBertForTokenClassification"),O8r=o(" (DistilBERT model)"),X8r=l(),q4=a("li"),u6e=a("strong"),V8r=o("electra"),z8r=o(" \u2014 "),xz=a("a"),W8r=o("FlaxElectraForTokenClassification"),Q8r=o(" (ELECTRA model)"),H8r=l(),G4=a("li"),b6e=a("strong"),U8r=o("roberta"),J8r=o(" \u2014 "),kz=a("a"),Y8r=o("FlaxRobertaForTokenClassification"),K8r=o(" (RoBERTa model)"),Z8r=l(),O4=a("li"),v6e=a("strong"),e7r=o("roformer"),o7r=o(" \u2014 "),Rz=a("a"),r7r=o("FlaxRoFormerForTokenClassification"),t7r=o(" (RoFormer model)"),a7r=l(),X4=a("li"),T6e=a("strong"),n7r=o("xlm-roberta"),s7r=o(" \u2014 "),Sz=a("a"),l7r=o("FlaxXLMRobertaForTokenClassification"),i7r=o(" (XLM-RoBERTa model)"),d7r=l(),F6e=a("p"),c7r=o("Examples:"),f7r=l(),f(y8.$$.fragment),QRe=l(),Mf=a("h2"),V4=a("a"),C6e=a("span"),f(w8.$$.fragment),m7r=l(),M6e=a("span"),g7r=o("FlaxAutoModelForMultipleChoice"),HRe=l(),qr=a("div"),f(A8.$$.fragment),h7r=l(),Ef=a("p"),p7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),E6e=a("code"),_7r=o("from_pretrained()"),u7r=o("class method or the "),y6e=a("code"),b7r=o("from_config()"),v7r=o(`class
method.`),T7r=l(),L8=a("p"),F7r=o("This class cannot be instantiated directly using "),w6e=a("code"),C7r=o("__init__()"),M7r=o(" (throws an error)."),E7r=l(),Pt=a("div"),f(B8.$$.fragment),y7r=l(),A6e=a("p"),w7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A7r=l(),yf=a("p"),L7r=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),B7r=o("not"),x7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=a("code"),k7r=o("from_pretrained()"),R7r=o("to load the model weights."),S7r=l(),x6e=a("p"),P7r=o("Examples:"),$7r=l(),f(x8.$$.fragment),I7r=l(),$o=a("div"),f(k8.$$.fragment),N7r=l(),k6e=a("p"),j7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D7r=l(),Nn=a("p"),q7r=o("The model class to instantiate is selected based on the "),R6e=a("code"),G7r=o("model_type"),O7r=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),X7r=o("pretrained_model_name_or_path"),V7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(":"),Q7r=l(),Pe=a("ul"),z4=a("li"),$6e=a("strong"),H7r=o("albert"),U7r=o(" \u2014 "),Pz=a("a"),J7r=o("FlaxAlbertForMultipleChoice"),Y7r=o(" (ALBERT model)"),K7r=l(),W4=a("li"),I6e=a("strong"),Z7r=o("bert"),e9r=o(" \u2014 "),$z=a("a"),o9r=o("FlaxBertForMultipleChoice"),r9r=o(" (BERT model)"),t9r=l(),Q4=a("li"),N6e=a("strong"),a9r=o("big_bird"),n9r=o(" \u2014 "),Iz=a("a"),s9r=o("FlaxBigBirdForMultipleChoice"),l9r=o(" (BigBird model)"),i9r=l(),H4=a("li"),j6e=a("strong"),d9r=o("distilbert"),c9r=o(" \u2014 "),Nz=a("a"),f9r=o("FlaxDistilBertForMultipleChoice"),m9r=o(" (DistilBERT model)"),g9r=l(),U4=a("li"),D6e=a("strong"),h9r=o("electra"),p9r=o(" \u2014 "),jz=a("a"),_9r=o("FlaxElectraForMultipleChoice"),u9r=o(" (ELECTRA model)"),b9r=l(),J4=a("li"),q6e=a("strong"),v9r=o("roberta"),T9r=o(" \u2014 "),Dz=a("a"),F9r=o("FlaxRobertaForMultipleChoice"),C9r=o(" (RoBERTa model)"),M9r=l(),Y4=a("li"),G6e=a("strong"),E9r=o("roformer"),y9r=o(" \u2014 "),qz=a("a"),w9r=o("FlaxRoFormerForMultipleChoice"),A9r=o(" (RoFormer model)"),L9r=l(),K4=a("li"),O6e=a("strong"),B9r=o("xlm-roberta"),x9r=o(" \u2014 "),Gz=a("a"),k9r=o("FlaxXLMRobertaForMultipleChoice"),R9r=o(" (XLM-RoBERTa model)"),S9r=l(),X6e=a("p"),P9r=o("Examples:"),$9r=l(),f(R8.$$.fragment),URe=l(),wf=a("h2"),Z4=a("a"),V6e=a("span"),f(S8.$$.fragment),I9r=l(),z6e=a("span"),N9r=o("FlaxAutoModelForNextSentencePrediction"),JRe=l(),Gr=a("div"),f(P8.$$.fragment),j9r=l(),Af=a("p"),D9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),W6e=a("code"),q9r=o("from_pretrained()"),G9r=o("class method or the "),Q6e=a("code"),O9r=o("from_config()"),X9r=o(`class
method.`),V9r=l(),$8=a("p"),z9r=o("This class cannot be instantiated directly using "),H6e=a("code"),W9r=o("__init__()"),Q9r=o(" (throws an error)."),H9r=l(),$t=a("div"),f(I8.$$.fragment),U9r=l(),U6e=a("p"),J9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Y9r=l(),Lf=a("p"),K9r=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),Z9r=o("not"),eBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y6e=a("code"),oBr=o("from_pretrained()"),rBr=o("to load the model weights."),tBr=l(),K6e=a("p"),aBr=o("Examples:"),nBr=l(),f(N8.$$.fragment),sBr=l(),Io=a("div"),f(j8.$$.fragment),lBr=l(),Z6e=a("p"),iBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dBr=l(),jn=a("p"),cBr=o("The model class to instantiate is selected based on the "),eTe=a("code"),fBr=o("model_type"),mBr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),pBr=o("pretrained_model_name_or_path"),_Br=o(":"),uBr=l(),tTe=a("ul"),eE=a("li"),aTe=a("strong"),bBr=o("bert"),vBr=o(" \u2014 "),Oz=a("a"),TBr=o("FlaxBertForNextSentencePrediction"),FBr=o(" (BERT model)"),CBr=l(),nTe=a("p"),MBr=o("Examples:"),EBr=l(),f(D8.$$.fragment),YRe=l(),Bf=a("h2"),oE=a("a"),sTe=a("span"),f(q8.$$.fragment),yBr=l(),lTe=a("span"),wBr=o("FlaxAutoModelForImageClassification"),KRe=l(),Or=a("div"),f(G8.$$.fragment),ABr=l(),xf=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iTe=a("code"),BBr=o("from_pretrained()"),xBr=o("class method or the "),dTe=a("code"),kBr=o("from_config()"),RBr=o(`class
method.`),SBr=l(),O8=a("p"),PBr=o("This class cannot be instantiated directly using "),cTe=a("code"),$Br=o("__init__()"),IBr=o(" (throws an error)."),NBr=l(),It=a("div"),f(X8.$$.fragment),jBr=l(),fTe=a("p"),DBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qBr=l(),kf=a("p"),GBr=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),OBr=o("not"),XBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gTe=a("code"),VBr=o("from_pretrained()"),zBr=o("to load the model weights."),WBr=l(),hTe=a("p"),QBr=o("Examples:"),HBr=l(),f(V8.$$.fragment),UBr=l(),No=a("div"),f(z8.$$.fragment),JBr=l(),pTe=a("p"),YBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KBr=l(),Dn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),_Te=a("code"),exr=o("model_type"),oxr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(":"),sxr=l(),W8=a("ul"),rE=a("li"),vTe=a("strong"),lxr=o("beit"),ixr=o(" \u2014 "),Xz=a("a"),dxr=o("FlaxBeitForImageClassification"),cxr=o(" (BEiT model)"),fxr=l(),tE=a("li"),TTe=a("strong"),mxr=o("vit"),gxr=o(" \u2014 "),Vz=a("a"),hxr=o("FlaxViTForImageClassification"),pxr=o(" (ViT model)"),_xr=l(),FTe=a("p"),uxr=o("Examples:"),bxr=l(),f(Q8.$$.fragment),ZRe=l(),Rf=a("h2"),aE=a("a"),CTe=a("span"),f(H8.$$.fragment),vxr=l(),MTe=a("span"),Txr=o("FlaxAutoModelForVision2Seq"),eSe=l(),Xr=a("div"),f(U8.$$.fragment),Fxr=l(),Sf=a("p"),Cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ETe=a("code"),Mxr=o("from_pretrained()"),Exr=o("class method or the "),yTe=a("code"),yxr=o("from_config()"),wxr=o(`class
method.`),Axr=l(),J8=a("p"),Lxr=o("This class cannot be instantiated directly using "),wTe=a("code"),Bxr=o("__init__()"),xxr=o(" (throws an error)."),kxr=l(),Nt=a("div"),f(Y8.$$.fragment),Rxr=l(),ATe=a("p"),Sxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pxr=l(),Pf=a("p"),$xr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),Ixr=o("not"),Nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BTe=a("code"),jxr=o("from_pretrained()"),Dxr=o("to load the model weights."),qxr=l(),xTe=a("p"),Gxr=o("Examples:"),Oxr=l(),f(K8.$$.fragment),Xxr=l(),jo=a("div"),f(Z8.$$.fragment),Vxr=l(),kTe=a("p"),zxr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wxr=l(),qn=a("p"),Qxr=o("The model class to instantiate is selected based on the "),RTe=a("code"),Hxr=o("model_type"),Uxr=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),Jxr=o("pretrained_model_name_or_path"),Yxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(":"),ekr=l(),$Te=a("ul"),nE=a("li"),ITe=a("strong"),okr=o("vision-encoder-decoder"),rkr=o(" \u2014 "),zz=a("a"),tkr=o("FlaxVisionEncoderDecoderModel"),akr=o(" (Vision Encoder decoder model)"),nkr=l(),NTe=a("p"),skr=o("Examples:"),lkr=l(),f(e7.$$.fragment),this.h()},l(c){const u=iMt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(c),de=n(c,"H1",{class:!0});var o7=s(de);pe=n(o7,"A",{id:!0,class:!0,href:!0});var jTe=s(pe);io=n(jTe,"SPAN",{});var DTe=s(io);m(fe.$$.fragment,DTe),DTe.forEach(t),jTe.forEach(t),Me=i(o7),Vo=n(o7,"SPAN",{});var dkr=s(Vo);Ni=r(dkr,"Auto Classes"),dkr.forEach(t),o7.forEach(t),If=i(c),fa=n(c,"P",{});var rSe=s(fa);ji=r(rSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(rSe,"CODE",{});var ckr=s(Di);n3=r(ckr,"from_pretrained()"),ckr.forEach(t),Nf=r(rSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),rSe.forEach(t),Be=i(c),co=n(c,"P",{});var sE=s(co);qi=r(sE,"Instantiating one of "),Gn=n(sE,"A",{href:!0});var fkr=s(Gn);s3=r(fkr,"AutoConfig"),fkr.forEach(t),On=r(sE,", "),Xn=n(sE,"A",{href:!0});var mkr=s(Xn);l3=r(mkr,"AutoModel"),mkr.forEach(t),Gi=r(sE,`, and
`),Vn=n(sE,"A",{href:!0});var gkr=s(Vn);i3=r(gkr,"AutoTokenizer"),gkr.forEach(t),Oi=r(sE," will directly create a class of the relevant architecture. For instance"),sE.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var tSe=s(_e);K7=r(tSe,"will create a model that is an instance of "),Xi=n(tSe,"A",{href:!0});var hkr=s(Xi);Z7=r(hkr,"BertModel"),hkr.forEach(t),e9=r(tSe,"."),tSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var aSe=s(Ga);o9=r(aSe,"There is one class of "),Df=n(aSe,"CODE",{});var pkr=s(Df);r9=r(pkr,"AutoModel"),pkr.forEach(t),h$e=r(aSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),aSe.forEach(t),eke=i(c),Vi=n(c,"H2",{class:!0});var nSe=s(Vi);qf=n(nSe,"A",{id:!0,class:!0,href:!0});var _kr=s(qf);jQ=n(_kr,"SPAN",{});var ukr=s(jQ);m(d3.$$.fragment,ukr),ukr.forEach(t),_kr.forEach(t),p$e=i(nSe),DQ=n(nSe,"SPAN",{});var bkr=s(DQ);_$e=r(bkr,"Extending the Auto Classes"),bkr.forEach(t),nSe.forEach(t),oke=i(c),zn=n(c,"P",{});var Wz=s(zn);u$e=r(Wz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qQ=n(Wz,"CODE",{});var vkr=s(qQ);b$e=r(vkr,"NewModel"),vkr.forEach(t),v$e=r(Wz,", make sure you have a "),GQ=n(Wz,"CODE",{});var Tkr=s(GQ);T$e=r(Tkr,"NewModelConfig"),Tkr.forEach(t),F$e=r(Wz,` then you can add those to the auto
classes like this:`),Wz.forEach(t),rke=i(c),m(c3.$$.fragment,c),tke=i(c),t9=n(c,"P",{});var Fkr=s(t9);C$e=r(Fkr,"You will then be able to use the auto classes like you would usually do!"),Fkr.forEach(t),ake=i(c),m(Gf.$$.fragment,c),nke=i(c),zi=n(c,"H2",{class:!0});var sSe=s(zi);Of=n(sSe,"A",{id:!0,class:!0,href:!0});var Ckr=s(Of);OQ=n(Ckr,"SPAN",{});var Mkr=s(OQ);m(f3.$$.fragment,Mkr),Mkr.forEach(t),Ckr.forEach(t),M$e=i(sSe),XQ=n(sSe,"SPAN",{});var Ekr=s(XQ);E$e=r(Ekr,"AutoConfig"),Ekr.forEach(t),sSe.forEach(t),ske=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(m3.$$.fragment,Os),y$e=i(Os),g3=n(Os,"P",{});var lSe=s(g3);w$e=r(lSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),a9=n(lSe,"A",{href:!0});var ykr=s(a9);A$e=r(ykr,"from_pretrained()"),ykr.forEach(t),L$e=r(lSe," class method."),lSe.forEach(t),B$e=i(Os),h3=n(Os,"P",{});var iSe=s(h3);x$e=r(iSe,"This class cannot be instantiated directly using "),VQ=n(iSe,"CODE",{});var wkr=s(VQ);k$e=r(wkr,"__init__()"),wkr.forEach(t),R$e=r(iSe," (throws an error)."),iSe.forEach(t),S$e=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(p3.$$.fragment,ga),P$e=i(ga),zQ=n(ga,"P",{});var Akr=s(zQ);$$e=r(Akr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Akr.forEach(t),I$e=i(ga),Wi=n(ga,"P",{});var Qz=s(Wi);N$e=r(Qz,"The configuration class to instantiate is selected based on the "),WQ=n(Qz,"CODE",{});var Lkr=s(WQ);j$e=r(Lkr,"model_type"),Lkr.forEach(t),D$e=r(Qz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QQ=n(Qz,"CODE",{});var Bkr=s(QQ);q$e=r(Bkr,"pretrained_model_name_or_path"),Bkr.forEach(t),G$e=r(Qz,":"),Qz.forEach(t),O$e=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var qTe=s(Xf);HQ=n(qTe,"STRONG",{});var xkr=s(HQ);X$e=r(xkr,"albert"),xkr.forEach(t),V$e=r(qTe," \u2014 "),n9=n(qTe,"A",{href:!0});var kkr=s(n9);z$e=r(kkr,"AlbertConfig"),kkr.forEach(t),W$e=r(qTe," (ALBERT model)"),qTe.forEach(t),Q$e=i(T),Vf=n(T,"LI",{});var GTe=s(Vf);UQ=n(GTe,"STRONG",{});var Rkr=s(UQ);H$e=r(Rkr,"bart"),Rkr.forEach(t),U$e=r(GTe," \u2014 "),s9=n(GTe,"A",{href:!0});var Skr=s(s9);J$e=r(Skr,"BartConfig"),Skr.forEach(t),Y$e=r(GTe," (BART model)"),GTe.forEach(t),K$e=i(T),zf=n(T,"LI",{});var OTe=s(zf);JQ=n(OTe,"STRONG",{});var Pkr=s(JQ);Z$e=r(Pkr,"beit"),Pkr.forEach(t),eIe=r(OTe," \u2014 "),l9=n(OTe,"A",{href:!0});var $kr=s(l9);oIe=r($kr,"BeitConfig"),$kr.forEach(t),rIe=r(OTe," (BEiT model)"),OTe.forEach(t),tIe=i(T),Wf=n(T,"LI",{});var XTe=s(Wf);YQ=n(XTe,"STRONG",{});var Ikr=s(YQ);aIe=r(Ikr,"bert"),Ikr.forEach(t),nIe=r(XTe," \u2014 "),i9=n(XTe,"A",{href:!0});var Nkr=s(i9);sIe=r(Nkr,"BertConfig"),Nkr.forEach(t),lIe=r(XTe," (BERT model)"),XTe.forEach(t),iIe=i(T),Qf=n(T,"LI",{});var VTe=s(Qf);KQ=n(VTe,"STRONG",{});var jkr=s(KQ);dIe=r(jkr,"bert-generation"),jkr.forEach(t),cIe=r(VTe," \u2014 "),d9=n(VTe,"A",{href:!0});var Dkr=s(d9);fIe=r(Dkr,"BertGenerationConfig"),Dkr.forEach(t),mIe=r(VTe," (Bert Generation model)"),VTe.forEach(t),gIe=i(T),Hf=n(T,"LI",{});var zTe=s(Hf);ZQ=n(zTe,"STRONG",{});var qkr=s(ZQ);hIe=r(qkr,"big_bird"),qkr.forEach(t),pIe=r(zTe," \u2014 "),c9=n(zTe,"A",{href:!0});var Gkr=s(c9);_Ie=r(Gkr,"BigBirdConfig"),Gkr.forEach(t),uIe=r(zTe," (BigBird model)"),zTe.forEach(t),bIe=i(T),Uf=n(T,"LI",{});var WTe=s(Uf);eH=n(WTe,"STRONG",{});var Okr=s(eH);vIe=r(Okr,"bigbird_pegasus"),Okr.forEach(t),TIe=r(WTe," \u2014 "),f9=n(WTe,"A",{href:!0});var Xkr=s(f9);FIe=r(Xkr,"BigBirdPegasusConfig"),Xkr.forEach(t),CIe=r(WTe," (BigBirdPegasus model)"),WTe.forEach(t),MIe=i(T),Jf=n(T,"LI",{});var QTe=s(Jf);oH=n(QTe,"STRONG",{});var Vkr=s(oH);EIe=r(Vkr,"blenderbot"),Vkr.forEach(t),yIe=r(QTe," \u2014 "),m9=n(QTe,"A",{href:!0});var zkr=s(m9);wIe=r(zkr,"BlenderbotConfig"),zkr.forEach(t),AIe=r(QTe," (Blenderbot model)"),QTe.forEach(t),LIe=i(T),Yf=n(T,"LI",{});var HTe=s(Yf);rH=n(HTe,"STRONG",{});var Wkr=s(rH);BIe=r(Wkr,"blenderbot-small"),Wkr.forEach(t),xIe=r(HTe," \u2014 "),g9=n(HTe,"A",{href:!0});var Qkr=s(g9);kIe=r(Qkr,"BlenderbotSmallConfig"),Qkr.forEach(t),RIe=r(HTe," (BlenderbotSmall model)"),HTe.forEach(t),SIe=i(T),Kf=n(T,"LI",{});var UTe=s(Kf);tH=n(UTe,"STRONG",{});var Hkr=s(tH);PIe=r(Hkr,"camembert"),Hkr.forEach(t),$Ie=r(UTe," \u2014 "),h9=n(UTe,"A",{href:!0});var Ukr=s(h9);IIe=r(Ukr,"CamembertConfig"),Ukr.forEach(t),NIe=r(UTe," (CamemBERT model)"),UTe.forEach(t),jIe=i(T),Zf=n(T,"LI",{});var JTe=s(Zf);aH=n(JTe,"STRONG",{});var Jkr=s(aH);DIe=r(Jkr,"canine"),Jkr.forEach(t),qIe=r(JTe," \u2014 "),p9=n(JTe,"A",{href:!0});var Ykr=s(p9);GIe=r(Ykr,"CanineConfig"),Ykr.forEach(t),OIe=r(JTe," (Canine model)"),JTe.forEach(t),XIe=i(T),em=n(T,"LI",{});var YTe=s(em);nH=n(YTe,"STRONG",{});var Kkr=s(nH);VIe=r(Kkr,"clip"),Kkr.forEach(t),zIe=r(YTe," \u2014 "),_9=n(YTe,"A",{href:!0});var Zkr=s(_9);WIe=r(Zkr,"CLIPConfig"),Zkr.forEach(t),QIe=r(YTe," (CLIP model)"),YTe.forEach(t),HIe=i(T),om=n(T,"LI",{});var KTe=s(om);sH=n(KTe,"STRONG",{});var eRr=s(sH);UIe=r(eRr,"convbert"),eRr.forEach(t),JIe=r(KTe," \u2014 "),u9=n(KTe,"A",{href:!0});var oRr=s(u9);YIe=r(oRr,"ConvBertConfig"),oRr.forEach(t),KIe=r(KTe," (ConvBERT model)"),KTe.forEach(t),ZIe=i(T),rm=n(T,"LI",{});var ZTe=s(rm);lH=n(ZTe,"STRONG",{});var rRr=s(lH);eNe=r(rRr,"convnext"),rRr.forEach(t),oNe=r(ZTe," \u2014 "),b9=n(ZTe,"A",{href:!0});var tRr=s(b9);rNe=r(tRr,"ConvNextConfig"),tRr.forEach(t),tNe=r(ZTe," (ConvNext model)"),ZTe.forEach(t),aNe=i(T),tm=n(T,"LI",{});var eFe=s(tm);iH=n(eFe,"STRONG",{});var aRr=s(iH);nNe=r(aRr,"ctrl"),aRr.forEach(t),sNe=r(eFe," \u2014 "),v9=n(eFe,"A",{href:!0});var nRr=s(v9);lNe=r(nRr,"CTRLConfig"),nRr.forEach(t),iNe=r(eFe," (CTRL model)"),eFe.forEach(t),dNe=i(T),am=n(T,"LI",{});var oFe=s(am);dH=n(oFe,"STRONG",{});var sRr=s(dH);cNe=r(sRr,"data2vec-audio"),sRr.forEach(t),fNe=r(oFe," \u2014 "),T9=n(oFe,"A",{href:!0});var lRr=s(T9);mNe=r(lRr,"Data2VecAudioConfig"),lRr.forEach(t),gNe=r(oFe," (Data2VecAudio model)"),oFe.forEach(t),hNe=i(T),nm=n(T,"LI",{});var rFe=s(nm);cH=n(rFe,"STRONG",{});var iRr=s(cH);pNe=r(iRr,"data2vec-text"),iRr.forEach(t),_Ne=r(rFe," \u2014 "),F9=n(rFe,"A",{href:!0});var dRr=s(F9);uNe=r(dRr,"Data2VecTextConfig"),dRr.forEach(t),bNe=r(rFe," (Data2VecText model)"),rFe.forEach(t),vNe=i(T),sm=n(T,"LI",{});var tFe=s(sm);fH=n(tFe,"STRONG",{});var cRr=s(fH);TNe=r(cRr,"deberta"),cRr.forEach(t),FNe=r(tFe," \u2014 "),C9=n(tFe,"A",{href:!0});var fRr=s(C9);CNe=r(fRr,"DebertaConfig"),fRr.forEach(t),MNe=r(tFe," (DeBERTa model)"),tFe.forEach(t),ENe=i(T),lm=n(T,"LI",{});var aFe=s(lm);mH=n(aFe,"STRONG",{});var mRr=s(mH);yNe=r(mRr,"deberta-v2"),mRr.forEach(t),wNe=r(aFe," \u2014 "),M9=n(aFe,"A",{href:!0});var gRr=s(M9);ANe=r(gRr,"DebertaV2Config"),gRr.forEach(t),LNe=r(aFe," (DeBERTa-v2 model)"),aFe.forEach(t),BNe=i(T),im=n(T,"LI",{});var nFe=s(im);gH=n(nFe,"STRONG",{});var hRr=s(gH);xNe=r(hRr,"deit"),hRr.forEach(t),kNe=r(nFe," \u2014 "),E9=n(nFe,"A",{href:!0});var pRr=s(E9);RNe=r(pRr,"DeiTConfig"),pRr.forEach(t),SNe=r(nFe," (DeiT model)"),nFe.forEach(t),PNe=i(T),dm=n(T,"LI",{});var sFe=s(dm);hH=n(sFe,"STRONG",{});var _Rr=s(hH);$Ne=r(_Rr,"detr"),_Rr.forEach(t),INe=r(sFe," \u2014 "),y9=n(sFe,"A",{href:!0});var uRr=s(y9);NNe=r(uRr,"DetrConfig"),uRr.forEach(t),jNe=r(sFe," (DETR model)"),sFe.forEach(t),DNe=i(T),cm=n(T,"LI",{});var lFe=s(cm);pH=n(lFe,"STRONG",{});var bRr=s(pH);qNe=r(bRr,"distilbert"),bRr.forEach(t),GNe=r(lFe," \u2014 "),w9=n(lFe,"A",{href:!0});var vRr=s(w9);ONe=r(vRr,"DistilBertConfig"),vRr.forEach(t),XNe=r(lFe," (DistilBERT model)"),lFe.forEach(t),VNe=i(T),fm=n(T,"LI",{});var iFe=s(fm);_H=n(iFe,"STRONG",{});var TRr=s(_H);zNe=r(TRr,"dpr"),TRr.forEach(t),WNe=r(iFe," \u2014 "),A9=n(iFe,"A",{href:!0});var FRr=s(A9);QNe=r(FRr,"DPRConfig"),FRr.forEach(t),HNe=r(iFe," (DPR model)"),iFe.forEach(t),UNe=i(T),mm=n(T,"LI",{});var dFe=s(mm);uH=n(dFe,"STRONG",{});var CRr=s(uH);JNe=r(CRr,"electra"),CRr.forEach(t),YNe=r(dFe," \u2014 "),L9=n(dFe,"A",{href:!0});var MRr=s(L9);KNe=r(MRr,"ElectraConfig"),MRr.forEach(t),ZNe=r(dFe," (ELECTRA model)"),dFe.forEach(t),eje=i(T),gm=n(T,"LI",{});var cFe=s(gm);bH=n(cFe,"STRONG",{});var ERr=s(bH);oje=r(ERr,"encoder-decoder"),ERr.forEach(t),rje=r(cFe," \u2014 "),B9=n(cFe,"A",{href:!0});var yRr=s(B9);tje=r(yRr,"EncoderDecoderConfig"),yRr.forEach(t),aje=r(cFe," (Encoder decoder model)"),cFe.forEach(t),nje=i(T),hm=n(T,"LI",{});var fFe=s(hm);vH=n(fFe,"STRONG",{});var wRr=s(vH);sje=r(wRr,"flaubert"),wRr.forEach(t),lje=r(fFe," \u2014 "),x9=n(fFe,"A",{href:!0});var ARr=s(x9);ije=r(ARr,"FlaubertConfig"),ARr.forEach(t),dje=r(fFe," (FlauBERT model)"),fFe.forEach(t),cje=i(T),pm=n(T,"LI",{});var mFe=s(pm);TH=n(mFe,"STRONG",{});var LRr=s(TH);fje=r(LRr,"fnet"),LRr.forEach(t),mje=r(mFe," \u2014 "),k9=n(mFe,"A",{href:!0});var BRr=s(k9);gje=r(BRr,"FNetConfig"),BRr.forEach(t),hje=r(mFe," (FNet model)"),mFe.forEach(t),pje=i(T),_m=n(T,"LI",{});var gFe=s(_m);FH=n(gFe,"STRONG",{});var xRr=s(FH);_je=r(xRr,"fsmt"),xRr.forEach(t),uje=r(gFe," \u2014 "),R9=n(gFe,"A",{href:!0});var kRr=s(R9);bje=r(kRr,"FSMTConfig"),kRr.forEach(t),vje=r(gFe," (FairSeq Machine-Translation model)"),gFe.forEach(t),Tje=i(T),um=n(T,"LI",{});var hFe=s(um);CH=n(hFe,"STRONG",{});var RRr=s(CH);Fje=r(RRr,"funnel"),RRr.forEach(t),Cje=r(hFe," \u2014 "),S9=n(hFe,"A",{href:!0});var SRr=s(S9);Mje=r(SRr,"FunnelConfig"),SRr.forEach(t),Eje=r(hFe," (Funnel Transformer model)"),hFe.forEach(t),yje=i(T),bm=n(T,"LI",{});var pFe=s(bm);MH=n(pFe,"STRONG",{});var PRr=s(MH);wje=r(PRr,"glpn"),PRr.forEach(t),Aje=r(pFe," \u2014 "),P9=n(pFe,"A",{href:!0});var $Rr=s(P9);Lje=r($Rr,"GLPNConfig"),$Rr.forEach(t),Bje=r(pFe," (GLPN model)"),pFe.forEach(t),xje=i(T),vm=n(T,"LI",{});var _Fe=s(vm);EH=n(_Fe,"STRONG",{});var IRr=s(EH);kje=r(IRr,"gpt2"),IRr.forEach(t),Rje=r(_Fe," \u2014 "),$9=n(_Fe,"A",{href:!0});var NRr=s($9);Sje=r(NRr,"GPT2Config"),NRr.forEach(t),Pje=r(_Fe," (OpenAI GPT-2 model)"),_Fe.forEach(t),$je=i(T),Tm=n(T,"LI",{});var uFe=s(Tm);yH=n(uFe,"STRONG",{});var jRr=s(yH);Ije=r(jRr,"gpt_neo"),jRr.forEach(t),Nje=r(uFe," \u2014 "),I9=n(uFe,"A",{href:!0});var DRr=s(I9);jje=r(DRr,"GPTNeoConfig"),DRr.forEach(t),Dje=r(uFe," (GPT Neo model)"),uFe.forEach(t),qje=i(T),Fm=n(T,"LI",{});var bFe=s(Fm);wH=n(bFe,"STRONG",{});var qRr=s(wH);Gje=r(qRr,"gptj"),qRr.forEach(t),Oje=r(bFe," \u2014 "),N9=n(bFe,"A",{href:!0});var GRr=s(N9);Xje=r(GRr,"GPTJConfig"),GRr.forEach(t),Vje=r(bFe," (GPT-J model)"),bFe.forEach(t),zje=i(T),Cm=n(T,"LI",{});var vFe=s(Cm);AH=n(vFe,"STRONG",{});var ORr=s(AH);Wje=r(ORr,"hubert"),ORr.forEach(t),Qje=r(vFe," \u2014 "),j9=n(vFe,"A",{href:!0});var XRr=s(j9);Hje=r(XRr,"HubertConfig"),XRr.forEach(t),Uje=r(vFe," (Hubert model)"),vFe.forEach(t),Jje=i(T),Mm=n(T,"LI",{});var TFe=s(Mm);LH=n(TFe,"STRONG",{});var VRr=s(LH);Yje=r(VRr,"ibert"),VRr.forEach(t),Kje=r(TFe," \u2014 "),D9=n(TFe,"A",{href:!0});var zRr=s(D9);Zje=r(zRr,"IBertConfig"),zRr.forEach(t),eDe=r(TFe," (I-BERT model)"),TFe.forEach(t),oDe=i(T),Em=n(T,"LI",{});var FFe=s(Em);BH=n(FFe,"STRONG",{});var WRr=s(BH);rDe=r(WRr,"imagegpt"),WRr.forEach(t),tDe=r(FFe," \u2014 "),q9=n(FFe,"A",{href:!0});var QRr=s(q9);aDe=r(QRr,"ImageGPTConfig"),QRr.forEach(t),nDe=r(FFe," (ImageGPT model)"),FFe.forEach(t),sDe=i(T),ym=n(T,"LI",{});var CFe=s(ym);xH=n(CFe,"STRONG",{});var HRr=s(xH);lDe=r(HRr,"layoutlm"),HRr.forEach(t),iDe=r(CFe," \u2014 "),G9=n(CFe,"A",{href:!0});var URr=s(G9);dDe=r(URr,"LayoutLMConfig"),URr.forEach(t),cDe=r(CFe," (LayoutLM model)"),CFe.forEach(t),fDe=i(T),wm=n(T,"LI",{});var MFe=s(wm);kH=n(MFe,"STRONG",{});var JRr=s(kH);mDe=r(JRr,"layoutlmv2"),JRr.forEach(t),gDe=r(MFe," \u2014 "),O9=n(MFe,"A",{href:!0});var YRr=s(O9);hDe=r(YRr,"LayoutLMv2Config"),YRr.forEach(t),pDe=r(MFe," (LayoutLMv2 model)"),MFe.forEach(t),_De=i(T),Am=n(T,"LI",{});var EFe=s(Am);RH=n(EFe,"STRONG",{});var KRr=s(RH);uDe=r(KRr,"led"),KRr.forEach(t),bDe=r(EFe," \u2014 "),X9=n(EFe,"A",{href:!0});var ZRr=s(X9);vDe=r(ZRr,"LEDConfig"),ZRr.forEach(t),TDe=r(EFe," (LED model)"),EFe.forEach(t),FDe=i(T),Lm=n(T,"LI",{});var yFe=s(Lm);SH=n(yFe,"STRONG",{});var eSr=s(SH);CDe=r(eSr,"longformer"),eSr.forEach(t),MDe=r(yFe," \u2014 "),V9=n(yFe,"A",{href:!0});var oSr=s(V9);EDe=r(oSr,"LongformerConfig"),oSr.forEach(t),yDe=r(yFe," (Longformer model)"),yFe.forEach(t),wDe=i(T),Bm=n(T,"LI",{});var wFe=s(Bm);PH=n(wFe,"STRONG",{});var rSr=s(PH);ADe=r(rSr,"luke"),rSr.forEach(t),LDe=r(wFe," \u2014 "),z9=n(wFe,"A",{href:!0});var tSr=s(z9);BDe=r(tSr,"LukeConfig"),tSr.forEach(t),xDe=r(wFe," (LUKE model)"),wFe.forEach(t),kDe=i(T),xm=n(T,"LI",{});var AFe=s(xm);$H=n(AFe,"STRONG",{});var aSr=s($H);RDe=r(aSr,"lxmert"),aSr.forEach(t),SDe=r(AFe," \u2014 "),W9=n(AFe,"A",{href:!0});var nSr=s(W9);PDe=r(nSr,"LxmertConfig"),nSr.forEach(t),$De=r(AFe," (LXMERT model)"),AFe.forEach(t),IDe=i(T),km=n(T,"LI",{});var LFe=s(km);IH=n(LFe,"STRONG",{});var sSr=s(IH);NDe=r(sSr,"m2m_100"),sSr.forEach(t),jDe=r(LFe," \u2014 "),Q9=n(LFe,"A",{href:!0});var lSr=s(Q9);DDe=r(lSr,"M2M100Config"),lSr.forEach(t),qDe=r(LFe," (M2M100 model)"),LFe.forEach(t),GDe=i(T),Rm=n(T,"LI",{});var BFe=s(Rm);NH=n(BFe,"STRONG",{});var iSr=s(NH);ODe=r(iSr,"marian"),iSr.forEach(t),XDe=r(BFe," \u2014 "),H9=n(BFe,"A",{href:!0});var dSr=s(H9);VDe=r(dSr,"MarianConfig"),dSr.forEach(t),zDe=r(BFe," (Marian model)"),BFe.forEach(t),WDe=i(T),Sm=n(T,"LI",{});var xFe=s(Sm);jH=n(xFe,"STRONG",{});var cSr=s(jH);QDe=r(cSr,"maskformer"),cSr.forEach(t),HDe=r(xFe," \u2014 "),U9=n(xFe,"A",{href:!0});var fSr=s(U9);UDe=r(fSr,"MaskFormerConfig"),fSr.forEach(t),JDe=r(xFe," (MaskFormer model)"),xFe.forEach(t),YDe=i(T),Pm=n(T,"LI",{});var kFe=s(Pm);DH=n(kFe,"STRONG",{});var mSr=s(DH);KDe=r(mSr,"mbart"),mSr.forEach(t),ZDe=r(kFe," \u2014 "),J9=n(kFe,"A",{href:!0});var gSr=s(J9);eqe=r(gSr,"MBartConfig"),gSr.forEach(t),oqe=r(kFe," (mBART model)"),kFe.forEach(t),rqe=i(T),$m=n(T,"LI",{});var RFe=s($m);qH=n(RFe,"STRONG",{});var hSr=s(qH);tqe=r(hSr,"megatron-bert"),hSr.forEach(t),aqe=r(RFe," \u2014 "),Y9=n(RFe,"A",{href:!0});var pSr=s(Y9);nqe=r(pSr,"MegatronBertConfig"),pSr.forEach(t),sqe=r(RFe," (MegatronBert model)"),RFe.forEach(t),lqe=i(T),Im=n(T,"LI",{});var SFe=s(Im);GH=n(SFe,"STRONG",{});var _Sr=s(GH);iqe=r(_Sr,"mobilebert"),_Sr.forEach(t),dqe=r(SFe," \u2014 "),K9=n(SFe,"A",{href:!0});var uSr=s(K9);cqe=r(uSr,"MobileBertConfig"),uSr.forEach(t),fqe=r(SFe," (MobileBERT model)"),SFe.forEach(t),mqe=i(T),Nm=n(T,"LI",{});var PFe=s(Nm);OH=n(PFe,"STRONG",{});var bSr=s(OH);gqe=r(bSr,"mpnet"),bSr.forEach(t),hqe=r(PFe," \u2014 "),Z9=n(PFe,"A",{href:!0});var vSr=s(Z9);pqe=r(vSr,"MPNetConfig"),vSr.forEach(t),_qe=r(PFe," (MPNet model)"),PFe.forEach(t),uqe=i(T),jm=n(T,"LI",{});var $Fe=s(jm);XH=n($Fe,"STRONG",{});var TSr=s(XH);bqe=r(TSr,"mt5"),TSr.forEach(t),vqe=r($Fe," \u2014 "),eB=n($Fe,"A",{href:!0});var FSr=s(eB);Tqe=r(FSr,"MT5Config"),FSr.forEach(t),Fqe=r($Fe," (mT5 model)"),$Fe.forEach(t),Cqe=i(T),Dm=n(T,"LI",{});var IFe=s(Dm);VH=n(IFe,"STRONG",{});var CSr=s(VH);Mqe=r(CSr,"nystromformer"),CSr.forEach(t),Eqe=r(IFe," \u2014 "),oB=n(IFe,"A",{href:!0});var MSr=s(oB);yqe=r(MSr,"NystromformerConfig"),MSr.forEach(t),wqe=r(IFe," (Nystromformer model)"),IFe.forEach(t),Aqe=i(T),qm=n(T,"LI",{});var NFe=s(qm);zH=n(NFe,"STRONG",{});var ESr=s(zH);Lqe=r(ESr,"openai-gpt"),ESr.forEach(t),Bqe=r(NFe," \u2014 "),rB=n(NFe,"A",{href:!0});var ySr=s(rB);xqe=r(ySr,"OpenAIGPTConfig"),ySr.forEach(t),kqe=r(NFe," (OpenAI GPT model)"),NFe.forEach(t),Rqe=i(T),Gm=n(T,"LI",{});var jFe=s(Gm);WH=n(jFe,"STRONG",{});var wSr=s(WH);Sqe=r(wSr,"pegasus"),wSr.forEach(t),Pqe=r(jFe," \u2014 "),tB=n(jFe,"A",{href:!0});var ASr=s(tB);$qe=r(ASr,"PegasusConfig"),ASr.forEach(t),Iqe=r(jFe," (Pegasus model)"),jFe.forEach(t),Nqe=i(T),Om=n(T,"LI",{});var DFe=s(Om);QH=n(DFe,"STRONG",{});var LSr=s(QH);jqe=r(LSr,"perceiver"),LSr.forEach(t),Dqe=r(DFe," \u2014 "),aB=n(DFe,"A",{href:!0});var BSr=s(aB);qqe=r(BSr,"PerceiverConfig"),BSr.forEach(t),Gqe=r(DFe," (Perceiver model)"),DFe.forEach(t),Oqe=i(T),Xm=n(T,"LI",{});var qFe=s(Xm);HH=n(qFe,"STRONG",{});var xSr=s(HH);Xqe=r(xSr,"plbart"),xSr.forEach(t),Vqe=r(qFe," \u2014 "),nB=n(qFe,"A",{href:!0});var kSr=s(nB);zqe=r(kSr,"PLBartConfig"),kSr.forEach(t),Wqe=r(qFe," (PLBart model)"),qFe.forEach(t),Qqe=i(T),Vm=n(T,"LI",{});var GFe=s(Vm);UH=n(GFe,"STRONG",{});var RSr=s(UH);Hqe=r(RSr,"poolformer"),RSr.forEach(t),Uqe=r(GFe," \u2014 "),sB=n(GFe,"A",{href:!0});var SSr=s(sB);Jqe=r(SSr,"PoolFormerConfig"),SSr.forEach(t),Yqe=r(GFe," (PoolFormer model)"),GFe.forEach(t),Kqe=i(T),zm=n(T,"LI",{});var OFe=s(zm);JH=n(OFe,"STRONG",{});var PSr=s(JH);Zqe=r(PSr,"prophetnet"),PSr.forEach(t),eGe=r(OFe," \u2014 "),lB=n(OFe,"A",{href:!0});var $Sr=s(lB);oGe=r($Sr,"ProphetNetConfig"),$Sr.forEach(t),rGe=r(OFe," (ProphetNet model)"),OFe.forEach(t),tGe=i(T),Wm=n(T,"LI",{});var XFe=s(Wm);YH=n(XFe,"STRONG",{});var ISr=s(YH);aGe=r(ISr,"qdqbert"),ISr.forEach(t),nGe=r(XFe," \u2014 "),iB=n(XFe,"A",{href:!0});var NSr=s(iB);sGe=r(NSr,"QDQBertConfig"),NSr.forEach(t),lGe=r(XFe," (QDQBert model)"),XFe.forEach(t),iGe=i(T),Qm=n(T,"LI",{});var VFe=s(Qm);KH=n(VFe,"STRONG",{});var jSr=s(KH);dGe=r(jSr,"rag"),jSr.forEach(t),cGe=r(VFe," \u2014 "),dB=n(VFe,"A",{href:!0});var DSr=s(dB);fGe=r(DSr,"RagConfig"),DSr.forEach(t),mGe=r(VFe," (RAG model)"),VFe.forEach(t),gGe=i(T),Hm=n(T,"LI",{});var zFe=s(Hm);ZH=n(zFe,"STRONG",{});var qSr=s(ZH);hGe=r(qSr,"realm"),qSr.forEach(t),pGe=r(zFe," \u2014 "),cB=n(zFe,"A",{href:!0});var GSr=s(cB);_Ge=r(GSr,"RealmConfig"),GSr.forEach(t),uGe=r(zFe," (Realm model)"),zFe.forEach(t),bGe=i(T),Um=n(T,"LI",{});var WFe=s(Um);eU=n(WFe,"STRONG",{});var OSr=s(eU);vGe=r(OSr,"reformer"),OSr.forEach(t),TGe=r(WFe," \u2014 "),fB=n(WFe,"A",{href:!0});var XSr=s(fB);FGe=r(XSr,"ReformerConfig"),XSr.forEach(t),CGe=r(WFe," (Reformer model)"),WFe.forEach(t),MGe=i(T),Jm=n(T,"LI",{});var QFe=s(Jm);oU=n(QFe,"STRONG",{});var VSr=s(oU);EGe=r(VSr,"rembert"),VSr.forEach(t),yGe=r(QFe," \u2014 "),mB=n(QFe,"A",{href:!0});var zSr=s(mB);wGe=r(zSr,"RemBertConfig"),zSr.forEach(t),AGe=r(QFe," (RemBERT model)"),QFe.forEach(t),LGe=i(T),Ym=n(T,"LI",{});var HFe=s(Ym);rU=n(HFe,"STRONG",{});var WSr=s(rU);BGe=r(WSr,"resnet"),WSr.forEach(t),xGe=r(HFe," \u2014 "),gB=n(HFe,"A",{href:!0});var QSr=s(gB);kGe=r(QSr,"ResNetConfig"),QSr.forEach(t),RGe=r(HFe," (ResNet model)"),HFe.forEach(t),SGe=i(T),Km=n(T,"LI",{});var UFe=s(Km);tU=n(UFe,"STRONG",{});var HSr=s(tU);PGe=r(HSr,"retribert"),HSr.forEach(t),$Ge=r(UFe," \u2014 "),hB=n(UFe,"A",{href:!0});var USr=s(hB);IGe=r(USr,"RetriBertConfig"),USr.forEach(t),NGe=r(UFe," (RetriBERT model)"),UFe.forEach(t),jGe=i(T),Zm=n(T,"LI",{});var JFe=s(Zm);aU=n(JFe,"STRONG",{});var JSr=s(aU);DGe=r(JSr,"roberta"),JSr.forEach(t),qGe=r(JFe," \u2014 "),pB=n(JFe,"A",{href:!0});var YSr=s(pB);GGe=r(YSr,"RobertaConfig"),YSr.forEach(t),OGe=r(JFe," (RoBERTa model)"),JFe.forEach(t),XGe=i(T),eg=n(T,"LI",{});var YFe=s(eg);nU=n(YFe,"STRONG",{});var KSr=s(nU);VGe=r(KSr,"roformer"),KSr.forEach(t),zGe=r(YFe," \u2014 "),_B=n(YFe,"A",{href:!0});var ZSr=s(_B);WGe=r(ZSr,"RoFormerConfig"),ZSr.forEach(t),QGe=r(YFe," (RoFormer model)"),YFe.forEach(t),HGe=i(T),og=n(T,"LI",{});var KFe=s(og);sU=n(KFe,"STRONG",{});var ePr=s(sU);UGe=r(ePr,"segformer"),ePr.forEach(t),JGe=r(KFe," \u2014 "),uB=n(KFe,"A",{href:!0});var oPr=s(uB);YGe=r(oPr,"SegformerConfig"),oPr.forEach(t),KGe=r(KFe," (SegFormer model)"),KFe.forEach(t),ZGe=i(T),rg=n(T,"LI",{});var ZFe=s(rg);lU=n(ZFe,"STRONG",{});var rPr=s(lU);eOe=r(rPr,"sew"),rPr.forEach(t),oOe=r(ZFe," \u2014 "),bB=n(ZFe,"A",{href:!0});var tPr=s(bB);rOe=r(tPr,"SEWConfig"),tPr.forEach(t),tOe=r(ZFe," (SEW model)"),ZFe.forEach(t),aOe=i(T),tg=n(T,"LI",{});var eCe=s(tg);iU=n(eCe,"STRONG",{});var aPr=s(iU);nOe=r(aPr,"sew-d"),aPr.forEach(t),sOe=r(eCe," \u2014 "),vB=n(eCe,"A",{href:!0});var nPr=s(vB);lOe=r(nPr,"SEWDConfig"),nPr.forEach(t),iOe=r(eCe," (SEW-D model)"),eCe.forEach(t),dOe=i(T),ag=n(T,"LI",{});var oCe=s(ag);dU=n(oCe,"STRONG",{});var sPr=s(dU);cOe=r(sPr,"speech-encoder-decoder"),sPr.forEach(t),fOe=r(oCe," \u2014 "),TB=n(oCe,"A",{href:!0});var lPr=s(TB);mOe=r(lPr,"SpeechEncoderDecoderConfig"),lPr.forEach(t),gOe=r(oCe," (Speech Encoder decoder model)"),oCe.forEach(t),hOe=i(T),ng=n(T,"LI",{});var rCe=s(ng);cU=n(rCe,"STRONG",{});var iPr=s(cU);pOe=r(iPr,"speech_to_text"),iPr.forEach(t),_Oe=r(rCe," \u2014 "),FB=n(rCe,"A",{href:!0});var dPr=s(FB);uOe=r(dPr,"Speech2TextConfig"),dPr.forEach(t),bOe=r(rCe," (Speech2Text model)"),rCe.forEach(t),vOe=i(T),sg=n(T,"LI",{});var tCe=s(sg);fU=n(tCe,"STRONG",{});var cPr=s(fU);TOe=r(cPr,"speech_to_text_2"),cPr.forEach(t),FOe=r(tCe," \u2014 "),CB=n(tCe,"A",{href:!0});var fPr=s(CB);COe=r(fPr,"Speech2Text2Config"),fPr.forEach(t),MOe=r(tCe," (Speech2Text2 model)"),tCe.forEach(t),EOe=i(T),lg=n(T,"LI",{});var aCe=s(lg);mU=n(aCe,"STRONG",{});var mPr=s(mU);yOe=r(mPr,"splinter"),mPr.forEach(t),wOe=r(aCe," \u2014 "),MB=n(aCe,"A",{href:!0});var gPr=s(MB);AOe=r(gPr,"SplinterConfig"),gPr.forEach(t),LOe=r(aCe," (Splinter model)"),aCe.forEach(t),BOe=i(T),ig=n(T,"LI",{});var nCe=s(ig);gU=n(nCe,"STRONG",{});var hPr=s(gU);xOe=r(hPr,"squeezebert"),hPr.forEach(t),kOe=r(nCe," \u2014 "),EB=n(nCe,"A",{href:!0});var pPr=s(EB);ROe=r(pPr,"SqueezeBertConfig"),pPr.forEach(t),SOe=r(nCe," (SqueezeBERT model)"),nCe.forEach(t),POe=i(T),dg=n(T,"LI",{});var sCe=s(dg);hU=n(sCe,"STRONG",{});var _Pr=s(hU);$Oe=r(_Pr,"swin"),_Pr.forEach(t),IOe=r(sCe," \u2014 "),yB=n(sCe,"A",{href:!0});var uPr=s(yB);NOe=r(uPr,"SwinConfig"),uPr.forEach(t),jOe=r(sCe," (Swin model)"),sCe.forEach(t),DOe=i(T),cg=n(T,"LI",{});var lCe=s(cg);pU=n(lCe,"STRONG",{});var bPr=s(pU);qOe=r(bPr,"t5"),bPr.forEach(t),GOe=r(lCe," \u2014 "),wB=n(lCe,"A",{href:!0});var vPr=s(wB);OOe=r(vPr,"T5Config"),vPr.forEach(t),XOe=r(lCe," (T5 model)"),lCe.forEach(t),VOe=i(T),fg=n(T,"LI",{});var iCe=s(fg);_U=n(iCe,"STRONG",{});var TPr=s(_U);zOe=r(TPr,"tapas"),TPr.forEach(t),WOe=r(iCe," \u2014 "),AB=n(iCe,"A",{href:!0});var FPr=s(AB);QOe=r(FPr,"TapasConfig"),FPr.forEach(t),HOe=r(iCe," (TAPAS model)"),iCe.forEach(t),UOe=i(T),mg=n(T,"LI",{});var dCe=s(mg);uU=n(dCe,"STRONG",{});var CPr=s(uU);JOe=r(CPr,"transfo-xl"),CPr.forEach(t),YOe=r(dCe," \u2014 "),LB=n(dCe,"A",{href:!0});var MPr=s(LB);KOe=r(MPr,"TransfoXLConfig"),MPr.forEach(t),ZOe=r(dCe," (Transformer-XL model)"),dCe.forEach(t),eXe=i(T),gg=n(T,"LI",{});var cCe=s(gg);bU=n(cCe,"STRONG",{});var EPr=s(bU);oXe=r(EPr,"trocr"),EPr.forEach(t),rXe=r(cCe," \u2014 "),BB=n(cCe,"A",{href:!0});var yPr=s(BB);tXe=r(yPr,"TrOCRConfig"),yPr.forEach(t),aXe=r(cCe," (TrOCR model)"),cCe.forEach(t),nXe=i(T),hg=n(T,"LI",{});var fCe=s(hg);vU=n(fCe,"STRONG",{});var wPr=s(vU);sXe=r(wPr,"unispeech"),wPr.forEach(t),lXe=r(fCe," \u2014 "),xB=n(fCe,"A",{href:!0});var APr=s(xB);iXe=r(APr,"UniSpeechConfig"),APr.forEach(t),dXe=r(fCe," (UniSpeech model)"),fCe.forEach(t),cXe=i(T),pg=n(T,"LI",{});var mCe=s(pg);TU=n(mCe,"STRONG",{});var LPr=s(TU);fXe=r(LPr,"unispeech-sat"),LPr.forEach(t),mXe=r(mCe," \u2014 "),kB=n(mCe,"A",{href:!0});var BPr=s(kB);gXe=r(BPr,"UniSpeechSatConfig"),BPr.forEach(t),hXe=r(mCe," (UniSpeechSat model)"),mCe.forEach(t),pXe=i(T),_g=n(T,"LI",{});var gCe=s(_g);FU=n(gCe,"STRONG",{});var xPr=s(FU);_Xe=r(xPr,"van"),xPr.forEach(t),uXe=r(gCe," \u2014 "),RB=n(gCe,"A",{href:!0});var kPr=s(RB);bXe=r(kPr,"VanConfig"),kPr.forEach(t),vXe=r(gCe," (VAN model)"),gCe.forEach(t),TXe=i(T),ug=n(T,"LI",{});var hCe=s(ug);CU=n(hCe,"STRONG",{});var RPr=s(CU);FXe=r(RPr,"vilt"),RPr.forEach(t),CXe=r(hCe," \u2014 "),SB=n(hCe,"A",{href:!0});var SPr=s(SB);MXe=r(SPr,"ViltConfig"),SPr.forEach(t),EXe=r(hCe," (ViLT model)"),hCe.forEach(t),yXe=i(T),bg=n(T,"LI",{});var pCe=s(bg);MU=n(pCe,"STRONG",{});var PPr=s(MU);wXe=r(PPr,"vision-encoder-decoder"),PPr.forEach(t),AXe=r(pCe," \u2014 "),PB=n(pCe,"A",{href:!0});var $Pr=s(PB);LXe=r($Pr,"VisionEncoderDecoderConfig"),$Pr.forEach(t),BXe=r(pCe," (Vision Encoder decoder model)"),pCe.forEach(t),xXe=i(T),vg=n(T,"LI",{});var _Ce=s(vg);EU=n(_Ce,"STRONG",{});var IPr=s(EU);kXe=r(IPr,"vision-text-dual-encoder"),IPr.forEach(t),RXe=r(_Ce," \u2014 "),$B=n(_Ce,"A",{href:!0});var NPr=s($B);SXe=r(NPr,"VisionTextDualEncoderConfig"),NPr.forEach(t),PXe=r(_Ce," (VisionTextDualEncoder model)"),_Ce.forEach(t),$Xe=i(T),Tg=n(T,"LI",{});var uCe=s(Tg);yU=n(uCe,"STRONG",{});var jPr=s(yU);IXe=r(jPr,"visual_bert"),jPr.forEach(t),NXe=r(uCe," \u2014 "),IB=n(uCe,"A",{href:!0});var DPr=s(IB);jXe=r(DPr,"VisualBertConfig"),DPr.forEach(t),DXe=r(uCe," (VisualBert model)"),uCe.forEach(t),qXe=i(T),Fg=n(T,"LI",{});var bCe=s(Fg);wU=n(bCe,"STRONG",{});var qPr=s(wU);GXe=r(qPr,"vit"),qPr.forEach(t),OXe=r(bCe," \u2014 "),NB=n(bCe,"A",{href:!0});var GPr=s(NB);XXe=r(GPr,"ViTConfig"),GPr.forEach(t),VXe=r(bCe," (ViT model)"),bCe.forEach(t),zXe=i(T),Cg=n(T,"LI",{});var vCe=s(Cg);AU=n(vCe,"STRONG",{});var OPr=s(AU);WXe=r(OPr,"vit_mae"),OPr.forEach(t),QXe=r(vCe," \u2014 "),jB=n(vCe,"A",{href:!0});var XPr=s(jB);HXe=r(XPr,"ViTMAEConfig"),XPr.forEach(t),UXe=r(vCe," (ViTMAE model)"),vCe.forEach(t),JXe=i(T),Mg=n(T,"LI",{});var TCe=s(Mg);LU=n(TCe,"STRONG",{});var VPr=s(LU);YXe=r(VPr,"wav2vec2"),VPr.forEach(t),KXe=r(TCe," \u2014 "),DB=n(TCe,"A",{href:!0});var zPr=s(DB);ZXe=r(zPr,"Wav2Vec2Config"),zPr.forEach(t),eVe=r(TCe," (Wav2Vec2 model)"),TCe.forEach(t),oVe=i(T),Eg=n(T,"LI",{});var FCe=s(Eg);BU=n(FCe,"STRONG",{});var WPr=s(BU);rVe=r(WPr,"wavlm"),WPr.forEach(t),tVe=r(FCe," \u2014 "),qB=n(FCe,"A",{href:!0});var QPr=s(qB);aVe=r(QPr,"WavLMConfig"),QPr.forEach(t),nVe=r(FCe," (WavLM model)"),FCe.forEach(t),sVe=i(T),yg=n(T,"LI",{});var CCe=s(yg);xU=n(CCe,"STRONG",{});var HPr=s(xU);lVe=r(HPr,"xglm"),HPr.forEach(t),iVe=r(CCe," \u2014 "),GB=n(CCe,"A",{href:!0});var UPr=s(GB);dVe=r(UPr,"XGLMConfig"),UPr.forEach(t),cVe=r(CCe," (XGLM model)"),CCe.forEach(t),fVe=i(T),wg=n(T,"LI",{});var MCe=s(wg);kU=n(MCe,"STRONG",{});var JPr=s(kU);mVe=r(JPr,"xlm"),JPr.forEach(t),gVe=r(MCe," \u2014 "),OB=n(MCe,"A",{href:!0});var YPr=s(OB);hVe=r(YPr,"XLMConfig"),YPr.forEach(t),pVe=r(MCe," (XLM model)"),MCe.forEach(t),_Ve=i(T),Ag=n(T,"LI",{});var ECe=s(Ag);RU=n(ECe,"STRONG",{});var KPr=s(RU);uVe=r(KPr,"xlm-prophetnet"),KPr.forEach(t),bVe=r(ECe," \u2014 "),XB=n(ECe,"A",{href:!0});var ZPr=s(XB);vVe=r(ZPr,"XLMProphetNetConfig"),ZPr.forEach(t),TVe=r(ECe," (XLMProphetNet model)"),ECe.forEach(t),FVe=i(T),Lg=n(T,"LI",{});var yCe=s(Lg);SU=n(yCe,"STRONG",{});var e$r=s(SU);CVe=r(e$r,"xlm-roberta"),e$r.forEach(t),MVe=r(yCe," \u2014 "),VB=n(yCe,"A",{href:!0});var o$r=s(VB);EVe=r(o$r,"XLMRobertaConfig"),o$r.forEach(t),yVe=r(yCe," (XLM-RoBERTa model)"),yCe.forEach(t),wVe=i(T),Bg=n(T,"LI",{});var wCe=s(Bg);PU=n(wCe,"STRONG",{});var r$r=s(PU);AVe=r(r$r,"xlm-roberta-xl"),r$r.forEach(t),LVe=r(wCe," \u2014 "),zB=n(wCe,"A",{href:!0});var t$r=s(zB);BVe=r(t$r,"XLMRobertaXLConfig"),t$r.forEach(t),xVe=r(wCe," (XLM-RoBERTa-XL model)"),wCe.forEach(t),kVe=i(T),xg=n(T,"LI",{});var ACe=s(xg);$U=n(ACe,"STRONG",{});var a$r=s($U);RVe=r(a$r,"xlnet"),a$r.forEach(t),SVe=r(ACe," \u2014 "),WB=n(ACe,"A",{href:!0});var n$r=s(WB);PVe=r(n$r,"XLNetConfig"),n$r.forEach(t),$Ve=r(ACe," (XLNet model)"),ACe.forEach(t),IVe=i(T),kg=n(T,"LI",{});var LCe=s(kg);IU=n(LCe,"STRONG",{});var s$r=s(IU);NVe=r(s$r,"yoso"),s$r.forEach(t),jVe=r(LCe," \u2014 "),QB=n(LCe,"A",{href:!0});var l$r=s(QB);DVe=r(l$r,"YosoConfig"),l$r.forEach(t),qVe=r(LCe," (YOSO model)"),LCe.forEach(t),T.forEach(t),GVe=i(ga),NU=n(ga,"P",{});var i$r=s(NU);OVe=r(i$r,"Examples:"),i$r.forEach(t),XVe=i(ga),m(_3.$$.fragment,ga),ga.forEach(t),VVe=i(Os),Rg=n(Os,"DIV",{class:!0});var dSe=s(Rg);m(u3.$$.fragment,dSe),zVe=i(dSe),jU=n(dSe,"P",{});var d$r=s(jU);WVe=r(d$r,"Register a new configuration for this class."),d$r.forEach(t),dSe.forEach(t),Os.forEach(t),lke=i(c),Qi=n(c,"H2",{class:!0});var cSe=s(Qi);Sg=n(cSe,"A",{id:!0,class:!0,href:!0});var c$r=s(Sg);DU=n(c$r,"SPAN",{});var f$r=s(DU);m(b3.$$.fragment,f$r),f$r.forEach(t),c$r.forEach(t),QVe=i(cSe),qU=n(cSe,"SPAN",{});var m$r=s(qU);HVe=r(m$r,"AutoTokenizer"),m$r.forEach(t),cSe.forEach(t),ike=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(v3.$$.fragment,Xs),UVe=i(Xs),T3=n(Xs,"P",{});var fSe=s(T3);JVe=r(fSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HB=n(fSe,"A",{href:!0});var g$r=s(HB);YVe=r(g$r,"AutoTokenizer.from_pretrained()"),g$r.forEach(t),KVe=r(fSe," class method."),fSe.forEach(t),ZVe=i(Xs),F3=n(Xs,"P",{});var mSe=s(F3);eze=r(mSe,"This class cannot be instantiated directly using "),GU=n(mSe,"CODE",{});var h$r=s(GU);oze=r(h$r,"__init__()"),h$r.forEach(t),rze=r(mSe," (throws an error)."),mSe.forEach(t),tze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(C3.$$.fragment,ha),aze=i(ha),OU=n(ha,"P",{});var p$r=s(OU);nze=r(p$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),p$r.forEach(t),sze=i(ha),Oa=n(ha,"P",{});var lE=s(Oa);lze=r(lE,"The tokenizer class to instantiate is selected based on the "),XU=n(lE,"CODE",{});var _$r=s(XU);ize=r(_$r,"model_type"),_$r.forEach(t),dze=r(lE,` property of the config object (either
passed as an argument or loaded from `),VU=n(lE,"CODE",{});var u$r=s(VU);cze=r(u$r,"pretrained_model_name_or_path"),u$r.forEach(t),fze=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zU=n(lE,"CODE",{});var b$r=s(zU);mze=r(b$r,"pretrained_model_name_or_path"),b$r.forEach(t),gze=r(lE,":"),lE.forEach(t),hze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var r7=s(Wn);WU=n(r7,"STRONG",{});var v$r=s(WU);pze=r(v$r,"albert"),v$r.forEach(t),_ze=r(r7," \u2014 "),UB=n(r7,"A",{href:!0});var T$r=s(UB);uze=r(T$r,"AlbertTokenizer"),T$r.forEach(t),bze=r(r7," or "),JB=n(r7,"A",{href:!0});var F$r=s(JB);vze=r(F$r,"AlbertTokenizerFast"),F$r.forEach(t),Tze=r(r7," (ALBERT model)"),r7.forEach(t),Fze=i(y),Qn=n(y,"LI",{});var t7=s(Qn);QU=n(t7,"STRONG",{});var C$r=s(QU);Cze=r(C$r,"bart"),C$r.forEach(t),Mze=r(t7," \u2014 "),YB=n(t7,"A",{href:!0});var M$r=s(YB);Eze=r(M$r,"BartTokenizer"),M$r.forEach(t),yze=r(t7," or "),KB=n(t7,"A",{href:!0});var E$r=s(KB);wze=r(E$r,"BartTokenizerFast"),E$r.forEach(t),Aze=r(t7," (BART model)"),t7.forEach(t),Lze=i(y),Hn=n(y,"LI",{});var a7=s(Hn);HU=n(a7,"STRONG",{});var y$r=s(HU);Bze=r(y$r,"barthez"),y$r.forEach(t),xze=r(a7," \u2014 "),ZB=n(a7,"A",{href:!0});var w$r=s(ZB);kze=r(w$r,"BarthezTokenizer"),w$r.forEach(t),Rze=r(a7," or "),ex=n(a7,"A",{href:!0});var A$r=s(ex);Sze=r(A$r,"BarthezTokenizerFast"),A$r.forEach(t),Pze=r(a7," (BARThez model)"),a7.forEach(t),$ze=i(y),Pg=n(y,"LI",{});var BCe=s(Pg);UU=n(BCe,"STRONG",{});var L$r=s(UU);Ize=r(L$r,"bartpho"),L$r.forEach(t),Nze=r(BCe," \u2014 "),ox=n(BCe,"A",{href:!0});var B$r=s(ox);jze=r(B$r,"BartphoTokenizer"),B$r.forEach(t),Dze=r(BCe," (BARTpho model)"),BCe.forEach(t),qze=i(y),Un=n(y,"LI",{});var n7=s(Un);JU=n(n7,"STRONG",{});var x$r=s(JU);Gze=r(x$r,"bert"),x$r.forEach(t),Oze=r(n7," \u2014 "),rx=n(n7,"A",{href:!0});var k$r=s(rx);Xze=r(k$r,"BertTokenizer"),k$r.forEach(t),Vze=r(n7," or "),tx=n(n7,"A",{href:!0});var R$r=s(tx);zze=r(R$r,"BertTokenizerFast"),R$r.forEach(t),Wze=r(n7," (BERT model)"),n7.forEach(t),Qze=i(y),$g=n(y,"LI",{});var xCe=s($g);YU=n(xCe,"STRONG",{});var S$r=s(YU);Hze=r(S$r,"bert-generation"),S$r.forEach(t),Uze=r(xCe," \u2014 "),ax=n(xCe,"A",{href:!0});var P$r=s(ax);Jze=r(P$r,"BertGenerationTokenizer"),P$r.forEach(t),Yze=r(xCe," (Bert Generation model)"),xCe.forEach(t),Kze=i(y),Ig=n(y,"LI",{});var kCe=s(Ig);KU=n(kCe,"STRONG",{});var $$r=s(KU);Zze=r($$r,"bert-japanese"),$$r.forEach(t),eWe=r(kCe," \u2014 "),nx=n(kCe,"A",{href:!0});var I$r=s(nx);oWe=r(I$r,"BertJapaneseTokenizer"),I$r.forEach(t),rWe=r(kCe," (BertJapanese model)"),kCe.forEach(t),tWe=i(y),Ng=n(y,"LI",{});var RCe=s(Ng);ZU=n(RCe,"STRONG",{});var N$r=s(ZU);aWe=r(N$r,"bertweet"),N$r.forEach(t),nWe=r(RCe," \u2014 "),sx=n(RCe,"A",{href:!0});var j$r=s(sx);sWe=r(j$r,"BertweetTokenizer"),j$r.forEach(t),lWe=r(RCe," (Bertweet model)"),RCe.forEach(t),iWe=i(y),Jn=n(y,"LI",{});var s7=s(Jn);eJ=n(s7,"STRONG",{});var D$r=s(eJ);dWe=r(D$r,"big_bird"),D$r.forEach(t),cWe=r(s7," \u2014 "),lx=n(s7,"A",{href:!0});var q$r=s(lx);fWe=r(q$r,"BigBirdTokenizer"),q$r.forEach(t),mWe=r(s7," or "),ix=n(s7,"A",{href:!0});var G$r=s(ix);gWe=r(G$r,"BigBirdTokenizerFast"),G$r.forEach(t),hWe=r(s7," (BigBird model)"),s7.forEach(t),pWe=i(y),Yn=n(y,"LI",{});var l7=s(Yn);oJ=n(l7,"STRONG",{});var O$r=s(oJ);_We=r(O$r,"bigbird_pegasus"),O$r.forEach(t),uWe=r(l7," \u2014 "),dx=n(l7,"A",{href:!0});var X$r=s(dx);bWe=r(X$r,"PegasusTokenizer"),X$r.forEach(t),vWe=r(l7," or "),cx=n(l7,"A",{href:!0});var V$r=s(cx);TWe=r(V$r,"PegasusTokenizerFast"),V$r.forEach(t),FWe=r(l7," (BigBirdPegasus model)"),l7.forEach(t),CWe=i(y),Kn=n(y,"LI",{});var i7=s(Kn);rJ=n(i7,"STRONG",{});var z$r=s(rJ);MWe=r(z$r,"blenderbot"),z$r.forEach(t),EWe=r(i7," \u2014 "),fx=n(i7,"A",{href:!0});var W$r=s(fx);yWe=r(W$r,"BlenderbotTokenizer"),W$r.forEach(t),wWe=r(i7," or "),mx=n(i7,"A",{href:!0});var Q$r=s(mx);AWe=r(Q$r,"BlenderbotTokenizerFast"),Q$r.forEach(t),LWe=r(i7," (Blenderbot model)"),i7.forEach(t),BWe=i(y),jg=n(y,"LI",{});var SCe=s(jg);tJ=n(SCe,"STRONG",{});var H$r=s(tJ);xWe=r(H$r,"blenderbot-small"),H$r.forEach(t),kWe=r(SCe," \u2014 "),gx=n(SCe,"A",{href:!0});var U$r=s(gx);RWe=r(U$r,"BlenderbotSmallTokenizer"),U$r.forEach(t),SWe=r(SCe," (BlenderbotSmall model)"),SCe.forEach(t),PWe=i(y),Dg=n(y,"LI",{});var PCe=s(Dg);aJ=n(PCe,"STRONG",{});var J$r=s(aJ);$We=r(J$r,"byt5"),J$r.forEach(t),IWe=r(PCe," \u2014 "),hx=n(PCe,"A",{href:!0});var Y$r=s(hx);NWe=r(Y$r,"ByT5Tokenizer"),Y$r.forEach(t),jWe=r(PCe," (ByT5 model)"),PCe.forEach(t),DWe=i(y),Zn=n(y,"LI",{});var d7=s(Zn);nJ=n(d7,"STRONG",{});var K$r=s(nJ);qWe=r(K$r,"camembert"),K$r.forEach(t),GWe=r(d7," \u2014 "),px=n(d7,"A",{href:!0});var Z$r=s(px);OWe=r(Z$r,"CamembertTokenizer"),Z$r.forEach(t),XWe=r(d7," or "),_x=n(d7,"A",{href:!0});var eIr=s(_x);VWe=r(eIr,"CamembertTokenizerFast"),eIr.forEach(t),zWe=r(d7," (CamemBERT model)"),d7.forEach(t),WWe=i(y),qg=n(y,"LI",{});var $Ce=s(qg);sJ=n($Ce,"STRONG",{});var oIr=s(sJ);QWe=r(oIr,"canine"),oIr.forEach(t),HWe=r($Ce," \u2014 "),ux=n($Ce,"A",{href:!0});var rIr=s(ux);UWe=r(rIr,"CanineTokenizer"),rIr.forEach(t),JWe=r($Ce," (Canine model)"),$Ce.forEach(t),YWe=i(y),es=n(y,"LI",{});var c7=s(es);lJ=n(c7,"STRONG",{});var tIr=s(lJ);KWe=r(tIr,"clip"),tIr.forEach(t),ZWe=r(c7," \u2014 "),bx=n(c7,"A",{href:!0});var aIr=s(bx);eQe=r(aIr,"CLIPTokenizer"),aIr.forEach(t),oQe=r(c7," or "),vx=n(c7,"A",{href:!0});var nIr=s(vx);rQe=r(nIr,"CLIPTokenizerFast"),nIr.forEach(t),tQe=r(c7," (CLIP model)"),c7.forEach(t),aQe=i(y),os=n(y,"LI",{});var f7=s(os);iJ=n(f7,"STRONG",{});var sIr=s(iJ);nQe=r(sIr,"convbert"),sIr.forEach(t),sQe=r(f7," \u2014 "),Tx=n(f7,"A",{href:!0});var lIr=s(Tx);lQe=r(lIr,"ConvBertTokenizer"),lIr.forEach(t),iQe=r(f7," or "),Fx=n(f7,"A",{href:!0});var iIr=s(Fx);dQe=r(iIr,"ConvBertTokenizerFast"),iIr.forEach(t),cQe=r(f7," (ConvBERT model)"),f7.forEach(t),fQe=i(y),rs=n(y,"LI",{});var m7=s(rs);dJ=n(m7,"STRONG",{});var dIr=s(dJ);mQe=r(dIr,"cpm"),dIr.forEach(t),gQe=r(m7," \u2014 "),Cx=n(m7,"A",{href:!0});var cIr=s(Cx);hQe=r(cIr,"CpmTokenizer"),cIr.forEach(t),pQe=r(m7," or "),cJ=n(m7,"CODE",{});var fIr=s(cJ);_Qe=r(fIr,"CpmTokenizerFast"),fIr.forEach(t),uQe=r(m7," (CPM model)"),m7.forEach(t),bQe=i(y),Gg=n(y,"LI",{});var ICe=s(Gg);fJ=n(ICe,"STRONG",{});var mIr=s(fJ);vQe=r(mIr,"ctrl"),mIr.forEach(t),TQe=r(ICe," \u2014 "),Mx=n(ICe,"A",{href:!0});var gIr=s(Mx);FQe=r(gIr,"CTRLTokenizer"),gIr.forEach(t),CQe=r(ICe," (CTRL model)"),ICe.forEach(t),MQe=i(y),ts=n(y,"LI",{});var g7=s(ts);mJ=n(g7,"STRONG",{});var hIr=s(mJ);EQe=r(hIr,"deberta"),hIr.forEach(t),yQe=r(g7," \u2014 "),Ex=n(g7,"A",{href:!0});var pIr=s(Ex);wQe=r(pIr,"DebertaTokenizer"),pIr.forEach(t),AQe=r(g7," or "),yx=n(g7,"A",{href:!0});var _Ir=s(yx);LQe=r(_Ir,"DebertaTokenizerFast"),_Ir.forEach(t),BQe=r(g7," (DeBERTa model)"),g7.forEach(t),xQe=i(y),Og=n(y,"LI",{});var NCe=s(Og);gJ=n(NCe,"STRONG",{});var uIr=s(gJ);kQe=r(uIr,"deberta-v2"),uIr.forEach(t),RQe=r(NCe," \u2014 "),wx=n(NCe,"A",{href:!0});var bIr=s(wx);SQe=r(bIr,"DebertaV2Tokenizer"),bIr.forEach(t),PQe=r(NCe," (DeBERTa-v2 model)"),NCe.forEach(t),$Qe=i(y),as=n(y,"LI",{});var h7=s(as);hJ=n(h7,"STRONG",{});var vIr=s(hJ);IQe=r(vIr,"distilbert"),vIr.forEach(t),NQe=r(h7," \u2014 "),Ax=n(h7,"A",{href:!0});var TIr=s(Ax);jQe=r(TIr,"DistilBertTokenizer"),TIr.forEach(t),DQe=r(h7," or "),Lx=n(h7,"A",{href:!0});var FIr=s(Lx);qQe=r(FIr,"DistilBertTokenizerFast"),FIr.forEach(t),GQe=r(h7," (DistilBERT model)"),h7.forEach(t),OQe=i(y),ns=n(y,"LI",{});var p7=s(ns);pJ=n(p7,"STRONG",{});var CIr=s(pJ);XQe=r(CIr,"dpr"),CIr.forEach(t),VQe=r(p7," \u2014 "),Bx=n(p7,"A",{href:!0});var MIr=s(Bx);zQe=r(MIr,"DPRQuestionEncoderTokenizer"),MIr.forEach(t),WQe=r(p7," or "),xx=n(p7,"A",{href:!0});var EIr=s(xx);QQe=r(EIr,"DPRQuestionEncoderTokenizerFast"),EIr.forEach(t),HQe=r(p7," (DPR model)"),p7.forEach(t),UQe=i(y),ss=n(y,"LI",{});var _7=s(ss);_J=n(_7,"STRONG",{});var yIr=s(_J);JQe=r(yIr,"electra"),yIr.forEach(t),YQe=r(_7," \u2014 "),kx=n(_7,"A",{href:!0});var wIr=s(kx);KQe=r(wIr,"ElectraTokenizer"),wIr.forEach(t),ZQe=r(_7," or "),Rx=n(_7,"A",{href:!0});var AIr=s(Rx);eHe=r(AIr,"ElectraTokenizerFast"),AIr.forEach(t),oHe=r(_7," (ELECTRA model)"),_7.forEach(t),rHe=i(y),Xg=n(y,"LI",{});var jCe=s(Xg);uJ=n(jCe,"STRONG",{});var LIr=s(uJ);tHe=r(LIr,"flaubert"),LIr.forEach(t),aHe=r(jCe," \u2014 "),Sx=n(jCe,"A",{href:!0});var BIr=s(Sx);nHe=r(BIr,"FlaubertTokenizer"),BIr.forEach(t),sHe=r(jCe," (FlauBERT model)"),jCe.forEach(t),lHe=i(y),ls=n(y,"LI",{});var u7=s(ls);bJ=n(u7,"STRONG",{});var xIr=s(bJ);iHe=r(xIr,"fnet"),xIr.forEach(t),dHe=r(u7," \u2014 "),Px=n(u7,"A",{href:!0});var kIr=s(Px);cHe=r(kIr,"FNetTokenizer"),kIr.forEach(t),fHe=r(u7," or "),$x=n(u7,"A",{href:!0});var RIr=s($x);mHe=r(RIr,"FNetTokenizerFast"),RIr.forEach(t),gHe=r(u7," (FNet model)"),u7.forEach(t),hHe=i(y),Vg=n(y,"LI",{});var DCe=s(Vg);vJ=n(DCe,"STRONG",{});var SIr=s(vJ);pHe=r(SIr,"fsmt"),SIr.forEach(t),_He=r(DCe," \u2014 "),Ix=n(DCe,"A",{href:!0});var PIr=s(Ix);uHe=r(PIr,"FSMTTokenizer"),PIr.forEach(t),bHe=r(DCe," (FairSeq Machine-Translation model)"),DCe.forEach(t),vHe=i(y),is=n(y,"LI",{});var b7=s(is);TJ=n(b7,"STRONG",{});var $Ir=s(TJ);THe=r($Ir,"funnel"),$Ir.forEach(t),FHe=r(b7," \u2014 "),Nx=n(b7,"A",{href:!0});var IIr=s(Nx);CHe=r(IIr,"FunnelTokenizer"),IIr.forEach(t),MHe=r(b7," or "),jx=n(b7,"A",{href:!0});var NIr=s(jx);EHe=r(NIr,"FunnelTokenizerFast"),NIr.forEach(t),yHe=r(b7," (Funnel Transformer model)"),b7.forEach(t),wHe=i(y),ds=n(y,"LI",{});var v7=s(ds);FJ=n(v7,"STRONG",{});var jIr=s(FJ);AHe=r(jIr,"gpt2"),jIr.forEach(t),LHe=r(v7," \u2014 "),Dx=n(v7,"A",{href:!0});var DIr=s(Dx);BHe=r(DIr,"GPT2Tokenizer"),DIr.forEach(t),xHe=r(v7," or "),qx=n(v7,"A",{href:!0});var qIr=s(qx);kHe=r(qIr,"GPT2TokenizerFast"),qIr.forEach(t),RHe=r(v7," (OpenAI GPT-2 model)"),v7.forEach(t),SHe=i(y),cs=n(y,"LI",{});var T7=s(cs);CJ=n(T7,"STRONG",{});var GIr=s(CJ);PHe=r(GIr,"gpt_neo"),GIr.forEach(t),$He=r(T7," \u2014 "),Gx=n(T7,"A",{href:!0});var OIr=s(Gx);IHe=r(OIr,"GPT2Tokenizer"),OIr.forEach(t),NHe=r(T7," or "),Ox=n(T7,"A",{href:!0});var XIr=s(Ox);jHe=r(XIr,"GPT2TokenizerFast"),XIr.forEach(t),DHe=r(T7," (GPT Neo model)"),T7.forEach(t),qHe=i(y),fs=n(y,"LI",{});var F7=s(fs);MJ=n(F7,"STRONG",{});var VIr=s(MJ);GHe=r(VIr,"herbert"),VIr.forEach(t),OHe=r(F7," \u2014 "),Xx=n(F7,"A",{href:!0});var zIr=s(Xx);XHe=r(zIr,"HerbertTokenizer"),zIr.forEach(t),VHe=r(F7," or "),Vx=n(F7,"A",{href:!0});var WIr=s(Vx);zHe=r(WIr,"HerbertTokenizerFast"),WIr.forEach(t),WHe=r(F7," (HerBERT model)"),F7.forEach(t),QHe=i(y),zg=n(y,"LI",{});var qCe=s(zg);EJ=n(qCe,"STRONG",{});var QIr=s(EJ);HHe=r(QIr,"hubert"),QIr.forEach(t),UHe=r(qCe," \u2014 "),zx=n(qCe,"A",{href:!0});var HIr=s(zx);JHe=r(HIr,"Wav2Vec2CTCTokenizer"),HIr.forEach(t),YHe=r(qCe," (Hubert model)"),qCe.forEach(t),KHe=i(y),ms=n(y,"LI",{});var C7=s(ms);yJ=n(C7,"STRONG",{});var UIr=s(yJ);ZHe=r(UIr,"ibert"),UIr.forEach(t),eUe=r(C7," \u2014 "),Wx=n(C7,"A",{href:!0});var JIr=s(Wx);oUe=r(JIr,"RobertaTokenizer"),JIr.forEach(t),rUe=r(C7," or "),Qx=n(C7,"A",{href:!0});var YIr=s(Qx);tUe=r(YIr,"RobertaTokenizerFast"),YIr.forEach(t),aUe=r(C7," (I-BERT model)"),C7.forEach(t),nUe=i(y),gs=n(y,"LI",{});var M7=s(gs);wJ=n(M7,"STRONG",{});var KIr=s(wJ);sUe=r(KIr,"layoutlm"),KIr.forEach(t),lUe=r(M7," \u2014 "),Hx=n(M7,"A",{href:!0});var ZIr=s(Hx);iUe=r(ZIr,"LayoutLMTokenizer"),ZIr.forEach(t),dUe=r(M7," or "),Ux=n(M7,"A",{href:!0});var eNr=s(Ux);cUe=r(eNr,"LayoutLMTokenizerFast"),eNr.forEach(t),fUe=r(M7," (LayoutLM model)"),M7.forEach(t),mUe=i(y),hs=n(y,"LI",{});var E7=s(hs);AJ=n(E7,"STRONG",{});var oNr=s(AJ);gUe=r(oNr,"layoutlmv2"),oNr.forEach(t),hUe=r(E7," \u2014 "),Jx=n(E7,"A",{href:!0});var rNr=s(Jx);pUe=r(rNr,"LayoutLMv2Tokenizer"),rNr.forEach(t),_Ue=r(E7," or "),Yx=n(E7,"A",{href:!0});var tNr=s(Yx);uUe=r(tNr,"LayoutLMv2TokenizerFast"),tNr.forEach(t),bUe=r(E7," (LayoutLMv2 model)"),E7.forEach(t),vUe=i(y),ps=n(y,"LI",{});var y7=s(ps);LJ=n(y7,"STRONG",{});var aNr=s(LJ);TUe=r(aNr,"layoutxlm"),aNr.forEach(t),FUe=r(y7," \u2014 "),Kx=n(y7,"A",{href:!0});var nNr=s(Kx);CUe=r(nNr,"LayoutXLMTokenizer"),nNr.forEach(t),MUe=r(y7," or "),Zx=n(y7,"A",{href:!0});var sNr=s(Zx);EUe=r(sNr,"LayoutXLMTokenizerFast"),sNr.forEach(t),yUe=r(y7," (LayoutXLM model)"),y7.forEach(t),wUe=i(y),_s=n(y,"LI",{});var w7=s(_s);BJ=n(w7,"STRONG",{});var lNr=s(BJ);AUe=r(lNr,"led"),lNr.forEach(t),LUe=r(w7," \u2014 "),ek=n(w7,"A",{href:!0});var iNr=s(ek);BUe=r(iNr,"LEDTokenizer"),iNr.forEach(t),xUe=r(w7," or "),ok=n(w7,"A",{href:!0});var dNr=s(ok);kUe=r(dNr,"LEDTokenizerFast"),dNr.forEach(t),RUe=r(w7," (LED model)"),w7.forEach(t),SUe=i(y),us=n(y,"LI",{});var A7=s(us);xJ=n(A7,"STRONG",{});var cNr=s(xJ);PUe=r(cNr,"longformer"),cNr.forEach(t),$Ue=r(A7," \u2014 "),rk=n(A7,"A",{href:!0});var fNr=s(rk);IUe=r(fNr,"LongformerTokenizer"),fNr.forEach(t),NUe=r(A7," or "),tk=n(A7,"A",{href:!0});var mNr=s(tk);jUe=r(mNr,"LongformerTokenizerFast"),mNr.forEach(t),DUe=r(A7," (Longformer model)"),A7.forEach(t),qUe=i(y),Wg=n(y,"LI",{});var GCe=s(Wg);kJ=n(GCe,"STRONG",{});var gNr=s(kJ);GUe=r(gNr,"luke"),gNr.forEach(t),OUe=r(GCe," \u2014 "),ak=n(GCe,"A",{href:!0});var hNr=s(ak);XUe=r(hNr,"LukeTokenizer"),hNr.forEach(t),VUe=r(GCe," (LUKE model)"),GCe.forEach(t),zUe=i(y),bs=n(y,"LI",{});var L7=s(bs);RJ=n(L7,"STRONG",{});var pNr=s(RJ);WUe=r(pNr,"lxmert"),pNr.forEach(t),QUe=r(L7," \u2014 "),nk=n(L7,"A",{href:!0});var _Nr=s(nk);HUe=r(_Nr,"LxmertTokenizer"),_Nr.forEach(t),UUe=r(L7," or "),sk=n(L7,"A",{href:!0});var uNr=s(sk);JUe=r(uNr,"LxmertTokenizerFast"),uNr.forEach(t),YUe=r(L7," (LXMERT model)"),L7.forEach(t),KUe=i(y),Qg=n(y,"LI",{});var OCe=s(Qg);SJ=n(OCe,"STRONG",{});var bNr=s(SJ);ZUe=r(bNr,"m2m_100"),bNr.forEach(t),eJe=r(OCe," \u2014 "),lk=n(OCe,"A",{href:!0});var vNr=s(lk);oJe=r(vNr,"M2M100Tokenizer"),vNr.forEach(t),rJe=r(OCe," (M2M100 model)"),OCe.forEach(t),tJe=i(y),Hg=n(y,"LI",{});var XCe=s(Hg);PJ=n(XCe,"STRONG",{});var TNr=s(PJ);aJe=r(TNr,"marian"),TNr.forEach(t),nJe=r(XCe," \u2014 "),ik=n(XCe,"A",{href:!0});var FNr=s(ik);sJe=r(FNr,"MarianTokenizer"),FNr.forEach(t),lJe=r(XCe," (Marian model)"),XCe.forEach(t),iJe=i(y),vs=n(y,"LI",{});var B7=s(vs);$J=n(B7,"STRONG",{});var CNr=s($J);dJe=r(CNr,"mbart"),CNr.forEach(t),cJe=r(B7," \u2014 "),dk=n(B7,"A",{href:!0});var MNr=s(dk);fJe=r(MNr,"MBartTokenizer"),MNr.forEach(t),mJe=r(B7," or "),ck=n(B7,"A",{href:!0});var ENr=s(ck);gJe=r(ENr,"MBartTokenizerFast"),ENr.forEach(t),hJe=r(B7," (mBART model)"),B7.forEach(t),pJe=i(y),Ts=n(y,"LI",{});var x7=s(Ts);IJ=n(x7,"STRONG",{});var yNr=s(IJ);_Je=r(yNr,"mbart50"),yNr.forEach(t),uJe=r(x7," \u2014 "),fk=n(x7,"A",{href:!0});var wNr=s(fk);bJe=r(wNr,"MBart50Tokenizer"),wNr.forEach(t),vJe=r(x7," or "),mk=n(x7,"A",{href:!0});var ANr=s(mk);TJe=r(ANr,"MBart50TokenizerFast"),ANr.forEach(t),FJe=r(x7," (mBART-50 model)"),x7.forEach(t),CJe=i(y),Ug=n(y,"LI",{});var VCe=s(Ug);NJ=n(VCe,"STRONG",{});var LNr=s(NJ);MJe=r(LNr,"mluke"),LNr.forEach(t),EJe=r(VCe," \u2014 "),gk=n(VCe,"A",{href:!0});var BNr=s(gk);yJe=r(BNr,"MLukeTokenizer"),BNr.forEach(t),wJe=r(VCe," (mLUKE model)"),VCe.forEach(t),AJe=i(y),Fs=n(y,"LI",{});var k7=s(Fs);jJ=n(k7,"STRONG",{});var xNr=s(jJ);LJe=r(xNr,"mobilebert"),xNr.forEach(t),BJe=r(k7," \u2014 "),hk=n(k7,"A",{href:!0});var kNr=s(hk);xJe=r(kNr,"MobileBertTokenizer"),kNr.forEach(t),kJe=r(k7," or "),pk=n(k7,"A",{href:!0});var RNr=s(pk);RJe=r(RNr,"MobileBertTokenizerFast"),RNr.forEach(t),SJe=r(k7," (MobileBERT model)"),k7.forEach(t),PJe=i(y),Cs=n(y,"LI",{});var R7=s(Cs);DJ=n(R7,"STRONG",{});var SNr=s(DJ);$Je=r(SNr,"mpnet"),SNr.forEach(t),IJe=r(R7," \u2014 "),_k=n(R7,"A",{href:!0});var PNr=s(_k);NJe=r(PNr,"MPNetTokenizer"),PNr.forEach(t),jJe=r(R7," or "),uk=n(R7,"A",{href:!0});var $Nr=s(uk);DJe=r($Nr,"MPNetTokenizerFast"),$Nr.forEach(t),qJe=r(R7," (MPNet model)"),R7.forEach(t),GJe=i(y),Ms=n(y,"LI",{});var S7=s(Ms);qJ=n(S7,"STRONG",{});var INr=s(qJ);OJe=r(INr,"mt5"),INr.forEach(t),XJe=r(S7," \u2014 "),bk=n(S7,"A",{href:!0});var NNr=s(bk);VJe=r(NNr,"MT5Tokenizer"),NNr.forEach(t),zJe=r(S7," or "),vk=n(S7,"A",{href:!0});var jNr=s(vk);WJe=r(jNr,"MT5TokenizerFast"),jNr.forEach(t),QJe=r(S7," (mT5 model)"),S7.forEach(t),HJe=i(y),Es=n(y,"LI",{});var P7=s(Es);GJ=n(P7,"STRONG",{});var DNr=s(GJ);UJe=r(DNr,"openai-gpt"),DNr.forEach(t),JJe=r(P7," \u2014 "),Tk=n(P7,"A",{href:!0});var qNr=s(Tk);YJe=r(qNr,"OpenAIGPTTokenizer"),qNr.forEach(t),KJe=r(P7," or "),Fk=n(P7,"A",{href:!0});var GNr=s(Fk);ZJe=r(GNr,"OpenAIGPTTokenizerFast"),GNr.forEach(t),eYe=r(P7," (OpenAI GPT model)"),P7.forEach(t),oYe=i(y),ys=n(y,"LI",{});var $7=s(ys);OJ=n($7,"STRONG",{});var ONr=s(OJ);rYe=r(ONr,"pegasus"),ONr.forEach(t),tYe=r($7," \u2014 "),Ck=n($7,"A",{href:!0});var XNr=s(Ck);aYe=r(XNr,"PegasusTokenizer"),XNr.forEach(t),nYe=r($7," or "),Mk=n($7,"A",{href:!0});var VNr=s(Mk);sYe=r(VNr,"PegasusTokenizerFast"),VNr.forEach(t),lYe=r($7," (Pegasus model)"),$7.forEach(t),iYe=i(y),Jg=n(y,"LI",{});var zCe=s(Jg);XJ=n(zCe,"STRONG",{});var zNr=s(XJ);dYe=r(zNr,"perceiver"),zNr.forEach(t),cYe=r(zCe," \u2014 "),Ek=n(zCe,"A",{href:!0});var WNr=s(Ek);fYe=r(WNr,"PerceiverTokenizer"),WNr.forEach(t),mYe=r(zCe," (Perceiver model)"),zCe.forEach(t),gYe=i(y),Yg=n(y,"LI",{});var WCe=s(Yg);VJ=n(WCe,"STRONG",{});var QNr=s(VJ);hYe=r(QNr,"phobert"),QNr.forEach(t),pYe=r(WCe," \u2014 "),yk=n(WCe,"A",{href:!0});var HNr=s(yk);_Ye=r(HNr,"PhobertTokenizer"),HNr.forEach(t),uYe=r(WCe," (PhoBERT model)"),WCe.forEach(t),bYe=i(y),Kg=n(y,"LI",{});var QCe=s(Kg);zJ=n(QCe,"STRONG",{});var UNr=s(zJ);vYe=r(UNr,"plbart"),UNr.forEach(t),TYe=r(QCe," \u2014 "),wk=n(QCe,"A",{href:!0});var JNr=s(wk);FYe=r(JNr,"PLBartTokenizer"),JNr.forEach(t),CYe=r(QCe," (PLBart model)"),QCe.forEach(t),MYe=i(y),Zg=n(y,"LI",{});var HCe=s(Zg);WJ=n(HCe,"STRONG",{});var YNr=s(WJ);EYe=r(YNr,"prophetnet"),YNr.forEach(t),yYe=r(HCe," \u2014 "),Ak=n(HCe,"A",{href:!0});var KNr=s(Ak);wYe=r(KNr,"ProphetNetTokenizer"),KNr.forEach(t),AYe=r(HCe," (ProphetNet model)"),HCe.forEach(t),LYe=i(y),ws=n(y,"LI",{});var I7=s(ws);QJ=n(I7,"STRONG",{});var ZNr=s(QJ);BYe=r(ZNr,"qdqbert"),ZNr.forEach(t),xYe=r(I7," \u2014 "),Lk=n(I7,"A",{href:!0});var ejr=s(Lk);kYe=r(ejr,"BertTokenizer"),ejr.forEach(t),RYe=r(I7," or "),Bk=n(I7,"A",{href:!0});var ojr=s(Bk);SYe=r(ojr,"BertTokenizerFast"),ojr.forEach(t),PYe=r(I7," (QDQBert model)"),I7.forEach(t),$Ye=i(y),eh=n(y,"LI",{});var UCe=s(eh);HJ=n(UCe,"STRONG",{});var rjr=s(HJ);IYe=r(rjr,"rag"),rjr.forEach(t),NYe=r(UCe," \u2014 "),xk=n(UCe,"A",{href:!0});var tjr=s(xk);jYe=r(tjr,"RagTokenizer"),tjr.forEach(t),DYe=r(UCe," (RAG model)"),UCe.forEach(t),qYe=i(y),As=n(y,"LI",{});var N7=s(As);UJ=n(N7,"STRONG",{});var ajr=s(UJ);GYe=r(ajr,"realm"),ajr.forEach(t),OYe=r(N7," \u2014 "),kk=n(N7,"A",{href:!0});var njr=s(kk);XYe=r(njr,"RealmTokenizer"),njr.forEach(t),VYe=r(N7," or "),Rk=n(N7,"A",{href:!0});var sjr=s(Rk);zYe=r(sjr,"RealmTokenizerFast"),sjr.forEach(t),WYe=r(N7," (Realm model)"),N7.forEach(t),QYe=i(y),Ls=n(y,"LI",{});var j7=s(Ls);JJ=n(j7,"STRONG",{});var ljr=s(JJ);HYe=r(ljr,"reformer"),ljr.forEach(t),UYe=r(j7," \u2014 "),Sk=n(j7,"A",{href:!0});var ijr=s(Sk);JYe=r(ijr,"ReformerTokenizer"),ijr.forEach(t),YYe=r(j7," or "),Pk=n(j7,"A",{href:!0});var djr=s(Pk);KYe=r(djr,"ReformerTokenizerFast"),djr.forEach(t),ZYe=r(j7," (Reformer model)"),j7.forEach(t),eKe=i(y),Bs=n(y,"LI",{});var D7=s(Bs);YJ=n(D7,"STRONG",{});var cjr=s(YJ);oKe=r(cjr,"rembert"),cjr.forEach(t),rKe=r(D7," \u2014 "),$k=n(D7,"A",{href:!0});var fjr=s($k);tKe=r(fjr,"RemBertTokenizer"),fjr.forEach(t),aKe=r(D7," or "),Ik=n(D7,"A",{href:!0});var mjr=s(Ik);nKe=r(mjr,"RemBertTokenizerFast"),mjr.forEach(t),sKe=r(D7," (RemBERT model)"),D7.forEach(t),lKe=i(y),xs=n(y,"LI",{});var q7=s(xs);KJ=n(q7,"STRONG",{});var gjr=s(KJ);iKe=r(gjr,"retribert"),gjr.forEach(t),dKe=r(q7," \u2014 "),Nk=n(q7,"A",{href:!0});var hjr=s(Nk);cKe=r(hjr,"RetriBertTokenizer"),hjr.forEach(t),fKe=r(q7," or "),jk=n(q7,"A",{href:!0});var pjr=s(jk);mKe=r(pjr,"RetriBertTokenizerFast"),pjr.forEach(t),gKe=r(q7," (RetriBERT model)"),q7.forEach(t),hKe=i(y),ks=n(y,"LI",{});var G7=s(ks);ZJ=n(G7,"STRONG",{});var _jr=s(ZJ);pKe=r(_jr,"roberta"),_jr.forEach(t),_Ke=r(G7," \u2014 "),Dk=n(G7,"A",{href:!0});var ujr=s(Dk);uKe=r(ujr,"RobertaTokenizer"),ujr.forEach(t),bKe=r(G7," or "),qk=n(G7,"A",{href:!0});var bjr=s(qk);vKe=r(bjr,"RobertaTokenizerFast"),bjr.forEach(t),TKe=r(G7," (RoBERTa model)"),G7.forEach(t),FKe=i(y),Rs=n(y,"LI",{});var O7=s(Rs);eY=n(O7,"STRONG",{});var vjr=s(eY);CKe=r(vjr,"roformer"),vjr.forEach(t),MKe=r(O7," \u2014 "),Gk=n(O7,"A",{href:!0});var Tjr=s(Gk);EKe=r(Tjr,"RoFormerTokenizer"),Tjr.forEach(t),yKe=r(O7," or "),Ok=n(O7,"A",{href:!0});var Fjr=s(Ok);wKe=r(Fjr,"RoFormerTokenizerFast"),Fjr.forEach(t),AKe=r(O7," (RoFormer model)"),O7.forEach(t),LKe=i(y),oh=n(y,"LI",{});var JCe=s(oh);oY=n(JCe,"STRONG",{});var Cjr=s(oY);BKe=r(Cjr,"speech_to_text"),Cjr.forEach(t),xKe=r(JCe," \u2014 "),Xk=n(JCe,"A",{href:!0});var Mjr=s(Xk);kKe=r(Mjr,"Speech2TextTokenizer"),Mjr.forEach(t),RKe=r(JCe," (Speech2Text model)"),JCe.forEach(t),SKe=i(y),rh=n(y,"LI",{});var YCe=s(rh);rY=n(YCe,"STRONG",{});var Ejr=s(rY);PKe=r(Ejr,"speech_to_text_2"),Ejr.forEach(t),$Ke=r(YCe," \u2014 "),Vk=n(YCe,"A",{href:!0});var yjr=s(Vk);IKe=r(yjr,"Speech2Text2Tokenizer"),yjr.forEach(t),NKe=r(YCe," (Speech2Text2 model)"),YCe.forEach(t),jKe=i(y),Ss=n(y,"LI",{});var X7=s(Ss);tY=n(X7,"STRONG",{});var wjr=s(tY);DKe=r(wjr,"splinter"),wjr.forEach(t),qKe=r(X7," \u2014 "),zk=n(X7,"A",{href:!0});var Ajr=s(zk);GKe=r(Ajr,"SplinterTokenizer"),Ajr.forEach(t),OKe=r(X7," or "),Wk=n(X7,"A",{href:!0});var Ljr=s(Wk);XKe=r(Ljr,"SplinterTokenizerFast"),Ljr.forEach(t),VKe=r(X7," (Splinter model)"),X7.forEach(t),zKe=i(y),Ps=n(y,"LI",{});var V7=s(Ps);aY=n(V7,"STRONG",{});var Bjr=s(aY);WKe=r(Bjr,"squeezebert"),Bjr.forEach(t),QKe=r(V7," \u2014 "),Qk=n(V7,"A",{href:!0});var xjr=s(Qk);HKe=r(xjr,"SqueezeBertTokenizer"),xjr.forEach(t),UKe=r(V7," or "),Hk=n(V7,"A",{href:!0});var kjr=s(Hk);JKe=r(kjr,"SqueezeBertTokenizerFast"),kjr.forEach(t),YKe=r(V7," (SqueezeBERT model)"),V7.forEach(t),KKe=i(y),$s=n(y,"LI",{});var z7=s($s);nY=n(z7,"STRONG",{});var Rjr=s(nY);ZKe=r(Rjr,"t5"),Rjr.forEach(t),eZe=r(z7," \u2014 "),Uk=n(z7,"A",{href:!0});var Sjr=s(Uk);oZe=r(Sjr,"T5Tokenizer"),Sjr.forEach(t),rZe=r(z7," or "),Jk=n(z7,"A",{href:!0});var Pjr=s(Jk);tZe=r(Pjr,"T5TokenizerFast"),Pjr.forEach(t),aZe=r(z7," (T5 model)"),z7.forEach(t),nZe=i(y),th=n(y,"LI",{});var KCe=s(th);sY=n(KCe,"STRONG",{});var $jr=s(sY);sZe=r($jr,"tapas"),$jr.forEach(t),lZe=r(KCe," \u2014 "),Yk=n(KCe,"A",{href:!0});var Ijr=s(Yk);iZe=r(Ijr,"TapasTokenizer"),Ijr.forEach(t),dZe=r(KCe," (TAPAS model)"),KCe.forEach(t),cZe=i(y),ah=n(y,"LI",{});var ZCe=s(ah);lY=n(ZCe,"STRONG",{});var Njr=s(lY);fZe=r(Njr,"transfo-xl"),Njr.forEach(t),mZe=r(ZCe," \u2014 "),Kk=n(ZCe,"A",{href:!0});var jjr=s(Kk);gZe=r(jjr,"TransfoXLTokenizer"),jjr.forEach(t),hZe=r(ZCe," (Transformer-XL model)"),ZCe.forEach(t),pZe=i(y),nh=n(y,"LI",{});var eMe=s(nh);iY=n(eMe,"STRONG",{});var Djr=s(iY);_Ze=r(Djr,"wav2vec2"),Djr.forEach(t),uZe=r(eMe," \u2014 "),Zk=n(eMe,"A",{href:!0});var qjr=s(Zk);bZe=r(qjr,"Wav2Vec2CTCTokenizer"),qjr.forEach(t),vZe=r(eMe," (Wav2Vec2 model)"),eMe.forEach(t),TZe=i(y),sh=n(y,"LI",{});var oMe=s(sh);dY=n(oMe,"STRONG",{});var Gjr=s(dY);FZe=r(Gjr,"wav2vec2_phoneme"),Gjr.forEach(t),CZe=r(oMe," \u2014 "),eR=n(oMe,"A",{href:!0});var Ojr=s(eR);MZe=r(Ojr,"Wav2Vec2PhonemeCTCTokenizer"),Ojr.forEach(t),EZe=r(oMe," (Wav2Vec2Phoneme model)"),oMe.forEach(t),yZe=i(y),Is=n(y,"LI",{});var W7=s(Is);cY=n(W7,"STRONG",{});var Xjr=s(cY);wZe=r(Xjr,"xglm"),Xjr.forEach(t),AZe=r(W7," \u2014 "),oR=n(W7,"A",{href:!0});var Vjr=s(oR);LZe=r(Vjr,"XGLMTokenizer"),Vjr.forEach(t),BZe=r(W7," or "),rR=n(W7,"A",{href:!0});var zjr=s(rR);xZe=r(zjr,"XGLMTokenizerFast"),zjr.forEach(t),kZe=r(W7," (XGLM model)"),W7.forEach(t),RZe=i(y),lh=n(y,"LI",{});var rMe=s(lh);fY=n(rMe,"STRONG",{});var Wjr=s(fY);SZe=r(Wjr,"xlm"),Wjr.forEach(t),PZe=r(rMe," \u2014 "),tR=n(rMe,"A",{href:!0});var Qjr=s(tR);$Ze=r(Qjr,"XLMTokenizer"),Qjr.forEach(t),IZe=r(rMe," (XLM model)"),rMe.forEach(t),NZe=i(y),ih=n(y,"LI",{});var tMe=s(ih);mY=n(tMe,"STRONG",{});var Hjr=s(mY);jZe=r(Hjr,"xlm-prophetnet"),Hjr.forEach(t),DZe=r(tMe," \u2014 "),aR=n(tMe,"A",{href:!0});var Ujr=s(aR);qZe=r(Ujr,"XLMProphetNetTokenizer"),Ujr.forEach(t),GZe=r(tMe," (XLMProphetNet model)"),tMe.forEach(t),OZe=i(y),Ns=n(y,"LI",{});var Q7=s(Ns);gY=n(Q7,"STRONG",{});var Jjr=s(gY);XZe=r(Jjr,"xlm-roberta"),Jjr.forEach(t),VZe=r(Q7," \u2014 "),nR=n(Q7,"A",{href:!0});var Yjr=s(nR);zZe=r(Yjr,"XLMRobertaTokenizer"),Yjr.forEach(t),WZe=r(Q7," or "),sR=n(Q7,"A",{href:!0});var Kjr=s(sR);QZe=r(Kjr,"XLMRobertaTokenizerFast"),Kjr.forEach(t),HZe=r(Q7," (XLM-RoBERTa model)"),Q7.forEach(t),UZe=i(y),js=n(y,"LI",{});var H7=s(js);hY=n(H7,"STRONG",{});var Zjr=s(hY);JZe=r(Zjr,"xlnet"),Zjr.forEach(t),YZe=r(H7," \u2014 "),lR=n(H7,"A",{href:!0});var eDr=s(lR);KZe=r(eDr,"XLNetTokenizer"),eDr.forEach(t),ZZe=r(H7," or "),iR=n(H7,"A",{href:!0});var oDr=s(iR);eeo=r(oDr,"XLNetTokenizerFast"),oDr.forEach(t),oeo=r(H7," (XLNet model)"),H7.forEach(t),y.forEach(t),reo=i(ha),pY=n(ha,"P",{});var rDr=s(pY);teo=r(rDr,"Examples:"),rDr.forEach(t),aeo=i(ha),m(M3.$$.fragment,ha),ha.forEach(t),neo=i(Xs),dh=n(Xs,"DIV",{class:!0});var gSe=s(dh);m(E3.$$.fragment,gSe),seo=i(gSe),_Y=n(gSe,"P",{});var tDr=s(_Y);leo=r(tDr,"Register a new tokenizer in this mapping."),tDr.forEach(t),gSe.forEach(t),Xs.forEach(t),dke=i(c),Hi=n(c,"H2",{class:!0});var hSe=s(Hi);ch=n(hSe,"A",{id:!0,class:!0,href:!0});var aDr=s(ch);uY=n(aDr,"SPAN",{});var nDr=s(uY);m(y3.$$.fragment,nDr),nDr.forEach(t),aDr.forEach(t),ieo=i(hSe),bY=n(hSe,"SPAN",{});var sDr=s(bY);deo=r(sDr,"AutoFeatureExtractor"),sDr.forEach(t),hSe.forEach(t),cke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(w3.$$.fragment,Vs),ceo=i(Vs),A3=n(Vs,"P",{});var pSe=s(A3);feo=r(pSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dR=n(pSe,"A",{href:!0});var lDr=s(dR);meo=r(lDr,"AutoFeatureExtractor.from_pretrained()"),lDr.forEach(t),geo=r(pSe," class method."),pSe.forEach(t),heo=i(Vs),L3=n(Vs,"P",{});var _Se=s(L3);peo=r(_Se,"This class cannot be instantiated directly using "),vY=n(_Se,"CODE",{});var iDr=s(vY);_eo=r(iDr,"__init__()"),iDr.forEach(t),ueo=r(_Se," (throws an error)."),_Se.forEach(t),beo=i(Vs),Ie=n(Vs,"DIV",{class:!0});var jt=s(Ie);m(B3.$$.fragment,jt),veo=i(jt),TY=n(jt,"P",{});var dDr=s(TY);Teo=r(dDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dDr.forEach(t),Feo=i(jt),Xa=n(jt,"P",{});var iE=s(Xa);Ceo=r(iE,"The feature extractor class to instantiate is selected based on the "),FY=n(iE,"CODE",{});var cDr=s(FY);Meo=r(cDr,"model_type"),cDr.forEach(t),Eeo=r(iE,` property of the config object
(either passed as an argument or loaded from `),CY=n(iE,"CODE",{});var fDr=s(CY);yeo=r(fDr,"pretrained_model_name_or_path"),fDr.forEach(t),weo=r(iE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),MY=n(iE,"CODE",{});var mDr=s(MY);Aeo=r(mDr,"pretrained_model_name_or_path"),mDr.forEach(t),Leo=r(iE,":"),iE.forEach(t),Beo=i(jt),re=n(jt,"UL",{});var ne=s(re);fh=n(ne,"LI",{});var aMe=s(fh);EY=n(aMe,"STRONG",{});var gDr=s(EY);xeo=r(gDr,"beit"),gDr.forEach(t),keo=r(aMe," \u2014 "),cR=n(aMe,"A",{href:!0});var hDr=s(cR);Reo=r(hDr,"BeitFeatureExtractor"),hDr.forEach(t),Seo=r(aMe," (BEiT model)"),aMe.forEach(t),Peo=i(ne),mh=n(ne,"LI",{});var nMe=s(mh);yY=n(nMe,"STRONG",{});var pDr=s(yY);$eo=r(pDr,"clip"),pDr.forEach(t),Ieo=r(nMe," \u2014 "),fR=n(nMe,"A",{href:!0});var _Dr=s(fR);Neo=r(_Dr,"CLIPFeatureExtractor"),_Dr.forEach(t),jeo=r(nMe," (CLIP model)"),nMe.forEach(t),Deo=i(ne),gh=n(ne,"LI",{});var sMe=s(gh);wY=n(sMe,"STRONG",{});var uDr=s(wY);qeo=r(uDr,"convnext"),uDr.forEach(t),Geo=r(sMe," \u2014 "),mR=n(sMe,"A",{href:!0});var bDr=s(mR);Oeo=r(bDr,"ConvNextFeatureExtractor"),bDr.forEach(t),Xeo=r(sMe," (ConvNext model)"),sMe.forEach(t),Veo=i(ne),hh=n(ne,"LI",{});var lMe=s(hh);AY=n(lMe,"STRONG",{});var vDr=s(AY);zeo=r(vDr,"deit"),vDr.forEach(t),Weo=r(lMe," \u2014 "),gR=n(lMe,"A",{href:!0});var TDr=s(gR);Qeo=r(TDr,"DeiTFeatureExtractor"),TDr.forEach(t),Heo=r(lMe," (DeiT model)"),lMe.forEach(t),Ueo=i(ne),ph=n(ne,"LI",{});var iMe=s(ph);LY=n(iMe,"STRONG",{});var FDr=s(LY);Jeo=r(FDr,"detr"),FDr.forEach(t),Yeo=r(iMe," \u2014 "),hR=n(iMe,"A",{href:!0});var CDr=s(hR);Keo=r(CDr,"DetrFeatureExtractor"),CDr.forEach(t),Zeo=r(iMe," (DETR model)"),iMe.forEach(t),eoo=i(ne),_h=n(ne,"LI",{});var dMe=s(_h);BY=n(dMe,"STRONG",{});var MDr=s(BY);ooo=r(MDr,"hubert"),MDr.forEach(t),roo=r(dMe," \u2014 "),pR=n(dMe,"A",{href:!0});var EDr=s(pR);too=r(EDr,"Wav2Vec2FeatureExtractor"),EDr.forEach(t),aoo=r(dMe," (Hubert model)"),dMe.forEach(t),noo=i(ne),uh=n(ne,"LI",{});var cMe=s(uh);xY=n(cMe,"STRONG",{});var yDr=s(xY);soo=r(yDr,"layoutlmv2"),yDr.forEach(t),loo=r(cMe," \u2014 "),_R=n(cMe,"A",{href:!0});var wDr=s(_R);ioo=r(wDr,"LayoutLMv2FeatureExtractor"),wDr.forEach(t),doo=r(cMe," (LayoutLMv2 model)"),cMe.forEach(t),coo=i(ne),bh=n(ne,"LI",{});var fMe=s(bh);kY=n(fMe,"STRONG",{});var ADr=s(kY);foo=r(ADr,"maskformer"),ADr.forEach(t),moo=r(fMe," \u2014 "),uR=n(fMe,"A",{href:!0});var LDr=s(uR);goo=r(LDr,"MaskFormerFeatureExtractor"),LDr.forEach(t),hoo=r(fMe," (MaskFormer model)"),fMe.forEach(t),poo=i(ne),vh=n(ne,"LI",{});var mMe=s(vh);RY=n(mMe,"STRONG",{});var BDr=s(RY);_oo=r(BDr,"perceiver"),BDr.forEach(t),uoo=r(mMe," \u2014 "),bR=n(mMe,"A",{href:!0});var xDr=s(bR);boo=r(xDr,"PerceiverFeatureExtractor"),xDr.forEach(t),voo=r(mMe," (Perceiver model)"),mMe.forEach(t),Too=i(ne),Th=n(ne,"LI",{});var gMe=s(Th);SY=n(gMe,"STRONG",{});var kDr=s(SY);Foo=r(kDr,"poolformer"),kDr.forEach(t),Coo=r(gMe," \u2014 "),vR=n(gMe,"A",{href:!0});var RDr=s(vR);Moo=r(RDr,"PoolFormerFeatureExtractor"),RDr.forEach(t),Eoo=r(gMe," (PoolFormer model)"),gMe.forEach(t),yoo=i(ne),Fh=n(ne,"LI",{});var hMe=s(Fh);PY=n(hMe,"STRONG",{});var SDr=s(PY);woo=r(SDr,"resnet"),SDr.forEach(t),Aoo=r(hMe," \u2014 "),TR=n(hMe,"A",{href:!0});var PDr=s(TR);Loo=r(PDr,"ConvNextFeatureExtractor"),PDr.forEach(t),Boo=r(hMe," (ResNet model)"),hMe.forEach(t),xoo=i(ne),Ch=n(ne,"LI",{});var pMe=s(Ch);$Y=n(pMe,"STRONG",{});var $Dr=s($Y);koo=r($Dr,"segformer"),$Dr.forEach(t),Roo=r(pMe," \u2014 "),FR=n(pMe,"A",{href:!0});var IDr=s(FR);Soo=r(IDr,"SegformerFeatureExtractor"),IDr.forEach(t),Poo=r(pMe," (SegFormer model)"),pMe.forEach(t),$oo=i(ne),Mh=n(ne,"LI",{});var _Me=s(Mh);IY=n(_Me,"STRONG",{});var NDr=s(IY);Ioo=r(NDr,"speech_to_text"),NDr.forEach(t),Noo=r(_Me," \u2014 "),CR=n(_Me,"A",{href:!0});var jDr=s(CR);joo=r(jDr,"Speech2TextFeatureExtractor"),jDr.forEach(t),Doo=r(_Me," (Speech2Text model)"),_Me.forEach(t),qoo=i(ne),Eh=n(ne,"LI",{});var uMe=s(Eh);NY=n(uMe,"STRONG",{});var DDr=s(NY);Goo=r(DDr,"swin"),DDr.forEach(t),Ooo=r(uMe," \u2014 "),MR=n(uMe,"A",{href:!0});var qDr=s(MR);Xoo=r(qDr,"ViTFeatureExtractor"),qDr.forEach(t),Voo=r(uMe," (Swin model)"),uMe.forEach(t),zoo=i(ne),yh=n(ne,"LI",{});var bMe=s(yh);jY=n(bMe,"STRONG",{});var GDr=s(jY);Woo=r(GDr,"van"),GDr.forEach(t),Qoo=r(bMe," \u2014 "),ER=n(bMe,"A",{href:!0});var ODr=s(ER);Hoo=r(ODr,"ConvNextFeatureExtractor"),ODr.forEach(t),Uoo=r(bMe," (VAN model)"),bMe.forEach(t),Joo=i(ne),wh=n(ne,"LI",{});var vMe=s(wh);DY=n(vMe,"STRONG",{});var XDr=s(DY);Yoo=r(XDr,"vit"),XDr.forEach(t),Koo=r(vMe," \u2014 "),yR=n(vMe,"A",{href:!0});var VDr=s(yR);Zoo=r(VDr,"ViTFeatureExtractor"),VDr.forEach(t),ero=r(vMe," (ViT model)"),vMe.forEach(t),oro=i(ne),Ah=n(ne,"LI",{});var TMe=s(Ah);qY=n(TMe,"STRONG",{});var zDr=s(qY);rro=r(zDr,"vit_mae"),zDr.forEach(t),tro=r(TMe," \u2014 "),wR=n(TMe,"A",{href:!0});var WDr=s(wR);aro=r(WDr,"ViTFeatureExtractor"),WDr.forEach(t),nro=r(TMe," (ViTMAE model)"),TMe.forEach(t),sro=i(ne),Lh=n(ne,"LI",{});var FMe=s(Lh);GY=n(FMe,"STRONG",{});var QDr=s(GY);lro=r(QDr,"wav2vec2"),QDr.forEach(t),iro=r(FMe," \u2014 "),AR=n(FMe,"A",{href:!0});var HDr=s(AR);dro=r(HDr,"Wav2Vec2FeatureExtractor"),HDr.forEach(t),cro=r(FMe," (Wav2Vec2 model)"),FMe.forEach(t),ne.forEach(t),fro=i(jt),m(Bh.$$.fragment,jt),mro=i(jt),OY=n(jt,"P",{});var UDr=s(OY);gro=r(UDr,"Examples:"),UDr.forEach(t),hro=i(jt),m(x3.$$.fragment,jt),jt.forEach(t),pro=i(Vs),xh=n(Vs,"DIV",{class:!0});var uSe=s(xh);m(k3.$$.fragment,uSe),_ro=i(uSe),XY=n(uSe,"P",{});var JDr=s(XY);uro=r(JDr,"Register a new feature extractor for this class."),JDr.forEach(t),uSe.forEach(t),Vs.forEach(t),fke=i(c),Ui=n(c,"H2",{class:!0});var bSe=s(Ui);kh=n(bSe,"A",{id:!0,class:!0,href:!0});var YDr=s(kh);VY=n(YDr,"SPAN",{});var KDr=s(VY);m(R3.$$.fragment,KDr),KDr.forEach(t),YDr.forEach(t),bro=i(bSe),zY=n(bSe,"SPAN",{});var ZDr=s(zY);vro=r(ZDr,"AutoProcessor"),ZDr.forEach(t),bSe.forEach(t),mke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(S3.$$.fragment,zs),Tro=i(zs),P3=n(zs,"P",{});var vSe=s(P3);Fro=r(vSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),LR=n(vSe,"A",{href:!0});var eqr=s(LR);Cro=r(eqr,"AutoProcessor.from_pretrained()"),eqr.forEach(t),Mro=r(vSe," class method."),vSe.forEach(t),Ero=i(zs),$3=n(zs,"P",{});var TSe=s($3);yro=r(TSe,"This class cannot be instantiated directly using "),WY=n(TSe,"CODE",{});var oqr=s(WY);wro=r(oqr,"__init__()"),oqr.forEach(t),Aro=r(TSe," (throws an error)."),TSe.forEach(t),Lro=i(zs),Ne=n(zs,"DIV",{class:!0});var Dt=s(Ne);m(I3.$$.fragment,Dt),Bro=i(Dt),QY=n(Dt,"P",{});var rqr=s(QY);xro=r(rqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),rqr.forEach(t),kro=i(Dt),Ji=n(Dt,"P",{});var Hz=s(Ji);Rro=r(Hz,"The processor class to instantiate is selected based on the "),HY=n(Hz,"CODE",{});var tqr=s(HY);Sro=r(tqr,"model_type"),tqr.forEach(t),Pro=r(Hz,` property of the config object (either
passed as an argument or loaded from `),UY=n(Hz,"CODE",{});var aqr=s(UY);$ro=r(aqr,"pretrained_model_name_or_path"),aqr.forEach(t),Iro=r(Hz," if possible):"),Hz.forEach(t),Nro=i(Dt),xe=n(Dt,"UL",{});var Do=s(xe);Rh=n(Do,"LI",{});var CMe=s(Rh);JY=n(CMe,"STRONG",{});var nqr=s(JY);jro=r(nqr,"clip"),nqr.forEach(t),Dro=r(CMe," \u2014 "),BR=n(CMe,"A",{href:!0});var sqr=s(BR);qro=r(sqr,"CLIPProcessor"),sqr.forEach(t),Gro=r(CMe," (CLIP model)"),CMe.forEach(t),Oro=i(Do),Sh=n(Do,"LI",{});var MMe=s(Sh);YY=n(MMe,"STRONG",{});var lqr=s(YY);Xro=r(lqr,"layoutlmv2"),lqr.forEach(t),Vro=r(MMe," \u2014 "),xR=n(MMe,"A",{href:!0});var iqr=s(xR);zro=r(iqr,"LayoutLMv2Processor"),iqr.forEach(t),Wro=r(MMe," (LayoutLMv2 model)"),MMe.forEach(t),Qro=i(Do),Ph=n(Do,"LI",{});var EMe=s(Ph);KY=n(EMe,"STRONG",{});var dqr=s(KY);Hro=r(dqr,"layoutxlm"),dqr.forEach(t),Uro=r(EMe," \u2014 "),kR=n(EMe,"A",{href:!0});var cqr=s(kR);Jro=r(cqr,"LayoutXLMProcessor"),cqr.forEach(t),Yro=r(EMe," (LayoutXLM model)"),EMe.forEach(t),Kro=i(Do),$h=n(Do,"LI",{});var yMe=s($h);ZY=n(yMe,"STRONG",{});var fqr=s(ZY);Zro=r(fqr,"speech_to_text"),fqr.forEach(t),eto=r(yMe," \u2014 "),RR=n(yMe,"A",{href:!0});var mqr=s(RR);oto=r(mqr,"Speech2TextProcessor"),mqr.forEach(t),rto=r(yMe," (Speech2Text model)"),yMe.forEach(t),tto=i(Do),Ih=n(Do,"LI",{});var wMe=s(Ih);eK=n(wMe,"STRONG",{});var gqr=s(eK);ato=r(gqr,"speech_to_text_2"),gqr.forEach(t),nto=r(wMe," \u2014 "),SR=n(wMe,"A",{href:!0});var hqr=s(SR);sto=r(hqr,"Speech2Text2Processor"),hqr.forEach(t),lto=r(wMe," (Speech2Text2 model)"),wMe.forEach(t),ito=i(Do),Nh=n(Do,"LI",{});var AMe=s(Nh);oK=n(AMe,"STRONG",{});var pqr=s(oK);dto=r(pqr,"trocr"),pqr.forEach(t),cto=r(AMe," \u2014 "),PR=n(AMe,"A",{href:!0});var _qr=s(PR);fto=r(_qr,"TrOCRProcessor"),_qr.forEach(t),mto=r(AMe," (TrOCR model)"),AMe.forEach(t),gto=i(Do),jh=n(Do,"LI",{});var LMe=s(jh);rK=n(LMe,"STRONG",{});var uqr=s(rK);hto=r(uqr,"vision-text-dual-encoder"),uqr.forEach(t),pto=r(LMe," \u2014 "),$R=n(LMe,"A",{href:!0});var bqr=s($R);_to=r(bqr,"VisionTextDualEncoderProcessor"),bqr.forEach(t),uto=r(LMe," (VisionTextDualEncoder model)"),LMe.forEach(t),bto=i(Do),Dh=n(Do,"LI",{});var BMe=s(Dh);tK=n(BMe,"STRONG",{});var vqr=s(tK);vto=r(vqr,"wav2vec2"),vqr.forEach(t),Tto=r(BMe," \u2014 "),IR=n(BMe,"A",{href:!0});var Tqr=s(IR);Fto=r(Tqr,"Wav2Vec2Processor"),Tqr.forEach(t),Cto=r(BMe," (Wav2Vec2 model)"),BMe.forEach(t),Do.forEach(t),Mto=i(Dt),m(qh.$$.fragment,Dt),Eto=i(Dt),aK=n(Dt,"P",{});var Fqr=s(aK);yto=r(Fqr,"Examples:"),Fqr.forEach(t),wto=i(Dt),m(N3.$$.fragment,Dt),Dt.forEach(t),Ato=i(zs),Gh=n(zs,"DIV",{class:!0});var FSe=s(Gh);m(j3.$$.fragment,FSe),Lto=i(FSe),nK=n(FSe,"P",{});var Cqr=s(nK);Bto=r(Cqr,"Register a new processor for this class."),Cqr.forEach(t),FSe.forEach(t),zs.forEach(t),gke=i(c),Yi=n(c,"H2",{class:!0});var CSe=s(Yi);Oh=n(CSe,"A",{id:!0,class:!0,href:!0});var Mqr=s(Oh);sK=n(Mqr,"SPAN",{});var Eqr=s(sK);m(D3.$$.fragment,Eqr),Eqr.forEach(t),Mqr.forEach(t),xto=i(CSe),lK=n(CSe,"SPAN",{});var yqr=s(lK);kto=r(yqr,"AutoModel"),yqr.forEach(t),CSe.forEach(t),hke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(q3.$$.fragment,Ws),Rto=i(Ws),Ki=n(Ws,"P",{});var Uz=s(Ki);Sto=r(Uz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iK=n(Uz,"CODE",{});var wqr=s(iK);Pto=r(wqr,"from_pretrained()"),wqr.forEach(t),$to=r(Uz,"class method or the "),dK=n(Uz,"CODE",{});var Aqr=s(dK);Ito=r(Aqr,"from_config()"),Aqr.forEach(t),Nto=r(Uz,`class
method.`),Uz.forEach(t),jto=i(Ws),G3=n(Ws,"P",{});var MSe=s(G3);Dto=r(MSe,"This class cannot be instantiated directly using "),cK=n(MSe,"CODE",{});var Lqr=s(cK);qto=r(Lqr,"__init__()"),Lqr.forEach(t),Gto=r(MSe," (throws an error)."),MSe.forEach(t),Oto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(O3.$$.fragment,Qs),Xto=i(Qs),fK=n(Qs,"P",{});var Bqr=s(fK);Vto=r(Bqr,"Instantiates one of the base model classes of the library from a configuration."),Bqr.forEach(t),zto=i(Qs),Zi=n(Qs,"P",{});var Jz=s(Zi);Wto=r(Jz,`Note:
Loading a model from its configuration file does `),mK=n(Jz,"STRONG",{});var xqr=s(mK);Qto=r(xqr,"not"),xqr.forEach(t),Hto=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Jz,"CODE",{});var kqr=s(gK);Uto=r(kqr,"from_pretrained()"),kqr.forEach(t),Jto=r(Jz,"to load the model weights."),Jz.forEach(t),Yto=i(Qs),hK=n(Qs,"P",{});var Rqr=s(hK);Kto=r(Rqr,"Examples:"),Rqr.forEach(t),Zto=i(Qs),m(X3.$$.fragment,Qs),Qs.forEach(t),eao=i(Ws),je=n(Ws,"DIV",{class:!0});var qt=s(je);m(V3.$$.fragment,qt),oao=i(qt),pK=n(qt,"P",{});var Sqr=s(pK);rao=r(Sqr,"Instantiate one of the base model classes of the library from a pretrained model."),Sqr.forEach(t),tao=i(qt),Va=n(qt,"P",{});var dE=s(Va);aao=r(dE,"The model class to instantiate is selected based on the "),_K=n(dE,"CODE",{});var Pqr=s(_K);nao=r(Pqr,"model_type"),Pqr.forEach(t),sao=r(dE,` property of the config object (either
passed as an argument or loaded from `),uK=n(dE,"CODE",{});var $qr=s(uK);lao=r($qr,"pretrained_model_name_or_path"),$qr.forEach(t),iao=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bK=n(dE,"CODE",{});var Iqr=s(bK);dao=r(Iqr,"pretrained_model_name_or_path"),Iqr.forEach(t),cao=r(dE,":"),dE.forEach(t),fao=i(qt),F=n(qt,"UL",{});var C=s(F);Xh=n(C,"LI",{});var xMe=s(Xh);vK=n(xMe,"STRONG",{});var Nqr=s(vK);mao=r(Nqr,"albert"),Nqr.forEach(t),gao=r(xMe," \u2014 "),NR=n(xMe,"A",{href:!0});var jqr=s(NR);hao=r(jqr,"AlbertModel"),jqr.forEach(t),pao=r(xMe," (ALBERT model)"),xMe.forEach(t),_ao=i(C),Vh=n(C,"LI",{});var kMe=s(Vh);TK=n(kMe,"STRONG",{});var Dqr=s(TK);uao=r(Dqr,"bart"),Dqr.forEach(t),bao=r(kMe," \u2014 "),jR=n(kMe,"A",{href:!0});var qqr=s(jR);vao=r(qqr,"BartModel"),qqr.forEach(t),Tao=r(kMe," (BART model)"),kMe.forEach(t),Fao=i(C),zh=n(C,"LI",{});var RMe=s(zh);FK=n(RMe,"STRONG",{});var Gqr=s(FK);Cao=r(Gqr,"beit"),Gqr.forEach(t),Mao=r(RMe," \u2014 "),DR=n(RMe,"A",{href:!0});var Oqr=s(DR);Eao=r(Oqr,"BeitModel"),Oqr.forEach(t),yao=r(RMe," (BEiT model)"),RMe.forEach(t),wao=i(C),Wh=n(C,"LI",{});var SMe=s(Wh);CK=n(SMe,"STRONG",{});var Xqr=s(CK);Aao=r(Xqr,"bert"),Xqr.forEach(t),Lao=r(SMe," \u2014 "),qR=n(SMe,"A",{href:!0});var Vqr=s(qR);Bao=r(Vqr,"BertModel"),Vqr.forEach(t),xao=r(SMe," (BERT model)"),SMe.forEach(t),kao=i(C),Qh=n(C,"LI",{});var PMe=s(Qh);MK=n(PMe,"STRONG",{});var zqr=s(MK);Rao=r(zqr,"bert-generation"),zqr.forEach(t),Sao=r(PMe," \u2014 "),GR=n(PMe,"A",{href:!0});var Wqr=s(GR);Pao=r(Wqr,"BertGenerationEncoder"),Wqr.forEach(t),$ao=r(PMe," (Bert Generation model)"),PMe.forEach(t),Iao=i(C),Hh=n(C,"LI",{});var $Me=s(Hh);EK=n($Me,"STRONG",{});var Qqr=s(EK);Nao=r(Qqr,"big_bird"),Qqr.forEach(t),jao=r($Me," \u2014 "),OR=n($Me,"A",{href:!0});var Hqr=s(OR);Dao=r(Hqr,"BigBirdModel"),Hqr.forEach(t),qao=r($Me," (BigBird model)"),$Me.forEach(t),Gao=i(C),Uh=n(C,"LI",{});var IMe=s(Uh);yK=n(IMe,"STRONG",{});var Uqr=s(yK);Oao=r(Uqr,"bigbird_pegasus"),Uqr.forEach(t),Xao=r(IMe," \u2014 "),XR=n(IMe,"A",{href:!0});var Jqr=s(XR);Vao=r(Jqr,"BigBirdPegasusModel"),Jqr.forEach(t),zao=r(IMe," (BigBirdPegasus model)"),IMe.forEach(t),Wao=i(C),Jh=n(C,"LI",{});var NMe=s(Jh);wK=n(NMe,"STRONG",{});var Yqr=s(wK);Qao=r(Yqr,"blenderbot"),Yqr.forEach(t),Hao=r(NMe," \u2014 "),VR=n(NMe,"A",{href:!0});var Kqr=s(VR);Uao=r(Kqr,"BlenderbotModel"),Kqr.forEach(t),Jao=r(NMe," (Blenderbot model)"),NMe.forEach(t),Yao=i(C),Yh=n(C,"LI",{});var jMe=s(Yh);AK=n(jMe,"STRONG",{});var Zqr=s(AK);Kao=r(Zqr,"blenderbot-small"),Zqr.forEach(t),Zao=r(jMe," \u2014 "),zR=n(jMe,"A",{href:!0});var eGr=s(zR);eno=r(eGr,"BlenderbotSmallModel"),eGr.forEach(t),ono=r(jMe," (BlenderbotSmall model)"),jMe.forEach(t),rno=i(C),Kh=n(C,"LI",{});var DMe=s(Kh);LK=n(DMe,"STRONG",{});var oGr=s(LK);tno=r(oGr,"camembert"),oGr.forEach(t),ano=r(DMe," \u2014 "),WR=n(DMe,"A",{href:!0});var rGr=s(WR);nno=r(rGr,"CamembertModel"),rGr.forEach(t),sno=r(DMe," (CamemBERT model)"),DMe.forEach(t),lno=i(C),Zh=n(C,"LI",{});var qMe=s(Zh);BK=n(qMe,"STRONG",{});var tGr=s(BK);ino=r(tGr,"canine"),tGr.forEach(t),dno=r(qMe," \u2014 "),QR=n(qMe,"A",{href:!0});var aGr=s(QR);cno=r(aGr,"CanineModel"),aGr.forEach(t),fno=r(qMe," (Canine model)"),qMe.forEach(t),mno=i(C),ep=n(C,"LI",{});var GMe=s(ep);xK=n(GMe,"STRONG",{});var nGr=s(xK);gno=r(nGr,"clip"),nGr.forEach(t),hno=r(GMe," \u2014 "),HR=n(GMe,"A",{href:!0});var sGr=s(HR);pno=r(sGr,"CLIPModel"),sGr.forEach(t),_no=r(GMe," (CLIP model)"),GMe.forEach(t),uno=i(C),op=n(C,"LI",{});var OMe=s(op);kK=n(OMe,"STRONG",{});var lGr=s(kK);bno=r(lGr,"convbert"),lGr.forEach(t),vno=r(OMe," \u2014 "),UR=n(OMe,"A",{href:!0});var iGr=s(UR);Tno=r(iGr,"ConvBertModel"),iGr.forEach(t),Fno=r(OMe," (ConvBERT model)"),OMe.forEach(t),Cno=i(C),rp=n(C,"LI",{});var XMe=s(rp);RK=n(XMe,"STRONG",{});var dGr=s(RK);Mno=r(dGr,"convnext"),dGr.forEach(t),Eno=r(XMe," \u2014 "),JR=n(XMe,"A",{href:!0});var cGr=s(JR);yno=r(cGr,"ConvNextModel"),cGr.forEach(t),wno=r(XMe," (ConvNext model)"),XMe.forEach(t),Ano=i(C),tp=n(C,"LI",{});var VMe=s(tp);SK=n(VMe,"STRONG",{});var fGr=s(SK);Lno=r(fGr,"ctrl"),fGr.forEach(t),Bno=r(VMe," \u2014 "),YR=n(VMe,"A",{href:!0});var mGr=s(YR);xno=r(mGr,"CTRLModel"),mGr.forEach(t),kno=r(VMe," (CTRL model)"),VMe.forEach(t),Rno=i(C),ap=n(C,"LI",{});var zMe=s(ap);PK=n(zMe,"STRONG",{});var gGr=s(PK);Sno=r(gGr,"data2vec-audio"),gGr.forEach(t),Pno=r(zMe," \u2014 "),KR=n(zMe,"A",{href:!0});var hGr=s(KR);$no=r(hGr,"Data2VecAudioModel"),hGr.forEach(t),Ino=r(zMe," (Data2VecAudio model)"),zMe.forEach(t),Nno=i(C),np=n(C,"LI",{});var WMe=s(np);$K=n(WMe,"STRONG",{});var pGr=s($K);jno=r(pGr,"data2vec-text"),pGr.forEach(t),Dno=r(WMe," \u2014 "),ZR=n(WMe,"A",{href:!0});var _Gr=s(ZR);qno=r(_Gr,"Data2VecTextModel"),_Gr.forEach(t),Gno=r(WMe," (Data2VecText model)"),WMe.forEach(t),Ono=i(C),sp=n(C,"LI",{});var QMe=s(sp);IK=n(QMe,"STRONG",{});var uGr=s(IK);Xno=r(uGr,"deberta"),uGr.forEach(t),Vno=r(QMe," \u2014 "),eS=n(QMe,"A",{href:!0});var bGr=s(eS);zno=r(bGr,"DebertaModel"),bGr.forEach(t),Wno=r(QMe," (DeBERTa model)"),QMe.forEach(t),Qno=i(C),lp=n(C,"LI",{});var HMe=s(lp);NK=n(HMe,"STRONG",{});var vGr=s(NK);Hno=r(vGr,"deberta-v2"),vGr.forEach(t),Uno=r(HMe," \u2014 "),oS=n(HMe,"A",{href:!0});var TGr=s(oS);Jno=r(TGr,"DebertaV2Model"),TGr.forEach(t),Yno=r(HMe," (DeBERTa-v2 model)"),HMe.forEach(t),Kno=i(C),ip=n(C,"LI",{});var UMe=s(ip);jK=n(UMe,"STRONG",{});var FGr=s(jK);Zno=r(FGr,"deit"),FGr.forEach(t),eso=r(UMe," \u2014 "),rS=n(UMe,"A",{href:!0});var CGr=s(rS);oso=r(CGr,"DeiTModel"),CGr.forEach(t),rso=r(UMe," (DeiT model)"),UMe.forEach(t),tso=i(C),dp=n(C,"LI",{});var JMe=s(dp);DK=n(JMe,"STRONG",{});var MGr=s(DK);aso=r(MGr,"detr"),MGr.forEach(t),nso=r(JMe," \u2014 "),tS=n(JMe,"A",{href:!0});var EGr=s(tS);sso=r(EGr,"DetrModel"),EGr.forEach(t),lso=r(JMe," (DETR model)"),JMe.forEach(t),iso=i(C),cp=n(C,"LI",{});var YMe=s(cp);qK=n(YMe,"STRONG",{});var yGr=s(qK);dso=r(yGr,"distilbert"),yGr.forEach(t),cso=r(YMe," \u2014 "),aS=n(YMe,"A",{href:!0});var wGr=s(aS);fso=r(wGr,"DistilBertModel"),wGr.forEach(t),mso=r(YMe," (DistilBERT model)"),YMe.forEach(t),gso=i(C),fp=n(C,"LI",{});var KMe=s(fp);GK=n(KMe,"STRONG",{});var AGr=s(GK);hso=r(AGr,"dpr"),AGr.forEach(t),pso=r(KMe," \u2014 "),nS=n(KMe,"A",{href:!0});var LGr=s(nS);_so=r(LGr,"DPRQuestionEncoder"),LGr.forEach(t),uso=r(KMe," (DPR model)"),KMe.forEach(t),bso=i(C),mp=n(C,"LI",{});var ZMe=s(mp);OK=n(ZMe,"STRONG",{});var BGr=s(OK);vso=r(BGr,"electra"),BGr.forEach(t),Tso=r(ZMe," \u2014 "),sS=n(ZMe,"A",{href:!0});var xGr=s(sS);Fso=r(xGr,"ElectraModel"),xGr.forEach(t),Cso=r(ZMe," (ELECTRA model)"),ZMe.forEach(t),Mso=i(C),gp=n(C,"LI",{});var e4e=s(gp);XK=n(e4e,"STRONG",{});var kGr=s(XK);Eso=r(kGr,"flaubert"),kGr.forEach(t),yso=r(e4e," \u2014 "),lS=n(e4e,"A",{href:!0});var RGr=s(lS);wso=r(RGr,"FlaubertModel"),RGr.forEach(t),Aso=r(e4e," (FlauBERT model)"),e4e.forEach(t),Lso=i(C),hp=n(C,"LI",{});var o4e=s(hp);VK=n(o4e,"STRONG",{});var SGr=s(VK);Bso=r(SGr,"fnet"),SGr.forEach(t),xso=r(o4e," \u2014 "),iS=n(o4e,"A",{href:!0});var PGr=s(iS);kso=r(PGr,"FNetModel"),PGr.forEach(t),Rso=r(o4e," (FNet model)"),o4e.forEach(t),Sso=i(C),pp=n(C,"LI",{});var r4e=s(pp);zK=n(r4e,"STRONG",{});var $Gr=s(zK);Pso=r($Gr,"fsmt"),$Gr.forEach(t),$so=r(r4e," \u2014 "),dS=n(r4e,"A",{href:!0});var IGr=s(dS);Iso=r(IGr,"FSMTModel"),IGr.forEach(t),Nso=r(r4e," (FairSeq Machine-Translation model)"),r4e.forEach(t),jso=i(C),Ds=n(C,"LI",{});var U7=s(Ds);WK=n(U7,"STRONG",{});var NGr=s(WK);Dso=r(NGr,"funnel"),NGr.forEach(t),qso=r(U7," \u2014 "),cS=n(U7,"A",{href:!0});var jGr=s(cS);Gso=r(jGr,"FunnelModel"),jGr.forEach(t),Oso=r(U7," or "),fS=n(U7,"A",{href:!0});var DGr=s(fS);Xso=r(DGr,"FunnelBaseModel"),DGr.forEach(t),Vso=r(U7," (Funnel Transformer model)"),U7.forEach(t),zso=i(C),_p=n(C,"LI",{});var t4e=s(_p);QK=n(t4e,"STRONG",{});var qGr=s(QK);Wso=r(qGr,"glpn"),qGr.forEach(t),Qso=r(t4e," \u2014 "),mS=n(t4e,"A",{href:!0});var GGr=s(mS);Hso=r(GGr,"GLPNModel"),GGr.forEach(t),Uso=r(t4e," (GLPN model)"),t4e.forEach(t),Jso=i(C),up=n(C,"LI",{});var a4e=s(up);HK=n(a4e,"STRONG",{});var OGr=s(HK);Yso=r(OGr,"gpt2"),OGr.forEach(t),Kso=r(a4e," \u2014 "),gS=n(a4e,"A",{href:!0});var XGr=s(gS);Zso=r(XGr,"GPT2Model"),XGr.forEach(t),elo=r(a4e," (OpenAI GPT-2 model)"),a4e.forEach(t),olo=i(C),bp=n(C,"LI",{});var n4e=s(bp);UK=n(n4e,"STRONG",{});var VGr=s(UK);rlo=r(VGr,"gpt_neo"),VGr.forEach(t),tlo=r(n4e," \u2014 "),hS=n(n4e,"A",{href:!0});var zGr=s(hS);alo=r(zGr,"GPTNeoModel"),zGr.forEach(t),nlo=r(n4e," (GPT Neo model)"),n4e.forEach(t),slo=i(C),vp=n(C,"LI",{});var s4e=s(vp);JK=n(s4e,"STRONG",{});var WGr=s(JK);llo=r(WGr,"gptj"),WGr.forEach(t),ilo=r(s4e," \u2014 "),pS=n(s4e,"A",{href:!0});var QGr=s(pS);dlo=r(QGr,"GPTJModel"),QGr.forEach(t),clo=r(s4e," (GPT-J model)"),s4e.forEach(t),flo=i(C),Tp=n(C,"LI",{});var l4e=s(Tp);YK=n(l4e,"STRONG",{});var HGr=s(YK);mlo=r(HGr,"hubert"),HGr.forEach(t),glo=r(l4e," \u2014 "),_S=n(l4e,"A",{href:!0});var UGr=s(_S);hlo=r(UGr,"HubertModel"),UGr.forEach(t),plo=r(l4e," (Hubert model)"),l4e.forEach(t),_lo=i(C),Fp=n(C,"LI",{});var i4e=s(Fp);KK=n(i4e,"STRONG",{});var JGr=s(KK);ulo=r(JGr,"ibert"),JGr.forEach(t),blo=r(i4e," \u2014 "),uS=n(i4e,"A",{href:!0});var YGr=s(uS);vlo=r(YGr,"IBertModel"),YGr.forEach(t),Tlo=r(i4e," (I-BERT model)"),i4e.forEach(t),Flo=i(C),Cp=n(C,"LI",{});var d4e=s(Cp);ZK=n(d4e,"STRONG",{});var KGr=s(ZK);Clo=r(KGr,"imagegpt"),KGr.forEach(t),Mlo=r(d4e," \u2014 "),bS=n(d4e,"A",{href:!0});var ZGr=s(bS);Elo=r(ZGr,"ImageGPTModel"),ZGr.forEach(t),ylo=r(d4e," (ImageGPT model)"),d4e.forEach(t),wlo=i(C),Mp=n(C,"LI",{});var c4e=s(Mp);eZ=n(c4e,"STRONG",{});var eOr=s(eZ);Alo=r(eOr,"layoutlm"),eOr.forEach(t),Llo=r(c4e," \u2014 "),vS=n(c4e,"A",{href:!0});var oOr=s(vS);Blo=r(oOr,"LayoutLMModel"),oOr.forEach(t),xlo=r(c4e," (LayoutLM model)"),c4e.forEach(t),klo=i(C),Ep=n(C,"LI",{});var f4e=s(Ep);oZ=n(f4e,"STRONG",{});var rOr=s(oZ);Rlo=r(rOr,"layoutlmv2"),rOr.forEach(t),Slo=r(f4e," \u2014 "),TS=n(f4e,"A",{href:!0});var tOr=s(TS);Plo=r(tOr,"LayoutLMv2Model"),tOr.forEach(t),$lo=r(f4e," (LayoutLMv2 model)"),f4e.forEach(t),Ilo=i(C),yp=n(C,"LI",{});var m4e=s(yp);rZ=n(m4e,"STRONG",{});var aOr=s(rZ);Nlo=r(aOr,"led"),aOr.forEach(t),jlo=r(m4e," \u2014 "),FS=n(m4e,"A",{href:!0});var nOr=s(FS);Dlo=r(nOr,"LEDModel"),nOr.forEach(t),qlo=r(m4e," (LED model)"),m4e.forEach(t),Glo=i(C),wp=n(C,"LI",{});var g4e=s(wp);tZ=n(g4e,"STRONG",{});var sOr=s(tZ);Olo=r(sOr,"longformer"),sOr.forEach(t),Xlo=r(g4e," \u2014 "),CS=n(g4e,"A",{href:!0});var lOr=s(CS);Vlo=r(lOr,"LongformerModel"),lOr.forEach(t),zlo=r(g4e," (Longformer model)"),g4e.forEach(t),Wlo=i(C),Ap=n(C,"LI",{});var h4e=s(Ap);aZ=n(h4e,"STRONG",{});var iOr=s(aZ);Qlo=r(iOr,"luke"),iOr.forEach(t),Hlo=r(h4e," \u2014 "),MS=n(h4e,"A",{href:!0});var dOr=s(MS);Ulo=r(dOr,"LukeModel"),dOr.forEach(t),Jlo=r(h4e," (LUKE model)"),h4e.forEach(t),Ylo=i(C),Lp=n(C,"LI",{});var p4e=s(Lp);nZ=n(p4e,"STRONG",{});var cOr=s(nZ);Klo=r(cOr,"lxmert"),cOr.forEach(t),Zlo=r(p4e," \u2014 "),ES=n(p4e,"A",{href:!0});var fOr=s(ES);eio=r(fOr,"LxmertModel"),fOr.forEach(t),oio=r(p4e," (LXMERT model)"),p4e.forEach(t),rio=i(C),Bp=n(C,"LI",{});var _4e=s(Bp);sZ=n(_4e,"STRONG",{});var mOr=s(sZ);tio=r(mOr,"m2m_100"),mOr.forEach(t),aio=r(_4e," \u2014 "),yS=n(_4e,"A",{href:!0});var gOr=s(yS);nio=r(gOr,"M2M100Model"),gOr.forEach(t),sio=r(_4e," (M2M100 model)"),_4e.forEach(t),lio=i(C),xp=n(C,"LI",{});var u4e=s(xp);lZ=n(u4e,"STRONG",{});var hOr=s(lZ);iio=r(hOr,"marian"),hOr.forEach(t),dio=r(u4e," \u2014 "),wS=n(u4e,"A",{href:!0});var pOr=s(wS);cio=r(pOr,"MarianModel"),pOr.forEach(t),fio=r(u4e," (Marian model)"),u4e.forEach(t),mio=i(C),kp=n(C,"LI",{});var b4e=s(kp);iZ=n(b4e,"STRONG",{});var _Or=s(iZ);gio=r(_Or,"maskformer"),_Or.forEach(t),hio=r(b4e," \u2014 "),AS=n(b4e,"A",{href:!0});var uOr=s(AS);pio=r(uOr,"MaskFormerModel"),uOr.forEach(t),_io=r(b4e," (MaskFormer model)"),b4e.forEach(t),uio=i(C),Rp=n(C,"LI",{});var v4e=s(Rp);dZ=n(v4e,"STRONG",{});var bOr=s(dZ);bio=r(bOr,"mbart"),bOr.forEach(t),vio=r(v4e," \u2014 "),LS=n(v4e,"A",{href:!0});var vOr=s(LS);Tio=r(vOr,"MBartModel"),vOr.forEach(t),Fio=r(v4e," (mBART model)"),v4e.forEach(t),Cio=i(C),Sp=n(C,"LI",{});var T4e=s(Sp);cZ=n(T4e,"STRONG",{});var TOr=s(cZ);Mio=r(TOr,"megatron-bert"),TOr.forEach(t),Eio=r(T4e," \u2014 "),BS=n(T4e,"A",{href:!0});var FOr=s(BS);yio=r(FOr,"MegatronBertModel"),FOr.forEach(t),wio=r(T4e," (MegatronBert model)"),T4e.forEach(t),Aio=i(C),Pp=n(C,"LI",{});var F4e=s(Pp);fZ=n(F4e,"STRONG",{});var COr=s(fZ);Lio=r(COr,"mobilebert"),COr.forEach(t),Bio=r(F4e," \u2014 "),xS=n(F4e,"A",{href:!0});var MOr=s(xS);xio=r(MOr,"MobileBertModel"),MOr.forEach(t),kio=r(F4e," (MobileBERT model)"),F4e.forEach(t),Rio=i(C),$p=n(C,"LI",{});var C4e=s($p);mZ=n(C4e,"STRONG",{});var EOr=s(mZ);Sio=r(EOr,"mpnet"),EOr.forEach(t),Pio=r(C4e," \u2014 "),kS=n(C4e,"A",{href:!0});var yOr=s(kS);$io=r(yOr,"MPNetModel"),yOr.forEach(t),Iio=r(C4e," (MPNet model)"),C4e.forEach(t),Nio=i(C),Ip=n(C,"LI",{});var M4e=s(Ip);gZ=n(M4e,"STRONG",{});var wOr=s(gZ);jio=r(wOr,"mt5"),wOr.forEach(t),Dio=r(M4e," \u2014 "),RS=n(M4e,"A",{href:!0});var AOr=s(RS);qio=r(AOr,"MT5Model"),AOr.forEach(t),Gio=r(M4e," (mT5 model)"),M4e.forEach(t),Oio=i(C),Np=n(C,"LI",{});var E4e=s(Np);hZ=n(E4e,"STRONG",{});var LOr=s(hZ);Xio=r(LOr,"nystromformer"),LOr.forEach(t),Vio=r(E4e," \u2014 "),SS=n(E4e,"A",{href:!0});var BOr=s(SS);zio=r(BOr,"NystromformerModel"),BOr.forEach(t),Wio=r(E4e," (Nystromformer model)"),E4e.forEach(t),Qio=i(C),jp=n(C,"LI",{});var y4e=s(jp);pZ=n(y4e,"STRONG",{});var xOr=s(pZ);Hio=r(xOr,"openai-gpt"),xOr.forEach(t),Uio=r(y4e," \u2014 "),PS=n(y4e,"A",{href:!0});var kOr=s(PS);Jio=r(kOr,"OpenAIGPTModel"),kOr.forEach(t),Yio=r(y4e," (OpenAI GPT model)"),y4e.forEach(t),Kio=i(C),Dp=n(C,"LI",{});var w4e=s(Dp);_Z=n(w4e,"STRONG",{});var ROr=s(_Z);Zio=r(ROr,"pegasus"),ROr.forEach(t),edo=r(w4e," \u2014 "),$S=n(w4e,"A",{href:!0});var SOr=s($S);odo=r(SOr,"PegasusModel"),SOr.forEach(t),rdo=r(w4e," (Pegasus model)"),w4e.forEach(t),tdo=i(C),qp=n(C,"LI",{});var A4e=s(qp);uZ=n(A4e,"STRONG",{});var POr=s(uZ);ado=r(POr,"perceiver"),POr.forEach(t),ndo=r(A4e," \u2014 "),IS=n(A4e,"A",{href:!0});var $Or=s(IS);sdo=r($Or,"PerceiverModel"),$Or.forEach(t),ldo=r(A4e," (Perceiver model)"),A4e.forEach(t),ido=i(C),Gp=n(C,"LI",{});var L4e=s(Gp);bZ=n(L4e,"STRONG",{});var IOr=s(bZ);ddo=r(IOr,"plbart"),IOr.forEach(t),cdo=r(L4e," \u2014 "),NS=n(L4e,"A",{href:!0});var NOr=s(NS);fdo=r(NOr,"PLBartModel"),NOr.forEach(t),mdo=r(L4e," (PLBart model)"),L4e.forEach(t),gdo=i(C),Op=n(C,"LI",{});var B4e=s(Op);vZ=n(B4e,"STRONG",{});var jOr=s(vZ);hdo=r(jOr,"poolformer"),jOr.forEach(t),pdo=r(B4e," \u2014 "),jS=n(B4e,"A",{href:!0});var DOr=s(jS);_do=r(DOr,"PoolFormerModel"),DOr.forEach(t),udo=r(B4e," (PoolFormer model)"),B4e.forEach(t),bdo=i(C),Xp=n(C,"LI",{});var x4e=s(Xp);TZ=n(x4e,"STRONG",{});var qOr=s(TZ);vdo=r(qOr,"prophetnet"),qOr.forEach(t),Tdo=r(x4e," \u2014 "),DS=n(x4e,"A",{href:!0});var GOr=s(DS);Fdo=r(GOr,"ProphetNetModel"),GOr.forEach(t),Cdo=r(x4e," (ProphetNet model)"),x4e.forEach(t),Mdo=i(C),Vp=n(C,"LI",{});var k4e=s(Vp);FZ=n(k4e,"STRONG",{});var OOr=s(FZ);Edo=r(OOr,"qdqbert"),OOr.forEach(t),ydo=r(k4e," \u2014 "),qS=n(k4e,"A",{href:!0});var XOr=s(qS);wdo=r(XOr,"QDQBertModel"),XOr.forEach(t),Ado=r(k4e," (QDQBert model)"),k4e.forEach(t),Ldo=i(C),zp=n(C,"LI",{});var R4e=s(zp);CZ=n(R4e,"STRONG",{});var VOr=s(CZ);Bdo=r(VOr,"reformer"),VOr.forEach(t),xdo=r(R4e," \u2014 "),GS=n(R4e,"A",{href:!0});var zOr=s(GS);kdo=r(zOr,"ReformerModel"),zOr.forEach(t),Rdo=r(R4e," (Reformer model)"),R4e.forEach(t),Sdo=i(C),Wp=n(C,"LI",{});var S4e=s(Wp);MZ=n(S4e,"STRONG",{});var WOr=s(MZ);Pdo=r(WOr,"rembert"),WOr.forEach(t),$do=r(S4e," \u2014 "),OS=n(S4e,"A",{href:!0});var QOr=s(OS);Ido=r(QOr,"RemBertModel"),QOr.forEach(t),Ndo=r(S4e," (RemBERT model)"),S4e.forEach(t),jdo=i(C),Qp=n(C,"LI",{});var P4e=s(Qp);EZ=n(P4e,"STRONG",{});var HOr=s(EZ);Ddo=r(HOr,"resnet"),HOr.forEach(t),qdo=r(P4e," \u2014 "),XS=n(P4e,"A",{href:!0});var UOr=s(XS);Gdo=r(UOr,"ResNetModel"),UOr.forEach(t),Odo=r(P4e," (ResNet model)"),P4e.forEach(t),Xdo=i(C),Hp=n(C,"LI",{});var $4e=s(Hp);yZ=n($4e,"STRONG",{});var JOr=s(yZ);Vdo=r(JOr,"retribert"),JOr.forEach(t),zdo=r($4e," \u2014 "),VS=n($4e,"A",{href:!0});var YOr=s(VS);Wdo=r(YOr,"RetriBertModel"),YOr.forEach(t),Qdo=r($4e," (RetriBERT model)"),$4e.forEach(t),Hdo=i(C),Up=n(C,"LI",{});var I4e=s(Up);wZ=n(I4e,"STRONG",{});var KOr=s(wZ);Udo=r(KOr,"roberta"),KOr.forEach(t),Jdo=r(I4e," \u2014 "),zS=n(I4e,"A",{href:!0});var ZOr=s(zS);Ydo=r(ZOr,"RobertaModel"),ZOr.forEach(t),Kdo=r(I4e," (RoBERTa model)"),I4e.forEach(t),Zdo=i(C),Jp=n(C,"LI",{});var N4e=s(Jp);AZ=n(N4e,"STRONG",{});var eXr=s(AZ);eco=r(eXr,"roformer"),eXr.forEach(t),oco=r(N4e," \u2014 "),WS=n(N4e,"A",{href:!0});var oXr=s(WS);rco=r(oXr,"RoFormerModel"),oXr.forEach(t),tco=r(N4e," (RoFormer model)"),N4e.forEach(t),aco=i(C),Yp=n(C,"LI",{});var j4e=s(Yp);LZ=n(j4e,"STRONG",{});var rXr=s(LZ);nco=r(rXr,"segformer"),rXr.forEach(t),sco=r(j4e," \u2014 "),QS=n(j4e,"A",{href:!0});var tXr=s(QS);lco=r(tXr,"SegformerModel"),tXr.forEach(t),ico=r(j4e," (SegFormer model)"),j4e.forEach(t),dco=i(C),Kp=n(C,"LI",{});var D4e=s(Kp);BZ=n(D4e,"STRONG",{});var aXr=s(BZ);cco=r(aXr,"sew"),aXr.forEach(t),fco=r(D4e," \u2014 "),HS=n(D4e,"A",{href:!0});var nXr=s(HS);mco=r(nXr,"SEWModel"),nXr.forEach(t),gco=r(D4e," (SEW model)"),D4e.forEach(t),hco=i(C),Zp=n(C,"LI",{});var q4e=s(Zp);xZ=n(q4e,"STRONG",{});var sXr=s(xZ);pco=r(sXr,"sew-d"),sXr.forEach(t),_co=r(q4e," \u2014 "),US=n(q4e,"A",{href:!0});var lXr=s(US);uco=r(lXr,"SEWDModel"),lXr.forEach(t),bco=r(q4e," (SEW-D model)"),q4e.forEach(t),vco=i(C),e_=n(C,"LI",{});var G4e=s(e_);kZ=n(G4e,"STRONG",{});var iXr=s(kZ);Tco=r(iXr,"speech_to_text"),iXr.forEach(t),Fco=r(G4e," \u2014 "),JS=n(G4e,"A",{href:!0});var dXr=s(JS);Cco=r(dXr,"Speech2TextModel"),dXr.forEach(t),Mco=r(G4e," (Speech2Text model)"),G4e.forEach(t),Eco=i(C),o_=n(C,"LI",{});var O4e=s(o_);RZ=n(O4e,"STRONG",{});var cXr=s(RZ);yco=r(cXr,"splinter"),cXr.forEach(t),wco=r(O4e," \u2014 "),YS=n(O4e,"A",{href:!0});var fXr=s(YS);Aco=r(fXr,"SplinterModel"),fXr.forEach(t),Lco=r(O4e," (Splinter model)"),O4e.forEach(t),Bco=i(C),r_=n(C,"LI",{});var X4e=s(r_);SZ=n(X4e,"STRONG",{});var mXr=s(SZ);xco=r(mXr,"squeezebert"),mXr.forEach(t),kco=r(X4e," \u2014 "),KS=n(X4e,"A",{href:!0});var gXr=s(KS);Rco=r(gXr,"SqueezeBertModel"),gXr.forEach(t),Sco=r(X4e," (SqueezeBERT model)"),X4e.forEach(t),Pco=i(C),t_=n(C,"LI",{});var V4e=s(t_);PZ=n(V4e,"STRONG",{});var hXr=s(PZ);$co=r(hXr,"swin"),hXr.forEach(t),Ico=r(V4e," \u2014 "),ZS=n(V4e,"A",{href:!0});var pXr=s(ZS);Nco=r(pXr,"SwinModel"),pXr.forEach(t),jco=r(V4e," (Swin model)"),V4e.forEach(t),Dco=i(C),a_=n(C,"LI",{});var z4e=s(a_);$Z=n(z4e,"STRONG",{});var _Xr=s($Z);qco=r(_Xr,"t5"),_Xr.forEach(t),Gco=r(z4e," \u2014 "),eP=n(z4e,"A",{href:!0});var uXr=s(eP);Oco=r(uXr,"T5Model"),uXr.forEach(t),Xco=r(z4e," (T5 model)"),z4e.forEach(t),Vco=i(C),n_=n(C,"LI",{});var W4e=s(n_);IZ=n(W4e,"STRONG",{});var bXr=s(IZ);zco=r(bXr,"tapas"),bXr.forEach(t),Wco=r(W4e," \u2014 "),oP=n(W4e,"A",{href:!0});var vXr=s(oP);Qco=r(vXr,"TapasModel"),vXr.forEach(t),Hco=r(W4e," (TAPAS model)"),W4e.forEach(t),Uco=i(C),s_=n(C,"LI",{});var Q4e=s(s_);NZ=n(Q4e,"STRONG",{});var TXr=s(NZ);Jco=r(TXr,"transfo-xl"),TXr.forEach(t),Yco=r(Q4e," \u2014 "),rP=n(Q4e,"A",{href:!0});var FXr=s(rP);Kco=r(FXr,"TransfoXLModel"),FXr.forEach(t),Zco=r(Q4e," (Transformer-XL model)"),Q4e.forEach(t),efo=i(C),l_=n(C,"LI",{});var H4e=s(l_);jZ=n(H4e,"STRONG",{});var CXr=s(jZ);ofo=r(CXr,"unispeech"),CXr.forEach(t),rfo=r(H4e," \u2014 "),tP=n(H4e,"A",{href:!0});var MXr=s(tP);tfo=r(MXr,"UniSpeechModel"),MXr.forEach(t),afo=r(H4e," (UniSpeech model)"),H4e.forEach(t),nfo=i(C),i_=n(C,"LI",{});var U4e=s(i_);DZ=n(U4e,"STRONG",{});var EXr=s(DZ);sfo=r(EXr,"unispeech-sat"),EXr.forEach(t),lfo=r(U4e," \u2014 "),aP=n(U4e,"A",{href:!0});var yXr=s(aP);ifo=r(yXr,"UniSpeechSatModel"),yXr.forEach(t),dfo=r(U4e," (UniSpeechSat model)"),U4e.forEach(t),cfo=i(C),d_=n(C,"LI",{});var J4e=s(d_);qZ=n(J4e,"STRONG",{});var wXr=s(qZ);ffo=r(wXr,"van"),wXr.forEach(t),mfo=r(J4e," \u2014 "),nP=n(J4e,"A",{href:!0});var AXr=s(nP);gfo=r(AXr,"VanModel"),AXr.forEach(t),hfo=r(J4e," (VAN model)"),J4e.forEach(t),pfo=i(C),c_=n(C,"LI",{});var Y4e=s(c_);GZ=n(Y4e,"STRONG",{});var LXr=s(GZ);_fo=r(LXr,"vilt"),LXr.forEach(t),ufo=r(Y4e," \u2014 "),sP=n(Y4e,"A",{href:!0});var BXr=s(sP);bfo=r(BXr,"ViltModel"),BXr.forEach(t),vfo=r(Y4e," (ViLT model)"),Y4e.forEach(t),Tfo=i(C),f_=n(C,"LI",{});var K4e=s(f_);OZ=n(K4e,"STRONG",{});var xXr=s(OZ);Ffo=r(xXr,"vision-text-dual-encoder"),xXr.forEach(t),Cfo=r(K4e," \u2014 "),lP=n(K4e,"A",{href:!0});var kXr=s(lP);Mfo=r(kXr,"VisionTextDualEncoderModel"),kXr.forEach(t),Efo=r(K4e," (VisionTextDualEncoder model)"),K4e.forEach(t),yfo=i(C),m_=n(C,"LI",{});var Z4e=s(m_);XZ=n(Z4e,"STRONG",{});var RXr=s(XZ);wfo=r(RXr,"visual_bert"),RXr.forEach(t),Afo=r(Z4e," \u2014 "),iP=n(Z4e,"A",{href:!0});var SXr=s(iP);Lfo=r(SXr,"VisualBertModel"),SXr.forEach(t),Bfo=r(Z4e," (VisualBert model)"),Z4e.forEach(t),xfo=i(C),g_=n(C,"LI",{});var eEe=s(g_);VZ=n(eEe,"STRONG",{});var PXr=s(VZ);kfo=r(PXr,"vit"),PXr.forEach(t),Rfo=r(eEe," \u2014 "),dP=n(eEe,"A",{href:!0});var $Xr=s(dP);Sfo=r($Xr,"ViTModel"),$Xr.forEach(t),Pfo=r(eEe," (ViT model)"),eEe.forEach(t),$fo=i(C),h_=n(C,"LI",{});var oEe=s(h_);zZ=n(oEe,"STRONG",{});var IXr=s(zZ);Ifo=r(IXr,"vit_mae"),IXr.forEach(t),Nfo=r(oEe," \u2014 "),cP=n(oEe,"A",{href:!0});var NXr=s(cP);jfo=r(NXr,"ViTMAEModel"),NXr.forEach(t),Dfo=r(oEe," (ViTMAE model)"),oEe.forEach(t),qfo=i(C),p_=n(C,"LI",{});var rEe=s(p_);WZ=n(rEe,"STRONG",{});var jXr=s(WZ);Gfo=r(jXr,"wav2vec2"),jXr.forEach(t),Ofo=r(rEe," \u2014 "),fP=n(rEe,"A",{href:!0});var DXr=s(fP);Xfo=r(DXr,"Wav2Vec2Model"),DXr.forEach(t),Vfo=r(rEe," (Wav2Vec2 model)"),rEe.forEach(t),zfo=i(C),__=n(C,"LI",{});var tEe=s(__);QZ=n(tEe,"STRONG",{});var qXr=s(QZ);Wfo=r(qXr,"wavlm"),qXr.forEach(t),Qfo=r(tEe," \u2014 "),mP=n(tEe,"A",{href:!0});var GXr=s(mP);Hfo=r(GXr,"WavLMModel"),GXr.forEach(t),Ufo=r(tEe," (WavLM model)"),tEe.forEach(t),Jfo=i(C),u_=n(C,"LI",{});var aEe=s(u_);HZ=n(aEe,"STRONG",{});var OXr=s(HZ);Yfo=r(OXr,"xglm"),OXr.forEach(t),Kfo=r(aEe," \u2014 "),gP=n(aEe,"A",{href:!0});var XXr=s(gP);Zfo=r(XXr,"XGLMModel"),XXr.forEach(t),emo=r(aEe," (XGLM model)"),aEe.forEach(t),omo=i(C),b_=n(C,"LI",{});var nEe=s(b_);UZ=n(nEe,"STRONG",{});var VXr=s(UZ);rmo=r(VXr,"xlm"),VXr.forEach(t),tmo=r(nEe," \u2014 "),hP=n(nEe,"A",{href:!0});var zXr=s(hP);amo=r(zXr,"XLMModel"),zXr.forEach(t),nmo=r(nEe," (XLM model)"),nEe.forEach(t),smo=i(C),v_=n(C,"LI",{});var sEe=s(v_);JZ=n(sEe,"STRONG",{});var WXr=s(JZ);lmo=r(WXr,"xlm-prophetnet"),WXr.forEach(t),imo=r(sEe," \u2014 "),pP=n(sEe,"A",{href:!0});var QXr=s(pP);dmo=r(QXr,"XLMProphetNetModel"),QXr.forEach(t),cmo=r(sEe," (XLMProphetNet model)"),sEe.forEach(t),fmo=i(C),T_=n(C,"LI",{});var lEe=s(T_);YZ=n(lEe,"STRONG",{});var HXr=s(YZ);mmo=r(HXr,"xlm-roberta"),HXr.forEach(t),gmo=r(lEe," \u2014 "),_P=n(lEe,"A",{href:!0});var UXr=s(_P);hmo=r(UXr,"XLMRobertaModel"),UXr.forEach(t),pmo=r(lEe," (XLM-RoBERTa model)"),lEe.forEach(t),_mo=i(C),F_=n(C,"LI",{});var iEe=s(F_);KZ=n(iEe,"STRONG",{});var JXr=s(KZ);umo=r(JXr,"xlm-roberta-xl"),JXr.forEach(t),bmo=r(iEe," \u2014 "),uP=n(iEe,"A",{href:!0});var YXr=s(uP);vmo=r(YXr,"XLMRobertaXLModel"),YXr.forEach(t),Tmo=r(iEe," (XLM-RoBERTa-XL model)"),iEe.forEach(t),Fmo=i(C),C_=n(C,"LI",{});var dEe=s(C_);ZZ=n(dEe,"STRONG",{});var KXr=s(ZZ);Cmo=r(KXr,"xlnet"),KXr.forEach(t),Mmo=r(dEe," \u2014 "),bP=n(dEe,"A",{href:!0});var ZXr=s(bP);Emo=r(ZXr,"XLNetModel"),ZXr.forEach(t),ymo=r(dEe," (XLNet model)"),dEe.forEach(t),wmo=i(C),M_=n(C,"LI",{});var cEe=s(M_);eee=n(cEe,"STRONG",{});var eVr=s(eee);Amo=r(eVr,"yoso"),eVr.forEach(t),Lmo=r(cEe," \u2014 "),vP=n(cEe,"A",{href:!0});var oVr=s(vP);Bmo=r(oVr,"YosoModel"),oVr.forEach(t),xmo=r(cEe," (YOSO model)"),cEe.forEach(t),C.forEach(t),kmo=i(qt),E_=n(qt,"P",{});var fEe=s(E_);Rmo=r(fEe,"The model is set in evaluation mode by default using "),oee=n(fEe,"CODE",{});var rVr=s(oee);Smo=r(rVr,"model.eval()"),rVr.forEach(t),Pmo=r(fEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ree=n(fEe,"CODE",{});var tVr=s(ree);$mo=r(tVr,"model.train()"),tVr.forEach(t),fEe.forEach(t),Imo=i(qt),tee=n(qt,"P",{});var aVr=s(tee);Nmo=r(aVr,"Examples:"),aVr.forEach(t),jmo=i(qt),m(z3.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),pke=i(c),ed=n(c,"H2",{class:!0});var ESe=s(ed);y_=n(ESe,"A",{id:!0,class:!0,href:!0});var nVr=s(y_);aee=n(nVr,"SPAN",{});var sVr=s(aee);m(W3.$$.fragment,sVr),sVr.forEach(t),nVr.forEach(t),Dmo=i(ESe),nee=n(ESe,"SPAN",{});var lVr=s(nee);qmo=r(lVr,"AutoModelForPreTraining"),lVr.forEach(t),ESe.forEach(t),_ke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(Q3.$$.fragment,Hs),Gmo=i(Hs),od=n(Hs,"P",{});var Yz=s(od);Omo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),see=n(Yz,"CODE",{});var iVr=s(see);Xmo=r(iVr,"from_pretrained()"),iVr.forEach(t),Vmo=r(Yz,"class method or the "),lee=n(Yz,"CODE",{});var dVr=s(lee);zmo=r(dVr,"from_config()"),dVr.forEach(t),Wmo=r(Yz,`class
method.`),Yz.forEach(t),Qmo=i(Hs),H3=n(Hs,"P",{});var ySe=s(H3);Hmo=r(ySe,"This class cannot be instantiated directly using "),iee=n(ySe,"CODE",{});var cVr=s(iee);Umo=r(cVr,"__init__()"),cVr.forEach(t),Jmo=r(ySe," (throws an error)."),ySe.forEach(t),Ymo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(U3.$$.fragment,Us),Kmo=i(Us),dee=n(Us,"P",{});var fVr=s(dee);Zmo=r(fVr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fVr.forEach(t),ego=i(Us),rd=n(Us,"P",{});var Kz=s(rd);ogo=r(Kz,`Note:
Loading a model from its configuration file does `),cee=n(Kz,"STRONG",{});var mVr=s(cee);rgo=r(mVr,"not"),mVr.forEach(t),tgo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=n(Kz,"CODE",{});var gVr=s(fee);ago=r(gVr,"from_pretrained()"),gVr.forEach(t),ngo=r(Kz,"to load the model weights."),Kz.forEach(t),sgo=i(Us),mee=n(Us,"P",{});var hVr=s(mee);lgo=r(hVr,"Examples:"),hVr.forEach(t),igo=i(Us),m(J3.$$.fragment,Us),Us.forEach(t),dgo=i(Hs),De=n(Hs,"DIV",{class:!0});var Gt=s(De);m(Y3.$$.fragment,Gt),cgo=i(Gt),gee=n(Gt,"P",{});var pVr=s(gee);fgo=r(pVr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pVr.forEach(t),mgo=i(Gt),za=n(Gt,"P",{});var cE=s(za);ggo=r(cE,"The model class to instantiate is selected based on the "),hee=n(cE,"CODE",{});var _Vr=s(hee);hgo=r(_Vr,"model_type"),_Vr.forEach(t),pgo=r(cE,` property of the config object (either
passed as an argument or loaded from `),pee=n(cE,"CODE",{});var uVr=s(pee);_go=r(uVr,"pretrained_model_name_or_path"),uVr.forEach(t),ugo=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ee=n(cE,"CODE",{});var bVr=s(_ee);bgo=r(bVr,"pretrained_model_name_or_path"),bVr.forEach(t),vgo=r(cE,":"),cE.forEach(t),Tgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);w_=n(S,"LI",{});var mEe=s(w_);uee=n(mEe,"STRONG",{});var vVr=s(uee);Fgo=r(vVr,"albert"),vVr.forEach(t),Cgo=r(mEe," \u2014 "),TP=n(mEe,"A",{href:!0});var TVr=s(TP);Mgo=r(TVr,"AlbertForPreTraining"),TVr.forEach(t),Ego=r(mEe," (ALBERT model)"),mEe.forEach(t),ygo=i(S),A_=n(S,"LI",{});var gEe=s(A_);bee=n(gEe,"STRONG",{});var FVr=s(bee);wgo=r(FVr,"bart"),FVr.forEach(t),Ago=r(gEe," \u2014 "),FP=n(gEe,"A",{href:!0});var CVr=s(FP);Lgo=r(CVr,"BartForConditionalGeneration"),CVr.forEach(t),Bgo=r(gEe," (BART model)"),gEe.forEach(t),xgo=i(S),L_=n(S,"LI",{});var hEe=s(L_);vee=n(hEe,"STRONG",{});var MVr=s(vee);kgo=r(MVr,"bert"),MVr.forEach(t),Rgo=r(hEe," \u2014 "),CP=n(hEe,"A",{href:!0});var EVr=s(CP);Sgo=r(EVr,"BertForPreTraining"),EVr.forEach(t),Pgo=r(hEe," (BERT model)"),hEe.forEach(t),$go=i(S),B_=n(S,"LI",{});var pEe=s(B_);Tee=n(pEe,"STRONG",{});var yVr=s(Tee);Igo=r(yVr,"big_bird"),yVr.forEach(t),Ngo=r(pEe," \u2014 "),MP=n(pEe,"A",{href:!0});var wVr=s(MP);jgo=r(wVr,"BigBirdForPreTraining"),wVr.forEach(t),Dgo=r(pEe," (BigBird model)"),pEe.forEach(t),qgo=i(S),x_=n(S,"LI",{});var _Ee=s(x_);Fee=n(_Ee,"STRONG",{});var AVr=s(Fee);Ggo=r(AVr,"camembert"),AVr.forEach(t),Ogo=r(_Ee," \u2014 "),EP=n(_Ee,"A",{href:!0});var LVr=s(EP);Xgo=r(LVr,"CamembertForMaskedLM"),LVr.forEach(t),Vgo=r(_Ee," (CamemBERT model)"),_Ee.forEach(t),zgo=i(S),k_=n(S,"LI",{});var uEe=s(k_);Cee=n(uEe,"STRONG",{});var BVr=s(Cee);Wgo=r(BVr,"ctrl"),BVr.forEach(t),Qgo=r(uEe," \u2014 "),yP=n(uEe,"A",{href:!0});var xVr=s(yP);Hgo=r(xVr,"CTRLLMHeadModel"),xVr.forEach(t),Ugo=r(uEe," (CTRL model)"),uEe.forEach(t),Jgo=i(S),R_=n(S,"LI",{});var bEe=s(R_);Mee=n(bEe,"STRONG",{});var kVr=s(Mee);Ygo=r(kVr,"data2vec-text"),kVr.forEach(t),Kgo=r(bEe," \u2014 "),wP=n(bEe,"A",{href:!0});var RVr=s(wP);Zgo=r(RVr,"Data2VecTextForMaskedLM"),RVr.forEach(t),eho=r(bEe," (Data2VecText model)"),bEe.forEach(t),oho=i(S),S_=n(S,"LI",{});var vEe=s(S_);Eee=n(vEe,"STRONG",{});var SVr=s(Eee);rho=r(SVr,"deberta"),SVr.forEach(t),tho=r(vEe," \u2014 "),AP=n(vEe,"A",{href:!0});var PVr=s(AP);aho=r(PVr,"DebertaForMaskedLM"),PVr.forEach(t),nho=r(vEe," (DeBERTa model)"),vEe.forEach(t),sho=i(S),P_=n(S,"LI",{});var TEe=s(P_);yee=n(TEe,"STRONG",{});var $Vr=s(yee);lho=r($Vr,"deberta-v2"),$Vr.forEach(t),iho=r(TEe," \u2014 "),LP=n(TEe,"A",{href:!0});var IVr=s(LP);dho=r(IVr,"DebertaV2ForMaskedLM"),IVr.forEach(t),cho=r(TEe," (DeBERTa-v2 model)"),TEe.forEach(t),fho=i(S),$_=n(S,"LI",{});var FEe=s($_);wee=n(FEe,"STRONG",{});var NVr=s(wee);mho=r(NVr,"distilbert"),NVr.forEach(t),gho=r(FEe," \u2014 "),BP=n(FEe,"A",{href:!0});var jVr=s(BP);hho=r(jVr,"DistilBertForMaskedLM"),jVr.forEach(t),pho=r(FEe," (DistilBERT model)"),FEe.forEach(t),_ho=i(S),I_=n(S,"LI",{});var CEe=s(I_);Aee=n(CEe,"STRONG",{});var DVr=s(Aee);uho=r(DVr,"electra"),DVr.forEach(t),bho=r(CEe," \u2014 "),xP=n(CEe,"A",{href:!0});var qVr=s(xP);vho=r(qVr,"ElectraForPreTraining"),qVr.forEach(t),Tho=r(CEe," (ELECTRA model)"),CEe.forEach(t),Fho=i(S),N_=n(S,"LI",{});var MEe=s(N_);Lee=n(MEe,"STRONG",{});var GVr=s(Lee);Cho=r(GVr,"flaubert"),GVr.forEach(t),Mho=r(MEe," \u2014 "),kP=n(MEe,"A",{href:!0});var OVr=s(kP);Eho=r(OVr,"FlaubertWithLMHeadModel"),OVr.forEach(t),yho=r(MEe," (FlauBERT model)"),MEe.forEach(t),who=i(S),j_=n(S,"LI",{});var EEe=s(j_);Bee=n(EEe,"STRONG",{});var XVr=s(Bee);Aho=r(XVr,"fnet"),XVr.forEach(t),Lho=r(EEe," \u2014 "),RP=n(EEe,"A",{href:!0});var VVr=s(RP);Bho=r(VVr,"FNetForPreTraining"),VVr.forEach(t),xho=r(EEe," (FNet model)"),EEe.forEach(t),kho=i(S),D_=n(S,"LI",{});var yEe=s(D_);xee=n(yEe,"STRONG",{});var zVr=s(xee);Rho=r(zVr,"fsmt"),zVr.forEach(t),Sho=r(yEe," \u2014 "),SP=n(yEe,"A",{href:!0});var WVr=s(SP);Pho=r(WVr,"FSMTForConditionalGeneration"),WVr.forEach(t),$ho=r(yEe," (FairSeq Machine-Translation model)"),yEe.forEach(t),Iho=i(S),q_=n(S,"LI",{});var wEe=s(q_);kee=n(wEe,"STRONG",{});var QVr=s(kee);Nho=r(QVr,"funnel"),QVr.forEach(t),jho=r(wEe," \u2014 "),PP=n(wEe,"A",{href:!0});var HVr=s(PP);Dho=r(HVr,"FunnelForPreTraining"),HVr.forEach(t),qho=r(wEe," (Funnel Transformer model)"),wEe.forEach(t),Gho=i(S),G_=n(S,"LI",{});var AEe=s(G_);Ree=n(AEe,"STRONG",{});var UVr=s(Ree);Oho=r(UVr,"gpt2"),UVr.forEach(t),Xho=r(AEe," \u2014 "),$P=n(AEe,"A",{href:!0});var JVr=s($P);Vho=r(JVr,"GPT2LMHeadModel"),JVr.forEach(t),zho=r(AEe," (OpenAI GPT-2 model)"),AEe.forEach(t),Who=i(S),O_=n(S,"LI",{});var LEe=s(O_);See=n(LEe,"STRONG",{});var YVr=s(See);Qho=r(YVr,"ibert"),YVr.forEach(t),Hho=r(LEe," \u2014 "),IP=n(LEe,"A",{href:!0});var KVr=s(IP);Uho=r(KVr,"IBertForMaskedLM"),KVr.forEach(t),Jho=r(LEe," (I-BERT model)"),LEe.forEach(t),Yho=i(S),X_=n(S,"LI",{});var BEe=s(X_);Pee=n(BEe,"STRONG",{});var ZVr=s(Pee);Kho=r(ZVr,"layoutlm"),ZVr.forEach(t),Zho=r(BEe," \u2014 "),NP=n(BEe,"A",{href:!0});var ezr=s(NP);epo=r(ezr,"LayoutLMForMaskedLM"),ezr.forEach(t),opo=r(BEe," (LayoutLM model)"),BEe.forEach(t),rpo=i(S),V_=n(S,"LI",{});var xEe=s(V_);$ee=n(xEe,"STRONG",{});var ozr=s($ee);tpo=r(ozr,"longformer"),ozr.forEach(t),apo=r(xEe," \u2014 "),jP=n(xEe,"A",{href:!0});var rzr=s(jP);npo=r(rzr,"LongformerForMaskedLM"),rzr.forEach(t),spo=r(xEe," (Longformer model)"),xEe.forEach(t),lpo=i(S),z_=n(S,"LI",{});var kEe=s(z_);Iee=n(kEe,"STRONG",{});var tzr=s(Iee);ipo=r(tzr,"lxmert"),tzr.forEach(t),dpo=r(kEe," \u2014 "),DP=n(kEe,"A",{href:!0});var azr=s(DP);cpo=r(azr,"LxmertForPreTraining"),azr.forEach(t),fpo=r(kEe," (LXMERT model)"),kEe.forEach(t),mpo=i(S),W_=n(S,"LI",{});var REe=s(W_);Nee=n(REe,"STRONG",{});var nzr=s(Nee);gpo=r(nzr,"megatron-bert"),nzr.forEach(t),hpo=r(REe," \u2014 "),qP=n(REe,"A",{href:!0});var szr=s(qP);ppo=r(szr,"MegatronBertForPreTraining"),szr.forEach(t),_po=r(REe," (MegatronBert model)"),REe.forEach(t),upo=i(S),Q_=n(S,"LI",{});var SEe=s(Q_);jee=n(SEe,"STRONG",{});var lzr=s(jee);bpo=r(lzr,"mobilebert"),lzr.forEach(t),vpo=r(SEe," \u2014 "),GP=n(SEe,"A",{href:!0});var izr=s(GP);Tpo=r(izr,"MobileBertForPreTraining"),izr.forEach(t),Fpo=r(SEe," (MobileBERT model)"),SEe.forEach(t),Cpo=i(S),H_=n(S,"LI",{});var PEe=s(H_);Dee=n(PEe,"STRONG",{});var dzr=s(Dee);Mpo=r(dzr,"mpnet"),dzr.forEach(t),Epo=r(PEe," \u2014 "),OP=n(PEe,"A",{href:!0});var czr=s(OP);ypo=r(czr,"MPNetForMaskedLM"),czr.forEach(t),wpo=r(PEe," (MPNet model)"),PEe.forEach(t),Apo=i(S),U_=n(S,"LI",{});var $Ee=s(U_);qee=n($Ee,"STRONG",{});var fzr=s(qee);Lpo=r(fzr,"openai-gpt"),fzr.forEach(t),Bpo=r($Ee," \u2014 "),XP=n($Ee,"A",{href:!0});var mzr=s(XP);xpo=r(mzr,"OpenAIGPTLMHeadModel"),mzr.forEach(t),kpo=r($Ee," (OpenAI GPT model)"),$Ee.forEach(t),Rpo=i(S),J_=n(S,"LI",{});var IEe=s(J_);Gee=n(IEe,"STRONG",{});var gzr=s(Gee);Spo=r(gzr,"retribert"),gzr.forEach(t),Ppo=r(IEe," \u2014 "),VP=n(IEe,"A",{href:!0});var hzr=s(VP);$po=r(hzr,"RetriBertModel"),hzr.forEach(t),Ipo=r(IEe," (RetriBERT model)"),IEe.forEach(t),Npo=i(S),Y_=n(S,"LI",{});var NEe=s(Y_);Oee=n(NEe,"STRONG",{});var pzr=s(Oee);jpo=r(pzr,"roberta"),pzr.forEach(t),Dpo=r(NEe," \u2014 "),zP=n(NEe,"A",{href:!0});var _zr=s(zP);qpo=r(_zr,"RobertaForMaskedLM"),_zr.forEach(t),Gpo=r(NEe," (RoBERTa model)"),NEe.forEach(t),Opo=i(S),K_=n(S,"LI",{});var jEe=s(K_);Xee=n(jEe,"STRONG",{});var uzr=s(Xee);Xpo=r(uzr,"squeezebert"),uzr.forEach(t),Vpo=r(jEe," \u2014 "),WP=n(jEe,"A",{href:!0});var bzr=s(WP);zpo=r(bzr,"SqueezeBertForMaskedLM"),bzr.forEach(t),Wpo=r(jEe," (SqueezeBERT model)"),jEe.forEach(t),Qpo=i(S),Z_=n(S,"LI",{});var DEe=s(Z_);Vee=n(DEe,"STRONG",{});var vzr=s(Vee);Hpo=r(vzr,"t5"),vzr.forEach(t),Upo=r(DEe," \u2014 "),QP=n(DEe,"A",{href:!0});var Tzr=s(QP);Jpo=r(Tzr,"T5ForConditionalGeneration"),Tzr.forEach(t),Ypo=r(DEe," (T5 model)"),DEe.forEach(t),Kpo=i(S),eu=n(S,"LI",{});var qEe=s(eu);zee=n(qEe,"STRONG",{});var Fzr=s(zee);Zpo=r(Fzr,"tapas"),Fzr.forEach(t),e_o=r(qEe," \u2014 "),HP=n(qEe,"A",{href:!0});var Czr=s(HP);o_o=r(Czr,"TapasForMaskedLM"),Czr.forEach(t),r_o=r(qEe," (TAPAS model)"),qEe.forEach(t),t_o=i(S),ou=n(S,"LI",{});var GEe=s(ou);Wee=n(GEe,"STRONG",{});var Mzr=s(Wee);a_o=r(Mzr,"transfo-xl"),Mzr.forEach(t),n_o=r(GEe," \u2014 "),UP=n(GEe,"A",{href:!0});var Ezr=s(UP);s_o=r(Ezr,"TransfoXLLMHeadModel"),Ezr.forEach(t),l_o=r(GEe," (Transformer-XL model)"),GEe.forEach(t),i_o=i(S),ru=n(S,"LI",{});var OEe=s(ru);Qee=n(OEe,"STRONG",{});var yzr=s(Qee);d_o=r(yzr,"unispeech"),yzr.forEach(t),c_o=r(OEe," \u2014 "),JP=n(OEe,"A",{href:!0});var wzr=s(JP);f_o=r(wzr,"UniSpeechForPreTraining"),wzr.forEach(t),m_o=r(OEe," (UniSpeech model)"),OEe.forEach(t),g_o=i(S),tu=n(S,"LI",{});var XEe=s(tu);Hee=n(XEe,"STRONG",{});var Azr=s(Hee);h_o=r(Azr,"unispeech-sat"),Azr.forEach(t),p_o=r(XEe," \u2014 "),YP=n(XEe,"A",{href:!0});var Lzr=s(YP);__o=r(Lzr,"UniSpeechSatForPreTraining"),Lzr.forEach(t),u_o=r(XEe," (UniSpeechSat model)"),XEe.forEach(t),b_o=i(S),au=n(S,"LI",{});var VEe=s(au);Uee=n(VEe,"STRONG",{});var Bzr=s(Uee);v_o=r(Bzr,"visual_bert"),Bzr.forEach(t),T_o=r(VEe," \u2014 "),KP=n(VEe,"A",{href:!0});var xzr=s(KP);F_o=r(xzr,"VisualBertForPreTraining"),xzr.forEach(t),C_o=r(VEe," (VisualBert model)"),VEe.forEach(t),M_o=i(S),nu=n(S,"LI",{});var zEe=s(nu);Jee=n(zEe,"STRONG",{});var kzr=s(Jee);E_o=r(kzr,"vit_mae"),kzr.forEach(t),y_o=r(zEe," \u2014 "),ZP=n(zEe,"A",{href:!0});var Rzr=s(ZP);w_o=r(Rzr,"ViTMAEForPreTraining"),Rzr.forEach(t),A_o=r(zEe," (ViTMAE model)"),zEe.forEach(t),L_o=i(S),su=n(S,"LI",{});var WEe=s(su);Yee=n(WEe,"STRONG",{});var Szr=s(Yee);B_o=r(Szr,"wav2vec2"),Szr.forEach(t),x_o=r(WEe," \u2014 "),e$=n(WEe,"A",{href:!0});var Pzr=s(e$);k_o=r(Pzr,"Wav2Vec2ForPreTraining"),Pzr.forEach(t),R_o=r(WEe," (Wav2Vec2 model)"),WEe.forEach(t),S_o=i(S),lu=n(S,"LI",{});var QEe=s(lu);Kee=n(QEe,"STRONG",{});var $zr=s(Kee);P_o=r($zr,"xlm"),$zr.forEach(t),$_o=r(QEe," \u2014 "),o$=n(QEe,"A",{href:!0});var Izr=s(o$);I_o=r(Izr,"XLMWithLMHeadModel"),Izr.forEach(t),N_o=r(QEe," (XLM model)"),QEe.forEach(t),j_o=i(S),iu=n(S,"LI",{});var HEe=s(iu);Zee=n(HEe,"STRONG",{});var Nzr=s(Zee);D_o=r(Nzr,"xlm-roberta"),Nzr.forEach(t),q_o=r(HEe," \u2014 "),r$=n(HEe,"A",{href:!0});var jzr=s(r$);G_o=r(jzr,"XLMRobertaForMaskedLM"),jzr.forEach(t),O_o=r(HEe," (XLM-RoBERTa model)"),HEe.forEach(t),X_o=i(S),du=n(S,"LI",{});var UEe=s(du);eoe=n(UEe,"STRONG",{});var Dzr=s(eoe);V_o=r(Dzr,"xlm-roberta-xl"),Dzr.forEach(t),z_o=r(UEe," \u2014 "),t$=n(UEe,"A",{href:!0});var qzr=s(t$);W_o=r(qzr,"XLMRobertaXLForMaskedLM"),qzr.forEach(t),Q_o=r(UEe," (XLM-RoBERTa-XL model)"),UEe.forEach(t),H_o=i(S),cu=n(S,"LI",{});var JEe=s(cu);ooe=n(JEe,"STRONG",{});var Gzr=s(ooe);U_o=r(Gzr,"xlnet"),Gzr.forEach(t),J_o=r(JEe," \u2014 "),a$=n(JEe,"A",{href:!0});var Ozr=s(a$);Y_o=r(Ozr,"XLNetLMHeadModel"),Ozr.forEach(t),K_o=r(JEe," (XLNet model)"),JEe.forEach(t),S.forEach(t),Z_o=i(Gt),fu=n(Gt,"P",{});var YEe=s(fu);euo=r(YEe,"The model is set in evaluation mode by default using "),roe=n(YEe,"CODE",{});var Xzr=s(roe);ouo=r(Xzr,"model.eval()"),Xzr.forEach(t),ruo=r(YEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),toe=n(YEe,"CODE",{});var Vzr=s(toe);tuo=r(Vzr,"model.train()"),Vzr.forEach(t),YEe.forEach(t),auo=i(Gt),aoe=n(Gt,"P",{});var zzr=s(aoe);nuo=r(zzr,"Examples:"),zzr.forEach(t),suo=i(Gt),m(K3.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),uke=i(c),td=n(c,"H2",{class:!0});var wSe=s(td);mu=n(wSe,"A",{id:!0,class:!0,href:!0});var Wzr=s(mu);noe=n(Wzr,"SPAN",{});var Qzr=s(noe);m(Z3.$$.fragment,Qzr),Qzr.forEach(t),Wzr.forEach(t),luo=i(wSe),soe=n(wSe,"SPAN",{});var Hzr=s(soe);iuo=r(Hzr,"AutoModelForCausalLM"),Hzr.forEach(t),wSe.forEach(t),bke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(ey.$$.fragment,Js),duo=i(Js),ad=n(Js,"P",{});var Zz=s(ad);cuo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),loe=n(Zz,"CODE",{});var Uzr=s(loe);fuo=r(Uzr,"from_pretrained()"),Uzr.forEach(t),muo=r(Zz,"class method or the "),ioe=n(Zz,"CODE",{});var Jzr=s(ioe);guo=r(Jzr,"from_config()"),Jzr.forEach(t),huo=r(Zz,`class
method.`),Zz.forEach(t),puo=i(Js),oy=n(Js,"P",{});var ASe=s(oy);_uo=r(ASe,"This class cannot be instantiated directly using "),doe=n(ASe,"CODE",{});var Yzr=s(doe);uuo=r(Yzr,"__init__()"),Yzr.forEach(t),buo=r(ASe," (throws an error)."),ASe.forEach(t),vuo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(ry.$$.fragment,Ys),Tuo=i(Ys),coe=n(Ys,"P",{});var Kzr=s(coe);Fuo=r(Kzr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kzr.forEach(t),Cuo=i(Ys),nd=n(Ys,"P",{});var eW=s(nd);Muo=r(eW,`Note:
Loading a model from its configuration file does `),foe=n(eW,"STRONG",{});var Zzr=s(foe);Euo=r(Zzr,"not"),Zzr.forEach(t),yuo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=n(eW,"CODE",{});var eWr=s(moe);wuo=r(eWr,"from_pretrained()"),eWr.forEach(t),Auo=r(eW,"to load the model weights."),eW.forEach(t),Luo=i(Ys),goe=n(Ys,"P",{});var oWr=s(goe);Buo=r(oWr,"Examples:"),oWr.forEach(t),xuo=i(Ys),m(ty.$$.fragment,Ys),Ys.forEach(t),kuo=i(Js),qe=n(Js,"DIV",{class:!0});var Ot=s(qe);m(ay.$$.fragment,Ot),Ruo=i(Ot),hoe=n(Ot,"P",{});var rWr=s(hoe);Suo=r(rWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rWr.forEach(t),Puo=i(Ot),Wa=n(Ot,"P",{});var fE=s(Wa);$uo=r(fE,"The model class to instantiate is selected based on the "),poe=n(fE,"CODE",{});var tWr=s(poe);Iuo=r(tWr,"model_type"),tWr.forEach(t),Nuo=r(fE,` property of the config object (either
passed as an argument or loaded from `),_oe=n(fE,"CODE",{});var aWr=s(_oe);juo=r(aWr,"pretrained_model_name_or_path"),aWr.forEach(t),Duo=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uoe=n(fE,"CODE",{});var nWr=s(uoe);quo=r(nWr,"pretrained_model_name_or_path"),nWr.forEach(t),Guo=r(fE,":"),fE.forEach(t),Ouo=i(Ot),$=n(Ot,"UL",{});var N=s($);gu=n(N,"LI",{});var KEe=s(gu);boe=n(KEe,"STRONG",{});var sWr=s(boe);Xuo=r(sWr,"bart"),sWr.forEach(t),Vuo=r(KEe," \u2014 "),n$=n(KEe,"A",{href:!0});var lWr=s(n$);zuo=r(lWr,"BartForCausalLM"),lWr.forEach(t),Wuo=r(KEe," (BART model)"),KEe.forEach(t),Quo=i(N),hu=n(N,"LI",{});var ZEe=s(hu);voe=n(ZEe,"STRONG",{});var iWr=s(voe);Huo=r(iWr,"bert"),iWr.forEach(t),Uuo=r(ZEe," \u2014 "),s$=n(ZEe,"A",{href:!0});var dWr=s(s$);Juo=r(dWr,"BertLMHeadModel"),dWr.forEach(t),Yuo=r(ZEe," (BERT model)"),ZEe.forEach(t),Kuo=i(N),pu=n(N,"LI",{});var e3e=s(pu);Toe=n(e3e,"STRONG",{});var cWr=s(Toe);Zuo=r(cWr,"bert-generation"),cWr.forEach(t),e5o=r(e3e," \u2014 "),l$=n(e3e,"A",{href:!0});var fWr=s(l$);o5o=r(fWr,"BertGenerationDecoder"),fWr.forEach(t),r5o=r(e3e," (Bert Generation model)"),e3e.forEach(t),t5o=i(N),_u=n(N,"LI",{});var o3e=s(_u);Foe=n(o3e,"STRONG",{});var mWr=s(Foe);a5o=r(mWr,"big_bird"),mWr.forEach(t),n5o=r(o3e," \u2014 "),i$=n(o3e,"A",{href:!0});var gWr=s(i$);s5o=r(gWr,"BigBirdForCausalLM"),gWr.forEach(t),l5o=r(o3e," (BigBird model)"),o3e.forEach(t),i5o=i(N),uu=n(N,"LI",{});var r3e=s(uu);Coe=n(r3e,"STRONG",{});var hWr=s(Coe);d5o=r(hWr,"bigbird_pegasus"),hWr.forEach(t),c5o=r(r3e," \u2014 "),d$=n(r3e,"A",{href:!0});var pWr=s(d$);f5o=r(pWr,"BigBirdPegasusForCausalLM"),pWr.forEach(t),m5o=r(r3e," (BigBirdPegasus model)"),r3e.forEach(t),g5o=i(N),bu=n(N,"LI",{});var t3e=s(bu);Moe=n(t3e,"STRONG",{});var _Wr=s(Moe);h5o=r(_Wr,"blenderbot"),_Wr.forEach(t),p5o=r(t3e," \u2014 "),c$=n(t3e,"A",{href:!0});var uWr=s(c$);_5o=r(uWr,"BlenderbotForCausalLM"),uWr.forEach(t),u5o=r(t3e," (Blenderbot model)"),t3e.forEach(t),b5o=i(N),vu=n(N,"LI",{});var a3e=s(vu);Eoe=n(a3e,"STRONG",{});var bWr=s(Eoe);v5o=r(bWr,"blenderbot-small"),bWr.forEach(t),T5o=r(a3e," \u2014 "),f$=n(a3e,"A",{href:!0});var vWr=s(f$);F5o=r(vWr,"BlenderbotSmallForCausalLM"),vWr.forEach(t),C5o=r(a3e," (BlenderbotSmall model)"),a3e.forEach(t),M5o=i(N),Tu=n(N,"LI",{});var n3e=s(Tu);yoe=n(n3e,"STRONG",{});var TWr=s(yoe);E5o=r(TWr,"camembert"),TWr.forEach(t),y5o=r(n3e," \u2014 "),m$=n(n3e,"A",{href:!0});var FWr=s(m$);w5o=r(FWr,"CamembertForCausalLM"),FWr.forEach(t),A5o=r(n3e," (CamemBERT model)"),n3e.forEach(t),L5o=i(N),Fu=n(N,"LI",{});var s3e=s(Fu);woe=n(s3e,"STRONG",{});var CWr=s(woe);B5o=r(CWr,"ctrl"),CWr.forEach(t),x5o=r(s3e," \u2014 "),g$=n(s3e,"A",{href:!0});var MWr=s(g$);k5o=r(MWr,"CTRLLMHeadModel"),MWr.forEach(t),R5o=r(s3e," (CTRL model)"),s3e.forEach(t),S5o=i(N),Cu=n(N,"LI",{});var l3e=s(Cu);Aoe=n(l3e,"STRONG",{});var EWr=s(Aoe);P5o=r(EWr,"data2vec-text"),EWr.forEach(t),$5o=r(l3e," \u2014 "),h$=n(l3e,"A",{href:!0});var yWr=s(h$);I5o=r(yWr,"Data2VecTextForCausalLM"),yWr.forEach(t),N5o=r(l3e," (Data2VecText model)"),l3e.forEach(t),j5o=i(N),Mu=n(N,"LI",{});var i3e=s(Mu);Loe=n(i3e,"STRONG",{});var wWr=s(Loe);D5o=r(wWr,"electra"),wWr.forEach(t),q5o=r(i3e," \u2014 "),p$=n(i3e,"A",{href:!0});var AWr=s(p$);G5o=r(AWr,"ElectraForCausalLM"),AWr.forEach(t),O5o=r(i3e," (ELECTRA model)"),i3e.forEach(t),X5o=i(N),Eu=n(N,"LI",{});var d3e=s(Eu);Boe=n(d3e,"STRONG",{});var LWr=s(Boe);V5o=r(LWr,"gpt2"),LWr.forEach(t),z5o=r(d3e," \u2014 "),_$=n(d3e,"A",{href:!0});var BWr=s(_$);W5o=r(BWr,"GPT2LMHeadModel"),BWr.forEach(t),Q5o=r(d3e," (OpenAI GPT-2 model)"),d3e.forEach(t),H5o=i(N),yu=n(N,"LI",{});var c3e=s(yu);xoe=n(c3e,"STRONG",{});var xWr=s(xoe);U5o=r(xWr,"gpt_neo"),xWr.forEach(t),J5o=r(c3e," \u2014 "),u$=n(c3e,"A",{href:!0});var kWr=s(u$);Y5o=r(kWr,"GPTNeoForCausalLM"),kWr.forEach(t),K5o=r(c3e," (GPT Neo model)"),c3e.forEach(t),Z5o=i(N),wu=n(N,"LI",{});var f3e=s(wu);koe=n(f3e,"STRONG",{});var RWr=s(koe);e2o=r(RWr,"gptj"),RWr.forEach(t),o2o=r(f3e," \u2014 "),b$=n(f3e,"A",{href:!0});var SWr=s(b$);r2o=r(SWr,"GPTJForCausalLM"),SWr.forEach(t),t2o=r(f3e," (GPT-J model)"),f3e.forEach(t),a2o=i(N),Au=n(N,"LI",{});var m3e=s(Au);Roe=n(m3e,"STRONG",{});var PWr=s(Roe);n2o=r(PWr,"marian"),PWr.forEach(t),s2o=r(m3e," \u2014 "),v$=n(m3e,"A",{href:!0});var $Wr=s(v$);l2o=r($Wr,"MarianForCausalLM"),$Wr.forEach(t),i2o=r(m3e," (Marian model)"),m3e.forEach(t),d2o=i(N),Lu=n(N,"LI",{});var g3e=s(Lu);Soe=n(g3e,"STRONG",{});var IWr=s(Soe);c2o=r(IWr,"mbart"),IWr.forEach(t),f2o=r(g3e," \u2014 "),T$=n(g3e,"A",{href:!0});var NWr=s(T$);m2o=r(NWr,"MBartForCausalLM"),NWr.forEach(t),g2o=r(g3e," (mBART model)"),g3e.forEach(t),h2o=i(N),Bu=n(N,"LI",{});var h3e=s(Bu);Poe=n(h3e,"STRONG",{});var jWr=s(Poe);p2o=r(jWr,"megatron-bert"),jWr.forEach(t),_2o=r(h3e," \u2014 "),F$=n(h3e,"A",{href:!0});var DWr=s(F$);u2o=r(DWr,"MegatronBertForCausalLM"),DWr.forEach(t),b2o=r(h3e," (MegatronBert model)"),h3e.forEach(t),v2o=i(N),xu=n(N,"LI",{});var p3e=s(xu);$oe=n(p3e,"STRONG",{});var qWr=s($oe);T2o=r(qWr,"openai-gpt"),qWr.forEach(t),F2o=r(p3e," \u2014 "),C$=n(p3e,"A",{href:!0});var GWr=s(C$);C2o=r(GWr,"OpenAIGPTLMHeadModel"),GWr.forEach(t),M2o=r(p3e," (OpenAI GPT model)"),p3e.forEach(t),E2o=i(N),ku=n(N,"LI",{});var _3e=s(ku);Ioe=n(_3e,"STRONG",{});var OWr=s(Ioe);y2o=r(OWr,"pegasus"),OWr.forEach(t),w2o=r(_3e," \u2014 "),M$=n(_3e,"A",{href:!0});var XWr=s(M$);A2o=r(XWr,"PegasusForCausalLM"),XWr.forEach(t),L2o=r(_3e," (Pegasus model)"),_3e.forEach(t),B2o=i(N),Ru=n(N,"LI",{});var u3e=s(Ru);Noe=n(u3e,"STRONG",{});var VWr=s(Noe);x2o=r(VWr,"plbart"),VWr.forEach(t),k2o=r(u3e," \u2014 "),E$=n(u3e,"A",{href:!0});var zWr=s(E$);R2o=r(zWr,"PLBartForCausalLM"),zWr.forEach(t),S2o=r(u3e," (PLBart model)"),u3e.forEach(t),P2o=i(N),Su=n(N,"LI",{});var b3e=s(Su);joe=n(b3e,"STRONG",{});var WWr=s(joe);$2o=r(WWr,"prophetnet"),WWr.forEach(t),I2o=r(b3e," \u2014 "),y$=n(b3e,"A",{href:!0});var QWr=s(y$);N2o=r(QWr,"ProphetNetForCausalLM"),QWr.forEach(t),j2o=r(b3e," (ProphetNet model)"),b3e.forEach(t),D2o=i(N),Pu=n(N,"LI",{});var v3e=s(Pu);Doe=n(v3e,"STRONG",{});var HWr=s(Doe);q2o=r(HWr,"qdqbert"),HWr.forEach(t),G2o=r(v3e," \u2014 "),w$=n(v3e,"A",{href:!0});var UWr=s(w$);O2o=r(UWr,"QDQBertLMHeadModel"),UWr.forEach(t),X2o=r(v3e," (QDQBert model)"),v3e.forEach(t),V2o=i(N),$u=n(N,"LI",{});var T3e=s($u);qoe=n(T3e,"STRONG",{});var JWr=s(qoe);z2o=r(JWr,"reformer"),JWr.forEach(t),W2o=r(T3e," \u2014 "),A$=n(T3e,"A",{href:!0});var YWr=s(A$);Q2o=r(YWr,"ReformerModelWithLMHead"),YWr.forEach(t),H2o=r(T3e," (Reformer model)"),T3e.forEach(t),U2o=i(N),Iu=n(N,"LI",{});var F3e=s(Iu);Goe=n(F3e,"STRONG",{});var KWr=s(Goe);J2o=r(KWr,"rembert"),KWr.forEach(t),Y2o=r(F3e," \u2014 "),L$=n(F3e,"A",{href:!0});var ZWr=s(L$);K2o=r(ZWr,"RemBertForCausalLM"),ZWr.forEach(t),Z2o=r(F3e," (RemBERT model)"),F3e.forEach(t),e1o=i(N),Nu=n(N,"LI",{});var C3e=s(Nu);Ooe=n(C3e,"STRONG",{});var eQr=s(Ooe);o1o=r(eQr,"roberta"),eQr.forEach(t),r1o=r(C3e," \u2014 "),B$=n(C3e,"A",{href:!0});var oQr=s(B$);t1o=r(oQr,"RobertaForCausalLM"),oQr.forEach(t),a1o=r(C3e," (RoBERTa model)"),C3e.forEach(t),n1o=i(N),ju=n(N,"LI",{});var M3e=s(ju);Xoe=n(M3e,"STRONG",{});var rQr=s(Xoe);s1o=r(rQr,"roformer"),rQr.forEach(t),l1o=r(M3e," \u2014 "),x$=n(M3e,"A",{href:!0});var tQr=s(x$);i1o=r(tQr,"RoFormerForCausalLM"),tQr.forEach(t),d1o=r(M3e," (RoFormer model)"),M3e.forEach(t),c1o=i(N),Du=n(N,"LI",{});var E3e=s(Du);Voe=n(E3e,"STRONG",{});var aQr=s(Voe);f1o=r(aQr,"speech_to_text_2"),aQr.forEach(t),m1o=r(E3e," \u2014 "),k$=n(E3e,"A",{href:!0});var nQr=s(k$);g1o=r(nQr,"Speech2Text2ForCausalLM"),nQr.forEach(t),h1o=r(E3e," (Speech2Text2 model)"),E3e.forEach(t),p1o=i(N),qu=n(N,"LI",{});var y3e=s(qu);zoe=n(y3e,"STRONG",{});var sQr=s(zoe);_1o=r(sQr,"transfo-xl"),sQr.forEach(t),u1o=r(y3e," \u2014 "),R$=n(y3e,"A",{href:!0});var lQr=s(R$);b1o=r(lQr,"TransfoXLLMHeadModel"),lQr.forEach(t),v1o=r(y3e," (Transformer-XL model)"),y3e.forEach(t),T1o=i(N),Gu=n(N,"LI",{});var w3e=s(Gu);Woe=n(w3e,"STRONG",{});var iQr=s(Woe);F1o=r(iQr,"trocr"),iQr.forEach(t),C1o=r(w3e," \u2014 "),S$=n(w3e,"A",{href:!0});var dQr=s(S$);M1o=r(dQr,"TrOCRForCausalLM"),dQr.forEach(t),E1o=r(w3e," (TrOCR model)"),w3e.forEach(t),y1o=i(N),Ou=n(N,"LI",{});var A3e=s(Ou);Qoe=n(A3e,"STRONG",{});var cQr=s(Qoe);w1o=r(cQr,"xglm"),cQr.forEach(t),A1o=r(A3e," \u2014 "),P$=n(A3e,"A",{href:!0});var fQr=s(P$);L1o=r(fQr,"XGLMForCausalLM"),fQr.forEach(t),B1o=r(A3e," (XGLM model)"),A3e.forEach(t),x1o=i(N),Xu=n(N,"LI",{});var L3e=s(Xu);Hoe=n(L3e,"STRONG",{});var mQr=s(Hoe);k1o=r(mQr,"xlm"),mQr.forEach(t),R1o=r(L3e," \u2014 "),$$=n(L3e,"A",{href:!0});var gQr=s($$);S1o=r(gQr,"XLMWithLMHeadModel"),gQr.forEach(t),P1o=r(L3e," (XLM model)"),L3e.forEach(t),$1o=i(N),Vu=n(N,"LI",{});var B3e=s(Vu);Uoe=n(B3e,"STRONG",{});var hQr=s(Uoe);I1o=r(hQr,"xlm-prophetnet"),hQr.forEach(t),N1o=r(B3e," \u2014 "),I$=n(B3e,"A",{href:!0});var pQr=s(I$);j1o=r(pQr,"XLMProphetNetForCausalLM"),pQr.forEach(t),D1o=r(B3e," (XLMProphetNet model)"),B3e.forEach(t),q1o=i(N),zu=n(N,"LI",{});var x3e=s(zu);Joe=n(x3e,"STRONG",{});var _Qr=s(Joe);G1o=r(_Qr,"xlm-roberta"),_Qr.forEach(t),O1o=r(x3e," \u2014 "),N$=n(x3e,"A",{href:!0});var uQr=s(N$);X1o=r(uQr,"XLMRobertaForCausalLM"),uQr.forEach(t),V1o=r(x3e," (XLM-RoBERTa model)"),x3e.forEach(t),z1o=i(N),Wu=n(N,"LI",{});var k3e=s(Wu);Yoe=n(k3e,"STRONG",{});var bQr=s(Yoe);W1o=r(bQr,"xlm-roberta-xl"),bQr.forEach(t),Q1o=r(k3e," \u2014 "),j$=n(k3e,"A",{href:!0});var vQr=s(j$);H1o=r(vQr,"XLMRobertaXLForCausalLM"),vQr.forEach(t),U1o=r(k3e," (XLM-RoBERTa-XL model)"),k3e.forEach(t),J1o=i(N),Qu=n(N,"LI",{});var R3e=s(Qu);Koe=n(R3e,"STRONG",{});var TQr=s(Koe);Y1o=r(TQr,"xlnet"),TQr.forEach(t),K1o=r(R3e," \u2014 "),D$=n(R3e,"A",{href:!0});var FQr=s(D$);Z1o=r(FQr,"XLNetLMHeadModel"),FQr.forEach(t),ebo=r(R3e," (XLNet model)"),R3e.forEach(t),N.forEach(t),obo=i(Ot),Hu=n(Ot,"P",{});var S3e=s(Hu);rbo=r(S3e,"The model is set in evaluation mode by default using "),Zoe=n(S3e,"CODE",{});var CQr=s(Zoe);tbo=r(CQr,"model.eval()"),CQr.forEach(t),abo=r(S3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ere=n(S3e,"CODE",{});var MQr=s(ere);nbo=r(MQr,"model.train()"),MQr.forEach(t),S3e.forEach(t),sbo=i(Ot),ore=n(Ot,"P",{});var EQr=s(ore);lbo=r(EQr,"Examples:"),EQr.forEach(t),ibo=i(Ot),m(ny.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),vke=i(c),sd=n(c,"H2",{class:!0});var LSe=s(sd);Uu=n(LSe,"A",{id:!0,class:!0,href:!0});var yQr=s(Uu);rre=n(yQr,"SPAN",{});var wQr=s(rre);m(sy.$$.fragment,wQr),wQr.forEach(t),yQr.forEach(t),dbo=i(LSe),tre=n(LSe,"SPAN",{});var AQr=s(tre);cbo=r(AQr,"AutoModelForMaskedLM"),AQr.forEach(t),LSe.forEach(t),Tke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(ly.$$.fragment,Ks),fbo=i(Ks),ld=n(Ks,"P",{});var oW=s(ld);mbo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),are=n(oW,"CODE",{});var LQr=s(are);gbo=r(LQr,"from_pretrained()"),LQr.forEach(t),hbo=r(oW,"class method or the "),nre=n(oW,"CODE",{});var BQr=s(nre);pbo=r(BQr,"from_config()"),BQr.forEach(t),_bo=r(oW,`class
method.`),oW.forEach(t),ubo=i(Ks),iy=n(Ks,"P",{});var BSe=s(iy);bbo=r(BSe,"This class cannot be instantiated directly using "),sre=n(BSe,"CODE",{});var xQr=s(sre);vbo=r(xQr,"__init__()"),xQr.forEach(t),Tbo=r(BSe," (throws an error)."),BSe.forEach(t),Fbo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(dy.$$.fragment,Zs),Cbo=i(Zs),lre=n(Zs,"P",{});var kQr=s(lre);Mbo=r(kQr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kQr.forEach(t),Ebo=i(Zs),id=n(Zs,"P",{});var rW=s(id);ybo=r(rW,`Note:
Loading a model from its configuration file does `),ire=n(rW,"STRONG",{});var RQr=s(ire);wbo=r(RQr,"not"),RQr.forEach(t),Abo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(rW,"CODE",{});var SQr=s(dre);Lbo=r(SQr,"from_pretrained()"),SQr.forEach(t),Bbo=r(rW,"to load the model weights."),rW.forEach(t),xbo=i(Zs),cre=n(Zs,"P",{});var PQr=s(cre);kbo=r(PQr,"Examples:"),PQr.forEach(t),Rbo=i(Zs),m(cy.$$.fragment,Zs),Zs.forEach(t),Sbo=i(Ks),Ge=n(Ks,"DIV",{class:!0});var Xt=s(Ge);m(fy.$$.fragment,Xt),Pbo=i(Xt),fre=n(Xt,"P",{});var $Qr=s(fre);$bo=r($Qr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Qr.forEach(t),Ibo=i(Xt),Qa=n(Xt,"P",{});var mE=s(Qa);Nbo=r(mE,"The model class to instantiate is selected based on the "),mre=n(mE,"CODE",{});var IQr=s(mre);jbo=r(IQr,"model_type"),IQr.forEach(t),Dbo=r(mE,` property of the config object (either
passed as an argument or loaded from `),gre=n(mE,"CODE",{});var NQr=s(gre);qbo=r(NQr,"pretrained_model_name_or_path"),NQr.forEach(t),Gbo=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hre=n(mE,"CODE",{});var jQr=s(hre);Obo=r(jQr,"pretrained_model_name_or_path"),jQr.forEach(t),Xbo=r(mE,":"),mE.forEach(t),Vbo=i(Xt),I=n(Xt,"UL",{});var j=s(I);Ju=n(j,"LI",{});var P3e=s(Ju);pre=n(P3e,"STRONG",{});var DQr=s(pre);zbo=r(DQr,"albert"),DQr.forEach(t),Wbo=r(P3e," \u2014 "),q$=n(P3e,"A",{href:!0});var qQr=s(q$);Qbo=r(qQr,"AlbertForMaskedLM"),qQr.forEach(t),Hbo=r(P3e," (ALBERT model)"),P3e.forEach(t),Ubo=i(j),Yu=n(j,"LI",{});var $3e=s(Yu);_re=n($3e,"STRONG",{});var GQr=s(_re);Jbo=r(GQr,"bart"),GQr.forEach(t),Ybo=r($3e," \u2014 "),G$=n($3e,"A",{href:!0});var OQr=s(G$);Kbo=r(OQr,"BartForConditionalGeneration"),OQr.forEach(t),Zbo=r($3e," (BART model)"),$3e.forEach(t),evo=i(j),Ku=n(j,"LI",{});var I3e=s(Ku);ure=n(I3e,"STRONG",{});var XQr=s(ure);ovo=r(XQr,"bert"),XQr.forEach(t),rvo=r(I3e," \u2014 "),O$=n(I3e,"A",{href:!0});var VQr=s(O$);tvo=r(VQr,"BertForMaskedLM"),VQr.forEach(t),avo=r(I3e," (BERT model)"),I3e.forEach(t),nvo=i(j),Zu=n(j,"LI",{});var N3e=s(Zu);bre=n(N3e,"STRONG",{});var zQr=s(bre);svo=r(zQr,"big_bird"),zQr.forEach(t),lvo=r(N3e," \u2014 "),X$=n(N3e,"A",{href:!0});var WQr=s(X$);ivo=r(WQr,"BigBirdForMaskedLM"),WQr.forEach(t),dvo=r(N3e," (BigBird model)"),N3e.forEach(t),cvo=i(j),e5=n(j,"LI",{});var j3e=s(e5);vre=n(j3e,"STRONG",{});var QQr=s(vre);fvo=r(QQr,"camembert"),QQr.forEach(t),mvo=r(j3e," \u2014 "),V$=n(j3e,"A",{href:!0});var HQr=s(V$);gvo=r(HQr,"CamembertForMaskedLM"),HQr.forEach(t),hvo=r(j3e," (CamemBERT model)"),j3e.forEach(t),pvo=i(j),o5=n(j,"LI",{});var D3e=s(o5);Tre=n(D3e,"STRONG",{});var UQr=s(Tre);_vo=r(UQr,"convbert"),UQr.forEach(t),uvo=r(D3e," \u2014 "),z$=n(D3e,"A",{href:!0});var JQr=s(z$);bvo=r(JQr,"ConvBertForMaskedLM"),JQr.forEach(t),vvo=r(D3e," (ConvBERT model)"),D3e.forEach(t),Tvo=i(j),r5=n(j,"LI",{});var q3e=s(r5);Fre=n(q3e,"STRONG",{});var YQr=s(Fre);Fvo=r(YQr,"data2vec-text"),YQr.forEach(t),Cvo=r(q3e," \u2014 "),W$=n(q3e,"A",{href:!0});var KQr=s(W$);Mvo=r(KQr,"Data2VecTextForMaskedLM"),KQr.forEach(t),Evo=r(q3e," (Data2VecText model)"),q3e.forEach(t),yvo=i(j),t5=n(j,"LI",{});var G3e=s(t5);Cre=n(G3e,"STRONG",{});var ZQr=s(Cre);wvo=r(ZQr,"deberta"),ZQr.forEach(t),Avo=r(G3e," \u2014 "),Q$=n(G3e,"A",{href:!0});var eHr=s(Q$);Lvo=r(eHr,"DebertaForMaskedLM"),eHr.forEach(t),Bvo=r(G3e," (DeBERTa model)"),G3e.forEach(t),xvo=i(j),a5=n(j,"LI",{});var O3e=s(a5);Mre=n(O3e,"STRONG",{});var oHr=s(Mre);kvo=r(oHr,"deberta-v2"),oHr.forEach(t),Rvo=r(O3e," \u2014 "),H$=n(O3e,"A",{href:!0});var rHr=s(H$);Svo=r(rHr,"DebertaV2ForMaskedLM"),rHr.forEach(t),Pvo=r(O3e," (DeBERTa-v2 model)"),O3e.forEach(t),$vo=i(j),n5=n(j,"LI",{});var X3e=s(n5);Ere=n(X3e,"STRONG",{});var tHr=s(Ere);Ivo=r(tHr,"distilbert"),tHr.forEach(t),Nvo=r(X3e," \u2014 "),U$=n(X3e,"A",{href:!0});var aHr=s(U$);jvo=r(aHr,"DistilBertForMaskedLM"),aHr.forEach(t),Dvo=r(X3e," (DistilBERT model)"),X3e.forEach(t),qvo=i(j),s5=n(j,"LI",{});var V3e=s(s5);yre=n(V3e,"STRONG",{});var nHr=s(yre);Gvo=r(nHr,"electra"),nHr.forEach(t),Ovo=r(V3e," \u2014 "),J$=n(V3e,"A",{href:!0});var sHr=s(J$);Xvo=r(sHr,"ElectraForMaskedLM"),sHr.forEach(t),Vvo=r(V3e," (ELECTRA model)"),V3e.forEach(t),zvo=i(j),l5=n(j,"LI",{});var z3e=s(l5);wre=n(z3e,"STRONG",{});var lHr=s(wre);Wvo=r(lHr,"flaubert"),lHr.forEach(t),Qvo=r(z3e," \u2014 "),Y$=n(z3e,"A",{href:!0});var iHr=s(Y$);Hvo=r(iHr,"FlaubertWithLMHeadModel"),iHr.forEach(t),Uvo=r(z3e," (FlauBERT model)"),z3e.forEach(t),Jvo=i(j),i5=n(j,"LI",{});var W3e=s(i5);Are=n(W3e,"STRONG",{});var dHr=s(Are);Yvo=r(dHr,"fnet"),dHr.forEach(t),Kvo=r(W3e," \u2014 "),K$=n(W3e,"A",{href:!0});var cHr=s(K$);Zvo=r(cHr,"FNetForMaskedLM"),cHr.forEach(t),e6o=r(W3e," (FNet model)"),W3e.forEach(t),o6o=i(j),d5=n(j,"LI",{});var Q3e=s(d5);Lre=n(Q3e,"STRONG",{});var fHr=s(Lre);r6o=r(fHr,"funnel"),fHr.forEach(t),t6o=r(Q3e," \u2014 "),Z$=n(Q3e,"A",{href:!0});var mHr=s(Z$);a6o=r(mHr,"FunnelForMaskedLM"),mHr.forEach(t),n6o=r(Q3e," (Funnel Transformer model)"),Q3e.forEach(t),s6o=i(j),c5=n(j,"LI",{});var H3e=s(c5);Bre=n(H3e,"STRONG",{});var gHr=s(Bre);l6o=r(gHr,"ibert"),gHr.forEach(t),i6o=r(H3e," \u2014 "),eI=n(H3e,"A",{href:!0});var hHr=s(eI);d6o=r(hHr,"IBertForMaskedLM"),hHr.forEach(t),c6o=r(H3e," (I-BERT model)"),H3e.forEach(t),f6o=i(j),f5=n(j,"LI",{});var U3e=s(f5);xre=n(U3e,"STRONG",{});var pHr=s(xre);m6o=r(pHr,"layoutlm"),pHr.forEach(t),g6o=r(U3e," \u2014 "),oI=n(U3e,"A",{href:!0});var _Hr=s(oI);h6o=r(_Hr,"LayoutLMForMaskedLM"),_Hr.forEach(t),p6o=r(U3e," (LayoutLM model)"),U3e.forEach(t),_6o=i(j),m5=n(j,"LI",{});var J3e=s(m5);kre=n(J3e,"STRONG",{});var uHr=s(kre);u6o=r(uHr,"longformer"),uHr.forEach(t),b6o=r(J3e," \u2014 "),rI=n(J3e,"A",{href:!0});var bHr=s(rI);v6o=r(bHr,"LongformerForMaskedLM"),bHr.forEach(t),T6o=r(J3e," (Longformer model)"),J3e.forEach(t),F6o=i(j),g5=n(j,"LI",{});var Y3e=s(g5);Rre=n(Y3e,"STRONG",{});var vHr=s(Rre);C6o=r(vHr,"mbart"),vHr.forEach(t),M6o=r(Y3e," \u2014 "),tI=n(Y3e,"A",{href:!0});var THr=s(tI);E6o=r(THr,"MBartForConditionalGeneration"),THr.forEach(t),y6o=r(Y3e," (mBART model)"),Y3e.forEach(t),w6o=i(j),h5=n(j,"LI",{});var K3e=s(h5);Sre=n(K3e,"STRONG",{});var FHr=s(Sre);A6o=r(FHr,"megatron-bert"),FHr.forEach(t),L6o=r(K3e," \u2014 "),aI=n(K3e,"A",{href:!0});var CHr=s(aI);B6o=r(CHr,"MegatronBertForMaskedLM"),CHr.forEach(t),x6o=r(K3e," (MegatronBert model)"),K3e.forEach(t),k6o=i(j),p5=n(j,"LI",{});var Z3e=s(p5);Pre=n(Z3e,"STRONG",{});var MHr=s(Pre);R6o=r(MHr,"mobilebert"),MHr.forEach(t),S6o=r(Z3e," \u2014 "),nI=n(Z3e,"A",{href:!0});var EHr=s(nI);P6o=r(EHr,"MobileBertForMaskedLM"),EHr.forEach(t),$6o=r(Z3e," (MobileBERT model)"),Z3e.forEach(t),I6o=i(j),_5=n(j,"LI",{});var eye=s(_5);$re=n(eye,"STRONG",{});var yHr=s($re);N6o=r(yHr,"mpnet"),yHr.forEach(t),j6o=r(eye," \u2014 "),sI=n(eye,"A",{href:!0});var wHr=s(sI);D6o=r(wHr,"MPNetForMaskedLM"),wHr.forEach(t),q6o=r(eye," (MPNet model)"),eye.forEach(t),G6o=i(j),u5=n(j,"LI",{});var oye=s(u5);Ire=n(oye,"STRONG",{});var AHr=s(Ire);O6o=r(AHr,"nystromformer"),AHr.forEach(t),X6o=r(oye," \u2014 "),lI=n(oye,"A",{href:!0});var LHr=s(lI);V6o=r(LHr,"NystromformerForMaskedLM"),LHr.forEach(t),z6o=r(oye," (Nystromformer model)"),oye.forEach(t),W6o=i(j),b5=n(j,"LI",{});var rye=s(b5);Nre=n(rye,"STRONG",{});var BHr=s(Nre);Q6o=r(BHr,"perceiver"),BHr.forEach(t),H6o=r(rye," \u2014 "),iI=n(rye,"A",{href:!0});var xHr=s(iI);U6o=r(xHr,"PerceiverForMaskedLM"),xHr.forEach(t),J6o=r(rye," (Perceiver model)"),rye.forEach(t),Y6o=i(j),v5=n(j,"LI",{});var tye=s(v5);jre=n(tye,"STRONG",{});var kHr=s(jre);K6o=r(kHr,"qdqbert"),kHr.forEach(t),Z6o=r(tye," \u2014 "),dI=n(tye,"A",{href:!0});var RHr=s(dI);eTo=r(RHr,"QDQBertForMaskedLM"),RHr.forEach(t),oTo=r(tye," (QDQBert model)"),tye.forEach(t),rTo=i(j),T5=n(j,"LI",{});var aye=s(T5);Dre=n(aye,"STRONG",{});var SHr=s(Dre);tTo=r(SHr,"reformer"),SHr.forEach(t),aTo=r(aye," \u2014 "),cI=n(aye,"A",{href:!0});var PHr=s(cI);nTo=r(PHr,"ReformerForMaskedLM"),PHr.forEach(t),sTo=r(aye," (Reformer model)"),aye.forEach(t),lTo=i(j),F5=n(j,"LI",{});var nye=s(F5);qre=n(nye,"STRONG",{});var $Hr=s(qre);iTo=r($Hr,"rembert"),$Hr.forEach(t),dTo=r(nye," \u2014 "),fI=n(nye,"A",{href:!0});var IHr=s(fI);cTo=r(IHr,"RemBertForMaskedLM"),IHr.forEach(t),fTo=r(nye," (RemBERT model)"),nye.forEach(t),mTo=i(j),C5=n(j,"LI",{});var sye=s(C5);Gre=n(sye,"STRONG",{});var NHr=s(Gre);gTo=r(NHr,"roberta"),NHr.forEach(t),hTo=r(sye," \u2014 "),mI=n(sye,"A",{href:!0});var jHr=s(mI);pTo=r(jHr,"RobertaForMaskedLM"),jHr.forEach(t),_To=r(sye," (RoBERTa model)"),sye.forEach(t),uTo=i(j),M5=n(j,"LI",{});var lye=s(M5);Ore=n(lye,"STRONG",{});var DHr=s(Ore);bTo=r(DHr,"roformer"),DHr.forEach(t),vTo=r(lye," \u2014 "),gI=n(lye,"A",{href:!0});var qHr=s(gI);TTo=r(qHr,"RoFormerForMaskedLM"),qHr.forEach(t),FTo=r(lye," (RoFormer model)"),lye.forEach(t),CTo=i(j),E5=n(j,"LI",{});var iye=s(E5);Xre=n(iye,"STRONG",{});var GHr=s(Xre);MTo=r(GHr,"squeezebert"),GHr.forEach(t),ETo=r(iye," \u2014 "),hI=n(iye,"A",{href:!0});var OHr=s(hI);yTo=r(OHr,"SqueezeBertForMaskedLM"),OHr.forEach(t),wTo=r(iye," (SqueezeBERT model)"),iye.forEach(t),ATo=i(j),y5=n(j,"LI",{});var dye=s(y5);Vre=n(dye,"STRONG",{});var XHr=s(Vre);LTo=r(XHr,"tapas"),XHr.forEach(t),BTo=r(dye," \u2014 "),pI=n(dye,"A",{href:!0});var VHr=s(pI);xTo=r(VHr,"TapasForMaskedLM"),VHr.forEach(t),kTo=r(dye," (TAPAS model)"),dye.forEach(t),RTo=i(j),w5=n(j,"LI",{});var cye=s(w5);zre=n(cye,"STRONG",{});var zHr=s(zre);STo=r(zHr,"wav2vec2"),zHr.forEach(t),PTo=r(cye," \u2014 "),Wre=n(cye,"CODE",{});var WHr=s(Wre);$To=r(WHr,"Wav2Vec2ForMaskedLM"),WHr.forEach(t),ITo=r(cye,"(Wav2Vec2 model)"),cye.forEach(t),NTo=i(j),A5=n(j,"LI",{});var fye=s(A5);Qre=n(fye,"STRONG",{});var QHr=s(Qre);jTo=r(QHr,"xlm"),QHr.forEach(t),DTo=r(fye," \u2014 "),_I=n(fye,"A",{href:!0});var HHr=s(_I);qTo=r(HHr,"XLMWithLMHeadModel"),HHr.forEach(t),GTo=r(fye," (XLM model)"),fye.forEach(t),OTo=i(j),L5=n(j,"LI",{});var mye=s(L5);Hre=n(mye,"STRONG",{});var UHr=s(Hre);XTo=r(UHr,"xlm-roberta"),UHr.forEach(t),VTo=r(mye," \u2014 "),uI=n(mye,"A",{href:!0});var JHr=s(uI);zTo=r(JHr,"XLMRobertaForMaskedLM"),JHr.forEach(t),WTo=r(mye," (XLM-RoBERTa model)"),mye.forEach(t),QTo=i(j),B5=n(j,"LI",{});var gye=s(B5);Ure=n(gye,"STRONG",{});var YHr=s(Ure);HTo=r(YHr,"xlm-roberta-xl"),YHr.forEach(t),UTo=r(gye," \u2014 "),bI=n(gye,"A",{href:!0});var KHr=s(bI);JTo=r(KHr,"XLMRobertaXLForMaskedLM"),KHr.forEach(t),YTo=r(gye," (XLM-RoBERTa-XL model)"),gye.forEach(t),KTo=i(j),x5=n(j,"LI",{});var hye=s(x5);Jre=n(hye,"STRONG",{});var ZHr=s(Jre);ZTo=r(ZHr,"yoso"),ZHr.forEach(t),eFo=r(hye," \u2014 "),vI=n(hye,"A",{href:!0});var eUr=s(vI);oFo=r(eUr,"YosoForMaskedLM"),eUr.forEach(t),rFo=r(hye," (YOSO model)"),hye.forEach(t),j.forEach(t),tFo=i(Xt),k5=n(Xt,"P",{});var pye=s(k5);aFo=r(pye,"The model is set in evaluation mode by default using "),Yre=n(pye,"CODE",{});var oUr=s(Yre);nFo=r(oUr,"model.eval()"),oUr.forEach(t),sFo=r(pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kre=n(pye,"CODE",{});var rUr=s(Kre);lFo=r(rUr,"model.train()"),rUr.forEach(t),pye.forEach(t),iFo=i(Xt),Zre=n(Xt,"P",{});var tUr=s(Zre);dFo=r(tUr,"Examples:"),tUr.forEach(t),cFo=i(Xt),m(my.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Fke=i(c),dd=n(c,"H2",{class:!0});var xSe=s(dd);R5=n(xSe,"A",{id:!0,class:!0,href:!0});var aUr=s(R5);ete=n(aUr,"SPAN",{});var nUr=s(ete);m(gy.$$.fragment,nUr),nUr.forEach(t),aUr.forEach(t),fFo=i(xSe),ote=n(xSe,"SPAN",{});var sUr=s(ote);mFo=r(sUr,"AutoModelForSeq2SeqLM"),sUr.forEach(t),xSe.forEach(t),Cke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(hy.$$.fragment,el),gFo=i(el),cd=n(el,"P",{});var tW=s(cd);hFo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rte=n(tW,"CODE",{});var lUr=s(rte);pFo=r(lUr,"from_pretrained()"),lUr.forEach(t),_Fo=r(tW,"class method or the "),tte=n(tW,"CODE",{});var iUr=s(tte);uFo=r(iUr,"from_config()"),iUr.forEach(t),bFo=r(tW,`class
method.`),tW.forEach(t),vFo=i(el),py=n(el,"P",{});var kSe=s(py);TFo=r(kSe,"This class cannot be instantiated directly using "),ate=n(kSe,"CODE",{});var dUr=s(ate);FFo=r(dUr,"__init__()"),dUr.forEach(t),CFo=r(kSe," (throws an error)."),kSe.forEach(t),MFo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(_y.$$.fragment,ol),EFo=i(ol),nte=n(ol,"P",{});var cUr=s(nte);yFo=r(cUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cUr.forEach(t),wFo=i(ol),fd=n(ol,"P",{});var aW=s(fd);AFo=r(aW,`Note:
Loading a model from its configuration file does `),ste=n(aW,"STRONG",{});var fUr=s(ste);LFo=r(fUr,"not"),fUr.forEach(t),BFo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=n(aW,"CODE",{});var mUr=s(lte);xFo=r(mUr,"from_pretrained()"),mUr.forEach(t),kFo=r(aW,"to load the model weights."),aW.forEach(t),RFo=i(ol),ite=n(ol,"P",{});var gUr=s(ite);SFo=r(gUr,"Examples:"),gUr.forEach(t),PFo=i(ol),m(uy.$$.fragment,ol),ol.forEach(t),$Fo=i(el),Oe=n(el,"DIV",{class:!0});var Vt=s(Oe);m(by.$$.fragment,Vt),IFo=i(Vt),dte=n(Vt,"P",{});var hUr=s(dte);NFo=r(hUr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hUr.forEach(t),jFo=i(Vt),Ha=n(Vt,"P",{});var gE=s(Ha);DFo=r(gE,"The model class to instantiate is selected based on the "),cte=n(gE,"CODE",{});var pUr=s(cte);qFo=r(pUr,"model_type"),pUr.forEach(t),GFo=r(gE,` property of the config object (either
passed as an argument or loaded from `),fte=n(gE,"CODE",{});var _Ur=s(fte);OFo=r(_Ur,"pretrained_model_name_or_path"),_Ur.forEach(t),XFo=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mte=n(gE,"CODE",{});var uUr=s(mte);VFo=r(uUr,"pretrained_model_name_or_path"),uUr.forEach(t),zFo=r(gE,":"),gE.forEach(t),WFo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);S5=n(ie,"LI",{});var _ye=s(S5);gte=n(_ye,"STRONG",{});var bUr=s(gte);QFo=r(bUr,"bart"),bUr.forEach(t),HFo=r(_ye," \u2014 "),TI=n(_ye,"A",{href:!0});var vUr=s(TI);UFo=r(vUr,"BartForConditionalGeneration"),vUr.forEach(t),JFo=r(_ye," (BART model)"),_ye.forEach(t),YFo=i(ie),P5=n(ie,"LI",{});var uye=s(P5);hte=n(uye,"STRONG",{});var TUr=s(hte);KFo=r(TUr,"bigbird_pegasus"),TUr.forEach(t),ZFo=r(uye," \u2014 "),FI=n(uye,"A",{href:!0});var FUr=s(FI);eCo=r(FUr,"BigBirdPegasusForConditionalGeneration"),FUr.forEach(t),oCo=r(uye," (BigBirdPegasus model)"),uye.forEach(t),rCo=i(ie),$5=n(ie,"LI",{});var bye=s($5);pte=n(bye,"STRONG",{});var CUr=s(pte);tCo=r(CUr,"blenderbot"),CUr.forEach(t),aCo=r(bye," \u2014 "),CI=n(bye,"A",{href:!0});var MUr=s(CI);nCo=r(MUr,"BlenderbotForConditionalGeneration"),MUr.forEach(t),sCo=r(bye," (Blenderbot model)"),bye.forEach(t),lCo=i(ie),I5=n(ie,"LI",{});var vye=s(I5);_te=n(vye,"STRONG",{});var EUr=s(_te);iCo=r(EUr,"blenderbot-small"),EUr.forEach(t),dCo=r(vye," \u2014 "),MI=n(vye,"A",{href:!0});var yUr=s(MI);cCo=r(yUr,"BlenderbotSmallForConditionalGeneration"),yUr.forEach(t),fCo=r(vye," (BlenderbotSmall model)"),vye.forEach(t),mCo=i(ie),N5=n(ie,"LI",{});var Tye=s(N5);ute=n(Tye,"STRONG",{});var wUr=s(ute);gCo=r(wUr,"encoder-decoder"),wUr.forEach(t),hCo=r(Tye," \u2014 "),EI=n(Tye,"A",{href:!0});var AUr=s(EI);pCo=r(AUr,"EncoderDecoderModel"),AUr.forEach(t),_Co=r(Tye," (Encoder decoder model)"),Tye.forEach(t),uCo=i(ie),j5=n(ie,"LI",{});var Fye=s(j5);bte=n(Fye,"STRONG",{});var LUr=s(bte);bCo=r(LUr,"fsmt"),LUr.forEach(t),vCo=r(Fye," \u2014 "),yI=n(Fye,"A",{href:!0});var BUr=s(yI);TCo=r(BUr,"FSMTForConditionalGeneration"),BUr.forEach(t),FCo=r(Fye," (FairSeq Machine-Translation model)"),Fye.forEach(t),CCo=i(ie),D5=n(ie,"LI",{});var Cye=s(D5);vte=n(Cye,"STRONG",{});var xUr=s(vte);MCo=r(xUr,"led"),xUr.forEach(t),ECo=r(Cye," \u2014 "),wI=n(Cye,"A",{href:!0});var kUr=s(wI);yCo=r(kUr,"LEDForConditionalGeneration"),kUr.forEach(t),wCo=r(Cye," (LED model)"),Cye.forEach(t),ACo=i(ie),q5=n(ie,"LI",{});var Mye=s(q5);Tte=n(Mye,"STRONG",{});var RUr=s(Tte);LCo=r(RUr,"m2m_100"),RUr.forEach(t),BCo=r(Mye," \u2014 "),AI=n(Mye,"A",{href:!0});var SUr=s(AI);xCo=r(SUr,"M2M100ForConditionalGeneration"),SUr.forEach(t),kCo=r(Mye," (M2M100 model)"),Mye.forEach(t),RCo=i(ie),G5=n(ie,"LI",{});var Eye=s(G5);Fte=n(Eye,"STRONG",{});var PUr=s(Fte);SCo=r(PUr,"marian"),PUr.forEach(t),PCo=r(Eye," \u2014 "),LI=n(Eye,"A",{href:!0});var $Ur=s(LI);$Co=r($Ur,"MarianMTModel"),$Ur.forEach(t),ICo=r(Eye," (Marian model)"),Eye.forEach(t),NCo=i(ie),O5=n(ie,"LI",{});var yye=s(O5);Cte=n(yye,"STRONG",{});var IUr=s(Cte);jCo=r(IUr,"mbart"),IUr.forEach(t),DCo=r(yye," \u2014 "),BI=n(yye,"A",{href:!0});var NUr=s(BI);qCo=r(NUr,"MBartForConditionalGeneration"),NUr.forEach(t),GCo=r(yye," (mBART model)"),yye.forEach(t),OCo=i(ie),X5=n(ie,"LI",{});var wye=s(X5);Mte=n(wye,"STRONG",{});var jUr=s(Mte);XCo=r(jUr,"mt5"),jUr.forEach(t),VCo=r(wye," \u2014 "),xI=n(wye,"A",{href:!0});var DUr=s(xI);zCo=r(DUr,"MT5ForConditionalGeneration"),DUr.forEach(t),WCo=r(wye," (mT5 model)"),wye.forEach(t),QCo=i(ie),V5=n(ie,"LI",{});var Aye=s(V5);Ete=n(Aye,"STRONG",{});var qUr=s(Ete);HCo=r(qUr,"pegasus"),qUr.forEach(t),UCo=r(Aye," \u2014 "),kI=n(Aye,"A",{href:!0});var GUr=s(kI);JCo=r(GUr,"PegasusForConditionalGeneration"),GUr.forEach(t),YCo=r(Aye," (Pegasus model)"),Aye.forEach(t),KCo=i(ie),z5=n(ie,"LI",{});var Lye=s(z5);yte=n(Lye,"STRONG",{});var OUr=s(yte);ZCo=r(OUr,"plbart"),OUr.forEach(t),eMo=r(Lye," \u2014 "),RI=n(Lye,"A",{href:!0});var XUr=s(RI);oMo=r(XUr,"PLBartForConditionalGeneration"),XUr.forEach(t),rMo=r(Lye," (PLBart model)"),Lye.forEach(t),tMo=i(ie),W5=n(ie,"LI",{});var Bye=s(W5);wte=n(Bye,"STRONG",{});var VUr=s(wte);aMo=r(VUr,"prophetnet"),VUr.forEach(t),nMo=r(Bye," \u2014 "),SI=n(Bye,"A",{href:!0});var zUr=s(SI);sMo=r(zUr,"ProphetNetForConditionalGeneration"),zUr.forEach(t),lMo=r(Bye," (ProphetNet model)"),Bye.forEach(t),iMo=i(ie),Q5=n(ie,"LI",{});var xye=s(Q5);Ate=n(xye,"STRONG",{});var WUr=s(Ate);dMo=r(WUr,"t5"),WUr.forEach(t),cMo=r(xye," \u2014 "),PI=n(xye,"A",{href:!0});var QUr=s(PI);fMo=r(QUr,"T5ForConditionalGeneration"),QUr.forEach(t),mMo=r(xye," (T5 model)"),xye.forEach(t),gMo=i(ie),H5=n(ie,"LI",{});var kye=s(H5);Lte=n(kye,"STRONG",{});var HUr=s(Lte);hMo=r(HUr,"xlm-prophetnet"),HUr.forEach(t),pMo=r(kye," \u2014 "),$I=n(kye,"A",{href:!0});var UUr=s($I);_Mo=r(UUr,"XLMProphetNetForConditionalGeneration"),UUr.forEach(t),uMo=r(kye," (XLMProphetNet model)"),kye.forEach(t),ie.forEach(t),bMo=i(Vt),U5=n(Vt,"P",{});var Rye=s(U5);vMo=r(Rye,"The model is set in evaluation mode by default using "),Bte=n(Rye,"CODE",{});var JUr=s(Bte);TMo=r(JUr,"model.eval()"),JUr.forEach(t),FMo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=n(Rye,"CODE",{});var YUr=s(xte);CMo=r(YUr,"model.train()"),YUr.forEach(t),Rye.forEach(t),MMo=i(Vt),kte=n(Vt,"P",{});var KUr=s(kte);EMo=r(KUr,"Examples:"),KUr.forEach(t),yMo=i(Vt),m(vy.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Mke=i(c),md=n(c,"H2",{class:!0});var RSe=s(md);J5=n(RSe,"A",{id:!0,class:!0,href:!0});var ZUr=s(J5);Rte=n(ZUr,"SPAN",{});var eJr=s(Rte);m(Ty.$$.fragment,eJr),eJr.forEach(t),ZUr.forEach(t),wMo=i(RSe),Ste=n(RSe,"SPAN",{});var oJr=s(Ste);AMo=r(oJr,"AutoModelForSequenceClassification"),oJr.forEach(t),RSe.forEach(t),Eke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(Fy.$$.fragment,rl),LMo=i(rl),gd=n(rl,"P",{});var nW=s(gd);BMo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Pte=n(nW,"CODE",{});var rJr=s(Pte);xMo=r(rJr,"from_pretrained()"),rJr.forEach(t),kMo=r(nW,"class method or the "),$te=n(nW,"CODE",{});var tJr=s($te);RMo=r(tJr,"from_config()"),tJr.forEach(t),SMo=r(nW,`class
method.`),nW.forEach(t),PMo=i(rl),Cy=n(rl,"P",{});var SSe=s(Cy);$Mo=r(SSe,"This class cannot be instantiated directly using "),Ite=n(SSe,"CODE",{});var aJr=s(Ite);IMo=r(aJr,"__init__()"),aJr.forEach(t),NMo=r(SSe," (throws an error)."),SSe.forEach(t),jMo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(My.$$.fragment,tl),DMo=i(tl),Nte=n(tl,"P",{});var nJr=s(Nte);qMo=r(nJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nJr.forEach(t),GMo=i(tl),hd=n(tl,"P",{});var sW=s(hd);OMo=r(sW,`Note:
Loading a model from its configuration file does `),jte=n(sW,"STRONG",{});var sJr=s(jte);XMo=r(sJr,"not"),sJr.forEach(t),VMo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=n(sW,"CODE",{});var lJr=s(Dte);zMo=r(lJr,"from_pretrained()"),lJr.forEach(t),WMo=r(sW,"to load the model weights."),sW.forEach(t),QMo=i(tl),qte=n(tl,"P",{});var iJr=s(qte);HMo=r(iJr,"Examples:"),iJr.forEach(t),UMo=i(tl),m(Ey.$$.fragment,tl),tl.forEach(t),JMo=i(rl),Xe=n(rl,"DIV",{class:!0});var zt=s(Xe);m(yy.$$.fragment,zt),YMo=i(zt),Gte=n(zt,"P",{});var dJr=s(Gte);KMo=r(dJr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dJr.forEach(t),ZMo=i(zt),Ua=n(zt,"P",{});var hE=s(Ua);e4o=r(hE,"The model class to instantiate is selected based on the "),Ote=n(hE,"CODE",{});var cJr=s(Ote);o4o=r(cJr,"model_type"),cJr.forEach(t),r4o=r(hE,` property of the config object (either
passed as an argument or loaded from `),Xte=n(hE,"CODE",{});var fJr=s(Xte);t4o=r(fJr,"pretrained_model_name_or_path"),fJr.forEach(t),a4o=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=n(hE,"CODE",{});var mJr=s(Vte);n4o=r(mJr,"pretrained_model_name_or_path"),mJr.forEach(t),s4o=r(hE,":"),hE.forEach(t),l4o=i(zt),A=n(zt,"UL",{});var L=s(A);Y5=n(L,"LI",{});var Sye=s(Y5);zte=n(Sye,"STRONG",{});var gJr=s(zte);i4o=r(gJr,"albert"),gJr.forEach(t),d4o=r(Sye," \u2014 "),II=n(Sye,"A",{href:!0});var hJr=s(II);c4o=r(hJr,"AlbertForSequenceClassification"),hJr.forEach(t),f4o=r(Sye," (ALBERT model)"),Sye.forEach(t),m4o=i(L),K5=n(L,"LI",{});var Pye=s(K5);Wte=n(Pye,"STRONG",{});var pJr=s(Wte);g4o=r(pJr,"bart"),pJr.forEach(t),h4o=r(Pye," \u2014 "),NI=n(Pye,"A",{href:!0});var _Jr=s(NI);p4o=r(_Jr,"BartForSequenceClassification"),_Jr.forEach(t),_4o=r(Pye," (BART model)"),Pye.forEach(t),u4o=i(L),Z5=n(L,"LI",{});var $ye=s(Z5);Qte=n($ye,"STRONG",{});var uJr=s(Qte);b4o=r(uJr,"bert"),uJr.forEach(t),v4o=r($ye," \u2014 "),jI=n($ye,"A",{href:!0});var bJr=s(jI);T4o=r(bJr,"BertForSequenceClassification"),bJr.forEach(t),F4o=r($ye," (BERT model)"),$ye.forEach(t),C4o=i(L),e2=n(L,"LI",{});var Iye=s(e2);Hte=n(Iye,"STRONG",{});var vJr=s(Hte);M4o=r(vJr,"big_bird"),vJr.forEach(t),E4o=r(Iye," \u2014 "),DI=n(Iye,"A",{href:!0});var TJr=s(DI);y4o=r(TJr,"BigBirdForSequenceClassification"),TJr.forEach(t),w4o=r(Iye," (BigBird model)"),Iye.forEach(t),A4o=i(L),o2=n(L,"LI",{});var Nye=s(o2);Ute=n(Nye,"STRONG",{});var FJr=s(Ute);L4o=r(FJr,"bigbird_pegasus"),FJr.forEach(t),B4o=r(Nye," \u2014 "),qI=n(Nye,"A",{href:!0});var CJr=s(qI);x4o=r(CJr,"BigBirdPegasusForSequenceClassification"),CJr.forEach(t),k4o=r(Nye," (BigBirdPegasus model)"),Nye.forEach(t),R4o=i(L),r2=n(L,"LI",{});var jye=s(r2);Jte=n(jye,"STRONG",{});var MJr=s(Jte);S4o=r(MJr,"camembert"),MJr.forEach(t),P4o=r(jye," \u2014 "),GI=n(jye,"A",{href:!0});var EJr=s(GI);$4o=r(EJr,"CamembertForSequenceClassification"),EJr.forEach(t),I4o=r(jye," (CamemBERT model)"),jye.forEach(t),N4o=i(L),t2=n(L,"LI",{});var Dye=s(t2);Yte=n(Dye,"STRONG",{});var yJr=s(Yte);j4o=r(yJr,"canine"),yJr.forEach(t),D4o=r(Dye," \u2014 "),OI=n(Dye,"A",{href:!0});var wJr=s(OI);q4o=r(wJr,"CanineForSequenceClassification"),wJr.forEach(t),G4o=r(Dye," (Canine model)"),Dye.forEach(t),O4o=i(L),a2=n(L,"LI",{});var qye=s(a2);Kte=n(qye,"STRONG",{});var AJr=s(Kte);X4o=r(AJr,"convbert"),AJr.forEach(t),V4o=r(qye," \u2014 "),XI=n(qye,"A",{href:!0});var LJr=s(XI);z4o=r(LJr,"ConvBertForSequenceClassification"),LJr.forEach(t),W4o=r(qye," (ConvBERT model)"),qye.forEach(t),Q4o=i(L),n2=n(L,"LI",{});var Gye=s(n2);Zte=n(Gye,"STRONG",{});var BJr=s(Zte);H4o=r(BJr,"ctrl"),BJr.forEach(t),U4o=r(Gye," \u2014 "),VI=n(Gye,"A",{href:!0});var xJr=s(VI);J4o=r(xJr,"CTRLForSequenceClassification"),xJr.forEach(t),Y4o=r(Gye," (CTRL model)"),Gye.forEach(t),K4o=i(L),s2=n(L,"LI",{});var Oye=s(s2);eae=n(Oye,"STRONG",{});var kJr=s(eae);Z4o=r(kJr,"data2vec-text"),kJr.forEach(t),eEo=r(Oye," \u2014 "),zI=n(Oye,"A",{href:!0});var RJr=s(zI);oEo=r(RJr,"Data2VecTextForSequenceClassification"),RJr.forEach(t),rEo=r(Oye," (Data2VecText model)"),Oye.forEach(t),tEo=i(L),l2=n(L,"LI",{});var Xye=s(l2);oae=n(Xye,"STRONG",{});var SJr=s(oae);aEo=r(SJr,"deberta"),SJr.forEach(t),nEo=r(Xye," \u2014 "),WI=n(Xye,"A",{href:!0});var PJr=s(WI);sEo=r(PJr,"DebertaForSequenceClassification"),PJr.forEach(t),lEo=r(Xye," (DeBERTa model)"),Xye.forEach(t),iEo=i(L),i2=n(L,"LI",{});var Vye=s(i2);rae=n(Vye,"STRONG",{});var $Jr=s(rae);dEo=r($Jr,"deberta-v2"),$Jr.forEach(t),cEo=r(Vye," \u2014 "),QI=n(Vye,"A",{href:!0});var IJr=s(QI);fEo=r(IJr,"DebertaV2ForSequenceClassification"),IJr.forEach(t),mEo=r(Vye," (DeBERTa-v2 model)"),Vye.forEach(t),gEo=i(L),d2=n(L,"LI",{});var zye=s(d2);tae=n(zye,"STRONG",{});var NJr=s(tae);hEo=r(NJr,"distilbert"),NJr.forEach(t),pEo=r(zye," \u2014 "),HI=n(zye,"A",{href:!0});var jJr=s(HI);_Eo=r(jJr,"DistilBertForSequenceClassification"),jJr.forEach(t),uEo=r(zye," (DistilBERT model)"),zye.forEach(t),bEo=i(L),c2=n(L,"LI",{});var Wye=s(c2);aae=n(Wye,"STRONG",{});var DJr=s(aae);vEo=r(DJr,"electra"),DJr.forEach(t),TEo=r(Wye," \u2014 "),UI=n(Wye,"A",{href:!0});var qJr=s(UI);FEo=r(qJr,"ElectraForSequenceClassification"),qJr.forEach(t),CEo=r(Wye," (ELECTRA model)"),Wye.forEach(t),MEo=i(L),f2=n(L,"LI",{});var Qye=s(f2);nae=n(Qye,"STRONG",{});var GJr=s(nae);EEo=r(GJr,"flaubert"),GJr.forEach(t),yEo=r(Qye," \u2014 "),JI=n(Qye,"A",{href:!0});var OJr=s(JI);wEo=r(OJr,"FlaubertForSequenceClassification"),OJr.forEach(t),AEo=r(Qye," (FlauBERT model)"),Qye.forEach(t),LEo=i(L),m2=n(L,"LI",{});var Hye=s(m2);sae=n(Hye,"STRONG",{});var XJr=s(sae);BEo=r(XJr,"fnet"),XJr.forEach(t),xEo=r(Hye," \u2014 "),YI=n(Hye,"A",{href:!0});var VJr=s(YI);kEo=r(VJr,"FNetForSequenceClassification"),VJr.forEach(t),REo=r(Hye," (FNet model)"),Hye.forEach(t),SEo=i(L),g2=n(L,"LI",{});var Uye=s(g2);lae=n(Uye,"STRONG",{});var zJr=s(lae);PEo=r(zJr,"funnel"),zJr.forEach(t),$Eo=r(Uye," \u2014 "),KI=n(Uye,"A",{href:!0});var WJr=s(KI);IEo=r(WJr,"FunnelForSequenceClassification"),WJr.forEach(t),NEo=r(Uye," (Funnel Transformer model)"),Uye.forEach(t),jEo=i(L),h2=n(L,"LI",{});var Jye=s(h2);iae=n(Jye,"STRONG",{});var QJr=s(iae);DEo=r(QJr,"gpt2"),QJr.forEach(t),qEo=r(Jye," \u2014 "),ZI=n(Jye,"A",{href:!0});var HJr=s(ZI);GEo=r(HJr,"GPT2ForSequenceClassification"),HJr.forEach(t),OEo=r(Jye," (OpenAI GPT-2 model)"),Jye.forEach(t),XEo=i(L),p2=n(L,"LI",{});var Yye=s(p2);dae=n(Yye,"STRONG",{});var UJr=s(dae);VEo=r(UJr,"gpt_neo"),UJr.forEach(t),zEo=r(Yye," \u2014 "),eN=n(Yye,"A",{href:!0});var JJr=s(eN);WEo=r(JJr,"GPTNeoForSequenceClassification"),JJr.forEach(t),QEo=r(Yye," (GPT Neo model)"),Yye.forEach(t),HEo=i(L),_2=n(L,"LI",{});var Kye=s(_2);cae=n(Kye,"STRONG",{});var YJr=s(cae);UEo=r(YJr,"gptj"),YJr.forEach(t),JEo=r(Kye," \u2014 "),oN=n(Kye,"A",{href:!0});var KJr=s(oN);YEo=r(KJr,"GPTJForSequenceClassification"),KJr.forEach(t),KEo=r(Kye," (GPT-J model)"),Kye.forEach(t),ZEo=i(L),u2=n(L,"LI",{});var Zye=s(u2);fae=n(Zye,"STRONG",{});var ZJr=s(fae);e3o=r(ZJr,"ibert"),ZJr.forEach(t),o3o=r(Zye," \u2014 "),rN=n(Zye,"A",{href:!0});var eYr=s(rN);r3o=r(eYr,"IBertForSequenceClassification"),eYr.forEach(t),t3o=r(Zye," (I-BERT model)"),Zye.forEach(t),a3o=i(L),b2=n(L,"LI",{});var ewe=s(b2);mae=n(ewe,"STRONG",{});var oYr=s(mae);n3o=r(oYr,"layoutlm"),oYr.forEach(t),s3o=r(ewe," \u2014 "),tN=n(ewe,"A",{href:!0});var rYr=s(tN);l3o=r(rYr,"LayoutLMForSequenceClassification"),rYr.forEach(t),i3o=r(ewe," (LayoutLM model)"),ewe.forEach(t),d3o=i(L),v2=n(L,"LI",{});var owe=s(v2);gae=n(owe,"STRONG",{});var tYr=s(gae);c3o=r(tYr,"layoutlmv2"),tYr.forEach(t),f3o=r(owe," \u2014 "),aN=n(owe,"A",{href:!0});var aYr=s(aN);m3o=r(aYr,"LayoutLMv2ForSequenceClassification"),aYr.forEach(t),g3o=r(owe," (LayoutLMv2 model)"),owe.forEach(t),h3o=i(L),T2=n(L,"LI",{});var rwe=s(T2);hae=n(rwe,"STRONG",{});var nYr=s(hae);p3o=r(nYr,"led"),nYr.forEach(t),_3o=r(rwe," \u2014 "),nN=n(rwe,"A",{href:!0});var sYr=s(nN);u3o=r(sYr,"LEDForSequenceClassification"),sYr.forEach(t),b3o=r(rwe," (LED model)"),rwe.forEach(t),v3o=i(L),F2=n(L,"LI",{});var twe=s(F2);pae=n(twe,"STRONG",{});var lYr=s(pae);T3o=r(lYr,"longformer"),lYr.forEach(t),F3o=r(twe," \u2014 "),sN=n(twe,"A",{href:!0});var iYr=s(sN);C3o=r(iYr,"LongformerForSequenceClassification"),iYr.forEach(t),M3o=r(twe," (Longformer model)"),twe.forEach(t),E3o=i(L),C2=n(L,"LI",{});var awe=s(C2);_ae=n(awe,"STRONG",{});var dYr=s(_ae);y3o=r(dYr,"mbart"),dYr.forEach(t),w3o=r(awe," \u2014 "),lN=n(awe,"A",{href:!0});var cYr=s(lN);A3o=r(cYr,"MBartForSequenceClassification"),cYr.forEach(t),L3o=r(awe," (mBART model)"),awe.forEach(t),B3o=i(L),M2=n(L,"LI",{});var nwe=s(M2);uae=n(nwe,"STRONG",{});var fYr=s(uae);x3o=r(fYr,"megatron-bert"),fYr.forEach(t),k3o=r(nwe," \u2014 "),iN=n(nwe,"A",{href:!0});var mYr=s(iN);R3o=r(mYr,"MegatronBertForSequenceClassification"),mYr.forEach(t),S3o=r(nwe," (MegatronBert model)"),nwe.forEach(t),P3o=i(L),E2=n(L,"LI",{});var swe=s(E2);bae=n(swe,"STRONG",{});var gYr=s(bae);$3o=r(gYr,"mobilebert"),gYr.forEach(t),I3o=r(swe," \u2014 "),dN=n(swe,"A",{href:!0});var hYr=s(dN);N3o=r(hYr,"MobileBertForSequenceClassification"),hYr.forEach(t),j3o=r(swe," (MobileBERT model)"),swe.forEach(t),D3o=i(L),y2=n(L,"LI",{});var lwe=s(y2);vae=n(lwe,"STRONG",{});var pYr=s(vae);q3o=r(pYr,"mpnet"),pYr.forEach(t),G3o=r(lwe," \u2014 "),cN=n(lwe,"A",{href:!0});var _Yr=s(cN);O3o=r(_Yr,"MPNetForSequenceClassification"),_Yr.forEach(t),X3o=r(lwe," (MPNet model)"),lwe.forEach(t),V3o=i(L),w2=n(L,"LI",{});var iwe=s(w2);Tae=n(iwe,"STRONG",{});var uYr=s(Tae);z3o=r(uYr,"nystromformer"),uYr.forEach(t),W3o=r(iwe," \u2014 "),fN=n(iwe,"A",{href:!0});var bYr=s(fN);Q3o=r(bYr,"NystromformerForSequenceClassification"),bYr.forEach(t),H3o=r(iwe," (Nystromformer model)"),iwe.forEach(t),U3o=i(L),A2=n(L,"LI",{});var dwe=s(A2);Fae=n(dwe,"STRONG",{});var vYr=s(Fae);J3o=r(vYr,"openai-gpt"),vYr.forEach(t),Y3o=r(dwe," \u2014 "),mN=n(dwe,"A",{href:!0});var TYr=s(mN);K3o=r(TYr,"OpenAIGPTForSequenceClassification"),TYr.forEach(t),Z3o=r(dwe," (OpenAI GPT model)"),dwe.forEach(t),eyo=i(L),L2=n(L,"LI",{});var cwe=s(L2);Cae=n(cwe,"STRONG",{});var FYr=s(Cae);oyo=r(FYr,"perceiver"),FYr.forEach(t),ryo=r(cwe," \u2014 "),gN=n(cwe,"A",{href:!0});var CYr=s(gN);tyo=r(CYr,"PerceiverForSequenceClassification"),CYr.forEach(t),ayo=r(cwe," (Perceiver model)"),cwe.forEach(t),nyo=i(L),B2=n(L,"LI",{});var fwe=s(B2);Mae=n(fwe,"STRONG",{});var MYr=s(Mae);syo=r(MYr,"plbart"),MYr.forEach(t),lyo=r(fwe," \u2014 "),hN=n(fwe,"A",{href:!0});var EYr=s(hN);iyo=r(EYr,"PLBartForSequenceClassification"),EYr.forEach(t),dyo=r(fwe," (PLBart model)"),fwe.forEach(t),cyo=i(L),x2=n(L,"LI",{});var mwe=s(x2);Eae=n(mwe,"STRONG",{});var yYr=s(Eae);fyo=r(yYr,"qdqbert"),yYr.forEach(t),myo=r(mwe," \u2014 "),pN=n(mwe,"A",{href:!0});var wYr=s(pN);gyo=r(wYr,"QDQBertForSequenceClassification"),wYr.forEach(t),hyo=r(mwe," (QDQBert model)"),mwe.forEach(t),pyo=i(L),k2=n(L,"LI",{});var gwe=s(k2);yae=n(gwe,"STRONG",{});var AYr=s(yae);_yo=r(AYr,"reformer"),AYr.forEach(t),uyo=r(gwe," \u2014 "),_N=n(gwe,"A",{href:!0});var LYr=s(_N);byo=r(LYr,"ReformerForSequenceClassification"),LYr.forEach(t),vyo=r(gwe," (Reformer model)"),gwe.forEach(t),Tyo=i(L),R2=n(L,"LI",{});var hwe=s(R2);wae=n(hwe,"STRONG",{});var BYr=s(wae);Fyo=r(BYr,"rembert"),BYr.forEach(t),Cyo=r(hwe," \u2014 "),uN=n(hwe,"A",{href:!0});var xYr=s(uN);Myo=r(xYr,"RemBertForSequenceClassification"),xYr.forEach(t),Eyo=r(hwe," (RemBERT model)"),hwe.forEach(t),yyo=i(L),S2=n(L,"LI",{});var pwe=s(S2);Aae=n(pwe,"STRONG",{});var kYr=s(Aae);wyo=r(kYr,"roberta"),kYr.forEach(t),Ayo=r(pwe," \u2014 "),bN=n(pwe,"A",{href:!0});var RYr=s(bN);Lyo=r(RYr,"RobertaForSequenceClassification"),RYr.forEach(t),Byo=r(pwe," (RoBERTa model)"),pwe.forEach(t),xyo=i(L),P2=n(L,"LI",{});var _we=s(P2);Lae=n(_we,"STRONG",{});var SYr=s(Lae);kyo=r(SYr,"roformer"),SYr.forEach(t),Ryo=r(_we," \u2014 "),vN=n(_we,"A",{href:!0});var PYr=s(vN);Syo=r(PYr,"RoFormerForSequenceClassification"),PYr.forEach(t),Pyo=r(_we," (RoFormer model)"),_we.forEach(t),$yo=i(L),$2=n(L,"LI",{});var uwe=s($2);Bae=n(uwe,"STRONG",{});var $Yr=s(Bae);Iyo=r($Yr,"squeezebert"),$Yr.forEach(t),Nyo=r(uwe," \u2014 "),TN=n(uwe,"A",{href:!0});var IYr=s(TN);jyo=r(IYr,"SqueezeBertForSequenceClassification"),IYr.forEach(t),Dyo=r(uwe," (SqueezeBERT model)"),uwe.forEach(t),qyo=i(L),I2=n(L,"LI",{});var bwe=s(I2);xae=n(bwe,"STRONG",{});var NYr=s(xae);Gyo=r(NYr,"tapas"),NYr.forEach(t),Oyo=r(bwe," \u2014 "),FN=n(bwe,"A",{href:!0});var jYr=s(FN);Xyo=r(jYr,"TapasForSequenceClassification"),jYr.forEach(t),Vyo=r(bwe," (TAPAS model)"),bwe.forEach(t),zyo=i(L),N2=n(L,"LI",{});var vwe=s(N2);kae=n(vwe,"STRONG",{});var DYr=s(kae);Wyo=r(DYr,"transfo-xl"),DYr.forEach(t),Qyo=r(vwe," \u2014 "),CN=n(vwe,"A",{href:!0});var qYr=s(CN);Hyo=r(qYr,"TransfoXLForSequenceClassification"),qYr.forEach(t),Uyo=r(vwe," (Transformer-XL model)"),vwe.forEach(t),Jyo=i(L),j2=n(L,"LI",{});var Twe=s(j2);Rae=n(Twe,"STRONG",{});var GYr=s(Rae);Yyo=r(GYr,"xlm"),GYr.forEach(t),Kyo=r(Twe," \u2014 "),MN=n(Twe,"A",{href:!0});var OYr=s(MN);Zyo=r(OYr,"XLMForSequenceClassification"),OYr.forEach(t),ewo=r(Twe," (XLM model)"),Twe.forEach(t),owo=i(L),D2=n(L,"LI",{});var Fwe=s(D2);Sae=n(Fwe,"STRONG",{});var XYr=s(Sae);rwo=r(XYr,"xlm-roberta"),XYr.forEach(t),two=r(Fwe," \u2014 "),EN=n(Fwe,"A",{href:!0});var VYr=s(EN);awo=r(VYr,"XLMRobertaForSequenceClassification"),VYr.forEach(t),nwo=r(Fwe," (XLM-RoBERTa model)"),Fwe.forEach(t),swo=i(L),q2=n(L,"LI",{});var Cwe=s(q2);Pae=n(Cwe,"STRONG",{});var zYr=s(Pae);lwo=r(zYr,"xlm-roberta-xl"),zYr.forEach(t),iwo=r(Cwe," \u2014 "),yN=n(Cwe,"A",{href:!0});var WYr=s(yN);dwo=r(WYr,"XLMRobertaXLForSequenceClassification"),WYr.forEach(t),cwo=r(Cwe," (XLM-RoBERTa-XL model)"),Cwe.forEach(t),fwo=i(L),G2=n(L,"LI",{});var Mwe=s(G2);$ae=n(Mwe,"STRONG",{});var QYr=s($ae);mwo=r(QYr,"xlnet"),QYr.forEach(t),gwo=r(Mwe," \u2014 "),wN=n(Mwe,"A",{href:!0});var HYr=s(wN);hwo=r(HYr,"XLNetForSequenceClassification"),HYr.forEach(t),pwo=r(Mwe," (XLNet model)"),Mwe.forEach(t),_wo=i(L),O2=n(L,"LI",{});var Ewe=s(O2);Iae=n(Ewe,"STRONG",{});var UYr=s(Iae);uwo=r(UYr,"yoso"),UYr.forEach(t),bwo=r(Ewe," \u2014 "),AN=n(Ewe,"A",{href:!0});var JYr=s(AN);vwo=r(JYr,"YosoForSequenceClassification"),JYr.forEach(t),Two=r(Ewe," (YOSO model)"),Ewe.forEach(t),L.forEach(t),Fwo=i(zt),X2=n(zt,"P",{});var ywe=s(X2);Cwo=r(ywe,"The model is set in evaluation mode by default using "),Nae=n(ywe,"CODE",{});var YYr=s(Nae);Mwo=r(YYr,"model.eval()"),YYr.forEach(t),Ewo=r(ywe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jae=n(ywe,"CODE",{});var KYr=s(jae);ywo=r(KYr,"model.train()"),KYr.forEach(t),ywe.forEach(t),wwo=i(zt),Dae=n(zt,"P",{});var ZYr=s(Dae);Awo=r(ZYr,"Examples:"),ZYr.forEach(t),Lwo=i(zt),m(wy.$$.fragment,zt),zt.forEach(t),rl.forEach(t),yke=i(c),pd=n(c,"H2",{class:!0});var PSe=s(pd);V2=n(PSe,"A",{id:!0,class:!0,href:!0});var eKr=s(V2);qae=n(eKr,"SPAN",{});var oKr=s(qae);m(Ay.$$.fragment,oKr),oKr.forEach(t),eKr.forEach(t),Bwo=i(PSe),Gae=n(PSe,"SPAN",{});var rKr=s(Gae);xwo=r(rKr,"AutoModelForMultipleChoice"),rKr.forEach(t),PSe.forEach(t),wke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Ly.$$.fragment,al),kwo=i(al),_d=n(al,"P",{});var lW=s(_d);Rwo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Oae=n(lW,"CODE",{});var tKr=s(Oae);Swo=r(tKr,"from_pretrained()"),tKr.forEach(t),Pwo=r(lW,"class method or the "),Xae=n(lW,"CODE",{});var aKr=s(Xae);$wo=r(aKr,"from_config()"),aKr.forEach(t),Iwo=r(lW,`class
method.`),lW.forEach(t),Nwo=i(al),By=n(al,"P",{});var $Se=s(By);jwo=r($Se,"This class cannot be instantiated directly using "),Vae=n($Se,"CODE",{});var nKr=s(Vae);Dwo=r(nKr,"__init__()"),nKr.forEach(t),qwo=r($Se," (throws an error)."),$Se.forEach(t),Gwo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(xy.$$.fragment,nl),Owo=i(nl),zae=n(nl,"P",{});var sKr=s(zae);Xwo=r(sKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sKr.forEach(t),Vwo=i(nl),ud=n(nl,"P",{});var iW=s(ud);zwo=r(iW,`Note:
Loading a model from its configuration file does `),Wae=n(iW,"STRONG",{});var lKr=s(Wae);Wwo=r(lKr,"not"),lKr.forEach(t),Qwo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=n(iW,"CODE",{});var iKr=s(Qae);Hwo=r(iKr,"from_pretrained()"),iKr.forEach(t),Uwo=r(iW,"to load the model weights."),iW.forEach(t),Jwo=i(nl),Hae=n(nl,"P",{});var dKr=s(Hae);Ywo=r(dKr,"Examples:"),dKr.forEach(t),Kwo=i(nl),m(ky.$$.fragment,nl),nl.forEach(t),Zwo=i(al),Ve=n(al,"DIV",{class:!0});var Wt=s(Ve);m(Ry.$$.fragment,Wt),eAo=i(Wt),Uae=n(Wt,"P",{});var cKr=s(Uae);oAo=r(cKr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cKr.forEach(t),rAo=i(Wt),Ja=n(Wt,"P",{});var pE=s(Ja);tAo=r(pE,"The model class to instantiate is selected based on the "),Jae=n(pE,"CODE",{});var fKr=s(Jae);aAo=r(fKr,"model_type"),fKr.forEach(t),nAo=r(pE,` property of the config object (either
passed as an argument or loaded from `),Yae=n(pE,"CODE",{});var mKr=s(Yae);sAo=r(mKr,"pretrained_model_name_or_path"),mKr.forEach(t),lAo=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kae=n(pE,"CODE",{});var gKr=s(Kae);iAo=r(gKr,"pretrained_model_name_or_path"),gKr.forEach(t),dAo=r(pE,":"),pE.forEach(t),cAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);z2=n(O,"LI",{});var wwe=s(z2);Zae=n(wwe,"STRONG",{});var hKr=s(Zae);fAo=r(hKr,"albert"),hKr.forEach(t),mAo=r(wwe," \u2014 "),LN=n(wwe,"A",{href:!0});var pKr=s(LN);gAo=r(pKr,"AlbertForMultipleChoice"),pKr.forEach(t),hAo=r(wwe," (ALBERT model)"),wwe.forEach(t),pAo=i(O),W2=n(O,"LI",{});var Awe=s(W2);ene=n(Awe,"STRONG",{});var _Kr=s(ene);_Ao=r(_Kr,"bert"),_Kr.forEach(t),uAo=r(Awe," \u2014 "),BN=n(Awe,"A",{href:!0});var uKr=s(BN);bAo=r(uKr,"BertForMultipleChoice"),uKr.forEach(t),vAo=r(Awe," (BERT model)"),Awe.forEach(t),TAo=i(O),Q2=n(O,"LI",{});var Lwe=s(Q2);one=n(Lwe,"STRONG",{});var bKr=s(one);FAo=r(bKr,"big_bird"),bKr.forEach(t),CAo=r(Lwe," \u2014 "),xN=n(Lwe,"A",{href:!0});var vKr=s(xN);MAo=r(vKr,"BigBirdForMultipleChoice"),vKr.forEach(t),EAo=r(Lwe," (BigBird model)"),Lwe.forEach(t),yAo=i(O),H2=n(O,"LI",{});var Bwe=s(H2);rne=n(Bwe,"STRONG",{});var TKr=s(rne);wAo=r(TKr,"camembert"),TKr.forEach(t),AAo=r(Bwe," \u2014 "),kN=n(Bwe,"A",{href:!0});var FKr=s(kN);LAo=r(FKr,"CamembertForMultipleChoice"),FKr.forEach(t),BAo=r(Bwe," (CamemBERT model)"),Bwe.forEach(t),xAo=i(O),U2=n(O,"LI",{});var xwe=s(U2);tne=n(xwe,"STRONG",{});var CKr=s(tne);kAo=r(CKr,"canine"),CKr.forEach(t),RAo=r(xwe," \u2014 "),RN=n(xwe,"A",{href:!0});var MKr=s(RN);SAo=r(MKr,"CanineForMultipleChoice"),MKr.forEach(t),PAo=r(xwe," (Canine model)"),xwe.forEach(t),$Ao=i(O),J2=n(O,"LI",{});var kwe=s(J2);ane=n(kwe,"STRONG",{});var EKr=s(ane);IAo=r(EKr,"convbert"),EKr.forEach(t),NAo=r(kwe," \u2014 "),SN=n(kwe,"A",{href:!0});var yKr=s(SN);jAo=r(yKr,"ConvBertForMultipleChoice"),yKr.forEach(t),DAo=r(kwe," (ConvBERT model)"),kwe.forEach(t),qAo=i(O),Y2=n(O,"LI",{});var Rwe=s(Y2);nne=n(Rwe,"STRONG",{});var wKr=s(nne);GAo=r(wKr,"data2vec-text"),wKr.forEach(t),OAo=r(Rwe," \u2014 "),PN=n(Rwe,"A",{href:!0});var AKr=s(PN);XAo=r(AKr,"Data2VecTextForMultipleChoice"),AKr.forEach(t),VAo=r(Rwe," (Data2VecText model)"),Rwe.forEach(t),zAo=i(O),K2=n(O,"LI",{});var Swe=s(K2);sne=n(Swe,"STRONG",{});var LKr=s(sne);WAo=r(LKr,"distilbert"),LKr.forEach(t),QAo=r(Swe," \u2014 "),$N=n(Swe,"A",{href:!0});var BKr=s($N);HAo=r(BKr,"DistilBertForMultipleChoice"),BKr.forEach(t),UAo=r(Swe," (DistilBERT model)"),Swe.forEach(t),JAo=i(O),Z2=n(O,"LI",{});var Pwe=s(Z2);lne=n(Pwe,"STRONG",{});var xKr=s(lne);YAo=r(xKr,"electra"),xKr.forEach(t),KAo=r(Pwe," \u2014 "),IN=n(Pwe,"A",{href:!0});var kKr=s(IN);ZAo=r(kKr,"ElectraForMultipleChoice"),kKr.forEach(t),e0o=r(Pwe," (ELECTRA model)"),Pwe.forEach(t),o0o=i(O),e1=n(O,"LI",{});var $we=s(e1);ine=n($we,"STRONG",{});var RKr=s(ine);r0o=r(RKr,"flaubert"),RKr.forEach(t),t0o=r($we," \u2014 "),NN=n($we,"A",{href:!0});var SKr=s(NN);a0o=r(SKr,"FlaubertForMultipleChoice"),SKr.forEach(t),n0o=r($we," (FlauBERT model)"),$we.forEach(t),s0o=i(O),o1=n(O,"LI",{});var Iwe=s(o1);dne=n(Iwe,"STRONG",{});var PKr=s(dne);l0o=r(PKr,"fnet"),PKr.forEach(t),i0o=r(Iwe," \u2014 "),jN=n(Iwe,"A",{href:!0});var $Kr=s(jN);d0o=r($Kr,"FNetForMultipleChoice"),$Kr.forEach(t),c0o=r(Iwe," (FNet model)"),Iwe.forEach(t),f0o=i(O),r1=n(O,"LI",{});var Nwe=s(r1);cne=n(Nwe,"STRONG",{});var IKr=s(cne);m0o=r(IKr,"funnel"),IKr.forEach(t),g0o=r(Nwe," \u2014 "),DN=n(Nwe,"A",{href:!0});var NKr=s(DN);h0o=r(NKr,"FunnelForMultipleChoice"),NKr.forEach(t),p0o=r(Nwe," (Funnel Transformer model)"),Nwe.forEach(t),_0o=i(O),t1=n(O,"LI",{});var jwe=s(t1);fne=n(jwe,"STRONG",{});var jKr=s(fne);u0o=r(jKr,"ibert"),jKr.forEach(t),b0o=r(jwe," \u2014 "),qN=n(jwe,"A",{href:!0});var DKr=s(qN);v0o=r(DKr,"IBertForMultipleChoice"),DKr.forEach(t),T0o=r(jwe," (I-BERT model)"),jwe.forEach(t),F0o=i(O),a1=n(O,"LI",{});var Dwe=s(a1);mne=n(Dwe,"STRONG",{});var qKr=s(mne);C0o=r(qKr,"longformer"),qKr.forEach(t),M0o=r(Dwe," \u2014 "),GN=n(Dwe,"A",{href:!0});var GKr=s(GN);E0o=r(GKr,"LongformerForMultipleChoice"),GKr.forEach(t),y0o=r(Dwe," (Longformer model)"),Dwe.forEach(t),w0o=i(O),n1=n(O,"LI",{});var qwe=s(n1);gne=n(qwe,"STRONG",{});var OKr=s(gne);A0o=r(OKr,"megatron-bert"),OKr.forEach(t),L0o=r(qwe," \u2014 "),ON=n(qwe,"A",{href:!0});var XKr=s(ON);B0o=r(XKr,"MegatronBertForMultipleChoice"),XKr.forEach(t),x0o=r(qwe," (MegatronBert model)"),qwe.forEach(t),k0o=i(O),s1=n(O,"LI",{});var Gwe=s(s1);hne=n(Gwe,"STRONG",{});var VKr=s(hne);R0o=r(VKr,"mobilebert"),VKr.forEach(t),S0o=r(Gwe," \u2014 "),XN=n(Gwe,"A",{href:!0});var zKr=s(XN);P0o=r(zKr,"MobileBertForMultipleChoice"),zKr.forEach(t),$0o=r(Gwe," (MobileBERT model)"),Gwe.forEach(t),I0o=i(O),l1=n(O,"LI",{});var Owe=s(l1);pne=n(Owe,"STRONG",{});var WKr=s(pne);N0o=r(WKr,"mpnet"),WKr.forEach(t),j0o=r(Owe," \u2014 "),VN=n(Owe,"A",{href:!0});var QKr=s(VN);D0o=r(QKr,"MPNetForMultipleChoice"),QKr.forEach(t),q0o=r(Owe," (MPNet model)"),Owe.forEach(t),G0o=i(O),i1=n(O,"LI",{});var Xwe=s(i1);_ne=n(Xwe,"STRONG",{});var HKr=s(_ne);O0o=r(HKr,"nystromformer"),HKr.forEach(t),X0o=r(Xwe," \u2014 "),zN=n(Xwe,"A",{href:!0});var UKr=s(zN);V0o=r(UKr,"NystromformerForMultipleChoice"),UKr.forEach(t),z0o=r(Xwe," (Nystromformer model)"),Xwe.forEach(t),W0o=i(O),d1=n(O,"LI",{});var Vwe=s(d1);une=n(Vwe,"STRONG",{});var JKr=s(une);Q0o=r(JKr,"qdqbert"),JKr.forEach(t),H0o=r(Vwe," \u2014 "),WN=n(Vwe,"A",{href:!0});var YKr=s(WN);U0o=r(YKr,"QDQBertForMultipleChoice"),YKr.forEach(t),J0o=r(Vwe," (QDQBert model)"),Vwe.forEach(t),Y0o=i(O),c1=n(O,"LI",{});var zwe=s(c1);bne=n(zwe,"STRONG",{});var KKr=s(bne);K0o=r(KKr,"rembert"),KKr.forEach(t),Z0o=r(zwe," \u2014 "),QN=n(zwe,"A",{href:!0});var ZKr=s(QN);eLo=r(ZKr,"RemBertForMultipleChoice"),ZKr.forEach(t),oLo=r(zwe," (RemBERT model)"),zwe.forEach(t),rLo=i(O),f1=n(O,"LI",{});var Wwe=s(f1);vne=n(Wwe,"STRONG",{});var eZr=s(vne);tLo=r(eZr,"roberta"),eZr.forEach(t),aLo=r(Wwe," \u2014 "),HN=n(Wwe,"A",{href:!0});var oZr=s(HN);nLo=r(oZr,"RobertaForMultipleChoice"),oZr.forEach(t),sLo=r(Wwe," (RoBERTa model)"),Wwe.forEach(t),lLo=i(O),m1=n(O,"LI",{});var Qwe=s(m1);Tne=n(Qwe,"STRONG",{});var rZr=s(Tne);iLo=r(rZr,"roformer"),rZr.forEach(t),dLo=r(Qwe," \u2014 "),UN=n(Qwe,"A",{href:!0});var tZr=s(UN);cLo=r(tZr,"RoFormerForMultipleChoice"),tZr.forEach(t),fLo=r(Qwe," (RoFormer model)"),Qwe.forEach(t),mLo=i(O),g1=n(O,"LI",{});var Hwe=s(g1);Fne=n(Hwe,"STRONG",{});var aZr=s(Fne);gLo=r(aZr,"squeezebert"),aZr.forEach(t),hLo=r(Hwe," \u2014 "),JN=n(Hwe,"A",{href:!0});var nZr=s(JN);pLo=r(nZr,"SqueezeBertForMultipleChoice"),nZr.forEach(t),_Lo=r(Hwe," (SqueezeBERT model)"),Hwe.forEach(t),uLo=i(O),h1=n(O,"LI",{});var Uwe=s(h1);Cne=n(Uwe,"STRONG",{});var sZr=s(Cne);bLo=r(sZr,"xlm"),sZr.forEach(t),vLo=r(Uwe," \u2014 "),YN=n(Uwe,"A",{href:!0});var lZr=s(YN);TLo=r(lZr,"XLMForMultipleChoice"),lZr.forEach(t),FLo=r(Uwe," (XLM model)"),Uwe.forEach(t),CLo=i(O),p1=n(O,"LI",{});var Jwe=s(p1);Mne=n(Jwe,"STRONG",{});var iZr=s(Mne);MLo=r(iZr,"xlm-roberta"),iZr.forEach(t),ELo=r(Jwe," \u2014 "),KN=n(Jwe,"A",{href:!0});var dZr=s(KN);yLo=r(dZr,"XLMRobertaForMultipleChoice"),dZr.forEach(t),wLo=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),ALo=i(O),_1=n(O,"LI",{});var Ywe=s(_1);Ene=n(Ywe,"STRONG",{});var cZr=s(Ene);LLo=r(cZr,"xlm-roberta-xl"),cZr.forEach(t),BLo=r(Ywe," \u2014 "),ZN=n(Ywe,"A",{href:!0});var fZr=s(ZN);xLo=r(fZr,"XLMRobertaXLForMultipleChoice"),fZr.forEach(t),kLo=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),RLo=i(O),u1=n(O,"LI",{});var Kwe=s(u1);yne=n(Kwe,"STRONG",{});var mZr=s(yne);SLo=r(mZr,"xlnet"),mZr.forEach(t),PLo=r(Kwe," \u2014 "),ej=n(Kwe,"A",{href:!0});var gZr=s(ej);$Lo=r(gZr,"XLNetForMultipleChoice"),gZr.forEach(t),ILo=r(Kwe," (XLNet model)"),Kwe.forEach(t),NLo=i(O),b1=n(O,"LI",{});var Zwe=s(b1);wne=n(Zwe,"STRONG",{});var hZr=s(wne);jLo=r(hZr,"yoso"),hZr.forEach(t),DLo=r(Zwe," \u2014 "),oj=n(Zwe,"A",{href:!0});var pZr=s(oj);qLo=r(pZr,"YosoForMultipleChoice"),pZr.forEach(t),GLo=r(Zwe," (YOSO model)"),Zwe.forEach(t),O.forEach(t),OLo=i(Wt),v1=n(Wt,"P",{});var eAe=s(v1);XLo=r(eAe,"The model is set in evaluation mode by default using "),Ane=n(eAe,"CODE",{});var _Zr=s(Ane);VLo=r(_Zr,"model.eval()"),_Zr.forEach(t),zLo=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lne=n(eAe,"CODE",{});var uZr=s(Lne);WLo=r(uZr,"model.train()"),uZr.forEach(t),eAe.forEach(t),QLo=i(Wt),Bne=n(Wt,"P",{});var bZr=s(Bne);HLo=r(bZr,"Examples:"),bZr.forEach(t),ULo=i(Wt),m(Sy.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Ake=i(c),bd=n(c,"H2",{class:!0});var ISe=s(bd);T1=n(ISe,"A",{id:!0,class:!0,href:!0});var vZr=s(T1);xne=n(vZr,"SPAN",{});var TZr=s(xne);m(Py.$$.fragment,TZr),TZr.forEach(t),vZr.forEach(t),JLo=i(ISe),kne=n(ISe,"SPAN",{});var FZr=s(kne);YLo=r(FZr,"AutoModelForNextSentencePrediction"),FZr.forEach(t),ISe.forEach(t),Lke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m($y.$$.fragment,sl),KLo=i(sl),vd=n(sl,"P",{});var dW=s(vd);ZLo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Rne=n(dW,"CODE",{});var CZr=s(Rne);e8o=r(CZr,"from_pretrained()"),CZr.forEach(t),o8o=r(dW,"class method or the "),Sne=n(dW,"CODE",{});var MZr=s(Sne);r8o=r(MZr,"from_config()"),MZr.forEach(t),t8o=r(dW,`class
method.`),dW.forEach(t),a8o=i(sl),Iy=n(sl,"P",{});var NSe=s(Iy);n8o=r(NSe,"This class cannot be instantiated directly using "),Pne=n(NSe,"CODE",{});var EZr=s(Pne);s8o=r(EZr,"__init__()"),EZr.forEach(t),l8o=r(NSe," (throws an error)."),NSe.forEach(t),i8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Ny.$$.fragment,ll),d8o=i(ll),$ne=n(ll,"P",{});var yZr=s($ne);c8o=r(yZr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yZr.forEach(t),f8o=i(ll),Td=n(ll,"P",{});var cW=s(Td);m8o=r(cW,`Note:
Loading a model from its configuration file does `),Ine=n(cW,"STRONG",{});var wZr=s(Ine);g8o=r(wZr,"not"),wZr.forEach(t),h8o=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nne=n(cW,"CODE",{});var AZr=s(Nne);p8o=r(AZr,"from_pretrained()"),AZr.forEach(t),_8o=r(cW,"to load the model weights."),cW.forEach(t),u8o=i(ll),jne=n(ll,"P",{});var LZr=s(jne);b8o=r(LZr,"Examples:"),LZr.forEach(t),v8o=i(ll),m(jy.$$.fragment,ll),ll.forEach(t),T8o=i(sl),ze=n(sl,"DIV",{class:!0});var Qt=s(ze);m(Dy.$$.fragment,Qt),F8o=i(Qt),Dne=n(Qt,"P",{});var BZr=s(Dne);C8o=r(BZr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BZr.forEach(t),M8o=i(Qt),Ya=n(Qt,"P",{});var _E=s(Ya);E8o=r(_E,"The model class to instantiate is selected based on the "),qne=n(_E,"CODE",{});var xZr=s(qne);y8o=r(xZr,"model_type"),xZr.forEach(t),w8o=r(_E,` property of the config object (either
passed as an argument or loaded from `),Gne=n(_E,"CODE",{});var kZr=s(Gne);A8o=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),L8o=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),One=n(_E,"CODE",{});var RZr=s(One);B8o=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),x8o=r(_E,":"),_E.forEach(t),k8o=i(Qt),da=n(Qt,"UL",{});var il=s(da);F1=n(il,"LI",{});var oAe=s(F1);Xne=n(oAe,"STRONG",{});var SZr=s(Xne);R8o=r(SZr,"bert"),SZr.forEach(t),S8o=r(oAe," \u2014 "),rj=n(oAe,"A",{href:!0});var PZr=s(rj);P8o=r(PZr,"BertForNextSentencePrediction"),PZr.forEach(t),$8o=r(oAe," (BERT model)"),oAe.forEach(t),I8o=i(il),C1=n(il,"LI",{});var rAe=s(C1);Vne=n(rAe,"STRONG",{});var $Zr=s(Vne);N8o=r($Zr,"fnet"),$Zr.forEach(t),j8o=r(rAe," \u2014 "),tj=n(rAe,"A",{href:!0});var IZr=s(tj);D8o=r(IZr,"FNetForNextSentencePrediction"),IZr.forEach(t),q8o=r(rAe," (FNet model)"),rAe.forEach(t),G8o=i(il),M1=n(il,"LI",{});var tAe=s(M1);zne=n(tAe,"STRONG",{});var NZr=s(zne);O8o=r(NZr,"megatron-bert"),NZr.forEach(t),X8o=r(tAe," \u2014 "),aj=n(tAe,"A",{href:!0});var jZr=s(aj);V8o=r(jZr,"MegatronBertForNextSentencePrediction"),jZr.forEach(t),z8o=r(tAe," (MegatronBert model)"),tAe.forEach(t),W8o=i(il),E1=n(il,"LI",{});var aAe=s(E1);Wne=n(aAe,"STRONG",{});var DZr=s(Wne);Q8o=r(DZr,"mobilebert"),DZr.forEach(t),H8o=r(aAe," \u2014 "),nj=n(aAe,"A",{href:!0});var qZr=s(nj);U8o=r(qZr,"MobileBertForNextSentencePrediction"),qZr.forEach(t),J8o=r(aAe," (MobileBERT model)"),aAe.forEach(t),Y8o=i(il),y1=n(il,"LI",{});var nAe=s(y1);Qne=n(nAe,"STRONG",{});var GZr=s(Qne);K8o=r(GZr,"qdqbert"),GZr.forEach(t),Z8o=r(nAe," \u2014 "),sj=n(nAe,"A",{href:!0});var OZr=s(sj);e7o=r(OZr,"QDQBertForNextSentencePrediction"),OZr.forEach(t),o7o=r(nAe," (QDQBert model)"),nAe.forEach(t),il.forEach(t),r7o=i(Qt),w1=n(Qt,"P",{});var sAe=s(w1);t7o=r(sAe,"The model is set in evaluation mode by default using "),Hne=n(sAe,"CODE",{});var XZr=s(Hne);a7o=r(XZr,"model.eval()"),XZr.forEach(t),n7o=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=n(sAe,"CODE",{});var VZr=s(Une);s7o=r(VZr,"model.train()"),VZr.forEach(t),sAe.forEach(t),l7o=i(Qt),Jne=n(Qt,"P",{});var zZr=s(Jne);i7o=r(zZr,"Examples:"),zZr.forEach(t),d7o=i(Qt),m(qy.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Bke=i(c),Fd=n(c,"H2",{class:!0});var jSe=s(Fd);A1=n(jSe,"A",{id:!0,class:!0,href:!0});var WZr=s(A1);Yne=n(WZr,"SPAN",{});var QZr=s(Yne);m(Gy.$$.fragment,QZr),QZr.forEach(t),WZr.forEach(t),c7o=i(jSe),Kne=n(jSe,"SPAN",{});var HZr=s(Kne);f7o=r(HZr,"AutoModelForTokenClassification"),HZr.forEach(t),jSe.forEach(t),xke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Oy.$$.fragment,dl),m7o=i(dl),Cd=n(dl,"P",{});var fW=s(Cd);g7o=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zne=n(fW,"CODE",{});var UZr=s(Zne);h7o=r(UZr,"from_pretrained()"),UZr.forEach(t),p7o=r(fW,"class method or the "),ese=n(fW,"CODE",{});var JZr=s(ese);_7o=r(JZr,"from_config()"),JZr.forEach(t),u7o=r(fW,`class
method.`),fW.forEach(t),b7o=i(dl),Xy=n(dl,"P",{});var DSe=s(Xy);v7o=r(DSe,"This class cannot be instantiated directly using "),ose=n(DSe,"CODE",{});var YZr=s(ose);T7o=r(YZr,"__init__()"),YZr.forEach(t),F7o=r(DSe," (throws an error)."),DSe.forEach(t),C7o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(Vy.$$.fragment,cl),M7o=i(cl),rse=n(cl,"P",{});var KZr=s(rse);E7o=r(KZr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KZr.forEach(t),y7o=i(cl),Md=n(cl,"P",{});var mW=s(Md);w7o=r(mW,`Note:
Loading a model from its configuration file does `),tse=n(mW,"STRONG",{});var ZZr=s(tse);A7o=r(ZZr,"not"),ZZr.forEach(t),L7o=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ase=n(mW,"CODE",{});var eet=s(ase);B7o=r(eet,"from_pretrained()"),eet.forEach(t),x7o=r(mW,"to load the model weights."),mW.forEach(t),k7o=i(cl),nse=n(cl,"P",{});var oet=s(nse);R7o=r(oet,"Examples:"),oet.forEach(t),S7o=i(cl),m(zy.$$.fragment,cl),cl.forEach(t),P7o=i(dl),We=n(dl,"DIV",{class:!0});var Ht=s(We);m(Wy.$$.fragment,Ht),$7o=i(Ht),sse=n(Ht,"P",{});var ret=s(sse);I7o=r(ret,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ret.forEach(t),N7o=i(Ht),Ka=n(Ht,"P",{});var uE=s(Ka);j7o=r(uE,"The model class to instantiate is selected based on the "),lse=n(uE,"CODE",{});var tet=s(lse);D7o=r(tet,"model_type"),tet.forEach(t),q7o=r(uE,` property of the config object (either
passed as an argument or loaded from `),ise=n(uE,"CODE",{});var aet=s(ise);G7o=r(aet,"pretrained_model_name_or_path"),aet.forEach(t),O7o=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=n(uE,"CODE",{});var net=s(dse);X7o=r(net,"pretrained_model_name_or_path"),net.forEach(t),V7o=r(uE,":"),uE.forEach(t),z7o=i(Ht),D=n(Ht,"UL",{});var q=s(D);L1=n(q,"LI",{});var lAe=s(L1);cse=n(lAe,"STRONG",{});var set=s(cse);W7o=r(set,"albert"),set.forEach(t),Q7o=r(lAe," \u2014 "),lj=n(lAe,"A",{href:!0});var iet=s(lj);H7o=r(iet,"AlbertForTokenClassification"),iet.forEach(t),U7o=r(lAe," (ALBERT model)"),lAe.forEach(t),J7o=i(q),B1=n(q,"LI",{});var iAe=s(B1);fse=n(iAe,"STRONG",{});var det=s(fse);Y7o=r(det,"bert"),det.forEach(t),K7o=r(iAe," \u2014 "),ij=n(iAe,"A",{href:!0});var cet=s(ij);Z7o=r(cet,"BertForTokenClassification"),cet.forEach(t),e9o=r(iAe," (BERT model)"),iAe.forEach(t),o9o=i(q),x1=n(q,"LI",{});var dAe=s(x1);mse=n(dAe,"STRONG",{});var fet=s(mse);r9o=r(fet,"big_bird"),fet.forEach(t),t9o=r(dAe," \u2014 "),dj=n(dAe,"A",{href:!0});var met=s(dj);a9o=r(met,"BigBirdForTokenClassification"),met.forEach(t),n9o=r(dAe," (BigBird model)"),dAe.forEach(t),s9o=i(q),k1=n(q,"LI",{});var cAe=s(k1);gse=n(cAe,"STRONG",{});var get=s(gse);l9o=r(get,"camembert"),get.forEach(t),i9o=r(cAe," \u2014 "),cj=n(cAe,"A",{href:!0});var het=s(cj);d9o=r(het,"CamembertForTokenClassification"),het.forEach(t),c9o=r(cAe," (CamemBERT model)"),cAe.forEach(t),f9o=i(q),R1=n(q,"LI",{});var fAe=s(R1);hse=n(fAe,"STRONG",{});var pet=s(hse);m9o=r(pet,"canine"),pet.forEach(t),g9o=r(fAe," \u2014 "),fj=n(fAe,"A",{href:!0});var _et=s(fj);h9o=r(_et,"CanineForTokenClassification"),_et.forEach(t),p9o=r(fAe," (Canine model)"),fAe.forEach(t),_9o=i(q),S1=n(q,"LI",{});var mAe=s(S1);pse=n(mAe,"STRONG",{});var uet=s(pse);u9o=r(uet,"convbert"),uet.forEach(t),b9o=r(mAe," \u2014 "),mj=n(mAe,"A",{href:!0});var bet=s(mj);v9o=r(bet,"ConvBertForTokenClassification"),bet.forEach(t),T9o=r(mAe," (ConvBERT model)"),mAe.forEach(t),F9o=i(q),P1=n(q,"LI",{});var gAe=s(P1);_se=n(gAe,"STRONG",{});var vet=s(_se);C9o=r(vet,"data2vec-text"),vet.forEach(t),M9o=r(gAe," \u2014 "),gj=n(gAe,"A",{href:!0});var Tet=s(gj);E9o=r(Tet,"Data2VecTextForTokenClassification"),Tet.forEach(t),y9o=r(gAe," (Data2VecText model)"),gAe.forEach(t),w9o=i(q),$1=n(q,"LI",{});var hAe=s($1);use=n(hAe,"STRONG",{});var Fet=s(use);A9o=r(Fet,"deberta"),Fet.forEach(t),L9o=r(hAe," \u2014 "),hj=n(hAe,"A",{href:!0});var Cet=s(hj);B9o=r(Cet,"DebertaForTokenClassification"),Cet.forEach(t),x9o=r(hAe," (DeBERTa model)"),hAe.forEach(t),k9o=i(q),I1=n(q,"LI",{});var pAe=s(I1);bse=n(pAe,"STRONG",{});var Met=s(bse);R9o=r(Met,"deberta-v2"),Met.forEach(t),S9o=r(pAe," \u2014 "),pj=n(pAe,"A",{href:!0});var Eet=s(pj);P9o=r(Eet,"DebertaV2ForTokenClassification"),Eet.forEach(t),$9o=r(pAe," (DeBERTa-v2 model)"),pAe.forEach(t),I9o=i(q),N1=n(q,"LI",{});var _Ae=s(N1);vse=n(_Ae,"STRONG",{});var yet=s(vse);N9o=r(yet,"distilbert"),yet.forEach(t),j9o=r(_Ae," \u2014 "),_j=n(_Ae,"A",{href:!0});var wet=s(_j);D9o=r(wet,"DistilBertForTokenClassification"),wet.forEach(t),q9o=r(_Ae," (DistilBERT model)"),_Ae.forEach(t),G9o=i(q),j1=n(q,"LI",{});var uAe=s(j1);Tse=n(uAe,"STRONG",{});var Aet=s(Tse);O9o=r(Aet,"electra"),Aet.forEach(t),X9o=r(uAe," \u2014 "),uj=n(uAe,"A",{href:!0});var Let=s(uj);V9o=r(Let,"ElectraForTokenClassification"),Let.forEach(t),z9o=r(uAe," (ELECTRA model)"),uAe.forEach(t),W9o=i(q),D1=n(q,"LI",{});var bAe=s(D1);Fse=n(bAe,"STRONG",{});var Bet=s(Fse);Q9o=r(Bet,"flaubert"),Bet.forEach(t),H9o=r(bAe," \u2014 "),bj=n(bAe,"A",{href:!0});var xet=s(bj);U9o=r(xet,"FlaubertForTokenClassification"),xet.forEach(t),J9o=r(bAe," (FlauBERT model)"),bAe.forEach(t),Y9o=i(q),q1=n(q,"LI",{});var vAe=s(q1);Cse=n(vAe,"STRONG",{});var ket=s(Cse);K9o=r(ket,"fnet"),ket.forEach(t),Z9o=r(vAe," \u2014 "),vj=n(vAe,"A",{href:!0});var Ret=s(vj);eBo=r(Ret,"FNetForTokenClassification"),Ret.forEach(t),oBo=r(vAe," (FNet model)"),vAe.forEach(t),rBo=i(q),G1=n(q,"LI",{});var TAe=s(G1);Mse=n(TAe,"STRONG",{});var Set=s(Mse);tBo=r(Set,"funnel"),Set.forEach(t),aBo=r(TAe," \u2014 "),Tj=n(TAe,"A",{href:!0});var Pet=s(Tj);nBo=r(Pet,"FunnelForTokenClassification"),Pet.forEach(t),sBo=r(TAe," (Funnel Transformer model)"),TAe.forEach(t),lBo=i(q),O1=n(q,"LI",{});var FAe=s(O1);Ese=n(FAe,"STRONG",{});var $et=s(Ese);iBo=r($et,"gpt2"),$et.forEach(t),dBo=r(FAe," \u2014 "),Fj=n(FAe,"A",{href:!0});var Iet=s(Fj);cBo=r(Iet,"GPT2ForTokenClassification"),Iet.forEach(t),fBo=r(FAe," (OpenAI GPT-2 model)"),FAe.forEach(t),mBo=i(q),X1=n(q,"LI",{});var CAe=s(X1);yse=n(CAe,"STRONG",{});var Net=s(yse);gBo=r(Net,"ibert"),Net.forEach(t),hBo=r(CAe," \u2014 "),Cj=n(CAe,"A",{href:!0});var jet=s(Cj);pBo=r(jet,"IBertForTokenClassification"),jet.forEach(t),_Bo=r(CAe," (I-BERT model)"),CAe.forEach(t),uBo=i(q),V1=n(q,"LI",{});var MAe=s(V1);wse=n(MAe,"STRONG",{});var Det=s(wse);bBo=r(Det,"layoutlm"),Det.forEach(t),vBo=r(MAe," \u2014 "),Mj=n(MAe,"A",{href:!0});var qet=s(Mj);TBo=r(qet,"LayoutLMForTokenClassification"),qet.forEach(t),FBo=r(MAe," (LayoutLM model)"),MAe.forEach(t),CBo=i(q),z1=n(q,"LI",{});var EAe=s(z1);Ase=n(EAe,"STRONG",{});var Get=s(Ase);MBo=r(Get,"layoutlmv2"),Get.forEach(t),EBo=r(EAe," \u2014 "),Ej=n(EAe,"A",{href:!0});var Oet=s(Ej);yBo=r(Oet,"LayoutLMv2ForTokenClassification"),Oet.forEach(t),wBo=r(EAe," (LayoutLMv2 model)"),EAe.forEach(t),ABo=i(q),W1=n(q,"LI",{});var yAe=s(W1);Lse=n(yAe,"STRONG",{});var Xet=s(Lse);LBo=r(Xet,"longformer"),Xet.forEach(t),BBo=r(yAe," \u2014 "),yj=n(yAe,"A",{href:!0});var Vet=s(yj);xBo=r(Vet,"LongformerForTokenClassification"),Vet.forEach(t),kBo=r(yAe," (Longformer model)"),yAe.forEach(t),RBo=i(q),Q1=n(q,"LI",{});var wAe=s(Q1);Bse=n(wAe,"STRONG",{});var zet=s(Bse);SBo=r(zet,"megatron-bert"),zet.forEach(t),PBo=r(wAe," \u2014 "),wj=n(wAe,"A",{href:!0});var Wet=s(wj);$Bo=r(Wet,"MegatronBertForTokenClassification"),Wet.forEach(t),IBo=r(wAe," (MegatronBert model)"),wAe.forEach(t),NBo=i(q),H1=n(q,"LI",{});var AAe=s(H1);xse=n(AAe,"STRONG",{});var Qet=s(xse);jBo=r(Qet,"mobilebert"),Qet.forEach(t),DBo=r(AAe," \u2014 "),Aj=n(AAe,"A",{href:!0});var Het=s(Aj);qBo=r(Het,"MobileBertForTokenClassification"),Het.forEach(t),GBo=r(AAe," (MobileBERT model)"),AAe.forEach(t),OBo=i(q),U1=n(q,"LI",{});var LAe=s(U1);kse=n(LAe,"STRONG",{});var Uet=s(kse);XBo=r(Uet,"mpnet"),Uet.forEach(t),VBo=r(LAe," \u2014 "),Lj=n(LAe,"A",{href:!0});var Jet=s(Lj);zBo=r(Jet,"MPNetForTokenClassification"),Jet.forEach(t),WBo=r(LAe," (MPNet model)"),LAe.forEach(t),QBo=i(q),J1=n(q,"LI",{});var BAe=s(J1);Rse=n(BAe,"STRONG",{});var Yet=s(Rse);HBo=r(Yet,"nystromformer"),Yet.forEach(t),UBo=r(BAe," \u2014 "),Bj=n(BAe,"A",{href:!0});var Ket=s(Bj);JBo=r(Ket,"NystromformerForTokenClassification"),Ket.forEach(t),YBo=r(BAe," (Nystromformer model)"),BAe.forEach(t),KBo=i(q),Y1=n(q,"LI",{});var xAe=s(Y1);Sse=n(xAe,"STRONG",{});var Zet=s(Sse);ZBo=r(Zet,"qdqbert"),Zet.forEach(t),exo=r(xAe," \u2014 "),xj=n(xAe,"A",{href:!0});var eot=s(xj);oxo=r(eot,"QDQBertForTokenClassification"),eot.forEach(t),rxo=r(xAe," (QDQBert model)"),xAe.forEach(t),txo=i(q),K1=n(q,"LI",{});var kAe=s(K1);Pse=n(kAe,"STRONG",{});var oot=s(Pse);axo=r(oot,"rembert"),oot.forEach(t),nxo=r(kAe," \u2014 "),kj=n(kAe,"A",{href:!0});var rot=s(kj);sxo=r(rot,"RemBertForTokenClassification"),rot.forEach(t),lxo=r(kAe," (RemBERT model)"),kAe.forEach(t),ixo=i(q),Z1=n(q,"LI",{});var RAe=s(Z1);$se=n(RAe,"STRONG",{});var tot=s($se);dxo=r(tot,"roberta"),tot.forEach(t),cxo=r(RAe," \u2014 "),Rj=n(RAe,"A",{href:!0});var aot=s(Rj);fxo=r(aot,"RobertaForTokenClassification"),aot.forEach(t),mxo=r(RAe," (RoBERTa model)"),RAe.forEach(t),gxo=i(q),eb=n(q,"LI",{});var SAe=s(eb);Ise=n(SAe,"STRONG",{});var not=s(Ise);hxo=r(not,"roformer"),not.forEach(t),pxo=r(SAe," \u2014 "),Sj=n(SAe,"A",{href:!0});var sot=s(Sj);_xo=r(sot,"RoFormerForTokenClassification"),sot.forEach(t),uxo=r(SAe," (RoFormer model)"),SAe.forEach(t),bxo=i(q),ob=n(q,"LI",{});var PAe=s(ob);Nse=n(PAe,"STRONG",{});var lot=s(Nse);vxo=r(lot,"squeezebert"),lot.forEach(t),Txo=r(PAe," \u2014 "),Pj=n(PAe,"A",{href:!0});var iot=s(Pj);Fxo=r(iot,"SqueezeBertForTokenClassification"),iot.forEach(t),Cxo=r(PAe," (SqueezeBERT model)"),PAe.forEach(t),Mxo=i(q),rb=n(q,"LI",{});var $Ae=s(rb);jse=n($Ae,"STRONG",{});var dot=s(jse);Exo=r(dot,"xlm"),dot.forEach(t),yxo=r($Ae," \u2014 "),$j=n($Ae,"A",{href:!0});var cot=s($j);wxo=r(cot,"XLMForTokenClassification"),cot.forEach(t),Axo=r($Ae," (XLM model)"),$Ae.forEach(t),Lxo=i(q),tb=n(q,"LI",{});var IAe=s(tb);Dse=n(IAe,"STRONG",{});var fot=s(Dse);Bxo=r(fot,"xlm-roberta"),fot.forEach(t),xxo=r(IAe," \u2014 "),Ij=n(IAe,"A",{href:!0});var mot=s(Ij);kxo=r(mot,"XLMRobertaForTokenClassification"),mot.forEach(t),Rxo=r(IAe," (XLM-RoBERTa model)"),IAe.forEach(t),Sxo=i(q),ab=n(q,"LI",{});var NAe=s(ab);qse=n(NAe,"STRONG",{});var got=s(qse);Pxo=r(got,"xlm-roberta-xl"),got.forEach(t),$xo=r(NAe," \u2014 "),Nj=n(NAe,"A",{href:!0});var hot=s(Nj);Ixo=r(hot,"XLMRobertaXLForTokenClassification"),hot.forEach(t),Nxo=r(NAe," (XLM-RoBERTa-XL model)"),NAe.forEach(t),jxo=i(q),nb=n(q,"LI",{});var jAe=s(nb);Gse=n(jAe,"STRONG",{});var pot=s(Gse);Dxo=r(pot,"xlnet"),pot.forEach(t),qxo=r(jAe," \u2014 "),jj=n(jAe,"A",{href:!0});var _ot=s(jj);Gxo=r(_ot,"XLNetForTokenClassification"),_ot.forEach(t),Oxo=r(jAe," (XLNet model)"),jAe.forEach(t),Xxo=i(q),sb=n(q,"LI",{});var DAe=s(sb);Ose=n(DAe,"STRONG",{});var uot=s(Ose);Vxo=r(uot,"yoso"),uot.forEach(t),zxo=r(DAe," \u2014 "),Dj=n(DAe,"A",{href:!0});var bot=s(Dj);Wxo=r(bot,"YosoForTokenClassification"),bot.forEach(t),Qxo=r(DAe," (YOSO model)"),DAe.forEach(t),q.forEach(t),Hxo=i(Ht),lb=n(Ht,"P",{});var qAe=s(lb);Uxo=r(qAe,"The model is set in evaluation mode by default using "),Xse=n(qAe,"CODE",{});var vot=s(Xse);Jxo=r(vot,"model.eval()"),vot.forEach(t),Yxo=r(qAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=n(qAe,"CODE",{});var Tot=s(Vse);Kxo=r(Tot,"model.train()"),Tot.forEach(t),qAe.forEach(t),Zxo=i(Ht),zse=n(Ht,"P",{});var Fot=s(zse);eko=r(Fot,"Examples:"),Fot.forEach(t),oko=i(Ht),m(Qy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),kke=i(c),Ed=n(c,"H2",{class:!0});var qSe=s(Ed);ib=n(qSe,"A",{id:!0,class:!0,href:!0});var Cot=s(ib);Wse=n(Cot,"SPAN",{});var Mot=s(Wse);m(Hy.$$.fragment,Mot),Mot.forEach(t),Cot.forEach(t),rko=i(qSe),Qse=n(qSe,"SPAN",{});var Eot=s(Qse);tko=r(Eot,"AutoModelForQuestionAnswering"),Eot.forEach(t),qSe.forEach(t),Rke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Uy.$$.fragment,fl),ako=i(fl),yd=n(fl,"P",{});var gW=s(yd);nko=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hse=n(gW,"CODE",{});var yot=s(Hse);sko=r(yot,"from_pretrained()"),yot.forEach(t),lko=r(gW,"class method or the "),Use=n(gW,"CODE",{});var wot=s(Use);iko=r(wot,"from_config()"),wot.forEach(t),dko=r(gW,`class
method.`),gW.forEach(t),cko=i(fl),Jy=n(fl,"P",{});var GSe=s(Jy);fko=r(GSe,"This class cannot be instantiated directly using "),Jse=n(GSe,"CODE",{});var Aot=s(Jse);mko=r(Aot,"__init__()"),Aot.forEach(t),gko=r(GSe," (throws an error)."),GSe.forEach(t),hko=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Yy.$$.fragment,ml),pko=i(ml),Yse=n(ml,"P",{});var Lot=s(Yse);_ko=r(Lot,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lot.forEach(t),uko=i(ml),wd=n(ml,"P",{});var hW=s(wd);bko=r(hW,`Note:
Loading a model from its configuration file does `),Kse=n(hW,"STRONG",{});var Bot=s(Kse);vko=r(Bot,"not"),Bot.forEach(t),Tko=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zse=n(hW,"CODE",{});var xot=s(Zse);Fko=r(xot,"from_pretrained()"),xot.forEach(t),Cko=r(hW,"to load the model weights."),hW.forEach(t),Mko=i(ml),ele=n(ml,"P",{});var kot=s(ele);Eko=r(kot,"Examples:"),kot.forEach(t),yko=i(ml),m(Ky.$$.fragment,ml),ml.forEach(t),wko=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(Zy.$$.fragment,Ut),Ako=i(Ut),ole=n(Ut,"P",{});var Rot=s(ole);Lko=r(Rot,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Rot.forEach(t),Bko=i(Ut),Za=n(Ut,"P",{});var bE=s(Za);xko=r(bE,"The model class to instantiate is selected based on the "),rle=n(bE,"CODE",{});var Sot=s(rle);kko=r(Sot,"model_type"),Sot.forEach(t),Rko=r(bE,` property of the config object (either
passed as an argument or loaded from `),tle=n(bE,"CODE",{});var Pot=s(tle);Sko=r(Pot,"pretrained_model_name_or_path"),Pot.forEach(t),Pko=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=n(bE,"CODE",{});var $ot=s(ale);$ko=r($ot,"pretrained_model_name_or_path"),$ot.forEach(t),Iko=r(bE,":"),bE.forEach(t),Nko=i(Ut),R=n(Ut,"UL",{});var P=s(R);db=n(P,"LI",{});var GAe=s(db);nle=n(GAe,"STRONG",{});var Iot=s(nle);jko=r(Iot,"albert"),Iot.forEach(t),Dko=r(GAe," \u2014 "),qj=n(GAe,"A",{href:!0});var Not=s(qj);qko=r(Not,"AlbertForQuestionAnswering"),Not.forEach(t),Gko=r(GAe," (ALBERT model)"),GAe.forEach(t),Oko=i(P),cb=n(P,"LI",{});var OAe=s(cb);sle=n(OAe,"STRONG",{});var jot=s(sle);Xko=r(jot,"bart"),jot.forEach(t),Vko=r(OAe," \u2014 "),Gj=n(OAe,"A",{href:!0});var Dot=s(Gj);zko=r(Dot,"BartForQuestionAnswering"),Dot.forEach(t),Wko=r(OAe," (BART model)"),OAe.forEach(t),Qko=i(P),fb=n(P,"LI",{});var XAe=s(fb);lle=n(XAe,"STRONG",{});var qot=s(lle);Hko=r(qot,"bert"),qot.forEach(t),Uko=r(XAe," \u2014 "),Oj=n(XAe,"A",{href:!0});var Got=s(Oj);Jko=r(Got,"BertForQuestionAnswering"),Got.forEach(t),Yko=r(XAe," (BERT model)"),XAe.forEach(t),Kko=i(P),mb=n(P,"LI",{});var VAe=s(mb);ile=n(VAe,"STRONG",{});var Oot=s(ile);Zko=r(Oot,"big_bird"),Oot.forEach(t),eRo=r(VAe," \u2014 "),Xj=n(VAe,"A",{href:!0});var Xot=s(Xj);oRo=r(Xot,"BigBirdForQuestionAnswering"),Xot.forEach(t),rRo=r(VAe," (BigBird model)"),VAe.forEach(t),tRo=i(P),gb=n(P,"LI",{});var zAe=s(gb);dle=n(zAe,"STRONG",{});var Vot=s(dle);aRo=r(Vot,"bigbird_pegasus"),Vot.forEach(t),nRo=r(zAe," \u2014 "),Vj=n(zAe,"A",{href:!0});var zot=s(Vj);sRo=r(zot,"BigBirdPegasusForQuestionAnswering"),zot.forEach(t),lRo=r(zAe," (BigBirdPegasus model)"),zAe.forEach(t),iRo=i(P),hb=n(P,"LI",{});var WAe=s(hb);cle=n(WAe,"STRONG",{});var Wot=s(cle);dRo=r(Wot,"camembert"),Wot.forEach(t),cRo=r(WAe," \u2014 "),zj=n(WAe,"A",{href:!0});var Qot=s(zj);fRo=r(Qot,"CamembertForQuestionAnswering"),Qot.forEach(t),mRo=r(WAe," (CamemBERT model)"),WAe.forEach(t),gRo=i(P),pb=n(P,"LI",{});var QAe=s(pb);fle=n(QAe,"STRONG",{});var Hot=s(fle);hRo=r(Hot,"canine"),Hot.forEach(t),pRo=r(QAe," \u2014 "),Wj=n(QAe,"A",{href:!0});var Uot=s(Wj);_Ro=r(Uot,"CanineForQuestionAnswering"),Uot.forEach(t),uRo=r(QAe," (Canine model)"),QAe.forEach(t),bRo=i(P),_b=n(P,"LI",{});var HAe=s(_b);mle=n(HAe,"STRONG",{});var Jot=s(mle);vRo=r(Jot,"convbert"),Jot.forEach(t),TRo=r(HAe," \u2014 "),Qj=n(HAe,"A",{href:!0});var Yot=s(Qj);FRo=r(Yot,"ConvBertForQuestionAnswering"),Yot.forEach(t),CRo=r(HAe," (ConvBERT model)"),HAe.forEach(t),MRo=i(P),ub=n(P,"LI",{});var UAe=s(ub);gle=n(UAe,"STRONG",{});var Kot=s(gle);ERo=r(Kot,"data2vec-text"),Kot.forEach(t),yRo=r(UAe," \u2014 "),Hj=n(UAe,"A",{href:!0});var Zot=s(Hj);wRo=r(Zot,"Data2VecTextForQuestionAnswering"),Zot.forEach(t),ARo=r(UAe," (Data2VecText model)"),UAe.forEach(t),LRo=i(P),bb=n(P,"LI",{});var JAe=s(bb);hle=n(JAe,"STRONG",{});var ert=s(hle);BRo=r(ert,"deberta"),ert.forEach(t),xRo=r(JAe," \u2014 "),Uj=n(JAe,"A",{href:!0});var ort=s(Uj);kRo=r(ort,"DebertaForQuestionAnswering"),ort.forEach(t),RRo=r(JAe," (DeBERTa model)"),JAe.forEach(t),SRo=i(P),vb=n(P,"LI",{});var YAe=s(vb);ple=n(YAe,"STRONG",{});var rrt=s(ple);PRo=r(rrt,"deberta-v2"),rrt.forEach(t),$Ro=r(YAe," \u2014 "),Jj=n(YAe,"A",{href:!0});var trt=s(Jj);IRo=r(trt,"DebertaV2ForQuestionAnswering"),trt.forEach(t),NRo=r(YAe," (DeBERTa-v2 model)"),YAe.forEach(t),jRo=i(P),Tb=n(P,"LI",{});var KAe=s(Tb);_le=n(KAe,"STRONG",{});var art=s(_le);DRo=r(art,"distilbert"),art.forEach(t),qRo=r(KAe," \u2014 "),Yj=n(KAe,"A",{href:!0});var nrt=s(Yj);GRo=r(nrt,"DistilBertForQuestionAnswering"),nrt.forEach(t),ORo=r(KAe," (DistilBERT model)"),KAe.forEach(t),XRo=i(P),Fb=n(P,"LI",{});var ZAe=s(Fb);ule=n(ZAe,"STRONG",{});var srt=s(ule);VRo=r(srt,"electra"),srt.forEach(t),zRo=r(ZAe," \u2014 "),Kj=n(ZAe,"A",{href:!0});var lrt=s(Kj);WRo=r(lrt,"ElectraForQuestionAnswering"),lrt.forEach(t),QRo=r(ZAe," (ELECTRA model)"),ZAe.forEach(t),HRo=i(P),Cb=n(P,"LI",{});var e0e=s(Cb);ble=n(e0e,"STRONG",{});var irt=s(ble);URo=r(irt,"flaubert"),irt.forEach(t),JRo=r(e0e," \u2014 "),Zj=n(e0e,"A",{href:!0});var drt=s(Zj);YRo=r(drt,"FlaubertForQuestionAnsweringSimple"),drt.forEach(t),KRo=r(e0e," (FlauBERT model)"),e0e.forEach(t),ZRo=i(P),Mb=n(P,"LI",{});var o0e=s(Mb);vle=n(o0e,"STRONG",{});var crt=s(vle);eSo=r(crt,"fnet"),crt.forEach(t),oSo=r(o0e," \u2014 "),eD=n(o0e,"A",{href:!0});var frt=s(eD);rSo=r(frt,"FNetForQuestionAnswering"),frt.forEach(t),tSo=r(o0e," (FNet model)"),o0e.forEach(t),aSo=i(P),Eb=n(P,"LI",{});var r0e=s(Eb);Tle=n(r0e,"STRONG",{});var mrt=s(Tle);nSo=r(mrt,"funnel"),mrt.forEach(t),sSo=r(r0e," \u2014 "),oD=n(r0e,"A",{href:!0});var grt=s(oD);lSo=r(grt,"FunnelForQuestionAnswering"),grt.forEach(t),iSo=r(r0e," (Funnel Transformer model)"),r0e.forEach(t),dSo=i(P),yb=n(P,"LI",{});var t0e=s(yb);Fle=n(t0e,"STRONG",{});var hrt=s(Fle);cSo=r(hrt,"gptj"),hrt.forEach(t),fSo=r(t0e," \u2014 "),rD=n(t0e,"A",{href:!0});var prt=s(rD);mSo=r(prt,"GPTJForQuestionAnswering"),prt.forEach(t),gSo=r(t0e," (GPT-J model)"),t0e.forEach(t),hSo=i(P),wb=n(P,"LI",{});var a0e=s(wb);Cle=n(a0e,"STRONG",{});var _rt=s(Cle);pSo=r(_rt,"ibert"),_rt.forEach(t),_So=r(a0e," \u2014 "),tD=n(a0e,"A",{href:!0});var urt=s(tD);uSo=r(urt,"IBertForQuestionAnswering"),urt.forEach(t),bSo=r(a0e," (I-BERT model)"),a0e.forEach(t),vSo=i(P),Ab=n(P,"LI",{});var n0e=s(Ab);Mle=n(n0e,"STRONG",{});var brt=s(Mle);TSo=r(brt,"layoutlmv2"),brt.forEach(t),FSo=r(n0e," \u2014 "),aD=n(n0e,"A",{href:!0});var vrt=s(aD);CSo=r(vrt,"LayoutLMv2ForQuestionAnswering"),vrt.forEach(t),MSo=r(n0e," (LayoutLMv2 model)"),n0e.forEach(t),ESo=i(P),Lb=n(P,"LI",{});var s0e=s(Lb);Ele=n(s0e,"STRONG",{});var Trt=s(Ele);ySo=r(Trt,"led"),Trt.forEach(t),wSo=r(s0e," \u2014 "),nD=n(s0e,"A",{href:!0});var Frt=s(nD);ASo=r(Frt,"LEDForQuestionAnswering"),Frt.forEach(t),LSo=r(s0e," (LED model)"),s0e.forEach(t),BSo=i(P),Bb=n(P,"LI",{});var l0e=s(Bb);yle=n(l0e,"STRONG",{});var Crt=s(yle);xSo=r(Crt,"longformer"),Crt.forEach(t),kSo=r(l0e," \u2014 "),sD=n(l0e,"A",{href:!0});var Mrt=s(sD);RSo=r(Mrt,"LongformerForQuestionAnswering"),Mrt.forEach(t),SSo=r(l0e," (Longformer model)"),l0e.forEach(t),PSo=i(P),xb=n(P,"LI",{});var i0e=s(xb);wle=n(i0e,"STRONG",{});var Ert=s(wle);$So=r(Ert,"lxmert"),Ert.forEach(t),ISo=r(i0e," \u2014 "),lD=n(i0e,"A",{href:!0});var yrt=s(lD);NSo=r(yrt,"LxmertForQuestionAnswering"),yrt.forEach(t),jSo=r(i0e," (LXMERT model)"),i0e.forEach(t),DSo=i(P),kb=n(P,"LI",{});var d0e=s(kb);Ale=n(d0e,"STRONG",{});var wrt=s(Ale);qSo=r(wrt,"mbart"),wrt.forEach(t),GSo=r(d0e," \u2014 "),iD=n(d0e,"A",{href:!0});var Art=s(iD);OSo=r(Art,"MBartForQuestionAnswering"),Art.forEach(t),XSo=r(d0e," (mBART model)"),d0e.forEach(t),VSo=i(P),Rb=n(P,"LI",{});var c0e=s(Rb);Lle=n(c0e,"STRONG",{});var Lrt=s(Lle);zSo=r(Lrt,"megatron-bert"),Lrt.forEach(t),WSo=r(c0e," \u2014 "),dD=n(c0e,"A",{href:!0});var Brt=s(dD);QSo=r(Brt,"MegatronBertForQuestionAnswering"),Brt.forEach(t),HSo=r(c0e," (MegatronBert model)"),c0e.forEach(t),USo=i(P),Sb=n(P,"LI",{});var f0e=s(Sb);Ble=n(f0e,"STRONG",{});var xrt=s(Ble);JSo=r(xrt,"mobilebert"),xrt.forEach(t),YSo=r(f0e," \u2014 "),cD=n(f0e,"A",{href:!0});var krt=s(cD);KSo=r(krt,"MobileBertForQuestionAnswering"),krt.forEach(t),ZSo=r(f0e," (MobileBERT model)"),f0e.forEach(t),ePo=i(P),Pb=n(P,"LI",{});var m0e=s(Pb);xle=n(m0e,"STRONG",{});var Rrt=s(xle);oPo=r(Rrt,"mpnet"),Rrt.forEach(t),rPo=r(m0e," \u2014 "),fD=n(m0e,"A",{href:!0});var Srt=s(fD);tPo=r(Srt,"MPNetForQuestionAnswering"),Srt.forEach(t),aPo=r(m0e," (MPNet model)"),m0e.forEach(t),nPo=i(P),$b=n(P,"LI",{});var g0e=s($b);kle=n(g0e,"STRONG",{});var Prt=s(kle);sPo=r(Prt,"nystromformer"),Prt.forEach(t),lPo=r(g0e," \u2014 "),mD=n(g0e,"A",{href:!0});var $rt=s(mD);iPo=r($rt,"NystromformerForQuestionAnswering"),$rt.forEach(t),dPo=r(g0e," (Nystromformer model)"),g0e.forEach(t),cPo=i(P),Ib=n(P,"LI",{});var h0e=s(Ib);Rle=n(h0e,"STRONG",{});var Irt=s(Rle);fPo=r(Irt,"qdqbert"),Irt.forEach(t),mPo=r(h0e," \u2014 "),gD=n(h0e,"A",{href:!0});var Nrt=s(gD);gPo=r(Nrt,"QDQBertForQuestionAnswering"),Nrt.forEach(t),hPo=r(h0e," (QDQBert model)"),h0e.forEach(t),pPo=i(P),Nb=n(P,"LI",{});var p0e=s(Nb);Sle=n(p0e,"STRONG",{});var jrt=s(Sle);_Po=r(jrt,"reformer"),jrt.forEach(t),uPo=r(p0e," \u2014 "),hD=n(p0e,"A",{href:!0});var Drt=s(hD);bPo=r(Drt,"ReformerForQuestionAnswering"),Drt.forEach(t),vPo=r(p0e," (Reformer model)"),p0e.forEach(t),TPo=i(P),jb=n(P,"LI",{});var _0e=s(jb);Ple=n(_0e,"STRONG",{});var qrt=s(Ple);FPo=r(qrt,"rembert"),qrt.forEach(t),CPo=r(_0e," \u2014 "),pD=n(_0e,"A",{href:!0});var Grt=s(pD);MPo=r(Grt,"RemBertForQuestionAnswering"),Grt.forEach(t),EPo=r(_0e," (RemBERT model)"),_0e.forEach(t),yPo=i(P),Db=n(P,"LI",{});var u0e=s(Db);$le=n(u0e,"STRONG",{});var Ort=s($le);wPo=r(Ort,"roberta"),Ort.forEach(t),APo=r(u0e," \u2014 "),_D=n(u0e,"A",{href:!0});var Xrt=s(_D);LPo=r(Xrt,"RobertaForQuestionAnswering"),Xrt.forEach(t),BPo=r(u0e," (RoBERTa model)"),u0e.forEach(t),xPo=i(P),qb=n(P,"LI",{});var b0e=s(qb);Ile=n(b0e,"STRONG",{});var Vrt=s(Ile);kPo=r(Vrt,"roformer"),Vrt.forEach(t),RPo=r(b0e," \u2014 "),uD=n(b0e,"A",{href:!0});var zrt=s(uD);SPo=r(zrt,"RoFormerForQuestionAnswering"),zrt.forEach(t),PPo=r(b0e," (RoFormer model)"),b0e.forEach(t),$Po=i(P),Gb=n(P,"LI",{});var v0e=s(Gb);Nle=n(v0e,"STRONG",{});var Wrt=s(Nle);IPo=r(Wrt,"splinter"),Wrt.forEach(t),NPo=r(v0e," \u2014 "),bD=n(v0e,"A",{href:!0});var Qrt=s(bD);jPo=r(Qrt,"SplinterForQuestionAnswering"),Qrt.forEach(t),DPo=r(v0e," (Splinter model)"),v0e.forEach(t),qPo=i(P),Ob=n(P,"LI",{});var T0e=s(Ob);jle=n(T0e,"STRONG",{});var Hrt=s(jle);GPo=r(Hrt,"squeezebert"),Hrt.forEach(t),OPo=r(T0e," \u2014 "),vD=n(T0e,"A",{href:!0});var Urt=s(vD);XPo=r(Urt,"SqueezeBertForQuestionAnswering"),Urt.forEach(t),VPo=r(T0e," (SqueezeBERT model)"),T0e.forEach(t),zPo=i(P),Xb=n(P,"LI",{});var F0e=s(Xb);Dle=n(F0e,"STRONG",{});var Jrt=s(Dle);WPo=r(Jrt,"xlm"),Jrt.forEach(t),QPo=r(F0e," \u2014 "),TD=n(F0e,"A",{href:!0});var Yrt=s(TD);HPo=r(Yrt,"XLMForQuestionAnsweringSimple"),Yrt.forEach(t),UPo=r(F0e," (XLM model)"),F0e.forEach(t),JPo=i(P),Vb=n(P,"LI",{});var C0e=s(Vb);qle=n(C0e,"STRONG",{});var Krt=s(qle);YPo=r(Krt,"xlm-roberta"),Krt.forEach(t),KPo=r(C0e," \u2014 "),FD=n(C0e,"A",{href:!0});var Zrt=s(FD);ZPo=r(Zrt,"XLMRobertaForQuestionAnswering"),Zrt.forEach(t),e$o=r(C0e," (XLM-RoBERTa model)"),C0e.forEach(t),o$o=i(P),zb=n(P,"LI",{});var M0e=s(zb);Gle=n(M0e,"STRONG",{});var ett=s(Gle);r$o=r(ett,"xlm-roberta-xl"),ett.forEach(t),t$o=r(M0e," \u2014 "),CD=n(M0e,"A",{href:!0});var ott=s(CD);a$o=r(ott,"XLMRobertaXLForQuestionAnswering"),ott.forEach(t),n$o=r(M0e," (XLM-RoBERTa-XL model)"),M0e.forEach(t),s$o=i(P),Wb=n(P,"LI",{});var E0e=s(Wb);Ole=n(E0e,"STRONG",{});var rtt=s(Ole);l$o=r(rtt,"xlnet"),rtt.forEach(t),i$o=r(E0e," \u2014 "),MD=n(E0e,"A",{href:!0});var ttt=s(MD);d$o=r(ttt,"XLNetForQuestionAnsweringSimple"),ttt.forEach(t),c$o=r(E0e," (XLNet model)"),E0e.forEach(t),f$o=i(P),Qb=n(P,"LI",{});var y0e=s(Qb);Xle=n(y0e,"STRONG",{});var att=s(Xle);m$o=r(att,"yoso"),att.forEach(t),g$o=r(y0e," \u2014 "),ED=n(y0e,"A",{href:!0});var ntt=s(ED);h$o=r(ntt,"YosoForQuestionAnswering"),ntt.forEach(t),p$o=r(y0e," (YOSO model)"),y0e.forEach(t),P.forEach(t),_$o=i(Ut),Hb=n(Ut,"P",{});var w0e=s(Hb);u$o=r(w0e,"The model is set in evaluation mode by default using "),Vle=n(w0e,"CODE",{});var stt=s(Vle);b$o=r(stt,"model.eval()"),stt.forEach(t),v$o=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zle=n(w0e,"CODE",{});var ltt=s(zle);T$o=r(ltt,"model.train()"),ltt.forEach(t),w0e.forEach(t),F$o=i(Ut),Wle=n(Ut,"P",{});var itt=s(Wle);C$o=r(itt,"Examples:"),itt.forEach(t),M$o=i(Ut),m(ew.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Ske=i(c),Ad=n(c,"H2",{class:!0});var OSe=s(Ad);Ub=n(OSe,"A",{id:!0,class:!0,href:!0});var dtt=s(Ub);Qle=n(dtt,"SPAN",{});var ctt=s(Qle);m(ow.$$.fragment,ctt),ctt.forEach(t),dtt.forEach(t),E$o=i(OSe),Hle=n(OSe,"SPAN",{});var ftt=s(Hle);y$o=r(ftt,"AutoModelForTableQuestionAnswering"),ftt.forEach(t),OSe.forEach(t),Pke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(rw.$$.fragment,gl),w$o=i(gl),Ld=n(gl,"P",{});var pW=s(Ld);A$o=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Ule=n(pW,"CODE",{});var mtt=s(Ule);L$o=r(mtt,"from_pretrained()"),mtt.forEach(t),B$o=r(pW,"class method or the "),Jle=n(pW,"CODE",{});var gtt=s(Jle);x$o=r(gtt,"from_config()"),gtt.forEach(t),k$o=r(pW,`class
method.`),pW.forEach(t),R$o=i(gl),tw=n(gl,"P",{});var XSe=s(tw);S$o=r(XSe,"This class cannot be instantiated directly using "),Yle=n(XSe,"CODE",{});var htt=s(Yle);P$o=r(htt,"__init__()"),htt.forEach(t),$$o=r(XSe," (throws an error)."),XSe.forEach(t),I$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(aw.$$.fragment,hl),N$o=i(hl),Kle=n(hl,"P",{});var ptt=s(Kle);j$o=r(ptt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ptt.forEach(t),D$o=i(hl),Bd=n(hl,"P",{});var _W=s(Bd);q$o=r(_W,`Note:
Loading a model from its configuration file does `),Zle=n(_W,"STRONG",{});var _tt=s(Zle);G$o=r(_tt,"not"),_tt.forEach(t),O$o=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),eie=n(_W,"CODE",{});var utt=s(eie);X$o=r(utt,"from_pretrained()"),utt.forEach(t),V$o=r(_W,"to load the model weights."),_W.forEach(t),z$o=i(hl),oie=n(hl,"P",{});var btt=s(oie);W$o=r(btt,"Examples:"),btt.forEach(t),Q$o=i(hl),m(nw.$$.fragment,hl),hl.forEach(t),H$o=i(gl),He=n(gl,"DIV",{class:!0});var Jt=s(He);m(sw.$$.fragment,Jt),U$o=i(Jt),rie=n(Jt,"P",{});var vtt=s(rie);J$o=r(vtt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vtt.forEach(t),Y$o=i(Jt),en=n(Jt,"P",{});var vE=s(en);K$o=r(vE,"The model class to instantiate is selected based on the "),tie=n(vE,"CODE",{});var Ttt=s(tie);Z$o=r(Ttt,"model_type"),Ttt.forEach(t),eIo=r(vE,` property of the config object (either
passed as an argument or loaded from `),aie=n(vE,"CODE",{});var Ftt=s(aie);oIo=r(Ftt,"pretrained_model_name_or_path"),Ftt.forEach(t),rIo=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nie=n(vE,"CODE",{});var Ctt=s(nie);tIo=r(Ctt,"pretrained_model_name_or_path"),Ctt.forEach(t),aIo=r(vE,":"),vE.forEach(t),nIo=i(Jt),sie=n(Jt,"UL",{});var Mtt=s(sie);Jb=n(Mtt,"LI",{});var A0e=s(Jb);lie=n(A0e,"STRONG",{});var Ett=s(lie);sIo=r(Ett,"tapas"),Ett.forEach(t),lIo=r(A0e," \u2014 "),yD=n(A0e,"A",{href:!0});var ytt=s(yD);iIo=r(ytt,"TapasForQuestionAnswering"),ytt.forEach(t),dIo=r(A0e," (TAPAS model)"),A0e.forEach(t),Mtt.forEach(t),cIo=i(Jt),Yb=n(Jt,"P",{});var L0e=s(Yb);fIo=r(L0e,"The model is set in evaluation mode by default using "),iie=n(L0e,"CODE",{});var wtt=s(iie);mIo=r(wtt,"model.eval()"),wtt.forEach(t),gIo=r(L0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=n(L0e,"CODE",{});var Att=s(die);hIo=r(Att,"model.train()"),Att.forEach(t),L0e.forEach(t),pIo=i(Jt),cie=n(Jt,"P",{});var Ltt=s(cie);_Io=r(Ltt,"Examples:"),Ltt.forEach(t),uIo=i(Jt),m(lw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),$ke=i(c),xd=n(c,"H2",{class:!0});var VSe=s(xd);Kb=n(VSe,"A",{id:!0,class:!0,href:!0});var Btt=s(Kb);fie=n(Btt,"SPAN",{});var xtt=s(fie);m(iw.$$.fragment,xtt),xtt.forEach(t),Btt.forEach(t),bIo=i(VSe),mie=n(VSe,"SPAN",{});var ktt=s(mie);vIo=r(ktt,"AutoModelForImageClassification"),ktt.forEach(t),VSe.forEach(t),Ike=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(dw.$$.fragment,pl),TIo=i(pl),kd=n(pl,"P",{});var uW=s(kd);FIo=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gie=n(uW,"CODE",{});var Rtt=s(gie);CIo=r(Rtt,"from_pretrained()"),Rtt.forEach(t),MIo=r(uW,"class method or the "),hie=n(uW,"CODE",{});var Stt=s(hie);EIo=r(Stt,"from_config()"),Stt.forEach(t),yIo=r(uW,`class
method.`),uW.forEach(t),wIo=i(pl),cw=n(pl,"P",{});var zSe=s(cw);AIo=r(zSe,"This class cannot be instantiated directly using "),pie=n(zSe,"CODE",{});var Ptt=s(pie);LIo=r(Ptt,"__init__()"),Ptt.forEach(t),BIo=r(zSe," (throws an error)."),zSe.forEach(t),xIo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(fw.$$.fragment,_l),kIo=i(_l),_ie=n(_l,"P",{});var $tt=s(_ie);RIo=r($tt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$tt.forEach(t),SIo=i(_l),Rd=n(_l,"P",{});var bW=s(Rd);PIo=r(bW,`Note:
Loading a model from its configuration file does `),uie=n(bW,"STRONG",{});var Itt=s(uie);$Io=r(Itt,"not"),Itt.forEach(t),IIo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bie=n(bW,"CODE",{});var Ntt=s(bie);NIo=r(Ntt,"from_pretrained()"),Ntt.forEach(t),jIo=r(bW,"to load the model weights."),bW.forEach(t),DIo=i(_l),vie=n(_l,"P",{});var jtt=s(vie);qIo=r(jtt,"Examples:"),jtt.forEach(t),GIo=i(_l),m(mw.$$.fragment,_l),_l.forEach(t),OIo=i(pl),Ue=n(pl,"DIV",{class:!0});var Yt=s(Ue);m(gw.$$.fragment,Yt),XIo=i(Yt),Tie=n(Yt,"P",{});var Dtt=s(Tie);VIo=r(Dtt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dtt.forEach(t),zIo=i(Yt),on=n(Yt,"P",{});var TE=s(on);WIo=r(TE,"The model class to instantiate is selected based on the "),Fie=n(TE,"CODE",{});var qtt=s(Fie);QIo=r(qtt,"model_type"),qtt.forEach(t),HIo=r(TE,` property of the config object (either
passed as an argument or loaded from `),Cie=n(TE,"CODE",{});var Gtt=s(Cie);UIo=r(Gtt,"pretrained_model_name_or_path"),Gtt.forEach(t),JIo=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(TE,"CODE",{});var Ott=s(Mie);YIo=r(Ott,"pretrained_model_name_or_path"),Ott.forEach(t),KIo=r(TE,":"),TE.forEach(t),ZIo=i(Yt),me=n(Yt,"UL",{});var Fe=s(me);Zb=n(Fe,"LI",{});var B0e=s(Zb);Eie=n(B0e,"STRONG",{});var Xtt=s(Eie);eNo=r(Xtt,"beit"),Xtt.forEach(t),oNo=r(B0e," \u2014 "),wD=n(B0e,"A",{href:!0});var Vtt=s(wD);rNo=r(Vtt,"BeitForImageClassification"),Vtt.forEach(t),tNo=r(B0e," (BEiT model)"),B0e.forEach(t),aNo=i(Fe),ev=n(Fe,"LI",{});var x0e=s(ev);yie=n(x0e,"STRONG",{});var ztt=s(yie);nNo=r(ztt,"convnext"),ztt.forEach(t),sNo=r(x0e," \u2014 "),AD=n(x0e,"A",{href:!0});var Wtt=s(AD);lNo=r(Wtt,"ConvNextForImageClassification"),Wtt.forEach(t),iNo=r(x0e," (ConvNext model)"),x0e.forEach(t),dNo=i(Fe),qs=n(Fe,"LI",{});var J7=s(qs);wie=n(J7,"STRONG",{});var Qtt=s(wie);cNo=r(Qtt,"deit"),Qtt.forEach(t),fNo=r(J7," \u2014 "),LD=n(J7,"A",{href:!0});var Htt=s(LD);mNo=r(Htt,"DeiTForImageClassification"),Htt.forEach(t),gNo=r(J7," or "),BD=n(J7,"A",{href:!0});var Utt=s(BD);hNo=r(Utt,"DeiTForImageClassificationWithTeacher"),Utt.forEach(t),pNo=r(J7," (DeiT model)"),J7.forEach(t),_No=i(Fe),ov=n(Fe,"LI",{});var k0e=s(ov);Aie=n(k0e,"STRONG",{});var Jtt=s(Aie);uNo=r(Jtt,"imagegpt"),Jtt.forEach(t),bNo=r(k0e," \u2014 "),xD=n(k0e,"A",{href:!0});var Ytt=s(xD);vNo=r(Ytt,"ImageGPTForImageClassification"),Ytt.forEach(t),TNo=r(k0e," (ImageGPT model)"),k0e.forEach(t),FNo=i(Fe),ma=n(Fe,"LI",{});var $f=s(ma);Lie=n($f,"STRONG",{});var Ktt=s(Lie);CNo=r(Ktt,"perceiver"),Ktt.forEach(t),MNo=r($f," \u2014 "),kD=n($f,"A",{href:!0});var Ztt=s(kD);ENo=r(Ztt,"PerceiverForImageClassificationLearned"),Ztt.forEach(t),yNo=r($f," or "),RD=n($f,"A",{href:!0});var eat=s(RD);wNo=r(eat,"PerceiverForImageClassificationFourier"),eat.forEach(t),ANo=r($f," or "),SD=n($f,"A",{href:!0});var oat=s(SD);LNo=r(oat,"PerceiverForImageClassificationConvProcessing"),oat.forEach(t),BNo=r($f," (Perceiver model)"),$f.forEach(t),xNo=i(Fe),rv=n(Fe,"LI",{});var R0e=s(rv);Bie=n(R0e,"STRONG",{});var rat=s(Bie);kNo=r(rat,"poolformer"),rat.forEach(t),RNo=r(R0e," \u2014 "),PD=n(R0e,"A",{href:!0});var tat=s(PD);SNo=r(tat,"PoolFormerForImageClassification"),tat.forEach(t),PNo=r(R0e," (PoolFormer model)"),R0e.forEach(t),$No=i(Fe),tv=n(Fe,"LI",{});var S0e=s(tv);xie=n(S0e,"STRONG",{});var aat=s(xie);INo=r(aat,"resnet"),aat.forEach(t),NNo=r(S0e," \u2014 "),$D=n(S0e,"A",{href:!0});var nat=s($D);jNo=r(nat,"ResNetForImageClassification"),nat.forEach(t),DNo=r(S0e," (ResNet model)"),S0e.forEach(t),qNo=i(Fe),av=n(Fe,"LI",{});var P0e=s(av);kie=n(P0e,"STRONG",{});var sat=s(kie);GNo=r(sat,"segformer"),sat.forEach(t),ONo=r(P0e," \u2014 "),ID=n(P0e,"A",{href:!0});var lat=s(ID);XNo=r(lat,"SegformerForImageClassification"),lat.forEach(t),VNo=r(P0e," (SegFormer model)"),P0e.forEach(t),zNo=i(Fe),nv=n(Fe,"LI",{});var $0e=s(nv);Rie=n($0e,"STRONG",{});var iat=s(Rie);WNo=r(iat,"swin"),iat.forEach(t),QNo=r($0e," \u2014 "),ND=n($0e,"A",{href:!0});var dat=s(ND);HNo=r(dat,"SwinForImageClassification"),dat.forEach(t),UNo=r($0e," (Swin model)"),$0e.forEach(t),JNo=i(Fe),sv=n(Fe,"LI",{});var I0e=s(sv);Sie=n(I0e,"STRONG",{});var cat=s(Sie);YNo=r(cat,"van"),cat.forEach(t),KNo=r(I0e," \u2014 "),jD=n(I0e,"A",{href:!0});var fat=s(jD);ZNo=r(fat,"VanForImageClassification"),fat.forEach(t),ejo=r(I0e," (VAN model)"),I0e.forEach(t),ojo=i(Fe),lv=n(Fe,"LI",{});var N0e=s(lv);Pie=n(N0e,"STRONG",{});var mat=s(Pie);rjo=r(mat,"vit"),mat.forEach(t),tjo=r(N0e," \u2014 "),DD=n(N0e,"A",{href:!0});var gat=s(DD);ajo=r(gat,"ViTForImageClassification"),gat.forEach(t),njo=r(N0e," (ViT model)"),N0e.forEach(t),Fe.forEach(t),sjo=i(Yt),iv=n(Yt,"P",{});var j0e=s(iv);ljo=r(j0e,"The model is set in evaluation mode by default using "),$ie=n(j0e,"CODE",{});var hat=s($ie);ijo=r(hat,"model.eval()"),hat.forEach(t),djo=r(j0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iie=n(j0e,"CODE",{});var pat=s(Iie);cjo=r(pat,"model.train()"),pat.forEach(t),j0e.forEach(t),fjo=i(Yt),Nie=n(Yt,"P",{});var _at=s(Nie);mjo=r(_at,"Examples:"),_at.forEach(t),gjo=i(Yt),m(hw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Nke=i(c),Sd=n(c,"H2",{class:!0});var WSe=s(Sd);dv=n(WSe,"A",{id:!0,class:!0,href:!0});var uat=s(dv);jie=n(uat,"SPAN",{});var bat=s(jie);m(pw.$$.fragment,bat),bat.forEach(t),uat.forEach(t),hjo=i(WSe),Die=n(WSe,"SPAN",{});var vat=s(Die);pjo=r(vat,"AutoModelForVision2Seq"),vat.forEach(t),WSe.forEach(t),jke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(_w.$$.fragment,ul),_jo=i(ul),Pd=n(ul,"P",{});var vW=s(Pd);ujo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qie=n(vW,"CODE",{});var Tat=s(qie);bjo=r(Tat,"from_pretrained()"),Tat.forEach(t),vjo=r(vW,"class method or the "),Gie=n(vW,"CODE",{});var Fat=s(Gie);Tjo=r(Fat,"from_config()"),Fat.forEach(t),Fjo=r(vW,`class
method.`),vW.forEach(t),Cjo=i(ul),uw=n(ul,"P",{});var QSe=s(uw);Mjo=r(QSe,"This class cannot be instantiated directly using "),Oie=n(QSe,"CODE",{});var Cat=s(Oie);Ejo=r(Cat,"__init__()"),Cat.forEach(t),yjo=r(QSe," (throws an error)."),QSe.forEach(t),wjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(bw.$$.fragment,bl),Ajo=i(bl),Xie=n(bl,"P",{});var Mat=s(Xie);Ljo=r(Mat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mat.forEach(t),Bjo=i(bl),$d=n(bl,"P",{});var TW=s($d);xjo=r(TW,`Note:
Loading a model from its configuration file does `),Vie=n(TW,"STRONG",{});var Eat=s(Vie);kjo=r(Eat,"not"),Eat.forEach(t),Rjo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),zie=n(TW,"CODE",{});var yat=s(zie);Sjo=r(yat,"from_pretrained()"),yat.forEach(t),Pjo=r(TW,"to load the model weights."),TW.forEach(t),$jo=i(bl),Wie=n(bl,"P",{});var wat=s(Wie);Ijo=r(wat,"Examples:"),wat.forEach(t),Njo=i(bl),m(vw.$$.fragment,bl),bl.forEach(t),jjo=i(ul),Je=n(ul,"DIV",{class:!0});var Kt=s(Je);m(Tw.$$.fragment,Kt),Djo=i(Kt),Qie=n(Kt,"P",{});var Aat=s(Qie);qjo=r(Aat,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Aat.forEach(t),Gjo=i(Kt),rn=n(Kt,"P",{});var FE=s(rn);Ojo=r(FE,"The model class to instantiate is selected based on the "),Hie=n(FE,"CODE",{});var Lat=s(Hie);Xjo=r(Lat,"model_type"),Lat.forEach(t),Vjo=r(FE,` property of the config object (either
passed as an argument or loaded from `),Uie=n(FE,"CODE",{});var Bat=s(Uie);zjo=r(Bat,"pretrained_model_name_or_path"),Bat.forEach(t),Wjo=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(FE,"CODE",{});var xat=s(Jie);Qjo=r(xat,"pretrained_model_name_or_path"),xat.forEach(t),Hjo=r(FE,":"),FE.forEach(t),Ujo=i(Kt),Yie=n(Kt,"UL",{});var kat=s(Yie);cv=n(kat,"LI",{});var D0e=s(cv);Kie=n(D0e,"STRONG",{});var Rat=s(Kie);Jjo=r(Rat,"vision-encoder-decoder"),Rat.forEach(t),Yjo=r(D0e," \u2014 "),qD=n(D0e,"A",{href:!0});var Sat=s(qD);Kjo=r(Sat,"VisionEncoderDecoderModel"),Sat.forEach(t),Zjo=r(D0e," (Vision Encoder decoder model)"),D0e.forEach(t),kat.forEach(t),eDo=i(Kt),fv=n(Kt,"P",{});var q0e=s(fv);oDo=r(q0e,"The model is set in evaluation mode by default using "),Zie=n(q0e,"CODE",{});var Pat=s(Zie);rDo=r(Pat,"model.eval()"),Pat.forEach(t),tDo=r(q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=n(q0e,"CODE",{});var $at=s(ede);aDo=r($at,"model.train()"),$at.forEach(t),q0e.forEach(t),nDo=i(Kt),ode=n(Kt,"P",{});var Iat=s(ode);sDo=r(Iat,"Examples:"),Iat.forEach(t),lDo=i(Kt),m(Fw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),Dke=i(c),Id=n(c,"H2",{class:!0});var HSe=s(Id);mv=n(HSe,"A",{id:!0,class:!0,href:!0});var Nat=s(mv);rde=n(Nat,"SPAN",{});var jat=s(rde);m(Cw.$$.fragment,jat),jat.forEach(t),Nat.forEach(t),iDo=i(HSe),tde=n(HSe,"SPAN",{});var Dat=s(tde);dDo=r(Dat,"AutoModelForAudioClassification"),Dat.forEach(t),HSe.forEach(t),qke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(Mw.$$.fragment,vl),cDo=i(vl),Nd=n(vl,"P",{});var FW=s(Nd);fDo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ade=n(FW,"CODE",{});var qat=s(ade);mDo=r(qat,"from_pretrained()"),qat.forEach(t),gDo=r(FW,"class method or the "),nde=n(FW,"CODE",{});var Gat=s(nde);hDo=r(Gat,"from_config()"),Gat.forEach(t),pDo=r(FW,`class
method.`),FW.forEach(t),_Do=i(vl),Ew=n(vl,"P",{});var USe=s(Ew);uDo=r(USe,"This class cannot be instantiated directly using "),sde=n(USe,"CODE",{});var Oat=s(sde);bDo=r(Oat,"__init__()"),Oat.forEach(t),vDo=r(USe," (throws an error)."),USe.forEach(t),TDo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(yw.$$.fragment,Tl),FDo=i(Tl),lde=n(Tl,"P",{});var Xat=s(lde);CDo=r(Xat,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Xat.forEach(t),MDo=i(Tl),jd=n(Tl,"P",{});var CW=s(jd);EDo=r(CW,`Note:
Loading a model from its configuration file does `),ide=n(CW,"STRONG",{});var Vat=s(ide);yDo=r(Vat,"not"),Vat.forEach(t),wDo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dde=n(CW,"CODE",{});var zat=s(dde);ADo=r(zat,"from_pretrained()"),zat.forEach(t),LDo=r(CW,"to load the model weights."),CW.forEach(t),BDo=i(Tl),cde=n(Tl,"P",{});var Wat=s(cde);xDo=r(Wat,"Examples:"),Wat.forEach(t),kDo=i(Tl),m(ww.$$.fragment,Tl),Tl.forEach(t),RDo=i(vl),Ye=n(vl,"DIV",{class:!0});var Zt=s(Ye);m(Aw.$$.fragment,Zt),SDo=i(Zt),fde=n(Zt,"P",{});var Qat=s(fde);PDo=r(Qat,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Qat.forEach(t),$Do=i(Zt),tn=n(Zt,"P",{});var CE=s(tn);IDo=r(CE,"The model class to instantiate is selected based on the "),mde=n(CE,"CODE",{});var Hat=s(mde);NDo=r(Hat,"model_type"),Hat.forEach(t),jDo=r(CE,` property of the config object (either
passed as an argument or loaded from `),gde=n(CE,"CODE",{});var Uat=s(gde);DDo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),qDo=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=n(CE,"CODE",{});var Jat=s(hde);GDo=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),ODo=r(CE,":"),CE.forEach(t),XDo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);gv=n(qo,"LI",{});var G0e=s(gv);pde=n(G0e,"STRONG",{});var Yat=s(pde);VDo=r(Yat,"data2vec-audio"),Yat.forEach(t),zDo=r(G0e," \u2014 "),GD=n(G0e,"A",{href:!0});var Kat=s(GD);WDo=r(Kat,"Data2VecAudioForSequenceClassification"),Kat.forEach(t),QDo=r(G0e," (Data2VecAudio model)"),G0e.forEach(t),HDo=i(qo),hv=n(qo,"LI",{});var O0e=s(hv);_de=n(O0e,"STRONG",{});var Zat=s(_de);UDo=r(Zat,"hubert"),Zat.forEach(t),JDo=r(O0e," \u2014 "),OD=n(O0e,"A",{href:!0});var ent=s(OD);YDo=r(ent,"HubertForSequenceClassification"),ent.forEach(t),KDo=r(O0e," (Hubert model)"),O0e.forEach(t),ZDo=i(qo),pv=n(qo,"LI",{});var X0e=s(pv);ude=n(X0e,"STRONG",{});var ont=s(ude);eqo=r(ont,"sew"),ont.forEach(t),oqo=r(X0e," \u2014 "),XD=n(X0e,"A",{href:!0});var rnt=s(XD);rqo=r(rnt,"SEWForSequenceClassification"),rnt.forEach(t),tqo=r(X0e," (SEW model)"),X0e.forEach(t),aqo=i(qo),_v=n(qo,"LI",{});var V0e=s(_v);bde=n(V0e,"STRONG",{});var tnt=s(bde);nqo=r(tnt,"sew-d"),tnt.forEach(t),sqo=r(V0e," \u2014 "),VD=n(V0e,"A",{href:!0});var ant=s(VD);lqo=r(ant,"SEWDForSequenceClassification"),ant.forEach(t),iqo=r(V0e," (SEW-D model)"),V0e.forEach(t),dqo=i(qo),uv=n(qo,"LI",{});var z0e=s(uv);vde=n(z0e,"STRONG",{});var nnt=s(vde);cqo=r(nnt,"unispeech"),nnt.forEach(t),fqo=r(z0e," \u2014 "),zD=n(z0e,"A",{href:!0});var snt=s(zD);mqo=r(snt,"UniSpeechForSequenceClassification"),snt.forEach(t),gqo=r(z0e," (UniSpeech model)"),z0e.forEach(t),hqo=i(qo),bv=n(qo,"LI",{});var W0e=s(bv);Tde=n(W0e,"STRONG",{});var lnt=s(Tde);pqo=r(lnt,"unispeech-sat"),lnt.forEach(t),_qo=r(W0e," \u2014 "),WD=n(W0e,"A",{href:!0});var int=s(WD);uqo=r(int,"UniSpeechSatForSequenceClassification"),int.forEach(t),bqo=r(W0e," (UniSpeechSat model)"),W0e.forEach(t),vqo=i(qo),vv=n(qo,"LI",{});var Q0e=s(vv);Fde=n(Q0e,"STRONG",{});var dnt=s(Fde);Tqo=r(dnt,"wav2vec2"),dnt.forEach(t),Fqo=r(Q0e," \u2014 "),QD=n(Q0e,"A",{href:!0});var cnt=s(QD);Cqo=r(cnt,"Wav2Vec2ForSequenceClassification"),cnt.forEach(t),Mqo=r(Q0e," (Wav2Vec2 model)"),Q0e.forEach(t),Eqo=i(qo),Tv=n(qo,"LI",{});var H0e=s(Tv);Cde=n(H0e,"STRONG",{});var fnt=s(Cde);yqo=r(fnt,"wavlm"),fnt.forEach(t),wqo=r(H0e," \u2014 "),HD=n(H0e,"A",{href:!0});var mnt=s(HD);Aqo=r(mnt,"WavLMForSequenceClassification"),mnt.forEach(t),Lqo=r(H0e," (WavLM model)"),H0e.forEach(t),qo.forEach(t),Bqo=i(Zt),Fv=n(Zt,"P",{});var U0e=s(Fv);xqo=r(U0e,"The model is set in evaluation mode by default using "),Mde=n(U0e,"CODE",{});var gnt=s(Mde);kqo=r(gnt,"model.eval()"),gnt.forEach(t),Rqo=r(U0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=n(U0e,"CODE",{});var hnt=s(Ede);Sqo=r(hnt,"model.train()"),hnt.forEach(t),U0e.forEach(t),Pqo=i(Zt),yde=n(Zt,"P",{});var pnt=s(yde);$qo=r(pnt,"Examples:"),pnt.forEach(t),Iqo=i(Zt),m(Lw.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Gke=i(c),Dd=n(c,"H2",{class:!0});var JSe=s(Dd);Cv=n(JSe,"A",{id:!0,class:!0,href:!0});var _nt=s(Cv);wde=n(_nt,"SPAN",{});var unt=s(wde);m(Bw.$$.fragment,unt),unt.forEach(t),_nt.forEach(t),Nqo=i(JSe),Ade=n(JSe,"SPAN",{});var bnt=s(Ade);jqo=r(bnt,"AutoModelForAudioFrameClassification"),bnt.forEach(t),JSe.forEach(t),Oke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(xw.$$.fragment,Fl),Dqo=i(Fl),qd=n(Fl,"P",{});var MW=s(qd);qqo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Lde=n(MW,"CODE",{});var vnt=s(Lde);Gqo=r(vnt,"from_pretrained()"),vnt.forEach(t),Oqo=r(MW,"class method or the "),Bde=n(MW,"CODE",{});var Tnt=s(Bde);Xqo=r(Tnt,"from_config()"),Tnt.forEach(t),Vqo=r(MW,`class
method.`),MW.forEach(t),zqo=i(Fl),kw=n(Fl,"P",{});var YSe=s(kw);Wqo=r(YSe,"This class cannot be instantiated directly using "),xde=n(YSe,"CODE",{});var Fnt=s(xde);Qqo=r(Fnt,"__init__()"),Fnt.forEach(t),Hqo=r(YSe," (throws an error)."),YSe.forEach(t),Uqo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Rw.$$.fragment,Cl),Jqo=i(Cl),kde=n(Cl,"P",{});var Cnt=s(kde);Yqo=r(Cnt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Cnt.forEach(t),Kqo=i(Cl),Gd=n(Cl,"P",{});var EW=s(Gd);Zqo=r(EW,`Note:
Loading a model from its configuration file does `),Rde=n(EW,"STRONG",{});var Mnt=s(Rde);eGo=r(Mnt,"not"),Mnt.forEach(t),oGo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sde=n(EW,"CODE",{});var Ent=s(Sde);rGo=r(Ent,"from_pretrained()"),Ent.forEach(t),tGo=r(EW,"to load the model weights."),EW.forEach(t),aGo=i(Cl),Pde=n(Cl,"P",{});var ynt=s(Pde);nGo=r(ynt,"Examples:"),ynt.forEach(t),sGo=i(Cl),m(Sw.$$.fragment,Cl),Cl.forEach(t),lGo=i(Fl),Ke=n(Fl,"DIV",{class:!0});var ea=s(Ke);m(Pw.$$.fragment,ea),iGo=i(ea),$de=n(ea,"P",{});var wnt=s($de);dGo=r(wnt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wnt.forEach(t),cGo=i(ea),an=n(ea,"P",{});var ME=s(an);fGo=r(ME,"The model class to instantiate is selected based on the "),Ide=n(ME,"CODE",{});var Ant=s(Ide);mGo=r(Ant,"model_type"),Ant.forEach(t),gGo=r(ME,` property of the config object (either
passed as an argument or loaded from `),Nde=n(ME,"CODE",{});var Lnt=s(Nde);hGo=r(Lnt,"pretrained_model_name_or_path"),Lnt.forEach(t),pGo=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(ME,"CODE",{});var Bnt=s(jde);_Go=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),uGo=r(ME,":"),ME.forEach(t),bGo=i(ea),nn=n(ea,"UL",{});var EE=s(nn);Mv=n(EE,"LI",{});var J0e=s(Mv);Dde=n(J0e,"STRONG",{});var xnt=s(Dde);vGo=r(xnt,"data2vec-audio"),xnt.forEach(t),TGo=r(J0e," \u2014 "),UD=n(J0e,"A",{href:!0});var knt=s(UD);FGo=r(knt,"Data2VecAudioForAudioFrameClassification"),knt.forEach(t),CGo=r(J0e," (Data2VecAudio model)"),J0e.forEach(t),MGo=i(EE),Ev=n(EE,"LI",{});var Y0e=s(Ev);qde=n(Y0e,"STRONG",{});var Rnt=s(qde);EGo=r(Rnt,"unispeech-sat"),Rnt.forEach(t),yGo=r(Y0e," \u2014 "),JD=n(Y0e,"A",{href:!0});var Snt=s(JD);wGo=r(Snt,"UniSpeechSatForAudioFrameClassification"),Snt.forEach(t),AGo=r(Y0e," (UniSpeechSat model)"),Y0e.forEach(t),LGo=i(EE),yv=n(EE,"LI",{});var K0e=s(yv);Gde=n(K0e,"STRONG",{});var Pnt=s(Gde);BGo=r(Pnt,"wav2vec2"),Pnt.forEach(t),xGo=r(K0e," \u2014 "),YD=n(K0e,"A",{href:!0});var $nt=s(YD);kGo=r($nt,"Wav2Vec2ForAudioFrameClassification"),$nt.forEach(t),RGo=r(K0e," (Wav2Vec2 model)"),K0e.forEach(t),SGo=i(EE),wv=n(EE,"LI",{});var Z0e=s(wv);Ode=n(Z0e,"STRONG",{});var Int=s(Ode);PGo=r(Int,"wavlm"),Int.forEach(t),$Go=r(Z0e," \u2014 "),KD=n(Z0e,"A",{href:!0});var Nnt=s(KD);IGo=r(Nnt,"WavLMForAudioFrameClassification"),Nnt.forEach(t),NGo=r(Z0e," (WavLM model)"),Z0e.forEach(t),EE.forEach(t),jGo=i(ea),Av=n(ea,"P",{});var eLe=s(Av);DGo=r(eLe,"The model is set in evaluation mode by default using "),Xde=n(eLe,"CODE",{});var jnt=s(Xde);qGo=r(jnt,"model.eval()"),jnt.forEach(t),GGo=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vde=n(eLe,"CODE",{});var Dnt=s(Vde);OGo=r(Dnt,"model.train()"),Dnt.forEach(t),eLe.forEach(t),XGo=i(ea),zde=n(ea,"P",{});var qnt=s(zde);VGo=r(qnt,"Examples:"),qnt.forEach(t),zGo=i(ea),m($w.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Xke=i(c),Od=n(c,"H2",{class:!0});var KSe=s(Od);Lv=n(KSe,"A",{id:!0,class:!0,href:!0});var Gnt=s(Lv);Wde=n(Gnt,"SPAN",{});var Ont=s(Wde);m(Iw.$$.fragment,Ont),Ont.forEach(t),Gnt.forEach(t),WGo=i(KSe),Qde=n(KSe,"SPAN",{});var Xnt=s(Qde);QGo=r(Xnt,"AutoModelForCTC"),Xnt.forEach(t),KSe.forEach(t),Vke=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Nw.$$.fragment,Ml),HGo=i(Ml),Xd=n(Ml,"P",{});var yW=s(Xd);UGo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Hde=n(yW,"CODE",{});var Vnt=s(Hde);JGo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),YGo=r(yW,"class method or the "),Ude=n(yW,"CODE",{});var znt=s(Ude);KGo=r(znt,"from_config()"),znt.forEach(t),ZGo=r(yW,`class
method.`),yW.forEach(t),eOo=i(Ml),jw=n(Ml,"P",{});var ZSe=s(jw);oOo=r(ZSe,"This class cannot be instantiated directly using "),Jde=n(ZSe,"CODE",{});var Wnt=s(Jde);rOo=r(Wnt,"__init__()"),Wnt.forEach(t),tOo=r(ZSe," (throws an error)."),ZSe.forEach(t),aOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Dw.$$.fragment,El),nOo=i(El),Yde=n(El,"P",{});var Qnt=s(Yde);sOo=r(Qnt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Qnt.forEach(t),lOo=i(El),Vd=n(El,"P",{});var wW=s(Vd);iOo=r(wW,`Note:
Loading a model from its configuration file does `),Kde=n(wW,"STRONG",{});var Hnt=s(Kde);dOo=r(Hnt,"not"),Hnt.forEach(t),cOo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=n(wW,"CODE",{});var Unt=s(Zde);fOo=r(Unt,"from_pretrained()"),Unt.forEach(t),mOo=r(wW,"to load the model weights."),wW.forEach(t),gOo=i(El),ece=n(El,"P",{});var Jnt=s(ece);hOo=r(Jnt,"Examples:"),Jnt.forEach(t),pOo=i(El),m(qw.$$.fragment,El),El.forEach(t),_Oo=i(Ml),Ze=n(Ml,"DIV",{class:!0});var oa=s(Ze);m(Gw.$$.fragment,oa),uOo=i(oa),oce=n(oa,"P",{});var Ynt=s(oce);bOo=r(Ynt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ynt.forEach(t),vOo=i(oa),sn=n(oa,"P",{});var yE=s(sn);TOo=r(yE,"The model class to instantiate is selected based on the "),rce=n(yE,"CODE",{});var Knt=s(rce);FOo=r(Knt,"model_type"),Knt.forEach(t),COo=r(yE,` property of the config object (either
passed as an argument or loaded from `),tce=n(yE,"CODE",{});var Znt=s(tce);MOo=r(Znt,"pretrained_model_name_or_path"),Znt.forEach(t),EOo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=n(yE,"CODE",{});var est=s(ace);yOo=r(est,"pretrained_model_name_or_path"),est.forEach(t),wOo=r(yE,":"),yE.forEach(t),AOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Bv=n(Go,"LI",{});var oLe=s(Bv);nce=n(oLe,"STRONG",{});var ost=s(nce);LOo=r(ost,"data2vec-audio"),ost.forEach(t),BOo=r(oLe," \u2014 "),ZD=n(oLe,"A",{href:!0});var rst=s(ZD);xOo=r(rst,"Data2VecAudioForCTC"),rst.forEach(t),kOo=r(oLe," (Data2VecAudio model)"),oLe.forEach(t),ROo=i(Go),xv=n(Go,"LI",{});var rLe=s(xv);sce=n(rLe,"STRONG",{});var tst=s(sce);SOo=r(tst,"hubert"),tst.forEach(t),POo=r(rLe," \u2014 "),eq=n(rLe,"A",{href:!0});var ast=s(eq);$Oo=r(ast,"HubertForCTC"),ast.forEach(t),IOo=r(rLe," (Hubert model)"),rLe.forEach(t),NOo=i(Go),kv=n(Go,"LI",{});var tLe=s(kv);lce=n(tLe,"STRONG",{});var nst=s(lce);jOo=r(nst,"sew"),nst.forEach(t),DOo=r(tLe," \u2014 "),oq=n(tLe,"A",{href:!0});var sst=s(oq);qOo=r(sst,"SEWForCTC"),sst.forEach(t),GOo=r(tLe," (SEW model)"),tLe.forEach(t),OOo=i(Go),Rv=n(Go,"LI",{});var aLe=s(Rv);ice=n(aLe,"STRONG",{});var lst=s(ice);XOo=r(lst,"sew-d"),lst.forEach(t),VOo=r(aLe," \u2014 "),rq=n(aLe,"A",{href:!0});var ist=s(rq);zOo=r(ist,"SEWDForCTC"),ist.forEach(t),WOo=r(aLe," (SEW-D model)"),aLe.forEach(t),QOo=i(Go),Sv=n(Go,"LI",{});var nLe=s(Sv);dce=n(nLe,"STRONG",{});var dst=s(dce);HOo=r(dst,"unispeech"),dst.forEach(t),UOo=r(nLe," \u2014 "),tq=n(nLe,"A",{href:!0});var cst=s(tq);JOo=r(cst,"UniSpeechForCTC"),cst.forEach(t),YOo=r(nLe," (UniSpeech model)"),nLe.forEach(t),KOo=i(Go),Pv=n(Go,"LI",{});var sLe=s(Pv);cce=n(sLe,"STRONG",{});var fst=s(cce);ZOo=r(fst,"unispeech-sat"),fst.forEach(t),eXo=r(sLe," \u2014 "),aq=n(sLe,"A",{href:!0});var mst=s(aq);oXo=r(mst,"UniSpeechSatForCTC"),mst.forEach(t),rXo=r(sLe," (UniSpeechSat model)"),sLe.forEach(t),tXo=i(Go),$v=n(Go,"LI",{});var lLe=s($v);fce=n(lLe,"STRONG",{});var gst=s(fce);aXo=r(gst,"wav2vec2"),gst.forEach(t),nXo=r(lLe," \u2014 "),nq=n(lLe,"A",{href:!0});var hst=s(nq);sXo=r(hst,"Wav2Vec2ForCTC"),hst.forEach(t),lXo=r(lLe," (Wav2Vec2 model)"),lLe.forEach(t),iXo=i(Go),Iv=n(Go,"LI",{});var iLe=s(Iv);mce=n(iLe,"STRONG",{});var pst=s(mce);dXo=r(pst,"wavlm"),pst.forEach(t),cXo=r(iLe," \u2014 "),sq=n(iLe,"A",{href:!0});var _st=s(sq);fXo=r(_st,"WavLMForCTC"),_st.forEach(t),mXo=r(iLe," (WavLM model)"),iLe.forEach(t),Go.forEach(t),gXo=i(oa),Nv=n(oa,"P",{});var dLe=s(Nv);hXo=r(dLe,"The model is set in evaluation mode by default using "),gce=n(dLe,"CODE",{});var ust=s(gce);pXo=r(ust,"model.eval()"),ust.forEach(t),_Xo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=n(dLe,"CODE",{});var bst=s(hce);uXo=r(bst,"model.train()"),bst.forEach(t),dLe.forEach(t),bXo=i(oa),pce=n(oa,"P",{});var vst=s(pce);vXo=r(vst,"Examples:"),vst.forEach(t),TXo=i(oa),m(Ow.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),zke=i(c),zd=n(c,"H2",{class:!0});var ePe=s(zd);jv=n(ePe,"A",{id:!0,class:!0,href:!0});var Tst=s(jv);_ce=n(Tst,"SPAN",{});var Fst=s(_ce);m(Xw.$$.fragment,Fst),Fst.forEach(t),Tst.forEach(t),FXo=i(ePe),uce=n(ePe,"SPAN",{});var Cst=s(uce);CXo=r(Cst,"AutoModelForSpeechSeq2Seq"),Cst.forEach(t),ePe.forEach(t),Wke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Vw.$$.fragment,yl),MXo=i(yl),Wd=n(yl,"P",{});var AW=s(Wd);EXo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bce=n(AW,"CODE",{});var Mst=s(bce);yXo=r(Mst,"from_pretrained()"),Mst.forEach(t),wXo=r(AW,"class method or the "),vce=n(AW,"CODE",{});var Est=s(vce);AXo=r(Est,"from_config()"),Est.forEach(t),LXo=r(AW,`class
method.`),AW.forEach(t),BXo=i(yl),zw=n(yl,"P",{});var oPe=s(zw);xXo=r(oPe,"This class cannot be instantiated directly using "),Tce=n(oPe,"CODE",{});var yst=s(Tce);kXo=r(yst,"__init__()"),yst.forEach(t),RXo=r(oPe," (throws an error)."),oPe.forEach(t),SXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Ww.$$.fragment,wl),PXo=i(wl),Fce=n(wl,"P",{});var wst=s(Fce);$Xo=r(wst,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wst.forEach(t),IXo=i(wl),Qd=n(wl,"P",{});var LW=s(Qd);NXo=r(LW,`Note:
Loading a model from its configuration file does `),Cce=n(LW,"STRONG",{});var Ast=s(Cce);jXo=r(Ast,"not"),Ast.forEach(t),DXo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mce=n(LW,"CODE",{});var Lst=s(Mce);qXo=r(Lst,"from_pretrained()"),Lst.forEach(t),GXo=r(LW,"to load the model weights."),LW.forEach(t),OXo=i(wl),Ece=n(wl,"P",{});var Bst=s(Ece);XXo=r(Bst,"Examples:"),Bst.forEach(t),VXo=i(wl),m(Qw.$$.fragment,wl),wl.forEach(t),zXo=i(yl),eo=n(yl,"DIV",{class:!0});var ra=s(eo);m(Hw.$$.fragment,ra),WXo=i(ra),yce=n(ra,"P",{});var xst=s(yce);QXo=r(xst,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xst.forEach(t),HXo=i(ra),ln=n(ra,"P",{});var wE=s(ln);UXo=r(wE,"The model class to instantiate is selected based on the "),wce=n(wE,"CODE",{});var kst=s(wce);JXo=r(kst,"model_type"),kst.forEach(t),YXo=r(wE,` property of the config object (either
passed as an argument or loaded from `),Ace=n(wE,"CODE",{});var Rst=s(Ace);KXo=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),ZXo=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=n(wE,"CODE",{});var Sst=s(Lce);eVo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),oVo=r(wE,":"),wE.forEach(t),rVo=i(ra),Uw=n(ra,"UL",{});var rPe=s(Uw);Dv=n(rPe,"LI",{});var cLe=s(Dv);Bce=n(cLe,"STRONG",{});var Pst=s(Bce);tVo=r(Pst,"speech-encoder-decoder"),Pst.forEach(t),aVo=r(cLe," \u2014 "),lq=n(cLe,"A",{href:!0});var $st=s(lq);nVo=r($st,"SpeechEncoderDecoderModel"),$st.forEach(t),sVo=r(cLe," (Speech Encoder decoder model)"),cLe.forEach(t),lVo=i(rPe),qv=n(rPe,"LI",{});var fLe=s(qv);xce=n(fLe,"STRONG",{});var Ist=s(xce);iVo=r(Ist,"speech_to_text"),Ist.forEach(t),dVo=r(fLe," \u2014 "),iq=n(fLe,"A",{href:!0});var Nst=s(iq);cVo=r(Nst,"Speech2TextForConditionalGeneration"),Nst.forEach(t),fVo=r(fLe," (Speech2Text model)"),fLe.forEach(t),rPe.forEach(t),mVo=i(ra),Gv=n(ra,"P",{});var mLe=s(Gv);gVo=r(mLe,"The model is set in evaluation mode by default using "),kce=n(mLe,"CODE",{});var jst=s(kce);hVo=r(jst,"model.eval()"),jst.forEach(t),pVo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=n(mLe,"CODE",{});var Dst=s(Rce);_Vo=r(Dst,"model.train()"),Dst.forEach(t),mLe.forEach(t),uVo=i(ra),Sce=n(ra,"P",{});var qst=s(Sce);bVo=r(qst,"Examples:"),qst.forEach(t),vVo=i(ra),m(Jw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Qke=i(c),Hd=n(c,"H2",{class:!0});var tPe=s(Hd);Ov=n(tPe,"A",{id:!0,class:!0,href:!0});var Gst=s(Ov);Pce=n(Gst,"SPAN",{});var Ost=s(Pce);m(Yw.$$.fragment,Ost),Ost.forEach(t),Gst.forEach(t),TVo=i(tPe),$ce=n(tPe,"SPAN",{});var Xst=s($ce);FVo=r(Xst,"AutoModelForAudioXVector"),Xst.forEach(t),tPe.forEach(t),Hke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(Kw.$$.fragment,Al),CVo=i(Al),Ud=n(Al,"P",{});var BW=s(Ud);MVo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Ice=n(BW,"CODE",{});var Vst=s(Ice);EVo=r(Vst,"from_pretrained()"),Vst.forEach(t),yVo=r(BW,"class method or the "),Nce=n(BW,"CODE",{});var zst=s(Nce);wVo=r(zst,"from_config()"),zst.forEach(t),AVo=r(BW,`class
method.`),BW.forEach(t),LVo=i(Al),Zw=n(Al,"P",{});var aPe=s(Zw);BVo=r(aPe,"This class cannot be instantiated directly using "),jce=n(aPe,"CODE",{});var Wst=s(jce);xVo=r(Wst,"__init__()"),Wst.forEach(t),kVo=r(aPe," (throws an error)."),aPe.forEach(t),RVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(eA.$$.fragment,Ll),SVo=i(Ll),Dce=n(Ll,"P",{});var Qst=s(Dce);PVo=r(Qst,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Qst.forEach(t),$Vo=i(Ll),Jd=n(Ll,"P",{});var xW=s(Jd);IVo=r(xW,`Note:
Loading a model from its configuration file does `),qce=n(xW,"STRONG",{});var Hst=s(qce);NVo=r(Hst,"not"),Hst.forEach(t),jVo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gce=n(xW,"CODE",{});var Ust=s(Gce);DVo=r(Ust,"from_pretrained()"),Ust.forEach(t),qVo=r(xW,"to load the model weights."),xW.forEach(t),GVo=i(Ll),Oce=n(Ll,"P",{});var Jst=s(Oce);OVo=r(Jst,"Examples:"),Jst.forEach(t),XVo=i(Ll),m(oA.$$.fragment,Ll),Ll.forEach(t),VVo=i(Al),oo=n(Al,"DIV",{class:!0});var ta=s(oo);m(rA.$$.fragment,ta),zVo=i(ta),Xce=n(ta,"P",{});var Yst=s(Xce);WVo=r(Yst,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Yst.forEach(t),QVo=i(ta),dn=n(ta,"P",{});var AE=s(dn);HVo=r(AE,"The model class to instantiate is selected based on the "),Vce=n(AE,"CODE",{});var Kst=s(Vce);UVo=r(Kst,"model_type"),Kst.forEach(t),JVo=r(AE,` property of the config object (either
passed as an argument or loaded from `),zce=n(AE,"CODE",{});var Zst=s(zce);YVo=r(Zst,"pretrained_model_name_or_path"),Zst.forEach(t),KVo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=n(AE,"CODE",{});var elt=s(Wce);ZVo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),ezo=r(AE,":"),AE.forEach(t),ozo=i(ta),cn=n(ta,"UL",{});var LE=s(cn);Xv=n(LE,"LI",{});var gLe=s(Xv);Qce=n(gLe,"STRONG",{});var olt=s(Qce);rzo=r(olt,"data2vec-audio"),olt.forEach(t),tzo=r(gLe," \u2014 "),dq=n(gLe,"A",{href:!0});var rlt=s(dq);azo=r(rlt,"Data2VecAudioForXVector"),rlt.forEach(t),nzo=r(gLe," (Data2VecAudio model)"),gLe.forEach(t),szo=i(LE),Vv=n(LE,"LI",{});var hLe=s(Vv);Hce=n(hLe,"STRONG",{});var tlt=s(Hce);lzo=r(tlt,"unispeech-sat"),tlt.forEach(t),izo=r(hLe," \u2014 "),cq=n(hLe,"A",{href:!0});var alt=s(cq);dzo=r(alt,"UniSpeechSatForXVector"),alt.forEach(t),czo=r(hLe," (UniSpeechSat model)"),hLe.forEach(t),fzo=i(LE),zv=n(LE,"LI",{});var pLe=s(zv);Uce=n(pLe,"STRONG",{});var nlt=s(Uce);mzo=r(nlt,"wav2vec2"),nlt.forEach(t),gzo=r(pLe," \u2014 "),fq=n(pLe,"A",{href:!0});var slt=s(fq);hzo=r(slt,"Wav2Vec2ForXVector"),slt.forEach(t),pzo=r(pLe," (Wav2Vec2 model)"),pLe.forEach(t),_zo=i(LE),Wv=n(LE,"LI",{});var _Le=s(Wv);Jce=n(_Le,"STRONG",{});var llt=s(Jce);uzo=r(llt,"wavlm"),llt.forEach(t),bzo=r(_Le," \u2014 "),mq=n(_Le,"A",{href:!0});var ilt=s(mq);vzo=r(ilt,"WavLMForXVector"),ilt.forEach(t),Tzo=r(_Le," (WavLM model)"),_Le.forEach(t),LE.forEach(t),Fzo=i(ta),Qv=n(ta,"P",{});var uLe=s(Qv);Czo=r(uLe,"The model is set in evaluation mode by default using "),Yce=n(uLe,"CODE",{});var dlt=s(Yce);Mzo=r(dlt,"model.eval()"),dlt.forEach(t),Ezo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kce=n(uLe,"CODE",{});var clt=s(Kce);yzo=r(clt,"model.train()"),clt.forEach(t),uLe.forEach(t),wzo=i(ta),Zce=n(ta,"P",{});var flt=s(Zce);Azo=r(flt,"Examples:"),flt.forEach(t),Lzo=i(ta),m(tA.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Uke=i(c),Yd=n(c,"H2",{class:!0});var nPe=s(Yd);Hv=n(nPe,"A",{id:!0,class:!0,href:!0});var mlt=s(Hv);efe=n(mlt,"SPAN",{});var glt=s(efe);m(aA.$$.fragment,glt),glt.forEach(t),mlt.forEach(t),Bzo=i(nPe),ofe=n(nPe,"SPAN",{});var hlt=s(ofe);xzo=r(hlt,"AutoModelForMaskedImageModeling"),hlt.forEach(t),nPe.forEach(t),Jke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(nA.$$.fragment,Bl),kzo=i(Bl),Kd=n(Bl,"P",{});var kW=s(Kd);Rzo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rfe=n(kW,"CODE",{});var plt=s(rfe);Szo=r(plt,"from_pretrained()"),plt.forEach(t),Pzo=r(kW,"class method or the "),tfe=n(kW,"CODE",{});var _lt=s(tfe);$zo=r(_lt,"from_config()"),_lt.forEach(t),Izo=r(kW,`class
method.`),kW.forEach(t),Nzo=i(Bl),sA=n(Bl,"P",{});var sPe=s(sA);jzo=r(sPe,"This class cannot be instantiated directly using "),afe=n(sPe,"CODE",{});var ult=s(afe);Dzo=r(ult,"__init__()"),ult.forEach(t),qzo=r(sPe," (throws an error)."),sPe.forEach(t),Gzo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(lA.$$.fragment,xl),Ozo=i(xl),nfe=n(xl,"P",{});var blt=s(nfe);Xzo=r(blt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),blt.forEach(t),Vzo=i(xl),Zd=n(xl,"P",{});var RW=s(Zd);zzo=r(RW,`Note:
Loading a model from its configuration file does `),sfe=n(RW,"STRONG",{});var vlt=s(sfe);Wzo=r(vlt,"not"),vlt.forEach(t),Qzo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),lfe=n(RW,"CODE",{});var Tlt=s(lfe);Hzo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),Uzo=r(RW,"to load the model weights."),RW.forEach(t),Jzo=i(xl),ife=n(xl,"P",{});var Flt=s(ife);Yzo=r(Flt,"Examples:"),Flt.forEach(t),Kzo=i(xl),m(iA.$$.fragment,xl),xl.forEach(t),Zzo=i(Bl),ro=n(Bl,"DIV",{class:!0});var aa=s(ro);m(dA.$$.fragment,aa),eWo=i(aa),dfe=n(aa,"P",{});var Clt=s(dfe);oWo=r(Clt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Clt.forEach(t),rWo=i(aa),fn=n(aa,"P",{});var BE=s(fn);tWo=r(BE,"The model class to instantiate is selected based on the "),cfe=n(BE,"CODE",{});var Mlt=s(cfe);aWo=r(Mlt,"model_type"),Mlt.forEach(t),nWo=r(BE,` property of the config object (either
passed as an argument or loaded from `),ffe=n(BE,"CODE",{});var Elt=s(ffe);sWo=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),lWo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(BE,"CODE",{});var ylt=s(mfe);iWo=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),dWo=r(BE,":"),BE.forEach(t),cWo=i(aa),ec=n(aa,"UL",{});var SW=s(ec);Uv=n(SW,"LI",{});var bLe=s(Uv);gfe=n(bLe,"STRONG",{});var wlt=s(gfe);fWo=r(wlt,"deit"),wlt.forEach(t),mWo=r(bLe," \u2014 "),gq=n(bLe,"A",{href:!0});var Alt=s(gq);gWo=r(Alt,"DeiTForMaskedImageModeling"),Alt.forEach(t),hWo=r(bLe," (DeiT model)"),bLe.forEach(t),pWo=i(SW),Jv=n(SW,"LI",{});var vLe=s(Jv);hfe=n(vLe,"STRONG",{});var Llt=s(hfe);_Wo=r(Llt,"swin"),Llt.forEach(t),uWo=r(vLe," \u2014 "),hq=n(vLe,"A",{href:!0});var Blt=s(hq);bWo=r(Blt,"SwinForMaskedImageModeling"),Blt.forEach(t),vWo=r(vLe," (Swin model)"),vLe.forEach(t),TWo=i(SW),Yv=n(SW,"LI",{});var TLe=s(Yv);pfe=n(TLe,"STRONG",{});var xlt=s(pfe);FWo=r(xlt,"vit"),xlt.forEach(t),CWo=r(TLe," \u2014 "),pq=n(TLe,"A",{href:!0});var klt=s(pq);MWo=r(klt,"ViTForMaskedImageModeling"),klt.forEach(t),EWo=r(TLe," (ViT model)"),TLe.forEach(t),SW.forEach(t),yWo=i(aa),Kv=n(aa,"P",{});var FLe=s(Kv);wWo=r(FLe,"The model is set in evaluation mode by default using "),_fe=n(FLe,"CODE",{});var Rlt=s(_fe);AWo=r(Rlt,"model.eval()"),Rlt.forEach(t),LWo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(FLe,"CODE",{});var Slt=s(ufe);BWo=r(Slt,"model.train()"),Slt.forEach(t),FLe.forEach(t),xWo=i(aa),bfe=n(aa,"P",{});var Plt=s(bfe);kWo=r(Plt,"Examples:"),Plt.forEach(t),RWo=i(aa),m(cA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Yke=i(c),oc=n(c,"H2",{class:!0});var lPe=s(oc);Zv=n(lPe,"A",{id:!0,class:!0,href:!0});var $lt=s(Zv);vfe=n($lt,"SPAN",{});var Ilt=s(vfe);m(fA.$$.fragment,Ilt),Ilt.forEach(t),$lt.forEach(t),SWo=i(lPe),Tfe=n(lPe,"SPAN",{});var Nlt=s(Tfe);PWo=r(Nlt,"AutoModelForObjectDetection"),Nlt.forEach(t),lPe.forEach(t),Kke=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(mA.$$.fragment,kl),$Wo=i(kl),rc=n(kl,"P",{});var PW=s(rc);IWo=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Ffe=n(PW,"CODE",{});var jlt=s(Ffe);NWo=r(jlt,"from_pretrained()"),jlt.forEach(t),jWo=r(PW,"class method or the "),Cfe=n(PW,"CODE",{});var Dlt=s(Cfe);DWo=r(Dlt,"from_config()"),Dlt.forEach(t),qWo=r(PW,`class
method.`),PW.forEach(t),GWo=i(kl),gA=n(kl,"P",{});var iPe=s(gA);OWo=r(iPe,"This class cannot be instantiated directly using "),Mfe=n(iPe,"CODE",{});var qlt=s(Mfe);XWo=r(qlt,"__init__()"),qlt.forEach(t),VWo=r(iPe," (throws an error)."),iPe.forEach(t),zWo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(hA.$$.fragment,Rl),WWo=i(Rl),Efe=n(Rl,"P",{});var Glt=s(Efe);QWo=r(Glt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Glt.forEach(t),HWo=i(Rl),tc=n(Rl,"P",{});var $W=s(tc);UWo=r($W,`Note:
Loading a model from its configuration file does `),yfe=n($W,"STRONG",{});var Olt=s(yfe);JWo=r(Olt,"not"),Olt.forEach(t),YWo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=n($W,"CODE",{});var Xlt=s(wfe);KWo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),ZWo=r($W,"to load the model weights."),$W.forEach(t),eQo=i(Rl),Afe=n(Rl,"P",{});var Vlt=s(Afe);oQo=r(Vlt,"Examples:"),Vlt.forEach(t),rQo=i(Rl),m(pA.$$.fragment,Rl),Rl.forEach(t),tQo=i(kl),to=n(kl,"DIV",{class:!0});var na=s(to);m(_A.$$.fragment,na),aQo=i(na),Lfe=n(na,"P",{});var zlt=s(Lfe);nQo=r(zlt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zlt.forEach(t),sQo=i(na),mn=n(na,"P",{});var xE=s(mn);lQo=r(xE,"The model class to instantiate is selected based on the "),Bfe=n(xE,"CODE",{});var Wlt=s(Bfe);iQo=r(Wlt,"model_type"),Wlt.forEach(t),dQo=r(xE,` property of the config object (either
passed as an argument or loaded from `),xfe=n(xE,"CODE",{});var Qlt=s(xfe);cQo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),fQo=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(xE,"CODE",{});var Hlt=s(kfe);mQo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),gQo=r(xE,":"),xE.forEach(t),hQo=i(na),Rfe=n(na,"UL",{});var Ult=s(Rfe);e6=n(Ult,"LI",{});var CLe=s(e6);Sfe=n(CLe,"STRONG",{});var Jlt=s(Sfe);pQo=r(Jlt,"detr"),Jlt.forEach(t),_Qo=r(CLe," \u2014 "),_q=n(CLe,"A",{href:!0});var Ylt=s(_q);uQo=r(Ylt,"DetrForObjectDetection"),Ylt.forEach(t),bQo=r(CLe," (DETR model)"),CLe.forEach(t),Ult.forEach(t),vQo=i(na),o6=n(na,"P",{});var MLe=s(o6);TQo=r(MLe,"The model is set in evaluation mode by default using "),Pfe=n(MLe,"CODE",{});var Klt=s(Pfe);FQo=r(Klt,"model.eval()"),Klt.forEach(t),CQo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=n(MLe,"CODE",{});var Zlt=s($fe);MQo=r(Zlt,"model.train()"),Zlt.forEach(t),MLe.forEach(t),EQo=i(na),Ife=n(na,"P",{});var eit=s(Ife);yQo=r(eit,"Examples:"),eit.forEach(t),wQo=i(na),m(uA.$$.fragment,na),na.forEach(t),kl.forEach(t),Zke=i(c),ac=n(c,"H2",{class:!0});var dPe=s(ac);r6=n(dPe,"A",{id:!0,class:!0,href:!0});var oit=s(r6);Nfe=n(oit,"SPAN",{});var rit=s(Nfe);m(bA.$$.fragment,rit),rit.forEach(t),oit.forEach(t),AQo=i(dPe),jfe=n(dPe,"SPAN",{});var tit=s(jfe);LQo=r(tit,"AutoModelForImageSegmentation"),tit.forEach(t),dPe.forEach(t),eRe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(vA.$$.fragment,Sl),BQo=i(Sl),nc=n(Sl,"P",{});var IW=s(nc);xQo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Dfe=n(IW,"CODE",{});var ait=s(Dfe);kQo=r(ait,"from_pretrained()"),ait.forEach(t),RQo=r(IW,"class method or the "),qfe=n(IW,"CODE",{});var nit=s(qfe);SQo=r(nit,"from_config()"),nit.forEach(t),PQo=r(IW,`class
method.`),IW.forEach(t),$Qo=i(Sl),TA=n(Sl,"P",{});var cPe=s(TA);IQo=r(cPe,"This class cannot be instantiated directly using "),Gfe=n(cPe,"CODE",{});var sit=s(Gfe);NQo=r(sit,"__init__()"),sit.forEach(t),jQo=r(cPe," (throws an error)."),cPe.forEach(t),DQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(FA.$$.fragment,Pl),qQo=i(Pl),Ofe=n(Pl,"P",{});var lit=s(Ofe);GQo=r(lit,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),lit.forEach(t),OQo=i(Pl),sc=n(Pl,"P",{});var NW=s(sc);XQo=r(NW,`Note:
Loading a model from its configuration file does `),Xfe=n(NW,"STRONG",{});var iit=s(Xfe);VQo=r(iit,"not"),iit.forEach(t),zQo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vfe=n(NW,"CODE",{});var dit=s(Vfe);WQo=r(dit,"from_pretrained()"),dit.forEach(t),QQo=r(NW,"to load the model weights."),NW.forEach(t),HQo=i(Pl),zfe=n(Pl,"P",{});var cit=s(zfe);UQo=r(cit,"Examples:"),cit.forEach(t),JQo=i(Pl),m(CA.$$.fragment,Pl),Pl.forEach(t),YQo=i(Sl),ao=n(Sl,"DIV",{class:!0});var sa=s(ao);m(MA.$$.fragment,sa),KQo=i(sa),Wfe=n(sa,"P",{});var fit=s(Wfe);ZQo=r(fit,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fit.forEach(t),eHo=i(sa),gn=n(sa,"P",{});var kE=s(gn);oHo=r(kE,"The model class to instantiate is selected based on the "),Qfe=n(kE,"CODE",{});var mit=s(Qfe);rHo=r(mit,"model_type"),mit.forEach(t),tHo=r(kE,` property of the config object (either
passed as an argument or loaded from `),Hfe=n(kE,"CODE",{});var git=s(Hfe);aHo=r(git,"pretrained_model_name_or_path"),git.forEach(t),nHo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=n(kE,"CODE",{});var hit=s(Ufe);sHo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),lHo=r(kE,":"),kE.forEach(t),iHo=i(sa),Jfe=n(sa,"UL",{});var pit=s(Jfe);t6=n(pit,"LI",{});var ELe=s(t6);Yfe=n(ELe,"STRONG",{});var _it=s(Yfe);dHo=r(_it,"detr"),_it.forEach(t),cHo=r(ELe," \u2014 "),uq=n(ELe,"A",{href:!0});var uit=s(uq);fHo=r(uit,"DetrForSegmentation"),uit.forEach(t),mHo=r(ELe," (DETR model)"),ELe.forEach(t),pit.forEach(t),gHo=i(sa),a6=n(sa,"P",{});var yLe=s(a6);hHo=r(yLe,"The model is set in evaluation mode by default using "),Kfe=n(yLe,"CODE",{});var bit=s(Kfe);pHo=r(bit,"model.eval()"),bit.forEach(t),_Ho=r(yLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(yLe,"CODE",{});var vit=s(Zfe);uHo=r(vit,"model.train()"),vit.forEach(t),yLe.forEach(t),bHo=i(sa),eme=n(sa,"P",{});var Tit=s(eme);vHo=r(Tit,"Examples:"),Tit.forEach(t),THo=i(sa),m(EA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),oRe=i(c),lc=n(c,"H2",{class:!0});var fPe=s(lc);n6=n(fPe,"A",{id:!0,class:!0,href:!0});var Fit=s(n6);ome=n(Fit,"SPAN",{});var Cit=s(ome);m(yA.$$.fragment,Cit),Cit.forEach(t),Fit.forEach(t),FHo=i(fPe),rme=n(fPe,"SPAN",{});var Mit=s(rme);CHo=r(Mit,"AutoModelForSemanticSegmentation"),Mit.forEach(t),fPe.forEach(t),rRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(wA.$$.fragment,$l),MHo=i($l),ic=n($l,"P",{});var jW=s(ic);EHo=r(jW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tme=n(jW,"CODE",{});var Eit=s(tme);yHo=r(Eit,"from_pretrained()"),Eit.forEach(t),wHo=r(jW,"class method or the "),ame=n(jW,"CODE",{});var yit=s(ame);AHo=r(yit,"from_config()"),yit.forEach(t),LHo=r(jW,`class
method.`),jW.forEach(t),BHo=i($l),AA=n($l,"P",{});var mPe=s(AA);xHo=r(mPe,"This class cannot be instantiated directly using "),nme=n(mPe,"CODE",{});var wit=s(nme);kHo=r(wit,"__init__()"),wit.forEach(t),RHo=r(mPe," (throws an error)."),mPe.forEach(t),SHo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(LA.$$.fragment,Il),PHo=i(Il),sme=n(Il,"P",{});var Ait=s(sme);$Ho=r(Ait,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ait.forEach(t),IHo=i(Il),dc=n(Il,"P",{});var DW=s(dc);NHo=r(DW,`Note:
Loading a model from its configuration file does `),lme=n(DW,"STRONG",{});var Lit=s(lme);jHo=r(Lit,"not"),Lit.forEach(t),DHo=r(DW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ime=n(DW,"CODE",{});var Bit=s(ime);qHo=r(Bit,"from_pretrained()"),Bit.forEach(t),GHo=r(DW,"to load the model weights."),DW.forEach(t),OHo=i(Il),dme=n(Il,"P",{});var xit=s(dme);XHo=r(xit,"Examples:"),xit.forEach(t),VHo=i(Il),m(BA.$$.fragment,Il),Il.forEach(t),zHo=i($l),no=n($l,"DIV",{class:!0});var la=s(no);m(xA.$$.fragment,la),WHo=i(la),cme=n(la,"P",{});var kit=s(cme);QHo=r(kit,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),kit.forEach(t),HHo=i(la),hn=n(la,"P",{});var RE=s(hn);UHo=r(RE,"The model class to instantiate is selected based on the "),fme=n(RE,"CODE",{});var Rit=s(fme);JHo=r(Rit,"model_type"),Rit.forEach(t),YHo=r(RE,` property of the config object (either
passed as an argument or loaded from `),mme=n(RE,"CODE",{});var Sit=s(mme);KHo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),ZHo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(RE,"CODE",{});var Pit=s(gme);eUo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),oUo=r(RE,":"),RE.forEach(t),rUo=i(la),kA=n(la,"UL",{});var gPe=s(kA);s6=n(gPe,"LI",{});var wLe=s(s6);hme=n(wLe,"STRONG",{});var $it=s(hme);tUo=r($it,"beit"),$it.forEach(t),aUo=r(wLe," \u2014 "),bq=n(wLe,"A",{href:!0});var Iit=s(bq);nUo=r(Iit,"BeitForSemanticSegmentation"),Iit.forEach(t),sUo=r(wLe," (BEiT model)"),wLe.forEach(t),lUo=i(gPe),l6=n(gPe,"LI",{});var ALe=s(l6);pme=n(ALe,"STRONG",{});var Nit=s(pme);iUo=r(Nit,"segformer"),Nit.forEach(t),dUo=r(ALe," \u2014 "),vq=n(ALe,"A",{href:!0});var jit=s(vq);cUo=r(jit,"SegformerForSemanticSegmentation"),jit.forEach(t),fUo=r(ALe," (SegFormer model)"),ALe.forEach(t),gPe.forEach(t),mUo=i(la),i6=n(la,"P",{});var LLe=s(i6);gUo=r(LLe,"The model is set in evaluation mode by default using "),_me=n(LLe,"CODE",{});var Dit=s(_me);hUo=r(Dit,"model.eval()"),Dit.forEach(t),pUo=r(LLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=n(LLe,"CODE",{});var qit=s(ume);_Uo=r(qit,"model.train()"),qit.forEach(t),LLe.forEach(t),uUo=i(la),bme=n(la,"P",{});var Git=s(bme);bUo=r(Git,"Examples:"),Git.forEach(t),vUo=i(la),m(RA.$$.fragment,la),la.forEach(t),$l.forEach(t),tRe=i(c),cc=n(c,"H2",{class:!0});var hPe=s(cc);d6=n(hPe,"A",{id:!0,class:!0,href:!0});var Oit=s(d6);vme=n(Oit,"SPAN",{});var Xit=s(vme);m(SA.$$.fragment,Xit),Xit.forEach(t),Oit.forEach(t),TUo=i(hPe),Tme=n(hPe,"SPAN",{});var Vit=s(Tme);FUo=r(Vit,"AutoModelForInstanceSegmentation"),Vit.forEach(t),hPe.forEach(t),aRe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(PA.$$.fragment,Nl),CUo=i(Nl),fc=n(Nl,"P",{});var qW=s(fc);MUo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Fme=n(qW,"CODE",{});var zit=s(Fme);EUo=r(zit,"from_pretrained()"),zit.forEach(t),yUo=r(qW,"class method or the "),Cme=n(qW,"CODE",{});var Wit=s(Cme);wUo=r(Wit,"from_config()"),Wit.forEach(t),AUo=r(qW,`class
method.`),qW.forEach(t),LUo=i(Nl),$A=n(Nl,"P",{});var pPe=s($A);BUo=r(pPe,"This class cannot be instantiated directly using "),Mme=n(pPe,"CODE",{});var Qit=s(Mme);xUo=r(Qit,"__init__()"),Qit.forEach(t),kUo=r(pPe," (throws an error)."),pPe.forEach(t),RUo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(IA.$$.fragment,jl),SUo=i(jl),Eme=n(jl,"P",{});var Hit=s(Eme);PUo=r(Hit,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Hit.forEach(t),$Uo=i(jl),mc=n(jl,"P",{});var GW=s(mc);IUo=r(GW,`Note:
Loading a model from its configuration file does `),yme=n(GW,"STRONG",{});var Uit=s(yme);NUo=r(Uit,"not"),Uit.forEach(t),jUo=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wme=n(GW,"CODE",{});var Jit=s(wme);DUo=r(Jit,"from_pretrained()"),Jit.forEach(t),qUo=r(GW,"to load the model weights."),GW.forEach(t),GUo=i(jl),Ame=n(jl,"P",{});var Yit=s(Ame);OUo=r(Yit,"Examples:"),Yit.forEach(t),XUo=i(jl),m(NA.$$.fragment,jl),jl.forEach(t),VUo=i(Nl),so=n(Nl,"DIV",{class:!0});var ia=s(so);m(jA.$$.fragment,ia),zUo=i(ia),Lme=n(ia,"P",{});var Kit=s(Lme);WUo=r(Kit,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Kit.forEach(t),QUo=i(ia),pn=n(ia,"P",{});var SE=s(pn);HUo=r(SE,"The model class to instantiate is selected based on the "),Bme=n(SE,"CODE",{});var Zit=s(Bme);UUo=r(Zit,"model_type"),Zit.forEach(t),JUo=r(SE,` property of the config object (either
passed as an argument or loaded from `),xme=n(SE,"CODE",{});var edt=s(xme);YUo=r(edt,"pretrained_model_name_or_path"),edt.forEach(t),KUo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(SE,"CODE",{});var odt=s(kme);ZUo=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),eJo=r(SE,":"),SE.forEach(t),oJo=i(ia),Rme=n(ia,"UL",{});var rdt=s(Rme);c6=n(rdt,"LI",{});var BLe=s(c6);Sme=n(BLe,"STRONG",{});var tdt=s(Sme);rJo=r(tdt,"maskformer"),tdt.forEach(t),tJo=r(BLe," \u2014 "),Tq=n(BLe,"A",{href:!0});var adt=s(Tq);aJo=r(adt,"MaskFormerForInstanceSegmentation"),adt.forEach(t),nJo=r(BLe," (MaskFormer model)"),BLe.forEach(t),rdt.forEach(t),sJo=i(ia),f6=n(ia,"P",{});var xLe=s(f6);lJo=r(xLe,"The model is set in evaluation mode by default using "),Pme=n(xLe,"CODE",{});var ndt=s(Pme);iJo=r(ndt,"model.eval()"),ndt.forEach(t),dJo=r(xLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$me=n(xLe,"CODE",{});var sdt=s($me);cJo=r(sdt,"model.train()"),sdt.forEach(t),xLe.forEach(t),fJo=i(ia),Ime=n(ia,"P",{});var ldt=s(Ime);mJo=r(ldt,"Examples:"),ldt.forEach(t),gJo=i(ia),m(DA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),nRe=i(c),gc=n(c,"H2",{class:!0});var _Pe=s(gc);m6=n(_Pe,"A",{id:!0,class:!0,href:!0});var idt=s(m6);Nme=n(idt,"SPAN",{});var ddt=s(Nme);m(qA.$$.fragment,ddt),ddt.forEach(t),idt.forEach(t),hJo=i(_Pe),jme=n(_Pe,"SPAN",{});var cdt=s(jme);pJo=r(cdt,"TFAutoModel"),cdt.forEach(t),_Pe.forEach(t),sRe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(GA.$$.fragment,Dl),_Jo=i(Dl),hc=n(Dl,"P",{});var OW=s(hc);uJo=r(OW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Dme=n(OW,"CODE",{});var fdt=s(Dme);bJo=r(fdt,"from_pretrained()"),fdt.forEach(t),vJo=r(OW,"class method or the "),qme=n(OW,"CODE",{});var mdt=s(qme);TJo=r(mdt,"from_config()"),mdt.forEach(t),FJo=r(OW,`class
method.`),OW.forEach(t),CJo=i(Dl),OA=n(Dl,"P",{});var uPe=s(OA);MJo=r(uPe,"This class cannot be instantiated directly using "),Gme=n(uPe,"CODE",{});var gdt=s(Gme);EJo=r(gdt,"__init__()"),gdt.forEach(t),yJo=r(uPe," (throws an error)."),uPe.forEach(t),wJo=i(Dl),gt=n(Dl,"DIV",{class:!0});var ql=s(gt);m(XA.$$.fragment,ql),AJo=i(ql),Ome=n(ql,"P",{});var hdt=s(Ome);LJo=r(hdt,"Instantiates one of the base model classes of the library from a configuration."),hdt.forEach(t),BJo=i(ql),pc=n(ql,"P",{});var XW=s(pc);xJo=r(XW,`Note:
Loading a model from its configuration file does `),Xme=n(XW,"STRONG",{});var pdt=s(Xme);kJo=r(pdt,"not"),pdt.forEach(t),RJo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vme=n(XW,"CODE",{});var _dt=s(Vme);SJo=r(_dt,"from_pretrained()"),_dt.forEach(t),PJo=r(XW,"to load the model weights."),XW.forEach(t),$Jo=i(ql),zme=n(ql,"P",{});var udt=s(zme);IJo=r(udt,"Examples:"),udt.forEach(t),NJo=i(ql),m(VA.$$.fragment,ql),ql.forEach(t),jJo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(zA.$$.fragment,pa),DJo=i(pa),Wme=n(pa,"P",{});var bdt=s(Wme);qJo=r(bdt,"Instantiate one of the base model classes of the library from a pretrained model."),bdt.forEach(t),GJo=i(pa),_n=n(pa,"P",{});var PE=s(_n);OJo=r(PE,"The model class to instantiate is selected based on the "),Qme=n(PE,"CODE",{});var vdt=s(Qme);XJo=r(vdt,"model_type"),vdt.forEach(t),VJo=r(PE,` property of the config object (either
passed as an argument or loaded from `),Hme=n(PE,"CODE",{});var Tdt=s(Hme);zJo=r(Tdt,"pretrained_model_name_or_path"),Tdt.forEach(t),WJo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(PE,"CODE",{});var Fdt=s(Ume);QJo=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),HJo=r(PE,":"),PE.forEach(t),UJo=i(pa),B=n(pa,"UL",{});var x=s(B);g6=n(x,"LI",{});var kLe=s(g6);Jme=n(kLe,"STRONG",{});var Cdt=s(Jme);JJo=r(Cdt,"albert"),Cdt.forEach(t),YJo=r(kLe," \u2014 "),Fq=n(kLe,"A",{href:!0});var Mdt=s(Fq);KJo=r(Mdt,"TFAlbertModel"),Mdt.forEach(t),ZJo=r(kLe," (ALBERT model)"),kLe.forEach(t),eYo=i(x),h6=n(x,"LI",{});var RLe=s(h6);Yme=n(RLe,"STRONG",{});var Edt=s(Yme);oYo=r(Edt,"bart"),Edt.forEach(t),rYo=r(RLe," \u2014 "),Cq=n(RLe,"A",{href:!0});var ydt=s(Cq);tYo=r(ydt,"TFBartModel"),ydt.forEach(t),aYo=r(RLe," (BART model)"),RLe.forEach(t),nYo=i(x),p6=n(x,"LI",{});var SLe=s(p6);Kme=n(SLe,"STRONG",{});var wdt=s(Kme);sYo=r(wdt,"bert"),wdt.forEach(t),lYo=r(SLe," \u2014 "),Mq=n(SLe,"A",{href:!0});var Adt=s(Mq);iYo=r(Adt,"TFBertModel"),Adt.forEach(t),dYo=r(SLe," (BERT model)"),SLe.forEach(t),cYo=i(x),_6=n(x,"LI",{});var PLe=s(_6);Zme=n(PLe,"STRONG",{});var Ldt=s(Zme);fYo=r(Ldt,"blenderbot"),Ldt.forEach(t),mYo=r(PLe," \u2014 "),Eq=n(PLe,"A",{href:!0});var Bdt=s(Eq);gYo=r(Bdt,"TFBlenderbotModel"),Bdt.forEach(t),hYo=r(PLe," (Blenderbot model)"),PLe.forEach(t),pYo=i(x),u6=n(x,"LI",{});var $Le=s(u6);ege=n($Le,"STRONG",{});var xdt=s(ege);_Yo=r(xdt,"blenderbot-small"),xdt.forEach(t),uYo=r($Le," \u2014 "),yq=n($Le,"A",{href:!0});var kdt=s(yq);bYo=r(kdt,"TFBlenderbotSmallModel"),kdt.forEach(t),vYo=r($Le," (BlenderbotSmall model)"),$Le.forEach(t),TYo=i(x),b6=n(x,"LI",{});var ILe=s(b6);oge=n(ILe,"STRONG",{});var Rdt=s(oge);FYo=r(Rdt,"camembert"),Rdt.forEach(t),CYo=r(ILe," \u2014 "),wq=n(ILe,"A",{href:!0});var Sdt=s(wq);MYo=r(Sdt,"TFCamembertModel"),Sdt.forEach(t),EYo=r(ILe," (CamemBERT model)"),ILe.forEach(t),yYo=i(x),v6=n(x,"LI",{});var NLe=s(v6);rge=n(NLe,"STRONG",{});var Pdt=s(rge);wYo=r(Pdt,"clip"),Pdt.forEach(t),AYo=r(NLe," \u2014 "),Aq=n(NLe,"A",{href:!0});var $dt=s(Aq);LYo=r($dt,"TFCLIPModel"),$dt.forEach(t),BYo=r(NLe," (CLIP model)"),NLe.forEach(t),xYo=i(x),T6=n(x,"LI",{});var jLe=s(T6);tge=n(jLe,"STRONG",{});var Idt=s(tge);kYo=r(Idt,"convbert"),Idt.forEach(t),RYo=r(jLe," \u2014 "),Lq=n(jLe,"A",{href:!0});var Ndt=s(Lq);SYo=r(Ndt,"TFConvBertModel"),Ndt.forEach(t),PYo=r(jLe," (ConvBERT model)"),jLe.forEach(t),$Yo=i(x),F6=n(x,"LI",{});var DLe=s(F6);age=n(DLe,"STRONG",{});var jdt=s(age);IYo=r(jdt,"convnext"),jdt.forEach(t),NYo=r(DLe," \u2014 "),Bq=n(DLe,"A",{href:!0});var Ddt=s(Bq);jYo=r(Ddt,"TFConvNextModel"),Ddt.forEach(t),DYo=r(DLe," (ConvNext model)"),DLe.forEach(t),qYo=i(x),C6=n(x,"LI",{});var qLe=s(C6);nge=n(qLe,"STRONG",{});var qdt=s(nge);GYo=r(qdt,"ctrl"),qdt.forEach(t),OYo=r(qLe," \u2014 "),xq=n(qLe,"A",{href:!0});var Gdt=s(xq);XYo=r(Gdt,"TFCTRLModel"),Gdt.forEach(t),VYo=r(qLe," (CTRL model)"),qLe.forEach(t),zYo=i(x),M6=n(x,"LI",{});var GLe=s(M6);sge=n(GLe,"STRONG",{});var Odt=s(sge);WYo=r(Odt,"deberta"),Odt.forEach(t),QYo=r(GLe," \u2014 "),kq=n(GLe,"A",{href:!0});var Xdt=s(kq);HYo=r(Xdt,"TFDebertaModel"),Xdt.forEach(t),UYo=r(GLe," (DeBERTa model)"),GLe.forEach(t),JYo=i(x),E6=n(x,"LI",{});var OLe=s(E6);lge=n(OLe,"STRONG",{});var Vdt=s(lge);YYo=r(Vdt,"deberta-v2"),Vdt.forEach(t),KYo=r(OLe," \u2014 "),Rq=n(OLe,"A",{href:!0});var zdt=s(Rq);ZYo=r(zdt,"TFDebertaV2Model"),zdt.forEach(t),eKo=r(OLe," (DeBERTa-v2 model)"),OLe.forEach(t),oKo=i(x),y6=n(x,"LI",{});var XLe=s(y6);ige=n(XLe,"STRONG",{});var Wdt=s(ige);rKo=r(Wdt,"distilbert"),Wdt.forEach(t),tKo=r(XLe," \u2014 "),Sq=n(XLe,"A",{href:!0});var Qdt=s(Sq);aKo=r(Qdt,"TFDistilBertModel"),Qdt.forEach(t),nKo=r(XLe," (DistilBERT model)"),XLe.forEach(t),sKo=i(x),w6=n(x,"LI",{});var VLe=s(w6);dge=n(VLe,"STRONG",{});var Hdt=s(dge);lKo=r(Hdt,"dpr"),Hdt.forEach(t),iKo=r(VLe," \u2014 "),Pq=n(VLe,"A",{href:!0});var Udt=s(Pq);dKo=r(Udt,"TFDPRQuestionEncoder"),Udt.forEach(t),cKo=r(VLe," (DPR model)"),VLe.forEach(t),fKo=i(x),A6=n(x,"LI",{});var zLe=s(A6);cge=n(zLe,"STRONG",{});var Jdt=s(cge);mKo=r(Jdt,"electra"),Jdt.forEach(t),gKo=r(zLe," \u2014 "),$q=n(zLe,"A",{href:!0});var Ydt=s($q);hKo=r(Ydt,"TFElectraModel"),Ydt.forEach(t),pKo=r(zLe," (ELECTRA model)"),zLe.forEach(t),_Ko=i(x),L6=n(x,"LI",{});var WLe=s(L6);fge=n(WLe,"STRONG",{});var Kdt=s(fge);uKo=r(Kdt,"flaubert"),Kdt.forEach(t),bKo=r(WLe," \u2014 "),Iq=n(WLe,"A",{href:!0});var Zdt=s(Iq);vKo=r(Zdt,"TFFlaubertModel"),Zdt.forEach(t),TKo=r(WLe," (FlauBERT model)"),WLe.forEach(t),FKo=i(x),Gs=n(x,"LI",{});var Y7=s(Gs);mge=n(Y7,"STRONG",{});var ect=s(mge);CKo=r(ect,"funnel"),ect.forEach(t),MKo=r(Y7," \u2014 "),Nq=n(Y7,"A",{href:!0});var oct=s(Nq);EKo=r(oct,"TFFunnelModel"),oct.forEach(t),yKo=r(Y7," or "),jq=n(Y7,"A",{href:!0});var rct=s(jq);wKo=r(rct,"TFFunnelBaseModel"),rct.forEach(t),AKo=r(Y7," (Funnel Transformer model)"),Y7.forEach(t),LKo=i(x),B6=n(x,"LI",{});var QLe=s(B6);gge=n(QLe,"STRONG",{});var tct=s(gge);BKo=r(tct,"gpt2"),tct.forEach(t),xKo=r(QLe," \u2014 "),Dq=n(QLe,"A",{href:!0});var act=s(Dq);kKo=r(act,"TFGPT2Model"),act.forEach(t),RKo=r(QLe," (OpenAI GPT-2 model)"),QLe.forEach(t),SKo=i(x),x6=n(x,"LI",{});var HLe=s(x6);hge=n(HLe,"STRONG",{});var nct=s(hge);PKo=r(nct,"hubert"),nct.forEach(t),$Ko=r(HLe," \u2014 "),qq=n(HLe,"A",{href:!0});var sct=s(qq);IKo=r(sct,"TFHubertModel"),sct.forEach(t),NKo=r(HLe," (Hubert model)"),HLe.forEach(t),jKo=i(x),k6=n(x,"LI",{});var ULe=s(k6);pge=n(ULe,"STRONG",{});var lct=s(pge);DKo=r(lct,"layoutlm"),lct.forEach(t),qKo=r(ULe," \u2014 "),Gq=n(ULe,"A",{href:!0});var ict=s(Gq);GKo=r(ict,"TFLayoutLMModel"),ict.forEach(t),OKo=r(ULe," (LayoutLM model)"),ULe.forEach(t),XKo=i(x),R6=n(x,"LI",{});var JLe=s(R6);_ge=n(JLe,"STRONG",{});var dct=s(_ge);VKo=r(dct,"led"),dct.forEach(t),zKo=r(JLe," \u2014 "),Oq=n(JLe,"A",{href:!0});var cct=s(Oq);WKo=r(cct,"TFLEDModel"),cct.forEach(t),QKo=r(JLe," (LED model)"),JLe.forEach(t),HKo=i(x),S6=n(x,"LI",{});var YLe=s(S6);uge=n(YLe,"STRONG",{});var fct=s(uge);UKo=r(fct,"longformer"),fct.forEach(t),JKo=r(YLe," \u2014 "),Xq=n(YLe,"A",{href:!0});var mct=s(Xq);YKo=r(mct,"TFLongformerModel"),mct.forEach(t),KKo=r(YLe," (Longformer model)"),YLe.forEach(t),ZKo=i(x),P6=n(x,"LI",{});var KLe=s(P6);bge=n(KLe,"STRONG",{});var gct=s(bge);eZo=r(gct,"lxmert"),gct.forEach(t),oZo=r(KLe," \u2014 "),Vq=n(KLe,"A",{href:!0});var hct=s(Vq);rZo=r(hct,"TFLxmertModel"),hct.forEach(t),tZo=r(KLe," (LXMERT model)"),KLe.forEach(t),aZo=i(x),$6=n(x,"LI",{});var ZLe=s($6);vge=n(ZLe,"STRONG",{});var pct=s(vge);nZo=r(pct,"marian"),pct.forEach(t),sZo=r(ZLe," \u2014 "),zq=n(ZLe,"A",{href:!0});var _ct=s(zq);lZo=r(_ct,"TFMarianModel"),_ct.forEach(t),iZo=r(ZLe," (Marian model)"),ZLe.forEach(t),dZo=i(x),I6=n(x,"LI",{});var e8e=s(I6);Tge=n(e8e,"STRONG",{});var uct=s(Tge);cZo=r(uct,"mbart"),uct.forEach(t),fZo=r(e8e," \u2014 "),Wq=n(e8e,"A",{href:!0});var bct=s(Wq);mZo=r(bct,"TFMBartModel"),bct.forEach(t),gZo=r(e8e," (mBART model)"),e8e.forEach(t),hZo=i(x),N6=n(x,"LI",{});var o8e=s(N6);Fge=n(o8e,"STRONG",{});var vct=s(Fge);pZo=r(vct,"mobilebert"),vct.forEach(t),_Zo=r(o8e," \u2014 "),Qq=n(o8e,"A",{href:!0});var Tct=s(Qq);uZo=r(Tct,"TFMobileBertModel"),Tct.forEach(t),bZo=r(o8e," (MobileBERT model)"),o8e.forEach(t),vZo=i(x),j6=n(x,"LI",{});var r8e=s(j6);Cge=n(r8e,"STRONG",{});var Fct=s(Cge);TZo=r(Fct,"mpnet"),Fct.forEach(t),FZo=r(r8e," \u2014 "),Hq=n(r8e,"A",{href:!0});var Cct=s(Hq);CZo=r(Cct,"TFMPNetModel"),Cct.forEach(t),MZo=r(r8e," (MPNet model)"),r8e.forEach(t),EZo=i(x),D6=n(x,"LI",{});var t8e=s(D6);Mge=n(t8e,"STRONG",{});var Mct=s(Mge);yZo=r(Mct,"mt5"),Mct.forEach(t),wZo=r(t8e," \u2014 "),Uq=n(t8e,"A",{href:!0});var Ect=s(Uq);AZo=r(Ect,"TFMT5Model"),Ect.forEach(t),LZo=r(t8e," (mT5 model)"),t8e.forEach(t),BZo=i(x),q6=n(x,"LI",{});var a8e=s(q6);Ege=n(a8e,"STRONG",{});var yct=s(Ege);xZo=r(yct,"openai-gpt"),yct.forEach(t),kZo=r(a8e," \u2014 "),Jq=n(a8e,"A",{href:!0});var wct=s(Jq);RZo=r(wct,"TFOpenAIGPTModel"),wct.forEach(t),SZo=r(a8e," (OpenAI GPT model)"),a8e.forEach(t),PZo=i(x),G6=n(x,"LI",{});var n8e=s(G6);yge=n(n8e,"STRONG",{});var Act=s(yge);$Zo=r(Act,"pegasus"),Act.forEach(t),IZo=r(n8e," \u2014 "),Yq=n(n8e,"A",{href:!0});var Lct=s(Yq);NZo=r(Lct,"TFPegasusModel"),Lct.forEach(t),jZo=r(n8e," (Pegasus model)"),n8e.forEach(t),DZo=i(x),O6=n(x,"LI",{});var s8e=s(O6);wge=n(s8e,"STRONG",{});var Bct=s(wge);qZo=r(Bct,"rembert"),Bct.forEach(t),GZo=r(s8e," \u2014 "),Kq=n(s8e,"A",{href:!0});var xct=s(Kq);OZo=r(xct,"TFRemBertModel"),xct.forEach(t),XZo=r(s8e," (RemBERT model)"),s8e.forEach(t),VZo=i(x),X6=n(x,"LI",{});var l8e=s(X6);Age=n(l8e,"STRONG",{});var kct=s(Age);zZo=r(kct,"roberta"),kct.forEach(t),WZo=r(l8e," \u2014 "),Zq=n(l8e,"A",{href:!0});var Rct=s(Zq);QZo=r(Rct,"TFRobertaModel"),Rct.forEach(t),HZo=r(l8e," (RoBERTa model)"),l8e.forEach(t),UZo=i(x),V6=n(x,"LI",{});var i8e=s(V6);Lge=n(i8e,"STRONG",{});var Sct=s(Lge);JZo=r(Sct,"roformer"),Sct.forEach(t),YZo=r(i8e," \u2014 "),eG=n(i8e,"A",{href:!0});var Pct=s(eG);KZo=r(Pct,"TFRoFormerModel"),Pct.forEach(t),ZZo=r(i8e," (RoFormer model)"),i8e.forEach(t),eer=i(x),z6=n(x,"LI",{});var d8e=s(z6);Bge=n(d8e,"STRONG",{});var $ct=s(Bge);oer=r($ct,"speech_to_text"),$ct.forEach(t),rer=r(d8e," \u2014 "),oG=n(d8e,"A",{href:!0});var Ict=s(oG);ter=r(Ict,"TFSpeech2TextModel"),Ict.forEach(t),aer=r(d8e," (Speech2Text model)"),d8e.forEach(t),ner=i(x),W6=n(x,"LI",{});var c8e=s(W6);xge=n(c8e,"STRONG",{});var Nct=s(xge);ser=r(Nct,"t5"),Nct.forEach(t),ler=r(c8e," \u2014 "),rG=n(c8e,"A",{href:!0});var jct=s(rG);ier=r(jct,"TFT5Model"),jct.forEach(t),der=r(c8e," (T5 model)"),c8e.forEach(t),cer=i(x),Q6=n(x,"LI",{});var f8e=s(Q6);kge=n(f8e,"STRONG",{});var Dct=s(kge);fer=r(Dct,"tapas"),Dct.forEach(t),mer=r(f8e," \u2014 "),tG=n(f8e,"A",{href:!0});var qct=s(tG);ger=r(qct,"TFTapasModel"),qct.forEach(t),her=r(f8e," (TAPAS model)"),f8e.forEach(t),per=i(x),H6=n(x,"LI",{});var m8e=s(H6);Rge=n(m8e,"STRONG",{});var Gct=s(Rge);_er=r(Gct,"transfo-xl"),Gct.forEach(t),uer=r(m8e," \u2014 "),aG=n(m8e,"A",{href:!0});var Oct=s(aG);ber=r(Oct,"TFTransfoXLModel"),Oct.forEach(t),ver=r(m8e," (Transformer-XL model)"),m8e.forEach(t),Ter=i(x),U6=n(x,"LI",{});var g8e=s(U6);Sge=n(g8e,"STRONG",{});var Xct=s(Sge);Fer=r(Xct,"vit"),Xct.forEach(t),Cer=r(g8e," \u2014 "),nG=n(g8e,"A",{href:!0});var Vct=s(nG);Mer=r(Vct,"TFViTModel"),Vct.forEach(t),Eer=r(g8e," (ViT model)"),g8e.forEach(t),yer=i(x),J6=n(x,"LI",{});var h8e=s(J6);Pge=n(h8e,"STRONG",{});var zct=s(Pge);wer=r(zct,"vit_mae"),zct.forEach(t),Aer=r(h8e," \u2014 "),sG=n(h8e,"A",{href:!0});var Wct=s(sG);Ler=r(Wct,"TFViTMAEModel"),Wct.forEach(t),Ber=r(h8e," (ViTMAE model)"),h8e.forEach(t),xer=i(x),Y6=n(x,"LI",{});var p8e=s(Y6);$ge=n(p8e,"STRONG",{});var Qct=s($ge);ker=r(Qct,"wav2vec2"),Qct.forEach(t),Rer=r(p8e," \u2014 "),lG=n(p8e,"A",{href:!0});var Hct=s(lG);Ser=r(Hct,"TFWav2Vec2Model"),Hct.forEach(t),Per=r(p8e," (Wav2Vec2 model)"),p8e.forEach(t),$er=i(x),K6=n(x,"LI",{});var _8e=s(K6);Ige=n(_8e,"STRONG",{});var Uct=s(Ige);Ier=r(Uct,"xlm"),Uct.forEach(t),Ner=r(_8e," \u2014 "),iG=n(_8e,"A",{href:!0});var Jct=s(iG);jer=r(Jct,"TFXLMModel"),Jct.forEach(t),Der=r(_8e," (XLM model)"),_8e.forEach(t),qer=i(x),Z6=n(x,"LI",{});var u8e=s(Z6);Nge=n(u8e,"STRONG",{});var Yct=s(Nge);Ger=r(Yct,"xlm-roberta"),Yct.forEach(t),Oer=r(u8e," \u2014 "),dG=n(u8e,"A",{href:!0});var Kct=s(dG);Xer=r(Kct,"TFXLMRobertaModel"),Kct.forEach(t),Ver=r(u8e," (XLM-RoBERTa model)"),u8e.forEach(t),zer=i(x),eT=n(x,"LI",{});var b8e=s(eT);jge=n(b8e,"STRONG",{});var Zct=s(jge);Wer=r(Zct,"xlnet"),Zct.forEach(t),Qer=r(b8e," \u2014 "),cG=n(b8e,"A",{href:!0});var eft=s(cG);Her=r(eft,"TFXLNetModel"),eft.forEach(t),Uer=r(b8e," (XLNet model)"),b8e.forEach(t),x.forEach(t),Jer=i(pa),Dge=n(pa,"P",{});var oft=s(Dge);Yer=r(oft,"Examples:"),oft.forEach(t),Ker=i(pa),m(WA.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),lRe=i(c),_c=n(c,"H2",{class:!0});var bPe=s(_c);oT=n(bPe,"A",{id:!0,class:!0,href:!0});var rft=s(oT);qge=n(rft,"SPAN",{});var tft=s(qge);m(QA.$$.fragment,tft),tft.forEach(t),rft.forEach(t),Zer=i(bPe),Gge=n(bPe,"SPAN",{});var aft=s(Gge);eor=r(aft,"TFAutoModelForPreTraining"),aft.forEach(t),bPe.forEach(t),iRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(HA.$$.fragment,Gl),oor=i(Gl),uc=n(Gl,"P",{});var VW=s(uc);ror=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oge=n(VW,"CODE",{});var nft=s(Oge);tor=r(nft,"from_pretrained()"),nft.forEach(t),aor=r(VW,"class method or the "),Xge=n(VW,"CODE",{});var sft=s(Xge);nor=r(sft,"from_config()"),sft.forEach(t),sor=r(VW,`class
method.`),VW.forEach(t),lor=i(Gl),UA=n(Gl,"P",{});var vPe=s(UA);ior=r(vPe,"This class cannot be instantiated directly using "),Vge=n(vPe,"CODE",{});var lft=s(Vge);dor=r(lft,"__init__()"),lft.forEach(t),cor=r(vPe," (throws an error)."),vPe.forEach(t),mor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(JA.$$.fragment,Ol),gor=i(Ol),zge=n(Ol,"P",{});var ift=s(zge);hor=r(ift,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ift.forEach(t),por=i(Ol),bc=n(Ol,"P",{});var zW=s(bc);_or=r(zW,`Note:
Loading a model from its configuration file does `),Wge=n(zW,"STRONG",{});var dft=s(Wge);uor=r(dft,"not"),dft.forEach(t),bor=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qge=n(zW,"CODE",{});var cft=s(Qge);vor=r(cft,"from_pretrained()"),cft.forEach(t),Tor=r(zW,"to load the model weights."),zW.forEach(t),For=i(Ol),Hge=n(Ol,"P",{});var fft=s(Hge);Cor=r(fft,"Examples:"),fft.forEach(t),Mor=i(Ol),m(YA.$$.fragment,Ol),Ol.forEach(t),Eor=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(KA.$$.fragment,_a),yor=i(_a),Uge=n(_a,"P",{});var mft=s(Uge);wor=r(mft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mft.forEach(t),Aor=i(_a),un=n(_a,"P",{});var $E=s(un);Lor=r($E,"The model class to instantiate is selected based on the "),Jge=n($E,"CODE",{});var gft=s(Jge);Bor=r(gft,"model_type"),gft.forEach(t),xor=r($E,` property of the config object (either
passed as an argument or loaded from `),Yge=n($E,"CODE",{});var hft=s(Yge);kor=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),Ror=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=n($E,"CODE",{});var pft=s(Kge);Sor=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),Por=r($E,":"),$E.forEach(t),$or=i(_a),H=n(_a,"UL",{});var U=s(H);rT=n(U,"LI",{});var v8e=s(rT);Zge=n(v8e,"STRONG",{});var _ft=s(Zge);Ior=r(_ft,"albert"),_ft.forEach(t),Nor=r(v8e," \u2014 "),fG=n(v8e,"A",{href:!0});var uft=s(fG);jor=r(uft,"TFAlbertForPreTraining"),uft.forEach(t),Dor=r(v8e," (ALBERT model)"),v8e.forEach(t),qor=i(U),tT=n(U,"LI",{});var T8e=s(tT);ehe=n(T8e,"STRONG",{});var bft=s(ehe);Gor=r(bft,"bart"),bft.forEach(t),Oor=r(T8e," \u2014 "),mG=n(T8e,"A",{href:!0});var vft=s(mG);Xor=r(vft,"TFBartForConditionalGeneration"),vft.forEach(t),Vor=r(T8e," (BART model)"),T8e.forEach(t),zor=i(U),aT=n(U,"LI",{});var F8e=s(aT);ohe=n(F8e,"STRONG",{});var Tft=s(ohe);Wor=r(Tft,"bert"),Tft.forEach(t),Qor=r(F8e," \u2014 "),gG=n(F8e,"A",{href:!0});var Fft=s(gG);Hor=r(Fft,"TFBertForPreTraining"),Fft.forEach(t),Uor=r(F8e," (BERT model)"),F8e.forEach(t),Jor=i(U),nT=n(U,"LI",{});var C8e=s(nT);rhe=n(C8e,"STRONG",{});var Cft=s(rhe);Yor=r(Cft,"camembert"),Cft.forEach(t),Kor=r(C8e," \u2014 "),hG=n(C8e,"A",{href:!0});var Mft=s(hG);Zor=r(Mft,"TFCamembertForMaskedLM"),Mft.forEach(t),err=r(C8e," (CamemBERT model)"),C8e.forEach(t),orr=i(U),sT=n(U,"LI",{});var M8e=s(sT);the=n(M8e,"STRONG",{});var Eft=s(the);rrr=r(Eft,"ctrl"),Eft.forEach(t),trr=r(M8e," \u2014 "),pG=n(M8e,"A",{href:!0});var yft=s(pG);arr=r(yft,"TFCTRLLMHeadModel"),yft.forEach(t),nrr=r(M8e," (CTRL model)"),M8e.forEach(t),srr=i(U),lT=n(U,"LI",{});var E8e=s(lT);ahe=n(E8e,"STRONG",{});var wft=s(ahe);lrr=r(wft,"distilbert"),wft.forEach(t),irr=r(E8e," \u2014 "),_G=n(E8e,"A",{href:!0});var Aft=s(_G);drr=r(Aft,"TFDistilBertForMaskedLM"),Aft.forEach(t),crr=r(E8e," (DistilBERT model)"),E8e.forEach(t),frr=i(U),iT=n(U,"LI",{});var y8e=s(iT);nhe=n(y8e,"STRONG",{});var Lft=s(nhe);mrr=r(Lft,"electra"),Lft.forEach(t),grr=r(y8e," \u2014 "),uG=n(y8e,"A",{href:!0});var Bft=s(uG);hrr=r(Bft,"TFElectraForPreTraining"),Bft.forEach(t),prr=r(y8e," (ELECTRA model)"),y8e.forEach(t),_rr=i(U),dT=n(U,"LI",{});var w8e=s(dT);she=n(w8e,"STRONG",{});var xft=s(she);urr=r(xft,"flaubert"),xft.forEach(t),brr=r(w8e," \u2014 "),bG=n(w8e,"A",{href:!0});var kft=s(bG);vrr=r(kft,"TFFlaubertWithLMHeadModel"),kft.forEach(t),Trr=r(w8e," (FlauBERT model)"),w8e.forEach(t),Frr=i(U),cT=n(U,"LI",{});var A8e=s(cT);lhe=n(A8e,"STRONG",{});var Rft=s(lhe);Crr=r(Rft,"funnel"),Rft.forEach(t),Mrr=r(A8e," \u2014 "),vG=n(A8e,"A",{href:!0});var Sft=s(vG);Err=r(Sft,"TFFunnelForPreTraining"),Sft.forEach(t),yrr=r(A8e," (Funnel Transformer model)"),A8e.forEach(t),wrr=i(U),fT=n(U,"LI",{});var L8e=s(fT);ihe=n(L8e,"STRONG",{});var Pft=s(ihe);Arr=r(Pft,"gpt2"),Pft.forEach(t),Lrr=r(L8e," \u2014 "),TG=n(L8e,"A",{href:!0});var $ft=s(TG);Brr=r($ft,"TFGPT2LMHeadModel"),$ft.forEach(t),xrr=r(L8e," (OpenAI GPT-2 model)"),L8e.forEach(t),krr=i(U),mT=n(U,"LI",{});var B8e=s(mT);dhe=n(B8e,"STRONG",{});var Ift=s(dhe);Rrr=r(Ift,"layoutlm"),Ift.forEach(t),Srr=r(B8e," \u2014 "),FG=n(B8e,"A",{href:!0});var Nft=s(FG);Prr=r(Nft,"TFLayoutLMForMaskedLM"),Nft.forEach(t),$rr=r(B8e," (LayoutLM model)"),B8e.forEach(t),Irr=i(U),gT=n(U,"LI",{});var x8e=s(gT);che=n(x8e,"STRONG",{});var jft=s(che);Nrr=r(jft,"lxmert"),jft.forEach(t),jrr=r(x8e," \u2014 "),CG=n(x8e,"A",{href:!0});var Dft=s(CG);Drr=r(Dft,"TFLxmertForPreTraining"),Dft.forEach(t),qrr=r(x8e," (LXMERT model)"),x8e.forEach(t),Grr=i(U),hT=n(U,"LI",{});var k8e=s(hT);fhe=n(k8e,"STRONG",{});var qft=s(fhe);Orr=r(qft,"mobilebert"),qft.forEach(t),Xrr=r(k8e," \u2014 "),MG=n(k8e,"A",{href:!0});var Gft=s(MG);Vrr=r(Gft,"TFMobileBertForPreTraining"),Gft.forEach(t),zrr=r(k8e," (MobileBERT model)"),k8e.forEach(t),Wrr=i(U),pT=n(U,"LI",{});var R8e=s(pT);mhe=n(R8e,"STRONG",{});var Oft=s(mhe);Qrr=r(Oft,"mpnet"),Oft.forEach(t),Hrr=r(R8e," \u2014 "),EG=n(R8e,"A",{href:!0});var Xft=s(EG);Urr=r(Xft,"TFMPNetForMaskedLM"),Xft.forEach(t),Jrr=r(R8e," (MPNet model)"),R8e.forEach(t),Yrr=i(U),_T=n(U,"LI",{});var S8e=s(_T);ghe=n(S8e,"STRONG",{});var Vft=s(ghe);Krr=r(Vft,"openai-gpt"),Vft.forEach(t),Zrr=r(S8e," \u2014 "),yG=n(S8e,"A",{href:!0});var zft=s(yG);etr=r(zft,"TFOpenAIGPTLMHeadModel"),zft.forEach(t),otr=r(S8e," (OpenAI GPT model)"),S8e.forEach(t),rtr=i(U),uT=n(U,"LI",{});var P8e=s(uT);hhe=n(P8e,"STRONG",{});var Wft=s(hhe);ttr=r(Wft,"roberta"),Wft.forEach(t),atr=r(P8e," \u2014 "),wG=n(P8e,"A",{href:!0});var Qft=s(wG);ntr=r(Qft,"TFRobertaForMaskedLM"),Qft.forEach(t),str=r(P8e," (RoBERTa model)"),P8e.forEach(t),ltr=i(U),bT=n(U,"LI",{});var $8e=s(bT);phe=n($8e,"STRONG",{});var Hft=s(phe);itr=r(Hft,"t5"),Hft.forEach(t),dtr=r($8e," \u2014 "),AG=n($8e,"A",{href:!0});var Uft=s(AG);ctr=r(Uft,"TFT5ForConditionalGeneration"),Uft.forEach(t),ftr=r($8e," (T5 model)"),$8e.forEach(t),mtr=i(U),vT=n(U,"LI",{});var I8e=s(vT);_he=n(I8e,"STRONG",{});var Jft=s(_he);gtr=r(Jft,"tapas"),Jft.forEach(t),htr=r(I8e," \u2014 "),LG=n(I8e,"A",{href:!0});var Yft=s(LG);ptr=r(Yft,"TFTapasForMaskedLM"),Yft.forEach(t),_tr=r(I8e," (TAPAS model)"),I8e.forEach(t),utr=i(U),TT=n(U,"LI",{});var N8e=s(TT);uhe=n(N8e,"STRONG",{});var Kft=s(uhe);btr=r(Kft,"transfo-xl"),Kft.forEach(t),vtr=r(N8e," \u2014 "),BG=n(N8e,"A",{href:!0});var Zft=s(BG);Ttr=r(Zft,"TFTransfoXLLMHeadModel"),Zft.forEach(t),Ftr=r(N8e," (Transformer-XL model)"),N8e.forEach(t),Ctr=i(U),FT=n(U,"LI",{});var j8e=s(FT);bhe=n(j8e,"STRONG",{});var emt=s(bhe);Mtr=r(emt,"vit_mae"),emt.forEach(t),Etr=r(j8e," \u2014 "),xG=n(j8e,"A",{href:!0});var omt=s(xG);ytr=r(omt,"TFViTMAEForPreTraining"),omt.forEach(t),wtr=r(j8e," (ViTMAE model)"),j8e.forEach(t),Atr=i(U),CT=n(U,"LI",{});var D8e=s(CT);vhe=n(D8e,"STRONG",{});var rmt=s(vhe);Ltr=r(rmt,"xlm"),rmt.forEach(t),Btr=r(D8e," \u2014 "),kG=n(D8e,"A",{href:!0});var tmt=s(kG);xtr=r(tmt,"TFXLMWithLMHeadModel"),tmt.forEach(t),ktr=r(D8e," (XLM model)"),D8e.forEach(t),Rtr=i(U),MT=n(U,"LI",{});var q8e=s(MT);The=n(q8e,"STRONG",{});var amt=s(The);Str=r(amt,"xlm-roberta"),amt.forEach(t),Ptr=r(q8e," \u2014 "),RG=n(q8e,"A",{href:!0});var nmt=s(RG);$tr=r(nmt,"TFXLMRobertaForMaskedLM"),nmt.forEach(t),Itr=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),Ntr=i(U),ET=n(U,"LI",{});var G8e=s(ET);Fhe=n(G8e,"STRONG",{});var smt=s(Fhe);jtr=r(smt,"xlnet"),smt.forEach(t),Dtr=r(G8e," \u2014 "),SG=n(G8e,"A",{href:!0});var lmt=s(SG);qtr=r(lmt,"TFXLNetLMHeadModel"),lmt.forEach(t),Gtr=r(G8e," (XLNet model)"),G8e.forEach(t),U.forEach(t),Otr=i(_a),Che=n(_a,"P",{});var imt=s(Che);Xtr=r(imt,"Examples:"),imt.forEach(t),Vtr=i(_a),m(ZA.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),dRe=i(c),vc=n(c,"H2",{class:!0});var TPe=s(vc);yT=n(TPe,"A",{id:!0,class:!0,href:!0});var dmt=s(yT);Mhe=n(dmt,"SPAN",{});var cmt=s(Mhe);m(e0.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),ztr=i(TPe),Ehe=n(TPe,"SPAN",{});var fmt=s(Ehe);Wtr=r(fmt,"TFAutoModelForCausalLM"),fmt.forEach(t),TPe.forEach(t),cRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(o0.$$.fragment,Xl),Qtr=i(Xl),Tc=n(Xl,"P",{});var WW=s(Tc);Htr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yhe=n(WW,"CODE",{});var mmt=s(yhe);Utr=r(mmt,"from_pretrained()"),mmt.forEach(t),Jtr=r(WW,"class method or the "),whe=n(WW,"CODE",{});var gmt=s(whe);Ytr=r(gmt,"from_config()"),gmt.forEach(t),Ktr=r(WW,`class
method.`),WW.forEach(t),Ztr=i(Xl),r0=n(Xl,"P",{});var FPe=s(r0);ear=r(FPe,"This class cannot be instantiated directly using "),Ahe=n(FPe,"CODE",{});var hmt=s(Ahe);oar=r(hmt,"__init__()"),hmt.forEach(t),rar=r(FPe," (throws an error)."),FPe.forEach(t),tar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(t0.$$.fragment,Vl),aar=i(Vl),Lhe=n(Vl,"P",{});var pmt=s(Lhe);nar=r(pmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pmt.forEach(t),sar=i(Vl),Fc=n(Vl,"P",{});var QW=s(Fc);lar=r(QW,`Note:
Loading a model from its configuration file does `),Bhe=n(QW,"STRONG",{});var _mt=s(Bhe);iar=r(_mt,"not"),_mt.forEach(t),dar=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=n(QW,"CODE",{});var umt=s(xhe);car=r(umt,"from_pretrained()"),umt.forEach(t),far=r(QW,"to load the model weights."),QW.forEach(t),mar=i(Vl),khe=n(Vl,"P",{});var bmt=s(khe);gar=r(bmt,"Examples:"),bmt.forEach(t),har=i(Vl),m(a0.$$.fragment,Vl),Vl.forEach(t),par=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(n0.$$.fragment,ua),_ar=i(ua),Rhe=n(ua,"P",{});var vmt=s(Rhe);uar=r(vmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vmt.forEach(t),bar=i(ua),bn=n(ua,"P",{});var IE=s(bn);Tar=r(IE,"The model class to instantiate is selected based on the "),She=n(IE,"CODE",{});var Tmt=s(She);Far=r(Tmt,"model_type"),Tmt.forEach(t),Car=r(IE,` property of the config object (either
passed as an argument or loaded from `),Phe=n(IE,"CODE",{});var Fmt=s(Phe);Mar=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),Ear=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(IE,"CODE",{});var Cmt=s($he);yar=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),war=r(IE,":"),IE.forEach(t),Aar=i(ua),ge=n(ua,"UL",{});var Ce=s(ge);wT=n(Ce,"LI",{});var O8e=s(wT);Ihe=n(O8e,"STRONG",{});var Mmt=s(Ihe);Lar=r(Mmt,"bert"),Mmt.forEach(t),Bar=r(O8e," \u2014 "),PG=n(O8e,"A",{href:!0});var Emt=s(PG);xar=r(Emt,"TFBertLMHeadModel"),Emt.forEach(t),kar=r(O8e," (BERT model)"),O8e.forEach(t),Rar=i(Ce),AT=n(Ce,"LI",{});var X8e=s(AT);Nhe=n(X8e,"STRONG",{});var ymt=s(Nhe);Sar=r(ymt,"camembert"),ymt.forEach(t),Par=r(X8e," \u2014 "),$G=n(X8e,"A",{href:!0});var wmt=s($G);$ar=r(wmt,"TFCamembertForCausalLM"),wmt.forEach(t),Iar=r(X8e," (CamemBERT model)"),X8e.forEach(t),Nar=i(Ce),LT=n(Ce,"LI",{});var V8e=s(LT);jhe=n(V8e,"STRONG",{});var Amt=s(jhe);jar=r(Amt,"ctrl"),Amt.forEach(t),Dar=r(V8e," \u2014 "),IG=n(V8e,"A",{href:!0});var Lmt=s(IG);qar=r(Lmt,"TFCTRLLMHeadModel"),Lmt.forEach(t),Gar=r(V8e," (CTRL model)"),V8e.forEach(t),Oar=i(Ce),BT=n(Ce,"LI",{});var z8e=s(BT);Dhe=n(z8e,"STRONG",{});var Bmt=s(Dhe);Xar=r(Bmt,"gpt2"),Bmt.forEach(t),Var=r(z8e," \u2014 "),NG=n(z8e,"A",{href:!0});var xmt=s(NG);zar=r(xmt,"TFGPT2LMHeadModel"),xmt.forEach(t),War=r(z8e," (OpenAI GPT-2 model)"),z8e.forEach(t),Qar=i(Ce),xT=n(Ce,"LI",{});var W8e=s(xT);qhe=n(W8e,"STRONG",{});var kmt=s(qhe);Har=r(kmt,"openai-gpt"),kmt.forEach(t),Uar=r(W8e," \u2014 "),jG=n(W8e,"A",{href:!0});var Rmt=s(jG);Jar=r(Rmt,"TFOpenAIGPTLMHeadModel"),Rmt.forEach(t),Yar=r(W8e," (OpenAI GPT model)"),W8e.forEach(t),Kar=i(Ce),kT=n(Ce,"LI",{});var Q8e=s(kT);Ghe=n(Q8e,"STRONG",{});var Smt=s(Ghe);Zar=r(Smt,"rembert"),Smt.forEach(t),enr=r(Q8e," \u2014 "),DG=n(Q8e,"A",{href:!0});var Pmt=s(DG);onr=r(Pmt,"TFRemBertForCausalLM"),Pmt.forEach(t),rnr=r(Q8e," (RemBERT model)"),Q8e.forEach(t),tnr=i(Ce),RT=n(Ce,"LI",{});var H8e=s(RT);Ohe=n(H8e,"STRONG",{});var $mt=s(Ohe);anr=r($mt,"roberta"),$mt.forEach(t),nnr=r(H8e," \u2014 "),qG=n(H8e,"A",{href:!0});var Imt=s(qG);snr=r(Imt,"TFRobertaForCausalLM"),Imt.forEach(t),lnr=r(H8e," (RoBERTa model)"),H8e.forEach(t),inr=i(Ce),ST=n(Ce,"LI",{});var U8e=s(ST);Xhe=n(U8e,"STRONG",{});var Nmt=s(Xhe);dnr=r(Nmt,"roformer"),Nmt.forEach(t),cnr=r(U8e," \u2014 "),GG=n(U8e,"A",{href:!0});var jmt=s(GG);fnr=r(jmt,"TFRoFormerForCausalLM"),jmt.forEach(t),mnr=r(U8e," (RoFormer model)"),U8e.forEach(t),gnr=i(Ce),PT=n(Ce,"LI",{});var J8e=s(PT);Vhe=n(J8e,"STRONG",{});var Dmt=s(Vhe);hnr=r(Dmt,"transfo-xl"),Dmt.forEach(t),pnr=r(J8e," \u2014 "),OG=n(J8e,"A",{href:!0});var qmt=s(OG);_nr=r(qmt,"TFTransfoXLLMHeadModel"),qmt.forEach(t),unr=r(J8e," (Transformer-XL model)"),J8e.forEach(t),bnr=i(Ce),$T=n(Ce,"LI",{});var Y8e=s($T);zhe=n(Y8e,"STRONG",{});var Gmt=s(zhe);vnr=r(Gmt,"xlm"),Gmt.forEach(t),Tnr=r(Y8e," \u2014 "),XG=n(Y8e,"A",{href:!0});var Omt=s(XG);Fnr=r(Omt,"TFXLMWithLMHeadModel"),Omt.forEach(t),Cnr=r(Y8e," (XLM model)"),Y8e.forEach(t),Mnr=i(Ce),IT=n(Ce,"LI",{});var K8e=s(IT);Whe=n(K8e,"STRONG",{});var Xmt=s(Whe);Enr=r(Xmt,"xlnet"),Xmt.forEach(t),ynr=r(K8e," \u2014 "),VG=n(K8e,"A",{href:!0});var Vmt=s(VG);wnr=r(Vmt,"TFXLNetLMHeadModel"),Vmt.forEach(t),Anr=r(K8e," (XLNet model)"),K8e.forEach(t),Ce.forEach(t),Lnr=i(ua),Qhe=n(ua,"P",{});var zmt=s(Qhe);Bnr=r(zmt,"Examples:"),zmt.forEach(t),xnr=i(ua),m(s0.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),fRe=i(c),Cc=n(c,"H2",{class:!0});var CPe=s(Cc);NT=n(CPe,"A",{id:!0,class:!0,href:!0});var Wmt=s(NT);Hhe=n(Wmt,"SPAN",{});var Qmt=s(Hhe);m(l0.$$.fragment,Qmt),Qmt.forEach(t),Wmt.forEach(t),knr=i(CPe),Uhe=n(CPe,"SPAN",{});var Hmt=s(Uhe);Rnr=r(Hmt,"TFAutoModelForImageClassification"),Hmt.forEach(t),CPe.forEach(t),mRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(i0.$$.fragment,zl),Snr=i(zl),Mc=n(zl,"P",{});var HW=s(Mc);Pnr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jhe=n(HW,"CODE",{});var Umt=s(Jhe);$nr=r(Umt,"from_pretrained()"),Umt.forEach(t),Inr=r(HW,"class method or the "),Yhe=n(HW,"CODE",{});var Jmt=s(Yhe);Nnr=r(Jmt,"from_config()"),Jmt.forEach(t),jnr=r(HW,`class
method.`),HW.forEach(t),Dnr=i(zl),d0=n(zl,"P",{});var MPe=s(d0);qnr=r(MPe,"This class cannot be instantiated directly using "),Khe=n(MPe,"CODE",{});var Ymt=s(Khe);Gnr=r(Ymt,"__init__()"),Ymt.forEach(t),Onr=r(MPe," (throws an error)."),MPe.forEach(t),Xnr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(c0.$$.fragment,Wl),Vnr=i(Wl),Zhe=n(Wl,"P",{});var Kmt=s(Zhe);znr=r(Kmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kmt.forEach(t),Wnr=i(Wl),Ec=n(Wl,"P",{});var UW=s(Ec);Qnr=r(UW,`Note:
Loading a model from its configuration file does `),epe=n(UW,"STRONG",{});var Zmt=s(epe);Hnr=r(Zmt,"not"),Zmt.forEach(t),Unr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ope=n(UW,"CODE",{});var egt=s(ope);Jnr=r(egt,"from_pretrained()"),egt.forEach(t),Ynr=r(UW,"to load the model weights."),UW.forEach(t),Knr=i(Wl),rpe=n(Wl,"P",{});var ogt=s(rpe);Znr=r(ogt,"Examples:"),ogt.forEach(t),esr=i(Wl),m(f0.$$.fragment,Wl),Wl.forEach(t),osr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(m0.$$.fragment,ba),rsr=i(ba),tpe=n(ba,"P",{});var rgt=s(tpe);tsr=r(rgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rgt.forEach(t),asr=i(ba),vn=n(ba,"P",{});var NE=s(vn);nsr=r(NE,"The model class to instantiate is selected based on the "),ape=n(NE,"CODE",{});var tgt=s(ape);ssr=r(tgt,"model_type"),tgt.forEach(t),lsr=r(NE,` property of the config object (either
passed as an argument or loaded from `),npe=n(NE,"CODE",{});var agt=s(npe);isr=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),dsr=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(NE,"CODE",{});var ngt=s(spe);csr=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),fsr=r(NE,":"),NE.forEach(t),msr=i(ba),g0=n(ba,"UL",{});var EPe=s(g0);jT=n(EPe,"LI",{});var Z8e=s(jT);lpe=n(Z8e,"STRONG",{});var sgt=s(lpe);gsr=r(sgt,"convnext"),sgt.forEach(t),hsr=r(Z8e," \u2014 "),zG=n(Z8e,"A",{href:!0});var lgt=s(zG);psr=r(lgt,"TFConvNextForImageClassification"),lgt.forEach(t),_sr=r(Z8e," (ConvNext model)"),Z8e.forEach(t),usr=i(EPe),DT=n(EPe,"LI",{});var e7e=s(DT);ipe=n(e7e,"STRONG",{});var igt=s(ipe);bsr=r(igt,"vit"),igt.forEach(t),vsr=r(e7e," \u2014 "),WG=n(e7e,"A",{href:!0});var dgt=s(WG);Tsr=r(dgt,"TFViTForImageClassification"),dgt.forEach(t),Fsr=r(e7e," (ViT model)"),e7e.forEach(t),EPe.forEach(t),Csr=i(ba),dpe=n(ba,"P",{});var cgt=s(dpe);Msr=r(cgt,"Examples:"),cgt.forEach(t),Esr=i(ba),m(h0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),gRe=i(c),yc=n(c,"H2",{class:!0});var yPe=s(yc);qT=n(yPe,"A",{id:!0,class:!0,href:!0});var fgt=s(qT);cpe=n(fgt,"SPAN",{});var mgt=s(cpe);m(p0.$$.fragment,mgt),mgt.forEach(t),fgt.forEach(t),ysr=i(yPe),fpe=n(yPe,"SPAN",{});var ggt=s(fpe);wsr=r(ggt,"TFAutoModelForMaskedLM"),ggt.forEach(t),yPe.forEach(t),hRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(_0.$$.fragment,Ql),Asr=i(Ql),wc=n(Ql,"P",{});var JW=s(wc);Lsr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mpe=n(JW,"CODE",{});var hgt=s(mpe);Bsr=r(hgt,"from_pretrained()"),hgt.forEach(t),xsr=r(JW,"class method or the "),gpe=n(JW,"CODE",{});var pgt=s(gpe);ksr=r(pgt,"from_config()"),pgt.forEach(t),Rsr=r(JW,`class
method.`),JW.forEach(t),Ssr=i(Ql),u0=n(Ql,"P",{});var wPe=s(u0);Psr=r(wPe,"This class cannot be instantiated directly using "),hpe=n(wPe,"CODE",{});var _gt=s(hpe);$sr=r(_gt,"__init__()"),_gt.forEach(t),Isr=r(wPe," (throws an error)."),wPe.forEach(t),Nsr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(b0.$$.fragment,Hl),jsr=i(Hl),ppe=n(Hl,"P",{});var ugt=s(ppe);Dsr=r(ugt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ugt.forEach(t),qsr=i(Hl),Ac=n(Hl,"P",{});var YW=s(Ac);Gsr=r(YW,`Note:
Loading a model from its configuration file does `),_pe=n(YW,"STRONG",{});var bgt=s(_pe);Osr=r(bgt,"not"),bgt.forEach(t),Xsr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=n(YW,"CODE",{});var vgt=s(upe);Vsr=r(vgt,"from_pretrained()"),vgt.forEach(t),zsr=r(YW,"to load the model weights."),YW.forEach(t),Wsr=i(Hl),bpe=n(Hl,"P",{});var Tgt=s(bpe);Qsr=r(Tgt,"Examples:"),Tgt.forEach(t),Hsr=i(Hl),m(v0.$$.fragment,Hl),Hl.forEach(t),Usr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(T0.$$.fragment,va),Jsr=i(va),vpe=n(va,"P",{});var Fgt=s(vpe);Ysr=r(Fgt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fgt.forEach(t),Ksr=i(va),Tn=n(va,"P",{});var jE=s(Tn);Zsr=r(jE,"The model class to instantiate is selected based on the "),Tpe=n(jE,"CODE",{});var Cgt=s(Tpe);elr=r(Cgt,"model_type"),Cgt.forEach(t),olr=r(jE,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(jE,"CODE",{});var Mgt=s(Fpe);rlr=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),tlr=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(jE,"CODE",{});var Egt=s(Cpe);alr=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),nlr=r(jE,":"),jE.forEach(t),slr=i(va),Y=n(va,"UL",{});var ee=s(Y);GT=n(ee,"LI",{});var o7e=s(GT);Mpe=n(o7e,"STRONG",{});var ygt=s(Mpe);llr=r(ygt,"albert"),ygt.forEach(t),ilr=r(o7e," \u2014 "),QG=n(o7e,"A",{href:!0});var wgt=s(QG);dlr=r(wgt,"TFAlbertForMaskedLM"),wgt.forEach(t),clr=r(o7e," (ALBERT model)"),o7e.forEach(t),flr=i(ee),OT=n(ee,"LI",{});var r7e=s(OT);Epe=n(r7e,"STRONG",{});var Agt=s(Epe);mlr=r(Agt,"bert"),Agt.forEach(t),glr=r(r7e," \u2014 "),HG=n(r7e,"A",{href:!0});var Lgt=s(HG);hlr=r(Lgt,"TFBertForMaskedLM"),Lgt.forEach(t),plr=r(r7e," (BERT model)"),r7e.forEach(t),_lr=i(ee),XT=n(ee,"LI",{});var t7e=s(XT);ype=n(t7e,"STRONG",{});var Bgt=s(ype);ulr=r(Bgt,"camembert"),Bgt.forEach(t),blr=r(t7e," \u2014 "),UG=n(t7e,"A",{href:!0});var xgt=s(UG);vlr=r(xgt,"TFCamembertForMaskedLM"),xgt.forEach(t),Tlr=r(t7e," (CamemBERT model)"),t7e.forEach(t),Flr=i(ee),VT=n(ee,"LI",{});var a7e=s(VT);wpe=n(a7e,"STRONG",{});var kgt=s(wpe);Clr=r(kgt,"convbert"),kgt.forEach(t),Mlr=r(a7e," \u2014 "),JG=n(a7e,"A",{href:!0});var Rgt=s(JG);Elr=r(Rgt,"TFConvBertForMaskedLM"),Rgt.forEach(t),ylr=r(a7e," (ConvBERT model)"),a7e.forEach(t),wlr=i(ee),zT=n(ee,"LI",{});var n7e=s(zT);Ape=n(n7e,"STRONG",{});var Sgt=s(Ape);Alr=r(Sgt,"deberta"),Sgt.forEach(t),Llr=r(n7e," \u2014 "),YG=n(n7e,"A",{href:!0});var Pgt=s(YG);Blr=r(Pgt,"TFDebertaForMaskedLM"),Pgt.forEach(t),xlr=r(n7e," (DeBERTa model)"),n7e.forEach(t),klr=i(ee),WT=n(ee,"LI",{});var s7e=s(WT);Lpe=n(s7e,"STRONG",{});var $gt=s(Lpe);Rlr=r($gt,"deberta-v2"),$gt.forEach(t),Slr=r(s7e," \u2014 "),KG=n(s7e,"A",{href:!0});var Igt=s(KG);Plr=r(Igt,"TFDebertaV2ForMaskedLM"),Igt.forEach(t),$lr=r(s7e," (DeBERTa-v2 model)"),s7e.forEach(t),Ilr=i(ee),QT=n(ee,"LI",{});var l7e=s(QT);Bpe=n(l7e,"STRONG",{});var Ngt=s(Bpe);Nlr=r(Ngt,"distilbert"),Ngt.forEach(t),jlr=r(l7e," \u2014 "),ZG=n(l7e,"A",{href:!0});var jgt=s(ZG);Dlr=r(jgt,"TFDistilBertForMaskedLM"),jgt.forEach(t),qlr=r(l7e," (DistilBERT model)"),l7e.forEach(t),Glr=i(ee),HT=n(ee,"LI",{});var i7e=s(HT);xpe=n(i7e,"STRONG",{});var Dgt=s(xpe);Olr=r(Dgt,"electra"),Dgt.forEach(t),Xlr=r(i7e," \u2014 "),eO=n(i7e,"A",{href:!0});var qgt=s(eO);Vlr=r(qgt,"TFElectraForMaskedLM"),qgt.forEach(t),zlr=r(i7e," (ELECTRA model)"),i7e.forEach(t),Wlr=i(ee),UT=n(ee,"LI",{});var d7e=s(UT);kpe=n(d7e,"STRONG",{});var Ggt=s(kpe);Qlr=r(Ggt,"flaubert"),Ggt.forEach(t),Hlr=r(d7e," \u2014 "),oO=n(d7e,"A",{href:!0});var Ogt=s(oO);Ulr=r(Ogt,"TFFlaubertWithLMHeadModel"),Ogt.forEach(t),Jlr=r(d7e," (FlauBERT model)"),d7e.forEach(t),Ylr=i(ee),JT=n(ee,"LI",{});var c7e=s(JT);Rpe=n(c7e,"STRONG",{});var Xgt=s(Rpe);Klr=r(Xgt,"funnel"),Xgt.forEach(t),Zlr=r(c7e," \u2014 "),rO=n(c7e,"A",{href:!0});var Vgt=s(rO);eir=r(Vgt,"TFFunnelForMaskedLM"),Vgt.forEach(t),oir=r(c7e," (Funnel Transformer model)"),c7e.forEach(t),rir=i(ee),YT=n(ee,"LI",{});var f7e=s(YT);Spe=n(f7e,"STRONG",{});var zgt=s(Spe);tir=r(zgt,"layoutlm"),zgt.forEach(t),air=r(f7e," \u2014 "),tO=n(f7e,"A",{href:!0});var Wgt=s(tO);nir=r(Wgt,"TFLayoutLMForMaskedLM"),Wgt.forEach(t),sir=r(f7e," (LayoutLM model)"),f7e.forEach(t),lir=i(ee),KT=n(ee,"LI",{});var m7e=s(KT);Ppe=n(m7e,"STRONG",{});var Qgt=s(Ppe);iir=r(Qgt,"longformer"),Qgt.forEach(t),dir=r(m7e," \u2014 "),aO=n(m7e,"A",{href:!0});var Hgt=s(aO);cir=r(Hgt,"TFLongformerForMaskedLM"),Hgt.forEach(t),fir=r(m7e," (Longformer model)"),m7e.forEach(t),mir=i(ee),ZT=n(ee,"LI",{});var g7e=s(ZT);$pe=n(g7e,"STRONG",{});var Ugt=s($pe);gir=r(Ugt,"mobilebert"),Ugt.forEach(t),hir=r(g7e," \u2014 "),nO=n(g7e,"A",{href:!0});var Jgt=s(nO);pir=r(Jgt,"TFMobileBertForMaskedLM"),Jgt.forEach(t),_ir=r(g7e," (MobileBERT model)"),g7e.forEach(t),uir=i(ee),eF=n(ee,"LI",{});var h7e=s(eF);Ipe=n(h7e,"STRONG",{});var Ygt=s(Ipe);bir=r(Ygt,"mpnet"),Ygt.forEach(t),vir=r(h7e," \u2014 "),sO=n(h7e,"A",{href:!0});var Kgt=s(sO);Tir=r(Kgt,"TFMPNetForMaskedLM"),Kgt.forEach(t),Fir=r(h7e," (MPNet model)"),h7e.forEach(t),Cir=i(ee),oF=n(ee,"LI",{});var p7e=s(oF);Npe=n(p7e,"STRONG",{});var Zgt=s(Npe);Mir=r(Zgt,"rembert"),Zgt.forEach(t),Eir=r(p7e," \u2014 "),lO=n(p7e,"A",{href:!0});var eht=s(lO);yir=r(eht,"TFRemBertForMaskedLM"),eht.forEach(t),wir=r(p7e," (RemBERT model)"),p7e.forEach(t),Air=i(ee),rF=n(ee,"LI",{});var _7e=s(rF);jpe=n(_7e,"STRONG",{});var oht=s(jpe);Lir=r(oht,"roberta"),oht.forEach(t),Bir=r(_7e," \u2014 "),iO=n(_7e,"A",{href:!0});var rht=s(iO);xir=r(rht,"TFRobertaForMaskedLM"),rht.forEach(t),kir=r(_7e," (RoBERTa model)"),_7e.forEach(t),Rir=i(ee),tF=n(ee,"LI",{});var u7e=s(tF);Dpe=n(u7e,"STRONG",{});var tht=s(Dpe);Sir=r(tht,"roformer"),tht.forEach(t),Pir=r(u7e," \u2014 "),dO=n(u7e,"A",{href:!0});var aht=s(dO);$ir=r(aht,"TFRoFormerForMaskedLM"),aht.forEach(t),Iir=r(u7e," (RoFormer model)"),u7e.forEach(t),Nir=i(ee),aF=n(ee,"LI",{});var b7e=s(aF);qpe=n(b7e,"STRONG",{});var nht=s(qpe);jir=r(nht,"tapas"),nht.forEach(t),Dir=r(b7e," \u2014 "),cO=n(b7e,"A",{href:!0});var sht=s(cO);qir=r(sht,"TFTapasForMaskedLM"),sht.forEach(t),Gir=r(b7e," (TAPAS model)"),b7e.forEach(t),Oir=i(ee),nF=n(ee,"LI",{});var v7e=s(nF);Gpe=n(v7e,"STRONG",{});var lht=s(Gpe);Xir=r(lht,"xlm"),lht.forEach(t),Vir=r(v7e," \u2014 "),fO=n(v7e,"A",{href:!0});var iht=s(fO);zir=r(iht,"TFXLMWithLMHeadModel"),iht.forEach(t),Wir=r(v7e," (XLM model)"),v7e.forEach(t),Qir=i(ee),sF=n(ee,"LI",{});var T7e=s(sF);Ope=n(T7e,"STRONG",{});var dht=s(Ope);Hir=r(dht,"xlm-roberta"),dht.forEach(t),Uir=r(T7e," \u2014 "),mO=n(T7e,"A",{href:!0});var cht=s(mO);Jir=r(cht,"TFXLMRobertaForMaskedLM"),cht.forEach(t),Yir=r(T7e," (XLM-RoBERTa model)"),T7e.forEach(t),ee.forEach(t),Kir=i(va),Xpe=n(va,"P",{});var fht=s(Xpe);Zir=r(fht,"Examples:"),fht.forEach(t),edr=i(va),m(F0.$$.fragment,va),va.forEach(t),Ql.forEach(t),pRe=i(c),Lc=n(c,"H2",{class:!0});var APe=s(Lc);lF=n(APe,"A",{id:!0,class:!0,href:!0});var mht=s(lF);Vpe=n(mht,"SPAN",{});var ght=s(Vpe);m(C0.$$.fragment,ght),ght.forEach(t),mht.forEach(t),odr=i(APe),zpe=n(APe,"SPAN",{});var hht=s(zpe);rdr=r(hht,"TFAutoModelForSeq2SeqLM"),hht.forEach(t),APe.forEach(t),_Re=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(M0.$$.fragment,Ul),tdr=i(Ul),Bc=n(Ul,"P",{});var KW=s(Bc);adr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wpe=n(KW,"CODE",{});var pht=s(Wpe);ndr=r(pht,"from_pretrained()"),pht.forEach(t),sdr=r(KW,"class method or the "),Qpe=n(KW,"CODE",{});var _ht=s(Qpe);ldr=r(_ht,"from_config()"),_ht.forEach(t),idr=r(KW,`class
method.`),KW.forEach(t),ddr=i(Ul),E0=n(Ul,"P",{});var LPe=s(E0);cdr=r(LPe,"This class cannot be instantiated directly using "),Hpe=n(LPe,"CODE",{});var uht=s(Hpe);fdr=r(uht,"__init__()"),uht.forEach(t),mdr=r(LPe," (throws an error)."),LPe.forEach(t),gdr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(y0.$$.fragment,Jl),hdr=i(Jl),Upe=n(Jl,"P",{});var bht=s(Upe);pdr=r(bht,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bht.forEach(t),_dr=i(Jl),xc=n(Jl,"P",{});var ZW=s(xc);udr=r(ZW,`Note:
Loading a model from its configuration file does `),Jpe=n(ZW,"STRONG",{});var vht=s(Jpe);bdr=r(vht,"not"),vht.forEach(t),vdr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ype=n(ZW,"CODE",{});var Tht=s(Ype);Tdr=r(Tht,"from_pretrained()"),Tht.forEach(t),Fdr=r(ZW,"to load the model weights."),ZW.forEach(t),Cdr=i(Jl),Kpe=n(Jl,"P",{});var Fht=s(Kpe);Mdr=r(Fht,"Examples:"),Fht.forEach(t),Edr=i(Jl),m(w0.$$.fragment,Jl),Jl.forEach(t),ydr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(A0.$$.fragment,Ta),wdr=i(Ta),Zpe=n(Ta,"P",{});var Cht=s(Zpe);Adr=r(Cht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cht.forEach(t),Ldr=i(Ta),Fn=n(Ta,"P",{});var DE=s(Fn);Bdr=r(DE,"The model class to instantiate is selected based on the "),e_e=n(DE,"CODE",{});var Mht=s(e_e);xdr=r(Mht,"model_type"),Mht.forEach(t),kdr=r(DE,` property of the config object (either
passed as an argument or loaded from `),o_e=n(DE,"CODE",{});var Eht=s(o_e);Rdr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),Sdr=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(DE,"CODE",{});var yht=s(r_e);Pdr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),$dr=r(DE,":"),DE.forEach(t),Idr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);iF=n(ye,"LI",{});var F7e=s(iF);t_e=n(F7e,"STRONG",{});var wht=s(t_e);Ndr=r(wht,"bart"),wht.forEach(t),jdr=r(F7e," \u2014 "),gO=n(F7e,"A",{href:!0});var Aht=s(gO);Ddr=r(Aht,"TFBartForConditionalGeneration"),Aht.forEach(t),qdr=r(F7e," (BART model)"),F7e.forEach(t),Gdr=i(ye),dF=n(ye,"LI",{});var C7e=s(dF);a_e=n(C7e,"STRONG",{});var Lht=s(a_e);Odr=r(Lht,"blenderbot"),Lht.forEach(t),Xdr=r(C7e," \u2014 "),hO=n(C7e,"A",{href:!0});var Bht=s(hO);Vdr=r(Bht,"TFBlenderbotForConditionalGeneration"),Bht.forEach(t),zdr=r(C7e," (Blenderbot model)"),C7e.forEach(t),Wdr=i(ye),cF=n(ye,"LI",{});var M7e=s(cF);n_e=n(M7e,"STRONG",{});var xht=s(n_e);Qdr=r(xht,"blenderbot-small"),xht.forEach(t),Hdr=r(M7e," \u2014 "),pO=n(M7e,"A",{href:!0});var kht=s(pO);Udr=r(kht,"TFBlenderbotSmallForConditionalGeneration"),kht.forEach(t),Jdr=r(M7e," (BlenderbotSmall model)"),M7e.forEach(t),Ydr=i(ye),fF=n(ye,"LI",{});var E7e=s(fF);s_e=n(E7e,"STRONG",{});var Rht=s(s_e);Kdr=r(Rht,"encoder-decoder"),Rht.forEach(t),Zdr=r(E7e," \u2014 "),_O=n(E7e,"A",{href:!0});var Sht=s(_O);ecr=r(Sht,"TFEncoderDecoderModel"),Sht.forEach(t),ocr=r(E7e," (Encoder decoder model)"),E7e.forEach(t),rcr=i(ye),mF=n(ye,"LI",{});var y7e=s(mF);l_e=n(y7e,"STRONG",{});var Pht=s(l_e);tcr=r(Pht,"led"),Pht.forEach(t),acr=r(y7e," \u2014 "),uO=n(y7e,"A",{href:!0});var $ht=s(uO);ncr=r($ht,"TFLEDForConditionalGeneration"),$ht.forEach(t),scr=r(y7e," (LED model)"),y7e.forEach(t),lcr=i(ye),gF=n(ye,"LI",{});var w7e=s(gF);i_e=n(w7e,"STRONG",{});var Iht=s(i_e);icr=r(Iht,"marian"),Iht.forEach(t),dcr=r(w7e," \u2014 "),bO=n(w7e,"A",{href:!0});var Nht=s(bO);ccr=r(Nht,"TFMarianMTModel"),Nht.forEach(t),fcr=r(w7e," (Marian model)"),w7e.forEach(t),mcr=i(ye),hF=n(ye,"LI",{});var A7e=s(hF);d_e=n(A7e,"STRONG",{});var jht=s(d_e);gcr=r(jht,"mbart"),jht.forEach(t),hcr=r(A7e," \u2014 "),vO=n(A7e,"A",{href:!0});var Dht=s(vO);pcr=r(Dht,"TFMBartForConditionalGeneration"),Dht.forEach(t),_cr=r(A7e," (mBART model)"),A7e.forEach(t),ucr=i(ye),pF=n(ye,"LI",{});var L7e=s(pF);c_e=n(L7e,"STRONG",{});var qht=s(c_e);bcr=r(qht,"mt5"),qht.forEach(t),vcr=r(L7e," \u2014 "),TO=n(L7e,"A",{href:!0});var Ght=s(TO);Tcr=r(Ght,"TFMT5ForConditionalGeneration"),Ght.forEach(t),Fcr=r(L7e," (mT5 model)"),L7e.forEach(t),Ccr=i(ye),_F=n(ye,"LI",{});var B7e=s(_F);f_e=n(B7e,"STRONG",{});var Oht=s(f_e);Mcr=r(Oht,"pegasus"),Oht.forEach(t),Ecr=r(B7e," \u2014 "),FO=n(B7e,"A",{href:!0});var Xht=s(FO);ycr=r(Xht,"TFPegasusForConditionalGeneration"),Xht.forEach(t),wcr=r(B7e," (Pegasus model)"),B7e.forEach(t),Acr=i(ye),uF=n(ye,"LI",{});var x7e=s(uF);m_e=n(x7e,"STRONG",{});var Vht=s(m_e);Lcr=r(Vht,"t5"),Vht.forEach(t),Bcr=r(x7e," \u2014 "),CO=n(x7e,"A",{href:!0});var zht=s(CO);xcr=r(zht,"TFT5ForConditionalGeneration"),zht.forEach(t),kcr=r(x7e," (T5 model)"),x7e.forEach(t),ye.forEach(t),Rcr=i(Ta),g_e=n(Ta,"P",{});var Wht=s(g_e);Scr=r(Wht,"Examples:"),Wht.forEach(t),Pcr=i(Ta),m(L0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),uRe=i(c),kc=n(c,"H2",{class:!0});var BPe=s(kc);bF=n(BPe,"A",{id:!0,class:!0,href:!0});var Qht=s(bF);h_e=n(Qht,"SPAN",{});var Hht=s(h_e);m(B0.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),$cr=i(BPe),p_e=n(BPe,"SPAN",{});var Uht=s(p_e);Icr=r(Uht,"TFAutoModelForSequenceClassification"),Uht.forEach(t),BPe.forEach(t),bRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(x0.$$.fragment,Yl),Ncr=i(Yl),Rc=n(Yl,"P",{});var eQ=s(Rc);jcr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),__e=n(eQ,"CODE",{});var Jht=s(__e);Dcr=r(Jht,"from_pretrained()"),Jht.forEach(t),qcr=r(eQ,"class method or the "),u_e=n(eQ,"CODE",{});var Yht=s(u_e);Gcr=r(Yht,"from_config()"),Yht.forEach(t),Ocr=r(eQ,`class
method.`),eQ.forEach(t),Xcr=i(Yl),k0=n(Yl,"P",{});var xPe=s(k0);Vcr=r(xPe,"This class cannot be instantiated directly using "),b_e=n(xPe,"CODE",{});var Kht=s(b_e);zcr=r(Kht,"__init__()"),Kht.forEach(t),Wcr=r(xPe," (throws an error)."),xPe.forEach(t),Qcr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(R0.$$.fragment,Kl),Hcr=i(Kl),v_e=n(Kl,"P",{});var Zht=s(v_e);Ucr=r(Zht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zht.forEach(t),Jcr=i(Kl),Sc=n(Kl,"P",{});var oQ=s(Sc);Ycr=r(oQ,`Note:
Loading a model from its configuration file does `),T_e=n(oQ,"STRONG",{});var ept=s(T_e);Kcr=r(ept,"not"),ept.forEach(t),Zcr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),F_e=n(oQ,"CODE",{});var opt=s(F_e);efr=r(opt,"from_pretrained()"),opt.forEach(t),ofr=r(oQ,"to load the model weights."),oQ.forEach(t),rfr=i(Kl),C_e=n(Kl,"P",{});var rpt=s(C_e);tfr=r(rpt,"Examples:"),rpt.forEach(t),afr=i(Kl),m(S0.$$.fragment,Kl),Kl.forEach(t),nfr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(P0.$$.fragment,Fa),sfr=i(Fa),M_e=n(Fa,"P",{});var tpt=s(M_e);lfr=r(tpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tpt.forEach(t),ifr=i(Fa),Cn=n(Fa,"P",{});var qE=s(Cn);dfr=r(qE,"The model class to instantiate is selected based on the "),E_e=n(qE,"CODE",{});var apt=s(E_e);cfr=r(apt,"model_type"),apt.forEach(t),ffr=r(qE,` property of the config object (either
passed as an argument or loaded from `),y_e=n(qE,"CODE",{});var npt=s(y_e);mfr=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),gfr=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(qE,"CODE",{});var spt=s(w_e);hfr=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),pfr=r(qE,":"),qE.forEach(t),_fr=i(Fa),V=n(Fa,"UL",{});var W=s(V);vF=n(W,"LI",{});var k7e=s(vF);A_e=n(k7e,"STRONG",{});var lpt=s(A_e);ufr=r(lpt,"albert"),lpt.forEach(t),bfr=r(k7e," \u2014 "),MO=n(k7e,"A",{href:!0});var ipt=s(MO);vfr=r(ipt,"TFAlbertForSequenceClassification"),ipt.forEach(t),Tfr=r(k7e," (ALBERT model)"),k7e.forEach(t),Ffr=i(W),TF=n(W,"LI",{});var R7e=s(TF);L_e=n(R7e,"STRONG",{});var dpt=s(L_e);Cfr=r(dpt,"bert"),dpt.forEach(t),Mfr=r(R7e," \u2014 "),EO=n(R7e,"A",{href:!0});var cpt=s(EO);Efr=r(cpt,"TFBertForSequenceClassification"),cpt.forEach(t),yfr=r(R7e," (BERT model)"),R7e.forEach(t),wfr=i(W),FF=n(W,"LI",{});var S7e=s(FF);B_e=n(S7e,"STRONG",{});var fpt=s(B_e);Afr=r(fpt,"camembert"),fpt.forEach(t),Lfr=r(S7e," \u2014 "),yO=n(S7e,"A",{href:!0});var mpt=s(yO);Bfr=r(mpt,"TFCamembertForSequenceClassification"),mpt.forEach(t),xfr=r(S7e," (CamemBERT model)"),S7e.forEach(t),kfr=i(W),CF=n(W,"LI",{});var P7e=s(CF);x_e=n(P7e,"STRONG",{});var gpt=s(x_e);Rfr=r(gpt,"convbert"),gpt.forEach(t),Sfr=r(P7e," \u2014 "),wO=n(P7e,"A",{href:!0});var hpt=s(wO);Pfr=r(hpt,"TFConvBertForSequenceClassification"),hpt.forEach(t),$fr=r(P7e," (ConvBERT model)"),P7e.forEach(t),Ifr=i(W),MF=n(W,"LI",{});var $7e=s(MF);k_e=n($7e,"STRONG",{});var ppt=s(k_e);Nfr=r(ppt,"ctrl"),ppt.forEach(t),jfr=r($7e," \u2014 "),AO=n($7e,"A",{href:!0});var _pt=s(AO);Dfr=r(_pt,"TFCTRLForSequenceClassification"),_pt.forEach(t),qfr=r($7e," (CTRL model)"),$7e.forEach(t),Gfr=i(W),EF=n(W,"LI",{});var I7e=s(EF);R_e=n(I7e,"STRONG",{});var upt=s(R_e);Ofr=r(upt,"deberta"),upt.forEach(t),Xfr=r(I7e," \u2014 "),LO=n(I7e,"A",{href:!0});var bpt=s(LO);Vfr=r(bpt,"TFDebertaForSequenceClassification"),bpt.forEach(t),zfr=r(I7e," (DeBERTa model)"),I7e.forEach(t),Wfr=i(W),yF=n(W,"LI",{});var N7e=s(yF);S_e=n(N7e,"STRONG",{});var vpt=s(S_e);Qfr=r(vpt,"deberta-v2"),vpt.forEach(t),Hfr=r(N7e," \u2014 "),BO=n(N7e,"A",{href:!0});var Tpt=s(BO);Ufr=r(Tpt,"TFDebertaV2ForSequenceClassification"),Tpt.forEach(t),Jfr=r(N7e," (DeBERTa-v2 model)"),N7e.forEach(t),Yfr=i(W),wF=n(W,"LI",{});var j7e=s(wF);P_e=n(j7e,"STRONG",{});var Fpt=s(P_e);Kfr=r(Fpt,"distilbert"),Fpt.forEach(t),Zfr=r(j7e," \u2014 "),xO=n(j7e,"A",{href:!0});var Cpt=s(xO);emr=r(Cpt,"TFDistilBertForSequenceClassification"),Cpt.forEach(t),omr=r(j7e," (DistilBERT model)"),j7e.forEach(t),rmr=i(W),AF=n(W,"LI",{});var D7e=s(AF);$_e=n(D7e,"STRONG",{});var Mpt=s($_e);tmr=r(Mpt,"electra"),Mpt.forEach(t),amr=r(D7e," \u2014 "),kO=n(D7e,"A",{href:!0});var Ept=s(kO);nmr=r(Ept,"TFElectraForSequenceClassification"),Ept.forEach(t),smr=r(D7e," (ELECTRA model)"),D7e.forEach(t),lmr=i(W),LF=n(W,"LI",{});var q7e=s(LF);I_e=n(q7e,"STRONG",{});var ypt=s(I_e);imr=r(ypt,"flaubert"),ypt.forEach(t),dmr=r(q7e," \u2014 "),RO=n(q7e,"A",{href:!0});var wpt=s(RO);cmr=r(wpt,"TFFlaubertForSequenceClassification"),wpt.forEach(t),fmr=r(q7e," (FlauBERT model)"),q7e.forEach(t),mmr=i(W),BF=n(W,"LI",{});var G7e=s(BF);N_e=n(G7e,"STRONG",{});var Apt=s(N_e);gmr=r(Apt,"funnel"),Apt.forEach(t),hmr=r(G7e," \u2014 "),SO=n(G7e,"A",{href:!0});var Lpt=s(SO);pmr=r(Lpt,"TFFunnelForSequenceClassification"),Lpt.forEach(t),_mr=r(G7e," (Funnel Transformer model)"),G7e.forEach(t),umr=i(W),xF=n(W,"LI",{});var O7e=s(xF);j_e=n(O7e,"STRONG",{});var Bpt=s(j_e);bmr=r(Bpt,"gpt2"),Bpt.forEach(t),vmr=r(O7e," \u2014 "),PO=n(O7e,"A",{href:!0});var xpt=s(PO);Tmr=r(xpt,"TFGPT2ForSequenceClassification"),xpt.forEach(t),Fmr=r(O7e," (OpenAI GPT-2 model)"),O7e.forEach(t),Cmr=i(W),kF=n(W,"LI",{});var X7e=s(kF);D_e=n(X7e,"STRONG",{});var kpt=s(D_e);Mmr=r(kpt,"layoutlm"),kpt.forEach(t),Emr=r(X7e," \u2014 "),$O=n(X7e,"A",{href:!0});var Rpt=s($O);ymr=r(Rpt,"TFLayoutLMForSequenceClassification"),Rpt.forEach(t),wmr=r(X7e," (LayoutLM model)"),X7e.forEach(t),Amr=i(W),RF=n(W,"LI",{});var V7e=s(RF);q_e=n(V7e,"STRONG",{});var Spt=s(q_e);Lmr=r(Spt,"longformer"),Spt.forEach(t),Bmr=r(V7e," \u2014 "),IO=n(V7e,"A",{href:!0});var Ppt=s(IO);xmr=r(Ppt,"TFLongformerForSequenceClassification"),Ppt.forEach(t),kmr=r(V7e," (Longformer model)"),V7e.forEach(t),Rmr=i(W),SF=n(W,"LI",{});var z7e=s(SF);G_e=n(z7e,"STRONG",{});var $pt=s(G_e);Smr=r($pt,"mobilebert"),$pt.forEach(t),Pmr=r(z7e," \u2014 "),NO=n(z7e,"A",{href:!0});var Ipt=s(NO);$mr=r(Ipt,"TFMobileBertForSequenceClassification"),Ipt.forEach(t),Imr=r(z7e," (MobileBERT model)"),z7e.forEach(t),Nmr=i(W),PF=n(W,"LI",{});var W7e=s(PF);O_e=n(W7e,"STRONG",{});var Npt=s(O_e);jmr=r(Npt,"mpnet"),Npt.forEach(t),Dmr=r(W7e," \u2014 "),jO=n(W7e,"A",{href:!0});var jpt=s(jO);qmr=r(jpt,"TFMPNetForSequenceClassification"),jpt.forEach(t),Gmr=r(W7e," (MPNet model)"),W7e.forEach(t),Omr=i(W),$F=n(W,"LI",{});var Q7e=s($F);X_e=n(Q7e,"STRONG",{});var Dpt=s(X_e);Xmr=r(Dpt,"openai-gpt"),Dpt.forEach(t),Vmr=r(Q7e," \u2014 "),DO=n(Q7e,"A",{href:!0});var qpt=s(DO);zmr=r(qpt,"TFOpenAIGPTForSequenceClassification"),qpt.forEach(t),Wmr=r(Q7e," (OpenAI GPT model)"),Q7e.forEach(t),Qmr=i(W),IF=n(W,"LI",{});var H7e=s(IF);V_e=n(H7e,"STRONG",{});var Gpt=s(V_e);Hmr=r(Gpt,"rembert"),Gpt.forEach(t),Umr=r(H7e," \u2014 "),qO=n(H7e,"A",{href:!0});var Opt=s(qO);Jmr=r(Opt,"TFRemBertForSequenceClassification"),Opt.forEach(t),Ymr=r(H7e," (RemBERT model)"),H7e.forEach(t),Kmr=i(W),NF=n(W,"LI",{});var U7e=s(NF);z_e=n(U7e,"STRONG",{});var Xpt=s(z_e);Zmr=r(Xpt,"roberta"),Xpt.forEach(t),egr=r(U7e," \u2014 "),GO=n(U7e,"A",{href:!0});var Vpt=s(GO);ogr=r(Vpt,"TFRobertaForSequenceClassification"),Vpt.forEach(t),rgr=r(U7e," (RoBERTa model)"),U7e.forEach(t),tgr=i(W),jF=n(W,"LI",{});var J7e=s(jF);W_e=n(J7e,"STRONG",{});var zpt=s(W_e);agr=r(zpt,"roformer"),zpt.forEach(t),ngr=r(J7e," \u2014 "),OO=n(J7e,"A",{href:!0});var Wpt=s(OO);sgr=r(Wpt,"TFRoFormerForSequenceClassification"),Wpt.forEach(t),lgr=r(J7e," (RoFormer model)"),J7e.forEach(t),igr=i(W),DF=n(W,"LI",{});var Y7e=s(DF);Q_e=n(Y7e,"STRONG",{});var Qpt=s(Q_e);dgr=r(Qpt,"tapas"),Qpt.forEach(t),cgr=r(Y7e," \u2014 "),XO=n(Y7e,"A",{href:!0});var Hpt=s(XO);fgr=r(Hpt,"TFTapasForSequenceClassification"),Hpt.forEach(t),mgr=r(Y7e," (TAPAS model)"),Y7e.forEach(t),ggr=i(W),qF=n(W,"LI",{});var K7e=s(qF);H_e=n(K7e,"STRONG",{});var Upt=s(H_e);hgr=r(Upt,"transfo-xl"),Upt.forEach(t),pgr=r(K7e," \u2014 "),VO=n(K7e,"A",{href:!0});var Jpt=s(VO);_gr=r(Jpt,"TFTransfoXLForSequenceClassification"),Jpt.forEach(t),ugr=r(K7e," (Transformer-XL model)"),K7e.forEach(t),bgr=i(W),GF=n(W,"LI",{});var Z7e=s(GF);U_e=n(Z7e,"STRONG",{});var Ypt=s(U_e);vgr=r(Ypt,"xlm"),Ypt.forEach(t),Tgr=r(Z7e," \u2014 "),zO=n(Z7e,"A",{href:!0});var Kpt=s(zO);Fgr=r(Kpt,"TFXLMForSequenceClassification"),Kpt.forEach(t),Cgr=r(Z7e," (XLM model)"),Z7e.forEach(t),Mgr=i(W),OF=n(W,"LI",{});var e9e=s(OF);J_e=n(e9e,"STRONG",{});var Zpt=s(J_e);Egr=r(Zpt,"xlm-roberta"),Zpt.forEach(t),ygr=r(e9e," \u2014 "),WO=n(e9e,"A",{href:!0});var e_t=s(WO);wgr=r(e_t,"TFXLMRobertaForSequenceClassification"),e_t.forEach(t),Agr=r(e9e," (XLM-RoBERTa model)"),e9e.forEach(t),Lgr=i(W),XF=n(W,"LI",{});var o9e=s(XF);Y_e=n(o9e,"STRONG",{});var o_t=s(Y_e);Bgr=r(o_t,"xlnet"),o_t.forEach(t),xgr=r(o9e," \u2014 "),QO=n(o9e,"A",{href:!0});var r_t=s(QO);kgr=r(r_t,"TFXLNetForSequenceClassification"),r_t.forEach(t),Rgr=r(o9e," (XLNet model)"),o9e.forEach(t),W.forEach(t),Sgr=i(Fa),K_e=n(Fa,"P",{});var t_t=s(K_e);Pgr=r(t_t,"Examples:"),t_t.forEach(t),$gr=i(Fa),m($0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),vRe=i(c),Pc=n(c,"H2",{class:!0});var kPe=s(Pc);VF=n(kPe,"A",{id:!0,class:!0,href:!0});var a_t=s(VF);Z_e=n(a_t,"SPAN",{});var n_t=s(Z_e);m(I0.$$.fragment,n_t),n_t.forEach(t),a_t.forEach(t),Igr=i(kPe),eue=n(kPe,"SPAN",{});var s_t=s(eue);Ngr=r(s_t,"TFAutoModelForMultipleChoice"),s_t.forEach(t),kPe.forEach(t),TRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(N0.$$.fragment,Zl),jgr=i(Zl),$c=n(Zl,"P",{});var rQ=s($c);Dgr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oue=n(rQ,"CODE",{});var l_t=s(oue);qgr=r(l_t,"from_pretrained()"),l_t.forEach(t),Ggr=r(rQ,"class method or the "),rue=n(rQ,"CODE",{});var i_t=s(rue);Ogr=r(i_t,"from_config()"),i_t.forEach(t),Xgr=r(rQ,`class
method.`),rQ.forEach(t),Vgr=i(Zl),j0=n(Zl,"P",{});var RPe=s(j0);zgr=r(RPe,"This class cannot be instantiated directly using "),tue=n(RPe,"CODE",{});var d_t=s(tue);Wgr=r(d_t,"__init__()"),d_t.forEach(t),Qgr=r(RPe," (throws an error)."),RPe.forEach(t),Hgr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(D0.$$.fragment,ei),Ugr=i(ei),aue=n(ei,"P",{});var c_t=s(aue);Jgr=r(c_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),c_t.forEach(t),Ygr=i(ei),Ic=n(ei,"P",{});var tQ=s(Ic);Kgr=r(tQ,`Note:
Loading a model from its configuration file does `),nue=n(tQ,"STRONG",{});var f_t=s(nue);Zgr=r(f_t,"not"),f_t.forEach(t),ehr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sue=n(tQ,"CODE",{});var m_t=s(sue);ohr=r(m_t,"from_pretrained()"),m_t.forEach(t),rhr=r(tQ,"to load the model weights."),tQ.forEach(t),thr=i(ei),lue=n(ei,"P",{});var g_t=s(lue);ahr=r(g_t,"Examples:"),g_t.forEach(t),nhr=i(ei),m(q0.$$.fragment,ei),ei.forEach(t),shr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(G0.$$.fragment,Ca),lhr=i(Ca),iue=n(Ca,"P",{});var h_t=s(iue);ihr=r(h_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h_t.forEach(t),dhr=i(Ca),Mn=n(Ca,"P",{});var GE=s(Mn);chr=r(GE,"The model class to instantiate is selected based on the "),due=n(GE,"CODE",{});var p_t=s(due);fhr=r(p_t,"model_type"),p_t.forEach(t),mhr=r(GE,` property of the config object (either
passed as an argument or loaded from `),cue=n(GE,"CODE",{});var __t=s(cue);ghr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),hhr=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(GE,"CODE",{});var u_t=s(fue);phr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),_hr=r(GE,":"),GE.forEach(t),uhr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);zF=n(le,"LI",{});var r9e=s(zF);mue=n(r9e,"STRONG",{});var b_t=s(mue);bhr=r(b_t,"albert"),b_t.forEach(t),vhr=r(r9e," \u2014 "),HO=n(r9e,"A",{href:!0});var v_t=s(HO);Thr=r(v_t,"TFAlbertForMultipleChoice"),v_t.forEach(t),Fhr=r(r9e," (ALBERT model)"),r9e.forEach(t),Chr=i(le),WF=n(le,"LI",{});var t9e=s(WF);gue=n(t9e,"STRONG",{});var T_t=s(gue);Mhr=r(T_t,"bert"),T_t.forEach(t),Ehr=r(t9e," \u2014 "),UO=n(t9e,"A",{href:!0});var F_t=s(UO);yhr=r(F_t,"TFBertForMultipleChoice"),F_t.forEach(t),whr=r(t9e," (BERT model)"),t9e.forEach(t),Ahr=i(le),QF=n(le,"LI",{});var a9e=s(QF);hue=n(a9e,"STRONG",{});var C_t=s(hue);Lhr=r(C_t,"camembert"),C_t.forEach(t),Bhr=r(a9e," \u2014 "),JO=n(a9e,"A",{href:!0});var M_t=s(JO);xhr=r(M_t,"TFCamembertForMultipleChoice"),M_t.forEach(t),khr=r(a9e," (CamemBERT model)"),a9e.forEach(t),Rhr=i(le),HF=n(le,"LI",{});var n9e=s(HF);pue=n(n9e,"STRONG",{});var E_t=s(pue);Shr=r(E_t,"convbert"),E_t.forEach(t),Phr=r(n9e," \u2014 "),YO=n(n9e,"A",{href:!0});var y_t=s(YO);$hr=r(y_t,"TFConvBertForMultipleChoice"),y_t.forEach(t),Ihr=r(n9e," (ConvBERT model)"),n9e.forEach(t),Nhr=i(le),UF=n(le,"LI",{});var s9e=s(UF);_ue=n(s9e,"STRONG",{});var w_t=s(_ue);jhr=r(w_t,"distilbert"),w_t.forEach(t),Dhr=r(s9e," \u2014 "),KO=n(s9e,"A",{href:!0});var A_t=s(KO);qhr=r(A_t,"TFDistilBertForMultipleChoice"),A_t.forEach(t),Ghr=r(s9e," (DistilBERT model)"),s9e.forEach(t),Ohr=i(le),JF=n(le,"LI",{});var l9e=s(JF);uue=n(l9e,"STRONG",{});var L_t=s(uue);Xhr=r(L_t,"electra"),L_t.forEach(t),Vhr=r(l9e," \u2014 "),ZO=n(l9e,"A",{href:!0});var B_t=s(ZO);zhr=r(B_t,"TFElectraForMultipleChoice"),B_t.forEach(t),Whr=r(l9e," (ELECTRA model)"),l9e.forEach(t),Qhr=i(le),YF=n(le,"LI",{});var i9e=s(YF);bue=n(i9e,"STRONG",{});var x_t=s(bue);Hhr=r(x_t,"flaubert"),x_t.forEach(t),Uhr=r(i9e," \u2014 "),eX=n(i9e,"A",{href:!0});var k_t=s(eX);Jhr=r(k_t,"TFFlaubertForMultipleChoice"),k_t.forEach(t),Yhr=r(i9e," (FlauBERT model)"),i9e.forEach(t),Khr=i(le),KF=n(le,"LI",{});var d9e=s(KF);vue=n(d9e,"STRONG",{});var R_t=s(vue);Zhr=r(R_t,"funnel"),R_t.forEach(t),epr=r(d9e," \u2014 "),oX=n(d9e,"A",{href:!0});var S_t=s(oX);opr=r(S_t,"TFFunnelForMultipleChoice"),S_t.forEach(t),rpr=r(d9e," (Funnel Transformer model)"),d9e.forEach(t),tpr=i(le),ZF=n(le,"LI",{});var c9e=s(ZF);Tue=n(c9e,"STRONG",{});var P_t=s(Tue);apr=r(P_t,"longformer"),P_t.forEach(t),npr=r(c9e," \u2014 "),rX=n(c9e,"A",{href:!0});var $_t=s(rX);spr=r($_t,"TFLongformerForMultipleChoice"),$_t.forEach(t),lpr=r(c9e," (Longformer model)"),c9e.forEach(t),ipr=i(le),eC=n(le,"LI",{});var f9e=s(eC);Fue=n(f9e,"STRONG",{});var I_t=s(Fue);dpr=r(I_t,"mobilebert"),I_t.forEach(t),cpr=r(f9e," \u2014 "),tX=n(f9e,"A",{href:!0});var N_t=s(tX);fpr=r(N_t,"TFMobileBertForMultipleChoice"),N_t.forEach(t),mpr=r(f9e," (MobileBERT model)"),f9e.forEach(t),gpr=i(le),oC=n(le,"LI",{});var m9e=s(oC);Cue=n(m9e,"STRONG",{});var j_t=s(Cue);hpr=r(j_t,"mpnet"),j_t.forEach(t),ppr=r(m9e," \u2014 "),aX=n(m9e,"A",{href:!0});var D_t=s(aX);_pr=r(D_t,"TFMPNetForMultipleChoice"),D_t.forEach(t),upr=r(m9e," (MPNet model)"),m9e.forEach(t),bpr=i(le),rC=n(le,"LI",{});var g9e=s(rC);Mue=n(g9e,"STRONG",{});var q_t=s(Mue);vpr=r(q_t,"rembert"),q_t.forEach(t),Tpr=r(g9e," \u2014 "),nX=n(g9e,"A",{href:!0});var G_t=s(nX);Fpr=r(G_t,"TFRemBertForMultipleChoice"),G_t.forEach(t),Cpr=r(g9e," (RemBERT model)"),g9e.forEach(t),Mpr=i(le),tC=n(le,"LI",{});var h9e=s(tC);Eue=n(h9e,"STRONG",{});var O_t=s(Eue);Epr=r(O_t,"roberta"),O_t.forEach(t),ypr=r(h9e," \u2014 "),sX=n(h9e,"A",{href:!0});var X_t=s(sX);wpr=r(X_t,"TFRobertaForMultipleChoice"),X_t.forEach(t),Apr=r(h9e," (RoBERTa model)"),h9e.forEach(t),Lpr=i(le),aC=n(le,"LI",{});var p9e=s(aC);yue=n(p9e,"STRONG",{});var V_t=s(yue);Bpr=r(V_t,"roformer"),V_t.forEach(t),xpr=r(p9e," \u2014 "),lX=n(p9e,"A",{href:!0});var z_t=s(lX);kpr=r(z_t,"TFRoFormerForMultipleChoice"),z_t.forEach(t),Rpr=r(p9e," (RoFormer model)"),p9e.forEach(t),Spr=i(le),nC=n(le,"LI",{});var _9e=s(nC);wue=n(_9e,"STRONG",{});var W_t=s(wue);Ppr=r(W_t,"xlm"),W_t.forEach(t),$pr=r(_9e," \u2014 "),iX=n(_9e,"A",{href:!0});var Q_t=s(iX);Ipr=r(Q_t,"TFXLMForMultipleChoice"),Q_t.forEach(t),Npr=r(_9e," (XLM model)"),_9e.forEach(t),jpr=i(le),sC=n(le,"LI",{});var u9e=s(sC);Aue=n(u9e,"STRONG",{});var H_t=s(Aue);Dpr=r(H_t,"xlm-roberta"),H_t.forEach(t),qpr=r(u9e," \u2014 "),dX=n(u9e,"A",{href:!0});var U_t=s(dX);Gpr=r(U_t,"TFXLMRobertaForMultipleChoice"),U_t.forEach(t),Opr=r(u9e," (XLM-RoBERTa model)"),u9e.forEach(t),Xpr=i(le),lC=n(le,"LI",{});var b9e=s(lC);Lue=n(b9e,"STRONG",{});var J_t=s(Lue);Vpr=r(J_t,"xlnet"),J_t.forEach(t),zpr=r(b9e," \u2014 "),cX=n(b9e,"A",{href:!0});var Y_t=s(cX);Wpr=r(Y_t,"TFXLNetForMultipleChoice"),Y_t.forEach(t),Qpr=r(b9e," (XLNet model)"),b9e.forEach(t),le.forEach(t),Hpr=i(Ca),Bue=n(Ca,"P",{});var K_t=s(Bue);Upr=r(K_t,"Examples:"),K_t.forEach(t),Jpr=i(Ca),m(O0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),FRe=i(c),Nc=n(c,"H2",{class:!0});var SPe=s(Nc);iC=n(SPe,"A",{id:!0,class:!0,href:!0});var Z_t=s(iC);xue=n(Z_t,"SPAN",{});var eut=s(xue);m(X0.$$.fragment,eut),eut.forEach(t),Z_t.forEach(t),Ypr=i(SPe),kue=n(SPe,"SPAN",{});var out=s(kue);Kpr=r(out,"TFAutoModelForTableQuestionAnswering"),out.forEach(t),SPe.forEach(t),CRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(V0.$$.fragment,oi),Zpr=i(oi),jc=n(oi,"P",{});var aQ=s(jc);e_r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rue=n(aQ,"CODE",{});var rut=s(Rue);o_r=r(rut,"from_pretrained()"),rut.forEach(t),r_r=r(aQ,"class method or the "),Sue=n(aQ,"CODE",{});var tut=s(Sue);t_r=r(tut,"from_config()"),tut.forEach(t),a_r=r(aQ,`class
method.`),aQ.forEach(t),n_r=i(oi),z0=n(oi,"P",{});var PPe=s(z0);s_r=r(PPe,"This class cannot be instantiated directly using "),Pue=n(PPe,"CODE",{});var aut=s(Pue);l_r=r(aut,"__init__()"),aut.forEach(t),i_r=r(PPe," (throws an error)."),PPe.forEach(t),d_r=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(W0.$$.fragment,ri),c_r=i(ri),$ue=n(ri,"P",{});var nut=s($ue);f_r=r(nut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nut.forEach(t),m_r=i(ri),Dc=n(ri,"P",{});var nQ=s(Dc);g_r=r(nQ,`Note:
Loading a model from its configuration file does `),Iue=n(nQ,"STRONG",{});var sut=s(Iue);h_r=r(sut,"not"),sut.forEach(t),p_r=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nue=n(nQ,"CODE",{});var lut=s(Nue);__r=r(lut,"from_pretrained()"),lut.forEach(t),u_r=r(nQ,"to load the model weights."),nQ.forEach(t),b_r=i(ri),jue=n(ri,"P",{});var iut=s(jue);v_r=r(iut,"Examples:"),iut.forEach(t),T_r=i(ri),m(Q0.$$.fragment,ri),ri.forEach(t),F_r=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(H0.$$.fragment,Ma),C_r=i(Ma),Due=n(Ma,"P",{});var dut=s(Due);M_r=r(dut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dut.forEach(t),E_r=i(Ma),En=n(Ma,"P",{});var OE=s(En);y_r=r(OE,"The model class to instantiate is selected based on the "),que=n(OE,"CODE",{});var cut=s(que);w_r=r(cut,"model_type"),cut.forEach(t),A_r=r(OE,` property of the config object (either
passed as an argument or loaded from `),Gue=n(OE,"CODE",{});var fut=s(Gue);L_r=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),B_r=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(OE,"CODE",{});var mut=s(Oue);x_r=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),k_r=r(OE,":"),OE.forEach(t),R_r=i(Ma),Xue=n(Ma,"UL",{});var gut=s(Xue);dC=n(gut,"LI",{});var v9e=s(dC);Vue=n(v9e,"STRONG",{});var hut=s(Vue);S_r=r(hut,"tapas"),hut.forEach(t),P_r=r(v9e," \u2014 "),fX=n(v9e,"A",{href:!0});var put=s(fX);$_r=r(put,"TFTapasForQuestionAnswering"),put.forEach(t),I_r=r(v9e," (TAPAS model)"),v9e.forEach(t),gut.forEach(t),N_r=i(Ma),zue=n(Ma,"P",{});var _ut=s(zue);j_r=r(_ut,"Examples:"),_ut.forEach(t),D_r=i(Ma),m(U0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),MRe=i(c),qc=n(c,"H2",{class:!0});var $Pe=s(qc);cC=n($Pe,"A",{id:!0,class:!0,href:!0});var uut=s(cC);Wue=n(uut,"SPAN",{});var but=s(Wue);m(J0.$$.fragment,but),but.forEach(t),uut.forEach(t),q_r=i($Pe),Que=n($Pe,"SPAN",{});var vut=s(Que);G_r=r(vut,"TFAutoModelForTokenClassification"),vut.forEach(t),$Pe.forEach(t),ERe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(Y0.$$.fragment,ti),O_r=i(ti),Gc=n(ti,"P",{});var sQ=s(Gc);X_r=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hue=n(sQ,"CODE",{});var Tut=s(Hue);V_r=r(Tut,"from_pretrained()"),Tut.forEach(t),z_r=r(sQ,"class method or the "),Uue=n(sQ,"CODE",{});var Fut=s(Uue);W_r=r(Fut,"from_config()"),Fut.forEach(t),Q_r=r(sQ,`class
method.`),sQ.forEach(t),H_r=i(ti),K0=n(ti,"P",{});var IPe=s(K0);U_r=r(IPe,"This class cannot be instantiated directly using "),Jue=n(IPe,"CODE",{});var Cut=s(Jue);J_r=r(Cut,"__init__()"),Cut.forEach(t),Y_r=r(IPe," (throws an error)."),IPe.forEach(t),K_r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(Z0.$$.fragment,ai),Z_r=i(ai),Yue=n(ai,"P",{});var Mut=s(Yue);eur=r(Mut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mut.forEach(t),our=i(ai),Oc=n(ai,"P",{});var lQ=s(Oc);rur=r(lQ,`Note:
Loading a model from its configuration file does `),Kue=n(lQ,"STRONG",{});var Eut=s(Kue);tur=r(Eut,"not"),Eut.forEach(t),aur=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zue=n(lQ,"CODE",{});var yut=s(Zue);nur=r(yut,"from_pretrained()"),yut.forEach(t),sur=r(lQ,"to load the model weights."),lQ.forEach(t),lur=i(ai),e5e=n(ai,"P",{});var wut=s(e5e);iur=r(wut,"Examples:"),wut.forEach(t),dur=i(ai),m(eL.$$.fragment,ai),ai.forEach(t),cur=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(oL.$$.fragment,Ea),fur=i(Ea),o5e=n(Ea,"P",{});var Aut=s(o5e);mur=r(Aut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Aut.forEach(t),gur=i(Ea),yn=n(Ea,"P",{});var XE=s(yn);hur=r(XE,"The model class to instantiate is selected based on the "),r5e=n(XE,"CODE",{});var Lut=s(r5e);pur=r(Lut,"model_type"),Lut.forEach(t),_ur=r(XE,` property of the config object (either
passed as an argument or loaded from `),t5e=n(XE,"CODE",{});var But=s(t5e);uur=r(But,"pretrained_model_name_or_path"),But.forEach(t),bur=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(XE,"CODE",{});var xut=s(a5e);vur=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),Tur=r(XE,":"),XE.forEach(t),Fur=i(Ea),K=n(Ea,"UL",{});var oe=s(K);fC=n(oe,"LI",{});var T9e=s(fC);n5e=n(T9e,"STRONG",{});var kut=s(n5e);Cur=r(kut,"albert"),kut.forEach(t),Mur=r(T9e," \u2014 "),mX=n(T9e,"A",{href:!0});var Rut=s(mX);Eur=r(Rut,"TFAlbertForTokenClassification"),Rut.forEach(t),yur=r(T9e," (ALBERT model)"),T9e.forEach(t),wur=i(oe),mC=n(oe,"LI",{});var F9e=s(mC);s5e=n(F9e,"STRONG",{});var Sut=s(s5e);Aur=r(Sut,"bert"),Sut.forEach(t),Lur=r(F9e," \u2014 "),gX=n(F9e,"A",{href:!0});var Put=s(gX);Bur=r(Put,"TFBertForTokenClassification"),Put.forEach(t),xur=r(F9e," (BERT model)"),F9e.forEach(t),kur=i(oe),gC=n(oe,"LI",{});var C9e=s(gC);l5e=n(C9e,"STRONG",{});var $ut=s(l5e);Rur=r($ut,"camembert"),$ut.forEach(t),Sur=r(C9e," \u2014 "),hX=n(C9e,"A",{href:!0});var Iut=s(hX);Pur=r(Iut,"TFCamembertForTokenClassification"),Iut.forEach(t),$ur=r(C9e," (CamemBERT model)"),C9e.forEach(t),Iur=i(oe),hC=n(oe,"LI",{});var M9e=s(hC);i5e=n(M9e,"STRONG",{});var Nut=s(i5e);Nur=r(Nut,"convbert"),Nut.forEach(t),jur=r(M9e," \u2014 "),pX=n(M9e,"A",{href:!0});var jut=s(pX);Dur=r(jut,"TFConvBertForTokenClassification"),jut.forEach(t),qur=r(M9e," (ConvBERT model)"),M9e.forEach(t),Gur=i(oe),pC=n(oe,"LI",{});var E9e=s(pC);d5e=n(E9e,"STRONG",{});var Dut=s(d5e);Our=r(Dut,"deberta"),Dut.forEach(t),Xur=r(E9e," \u2014 "),_X=n(E9e,"A",{href:!0});var qut=s(_X);Vur=r(qut,"TFDebertaForTokenClassification"),qut.forEach(t),zur=r(E9e," (DeBERTa model)"),E9e.forEach(t),Wur=i(oe),_C=n(oe,"LI",{});var y9e=s(_C);c5e=n(y9e,"STRONG",{});var Gut=s(c5e);Qur=r(Gut,"deberta-v2"),Gut.forEach(t),Hur=r(y9e," \u2014 "),uX=n(y9e,"A",{href:!0});var Out=s(uX);Uur=r(Out,"TFDebertaV2ForTokenClassification"),Out.forEach(t),Jur=r(y9e," (DeBERTa-v2 model)"),y9e.forEach(t),Yur=i(oe),uC=n(oe,"LI",{});var w9e=s(uC);f5e=n(w9e,"STRONG",{});var Xut=s(f5e);Kur=r(Xut,"distilbert"),Xut.forEach(t),Zur=r(w9e," \u2014 "),bX=n(w9e,"A",{href:!0});var Vut=s(bX);e5r=r(Vut,"TFDistilBertForTokenClassification"),Vut.forEach(t),o5r=r(w9e," (DistilBERT model)"),w9e.forEach(t),r5r=i(oe),bC=n(oe,"LI",{});var A9e=s(bC);m5e=n(A9e,"STRONG",{});var zut=s(m5e);t5r=r(zut,"electra"),zut.forEach(t),a5r=r(A9e," \u2014 "),vX=n(A9e,"A",{href:!0});var Wut=s(vX);n5r=r(Wut,"TFElectraForTokenClassification"),Wut.forEach(t),s5r=r(A9e," (ELECTRA model)"),A9e.forEach(t),l5r=i(oe),vC=n(oe,"LI",{});var L9e=s(vC);g5e=n(L9e,"STRONG",{});var Qut=s(g5e);i5r=r(Qut,"flaubert"),Qut.forEach(t),d5r=r(L9e," \u2014 "),TX=n(L9e,"A",{href:!0});var Hut=s(TX);c5r=r(Hut,"TFFlaubertForTokenClassification"),Hut.forEach(t),f5r=r(L9e," (FlauBERT model)"),L9e.forEach(t),m5r=i(oe),TC=n(oe,"LI",{});var B9e=s(TC);h5e=n(B9e,"STRONG",{});var Uut=s(h5e);g5r=r(Uut,"funnel"),Uut.forEach(t),h5r=r(B9e," \u2014 "),FX=n(B9e,"A",{href:!0});var Jut=s(FX);p5r=r(Jut,"TFFunnelForTokenClassification"),Jut.forEach(t),_5r=r(B9e," (Funnel Transformer model)"),B9e.forEach(t),u5r=i(oe),FC=n(oe,"LI",{});var x9e=s(FC);p5e=n(x9e,"STRONG",{});var Yut=s(p5e);b5r=r(Yut,"layoutlm"),Yut.forEach(t),v5r=r(x9e," \u2014 "),CX=n(x9e,"A",{href:!0});var Kut=s(CX);T5r=r(Kut,"TFLayoutLMForTokenClassification"),Kut.forEach(t),F5r=r(x9e," (LayoutLM model)"),x9e.forEach(t),C5r=i(oe),CC=n(oe,"LI",{});var k9e=s(CC);_5e=n(k9e,"STRONG",{});var Zut=s(_5e);M5r=r(Zut,"longformer"),Zut.forEach(t),E5r=r(k9e," \u2014 "),MX=n(k9e,"A",{href:!0});var e5t=s(MX);y5r=r(e5t,"TFLongformerForTokenClassification"),e5t.forEach(t),w5r=r(k9e," (Longformer model)"),k9e.forEach(t),A5r=i(oe),MC=n(oe,"LI",{});var R9e=s(MC);u5e=n(R9e,"STRONG",{});var o5t=s(u5e);L5r=r(o5t,"mobilebert"),o5t.forEach(t),B5r=r(R9e," \u2014 "),EX=n(R9e,"A",{href:!0});var r5t=s(EX);x5r=r(r5t,"TFMobileBertForTokenClassification"),r5t.forEach(t),k5r=r(R9e," (MobileBERT model)"),R9e.forEach(t),R5r=i(oe),EC=n(oe,"LI",{});var S9e=s(EC);b5e=n(S9e,"STRONG",{});var t5t=s(b5e);S5r=r(t5t,"mpnet"),t5t.forEach(t),P5r=r(S9e," \u2014 "),yX=n(S9e,"A",{href:!0});var a5t=s(yX);$5r=r(a5t,"TFMPNetForTokenClassification"),a5t.forEach(t),I5r=r(S9e," (MPNet model)"),S9e.forEach(t),N5r=i(oe),yC=n(oe,"LI",{});var P9e=s(yC);v5e=n(P9e,"STRONG",{});var n5t=s(v5e);j5r=r(n5t,"rembert"),n5t.forEach(t),D5r=r(P9e," \u2014 "),wX=n(P9e,"A",{href:!0});var s5t=s(wX);q5r=r(s5t,"TFRemBertForTokenClassification"),s5t.forEach(t),G5r=r(P9e," (RemBERT model)"),P9e.forEach(t),O5r=i(oe),wC=n(oe,"LI",{});var $9e=s(wC);T5e=n($9e,"STRONG",{});var l5t=s(T5e);X5r=r(l5t,"roberta"),l5t.forEach(t),V5r=r($9e," \u2014 "),AX=n($9e,"A",{href:!0});var i5t=s(AX);z5r=r(i5t,"TFRobertaForTokenClassification"),i5t.forEach(t),W5r=r($9e," (RoBERTa model)"),$9e.forEach(t),Q5r=i(oe),AC=n(oe,"LI",{});var I9e=s(AC);F5e=n(I9e,"STRONG",{});var d5t=s(F5e);H5r=r(d5t,"roformer"),d5t.forEach(t),U5r=r(I9e," \u2014 "),LX=n(I9e,"A",{href:!0});var c5t=s(LX);J5r=r(c5t,"TFRoFormerForTokenClassification"),c5t.forEach(t),Y5r=r(I9e," (RoFormer model)"),I9e.forEach(t),K5r=i(oe),LC=n(oe,"LI",{});var N9e=s(LC);C5e=n(N9e,"STRONG",{});var f5t=s(C5e);Z5r=r(f5t,"xlm"),f5t.forEach(t),e2r=r(N9e," \u2014 "),BX=n(N9e,"A",{href:!0});var m5t=s(BX);o2r=r(m5t,"TFXLMForTokenClassification"),m5t.forEach(t),r2r=r(N9e," (XLM model)"),N9e.forEach(t),t2r=i(oe),BC=n(oe,"LI",{});var j9e=s(BC);M5e=n(j9e,"STRONG",{});var g5t=s(M5e);a2r=r(g5t,"xlm-roberta"),g5t.forEach(t),n2r=r(j9e," \u2014 "),xX=n(j9e,"A",{href:!0});var h5t=s(xX);s2r=r(h5t,"TFXLMRobertaForTokenClassification"),h5t.forEach(t),l2r=r(j9e," (XLM-RoBERTa model)"),j9e.forEach(t),i2r=i(oe),xC=n(oe,"LI",{});var D9e=s(xC);E5e=n(D9e,"STRONG",{});var p5t=s(E5e);d2r=r(p5t,"xlnet"),p5t.forEach(t),c2r=r(D9e," \u2014 "),kX=n(D9e,"A",{href:!0});var _5t=s(kX);f2r=r(_5t,"TFXLNetForTokenClassification"),_5t.forEach(t),m2r=r(D9e," (XLNet model)"),D9e.forEach(t),oe.forEach(t),g2r=i(Ea),y5e=n(Ea,"P",{});var u5t=s(y5e);h2r=r(u5t,"Examples:"),u5t.forEach(t),p2r=i(Ea),m(rL.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),yRe=i(c),Xc=n(c,"H2",{class:!0});var NPe=s(Xc);kC=n(NPe,"A",{id:!0,class:!0,href:!0});var b5t=s(kC);w5e=n(b5t,"SPAN",{});var v5t=s(w5e);m(tL.$$.fragment,v5t),v5t.forEach(t),b5t.forEach(t),_2r=i(NPe),A5e=n(NPe,"SPAN",{});var T5t=s(A5e);u2r=r(T5t,"TFAutoModelForQuestionAnswering"),T5t.forEach(t),NPe.forEach(t),wRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(aL.$$.fragment,ni),b2r=i(ni),Vc=n(ni,"P",{});var iQ=s(Vc);v2r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),L5e=n(iQ,"CODE",{});var F5t=s(L5e);T2r=r(F5t,"from_pretrained()"),F5t.forEach(t),F2r=r(iQ,"class method or the "),B5e=n(iQ,"CODE",{});var C5t=s(B5e);C2r=r(C5t,"from_config()"),C5t.forEach(t),M2r=r(iQ,`class
method.`),iQ.forEach(t),E2r=i(ni),nL=n(ni,"P",{});var jPe=s(nL);y2r=r(jPe,"This class cannot be instantiated directly using "),x5e=n(jPe,"CODE",{});var M5t=s(x5e);w2r=r(M5t,"__init__()"),M5t.forEach(t),A2r=r(jPe," (throws an error)."),jPe.forEach(t),L2r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(sL.$$.fragment,si),B2r=i(si),k5e=n(si,"P",{});var E5t=s(k5e);x2r=r(E5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E5t.forEach(t),k2r=i(si),zc=n(si,"P",{});var dQ=s(zc);R2r=r(dQ,`Note:
Loading a model from its configuration file does `),R5e=n(dQ,"STRONG",{});var y5t=s(R5e);S2r=r(y5t,"not"),y5t.forEach(t),P2r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),S5e=n(dQ,"CODE",{});var w5t=s(S5e);$2r=r(w5t,"from_pretrained()"),w5t.forEach(t),I2r=r(dQ,"to load the model weights."),dQ.forEach(t),N2r=i(si),P5e=n(si,"P",{});var A5t=s(P5e);j2r=r(A5t,"Examples:"),A5t.forEach(t),D2r=i(si),m(lL.$$.fragment,si),si.forEach(t),q2r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(iL.$$.fragment,ya),G2r=i(ya),$5e=n(ya,"P",{});var L5t=s($5e);O2r=r(L5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L5t.forEach(t),X2r=i(ya),wn=n(ya,"P",{});var VE=s(wn);V2r=r(VE,"The model class to instantiate is selected based on the "),I5e=n(VE,"CODE",{});var B5t=s(I5e);z2r=r(B5t,"model_type"),B5t.forEach(t),W2r=r(VE,` property of the config object (either
passed as an argument or loaded from `),N5e=n(VE,"CODE",{});var x5t=s(N5e);Q2r=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),H2r=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=n(VE,"CODE",{});var k5t=s(j5e);U2r=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),J2r=r(VE,":"),VE.forEach(t),Y2r=i(ya),Z=n(ya,"UL",{});var te=s(Z);RC=n(te,"LI",{});var q9e=s(RC);D5e=n(q9e,"STRONG",{});var R5t=s(D5e);K2r=r(R5t,"albert"),R5t.forEach(t),Z2r=r(q9e," \u2014 "),RX=n(q9e,"A",{href:!0});var S5t=s(RX);e1r=r(S5t,"TFAlbertForQuestionAnswering"),S5t.forEach(t),o1r=r(q9e," (ALBERT model)"),q9e.forEach(t),r1r=i(te),SC=n(te,"LI",{});var G9e=s(SC);q5e=n(G9e,"STRONG",{});var P5t=s(q5e);t1r=r(P5t,"bert"),P5t.forEach(t),a1r=r(G9e," \u2014 "),SX=n(G9e,"A",{href:!0});var $5t=s(SX);n1r=r($5t,"TFBertForQuestionAnswering"),$5t.forEach(t),s1r=r(G9e," (BERT model)"),G9e.forEach(t),l1r=i(te),PC=n(te,"LI",{});var O9e=s(PC);G5e=n(O9e,"STRONG",{});var I5t=s(G5e);i1r=r(I5t,"camembert"),I5t.forEach(t),d1r=r(O9e," \u2014 "),PX=n(O9e,"A",{href:!0});var N5t=s(PX);c1r=r(N5t,"TFCamembertForQuestionAnswering"),N5t.forEach(t),f1r=r(O9e," (CamemBERT model)"),O9e.forEach(t),m1r=i(te),$C=n(te,"LI",{});var X9e=s($C);O5e=n(X9e,"STRONG",{});var j5t=s(O5e);g1r=r(j5t,"convbert"),j5t.forEach(t),h1r=r(X9e," \u2014 "),$X=n(X9e,"A",{href:!0});var D5t=s($X);p1r=r(D5t,"TFConvBertForQuestionAnswering"),D5t.forEach(t),_1r=r(X9e," (ConvBERT model)"),X9e.forEach(t),u1r=i(te),IC=n(te,"LI",{});var V9e=s(IC);X5e=n(V9e,"STRONG",{});var q5t=s(X5e);b1r=r(q5t,"deberta"),q5t.forEach(t),v1r=r(V9e," \u2014 "),IX=n(V9e,"A",{href:!0});var G5t=s(IX);T1r=r(G5t,"TFDebertaForQuestionAnswering"),G5t.forEach(t),F1r=r(V9e," (DeBERTa model)"),V9e.forEach(t),C1r=i(te),NC=n(te,"LI",{});var z9e=s(NC);V5e=n(z9e,"STRONG",{});var O5t=s(V5e);M1r=r(O5t,"deberta-v2"),O5t.forEach(t),E1r=r(z9e," \u2014 "),NX=n(z9e,"A",{href:!0});var X5t=s(NX);y1r=r(X5t,"TFDebertaV2ForQuestionAnswering"),X5t.forEach(t),w1r=r(z9e," (DeBERTa-v2 model)"),z9e.forEach(t),A1r=i(te),jC=n(te,"LI",{});var W9e=s(jC);z5e=n(W9e,"STRONG",{});var V5t=s(z5e);L1r=r(V5t,"distilbert"),V5t.forEach(t),B1r=r(W9e," \u2014 "),jX=n(W9e,"A",{href:!0});var z5t=s(jX);x1r=r(z5t,"TFDistilBertForQuestionAnswering"),z5t.forEach(t),k1r=r(W9e," (DistilBERT model)"),W9e.forEach(t),R1r=i(te),DC=n(te,"LI",{});var Q9e=s(DC);W5e=n(Q9e,"STRONG",{});var W5t=s(W5e);S1r=r(W5t,"electra"),W5t.forEach(t),P1r=r(Q9e," \u2014 "),DX=n(Q9e,"A",{href:!0});var Q5t=s(DX);$1r=r(Q5t,"TFElectraForQuestionAnswering"),Q5t.forEach(t),I1r=r(Q9e," (ELECTRA model)"),Q9e.forEach(t),N1r=i(te),qC=n(te,"LI",{});var H9e=s(qC);Q5e=n(H9e,"STRONG",{});var H5t=s(Q5e);j1r=r(H5t,"flaubert"),H5t.forEach(t),D1r=r(H9e," \u2014 "),qX=n(H9e,"A",{href:!0});var U5t=s(qX);q1r=r(U5t,"TFFlaubertForQuestionAnsweringSimple"),U5t.forEach(t),G1r=r(H9e," (FlauBERT model)"),H9e.forEach(t),O1r=i(te),GC=n(te,"LI",{});var U9e=s(GC);H5e=n(U9e,"STRONG",{});var J5t=s(H5e);X1r=r(J5t,"funnel"),J5t.forEach(t),V1r=r(U9e," \u2014 "),GX=n(U9e,"A",{href:!0});var Y5t=s(GX);z1r=r(Y5t,"TFFunnelForQuestionAnswering"),Y5t.forEach(t),W1r=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),Q1r=i(te),OC=n(te,"LI",{});var J9e=s(OC);U5e=n(J9e,"STRONG",{});var K5t=s(U5e);H1r=r(K5t,"longformer"),K5t.forEach(t),U1r=r(J9e," \u2014 "),OX=n(J9e,"A",{href:!0});var Z5t=s(OX);J1r=r(Z5t,"TFLongformerForQuestionAnswering"),Z5t.forEach(t),Y1r=r(J9e," (Longformer model)"),J9e.forEach(t),K1r=i(te),XC=n(te,"LI",{});var Y9e=s(XC);J5e=n(Y9e,"STRONG",{});var e2t=s(J5e);Z1r=r(e2t,"mobilebert"),e2t.forEach(t),ebr=r(Y9e," \u2014 "),XX=n(Y9e,"A",{href:!0});var o2t=s(XX);obr=r(o2t,"TFMobileBertForQuestionAnswering"),o2t.forEach(t),rbr=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),tbr=i(te),VC=n(te,"LI",{});var K9e=s(VC);Y5e=n(K9e,"STRONG",{});var r2t=s(Y5e);abr=r(r2t,"mpnet"),r2t.forEach(t),nbr=r(K9e," \u2014 "),VX=n(K9e,"A",{href:!0});var t2t=s(VX);sbr=r(t2t,"TFMPNetForQuestionAnswering"),t2t.forEach(t),lbr=r(K9e," (MPNet model)"),K9e.forEach(t),ibr=i(te),zC=n(te,"LI",{});var Z9e=s(zC);K5e=n(Z9e,"STRONG",{});var a2t=s(K5e);dbr=r(a2t,"rembert"),a2t.forEach(t),cbr=r(Z9e," \u2014 "),zX=n(Z9e,"A",{href:!0});var n2t=s(zX);fbr=r(n2t,"TFRemBertForQuestionAnswering"),n2t.forEach(t),mbr=r(Z9e," (RemBERT model)"),Z9e.forEach(t),gbr=i(te),WC=n(te,"LI",{});var eBe=s(WC);Z5e=n(eBe,"STRONG",{});var s2t=s(Z5e);hbr=r(s2t,"roberta"),s2t.forEach(t),pbr=r(eBe," \u2014 "),WX=n(eBe,"A",{href:!0});var l2t=s(WX);_br=r(l2t,"TFRobertaForQuestionAnswering"),l2t.forEach(t),ubr=r(eBe," (RoBERTa model)"),eBe.forEach(t),bbr=i(te),QC=n(te,"LI",{});var oBe=s(QC);e2e=n(oBe,"STRONG",{});var i2t=s(e2e);vbr=r(i2t,"roformer"),i2t.forEach(t),Tbr=r(oBe," \u2014 "),QX=n(oBe,"A",{href:!0});var d2t=s(QX);Fbr=r(d2t,"TFRoFormerForQuestionAnswering"),d2t.forEach(t),Cbr=r(oBe," (RoFormer model)"),oBe.forEach(t),Mbr=i(te),HC=n(te,"LI",{});var rBe=s(HC);o2e=n(rBe,"STRONG",{});var c2t=s(o2e);Ebr=r(c2t,"xlm"),c2t.forEach(t),ybr=r(rBe," \u2014 "),HX=n(rBe,"A",{href:!0});var f2t=s(HX);wbr=r(f2t,"TFXLMForQuestionAnsweringSimple"),f2t.forEach(t),Abr=r(rBe," (XLM model)"),rBe.forEach(t),Lbr=i(te),UC=n(te,"LI",{});var tBe=s(UC);r2e=n(tBe,"STRONG",{});var m2t=s(r2e);Bbr=r(m2t,"xlm-roberta"),m2t.forEach(t),xbr=r(tBe," \u2014 "),UX=n(tBe,"A",{href:!0});var g2t=s(UX);kbr=r(g2t,"TFXLMRobertaForQuestionAnswering"),g2t.forEach(t),Rbr=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),Sbr=i(te),JC=n(te,"LI",{});var aBe=s(JC);t2e=n(aBe,"STRONG",{});var h2t=s(t2e);Pbr=r(h2t,"xlnet"),h2t.forEach(t),$br=r(aBe," \u2014 "),JX=n(aBe,"A",{href:!0});var p2t=s(JX);Ibr=r(p2t,"TFXLNetForQuestionAnsweringSimple"),p2t.forEach(t),Nbr=r(aBe," (XLNet model)"),aBe.forEach(t),te.forEach(t),jbr=i(ya),a2e=n(ya,"P",{});var _2t=s(a2e);Dbr=r(_2t,"Examples:"),_2t.forEach(t),qbr=i(ya),m(dL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),ARe=i(c),Wc=n(c,"H2",{class:!0});var DPe=s(Wc);YC=n(DPe,"A",{id:!0,class:!0,href:!0});var u2t=s(YC);n2e=n(u2t,"SPAN",{});var b2t=s(n2e);m(cL.$$.fragment,b2t),b2t.forEach(t),u2t.forEach(t),Gbr=i(DPe),s2e=n(DPe,"SPAN",{});var v2t=s(s2e);Obr=r(v2t,"TFAutoModelForVision2Seq"),v2t.forEach(t),DPe.forEach(t),LRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(fL.$$.fragment,li),Xbr=i(li),Qc=n(li,"P",{});var cQ=s(Qc);Vbr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),l2e=n(cQ,"CODE",{});var T2t=s(l2e);zbr=r(T2t,"from_pretrained()"),T2t.forEach(t),Wbr=r(cQ,"class method or the "),i2e=n(cQ,"CODE",{});var F2t=s(i2e);Qbr=r(F2t,"from_config()"),F2t.forEach(t),Hbr=r(cQ,`class
method.`),cQ.forEach(t),Ubr=i(li),mL=n(li,"P",{});var qPe=s(mL);Jbr=r(qPe,"This class cannot be instantiated directly using "),d2e=n(qPe,"CODE",{});var C2t=s(d2e);Ybr=r(C2t,"__init__()"),C2t.forEach(t),Kbr=r(qPe," (throws an error)."),qPe.forEach(t),Zbr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(gL.$$.fragment,ii),evr=i(ii),c2e=n(ii,"P",{});var M2t=s(c2e);ovr=r(M2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),M2t.forEach(t),rvr=i(ii),Hc=n(ii,"P",{});var fQ=s(Hc);tvr=r(fQ,`Note:
Loading a model from its configuration file does `),f2e=n(fQ,"STRONG",{});var E2t=s(f2e);avr=r(E2t,"not"),E2t.forEach(t),nvr=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),m2e=n(fQ,"CODE",{});var y2t=s(m2e);svr=r(y2t,"from_pretrained()"),y2t.forEach(t),lvr=r(fQ,"to load the model weights."),fQ.forEach(t),ivr=i(ii),g2e=n(ii,"P",{});var w2t=s(g2e);dvr=r(w2t,"Examples:"),w2t.forEach(t),cvr=i(ii),m(hL.$$.fragment,ii),ii.forEach(t),fvr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(pL.$$.fragment,wa),mvr=i(wa),h2e=n(wa,"P",{});var A2t=s(h2e);gvr=r(A2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A2t.forEach(t),hvr=i(wa),An=n(wa,"P",{});var zE=s(An);pvr=r(zE,"The model class to instantiate is selected based on the "),p2e=n(zE,"CODE",{});var L2t=s(p2e);_vr=r(L2t,"model_type"),L2t.forEach(t),uvr=r(zE,` property of the config object (either
passed as an argument or loaded from `),_2e=n(zE,"CODE",{});var B2t=s(_2e);bvr=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),vvr=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(zE,"CODE",{});var x2t=s(u2e);Tvr=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),Fvr=r(zE,":"),zE.forEach(t),Cvr=i(wa),b2e=n(wa,"UL",{});var k2t=s(b2e);KC=n(k2t,"LI",{});var nBe=s(KC);v2e=n(nBe,"STRONG",{});var R2t=s(v2e);Mvr=r(R2t,"vision-encoder-decoder"),R2t.forEach(t),Evr=r(nBe," \u2014 "),YX=n(nBe,"A",{href:!0});var S2t=s(YX);yvr=r(S2t,"TFVisionEncoderDecoderModel"),S2t.forEach(t),wvr=r(nBe," (Vision Encoder decoder model)"),nBe.forEach(t),k2t.forEach(t),Avr=i(wa),T2e=n(wa,"P",{});var P2t=s(T2e);Lvr=r(P2t,"Examples:"),P2t.forEach(t),Bvr=i(wa),m(_L.$$.fragment,wa),wa.forEach(t),li.forEach(t),BRe=i(c),Uc=n(c,"H2",{class:!0});var GPe=s(Uc);ZC=n(GPe,"A",{id:!0,class:!0,href:!0});var $2t=s(ZC);F2e=n($2t,"SPAN",{});var I2t=s(F2e);m(uL.$$.fragment,I2t),I2t.forEach(t),$2t.forEach(t),xvr=i(GPe),C2e=n(GPe,"SPAN",{});var N2t=s(C2e);kvr=r(N2t,"TFAutoModelForSpeechSeq2Seq"),N2t.forEach(t),GPe.forEach(t),xRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(bL.$$.fragment,di),Rvr=i(di),Jc=n(di,"P",{});var mQ=s(Jc);Svr=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),M2e=n(mQ,"CODE",{});var j2t=s(M2e);Pvr=r(j2t,"from_pretrained()"),j2t.forEach(t),$vr=r(mQ,"class method or the "),E2e=n(mQ,"CODE",{});var D2t=s(E2e);Ivr=r(D2t,"from_config()"),D2t.forEach(t),Nvr=r(mQ,`class
method.`),mQ.forEach(t),jvr=i(di),vL=n(di,"P",{});var OPe=s(vL);Dvr=r(OPe,"This class cannot be instantiated directly using "),y2e=n(OPe,"CODE",{});var q2t=s(y2e);qvr=r(q2t,"__init__()"),q2t.forEach(t),Gvr=r(OPe," (throws an error)."),OPe.forEach(t),Ovr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(TL.$$.fragment,ci),Xvr=i(ci),w2e=n(ci,"P",{});var G2t=s(w2e);Vvr=r(G2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),G2t.forEach(t),zvr=i(ci),Yc=n(ci,"P",{});var gQ=s(Yc);Wvr=r(gQ,`Note:
Loading a model from its configuration file does `),A2e=n(gQ,"STRONG",{});var O2t=s(A2e);Qvr=r(O2t,"not"),O2t.forEach(t),Hvr=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),L2e=n(gQ,"CODE",{});var X2t=s(L2e);Uvr=r(X2t,"from_pretrained()"),X2t.forEach(t),Jvr=r(gQ,"to load the model weights."),gQ.forEach(t),Yvr=i(ci),B2e=n(ci,"P",{});var V2t=s(B2e);Kvr=r(V2t,"Examples:"),V2t.forEach(t),Zvr=i(ci),m(FL.$$.fragment,ci),ci.forEach(t),e6r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(CL.$$.fragment,Aa),o6r=i(Aa),x2e=n(Aa,"P",{});var z2t=s(x2e);r6r=r(z2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z2t.forEach(t),t6r=i(Aa),Ln=n(Aa,"P",{});var WE=s(Ln);a6r=r(WE,"The model class to instantiate is selected based on the "),k2e=n(WE,"CODE",{});var W2t=s(k2e);n6r=r(W2t,"model_type"),W2t.forEach(t),s6r=r(WE,` property of the config object (either
passed as an argument or loaded from `),R2e=n(WE,"CODE",{});var Q2t=s(R2e);l6r=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),i6r=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(WE,"CODE",{});var H2t=s(S2e);d6r=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),c6r=r(WE,":"),WE.forEach(t),f6r=i(Aa),P2e=n(Aa,"UL",{});var U2t=s(P2e);eM=n(U2t,"LI",{});var sBe=s(eM);$2e=n(sBe,"STRONG",{});var J2t=s($2e);m6r=r(J2t,"speech_to_text"),J2t.forEach(t),g6r=r(sBe," \u2014 "),KX=n(sBe,"A",{href:!0});var Y2t=s(KX);h6r=r(Y2t,"TFSpeech2TextForConditionalGeneration"),Y2t.forEach(t),p6r=r(sBe," (Speech2Text model)"),sBe.forEach(t),U2t.forEach(t),_6r=i(Aa),I2e=n(Aa,"P",{});var K2t=s(I2e);u6r=r(K2t,"Examples:"),K2t.forEach(t),b6r=i(Aa),m(ML.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),kRe=i(c),Kc=n(c,"H2",{class:!0});var XPe=s(Kc);oM=n(XPe,"A",{id:!0,class:!0,href:!0});var Z2t=s(oM);N2e=n(Z2t,"SPAN",{});var e1t=s(N2e);m(EL.$$.fragment,e1t),e1t.forEach(t),Z2t.forEach(t),v6r=i(XPe),j2e=n(XPe,"SPAN",{});var o1t=s(j2e);T6r=r(o1t,"FlaxAutoModel"),o1t.forEach(t),XPe.forEach(t),RRe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(yL.$$.fragment,fi),F6r=i(fi),Zc=n(fi,"P",{});var hQ=s(Zc);C6r=r(hQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),D2e=n(hQ,"CODE",{});var r1t=s(D2e);M6r=r(r1t,"from_pretrained()"),r1t.forEach(t),E6r=r(hQ,"class method or the "),q2e=n(hQ,"CODE",{});var t1t=s(q2e);y6r=r(t1t,"from_config()"),t1t.forEach(t),w6r=r(hQ,`class
method.`),hQ.forEach(t),A6r=i(fi),wL=n(fi,"P",{});var VPe=s(wL);L6r=r(VPe,"This class cannot be instantiated directly using "),G2e=n(VPe,"CODE",{});var a1t=s(G2e);B6r=r(a1t,"__init__()"),a1t.forEach(t),x6r=r(VPe," (throws an error)."),VPe.forEach(t),k6r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(AL.$$.fragment,mi),R6r=i(mi),O2e=n(mi,"P",{});var n1t=s(O2e);S6r=r(n1t,"Instantiates one of the base model classes of the library from a configuration."),n1t.forEach(t),P6r=i(mi),ef=n(mi,"P",{});var pQ=s(ef);$6r=r(pQ,`Note:
Loading a model from its configuration file does `),X2e=n(pQ,"STRONG",{});var s1t=s(X2e);I6r=r(s1t,"not"),s1t.forEach(t),N6r=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V2e=n(pQ,"CODE",{});var l1t=s(V2e);j6r=r(l1t,"from_pretrained()"),l1t.forEach(t),D6r=r(pQ,"to load the model weights."),pQ.forEach(t),q6r=i(mi),z2e=n(mi,"P",{});var i1t=s(z2e);G6r=r(i1t,"Examples:"),i1t.forEach(t),O6r=i(mi),m(LL.$$.fragment,mi),mi.forEach(t),X6r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(BL.$$.fragment,La),V6r=i(La),W2e=n(La,"P",{});var d1t=s(W2e);z6r=r(d1t,"Instantiate one of the base model classes of the library from a pretrained model."),d1t.forEach(t),W6r=i(La),Bn=n(La,"P",{});var QE=s(Bn);Q6r=r(QE,"The model class to instantiate is selected based on the "),Q2e=n(QE,"CODE",{});var c1t=s(Q2e);H6r=r(c1t,"model_type"),c1t.forEach(t),U6r=r(QE,` property of the config object (either
passed as an argument or loaded from `),H2e=n(QE,"CODE",{});var f1t=s(H2e);J6r=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),Y6r=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(QE,"CODE",{});var m1t=s(U2e);K6r=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),Z6r=r(QE,":"),QE.forEach(t),eTr=i(La),z=n(La,"UL",{});var Q=s(z);rM=n(Q,"LI",{});var lBe=s(rM);J2e=n(lBe,"STRONG",{});var g1t=s(J2e);oTr=r(g1t,"albert"),g1t.forEach(t),rTr=r(lBe," \u2014 "),ZX=n(lBe,"A",{href:!0});var h1t=s(ZX);tTr=r(h1t,"FlaxAlbertModel"),h1t.forEach(t),aTr=r(lBe," (ALBERT model)"),lBe.forEach(t),nTr=i(Q),tM=n(Q,"LI",{});var iBe=s(tM);Y2e=n(iBe,"STRONG",{});var p1t=s(Y2e);sTr=r(p1t,"bart"),p1t.forEach(t),lTr=r(iBe," \u2014 "),eV=n(iBe,"A",{href:!0});var _1t=s(eV);iTr=r(_1t,"FlaxBartModel"),_1t.forEach(t),dTr=r(iBe," (BART model)"),iBe.forEach(t),cTr=i(Q),aM=n(Q,"LI",{});var dBe=s(aM);K2e=n(dBe,"STRONG",{});var u1t=s(K2e);fTr=r(u1t,"beit"),u1t.forEach(t),mTr=r(dBe," \u2014 "),oV=n(dBe,"A",{href:!0});var b1t=s(oV);gTr=r(b1t,"FlaxBeitModel"),b1t.forEach(t),hTr=r(dBe," (BEiT model)"),dBe.forEach(t),pTr=i(Q),nM=n(Q,"LI",{});var cBe=s(nM);Z2e=n(cBe,"STRONG",{});var v1t=s(Z2e);_Tr=r(v1t,"bert"),v1t.forEach(t),uTr=r(cBe," \u2014 "),rV=n(cBe,"A",{href:!0});var T1t=s(rV);bTr=r(T1t,"FlaxBertModel"),T1t.forEach(t),vTr=r(cBe," (BERT model)"),cBe.forEach(t),TTr=i(Q),sM=n(Q,"LI",{});var fBe=s(sM);e1e=n(fBe,"STRONG",{});var F1t=s(e1e);FTr=r(F1t,"big_bird"),F1t.forEach(t),CTr=r(fBe," \u2014 "),tV=n(fBe,"A",{href:!0});var C1t=s(tV);MTr=r(C1t,"FlaxBigBirdModel"),C1t.forEach(t),ETr=r(fBe," (BigBird model)"),fBe.forEach(t),yTr=i(Q),lM=n(Q,"LI",{});var mBe=s(lM);o1e=n(mBe,"STRONG",{});var M1t=s(o1e);wTr=r(M1t,"blenderbot"),M1t.forEach(t),ATr=r(mBe," \u2014 "),aV=n(mBe,"A",{href:!0});var E1t=s(aV);LTr=r(E1t,"FlaxBlenderbotModel"),E1t.forEach(t),BTr=r(mBe," (Blenderbot model)"),mBe.forEach(t),xTr=i(Q),iM=n(Q,"LI",{});var gBe=s(iM);r1e=n(gBe,"STRONG",{});var y1t=s(r1e);kTr=r(y1t,"blenderbot-small"),y1t.forEach(t),RTr=r(gBe," \u2014 "),nV=n(gBe,"A",{href:!0});var w1t=s(nV);STr=r(w1t,"FlaxBlenderbotSmallModel"),w1t.forEach(t),PTr=r(gBe," (BlenderbotSmall model)"),gBe.forEach(t),$Tr=i(Q),dM=n(Q,"LI",{});var hBe=s(dM);t1e=n(hBe,"STRONG",{});var A1t=s(t1e);ITr=r(A1t,"clip"),A1t.forEach(t),NTr=r(hBe," \u2014 "),sV=n(hBe,"A",{href:!0});var L1t=s(sV);jTr=r(L1t,"FlaxCLIPModel"),L1t.forEach(t),DTr=r(hBe," (CLIP model)"),hBe.forEach(t),qTr=i(Q),cM=n(Q,"LI",{});var pBe=s(cM);a1e=n(pBe,"STRONG",{});var B1t=s(a1e);GTr=r(B1t,"distilbert"),B1t.forEach(t),OTr=r(pBe," \u2014 "),lV=n(pBe,"A",{href:!0});var x1t=s(lV);XTr=r(x1t,"FlaxDistilBertModel"),x1t.forEach(t),VTr=r(pBe," (DistilBERT model)"),pBe.forEach(t),zTr=i(Q),fM=n(Q,"LI",{});var _Be=s(fM);n1e=n(_Be,"STRONG",{});var k1t=s(n1e);WTr=r(k1t,"electra"),k1t.forEach(t),QTr=r(_Be," \u2014 "),iV=n(_Be,"A",{href:!0});var R1t=s(iV);HTr=r(R1t,"FlaxElectraModel"),R1t.forEach(t),UTr=r(_Be," (ELECTRA model)"),_Be.forEach(t),JTr=i(Q),mM=n(Q,"LI",{});var uBe=s(mM);s1e=n(uBe,"STRONG",{});var S1t=s(s1e);YTr=r(S1t,"gpt2"),S1t.forEach(t),KTr=r(uBe," \u2014 "),dV=n(uBe,"A",{href:!0});var P1t=s(dV);ZTr=r(P1t,"FlaxGPT2Model"),P1t.forEach(t),eFr=r(uBe," (OpenAI GPT-2 model)"),uBe.forEach(t),oFr=i(Q),gM=n(Q,"LI",{});var bBe=s(gM);l1e=n(bBe,"STRONG",{});var $1t=s(l1e);rFr=r($1t,"gpt_neo"),$1t.forEach(t),tFr=r(bBe," \u2014 "),cV=n(bBe,"A",{href:!0});var I1t=s(cV);aFr=r(I1t,"FlaxGPTNeoModel"),I1t.forEach(t),nFr=r(bBe," (GPT Neo model)"),bBe.forEach(t),sFr=i(Q),hM=n(Q,"LI",{});var vBe=s(hM);i1e=n(vBe,"STRONG",{});var N1t=s(i1e);lFr=r(N1t,"gptj"),N1t.forEach(t),iFr=r(vBe," \u2014 "),fV=n(vBe,"A",{href:!0});var j1t=s(fV);dFr=r(j1t,"FlaxGPTJModel"),j1t.forEach(t),cFr=r(vBe," (GPT-J model)"),vBe.forEach(t),fFr=i(Q),pM=n(Q,"LI",{});var TBe=s(pM);d1e=n(TBe,"STRONG",{});var D1t=s(d1e);mFr=r(D1t,"marian"),D1t.forEach(t),gFr=r(TBe," \u2014 "),mV=n(TBe,"A",{href:!0});var q1t=s(mV);hFr=r(q1t,"FlaxMarianModel"),q1t.forEach(t),pFr=r(TBe," (Marian model)"),TBe.forEach(t),_Fr=i(Q),_M=n(Q,"LI",{});var FBe=s(_M);c1e=n(FBe,"STRONG",{});var G1t=s(c1e);uFr=r(G1t,"mbart"),G1t.forEach(t),bFr=r(FBe," \u2014 "),gV=n(FBe,"A",{href:!0});var O1t=s(gV);vFr=r(O1t,"FlaxMBartModel"),O1t.forEach(t),TFr=r(FBe," (mBART model)"),FBe.forEach(t),FFr=i(Q),uM=n(Q,"LI",{});var CBe=s(uM);f1e=n(CBe,"STRONG",{});var X1t=s(f1e);CFr=r(X1t,"mt5"),X1t.forEach(t),MFr=r(CBe," \u2014 "),hV=n(CBe,"A",{href:!0});var V1t=s(hV);EFr=r(V1t,"FlaxMT5Model"),V1t.forEach(t),yFr=r(CBe," (mT5 model)"),CBe.forEach(t),wFr=i(Q),bM=n(Q,"LI",{});var MBe=s(bM);m1e=n(MBe,"STRONG",{});var z1t=s(m1e);AFr=r(z1t,"pegasus"),z1t.forEach(t),LFr=r(MBe," \u2014 "),pV=n(MBe,"A",{href:!0});var W1t=s(pV);BFr=r(W1t,"FlaxPegasusModel"),W1t.forEach(t),xFr=r(MBe," (Pegasus model)"),MBe.forEach(t),kFr=i(Q),vM=n(Q,"LI",{});var EBe=s(vM);g1e=n(EBe,"STRONG",{});var Q1t=s(g1e);RFr=r(Q1t,"roberta"),Q1t.forEach(t),SFr=r(EBe," \u2014 "),_V=n(EBe,"A",{href:!0});var H1t=s(_V);PFr=r(H1t,"FlaxRobertaModel"),H1t.forEach(t),$Fr=r(EBe," (RoBERTa model)"),EBe.forEach(t),IFr=i(Q),TM=n(Q,"LI",{});var yBe=s(TM);h1e=n(yBe,"STRONG",{});var U1t=s(h1e);NFr=r(U1t,"roformer"),U1t.forEach(t),jFr=r(yBe," \u2014 "),uV=n(yBe,"A",{href:!0});var J1t=s(uV);DFr=r(J1t,"FlaxRoFormerModel"),J1t.forEach(t),qFr=r(yBe," (RoFormer model)"),yBe.forEach(t),GFr=i(Q),FM=n(Q,"LI",{});var wBe=s(FM);p1e=n(wBe,"STRONG",{});var Y1t=s(p1e);OFr=r(Y1t,"t5"),Y1t.forEach(t),XFr=r(wBe," \u2014 "),bV=n(wBe,"A",{href:!0});var K1t=s(bV);VFr=r(K1t,"FlaxT5Model"),K1t.forEach(t),zFr=r(wBe," (T5 model)"),wBe.forEach(t),WFr=i(Q),CM=n(Q,"LI",{});var ABe=s(CM);_1e=n(ABe,"STRONG",{});var Z1t=s(_1e);QFr=r(Z1t,"vision-text-dual-encoder"),Z1t.forEach(t),HFr=r(ABe," \u2014 "),vV=n(ABe,"A",{href:!0});var ebt=s(vV);UFr=r(ebt,"FlaxVisionTextDualEncoderModel"),ebt.forEach(t),JFr=r(ABe," (VisionTextDualEncoder model)"),ABe.forEach(t),YFr=i(Q),MM=n(Q,"LI",{});var LBe=s(MM);u1e=n(LBe,"STRONG",{});var obt=s(u1e);KFr=r(obt,"vit"),obt.forEach(t),ZFr=r(LBe," \u2014 "),TV=n(LBe,"A",{href:!0});var rbt=s(TV);eCr=r(rbt,"FlaxViTModel"),rbt.forEach(t),oCr=r(LBe," (ViT model)"),LBe.forEach(t),rCr=i(Q),EM=n(Q,"LI",{});var BBe=s(EM);b1e=n(BBe,"STRONG",{});var tbt=s(b1e);tCr=r(tbt,"wav2vec2"),tbt.forEach(t),aCr=r(BBe," \u2014 "),FV=n(BBe,"A",{href:!0});var abt=s(FV);nCr=r(abt,"FlaxWav2Vec2Model"),abt.forEach(t),sCr=r(BBe," (Wav2Vec2 model)"),BBe.forEach(t),lCr=i(Q),yM=n(Q,"LI",{});var xBe=s(yM);v1e=n(xBe,"STRONG",{});var nbt=s(v1e);iCr=r(nbt,"xglm"),nbt.forEach(t),dCr=r(xBe," \u2014 "),CV=n(xBe,"A",{href:!0});var sbt=s(CV);cCr=r(sbt,"FlaxXGLMModel"),sbt.forEach(t),fCr=r(xBe," (XGLM model)"),xBe.forEach(t),mCr=i(Q),wM=n(Q,"LI",{});var kBe=s(wM);T1e=n(kBe,"STRONG",{});var lbt=s(T1e);gCr=r(lbt,"xlm-roberta"),lbt.forEach(t),hCr=r(kBe," \u2014 "),MV=n(kBe,"A",{href:!0});var ibt=s(MV);pCr=r(ibt,"FlaxXLMRobertaModel"),ibt.forEach(t),_Cr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),Q.forEach(t),uCr=i(La),F1e=n(La,"P",{});var dbt=s(F1e);bCr=r(dbt,"Examples:"),dbt.forEach(t),vCr=i(La),m(xL.$$.fragment,La),La.forEach(t),fi.forEach(t),SRe=i(c),of=n(c,"H2",{class:!0});var zPe=s(of);AM=n(zPe,"A",{id:!0,class:!0,href:!0});var cbt=s(AM);C1e=n(cbt,"SPAN",{});var fbt=s(C1e);m(kL.$$.fragment,fbt),fbt.forEach(t),cbt.forEach(t),TCr=i(zPe),M1e=n(zPe,"SPAN",{});var mbt=s(M1e);FCr=r(mbt,"FlaxAutoModelForCausalLM"),mbt.forEach(t),zPe.forEach(t),PRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(RL.$$.fragment,gi),CCr=i(gi),rf=n(gi,"P",{});var _Q=s(rf);MCr=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),E1e=n(_Q,"CODE",{});var gbt=s(E1e);ECr=r(gbt,"from_pretrained()"),gbt.forEach(t),yCr=r(_Q,"class method or the "),y1e=n(_Q,"CODE",{});var hbt=s(y1e);wCr=r(hbt,"from_config()"),hbt.forEach(t),ACr=r(_Q,`class
method.`),_Q.forEach(t),LCr=i(gi),SL=n(gi,"P",{});var WPe=s(SL);BCr=r(WPe,"This class cannot be instantiated directly using "),w1e=n(WPe,"CODE",{});var pbt=s(w1e);xCr=r(pbt,"__init__()"),pbt.forEach(t),kCr=r(WPe," (throws an error)."),WPe.forEach(t),RCr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(PL.$$.fragment,hi),SCr=i(hi),A1e=n(hi,"P",{});var _bt=s(A1e);PCr=r(_bt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_bt.forEach(t),$Cr=i(hi),tf=n(hi,"P",{});var uQ=s(tf);ICr=r(uQ,`Note:
Loading a model from its configuration file does `),L1e=n(uQ,"STRONG",{});var ubt=s(L1e);NCr=r(ubt,"not"),ubt.forEach(t),jCr=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),B1e=n(uQ,"CODE",{});var bbt=s(B1e);DCr=r(bbt,"from_pretrained()"),bbt.forEach(t),qCr=r(uQ,"to load the model weights."),uQ.forEach(t),GCr=i(hi),x1e=n(hi,"P",{});var vbt=s(x1e);OCr=r(vbt,"Examples:"),vbt.forEach(t),XCr=i(hi),m($L.$$.fragment,hi),hi.forEach(t),VCr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(IL.$$.fragment,Ba),zCr=i(Ba),k1e=n(Ba,"P",{});var Tbt=s(k1e);WCr=r(Tbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tbt.forEach(t),QCr=i(Ba),xn=n(Ba,"P",{});var HE=s(xn);HCr=r(HE,"The model class to instantiate is selected based on the "),R1e=n(HE,"CODE",{});var Fbt=s(R1e);UCr=r(Fbt,"model_type"),Fbt.forEach(t),JCr=r(HE,` property of the config object (either
passed as an argument or loaded from `),S1e=n(HE,"CODE",{});var Cbt=s(S1e);YCr=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),KCr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(HE,"CODE",{});var Mbt=s(P1e);ZCr=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),eMr=r(HE,":"),HE.forEach(t),oMr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);LM=n(pi,"LI",{});var RBe=s(LM);$1e=n(RBe,"STRONG",{});var Ebt=s($1e);rMr=r(Ebt,"bart"),Ebt.forEach(t),tMr=r(RBe," \u2014 "),EV=n(RBe,"A",{href:!0});var ybt=s(EV);aMr=r(ybt,"FlaxBartForCausalLM"),ybt.forEach(t),nMr=r(RBe," (BART model)"),RBe.forEach(t),sMr=i(pi),BM=n(pi,"LI",{});var SBe=s(BM);I1e=n(SBe,"STRONG",{});var wbt=s(I1e);lMr=r(wbt,"gpt2"),wbt.forEach(t),iMr=r(SBe," \u2014 "),yV=n(SBe,"A",{href:!0});var Abt=s(yV);dMr=r(Abt,"FlaxGPT2LMHeadModel"),Abt.forEach(t),cMr=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),fMr=i(pi),xM=n(pi,"LI",{});var PBe=s(xM);N1e=n(PBe,"STRONG",{});var Lbt=s(N1e);mMr=r(Lbt,"gpt_neo"),Lbt.forEach(t),gMr=r(PBe," \u2014 "),wV=n(PBe,"A",{href:!0});var Bbt=s(wV);hMr=r(Bbt,"FlaxGPTNeoForCausalLM"),Bbt.forEach(t),pMr=r(PBe," (GPT Neo model)"),PBe.forEach(t),_Mr=i(pi),kM=n(pi,"LI",{});var $Be=s(kM);j1e=n($Be,"STRONG",{});var xbt=s(j1e);uMr=r(xbt,"gptj"),xbt.forEach(t),bMr=r($Be," \u2014 "),AV=n($Be,"A",{href:!0});var kbt=s(AV);vMr=r(kbt,"FlaxGPTJForCausalLM"),kbt.forEach(t),TMr=r($Be," (GPT-J model)"),$Be.forEach(t),FMr=i(pi),RM=n(pi,"LI",{});var IBe=s(RM);D1e=n(IBe,"STRONG",{});var Rbt=s(D1e);CMr=r(Rbt,"xglm"),Rbt.forEach(t),MMr=r(IBe," \u2014 "),LV=n(IBe,"A",{href:!0});var Sbt=s(LV);EMr=r(Sbt,"FlaxXGLMForCausalLM"),Sbt.forEach(t),yMr=r(IBe," (XGLM model)"),IBe.forEach(t),pi.forEach(t),wMr=i(Ba),q1e=n(Ba,"P",{});var Pbt=s(q1e);AMr=r(Pbt,"Examples:"),Pbt.forEach(t),LMr=i(Ba),m(NL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),$Re=i(c),af=n(c,"H2",{class:!0});var QPe=s(af);SM=n(QPe,"A",{id:!0,class:!0,href:!0});var $bt=s(SM);G1e=n($bt,"SPAN",{});var Ibt=s(G1e);m(jL.$$.fragment,Ibt),Ibt.forEach(t),$bt.forEach(t),BMr=i(QPe),O1e=n(QPe,"SPAN",{});var Nbt=s(O1e);xMr=r(Nbt,"FlaxAutoModelForPreTraining"),Nbt.forEach(t),QPe.forEach(t),IRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(DL.$$.fragment,_i),kMr=i(_i),nf=n(_i,"P",{});var bQ=s(nf);RMr=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),X1e=n(bQ,"CODE",{});var jbt=s(X1e);SMr=r(jbt,"from_pretrained()"),jbt.forEach(t),PMr=r(bQ,"class method or the "),V1e=n(bQ,"CODE",{});var Dbt=s(V1e);$Mr=r(Dbt,"from_config()"),Dbt.forEach(t),IMr=r(bQ,`class
method.`),bQ.forEach(t),NMr=i(_i),qL=n(_i,"P",{});var HPe=s(qL);jMr=r(HPe,"This class cannot be instantiated directly using "),z1e=n(HPe,"CODE",{});var qbt=s(z1e);DMr=r(qbt,"__init__()"),qbt.forEach(t),qMr=r(HPe," (throws an error)."),HPe.forEach(t),GMr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(GL.$$.fragment,ui),OMr=i(ui),W1e=n(ui,"P",{});var Gbt=s(W1e);XMr=r(Gbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gbt.forEach(t),VMr=i(ui),sf=n(ui,"P",{});var vQ=s(sf);zMr=r(vQ,`Note:
Loading a model from its configuration file does `),Q1e=n(vQ,"STRONG",{});var Obt=s(Q1e);WMr=r(Obt,"not"),Obt.forEach(t),QMr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),H1e=n(vQ,"CODE",{});var Xbt=s(H1e);HMr=r(Xbt,"from_pretrained()"),Xbt.forEach(t),UMr=r(vQ,"to load the model weights."),vQ.forEach(t),JMr=i(ui),U1e=n(ui,"P",{});var Vbt=s(U1e);YMr=r(Vbt,"Examples:"),Vbt.forEach(t),KMr=i(ui),m(OL.$$.fragment,ui),ui.forEach(t),ZMr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(XL.$$.fragment,xa),e4r=i(xa),J1e=n(xa,"P",{});var zbt=s(J1e);o4r=r(zbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zbt.forEach(t),r4r=i(xa),kn=n(xa,"P",{});var UE=s(kn);t4r=r(UE,"The model class to instantiate is selected based on the "),Y1e=n(UE,"CODE",{});var Wbt=s(Y1e);a4r=r(Wbt,"model_type"),Wbt.forEach(t),n4r=r(UE,` property of the config object (either
passed as an argument or loaded from `),K1e=n(UE,"CODE",{});var Qbt=s(K1e);s4r=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),l4r=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(UE,"CODE",{});var Hbt=s(Z1e);i4r=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),d4r=r(UE,":"),UE.forEach(t),c4r=i(xa),ce=n(xa,"UL",{});var he=s(ce);PM=n(he,"LI",{});var NBe=s(PM);ebe=n(NBe,"STRONG",{});var Ubt=s(ebe);f4r=r(Ubt,"albert"),Ubt.forEach(t),m4r=r(NBe," \u2014 "),BV=n(NBe,"A",{href:!0});var Jbt=s(BV);g4r=r(Jbt,"FlaxAlbertForPreTraining"),Jbt.forEach(t),h4r=r(NBe," (ALBERT model)"),NBe.forEach(t),p4r=i(he),$M=n(he,"LI",{});var jBe=s($M);obe=n(jBe,"STRONG",{});var Ybt=s(obe);_4r=r(Ybt,"bart"),Ybt.forEach(t),u4r=r(jBe," \u2014 "),xV=n(jBe,"A",{href:!0});var Kbt=s(xV);b4r=r(Kbt,"FlaxBartForConditionalGeneration"),Kbt.forEach(t),v4r=r(jBe," (BART model)"),jBe.forEach(t),T4r=i(he),IM=n(he,"LI",{});var DBe=s(IM);rbe=n(DBe,"STRONG",{});var Zbt=s(rbe);F4r=r(Zbt,"bert"),Zbt.forEach(t),C4r=r(DBe," \u2014 "),kV=n(DBe,"A",{href:!0});var evt=s(kV);M4r=r(evt,"FlaxBertForPreTraining"),evt.forEach(t),E4r=r(DBe," (BERT model)"),DBe.forEach(t),y4r=i(he),NM=n(he,"LI",{});var qBe=s(NM);tbe=n(qBe,"STRONG",{});var ovt=s(tbe);w4r=r(ovt,"big_bird"),ovt.forEach(t),A4r=r(qBe," \u2014 "),RV=n(qBe,"A",{href:!0});var rvt=s(RV);L4r=r(rvt,"FlaxBigBirdForPreTraining"),rvt.forEach(t),B4r=r(qBe," (BigBird model)"),qBe.forEach(t),x4r=i(he),jM=n(he,"LI",{});var GBe=s(jM);abe=n(GBe,"STRONG",{});var tvt=s(abe);k4r=r(tvt,"electra"),tvt.forEach(t),R4r=r(GBe," \u2014 "),SV=n(GBe,"A",{href:!0});var avt=s(SV);S4r=r(avt,"FlaxElectraForPreTraining"),avt.forEach(t),P4r=r(GBe," (ELECTRA model)"),GBe.forEach(t),$4r=i(he),DM=n(he,"LI",{});var OBe=s(DM);nbe=n(OBe,"STRONG",{});var nvt=s(nbe);I4r=r(nvt,"mbart"),nvt.forEach(t),N4r=r(OBe," \u2014 "),PV=n(OBe,"A",{href:!0});var svt=s(PV);j4r=r(svt,"FlaxMBartForConditionalGeneration"),svt.forEach(t),D4r=r(OBe," (mBART model)"),OBe.forEach(t),q4r=i(he),qM=n(he,"LI",{});var XBe=s(qM);sbe=n(XBe,"STRONG",{});var lvt=s(sbe);G4r=r(lvt,"mt5"),lvt.forEach(t),O4r=r(XBe," \u2014 "),$V=n(XBe,"A",{href:!0});var ivt=s($V);X4r=r(ivt,"FlaxMT5ForConditionalGeneration"),ivt.forEach(t),V4r=r(XBe," (mT5 model)"),XBe.forEach(t),z4r=i(he),GM=n(he,"LI",{});var VBe=s(GM);lbe=n(VBe,"STRONG",{});var dvt=s(lbe);W4r=r(dvt,"roberta"),dvt.forEach(t),Q4r=r(VBe," \u2014 "),IV=n(VBe,"A",{href:!0});var cvt=s(IV);H4r=r(cvt,"FlaxRobertaForMaskedLM"),cvt.forEach(t),U4r=r(VBe," (RoBERTa model)"),VBe.forEach(t),J4r=i(he),OM=n(he,"LI",{});var zBe=s(OM);ibe=n(zBe,"STRONG",{});var fvt=s(ibe);Y4r=r(fvt,"roformer"),fvt.forEach(t),K4r=r(zBe," \u2014 "),NV=n(zBe,"A",{href:!0});var mvt=s(NV);Z4r=r(mvt,"FlaxRoFormerForMaskedLM"),mvt.forEach(t),eEr=r(zBe," (RoFormer model)"),zBe.forEach(t),oEr=i(he),XM=n(he,"LI",{});var WBe=s(XM);dbe=n(WBe,"STRONG",{});var gvt=s(dbe);rEr=r(gvt,"t5"),gvt.forEach(t),tEr=r(WBe," \u2014 "),jV=n(WBe,"A",{href:!0});var hvt=s(jV);aEr=r(hvt,"FlaxT5ForConditionalGeneration"),hvt.forEach(t),nEr=r(WBe," (T5 model)"),WBe.forEach(t),sEr=i(he),VM=n(he,"LI",{});var QBe=s(VM);cbe=n(QBe,"STRONG",{});var pvt=s(cbe);lEr=r(pvt,"wav2vec2"),pvt.forEach(t),iEr=r(QBe," \u2014 "),DV=n(QBe,"A",{href:!0});var _vt=s(DV);dEr=r(_vt,"FlaxWav2Vec2ForPreTraining"),_vt.forEach(t),cEr=r(QBe," (Wav2Vec2 model)"),QBe.forEach(t),fEr=i(he),zM=n(he,"LI",{});var HBe=s(zM);fbe=n(HBe,"STRONG",{});var uvt=s(fbe);mEr=r(uvt,"xlm-roberta"),uvt.forEach(t),gEr=r(HBe," \u2014 "),qV=n(HBe,"A",{href:!0});var bvt=s(qV);hEr=r(bvt,"FlaxXLMRobertaForMaskedLM"),bvt.forEach(t),pEr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),he.forEach(t),_Er=i(xa),mbe=n(xa,"P",{});var vvt=s(mbe);uEr=r(vvt,"Examples:"),vvt.forEach(t),bEr=i(xa),m(VL.$$.fragment,xa),xa.forEach(t),_i.forEach(t),NRe=i(c),lf=n(c,"H2",{class:!0});var UPe=s(lf);WM=n(UPe,"A",{id:!0,class:!0,href:!0});var Tvt=s(WM);gbe=n(Tvt,"SPAN",{});var Fvt=s(gbe);m(zL.$$.fragment,Fvt),Fvt.forEach(t),Tvt.forEach(t),vEr=i(UPe),hbe=n(UPe,"SPAN",{});var Cvt=s(hbe);TEr=r(Cvt,"FlaxAutoModelForMaskedLM"),Cvt.forEach(t),UPe.forEach(t),jRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(WL.$$.fragment,bi),FEr=i(bi),df=n(bi,"P",{});var TQ=s(df);CEr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pbe=n(TQ,"CODE",{});var Mvt=s(pbe);MEr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),EEr=r(TQ,"class method or the "),_be=n(TQ,"CODE",{});var Evt=s(_be);yEr=r(Evt,"from_config()"),Evt.forEach(t),wEr=r(TQ,`class
method.`),TQ.forEach(t),AEr=i(bi),QL=n(bi,"P",{});var JPe=s(QL);LEr=r(JPe,"This class cannot be instantiated directly using "),ube=n(JPe,"CODE",{});var yvt=s(ube);BEr=r(yvt,"__init__()"),yvt.forEach(t),xEr=r(JPe," (throws an error)."),JPe.forEach(t),kEr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(HL.$$.fragment,vi),REr=i(vi),bbe=n(vi,"P",{});var wvt=s(bbe);SEr=r(wvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wvt.forEach(t),PEr=i(vi),cf=n(vi,"P",{});var FQ=s(cf);$Er=r(FQ,`Note:
Loading a model from its configuration file does `),vbe=n(FQ,"STRONG",{});var Avt=s(vbe);IEr=r(Avt,"not"),Avt.forEach(t),NEr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tbe=n(FQ,"CODE",{});var Lvt=s(Tbe);jEr=r(Lvt,"from_pretrained()"),Lvt.forEach(t),DEr=r(FQ,"to load the model weights."),FQ.forEach(t),qEr=i(vi),Fbe=n(vi,"P",{});var Bvt=s(Fbe);GEr=r(Bvt,"Examples:"),Bvt.forEach(t),OEr=i(vi),m(UL.$$.fragment,vi),vi.forEach(t),XEr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(JL.$$.fragment,ka),VEr=i(ka),Cbe=n(ka,"P",{});var xvt=s(Cbe);zEr=r(xvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xvt.forEach(t),WEr=i(ka),Rn=n(ka,"P",{});var JE=s(Rn);QEr=r(JE,"The model class to instantiate is selected based on the "),Mbe=n(JE,"CODE",{});var kvt=s(Mbe);HEr=r(kvt,"model_type"),kvt.forEach(t),UEr=r(JE,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(JE,"CODE",{});var Rvt=s(Ebe);JEr=r(Rvt,"pretrained_model_name_or_path"),Rvt.forEach(t),YEr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(JE,"CODE",{});var Svt=s(ybe);KEr=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),ZEr=r(JE,":"),JE.forEach(t),e3r=i(ka),be=n(ka,"UL",{});var we=s(be);QM=n(we,"LI",{});var UBe=s(QM);wbe=n(UBe,"STRONG",{});var Pvt=s(wbe);o3r=r(Pvt,"albert"),Pvt.forEach(t),r3r=r(UBe," \u2014 "),GV=n(UBe,"A",{href:!0});var $vt=s(GV);t3r=r($vt,"FlaxAlbertForMaskedLM"),$vt.forEach(t),a3r=r(UBe," (ALBERT model)"),UBe.forEach(t),n3r=i(we),HM=n(we,"LI",{});var JBe=s(HM);Abe=n(JBe,"STRONG",{});var Ivt=s(Abe);s3r=r(Ivt,"bart"),Ivt.forEach(t),l3r=r(JBe," \u2014 "),OV=n(JBe,"A",{href:!0});var Nvt=s(OV);i3r=r(Nvt,"FlaxBartForConditionalGeneration"),Nvt.forEach(t),d3r=r(JBe," (BART model)"),JBe.forEach(t),c3r=i(we),UM=n(we,"LI",{});var YBe=s(UM);Lbe=n(YBe,"STRONG",{});var jvt=s(Lbe);f3r=r(jvt,"bert"),jvt.forEach(t),m3r=r(YBe," \u2014 "),XV=n(YBe,"A",{href:!0});var Dvt=s(XV);g3r=r(Dvt,"FlaxBertForMaskedLM"),Dvt.forEach(t),h3r=r(YBe," (BERT model)"),YBe.forEach(t),p3r=i(we),JM=n(we,"LI",{});var KBe=s(JM);Bbe=n(KBe,"STRONG",{});var qvt=s(Bbe);_3r=r(qvt,"big_bird"),qvt.forEach(t),u3r=r(KBe," \u2014 "),VV=n(KBe,"A",{href:!0});var Gvt=s(VV);b3r=r(Gvt,"FlaxBigBirdForMaskedLM"),Gvt.forEach(t),v3r=r(KBe," (BigBird model)"),KBe.forEach(t),T3r=i(we),YM=n(we,"LI",{});var ZBe=s(YM);xbe=n(ZBe,"STRONG",{});var Ovt=s(xbe);F3r=r(Ovt,"distilbert"),Ovt.forEach(t),C3r=r(ZBe," \u2014 "),zV=n(ZBe,"A",{href:!0});var Xvt=s(zV);M3r=r(Xvt,"FlaxDistilBertForMaskedLM"),Xvt.forEach(t),E3r=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),y3r=i(we),KM=n(we,"LI",{});var exe=s(KM);kbe=n(exe,"STRONG",{});var Vvt=s(kbe);w3r=r(Vvt,"electra"),Vvt.forEach(t),A3r=r(exe," \u2014 "),WV=n(exe,"A",{href:!0});var zvt=s(WV);L3r=r(zvt,"FlaxElectraForMaskedLM"),zvt.forEach(t),B3r=r(exe," (ELECTRA model)"),exe.forEach(t),x3r=i(we),ZM=n(we,"LI",{});var oxe=s(ZM);Rbe=n(oxe,"STRONG",{});var Wvt=s(Rbe);k3r=r(Wvt,"mbart"),Wvt.forEach(t),R3r=r(oxe," \u2014 "),QV=n(oxe,"A",{href:!0});var Qvt=s(QV);S3r=r(Qvt,"FlaxMBartForConditionalGeneration"),Qvt.forEach(t),P3r=r(oxe," (mBART model)"),oxe.forEach(t),$3r=i(we),e4=n(we,"LI",{});var rxe=s(e4);Sbe=n(rxe,"STRONG",{});var Hvt=s(Sbe);I3r=r(Hvt,"roberta"),Hvt.forEach(t),N3r=r(rxe," \u2014 "),HV=n(rxe,"A",{href:!0});var Uvt=s(HV);j3r=r(Uvt,"FlaxRobertaForMaskedLM"),Uvt.forEach(t),D3r=r(rxe," (RoBERTa model)"),rxe.forEach(t),q3r=i(we),o4=n(we,"LI",{});var txe=s(o4);Pbe=n(txe,"STRONG",{});var Jvt=s(Pbe);G3r=r(Jvt,"roformer"),Jvt.forEach(t),O3r=r(txe," \u2014 "),UV=n(txe,"A",{href:!0});var Yvt=s(UV);X3r=r(Yvt,"FlaxRoFormerForMaskedLM"),Yvt.forEach(t),V3r=r(txe," (RoFormer model)"),txe.forEach(t),z3r=i(we),r4=n(we,"LI",{});var axe=s(r4);$be=n(axe,"STRONG",{});var Kvt=s($be);W3r=r(Kvt,"xlm-roberta"),Kvt.forEach(t),Q3r=r(axe," \u2014 "),JV=n(axe,"A",{href:!0});var Zvt=s(JV);H3r=r(Zvt,"FlaxXLMRobertaForMaskedLM"),Zvt.forEach(t),U3r=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),we.forEach(t),J3r=i(ka),Ibe=n(ka,"P",{});var e6t=s(Ibe);Y3r=r(e6t,"Examples:"),e6t.forEach(t),K3r=i(ka),m(YL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),DRe=i(c),ff=n(c,"H2",{class:!0});var YPe=s(ff);t4=n(YPe,"A",{id:!0,class:!0,href:!0});var o6t=s(t4);Nbe=n(o6t,"SPAN",{});var r6t=s(Nbe);m(KL.$$.fragment,r6t),r6t.forEach(t),o6t.forEach(t),Z3r=i(YPe),jbe=n(YPe,"SPAN",{});var t6t=s(jbe);eyr=r(t6t,"FlaxAutoModelForSeq2SeqLM"),t6t.forEach(t),YPe.forEach(t),qRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(ZL.$$.fragment,Ti),oyr=i(Ti),mf=n(Ti,"P",{});var CQ=s(mf);ryr=r(CQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dbe=n(CQ,"CODE",{});var a6t=s(Dbe);tyr=r(a6t,"from_pretrained()"),a6t.forEach(t),ayr=r(CQ,"class method or the "),qbe=n(CQ,"CODE",{});var n6t=s(qbe);nyr=r(n6t,"from_config()"),n6t.forEach(t),syr=r(CQ,`class
method.`),CQ.forEach(t),lyr=i(Ti),e8=n(Ti,"P",{});var KPe=s(e8);iyr=r(KPe,"This class cannot be instantiated directly using "),Gbe=n(KPe,"CODE",{});var s6t=s(Gbe);dyr=r(s6t,"__init__()"),s6t.forEach(t),cyr=r(KPe," (throws an error)."),KPe.forEach(t),fyr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(o8.$$.fragment,Fi),myr=i(Fi),Obe=n(Fi,"P",{});var l6t=s(Obe);gyr=r(l6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l6t.forEach(t),hyr=i(Fi),gf=n(Fi,"P",{});var MQ=s(gf);pyr=r(MQ,`Note:
Loading a model from its configuration file does `),Xbe=n(MQ,"STRONG",{});var i6t=s(Xbe);_yr=r(i6t,"not"),i6t.forEach(t),uyr=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vbe=n(MQ,"CODE",{});var d6t=s(Vbe);byr=r(d6t,"from_pretrained()"),d6t.forEach(t),vyr=r(MQ,"to load the model weights."),MQ.forEach(t),Tyr=i(Fi),zbe=n(Fi,"P",{});var c6t=s(zbe);Fyr=r(c6t,"Examples:"),c6t.forEach(t),Cyr=i(Fi),m(r8.$$.fragment,Fi),Fi.forEach(t),Myr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(t8.$$.fragment,Ra),Eyr=i(Ra),Wbe=n(Ra,"P",{});var f6t=s(Wbe);yyr=r(f6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f6t.forEach(t),wyr=i(Ra),Sn=n(Ra,"P",{});var YE=s(Sn);Ayr=r(YE,"The model class to instantiate is selected based on the "),Qbe=n(YE,"CODE",{});var m6t=s(Qbe);Lyr=r(m6t,"model_type"),m6t.forEach(t),Byr=r(YE,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(YE,"CODE",{});var g6t=s(Hbe);xyr=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),kyr=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(YE,"CODE",{});var h6t=s(Ube);Ryr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),Syr=r(YE,":"),YE.forEach(t),Pyr=i(Ra),Ee=n(Ra,"UL",{});var lo=s(Ee);a4=n(lo,"LI",{});var nxe=s(a4);Jbe=n(nxe,"STRONG",{});var p6t=s(Jbe);$yr=r(p6t,"bart"),p6t.forEach(t),Iyr=r(nxe," \u2014 "),YV=n(nxe,"A",{href:!0});var _6t=s(YV);Nyr=r(_6t,"FlaxBartForConditionalGeneration"),_6t.forEach(t),jyr=r(nxe," (BART model)"),nxe.forEach(t),Dyr=i(lo),n4=n(lo,"LI",{});var sxe=s(n4);Ybe=n(sxe,"STRONG",{});var u6t=s(Ybe);qyr=r(u6t,"blenderbot"),u6t.forEach(t),Gyr=r(sxe," \u2014 "),KV=n(sxe,"A",{href:!0});var b6t=s(KV);Oyr=r(b6t,"FlaxBlenderbotForConditionalGeneration"),b6t.forEach(t),Xyr=r(sxe," (Blenderbot model)"),sxe.forEach(t),Vyr=i(lo),s4=n(lo,"LI",{});var lxe=s(s4);Kbe=n(lxe,"STRONG",{});var v6t=s(Kbe);zyr=r(v6t,"blenderbot-small"),v6t.forEach(t),Wyr=r(lxe," \u2014 "),ZV=n(lxe,"A",{href:!0});var T6t=s(ZV);Qyr=r(T6t,"FlaxBlenderbotSmallForConditionalGeneration"),T6t.forEach(t),Hyr=r(lxe," (BlenderbotSmall model)"),lxe.forEach(t),Uyr=i(lo),l4=n(lo,"LI",{});var ixe=s(l4);Zbe=n(ixe,"STRONG",{});var F6t=s(Zbe);Jyr=r(F6t,"encoder-decoder"),F6t.forEach(t),Yyr=r(ixe," \u2014 "),ez=n(ixe,"A",{href:!0});var C6t=s(ez);Kyr=r(C6t,"FlaxEncoderDecoderModel"),C6t.forEach(t),Zyr=r(ixe," (Encoder decoder model)"),ixe.forEach(t),ewr=i(lo),i4=n(lo,"LI",{});var dxe=s(i4);eve=n(dxe,"STRONG",{});var M6t=s(eve);owr=r(M6t,"marian"),M6t.forEach(t),rwr=r(dxe," \u2014 "),oz=n(dxe,"A",{href:!0});var E6t=s(oz);twr=r(E6t,"FlaxMarianMTModel"),E6t.forEach(t),awr=r(dxe," (Marian model)"),dxe.forEach(t),nwr=i(lo),d4=n(lo,"LI",{});var cxe=s(d4);ove=n(cxe,"STRONG",{});var y6t=s(ove);swr=r(y6t,"mbart"),y6t.forEach(t),lwr=r(cxe," \u2014 "),rz=n(cxe,"A",{href:!0});var w6t=s(rz);iwr=r(w6t,"FlaxMBartForConditionalGeneration"),w6t.forEach(t),dwr=r(cxe," (mBART model)"),cxe.forEach(t),cwr=i(lo),c4=n(lo,"LI",{});var fxe=s(c4);rve=n(fxe,"STRONG",{});var A6t=s(rve);fwr=r(A6t,"mt5"),A6t.forEach(t),mwr=r(fxe," \u2014 "),tz=n(fxe,"A",{href:!0});var L6t=s(tz);gwr=r(L6t,"FlaxMT5ForConditionalGeneration"),L6t.forEach(t),hwr=r(fxe," (mT5 model)"),fxe.forEach(t),pwr=i(lo),f4=n(lo,"LI",{});var mxe=s(f4);tve=n(mxe,"STRONG",{});var B6t=s(tve);_wr=r(B6t,"pegasus"),B6t.forEach(t),uwr=r(mxe," \u2014 "),az=n(mxe,"A",{href:!0});var x6t=s(az);bwr=r(x6t,"FlaxPegasusForConditionalGeneration"),x6t.forEach(t),vwr=r(mxe," (Pegasus model)"),mxe.forEach(t),Twr=i(lo),m4=n(lo,"LI",{});var gxe=s(m4);ave=n(gxe,"STRONG",{});var k6t=s(ave);Fwr=r(k6t,"t5"),k6t.forEach(t),Cwr=r(gxe," \u2014 "),nz=n(gxe,"A",{href:!0});var R6t=s(nz);Mwr=r(R6t,"FlaxT5ForConditionalGeneration"),R6t.forEach(t),Ewr=r(gxe," (T5 model)"),gxe.forEach(t),lo.forEach(t),ywr=i(Ra),nve=n(Ra,"P",{});var S6t=s(nve);wwr=r(S6t,"Examples:"),S6t.forEach(t),Awr=i(Ra),m(a8.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),GRe=i(c),hf=n(c,"H2",{class:!0});var ZPe=s(hf);g4=n(ZPe,"A",{id:!0,class:!0,href:!0});var P6t=s(g4);sve=n(P6t,"SPAN",{});var $6t=s(sve);m(n8.$$.fragment,$6t),$6t.forEach(t),P6t.forEach(t),Lwr=i(ZPe),lve=n(ZPe,"SPAN",{});var I6t=s(lve);Bwr=r(I6t,"FlaxAutoModelForSequenceClassification"),I6t.forEach(t),ZPe.forEach(t),ORe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(s8.$$.fragment,Ci),xwr=i(Ci),pf=n(Ci,"P",{});var EQ=s(pf);kwr=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ive=n(EQ,"CODE",{});var N6t=s(ive);Rwr=r(N6t,"from_pretrained()"),N6t.forEach(t),Swr=r(EQ,"class method or the "),dve=n(EQ,"CODE",{});var j6t=s(dve);Pwr=r(j6t,"from_config()"),j6t.forEach(t),$wr=r(EQ,`class
method.`),EQ.forEach(t),Iwr=i(Ci),l8=n(Ci,"P",{});var e$e=s(l8);Nwr=r(e$e,"This class cannot be instantiated directly using "),cve=n(e$e,"CODE",{});var D6t=s(cve);jwr=r(D6t,"__init__()"),D6t.forEach(t),Dwr=r(e$e," (throws an error)."),e$e.forEach(t),qwr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(i8.$$.fragment,Mi),Gwr=i(Mi),fve=n(Mi,"P",{});var q6t=s(fve);Owr=r(q6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),q6t.forEach(t),Xwr=i(Mi),_f=n(Mi,"P",{});var yQ=s(_f);Vwr=r(yQ,`Note:
Loading a model from its configuration file does `),mve=n(yQ,"STRONG",{});var G6t=s(mve);zwr=r(G6t,"not"),G6t.forEach(t),Wwr=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gve=n(yQ,"CODE",{});var O6t=s(gve);Qwr=r(O6t,"from_pretrained()"),O6t.forEach(t),Hwr=r(yQ,"to load the model weights."),yQ.forEach(t),Uwr=i(Mi),hve=n(Mi,"P",{});var X6t=s(hve);Jwr=r(X6t,"Examples:"),X6t.forEach(t),Ywr=i(Mi),m(d8.$$.fragment,Mi),Mi.forEach(t),Kwr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(c8.$$.fragment,Sa),Zwr=i(Sa),pve=n(Sa,"P",{});var V6t=s(pve);eAr=r(V6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),V6t.forEach(t),oAr=i(Sa),Pn=n(Sa,"P",{});var KE=s(Pn);rAr=r(KE,"The model class to instantiate is selected based on the "),_ve=n(KE,"CODE",{});var z6t=s(_ve);tAr=r(z6t,"model_type"),z6t.forEach(t),aAr=r(KE,` property of the config object (either
passed as an argument or loaded from `),uve=n(KE,"CODE",{});var W6t=s(uve);nAr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),sAr=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(KE,"CODE",{});var Q6t=s(bve);lAr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),iAr=r(KE,":"),KE.forEach(t),dAr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);h4=n(Ae,"LI",{});var hxe=s(h4);vve=n(hxe,"STRONG",{});var H6t=s(vve);cAr=r(H6t,"albert"),H6t.forEach(t),fAr=r(hxe," \u2014 "),sz=n(hxe,"A",{href:!0});var U6t=s(sz);mAr=r(U6t,"FlaxAlbertForSequenceClassification"),U6t.forEach(t),gAr=r(hxe," (ALBERT model)"),hxe.forEach(t),hAr=i(Ae),p4=n(Ae,"LI",{});var pxe=s(p4);Tve=n(pxe,"STRONG",{});var J6t=s(Tve);pAr=r(J6t,"bart"),J6t.forEach(t),_Ar=r(pxe," \u2014 "),lz=n(pxe,"A",{href:!0});var Y6t=s(lz);uAr=r(Y6t,"FlaxBartForSequenceClassification"),Y6t.forEach(t),bAr=r(pxe," (BART model)"),pxe.forEach(t),vAr=i(Ae),_4=n(Ae,"LI",{});var _xe=s(_4);Fve=n(_xe,"STRONG",{});var K6t=s(Fve);TAr=r(K6t,"bert"),K6t.forEach(t),FAr=r(_xe," \u2014 "),iz=n(_xe,"A",{href:!0});var Z6t=s(iz);CAr=r(Z6t,"FlaxBertForSequenceClassification"),Z6t.forEach(t),MAr=r(_xe," (BERT model)"),_xe.forEach(t),EAr=i(Ae),u4=n(Ae,"LI",{});var uxe=s(u4);Cve=n(uxe,"STRONG",{});var eTt=s(Cve);yAr=r(eTt,"big_bird"),eTt.forEach(t),wAr=r(uxe," \u2014 "),dz=n(uxe,"A",{href:!0});var oTt=s(dz);AAr=r(oTt,"FlaxBigBirdForSequenceClassification"),oTt.forEach(t),LAr=r(uxe," (BigBird model)"),uxe.forEach(t),BAr=i(Ae),b4=n(Ae,"LI",{});var bxe=s(b4);Mve=n(bxe,"STRONG",{});var rTt=s(Mve);xAr=r(rTt,"distilbert"),rTt.forEach(t),kAr=r(bxe," \u2014 "),cz=n(bxe,"A",{href:!0});var tTt=s(cz);RAr=r(tTt,"FlaxDistilBertForSequenceClassification"),tTt.forEach(t),SAr=r(bxe," (DistilBERT model)"),bxe.forEach(t),PAr=i(Ae),v4=n(Ae,"LI",{});var vxe=s(v4);Eve=n(vxe,"STRONG",{});var aTt=s(Eve);$Ar=r(aTt,"electra"),aTt.forEach(t),IAr=r(vxe," \u2014 "),fz=n(vxe,"A",{href:!0});var nTt=s(fz);NAr=r(nTt,"FlaxElectraForSequenceClassification"),nTt.forEach(t),jAr=r(vxe," (ELECTRA model)"),vxe.forEach(t),DAr=i(Ae),T4=n(Ae,"LI",{});var Txe=s(T4);yve=n(Txe,"STRONG",{});var sTt=s(yve);qAr=r(sTt,"mbart"),sTt.forEach(t),GAr=r(Txe," \u2014 "),mz=n(Txe,"A",{href:!0});var lTt=s(mz);OAr=r(lTt,"FlaxMBartForSequenceClassification"),lTt.forEach(t),XAr=r(Txe," (mBART model)"),Txe.forEach(t),VAr=i(Ae),F4=n(Ae,"LI",{});var Fxe=s(F4);wve=n(Fxe,"STRONG",{});var iTt=s(wve);zAr=r(iTt,"roberta"),iTt.forEach(t),WAr=r(Fxe," \u2014 "),gz=n(Fxe,"A",{href:!0});var dTt=s(gz);QAr=r(dTt,"FlaxRobertaForSequenceClassification"),dTt.forEach(t),HAr=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),UAr=i(Ae),C4=n(Ae,"LI",{});var Cxe=s(C4);Ave=n(Cxe,"STRONG",{});var cTt=s(Ave);JAr=r(cTt,"roformer"),cTt.forEach(t),YAr=r(Cxe," \u2014 "),hz=n(Cxe,"A",{href:!0});var fTt=s(hz);KAr=r(fTt,"FlaxRoFormerForSequenceClassification"),fTt.forEach(t),ZAr=r(Cxe," (RoFormer model)"),Cxe.forEach(t),e0r=i(Ae),M4=n(Ae,"LI",{});var Mxe=s(M4);Lve=n(Mxe,"STRONG",{});var mTt=s(Lve);o0r=r(mTt,"xlm-roberta"),mTt.forEach(t),r0r=r(Mxe," \u2014 "),pz=n(Mxe,"A",{href:!0});var gTt=s(pz);t0r=r(gTt,"FlaxXLMRobertaForSequenceClassification"),gTt.forEach(t),a0r=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),Ae.forEach(t),n0r=i(Sa),Bve=n(Sa,"P",{});var hTt=s(Bve);s0r=r(hTt,"Examples:"),hTt.forEach(t),l0r=i(Sa),m(f8.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),XRe=i(c),uf=n(c,"H2",{class:!0});var o$e=s(uf);E4=n(o$e,"A",{id:!0,class:!0,href:!0});var pTt=s(E4);xve=n(pTt,"SPAN",{});var _Tt=s(xve);m(m8.$$.fragment,_Tt),_Tt.forEach(t),pTt.forEach(t),i0r=i(o$e),kve=n(o$e,"SPAN",{});var uTt=s(kve);d0r=r(uTt,"FlaxAutoModelForQuestionAnswering"),uTt.forEach(t),o$e.forEach(t),VRe=i(c),jr=n(c,"DIV",{class:!0});var Ei=s(jr);m(g8.$$.fragment,Ei),c0r=i(Ei),bf=n(Ei,"P",{});var wQ=s(bf);f0r=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Rve=n(wQ,"CODE",{});var bTt=s(Rve);m0r=r(bTt,"from_pretrained()"),bTt.forEach(t),g0r=r(wQ,"class method or the "),Sve=n(wQ,"CODE",{});var vTt=s(Sve);h0r=r(vTt,"from_config()"),vTt.forEach(t),p0r=r(wQ,`class
method.`),wQ.forEach(t),_0r=i(Ei),h8=n(Ei,"P",{});var r$e=s(h8);u0r=r(r$e,"This class cannot be instantiated directly using "),Pve=n(r$e,"CODE",{});var TTt=s(Pve);b0r=r(TTt,"__init__()"),TTt.forEach(t),v0r=r(r$e," (throws an error)."),r$e.forEach(t),T0r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(p8.$$.fragment,yi),F0r=i(yi),$ve=n(yi,"P",{});var FTt=s($ve);C0r=r(FTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FTt.forEach(t),M0r=i(yi),vf=n(yi,"P",{});var AQ=s(vf);E0r=r(AQ,`Note:
Loading a model from its configuration file does `),Ive=n(AQ,"STRONG",{});var CTt=s(Ive);y0r=r(CTt,"not"),CTt.forEach(t),w0r=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nve=n(AQ,"CODE",{});var MTt=s(Nve);A0r=r(MTt,"from_pretrained()"),MTt.forEach(t),L0r=r(AQ,"to load the model weights."),AQ.forEach(t),B0r=i(yi),jve=n(yi,"P",{});var ETt=s(jve);x0r=r(ETt,"Examples:"),ETt.forEach(t),k0r=i(yi),m(_8.$$.fragment,yi),yi.forEach(t),R0r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(u8.$$.fragment,Pa),S0r=i(Pa),Dve=n(Pa,"P",{});var yTt=s(Dve);P0r=r(yTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yTt.forEach(t),$0r=i(Pa),$n=n(Pa,"P",{});var ZE=s($n);I0r=r(ZE,"The model class to instantiate is selected based on the "),qve=n(ZE,"CODE",{});var wTt=s(qve);N0r=r(wTt,"model_type"),wTt.forEach(t),j0r=r(ZE,` property of the config object (either
passed as an argument or loaded from `),Gve=n(ZE,"CODE",{});var ATt=s(Gve);D0r=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),q0r=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(ZE,"CODE",{});var LTt=s(Ove);G0r=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),O0r=r(ZE,":"),ZE.forEach(t),X0r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);y4=n(Le,"LI",{});var Exe=s(y4);Xve=n(Exe,"STRONG",{});var BTt=s(Xve);V0r=r(BTt,"albert"),BTt.forEach(t),z0r=r(Exe," \u2014 "),_z=n(Exe,"A",{href:!0});var xTt=s(_z);W0r=r(xTt,"FlaxAlbertForQuestionAnswering"),xTt.forEach(t),Q0r=r(Exe," (ALBERT model)"),Exe.forEach(t),H0r=i(Le),w4=n(Le,"LI",{});var yxe=s(w4);Vve=n(yxe,"STRONG",{});var kTt=s(Vve);U0r=r(kTt,"bart"),kTt.forEach(t),J0r=r(yxe," \u2014 "),uz=n(yxe,"A",{href:!0});var RTt=s(uz);Y0r=r(RTt,"FlaxBartForQuestionAnswering"),RTt.forEach(t),K0r=r(yxe," (BART model)"),yxe.forEach(t),Z0r=i(Le),A4=n(Le,"LI",{});var wxe=s(A4);zve=n(wxe,"STRONG",{});var STt=s(zve);eLr=r(STt,"bert"),STt.forEach(t),oLr=r(wxe," \u2014 "),bz=n(wxe,"A",{href:!0});var PTt=s(bz);rLr=r(PTt,"FlaxBertForQuestionAnswering"),PTt.forEach(t),tLr=r(wxe," (BERT model)"),wxe.forEach(t),aLr=i(Le),L4=n(Le,"LI",{});var Axe=s(L4);Wve=n(Axe,"STRONG",{});var $Tt=s(Wve);nLr=r($Tt,"big_bird"),$Tt.forEach(t),sLr=r(Axe," \u2014 "),vz=n(Axe,"A",{href:!0});var ITt=s(vz);lLr=r(ITt,"FlaxBigBirdForQuestionAnswering"),ITt.forEach(t),iLr=r(Axe," (BigBird model)"),Axe.forEach(t),dLr=i(Le),B4=n(Le,"LI",{});var Lxe=s(B4);Qve=n(Lxe,"STRONG",{});var NTt=s(Qve);cLr=r(NTt,"distilbert"),NTt.forEach(t),fLr=r(Lxe," \u2014 "),Tz=n(Lxe,"A",{href:!0});var jTt=s(Tz);mLr=r(jTt,"FlaxDistilBertForQuestionAnswering"),jTt.forEach(t),gLr=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),hLr=i(Le),x4=n(Le,"LI",{});var Bxe=s(x4);Hve=n(Bxe,"STRONG",{});var DTt=s(Hve);pLr=r(DTt,"electra"),DTt.forEach(t),_Lr=r(Bxe," \u2014 "),Fz=n(Bxe,"A",{href:!0});var qTt=s(Fz);uLr=r(qTt,"FlaxElectraForQuestionAnswering"),qTt.forEach(t),bLr=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),vLr=i(Le),k4=n(Le,"LI",{});var xxe=s(k4);Uve=n(xxe,"STRONG",{});var GTt=s(Uve);TLr=r(GTt,"mbart"),GTt.forEach(t),FLr=r(xxe," \u2014 "),Cz=n(xxe,"A",{href:!0});var OTt=s(Cz);CLr=r(OTt,"FlaxMBartForQuestionAnswering"),OTt.forEach(t),MLr=r(xxe," (mBART model)"),xxe.forEach(t),ELr=i(Le),R4=n(Le,"LI",{});var kxe=s(R4);Jve=n(kxe,"STRONG",{});var XTt=s(Jve);yLr=r(XTt,"roberta"),XTt.forEach(t),wLr=r(kxe," \u2014 "),Mz=n(kxe,"A",{href:!0});var VTt=s(Mz);ALr=r(VTt,"FlaxRobertaForQuestionAnswering"),VTt.forEach(t),LLr=r(kxe," (RoBERTa model)"),kxe.forEach(t),BLr=i(Le),S4=n(Le,"LI",{});var Rxe=s(S4);Yve=n(Rxe,"STRONG",{});var zTt=s(Yve);xLr=r(zTt,"roformer"),zTt.forEach(t),kLr=r(Rxe," \u2014 "),Ez=n(Rxe,"A",{href:!0});var WTt=s(Ez);RLr=r(WTt,"FlaxRoFormerForQuestionAnswering"),WTt.forEach(t),SLr=r(Rxe," (RoFormer model)"),Rxe.forEach(t),PLr=i(Le),P4=n(Le,"LI",{});var Sxe=s(P4);Kve=n(Sxe,"STRONG",{});var QTt=s(Kve);$Lr=r(QTt,"xlm-roberta"),QTt.forEach(t),ILr=r(Sxe," \u2014 "),yz=n(Sxe,"A",{href:!0});var HTt=s(yz);NLr=r(HTt,"FlaxXLMRobertaForQuestionAnswering"),HTt.forEach(t),jLr=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Le.forEach(t),DLr=i(Pa),Zve=n(Pa,"P",{});var UTt=s(Zve);qLr=r(UTt,"Examples:"),UTt.forEach(t),GLr=i(Pa),m(b8.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),zRe=i(c),Tf=n(c,"H2",{class:!0});var t$e=s(Tf);$4=n(t$e,"A",{id:!0,class:!0,href:!0});var JTt=s($4);e6e=n(JTt,"SPAN",{});var YTt=s(e6e);m(v8.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),OLr=i(t$e),o6e=n(t$e,"SPAN",{});var KTt=s(o6e);XLr=r(KTt,"FlaxAutoModelForTokenClassification"),KTt.forEach(t),t$e.forEach(t),WRe=i(c),Dr=n(c,"DIV",{class:!0});var wi=s(Dr);m(T8.$$.fragment,wi),VLr=i(wi),Ff=n(wi,"P",{});var LQ=s(Ff);zLr=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),r6e=n(LQ,"CODE",{});var ZTt=s(r6e);WLr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),QLr=r(LQ,"class method or the "),t6e=n(LQ,"CODE",{});var eFt=s(t6e);HLr=r(eFt,"from_config()"),eFt.forEach(t),ULr=r(LQ,`class
method.`),LQ.forEach(t),JLr=i(wi),F8=n(wi,"P",{});var a$e=s(F8);YLr=r(a$e,"This class cannot be instantiated directly using "),a6e=n(a$e,"CODE",{});var oFt=s(a6e);KLr=r(oFt,"__init__()"),oFt.forEach(t),ZLr=r(a$e," (throws an error)."),a$e.forEach(t),e8r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(C8.$$.fragment,Ai),o8r=i(Ai),n6e=n(Ai,"P",{});var rFt=s(n6e);r8r=r(rFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rFt.forEach(t),t8r=i(Ai),Cf=n(Ai,"P",{});var BQ=s(Cf);a8r=r(BQ,`Note:
Loading a model from its configuration file does `),s6e=n(BQ,"STRONG",{});var tFt=s(s6e);n8r=r(tFt,"not"),tFt.forEach(t),s8r=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),l6e=n(BQ,"CODE",{});var aFt=s(l6e);l8r=r(aFt,"from_pretrained()"),aFt.forEach(t),i8r=r(BQ,"to load the model weights."),BQ.forEach(t),d8r=i(Ai),i6e=n(Ai,"P",{});var nFt=s(i6e);c8r=r(nFt,"Examples:"),nFt.forEach(t),f8r=i(Ai),m(M8.$$.fragment,Ai),Ai.forEach(t),m8r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(E8.$$.fragment,$a),g8r=i($a),d6e=n($a,"P",{});var sFt=s(d6e);h8r=r(sFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sFt.forEach(t),p8r=i($a),In=n($a,"P",{});var e3=s(In);_8r=r(e3,"The model class to instantiate is selected based on the "),c6e=n(e3,"CODE",{});var lFt=s(c6e);u8r=r(lFt,"model_type"),lFt.forEach(t),b8r=r(e3,` property of the config object (either
passed as an argument or loaded from `),f6e=n(e3,"CODE",{});var iFt=s(f6e);v8r=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),T8r=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=n(e3,"CODE",{});var dFt=s(m6e);F8r=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),C8r=r(e3,":"),e3.forEach(t),M8r=i($a),Se=n($a,"UL",{});var Oo=s(Se);I4=n(Oo,"LI",{});var Pxe=s(I4);g6e=n(Pxe,"STRONG",{});var cFt=s(g6e);E8r=r(cFt,"albert"),cFt.forEach(t),y8r=r(Pxe," \u2014 "),wz=n(Pxe,"A",{href:!0});var fFt=s(wz);w8r=r(fFt,"FlaxAlbertForTokenClassification"),fFt.forEach(t),A8r=r(Pxe," (ALBERT model)"),Pxe.forEach(t),L8r=i(Oo),N4=n(Oo,"LI",{});var $xe=s(N4);h6e=n($xe,"STRONG",{});var mFt=s(h6e);B8r=r(mFt,"bert"),mFt.forEach(t),x8r=r($xe," \u2014 "),Az=n($xe,"A",{href:!0});var gFt=s(Az);k8r=r(gFt,"FlaxBertForTokenClassification"),gFt.forEach(t),R8r=r($xe," (BERT model)"),$xe.forEach(t),S8r=i(Oo),j4=n(Oo,"LI",{});var Ixe=s(j4);p6e=n(Ixe,"STRONG",{});var hFt=s(p6e);P8r=r(hFt,"big_bird"),hFt.forEach(t),$8r=r(Ixe," \u2014 "),Lz=n(Ixe,"A",{href:!0});var pFt=s(Lz);I8r=r(pFt,"FlaxBigBirdForTokenClassification"),pFt.forEach(t),N8r=r(Ixe," (BigBird model)"),Ixe.forEach(t),j8r=i(Oo),D4=n(Oo,"LI",{});var Nxe=s(D4);_6e=n(Nxe,"STRONG",{});var _Ft=s(_6e);D8r=r(_Ft,"distilbert"),_Ft.forEach(t),q8r=r(Nxe," \u2014 "),Bz=n(Nxe,"A",{href:!0});var uFt=s(Bz);G8r=r(uFt,"FlaxDistilBertForTokenClassification"),uFt.forEach(t),O8r=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),X8r=i(Oo),q4=n(Oo,"LI",{});var jxe=s(q4);u6e=n(jxe,"STRONG",{});var bFt=s(u6e);V8r=r(bFt,"electra"),bFt.forEach(t),z8r=r(jxe," \u2014 "),xz=n(jxe,"A",{href:!0});var vFt=s(xz);W8r=r(vFt,"FlaxElectraForTokenClassification"),vFt.forEach(t),Q8r=r(jxe," (ELECTRA model)"),jxe.forEach(t),H8r=i(Oo),G4=n(Oo,"LI",{});var Dxe=s(G4);b6e=n(Dxe,"STRONG",{});var TFt=s(b6e);U8r=r(TFt,"roberta"),TFt.forEach(t),J8r=r(Dxe," \u2014 "),kz=n(Dxe,"A",{href:!0});var FFt=s(kz);Y8r=r(FFt,"FlaxRobertaForTokenClassification"),FFt.forEach(t),K8r=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),Z8r=i(Oo),O4=n(Oo,"LI",{});var qxe=s(O4);v6e=n(qxe,"STRONG",{});var CFt=s(v6e);e7r=r(CFt,"roformer"),CFt.forEach(t),o7r=r(qxe," \u2014 "),Rz=n(qxe,"A",{href:!0});var MFt=s(Rz);r7r=r(MFt,"FlaxRoFormerForTokenClassification"),MFt.forEach(t),t7r=r(qxe," (RoFormer model)"),qxe.forEach(t),a7r=i(Oo),X4=n(Oo,"LI",{});var Gxe=s(X4);T6e=n(Gxe,"STRONG",{});var EFt=s(T6e);n7r=r(EFt,"xlm-roberta"),EFt.forEach(t),s7r=r(Gxe," \u2014 "),Sz=n(Gxe,"A",{href:!0});var yFt=s(Sz);l7r=r(yFt,"FlaxXLMRobertaForTokenClassification"),yFt.forEach(t),i7r=r(Gxe," (XLM-RoBERTa model)"),Gxe.forEach(t),Oo.forEach(t),d7r=i($a),F6e=n($a,"P",{});var wFt=s(F6e);c7r=r(wFt,"Examples:"),wFt.forEach(t),f7r=i($a),m(y8.$$.fragment,$a),$a.forEach(t),wi.forEach(t),QRe=i(c),Mf=n(c,"H2",{class:!0});var n$e=s(Mf);V4=n(n$e,"A",{id:!0,class:!0,href:!0});var AFt=s(V4);C6e=n(AFt,"SPAN",{});var LFt=s(C6e);m(w8.$$.fragment,LFt),LFt.forEach(t),AFt.forEach(t),m7r=i(n$e),M6e=n(n$e,"SPAN",{});var BFt=s(M6e);g7r=r(BFt,"FlaxAutoModelForMultipleChoice"),BFt.forEach(t),n$e.forEach(t),HRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(A8.$$.fragment,Li),h7r=i(Li),Ef=n(Li,"P",{});var xQ=s(Ef);p7r=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),E6e=n(xQ,"CODE",{});var xFt=s(E6e);_7r=r(xFt,"from_pretrained()"),xFt.forEach(t),u7r=r(xQ,"class method or the "),y6e=n(xQ,"CODE",{});var kFt=s(y6e);b7r=r(kFt,"from_config()"),kFt.forEach(t),v7r=r(xQ,`class
method.`),xQ.forEach(t),T7r=i(Li),L8=n(Li,"P",{});var s$e=s(L8);F7r=r(s$e,"This class cannot be instantiated directly using "),w6e=n(s$e,"CODE",{});var RFt=s(w6e);C7r=r(RFt,"__init__()"),RFt.forEach(t),M7r=r(s$e," (throws an error)."),s$e.forEach(t),E7r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(B8.$$.fragment,Bi),y7r=i(Bi),A6e=n(Bi,"P",{});var SFt=s(A6e);w7r=r(SFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SFt.forEach(t),A7r=i(Bi),yf=n(Bi,"P",{});var kQ=s(yf);L7r=r(kQ,`Note:
Loading a model from its configuration file does `),L6e=n(kQ,"STRONG",{});var PFt=s(L6e);B7r=r(PFt,"not"),PFt.forEach(t),x7r=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=n(kQ,"CODE",{});var $Ft=s(B6e);k7r=r($Ft,"from_pretrained()"),$Ft.forEach(t),R7r=r(kQ,"to load the model weights."),kQ.forEach(t),S7r=i(Bi),x6e=n(Bi,"P",{});var IFt=s(x6e);P7r=r(IFt,"Examples:"),IFt.forEach(t),$7r=i(Bi),m(x8.$$.fragment,Bi),Bi.forEach(t),I7r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(k8.$$.fragment,Ia),N7r=i(Ia),k6e=n(Ia,"P",{});var NFt=s(k6e);j7r=r(NFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NFt.forEach(t),D7r=i(Ia),Nn=n(Ia,"P",{});var o3=s(Nn);q7r=r(o3,"The model class to instantiate is selected based on the "),R6e=n(o3,"CODE",{});var jFt=s(R6e);G7r=r(jFt,"model_type"),jFt.forEach(t),O7r=r(o3,` property of the config object (either
passed as an argument or loaded from `),S6e=n(o3,"CODE",{});var DFt=s(S6e);X7r=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),V7r=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(o3,"CODE",{});var qFt=s(P6e);z7r=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),W7r=r(o3,":"),o3.forEach(t),Q7r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);z4=n(Xo,"LI",{});var Oxe=s(z4);$6e=n(Oxe,"STRONG",{});var GFt=s($6e);H7r=r(GFt,"albert"),GFt.forEach(t),U7r=r(Oxe," \u2014 "),Pz=n(Oxe,"A",{href:!0});var OFt=s(Pz);J7r=r(OFt,"FlaxAlbertForMultipleChoice"),OFt.forEach(t),Y7r=r(Oxe," (ALBERT model)"),Oxe.forEach(t),K7r=i(Xo),W4=n(Xo,"LI",{});var Xxe=s(W4);I6e=n(Xxe,"STRONG",{});var XFt=s(I6e);Z7r=r(XFt,"bert"),XFt.forEach(t),e9r=r(Xxe," \u2014 "),$z=n(Xxe,"A",{href:!0});var VFt=s($z);o9r=r(VFt,"FlaxBertForMultipleChoice"),VFt.forEach(t),r9r=r(Xxe," (BERT model)"),Xxe.forEach(t),t9r=i(Xo),Q4=n(Xo,"LI",{});var Vxe=s(Q4);N6e=n(Vxe,"STRONG",{});var zFt=s(N6e);a9r=r(zFt,"big_bird"),zFt.forEach(t),n9r=r(Vxe," \u2014 "),Iz=n(Vxe,"A",{href:!0});var WFt=s(Iz);s9r=r(WFt,"FlaxBigBirdForMultipleChoice"),WFt.forEach(t),l9r=r(Vxe," (BigBird model)"),Vxe.forEach(t),i9r=i(Xo),H4=n(Xo,"LI",{});var zxe=s(H4);j6e=n(zxe,"STRONG",{});var QFt=s(j6e);d9r=r(QFt,"distilbert"),QFt.forEach(t),c9r=r(zxe," \u2014 "),Nz=n(zxe,"A",{href:!0});var HFt=s(Nz);f9r=r(HFt,"FlaxDistilBertForMultipleChoice"),HFt.forEach(t),m9r=r(zxe," (DistilBERT model)"),zxe.forEach(t),g9r=i(Xo),U4=n(Xo,"LI",{});var Wxe=s(U4);D6e=n(Wxe,"STRONG",{});var UFt=s(D6e);h9r=r(UFt,"electra"),UFt.forEach(t),p9r=r(Wxe," \u2014 "),jz=n(Wxe,"A",{href:!0});var JFt=s(jz);_9r=r(JFt,"FlaxElectraForMultipleChoice"),JFt.forEach(t),u9r=r(Wxe," (ELECTRA model)"),Wxe.forEach(t),b9r=i(Xo),J4=n(Xo,"LI",{});var Qxe=s(J4);q6e=n(Qxe,"STRONG",{});var YFt=s(q6e);v9r=r(YFt,"roberta"),YFt.forEach(t),T9r=r(Qxe," \u2014 "),Dz=n(Qxe,"A",{href:!0});var KFt=s(Dz);F9r=r(KFt,"FlaxRobertaForMultipleChoice"),KFt.forEach(t),C9r=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),M9r=i(Xo),Y4=n(Xo,"LI",{});var Hxe=s(Y4);G6e=n(Hxe,"STRONG",{});var ZFt=s(G6e);E9r=r(ZFt,"roformer"),ZFt.forEach(t),y9r=r(Hxe," \u2014 "),qz=n(Hxe,"A",{href:!0});var eCt=s(qz);w9r=r(eCt,"FlaxRoFormerForMultipleChoice"),eCt.forEach(t),A9r=r(Hxe," (RoFormer model)"),Hxe.forEach(t),L9r=i(Xo),K4=n(Xo,"LI",{});var Uxe=s(K4);O6e=n(Uxe,"STRONG",{});var oCt=s(O6e);B9r=r(oCt,"xlm-roberta"),oCt.forEach(t),x9r=r(Uxe," \u2014 "),Gz=n(Uxe,"A",{href:!0});var rCt=s(Gz);k9r=r(rCt,"FlaxXLMRobertaForMultipleChoice"),rCt.forEach(t),R9r=r(Uxe," (XLM-RoBERTa model)"),Uxe.forEach(t),Xo.forEach(t),S9r=i(Ia),X6e=n(Ia,"P",{});var tCt=s(X6e);P9r=r(tCt,"Examples:"),tCt.forEach(t),$9r=i(Ia),m(R8.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),URe=i(c),wf=n(c,"H2",{class:!0});var l$e=s(wf);Z4=n(l$e,"A",{id:!0,class:!0,href:!0});var aCt=s(Z4);V6e=n(aCt,"SPAN",{});var nCt=s(V6e);m(S8.$$.fragment,nCt),nCt.forEach(t),aCt.forEach(t),I9r=i(l$e),z6e=n(l$e,"SPAN",{});var sCt=s(z6e);N9r=r(sCt,"FlaxAutoModelForNextSentencePrediction"),sCt.forEach(t),l$e.forEach(t),JRe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(P8.$$.fragment,xi),j9r=i(xi),Af=n(xi,"P",{});var RQ=s(Af);D9r=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),W6e=n(RQ,"CODE",{});var lCt=s(W6e);q9r=r(lCt,"from_pretrained()"),lCt.forEach(t),G9r=r(RQ,"class method or the "),Q6e=n(RQ,"CODE",{});var iCt=s(Q6e);O9r=r(iCt,"from_config()"),iCt.forEach(t),X9r=r(RQ,`class
method.`),RQ.forEach(t),V9r=i(xi),$8=n(xi,"P",{});var i$e=s($8);z9r=r(i$e,"This class cannot be instantiated directly using "),H6e=n(i$e,"CODE",{});var dCt=s(H6e);W9r=r(dCt,"__init__()"),dCt.forEach(t),Q9r=r(i$e," (throws an error)."),i$e.forEach(t),H9r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(I8.$$.fragment,ki),U9r=i(ki),U6e=n(ki,"P",{});var cCt=s(U6e);J9r=r(cCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cCt.forEach(t),Y9r=i(ki),Lf=n(ki,"P",{});var SQ=s(Lf);K9r=r(SQ,`Note:
Loading a model from its configuration file does `),J6e=n(SQ,"STRONG",{});var fCt=s(J6e);Z9r=r(fCt,"not"),fCt.forEach(t),eBr=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y6e=n(SQ,"CODE",{});var mCt=s(Y6e);oBr=r(mCt,"from_pretrained()"),mCt.forEach(t),rBr=r(SQ,"to load the model weights."),SQ.forEach(t),tBr=i(ki),K6e=n(ki,"P",{});var gCt=s(K6e);aBr=r(gCt,"Examples:"),gCt.forEach(t),nBr=i(ki),m(N8.$$.fragment,ki),ki.forEach(t),sBr=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);m(j8.$$.fragment,Na),lBr=i(Na),Z6e=n(Na,"P",{});var hCt=s(Z6e);iBr=r(hCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hCt.forEach(t),dBr=i(Na),jn=n(Na,"P",{});var r3=s(jn);cBr=r(r3,"The model class to instantiate is selected based on the "),eTe=n(r3,"CODE",{});var pCt=s(eTe);fBr=r(pCt,"model_type"),pCt.forEach(t),mBr=r(r3,` property of the config object (either
passed as an argument or loaded from `),oTe=n(r3,"CODE",{});var _Ct=s(oTe);gBr=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),hBr=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(r3,"CODE",{});var uCt=s(rTe);pBr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),_Br=r(r3,":"),r3.forEach(t),uBr=i(Na),tTe=n(Na,"UL",{});var bCt=s(tTe);eE=n(bCt,"LI",{});var Jxe=s(eE);aTe=n(Jxe,"STRONG",{});var vCt=s(aTe);bBr=r(vCt,"bert"),vCt.forEach(t),vBr=r(Jxe," \u2014 "),Oz=n(Jxe,"A",{href:!0});var TCt=s(Oz);TBr=r(TCt,"FlaxBertForNextSentencePrediction"),TCt.forEach(t),FBr=r(Jxe," (BERT model)"),Jxe.forEach(t),bCt.forEach(t),CBr=i(Na),nTe=n(Na,"P",{});var FCt=s(nTe);MBr=r(FCt,"Examples:"),FCt.forEach(t),EBr=i(Na),m(D8.$$.fragment,Na),Na.forEach(t),xi.forEach(t),YRe=i(c),Bf=n(c,"H2",{class:!0});var d$e=s(Bf);oE=n(d$e,"A",{id:!0,class:!0,href:!0});var CCt=s(oE);sTe=n(CCt,"SPAN",{});var MCt=s(sTe);m(q8.$$.fragment,MCt),MCt.forEach(t),CCt.forEach(t),yBr=i(d$e),lTe=n(d$e,"SPAN",{});var ECt=s(lTe);wBr=r(ECt,"FlaxAutoModelForImageClassification"),ECt.forEach(t),d$e.forEach(t),KRe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(G8.$$.fragment,Ri),ABr=i(Ri),xf=n(Ri,"P",{});var PQ=s(xf);LBr=r(PQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iTe=n(PQ,"CODE",{});var yCt=s(iTe);BBr=r(yCt,"from_pretrained()"),yCt.forEach(t),xBr=r(PQ,"class method or the "),dTe=n(PQ,"CODE",{});var wCt=s(dTe);kBr=r(wCt,"from_config()"),wCt.forEach(t),RBr=r(PQ,`class
method.`),PQ.forEach(t),SBr=i(Ri),O8=n(Ri,"P",{});var c$e=s(O8);PBr=r(c$e,"This class cannot be instantiated directly using "),cTe=n(c$e,"CODE",{});var ACt=s(cTe);$Br=r(ACt,"__init__()"),ACt.forEach(t),IBr=r(c$e," (throws an error)."),c$e.forEach(t),NBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(X8.$$.fragment,Si),jBr=i(Si),fTe=n(Si,"P",{});var LCt=s(fTe);DBr=r(LCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LCt.forEach(t),qBr=i(Si),kf=n(Si,"P",{});var $Q=s(kf);GBr=r($Q,`Note:
Loading a model from its configuration file does `),mTe=n($Q,"STRONG",{});var BCt=s(mTe);OBr=r(BCt,"not"),BCt.forEach(t),XBr=r($Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),gTe=n($Q,"CODE",{});var xCt=s(gTe);VBr=r(xCt,"from_pretrained()"),xCt.forEach(t),zBr=r($Q,"to load the model weights."),$Q.forEach(t),WBr=i(Si),hTe=n(Si,"P",{});var kCt=s(hTe);QBr=r(kCt,"Examples:"),kCt.forEach(t),HBr=i(Si),m(V8.$$.fragment,Si),Si.forEach(t),UBr=i(Ri),No=n(Ri,"DIV",{class:!0});var ja=s(No);m(z8.$$.fragment,ja),JBr=i(ja),pTe=n(ja,"P",{});var RCt=s(pTe);YBr=r(RCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RCt.forEach(t),KBr=i(ja),Dn=n(ja,"P",{});var t3=s(Dn);ZBr=r(t3,"The model class to instantiate is selected based on the "),_Te=n(t3,"CODE",{});var SCt=s(_Te);exr=r(SCt,"model_type"),SCt.forEach(t),oxr=r(t3,` property of the config object (either
passed as an argument or loaded from `),uTe=n(t3,"CODE",{});var PCt=s(uTe);rxr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),txr=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(t3,"CODE",{});var $Ct=s(bTe);axr=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),nxr=r(t3,":"),t3.forEach(t),sxr=i(ja),W8=n(ja,"UL",{});var f$e=s(W8);rE=n(f$e,"LI",{});var Yxe=s(rE);vTe=n(Yxe,"STRONG",{});var ICt=s(vTe);lxr=r(ICt,"beit"),ICt.forEach(t),ixr=r(Yxe," \u2014 "),Xz=n(Yxe,"A",{href:!0});var NCt=s(Xz);dxr=r(NCt,"FlaxBeitForImageClassification"),NCt.forEach(t),cxr=r(Yxe," (BEiT model)"),Yxe.forEach(t),fxr=i(f$e),tE=n(f$e,"LI",{});var Kxe=s(tE);TTe=n(Kxe,"STRONG",{});var jCt=s(TTe);mxr=r(jCt,"vit"),jCt.forEach(t),gxr=r(Kxe," \u2014 "),Vz=n(Kxe,"A",{href:!0});var DCt=s(Vz);hxr=r(DCt,"FlaxViTForImageClassification"),DCt.forEach(t),pxr=r(Kxe," (ViT model)"),Kxe.forEach(t),f$e.forEach(t),_xr=i(ja),FTe=n(ja,"P",{});var qCt=s(FTe);uxr=r(qCt,"Examples:"),qCt.forEach(t),bxr=i(ja),m(Q8.$$.fragment,ja),ja.forEach(t),Ri.forEach(t),ZRe=i(c),Rf=n(c,"H2",{class:!0});var m$e=s(Rf);aE=n(m$e,"A",{id:!0,class:!0,href:!0});var GCt=s(aE);CTe=n(GCt,"SPAN",{});var OCt=s(CTe);m(H8.$$.fragment,OCt),OCt.forEach(t),GCt.forEach(t),vxr=i(m$e),MTe=n(m$e,"SPAN",{});var XCt=s(MTe);Txr=r(XCt,"FlaxAutoModelForVision2Seq"),XCt.forEach(t),m$e.forEach(t),eSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(U8.$$.fragment,Pi),Fxr=i(Pi),Sf=n(Pi,"P",{});var IQ=s(Sf);Cxr=r(IQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ETe=n(IQ,"CODE",{});var VCt=s(ETe);Mxr=r(VCt,"from_pretrained()"),VCt.forEach(t),Exr=r(IQ,"class method or the "),yTe=n(IQ,"CODE",{});var zCt=s(yTe);yxr=r(zCt,"from_config()"),zCt.forEach(t),wxr=r(IQ,`class
method.`),IQ.forEach(t),Axr=i(Pi),J8=n(Pi,"P",{});var g$e=s(J8);Lxr=r(g$e,"This class cannot be instantiated directly using "),wTe=n(g$e,"CODE",{});var WCt=s(wTe);Bxr=r(WCt,"__init__()"),WCt.forEach(t),xxr=r(g$e," (throws an error)."),g$e.forEach(t),kxr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);m(Y8.$$.fragment,$i),Rxr=i($i),ATe=n($i,"P",{});var QCt=s(ATe);Sxr=r(QCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QCt.forEach(t),Pxr=i($i),Pf=n($i,"P",{});var NQ=s(Pf);$xr=r(NQ,`Note:
Loading a model from its configuration file does `),LTe=n(NQ,"STRONG",{});var HCt=s(LTe);Ixr=r(HCt,"not"),HCt.forEach(t),Nxr=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BTe=n(NQ,"CODE",{});var UCt=s(BTe);jxr=r(UCt,"from_pretrained()"),UCt.forEach(t),Dxr=r(NQ,"to load the model weights."),NQ.forEach(t),qxr=i($i),xTe=n($i,"P",{});var JCt=s(xTe);Gxr=r(JCt,"Examples:"),JCt.forEach(t),Oxr=i($i),m(K8.$$.fragment,$i),$i.forEach(t),Xxr=i(Pi),jo=n(Pi,"DIV",{class:!0});var Da=s(jo);m(Z8.$$.fragment,Da),Vxr=i(Da),kTe=n(Da,"P",{});var YCt=s(kTe);zxr=r(YCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YCt.forEach(t),Wxr=i(Da),qn=n(Da,"P",{});var a3=s(qn);Qxr=r(a3,"The model class to instantiate is selected based on the "),RTe=n(a3,"CODE",{});var KCt=s(RTe);Hxr=r(KCt,"model_type"),KCt.forEach(t),Uxr=r(a3,` property of the config object (either
passed as an argument or loaded from `),STe=n(a3,"CODE",{});var ZCt=s(STe);Jxr=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),Yxr=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(a3,"CODE",{});var eMt=s(PTe);Kxr=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),Zxr=r(a3,":"),a3.forEach(t),ekr=i(Da),$Te=n(Da,"UL",{});var oMt=s($Te);nE=n(oMt,"LI",{});var Zxe=s(nE);ITe=n(Zxe,"STRONG",{});var rMt=s(ITe);okr=r(rMt,"vision-encoder-decoder"),rMt.forEach(t),rkr=r(Zxe," \u2014 "),zz=n(Zxe,"A",{href:!0});var tMt=s(zz);tkr=r(tMt,"FlaxVisionEncoderDecoderModel"),tMt.forEach(t),akr=r(Zxe," (Vision Encoder decoder model)"),Zxe.forEach(t),oMt.forEach(t),nkr=i(Da),NTe=n(Da,"P",{});var aMt=s(NTe);skr=r(aMt,"Examples:"),aMt.forEach(t),lkr=i(Da),m(e7.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(gMt)),d(pe,"id","auto-classes"),d(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pe,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(a9,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(n9,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig"),d(s9,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig"),d(l9,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig"),d(i9,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig"),d(d9,"href","/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(c9,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig"),d(f9,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(m9,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(g9,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(h9,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig"),d(p9,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig"),d(_9,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPConfig"),d(u9,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig"),d(b9,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig"),d(v9,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig"),d(T9,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(F9,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(C9,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig"),d(M9,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(E9,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTConfig"),d(y9,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrConfig"),d(w9,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig"),d(A9,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRConfig"),d(L9,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig"),d(B9,"href","/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(x9,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig"),d(k9,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig"),d(R9,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTConfig"),d(S9,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig"),d(P9,"href","/docs/transformers/pr_16255/en/model_doc/glpn#transformers.GLPNConfig"),d($9,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config"),d(I9,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(N9,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig"),d(j9,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig"),d(D9,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig"),d(q9,"href","/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(G9,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(O9,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(X9,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig"),d(V9,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig"),d(z9,"href","/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeConfig"),d(W9,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig"),d(Q9,"href","/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Config"),d(H9,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig"),d(U9,"href","/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(J9,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig"),d(Y9,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(K9,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Z9,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig"),d(eB,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config"),d(oB,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(rB,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(tB,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig"),d(aB,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig"),d(nB,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig"),d(sB,"href","/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(lB,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(iB,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(dB,"href","/docs/transformers/pr_16255/en/model_doc/rag#transformers.RagConfig"),d(cB,"href","/docs/transformers/pr_16255/en/model_doc/realm#transformers.RealmConfig"),d(fB,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig"),d(mB,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig"),d(gB,"href","/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetConfig"),d(hB,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertConfig"),d(pB,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig"),d(_B,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig"),d(uB,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerConfig"),d(bB,"href","/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWConfig"),d(vB,"href","/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDConfig"),d(TB,"href","/docs/transformers/pr_16255/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(FB,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(CB,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(MB,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterConfig"),d(EB,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(yB,"href","/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinConfig"),d(wB,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config"),d(AB,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig"),d(LB,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(BB,"href","/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRConfig"),d(xB,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(kB,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(RB,"href","/docs/transformers/pr_16255/en/model_doc/van#transformers.VanConfig"),d(SB,"href","/docs/transformers/pr_16255/en/model_doc/vilt#transformers.ViltConfig"),d(PB,"href","/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d($B,"href","/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(IB,"href","/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(NB,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig"),d(jB,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(DB,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(qB,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig"),d(GB,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig"),d(OB,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig"),d(XB,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(VB,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(zB,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(WB,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig"),d(QB,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Rg,"class","docstring"),d(Wo,"class","docstring"),d(Sg,"id","transformers.AutoTokenizer"),d(Sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(HB,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(UB,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertTokenizer"),d(JB,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(YB,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartTokenizer"),d(KB,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartTokenizerFast"),d(ZB,"href","/docs/transformers/pr_16255/en/model_doc/barthez#transformers.BarthezTokenizer"),d(ex,"href","/docs/transformers/pr_16255/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(ox,"href","/docs/transformers/pr_16255/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(rx,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertTokenizer"),d(tx,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertTokenizerFast"),d(ax,"href","/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(nx,"href","/docs/transformers/pr_16255/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(sx,"href","/docs/transformers/pr_16255/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(lx,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(ix,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(dx,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(cx,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(fx,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(mx,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(gx,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(hx,"href","/docs/transformers/pr_16255/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(px,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertTokenizer"),d(_x,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(ux,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineTokenizer"),d(bx,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPTokenizer"),d(vx,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Tx,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Fx,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Cx,"href","/docs/transformers/pr_16255/en/model_doc/cpm#transformers.CpmTokenizer"),d(Mx,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Ex,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaTokenizer"),d(yx,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(wx,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Ax,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Lx,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Bx,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(xx,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(kx,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraTokenizer"),d(Rx,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Sx,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Px,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetTokenizer"),d($x,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Ix,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Nx,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelTokenizer"),d(jx,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Dx,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(qx,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Gx,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Ox,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Xx,"href","/docs/transformers/pr_16255/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Vx,"href","/docs/transformers/pr_16255/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(zx,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Wx,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Qx,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Hx,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Ux,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Jx,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Yx,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Kx,"href","/docs/transformers/pr_16255/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Zx,"href","/docs/transformers/pr_16255/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(ek,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDTokenizer"),d(ok,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDTokenizerFast"),d(rk,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerTokenizer"),d(tk,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(ak,"href","/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeTokenizer"),d(nk,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(sk,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(lk,"href","/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(ik,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianTokenizer"),d(dk,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartTokenizer"),d(ck,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(fk,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(mk,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(gk,"href","/docs/transformers/pr_16255/en/model_doc/mluke#transformers.MLukeTokenizer"),d(hk,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(pk,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(_k,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(uk,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(bk,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.T5Tokenizer"),d(vk,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Tk,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Fk,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Mk,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(yk,"href","/docs/transformers/pr_16255/en/model_doc/phobert#transformers.PhobertTokenizer"),d(wk,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Ak,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Lk,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertTokenizer"),d(Bk,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertTokenizerFast"),d(xk,"href","/docs/transformers/pr_16255/en/model_doc/rag#transformers.RagTokenizer"),d(kk,"href","/docs/transformers/pr_16255/en/model_doc/realm#transformers.RealmTokenizer"),d(Rk,"href","/docs/transformers/pr_16255/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Pk,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d($k,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Ik,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(jk,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaTokenizer"),d(qk,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Ok,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Vk,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(zk,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Wk,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Hk,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.T5Tokenizer"),d(Jk,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Yk,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasTokenizer"),d(Kk,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Zk,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(eR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(oR,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMTokenizer"),d(rR,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(tR,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMTokenizer"),d(aR,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(nR,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(sR,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(lR,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(iR,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(dh,"class","docstring"),d(Qo,"class","docstring"),d(ch,"id","transformers.AutoFeatureExtractor"),d(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ch,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(dR,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(cR,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(fR,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(mR,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(gR,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(hR,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(pR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(_R,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(uR,"href","/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(bR,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(vR,"href","/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(FR,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring"),d(xh,"class","docstring"),d(Ho,"class","docstring"),d(kh,"id","transformers.AutoProcessor"),d(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(LR,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(BR,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPProcessor"),d(xR,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(kR,"href","/docs/transformers/pr_16255/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(RR,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(SR,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(PR,"href","/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRProcessor"),d($R,"href","/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(IR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ne,"class","docstring"),d(Gh,"class","docstring"),d(Uo,"class","docstring"),d(Oh,"id","transformers.AutoModel"),d(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d(NR,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertModel"),d(jR,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartModel"),d(DR,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitModel"),d(qR,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertModel"),d(GR,"href","/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(OR,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdModel"),d(XR,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(VR,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(zR,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(WR,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertModel"),d(QR,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineModel"),d(HR,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPModel"),d(UR,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertModel"),d(JR,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextModel"),d(YR,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLModel"),d(KR,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(ZR,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(eS,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaModel"),d(oS,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(rS,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTModel"),d(tS,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrModel"),d(aS,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertModel"),d(nS,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(sS,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraModel"),d(lS,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertModel"),d(iS,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetModel"),d(dS,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTModel"),d(cS,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelModel"),d(fS,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelBaseModel"),d(mS,"href","/docs/transformers/pr_16255/en/model_doc/glpn#transformers.GLPNModel"),d(gS,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Model"),d(hS,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(pS,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJModel"),d(_S,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertModel"),d(uS,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertModel"),d(bS,"href","/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(vS,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(TS,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(FS,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDModel"),d(CS,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerModel"),d(MS,"href","/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeModel"),d(ES,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertModel"),d(yS,"href","/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Model"),d(wS,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianModel"),d(AS,"href","/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerModel"),d(LS,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartModel"),d(BS,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(xS,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertModel"),d(kS,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetModel"),d(RS,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Model"),d(SS,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerModel"),d(PS,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d($S,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusModel"),d(IS,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverModel"),d(NS,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartModel"),d(jS,"href","/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerModel"),d(DS,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(qS,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertModel"),d(GS,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerModel"),d(OS,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertModel"),d(XS,"href","/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetModel"),d(VS,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertModel"),d(zS,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaModel"),d(WS,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerModel"),d(QS,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerModel"),d(HS,"href","/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWModel"),d(US,"href","/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDModel"),d(JS,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(YS,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterModel"),d(KS,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(ZS,"href","/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinModel"),d(eP,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Model"),d(oP,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasModel"),d(rP,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(tP,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechModel"),d(aP,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(nP,"href","/docs/transformers/pr_16255/en/model_doc/van#transformers.VanModel"),d(sP,"href","/docs/transformers/pr_16255/en/model_doc/vilt#transformers.ViltModel"),d(lP,"href","/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(iP,"href","/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertModel"),d(dP,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTModel"),d(cP,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(fP,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(mP,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMModel"),d(gP,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMModel"),d(hP,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMModel"),d(pP,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(_P,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(uP,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(bP,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetModel"),d(vP,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoModel"),d(je,"class","docstring"),d(Jo,"class","docstring"),d(y_,"id","transformers.AutoModelForPreTraining"),d(y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(TP,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForPreTraining"),d(FP,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(CP,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForPreTraining"),d(MP,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(EP,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(yP,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(wP,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(AP,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(LP,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(BP,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(xP,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForPreTraining"),d(kP,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(RP,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForPreTraining"),d(SP,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(PP,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForPreTraining"),d($P,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(IP,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(NP,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(jP,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(DP,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(qP,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(GP,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(OP,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(XP,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(VP,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertModel"),d(zP,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(WP,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(QP,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(HP,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(UP,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(JP,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(YP,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(KP,"href","/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(ZP,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(e$,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(o$,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(r$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(t$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(a$,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(mu,"id","transformers.AutoModelForCausalLM"),d(mu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(n$,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForCausalLM"),d(s$,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertLMHeadModel"),d(l$,"href","/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(i$,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(d$,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(c$,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(f$,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(m$,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(g$,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(h$,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(p$,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForCausalLM"),d(_$,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(u$,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(b$,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(v$,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianForCausalLM"),d(T$,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForCausalLM"),d(F$,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(C$,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(M$,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(E$,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(y$,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(w$,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(A$,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(L$,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(B$,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(x$,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(k$,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(R$,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(S$,"href","/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(P$,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMForCausalLM"),d($$,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(I$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(N$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(j$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(D$,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(qe,"class","docstring"),d(Ko,"class","docstring"),d(Uu,"id","transformers.AutoModelForMaskedLM"),d(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uu,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(Qr,"class","docstring"),d(q$,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(G$,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(O$,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForMaskedLM"),d(X$,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(V$,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(z$,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(W$,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(H$,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(U$,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(J$,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(K$,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(eI,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(oI,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(rI,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(tI,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(aI,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(nI,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(sI,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(lI,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(iI,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(dI,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(cI,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(fI,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(mI,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(gI,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(hI,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(pI,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(_I,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(uI,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(bI,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(vI,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring"),d(Zo,"class","docstring"),d(R5,"id","transformers.AutoModelForSeq2SeqLM"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(TI,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(FI,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(CI,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(MI,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(EI,"href","/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(yI,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(wI,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianMTModel"),d(BI,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d($I,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring"),d(er,"class","docstring"),d(J5,"id","transformers.AutoModelForSequenceClassification"),d(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J5,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(II,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(NI,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForSequenceClassification"),d(jI,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForSequenceClassification"),d(DI,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(qI,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(GI,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(OI,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(XI,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(VI,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Xe,"class","docstring"),d(or,"class","docstring"),d(V2,"id","transformers.AutoModelForMultipleChoice"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(Jr,"class","docstring"),d(LN,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d($N,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(T1,"id","transformers.AutoModelForNextSentencePrediction"),d(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T1,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(rj,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(tj,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(aj,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(nj,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(sj,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring"),d(tr,"class","docstring"),d(A1,"id","transformers.AutoModelForTokenClassification"),d(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A1,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(lj,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(ij,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForTokenClassification"),d(dj,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(cj,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(fj,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForTokenClassification"),d(mj,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(gj,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(hj,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(pj,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(_j,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(bj,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(yj,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(wj,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(xj,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(kj,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d($j,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(jj,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(We,"class","docstring"),d(ar,"class","docstring"),d(ib,"id","transformers.AutoModelForQuestionAnswering"),d(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ib,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(qj,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(eD,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(FD,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(ED,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(Ub,"id","transformers.AutoModelForTableQuestionAnswering"),d(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ub,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(yD,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring"),d(sr,"class","docstring"),d(Kb,"id","transformers.AutoModelForImageClassification"),d(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kb,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(wD,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitForImageClassification"),d(AD,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(LD,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForImageClassification"),d(BD,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(xD,"href","/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(kD,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(RD,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(SD,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(PD,"href","/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d($D,"href","/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(ID,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(ND,"href","/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinForImageClassification"),d(jD,"href","/docs/transformers/pr_16255/en/model_doc/van#transformers.VanForImageClassification"),d(DD,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring"),d(lr,"class","docstring"),d(dv,"id","transformers.AutoModelForVision2Seq"),d(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dv,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(qD,"href","/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring"),d(ir,"class","docstring"),d(mv,"id","transformers.AutoModelForAudioClassification"),d(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mv,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d(GD,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(OD,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(XD,"href","/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(VD,"href","/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(zD,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(WD,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(QD,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(HD,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring"),d(dr,"class","docstring"),d(Cv,"id","transformers.AutoModelForAudioFrameClassification"),d(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cv,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(at,"class","docstring"),d(UD,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(JD,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(YD,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(KD,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring"),d(cr,"class","docstring"),d(Lv,"id","transformers.AutoModelForCTC"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(nt,"class","docstring"),d(ZD,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(eq,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertForCTC"),d(oq,"href","/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWForCTC"),d(rq,"href","/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDForCTC"),d(tq,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(aq,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(nq,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(sq,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(jv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(st,"class","docstring"),d(lq,"href","/docs/transformers/pr_16255/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(iq,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring"),d(mr,"class","docstring"),d(Ov,"id","transformers.AutoModelForAudioXVector"),d(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ov,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(dq,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(cq,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(fq,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(mq,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring"),d(gr,"class","docstring"),d(Hv,"id","transformers.AutoModelForMaskedImageModeling"),d(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(gq,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(hq,"href","/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(pq,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring"),d(hr,"class","docstring"),d(Zv,"id","transformers.AutoModelForObjectDetection"),d(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zv,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(_q,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring"),d(pr,"class","docstring"),d(r6,"id","transformers.AutoModelForImageSegmentation"),d(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r6,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(uq,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(n6,"id","transformers.AutoModelForSemanticSegmentation"),d(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n6,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(ft,"class","docstring"),d(bq,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(vq,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring"),d(ur,"class","docstring"),d(d6,"id","transformers.AutoModelForInstanceSegmentation"),d(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d6,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(Tq,"href","/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring"),d(br,"class","docstring"),d(m6,"id","transformers.TFAutoModel"),d(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m6,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(Fq,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertModel"),d(Cq,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartModel"),d(Mq,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertModel"),d(Eq,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(yq,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(wq,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertModel"),d(Aq,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.TFCLIPModel"),d(Lq,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertModel"),d(Bq,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.TFConvNextModel"),d(xq,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLModel"),d(kq,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaModel"),d(Rq,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Sq,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Pq,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d($q,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraModel"),d(Iq,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Nq,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelModel"),d(jq,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Dq,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2Model"),d(qq,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.TFHubertModel"),d(Gq,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Oq,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.TFLEDModel"),d(Xq,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerModel"),d(Vq,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.TFLxmertModel"),d(zq,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.TFMarianModel"),d(Wq,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.TFMBartModel"),d(Qq,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Hq,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Uq,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.TFMT5Model"),d(Jq,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Yq,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Kq,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertModel"),d(Zq,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaModel"),d(eG,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerModel"),d(oG,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(rG,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5Model"),d(tG,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasModel"),d(aG,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(nG,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.TFViTModel"),d(sG,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(lG,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(iG,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMModel"),d(dG,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(cG,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(oT,"id","transformers.TFAutoModelForPreTraining"),d(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oT,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(fG,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(mG,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(gG,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForPreTraining"),d(hG,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(pG,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(_G,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(uG,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(bG,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(vG,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(TG,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(FG,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(CG,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(MG,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(EG,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(yG,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(wG,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(AG,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(LG,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(BG,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(xG,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(kG,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(RG,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(SG,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(yT,"id","transformers.TFAutoModelForCausalLM"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(PG,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertLMHeadModel"),d($G,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(IG,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(NG,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(jG,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(DG,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(qG,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(GG,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(OG,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(XG,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(VG,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(NT,"id","transformers.TFAutoModelForImageClassification"),d(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NT,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(zG,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(WG,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(qT,"id","transformers.TFAutoModelForMaskedLM"),d(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qT,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(QG,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(HG,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(UG,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(JG,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(YG,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(KG,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(ZG,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eO,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(oO,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rO,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(tO,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aO,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(nO,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(sO,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lO,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(iO,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dO,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(cO,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fO,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(mO,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(lF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(gO,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(hO,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(pO,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(_O,"href","/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(uO,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(bO,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.TFMarianMTModel"),d(vO,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(TO,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(FO,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(CO,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(bF,"id","transformers.TFAutoModelForSequenceClassification"),d(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bF,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(MO,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(EO,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(yO,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(wO,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(AO,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(LO,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(BO,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(xO,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(kO,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(RO,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(SO,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(PO,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d($O,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(IO,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(NO,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(jO,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(DO,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(qO,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(GO,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(OO,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(XO,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(VO,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(zO,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(WO,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(QO,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(VF,"id","transformers.TFAutoModelForMultipleChoice"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(HO,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(UO,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(JO,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(YO,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(KO,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(ZO,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(eX,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(oX,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(rX,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(tX,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(aX,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(nX,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(sX,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(lX,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(iX,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(dX,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(cX,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(iC,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Ft,"class","docstring"),d(fX,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(cC,"id","transformers.TFAutoModelForTokenClassification"),d(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cC,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(mX,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(gX,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(hX,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(pX,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(_X,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(uX,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(bX,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(vX,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(TX,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(FX,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(CX,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(MX,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(EX,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(yX,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(wX,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(AX,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(LX,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(BX,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(xX,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(kX,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(kC,"id","transformers.TFAutoModelForQuestionAnswering"),d(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(RX,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(SX,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(PX,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d($X,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(IX,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(NX,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(jX,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(DX,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(GX,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(OX,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(XX,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(zX,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(UX,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(YC,"id","transformers.TFAutoModelForVision2Seq"),d(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YC,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(YX,"href","/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(ZC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(KX,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(oM,"id","transformers.FlaxAutoModel"),d(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(ZX,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertModel"),d(eV,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartModel"),d(oV,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.FlaxBeitModel"),d(rV,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertModel"),d(tV,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(aV,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(nV,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(sV,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.FlaxCLIPModel"),d(lV,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(iV,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraModel"),d(dV,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(cV,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(fV,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(mV,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.FlaxMarianModel"),d(gV,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartModel"),d(hV,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5Model"),d(pV,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(_V,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(uV,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(bV,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5Model"),d(vV,"href","/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(TV,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.FlaxViTModel"),d(FV,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(CV,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(MV,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(AM,"id","transformers.FlaxAutoModelForCausalLM"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(EV,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(yV,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(wV,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(AV,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(LV,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(SM,"id","transformers.FlaxAutoModelForPreTraining"),d(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SM,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(BV,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(xV,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(kV,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(RV,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(SV,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(PV,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d($V,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(IV,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(NV,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(jV,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(DV,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(qV,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(WM,"id","transformers.FlaxAutoModelForMaskedLM"),d(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(GV,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(OV,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(XV,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(VV,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(zV,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(WV,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(QV,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(HV,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(UV,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(JV,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(t4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(YV,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(KV,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(ZV,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(ez,"href","/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(oz,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(rz,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(tz,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(az,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(nz,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(g4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(sz,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(E4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(_z,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(uz,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(bz,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(vz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Tz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Fz,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Cz,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Mz,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Ez,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(yz,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(jr,"class","docstring"),d($4,"id","transformers.FlaxAutoModelForTokenClassification"),d($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(wz,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Az,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(xz,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(kz,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(V4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(Pz,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d($z,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(Z4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(Oz,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(oE,"id","transformers.FlaxAutoModelForImageClassification"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(Xz,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Vz,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(aE,"id","transformers.FlaxAutoModelForVision2Seq"),d(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(Nt,"class","docstring"),d(zz,"href","/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,J),b(c,$e,u),b(c,de,u),e(de,pe),e(pe,io),g(fe,io,null),e(de,Me),e(de,Vo),e(Vo,Ni),b(c,If,u),b(c,fa,u),e(fa,ji),e(fa,Di),e(Di,n3),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,qi),e(co,Gn),e(Gn,s3),e(co,On),e(co,Xn),e(Xn,l3),e(co,Gi),e(co,Vn),e(Vn,i3),e(co,Oi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,K7),e(_e,Xi),e(Xi,Z7),e(_e,e9),b(c,zo,u),b(c,Ga,u),e(Ga,o9),e(Ga,Df),e(Df,r9),e(Ga,h$e),b(c,eke,u),b(c,Vi,u),e(Vi,qf),e(qf,jQ),g(d3,jQ,null),e(Vi,p$e),e(Vi,DQ),e(DQ,_$e),b(c,oke,u),b(c,zn,u),e(zn,u$e),e(zn,qQ),e(qQ,b$e),e(zn,v$e),e(zn,GQ),e(GQ,T$e),e(zn,F$e),b(c,rke,u),g(c3,c,u),b(c,tke,u),b(c,t9,u),e(t9,C$e),b(c,ake,u),g(Gf,c,u),b(c,nke,u),b(c,zi,u),e(zi,Of),e(Of,OQ),g(f3,OQ,null),e(zi,M$e),e(zi,XQ),e(XQ,E$e),b(c,ske,u),b(c,Wo,u),g(m3,Wo,null),e(Wo,y$e),e(Wo,g3),e(g3,w$e),e(g3,a9),e(a9,A$e),e(g3,L$e),e(Wo,B$e),e(Wo,h3),e(h3,x$e),e(h3,VQ),e(VQ,k$e),e(h3,R$e),e(Wo,S$e),e(Wo,mo),g(p3,mo,null),e(mo,P$e),e(mo,zQ),e(zQ,$$e),e(mo,I$e),e(mo,Wi),e(Wi,N$e),e(Wi,WQ),e(WQ,j$e),e(Wi,D$e),e(Wi,QQ),e(QQ,q$e),e(Wi,G$e),e(mo,O$e),e(mo,v),e(v,Xf),e(Xf,HQ),e(HQ,X$e),e(Xf,V$e),e(Xf,n9),e(n9,z$e),e(Xf,W$e),e(v,Q$e),e(v,Vf),e(Vf,UQ),e(UQ,H$e),e(Vf,U$e),e(Vf,s9),e(s9,J$e),e(Vf,Y$e),e(v,K$e),e(v,zf),e(zf,JQ),e(JQ,Z$e),e(zf,eIe),e(zf,l9),e(l9,oIe),e(zf,rIe),e(v,tIe),e(v,Wf),e(Wf,YQ),e(YQ,aIe),e(Wf,nIe),e(Wf,i9),e(i9,sIe),e(Wf,lIe),e(v,iIe),e(v,Qf),e(Qf,KQ),e(KQ,dIe),e(Qf,cIe),e(Qf,d9),e(d9,fIe),e(Qf,mIe),e(v,gIe),e(v,Hf),e(Hf,ZQ),e(ZQ,hIe),e(Hf,pIe),e(Hf,c9),e(c9,_Ie),e(Hf,uIe),e(v,bIe),e(v,Uf),e(Uf,eH),e(eH,vIe),e(Uf,TIe),e(Uf,f9),e(f9,FIe),e(Uf,CIe),e(v,MIe),e(v,Jf),e(Jf,oH),e(oH,EIe),e(Jf,yIe),e(Jf,m9),e(m9,wIe),e(Jf,AIe),e(v,LIe),e(v,Yf),e(Yf,rH),e(rH,BIe),e(Yf,xIe),e(Yf,g9),e(g9,kIe),e(Yf,RIe),e(v,SIe),e(v,Kf),e(Kf,tH),e(tH,PIe),e(Kf,$Ie),e(Kf,h9),e(h9,IIe),e(Kf,NIe),e(v,jIe),e(v,Zf),e(Zf,aH),e(aH,DIe),e(Zf,qIe),e(Zf,p9),e(p9,GIe),e(Zf,OIe),e(v,XIe),e(v,em),e(em,nH),e(nH,VIe),e(em,zIe),e(em,_9),e(_9,WIe),e(em,QIe),e(v,HIe),e(v,om),e(om,sH),e(sH,UIe),e(om,JIe),e(om,u9),e(u9,YIe),e(om,KIe),e(v,ZIe),e(v,rm),e(rm,lH),e(lH,eNe),e(rm,oNe),e(rm,b9),e(b9,rNe),e(rm,tNe),e(v,aNe),e(v,tm),e(tm,iH),e(iH,nNe),e(tm,sNe),e(tm,v9),e(v9,lNe),e(tm,iNe),e(v,dNe),e(v,am),e(am,dH),e(dH,cNe),e(am,fNe),e(am,T9),e(T9,mNe),e(am,gNe),e(v,hNe),e(v,nm),e(nm,cH),e(cH,pNe),e(nm,_Ne),e(nm,F9),e(F9,uNe),e(nm,bNe),e(v,vNe),e(v,sm),e(sm,fH),e(fH,TNe),e(sm,FNe),e(sm,C9),e(C9,CNe),e(sm,MNe),e(v,ENe),e(v,lm),e(lm,mH),e(mH,yNe),e(lm,wNe),e(lm,M9),e(M9,ANe),e(lm,LNe),e(v,BNe),e(v,im),e(im,gH),e(gH,xNe),e(im,kNe),e(im,E9),e(E9,RNe),e(im,SNe),e(v,PNe),e(v,dm),e(dm,hH),e(hH,$Ne),e(dm,INe),e(dm,y9),e(y9,NNe),e(dm,jNe),e(v,DNe),e(v,cm),e(cm,pH),e(pH,qNe),e(cm,GNe),e(cm,w9),e(w9,ONe),e(cm,XNe),e(v,VNe),e(v,fm),e(fm,_H),e(_H,zNe),e(fm,WNe),e(fm,A9),e(A9,QNe),e(fm,HNe),e(v,UNe),e(v,mm),e(mm,uH),e(uH,JNe),e(mm,YNe),e(mm,L9),e(L9,KNe),e(mm,ZNe),e(v,eje),e(v,gm),e(gm,bH),e(bH,oje),e(gm,rje),e(gm,B9),e(B9,tje),e(gm,aje),e(v,nje),e(v,hm),e(hm,vH),e(vH,sje),e(hm,lje),e(hm,x9),e(x9,ije),e(hm,dje),e(v,cje),e(v,pm),e(pm,TH),e(TH,fje),e(pm,mje),e(pm,k9),e(k9,gje),e(pm,hje),e(v,pje),e(v,_m),e(_m,FH),e(FH,_je),e(_m,uje),e(_m,R9),e(R9,bje),e(_m,vje),e(v,Tje),e(v,um),e(um,CH),e(CH,Fje),e(um,Cje),e(um,S9),e(S9,Mje),e(um,Eje),e(v,yje),e(v,bm),e(bm,MH),e(MH,wje),e(bm,Aje),e(bm,P9),e(P9,Lje),e(bm,Bje),e(v,xje),e(v,vm),e(vm,EH),e(EH,kje),e(vm,Rje),e(vm,$9),e($9,Sje),e(vm,Pje),e(v,$je),e(v,Tm),e(Tm,yH),e(yH,Ije),e(Tm,Nje),e(Tm,I9),e(I9,jje),e(Tm,Dje),e(v,qje),e(v,Fm),e(Fm,wH),e(wH,Gje),e(Fm,Oje),e(Fm,N9),e(N9,Xje),e(Fm,Vje),e(v,zje),e(v,Cm),e(Cm,AH),e(AH,Wje),e(Cm,Qje),e(Cm,j9),e(j9,Hje),e(Cm,Uje),e(v,Jje),e(v,Mm),e(Mm,LH),e(LH,Yje),e(Mm,Kje),e(Mm,D9),e(D9,Zje),e(Mm,eDe),e(v,oDe),e(v,Em),e(Em,BH),e(BH,rDe),e(Em,tDe),e(Em,q9),e(q9,aDe),e(Em,nDe),e(v,sDe),e(v,ym),e(ym,xH),e(xH,lDe),e(ym,iDe),e(ym,G9),e(G9,dDe),e(ym,cDe),e(v,fDe),e(v,wm),e(wm,kH),e(kH,mDe),e(wm,gDe),e(wm,O9),e(O9,hDe),e(wm,pDe),e(v,_De),e(v,Am),e(Am,RH),e(RH,uDe),e(Am,bDe),e(Am,X9),e(X9,vDe),e(Am,TDe),e(v,FDe),e(v,Lm),e(Lm,SH),e(SH,CDe),e(Lm,MDe),e(Lm,V9),e(V9,EDe),e(Lm,yDe),e(v,wDe),e(v,Bm),e(Bm,PH),e(PH,ADe),e(Bm,LDe),e(Bm,z9),e(z9,BDe),e(Bm,xDe),e(v,kDe),e(v,xm),e(xm,$H),e($H,RDe),e(xm,SDe),e(xm,W9),e(W9,PDe),e(xm,$De),e(v,IDe),e(v,km),e(km,IH),e(IH,NDe),e(km,jDe),e(km,Q9),e(Q9,DDe),e(km,qDe),e(v,GDe),e(v,Rm),e(Rm,NH),e(NH,ODe),e(Rm,XDe),e(Rm,H9),e(H9,VDe),e(Rm,zDe),e(v,WDe),e(v,Sm),e(Sm,jH),e(jH,QDe),e(Sm,HDe),e(Sm,U9),e(U9,UDe),e(Sm,JDe),e(v,YDe),e(v,Pm),e(Pm,DH),e(DH,KDe),e(Pm,ZDe),e(Pm,J9),e(J9,eqe),e(Pm,oqe),e(v,rqe),e(v,$m),e($m,qH),e(qH,tqe),e($m,aqe),e($m,Y9),e(Y9,nqe),e($m,sqe),e(v,lqe),e(v,Im),e(Im,GH),e(GH,iqe),e(Im,dqe),e(Im,K9),e(K9,cqe),e(Im,fqe),e(v,mqe),e(v,Nm),e(Nm,OH),e(OH,gqe),e(Nm,hqe),e(Nm,Z9),e(Z9,pqe),e(Nm,_qe),e(v,uqe),e(v,jm),e(jm,XH),e(XH,bqe),e(jm,vqe),e(jm,eB),e(eB,Tqe),e(jm,Fqe),e(v,Cqe),e(v,Dm),e(Dm,VH),e(VH,Mqe),e(Dm,Eqe),e(Dm,oB),e(oB,yqe),e(Dm,wqe),e(v,Aqe),e(v,qm),e(qm,zH),e(zH,Lqe),e(qm,Bqe),e(qm,rB),e(rB,xqe),e(qm,kqe),e(v,Rqe),e(v,Gm),e(Gm,WH),e(WH,Sqe),e(Gm,Pqe),e(Gm,tB),e(tB,$qe),e(Gm,Iqe),e(v,Nqe),e(v,Om),e(Om,QH),e(QH,jqe),e(Om,Dqe),e(Om,aB),e(aB,qqe),e(Om,Gqe),e(v,Oqe),e(v,Xm),e(Xm,HH),e(HH,Xqe),e(Xm,Vqe),e(Xm,nB),e(nB,zqe),e(Xm,Wqe),e(v,Qqe),e(v,Vm),e(Vm,UH),e(UH,Hqe),e(Vm,Uqe),e(Vm,sB),e(sB,Jqe),e(Vm,Yqe),e(v,Kqe),e(v,zm),e(zm,JH),e(JH,Zqe),e(zm,eGe),e(zm,lB),e(lB,oGe),e(zm,rGe),e(v,tGe),e(v,Wm),e(Wm,YH),e(YH,aGe),e(Wm,nGe),e(Wm,iB),e(iB,sGe),e(Wm,lGe),e(v,iGe),e(v,Qm),e(Qm,KH),e(KH,dGe),e(Qm,cGe),e(Qm,dB),e(dB,fGe),e(Qm,mGe),e(v,gGe),e(v,Hm),e(Hm,ZH),e(ZH,hGe),e(Hm,pGe),e(Hm,cB),e(cB,_Ge),e(Hm,uGe),e(v,bGe),e(v,Um),e(Um,eU),e(eU,vGe),e(Um,TGe),e(Um,fB),e(fB,FGe),e(Um,CGe),e(v,MGe),e(v,Jm),e(Jm,oU),e(oU,EGe),e(Jm,yGe),e(Jm,mB),e(mB,wGe),e(Jm,AGe),e(v,LGe),e(v,Ym),e(Ym,rU),e(rU,BGe),e(Ym,xGe),e(Ym,gB),e(gB,kGe),e(Ym,RGe),e(v,SGe),e(v,Km),e(Km,tU),e(tU,PGe),e(Km,$Ge),e(Km,hB),e(hB,IGe),e(Km,NGe),e(v,jGe),e(v,Zm),e(Zm,aU),e(aU,DGe),e(Zm,qGe),e(Zm,pB),e(pB,GGe),e(Zm,OGe),e(v,XGe),e(v,eg),e(eg,nU),e(nU,VGe),e(eg,zGe),e(eg,_B),e(_B,WGe),e(eg,QGe),e(v,HGe),e(v,og),e(og,sU),e(sU,UGe),e(og,JGe),e(og,uB),e(uB,YGe),e(og,KGe),e(v,ZGe),e(v,rg),e(rg,lU),e(lU,eOe),e(rg,oOe),e(rg,bB),e(bB,rOe),e(rg,tOe),e(v,aOe),e(v,tg),e(tg,iU),e(iU,nOe),e(tg,sOe),e(tg,vB),e(vB,lOe),e(tg,iOe),e(v,dOe),e(v,ag),e(ag,dU),e(dU,cOe),e(ag,fOe),e(ag,TB),e(TB,mOe),e(ag,gOe),e(v,hOe),e(v,ng),e(ng,cU),e(cU,pOe),e(ng,_Oe),e(ng,FB),e(FB,uOe),e(ng,bOe),e(v,vOe),e(v,sg),e(sg,fU),e(fU,TOe),e(sg,FOe),e(sg,CB),e(CB,COe),e(sg,MOe),e(v,EOe),e(v,lg),e(lg,mU),e(mU,yOe),e(lg,wOe),e(lg,MB),e(MB,AOe),e(lg,LOe),e(v,BOe),e(v,ig),e(ig,gU),e(gU,xOe),e(ig,kOe),e(ig,EB),e(EB,ROe),e(ig,SOe),e(v,POe),e(v,dg),e(dg,hU),e(hU,$Oe),e(dg,IOe),e(dg,yB),e(yB,NOe),e(dg,jOe),e(v,DOe),e(v,cg),e(cg,pU),e(pU,qOe),e(cg,GOe),e(cg,wB),e(wB,OOe),e(cg,XOe),e(v,VOe),e(v,fg),e(fg,_U),e(_U,zOe),e(fg,WOe),e(fg,AB),e(AB,QOe),e(fg,HOe),e(v,UOe),e(v,mg),e(mg,uU),e(uU,JOe),e(mg,YOe),e(mg,LB),e(LB,KOe),e(mg,ZOe),e(v,eXe),e(v,gg),e(gg,bU),e(bU,oXe),e(gg,rXe),e(gg,BB),e(BB,tXe),e(gg,aXe),e(v,nXe),e(v,hg),e(hg,vU),e(vU,sXe),e(hg,lXe),e(hg,xB),e(xB,iXe),e(hg,dXe),e(v,cXe),e(v,pg),e(pg,TU),e(TU,fXe),e(pg,mXe),e(pg,kB),e(kB,gXe),e(pg,hXe),e(v,pXe),e(v,_g),e(_g,FU),e(FU,_Xe),e(_g,uXe),e(_g,RB),e(RB,bXe),e(_g,vXe),e(v,TXe),e(v,ug),e(ug,CU),e(CU,FXe),e(ug,CXe),e(ug,SB),e(SB,MXe),e(ug,EXe),e(v,yXe),e(v,bg),e(bg,MU),e(MU,wXe),e(bg,AXe),e(bg,PB),e(PB,LXe),e(bg,BXe),e(v,xXe),e(v,vg),e(vg,EU),e(EU,kXe),e(vg,RXe),e(vg,$B),e($B,SXe),e(vg,PXe),e(v,$Xe),e(v,Tg),e(Tg,yU),e(yU,IXe),e(Tg,NXe),e(Tg,IB),e(IB,jXe),e(Tg,DXe),e(v,qXe),e(v,Fg),e(Fg,wU),e(wU,GXe),e(Fg,OXe),e(Fg,NB),e(NB,XXe),e(Fg,VXe),e(v,zXe),e(v,Cg),e(Cg,AU),e(AU,WXe),e(Cg,QXe),e(Cg,jB),e(jB,HXe),e(Cg,UXe),e(v,JXe),e(v,Mg),e(Mg,LU),e(LU,YXe),e(Mg,KXe),e(Mg,DB),e(DB,ZXe),e(Mg,eVe),e(v,oVe),e(v,Eg),e(Eg,BU),e(BU,rVe),e(Eg,tVe),e(Eg,qB),e(qB,aVe),e(Eg,nVe),e(v,sVe),e(v,yg),e(yg,xU),e(xU,lVe),e(yg,iVe),e(yg,GB),e(GB,dVe),e(yg,cVe),e(v,fVe),e(v,wg),e(wg,kU),e(kU,mVe),e(wg,gVe),e(wg,OB),e(OB,hVe),e(wg,pVe),e(v,_Ve),e(v,Ag),e(Ag,RU),e(RU,uVe),e(Ag,bVe),e(Ag,XB),e(XB,vVe),e(Ag,TVe),e(v,FVe),e(v,Lg),e(Lg,SU),e(SU,CVe),e(Lg,MVe),e(Lg,VB),e(VB,EVe),e(Lg,yVe),e(v,wVe),e(v,Bg),e(Bg,PU),e(PU,AVe),e(Bg,LVe),e(Bg,zB),e(zB,BVe),e(Bg,xVe),e(v,kVe),e(v,xg),e(xg,$U),e($U,RVe),e(xg,SVe),e(xg,WB),e(WB,PVe),e(xg,$Ve),e(v,IVe),e(v,kg),e(kg,IU),e(IU,NVe),e(kg,jVe),e(kg,QB),e(QB,DVe),e(kg,qVe),e(mo,GVe),e(mo,NU),e(NU,OVe),e(mo,XVe),g(_3,mo,null),e(Wo,VVe),e(Wo,Rg),g(u3,Rg,null),e(Rg,zVe),e(Rg,jU),e(jU,WVe),b(c,lke,u),b(c,Qi,u),e(Qi,Sg),e(Sg,DU),g(b3,DU,null),e(Qi,QVe),e(Qi,qU),e(qU,HVe),b(c,ike,u),b(c,Qo,u),g(v3,Qo,null),e(Qo,UVe),e(Qo,T3),e(T3,JVe),e(T3,HB),e(HB,YVe),e(T3,KVe),e(Qo,ZVe),e(Qo,F3),e(F3,eze),e(F3,GU),e(GU,oze),e(F3,rze),e(Qo,tze),e(Qo,go),g(C3,go,null),e(go,aze),e(go,OU),e(OU,nze),e(go,sze),e(go,Oa),e(Oa,lze),e(Oa,XU),e(XU,ize),e(Oa,dze),e(Oa,VU),e(VU,cze),e(Oa,fze),e(Oa,zU),e(zU,mze),e(Oa,gze),e(go,hze),e(go,E),e(E,Wn),e(Wn,WU),e(WU,pze),e(Wn,_ze),e(Wn,UB),e(UB,uze),e(Wn,bze),e(Wn,JB),e(JB,vze),e(Wn,Tze),e(E,Fze),e(E,Qn),e(Qn,QU),e(QU,Cze),e(Qn,Mze),e(Qn,YB),e(YB,Eze),e(Qn,yze),e(Qn,KB),e(KB,wze),e(Qn,Aze),e(E,Lze),e(E,Hn),e(Hn,HU),e(HU,Bze),e(Hn,xze),e(Hn,ZB),e(ZB,kze),e(Hn,Rze),e(Hn,ex),e(ex,Sze),e(Hn,Pze),e(E,$ze),e(E,Pg),e(Pg,UU),e(UU,Ize),e(Pg,Nze),e(Pg,ox),e(ox,jze),e(Pg,Dze),e(E,qze),e(E,Un),e(Un,JU),e(JU,Gze),e(Un,Oze),e(Un,rx),e(rx,Xze),e(Un,Vze),e(Un,tx),e(tx,zze),e(Un,Wze),e(E,Qze),e(E,$g),e($g,YU),e(YU,Hze),e($g,Uze),e($g,ax),e(ax,Jze),e($g,Yze),e(E,Kze),e(E,Ig),e(Ig,KU),e(KU,Zze),e(Ig,eWe),e(Ig,nx),e(nx,oWe),e(Ig,rWe),e(E,tWe),e(E,Ng),e(Ng,ZU),e(ZU,aWe),e(Ng,nWe),e(Ng,sx),e(sx,sWe),e(Ng,lWe),e(E,iWe),e(E,Jn),e(Jn,eJ),e(eJ,dWe),e(Jn,cWe),e(Jn,lx),e(lx,fWe),e(Jn,mWe),e(Jn,ix),e(ix,gWe),e(Jn,hWe),e(E,pWe),e(E,Yn),e(Yn,oJ),e(oJ,_We),e(Yn,uWe),e(Yn,dx),e(dx,bWe),e(Yn,vWe),e(Yn,cx),e(cx,TWe),e(Yn,FWe),e(E,CWe),e(E,Kn),e(Kn,rJ),e(rJ,MWe),e(Kn,EWe),e(Kn,fx),e(fx,yWe),e(Kn,wWe),e(Kn,mx),e(mx,AWe),e(Kn,LWe),e(E,BWe),e(E,jg),e(jg,tJ),e(tJ,xWe),e(jg,kWe),e(jg,gx),e(gx,RWe),e(jg,SWe),e(E,PWe),e(E,Dg),e(Dg,aJ),e(aJ,$We),e(Dg,IWe),e(Dg,hx),e(hx,NWe),e(Dg,jWe),e(E,DWe),e(E,Zn),e(Zn,nJ),e(nJ,qWe),e(Zn,GWe),e(Zn,px),e(px,OWe),e(Zn,XWe),e(Zn,_x),e(_x,VWe),e(Zn,zWe),e(E,WWe),e(E,qg),e(qg,sJ),e(sJ,QWe),e(qg,HWe),e(qg,ux),e(ux,UWe),e(qg,JWe),e(E,YWe),e(E,es),e(es,lJ),e(lJ,KWe),e(es,ZWe),e(es,bx),e(bx,eQe),e(es,oQe),e(es,vx),e(vx,rQe),e(es,tQe),e(E,aQe),e(E,os),e(os,iJ),e(iJ,nQe),e(os,sQe),e(os,Tx),e(Tx,lQe),e(os,iQe),e(os,Fx),e(Fx,dQe),e(os,cQe),e(E,fQe),e(E,rs),e(rs,dJ),e(dJ,mQe),e(rs,gQe),e(rs,Cx),e(Cx,hQe),e(rs,pQe),e(rs,cJ),e(cJ,_Qe),e(rs,uQe),e(E,bQe),e(E,Gg),e(Gg,fJ),e(fJ,vQe),e(Gg,TQe),e(Gg,Mx),e(Mx,FQe),e(Gg,CQe),e(E,MQe),e(E,ts),e(ts,mJ),e(mJ,EQe),e(ts,yQe),e(ts,Ex),e(Ex,wQe),e(ts,AQe),e(ts,yx),e(yx,LQe),e(ts,BQe),e(E,xQe),e(E,Og),e(Og,gJ),e(gJ,kQe),e(Og,RQe),e(Og,wx),e(wx,SQe),e(Og,PQe),e(E,$Qe),e(E,as),e(as,hJ),e(hJ,IQe),e(as,NQe),e(as,Ax),e(Ax,jQe),e(as,DQe),e(as,Lx),e(Lx,qQe),e(as,GQe),e(E,OQe),e(E,ns),e(ns,pJ),e(pJ,XQe),e(ns,VQe),e(ns,Bx),e(Bx,zQe),e(ns,WQe),e(ns,xx),e(xx,QQe),e(ns,HQe),e(E,UQe),e(E,ss),e(ss,_J),e(_J,JQe),e(ss,YQe),e(ss,kx),e(kx,KQe),e(ss,ZQe),e(ss,Rx),e(Rx,eHe),e(ss,oHe),e(E,rHe),e(E,Xg),e(Xg,uJ),e(uJ,tHe),e(Xg,aHe),e(Xg,Sx),e(Sx,nHe),e(Xg,sHe),e(E,lHe),e(E,ls),e(ls,bJ),e(bJ,iHe),e(ls,dHe),e(ls,Px),e(Px,cHe),e(ls,fHe),e(ls,$x),e($x,mHe),e(ls,gHe),e(E,hHe),e(E,Vg),e(Vg,vJ),e(vJ,pHe),e(Vg,_He),e(Vg,Ix),e(Ix,uHe),e(Vg,bHe),e(E,vHe),e(E,is),e(is,TJ),e(TJ,THe),e(is,FHe),e(is,Nx),e(Nx,CHe),e(is,MHe),e(is,jx),e(jx,EHe),e(is,yHe),e(E,wHe),e(E,ds),e(ds,FJ),e(FJ,AHe),e(ds,LHe),e(ds,Dx),e(Dx,BHe),e(ds,xHe),e(ds,qx),e(qx,kHe),e(ds,RHe),e(E,SHe),e(E,cs),e(cs,CJ),e(CJ,PHe),e(cs,$He),e(cs,Gx),e(Gx,IHe),e(cs,NHe),e(cs,Ox),e(Ox,jHe),e(cs,DHe),e(E,qHe),e(E,fs),e(fs,MJ),e(MJ,GHe),e(fs,OHe),e(fs,Xx),e(Xx,XHe),e(fs,VHe),e(fs,Vx),e(Vx,zHe),e(fs,WHe),e(E,QHe),e(E,zg),e(zg,EJ),e(EJ,HHe),e(zg,UHe),e(zg,zx),e(zx,JHe),e(zg,YHe),e(E,KHe),e(E,ms),e(ms,yJ),e(yJ,ZHe),e(ms,eUe),e(ms,Wx),e(Wx,oUe),e(ms,rUe),e(ms,Qx),e(Qx,tUe),e(ms,aUe),e(E,nUe),e(E,gs),e(gs,wJ),e(wJ,sUe),e(gs,lUe),e(gs,Hx),e(Hx,iUe),e(gs,dUe),e(gs,Ux),e(Ux,cUe),e(gs,fUe),e(E,mUe),e(E,hs),e(hs,AJ),e(AJ,gUe),e(hs,hUe),e(hs,Jx),e(Jx,pUe),e(hs,_Ue),e(hs,Yx),e(Yx,uUe),e(hs,bUe),e(E,vUe),e(E,ps),e(ps,LJ),e(LJ,TUe),e(ps,FUe),e(ps,Kx),e(Kx,CUe),e(ps,MUe),e(ps,Zx),e(Zx,EUe),e(ps,yUe),e(E,wUe),e(E,_s),e(_s,BJ),e(BJ,AUe),e(_s,LUe),e(_s,ek),e(ek,BUe),e(_s,xUe),e(_s,ok),e(ok,kUe),e(_s,RUe),e(E,SUe),e(E,us),e(us,xJ),e(xJ,PUe),e(us,$Ue),e(us,rk),e(rk,IUe),e(us,NUe),e(us,tk),e(tk,jUe),e(us,DUe),e(E,qUe),e(E,Wg),e(Wg,kJ),e(kJ,GUe),e(Wg,OUe),e(Wg,ak),e(ak,XUe),e(Wg,VUe),e(E,zUe),e(E,bs),e(bs,RJ),e(RJ,WUe),e(bs,QUe),e(bs,nk),e(nk,HUe),e(bs,UUe),e(bs,sk),e(sk,JUe),e(bs,YUe),e(E,KUe),e(E,Qg),e(Qg,SJ),e(SJ,ZUe),e(Qg,eJe),e(Qg,lk),e(lk,oJe),e(Qg,rJe),e(E,tJe),e(E,Hg),e(Hg,PJ),e(PJ,aJe),e(Hg,nJe),e(Hg,ik),e(ik,sJe),e(Hg,lJe),e(E,iJe),e(E,vs),e(vs,$J),e($J,dJe),e(vs,cJe),e(vs,dk),e(dk,fJe),e(vs,mJe),e(vs,ck),e(ck,gJe),e(vs,hJe),e(E,pJe),e(E,Ts),e(Ts,IJ),e(IJ,_Je),e(Ts,uJe),e(Ts,fk),e(fk,bJe),e(Ts,vJe),e(Ts,mk),e(mk,TJe),e(Ts,FJe),e(E,CJe),e(E,Ug),e(Ug,NJ),e(NJ,MJe),e(Ug,EJe),e(Ug,gk),e(gk,yJe),e(Ug,wJe),e(E,AJe),e(E,Fs),e(Fs,jJ),e(jJ,LJe),e(Fs,BJe),e(Fs,hk),e(hk,xJe),e(Fs,kJe),e(Fs,pk),e(pk,RJe),e(Fs,SJe),e(E,PJe),e(E,Cs),e(Cs,DJ),e(DJ,$Je),e(Cs,IJe),e(Cs,_k),e(_k,NJe),e(Cs,jJe),e(Cs,uk),e(uk,DJe),e(Cs,qJe),e(E,GJe),e(E,Ms),e(Ms,qJ),e(qJ,OJe),e(Ms,XJe),e(Ms,bk),e(bk,VJe),e(Ms,zJe),e(Ms,vk),e(vk,WJe),e(Ms,QJe),e(E,HJe),e(E,Es),e(Es,GJ),e(GJ,UJe),e(Es,JJe),e(Es,Tk),e(Tk,YJe),e(Es,KJe),e(Es,Fk),e(Fk,ZJe),e(Es,eYe),e(E,oYe),e(E,ys),e(ys,OJ),e(OJ,rYe),e(ys,tYe),e(ys,Ck),e(Ck,aYe),e(ys,nYe),e(ys,Mk),e(Mk,sYe),e(ys,lYe),e(E,iYe),e(E,Jg),e(Jg,XJ),e(XJ,dYe),e(Jg,cYe),e(Jg,Ek),e(Ek,fYe),e(Jg,mYe),e(E,gYe),e(E,Yg),e(Yg,VJ),e(VJ,hYe),e(Yg,pYe),e(Yg,yk),e(yk,_Ye),e(Yg,uYe),e(E,bYe),e(E,Kg),e(Kg,zJ),e(zJ,vYe),e(Kg,TYe),e(Kg,wk),e(wk,FYe),e(Kg,CYe),e(E,MYe),e(E,Zg),e(Zg,WJ),e(WJ,EYe),e(Zg,yYe),e(Zg,Ak),e(Ak,wYe),e(Zg,AYe),e(E,LYe),e(E,ws),e(ws,QJ),e(QJ,BYe),e(ws,xYe),e(ws,Lk),e(Lk,kYe),e(ws,RYe),e(ws,Bk),e(Bk,SYe),e(ws,PYe),e(E,$Ye),e(E,eh),e(eh,HJ),e(HJ,IYe),e(eh,NYe),e(eh,xk),e(xk,jYe),e(eh,DYe),e(E,qYe),e(E,As),e(As,UJ),e(UJ,GYe),e(As,OYe),e(As,kk),e(kk,XYe),e(As,VYe),e(As,Rk),e(Rk,zYe),e(As,WYe),e(E,QYe),e(E,Ls),e(Ls,JJ),e(JJ,HYe),e(Ls,UYe),e(Ls,Sk),e(Sk,JYe),e(Ls,YYe),e(Ls,Pk),e(Pk,KYe),e(Ls,ZYe),e(E,eKe),e(E,Bs),e(Bs,YJ),e(YJ,oKe),e(Bs,rKe),e(Bs,$k),e($k,tKe),e(Bs,aKe),e(Bs,Ik),e(Ik,nKe),e(Bs,sKe),e(E,lKe),e(E,xs),e(xs,KJ),e(KJ,iKe),e(xs,dKe),e(xs,Nk),e(Nk,cKe),e(xs,fKe),e(xs,jk),e(jk,mKe),e(xs,gKe),e(E,hKe),e(E,ks),e(ks,ZJ),e(ZJ,pKe),e(ks,_Ke),e(ks,Dk),e(Dk,uKe),e(ks,bKe),e(ks,qk),e(qk,vKe),e(ks,TKe),e(E,FKe),e(E,Rs),e(Rs,eY),e(eY,CKe),e(Rs,MKe),e(Rs,Gk),e(Gk,EKe),e(Rs,yKe),e(Rs,Ok),e(Ok,wKe),e(Rs,AKe),e(E,LKe),e(E,oh),e(oh,oY),e(oY,BKe),e(oh,xKe),e(oh,Xk),e(Xk,kKe),e(oh,RKe),e(E,SKe),e(E,rh),e(rh,rY),e(rY,PKe),e(rh,$Ke),e(rh,Vk),e(Vk,IKe),e(rh,NKe),e(E,jKe),e(E,Ss),e(Ss,tY),e(tY,DKe),e(Ss,qKe),e(Ss,zk),e(zk,GKe),e(Ss,OKe),e(Ss,Wk),e(Wk,XKe),e(Ss,VKe),e(E,zKe),e(E,Ps),e(Ps,aY),e(aY,WKe),e(Ps,QKe),e(Ps,Qk),e(Qk,HKe),e(Ps,UKe),e(Ps,Hk),e(Hk,JKe),e(Ps,YKe),e(E,KKe),e(E,$s),e($s,nY),e(nY,ZKe),e($s,eZe),e($s,Uk),e(Uk,oZe),e($s,rZe),e($s,Jk),e(Jk,tZe),e($s,aZe),e(E,nZe),e(E,th),e(th,sY),e(sY,sZe),e(th,lZe),e(th,Yk),e(Yk,iZe),e(th,dZe),e(E,cZe),e(E,ah),e(ah,lY),e(lY,fZe),e(ah,mZe),e(ah,Kk),e(Kk,gZe),e(ah,hZe),e(E,pZe),e(E,nh),e(nh,iY),e(iY,_Ze),e(nh,uZe),e(nh,Zk),e(Zk,bZe),e(nh,vZe),e(E,TZe),e(E,sh),e(sh,dY),e(dY,FZe),e(sh,CZe),e(sh,eR),e(eR,MZe),e(sh,EZe),e(E,yZe),e(E,Is),e(Is,cY),e(cY,wZe),e(Is,AZe),e(Is,oR),e(oR,LZe),e(Is,BZe),e(Is,rR),e(rR,xZe),e(Is,kZe),e(E,RZe),e(E,lh),e(lh,fY),e(fY,SZe),e(lh,PZe),e(lh,tR),e(tR,$Ze),e(lh,IZe),e(E,NZe),e(E,ih),e(ih,mY),e(mY,jZe),e(ih,DZe),e(ih,aR),e(aR,qZe),e(ih,GZe),e(E,OZe),e(E,Ns),e(Ns,gY),e(gY,XZe),e(Ns,VZe),e(Ns,nR),e(nR,zZe),e(Ns,WZe),e(Ns,sR),e(sR,QZe),e(Ns,HZe),e(E,UZe),e(E,js),e(js,hY),e(hY,JZe),e(js,YZe),e(js,lR),e(lR,KZe),e(js,ZZe),e(js,iR),e(iR,eeo),e(js,oeo),e(go,reo),e(go,pY),e(pY,teo),e(go,aeo),g(M3,go,null),e(Qo,neo),e(Qo,dh),g(E3,dh,null),e(dh,seo),e(dh,_Y),e(_Y,leo),b(c,dke,u),b(c,Hi,u),e(Hi,ch),e(ch,uY),g(y3,uY,null),e(Hi,ieo),e(Hi,bY),e(bY,deo),b(c,cke,u),b(c,Ho,u),g(w3,Ho,null),e(Ho,ceo),e(Ho,A3),e(A3,feo),e(A3,dR),e(dR,meo),e(A3,geo),e(Ho,heo),e(Ho,L3),e(L3,peo),e(L3,vY),e(vY,_eo),e(L3,ueo),e(Ho,beo),e(Ho,Ie),g(B3,Ie,null),e(Ie,veo),e(Ie,TY),e(TY,Teo),e(Ie,Feo),e(Ie,Xa),e(Xa,Ceo),e(Xa,FY),e(FY,Meo),e(Xa,Eeo),e(Xa,CY),e(CY,yeo),e(Xa,weo),e(Xa,MY),e(MY,Aeo),e(Xa,Leo),e(Ie,Beo),e(Ie,re),e(re,fh),e(fh,EY),e(EY,xeo),e(fh,keo),e(fh,cR),e(cR,Reo),e(fh,Seo),e(re,Peo),e(re,mh),e(mh,yY),e(yY,$eo),e(mh,Ieo),e(mh,fR),e(fR,Neo),e(mh,jeo),e(re,Deo),e(re,gh),e(gh,wY),e(wY,qeo),e(gh,Geo),e(gh,mR),e(mR,Oeo),e(gh,Xeo),e(re,Veo),e(re,hh),e(hh,AY),e(AY,zeo),e(hh,Weo),e(hh,gR),e(gR,Qeo),e(hh,Heo),e(re,Ueo),e(re,ph),e(ph,LY),e(LY,Jeo),e(ph,Yeo),e(ph,hR),e(hR,Keo),e(ph,Zeo),e(re,eoo),e(re,_h),e(_h,BY),e(BY,ooo),e(_h,roo),e(_h,pR),e(pR,too),e(_h,aoo),e(re,noo),e(re,uh),e(uh,xY),e(xY,soo),e(uh,loo),e(uh,_R),e(_R,ioo),e(uh,doo),e(re,coo),e(re,bh),e(bh,kY),e(kY,foo),e(bh,moo),e(bh,uR),e(uR,goo),e(bh,hoo),e(re,poo),e(re,vh),e(vh,RY),e(RY,_oo),e(vh,uoo),e(vh,bR),e(bR,boo),e(vh,voo),e(re,Too),e(re,Th),e(Th,SY),e(SY,Foo),e(Th,Coo),e(Th,vR),e(vR,Moo),e(Th,Eoo),e(re,yoo),e(re,Fh),e(Fh,PY),e(PY,woo),e(Fh,Aoo),e(Fh,TR),e(TR,Loo),e(Fh,Boo),e(re,xoo),e(re,Ch),e(Ch,$Y),e($Y,koo),e(Ch,Roo),e(Ch,FR),e(FR,Soo),e(Ch,Poo),e(re,$oo),e(re,Mh),e(Mh,IY),e(IY,Ioo),e(Mh,Noo),e(Mh,CR),e(CR,joo),e(Mh,Doo),e(re,qoo),e(re,Eh),e(Eh,NY),e(NY,Goo),e(Eh,Ooo),e(Eh,MR),e(MR,Xoo),e(Eh,Voo),e(re,zoo),e(re,yh),e(yh,jY),e(jY,Woo),e(yh,Qoo),e(yh,ER),e(ER,Hoo),e(yh,Uoo),e(re,Joo),e(re,wh),e(wh,DY),e(DY,Yoo),e(wh,Koo),e(wh,yR),e(yR,Zoo),e(wh,ero),e(re,oro),e(re,Ah),e(Ah,qY),e(qY,rro),e(Ah,tro),e(Ah,wR),e(wR,aro),e(Ah,nro),e(re,sro),e(re,Lh),e(Lh,GY),e(GY,lro),e(Lh,iro),e(Lh,AR),e(AR,dro),e(Lh,cro),e(Ie,fro),g(Bh,Ie,null),e(Ie,mro),e(Ie,OY),e(OY,gro),e(Ie,hro),g(x3,Ie,null),e(Ho,pro),e(Ho,xh),g(k3,xh,null),e(xh,_ro),e(xh,XY),e(XY,uro),b(c,fke,u),b(c,Ui,u),e(Ui,kh),e(kh,VY),g(R3,VY,null),e(Ui,bro),e(Ui,zY),e(zY,vro),b(c,mke,u),b(c,Uo,u),g(S3,Uo,null),e(Uo,Tro),e(Uo,P3),e(P3,Fro),e(P3,LR),e(LR,Cro),e(P3,Mro),e(Uo,Ero),e(Uo,$3),e($3,yro),e($3,WY),e(WY,wro),e($3,Aro),e(Uo,Lro),e(Uo,Ne),g(I3,Ne,null),e(Ne,Bro),e(Ne,QY),e(QY,xro),e(Ne,kro),e(Ne,Ji),e(Ji,Rro),e(Ji,HY),e(HY,Sro),e(Ji,Pro),e(Ji,UY),e(UY,$ro),e(Ji,Iro),e(Ne,Nro),e(Ne,xe),e(xe,Rh),e(Rh,JY),e(JY,jro),e(Rh,Dro),e(Rh,BR),e(BR,qro),e(Rh,Gro),e(xe,Oro),e(xe,Sh),e(Sh,YY),e(YY,Xro),e(Sh,Vro),e(Sh,xR),e(xR,zro),e(Sh,Wro),e(xe,Qro),e(xe,Ph),e(Ph,KY),e(KY,Hro),e(Ph,Uro),e(Ph,kR),e(kR,Jro),e(Ph,Yro),e(xe,Kro),e(xe,$h),e($h,ZY),e(ZY,Zro),e($h,eto),e($h,RR),e(RR,oto),e($h,rto),e(xe,tto),e(xe,Ih),e(Ih,eK),e(eK,ato),e(Ih,nto),e(Ih,SR),e(SR,sto),e(Ih,lto),e(xe,ito),e(xe,Nh),e(Nh,oK),e(oK,dto),e(Nh,cto),e(Nh,PR),e(PR,fto),e(Nh,mto),e(xe,gto),e(xe,jh),e(jh,rK),e(rK,hto),e(jh,pto),e(jh,$R),e($R,_to),e(jh,uto),e(xe,bto),e(xe,Dh),e(Dh,tK),e(tK,vto),e(Dh,Tto),e(Dh,IR),e(IR,Fto),e(Dh,Cto),e(Ne,Mto),g(qh,Ne,null),e(Ne,Eto),e(Ne,aK),e(aK,yto),e(Ne,wto),g(N3,Ne,null),e(Uo,Ato),e(Uo,Gh),g(j3,Gh,null),e(Gh,Lto),e(Gh,nK),e(nK,Bto),b(c,gke,u),b(c,Yi,u),e(Yi,Oh),e(Oh,sK),g(D3,sK,null),e(Yi,xto),e(Yi,lK),e(lK,kto),b(c,hke,u),b(c,Jo,u),g(q3,Jo,null),e(Jo,Rto),e(Jo,Ki),e(Ki,Sto),e(Ki,iK),e(iK,Pto),e(Ki,$to),e(Ki,dK),e(dK,Ito),e(Ki,Nto),e(Jo,jto),e(Jo,G3),e(G3,Dto),e(G3,cK),e(cK,qto),e(G3,Gto),e(Jo,Oto),e(Jo,Vr),g(O3,Vr,null),e(Vr,Xto),e(Vr,fK),e(fK,Vto),e(Vr,zto),e(Vr,Zi),e(Zi,Wto),e(Zi,mK),e(mK,Qto),e(Zi,Hto),e(Zi,gK),e(gK,Uto),e(Zi,Jto),e(Vr,Yto),e(Vr,hK),e(hK,Kto),e(Vr,Zto),g(X3,Vr,null),e(Jo,eao),e(Jo,je),g(V3,je,null),e(je,oao),e(je,pK),e(pK,rao),e(je,tao),e(je,Va),e(Va,aao),e(Va,_K),e(_K,nao),e(Va,sao),e(Va,uK),e(uK,lao),e(Va,iao),e(Va,bK),e(bK,dao),e(Va,cao),e(je,fao),e(je,F),e(F,Xh),e(Xh,vK),e(vK,mao),e(Xh,gao),e(Xh,NR),e(NR,hao),e(Xh,pao),e(F,_ao),e(F,Vh),e(Vh,TK),e(TK,uao),e(Vh,bao),e(Vh,jR),e(jR,vao),e(Vh,Tao),e(F,Fao),e(F,zh),e(zh,FK),e(FK,Cao),e(zh,Mao),e(zh,DR),e(DR,Eao),e(zh,yao),e(F,wao),e(F,Wh),e(Wh,CK),e(CK,Aao),e(Wh,Lao),e(Wh,qR),e(qR,Bao),e(Wh,xao),e(F,kao),e(F,Qh),e(Qh,MK),e(MK,Rao),e(Qh,Sao),e(Qh,GR),e(GR,Pao),e(Qh,$ao),e(F,Iao),e(F,Hh),e(Hh,EK),e(EK,Nao),e(Hh,jao),e(Hh,OR),e(OR,Dao),e(Hh,qao),e(F,Gao),e(F,Uh),e(Uh,yK),e(yK,Oao),e(Uh,Xao),e(Uh,XR),e(XR,Vao),e(Uh,zao),e(F,Wao),e(F,Jh),e(Jh,wK),e(wK,Qao),e(Jh,Hao),e(Jh,VR),e(VR,Uao),e(Jh,Jao),e(F,Yao),e(F,Yh),e(Yh,AK),e(AK,Kao),e(Yh,Zao),e(Yh,zR),e(zR,eno),e(Yh,ono),e(F,rno),e(F,Kh),e(Kh,LK),e(LK,tno),e(Kh,ano),e(Kh,WR),e(WR,nno),e(Kh,sno),e(F,lno),e(F,Zh),e(Zh,BK),e(BK,ino),e(Zh,dno),e(Zh,QR),e(QR,cno),e(Zh,fno),e(F,mno),e(F,ep),e(ep,xK),e(xK,gno),e(ep,hno),e(ep,HR),e(HR,pno),e(ep,_no),e(F,uno),e(F,op),e(op,kK),e(kK,bno),e(op,vno),e(op,UR),e(UR,Tno),e(op,Fno),e(F,Cno),e(F,rp),e(rp,RK),e(RK,Mno),e(rp,Eno),e(rp,JR),e(JR,yno),e(rp,wno),e(F,Ano),e(F,tp),e(tp,SK),e(SK,Lno),e(tp,Bno),e(tp,YR),e(YR,xno),e(tp,kno),e(F,Rno),e(F,ap),e(ap,PK),e(PK,Sno),e(ap,Pno),e(ap,KR),e(KR,$no),e(ap,Ino),e(F,Nno),e(F,np),e(np,$K),e($K,jno),e(np,Dno),e(np,ZR),e(ZR,qno),e(np,Gno),e(F,Ono),e(F,sp),e(sp,IK),e(IK,Xno),e(sp,Vno),e(sp,eS),e(eS,zno),e(sp,Wno),e(F,Qno),e(F,lp),e(lp,NK),e(NK,Hno),e(lp,Uno),e(lp,oS),e(oS,Jno),e(lp,Yno),e(F,Kno),e(F,ip),e(ip,jK),e(jK,Zno),e(ip,eso),e(ip,rS),e(rS,oso),e(ip,rso),e(F,tso),e(F,dp),e(dp,DK),e(DK,aso),e(dp,nso),e(dp,tS),e(tS,sso),e(dp,lso),e(F,iso),e(F,cp),e(cp,qK),e(qK,dso),e(cp,cso),e(cp,aS),e(aS,fso),e(cp,mso),e(F,gso),e(F,fp),e(fp,GK),e(GK,hso),e(fp,pso),e(fp,nS),e(nS,_so),e(fp,uso),e(F,bso),e(F,mp),e(mp,OK),e(OK,vso),e(mp,Tso),e(mp,sS),e(sS,Fso),e(mp,Cso),e(F,Mso),e(F,gp),e(gp,XK),e(XK,Eso),e(gp,yso),e(gp,lS),e(lS,wso),e(gp,Aso),e(F,Lso),e(F,hp),e(hp,VK),e(VK,Bso),e(hp,xso),e(hp,iS),e(iS,kso),e(hp,Rso),e(F,Sso),e(F,pp),e(pp,zK),e(zK,Pso),e(pp,$so),e(pp,dS),e(dS,Iso),e(pp,Nso),e(F,jso),e(F,Ds),e(Ds,WK),e(WK,Dso),e(Ds,qso),e(Ds,cS),e(cS,Gso),e(Ds,Oso),e(Ds,fS),e(fS,Xso),e(Ds,Vso),e(F,zso),e(F,_p),e(_p,QK),e(QK,Wso),e(_p,Qso),e(_p,mS),e(mS,Hso),e(_p,Uso),e(F,Jso),e(F,up),e(up,HK),e(HK,Yso),e(up,Kso),e(up,gS),e(gS,Zso),e(up,elo),e(F,olo),e(F,bp),e(bp,UK),e(UK,rlo),e(bp,tlo),e(bp,hS),e(hS,alo),e(bp,nlo),e(F,slo),e(F,vp),e(vp,JK),e(JK,llo),e(vp,ilo),e(vp,pS),e(pS,dlo),e(vp,clo),e(F,flo),e(F,Tp),e(Tp,YK),e(YK,mlo),e(Tp,glo),e(Tp,_S),e(_S,hlo),e(Tp,plo),e(F,_lo),e(F,Fp),e(Fp,KK),e(KK,ulo),e(Fp,blo),e(Fp,uS),e(uS,vlo),e(Fp,Tlo),e(F,Flo),e(F,Cp),e(Cp,ZK),e(ZK,Clo),e(Cp,Mlo),e(Cp,bS),e(bS,Elo),e(Cp,ylo),e(F,wlo),e(F,Mp),e(Mp,eZ),e(eZ,Alo),e(Mp,Llo),e(Mp,vS),e(vS,Blo),e(Mp,xlo),e(F,klo),e(F,Ep),e(Ep,oZ),e(oZ,Rlo),e(Ep,Slo),e(Ep,TS),e(TS,Plo),e(Ep,$lo),e(F,Ilo),e(F,yp),e(yp,rZ),e(rZ,Nlo),e(yp,jlo),e(yp,FS),e(FS,Dlo),e(yp,qlo),e(F,Glo),e(F,wp),e(wp,tZ),e(tZ,Olo),e(wp,Xlo),e(wp,CS),e(CS,Vlo),e(wp,zlo),e(F,Wlo),e(F,Ap),e(Ap,aZ),e(aZ,Qlo),e(Ap,Hlo),e(Ap,MS),e(MS,Ulo),e(Ap,Jlo),e(F,Ylo),e(F,Lp),e(Lp,nZ),e(nZ,Klo),e(Lp,Zlo),e(Lp,ES),e(ES,eio),e(Lp,oio),e(F,rio),e(F,Bp),e(Bp,sZ),e(sZ,tio),e(Bp,aio),e(Bp,yS),e(yS,nio),e(Bp,sio),e(F,lio),e(F,xp),e(xp,lZ),e(lZ,iio),e(xp,dio),e(xp,wS),e(wS,cio),e(xp,fio),e(F,mio),e(F,kp),e(kp,iZ),e(iZ,gio),e(kp,hio),e(kp,AS),e(AS,pio),e(kp,_io),e(F,uio),e(F,Rp),e(Rp,dZ),e(dZ,bio),e(Rp,vio),e(Rp,LS),e(LS,Tio),e(Rp,Fio),e(F,Cio),e(F,Sp),e(Sp,cZ),e(cZ,Mio),e(Sp,Eio),e(Sp,BS),e(BS,yio),e(Sp,wio),e(F,Aio),e(F,Pp),e(Pp,fZ),e(fZ,Lio),e(Pp,Bio),e(Pp,xS),e(xS,xio),e(Pp,kio),e(F,Rio),e(F,$p),e($p,mZ),e(mZ,Sio),e($p,Pio),e($p,kS),e(kS,$io),e($p,Iio),e(F,Nio),e(F,Ip),e(Ip,gZ),e(gZ,jio),e(Ip,Dio),e(Ip,RS),e(RS,qio),e(Ip,Gio),e(F,Oio),e(F,Np),e(Np,hZ),e(hZ,Xio),e(Np,Vio),e(Np,SS),e(SS,zio),e(Np,Wio),e(F,Qio),e(F,jp),e(jp,pZ),e(pZ,Hio),e(jp,Uio),e(jp,PS),e(PS,Jio),e(jp,Yio),e(F,Kio),e(F,Dp),e(Dp,_Z),e(_Z,Zio),e(Dp,edo),e(Dp,$S),e($S,odo),e(Dp,rdo),e(F,tdo),e(F,qp),e(qp,uZ),e(uZ,ado),e(qp,ndo),e(qp,IS),e(IS,sdo),e(qp,ldo),e(F,ido),e(F,Gp),e(Gp,bZ),e(bZ,ddo),e(Gp,cdo),e(Gp,NS),e(NS,fdo),e(Gp,mdo),e(F,gdo),e(F,Op),e(Op,vZ),e(vZ,hdo),e(Op,pdo),e(Op,jS),e(jS,_do),e(Op,udo),e(F,bdo),e(F,Xp),e(Xp,TZ),e(TZ,vdo),e(Xp,Tdo),e(Xp,DS),e(DS,Fdo),e(Xp,Cdo),e(F,Mdo),e(F,Vp),e(Vp,FZ),e(FZ,Edo),e(Vp,ydo),e(Vp,qS),e(qS,wdo),e(Vp,Ado),e(F,Ldo),e(F,zp),e(zp,CZ),e(CZ,Bdo),e(zp,xdo),e(zp,GS),e(GS,kdo),e(zp,Rdo),e(F,Sdo),e(F,Wp),e(Wp,MZ),e(MZ,Pdo),e(Wp,$do),e(Wp,OS),e(OS,Ido),e(Wp,Ndo),e(F,jdo),e(F,Qp),e(Qp,EZ),e(EZ,Ddo),e(Qp,qdo),e(Qp,XS),e(XS,Gdo),e(Qp,Odo),e(F,Xdo),e(F,Hp),e(Hp,yZ),e(yZ,Vdo),e(Hp,zdo),e(Hp,VS),e(VS,Wdo),e(Hp,Qdo),e(F,Hdo),e(F,Up),e(Up,wZ),e(wZ,Udo),e(Up,Jdo),e(Up,zS),e(zS,Ydo),e(Up,Kdo),e(F,Zdo),e(F,Jp),e(Jp,AZ),e(AZ,eco),e(Jp,oco),e(Jp,WS),e(WS,rco),e(Jp,tco),e(F,aco),e(F,Yp),e(Yp,LZ),e(LZ,nco),e(Yp,sco),e(Yp,QS),e(QS,lco),e(Yp,ico),e(F,dco),e(F,Kp),e(Kp,BZ),e(BZ,cco),e(Kp,fco),e(Kp,HS),e(HS,mco),e(Kp,gco),e(F,hco),e(F,Zp),e(Zp,xZ),e(xZ,pco),e(Zp,_co),e(Zp,US),e(US,uco),e(Zp,bco),e(F,vco),e(F,e_),e(e_,kZ),e(kZ,Tco),e(e_,Fco),e(e_,JS),e(JS,Cco),e(e_,Mco),e(F,Eco),e(F,o_),e(o_,RZ),e(RZ,yco),e(o_,wco),e(o_,YS),e(YS,Aco),e(o_,Lco),e(F,Bco),e(F,r_),e(r_,SZ),e(SZ,xco),e(r_,kco),e(r_,KS),e(KS,Rco),e(r_,Sco),e(F,Pco),e(F,t_),e(t_,PZ),e(PZ,$co),e(t_,Ico),e(t_,ZS),e(ZS,Nco),e(t_,jco),e(F,Dco),e(F,a_),e(a_,$Z),e($Z,qco),e(a_,Gco),e(a_,eP),e(eP,Oco),e(a_,Xco),e(F,Vco),e(F,n_),e(n_,IZ),e(IZ,zco),e(n_,Wco),e(n_,oP),e(oP,Qco),e(n_,Hco),e(F,Uco),e(F,s_),e(s_,NZ),e(NZ,Jco),e(s_,Yco),e(s_,rP),e(rP,Kco),e(s_,Zco),e(F,efo),e(F,l_),e(l_,jZ),e(jZ,ofo),e(l_,rfo),e(l_,tP),e(tP,tfo),e(l_,afo),e(F,nfo),e(F,i_),e(i_,DZ),e(DZ,sfo),e(i_,lfo),e(i_,aP),e(aP,ifo),e(i_,dfo),e(F,cfo),e(F,d_),e(d_,qZ),e(qZ,ffo),e(d_,mfo),e(d_,nP),e(nP,gfo),e(d_,hfo),e(F,pfo),e(F,c_),e(c_,GZ),e(GZ,_fo),e(c_,ufo),e(c_,sP),e(sP,bfo),e(c_,vfo),e(F,Tfo),e(F,f_),e(f_,OZ),e(OZ,Ffo),e(f_,Cfo),e(f_,lP),e(lP,Mfo),e(f_,Efo),e(F,yfo),e(F,m_),e(m_,XZ),e(XZ,wfo),e(m_,Afo),e(m_,iP),e(iP,Lfo),e(m_,Bfo),e(F,xfo),e(F,g_),e(g_,VZ),e(VZ,kfo),e(g_,Rfo),e(g_,dP),e(dP,Sfo),e(g_,Pfo),e(F,$fo),e(F,h_),e(h_,zZ),e(zZ,Ifo),e(h_,Nfo),e(h_,cP),e(cP,jfo),e(h_,Dfo),e(F,qfo),e(F,p_),e(p_,WZ),e(WZ,Gfo),e(p_,Ofo),e(p_,fP),e(fP,Xfo),e(p_,Vfo),e(F,zfo),e(F,__),e(__,QZ),e(QZ,Wfo),e(__,Qfo),e(__,mP),e(mP,Hfo),e(__,Ufo),e(F,Jfo),e(F,u_),e(u_,HZ),e(HZ,Yfo),e(u_,Kfo),e(u_,gP),e(gP,Zfo),e(u_,emo),e(F,omo),e(F,b_),e(b_,UZ),e(UZ,rmo),e(b_,tmo),e(b_,hP),e(hP,amo),e(b_,nmo),e(F,smo),e(F,v_),e(v_,JZ),e(JZ,lmo),e(v_,imo),e(v_,pP),e(pP,dmo),e(v_,cmo),e(F,fmo),e(F,T_),e(T_,YZ),e(YZ,mmo),e(T_,gmo),e(T_,_P),e(_P,hmo),e(T_,pmo),e(F,_mo),e(F,F_),e(F_,KZ),e(KZ,umo),e(F_,bmo),e(F_,uP),e(uP,vmo),e(F_,Tmo),e(F,Fmo),e(F,C_),e(C_,ZZ),e(ZZ,Cmo),e(C_,Mmo),e(C_,bP),e(bP,Emo),e(C_,ymo),e(F,wmo),e(F,M_),e(M_,eee),e(eee,Amo),e(M_,Lmo),e(M_,vP),e(vP,Bmo),e(M_,xmo),e(je,kmo),e(je,E_),e(E_,Rmo),e(E_,oee),e(oee,Smo),e(E_,Pmo),e(E_,ree),e(ree,$mo),e(je,Imo),e(je,tee),e(tee,Nmo),e(je,jmo),g(z3,je,null),b(c,pke,u),b(c,ed,u),e(ed,y_),e(y_,aee),g(W3,aee,null),e(ed,Dmo),e(ed,nee),e(nee,qmo),b(c,_ke,u),b(c,Yo,u),g(Q3,Yo,null),e(Yo,Gmo),e(Yo,od),e(od,Omo),e(od,see),e(see,Xmo),e(od,Vmo),e(od,lee),e(lee,zmo),e(od,Wmo),e(Yo,Qmo),e(Yo,H3),e(H3,Hmo),e(H3,iee),e(iee,Umo),e(H3,Jmo),e(Yo,Ymo),e(Yo,zr),g(U3,zr,null),e(zr,Kmo),e(zr,dee),e(dee,Zmo),e(zr,ego),e(zr,rd),e(rd,ogo),e(rd,cee),e(cee,rgo),e(rd,tgo),e(rd,fee),e(fee,ago),e(rd,ngo),e(zr,sgo),e(zr,mee),e(mee,lgo),e(zr,igo),g(J3,zr,null),e(Yo,dgo),e(Yo,De),g(Y3,De,null),e(De,cgo),e(De,gee),e(gee,fgo),e(De,mgo),e(De,za),e(za,ggo),e(za,hee),e(hee,hgo),e(za,pgo),e(za,pee),e(pee,_go),e(za,ugo),e(za,_ee),e(_ee,bgo),e(za,vgo),e(De,Tgo),e(De,k),e(k,w_),e(w_,uee),e(uee,Fgo),e(w_,Cgo),e(w_,TP),e(TP,Mgo),e(w_,Ego),e(k,ygo),e(k,A_),e(A_,bee),e(bee,wgo),e(A_,Ago),e(A_,FP),e(FP,Lgo),e(A_,Bgo),e(k,xgo),e(k,L_),e(L_,vee),e(vee,kgo),e(L_,Rgo),e(L_,CP),e(CP,Sgo),e(L_,Pgo),e(k,$go),e(k,B_),e(B_,Tee),e(Tee,Igo),e(B_,Ngo),e(B_,MP),e(MP,jgo),e(B_,Dgo),e(k,qgo),e(k,x_),e(x_,Fee),e(Fee,Ggo),e(x_,Ogo),e(x_,EP),e(EP,Xgo),e(x_,Vgo),e(k,zgo),e(k,k_),e(k_,Cee),e(Cee,Wgo),e(k_,Qgo),e(k_,yP),e(yP,Hgo),e(k_,Ugo),e(k,Jgo),e(k,R_),e(R_,Mee),e(Mee,Ygo),e(R_,Kgo),e(R_,wP),e(wP,Zgo),e(R_,eho),e(k,oho),e(k,S_),e(S_,Eee),e(Eee,rho),e(S_,tho),e(S_,AP),e(AP,aho),e(S_,nho),e(k,sho),e(k,P_),e(P_,yee),e(yee,lho),e(P_,iho),e(P_,LP),e(LP,dho),e(P_,cho),e(k,fho),e(k,$_),e($_,wee),e(wee,mho),e($_,gho),e($_,BP),e(BP,hho),e($_,pho),e(k,_ho),e(k,I_),e(I_,Aee),e(Aee,uho),e(I_,bho),e(I_,xP),e(xP,vho),e(I_,Tho),e(k,Fho),e(k,N_),e(N_,Lee),e(Lee,Cho),e(N_,Mho),e(N_,kP),e(kP,Eho),e(N_,yho),e(k,who),e(k,j_),e(j_,Bee),e(Bee,Aho),e(j_,Lho),e(j_,RP),e(RP,Bho),e(j_,xho),e(k,kho),e(k,D_),e(D_,xee),e(xee,Rho),e(D_,Sho),e(D_,SP),e(SP,Pho),e(D_,$ho),e(k,Iho),e(k,q_),e(q_,kee),e(kee,Nho),e(q_,jho),e(q_,PP),e(PP,Dho),e(q_,qho),e(k,Gho),e(k,G_),e(G_,Ree),e(Ree,Oho),e(G_,Xho),e(G_,$P),e($P,Vho),e(G_,zho),e(k,Who),e(k,O_),e(O_,See),e(See,Qho),e(O_,Hho),e(O_,IP),e(IP,Uho),e(O_,Jho),e(k,Yho),e(k,X_),e(X_,Pee),e(Pee,Kho),e(X_,Zho),e(X_,NP),e(NP,epo),e(X_,opo),e(k,rpo),e(k,V_),e(V_,$ee),e($ee,tpo),e(V_,apo),e(V_,jP),e(jP,npo),e(V_,spo),e(k,lpo),e(k,z_),e(z_,Iee),e(Iee,ipo),e(z_,dpo),e(z_,DP),e(DP,cpo),e(z_,fpo),e(k,mpo),e(k,W_),e(W_,Nee),e(Nee,gpo),e(W_,hpo),e(W_,qP),e(qP,ppo),e(W_,_po),e(k,upo),e(k,Q_),e(Q_,jee),e(jee,bpo),e(Q_,vpo),e(Q_,GP),e(GP,Tpo),e(Q_,Fpo),e(k,Cpo),e(k,H_),e(H_,Dee),e(Dee,Mpo),e(H_,Epo),e(H_,OP),e(OP,ypo),e(H_,wpo),e(k,Apo),e(k,U_),e(U_,qee),e(qee,Lpo),e(U_,Bpo),e(U_,XP),e(XP,xpo),e(U_,kpo),e(k,Rpo),e(k,J_),e(J_,Gee),e(Gee,Spo),e(J_,Ppo),e(J_,VP),e(VP,$po),e(J_,Ipo),e(k,Npo),e(k,Y_),e(Y_,Oee),e(Oee,jpo),e(Y_,Dpo),e(Y_,zP),e(zP,qpo),e(Y_,Gpo),e(k,Opo),e(k,K_),e(K_,Xee),e(Xee,Xpo),e(K_,Vpo),e(K_,WP),e(WP,zpo),e(K_,Wpo),e(k,Qpo),e(k,Z_),e(Z_,Vee),e(Vee,Hpo),e(Z_,Upo),e(Z_,QP),e(QP,Jpo),e(Z_,Ypo),e(k,Kpo),e(k,eu),e(eu,zee),e(zee,Zpo),e(eu,e_o),e(eu,HP),e(HP,o_o),e(eu,r_o),e(k,t_o),e(k,ou),e(ou,Wee),e(Wee,a_o),e(ou,n_o),e(ou,UP),e(UP,s_o),e(ou,l_o),e(k,i_o),e(k,ru),e(ru,Qee),e(Qee,d_o),e(ru,c_o),e(ru,JP),e(JP,f_o),e(ru,m_o),e(k,g_o),e(k,tu),e(tu,Hee),e(Hee,h_o),e(tu,p_o),e(tu,YP),e(YP,__o),e(tu,u_o),e(k,b_o),e(k,au),e(au,Uee),e(Uee,v_o),e(au,T_o),e(au,KP),e(KP,F_o),e(au,C_o),e(k,M_o),e(k,nu),e(nu,Jee),e(Jee,E_o),e(nu,y_o),e(nu,ZP),e(ZP,w_o),e(nu,A_o),e(k,L_o),e(k,su),e(su,Yee),e(Yee,B_o),e(su,x_o),e(su,e$),e(e$,k_o),e(su,R_o),e(k,S_o),e(k,lu),e(lu,Kee),e(Kee,P_o),e(lu,$_o),e(lu,o$),e(o$,I_o),e(lu,N_o),e(k,j_o),e(k,iu),e(iu,Zee),e(Zee,D_o),e(iu,q_o),e(iu,r$),e(r$,G_o),e(iu,O_o),e(k,X_o),e(k,du),e(du,eoe),e(eoe,V_o),e(du,z_o),e(du,t$),e(t$,W_o),e(du,Q_o),e(k,H_o),e(k,cu),e(cu,ooe),e(ooe,U_o),e(cu,J_o),e(cu,a$),e(a$,Y_o),e(cu,K_o),e(De,Z_o),e(De,fu),e(fu,euo),e(fu,roe),e(roe,ouo),e(fu,ruo),e(fu,toe),e(toe,tuo),e(De,auo),e(De,aoe),e(aoe,nuo),e(De,suo),g(K3,De,null),b(c,uke,u),b(c,td,u),e(td,mu),e(mu,noe),g(Z3,noe,null),e(td,luo),e(td,soe),e(soe,iuo),b(c,bke,u),b(c,Ko,u),g(ey,Ko,null),e(Ko,duo),e(Ko,ad),e(ad,cuo),e(ad,loe),e(loe,fuo),e(ad,muo),e(ad,ioe),e(ioe,guo),e(ad,huo),e(Ko,puo),e(Ko,oy),e(oy,_uo),e(oy,doe),e(doe,uuo),e(oy,buo),e(Ko,vuo),e(Ko,Wr),g(ry,Wr,null),e(Wr,Tuo),e(Wr,coe),e(coe,Fuo),e(Wr,Cuo),e(Wr,nd),e(nd,Muo),e(nd,foe),e(foe,Euo),e(nd,yuo),e(nd,moe),e(moe,wuo),e(nd,Auo),e(Wr,Luo),e(Wr,goe),e(goe,Buo),e(Wr,xuo),g(ty,Wr,null),e(Ko,kuo),e(Ko,qe),g(ay,qe,null),e(qe,Ruo),e(qe,hoe),e(hoe,Suo),e(qe,Puo),e(qe,Wa),e(Wa,$uo),e(Wa,poe),e(poe,Iuo),e(Wa,Nuo),e(Wa,_oe),e(_oe,juo),e(Wa,Duo),e(Wa,uoe),e(uoe,quo),e(Wa,Guo),e(qe,Ouo),e(qe,$),e($,gu),e(gu,boe),e(boe,Xuo),e(gu,Vuo),e(gu,n$),e(n$,zuo),e(gu,Wuo),e($,Quo),e($,hu),e(hu,voe),e(voe,Huo),e(hu,Uuo),e(hu,s$),e(s$,Juo),e(hu,Yuo),e($,Kuo),e($,pu),e(pu,Toe),e(Toe,Zuo),e(pu,e5o),e(pu,l$),e(l$,o5o),e(pu,r5o),e($,t5o),e($,_u),e(_u,Foe),e(Foe,a5o),e(_u,n5o),e(_u,i$),e(i$,s5o),e(_u,l5o),e($,i5o),e($,uu),e(uu,Coe),e(Coe,d5o),e(uu,c5o),e(uu,d$),e(d$,f5o),e(uu,m5o),e($,g5o),e($,bu),e(bu,Moe),e(Moe,h5o),e(bu,p5o),e(bu,c$),e(c$,_5o),e(bu,u5o),e($,b5o),e($,vu),e(vu,Eoe),e(Eoe,v5o),e(vu,T5o),e(vu,f$),e(f$,F5o),e(vu,C5o),e($,M5o),e($,Tu),e(Tu,yoe),e(yoe,E5o),e(Tu,y5o),e(Tu,m$),e(m$,w5o),e(Tu,A5o),e($,L5o),e($,Fu),e(Fu,woe),e(woe,B5o),e(Fu,x5o),e(Fu,g$),e(g$,k5o),e(Fu,R5o),e($,S5o),e($,Cu),e(Cu,Aoe),e(Aoe,P5o),e(Cu,$5o),e(Cu,h$),e(h$,I5o),e(Cu,N5o),e($,j5o),e($,Mu),e(Mu,Loe),e(Loe,D5o),e(Mu,q5o),e(Mu,p$),e(p$,G5o),e(Mu,O5o),e($,X5o),e($,Eu),e(Eu,Boe),e(Boe,V5o),e(Eu,z5o),e(Eu,_$),e(_$,W5o),e(Eu,Q5o),e($,H5o),e($,yu),e(yu,xoe),e(xoe,U5o),e(yu,J5o),e(yu,u$),e(u$,Y5o),e(yu,K5o),e($,Z5o),e($,wu),e(wu,koe),e(koe,e2o),e(wu,o2o),e(wu,b$),e(b$,r2o),e(wu,t2o),e($,a2o),e($,Au),e(Au,Roe),e(Roe,n2o),e(Au,s2o),e(Au,v$),e(v$,l2o),e(Au,i2o),e($,d2o),e($,Lu),e(Lu,Soe),e(Soe,c2o),e(Lu,f2o),e(Lu,T$),e(T$,m2o),e(Lu,g2o),e($,h2o),e($,Bu),e(Bu,Poe),e(Poe,p2o),e(Bu,_2o),e(Bu,F$),e(F$,u2o),e(Bu,b2o),e($,v2o),e($,xu),e(xu,$oe),e($oe,T2o),e(xu,F2o),e(xu,C$),e(C$,C2o),e(xu,M2o),e($,E2o),e($,ku),e(ku,Ioe),e(Ioe,y2o),e(ku,w2o),e(ku,M$),e(M$,A2o),e(ku,L2o),e($,B2o),e($,Ru),e(Ru,Noe),e(Noe,x2o),e(Ru,k2o),e(Ru,E$),e(E$,R2o),e(Ru,S2o),e($,P2o),e($,Su),e(Su,joe),e(joe,$2o),e(Su,I2o),e(Su,y$),e(y$,N2o),e(Su,j2o),e($,D2o),e($,Pu),e(Pu,Doe),e(Doe,q2o),e(Pu,G2o),e(Pu,w$),e(w$,O2o),e(Pu,X2o),e($,V2o),e($,$u),e($u,qoe),e(qoe,z2o),e($u,W2o),e($u,A$),e(A$,Q2o),e($u,H2o),e($,U2o),e($,Iu),e(Iu,Goe),e(Goe,J2o),e(Iu,Y2o),e(Iu,L$),e(L$,K2o),e(Iu,Z2o),e($,e1o),e($,Nu),e(Nu,Ooe),e(Ooe,o1o),e(Nu,r1o),e(Nu,B$),e(B$,t1o),e(Nu,a1o),e($,n1o),e($,ju),e(ju,Xoe),e(Xoe,s1o),e(ju,l1o),e(ju,x$),e(x$,i1o),e(ju,d1o),e($,c1o),e($,Du),e(Du,Voe),e(Voe,f1o),e(Du,m1o),e(Du,k$),e(k$,g1o),e(Du,h1o),e($,p1o),e($,qu),e(qu,zoe),e(zoe,_1o),e(qu,u1o),e(qu,R$),e(R$,b1o),e(qu,v1o),e($,T1o),e($,Gu),e(Gu,Woe),e(Woe,F1o),e(Gu,C1o),e(Gu,S$),e(S$,M1o),e(Gu,E1o),e($,y1o),e($,Ou),e(Ou,Qoe),e(Qoe,w1o),e(Ou,A1o),e(Ou,P$),e(P$,L1o),e(Ou,B1o),e($,x1o),e($,Xu),e(Xu,Hoe),e(Hoe,k1o),e(Xu,R1o),e(Xu,$$),e($$,S1o),e(Xu,P1o),e($,$1o),e($,Vu),e(Vu,Uoe),e(Uoe,I1o),e(Vu,N1o),e(Vu,I$),e(I$,j1o),e(Vu,D1o),e($,q1o),e($,zu),e(zu,Joe),e(Joe,G1o),e(zu,O1o),e(zu,N$),e(N$,X1o),e(zu,V1o),e($,z1o),e($,Wu),e(Wu,Yoe),e(Yoe,W1o),e(Wu,Q1o),e(Wu,j$),e(j$,H1o),e(Wu,U1o),e($,J1o),e($,Qu),e(Qu,Koe),e(Koe,Y1o),e(Qu,K1o),e(Qu,D$),e(D$,Z1o),e(Qu,ebo),e(qe,obo),e(qe,Hu),e(Hu,rbo),e(Hu,Zoe),e(Zoe,tbo),e(Hu,abo),e(Hu,ere),e(ere,nbo),e(qe,sbo),e(qe,ore),e(ore,lbo),e(qe,ibo),g(ny,qe,null),b(c,vke,u),b(c,sd,u),e(sd,Uu),e(Uu,rre),g(sy,rre,null),e(sd,dbo),e(sd,tre),e(tre,cbo),b(c,Tke,u),b(c,Zo,u),g(ly,Zo,null),e(Zo,fbo),e(Zo,ld),e(ld,mbo),e(ld,are),e(are,gbo),e(ld,hbo),e(ld,nre),e(nre,pbo),e(ld,_bo),e(Zo,ubo),e(Zo,iy),e(iy,bbo),e(iy,sre),e(sre,vbo),e(iy,Tbo),e(Zo,Fbo),e(Zo,Qr),g(dy,Qr,null),e(Qr,Cbo),e(Qr,lre),e(lre,Mbo),e(Qr,Ebo),e(Qr,id),e(id,ybo),e(id,ire),e(ire,wbo),e(id,Abo),e(id,dre),e(dre,Lbo),e(id,Bbo),e(Qr,xbo),e(Qr,cre),e(cre,kbo),e(Qr,Rbo),g(cy,Qr,null),e(Zo,Sbo),e(Zo,Ge),g(fy,Ge,null),e(Ge,Pbo),e(Ge,fre),e(fre,$bo),e(Ge,Ibo),e(Ge,Qa),e(Qa,Nbo),e(Qa,mre),e(mre,jbo),e(Qa,Dbo),e(Qa,gre),e(gre,qbo),e(Qa,Gbo),e(Qa,hre),e(hre,Obo),e(Qa,Xbo),e(Ge,Vbo),e(Ge,I),e(I,Ju),e(Ju,pre),e(pre,zbo),e(Ju,Wbo),e(Ju,q$),e(q$,Qbo),e(Ju,Hbo),e(I,Ubo),e(I,Yu),e(Yu,_re),e(_re,Jbo),e(Yu,Ybo),e(Yu,G$),e(G$,Kbo),e(Yu,Zbo),e(I,evo),e(I,Ku),e(Ku,ure),e(ure,ovo),e(Ku,rvo),e(Ku,O$),e(O$,tvo),e(Ku,avo),e(I,nvo),e(I,Zu),e(Zu,bre),e(bre,svo),e(Zu,lvo),e(Zu,X$),e(X$,ivo),e(Zu,dvo),e(I,cvo),e(I,e5),e(e5,vre),e(vre,fvo),e(e5,mvo),e(e5,V$),e(V$,gvo),e(e5,hvo),e(I,pvo),e(I,o5),e(o5,Tre),e(Tre,_vo),e(o5,uvo),e(o5,z$),e(z$,bvo),e(o5,vvo),e(I,Tvo),e(I,r5),e(r5,Fre),e(Fre,Fvo),e(r5,Cvo),e(r5,W$),e(W$,Mvo),e(r5,Evo),e(I,yvo),e(I,t5),e(t5,Cre),e(Cre,wvo),e(t5,Avo),e(t5,Q$),e(Q$,Lvo),e(t5,Bvo),e(I,xvo),e(I,a5),e(a5,Mre),e(Mre,kvo),e(a5,Rvo),e(a5,H$),e(H$,Svo),e(a5,Pvo),e(I,$vo),e(I,n5),e(n5,Ere),e(Ere,Ivo),e(n5,Nvo),e(n5,U$),e(U$,jvo),e(n5,Dvo),e(I,qvo),e(I,s5),e(s5,yre),e(yre,Gvo),e(s5,Ovo),e(s5,J$),e(J$,Xvo),e(s5,Vvo),e(I,zvo),e(I,l5),e(l5,wre),e(wre,Wvo),e(l5,Qvo),e(l5,Y$),e(Y$,Hvo),e(l5,Uvo),e(I,Jvo),e(I,i5),e(i5,Are),e(Are,Yvo),e(i5,Kvo),e(i5,K$),e(K$,Zvo),e(i5,e6o),e(I,o6o),e(I,d5),e(d5,Lre),e(Lre,r6o),e(d5,t6o),e(d5,Z$),e(Z$,a6o),e(d5,n6o),e(I,s6o),e(I,c5),e(c5,Bre),e(Bre,l6o),e(c5,i6o),e(c5,eI),e(eI,d6o),e(c5,c6o),e(I,f6o),e(I,f5),e(f5,xre),e(xre,m6o),e(f5,g6o),e(f5,oI),e(oI,h6o),e(f5,p6o),e(I,_6o),e(I,m5),e(m5,kre),e(kre,u6o),e(m5,b6o),e(m5,rI),e(rI,v6o),e(m5,T6o),e(I,F6o),e(I,g5),e(g5,Rre),e(Rre,C6o),e(g5,M6o),e(g5,tI),e(tI,E6o),e(g5,y6o),e(I,w6o),e(I,h5),e(h5,Sre),e(Sre,A6o),e(h5,L6o),e(h5,aI),e(aI,B6o),e(h5,x6o),e(I,k6o),e(I,p5),e(p5,Pre),e(Pre,R6o),e(p5,S6o),e(p5,nI),e(nI,P6o),e(p5,$6o),e(I,I6o),e(I,_5),e(_5,$re),e($re,N6o),e(_5,j6o),e(_5,sI),e(sI,D6o),e(_5,q6o),e(I,G6o),e(I,u5),e(u5,Ire),e(Ire,O6o),e(u5,X6o),e(u5,lI),e(lI,V6o),e(u5,z6o),e(I,W6o),e(I,b5),e(b5,Nre),e(Nre,Q6o),e(b5,H6o),e(b5,iI),e(iI,U6o),e(b5,J6o),e(I,Y6o),e(I,v5),e(v5,jre),e(jre,K6o),e(v5,Z6o),e(v5,dI),e(dI,eTo),e(v5,oTo),e(I,rTo),e(I,T5),e(T5,Dre),e(Dre,tTo),e(T5,aTo),e(T5,cI),e(cI,nTo),e(T5,sTo),e(I,lTo),e(I,F5),e(F5,qre),e(qre,iTo),e(F5,dTo),e(F5,fI),e(fI,cTo),e(F5,fTo),e(I,mTo),e(I,C5),e(C5,Gre),e(Gre,gTo),e(C5,hTo),e(C5,mI),e(mI,pTo),e(C5,_To),e(I,uTo),e(I,M5),e(M5,Ore),e(Ore,bTo),e(M5,vTo),e(M5,gI),e(gI,TTo),e(M5,FTo),e(I,CTo),e(I,E5),e(E5,Xre),e(Xre,MTo),e(E5,ETo),e(E5,hI),e(hI,yTo),e(E5,wTo),e(I,ATo),e(I,y5),e(y5,Vre),e(Vre,LTo),e(y5,BTo),e(y5,pI),e(pI,xTo),e(y5,kTo),e(I,RTo),e(I,w5),e(w5,zre),e(zre,STo),e(w5,PTo),e(w5,Wre),e(Wre,$To),e(w5,ITo),e(I,NTo),e(I,A5),e(A5,Qre),e(Qre,jTo),e(A5,DTo),e(A5,_I),e(_I,qTo),e(A5,GTo),e(I,OTo),e(I,L5),e(L5,Hre),e(Hre,XTo),e(L5,VTo),e(L5,uI),e(uI,zTo),e(L5,WTo),e(I,QTo),e(I,B5),e(B5,Ure),e(Ure,HTo),e(B5,UTo),e(B5,bI),e(bI,JTo),e(B5,YTo),e(I,KTo),e(I,x5),e(x5,Jre),e(Jre,ZTo),e(x5,eFo),e(x5,vI),e(vI,oFo),e(x5,rFo),e(Ge,tFo),e(Ge,k5),e(k5,aFo),e(k5,Yre),e(Yre,nFo),e(k5,sFo),e(k5,Kre),e(Kre,lFo),e(Ge,iFo),e(Ge,Zre),e(Zre,dFo),e(Ge,cFo),g(my,Ge,null),b(c,Fke,u),b(c,dd,u),e(dd,R5),e(R5,ete),g(gy,ete,null),e(dd,fFo),e(dd,ote),e(ote,mFo),b(c,Cke,u),b(c,er,u),g(hy,er,null),e(er,gFo),e(er,cd),e(cd,hFo),e(cd,rte),e(rte,pFo),e(cd,_Fo),e(cd,tte),e(tte,uFo),e(cd,bFo),e(er,vFo),e(er,py),e(py,TFo),e(py,ate),e(ate,FFo),e(py,CFo),e(er,MFo),e(er,Hr),g(_y,Hr,null),e(Hr,EFo),e(Hr,nte),e(nte,yFo),e(Hr,wFo),e(Hr,fd),e(fd,AFo),e(fd,ste),e(ste,LFo),e(fd,BFo),e(fd,lte),e(lte,xFo),e(fd,kFo),e(Hr,RFo),e(Hr,ite),e(ite,SFo),e(Hr,PFo),g(uy,Hr,null),e(er,$Fo),e(er,Oe),g(by,Oe,null),e(Oe,IFo),e(Oe,dte),e(dte,NFo),e(Oe,jFo),e(Oe,Ha),e(Ha,DFo),e(Ha,cte),e(cte,qFo),e(Ha,GFo),e(Ha,fte),e(fte,OFo),e(Ha,XFo),e(Ha,mte),e(mte,VFo),e(Ha,zFo),e(Oe,WFo),e(Oe,se),e(se,S5),e(S5,gte),e(gte,QFo),e(S5,HFo),e(S5,TI),e(TI,UFo),e(S5,JFo),e(se,YFo),e(se,P5),e(P5,hte),e(hte,KFo),e(P5,ZFo),e(P5,FI),e(FI,eCo),e(P5,oCo),e(se,rCo),e(se,$5),e($5,pte),e(pte,tCo),e($5,aCo),e($5,CI),e(CI,nCo),e($5,sCo),e(se,lCo),e(se,I5),e(I5,_te),e(_te,iCo),e(I5,dCo),e(I5,MI),e(MI,cCo),e(I5,fCo),e(se,mCo),e(se,N5),e(N5,ute),e(ute,gCo),e(N5,hCo),e(N5,EI),e(EI,pCo),e(N5,_Co),e(se,uCo),e(se,j5),e(j5,bte),e(bte,bCo),e(j5,vCo),e(j5,yI),e(yI,TCo),e(j5,FCo),e(se,CCo),e(se,D5),e(D5,vte),e(vte,MCo),e(D5,ECo),e(D5,wI),e(wI,yCo),e(D5,wCo),e(se,ACo),e(se,q5),e(q5,Tte),e(Tte,LCo),e(q5,BCo),e(q5,AI),e(AI,xCo),e(q5,kCo),e(se,RCo),e(se,G5),e(G5,Fte),e(Fte,SCo),e(G5,PCo),e(G5,LI),e(LI,$Co),e(G5,ICo),e(se,NCo),e(se,O5),e(O5,Cte),e(Cte,jCo),e(O5,DCo),e(O5,BI),e(BI,qCo),e(O5,GCo),e(se,OCo),e(se,X5),e(X5,Mte),e(Mte,XCo),e(X5,VCo),e(X5,xI),e(xI,zCo),e(X5,WCo),e(se,QCo),e(se,V5),e(V5,Ete),e(Ete,HCo),e(V5,UCo),e(V5,kI),e(kI,JCo),e(V5,YCo),e(se,KCo),e(se,z5),e(z5,yte),e(yte,ZCo),e(z5,eMo),e(z5,RI),e(RI,oMo),e(z5,rMo),e(se,tMo),e(se,W5),e(W5,wte),e(wte,aMo),e(W5,nMo),e(W5,SI),e(SI,sMo),e(W5,lMo),e(se,iMo),e(se,Q5),e(Q5,Ate),e(Ate,dMo),e(Q5,cMo),e(Q5,PI),e(PI,fMo),e(Q5,mMo),e(se,gMo),e(se,H5),e(H5,Lte),e(Lte,hMo),e(H5,pMo),e(H5,$I),e($I,_Mo),e(H5,uMo),e(Oe,bMo),e(Oe,U5),e(U5,vMo),e(U5,Bte),e(Bte,TMo),e(U5,FMo),e(U5,xte),e(xte,CMo),e(Oe,MMo),e(Oe,kte),e(kte,EMo),e(Oe,yMo),g(vy,Oe,null),b(c,Mke,u),b(c,md,u),e(md,J5),e(J5,Rte),g(Ty,Rte,null),e(md,wMo),e(md,Ste),e(Ste,AMo),b(c,Eke,u),b(c,or,u),g(Fy,or,null),e(or,LMo),e(or,gd),e(gd,BMo),e(gd,Pte),e(Pte,xMo),e(gd,kMo),e(gd,$te),e($te,RMo),e(gd,SMo),e(or,PMo),e(or,Cy),e(Cy,$Mo),e(Cy,Ite),e(Ite,IMo),e(Cy,NMo),e(or,jMo),e(or,Ur),g(My,Ur,null),e(Ur,DMo),e(Ur,Nte),e(Nte,qMo),e(Ur,GMo),e(Ur,hd),e(hd,OMo),e(hd,jte),e(jte,XMo),e(hd,VMo),e(hd,Dte),e(Dte,zMo),e(hd,WMo),e(Ur,QMo),e(Ur,qte),e(qte,HMo),e(Ur,UMo),g(Ey,Ur,null),e(or,JMo),e(or,Xe),g(yy,Xe,null),e(Xe,YMo),e(Xe,Gte),e(Gte,KMo),e(Xe,ZMo),e(Xe,Ua),e(Ua,e4o),e(Ua,Ote),e(Ote,o4o),e(Ua,r4o),e(Ua,Xte),e(Xte,t4o),e(Ua,a4o),e(Ua,Vte),e(Vte,n4o),e(Ua,s4o),e(Xe,l4o),e(Xe,A),e(A,Y5),e(Y5,zte),e(zte,i4o),e(Y5,d4o),e(Y5,II),e(II,c4o),e(Y5,f4o),e(A,m4o),e(A,K5),e(K5,Wte),e(Wte,g4o),e(K5,h4o),e(K5,NI),e(NI,p4o),e(K5,_4o),e(A,u4o),e(A,Z5),e(Z5,Qte),e(Qte,b4o),e(Z5,v4o),e(Z5,jI),e(jI,T4o),e(Z5,F4o),e(A,C4o),e(A,e2),e(e2,Hte),e(Hte,M4o),e(e2,E4o),e(e2,DI),e(DI,y4o),e(e2,w4o),e(A,A4o),e(A,o2),e(o2,Ute),e(Ute,L4o),e(o2,B4o),e(o2,qI),e(qI,x4o),e(o2,k4o),e(A,R4o),e(A,r2),e(r2,Jte),e(Jte,S4o),e(r2,P4o),e(r2,GI),e(GI,$4o),e(r2,I4o),e(A,N4o),e(A,t2),e(t2,Yte),e(Yte,j4o),e(t2,D4o),e(t2,OI),e(OI,q4o),e(t2,G4o),e(A,O4o),e(A,a2),e(a2,Kte),e(Kte,X4o),e(a2,V4o),e(a2,XI),e(XI,z4o),e(a2,W4o),e(A,Q4o),e(A,n2),e(n2,Zte),e(Zte,H4o),e(n2,U4o),e(n2,VI),e(VI,J4o),e(n2,Y4o),e(A,K4o),e(A,s2),e(s2,eae),e(eae,Z4o),e(s2,eEo),e(s2,zI),e(zI,oEo),e(s2,rEo),e(A,tEo),e(A,l2),e(l2,oae),e(oae,aEo),e(l2,nEo),e(l2,WI),e(WI,sEo),e(l2,lEo),e(A,iEo),e(A,i2),e(i2,rae),e(rae,dEo),e(i2,cEo),e(i2,QI),e(QI,fEo),e(i2,mEo),e(A,gEo),e(A,d2),e(d2,tae),e(tae,hEo),e(d2,pEo),e(d2,HI),e(HI,_Eo),e(d2,uEo),e(A,bEo),e(A,c2),e(c2,aae),e(aae,vEo),e(c2,TEo),e(c2,UI),e(UI,FEo),e(c2,CEo),e(A,MEo),e(A,f2),e(f2,nae),e(nae,EEo),e(f2,yEo),e(f2,JI),e(JI,wEo),e(f2,AEo),e(A,LEo),e(A,m2),e(m2,sae),e(sae,BEo),e(m2,xEo),e(m2,YI),e(YI,kEo),e(m2,REo),e(A,SEo),e(A,g2),e(g2,lae),e(lae,PEo),e(g2,$Eo),e(g2,KI),e(KI,IEo),e(g2,NEo),e(A,jEo),e(A,h2),e(h2,iae),e(iae,DEo),e(h2,qEo),e(h2,ZI),e(ZI,GEo),e(h2,OEo),e(A,XEo),e(A,p2),e(p2,dae),e(dae,VEo),e(p2,zEo),e(p2,eN),e(eN,WEo),e(p2,QEo),e(A,HEo),e(A,_2),e(_2,cae),e(cae,UEo),e(_2,JEo),e(_2,oN),e(oN,YEo),e(_2,KEo),e(A,ZEo),e(A,u2),e(u2,fae),e(fae,e3o),e(u2,o3o),e(u2,rN),e(rN,r3o),e(u2,t3o),e(A,a3o),e(A,b2),e(b2,mae),e(mae,n3o),e(b2,s3o),e(b2,tN),e(tN,l3o),e(b2,i3o),e(A,d3o),e(A,v2),e(v2,gae),e(gae,c3o),e(v2,f3o),e(v2,aN),e(aN,m3o),e(v2,g3o),e(A,h3o),e(A,T2),e(T2,hae),e(hae,p3o),e(T2,_3o),e(T2,nN),e(nN,u3o),e(T2,b3o),e(A,v3o),e(A,F2),e(F2,pae),e(pae,T3o),e(F2,F3o),e(F2,sN),e(sN,C3o),e(F2,M3o),e(A,E3o),e(A,C2),e(C2,_ae),e(_ae,y3o),e(C2,w3o),e(C2,lN),e(lN,A3o),e(C2,L3o),e(A,B3o),e(A,M2),e(M2,uae),e(uae,x3o),e(M2,k3o),e(M2,iN),e(iN,R3o),e(M2,S3o),e(A,P3o),e(A,E2),e(E2,bae),e(bae,$3o),e(E2,I3o),e(E2,dN),e(dN,N3o),e(E2,j3o),e(A,D3o),e(A,y2),e(y2,vae),e(vae,q3o),e(y2,G3o),e(y2,cN),e(cN,O3o),e(y2,X3o),e(A,V3o),e(A,w2),e(w2,Tae),e(Tae,z3o),e(w2,W3o),e(w2,fN),e(fN,Q3o),e(w2,H3o),e(A,U3o),e(A,A2),e(A2,Fae),e(Fae,J3o),e(A2,Y3o),e(A2,mN),e(mN,K3o),e(A2,Z3o),e(A,eyo),e(A,L2),e(L2,Cae),e(Cae,oyo),e(L2,ryo),e(L2,gN),e(gN,tyo),e(L2,ayo),e(A,nyo),e(A,B2),e(B2,Mae),e(Mae,syo),e(B2,lyo),e(B2,hN),e(hN,iyo),e(B2,dyo),e(A,cyo),e(A,x2),e(x2,Eae),e(Eae,fyo),e(x2,myo),e(x2,pN),e(pN,gyo),e(x2,hyo),e(A,pyo),e(A,k2),e(k2,yae),e(yae,_yo),e(k2,uyo),e(k2,_N),e(_N,byo),e(k2,vyo),e(A,Tyo),e(A,R2),e(R2,wae),e(wae,Fyo),e(R2,Cyo),e(R2,uN),e(uN,Myo),e(R2,Eyo),e(A,yyo),e(A,S2),e(S2,Aae),e(Aae,wyo),e(S2,Ayo),e(S2,bN),e(bN,Lyo),e(S2,Byo),e(A,xyo),e(A,P2),e(P2,Lae),e(Lae,kyo),e(P2,Ryo),e(P2,vN),e(vN,Syo),e(P2,Pyo),e(A,$yo),e(A,$2),e($2,Bae),e(Bae,Iyo),e($2,Nyo),e($2,TN),e(TN,jyo),e($2,Dyo),e(A,qyo),e(A,I2),e(I2,xae),e(xae,Gyo),e(I2,Oyo),e(I2,FN),e(FN,Xyo),e(I2,Vyo),e(A,zyo),e(A,N2),e(N2,kae),e(kae,Wyo),e(N2,Qyo),e(N2,CN),e(CN,Hyo),e(N2,Uyo),e(A,Jyo),e(A,j2),e(j2,Rae),e(Rae,Yyo),e(j2,Kyo),e(j2,MN),e(MN,Zyo),e(j2,ewo),e(A,owo),e(A,D2),e(D2,Sae),e(Sae,rwo),e(D2,two),e(D2,EN),e(EN,awo),e(D2,nwo),e(A,swo),e(A,q2),e(q2,Pae),e(Pae,lwo),e(q2,iwo),e(q2,yN),e(yN,dwo),e(q2,cwo),e(A,fwo),e(A,G2),e(G2,$ae),e($ae,mwo),e(G2,gwo),e(G2,wN),e(wN,hwo),e(G2,pwo),e(A,_wo),e(A,O2),e(O2,Iae),e(Iae,uwo),e(O2,bwo),e(O2,AN),e(AN,vwo),e(O2,Two),e(Xe,Fwo),e(Xe,X2),e(X2,Cwo),e(X2,Nae),e(Nae,Mwo),e(X2,Ewo),e(X2,jae),e(jae,ywo),e(Xe,wwo),e(Xe,Dae),e(Dae,Awo),e(Xe,Lwo),g(wy,Xe,null),b(c,yke,u),b(c,pd,u),e(pd,V2),e(V2,qae),g(Ay,qae,null),e(pd,Bwo),e(pd,Gae),e(Gae,xwo),b(c,wke,u),b(c,rr,u),g(Ly,rr,null),e(rr,kwo),e(rr,_d),e(_d,Rwo),e(_d,Oae),e(Oae,Swo),e(_d,Pwo),e(_d,Xae),e(Xae,$wo),e(_d,Iwo),e(rr,Nwo),e(rr,By),e(By,jwo),e(By,Vae),e(Vae,Dwo),e(By,qwo),e(rr,Gwo),e(rr,Jr),g(xy,Jr,null),e(Jr,Owo),e(Jr,zae),e(zae,Xwo),e(Jr,Vwo),e(Jr,ud),e(ud,zwo),e(ud,Wae),e(Wae,Wwo),e(ud,Qwo),e(ud,Qae),e(Qae,Hwo),e(ud,Uwo),e(Jr,Jwo),e(Jr,Hae),e(Hae,Ywo),e(Jr,Kwo),g(ky,Jr,null),e(rr,Zwo),e(rr,Ve),g(Ry,Ve,null),e(Ve,eAo),e(Ve,Uae),e(Uae,oAo),e(Ve,rAo),e(Ve,Ja),e(Ja,tAo),e(Ja,Jae),e(Jae,aAo),e(Ja,nAo),e(Ja,Yae),e(Yae,sAo),e(Ja,lAo),e(Ja,Kae),e(Kae,iAo),e(Ja,dAo),e(Ve,cAo),e(Ve,G),e(G,z2),e(z2,Zae),e(Zae,fAo),e(z2,mAo),e(z2,LN),e(LN,gAo),e(z2,hAo),e(G,pAo),e(G,W2),e(W2,ene),e(ene,_Ao),e(W2,uAo),e(W2,BN),e(BN,bAo),e(W2,vAo),e(G,TAo),e(G,Q2),e(Q2,one),e(one,FAo),e(Q2,CAo),e(Q2,xN),e(xN,MAo),e(Q2,EAo),e(G,yAo),e(G,H2),e(H2,rne),e(rne,wAo),e(H2,AAo),e(H2,kN),e(kN,LAo),e(H2,BAo),e(G,xAo),e(G,U2),e(U2,tne),e(tne,kAo),e(U2,RAo),e(U2,RN),e(RN,SAo),e(U2,PAo),e(G,$Ao),e(G,J2),e(J2,ane),e(ane,IAo),e(J2,NAo),e(J2,SN),e(SN,jAo),e(J2,DAo),e(G,qAo),e(G,Y2),e(Y2,nne),e(nne,GAo),e(Y2,OAo),e(Y2,PN),e(PN,XAo),e(Y2,VAo),e(G,zAo),e(G,K2),e(K2,sne),e(sne,WAo),e(K2,QAo),e(K2,$N),e($N,HAo),e(K2,UAo),e(G,JAo),e(G,Z2),e(Z2,lne),e(lne,YAo),e(Z2,KAo),e(Z2,IN),e(IN,ZAo),e(Z2,e0o),e(G,o0o),e(G,e1),e(e1,ine),e(ine,r0o),e(e1,t0o),e(e1,NN),e(NN,a0o),e(e1,n0o),e(G,s0o),e(G,o1),e(o1,dne),e(dne,l0o),e(o1,i0o),e(o1,jN),e(jN,d0o),e(o1,c0o),e(G,f0o),e(G,r1),e(r1,cne),e(cne,m0o),e(r1,g0o),e(r1,DN),e(DN,h0o),e(r1,p0o),e(G,_0o),e(G,t1),e(t1,fne),e(fne,u0o),e(t1,b0o),e(t1,qN),e(qN,v0o),e(t1,T0o),e(G,F0o),e(G,a1),e(a1,mne),e(mne,C0o),e(a1,M0o),e(a1,GN),e(GN,E0o),e(a1,y0o),e(G,w0o),e(G,n1),e(n1,gne),e(gne,A0o),e(n1,L0o),e(n1,ON),e(ON,B0o),e(n1,x0o),e(G,k0o),e(G,s1),e(s1,hne),e(hne,R0o),e(s1,S0o),e(s1,XN),e(XN,P0o),e(s1,$0o),e(G,I0o),e(G,l1),e(l1,pne),e(pne,N0o),e(l1,j0o),e(l1,VN),e(VN,D0o),e(l1,q0o),e(G,G0o),e(G,i1),e(i1,_ne),e(_ne,O0o),e(i1,X0o),e(i1,zN),e(zN,V0o),e(i1,z0o),e(G,W0o),e(G,d1),e(d1,une),e(une,Q0o),e(d1,H0o),e(d1,WN),e(WN,U0o),e(d1,J0o),e(G,Y0o),e(G,c1),e(c1,bne),e(bne,K0o),e(c1,Z0o),e(c1,QN),e(QN,eLo),e(c1,oLo),e(G,rLo),e(G,f1),e(f1,vne),e(vne,tLo),e(f1,aLo),e(f1,HN),e(HN,nLo),e(f1,sLo),e(G,lLo),e(G,m1),e(m1,Tne),e(Tne,iLo),e(m1,dLo),e(m1,UN),e(UN,cLo),e(m1,fLo),e(G,mLo),e(G,g1),e(g1,Fne),e(Fne,gLo),e(g1,hLo),e(g1,JN),e(JN,pLo),e(g1,_Lo),e(G,uLo),e(G,h1),e(h1,Cne),e(Cne,bLo),e(h1,vLo),e(h1,YN),e(YN,TLo),e(h1,FLo),e(G,CLo),e(G,p1),e(p1,Mne),e(Mne,MLo),e(p1,ELo),e(p1,KN),e(KN,yLo),e(p1,wLo),e(G,ALo),e(G,_1),e(_1,Ene),e(Ene,LLo),e(_1,BLo),e(_1,ZN),e(ZN,xLo),e(_1,kLo),e(G,RLo),e(G,u1),e(u1,yne),e(yne,SLo),e(u1,PLo),e(u1,ej),e(ej,$Lo),e(u1,ILo),e(G,NLo),e(G,b1),e(b1,wne),e(wne,jLo),e(b1,DLo),e(b1,oj),e(oj,qLo),e(b1,GLo),e(Ve,OLo),e(Ve,v1),e(v1,XLo),e(v1,Ane),e(Ane,VLo),e(v1,zLo),e(v1,Lne),e(Lne,WLo),e(Ve,QLo),e(Ve,Bne),e(Bne,HLo),e(Ve,ULo),g(Sy,Ve,null),b(c,Ake,u),b(c,bd,u),e(bd,T1),e(T1,xne),g(Py,xne,null),e(bd,JLo),e(bd,kne),e(kne,YLo),b(c,Lke,u),b(c,tr,u),g($y,tr,null),e(tr,KLo),e(tr,vd),e(vd,ZLo),e(vd,Rne),e(Rne,e8o),e(vd,o8o),e(vd,Sne),e(Sne,r8o),e(vd,t8o),e(tr,a8o),e(tr,Iy),e(Iy,n8o),e(Iy,Pne),e(Pne,s8o),e(Iy,l8o),e(tr,i8o),e(tr,Yr),g(Ny,Yr,null),e(Yr,d8o),e(Yr,$ne),e($ne,c8o),e(Yr,f8o),e(Yr,Td),e(Td,m8o),e(Td,Ine),e(Ine,g8o),e(Td,h8o),e(Td,Nne),e(Nne,p8o),e(Td,_8o),e(Yr,u8o),e(Yr,jne),e(jne,b8o),e(Yr,v8o),g(jy,Yr,null),e(tr,T8o),e(tr,ze),g(Dy,ze,null),e(ze,F8o),e(ze,Dne),e(Dne,C8o),e(ze,M8o),e(ze,Ya),e(Ya,E8o),e(Ya,qne),e(qne,y8o),e(Ya,w8o),e(Ya,Gne),e(Gne,A8o),e(Ya,L8o),e(Ya,One),e(One,B8o),e(Ya,x8o),e(ze,k8o),e(ze,da),e(da,F1),e(F1,Xne),e(Xne,R8o),e(F1,S8o),e(F1,rj),e(rj,P8o),e(F1,$8o),e(da,I8o),e(da,C1),e(C1,Vne),e(Vne,N8o),e(C1,j8o),e(C1,tj),e(tj,D8o),e(C1,q8o),e(da,G8o),e(da,M1),e(M1,zne),e(zne,O8o),e(M1,X8o),e(M1,aj),e(aj,V8o),e(M1,z8o),e(da,W8o),e(da,E1),e(E1,Wne),e(Wne,Q8o),e(E1,H8o),e(E1,nj),e(nj,U8o),e(E1,J8o),e(da,Y8o),e(da,y1),e(y1,Qne),e(Qne,K8o),e(y1,Z8o),e(y1,sj),e(sj,e7o),e(y1,o7o),e(ze,r7o),e(ze,w1),e(w1,t7o),e(w1,Hne),e(Hne,a7o),e(w1,n7o),e(w1,Une),e(Une,s7o),e(ze,l7o),e(ze,Jne),e(Jne,i7o),e(ze,d7o),g(qy,ze,null),b(c,Bke,u),b(c,Fd,u),e(Fd,A1),e(A1,Yne),g(Gy,Yne,null),e(Fd,c7o),e(Fd,Kne),e(Kne,f7o),b(c,xke,u),b(c,ar,u),g(Oy,ar,null),e(ar,m7o),e(ar,Cd),e(Cd,g7o),e(Cd,Zne),e(Zne,h7o),e(Cd,p7o),e(Cd,ese),e(ese,_7o),e(Cd,u7o),e(ar,b7o),e(ar,Xy),e(Xy,v7o),e(Xy,ose),e(ose,T7o),e(Xy,F7o),e(ar,C7o),e(ar,Kr),g(Vy,Kr,null),e(Kr,M7o),e(Kr,rse),e(rse,E7o),e(Kr,y7o),e(Kr,Md),e(Md,w7o),e(Md,tse),e(tse,A7o),e(Md,L7o),e(Md,ase),e(ase,B7o),e(Md,x7o),e(Kr,k7o),e(Kr,nse),e(nse,R7o),e(Kr,S7o),g(zy,Kr,null),e(ar,P7o),e(ar,We),g(Wy,We,null),e(We,$7o),e(We,sse),e(sse,I7o),e(We,N7o),e(We,Ka),e(Ka,j7o),e(Ka,lse),e(lse,D7o),e(Ka,q7o),e(Ka,ise),e(ise,G7o),e(Ka,O7o),e(Ka,dse),e(dse,X7o),e(Ka,V7o),e(We,z7o),e(We,D),e(D,L1),e(L1,cse),e(cse,W7o),e(L1,Q7o),e(L1,lj),e(lj,H7o),e(L1,U7o),e(D,J7o),e(D,B1),e(B1,fse),e(fse,Y7o),e(B1,K7o),e(B1,ij),e(ij,Z7o),e(B1,e9o),e(D,o9o),e(D,x1),e(x1,mse),e(mse,r9o),e(x1,t9o),e(x1,dj),e(dj,a9o),e(x1,n9o),e(D,s9o),e(D,k1),e(k1,gse),e(gse,l9o),e(k1,i9o),e(k1,cj),e(cj,d9o),e(k1,c9o),e(D,f9o),e(D,R1),e(R1,hse),e(hse,m9o),e(R1,g9o),e(R1,fj),e(fj,h9o),e(R1,p9o),e(D,_9o),e(D,S1),e(S1,pse),e(pse,u9o),e(S1,b9o),e(S1,mj),e(mj,v9o),e(S1,T9o),e(D,F9o),e(D,P1),e(P1,_se),e(_se,C9o),e(P1,M9o),e(P1,gj),e(gj,E9o),e(P1,y9o),e(D,w9o),e(D,$1),e($1,use),e(use,A9o),e($1,L9o),e($1,hj),e(hj,B9o),e($1,x9o),e(D,k9o),e(D,I1),e(I1,bse),e(bse,R9o),e(I1,S9o),e(I1,pj),e(pj,P9o),e(I1,$9o),e(D,I9o),e(D,N1),e(N1,vse),e(vse,N9o),e(N1,j9o),e(N1,_j),e(_j,D9o),e(N1,q9o),e(D,G9o),e(D,j1),e(j1,Tse),e(Tse,O9o),e(j1,X9o),e(j1,uj),e(uj,V9o),e(j1,z9o),e(D,W9o),e(D,D1),e(D1,Fse),e(Fse,Q9o),e(D1,H9o),e(D1,bj),e(bj,U9o),e(D1,J9o),e(D,Y9o),e(D,q1),e(q1,Cse),e(Cse,K9o),e(q1,Z9o),e(q1,vj),e(vj,eBo),e(q1,oBo),e(D,rBo),e(D,G1),e(G1,Mse),e(Mse,tBo),e(G1,aBo),e(G1,Tj),e(Tj,nBo),e(G1,sBo),e(D,lBo),e(D,O1),e(O1,Ese),e(Ese,iBo),e(O1,dBo),e(O1,Fj),e(Fj,cBo),e(O1,fBo),e(D,mBo),e(D,X1),e(X1,yse),e(yse,gBo),e(X1,hBo),e(X1,Cj),e(Cj,pBo),e(X1,_Bo),e(D,uBo),e(D,V1),e(V1,wse),e(wse,bBo),e(V1,vBo),e(V1,Mj),e(Mj,TBo),e(V1,FBo),e(D,CBo),e(D,z1),e(z1,Ase),e(Ase,MBo),e(z1,EBo),e(z1,Ej),e(Ej,yBo),e(z1,wBo),e(D,ABo),e(D,W1),e(W1,Lse),e(Lse,LBo),e(W1,BBo),e(W1,yj),e(yj,xBo),e(W1,kBo),e(D,RBo),e(D,Q1),e(Q1,Bse),e(Bse,SBo),e(Q1,PBo),e(Q1,wj),e(wj,$Bo),e(Q1,IBo),e(D,NBo),e(D,H1),e(H1,xse),e(xse,jBo),e(H1,DBo),e(H1,Aj),e(Aj,qBo),e(H1,GBo),e(D,OBo),e(D,U1),e(U1,kse),e(kse,XBo),e(U1,VBo),e(U1,Lj),e(Lj,zBo),e(U1,WBo),e(D,QBo),e(D,J1),e(J1,Rse),e(Rse,HBo),e(J1,UBo),e(J1,Bj),e(Bj,JBo),e(J1,YBo),e(D,KBo),e(D,Y1),e(Y1,Sse),e(Sse,ZBo),e(Y1,exo),e(Y1,xj),e(xj,oxo),e(Y1,rxo),e(D,txo),e(D,K1),e(K1,Pse),e(Pse,axo),e(K1,nxo),e(K1,kj),e(kj,sxo),e(K1,lxo),e(D,ixo),e(D,Z1),e(Z1,$se),e($se,dxo),e(Z1,cxo),e(Z1,Rj),e(Rj,fxo),e(Z1,mxo),e(D,gxo),e(D,eb),e(eb,Ise),e(Ise,hxo),e(eb,pxo),e(eb,Sj),e(Sj,_xo),e(eb,uxo),e(D,bxo),e(D,ob),e(ob,Nse),e(Nse,vxo),e(ob,Txo),e(ob,Pj),e(Pj,Fxo),e(ob,Cxo),e(D,Mxo),e(D,rb),e(rb,jse),e(jse,Exo),e(rb,yxo),e(rb,$j),e($j,wxo),e(rb,Axo),e(D,Lxo),e(D,tb),e(tb,Dse),e(Dse,Bxo),e(tb,xxo),e(tb,Ij),e(Ij,kxo),e(tb,Rxo),e(D,Sxo),e(D,ab),e(ab,qse),e(qse,Pxo),e(ab,$xo),e(ab,Nj),e(Nj,Ixo),e(ab,Nxo),e(D,jxo),e(D,nb),e(nb,Gse),e(Gse,Dxo),e(nb,qxo),e(nb,jj),e(jj,Gxo),e(nb,Oxo),e(D,Xxo),e(D,sb),e(sb,Ose),e(Ose,Vxo),e(sb,zxo),e(sb,Dj),e(Dj,Wxo),e(sb,Qxo),e(We,Hxo),e(We,lb),e(lb,Uxo),e(lb,Xse),e(Xse,Jxo),e(lb,Yxo),e(lb,Vse),e(Vse,Kxo),e(We,Zxo),e(We,zse),e(zse,eko),e(We,oko),g(Qy,We,null),b(c,kke,u),b(c,Ed,u),e(Ed,ib),e(ib,Wse),g(Hy,Wse,null),e(Ed,rko),e(Ed,Qse),e(Qse,tko),b(c,Rke,u),b(c,nr,u),g(Uy,nr,null),e(nr,ako),e(nr,yd),e(yd,nko),e(yd,Hse),e(Hse,sko),e(yd,lko),e(yd,Use),e(Use,iko),e(yd,dko),e(nr,cko),e(nr,Jy),e(Jy,fko),e(Jy,Jse),e(Jse,mko),e(Jy,gko),e(nr,hko),e(nr,Zr),g(Yy,Zr,null),e(Zr,pko),e(Zr,Yse),e(Yse,_ko),e(Zr,uko),e(Zr,wd),e(wd,bko),e(wd,Kse),e(Kse,vko),e(wd,Tko),e(wd,Zse),e(Zse,Fko),e(wd,Cko),e(Zr,Mko),e(Zr,ele),e(ele,Eko),e(Zr,yko),g(Ky,Zr,null),e(nr,wko),e(nr,Qe),g(Zy,Qe,null),e(Qe,Ako),e(Qe,ole),e(ole,Lko),e(Qe,Bko),e(Qe,Za),e(Za,xko),e(Za,rle),e(rle,kko),e(Za,Rko),e(Za,tle),e(tle,Sko),e(Za,Pko),e(Za,ale),e(ale,$ko),e(Za,Iko),e(Qe,Nko),e(Qe,R),e(R,db),e(db,nle),e(nle,jko),e(db,Dko),e(db,qj),e(qj,qko),e(db,Gko),e(R,Oko),e(R,cb),e(cb,sle),e(sle,Xko),e(cb,Vko),e(cb,Gj),e(Gj,zko),e(cb,Wko),e(R,Qko),e(R,fb),e(fb,lle),e(lle,Hko),e(fb,Uko),e(fb,Oj),e(Oj,Jko),e(fb,Yko),e(R,Kko),e(R,mb),e(mb,ile),e(ile,Zko),e(mb,eRo),e(mb,Xj),e(Xj,oRo),e(mb,rRo),e(R,tRo),e(R,gb),e(gb,dle),e(dle,aRo),e(gb,nRo),e(gb,Vj),e(Vj,sRo),e(gb,lRo),e(R,iRo),e(R,hb),e(hb,cle),e(cle,dRo),e(hb,cRo),e(hb,zj),e(zj,fRo),e(hb,mRo),e(R,gRo),e(R,pb),e(pb,fle),e(fle,hRo),e(pb,pRo),e(pb,Wj),e(Wj,_Ro),e(pb,uRo),e(R,bRo),e(R,_b),e(_b,mle),e(mle,vRo),e(_b,TRo),e(_b,Qj),e(Qj,FRo),e(_b,CRo),e(R,MRo),e(R,ub),e(ub,gle),e(gle,ERo),e(ub,yRo),e(ub,Hj),e(Hj,wRo),e(ub,ARo),e(R,LRo),e(R,bb),e(bb,hle),e(hle,BRo),e(bb,xRo),e(bb,Uj),e(Uj,kRo),e(bb,RRo),e(R,SRo),e(R,vb),e(vb,ple),e(ple,PRo),e(vb,$Ro),e(vb,Jj),e(Jj,IRo),e(vb,NRo),e(R,jRo),e(R,Tb),e(Tb,_le),e(_le,DRo),e(Tb,qRo),e(Tb,Yj),e(Yj,GRo),e(Tb,ORo),e(R,XRo),e(R,Fb),e(Fb,ule),e(ule,VRo),e(Fb,zRo),e(Fb,Kj),e(Kj,WRo),e(Fb,QRo),e(R,HRo),e(R,Cb),e(Cb,ble),e(ble,URo),e(Cb,JRo),e(Cb,Zj),e(Zj,YRo),e(Cb,KRo),e(R,ZRo),e(R,Mb),e(Mb,vle),e(vle,eSo),e(Mb,oSo),e(Mb,eD),e(eD,rSo),e(Mb,tSo),e(R,aSo),e(R,Eb),e(Eb,Tle),e(Tle,nSo),e(Eb,sSo),e(Eb,oD),e(oD,lSo),e(Eb,iSo),e(R,dSo),e(R,yb),e(yb,Fle),e(Fle,cSo),e(yb,fSo),e(yb,rD),e(rD,mSo),e(yb,gSo),e(R,hSo),e(R,wb),e(wb,Cle),e(Cle,pSo),e(wb,_So),e(wb,tD),e(tD,uSo),e(wb,bSo),e(R,vSo),e(R,Ab),e(Ab,Mle),e(Mle,TSo),e(Ab,FSo),e(Ab,aD),e(aD,CSo),e(Ab,MSo),e(R,ESo),e(R,Lb),e(Lb,Ele),e(Ele,ySo),e(Lb,wSo),e(Lb,nD),e(nD,ASo),e(Lb,LSo),e(R,BSo),e(R,Bb),e(Bb,yle),e(yle,xSo),e(Bb,kSo),e(Bb,sD),e(sD,RSo),e(Bb,SSo),e(R,PSo),e(R,xb),e(xb,wle),e(wle,$So),e(xb,ISo),e(xb,lD),e(lD,NSo),e(xb,jSo),e(R,DSo),e(R,kb),e(kb,Ale),e(Ale,qSo),e(kb,GSo),e(kb,iD),e(iD,OSo),e(kb,XSo),e(R,VSo),e(R,Rb),e(Rb,Lle),e(Lle,zSo),e(Rb,WSo),e(Rb,dD),e(dD,QSo),e(Rb,HSo),e(R,USo),e(R,Sb),e(Sb,Ble),e(Ble,JSo),e(Sb,YSo),e(Sb,cD),e(cD,KSo),e(Sb,ZSo),e(R,ePo),e(R,Pb),e(Pb,xle),e(xle,oPo),e(Pb,rPo),e(Pb,fD),e(fD,tPo),e(Pb,aPo),e(R,nPo),e(R,$b),e($b,kle),e(kle,sPo),e($b,lPo),e($b,mD),e(mD,iPo),e($b,dPo),e(R,cPo),e(R,Ib),e(Ib,Rle),e(Rle,fPo),e(Ib,mPo),e(Ib,gD),e(gD,gPo),e(Ib,hPo),e(R,pPo),e(R,Nb),e(Nb,Sle),e(Sle,_Po),e(Nb,uPo),e(Nb,hD),e(hD,bPo),e(Nb,vPo),e(R,TPo),e(R,jb),e(jb,Ple),e(Ple,FPo),e(jb,CPo),e(jb,pD),e(pD,MPo),e(jb,EPo),e(R,yPo),e(R,Db),e(Db,$le),e($le,wPo),e(Db,APo),e(Db,_D),e(_D,LPo),e(Db,BPo),e(R,xPo),e(R,qb),e(qb,Ile),e(Ile,kPo),e(qb,RPo),e(qb,uD),e(uD,SPo),e(qb,PPo),e(R,$Po),e(R,Gb),e(Gb,Nle),e(Nle,IPo),e(Gb,NPo),e(Gb,bD),e(bD,jPo),e(Gb,DPo),e(R,qPo),e(R,Ob),e(Ob,jle),e(jle,GPo),e(Ob,OPo),e(Ob,vD),e(vD,XPo),e(Ob,VPo),e(R,zPo),e(R,Xb),e(Xb,Dle),e(Dle,WPo),e(Xb,QPo),e(Xb,TD),e(TD,HPo),e(Xb,UPo),e(R,JPo),e(R,Vb),e(Vb,qle),e(qle,YPo),e(Vb,KPo),e(Vb,FD),e(FD,ZPo),e(Vb,e$o),e(R,o$o),e(R,zb),e(zb,Gle),e(Gle,r$o),e(zb,t$o),e(zb,CD),e(CD,a$o),e(zb,n$o),e(R,s$o),e(R,Wb),e(Wb,Ole),e(Ole,l$o),e(Wb,i$o),e(Wb,MD),e(MD,d$o),e(Wb,c$o),e(R,f$o),e(R,Qb),e(Qb,Xle),e(Xle,m$o),e(Qb,g$o),e(Qb,ED),e(ED,h$o),e(Qb,p$o),e(Qe,_$o),e(Qe,Hb),e(Hb,u$o),e(Hb,Vle),e(Vle,b$o),e(Hb,v$o),e(Hb,zle),e(zle,T$o),e(Qe,F$o),e(Qe,Wle),e(Wle,C$o),e(Qe,M$o),g(ew,Qe,null),b(c,Ske,u),b(c,Ad,u),e(Ad,Ub),e(Ub,Qle),g(ow,Qle,null),e(Ad,E$o),e(Ad,Hle),e(Hle,y$o),b(c,Pke,u),b(c,sr,u),g(rw,sr,null),e(sr,w$o),e(sr,Ld),e(Ld,A$o),e(Ld,Ule),e(Ule,L$o),e(Ld,B$o),e(Ld,Jle),e(Jle,x$o),e(Ld,k$o),e(sr,R$o),e(sr,tw),e(tw,S$o),e(tw,Yle),e(Yle,P$o),e(tw,$$o),e(sr,I$o),e(sr,et),g(aw,et,null),e(et,N$o),e(et,Kle),e(Kle,j$o),e(et,D$o),e(et,Bd),e(Bd,q$o),e(Bd,Zle),e(Zle,G$o),e(Bd,O$o),e(Bd,eie),e(eie,X$o),e(Bd,V$o),e(et,z$o),e(et,oie),e(oie,W$o),e(et,Q$o),g(nw,et,null),e(sr,H$o),e(sr,He),g(sw,He,null),e(He,U$o),e(He,rie),e(rie,J$o),e(He,Y$o),e(He,en),e(en,K$o),e(en,tie),e(tie,Z$o),e(en,eIo),e(en,aie),e(aie,oIo),e(en,rIo),e(en,nie),e(nie,tIo),e(en,aIo),e(He,nIo),e(He,sie),e(sie,Jb),e(Jb,lie),e(lie,sIo),e(Jb,lIo),e(Jb,yD),e(yD,iIo),e(Jb,dIo),e(He,cIo),e(He,Yb),e(Yb,fIo),e(Yb,iie),e(iie,mIo),e(Yb,gIo),e(Yb,die),e(die,hIo),e(He,pIo),e(He,cie),e(cie,_Io),e(He,uIo),g(lw,He,null),b(c,$ke,u),b(c,xd,u),e(xd,Kb),e(Kb,fie),g(iw,fie,null),e(xd,bIo),e(xd,mie),e(mie,vIo),b(c,Ike,u),b(c,lr,u),g(dw,lr,null),e(lr,TIo),e(lr,kd),e(kd,FIo),e(kd,gie),e(gie,CIo),e(kd,MIo),e(kd,hie),e(hie,EIo),e(kd,yIo),e(lr,wIo),e(lr,cw),e(cw,AIo),e(cw,pie),e(pie,LIo),e(cw,BIo),e(lr,xIo),e(lr,ot),g(fw,ot,null),e(ot,kIo),e(ot,_ie),e(_ie,RIo),e(ot,SIo),e(ot,Rd),e(Rd,PIo),e(Rd,uie),e(uie,$Io),e(Rd,IIo),e(Rd,bie),e(bie,NIo),e(Rd,jIo),e(ot,DIo),e(ot,vie),e(vie,qIo),e(ot,GIo),g(mw,ot,null),e(lr,OIo),e(lr,Ue),g(gw,Ue,null),e(Ue,XIo),e(Ue,Tie),e(Tie,VIo),e(Ue,zIo),e(Ue,on),e(on,WIo),e(on,Fie),e(Fie,QIo),e(on,HIo),e(on,Cie),e(Cie,UIo),e(on,JIo),e(on,Mie),e(Mie,YIo),e(on,KIo),e(Ue,ZIo),e(Ue,me),e(me,Zb),e(Zb,Eie),e(Eie,eNo),e(Zb,oNo),e(Zb,wD),e(wD,rNo),e(Zb,tNo),e(me,aNo),e(me,ev),e(ev,yie),e(yie,nNo),e(ev,sNo),e(ev,AD),e(AD,lNo),e(ev,iNo),e(me,dNo),e(me,qs),e(qs,wie),e(wie,cNo),e(qs,fNo),e(qs,LD),e(LD,mNo),e(qs,gNo),e(qs,BD),e(BD,hNo),e(qs,pNo),e(me,_No),e(me,ov),e(ov,Aie),e(Aie,uNo),e(ov,bNo),e(ov,xD),e(xD,vNo),e(ov,TNo),e(me,FNo),e(me,ma),e(ma,Lie),e(Lie,CNo),e(ma,MNo),e(ma,kD),e(kD,ENo),e(ma,yNo),e(ma,RD),e(RD,wNo),e(ma,ANo),e(ma,SD),e(SD,LNo),e(ma,BNo),e(me,xNo),e(me,rv),e(rv,Bie),e(Bie,kNo),e(rv,RNo),e(rv,PD),e(PD,SNo),e(rv,PNo),e(me,$No),e(me,tv),e(tv,xie),e(xie,INo),e(tv,NNo),e(tv,$D),e($D,jNo),e(tv,DNo),e(me,qNo),e(me,av),e(av,kie),e(kie,GNo),e(av,ONo),e(av,ID),e(ID,XNo),e(av,VNo),e(me,zNo),e(me,nv),e(nv,Rie),e(Rie,WNo),e(nv,QNo),e(nv,ND),e(ND,HNo),e(nv,UNo),e(me,JNo),e(me,sv),e(sv,Sie),e(Sie,YNo),e(sv,KNo),e(sv,jD),e(jD,ZNo),e(sv,ejo),e(me,ojo),e(me,lv),e(lv,Pie),e(Pie,rjo),e(lv,tjo),e(lv,DD),e(DD,ajo),e(lv,njo),e(Ue,sjo),e(Ue,iv),e(iv,ljo),e(iv,$ie),e($ie,ijo),e(iv,djo),e(iv,Iie),e(Iie,cjo),e(Ue,fjo),e(Ue,Nie),e(Nie,mjo),e(Ue,gjo),g(hw,Ue,null),b(c,Nke,u),b(c,Sd,u),e(Sd,dv),e(dv,jie),g(pw,jie,null),e(Sd,hjo),e(Sd,Die),e(Die,pjo),b(c,jke,u),b(c,ir,u),g(_w,ir,null),e(ir,_jo),e(ir,Pd),e(Pd,ujo),e(Pd,qie),e(qie,bjo),e(Pd,vjo),e(Pd,Gie),e(Gie,Tjo),e(Pd,Fjo),e(ir,Cjo),e(ir,uw),e(uw,Mjo),e(uw,Oie),e(Oie,Ejo),e(uw,yjo),e(ir,wjo),e(ir,rt),g(bw,rt,null),e(rt,Ajo),e(rt,Xie),e(Xie,Ljo),e(rt,Bjo),e(rt,$d),e($d,xjo),e($d,Vie),e(Vie,kjo),e($d,Rjo),e($d,zie),e(zie,Sjo),e($d,Pjo),e(rt,$jo),e(rt,Wie),e(Wie,Ijo),e(rt,Njo),g(vw,rt,null),e(ir,jjo),e(ir,Je),g(Tw,Je,null),e(Je,Djo),e(Je,Qie),e(Qie,qjo),e(Je,Gjo),e(Je,rn),e(rn,Ojo),e(rn,Hie),e(Hie,Xjo),e(rn,Vjo),e(rn,Uie),e(Uie,zjo),e(rn,Wjo),e(rn,Jie),e(Jie,Qjo),e(rn,Hjo),e(Je,Ujo),e(Je,Yie),e(Yie,cv),e(cv,Kie),e(Kie,Jjo),e(cv,Yjo),e(cv,qD),e(qD,Kjo),e(cv,Zjo),e(Je,eDo),e(Je,fv),e(fv,oDo),e(fv,Zie),e(Zie,rDo),e(fv,tDo),e(fv,ede),e(ede,aDo),e(Je,nDo),e(Je,ode),e(ode,sDo),e(Je,lDo),g(Fw,Je,null),b(c,Dke,u),b(c,Id,u),e(Id,mv),e(mv,rde),g(Cw,rde,null),e(Id,iDo),e(Id,tde),e(tde,dDo),b(c,qke,u),b(c,dr,u),g(Mw,dr,null),e(dr,cDo),e(dr,Nd),e(Nd,fDo),e(Nd,ade),e(ade,mDo),e(Nd,gDo),e(Nd,nde),e(nde,hDo),e(Nd,pDo),e(dr,_Do),e(dr,Ew),e(Ew,uDo),e(Ew,sde),e(sde,bDo),e(Ew,vDo),e(dr,TDo),e(dr,tt),g(yw,tt,null),e(tt,FDo),e(tt,lde),e(lde,CDo),e(tt,MDo),e(tt,jd),e(jd,EDo),e(jd,ide),e(ide,yDo),e(jd,wDo),e(jd,dde),e(dde,ADo),e(jd,LDo),e(tt,BDo),e(tt,cde),e(cde,xDo),e(tt,kDo),g(ww,tt,null),e(dr,RDo),e(dr,Ye),g(Aw,Ye,null),e(Ye,SDo),e(Ye,fde),e(fde,PDo),e(Ye,$Do),e(Ye,tn),e(tn,IDo),e(tn,mde),e(mde,NDo),e(tn,jDo),e(tn,gde),e(gde,DDo),e(tn,qDo),e(tn,hde),e(hde,GDo),e(tn,ODo),e(Ye,XDo),e(Ye,ke),e(ke,gv),e(gv,pde),e(pde,VDo),e(gv,zDo),e(gv,GD),e(GD,WDo),e(gv,QDo),e(ke,HDo),e(ke,hv),e(hv,_de),e(_de,UDo),e(hv,JDo),e(hv,OD),e(OD,YDo),e(hv,KDo),e(ke,ZDo),e(ke,pv),e(pv,ude),e(ude,eqo),e(pv,oqo),e(pv,XD),e(XD,rqo),e(pv,tqo),e(ke,aqo),e(ke,_v),e(_v,bde),e(bde,nqo),e(_v,sqo),e(_v,VD),e(VD,lqo),e(_v,iqo),e(ke,dqo),e(ke,uv),e(uv,vde),e(vde,cqo),e(uv,fqo),e(uv,zD),e(zD,mqo),e(uv,gqo),e(ke,hqo),e(ke,bv),e(bv,Tde),e(Tde,pqo),e(bv,_qo),e(bv,WD),e(WD,uqo),e(bv,bqo),e(ke,vqo),e(ke,vv),e(vv,Fde),e(Fde,Tqo),e(vv,Fqo),e(vv,QD),e(QD,Cqo),e(vv,Mqo),e(ke,Eqo),e(ke,Tv),e(Tv,Cde),e(Cde,yqo),e(Tv,wqo),e(Tv,HD),e(HD,Aqo),e(Tv,Lqo),e(Ye,Bqo),e(Ye,Fv),e(Fv,xqo),e(Fv,Mde),e(Mde,kqo),e(Fv,Rqo),e(Fv,Ede),e(Ede,Sqo),e(Ye,Pqo),e(Ye,yde),e(yde,$qo),e(Ye,Iqo),g(Lw,Ye,null),b(c,Gke,u),b(c,Dd,u),e(Dd,Cv),e(Cv,wde),g(Bw,wde,null),e(Dd,Nqo),e(Dd,Ade),e(Ade,jqo),b(c,Oke,u),b(c,cr,u),g(xw,cr,null),e(cr,Dqo),e(cr,qd),e(qd,qqo),e(qd,Lde),e(Lde,Gqo),e(qd,Oqo),e(qd,Bde),e(Bde,Xqo),e(qd,Vqo),e(cr,zqo),e(cr,kw),e(kw,Wqo),e(kw,xde),e(xde,Qqo),e(kw,Hqo),e(cr,Uqo),e(cr,at),g(Rw,at,null),e(at,Jqo),e(at,kde),e(kde,Yqo),e(at,Kqo),e(at,Gd),e(Gd,Zqo),e(Gd,Rde),e(Rde,eGo),e(Gd,oGo),e(Gd,Sde),e(Sde,rGo),e(Gd,tGo),e(at,aGo),e(at,Pde),e(Pde,nGo),e(at,sGo),g(Sw,at,null),e(cr,lGo),e(cr,Ke),g(Pw,Ke,null),e(Ke,iGo),e(Ke,$de),e($de,dGo),e(Ke,cGo),e(Ke,an),e(an,fGo),e(an,Ide),e(Ide,mGo),e(an,gGo),e(an,Nde),e(Nde,hGo),e(an,pGo),e(an,jde),e(jde,_Go),e(an,uGo),e(Ke,bGo),e(Ke,nn),e(nn,Mv),e(Mv,Dde),e(Dde,vGo),e(Mv,TGo),e(Mv,UD),e(UD,FGo),e(Mv,CGo),e(nn,MGo),e(nn,Ev),e(Ev,qde),e(qde,EGo),e(Ev,yGo),e(Ev,JD),e(JD,wGo),e(Ev,AGo),e(nn,LGo),e(nn,yv),e(yv,Gde),e(Gde,BGo),e(yv,xGo),e(yv,YD),e(YD,kGo),e(yv,RGo),e(nn,SGo),e(nn,wv),e(wv,Ode),e(Ode,PGo),e(wv,$Go),e(wv,KD),e(KD,IGo),e(wv,NGo),e(Ke,jGo),e(Ke,Av),e(Av,DGo),e(Av,Xde),e(Xde,qGo),e(Av,GGo),e(Av,Vde),e(Vde,OGo),e(Ke,XGo),e(Ke,zde),e(zde,VGo),e(Ke,zGo),g($w,Ke,null),b(c,Xke,u),b(c,Od,u),e(Od,Lv),e(Lv,Wde),g(Iw,Wde,null),e(Od,WGo),e(Od,Qde),e(Qde,QGo),b(c,Vke,u),b(c,fr,u),g(Nw,fr,null),e(fr,HGo),e(fr,Xd),e(Xd,UGo),e(Xd,Hde),e(Hde,JGo),e(Xd,YGo),e(Xd,Ude),e(Ude,KGo),e(Xd,ZGo),e(fr,eOo),e(fr,jw),e(jw,oOo),e(jw,Jde),e(Jde,rOo),e(jw,tOo),e(fr,aOo),e(fr,nt),g(Dw,nt,null),e(nt,nOo),e(nt,Yde),e(Yde,sOo),e(nt,lOo),e(nt,Vd),e(Vd,iOo),e(Vd,Kde),e(Kde,dOo),e(Vd,cOo),e(Vd,Zde),e(Zde,fOo),e(Vd,mOo),e(nt,gOo),e(nt,ece),e(ece,hOo),e(nt,pOo),g(qw,nt,null),e(fr,_Oo),e(fr,Ze),g(Gw,Ze,null),e(Ze,uOo),e(Ze,oce),e(oce,bOo),e(Ze,vOo),e(Ze,sn),e(sn,TOo),e(sn,rce),e(rce,FOo),e(sn,COo),e(sn,tce),e(tce,MOo),e(sn,EOo),e(sn,ace),e(ace,yOo),e(sn,wOo),e(Ze,AOo),e(Ze,Re),e(Re,Bv),e(Bv,nce),e(nce,LOo),e(Bv,BOo),e(Bv,ZD),e(ZD,xOo),e(Bv,kOo),e(Re,ROo),e(Re,xv),e(xv,sce),e(sce,SOo),e(xv,POo),e(xv,eq),e(eq,$Oo),e(xv,IOo),e(Re,NOo),e(Re,kv),e(kv,lce),e(lce,jOo),e(kv,DOo),e(kv,oq),e(oq,qOo),e(kv,GOo),e(Re,OOo),e(Re,Rv),e(Rv,ice),e(ice,XOo),e(Rv,VOo),e(Rv,rq),e(rq,zOo),e(Rv,WOo),e(Re,QOo),e(Re,Sv),e(Sv,dce),e(dce,HOo),e(Sv,UOo),e(Sv,tq),e(tq,JOo),e(Sv,YOo),e(Re,KOo),e(Re,Pv),e(Pv,cce),e(cce,ZOo),e(Pv,eXo),e(Pv,aq),e(aq,oXo),e(Pv,rXo),e(Re,tXo),e(Re,$v),e($v,fce),e(fce,aXo),e($v,nXo),e($v,nq),e(nq,sXo),e($v,lXo),e(Re,iXo),e(Re,Iv),e(Iv,mce),e(mce,dXo),e(Iv,cXo),e(Iv,sq),e(sq,fXo),e(Iv,mXo),e(Ze,gXo),e(Ze,Nv),e(Nv,hXo),e(Nv,gce),e(gce,pXo),e(Nv,_Xo),e(Nv,hce),e(hce,uXo),e(Ze,bXo),e(Ze,pce),e(pce,vXo),e(Ze,TXo),g(Ow,Ze,null),b(c,zke,u),b(c,zd,u),e(zd,jv),e(jv,_ce),g(Xw,_ce,null),e(zd,FXo),e(zd,uce),e(uce,CXo),b(c,Wke,u),b(c,mr,u),g(Vw,mr,null),e(mr,MXo),e(mr,Wd),e(Wd,EXo),e(Wd,bce),e(bce,yXo),e(Wd,wXo),e(Wd,vce),e(vce,AXo),e(Wd,LXo),e(mr,BXo),e(mr,zw),e(zw,xXo),e(zw,Tce),e(Tce,kXo),e(zw,RXo),e(mr,SXo),e(mr,st),g(Ww,st,null),e(st,PXo),e(st,Fce),e(Fce,$Xo),e(st,IXo),e(st,Qd),e(Qd,NXo),e(Qd,Cce),e(Cce,jXo),e(Qd,DXo),e(Qd,Mce),e(Mce,qXo),e(Qd,GXo),e(st,OXo),e(st,Ece),e(Ece,XXo),e(st,VXo),g(Qw,st,null),e(mr,zXo),e(mr,eo),g(Hw,eo,null),e(eo,WXo),e(eo,yce),e(yce,QXo),e(eo,HXo),e(eo,ln),e(ln,UXo),e(ln,wce),e(wce,JXo),e(ln,YXo),e(ln,Ace),e(Ace,KXo),e(ln,ZXo),e(ln,Lce),e(Lce,eVo),e(ln,oVo),e(eo,rVo),e(eo,Uw),e(Uw,Dv),e(Dv,Bce),e(Bce,tVo),e(Dv,aVo),e(Dv,lq),e(lq,nVo),e(Dv,sVo),e(Uw,lVo),e(Uw,qv),e(qv,xce),e(xce,iVo),e(qv,dVo),e(qv,iq),e(iq,cVo),e(qv,fVo),e(eo,mVo),e(eo,Gv),e(Gv,gVo),e(Gv,kce),e(kce,hVo),e(Gv,pVo),e(Gv,Rce),e(Rce,_Vo),e(eo,uVo),e(eo,Sce),e(Sce,bVo),e(eo,vVo),g(Jw,eo,null),b(c,Qke,u),b(c,Hd,u),e(Hd,Ov),e(Ov,Pce),g(Yw,Pce,null),e(Hd,TVo),e(Hd,$ce),e($ce,FVo),b(c,Hke,u),b(c,gr,u),g(Kw,gr,null),e(gr,CVo),e(gr,Ud),e(Ud,MVo),e(Ud,Ice),e(Ice,EVo),e(Ud,yVo),e(Ud,Nce),e(Nce,wVo),e(Ud,AVo),e(gr,LVo),e(gr,Zw),e(Zw,BVo),e(Zw,jce),e(jce,xVo),e(Zw,kVo),e(gr,RVo),e(gr,lt),g(eA,lt,null),e(lt,SVo),e(lt,Dce),e(Dce,PVo),e(lt,$Vo),e(lt,Jd),e(Jd,IVo),e(Jd,qce),e(qce,NVo),e(Jd,jVo),e(Jd,Gce),e(Gce,DVo),e(Jd,qVo),e(lt,GVo),e(lt,Oce),e(Oce,OVo),e(lt,XVo),g(oA,lt,null),e(gr,VVo),e(gr,oo),g(rA,oo,null),e(oo,zVo),e(oo,Xce),e(Xce,WVo),e(oo,QVo),e(oo,dn),e(dn,HVo),e(dn,Vce),e(Vce,UVo),e(dn,JVo),e(dn,zce),e(zce,YVo),e(dn,KVo),e(dn,Wce),e(Wce,ZVo),e(dn,ezo),e(oo,ozo),e(oo,cn),e(cn,Xv),e(Xv,Qce),e(Qce,rzo),e(Xv,tzo),e(Xv,dq),e(dq,azo),e(Xv,nzo),e(cn,szo),e(cn,Vv),e(Vv,Hce),e(Hce,lzo),e(Vv,izo),e(Vv,cq),e(cq,dzo),e(Vv,czo),e(cn,fzo),e(cn,zv),e(zv,Uce),e(Uce,mzo),e(zv,gzo),e(zv,fq),e(fq,hzo),e(zv,pzo),e(cn,_zo),e(cn,Wv),e(Wv,Jce),e(Jce,uzo),e(Wv,bzo),e(Wv,mq),e(mq,vzo),e(Wv,Tzo),e(oo,Fzo),e(oo,Qv),e(Qv,Czo),e(Qv,Yce),e(Yce,Mzo),e(Qv,Ezo),e(Qv,Kce),e(Kce,yzo),e(oo,wzo),e(oo,Zce),e(Zce,Azo),e(oo,Lzo),g(tA,oo,null),b(c,Uke,u),b(c,Yd,u),e(Yd,Hv),e(Hv,efe),g(aA,efe,null),e(Yd,Bzo),e(Yd,ofe),e(ofe,xzo),b(c,Jke,u),b(c,hr,u),g(nA,hr,null),e(hr,kzo),e(hr,Kd),e(Kd,Rzo),e(Kd,rfe),e(rfe,Szo),e(Kd,Pzo),e(Kd,tfe),e(tfe,$zo),e(Kd,Izo),e(hr,Nzo),e(hr,sA),e(sA,jzo),e(sA,afe),e(afe,Dzo),e(sA,qzo),e(hr,Gzo),e(hr,it),g(lA,it,null),e(it,Ozo),e(it,nfe),e(nfe,Xzo),e(it,Vzo),e(it,Zd),e(Zd,zzo),e(Zd,sfe),e(sfe,Wzo),e(Zd,Qzo),e(Zd,lfe),e(lfe,Hzo),e(Zd,Uzo),e(it,Jzo),e(it,ife),e(ife,Yzo),e(it,Kzo),g(iA,it,null),e(hr,Zzo),e(hr,ro),g(dA,ro,null),e(ro,eWo),e(ro,dfe),e(dfe,oWo),e(ro,rWo),e(ro,fn),e(fn,tWo),e(fn,cfe),e(cfe,aWo),e(fn,nWo),e(fn,ffe),e(ffe,sWo),e(fn,lWo),e(fn,mfe),e(mfe,iWo),e(fn,dWo),e(ro,cWo),e(ro,ec),e(ec,Uv),e(Uv,gfe),e(gfe,fWo),e(Uv,mWo),e(Uv,gq),e(gq,gWo),e(Uv,hWo),e(ec,pWo),e(ec,Jv),e(Jv,hfe),e(hfe,_Wo),e(Jv,uWo),e(Jv,hq),e(hq,bWo),e(Jv,vWo),e(ec,TWo),e(ec,Yv),e(Yv,pfe),e(pfe,FWo),e(Yv,CWo),e(Yv,pq),e(pq,MWo),e(Yv,EWo),e(ro,yWo),e(ro,Kv),e(Kv,wWo),e(Kv,_fe),e(_fe,AWo),e(Kv,LWo),e(Kv,ufe),e(ufe,BWo),e(ro,xWo),e(ro,bfe),e(bfe,kWo),e(ro,RWo),g(cA,ro,null),b(c,Yke,u),b(c,oc,u),e(oc,Zv),e(Zv,vfe),g(fA,vfe,null),e(oc,SWo),e(oc,Tfe),e(Tfe,PWo),b(c,Kke,u),b(c,pr,u),g(mA,pr,null),e(pr,$Wo),e(pr,rc),e(rc,IWo),e(rc,Ffe),e(Ffe,NWo),e(rc,jWo),e(rc,Cfe),e(Cfe,DWo),e(rc,qWo),e(pr,GWo),e(pr,gA),e(gA,OWo),e(gA,Mfe),e(Mfe,XWo),e(gA,VWo),e(pr,zWo),e(pr,dt),g(hA,dt,null),e(dt,WWo),e(dt,Efe),e(Efe,QWo),e(dt,HWo),e(dt,tc),e(tc,UWo),e(tc,yfe),e(yfe,JWo),e(tc,YWo),e(tc,wfe),e(wfe,KWo),e(tc,ZWo),e(dt,eQo),e(dt,Afe),e(Afe,oQo),e(dt,rQo),g(pA,dt,null),e(pr,tQo),e(pr,to),g(_A,to,null),e(to,aQo),e(to,Lfe),e(Lfe,nQo),e(to,sQo),e(to,mn),e(mn,lQo),e(mn,Bfe),e(Bfe,iQo),e(mn,dQo),e(mn,xfe),e(xfe,cQo),e(mn,fQo),e(mn,kfe),e(kfe,mQo),e(mn,gQo),e(to,hQo),e(to,Rfe),e(Rfe,e6),e(e6,Sfe),e(Sfe,pQo),e(e6,_Qo),e(e6,_q),e(_q,uQo),e(e6,bQo),e(to,vQo),e(to,o6),e(o6,TQo),e(o6,Pfe),e(Pfe,FQo),e(o6,CQo),e(o6,$fe),e($fe,MQo),e(to,EQo),e(to,Ife),e(Ife,yQo),e(to,wQo),g(uA,to,null),b(c,Zke,u),b(c,ac,u),e(ac,r6),e(r6,Nfe),g(bA,Nfe,null),e(ac,AQo),e(ac,jfe),e(jfe,LQo),b(c,eRe,u),b(c,_r,u),g(vA,_r,null),e(_r,BQo),e(_r,nc),e(nc,xQo),e(nc,Dfe),e(Dfe,kQo),e(nc,RQo),e(nc,qfe),e(qfe,SQo),e(nc,PQo),e(_r,$Qo),e(_r,TA),e(TA,IQo),e(TA,Gfe),e(Gfe,NQo),e(TA,jQo),e(_r,DQo),e(_r,ct),g(FA,ct,null),e(ct,qQo),e(ct,Ofe),e(Ofe,GQo),e(ct,OQo),e(ct,sc),e(sc,XQo),e(sc,Xfe),e(Xfe,VQo),e(sc,zQo),e(sc,Vfe),e(Vfe,WQo),e(sc,QQo),e(ct,HQo),e(ct,zfe),e(zfe,UQo),e(ct,JQo),g(CA,ct,null),e(_r,YQo),e(_r,ao),g(MA,ao,null),e(ao,KQo),e(ao,Wfe),e(Wfe,ZQo),e(ao,eHo),e(ao,gn),e(gn,oHo),e(gn,Qfe),e(Qfe,rHo),e(gn,tHo),e(gn,Hfe),e(Hfe,aHo),e(gn,nHo),e(gn,Ufe),e(Ufe,sHo),e(gn,lHo),e(ao,iHo),e(ao,Jfe),e(Jfe,t6),e(t6,Yfe),e(Yfe,dHo),e(t6,cHo),e(t6,uq),e(uq,fHo),e(t6,mHo),e(ao,gHo),e(ao,a6),e(a6,hHo),e(a6,Kfe),e(Kfe,pHo),e(a6,_Ho),e(a6,Zfe),e(Zfe,uHo),e(ao,bHo),e(ao,eme),e(eme,vHo),e(ao,THo),g(EA,ao,null),b(c,oRe,u),b(c,lc,u),e(lc,n6),e(n6,ome),g(yA,ome,null),e(lc,FHo),e(lc,rme),e(rme,CHo),b(c,rRe,u),b(c,ur,u),g(wA,ur,null),e(ur,MHo),e(ur,ic),e(ic,EHo),e(ic,tme),e(tme,yHo),e(ic,wHo),e(ic,ame),e(ame,AHo),e(ic,LHo),e(ur,BHo),e(ur,AA),e(AA,xHo),e(AA,nme),e(nme,kHo),e(AA,RHo),e(ur,SHo),e(ur,ft),g(LA,ft,null),e(ft,PHo),e(ft,sme),e(sme,$Ho),e(ft,IHo),e(ft,dc),e(dc,NHo),e(dc,lme),e(lme,jHo),e(dc,DHo),e(dc,ime),e(ime,qHo),e(dc,GHo),e(ft,OHo),e(ft,dme),e(dme,XHo),e(ft,VHo),g(BA,ft,null),e(ur,zHo),e(ur,no),g(xA,no,null),e(no,WHo),e(no,cme),e(cme,QHo),e(no,HHo),e(no,hn),e(hn,UHo),e(hn,fme),e(fme,JHo),e(hn,YHo),e(hn,mme),e(mme,KHo),e(hn,ZHo),e(hn,gme),e(gme,eUo),e(hn,oUo),e(no,rUo),e(no,kA),e(kA,s6),e(s6,hme),e(hme,tUo),e(s6,aUo),e(s6,bq),e(bq,nUo),e(s6,sUo),e(kA,lUo),e(kA,l6),e(l6,pme),e(pme,iUo),e(l6,dUo),e(l6,vq),e(vq,cUo),e(l6,fUo),e(no,mUo),e(no,i6),e(i6,gUo),e(i6,_me),e(_me,hUo),e(i6,pUo),e(i6,ume),e(ume,_Uo),e(no,uUo),e(no,bme),e(bme,bUo),e(no,vUo),g(RA,no,null),b(c,tRe,u),b(c,cc,u),e(cc,d6),e(d6,vme),g(SA,vme,null),e(cc,TUo),e(cc,Tme),e(Tme,FUo),b(c,aRe,u),b(c,br,u),g(PA,br,null),e(br,CUo),e(br,fc),e(fc,MUo),e(fc,Fme),e(Fme,EUo),e(fc,yUo),e(fc,Cme),e(Cme,wUo),e(fc,AUo),e(br,LUo),e(br,$A),e($A,BUo),e($A,Mme),e(Mme,xUo),e($A,kUo),e(br,RUo),e(br,mt),g(IA,mt,null),e(mt,SUo),e(mt,Eme),e(Eme,PUo),e(mt,$Uo),e(mt,mc),e(mc,IUo),e(mc,yme),e(yme,NUo),e(mc,jUo),e(mc,wme),e(wme,DUo),e(mc,qUo),e(mt,GUo),e(mt,Ame),e(Ame,OUo),e(mt,XUo),g(NA,mt,null),e(br,VUo),e(br,so),g(jA,so,null),e(so,zUo),e(so,Lme),e(Lme,WUo),e(so,QUo),e(so,pn),e(pn,HUo),e(pn,Bme),e(Bme,UUo),e(pn,JUo),e(pn,xme),e(xme,YUo),e(pn,KUo),e(pn,kme),e(kme,ZUo),e(pn,eJo),e(so,oJo),e(so,Rme),e(Rme,c6),e(c6,Sme),e(Sme,rJo),e(c6,tJo),e(c6,Tq),e(Tq,aJo),e(c6,nJo),e(so,sJo),e(so,f6),e(f6,lJo),e(f6,Pme),e(Pme,iJo),e(f6,dJo),e(f6,$me),e($me,cJo),e(so,fJo),e(so,Ime),e(Ime,mJo),e(so,gJo),g(DA,so,null),b(c,nRe,u),b(c,gc,u),e(gc,m6),e(m6,Nme),g(qA,Nme,null),e(gc,hJo),e(gc,jme),e(jme,pJo),b(c,sRe,u),b(c,vr,u),g(GA,vr,null),e(vr,_Jo),e(vr,hc),e(hc,uJo),e(hc,Dme),e(Dme,bJo),e(hc,vJo),e(hc,qme),e(qme,TJo),e(hc,FJo),e(vr,CJo),e(vr,OA),e(OA,MJo),e(OA,Gme),e(Gme,EJo),e(OA,yJo),e(vr,wJo),e(vr,gt),g(XA,gt,null),e(gt,AJo),e(gt,Ome),e(Ome,LJo),e(gt,BJo),e(gt,pc),e(pc,xJo),e(pc,Xme),e(Xme,kJo),e(pc,RJo),e(pc,Vme),e(Vme,SJo),e(pc,PJo),e(gt,$Jo),e(gt,zme),e(zme,IJo),e(gt,NJo),g(VA,gt,null),e(vr,jJo),e(vr,ho),g(zA,ho,null),e(ho,DJo),e(ho,Wme),e(Wme,qJo),e(ho,GJo),e(ho,_n),e(_n,OJo),e(_n,Qme),e(Qme,XJo),e(_n,VJo),e(_n,Hme),e(Hme,zJo),e(_n,WJo),e(_n,Ume),e(Ume,QJo),e(_n,HJo),e(ho,UJo),e(ho,B),e(B,g6),e(g6,Jme),e(Jme,JJo),e(g6,YJo),e(g6,Fq),e(Fq,KJo),e(g6,ZJo),e(B,eYo),e(B,h6),e(h6,Yme),e(Yme,oYo),e(h6,rYo),e(h6,Cq),e(Cq,tYo),e(h6,aYo),e(B,nYo),e(B,p6),e(p6,Kme),e(Kme,sYo),e(p6,lYo),e(p6,Mq),e(Mq,iYo),e(p6,dYo),e(B,cYo),e(B,_6),e(_6,Zme),e(Zme,fYo),e(_6,mYo),e(_6,Eq),e(Eq,gYo),e(_6,hYo),e(B,pYo),e(B,u6),e(u6,ege),e(ege,_Yo),e(u6,uYo),e(u6,yq),e(yq,bYo),e(u6,vYo),e(B,TYo),e(B,b6),e(b6,oge),e(oge,FYo),e(b6,CYo),e(b6,wq),e(wq,MYo),e(b6,EYo),e(B,yYo),e(B,v6),e(v6,rge),e(rge,wYo),e(v6,AYo),e(v6,Aq),e(Aq,LYo),e(v6,BYo),e(B,xYo),e(B,T6),e(T6,tge),e(tge,kYo),e(T6,RYo),e(T6,Lq),e(Lq,SYo),e(T6,PYo),e(B,$Yo),e(B,F6),e(F6,age),e(age,IYo),e(F6,NYo),e(F6,Bq),e(Bq,jYo),e(F6,DYo),e(B,qYo),e(B,C6),e(C6,nge),e(nge,GYo),e(C6,OYo),e(C6,xq),e(xq,XYo),e(C6,VYo),e(B,zYo),e(B,M6),e(M6,sge),e(sge,WYo),e(M6,QYo),e(M6,kq),e(kq,HYo),e(M6,UYo),e(B,JYo),e(B,E6),e(E6,lge),e(lge,YYo),e(E6,KYo),e(E6,Rq),e(Rq,ZYo),e(E6,eKo),e(B,oKo),e(B,y6),e(y6,ige),e(ige,rKo),e(y6,tKo),e(y6,Sq),e(Sq,aKo),e(y6,nKo),e(B,sKo),e(B,w6),e(w6,dge),e(dge,lKo),e(w6,iKo),e(w6,Pq),e(Pq,dKo),e(w6,cKo),e(B,fKo),e(B,A6),e(A6,cge),e(cge,mKo),e(A6,gKo),e(A6,$q),e($q,hKo),e(A6,pKo),e(B,_Ko),e(B,L6),e(L6,fge),e(fge,uKo),e(L6,bKo),e(L6,Iq),e(Iq,vKo),e(L6,TKo),e(B,FKo),e(B,Gs),e(Gs,mge),e(mge,CKo),e(Gs,MKo),e(Gs,Nq),e(Nq,EKo),e(Gs,yKo),e(Gs,jq),e(jq,wKo),e(Gs,AKo),e(B,LKo),e(B,B6),e(B6,gge),e(gge,BKo),e(B6,xKo),e(B6,Dq),e(Dq,kKo),e(B6,RKo),e(B,SKo),e(B,x6),e(x6,hge),e(hge,PKo),e(x6,$Ko),e(x6,qq),e(qq,IKo),e(x6,NKo),e(B,jKo),e(B,k6),e(k6,pge),e(pge,DKo),e(k6,qKo),e(k6,Gq),e(Gq,GKo),e(k6,OKo),e(B,XKo),e(B,R6),e(R6,_ge),e(_ge,VKo),e(R6,zKo),e(R6,Oq),e(Oq,WKo),e(R6,QKo),e(B,HKo),e(B,S6),e(S6,uge),e(uge,UKo),e(S6,JKo),e(S6,Xq),e(Xq,YKo),e(S6,KKo),e(B,ZKo),e(B,P6),e(P6,bge),e(bge,eZo),e(P6,oZo),e(P6,Vq),e(Vq,rZo),e(P6,tZo),e(B,aZo),e(B,$6),e($6,vge),e(vge,nZo),e($6,sZo),e($6,zq),e(zq,lZo),e($6,iZo),e(B,dZo),e(B,I6),e(I6,Tge),e(Tge,cZo),e(I6,fZo),e(I6,Wq),e(Wq,mZo),e(I6,gZo),e(B,hZo),e(B,N6),e(N6,Fge),e(Fge,pZo),e(N6,_Zo),e(N6,Qq),e(Qq,uZo),e(N6,bZo),e(B,vZo),e(B,j6),e(j6,Cge),e(Cge,TZo),e(j6,FZo),e(j6,Hq),e(Hq,CZo),e(j6,MZo),e(B,EZo),e(B,D6),e(D6,Mge),e(Mge,yZo),e(D6,wZo),e(D6,Uq),e(Uq,AZo),e(D6,LZo),e(B,BZo),e(B,q6),e(q6,Ege),e(Ege,xZo),e(q6,kZo),e(q6,Jq),e(Jq,RZo),e(q6,SZo),e(B,PZo),e(B,G6),e(G6,yge),e(yge,$Zo),e(G6,IZo),e(G6,Yq),e(Yq,NZo),e(G6,jZo),e(B,DZo),e(B,O6),e(O6,wge),e(wge,qZo),e(O6,GZo),e(O6,Kq),e(Kq,OZo),e(O6,XZo),e(B,VZo),e(B,X6),e(X6,Age),e(Age,zZo),e(X6,WZo),e(X6,Zq),e(Zq,QZo),e(X6,HZo),e(B,UZo),e(B,V6),e(V6,Lge),e(Lge,JZo),e(V6,YZo),e(V6,eG),e(eG,KZo),e(V6,ZZo),e(B,eer),e(B,z6),e(z6,Bge),e(Bge,oer),e(z6,rer),e(z6,oG),e(oG,ter),e(z6,aer),e(B,ner),e(B,W6),e(W6,xge),e(xge,ser),e(W6,ler),e(W6,rG),e(rG,ier),e(W6,der),e(B,cer),e(B,Q6),e(Q6,kge),e(kge,fer),e(Q6,mer),e(Q6,tG),e(tG,ger),e(Q6,her),e(B,per),e(B,H6),e(H6,Rge),e(Rge,_er),e(H6,uer),e(H6,aG),e(aG,ber),e(H6,ver),e(B,Ter),e(B,U6),e(U6,Sge),e(Sge,Fer),e(U6,Cer),e(U6,nG),e(nG,Mer),e(U6,Eer),e(B,yer),e(B,J6),e(J6,Pge),e(Pge,wer),e(J6,Aer),e(J6,sG),e(sG,Ler),e(J6,Ber),e(B,xer),e(B,Y6),e(Y6,$ge),e($ge,ker),e(Y6,Rer),e(Y6,lG),e(lG,Ser),e(Y6,Per),e(B,$er),e(B,K6),e(K6,Ige),e(Ige,Ier),e(K6,Ner),e(K6,iG),e(iG,jer),e(K6,Der),e(B,qer),e(B,Z6),e(Z6,Nge),e(Nge,Ger),e(Z6,Oer),e(Z6,dG),e(dG,Xer),e(Z6,Ver),e(B,zer),e(B,eT),e(eT,jge),e(jge,Wer),e(eT,Qer),e(eT,cG),e(cG,Her),e(eT,Uer),e(ho,Jer),e(ho,Dge),e(Dge,Yer),e(ho,Ker),g(WA,ho,null),b(c,lRe,u),b(c,_c,u),e(_c,oT),e(oT,qge),g(QA,qge,null),e(_c,Zer),e(_c,Gge),e(Gge,eor),b(c,iRe,u),b(c,Tr,u),g(HA,Tr,null),e(Tr,oor),e(Tr,uc),e(uc,ror),e(uc,Oge),e(Oge,tor),e(uc,aor),e(uc,Xge),e(Xge,nor),e(uc,sor),e(Tr,lor),e(Tr,UA),e(UA,ior),e(UA,Vge),e(Vge,dor),e(UA,cor),e(Tr,mor),e(Tr,ht),g(JA,ht,null),e(ht,gor),e(ht,zge),e(zge,hor),e(ht,por),e(ht,bc),e(bc,_or),e(bc,Wge),e(Wge,uor),e(bc,bor),e(bc,Qge),e(Qge,vor),e(bc,Tor),e(ht,For),e(ht,Hge),e(Hge,Cor),e(ht,Mor),g(YA,ht,null),e(Tr,Eor),e(Tr,po),g(KA,po,null),e(po,yor),e(po,Uge),e(Uge,wor),e(po,Aor),e(po,un),e(un,Lor),e(un,Jge),e(Jge,Bor),e(un,xor),e(un,Yge),e(Yge,kor),e(un,Ror),e(un,Kge),e(Kge,Sor),e(un,Por),e(po,$or),e(po,H),e(H,rT),e(rT,Zge),e(Zge,Ior),e(rT,Nor),e(rT,fG),e(fG,jor),e(rT,Dor),e(H,qor),e(H,tT),e(tT,ehe),e(ehe,Gor),e(tT,Oor),e(tT,mG),e(mG,Xor),e(tT,Vor),e(H,zor),e(H,aT),e(aT,ohe),e(ohe,Wor),e(aT,Qor),e(aT,gG),e(gG,Hor),e(aT,Uor),e(H,Jor),e(H,nT),e(nT,rhe),e(rhe,Yor),e(nT,Kor),e(nT,hG),e(hG,Zor),e(nT,err),e(H,orr),e(H,sT),e(sT,the),e(the,rrr),e(sT,trr),e(sT,pG),e(pG,arr),e(sT,nrr),e(H,srr),e(H,lT),e(lT,ahe),e(ahe,lrr),e(lT,irr),e(lT,_G),e(_G,drr),e(lT,crr),e(H,frr),e(H,iT),e(iT,nhe),e(nhe,mrr),e(iT,grr),e(iT,uG),e(uG,hrr),e(iT,prr),e(H,_rr),e(H,dT),e(dT,she),e(she,urr),e(dT,brr),e(dT,bG),e(bG,vrr),e(dT,Trr),e(H,Frr),e(H,cT),e(cT,lhe),e(lhe,Crr),e(cT,Mrr),e(cT,vG),e(vG,Err),e(cT,yrr),e(H,wrr),e(H,fT),e(fT,ihe),e(ihe,Arr),e(fT,Lrr),e(fT,TG),e(TG,Brr),e(fT,xrr),e(H,krr),e(H,mT),e(mT,dhe),e(dhe,Rrr),e(mT,Srr),e(mT,FG),e(FG,Prr),e(mT,$rr),e(H,Irr),e(H,gT),e(gT,che),e(che,Nrr),e(gT,jrr),e(gT,CG),e(CG,Drr),e(gT,qrr),e(H,Grr),e(H,hT),e(hT,fhe),e(fhe,Orr),e(hT,Xrr),e(hT,MG),e(MG,Vrr),e(hT,zrr),e(H,Wrr),e(H,pT),e(pT,mhe),e(mhe,Qrr),e(pT,Hrr),e(pT,EG),e(EG,Urr),e(pT,Jrr),e(H,Yrr),e(H,_T),e(_T,ghe),e(ghe,Krr),e(_T,Zrr),e(_T,yG),e(yG,etr),e(_T,otr),e(H,rtr),e(H,uT),e(uT,hhe),e(hhe,ttr),e(uT,atr),e(uT,wG),e(wG,ntr),e(uT,str),e(H,ltr),e(H,bT),e(bT,phe),e(phe,itr),e(bT,dtr),e(bT,AG),e(AG,ctr),e(bT,ftr),e(H,mtr),e(H,vT),e(vT,_he),e(_he,gtr),e(vT,htr),e(vT,LG),e(LG,ptr),e(vT,_tr),e(H,utr),e(H,TT),e(TT,uhe),e(uhe,btr),e(TT,vtr),e(TT,BG),e(BG,Ttr),e(TT,Ftr),e(H,Ctr),e(H,FT),e(FT,bhe),e(bhe,Mtr),e(FT,Etr),e(FT,xG),e(xG,ytr),e(FT,wtr),e(H,Atr),e(H,CT),e(CT,vhe),e(vhe,Ltr),e(CT,Btr),e(CT,kG),e(kG,xtr),e(CT,ktr),e(H,Rtr),e(H,MT),e(MT,The),e(The,Str),e(MT,Ptr),e(MT,RG),e(RG,$tr),e(MT,Itr),e(H,Ntr),e(H,ET),e(ET,Fhe),e(Fhe,jtr),e(ET,Dtr),e(ET,SG),e(SG,qtr),e(ET,Gtr),e(po,Otr),e(po,Che),e(Che,Xtr),e(po,Vtr),g(ZA,po,null),b(c,dRe,u),b(c,vc,u),e(vc,yT),e(yT,Mhe),g(e0,Mhe,null),e(vc,ztr),e(vc,Ehe),e(Ehe,Wtr),b(c,cRe,u),b(c,Fr,u),g(o0,Fr,null),e(Fr,Qtr),e(Fr,Tc),e(Tc,Htr),e(Tc,yhe),e(yhe,Utr),e(Tc,Jtr),e(Tc,whe),e(whe,Ytr),e(Tc,Ktr),e(Fr,Ztr),e(Fr,r0),e(r0,ear),e(r0,Ahe),e(Ahe,oar),e(r0,rar),e(Fr,tar),e(Fr,pt),g(t0,pt,null),e(pt,aar),e(pt,Lhe),e(Lhe,nar),e(pt,sar),e(pt,Fc),e(Fc,lar),e(Fc,Bhe),e(Bhe,iar),e(Fc,dar),e(Fc,xhe),e(xhe,car),e(Fc,far),e(pt,mar),e(pt,khe),e(khe,gar),e(pt,har),g(a0,pt,null),e(Fr,par),e(Fr,_o),g(n0,_o,null),e(_o,_ar),e(_o,Rhe),e(Rhe,uar),e(_o,bar),e(_o,bn),e(bn,Tar),e(bn,She),e(She,Far),e(bn,Car),e(bn,Phe),e(Phe,Mar),e(bn,Ear),e(bn,$he),e($he,yar),e(bn,war),e(_o,Aar),e(_o,ge),e(ge,wT),e(wT,Ihe),e(Ihe,Lar),e(wT,Bar),e(wT,PG),e(PG,xar),e(wT,kar),e(ge,Rar),e(ge,AT),e(AT,Nhe),e(Nhe,Sar),e(AT,Par),e(AT,$G),e($G,$ar),e(AT,Iar),e(ge,Nar),e(ge,LT),e(LT,jhe),e(jhe,jar),e(LT,Dar),e(LT,IG),e(IG,qar),e(LT,Gar),e(ge,Oar),e(ge,BT),e(BT,Dhe),e(Dhe,Xar),e(BT,Var),e(BT,NG),e(NG,zar),e(BT,War),e(ge,Qar),e(ge,xT),e(xT,qhe),e(qhe,Har),e(xT,Uar),e(xT,jG),e(jG,Jar),e(xT,Yar),e(ge,Kar),e(ge,kT),e(kT,Ghe),e(Ghe,Zar),e(kT,enr),e(kT,DG),e(DG,onr),e(kT,rnr),e(ge,tnr),e(ge,RT),e(RT,Ohe),e(Ohe,anr),e(RT,nnr),e(RT,qG),e(qG,snr),e(RT,lnr),e(ge,inr),e(ge,ST),e(ST,Xhe),e(Xhe,dnr),e(ST,cnr),e(ST,GG),e(GG,fnr),e(ST,mnr),e(ge,gnr),e(ge,PT),e(PT,Vhe),e(Vhe,hnr),e(PT,pnr),e(PT,OG),e(OG,_nr),e(PT,unr),e(ge,bnr),e(ge,$T),e($T,zhe),e(zhe,vnr),e($T,Tnr),e($T,XG),e(XG,Fnr),e($T,Cnr),e(ge,Mnr),e(ge,IT),e(IT,Whe),e(Whe,Enr),e(IT,ynr),e(IT,VG),e(VG,wnr),e(IT,Anr),e(_o,Lnr),e(_o,Qhe),e(Qhe,Bnr),e(_o,xnr),g(s0,_o,null),b(c,fRe,u),b(c,Cc,u),e(Cc,NT),e(NT,Hhe),g(l0,Hhe,null),e(Cc,knr),e(Cc,Uhe),e(Uhe,Rnr),b(c,mRe,u),b(c,Cr,u),g(i0,Cr,null),e(Cr,Snr),e(Cr,Mc),e(Mc,Pnr),e(Mc,Jhe),e(Jhe,$nr),e(Mc,Inr),e(Mc,Yhe),e(Yhe,Nnr),e(Mc,jnr),e(Cr,Dnr),e(Cr,d0),e(d0,qnr),e(d0,Khe),e(Khe,Gnr),e(d0,Onr),e(Cr,Xnr),e(Cr,_t),g(c0,_t,null),e(_t,Vnr),e(_t,Zhe),e(Zhe,znr),e(_t,Wnr),e(_t,Ec),e(Ec,Qnr),e(Ec,epe),e(epe,Hnr),e(Ec,Unr),e(Ec,ope),e(ope,Jnr),e(Ec,Ynr),e(_t,Knr),e(_t,rpe),e(rpe,Znr),e(_t,esr),g(f0,_t,null),e(Cr,osr),e(Cr,uo),g(m0,uo,null),e(uo,rsr),e(uo,tpe),e(tpe,tsr),e(uo,asr),e(uo,vn),e(vn,nsr),e(vn,ape),e(ape,ssr),e(vn,lsr),e(vn,npe),e(npe,isr),e(vn,dsr),e(vn,spe),e(spe,csr),e(vn,fsr),e(uo,msr),e(uo,g0),e(g0,jT),e(jT,lpe),e(lpe,gsr),e(jT,hsr),e(jT,zG),e(zG,psr),e(jT,_sr),e(g0,usr),e(g0,DT),e(DT,ipe),e(ipe,bsr),e(DT,vsr),e(DT,WG),e(WG,Tsr),e(DT,Fsr),e(uo,Csr),e(uo,dpe),e(dpe,Msr),e(uo,Esr),g(h0,uo,null),b(c,gRe,u),b(c,yc,u),e(yc,qT),e(qT,cpe),g(p0,cpe,null),e(yc,ysr),e(yc,fpe),e(fpe,wsr),b(c,hRe,u),b(c,Mr,u),g(_0,Mr,null),e(Mr,Asr),e(Mr,wc),e(wc,Lsr),e(wc,mpe),e(mpe,Bsr),e(wc,xsr),e(wc,gpe),e(gpe,ksr),e(wc,Rsr),e(Mr,Ssr),e(Mr,u0),e(u0,Psr),e(u0,hpe),e(hpe,$sr),e(u0,Isr),e(Mr,Nsr),e(Mr,ut),g(b0,ut,null),e(ut,jsr),e(ut,ppe),e(ppe,Dsr),e(ut,qsr),e(ut,Ac),e(Ac,Gsr),e(Ac,_pe),e(_pe,Osr),e(Ac,Xsr),e(Ac,upe),e(upe,Vsr),e(Ac,zsr),e(ut,Wsr),e(ut,bpe),e(bpe,Qsr),e(ut,Hsr),g(v0,ut,null),e(Mr,Usr),e(Mr,bo),g(T0,bo,null),e(bo,Jsr),e(bo,vpe),e(vpe,Ysr),e(bo,Ksr),e(bo,Tn),e(Tn,Zsr),e(Tn,Tpe),e(Tpe,elr),e(Tn,olr),e(Tn,Fpe),e(Fpe,rlr),e(Tn,tlr),e(Tn,Cpe),e(Cpe,alr),e(Tn,nlr),e(bo,slr),e(bo,Y),e(Y,GT),e(GT,Mpe),e(Mpe,llr),e(GT,ilr),e(GT,QG),e(QG,dlr),e(GT,clr),e(Y,flr),e(Y,OT),e(OT,Epe),e(Epe,mlr),e(OT,glr),e(OT,HG),e(HG,hlr),e(OT,plr),e(Y,_lr),e(Y,XT),e(XT,ype),e(ype,ulr),e(XT,blr),e(XT,UG),e(UG,vlr),e(XT,Tlr),e(Y,Flr),e(Y,VT),e(VT,wpe),e(wpe,Clr),e(VT,Mlr),e(VT,JG),e(JG,Elr),e(VT,ylr),e(Y,wlr),e(Y,zT),e(zT,Ape),e(Ape,Alr),e(zT,Llr),e(zT,YG),e(YG,Blr),e(zT,xlr),e(Y,klr),e(Y,WT),e(WT,Lpe),e(Lpe,Rlr),e(WT,Slr),e(WT,KG),e(KG,Plr),e(WT,$lr),e(Y,Ilr),e(Y,QT),e(QT,Bpe),e(Bpe,Nlr),e(QT,jlr),e(QT,ZG),e(ZG,Dlr),e(QT,qlr),e(Y,Glr),e(Y,HT),e(HT,xpe),e(xpe,Olr),e(HT,Xlr),e(HT,eO),e(eO,Vlr),e(HT,zlr),e(Y,Wlr),e(Y,UT),e(UT,kpe),e(kpe,Qlr),e(UT,Hlr),e(UT,oO),e(oO,Ulr),e(UT,Jlr),e(Y,Ylr),e(Y,JT),e(JT,Rpe),e(Rpe,Klr),e(JT,Zlr),e(JT,rO),e(rO,eir),e(JT,oir),e(Y,rir),e(Y,YT),e(YT,Spe),e(Spe,tir),e(YT,air),e(YT,tO),e(tO,nir),e(YT,sir),e(Y,lir),e(Y,KT),e(KT,Ppe),e(Ppe,iir),e(KT,dir),e(KT,aO),e(aO,cir),e(KT,fir),e(Y,mir),e(Y,ZT),e(ZT,$pe),e($pe,gir),e(ZT,hir),e(ZT,nO),e(nO,pir),e(ZT,_ir),e(Y,uir),e(Y,eF),e(eF,Ipe),e(Ipe,bir),e(eF,vir),e(eF,sO),e(sO,Tir),e(eF,Fir),e(Y,Cir),e(Y,oF),e(oF,Npe),e(Npe,Mir),e(oF,Eir),e(oF,lO),e(lO,yir),e(oF,wir),e(Y,Air),e(Y,rF),e(rF,jpe),e(jpe,Lir),e(rF,Bir),e(rF,iO),e(iO,xir),e(rF,kir),e(Y,Rir),e(Y,tF),e(tF,Dpe),e(Dpe,Sir),e(tF,Pir),e(tF,dO),e(dO,$ir),e(tF,Iir),e(Y,Nir),e(Y,aF),e(aF,qpe),e(qpe,jir),e(aF,Dir),e(aF,cO),e(cO,qir),e(aF,Gir),e(Y,Oir),e(Y,nF),e(nF,Gpe),e(Gpe,Xir),e(nF,Vir),e(nF,fO),e(fO,zir),e(nF,Wir),e(Y,Qir),e(Y,sF),e(sF,Ope),e(Ope,Hir),e(sF,Uir),e(sF,mO),e(mO,Jir),e(sF,Yir),e(bo,Kir),e(bo,Xpe),e(Xpe,Zir),e(bo,edr),g(F0,bo,null),b(c,pRe,u),b(c,Lc,u),e(Lc,lF),e(lF,Vpe),g(C0,Vpe,null),e(Lc,odr),e(Lc,zpe),e(zpe,rdr),b(c,_Re,u),b(c,Er,u),g(M0,Er,null),e(Er,tdr),e(Er,Bc),e(Bc,adr),e(Bc,Wpe),e(Wpe,ndr),e(Bc,sdr),e(Bc,Qpe),e(Qpe,ldr),e(Bc,idr),e(Er,ddr),e(Er,E0),e(E0,cdr),e(E0,Hpe),e(Hpe,fdr),e(E0,mdr),e(Er,gdr),e(Er,bt),g(y0,bt,null),e(bt,hdr),e(bt,Upe),e(Upe,pdr),e(bt,_dr),e(bt,xc),e(xc,udr),e(xc,Jpe),e(Jpe,bdr),e(xc,vdr),e(xc,Ype),e(Ype,Tdr),e(xc,Fdr),e(bt,Cdr),e(bt,Kpe),e(Kpe,Mdr),e(bt,Edr),g(w0,bt,null),e(Er,ydr),e(Er,vo),g(A0,vo,null),e(vo,wdr),e(vo,Zpe),e(Zpe,Adr),e(vo,Ldr),e(vo,Fn),e(Fn,Bdr),e(Fn,e_e),e(e_e,xdr),e(Fn,kdr),e(Fn,o_e),e(o_e,Rdr),e(Fn,Sdr),e(Fn,r_e),e(r_e,Pdr),e(Fn,$dr),e(vo,Idr),e(vo,ue),e(ue,iF),e(iF,t_e),e(t_e,Ndr),e(iF,jdr),e(iF,gO),e(gO,Ddr),e(iF,qdr),e(ue,Gdr),e(ue,dF),e(dF,a_e),e(a_e,Odr),e(dF,Xdr),e(dF,hO),e(hO,Vdr),e(dF,zdr),e(ue,Wdr),e(ue,cF),e(cF,n_e),e(n_e,Qdr),e(cF,Hdr),e(cF,pO),e(pO,Udr),e(cF,Jdr),e(ue,Ydr),e(ue,fF),e(fF,s_e),e(s_e,Kdr),e(fF,Zdr),e(fF,_O),e(_O,ecr),e(fF,ocr),e(ue,rcr),e(ue,mF),e(mF,l_e),e(l_e,tcr),e(mF,acr),e(mF,uO),e(uO,ncr),e(mF,scr),e(ue,lcr),e(ue,gF),e(gF,i_e),e(i_e,icr),e(gF,dcr),e(gF,bO),e(bO,ccr),e(gF,fcr),e(ue,mcr),e(ue,hF),e(hF,d_e),e(d_e,gcr),e(hF,hcr),e(hF,vO),e(vO,pcr),e(hF,_cr),e(ue,ucr),e(ue,pF),e(pF,c_e),e(c_e,bcr),e(pF,vcr),e(pF,TO),e(TO,Tcr),e(pF,Fcr),e(ue,Ccr),e(ue,_F),e(_F,f_e),e(f_e,Mcr),e(_F,Ecr),e(_F,FO),e(FO,ycr),e(_F,wcr),e(ue,Acr),e(ue,uF),e(uF,m_e),e(m_e,Lcr),e(uF,Bcr),e(uF,CO),e(CO,xcr),e(uF,kcr),e(vo,Rcr),e(vo,g_e),e(g_e,Scr),e(vo,Pcr),g(L0,vo,null),b(c,uRe,u),b(c,kc,u),e(kc,bF),e(bF,h_e),g(B0,h_e,null),e(kc,$cr),e(kc,p_e),e(p_e,Icr),b(c,bRe,u),b(c,yr,u),g(x0,yr,null),e(yr,Ncr),e(yr,Rc),e(Rc,jcr),e(Rc,__e),e(__e,Dcr),e(Rc,qcr),e(Rc,u_e),e(u_e,Gcr),e(Rc,Ocr),e(yr,Xcr),e(yr,k0),e(k0,Vcr),e(k0,b_e),e(b_e,zcr),e(k0,Wcr),e(yr,Qcr),e(yr,vt),g(R0,vt,null),e(vt,Hcr),e(vt,v_e),e(v_e,Ucr),e(vt,Jcr),e(vt,Sc),e(Sc,Ycr),e(Sc,T_e),e(T_e,Kcr),e(Sc,Zcr),e(Sc,F_e),e(F_e,efr),e(Sc,ofr),e(vt,rfr),e(vt,C_e),e(C_e,tfr),e(vt,afr),g(S0,vt,null),e(yr,nfr),e(yr,To),g(P0,To,null),e(To,sfr),e(To,M_e),e(M_e,lfr),e(To,ifr),e(To,Cn),e(Cn,dfr),e(Cn,E_e),e(E_e,cfr),e(Cn,ffr),e(Cn,y_e),e(y_e,mfr),e(Cn,gfr),e(Cn,w_e),e(w_e,hfr),e(Cn,pfr),e(To,_fr),e(To,V),e(V,vF),e(vF,A_e),e(A_e,ufr),e(vF,bfr),e(vF,MO),e(MO,vfr),e(vF,Tfr),e(V,Ffr),e(V,TF),e(TF,L_e),e(L_e,Cfr),e(TF,Mfr),e(TF,EO),e(EO,Efr),e(TF,yfr),e(V,wfr),e(V,FF),e(FF,B_e),e(B_e,Afr),e(FF,Lfr),e(FF,yO),e(yO,Bfr),e(FF,xfr),e(V,kfr),e(V,CF),e(CF,x_e),e(x_e,Rfr),e(CF,Sfr),e(CF,wO),e(wO,Pfr),e(CF,$fr),e(V,Ifr),e(V,MF),e(MF,k_e),e(k_e,Nfr),e(MF,jfr),e(MF,AO),e(AO,Dfr),e(MF,qfr),e(V,Gfr),e(V,EF),e(EF,R_e),e(R_e,Ofr),e(EF,Xfr),e(EF,LO),e(LO,Vfr),e(EF,zfr),e(V,Wfr),e(V,yF),e(yF,S_e),e(S_e,Qfr),e(yF,Hfr),e(yF,BO),e(BO,Ufr),e(yF,Jfr),e(V,Yfr),e(V,wF),e(wF,P_e),e(P_e,Kfr),e(wF,Zfr),e(wF,xO),e(xO,emr),e(wF,omr),e(V,rmr),e(V,AF),e(AF,$_e),e($_e,tmr),e(AF,amr),e(AF,kO),e(kO,nmr),e(AF,smr),e(V,lmr),e(V,LF),e(LF,I_e),e(I_e,imr),e(LF,dmr),e(LF,RO),e(RO,cmr),e(LF,fmr),e(V,mmr),e(V,BF),e(BF,N_e),e(N_e,gmr),e(BF,hmr),e(BF,SO),e(SO,pmr),e(BF,_mr),e(V,umr),e(V,xF),e(xF,j_e),e(j_e,bmr),e(xF,vmr),e(xF,PO),e(PO,Tmr),e(xF,Fmr),e(V,Cmr),e(V,kF),e(kF,D_e),e(D_e,Mmr),e(kF,Emr),e(kF,$O),e($O,ymr),e(kF,wmr),e(V,Amr),e(V,RF),e(RF,q_e),e(q_e,Lmr),e(RF,Bmr),e(RF,IO),e(IO,xmr),e(RF,kmr),e(V,Rmr),e(V,SF),e(SF,G_e),e(G_e,Smr),e(SF,Pmr),e(SF,NO),e(NO,$mr),e(SF,Imr),e(V,Nmr),e(V,PF),e(PF,O_e),e(O_e,jmr),e(PF,Dmr),e(PF,jO),e(jO,qmr),e(PF,Gmr),e(V,Omr),e(V,$F),e($F,X_e),e(X_e,Xmr),e($F,Vmr),e($F,DO),e(DO,zmr),e($F,Wmr),e(V,Qmr),e(V,IF),e(IF,V_e),e(V_e,Hmr),e(IF,Umr),e(IF,qO),e(qO,Jmr),e(IF,Ymr),e(V,Kmr),e(V,NF),e(NF,z_e),e(z_e,Zmr),e(NF,egr),e(NF,GO),e(GO,ogr),e(NF,rgr),e(V,tgr),e(V,jF),e(jF,W_e),e(W_e,agr),e(jF,ngr),e(jF,OO),e(OO,sgr),e(jF,lgr),e(V,igr),e(V,DF),e(DF,Q_e),e(Q_e,dgr),e(DF,cgr),e(DF,XO),e(XO,fgr),e(DF,mgr),e(V,ggr),e(V,qF),e(qF,H_e),e(H_e,hgr),e(qF,pgr),e(qF,VO),e(VO,_gr),e(qF,ugr),e(V,bgr),e(V,GF),e(GF,U_e),e(U_e,vgr),e(GF,Tgr),e(GF,zO),e(zO,Fgr),e(GF,Cgr),e(V,Mgr),e(V,OF),e(OF,J_e),e(J_e,Egr),e(OF,ygr),e(OF,WO),e(WO,wgr),e(OF,Agr),e(V,Lgr),e(V,XF),e(XF,Y_e),e(Y_e,Bgr),e(XF,xgr),e(XF,QO),e(QO,kgr),e(XF,Rgr),e(To,Sgr),e(To,K_e),e(K_e,Pgr),e(To,$gr),g($0,To,null),b(c,vRe,u),b(c,Pc,u),e(Pc,VF),e(VF,Z_e),g(I0,Z_e,null),e(Pc,Igr),e(Pc,eue),e(eue,Ngr),b(c,TRe,u),b(c,wr,u),g(N0,wr,null),e(wr,jgr),e(wr,$c),e($c,Dgr),e($c,oue),e(oue,qgr),e($c,Ggr),e($c,rue),e(rue,Ogr),e($c,Xgr),e(wr,Vgr),e(wr,j0),e(j0,zgr),e(j0,tue),e(tue,Wgr),e(j0,Qgr),e(wr,Hgr),e(wr,Tt),g(D0,Tt,null),e(Tt,Ugr),e(Tt,aue),e(aue,Jgr),e(Tt,Ygr),e(Tt,Ic),e(Ic,Kgr),e(Ic,nue),e(nue,Zgr),e(Ic,ehr),e(Ic,sue),e(sue,ohr),e(Ic,rhr),e(Tt,thr),e(Tt,lue),e(lue,ahr),e(Tt,nhr),g(q0,Tt,null),e(wr,shr),e(wr,Fo),g(G0,Fo,null),e(Fo,lhr),e(Fo,iue),e(iue,ihr),e(Fo,dhr),e(Fo,Mn),e(Mn,chr),e(Mn,due),e(due,fhr),e(Mn,mhr),e(Mn,cue),e(cue,ghr),e(Mn,hhr),e(Mn,fue),e(fue,phr),e(Mn,_hr),e(Fo,uhr),e(Fo,ae),e(ae,zF),e(zF,mue),e(mue,bhr),e(zF,vhr),e(zF,HO),e(HO,Thr),e(zF,Fhr),e(ae,Chr),e(ae,WF),e(WF,gue),e(gue,Mhr),e(WF,Ehr),e(WF,UO),e(UO,yhr),e(WF,whr),e(ae,Ahr),e(ae,QF),e(QF,hue),e(hue,Lhr),e(QF,Bhr),e(QF,JO),e(JO,xhr),e(QF,khr),e(ae,Rhr),e(ae,HF),e(HF,pue),e(pue,Shr),e(HF,Phr),e(HF,YO),e(YO,$hr),e(HF,Ihr),e(ae,Nhr),e(ae,UF),e(UF,_ue),e(_ue,jhr),e(UF,Dhr),e(UF,KO),e(KO,qhr),e(UF,Ghr),e(ae,Ohr),e(ae,JF),e(JF,uue),e(uue,Xhr),e(JF,Vhr),e(JF,ZO),e(ZO,zhr),e(JF,Whr),e(ae,Qhr),e(ae,YF),e(YF,bue),e(bue,Hhr),e(YF,Uhr),e(YF,eX),e(eX,Jhr),e(YF,Yhr),e(ae,Khr),e(ae,KF),e(KF,vue),e(vue,Zhr),e(KF,epr),e(KF,oX),e(oX,opr),e(KF,rpr),e(ae,tpr),e(ae,ZF),e(ZF,Tue),e(Tue,apr),e(ZF,npr),e(ZF,rX),e(rX,spr),e(ZF,lpr),e(ae,ipr),e(ae,eC),e(eC,Fue),e(Fue,dpr),e(eC,cpr),e(eC,tX),e(tX,fpr),e(eC,mpr),e(ae,gpr),e(ae,oC),e(oC,Cue),e(Cue,hpr),e(oC,ppr),e(oC,aX),e(aX,_pr),e(oC,upr),e(ae,bpr),e(ae,rC),e(rC,Mue),e(Mue,vpr),e(rC,Tpr),e(rC,nX),e(nX,Fpr),e(rC,Cpr),e(ae,Mpr),e(ae,tC),e(tC,Eue),e(Eue,Epr),e(tC,ypr),e(tC,sX),e(sX,wpr),e(tC,Apr),e(ae,Lpr),e(ae,aC),e(aC,yue),e(yue,Bpr),e(aC,xpr),e(aC,lX),e(lX,kpr),e(aC,Rpr),e(ae,Spr),e(ae,nC),e(nC,wue),e(wue,Ppr),e(nC,$pr),e(nC,iX),e(iX,Ipr),e(nC,Npr),e(ae,jpr),e(ae,sC),e(sC,Aue),e(Aue,Dpr),e(sC,qpr),e(sC,dX),e(dX,Gpr),e(sC,Opr),e(ae,Xpr),e(ae,lC),e(lC,Lue),e(Lue,Vpr),e(lC,zpr),e(lC,cX),e(cX,Wpr),e(lC,Qpr),e(Fo,Hpr),e(Fo,Bue),e(Bue,Upr),e(Fo,Jpr),g(O0,Fo,null),b(c,FRe,u),b(c,Nc,u),e(Nc,iC),e(iC,xue),g(X0,xue,null),e(Nc,Ypr),e(Nc,kue),e(kue,Kpr),b(c,CRe,u),b(c,Ar,u),g(V0,Ar,null),e(Ar,Zpr),e(Ar,jc),e(jc,e_r),e(jc,Rue),e(Rue,o_r),e(jc,r_r),e(jc,Sue),e(Sue,t_r),e(jc,a_r),e(Ar,n_r),e(Ar,z0),e(z0,s_r),e(z0,Pue),e(Pue,l_r),e(z0,i_r),e(Ar,d_r),e(Ar,Ft),g(W0,Ft,null),e(Ft,c_r),e(Ft,$ue),e($ue,f_r),e(Ft,m_r),e(Ft,Dc),e(Dc,g_r),e(Dc,Iue),e(Iue,h_r),e(Dc,p_r),e(Dc,Nue),e(Nue,__r),e(Dc,u_r),e(Ft,b_r),e(Ft,jue),e(jue,v_r),e(Ft,T_r),g(Q0,Ft,null),e(Ar,F_r),e(Ar,Co),g(H0,Co,null),e(Co,C_r),e(Co,Due),e(Due,M_r),e(Co,E_r),e(Co,En),e(En,y_r),e(En,que),e(que,w_r),e(En,A_r),e(En,Gue),e(Gue,L_r),e(En,B_r),e(En,Oue),e(Oue,x_r),e(En,k_r),e(Co,R_r),e(Co,Xue),e(Xue,dC),e(dC,Vue),e(Vue,S_r),e(dC,P_r),e(dC,fX),e(fX,$_r),e(dC,I_r),e(Co,N_r),e(Co,zue),e(zue,j_r),e(Co,D_r),g(U0,Co,null),b(c,MRe,u),b(c,qc,u),e(qc,cC),e(cC,Wue),g(J0,Wue,null),e(qc,q_r),e(qc,Que),e(Que,G_r),b(c,ERe,u),b(c,Lr,u),g(Y0,Lr,null),e(Lr,O_r),e(Lr,Gc),e(Gc,X_r),e(Gc,Hue),e(Hue,V_r),e(Gc,z_r),e(Gc,Uue),e(Uue,W_r),e(Gc,Q_r),e(Lr,H_r),e(Lr,K0),e(K0,U_r),e(K0,Jue),e(Jue,J_r),e(K0,Y_r),e(Lr,K_r),e(Lr,Ct),g(Z0,Ct,null),e(Ct,Z_r),e(Ct,Yue),e(Yue,eur),e(Ct,our),e(Ct,Oc),e(Oc,rur),e(Oc,Kue),e(Kue,tur),e(Oc,aur),e(Oc,Zue),e(Zue,nur),e(Oc,sur),e(Ct,lur),e(Ct,e5e),e(e5e,iur),e(Ct,dur),g(eL,Ct,null),e(Lr,cur),e(Lr,Mo),g(oL,Mo,null),e(Mo,fur),e(Mo,o5e),e(o5e,mur),e(Mo,gur),e(Mo,yn),e(yn,hur),e(yn,r5e),e(r5e,pur),e(yn,_ur),e(yn,t5e),e(t5e,uur),e(yn,bur),e(yn,a5e),e(a5e,vur),e(yn,Tur),e(Mo,Fur),e(Mo,K),e(K,fC),e(fC,n5e),e(n5e,Cur),e(fC,Mur),e(fC,mX),e(mX,Eur),e(fC,yur),e(K,wur),e(K,mC),e(mC,s5e),e(s5e,Aur),e(mC,Lur),e(mC,gX),e(gX,Bur),e(mC,xur),e(K,kur),e(K,gC),e(gC,l5e),e(l5e,Rur),e(gC,Sur),e(gC,hX),e(hX,Pur),e(gC,$ur),e(K,Iur),e(K,hC),e(hC,i5e),e(i5e,Nur),e(hC,jur),e(hC,pX),e(pX,Dur),e(hC,qur),e(K,Gur),e(K,pC),e(pC,d5e),e(d5e,Our),e(pC,Xur),e(pC,_X),e(_X,Vur),e(pC,zur),e(K,Wur),e(K,_C),e(_C,c5e),e(c5e,Qur),e(_C,Hur),e(_C,uX),e(uX,Uur),e(_C,Jur),e(K,Yur),e(K,uC),e(uC,f5e),e(f5e,Kur),e(uC,Zur),e(uC,bX),e(bX,e5r),e(uC,o5r),e(K,r5r),e(K,bC),e(bC,m5e),e(m5e,t5r),e(bC,a5r),e(bC,vX),e(vX,n5r),e(bC,s5r),e(K,l5r),e(K,vC),e(vC,g5e),e(g5e,i5r),e(vC,d5r),e(vC,TX),e(TX,c5r),e(vC,f5r),e(K,m5r),e(K,TC),e(TC,h5e),e(h5e,g5r),e(TC,h5r),e(TC,FX),e(FX,p5r),e(TC,_5r),e(K,u5r),e(K,FC),e(FC,p5e),e(p5e,b5r),e(FC,v5r),e(FC,CX),e(CX,T5r),e(FC,F5r),e(K,C5r),e(K,CC),e(CC,_5e),e(_5e,M5r),e(CC,E5r),e(CC,MX),e(MX,y5r),e(CC,w5r),e(K,A5r),e(K,MC),e(MC,u5e),e(u5e,L5r),e(MC,B5r),e(MC,EX),e(EX,x5r),e(MC,k5r),e(K,R5r),e(K,EC),e(EC,b5e),e(b5e,S5r),e(EC,P5r),e(EC,yX),e(yX,$5r),e(EC,I5r),e(K,N5r),e(K,yC),e(yC,v5e),e(v5e,j5r),e(yC,D5r),e(yC,wX),e(wX,q5r),e(yC,G5r),e(K,O5r),e(K,wC),e(wC,T5e),e(T5e,X5r),e(wC,V5r),e(wC,AX),e(AX,z5r),e(wC,W5r),e(K,Q5r),e(K,AC),e(AC,F5e),e(F5e,H5r),e(AC,U5r),e(AC,LX),e(LX,J5r),e(AC,Y5r),e(K,K5r),e(K,LC),e(LC,C5e),e(C5e,Z5r),e(LC,e2r),e(LC,BX),e(BX,o2r),e(LC,r2r),e(K,t2r),e(K,BC),e(BC,M5e),e(M5e,a2r),e(BC,n2r),e(BC,xX),e(xX,s2r),e(BC,l2r),e(K,i2r),e(K,xC),e(xC,E5e),e(E5e,d2r),e(xC,c2r),e(xC,kX),e(kX,f2r),e(xC,m2r),e(Mo,g2r),e(Mo,y5e),e(y5e,h2r),e(Mo,p2r),g(rL,Mo,null),b(c,yRe,u),b(c,Xc,u),e(Xc,kC),e(kC,w5e),g(tL,w5e,null),e(Xc,_2r),e(Xc,A5e),e(A5e,u2r),b(c,wRe,u),b(c,Br,u),g(aL,Br,null),e(Br,b2r),e(Br,Vc),e(Vc,v2r),e(Vc,L5e),e(L5e,T2r),e(Vc,F2r),e(Vc,B5e),e(B5e,C2r),e(Vc,M2r),e(Br,E2r),e(Br,nL),e(nL,y2r),e(nL,x5e),e(x5e,w2r),e(nL,A2r),e(Br,L2r),e(Br,Mt),g(sL,Mt,null),e(Mt,B2r),e(Mt,k5e),e(k5e,x2r),e(Mt,k2r),e(Mt,zc),e(zc,R2r),e(zc,R5e),e(R5e,S2r),e(zc,P2r),e(zc,S5e),e(S5e,$2r),e(zc,I2r),e(Mt,N2r),e(Mt,P5e),e(P5e,j2r),e(Mt,D2r),g(lL,Mt,null),e(Br,q2r),e(Br,Eo),g(iL,Eo,null),e(Eo,G2r),e(Eo,$5e),e($5e,O2r),e(Eo,X2r),e(Eo,wn),e(wn,V2r),e(wn,I5e),e(I5e,z2r),e(wn,W2r),e(wn,N5e),e(N5e,Q2r),e(wn,H2r),e(wn,j5e),e(j5e,U2r),e(wn,J2r),e(Eo,Y2r),e(Eo,Z),e(Z,RC),e(RC,D5e),e(D5e,K2r),e(RC,Z2r),e(RC,RX),e(RX,e1r),e(RC,o1r),e(Z,r1r),e(Z,SC),e(SC,q5e),e(q5e,t1r),e(SC,a1r),e(SC,SX),e(SX,n1r),e(SC,s1r),e(Z,l1r),e(Z,PC),e(PC,G5e),e(G5e,i1r),e(PC,d1r),e(PC,PX),e(PX,c1r),e(PC,f1r),e(Z,m1r),e(Z,$C),e($C,O5e),e(O5e,g1r),e($C,h1r),e($C,$X),e($X,p1r),e($C,_1r),e(Z,u1r),e(Z,IC),e(IC,X5e),e(X5e,b1r),e(IC,v1r),e(IC,IX),e(IX,T1r),e(IC,F1r),e(Z,C1r),e(Z,NC),e(NC,V5e),e(V5e,M1r),e(NC,E1r),e(NC,NX),e(NX,y1r),e(NC,w1r),e(Z,A1r),e(Z,jC),e(jC,z5e),e(z5e,L1r),e(jC,B1r),e(jC,jX),e(jX,x1r),e(jC,k1r),e(Z,R1r),e(Z,DC),e(DC,W5e),e(W5e,S1r),e(DC,P1r),e(DC,DX),e(DX,$1r),e(DC,I1r),e(Z,N1r),e(Z,qC),e(qC,Q5e),e(Q5e,j1r),e(qC,D1r),e(qC,qX),e(qX,q1r),e(qC,G1r),e(Z,O1r),e(Z,GC),e(GC,H5e),e(H5e,X1r),e(GC,V1r),e(GC,GX),e(GX,z1r),e(GC,W1r),e(Z,Q1r),e(Z,OC),e(OC,U5e),e(U5e,H1r),e(OC,U1r),e(OC,OX),e(OX,J1r),e(OC,Y1r),e(Z,K1r),e(Z,XC),e(XC,J5e),e(J5e,Z1r),e(XC,ebr),e(XC,XX),e(XX,obr),e(XC,rbr),e(Z,tbr),e(Z,VC),e(VC,Y5e),e(Y5e,abr),e(VC,nbr),e(VC,VX),e(VX,sbr),e(VC,lbr),e(Z,ibr),e(Z,zC),e(zC,K5e),e(K5e,dbr),e(zC,cbr),e(zC,zX),e(zX,fbr),e(zC,mbr),e(Z,gbr),e(Z,WC),e(WC,Z5e),e(Z5e,hbr),e(WC,pbr),e(WC,WX),e(WX,_br),e(WC,ubr),e(Z,bbr),e(Z,QC),e(QC,e2e),e(e2e,vbr),e(QC,Tbr),e(QC,QX),e(QX,Fbr),e(QC,Cbr),e(Z,Mbr),e(Z,HC),e(HC,o2e),e(o2e,Ebr),e(HC,ybr),e(HC,HX),e(HX,wbr),e(HC,Abr),e(Z,Lbr),e(Z,UC),e(UC,r2e),e(r2e,Bbr),e(UC,xbr),e(UC,UX),e(UX,kbr),e(UC,Rbr),e(Z,Sbr),e(Z,JC),e(JC,t2e),e(t2e,Pbr),e(JC,$br),e(JC,JX),e(JX,Ibr),e(JC,Nbr),e(Eo,jbr),e(Eo,a2e),e(a2e,Dbr),e(Eo,qbr),g(dL,Eo,null),b(c,ARe,u),b(c,Wc,u),e(Wc,YC),e(YC,n2e),g(cL,n2e,null),e(Wc,Gbr),e(Wc,s2e),e(s2e,Obr),b(c,LRe,u),b(c,xr,u),g(fL,xr,null),e(xr,Xbr),e(xr,Qc),e(Qc,Vbr),e(Qc,l2e),e(l2e,zbr),e(Qc,Wbr),e(Qc,i2e),e(i2e,Qbr),e(Qc,Hbr),e(xr,Ubr),e(xr,mL),e(mL,Jbr),e(mL,d2e),e(d2e,Ybr),e(mL,Kbr),e(xr,Zbr),e(xr,Et),g(gL,Et,null),e(Et,evr),e(Et,c2e),e(c2e,ovr),e(Et,rvr),e(Et,Hc),e(Hc,tvr),e(Hc,f2e),e(f2e,avr),e(Hc,nvr),e(Hc,m2e),e(m2e,svr),e(Hc,lvr),e(Et,ivr),e(Et,g2e),e(g2e,dvr),e(Et,cvr),g(hL,Et,null),e(xr,fvr),e(xr,yo),g(pL,yo,null),e(yo,mvr),e(yo,h2e),e(h2e,gvr),e(yo,hvr),e(yo,An),e(An,pvr),e(An,p2e),e(p2e,_vr),e(An,uvr),e(An,_2e),e(_2e,bvr),e(An,vvr),e(An,u2e),e(u2e,Tvr),e(An,Fvr),e(yo,Cvr),e(yo,b2e),e(b2e,KC),e(KC,v2e),e(v2e,Mvr),e(KC,Evr),e(KC,YX),e(YX,yvr),e(KC,wvr),e(yo,Avr),e(yo,T2e),e(T2e,Lvr),e(yo,Bvr),g(_L,yo,null),b(c,BRe,u),b(c,Uc,u),e(Uc,ZC),e(ZC,F2e),g(uL,F2e,null),e(Uc,xvr),e(Uc,C2e),e(C2e,kvr),b(c,xRe,u),b(c,kr,u),g(bL,kr,null),e(kr,Rvr),e(kr,Jc),e(Jc,Svr),e(Jc,M2e),e(M2e,Pvr),e(Jc,$vr),e(Jc,E2e),e(E2e,Ivr),e(Jc,Nvr),e(kr,jvr),e(kr,vL),e(vL,Dvr),e(vL,y2e),e(y2e,qvr),e(vL,Gvr),e(kr,Ovr),e(kr,yt),g(TL,yt,null),e(yt,Xvr),e(yt,w2e),e(w2e,Vvr),e(yt,zvr),e(yt,Yc),e(Yc,Wvr),e(Yc,A2e),e(A2e,Qvr),e(Yc,Hvr),e(Yc,L2e),e(L2e,Uvr),e(Yc,Jvr),e(yt,Yvr),e(yt,B2e),e(B2e,Kvr),e(yt,Zvr),g(FL,yt,null),e(kr,e6r),e(kr,wo),g(CL,wo,null),e(wo,o6r),e(wo,x2e),e(x2e,r6r),e(wo,t6r),e(wo,Ln),e(Ln,a6r),e(Ln,k2e),e(k2e,n6r),e(Ln,s6r),e(Ln,R2e),e(R2e,l6r),e(Ln,i6r),e(Ln,S2e),e(S2e,d6r),e(Ln,c6r),e(wo,f6r),e(wo,P2e),e(P2e,eM),e(eM,$2e),e($2e,m6r),e(eM,g6r),e(eM,KX),e(KX,h6r),e(eM,p6r),e(wo,_6r),e(wo,I2e),e(I2e,u6r),e(wo,b6r),g(ML,wo,null),b(c,kRe,u),b(c,Kc,u),e(Kc,oM),e(oM,N2e),g(EL,N2e,null),e(Kc,v6r),e(Kc,j2e),e(j2e,T6r),b(c,RRe,u),b(c,Rr,u),g(yL,Rr,null),e(Rr,F6r),e(Rr,Zc),e(Zc,C6r),e(Zc,D2e),e(D2e,M6r),e(Zc,E6r),e(Zc,q2e),e(q2e,y6r),e(Zc,w6r),e(Rr,A6r),e(Rr,wL),e(wL,L6r),e(wL,G2e),e(G2e,B6r),e(wL,x6r),e(Rr,k6r),e(Rr,wt),g(AL,wt,null),e(wt,R6r),e(wt,O2e),e(O2e,S6r),e(wt,P6r),e(wt,ef),e(ef,$6r),e(ef,X2e),e(X2e,I6r),e(ef,N6r),e(ef,V2e),e(V2e,j6r),e(ef,D6r),e(wt,q6r),e(wt,z2e),e(z2e,G6r),e(wt,O6r),g(LL,wt,null),e(Rr,X6r),e(Rr,Ao),g(BL,Ao,null),e(Ao,V6r),e(Ao,W2e),e(W2e,z6r),e(Ao,W6r),e(Ao,Bn),e(Bn,Q6r),e(Bn,Q2e),e(Q2e,H6r),e(Bn,U6r),e(Bn,H2e),e(H2e,J6r),e(Bn,Y6r),e(Bn,U2e),e(U2e,K6r),e(Bn,Z6r),e(Ao,eTr),e(Ao,z),e(z,rM),e(rM,J2e),e(J2e,oTr),e(rM,rTr),e(rM,ZX),e(ZX,tTr),e(rM,aTr),e(z,nTr),e(z,tM),e(tM,Y2e),e(Y2e,sTr),e(tM,lTr),e(tM,eV),e(eV,iTr),e(tM,dTr),e(z,cTr),e(z,aM),e(aM,K2e),e(K2e,fTr),e(aM,mTr),e(aM,oV),e(oV,gTr),e(aM,hTr),e(z,pTr),e(z,nM),e(nM,Z2e),e(Z2e,_Tr),e(nM,uTr),e(nM,rV),e(rV,bTr),e(nM,vTr),e(z,TTr),e(z,sM),e(sM,e1e),e(e1e,FTr),e(sM,CTr),e(sM,tV),e(tV,MTr),e(sM,ETr),e(z,yTr),e(z,lM),e(lM,o1e),e(o1e,wTr),e(lM,ATr),e(lM,aV),e(aV,LTr),e(lM,BTr),e(z,xTr),e(z,iM),e(iM,r1e),e(r1e,kTr),e(iM,RTr),e(iM,nV),e(nV,STr),e(iM,PTr),e(z,$Tr),e(z,dM),e(dM,t1e),e(t1e,ITr),e(dM,NTr),e(dM,sV),e(sV,jTr),e(dM,DTr),e(z,qTr),e(z,cM),e(cM,a1e),e(a1e,GTr),e(cM,OTr),e(cM,lV),e(lV,XTr),e(cM,VTr),e(z,zTr),e(z,fM),e(fM,n1e),e(n1e,WTr),e(fM,QTr),e(fM,iV),e(iV,HTr),e(fM,UTr),e(z,JTr),e(z,mM),e(mM,s1e),e(s1e,YTr),e(mM,KTr),e(mM,dV),e(dV,ZTr),e(mM,eFr),e(z,oFr),e(z,gM),e(gM,l1e),e(l1e,rFr),e(gM,tFr),e(gM,cV),e(cV,aFr),e(gM,nFr),e(z,sFr),e(z,hM),e(hM,i1e),e(i1e,lFr),e(hM,iFr),e(hM,fV),e(fV,dFr),e(hM,cFr),e(z,fFr),e(z,pM),e(pM,d1e),e(d1e,mFr),e(pM,gFr),e(pM,mV),e(mV,hFr),e(pM,pFr),e(z,_Fr),e(z,_M),e(_M,c1e),e(c1e,uFr),e(_M,bFr),e(_M,gV),e(gV,vFr),e(_M,TFr),e(z,FFr),e(z,uM),e(uM,f1e),e(f1e,CFr),e(uM,MFr),e(uM,hV),e(hV,EFr),e(uM,yFr),e(z,wFr),e(z,bM),e(bM,m1e),e(m1e,AFr),e(bM,LFr),e(bM,pV),e(pV,BFr),e(bM,xFr),e(z,kFr),e(z,vM),e(vM,g1e),e(g1e,RFr),e(vM,SFr),e(vM,_V),e(_V,PFr),e(vM,$Fr),e(z,IFr),e(z,TM),e(TM,h1e),e(h1e,NFr),e(TM,jFr),e(TM,uV),e(uV,DFr),e(TM,qFr),e(z,GFr),e(z,FM),e(FM,p1e),e(p1e,OFr),e(FM,XFr),e(FM,bV),e(bV,VFr),e(FM,zFr),e(z,WFr),e(z,CM),e(CM,_1e),e(_1e,QFr),e(CM,HFr),e(CM,vV),e(vV,UFr),e(CM,JFr),e(z,YFr),e(z,MM),e(MM,u1e),e(u1e,KFr),e(MM,ZFr),e(MM,TV),e(TV,eCr),e(MM,oCr),e(z,rCr),e(z,EM),e(EM,b1e),e(b1e,tCr),e(EM,aCr),e(EM,FV),e(FV,nCr),e(EM,sCr),e(z,lCr),e(z,yM),e(yM,v1e),e(v1e,iCr),e(yM,dCr),e(yM,CV),e(CV,cCr),e(yM,fCr),e(z,mCr),e(z,wM),e(wM,T1e),e(T1e,gCr),e(wM,hCr),e(wM,MV),e(MV,pCr),e(wM,_Cr),e(Ao,uCr),e(Ao,F1e),e(F1e,bCr),e(Ao,vCr),g(xL,Ao,null),b(c,SRe,u),b(c,of,u),e(of,AM),e(AM,C1e),g(kL,C1e,null),e(of,TCr),e(of,M1e),e(M1e,FCr),b(c,PRe,u),b(c,Sr,u),g(RL,Sr,null),e(Sr,CCr),e(Sr,rf),e(rf,MCr),e(rf,E1e),e(E1e,ECr),e(rf,yCr),e(rf,y1e),e(y1e,wCr),e(rf,ACr),e(Sr,LCr),e(Sr,SL),e(SL,BCr),e(SL,w1e),e(w1e,xCr),e(SL,kCr),e(Sr,RCr),e(Sr,At),g(PL,At,null),e(At,SCr),e(At,A1e),e(A1e,PCr),e(At,$Cr),e(At,tf),e(tf,ICr),e(tf,L1e),e(L1e,NCr),e(tf,jCr),e(tf,B1e),e(B1e,DCr),e(tf,qCr),e(At,GCr),e(At,x1e),e(x1e,OCr),e(At,XCr),g($L,At,null),e(Sr,VCr),e(Sr,Lo),g(IL,Lo,null),e(Lo,zCr),e(Lo,k1e),e(k1e,WCr),e(Lo,QCr),e(Lo,xn),e(xn,HCr),e(xn,R1e),e(R1e,UCr),e(xn,JCr),e(xn,S1e),e(S1e,YCr),e(xn,KCr),e(xn,P1e),e(P1e,ZCr),e(xn,eMr),e(Lo,oMr),e(Lo,ca),e(ca,LM),e(LM,$1e),e($1e,rMr),e(LM,tMr),e(LM,EV),e(EV,aMr),e(LM,nMr),e(ca,sMr),e(ca,BM),e(BM,I1e),e(I1e,lMr),e(BM,iMr),e(BM,yV),e(yV,dMr),e(BM,cMr),e(ca,fMr),e(ca,xM),e(xM,N1e),e(N1e,mMr),e(xM,gMr),e(xM,wV),e(wV,hMr),e(xM,pMr),e(ca,_Mr),e(ca,kM),e(kM,j1e),e(j1e,uMr),e(kM,bMr),e(kM,AV),e(AV,vMr),e(kM,TMr),e(ca,FMr),e(ca,RM),e(RM,D1e),e(D1e,CMr),e(RM,MMr),e(RM,LV),e(LV,EMr),e(RM,yMr),e(Lo,wMr),e(Lo,q1e),e(q1e,AMr),e(Lo,LMr),g(NL,Lo,null),b(c,$Re,u),b(c,af,u),e(af,SM),e(SM,G1e),g(jL,G1e,null),e(af,BMr),e(af,O1e),e(O1e,xMr),b(c,IRe,u),b(c,Pr,u),g(DL,Pr,null),e(Pr,kMr),e(Pr,nf),e(nf,RMr),e(nf,X1e),e(X1e,SMr),e(nf,PMr),e(nf,V1e),e(V1e,$Mr),e(nf,IMr),e(Pr,NMr),e(Pr,qL),e(qL,jMr),e(qL,z1e),e(z1e,DMr),e(qL,qMr),e(Pr,GMr),e(Pr,Lt),g(GL,Lt,null),e(Lt,OMr),e(Lt,W1e),e(W1e,XMr),e(Lt,VMr),e(Lt,sf),e(sf,zMr),e(sf,Q1e),e(Q1e,WMr),e(sf,QMr),e(sf,H1e),e(H1e,HMr),e(sf,UMr),e(Lt,JMr),e(Lt,U1e),e(U1e,YMr),e(Lt,KMr),g(OL,Lt,null),e(Pr,ZMr),e(Pr,Bo),g(XL,Bo,null),e(Bo,e4r),e(Bo,J1e),e(J1e,o4r),e(Bo,r4r),e(Bo,kn),e(kn,t4r),e(kn,Y1e),e(Y1e,a4r),e(kn,n4r),e(kn,K1e),e(K1e,s4r),e(kn,l4r),e(kn,Z1e),e(Z1e,i4r),e(kn,d4r),e(Bo,c4r),e(Bo,ce),e(ce,PM),e(PM,ebe),e(ebe,f4r),e(PM,m4r),e(PM,BV),e(BV,g4r),e(PM,h4r),e(ce,p4r),e(ce,$M),e($M,obe),e(obe,_4r),e($M,u4r),e($M,xV),e(xV,b4r),e($M,v4r),e(ce,T4r),e(ce,IM),e(IM,rbe),e(rbe,F4r),e(IM,C4r),e(IM,kV),e(kV,M4r),e(IM,E4r),e(ce,y4r),e(ce,NM),e(NM,tbe),e(tbe,w4r),e(NM,A4r),e(NM,RV),e(RV,L4r),e(NM,B4r),e(ce,x4r),e(ce,jM),e(jM,abe),e(abe,k4r),e(jM,R4r),e(jM,SV),e(SV,S4r),e(jM,P4r),e(ce,$4r),e(ce,DM),e(DM,nbe),e(nbe,I4r),e(DM,N4r),e(DM,PV),e(PV,j4r),e(DM,D4r),e(ce,q4r),e(ce,qM),e(qM,sbe),e(sbe,G4r),e(qM,O4r),e(qM,$V),e($V,X4r),e(qM,V4r),e(ce,z4r),e(ce,GM),e(GM,lbe),e(lbe,W4r),e(GM,Q4r),e(GM,IV),e(IV,H4r),e(GM,U4r),e(ce,J4r),e(ce,OM),e(OM,ibe),e(ibe,Y4r),e(OM,K4r),e(OM,NV),e(NV,Z4r),e(OM,eEr),e(ce,oEr),e(ce,XM),e(XM,dbe),e(dbe,rEr),e(XM,tEr),e(XM,jV),e(jV,aEr),e(XM,nEr),e(ce,sEr),e(ce,VM),e(VM,cbe),e(cbe,lEr),e(VM,iEr),e(VM,DV),e(DV,dEr),e(VM,cEr),e(ce,fEr),e(ce,zM),e(zM,fbe),e(fbe,mEr),e(zM,gEr),e(zM,qV),e(qV,hEr),e(zM,pEr),e(Bo,_Er),e(Bo,mbe),e(mbe,uEr),e(Bo,bEr),g(VL,Bo,null),b(c,NRe,u),b(c,lf,u),e(lf,WM),e(WM,gbe),g(zL,gbe,null),e(lf,vEr),e(lf,hbe),e(hbe,TEr),b(c,jRe,u),b(c,$r,u),g(WL,$r,null),e($r,FEr),e($r,df),e(df,CEr),e(df,pbe),e(pbe,MEr),e(df,EEr),e(df,_be),e(_be,yEr),e(df,wEr),e($r,AEr),e($r,QL),e(QL,LEr),e(QL,ube),e(ube,BEr),e(QL,xEr),e($r,kEr),e($r,Bt),g(HL,Bt,null),e(Bt,REr),e(Bt,bbe),e(bbe,SEr),e(Bt,PEr),e(Bt,cf),e(cf,$Er),e(cf,vbe),e(vbe,IEr),e(cf,NEr),e(cf,Tbe),e(Tbe,jEr),e(cf,DEr),e(Bt,qEr),e(Bt,Fbe),e(Fbe,GEr),e(Bt,OEr),g(UL,Bt,null),e($r,XEr),e($r,xo),g(JL,xo,null),e(xo,VEr),e(xo,Cbe),e(Cbe,zEr),e(xo,WEr),e(xo,Rn),e(Rn,QEr),e(Rn,Mbe),e(Mbe,HEr),e(Rn,UEr),e(Rn,Ebe),e(Ebe,JEr),e(Rn,YEr),e(Rn,ybe),e(ybe,KEr),e(Rn,ZEr),e(xo,e3r),e(xo,be),e(be,QM),e(QM,wbe),e(wbe,o3r),e(QM,r3r),e(QM,GV),e(GV,t3r),e(QM,a3r),e(be,n3r),e(be,HM),e(HM,Abe),e(Abe,s3r),e(HM,l3r),e(HM,OV),e(OV,i3r),e(HM,d3r),e(be,c3r),e(be,UM),e(UM,Lbe),e(Lbe,f3r),e(UM,m3r),e(UM,XV),e(XV,g3r),e(UM,h3r),e(be,p3r),e(be,JM),e(JM,Bbe),e(Bbe,_3r),e(JM,u3r),e(JM,VV),e(VV,b3r),e(JM,v3r),e(be,T3r),e(be,YM),e(YM,xbe),e(xbe,F3r),e(YM,C3r),e(YM,zV),e(zV,M3r),e(YM,E3r),e(be,y3r),e(be,KM),e(KM,kbe),e(kbe,w3r),e(KM,A3r),e(KM,WV),e(WV,L3r),e(KM,B3r),e(be,x3r),e(be,ZM),e(ZM,Rbe),e(Rbe,k3r),e(ZM,R3r),e(ZM,QV),e(QV,S3r),e(ZM,P3r),e(be,$3r),e(be,e4),e(e4,Sbe),e(Sbe,I3r),e(e4,N3r),e(e4,HV),e(HV,j3r),e(e4,D3r),e(be,q3r),e(be,o4),e(o4,Pbe),e(Pbe,G3r),e(o4,O3r),e(o4,UV),e(UV,X3r),e(o4,V3r),e(be,z3r),e(be,r4),e(r4,$be),e($be,W3r),e(r4,Q3r),e(r4,JV),e(JV,H3r),e(r4,U3r),e(xo,J3r),e(xo,Ibe),e(Ibe,Y3r),e(xo,K3r),g(YL,xo,null),b(c,DRe,u),b(c,ff,u),e(ff,t4),e(t4,Nbe),g(KL,Nbe,null),e(ff,Z3r),e(ff,jbe),e(jbe,eyr),b(c,qRe,u),b(c,Ir,u),g(ZL,Ir,null),e(Ir,oyr),e(Ir,mf),e(mf,ryr),e(mf,Dbe),e(Dbe,tyr),e(mf,ayr),e(mf,qbe),e(qbe,nyr),e(mf,syr),e(Ir,lyr),e(Ir,e8),e(e8,iyr),e(e8,Gbe),e(Gbe,dyr),e(e8,cyr),e(Ir,fyr),e(Ir,xt),g(o8,xt,null),e(xt,myr),e(xt,Obe),e(Obe,gyr),e(xt,hyr),e(xt,gf),e(gf,pyr),e(gf,Xbe),e(Xbe,_yr),e(gf,uyr),e(gf,Vbe),e(Vbe,byr),e(gf,vyr),e(xt,Tyr),e(xt,zbe),e(zbe,Fyr),e(xt,Cyr),g(r8,xt,null),e(Ir,Myr),e(Ir,ko),g(t8,ko,null),e(ko,Eyr),e(ko,Wbe),e(Wbe,yyr),e(ko,wyr),e(ko,Sn),e(Sn,Ayr),e(Sn,Qbe),e(Qbe,Lyr),e(Sn,Byr),e(Sn,Hbe),e(Hbe,xyr),e(Sn,kyr),e(Sn,Ube),e(Ube,Ryr),e(Sn,Syr),e(ko,Pyr),e(ko,Ee),e(Ee,a4),e(a4,Jbe),e(Jbe,$yr),e(a4,Iyr),e(a4,YV),e(YV,Nyr),e(a4,jyr),e(Ee,Dyr),e(Ee,n4),e(n4,Ybe),e(Ybe,qyr),e(n4,Gyr),e(n4,KV),e(KV,Oyr),e(n4,Xyr),e(Ee,Vyr),e(Ee,s4),e(s4,Kbe),e(Kbe,zyr),e(s4,Wyr),e(s4,ZV),e(ZV,Qyr),e(s4,Hyr),e(Ee,Uyr),e(Ee,l4),e(l4,Zbe),e(Zbe,Jyr),e(l4,Yyr),e(l4,ez),e(ez,Kyr),e(l4,Zyr),e(Ee,ewr),e(Ee,i4),e(i4,eve),e(eve,owr),e(i4,rwr),e(i4,oz),e(oz,twr),e(i4,awr),e(Ee,nwr),e(Ee,d4),e(d4,ove),e(ove,swr),e(d4,lwr),e(d4,rz),e(rz,iwr),e(d4,dwr),e(Ee,cwr),e(Ee,c4),e(c4,rve),e(rve,fwr),e(c4,mwr),e(c4,tz),e(tz,gwr),e(c4,hwr),e(Ee,pwr),e(Ee,f4),e(f4,tve),e(tve,_wr),e(f4,uwr),e(f4,az),e(az,bwr),e(f4,vwr),e(Ee,Twr),e(Ee,m4),e(m4,ave),e(ave,Fwr),e(m4,Cwr),e(m4,nz),e(nz,Mwr),e(m4,Ewr),e(ko,ywr),e(ko,nve),e(nve,wwr),e(ko,Awr),g(a8,ko,null),b(c,GRe,u),b(c,hf,u),e(hf,g4),e(g4,sve),g(n8,sve,null),e(hf,Lwr),e(hf,lve),e(lve,Bwr),b(c,ORe,u),b(c,Nr,u),g(s8,Nr,null),e(Nr,xwr),e(Nr,pf),e(pf,kwr),e(pf,ive),e(ive,Rwr),e(pf,Swr),e(pf,dve),e(dve,Pwr),e(pf,$wr),e(Nr,Iwr),e(Nr,l8),e(l8,Nwr),e(l8,cve),e(cve,jwr),e(l8,Dwr),e(Nr,qwr),e(Nr,kt),g(i8,kt,null),e(kt,Gwr),e(kt,fve),e(fve,Owr),e(kt,Xwr),e(kt,_f),e(_f,Vwr),e(_f,mve),e(mve,zwr),e(_f,Wwr),e(_f,gve),e(gve,Qwr),e(_f,Hwr),e(kt,Uwr),e(kt,hve),e(hve,Jwr),e(kt,Ywr),g(d8,kt,null),e(Nr,Kwr),e(Nr,Ro),g(c8,Ro,null),e(Ro,Zwr),e(Ro,pve),e(pve,eAr),e(Ro,oAr),e(Ro,Pn),e(Pn,rAr),e(Pn,_ve),e(_ve,tAr),e(Pn,aAr),e(Pn,uve),e(uve,nAr),e(Pn,sAr),e(Pn,bve),e(bve,lAr),e(Pn,iAr),e(Ro,dAr),e(Ro,ve),e(ve,h4),e(h4,vve),e(vve,cAr),e(h4,fAr),e(h4,sz),e(sz,mAr),e(h4,gAr),e(ve,hAr),e(ve,p4),e(p4,Tve),e(Tve,pAr),e(p4,_Ar),e(p4,lz),e(lz,uAr),e(p4,bAr),e(ve,vAr),e(ve,_4),e(_4,Fve),e(Fve,TAr),e(_4,FAr),e(_4,iz),e(iz,CAr),e(_4,MAr),e(ve,EAr),e(ve,u4),e(u4,Cve),e(Cve,yAr),e(u4,wAr),e(u4,dz),e(dz,AAr),e(u4,LAr),e(ve,BAr),e(ve,b4),e(b4,Mve),e(Mve,xAr),e(b4,kAr),e(b4,cz),e(cz,RAr),e(b4,SAr),e(ve,PAr),e(ve,v4),e(v4,Eve),e(Eve,$Ar),e(v4,IAr),e(v4,fz),e(fz,NAr),e(v4,jAr),e(ve,DAr),e(ve,T4),e(T4,yve),e(yve,qAr),e(T4,GAr),e(T4,mz),e(mz,OAr),e(T4,XAr),e(ve,VAr),e(ve,F4),e(F4,wve),e(wve,zAr),e(F4,WAr),e(F4,gz),e(gz,QAr),e(F4,HAr),e(ve,UAr),e(ve,C4),e(C4,Ave),e(Ave,JAr),e(C4,YAr),e(C4,hz),e(hz,KAr),e(C4,ZAr),e(ve,e0r),e(ve,M4),e(M4,Lve),e(Lve,o0r),e(M4,r0r),e(M4,pz),e(pz,t0r),e(M4,a0r),e(Ro,n0r),e(Ro,Bve),e(Bve,s0r),e(Ro,l0r),g(f8,Ro,null),b(c,XRe,u),b(c,uf,u),e(uf,E4),e(E4,xve),g(m8,xve,null),e(uf,i0r),e(uf,kve),e(kve,d0r),b(c,VRe,u),b(c,jr,u),g(g8,jr,null),e(jr,c0r),e(jr,bf),e(bf,f0r),e(bf,Rve),e(Rve,m0r),e(bf,g0r),e(bf,Sve),e(Sve,h0r),e(bf,p0r),e(jr,_0r),e(jr,h8),e(h8,u0r),e(h8,Pve),e(Pve,b0r),e(h8,v0r),e(jr,T0r),e(jr,Rt),g(p8,Rt,null),e(Rt,F0r),e(Rt,$ve),e($ve,C0r),e(Rt,M0r),e(Rt,vf),e(vf,E0r),e(vf,Ive),e(Ive,y0r),e(vf,w0r),e(vf,Nve),e(Nve,A0r),e(vf,L0r),e(Rt,B0r),e(Rt,jve),e(jve,x0r),e(Rt,k0r),g(_8,Rt,null),e(jr,R0r),e(jr,So),g(u8,So,null),e(So,S0r),e(So,Dve),e(Dve,P0r),e(So,$0r),e(So,$n),e($n,I0r),e($n,qve),e(qve,N0r),e($n,j0r),e($n,Gve),e(Gve,D0r),e($n,q0r),e($n,Ove),e(Ove,G0r),e($n,O0r),e(So,X0r),e(So,Te),e(Te,y4),e(y4,Xve),e(Xve,V0r),e(y4,z0r),e(y4,_z),e(_z,W0r),e(y4,Q0r),e(Te,H0r),e(Te,w4),e(w4,Vve),e(Vve,U0r),e(w4,J0r),e(w4,uz),e(uz,Y0r),e(w4,K0r),e(Te,Z0r),e(Te,A4),e(A4,zve),e(zve,eLr),e(A4,oLr),e(A4,bz),e(bz,rLr),e(A4,tLr),e(Te,aLr),e(Te,L4),e(L4,Wve),e(Wve,nLr),e(L4,sLr),e(L4,vz),e(vz,lLr),e(L4,iLr),e(Te,dLr),e(Te,B4),e(B4,Qve),e(Qve,cLr),e(B4,fLr),e(B4,Tz),e(Tz,mLr),e(B4,gLr),e(Te,hLr),e(Te,x4),e(x4,Hve),e(Hve,pLr),e(x4,_Lr),e(x4,Fz),e(Fz,uLr),e(x4,bLr),e(Te,vLr),e(Te,k4),e(k4,Uve),e(Uve,TLr),e(k4,FLr),e(k4,Cz),e(Cz,CLr),e(k4,MLr),e(Te,ELr),e(Te,R4),e(R4,Jve),e(Jve,yLr),e(R4,wLr),e(R4,Mz),e(Mz,ALr),e(R4,LLr),e(Te,BLr),e(Te,S4),e(S4,Yve),e(Yve,xLr),e(S4,kLr),e(S4,Ez),e(Ez,RLr),e(S4,SLr),e(Te,PLr),e(Te,P4),e(P4,Kve),e(Kve,$Lr),e(P4,ILr),e(P4,yz),e(yz,NLr),e(P4,jLr),e(So,DLr),e(So,Zve),e(Zve,qLr),e(So,GLr),g(b8,So,null),b(c,zRe,u),b(c,Tf,u),e(Tf,$4),e($4,e6e),g(v8,e6e,null),e(Tf,OLr),e(Tf,o6e),e(o6e,XLr),b(c,WRe,u),b(c,Dr,u),g(T8,Dr,null),e(Dr,VLr),e(Dr,Ff),e(Ff,zLr),e(Ff,r6e),e(r6e,WLr),e(Ff,QLr),e(Ff,t6e),e(t6e,HLr),e(Ff,ULr),e(Dr,JLr),e(Dr,F8),e(F8,YLr),e(F8,a6e),e(a6e,KLr),e(F8,ZLr),e(Dr,e8r),e(Dr,St),g(C8,St,null),e(St,o8r),e(St,n6e),e(n6e,r8r),e(St,t8r),e(St,Cf),e(Cf,a8r),e(Cf,s6e),e(s6e,n8r),e(Cf,s8r),e(Cf,l6e),e(l6e,l8r),e(Cf,i8r),e(St,d8r),e(St,i6e),e(i6e,c8r),e(St,f8r),g(M8,St,null),e(Dr,m8r),e(Dr,Po),g(E8,Po,null),e(Po,g8r),e(Po,d6e),e(d6e,h8r),e(Po,p8r),e(Po,In),e(In,_8r),e(In,c6e),e(c6e,u8r),e(In,b8r),e(In,f6e),e(f6e,v8r),e(In,T8r),e(In,m6e),e(m6e,F8r),e(In,C8r),e(Po,M8r),e(Po,Se),e(Se,I4),e(I4,g6e),e(g6e,E8r),e(I4,y8r),e(I4,wz),e(wz,w8r),e(I4,A8r),e(Se,L8r),e(Se,N4),e(N4,h6e),e(h6e,B8r),e(N4,x8r),e(N4,Az),e(Az,k8r),e(N4,R8r),e(Se,S8r),e(Se,j4),e(j4,p6e),e(p6e,P8r),e(j4,$8r),e(j4,Lz),e(Lz,I8r),e(j4,N8r),e(Se,j8r),e(Se,D4),e(D4,_6e),e(_6e,D8r),e(D4,q8r),e(D4,Bz),e(Bz,G8r),e(D4,O8r),e(Se,X8r),e(Se,q4),e(q4,u6e),e(u6e,V8r),e(q4,z8r),e(q4,xz),e(xz,W8r),e(q4,Q8r),e(Se,H8r),e(Se,G4),e(G4,b6e),e(b6e,U8r),e(G4,J8r),e(G4,kz),e(kz,Y8r),e(G4,K8r),e(Se,Z8r),e(Se,O4),e(O4,v6e),e(v6e,e7r),e(O4,o7r),e(O4,Rz),e(Rz,r7r),e(O4,t7r),e(Se,a7r),e(Se,X4),e(X4,T6e),e(T6e,n7r),e(X4,s7r),e(X4,Sz),e(Sz,l7r),e(X4,i7r),e(Po,d7r),e(Po,F6e),e(F6e,c7r),e(Po,f7r),g(y8,Po,null),b(c,QRe,u),b(c,Mf,u),e(Mf,V4),e(V4,C6e),g(w8,C6e,null),e(Mf,m7r),e(Mf,M6e),e(M6e,g7r),b(c,HRe,u),b(c,qr,u),g(A8,qr,null),e(qr,h7r),e(qr,Ef),e(Ef,p7r),e(Ef,E6e),e(E6e,_7r),e(Ef,u7r),e(Ef,y6e),e(y6e,b7r),e(Ef,v7r),e(qr,T7r),e(qr,L8),e(L8,F7r),e(L8,w6e),e(w6e,C7r),e(L8,M7r),e(qr,E7r),e(qr,Pt),g(B8,Pt,null),e(Pt,y7r),e(Pt,A6e),e(A6e,w7r),e(Pt,A7r),e(Pt,yf),e(yf,L7r),e(yf,L6e),e(L6e,B7r),e(yf,x7r),e(yf,B6e),e(B6e,k7r),e(yf,R7r),e(Pt,S7r),e(Pt,x6e),e(x6e,P7r),e(Pt,$7r),g(x8,Pt,null),e(qr,I7r),e(qr,$o),g(k8,$o,null),e($o,N7r),e($o,k6e),e(k6e,j7r),e($o,D7r),e($o,Nn),e(Nn,q7r),e(Nn,R6e),e(R6e,G7r),e(Nn,O7r),e(Nn,S6e),e(S6e,X7r),e(Nn,V7r),e(Nn,P6e),e(P6e,z7r),e(Nn,W7r),e($o,Q7r),e($o,Pe),e(Pe,z4),e(z4,$6e),e($6e,H7r),e(z4,U7r),e(z4,Pz),e(Pz,J7r),e(z4,Y7r),e(Pe,K7r),e(Pe,W4),e(W4,I6e),e(I6e,Z7r),e(W4,e9r),e(W4,$z),e($z,o9r),e(W4,r9r),e(Pe,t9r),e(Pe,Q4),e(Q4,N6e),e(N6e,a9r),e(Q4,n9r),e(Q4,Iz),e(Iz,s9r),e(Q4,l9r),e(Pe,i9r),e(Pe,H4),e(H4,j6e),e(j6e,d9r),e(H4,c9r),e(H4,Nz),e(Nz,f9r),e(H4,m9r),e(Pe,g9r),e(Pe,U4),e(U4,D6e),e(D6e,h9r),e(U4,p9r),e(U4,jz),e(jz,_9r),e(U4,u9r),e(Pe,b9r),e(Pe,J4),e(J4,q6e),e(q6e,v9r),e(J4,T9r),e(J4,Dz),e(Dz,F9r),e(J4,C9r),e(Pe,M9r),e(Pe,Y4),e(Y4,G6e),e(G6e,E9r),e(Y4,y9r),e(Y4,qz),e(qz,w9r),e(Y4,A9r),e(Pe,L9r),e(Pe,K4),e(K4,O6e),e(O6e,B9r),e(K4,x9r),e(K4,Gz),e(Gz,k9r),e(K4,R9r),e($o,S9r),e($o,X6e),e(X6e,P9r),e($o,$9r),g(R8,$o,null),b(c,URe,u),b(c,wf,u),e(wf,Z4),e(Z4,V6e),g(S8,V6e,null),e(wf,I9r),e(wf,z6e),e(z6e,N9r),b(c,JRe,u),b(c,Gr,u),g(P8,Gr,null),e(Gr,j9r),e(Gr,Af),e(Af,D9r),e(Af,W6e),e(W6e,q9r),e(Af,G9r),e(Af,Q6e),e(Q6e,O9r),e(Af,X9r),e(Gr,V9r),e(Gr,$8),e($8,z9r),e($8,H6e),e(H6e,W9r),e($8,Q9r),e(Gr,H9r),e(Gr,$t),g(I8,$t,null),e($t,U9r),e($t,U6e),e(U6e,J9r),e($t,Y9r),e($t,Lf),e(Lf,K9r),e(Lf,J6e),e(J6e,Z9r),e(Lf,eBr),e(Lf,Y6e),e(Y6e,oBr),e(Lf,rBr),e($t,tBr),e($t,K6e),e(K6e,aBr),e($t,nBr),g(N8,$t,null),e(Gr,sBr),e(Gr,Io),g(j8,Io,null),e(Io,lBr),e(Io,Z6e),e(Z6e,iBr),e(Io,dBr),e(Io,jn),e(jn,cBr),e(jn,eTe),e(eTe,fBr),e(jn,mBr),e(jn,oTe),e(oTe,gBr),e(jn,hBr),e(jn,rTe),e(rTe,pBr),e(jn,_Br),e(Io,uBr),e(Io,tTe),e(tTe,eE),e(eE,aTe),e(aTe,bBr),e(eE,vBr),e(eE,Oz),e(Oz,TBr),e(eE,FBr),e(Io,CBr),e(Io,nTe),e(nTe,MBr),e(Io,EBr),g(D8,Io,null),b(c,YRe,u),b(c,Bf,u),e(Bf,oE),e(oE,sTe),g(q8,sTe,null),e(Bf,yBr),e(Bf,lTe),e(lTe,wBr),b(c,KRe,u),b(c,Or,u),g(G8,Or,null),e(Or,ABr),e(Or,xf),e(xf,LBr),e(xf,iTe),e(iTe,BBr),e(xf,xBr),e(xf,dTe),e(dTe,kBr),e(xf,RBr),e(Or,SBr),e(Or,O8),e(O8,PBr),e(O8,cTe),e(cTe,$Br),e(O8,IBr),e(Or,NBr),e(Or,It),g(X8,It,null),e(It,jBr),e(It,fTe),e(fTe,DBr),e(It,qBr),e(It,kf),e(kf,GBr),e(kf,mTe),e(mTe,OBr),e(kf,XBr),e(kf,gTe),e(gTe,VBr),e(kf,zBr),e(It,WBr),e(It,hTe),e(hTe,QBr),e(It,HBr),g(V8,It,null),e(Or,UBr),e(Or,No),g(z8,No,null),e(No,JBr),e(No,pTe),e(pTe,YBr),e(No,KBr),e(No,Dn),e(Dn,ZBr),e(Dn,_Te),e(_Te,exr),e(Dn,oxr),e(Dn,uTe),e(uTe,rxr),e(Dn,txr),e(Dn,bTe),e(bTe,axr),e(Dn,nxr),e(No,sxr),e(No,W8),e(W8,rE),e(rE,vTe),e(vTe,lxr),e(rE,ixr),e(rE,Xz),e(Xz,dxr),e(rE,cxr),e(W8,fxr),e(W8,tE),e(tE,TTe),e(TTe,mxr),e(tE,gxr),e(tE,Vz),e(Vz,hxr),e(tE,pxr),e(No,_xr),e(No,FTe),e(FTe,uxr),e(No,bxr),g(Q8,No,null),b(c,ZRe,u),b(c,Rf,u),e(Rf,aE),e(aE,CTe),g(H8,CTe,null),e(Rf,vxr),e(Rf,MTe),e(MTe,Txr),b(c,eSe,u),b(c,Xr,u),g(U8,Xr,null),e(Xr,Fxr),e(Xr,Sf),e(Sf,Cxr),e(Sf,ETe),e(ETe,Mxr),e(Sf,Exr),e(Sf,yTe),e(yTe,yxr),e(Sf,wxr),e(Xr,Axr),e(Xr,J8),e(J8,Lxr),e(J8,wTe),e(wTe,Bxr),e(J8,xxr),e(Xr,kxr),e(Xr,Nt),g(Y8,Nt,null),e(Nt,Rxr),e(Nt,ATe),e(ATe,Sxr),e(Nt,Pxr),e(Nt,Pf),e(Pf,$xr),e(Pf,LTe),e(LTe,Ixr),e(Pf,Nxr),e(Pf,BTe),e(BTe,jxr),e(Pf,Dxr),e(Nt,qxr),e(Nt,xTe),e(xTe,Gxr),e(Nt,Oxr),g(K8,Nt,null),e(Xr,Xxr),e(Xr,jo),g(Z8,jo,null),e(jo,Vxr),e(jo,kTe),e(kTe,zxr),e(jo,Wxr),e(jo,qn),e(qn,Qxr),e(qn,RTe),e(RTe,Hxr),e(qn,Uxr),e(qn,STe),e(STe,Jxr),e(qn,Yxr),e(qn,PTe),e(PTe,Kxr),e(qn,Zxr),e(jo,ekr),e(jo,$Te),e($Te,nE),e(nE,ITe),e(ITe,okr),e(nE,rkr),e(nE,zz),e(zz,tkr),e(nE,akr),e(jo,nkr),e(jo,NTe),e(NTe,skr),e(jo,lkr),g(e7,jo,null),oSe=!0},p(c,[u]){const o7={};u&2&&(o7.$$scope={dirty:u,ctx:c}),Gf.$set(o7);const jTe={};u&2&&(jTe.$$scope={dirty:u,ctx:c}),Bh.$set(jTe);const DTe={};u&2&&(DTe.$$scope={dirty:u,ctx:c}),qh.$set(DTe)},i(c){oSe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(Gf.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(y3.$$.fragment,c),h(w3.$$.fragment,c),h(B3.$$.fragment,c),h(Bh.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(R3.$$.fragment,c),h(S3.$$.fragment,c),h(I3.$$.fragment,c),h(qh.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(q3.$$.fragment,c),h(O3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(b8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(C8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(y8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(B8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(R8.$$.fragment,c),h(S8.$$.fragment,c),h(P8.$$.fragment,c),h(I8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(q8.$$.fragment,c),h(G8.$$.fragment,c),h(X8.$$.fragment,c),h(V8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(e7.$$.fragment,c),oSe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(Gf.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(y3.$$.fragment,c),p(w3.$$.fragment,c),p(B3.$$.fragment,c),p(Bh.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(R3.$$.fragment,c),p(S3.$$.fragment,c),p(I3.$$.fragment,c),p(qh.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(q3.$$.fragment,c),p(O3.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(ey.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(b8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(C8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(y8.$$.fragment,c),p(w8.$$.fragment,c),p(A8.$$.fragment,c),p(B8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(R8.$$.fragment,c),p(S8.$$.fragment,c),p(P8.$$.fragment,c),p(I8.$$.fragment,c),p(N8.$$.fragment,c),p(j8.$$.fragment,c),p(D8.$$.fragment,c),p(q8.$$.fragment,c),p(G8.$$.fragment,c),p(X8.$$.fragment,c),p(V8.$$.fragment,c),p(z8.$$.fragment,c),p(Q8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(Z8.$$.fragment,c),p(e7.$$.fragment,c),oSe=!1},d(c){t(J),c&&t($e),c&&t(de),_(fe),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(eke),c&&t(Vi),_(d3),c&&t(oke),c&&t(zn),c&&t(rke),_(c3,c),c&&t(tke),c&&t(t9),c&&t(ake),_(Gf,c),c&&t(nke),c&&t(zi),_(f3),c&&t(ske),c&&t(Wo),_(m3),_(p3),_(_3),_(u3),c&&t(lke),c&&t(Qi),_(b3),c&&t(ike),c&&t(Qo),_(v3),_(C3),_(M3),_(E3),c&&t(dke),c&&t(Hi),_(y3),c&&t(cke),c&&t(Ho),_(w3),_(B3),_(Bh),_(x3),_(k3),c&&t(fke),c&&t(Ui),_(R3),c&&t(mke),c&&t(Uo),_(S3),_(I3),_(qh),_(N3),_(j3),c&&t(gke),c&&t(Yi),_(D3),c&&t(hke),c&&t(Jo),_(q3),_(O3),_(X3),_(V3),_(z3),c&&t(pke),c&&t(ed),_(W3),c&&t(_ke),c&&t(Yo),_(Q3),_(U3),_(J3),_(Y3),_(K3),c&&t(uke),c&&t(td),_(Z3),c&&t(bke),c&&t(Ko),_(ey),_(ry),_(ty),_(ay),_(ny),c&&t(vke),c&&t(sd),_(sy),c&&t(Tke),c&&t(Zo),_(ly),_(dy),_(cy),_(fy),_(my),c&&t(Fke),c&&t(dd),_(gy),c&&t(Cke),c&&t(er),_(hy),_(_y),_(uy),_(by),_(vy),c&&t(Mke),c&&t(md),_(Ty),c&&t(Eke),c&&t(or),_(Fy),_(My),_(Ey),_(yy),_(wy),c&&t(yke),c&&t(pd),_(Ay),c&&t(wke),c&&t(rr),_(Ly),_(xy),_(ky),_(Ry),_(Sy),c&&t(Ake),c&&t(bd),_(Py),c&&t(Lke),c&&t(tr),_($y),_(Ny),_(jy),_(Dy),_(qy),c&&t(Bke),c&&t(Fd),_(Gy),c&&t(xke),c&&t(ar),_(Oy),_(Vy),_(zy),_(Wy),_(Qy),c&&t(kke),c&&t(Ed),_(Hy),c&&t(Rke),c&&t(nr),_(Uy),_(Yy),_(Ky),_(Zy),_(ew),c&&t(Ske),c&&t(Ad),_(ow),c&&t(Pke),c&&t(sr),_(rw),_(aw),_(nw),_(sw),_(lw),c&&t($ke),c&&t(xd),_(iw),c&&t(Ike),c&&t(lr),_(dw),_(fw),_(mw),_(gw),_(hw),c&&t(Nke),c&&t(Sd),_(pw),c&&t(jke),c&&t(ir),_(_w),_(bw),_(vw),_(Tw),_(Fw),c&&t(Dke),c&&t(Id),_(Cw),c&&t(qke),c&&t(dr),_(Mw),_(yw),_(ww),_(Aw),_(Lw),c&&t(Gke),c&&t(Dd),_(Bw),c&&t(Oke),c&&t(cr),_(xw),_(Rw),_(Sw),_(Pw),_($w),c&&t(Xke),c&&t(Od),_(Iw),c&&t(Vke),c&&t(fr),_(Nw),_(Dw),_(qw),_(Gw),_(Ow),c&&t(zke),c&&t(zd),_(Xw),c&&t(Wke),c&&t(mr),_(Vw),_(Ww),_(Qw),_(Hw),_(Jw),c&&t(Qke),c&&t(Hd),_(Yw),c&&t(Hke),c&&t(gr),_(Kw),_(eA),_(oA),_(rA),_(tA),c&&t(Uke),c&&t(Yd),_(aA),c&&t(Jke),c&&t(hr),_(nA),_(lA),_(iA),_(dA),_(cA),c&&t(Yke),c&&t(oc),_(fA),c&&t(Kke),c&&t(pr),_(mA),_(hA),_(pA),_(_A),_(uA),c&&t(Zke),c&&t(ac),_(bA),c&&t(eRe),c&&t(_r),_(vA),_(FA),_(CA),_(MA),_(EA),c&&t(oRe),c&&t(lc),_(yA),c&&t(rRe),c&&t(ur),_(wA),_(LA),_(BA),_(xA),_(RA),c&&t(tRe),c&&t(cc),_(SA),c&&t(aRe),c&&t(br),_(PA),_(IA),_(NA),_(jA),_(DA),c&&t(nRe),c&&t(gc),_(qA),c&&t(sRe),c&&t(vr),_(GA),_(XA),_(VA),_(zA),_(WA),c&&t(lRe),c&&t(_c),_(QA),c&&t(iRe),c&&t(Tr),_(HA),_(JA),_(YA),_(KA),_(ZA),c&&t(dRe),c&&t(vc),_(e0),c&&t(cRe),c&&t(Fr),_(o0),_(t0),_(a0),_(n0),_(s0),c&&t(fRe),c&&t(Cc),_(l0),c&&t(mRe),c&&t(Cr),_(i0),_(c0),_(f0),_(m0),_(h0),c&&t(gRe),c&&t(yc),_(p0),c&&t(hRe),c&&t(Mr),_(_0),_(b0),_(v0),_(T0),_(F0),c&&t(pRe),c&&t(Lc),_(C0),c&&t(_Re),c&&t(Er),_(M0),_(y0),_(w0),_(A0),_(L0),c&&t(uRe),c&&t(kc),_(B0),c&&t(bRe),c&&t(yr),_(x0),_(R0),_(S0),_(P0),_($0),c&&t(vRe),c&&t(Pc),_(I0),c&&t(TRe),c&&t(wr),_(N0),_(D0),_(q0),_(G0),_(O0),c&&t(FRe),c&&t(Nc),_(X0),c&&t(CRe),c&&t(Ar),_(V0),_(W0),_(Q0),_(H0),_(U0),c&&t(MRe),c&&t(qc),_(J0),c&&t(ERe),c&&t(Lr),_(Y0),_(Z0),_(eL),_(oL),_(rL),c&&t(yRe),c&&t(Xc),_(tL),c&&t(wRe),c&&t(Br),_(aL),_(sL),_(lL),_(iL),_(dL),c&&t(ARe),c&&t(Wc),_(cL),c&&t(LRe),c&&t(xr),_(fL),_(gL),_(hL),_(pL),_(_L),c&&t(BRe),c&&t(Uc),_(uL),c&&t(xRe),c&&t(kr),_(bL),_(TL),_(FL),_(CL),_(ML),c&&t(kRe),c&&t(Kc),_(EL),c&&t(RRe),c&&t(Rr),_(yL),_(AL),_(LL),_(BL),_(xL),c&&t(SRe),c&&t(of),_(kL),c&&t(PRe),c&&t(Sr),_(RL),_(PL),_($L),_(IL),_(NL),c&&t($Re),c&&t(af),_(jL),c&&t(IRe),c&&t(Pr),_(DL),_(GL),_(OL),_(XL),_(VL),c&&t(NRe),c&&t(lf),_(zL),c&&t(jRe),c&&t($r),_(WL),_(HL),_(UL),_(JL),_(YL),c&&t(DRe),c&&t(ff),_(KL),c&&t(qRe),c&&t(Ir),_(ZL),_(o8),_(r8),_(t8),_(a8),c&&t(GRe),c&&t(hf),_(n8),c&&t(ORe),c&&t(Nr),_(s8),_(i8),_(d8),_(c8),_(f8),c&&t(XRe),c&&t(uf),_(m8),c&&t(VRe),c&&t(jr),_(g8),_(p8),_(_8),_(u8),_(b8),c&&t(zRe),c&&t(Tf),_(v8),c&&t(WRe),c&&t(Dr),_(T8),_(C8),_(M8),_(E8),_(y8),c&&t(QRe),c&&t(Mf),_(w8),c&&t(HRe),c&&t(qr),_(A8),_(B8),_(x8),_(k8),_(R8),c&&t(URe),c&&t(wf),_(S8),c&&t(JRe),c&&t(Gr),_(P8),_(I8),_(N8),_(j8),_(D8),c&&t(YRe),c&&t(Bf),_(q8),c&&t(KRe),c&&t(Or),_(G8),_(X8),_(V8),_(z8),_(Q8),c&&t(ZRe),c&&t(Rf),_(H8),c&&t(eSe),c&&t(Xr),_(U8),_(Y8),_(K8),_(Z8),_(e7)}}}const gMt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function hMt(Ii,J,$e){let{fw:de}=J;return Ii.$$set=pe=>{"fw"in pe&&$e(0,de=pe.fw)},[de]}class TMt extends nMt{constructor(J){super();sMt(this,J,hMt,mMt,lMt,{fw:0})}}export{TMt as default,gMt as metadata};
