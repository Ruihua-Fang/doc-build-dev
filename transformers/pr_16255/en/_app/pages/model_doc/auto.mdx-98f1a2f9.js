import{S as u4t,i as b4t,s as v4t,e as a,k as l,w as f,t as o,M as T4t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as F4t}from"../../chunks/vendor-6b77c823.js";import{T as iRr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as V}from"../../chunks/IconCopyLink-7a11ce68.js";function C4t($f){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,If,fa,Ni,ji,f3,Nf,Be,co,Di,Gn,m3,On,Xn,g3,qi,Vn,h3,Gi,jf,qa;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),f3=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),Di=a("code"),Gn=o("NewModel"),m3=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),g3=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),h3=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var a9=s(de);Ee=r(a9,"NewModelConfig"),a9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var n9=s(Ii);If=r(n9,"model_type"),n9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Ni=n(_e,"CODE",{});var s9=s(Ni);ji=r(s9,'"new-model"'),s9.forEach(t),f3=r(_e,")."),_e.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);Gn=r(Ga,"NewModel"),Ga.forEach(t),m3=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var l9=s(On);Xn=r(l9,"PreTrainedModel"),l9.forEach(t),g3=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var Df=s(qi);Vn=r(Df,"config_class"),Df.forEach(t),h3=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var i9=s(Gi);jf=r(i9,"NewModelConfig"),i9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo),e(Z,me),e(me,Ce),e(Z,Vo),e(Z,Ii),e(Ii,If),e(Z,fa),e(Z,Ni),e(Ni,ji),e(Z,f3),b(fo,Nf,_e),b(fo,Be,_e),e(Be,co),e(Be,Di),e(Di,Gn),e(Be,m3),e(Be,On),e(On,Xn),e(Be,g3),e(Be,qi),e(qi,Vn),e(Be,h3),e(Be,Gi),e(Gi,jf),e(Be,qa)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(Be)}}}function M4t($f){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function E4t($f){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function y4t($f){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,If,fa,Ni,ji,f3,Nf,Be,co,Di,Gn,m3,On,Xn,g3,qi,Vn,h3,Gi,jf,qa,fo,_e,a9,Oi,n9,s9,zo,Ga,l9,Df,i9,j$e,Eke,Xi,qf,JQ,p3,D$e,YQ,q$e,yke,zn,G$e,KQ,O$e,X$e,ZQ,V$e,z$e,wke,_3,Ake,d9,W$e,Lke,Gf,Bke,Vi,Of,eH,u3,Q$e,oH,H$e,xke,Wo,b3,U$e,v3,J$e,c9,Y$e,K$e,Z$e,T3,eIe,rH,oIe,rIe,tIe,mo,F3,aIe,tH,nIe,sIe,zi,lIe,aH,iIe,dIe,nH,cIe,fIe,mIe,v,Xf,sH,gIe,hIe,f9,pIe,_Ie,uIe,Vf,lH,bIe,vIe,m9,TIe,FIe,CIe,zf,iH,MIe,EIe,g9,yIe,wIe,AIe,Wf,dH,LIe,BIe,h9,xIe,kIe,RIe,Qf,cH,SIe,PIe,p9,$Ie,IIe,NIe,Hf,fH,jIe,DIe,_9,qIe,GIe,OIe,Uf,mH,XIe,VIe,u9,zIe,WIe,QIe,Jf,gH,HIe,UIe,b9,JIe,YIe,KIe,Yf,hH,ZIe,eNe,v9,oNe,rNe,tNe,Kf,pH,aNe,nNe,T9,sNe,lNe,iNe,Zf,_H,dNe,cNe,F9,fNe,mNe,gNe,em,uH,hNe,pNe,C9,_Ne,uNe,bNe,om,bH,vNe,TNe,M9,FNe,CNe,MNe,rm,vH,ENe,yNe,E9,wNe,ANe,LNe,tm,TH,BNe,xNe,y9,kNe,RNe,SNe,am,FH,PNe,$Ne,w9,INe,NNe,jNe,nm,CH,DNe,qNe,A9,GNe,ONe,XNe,sm,MH,VNe,zNe,L9,WNe,QNe,HNe,lm,EH,UNe,JNe,B9,YNe,KNe,ZNe,im,yH,eje,oje,x9,rje,tje,aje,dm,wH,nje,sje,k9,lje,ije,dje,cm,AH,cje,fje,R9,mje,gje,hje,fm,LH,pje,_je,S9,uje,bje,vje,mm,BH,Tje,Fje,P9,Cje,Mje,Eje,gm,xH,yje,wje,$9,Aje,Lje,Bje,hm,kH,xje,kje,I9,Rje,Sje,Pje,pm,RH,$je,Ije,N9,Nje,jje,Dje,_m,SH,qje,Gje,j9,Oje,Xje,Vje,um,PH,zje,Wje,D9,Qje,Hje,Uje,bm,$H,Jje,Yje,q9,Kje,Zje,eDe,vm,IH,oDe,rDe,G9,tDe,aDe,nDe,Tm,NH,sDe,lDe,O9,iDe,dDe,cDe,Fm,jH,fDe,mDe,X9,gDe,hDe,pDe,Cm,DH,_De,uDe,V9,bDe,vDe,TDe,Mm,qH,FDe,CDe,z9,MDe,EDe,yDe,Em,GH,wDe,ADe,W9,LDe,BDe,xDe,ym,OH,kDe,RDe,Q9,SDe,PDe,$De,wm,XH,IDe,NDe,H9,jDe,DDe,qDe,Am,VH,GDe,ODe,U9,XDe,VDe,zDe,Lm,zH,WDe,QDe,J9,HDe,UDe,JDe,Bm,WH,YDe,KDe,Y9,ZDe,eqe,oqe,xm,QH,rqe,tqe,K9,aqe,nqe,sqe,km,HH,lqe,iqe,Z9,dqe,cqe,fqe,Rm,UH,mqe,gqe,eB,hqe,pqe,_qe,Sm,JH,uqe,bqe,oB,vqe,Tqe,Fqe,Pm,YH,Cqe,Mqe,rB,Eqe,yqe,wqe,$m,KH,Aqe,Lqe,tB,Bqe,xqe,kqe,Im,ZH,Rqe,Sqe,aB,Pqe,$qe,Iqe,Nm,eU,Nqe,jqe,nB,Dqe,qqe,Gqe,jm,oU,Oqe,Xqe,sB,Vqe,zqe,Wqe,Dm,rU,Qqe,Hqe,lB,Uqe,Jqe,Yqe,qm,tU,Kqe,Zqe,iB,eGe,oGe,rGe,Gm,aU,tGe,aGe,dB,nGe,sGe,lGe,Om,nU,iGe,dGe,cB,cGe,fGe,mGe,Xm,sU,gGe,hGe,fB,pGe,_Ge,uGe,Vm,lU,bGe,vGe,mB,TGe,FGe,CGe,zm,iU,MGe,EGe,gB,yGe,wGe,AGe,Wm,dU,LGe,BGe,hB,xGe,kGe,RGe,Qm,cU,SGe,PGe,pB,$Ge,IGe,NGe,Hm,fU,jGe,DGe,_B,qGe,GGe,OGe,Um,mU,XGe,VGe,uB,zGe,WGe,QGe,Jm,gU,HGe,UGe,bB,JGe,YGe,KGe,Ym,hU,ZGe,eOe,vB,oOe,rOe,tOe,Km,pU,aOe,nOe,TB,sOe,lOe,iOe,Zm,_U,dOe,cOe,FB,fOe,mOe,gOe,eg,uU,hOe,pOe,CB,_Oe,uOe,bOe,og,bU,vOe,TOe,MB,FOe,COe,MOe,rg,vU,EOe,yOe,EB,wOe,AOe,LOe,tg,TU,BOe,xOe,yB,kOe,ROe,SOe,ag,FU,POe,$Oe,wB,IOe,NOe,jOe,ng,CU,DOe,qOe,AB,GOe,OOe,XOe,sg,MU,VOe,zOe,LB,WOe,QOe,HOe,lg,EU,UOe,JOe,BB,YOe,KOe,ZOe,ig,yU,eXe,oXe,xB,rXe,tXe,aXe,dg,wU,nXe,sXe,kB,lXe,iXe,dXe,cg,AU,cXe,fXe,RB,mXe,gXe,hXe,fg,LU,pXe,_Xe,SB,uXe,bXe,vXe,mg,BU,TXe,FXe,PB,CXe,MXe,EXe,gg,xU,yXe,wXe,$B,AXe,LXe,BXe,hg,kU,xXe,kXe,IB,RXe,SXe,PXe,pg,RU,$Xe,IXe,NB,NXe,jXe,DXe,_g,SU,qXe,GXe,jB,OXe,XXe,VXe,ug,PU,zXe,WXe,DB,QXe,HXe,UXe,bg,$U,JXe,YXe,qB,KXe,ZXe,eVe,vg,IU,oVe,rVe,GB,tVe,aVe,nVe,Tg,NU,sVe,lVe,OB,iVe,dVe,cVe,Fg,jU,fVe,mVe,XB,gVe,hVe,pVe,Cg,DU,_Ve,uVe,VB,bVe,vVe,TVe,Mg,qU,FVe,CVe,zB,MVe,EVe,yVe,Eg,GU,wVe,AVe,WB,LVe,BVe,xVe,yg,OU,kVe,RVe,QB,SVe,PVe,$Ve,wg,XU,IVe,NVe,HB,jVe,DVe,qVe,Ag,VU,GVe,OVe,UB,XVe,VVe,zVe,Lg,zU,WVe,QVe,JB,HVe,UVe,JVe,Bg,WU,YVe,KVe,YB,ZVe,eze,oze,xg,QU,rze,tze,KB,aze,nze,sze,kg,HU,lze,ize,ZB,dze,cze,fze,Rg,UU,mze,gze,ex,hze,pze,_ze,JU,uze,bze,C3,vze,Sg,M3,Tze,YU,Fze,kke,Wi,Pg,KU,E3,Cze,ZU,Mze,Rke,Qo,y3,Eze,w3,yze,ox,wze,Aze,Lze,A3,Bze,eJ,xze,kze,Rze,go,L3,Sze,oJ,Pze,$ze,Oa,Ize,rJ,Nze,jze,tJ,Dze,qze,aJ,Gze,Oze,Xze,E,Wn,nJ,Vze,zze,rx,Wze,Qze,tx,Hze,Uze,Jze,Qn,sJ,Yze,Kze,ax,Zze,eWe,nx,oWe,rWe,tWe,Hn,lJ,aWe,nWe,sx,sWe,lWe,lx,iWe,dWe,cWe,$g,iJ,fWe,mWe,ix,gWe,hWe,pWe,Un,dJ,_We,uWe,dx,bWe,vWe,cx,TWe,FWe,CWe,Ig,cJ,MWe,EWe,fx,yWe,wWe,AWe,Ng,fJ,LWe,BWe,mx,xWe,kWe,RWe,jg,mJ,SWe,PWe,gx,$We,IWe,NWe,Jn,gJ,jWe,DWe,hx,qWe,GWe,px,OWe,XWe,VWe,Yn,hJ,zWe,WWe,_x,QWe,HWe,ux,UWe,JWe,YWe,Kn,pJ,KWe,ZWe,bx,eQe,oQe,vx,rQe,tQe,aQe,Dg,_J,nQe,sQe,Tx,lQe,iQe,dQe,qg,uJ,cQe,fQe,Fx,mQe,gQe,hQe,Zn,bJ,pQe,_Qe,Cx,uQe,bQe,Mx,vQe,TQe,FQe,Gg,vJ,CQe,MQe,Ex,EQe,yQe,wQe,es,TJ,AQe,LQe,yx,BQe,xQe,wx,kQe,RQe,SQe,os,FJ,PQe,$Qe,Ax,IQe,NQe,Lx,jQe,DQe,qQe,rs,CJ,GQe,OQe,Bx,XQe,VQe,MJ,zQe,WQe,QQe,Og,EJ,HQe,UQe,xx,JQe,YQe,KQe,ts,yJ,ZQe,eHe,kx,oHe,rHe,Rx,tHe,aHe,nHe,Xg,wJ,sHe,lHe,Sx,iHe,dHe,cHe,as,AJ,fHe,mHe,Px,gHe,hHe,$x,pHe,_He,uHe,ns,LJ,bHe,vHe,Ix,THe,FHe,Nx,CHe,MHe,EHe,ss,BJ,yHe,wHe,jx,AHe,LHe,Dx,BHe,xHe,kHe,Vg,xJ,RHe,SHe,qx,PHe,$He,IHe,ls,kJ,NHe,jHe,Gx,DHe,qHe,Ox,GHe,OHe,XHe,zg,RJ,VHe,zHe,Xx,WHe,QHe,HHe,is,SJ,UHe,JHe,Vx,YHe,KHe,zx,ZHe,eUe,oUe,ds,PJ,rUe,tUe,Wx,aUe,nUe,Qx,sUe,lUe,iUe,cs,$J,dUe,cUe,Hx,fUe,mUe,Ux,gUe,hUe,pUe,fs,IJ,_Ue,uUe,Jx,bUe,vUe,Yx,TUe,FUe,CUe,Wg,NJ,MUe,EUe,Kx,yUe,wUe,AUe,ms,jJ,LUe,BUe,Zx,xUe,kUe,ek,RUe,SUe,PUe,gs,DJ,$Ue,IUe,ok,NUe,jUe,rk,DUe,qUe,GUe,hs,qJ,OUe,XUe,tk,VUe,zUe,ak,WUe,QUe,HUe,ps,GJ,UUe,JUe,nk,YUe,KUe,sk,ZUe,eJe,oJe,_s,OJ,rJe,tJe,lk,aJe,nJe,ik,sJe,lJe,iJe,us,XJ,dJe,cJe,dk,fJe,mJe,ck,gJe,hJe,pJe,Qg,VJ,_Je,uJe,fk,bJe,vJe,TJe,bs,zJ,FJe,CJe,mk,MJe,EJe,gk,yJe,wJe,AJe,Hg,WJ,LJe,BJe,hk,xJe,kJe,RJe,Ug,QJ,SJe,PJe,pk,$Je,IJe,NJe,vs,HJ,jJe,DJe,_k,qJe,GJe,uk,OJe,XJe,VJe,Ts,UJ,zJe,WJe,bk,QJe,HJe,vk,UJe,JJe,YJe,Jg,JJ,KJe,ZJe,Tk,eYe,oYe,rYe,Fs,YJ,tYe,aYe,Fk,nYe,sYe,Ck,lYe,iYe,dYe,Cs,KJ,cYe,fYe,Mk,mYe,gYe,Ek,hYe,pYe,_Ye,Ms,ZJ,uYe,bYe,yk,vYe,TYe,wk,FYe,CYe,MYe,Es,eY,EYe,yYe,Ak,wYe,AYe,Lk,LYe,BYe,xYe,ys,oY,kYe,RYe,Bk,SYe,PYe,xk,$Ye,IYe,NYe,Yg,rY,jYe,DYe,kk,qYe,GYe,OYe,Kg,tY,XYe,VYe,Rk,zYe,WYe,QYe,Zg,aY,HYe,UYe,Sk,JYe,YYe,KYe,eh,nY,ZYe,eKe,Pk,oKe,rKe,tKe,ws,sY,aKe,nKe,$k,sKe,lKe,Ik,iKe,dKe,cKe,oh,lY,fKe,mKe,Nk,gKe,hKe,pKe,As,iY,_Ke,uKe,jk,bKe,vKe,Dk,TKe,FKe,CKe,Ls,dY,MKe,EKe,qk,yKe,wKe,Gk,AKe,LKe,BKe,Bs,cY,xKe,kKe,Ok,RKe,SKe,Xk,PKe,$Ke,IKe,xs,fY,NKe,jKe,Vk,DKe,qKe,zk,GKe,OKe,XKe,ks,mY,VKe,zKe,Wk,WKe,QKe,Qk,HKe,UKe,JKe,Rs,gY,YKe,KKe,Hk,ZKe,eZe,Uk,oZe,rZe,tZe,rh,hY,aZe,nZe,Jk,sZe,lZe,iZe,th,pY,dZe,cZe,Yk,fZe,mZe,gZe,Ss,_Y,hZe,pZe,Kk,_Ze,uZe,Zk,bZe,vZe,TZe,Ps,uY,FZe,CZe,eR,MZe,EZe,oR,yZe,wZe,AZe,$s,bY,LZe,BZe,rR,xZe,kZe,tR,RZe,SZe,PZe,ah,vY,$Ze,IZe,aR,NZe,jZe,DZe,nh,TY,qZe,GZe,nR,OZe,XZe,VZe,sh,FY,zZe,WZe,sR,QZe,HZe,UZe,lh,CY,JZe,YZe,lR,KZe,ZZe,eeo,Is,MY,oeo,reo,iR,teo,aeo,dR,neo,seo,leo,ih,EY,ieo,deo,cR,ceo,feo,meo,dh,yY,geo,heo,fR,peo,_eo,ueo,Ns,wY,beo,veo,mR,Teo,Feo,gR,Ceo,Meo,Eeo,js,AY,yeo,weo,hR,Aeo,Leo,pR,Beo,xeo,keo,LY,Reo,Seo,B3,Peo,ch,x3,$eo,BY,Ieo,Ske,Qi,fh,xY,k3,Neo,kY,jeo,Pke,Ho,R3,Deo,S3,qeo,_R,Geo,Oeo,Xeo,P3,Veo,RY,zeo,Weo,Qeo,$e,$3,Heo,SY,Ueo,Jeo,Xa,Yeo,PY,Keo,Zeo,$Y,eoo,ooo,IY,roo,too,aoo,te,mh,NY,noo,soo,uR,loo,ioo,doo,gh,jY,coo,foo,bR,moo,goo,hoo,hh,DY,poo,_oo,vR,uoo,boo,voo,ph,qY,Too,Foo,TR,Coo,Moo,Eoo,_h,GY,yoo,woo,FR,Aoo,Loo,Boo,uh,OY,xoo,koo,CR,Roo,Soo,Poo,bh,XY,$oo,Ioo,MR,Noo,joo,Doo,vh,VY,qoo,Goo,ER,Ooo,Xoo,Voo,Th,zY,zoo,Woo,yR,Qoo,Hoo,Uoo,Fh,WY,Joo,Yoo,wR,Koo,Zoo,ero,Ch,QY,oro,rro,AR,tro,aro,nro,Mh,HY,sro,lro,LR,iro,dro,cro,Eh,UY,fro,mro,BR,gro,hro,pro,yh,JY,_ro,uro,xR,bro,vro,Tro,wh,YY,Fro,Cro,kR,Mro,Ero,yro,Ah,KY,wro,Aro,RR,Lro,Bro,xro,Lh,ZY,kro,Rro,SR,Sro,Pro,$ro,Bh,eK,Iro,Nro,PR,jro,Dro,qro,xh,Gro,oK,Oro,Xro,I3,Vro,kh,N3,zro,rK,Wro,$ke,Hi,Rh,tK,j3,Qro,aK,Hro,Ike,Uo,D3,Uro,q3,Jro,$R,Yro,Kro,Zro,G3,eto,nK,oto,rto,tto,Ie,O3,ato,sK,nto,sto,Ui,lto,lK,ito,dto,iK,cto,fto,mto,xe,Sh,dK,gto,hto,IR,pto,_to,uto,Ph,cK,bto,vto,NR,Tto,Fto,Cto,$h,fK,Mto,Eto,jR,yto,wto,Ato,Ih,mK,Lto,Bto,DR,xto,kto,Rto,Nh,gK,Sto,Pto,qR,$to,Ito,Nto,jh,hK,jto,Dto,GR,qto,Gto,Oto,Dh,pK,Xto,Vto,OR,zto,Wto,Qto,qh,_K,Hto,Uto,XR,Jto,Yto,Kto,Gh,Zto,uK,eao,oao,X3,rao,Oh,V3,tao,bK,aao,Nke,Ji,Xh,vK,z3,nao,TK,sao,jke,Jo,W3,lao,Yi,iao,FK,dao,cao,CK,fao,mao,gao,Q3,hao,MK,pao,_ao,uao,Vr,H3,bao,EK,vao,Tao,Ki,Fao,yK,Cao,Mao,wK,Eao,yao,wao,AK,Aao,Lao,U3,Bao,Ne,J3,xao,LK,kao,Rao,Va,Sao,BK,Pao,$ao,xK,Iao,Nao,kK,jao,Dao,qao,F,Vh,RK,Gao,Oao,VR,Xao,Vao,zao,zh,SK,Wao,Qao,zR,Hao,Uao,Jao,Wh,PK,Yao,Kao,WR,Zao,eno,ono,Qh,$K,rno,tno,QR,ano,nno,sno,Hh,IK,lno,ino,HR,dno,cno,fno,Uh,NK,mno,gno,UR,hno,pno,_no,Jh,jK,uno,bno,JR,vno,Tno,Fno,Yh,DK,Cno,Mno,YR,Eno,yno,wno,Kh,qK,Ano,Lno,KR,Bno,xno,kno,Zh,GK,Rno,Sno,ZR,Pno,$no,Ino,ep,OK,Nno,jno,eS,Dno,qno,Gno,op,XK,Ono,Xno,oS,Vno,zno,Wno,rp,VK,Qno,Hno,rS,Uno,Jno,Yno,tp,zK,Kno,Zno,tS,eso,oso,rso,ap,WK,tso,aso,aS,nso,sso,lso,np,QK,iso,dso,nS,cso,fso,mso,sp,HK,gso,hso,sS,pso,_so,uso,lp,UK,bso,vso,lS,Tso,Fso,Cso,ip,JK,Mso,Eso,iS,yso,wso,Aso,dp,YK,Lso,Bso,dS,xso,kso,Rso,cp,KK,Sso,Pso,cS,$so,Iso,Nso,fp,ZK,jso,Dso,fS,qso,Gso,Oso,mp,eZ,Xso,Vso,mS,zso,Wso,Qso,gp,oZ,Hso,Uso,gS,Jso,Yso,Kso,hp,rZ,Zso,elo,hS,olo,rlo,tlo,pp,tZ,alo,nlo,pS,slo,llo,ilo,_p,aZ,dlo,clo,_S,flo,mlo,glo,up,nZ,hlo,plo,uS,_lo,ulo,blo,Ds,sZ,vlo,Tlo,bS,Flo,Clo,vS,Mlo,Elo,ylo,bp,lZ,wlo,Alo,TS,Llo,Blo,xlo,vp,iZ,klo,Rlo,FS,Slo,Plo,$lo,Tp,dZ,Ilo,Nlo,CS,jlo,Dlo,qlo,Fp,cZ,Glo,Olo,MS,Xlo,Vlo,zlo,Cp,fZ,Wlo,Qlo,ES,Hlo,Ulo,Jlo,Mp,mZ,Ylo,Klo,yS,Zlo,eio,oio,Ep,gZ,rio,tio,wS,aio,nio,sio,yp,hZ,lio,iio,AS,dio,cio,fio,wp,pZ,mio,gio,LS,hio,pio,_io,Ap,_Z,uio,bio,BS,vio,Tio,Fio,Lp,uZ,Cio,Mio,xS,Eio,yio,wio,Bp,bZ,Aio,Lio,kS,Bio,xio,kio,xp,vZ,Rio,Sio,RS,Pio,$io,Iio,kp,TZ,Nio,jio,SS,Dio,qio,Gio,Rp,FZ,Oio,Xio,PS,Vio,zio,Wio,Sp,CZ,Qio,Hio,$S,Uio,Jio,Yio,Pp,MZ,Kio,Zio,IS,edo,odo,rdo,$p,EZ,tdo,ado,NS,ndo,sdo,ldo,Ip,yZ,ido,ddo,jS,cdo,fdo,mdo,Np,wZ,gdo,hdo,DS,pdo,_do,udo,jp,AZ,bdo,vdo,qS,Tdo,Fdo,Cdo,Dp,LZ,Mdo,Edo,GS,ydo,wdo,Ado,qp,BZ,Ldo,Bdo,OS,xdo,kdo,Rdo,Gp,xZ,Sdo,Pdo,XS,$do,Ido,Ndo,Op,kZ,jdo,Ddo,VS,qdo,Gdo,Odo,Xp,RZ,Xdo,Vdo,zS,zdo,Wdo,Qdo,Vp,SZ,Hdo,Udo,WS,Jdo,Ydo,Kdo,zp,PZ,Zdo,eco,QS,oco,rco,tco,Wp,$Z,aco,nco,HS,sco,lco,ico,Qp,IZ,dco,cco,US,fco,mco,gco,Hp,NZ,hco,pco,JS,_co,uco,bco,Up,jZ,vco,Tco,YS,Fco,Cco,Mco,Jp,DZ,Eco,yco,KS,wco,Aco,Lco,Yp,qZ,Bco,xco,ZS,kco,Rco,Sco,Kp,GZ,Pco,$co,eP,Ico,Nco,jco,Zp,OZ,Dco,qco,oP,Gco,Oco,Xco,e_,XZ,Vco,zco,rP,Wco,Qco,Hco,o_,VZ,Uco,Jco,tP,Yco,Kco,Zco,r_,zZ,efo,ofo,aP,rfo,tfo,afo,t_,WZ,nfo,sfo,nP,lfo,ifo,dfo,a_,QZ,cfo,ffo,sP,mfo,gfo,hfo,n_,HZ,pfo,_fo,lP,ufo,bfo,vfo,s_,UZ,Tfo,Ffo,iP,Cfo,Mfo,Efo,l_,JZ,yfo,wfo,dP,Afo,Lfo,Bfo,i_,YZ,xfo,kfo,cP,Rfo,Sfo,Pfo,d_,KZ,$fo,Ifo,fP,Nfo,jfo,Dfo,c_,ZZ,qfo,Gfo,mP,Ofo,Xfo,Vfo,f_,eee,zfo,Wfo,gP,Qfo,Hfo,Ufo,m_,oee,Jfo,Yfo,hP,Kfo,Zfo,emo,g_,ree,omo,rmo,pP,tmo,amo,nmo,h_,tee,smo,lmo,_P,imo,dmo,cmo,p_,aee,fmo,mmo,uP,gmo,hmo,pmo,__,nee,_mo,umo,bP,bmo,vmo,Tmo,u_,see,Fmo,Cmo,vP,Mmo,Emo,ymo,b_,lee,wmo,Amo,TP,Lmo,Bmo,xmo,v_,iee,kmo,Rmo,FP,Smo,Pmo,$mo,T_,dee,Imo,Nmo,CP,jmo,Dmo,qmo,F_,cee,Gmo,Omo,MP,Xmo,Vmo,zmo,C_,fee,Wmo,Qmo,EP,Hmo,Umo,Jmo,M_,mee,Ymo,Kmo,yP,Zmo,ego,ogo,E_,gee,rgo,tgo,wP,ago,ngo,sgo,y_,hee,lgo,igo,AP,dgo,cgo,fgo,w_,mgo,pee,ggo,hgo,_ee,pgo,_go,uee,ugo,bgo,Y3,Dke,Zi,A_,bee,K3,vgo,vee,Tgo,qke,Yo,Z3,Fgo,ed,Cgo,Tee,Mgo,Ego,Fee,ygo,wgo,Ago,ey,Lgo,Cee,Bgo,xgo,kgo,zr,oy,Rgo,Mee,Sgo,Pgo,od,$go,Eee,Igo,Ngo,yee,jgo,Dgo,qgo,wee,Ggo,Ogo,ry,Xgo,je,ty,Vgo,Aee,zgo,Wgo,za,Qgo,Lee,Hgo,Ugo,Bee,Jgo,Ygo,xee,Kgo,Zgo,eho,k,L_,kee,oho,rho,LP,tho,aho,nho,B_,Ree,sho,lho,BP,iho,dho,cho,x_,See,fho,mho,xP,gho,hho,pho,k_,Pee,_ho,uho,kP,bho,vho,Tho,R_,$ee,Fho,Cho,RP,Mho,Eho,yho,S_,Iee,who,Aho,SP,Lho,Bho,xho,P_,Nee,kho,Rho,PP,Sho,Pho,$ho,$_,jee,Iho,Nho,$P,jho,Dho,qho,I_,Dee,Gho,Oho,IP,Xho,Vho,zho,N_,qee,Who,Qho,NP,Hho,Uho,Jho,j_,Gee,Yho,Kho,jP,Zho,epo,opo,D_,Oee,rpo,tpo,DP,apo,npo,spo,q_,Xee,lpo,ipo,qP,dpo,cpo,fpo,G_,Vee,mpo,gpo,GP,hpo,ppo,_po,O_,zee,upo,bpo,OP,vpo,Tpo,Fpo,X_,Wee,Cpo,Mpo,XP,Epo,ypo,wpo,V_,Qee,Apo,Lpo,VP,Bpo,xpo,kpo,z_,Hee,Rpo,Spo,zP,Ppo,$po,Ipo,W_,Uee,Npo,jpo,WP,Dpo,qpo,Gpo,Q_,Jee,Opo,Xpo,QP,Vpo,zpo,Wpo,H_,Yee,Qpo,Hpo,HP,Upo,Jpo,Ypo,U_,Kee,Kpo,Zpo,UP,e_o,o_o,r_o,J_,Zee,t_o,a_o,JP,n_o,s_o,l_o,Y_,eoe,i_o,d_o,YP,c_o,f_o,m_o,K_,ooe,g_o,h_o,KP,p_o,__o,u_o,Z_,roe,b_o,v_o,ZP,T_o,F_o,C_o,eu,toe,M_o,E_o,e$,y_o,w_o,A_o,ou,aoe,L_o,B_o,o$,x_o,k_o,R_o,ru,noe,S_o,P_o,r$,$_o,I_o,N_o,tu,soe,j_o,D_o,t$,q_o,G_o,O_o,au,loe,X_o,V_o,a$,z_o,W_o,Q_o,nu,ioe,H_o,U_o,n$,J_o,Y_o,K_o,su,doe,Z_o,euo,s$,ouo,ruo,tuo,lu,coe,auo,nuo,l$,suo,luo,iuo,iu,foe,duo,cuo,i$,fuo,muo,guo,du,moe,huo,puo,d$,_uo,uuo,buo,cu,goe,vuo,Tuo,c$,Fuo,Cuo,Muo,fu,hoe,Euo,yuo,f$,wuo,Auo,Luo,mu,poe,Buo,xuo,m$,kuo,Ruo,Suo,gu,Puo,_oe,$uo,Iuo,uoe,Nuo,juo,boe,Duo,quo,ay,Gke,rd,hu,voe,ny,Guo,Toe,Ouo,Oke,Ko,sy,Xuo,td,Vuo,Foe,zuo,Wuo,Coe,Quo,Huo,Uuo,ly,Juo,Moe,Yuo,Kuo,Zuo,Wr,iy,e5o,Eoe,o5o,r5o,ad,t5o,yoe,a5o,n5o,woe,s5o,l5o,i5o,Aoe,d5o,c5o,dy,f5o,De,cy,m5o,Loe,g5o,h5o,Wa,p5o,Boe,_5o,u5o,xoe,b5o,v5o,koe,T5o,F5o,C5o,$,pu,Roe,M5o,E5o,g$,y5o,w5o,A5o,_u,Soe,L5o,B5o,h$,x5o,k5o,R5o,uu,Poe,S5o,P5o,p$,$5o,I5o,N5o,bu,$oe,j5o,D5o,_$,q5o,G5o,O5o,vu,Ioe,X5o,V5o,u$,z5o,W5o,Q5o,Tu,Noe,H5o,U5o,b$,J5o,Y5o,K5o,Fu,joe,Z5o,e2o,v$,o2o,r2o,t2o,Cu,Doe,a2o,n2o,T$,s2o,l2o,i2o,Mu,qoe,d2o,c2o,F$,f2o,m2o,g2o,Eu,Goe,h2o,p2o,C$,_2o,u2o,b2o,yu,Ooe,v2o,T2o,M$,F2o,C2o,M2o,wu,Xoe,E2o,y2o,E$,w2o,A2o,L2o,Au,Voe,B2o,x2o,y$,k2o,R2o,S2o,Lu,zoe,P2o,$2o,w$,I2o,N2o,j2o,Bu,Woe,D2o,q2o,A$,G2o,O2o,X2o,xu,Qoe,V2o,z2o,L$,W2o,Q2o,H2o,ku,Hoe,U2o,J2o,B$,Y2o,K2o,Z2o,Ru,Uoe,e1o,o1o,x$,r1o,t1o,a1o,Su,Joe,n1o,s1o,k$,l1o,i1o,d1o,Pu,Yoe,c1o,f1o,R$,m1o,g1o,h1o,$u,Koe,p1o,_1o,S$,u1o,b1o,v1o,Iu,Zoe,T1o,F1o,P$,C1o,M1o,E1o,Nu,ere,y1o,w1o,$$,A1o,L1o,B1o,ju,ore,x1o,k1o,I$,R1o,S1o,P1o,Du,rre,$1o,I1o,N$,N1o,j1o,D1o,qu,tre,q1o,G1o,j$,O1o,X1o,V1o,Gu,are,z1o,W1o,D$,Q1o,H1o,U1o,Ou,nre,J1o,Y1o,q$,K1o,Z1o,ebo,Xu,sre,obo,rbo,G$,tbo,abo,nbo,Vu,lre,sbo,lbo,O$,ibo,dbo,cbo,zu,ire,fbo,mbo,X$,gbo,hbo,pbo,Wu,dre,_bo,ubo,V$,bbo,vbo,Tbo,Qu,cre,Fbo,Cbo,z$,Mbo,Ebo,ybo,Hu,fre,wbo,Abo,W$,Lbo,Bbo,xbo,Uu,mre,kbo,Rbo,Q$,Sbo,Pbo,$bo,Ju,Ibo,gre,Nbo,jbo,hre,Dbo,qbo,pre,Gbo,Obo,fy,Xke,nd,Yu,_re,my,Xbo,ure,Vbo,Vke,Zo,gy,zbo,sd,Wbo,bre,Qbo,Hbo,vre,Ubo,Jbo,Ybo,hy,Kbo,Tre,Zbo,evo,ovo,Qr,py,rvo,Fre,tvo,avo,ld,nvo,Cre,svo,lvo,Mre,ivo,dvo,cvo,Ere,fvo,mvo,_y,gvo,qe,uy,hvo,yre,pvo,_vo,Qa,uvo,wre,bvo,vvo,Are,Tvo,Fvo,Lre,Cvo,Mvo,Evo,I,Ku,Bre,yvo,wvo,H$,Avo,Lvo,Bvo,Zu,xre,xvo,kvo,U$,Rvo,Svo,Pvo,e5,kre,$vo,Ivo,J$,Nvo,jvo,Dvo,o5,Rre,qvo,Gvo,Y$,Ovo,Xvo,Vvo,r5,Sre,zvo,Wvo,K$,Qvo,Hvo,Uvo,t5,Pre,Jvo,Yvo,Z$,Kvo,Zvo,e6o,a5,$re,o6o,r6o,eI,t6o,a6o,n6o,n5,Ire,s6o,l6o,oI,i6o,d6o,c6o,s5,Nre,f6o,m6o,rI,g6o,h6o,p6o,l5,jre,_6o,u6o,tI,b6o,v6o,T6o,i5,Dre,F6o,C6o,aI,M6o,E6o,y6o,d5,qre,w6o,A6o,nI,L6o,B6o,x6o,c5,Gre,k6o,R6o,sI,S6o,P6o,$6o,f5,Ore,I6o,N6o,lI,j6o,D6o,q6o,m5,Xre,G6o,O6o,iI,X6o,V6o,z6o,g5,Vre,W6o,Q6o,dI,H6o,U6o,J6o,h5,zre,Y6o,K6o,cI,Z6o,eTo,oTo,p5,Wre,rTo,tTo,fI,aTo,nTo,sTo,_5,Qre,lTo,iTo,mI,dTo,cTo,fTo,u5,Hre,mTo,gTo,gI,hTo,pTo,_To,b5,Ure,uTo,bTo,hI,vTo,TTo,FTo,v5,Jre,CTo,MTo,pI,ETo,yTo,wTo,T5,Yre,ATo,LTo,_I,BTo,xTo,kTo,F5,Kre,RTo,STo,uI,PTo,$To,ITo,C5,Zre,NTo,jTo,bI,DTo,qTo,GTo,M5,ete,OTo,XTo,vI,VTo,zTo,WTo,E5,ote,QTo,HTo,TI,UTo,JTo,YTo,y5,rte,KTo,ZTo,FI,eFo,oFo,rFo,w5,tte,tFo,aFo,CI,nFo,sFo,lFo,A5,ate,iFo,dFo,MI,cFo,fFo,mFo,L5,nte,gFo,hFo,ste,pFo,_Fo,uFo,B5,lte,bFo,vFo,EI,TFo,FFo,CFo,x5,ite,MFo,EFo,yI,yFo,wFo,AFo,k5,dte,LFo,BFo,wI,xFo,kFo,RFo,R5,cte,SFo,PFo,AI,$Fo,IFo,NFo,S5,jFo,fte,DFo,qFo,mte,GFo,OFo,gte,XFo,VFo,by,zke,id,P5,hte,vy,zFo,pte,WFo,Wke,er,Ty,QFo,dd,HFo,_te,UFo,JFo,ute,YFo,KFo,ZFo,Fy,eCo,bte,oCo,rCo,tCo,Hr,Cy,aCo,vte,nCo,sCo,cd,lCo,Tte,iCo,dCo,Fte,cCo,fCo,mCo,Cte,gCo,hCo,My,pCo,Ge,Ey,_Co,Mte,uCo,bCo,Ha,vCo,Ete,TCo,FCo,yte,CCo,MCo,wte,ECo,yCo,wCo,se,$5,Ate,ACo,LCo,LI,BCo,xCo,kCo,I5,Lte,RCo,SCo,BI,PCo,$Co,ICo,N5,Bte,NCo,jCo,xI,DCo,qCo,GCo,j5,xte,OCo,XCo,kI,VCo,zCo,WCo,D5,kte,QCo,HCo,RI,UCo,JCo,YCo,q5,Rte,KCo,ZCo,SI,eMo,oMo,rMo,G5,Ste,tMo,aMo,PI,nMo,sMo,lMo,O5,Pte,iMo,dMo,$I,cMo,fMo,mMo,X5,$te,gMo,hMo,II,pMo,_Mo,uMo,V5,Ite,bMo,vMo,NI,TMo,FMo,CMo,z5,Nte,MMo,EMo,jI,yMo,wMo,AMo,W5,jte,LMo,BMo,DI,xMo,kMo,RMo,Q5,Dte,SMo,PMo,qI,$Mo,IMo,NMo,H5,qte,jMo,DMo,GI,qMo,GMo,OMo,U5,Gte,XMo,VMo,OI,zMo,WMo,QMo,J5,Ote,HMo,UMo,XI,JMo,YMo,KMo,Y5,ZMo,Xte,e4o,o4o,Vte,r4o,t4o,zte,a4o,n4o,yy,Qke,fd,K5,Wte,wy,s4o,Qte,l4o,Hke,or,Ay,i4o,md,d4o,Hte,c4o,f4o,Ute,m4o,g4o,h4o,Ly,p4o,Jte,_4o,u4o,b4o,Ur,By,v4o,Yte,T4o,F4o,gd,C4o,Kte,M4o,E4o,Zte,y4o,w4o,A4o,eae,L4o,B4o,xy,x4o,Oe,ky,k4o,oae,R4o,S4o,Ua,P4o,rae,$4o,I4o,tae,N4o,j4o,aae,D4o,q4o,G4o,A,Z5,nae,O4o,X4o,VI,V4o,z4o,W4o,e2,sae,Q4o,H4o,zI,U4o,J4o,Y4o,o2,lae,K4o,Z4o,WI,eEo,oEo,rEo,r2,iae,tEo,aEo,QI,nEo,sEo,lEo,t2,dae,iEo,dEo,HI,cEo,fEo,mEo,a2,cae,gEo,hEo,UI,pEo,_Eo,uEo,n2,fae,bEo,vEo,JI,TEo,FEo,CEo,s2,mae,MEo,EEo,YI,yEo,wEo,AEo,l2,gae,LEo,BEo,KI,xEo,kEo,REo,i2,hae,SEo,PEo,ZI,$Eo,IEo,NEo,d2,pae,jEo,DEo,eN,qEo,GEo,OEo,c2,_ae,XEo,VEo,oN,zEo,WEo,QEo,f2,uae,HEo,UEo,rN,JEo,YEo,KEo,m2,bae,ZEo,e3o,tN,o3o,r3o,t3o,g2,vae,a3o,n3o,aN,s3o,l3o,i3o,h2,Tae,d3o,c3o,nN,f3o,m3o,g3o,p2,Fae,h3o,p3o,sN,_3o,u3o,b3o,_2,Cae,v3o,T3o,lN,F3o,C3o,M3o,u2,Mae,E3o,y3o,iN,w3o,A3o,L3o,b2,Eae,B3o,x3o,dN,k3o,R3o,S3o,v2,yae,P3o,$3o,cN,I3o,N3o,j3o,T2,wae,D3o,q3o,fN,G3o,O3o,X3o,F2,Aae,V3o,z3o,mN,W3o,Q3o,H3o,C2,Lae,U3o,J3o,gN,Y3o,K3o,Z3o,M2,Bae,eyo,oyo,hN,ryo,tyo,ayo,E2,xae,nyo,syo,pN,lyo,iyo,dyo,y2,kae,cyo,fyo,_N,myo,gyo,hyo,w2,Rae,pyo,_yo,uN,uyo,byo,vyo,A2,Sae,Tyo,Fyo,bN,Cyo,Myo,Eyo,L2,Pae,yyo,wyo,vN,Ayo,Lyo,Byo,B2,$ae,xyo,kyo,TN,Ryo,Syo,Pyo,x2,Iae,$yo,Iyo,FN,Nyo,jyo,Dyo,k2,Nae,qyo,Gyo,CN,Oyo,Xyo,Vyo,R2,jae,zyo,Wyo,MN,Qyo,Hyo,Uyo,S2,Dae,Jyo,Yyo,EN,Kyo,Zyo,ewo,P2,qae,owo,rwo,yN,two,awo,nwo,$2,Gae,swo,lwo,wN,iwo,dwo,cwo,I2,Oae,fwo,mwo,AN,gwo,hwo,pwo,N2,Xae,_wo,uwo,LN,bwo,vwo,Two,j2,Vae,Fwo,Cwo,BN,Mwo,Ewo,ywo,D2,zae,wwo,Awo,xN,Lwo,Bwo,xwo,q2,Wae,kwo,Rwo,kN,Swo,Pwo,$wo,G2,Qae,Iwo,Nwo,RN,jwo,Dwo,qwo,O2,Hae,Gwo,Owo,SN,Xwo,Vwo,zwo,X2,Uae,Wwo,Qwo,PN,Hwo,Uwo,Jwo,V2,Jae,Ywo,Kwo,$N,Zwo,eAo,oAo,z2,rAo,Yae,tAo,aAo,Kae,nAo,sAo,Zae,lAo,iAo,Ry,Uke,hd,W2,ene,Sy,dAo,one,cAo,Jke,rr,Py,fAo,pd,mAo,rne,gAo,hAo,tne,pAo,_Ao,uAo,$y,bAo,ane,vAo,TAo,FAo,Jr,Iy,CAo,nne,MAo,EAo,_d,yAo,sne,wAo,AAo,lne,LAo,BAo,xAo,ine,kAo,RAo,Ny,SAo,Xe,jy,PAo,dne,$Ao,IAo,Ja,NAo,cne,jAo,DAo,fne,qAo,GAo,mne,OAo,XAo,VAo,G,Q2,gne,zAo,WAo,IN,QAo,HAo,UAo,H2,hne,JAo,YAo,NN,KAo,ZAo,e0o,U2,pne,o0o,r0o,jN,t0o,a0o,n0o,J2,_ne,s0o,l0o,DN,i0o,d0o,c0o,Y2,une,f0o,m0o,qN,g0o,h0o,p0o,K2,bne,_0o,u0o,GN,b0o,v0o,T0o,Z2,vne,F0o,C0o,ON,M0o,E0o,y0o,e1,Tne,w0o,A0o,XN,L0o,B0o,x0o,o1,Fne,k0o,R0o,VN,S0o,P0o,$0o,r1,Cne,I0o,N0o,zN,j0o,D0o,q0o,t1,Mne,G0o,O0o,WN,X0o,V0o,z0o,a1,Ene,W0o,Q0o,QN,H0o,U0o,J0o,n1,yne,Y0o,K0o,HN,Z0o,eLo,oLo,s1,wne,rLo,tLo,UN,aLo,nLo,sLo,l1,Ane,lLo,iLo,JN,dLo,cLo,fLo,i1,Lne,mLo,gLo,YN,hLo,pLo,_Lo,d1,Bne,uLo,bLo,KN,vLo,TLo,FLo,c1,xne,CLo,MLo,ZN,ELo,yLo,wLo,f1,kne,ALo,LLo,ej,BLo,xLo,kLo,m1,Rne,RLo,SLo,oj,PLo,$Lo,ILo,g1,Sne,NLo,jLo,rj,DLo,qLo,GLo,h1,Pne,OLo,XLo,tj,VLo,zLo,WLo,p1,$ne,QLo,HLo,aj,ULo,JLo,YLo,_1,Ine,KLo,ZLo,nj,e7o,o7o,r7o,u1,Nne,t7o,a7o,sj,n7o,s7o,l7o,b1,jne,i7o,d7o,lj,c7o,f7o,m7o,v1,Dne,g7o,h7o,ij,p7o,_7o,u7o,T1,qne,b7o,v7o,dj,T7o,F7o,C7o,F1,M7o,Gne,E7o,y7o,One,w7o,A7o,Xne,L7o,B7o,Dy,Yke,ud,C1,Vne,qy,x7o,zne,k7o,Kke,tr,Gy,R7o,bd,S7o,Wne,P7o,$7o,Qne,I7o,N7o,j7o,Oy,D7o,Hne,q7o,G7o,O7o,Yr,Xy,X7o,Une,V7o,z7o,vd,W7o,Jne,Q7o,H7o,Yne,U7o,J7o,Y7o,Kne,K7o,Z7o,Vy,e8o,Ve,zy,o8o,Zne,r8o,t8o,Ya,a8o,ese,n8o,s8o,ose,l8o,i8o,rse,d8o,c8o,f8o,da,M1,tse,m8o,g8o,cj,h8o,p8o,_8o,E1,ase,u8o,b8o,fj,v8o,T8o,F8o,y1,nse,C8o,M8o,mj,E8o,y8o,w8o,w1,sse,A8o,L8o,gj,B8o,x8o,k8o,A1,lse,R8o,S8o,hj,P8o,$8o,I8o,L1,N8o,ise,j8o,D8o,dse,q8o,G8o,cse,O8o,X8o,Wy,Zke,Td,B1,fse,Qy,V8o,mse,z8o,eRe,ar,Hy,W8o,Fd,Q8o,gse,H8o,U8o,hse,J8o,Y8o,K8o,Uy,Z8o,pse,e9o,o9o,r9o,Kr,Jy,t9o,_se,a9o,n9o,Cd,s9o,use,l9o,i9o,bse,d9o,c9o,f9o,vse,m9o,g9o,Yy,h9o,ze,Ky,p9o,Tse,_9o,u9o,Ka,b9o,Fse,v9o,T9o,Cse,F9o,C9o,Mse,M9o,E9o,y9o,D,x1,Ese,w9o,A9o,pj,L9o,B9o,x9o,k1,yse,k9o,R9o,_j,S9o,P9o,$9o,R1,wse,I9o,N9o,uj,j9o,D9o,q9o,S1,Ase,G9o,O9o,bj,X9o,V9o,z9o,P1,Lse,W9o,Q9o,vj,H9o,U9o,J9o,$1,Bse,Y9o,K9o,Tj,Z9o,eBo,oBo,I1,xse,rBo,tBo,Fj,aBo,nBo,sBo,N1,kse,lBo,iBo,Cj,dBo,cBo,fBo,j1,Rse,mBo,gBo,Mj,hBo,pBo,_Bo,D1,Sse,uBo,bBo,Ej,vBo,TBo,FBo,q1,Pse,CBo,MBo,yj,EBo,yBo,wBo,G1,$se,ABo,LBo,wj,BBo,xBo,kBo,O1,Ise,RBo,SBo,Aj,PBo,$Bo,IBo,X1,Nse,NBo,jBo,Lj,DBo,qBo,GBo,V1,jse,OBo,XBo,Bj,VBo,zBo,WBo,z1,Dse,QBo,HBo,xj,UBo,JBo,YBo,W1,qse,KBo,ZBo,kj,exo,oxo,rxo,Q1,Gse,txo,axo,Rj,nxo,sxo,lxo,H1,Ose,ixo,dxo,Sj,cxo,fxo,mxo,U1,Xse,gxo,hxo,Pj,pxo,_xo,uxo,J1,Vse,bxo,vxo,$j,Txo,Fxo,Cxo,Y1,zse,Mxo,Exo,Ij,yxo,wxo,Axo,K1,Wse,Lxo,Bxo,Nj,xxo,kxo,Rxo,Z1,Qse,Sxo,Pxo,jj,$xo,Ixo,Nxo,eb,Hse,jxo,Dxo,Dj,qxo,Gxo,Oxo,ob,Use,Xxo,Vxo,qj,zxo,Wxo,Qxo,rb,Jse,Hxo,Uxo,Gj,Jxo,Yxo,Kxo,tb,Yse,Zxo,eko,Oj,oko,rko,tko,ab,Kse,ako,nko,Xj,sko,lko,iko,nb,Zse,dko,cko,Vj,fko,mko,gko,sb,ele,hko,pko,zj,_ko,uko,bko,lb,ole,vko,Tko,Wj,Fko,Cko,Mko,ib,rle,Eko,yko,Qj,wko,Ako,Lko,db,Bko,tle,xko,kko,ale,Rko,Sko,nle,Pko,$ko,Zy,oRe,Md,cb,sle,ew,Iko,lle,Nko,rRe,nr,ow,jko,Ed,Dko,ile,qko,Gko,dle,Oko,Xko,Vko,rw,zko,cle,Wko,Qko,Hko,Zr,tw,Uko,fle,Jko,Yko,yd,Kko,mle,Zko,eRo,gle,oRo,rRo,tRo,hle,aRo,nRo,aw,sRo,We,nw,lRo,ple,iRo,dRo,Za,cRo,_le,fRo,mRo,ule,gRo,hRo,ble,pRo,_Ro,uRo,R,fb,vle,bRo,vRo,Hj,TRo,FRo,CRo,mb,Tle,MRo,ERo,Uj,yRo,wRo,ARo,gb,Fle,LRo,BRo,Jj,xRo,kRo,RRo,hb,Cle,SRo,PRo,Yj,$Ro,IRo,NRo,pb,Mle,jRo,DRo,Kj,qRo,GRo,ORo,_b,Ele,XRo,VRo,Zj,zRo,WRo,QRo,ub,yle,HRo,URo,eD,JRo,YRo,KRo,bb,wle,ZRo,eSo,oD,oSo,rSo,tSo,vb,Ale,aSo,nSo,rD,sSo,lSo,iSo,Tb,Lle,dSo,cSo,tD,fSo,mSo,gSo,Fb,Ble,hSo,pSo,aD,_So,uSo,bSo,Cb,xle,vSo,TSo,nD,FSo,CSo,MSo,Mb,kle,ESo,ySo,sD,wSo,ASo,LSo,Eb,Rle,BSo,xSo,lD,kSo,RSo,SSo,yb,Sle,PSo,$So,iD,ISo,NSo,jSo,wb,Ple,DSo,qSo,dD,GSo,OSo,XSo,Ab,$le,VSo,zSo,cD,WSo,QSo,HSo,Lb,Ile,USo,JSo,fD,YSo,KSo,ZSo,Bb,Nle,ePo,oPo,mD,rPo,tPo,aPo,xb,jle,nPo,sPo,gD,lPo,iPo,dPo,kb,Dle,cPo,fPo,hD,mPo,gPo,hPo,Rb,qle,pPo,_Po,pD,uPo,bPo,vPo,Sb,Gle,TPo,FPo,_D,CPo,MPo,EPo,Pb,Ole,yPo,wPo,uD,APo,LPo,BPo,$b,Xle,xPo,kPo,bD,RPo,SPo,PPo,Ib,Vle,$Po,IPo,vD,NPo,jPo,DPo,Nb,zle,qPo,GPo,TD,OPo,XPo,VPo,jb,Wle,zPo,WPo,FD,QPo,HPo,UPo,Db,Qle,JPo,YPo,CD,KPo,ZPo,e$o,qb,Hle,o$o,r$o,MD,t$o,a$o,n$o,Gb,Ule,s$o,l$o,ED,i$o,d$o,c$o,Ob,Jle,f$o,m$o,yD,g$o,h$o,p$o,Xb,Yle,_$o,u$o,wD,b$o,v$o,T$o,Vb,Kle,F$o,C$o,AD,M$o,E$o,y$o,zb,Zle,w$o,A$o,LD,L$o,B$o,x$o,Wb,eie,k$o,R$o,BD,S$o,P$o,$$o,Qb,oie,I$o,N$o,xD,j$o,D$o,q$o,Hb,rie,G$o,O$o,kD,X$o,V$o,z$o,Ub,tie,W$o,Q$o,RD,H$o,U$o,J$o,Jb,Y$o,aie,K$o,Z$o,nie,eIo,oIo,sie,rIo,tIo,sw,tRe,wd,Yb,lie,lw,aIo,iie,nIo,aRe,sr,iw,sIo,Ad,lIo,die,iIo,dIo,cie,cIo,fIo,mIo,dw,gIo,fie,hIo,pIo,_Io,et,cw,uIo,mie,bIo,vIo,Ld,TIo,gie,FIo,CIo,hie,MIo,EIo,yIo,pie,wIo,AIo,fw,LIo,Qe,mw,BIo,_ie,xIo,kIo,en,RIo,uie,SIo,PIo,bie,$Io,IIo,vie,NIo,jIo,DIo,Tie,Kb,Fie,qIo,GIo,SD,OIo,XIo,VIo,Zb,zIo,Cie,WIo,QIo,Mie,HIo,UIo,Eie,JIo,YIo,gw,nRe,Bd,ev,yie,hw,KIo,wie,ZIo,sRe,lr,pw,eNo,xd,oNo,Aie,rNo,tNo,Lie,aNo,nNo,sNo,_w,lNo,Bie,iNo,dNo,cNo,ot,uw,fNo,xie,mNo,gNo,kd,hNo,kie,pNo,_No,Rie,uNo,bNo,vNo,Sie,TNo,FNo,bw,CNo,He,vw,MNo,Pie,ENo,yNo,on,wNo,$ie,ANo,LNo,Iie,BNo,xNo,Nie,kNo,RNo,SNo,ge,ov,jie,PNo,$No,PD,INo,NNo,jNo,rv,Die,DNo,qNo,$D,GNo,ONo,XNo,qs,qie,VNo,zNo,ID,WNo,QNo,ND,HNo,UNo,JNo,tv,Gie,YNo,KNo,jD,ZNo,ejo,ojo,ma,Oie,rjo,tjo,DD,ajo,njo,qD,sjo,ljo,GD,ijo,djo,cjo,av,Xie,fjo,mjo,OD,gjo,hjo,pjo,nv,Vie,_jo,ujo,XD,bjo,vjo,Tjo,sv,zie,Fjo,Cjo,VD,Mjo,Ejo,yjo,lv,Wie,wjo,Ajo,zD,Ljo,Bjo,xjo,iv,Qie,kjo,Rjo,WD,Sjo,Pjo,$jo,dv,Hie,Ijo,Njo,QD,jjo,Djo,qjo,cv,Gjo,Uie,Ojo,Xjo,Jie,Vjo,zjo,Yie,Wjo,Qjo,Tw,lRe,Rd,fv,Kie,Fw,Hjo,Zie,Ujo,iRe,ir,Cw,Jjo,Sd,Yjo,ede,Kjo,Zjo,ode,eDo,oDo,rDo,Mw,tDo,rde,aDo,nDo,sDo,rt,Ew,lDo,tde,iDo,dDo,Pd,cDo,ade,fDo,mDo,nde,gDo,hDo,pDo,sde,_Do,uDo,yw,bDo,Ue,ww,vDo,lde,TDo,FDo,rn,CDo,ide,MDo,EDo,dde,yDo,wDo,cde,ADo,LDo,BDo,fde,mv,mde,xDo,kDo,HD,RDo,SDo,PDo,gv,$Do,gde,IDo,NDo,hde,jDo,DDo,pde,qDo,GDo,Aw,dRe,$d,hv,_de,Lw,ODo,ude,XDo,cRe,dr,Bw,VDo,Id,zDo,bde,WDo,QDo,vde,HDo,UDo,JDo,xw,YDo,Tde,KDo,ZDo,eqo,tt,kw,oqo,Fde,rqo,tqo,Nd,aqo,Cde,nqo,sqo,Mde,lqo,iqo,dqo,Ede,cqo,fqo,Rw,mqo,Je,Sw,gqo,yde,hqo,pqo,tn,_qo,wde,uqo,bqo,Ade,vqo,Tqo,Lde,Fqo,Cqo,Mqo,ke,pv,Bde,Eqo,yqo,UD,wqo,Aqo,Lqo,_v,xde,Bqo,xqo,JD,kqo,Rqo,Sqo,uv,kde,Pqo,$qo,YD,Iqo,Nqo,jqo,bv,Rde,Dqo,qqo,KD,Gqo,Oqo,Xqo,vv,Sde,Vqo,zqo,ZD,Wqo,Qqo,Hqo,Tv,Pde,Uqo,Jqo,eq,Yqo,Kqo,Zqo,Fv,$de,eGo,oGo,oq,rGo,tGo,aGo,Cv,Ide,nGo,sGo,rq,lGo,iGo,dGo,Mv,cGo,Nde,fGo,mGo,jde,gGo,hGo,Dde,pGo,_Go,Pw,fRe,jd,Ev,qde,$w,uGo,Gde,bGo,mRe,cr,Iw,vGo,Dd,TGo,Ode,FGo,CGo,Xde,MGo,EGo,yGo,Nw,wGo,Vde,AGo,LGo,BGo,at,jw,xGo,zde,kGo,RGo,qd,SGo,Wde,PGo,$Go,Qde,IGo,NGo,jGo,Hde,DGo,qGo,Dw,GGo,Ye,qw,OGo,Ude,XGo,VGo,an,zGo,Jde,WGo,QGo,Yde,HGo,UGo,Kde,JGo,YGo,KGo,nn,yv,Zde,ZGo,eOo,tq,oOo,rOo,tOo,wv,ece,aOo,nOo,aq,sOo,lOo,iOo,Av,oce,dOo,cOo,nq,fOo,mOo,gOo,Lv,rce,hOo,pOo,sq,_Oo,uOo,bOo,Bv,vOo,tce,TOo,FOo,ace,COo,MOo,nce,EOo,yOo,Gw,gRe,Gd,xv,sce,Ow,wOo,lce,AOo,hRe,fr,Xw,LOo,Od,BOo,ice,xOo,kOo,dce,ROo,SOo,POo,Vw,$Oo,cce,IOo,NOo,jOo,nt,zw,DOo,fce,qOo,GOo,Xd,OOo,mce,XOo,VOo,gce,zOo,WOo,QOo,hce,HOo,UOo,Ww,JOo,Ke,Qw,YOo,pce,KOo,ZOo,sn,eXo,_ce,oXo,rXo,uce,tXo,aXo,bce,nXo,sXo,lXo,Re,kv,vce,iXo,dXo,lq,cXo,fXo,mXo,Rv,Tce,gXo,hXo,iq,pXo,_Xo,uXo,Sv,Fce,bXo,vXo,dq,TXo,FXo,CXo,Pv,Cce,MXo,EXo,cq,yXo,wXo,AXo,$v,Mce,LXo,BXo,fq,xXo,kXo,RXo,Iv,Ece,SXo,PXo,mq,$Xo,IXo,NXo,Nv,yce,jXo,DXo,gq,qXo,GXo,OXo,jv,wce,XXo,VXo,hq,zXo,WXo,QXo,Dv,HXo,Ace,UXo,JXo,Lce,YXo,KXo,Bce,ZXo,eVo,Hw,pRe,Vd,qv,xce,Uw,oVo,kce,rVo,_Re,mr,Jw,tVo,zd,aVo,Rce,nVo,sVo,Sce,lVo,iVo,dVo,Yw,cVo,Pce,fVo,mVo,gVo,st,Kw,hVo,$ce,pVo,_Vo,Wd,uVo,Ice,bVo,vVo,Nce,TVo,FVo,CVo,jce,MVo,EVo,Zw,yVo,Ze,eA,wVo,Dce,AVo,LVo,ln,BVo,qce,xVo,kVo,Gce,RVo,SVo,Oce,PVo,$Vo,IVo,oA,Gv,Xce,NVo,jVo,pq,DVo,qVo,GVo,Ov,Vce,OVo,XVo,_q,VVo,zVo,WVo,Xv,QVo,zce,HVo,UVo,Wce,JVo,YVo,Qce,KVo,ZVo,rA,uRe,Qd,Vv,Hce,tA,ezo,Uce,ozo,bRe,gr,aA,rzo,Hd,tzo,Jce,azo,nzo,Yce,szo,lzo,izo,nA,dzo,Kce,czo,fzo,mzo,lt,sA,gzo,Zce,hzo,pzo,Ud,_zo,efe,uzo,bzo,ofe,vzo,Tzo,Fzo,rfe,Czo,Mzo,lA,Ezo,eo,iA,yzo,tfe,wzo,Azo,dn,Lzo,afe,Bzo,xzo,nfe,kzo,Rzo,sfe,Szo,Pzo,$zo,cn,zv,lfe,Izo,Nzo,uq,jzo,Dzo,qzo,Wv,ife,Gzo,Ozo,bq,Xzo,Vzo,zzo,Qv,dfe,Wzo,Qzo,vq,Hzo,Uzo,Jzo,Hv,cfe,Yzo,Kzo,Tq,Zzo,eWo,oWo,Uv,rWo,ffe,tWo,aWo,mfe,nWo,sWo,gfe,lWo,iWo,dA,vRe,Jd,Jv,hfe,cA,dWo,pfe,cWo,TRe,hr,fA,fWo,Yd,mWo,_fe,gWo,hWo,ufe,pWo,_Wo,uWo,mA,bWo,bfe,vWo,TWo,FWo,it,gA,CWo,vfe,MWo,EWo,Kd,yWo,Tfe,wWo,AWo,Ffe,LWo,BWo,xWo,Cfe,kWo,RWo,hA,SWo,oo,pA,PWo,Mfe,$Wo,IWo,fn,NWo,Efe,jWo,DWo,yfe,qWo,GWo,wfe,OWo,XWo,VWo,Zd,Yv,Afe,zWo,WWo,Fq,QWo,HWo,UWo,Kv,Lfe,JWo,YWo,Cq,KWo,ZWo,eQo,Zv,Bfe,oQo,rQo,Mq,tQo,aQo,nQo,e6,sQo,xfe,lQo,iQo,kfe,dQo,cQo,Rfe,fQo,mQo,_A,FRe,ec,o6,Sfe,uA,gQo,Pfe,hQo,CRe,pr,bA,pQo,oc,_Qo,$fe,uQo,bQo,Ife,vQo,TQo,FQo,vA,CQo,Nfe,MQo,EQo,yQo,dt,TA,wQo,jfe,AQo,LQo,rc,BQo,Dfe,xQo,kQo,qfe,RQo,SQo,PQo,Gfe,$Qo,IQo,FA,NQo,ro,CA,jQo,Ofe,DQo,qQo,mn,GQo,Xfe,OQo,XQo,Vfe,VQo,zQo,zfe,WQo,QQo,HQo,Wfe,r6,Qfe,UQo,JQo,Eq,YQo,KQo,ZQo,t6,eHo,Hfe,oHo,rHo,Ufe,tHo,aHo,Jfe,nHo,sHo,MA,MRe,tc,a6,Yfe,EA,lHo,Kfe,iHo,ERe,_r,yA,dHo,ac,cHo,Zfe,fHo,mHo,eme,gHo,hHo,pHo,wA,_Ho,ome,uHo,bHo,vHo,ct,AA,THo,rme,FHo,CHo,nc,MHo,tme,EHo,yHo,ame,wHo,AHo,LHo,nme,BHo,xHo,LA,kHo,to,BA,RHo,sme,SHo,PHo,gn,$Ho,lme,IHo,NHo,ime,jHo,DHo,dme,qHo,GHo,OHo,cme,n6,fme,XHo,VHo,yq,zHo,WHo,QHo,s6,HHo,mme,UHo,JHo,gme,YHo,KHo,hme,ZHo,eUo,xA,yRe,sc,l6,pme,kA,oUo,_me,rUo,wRe,ur,RA,tUo,lc,aUo,ume,nUo,sUo,bme,lUo,iUo,dUo,SA,cUo,vme,fUo,mUo,gUo,ft,PA,hUo,Tme,pUo,_Uo,ic,uUo,Fme,bUo,vUo,Cme,TUo,FUo,CUo,Mme,MUo,EUo,$A,yUo,ao,IA,wUo,Eme,AUo,LUo,hn,BUo,yme,xUo,kUo,wme,RUo,SUo,Ame,PUo,$Uo,IUo,NA,i6,Lme,NUo,jUo,wq,DUo,qUo,GUo,d6,Bme,OUo,XUo,Aq,VUo,zUo,WUo,c6,QUo,xme,HUo,UUo,kme,JUo,YUo,Rme,KUo,ZUo,jA,ARe,dc,f6,Sme,DA,eJo,Pme,oJo,LRe,br,qA,rJo,cc,tJo,$me,aJo,nJo,Ime,sJo,lJo,iJo,GA,dJo,Nme,cJo,fJo,mJo,mt,OA,gJo,jme,hJo,pJo,fc,_Jo,Dme,uJo,bJo,qme,vJo,TJo,FJo,Gme,CJo,MJo,XA,EJo,no,VA,yJo,Ome,wJo,AJo,pn,LJo,Xme,BJo,xJo,Vme,kJo,RJo,zme,SJo,PJo,$Jo,Wme,m6,Qme,IJo,NJo,Lq,jJo,DJo,qJo,g6,GJo,Hme,OJo,XJo,Ume,VJo,zJo,Jme,WJo,QJo,zA,BRe,mc,h6,Yme,WA,HJo,Kme,UJo,xRe,vr,QA,JJo,gc,YJo,Zme,KJo,ZJo,ege,eYo,oYo,rYo,HA,tYo,oge,aYo,nYo,sYo,gt,UA,lYo,rge,iYo,dYo,hc,cYo,tge,fYo,mYo,age,gYo,hYo,pYo,nge,_Yo,uYo,JA,bYo,ho,YA,vYo,sge,TYo,FYo,_n,CYo,lge,MYo,EYo,ige,yYo,wYo,dge,AYo,LYo,BYo,B,p6,cge,xYo,kYo,Bq,RYo,SYo,PYo,_6,fge,$Yo,IYo,xq,NYo,jYo,DYo,u6,mge,qYo,GYo,kq,OYo,XYo,VYo,b6,gge,zYo,WYo,Rq,QYo,HYo,UYo,v6,hge,JYo,YYo,Sq,KYo,ZYo,eKo,T6,pge,oKo,rKo,Pq,tKo,aKo,nKo,F6,_ge,sKo,lKo,$q,iKo,dKo,cKo,C6,uge,fKo,mKo,Iq,gKo,hKo,pKo,M6,bge,_Ko,uKo,Nq,bKo,vKo,TKo,E6,vge,FKo,CKo,jq,MKo,EKo,yKo,y6,Tge,wKo,AKo,Dq,LKo,BKo,xKo,w6,Fge,kKo,RKo,qq,SKo,PKo,$Ko,A6,Cge,IKo,NKo,Gq,jKo,DKo,qKo,L6,Mge,GKo,OKo,Oq,XKo,VKo,zKo,B6,Ege,WKo,QKo,Xq,HKo,UKo,JKo,x6,yge,YKo,KKo,Vq,ZKo,eZo,oZo,Gs,wge,rZo,tZo,zq,aZo,nZo,Wq,sZo,lZo,iZo,k6,Age,dZo,cZo,Qq,fZo,mZo,gZo,R6,Lge,hZo,pZo,Hq,_Zo,uZo,bZo,S6,Bge,vZo,TZo,Uq,FZo,CZo,MZo,P6,xge,EZo,yZo,Jq,wZo,AZo,LZo,$6,kge,BZo,xZo,Yq,kZo,RZo,SZo,I6,Rge,PZo,$Zo,Kq,IZo,NZo,jZo,N6,Sge,DZo,qZo,Zq,GZo,OZo,XZo,j6,Pge,VZo,zZo,eG,WZo,QZo,HZo,D6,$ge,UZo,JZo,oG,YZo,KZo,ZZo,q6,Ige,eer,oer,rG,rer,ter,aer,G6,Nge,ner,ser,tG,ler,ier,der,O6,jge,cer,fer,aG,mer,ger,her,X6,Dge,per,_er,nG,uer,ber,ver,V6,qge,Ter,Fer,sG,Cer,Mer,Eer,z6,Gge,yer,wer,lG,Aer,Ler,Ber,W6,Oge,xer,ker,iG,Rer,Ser,Per,Q6,Xge,$er,Ier,dG,Ner,jer,Der,H6,Vge,qer,Ger,cG,Oer,Xer,Ver,U6,zge,zer,Wer,fG,Qer,Her,Uer,J6,Wge,Jer,Yer,mG,Ker,Zer,eor,Y6,Qge,oor,ror,gG,tor,aor,nor,K6,Hge,sor,lor,hG,ior,dor,cor,Z6,Uge,mor,gor,pG,hor,por,_or,eT,Jge,uor,bor,_G,vor,Tor,For,oT,Yge,Cor,Mor,uG,Eor,yor,wor,rT,Kge,Aor,Lor,bG,Bor,xor,kor,tT,Zge,Ror,Sor,vG,Por,$or,Ior,ehe,Nor,jor,KA,kRe,pc,aT,ohe,ZA,Dor,rhe,qor,RRe,Tr,e0,Gor,_c,Oor,the,Xor,Vor,ahe,zor,Wor,Qor,o0,Hor,nhe,Uor,Jor,Yor,ht,r0,Kor,she,Zor,err,uc,orr,lhe,rrr,trr,ihe,arr,nrr,srr,dhe,lrr,irr,t0,drr,po,a0,crr,che,frr,mrr,un,grr,fhe,hrr,prr,mhe,_rr,urr,ghe,brr,vrr,Trr,H,nT,hhe,Frr,Crr,TG,Mrr,Err,yrr,sT,phe,wrr,Arr,FG,Lrr,Brr,xrr,lT,_he,krr,Rrr,CG,Srr,Prr,$rr,iT,uhe,Irr,Nrr,MG,jrr,Drr,qrr,dT,bhe,Grr,Orr,EG,Xrr,Vrr,zrr,cT,vhe,Wrr,Qrr,yG,Hrr,Urr,Jrr,fT,The,Yrr,Krr,wG,Zrr,etr,otr,mT,Fhe,rtr,ttr,AG,atr,ntr,str,gT,Che,ltr,itr,LG,dtr,ctr,ftr,hT,Mhe,mtr,gtr,BG,htr,ptr,_tr,pT,Ehe,utr,btr,xG,vtr,Ttr,Ftr,_T,yhe,Ctr,Mtr,kG,Etr,ytr,wtr,uT,whe,Atr,Ltr,RG,Btr,xtr,ktr,bT,Ahe,Rtr,Str,SG,Ptr,$tr,Itr,vT,Lhe,Ntr,jtr,PG,Dtr,qtr,Gtr,TT,Bhe,Otr,Xtr,$G,Vtr,ztr,Wtr,FT,xhe,Qtr,Htr,IG,Utr,Jtr,Ytr,CT,khe,Ktr,Ztr,NG,ear,oar,rar,MT,Rhe,tar,aar,jG,nar,sar,lar,ET,She,iar,dar,DG,car,far,mar,yT,Phe,gar,har,qG,par,_ar,uar,wT,$he,bar,Tar,GG,Far,Car,Mar,AT,Ihe,Ear,yar,OG,war,Aar,Lar,Nhe,Bar,xar,n0,SRe,bc,LT,jhe,s0,kar,Dhe,Rar,PRe,Fr,l0,Sar,vc,Par,qhe,$ar,Iar,Ghe,Nar,jar,Dar,i0,qar,Ohe,Gar,Oar,Xar,pt,d0,Var,Xhe,zar,War,Tc,Qar,Vhe,Har,Uar,zhe,Jar,Yar,Kar,Whe,Zar,enr,c0,onr,_o,f0,rnr,Qhe,tnr,anr,bn,nnr,Hhe,snr,lnr,Uhe,inr,dnr,Jhe,cnr,fnr,mnr,ce,BT,Yhe,gnr,hnr,XG,pnr,_nr,unr,xT,Khe,bnr,vnr,VG,Tnr,Fnr,Cnr,kT,Zhe,Mnr,Enr,zG,ynr,wnr,Anr,RT,epe,Lnr,Bnr,WG,xnr,knr,Rnr,ST,ope,Snr,Pnr,QG,$nr,Inr,Nnr,PT,rpe,jnr,Dnr,HG,qnr,Gnr,Onr,$T,tpe,Xnr,Vnr,UG,znr,Wnr,Qnr,IT,ape,Hnr,Unr,JG,Jnr,Ynr,Knr,NT,npe,Znr,esr,YG,osr,rsr,tsr,jT,spe,asr,nsr,KG,ssr,lsr,isr,DT,lpe,dsr,csr,ZG,fsr,msr,gsr,qT,ipe,hsr,psr,eO,_sr,usr,bsr,dpe,vsr,Tsr,m0,$Re,Fc,GT,cpe,g0,Fsr,fpe,Csr,IRe,Cr,h0,Msr,Cc,Esr,mpe,ysr,wsr,gpe,Asr,Lsr,Bsr,p0,xsr,hpe,ksr,Rsr,Ssr,_t,_0,Psr,ppe,$sr,Isr,Mc,Nsr,_pe,jsr,Dsr,upe,qsr,Gsr,Osr,bpe,Xsr,Vsr,u0,zsr,uo,b0,Wsr,vpe,Qsr,Hsr,vn,Usr,Tpe,Jsr,Ysr,Fpe,Ksr,Zsr,Cpe,elr,olr,rlr,v0,OT,Mpe,tlr,alr,oO,nlr,slr,llr,XT,Epe,ilr,dlr,rO,clr,flr,mlr,ype,glr,hlr,T0,NRe,Ec,VT,wpe,F0,plr,Ape,_lr,jRe,Mr,C0,ulr,yc,blr,Lpe,vlr,Tlr,Bpe,Flr,Clr,Mlr,M0,Elr,xpe,ylr,wlr,Alr,ut,E0,Llr,kpe,Blr,xlr,wc,klr,Rpe,Rlr,Slr,Spe,Plr,$lr,Ilr,Ppe,Nlr,jlr,y0,Dlr,bo,w0,qlr,$pe,Glr,Olr,Tn,Xlr,Ipe,Vlr,zlr,Npe,Wlr,Qlr,jpe,Hlr,Ulr,Jlr,J,zT,Dpe,Ylr,Klr,tO,Zlr,eir,oir,WT,qpe,rir,tir,aO,air,nir,sir,QT,Gpe,lir,iir,nO,dir,cir,fir,HT,Ope,mir,gir,sO,hir,pir,_ir,UT,Xpe,uir,bir,lO,vir,Tir,Fir,JT,Vpe,Cir,Mir,iO,Eir,yir,wir,YT,zpe,Air,Lir,dO,Bir,xir,kir,KT,Wpe,Rir,Sir,cO,Pir,$ir,Iir,ZT,Qpe,Nir,jir,fO,Dir,qir,Gir,eF,Hpe,Oir,Xir,mO,Vir,zir,Wir,oF,Upe,Qir,Hir,gO,Uir,Jir,Yir,rF,Jpe,Kir,Zir,hO,edr,odr,rdr,tF,Ype,tdr,adr,pO,ndr,sdr,ldr,aF,Kpe,idr,ddr,_O,cdr,fdr,mdr,nF,Zpe,gdr,hdr,uO,pdr,_dr,udr,sF,e_e,bdr,vdr,bO,Tdr,Fdr,Cdr,lF,o_e,Mdr,Edr,vO,ydr,wdr,Adr,iF,r_e,Ldr,Bdr,TO,xdr,kdr,Rdr,dF,t_e,Sdr,Pdr,FO,$dr,Idr,Ndr,cF,a_e,jdr,Ddr,CO,qdr,Gdr,Odr,n_e,Xdr,Vdr,A0,DRe,Ac,fF,s_e,L0,zdr,l_e,Wdr,qRe,Er,B0,Qdr,Lc,Hdr,i_e,Udr,Jdr,d_e,Ydr,Kdr,Zdr,x0,ecr,c_e,ocr,rcr,tcr,bt,k0,acr,f_e,ncr,scr,Bc,lcr,m_e,icr,dcr,g_e,ccr,fcr,mcr,h_e,gcr,hcr,R0,pcr,vo,S0,_cr,p_e,ucr,bcr,Fn,vcr,__e,Tcr,Fcr,u_e,Ccr,Mcr,b_e,Ecr,ycr,wcr,ue,mF,v_e,Acr,Lcr,MO,Bcr,xcr,kcr,gF,T_e,Rcr,Scr,EO,Pcr,$cr,Icr,hF,F_e,Ncr,jcr,yO,Dcr,qcr,Gcr,pF,C_e,Ocr,Xcr,wO,Vcr,zcr,Wcr,_F,M_e,Qcr,Hcr,AO,Ucr,Jcr,Ycr,uF,E_e,Kcr,Zcr,LO,efr,ofr,rfr,bF,y_e,tfr,afr,BO,nfr,sfr,lfr,vF,w_e,ifr,dfr,xO,cfr,ffr,mfr,TF,A_e,gfr,hfr,kO,pfr,_fr,ufr,FF,L_e,bfr,vfr,RO,Tfr,Ffr,Cfr,B_e,Mfr,Efr,P0,GRe,xc,CF,x_e,$0,yfr,k_e,wfr,ORe,yr,I0,Afr,kc,Lfr,R_e,Bfr,xfr,S_e,kfr,Rfr,Sfr,N0,Pfr,P_e,$fr,Ifr,Nfr,vt,j0,jfr,$_e,Dfr,qfr,Rc,Gfr,I_e,Ofr,Xfr,N_e,Vfr,zfr,Wfr,j_e,Qfr,Hfr,D0,Ufr,To,q0,Jfr,D_e,Yfr,Kfr,Cn,Zfr,q_e,emr,omr,G_e,rmr,tmr,O_e,amr,nmr,smr,X,MF,X_e,lmr,imr,SO,dmr,cmr,fmr,EF,V_e,mmr,gmr,PO,hmr,pmr,_mr,yF,z_e,umr,bmr,$O,vmr,Tmr,Fmr,wF,W_e,Cmr,Mmr,IO,Emr,ymr,wmr,AF,Q_e,Amr,Lmr,NO,Bmr,xmr,kmr,LF,H_e,Rmr,Smr,jO,Pmr,$mr,Imr,BF,U_e,Nmr,jmr,DO,Dmr,qmr,Gmr,xF,J_e,Omr,Xmr,qO,Vmr,zmr,Wmr,kF,Y_e,Qmr,Hmr,GO,Umr,Jmr,Ymr,RF,K_e,Kmr,Zmr,OO,egr,ogr,rgr,SF,Z_e,tgr,agr,XO,ngr,sgr,lgr,PF,eue,igr,dgr,VO,cgr,fgr,mgr,$F,oue,ggr,hgr,zO,pgr,_gr,ugr,IF,rue,bgr,vgr,WO,Tgr,Fgr,Cgr,NF,tue,Mgr,Egr,QO,ygr,wgr,Agr,jF,aue,Lgr,Bgr,HO,xgr,kgr,Rgr,DF,nue,Sgr,Pgr,UO,$gr,Igr,Ngr,qF,sue,jgr,Dgr,JO,qgr,Ggr,Ogr,GF,lue,Xgr,Vgr,YO,zgr,Wgr,Qgr,OF,iue,Hgr,Ugr,KO,Jgr,Ygr,Kgr,XF,due,Zgr,ehr,ZO,ohr,rhr,thr,VF,cue,ahr,nhr,eX,shr,lhr,ihr,zF,fue,dhr,chr,oX,fhr,mhr,ghr,WF,mue,hhr,phr,rX,_hr,uhr,bhr,QF,gue,vhr,Thr,tX,Fhr,Chr,Mhr,HF,hue,Ehr,yhr,aX,whr,Ahr,Lhr,pue,Bhr,xhr,G0,XRe,Sc,UF,_ue,O0,khr,uue,Rhr,VRe,wr,X0,Shr,Pc,Phr,bue,$hr,Ihr,vue,Nhr,jhr,Dhr,V0,qhr,Tue,Ghr,Ohr,Xhr,Tt,z0,Vhr,Fue,zhr,Whr,$c,Qhr,Cue,Hhr,Uhr,Mue,Jhr,Yhr,Khr,Eue,Zhr,epr,W0,opr,Fo,Q0,rpr,yue,tpr,apr,Mn,npr,wue,spr,lpr,Aue,ipr,dpr,Lue,cpr,fpr,mpr,ae,JF,Bue,gpr,hpr,nX,ppr,_pr,upr,YF,xue,bpr,vpr,sX,Tpr,Fpr,Cpr,KF,kue,Mpr,Epr,lX,ypr,wpr,Apr,ZF,Rue,Lpr,Bpr,iX,xpr,kpr,Rpr,eC,Sue,Spr,Ppr,dX,$pr,Ipr,Npr,oC,Pue,jpr,Dpr,cX,qpr,Gpr,Opr,rC,$ue,Xpr,Vpr,fX,zpr,Wpr,Qpr,tC,Iue,Hpr,Upr,mX,Jpr,Ypr,Kpr,aC,Nue,Zpr,e_r,gX,o_r,r_r,t_r,nC,jue,a_r,n_r,hX,s_r,l_r,i_r,sC,Due,d_r,c_r,pX,f_r,m_r,g_r,lC,que,h_r,p_r,_X,__r,u_r,b_r,iC,Gue,v_r,T_r,uX,F_r,C_r,M_r,dC,Oue,E_r,y_r,bX,w_r,A_r,L_r,cC,Xue,B_r,x_r,vX,k_r,R_r,S_r,fC,Vue,P_r,$_r,TX,I_r,N_r,j_r,mC,zue,D_r,q_r,FX,G_r,O_r,X_r,Wue,V_r,z_r,H0,zRe,Ic,gC,Que,U0,W_r,Hue,Q_r,WRe,Ar,J0,H_r,Nc,U_r,Uue,J_r,Y_r,Jue,K_r,Z_r,eur,Y0,our,Yue,rur,tur,aur,Ft,K0,nur,Kue,sur,lur,jc,iur,Zue,dur,cur,e5e,fur,mur,gur,o5e,hur,pur,Z0,_ur,Co,eL,uur,r5e,bur,vur,En,Tur,t5e,Fur,Cur,a5e,Mur,Eur,n5e,yur,wur,Aur,s5e,hC,l5e,Lur,Bur,CX,xur,kur,Rur,i5e,Sur,Pur,oL,QRe,Dc,pC,d5e,rL,$ur,c5e,Iur,HRe,Lr,tL,Nur,qc,jur,f5e,Dur,qur,m5e,Gur,Our,Xur,aL,Vur,g5e,zur,Wur,Qur,Ct,nL,Hur,h5e,Uur,Jur,Gc,Yur,p5e,Kur,Zur,_5e,e5r,o5r,r5r,u5e,t5r,a5r,sL,n5r,Mo,lL,s5r,b5e,l5r,i5r,yn,d5r,v5e,c5r,f5r,T5e,m5r,g5r,F5e,h5r,p5r,_5r,Y,_C,C5e,u5r,b5r,MX,v5r,T5r,F5r,uC,M5e,C5r,M5r,EX,E5r,y5r,w5r,bC,E5e,A5r,L5r,yX,B5r,x5r,k5r,vC,y5e,R5r,S5r,wX,P5r,$5r,I5r,TC,w5e,N5r,j5r,AX,D5r,q5r,G5r,FC,A5e,O5r,X5r,LX,V5r,z5r,W5r,CC,L5e,Q5r,H5r,BX,U5r,J5r,Y5r,MC,B5e,K5r,Z5r,xX,e2r,o2r,r2r,EC,x5e,t2r,a2r,kX,n2r,s2r,l2r,yC,k5e,i2r,d2r,RX,c2r,f2r,m2r,wC,R5e,g2r,h2r,SX,p2r,_2r,u2r,AC,S5e,b2r,v2r,PX,T2r,F2r,C2r,LC,P5e,M2r,E2r,$X,y2r,w2r,A2r,BC,$5e,L2r,B2r,IX,x2r,k2r,R2r,xC,I5e,S2r,P2r,NX,$2r,I2r,N2r,kC,N5e,j2r,D2r,jX,q2r,G2r,O2r,RC,j5e,X2r,V2r,DX,z2r,W2r,Q2r,SC,D5e,H2r,U2r,qX,J2r,Y2r,K2r,PC,q5e,Z2r,e1r,GX,o1r,r1r,t1r,$C,G5e,a1r,n1r,OX,s1r,l1r,i1r,O5e,d1r,c1r,iL,URe,Oc,IC,X5e,dL,f1r,V5e,m1r,JRe,Br,cL,g1r,Xc,h1r,z5e,p1r,_1r,W5e,u1r,b1r,v1r,fL,T1r,Q5e,F1r,C1r,M1r,Mt,mL,E1r,H5e,y1r,w1r,Vc,A1r,U5e,L1r,B1r,J5e,x1r,k1r,R1r,Y5e,S1r,P1r,gL,$1r,Eo,hL,I1r,K5e,N1r,j1r,wn,D1r,Z5e,q1r,G1r,e2e,O1r,X1r,o2e,V1r,z1r,W1r,K,NC,r2e,Q1r,H1r,XX,U1r,J1r,Y1r,jC,t2e,K1r,Z1r,VX,ebr,obr,rbr,DC,a2e,tbr,abr,zX,nbr,sbr,lbr,qC,n2e,ibr,dbr,WX,cbr,fbr,mbr,GC,s2e,gbr,hbr,QX,pbr,_br,ubr,OC,l2e,bbr,vbr,HX,Tbr,Fbr,Cbr,XC,i2e,Mbr,Ebr,UX,ybr,wbr,Abr,VC,d2e,Lbr,Bbr,JX,xbr,kbr,Rbr,zC,c2e,Sbr,Pbr,YX,$br,Ibr,Nbr,WC,f2e,jbr,Dbr,KX,qbr,Gbr,Obr,QC,m2e,Xbr,Vbr,ZX,zbr,Wbr,Qbr,HC,g2e,Hbr,Ubr,eV,Jbr,Ybr,Kbr,UC,h2e,Zbr,evr,oV,ovr,rvr,tvr,JC,p2e,avr,nvr,rV,svr,lvr,ivr,YC,_2e,dvr,cvr,tV,fvr,mvr,gvr,KC,u2e,hvr,pvr,aV,_vr,uvr,bvr,ZC,b2e,vvr,Tvr,nV,Fvr,Cvr,Mvr,eM,v2e,Evr,yvr,sV,wvr,Avr,Lvr,oM,T2e,Bvr,xvr,lV,kvr,Rvr,Svr,rM,F2e,Pvr,$vr,iV,Ivr,Nvr,jvr,C2e,Dvr,qvr,pL,YRe,zc,tM,M2e,_L,Gvr,E2e,Ovr,KRe,xr,uL,Xvr,Wc,Vvr,y2e,zvr,Wvr,w2e,Qvr,Hvr,Uvr,bL,Jvr,A2e,Yvr,Kvr,Zvr,Et,vL,e6r,L2e,o6r,r6r,Qc,t6r,B2e,a6r,n6r,x2e,s6r,l6r,i6r,k2e,d6r,c6r,TL,f6r,yo,FL,m6r,R2e,g6r,h6r,An,p6r,S2e,_6r,u6r,P2e,b6r,v6r,$2e,T6r,F6r,C6r,I2e,aM,N2e,M6r,E6r,dV,y6r,w6r,A6r,j2e,L6r,B6r,CL,ZRe,Hc,nM,D2e,ML,x6r,q2e,k6r,eSe,kr,EL,R6r,Uc,S6r,G2e,P6r,$6r,O2e,I6r,N6r,j6r,yL,D6r,X2e,q6r,G6r,O6r,yt,wL,X6r,V2e,V6r,z6r,Jc,W6r,z2e,Q6r,H6r,W2e,U6r,J6r,Y6r,Q2e,K6r,Z6r,AL,eTr,wo,LL,oTr,H2e,rTr,tTr,Ln,aTr,U2e,nTr,sTr,J2e,lTr,iTr,Y2e,dTr,cTr,fTr,K2e,sM,Z2e,mTr,gTr,cV,hTr,pTr,_Tr,e1e,uTr,bTr,BL,oSe,Yc,lM,o1e,xL,vTr,r1e,TTr,rSe,Rr,kL,FTr,Kc,CTr,t1e,MTr,ETr,a1e,yTr,wTr,ATr,RL,LTr,n1e,BTr,xTr,kTr,wt,SL,RTr,s1e,STr,PTr,Zc,$Tr,l1e,ITr,NTr,i1e,jTr,DTr,qTr,d1e,GTr,OTr,PL,XTr,Ao,$L,VTr,c1e,zTr,WTr,Bn,QTr,f1e,HTr,UTr,m1e,JTr,YTr,g1e,KTr,ZTr,eFr,z,iM,h1e,oFr,rFr,fV,tFr,aFr,nFr,dM,p1e,sFr,lFr,mV,iFr,dFr,cFr,cM,_1e,fFr,mFr,gV,gFr,hFr,pFr,fM,u1e,_Fr,uFr,hV,bFr,vFr,TFr,mM,b1e,FFr,CFr,pV,MFr,EFr,yFr,gM,v1e,wFr,AFr,_V,LFr,BFr,xFr,hM,T1e,kFr,RFr,uV,SFr,PFr,$Fr,pM,F1e,IFr,NFr,bV,jFr,DFr,qFr,_M,C1e,GFr,OFr,vV,XFr,VFr,zFr,uM,M1e,WFr,QFr,TV,HFr,UFr,JFr,bM,E1e,YFr,KFr,FV,ZFr,eCr,oCr,vM,y1e,rCr,tCr,CV,aCr,nCr,sCr,TM,w1e,lCr,iCr,MV,dCr,cCr,fCr,FM,A1e,mCr,gCr,EV,hCr,pCr,_Cr,CM,L1e,uCr,bCr,yV,vCr,TCr,FCr,MM,B1e,CCr,MCr,wV,ECr,yCr,wCr,EM,x1e,ACr,LCr,AV,BCr,xCr,kCr,yM,k1e,RCr,SCr,LV,PCr,$Cr,ICr,wM,R1e,NCr,jCr,BV,DCr,qCr,GCr,AM,S1e,OCr,XCr,xV,VCr,zCr,WCr,LM,P1e,QCr,HCr,kV,UCr,JCr,YCr,BM,$1e,KCr,ZCr,RV,eMr,oMr,rMr,xM,I1e,tMr,aMr,SV,nMr,sMr,lMr,kM,N1e,iMr,dMr,PV,cMr,fMr,mMr,RM,j1e,gMr,hMr,$V,pMr,_Mr,uMr,D1e,bMr,vMr,IL,tSe,ef,SM,q1e,NL,TMr,G1e,FMr,aSe,Sr,jL,CMr,of,MMr,O1e,EMr,yMr,X1e,wMr,AMr,LMr,DL,BMr,V1e,xMr,kMr,RMr,At,qL,SMr,z1e,PMr,$Mr,rf,IMr,W1e,NMr,jMr,Q1e,DMr,qMr,GMr,H1e,OMr,XMr,GL,VMr,Lo,OL,zMr,U1e,WMr,QMr,xn,HMr,J1e,UMr,JMr,Y1e,YMr,KMr,K1e,ZMr,e4r,o4r,ca,PM,Z1e,r4r,t4r,IV,a4r,n4r,s4r,$M,ebe,l4r,i4r,NV,d4r,c4r,f4r,IM,obe,m4r,g4r,jV,h4r,p4r,_4r,NM,rbe,u4r,b4r,DV,v4r,T4r,F4r,jM,tbe,C4r,M4r,qV,E4r,y4r,w4r,abe,A4r,L4r,XL,nSe,tf,DM,nbe,VL,B4r,sbe,x4r,sSe,Pr,zL,k4r,af,R4r,lbe,S4r,P4r,ibe,$4r,I4r,N4r,WL,j4r,dbe,D4r,q4r,G4r,Lt,QL,O4r,cbe,X4r,V4r,nf,z4r,fbe,W4r,Q4r,mbe,H4r,U4r,J4r,gbe,Y4r,K4r,HL,Z4r,Bo,UL,eEr,hbe,oEr,rEr,kn,tEr,pbe,aEr,nEr,_be,sEr,lEr,ube,iEr,dEr,cEr,fe,qM,bbe,fEr,mEr,GV,gEr,hEr,pEr,GM,vbe,_Er,uEr,OV,bEr,vEr,TEr,OM,Tbe,FEr,CEr,XV,MEr,EEr,yEr,XM,Fbe,wEr,AEr,VV,LEr,BEr,xEr,VM,Cbe,kEr,REr,zV,SEr,PEr,$Er,zM,Mbe,IEr,NEr,WV,jEr,DEr,qEr,WM,Ebe,GEr,OEr,QV,XEr,VEr,zEr,QM,ybe,WEr,QEr,HV,HEr,UEr,JEr,HM,wbe,YEr,KEr,UV,ZEr,e3r,o3r,UM,Abe,r3r,t3r,JV,a3r,n3r,s3r,JM,Lbe,l3r,i3r,YV,d3r,c3r,f3r,YM,Bbe,m3r,g3r,KV,h3r,p3r,_3r,xbe,u3r,b3r,JL,lSe,sf,KM,kbe,YL,v3r,Rbe,T3r,iSe,$r,KL,F3r,lf,C3r,Sbe,M3r,E3r,Pbe,y3r,w3r,A3r,ZL,L3r,$be,B3r,x3r,k3r,Bt,e7,R3r,Ibe,S3r,P3r,df,$3r,Nbe,I3r,N3r,jbe,j3r,D3r,q3r,Dbe,G3r,O3r,o7,X3r,xo,r7,V3r,qbe,z3r,W3r,Rn,Q3r,Gbe,H3r,U3r,Obe,J3r,Y3r,Xbe,K3r,Z3r,eyr,be,ZM,Vbe,oyr,ryr,ZV,tyr,ayr,nyr,e4,zbe,syr,lyr,ez,iyr,dyr,cyr,o4,Wbe,fyr,myr,oz,gyr,hyr,pyr,r4,Qbe,_yr,uyr,rz,byr,vyr,Tyr,t4,Hbe,Fyr,Cyr,tz,Myr,Eyr,yyr,a4,Ube,wyr,Ayr,az,Lyr,Byr,xyr,n4,Jbe,kyr,Ryr,nz,Syr,Pyr,$yr,s4,Ybe,Iyr,Nyr,sz,jyr,Dyr,qyr,l4,Kbe,Gyr,Oyr,lz,Xyr,Vyr,zyr,i4,Zbe,Wyr,Qyr,iz,Hyr,Uyr,Jyr,eve,Yyr,Kyr,t7,dSe,cf,d4,ove,a7,Zyr,rve,ewr,cSe,Ir,n7,owr,ff,rwr,tve,twr,awr,ave,nwr,swr,lwr,s7,iwr,nve,dwr,cwr,fwr,xt,l7,mwr,sve,gwr,hwr,mf,pwr,lve,_wr,uwr,ive,bwr,vwr,Twr,dve,Fwr,Cwr,i7,Mwr,ko,d7,Ewr,cve,ywr,wwr,Sn,Awr,fve,Lwr,Bwr,mve,xwr,kwr,gve,Rwr,Swr,Pwr,Me,c4,hve,$wr,Iwr,dz,Nwr,jwr,Dwr,f4,pve,qwr,Gwr,cz,Owr,Xwr,Vwr,m4,_ve,zwr,Wwr,fz,Qwr,Hwr,Uwr,g4,uve,Jwr,Ywr,mz,Kwr,Zwr,eAr,h4,bve,oAr,rAr,gz,tAr,aAr,nAr,p4,vve,sAr,lAr,hz,iAr,dAr,cAr,_4,Tve,fAr,mAr,pz,gAr,hAr,pAr,u4,Fve,_Ar,uAr,_z,bAr,vAr,TAr,b4,Cve,FAr,CAr,uz,MAr,EAr,yAr,Mve,wAr,AAr,c7,fSe,gf,v4,Eve,f7,LAr,yve,BAr,mSe,Nr,m7,xAr,hf,kAr,wve,RAr,SAr,Ave,PAr,$Ar,IAr,g7,NAr,Lve,jAr,DAr,qAr,kt,h7,GAr,Bve,OAr,XAr,pf,VAr,xve,zAr,WAr,kve,QAr,HAr,UAr,Rve,JAr,YAr,p7,KAr,Ro,_7,ZAr,Sve,e0r,o0r,Pn,r0r,Pve,t0r,a0r,$ve,n0r,s0r,Ive,l0r,i0r,d0r,ve,T4,Nve,c0r,f0r,bz,m0r,g0r,h0r,F4,jve,p0r,_0r,vz,u0r,b0r,v0r,C4,Dve,T0r,F0r,Tz,C0r,M0r,E0r,M4,qve,y0r,w0r,Fz,A0r,L0r,B0r,E4,Gve,x0r,k0r,Cz,R0r,S0r,P0r,y4,Ove,$0r,I0r,Mz,N0r,j0r,D0r,w4,Xve,q0r,G0r,Ez,O0r,X0r,V0r,A4,Vve,z0r,W0r,yz,Q0r,H0r,U0r,L4,zve,J0r,Y0r,wz,K0r,Z0r,eLr,B4,Wve,oLr,rLr,Az,tLr,aLr,nLr,Qve,sLr,lLr,u7,gSe,_f,x4,Hve,b7,iLr,Uve,dLr,hSe,jr,v7,cLr,uf,fLr,Jve,mLr,gLr,Yve,hLr,pLr,_Lr,T7,uLr,Kve,bLr,vLr,TLr,Rt,F7,FLr,Zve,CLr,MLr,bf,ELr,e6e,yLr,wLr,o6e,ALr,LLr,BLr,r6e,xLr,kLr,C7,RLr,So,M7,SLr,t6e,PLr,$Lr,$n,ILr,a6e,NLr,jLr,n6e,DLr,qLr,s6e,GLr,OLr,XLr,Te,k4,l6e,VLr,zLr,Lz,WLr,QLr,HLr,R4,i6e,ULr,JLr,Bz,YLr,KLr,ZLr,S4,d6e,e7r,o7r,xz,r7r,t7r,a7r,P4,c6e,n7r,s7r,kz,l7r,i7r,d7r,$4,f6e,c7r,f7r,Rz,m7r,g7r,h7r,I4,m6e,p7r,_7r,Sz,u7r,b7r,v7r,N4,g6e,T7r,F7r,Pz,C7r,M7r,E7r,j4,h6e,y7r,w7r,$z,A7r,L7r,B7r,D4,p6e,x7r,k7r,Iz,R7r,S7r,P7r,q4,_6e,$7r,I7r,Nz,N7r,j7r,D7r,u6e,q7r,G7r,E7,pSe,vf,G4,b6e,y7,O7r,v6e,X7r,_Se,Dr,w7,V7r,Tf,z7r,T6e,W7r,Q7r,F6e,H7r,U7r,J7r,A7,Y7r,C6e,K7r,Z7r,e8r,St,L7,o8r,M6e,r8r,t8r,Ff,a8r,E6e,n8r,s8r,y6e,l8r,i8r,d8r,w6e,c8r,f8r,B7,m8r,Po,x7,g8r,A6e,h8r,p8r,In,_8r,L6e,u8r,b8r,B6e,v8r,T8r,x6e,F8r,C8r,M8r,Se,O4,k6e,E8r,y8r,jz,w8r,A8r,L8r,X4,R6e,B8r,x8r,Dz,k8r,R8r,S8r,V4,S6e,P8r,$8r,qz,I8r,N8r,j8r,z4,P6e,D8r,q8r,Gz,G8r,O8r,X8r,W4,$6e,V8r,z8r,Oz,W8r,Q8r,H8r,Q4,I6e,U8r,J8r,Xz,Y8r,K8r,Z8r,H4,N6e,e9r,o9r,Vz,r9r,t9r,a9r,U4,j6e,n9r,s9r,zz,l9r,i9r,d9r,D6e,c9r,f9r,k7,uSe,Cf,J4,q6e,R7,m9r,G6e,g9r,bSe,qr,S7,h9r,Mf,p9r,O6e,_9r,u9r,X6e,b9r,v9r,T9r,P7,F9r,V6e,C9r,M9r,E9r,Pt,$7,y9r,z6e,w9r,A9r,Ef,L9r,W6e,B9r,x9r,Q6e,k9r,R9r,S9r,H6e,P9r,$9r,I7,I9r,$o,N7,N9r,U6e,j9r,D9r,Nn,q9r,J6e,G9r,O9r,Y6e,X9r,V9r,K6e,z9r,W9r,Q9r,Pe,Y4,Z6e,H9r,U9r,Wz,J9r,Y9r,K9r,K4,eTe,Z9r,eBr,Qz,oBr,rBr,tBr,Z4,oTe,aBr,nBr,Hz,sBr,lBr,iBr,eE,rTe,dBr,cBr,Uz,fBr,mBr,gBr,oE,tTe,hBr,pBr,Jz,_Br,uBr,bBr,rE,aTe,vBr,TBr,Yz,FBr,CBr,MBr,tE,nTe,EBr,yBr,Kz,wBr,ABr,LBr,aE,sTe,BBr,xBr,Zz,kBr,RBr,SBr,lTe,PBr,$Br,j7,vSe,yf,nE,iTe,D7,IBr,dTe,NBr,TSe,Gr,q7,jBr,wf,DBr,cTe,qBr,GBr,fTe,OBr,XBr,VBr,G7,zBr,mTe,WBr,QBr,HBr,$t,O7,UBr,gTe,JBr,YBr,Af,KBr,hTe,ZBr,exr,pTe,oxr,rxr,txr,_Te,axr,nxr,X7,sxr,Io,V7,lxr,uTe,ixr,dxr,jn,cxr,bTe,fxr,mxr,vTe,gxr,hxr,TTe,pxr,_xr,uxr,FTe,sE,CTe,bxr,vxr,eW,Txr,Fxr,Cxr,MTe,Mxr,Exr,z7,FSe,Lf,lE,ETe,W7,yxr,yTe,wxr,CSe,Or,Q7,Axr,Bf,Lxr,wTe,Bxr,xxr,ATe,kxr,Rxr,Sxr,H7,Pxr,LTe,$xr,Ixr,Nxr,It,U7,jxr,BTe,Dxr,qxr,xf,Gxr,xTe,Oxr,Xxr,kTe,Vxr,zxr,Wxr,RTe,Qxr,Hxr,J7,Uxr,No,Y7,Jxr,STe,Yxr,Kxr,Dn,Zxr,PTe,ekr,okr,$Te,rkr,tkr,ITe,akr,nkr,skr,K7,iE,NTe,lkr,ikr,oW,dkr,ckr,fkr,dE,jTe,mkr,gkr,rW,hkr,pkr,_kr,DTe,ukr,bkr,Z7,MSe,kf,cE,qTe,e8,vkr,GTe,Tkr,ESe,Xr,o8,Fkr,Rf,Ckr,OTe,Mkr,Ekr,XTe,ykr,wkr,Akr,r8,Lkr,VTe,Bkr,xkr,kkr,Nt,t8,Rkr,zTe,Skr,Pkr,Sf,$kr,WTe,Ikr,Nkr,QTe,jkr,Dkr,qkr,HTe,Gkr,Okr,a8,Xkr,jo,n8,Vkr,UTe,zkr,Wkr,qn,Qkr,JTe,Hkr,Ukr,YTe,Jkr,Ykr,KTe,Kkr,Zkr,eRr,ZTe,fE,eFe,oRr,rRr,tW,tRr,aRr,nRr,oFe,sRr,lRr,s8,ySe;return me=new V({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),p3=new V({}),_3=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new iRr({props:{warning:!0,$$slots:{default:[C4t]},$$scope:{ctx:$f}}}),u3=new V({}),b3=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/configuration_auto.py#L538"}}),F3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/configuration_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),C3=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),M3=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/configuration_auto.py#L683",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),E3=new V({}),y3=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/tokenization_auto.py#L351"}}),L3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16255/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),B3=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),x3=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),k3=new V({}),R3=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),$3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16255/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),xh=new iRr({props:{$$slots:{default:[M4t]},$$scope:{ctx:$f}}}),I3=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),N3=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),j3=new V({}),D3=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/processing_auto.py#L70"}}),O3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Gh=new iRr({props:{$$slots:{default:[E4t]},$$scope:{ctx:$f}}}),X3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),V3=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),z3=new V({}),W3=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L705"}}),H3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),U3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),J3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new V({}),Z3=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L712"}}),oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),ty=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ny=new V({}),sy=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L727"}}),iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new V({}),gy=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L734"}}),py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),uy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),by=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new V({}),Ty=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L741"}}),Cy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Ey=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new V({}),Ay=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L750"}}),By=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new V({}),Py=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L784"}}),Iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new V({}),Gy=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L791"}}),Xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new V({}),Hy=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L777"}}),Jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new V({}),ow=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L759"}}),tw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new V({}),iw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L766"}}),cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new V({}),pw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L800"}}),uw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),vw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new V({}),Cw=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L839"}}),Ew=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new V({}),Bw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L846"}}),kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new V({}),Iw=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L869"}}),jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new V({}),Xw=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L853"}}),zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new V({}),Jw=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L860"}}),Kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),eA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new V({}),aA=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L878"}}),sA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),iA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new V({}),fA=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L885"}}),gA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),pA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new V({}),bA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L832"}}),TA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),CA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new V({}),yA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L807"}}),AA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),BA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new V({}),RA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L814"}}),PA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),IA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new V({}),qA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_auto.py#L823"}}),OA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),VA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new V({}),QA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),UA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),YA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new V({}),e0=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),r0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),a0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new V({}),l0=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),d0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),f0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new V({}),h0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),_0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),b0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new V({}),C0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),E0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),y0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),w0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new V({}),B0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),k0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),R0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),S0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$0=new V({}),I0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),j0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),D0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),q0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O0=new V({}),X0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),z0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),W0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Q0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new V({}),J0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),K0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Z0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),eL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new V({}),tL=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),nL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),sL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),lL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new V({}),cL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),mL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),hL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new V({}),uL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),vL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),TL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),FL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ML=new V({}),EL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),wL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),AL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),LL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xL=new V({}),kL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),SL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),PL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),$L=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NL=new V({}),jL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),qL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),GL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),OL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VL=new V({}),zL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),QL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),HL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),UL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YL=new V({}),KL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),e7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),o7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),r7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a7=new V({}),n7=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),l7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),i7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),d7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f7=new V({}),m7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),h7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),p7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),_7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b7=new V({}),v7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),F7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),C7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),M7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y7=new V({}),w7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),L7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),B7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),x7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R7=new V({}),S7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),$7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),I7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),N7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D7=new V({}),q7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),O7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),X7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),V7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W7=new V({}),Q7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),U7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),J7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),Y7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e8=new V({}),o8=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),t8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),a8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),n8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(me.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),If=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),f3=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),Di=o("Instantiating one of "),Gn=a("a"),m3=o("AutoConfig"),On=o(", "),Xn=a("a"),g3=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),h3=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),a9=o("will create a model that is an instance of "),Oi=a("a"),n9=o("BertModel"),s9=o("."),zo=l(),Ga=a("p"),l9=o("There is one class of "),Df=a("code"),i9=o("AutoModel"),j$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Eke=l(),Xi=a("h2"),qf=a("a"),JQ=a("span"),f(p3.$$.fragment),D$e=l(),YQ=a("span"),q$e=o("Extending the Auto Classes"),yke=l(),zn=a("p"),G$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),KQ=a("code"),O$e=o("NewModel"),X$e=o(", make sure you have a "),ZQ=a("code"),V$e=o("NewModelConfig"),z$e=o(` then you can add those to the auto
classes like this:`),wke=l(),f(_3.$$.fragment),Ake=l(),d9=a("p"),W$e=o("You will then be able to use the auto classes like you would usually do!"),Lke=l(),f(Gf.$$.fragment),Bke=l(),Vi=a("h2"),Of=a("a"),eH=a("span"),f(u3.$$.fragment),Q$e=l(),oH=a("span"),H$e=o("AutoConfig"),xke=l(),Wo=a("div"),f(b3.$$.fragment),U$e=l(),v3=a("p"),J$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),c9=a("a"),Y$e=o("from_pretrained()"),K$e=o(" class method."),Z$e=l(),T3=a("p"),eIe=o("This class cannot be instantiated directly using "),rH=a("code"),oIe=o("__init__()"),rIe=o(" (throws an error)."),tIe=l(),mo=a("div"),f(F3.$$.fragment),aIe=l(),tH=a("p"),nIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),sIe=l(),zi=a("p"),lIe=o("The configuration class to instantiate is selected based on the "),aH=a("code"),iIe=o("model_type"),dIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nH=a("code"),cIe=o("pretrained_model_name_or_path"),fIe=o(":"),mIe=l(),v=a("ul"),Xf=a("li"),sH=a("strong"),gIe=o("albert"),hIe=o(" \u2014 "),f9=a("a"),pIe=o("AlbertConfig"),_Ie=o(" (ALBERT model)"),uIe=l(),Vf=a("li"),lH=a("strong"),bIe=o("bart"),vIe=o(" \u2014 "),m9=a("a"),TIe=o("BartConfig"),FIe=o(" (BART model)"),CIe=l(),zf=a("li"),iH=a("strong"),MIe=o("beit"),EIe=o(" \u2014 "),g9=a("a"),yIe=o("BeitConfig"),wIe=o(" (BEiT model)"),AIe=l(),Wf=a("li"),dH=a("strong"),LIe=o("bert"),BIe=o(" \u2014 "),h9=a("a"),xIe=o("BertConfig"),kIe=o(" (BERT model)"),RIe=l(),Qf=a("li"),cH=a("strong"),SIe=o("bert-generation"),PIe=o(" \u2014 "),p9=a("a"),$Ie=o("BertGenerationConfig"),IIe=o(" (Bert Generation model)"),NIe=l(),Hf=a("li"),fH=a("strong"),jIe=o("big_bird"),DIe=o(" \u2014 "),_9=a("a"),qIe=o("BigBirdConfig"),GIe=o(" (BigBird model)"),OIe=l(),Uf=a("li"),mH=a("strong"),XIe=o("bigbird_pegasus"),VIe=o(" \u2014 "),u9=a("a"),zIe=o("BigBirdPegasusConfig"),WIe=o(" (BigBirdPegasus model)"),QIe=l(),Jf=a("li"),gH=a("strong"),HIe=o("blenderbot"),UIe=o(" \u2014 "),b9=a("a"),JIe=o("BlenderbotConfig"),YIe=o(" (Blenderbot model)"),KIe=l(),Yf=a("li"),hH=a("strong"),ZIe=o("blenderbot-small"),eNe=o(" \u2014 "),v9=a("a"),oNe=o("BlenderbotSmallConfig"),rNe=o(" (BlenderbotSmall model)"),tNe=l(),Kf=a("li"),pH=a("strong"),aNe=o("camembert"),nNe=o(" \u2014 "),T9=a("a"),sNe=o("CamembertConfig"),lNe=o(" (CamemBERT model)"),iNe=l(),Zf=a("li"),_H=a("strong"),dNe=o("canine"),cNe=o(" \u2014 "),F9=a("a"),fNe=o("CanineConfig"),mNe=o(" (Canine model)"),gNe=l(),em=a("li"),uH=a("strong"),hNe=o("clip"),pNe=o(" \u2014 "),C9=a("a"),_Ne=o("CLIPConfig"),uNe=o(" (CLIP model)"),bNe=l(),om=a("li"),bH=a("strong"),vNe=o("convbert"),TNe=o(" \u2014 "),M9=a("a"),FNe=o("ConvBertConfig"),CNe=o(" (ConvBERT model)"),MNe=l(),rm=a("li"),vH=a("strong"),ENe=o("convnext"),yNe=o(" \u2014 "),E9=a("a"),wNe=o("ConvNextConfig"),ANe=o(" (ConvNext model)"),LNe=l(),tm=a("li"),TH=a("strong"),BNe=o("ctrl"),xNe=o(" \u2014 "),y9=a("a"),kNe=o("CTRLConfig"),RNe=o(" (CTRL model)"),SNe=l(),am=a("li"),FH=a("strong"),PNe=o("data2vec-audio"),$Ne=o(" \u2014 "),w9=a("a"),INe=o("Data2VecAudioConfig"),NNe=o(" (Data2VecAudio model)"),jNe=l(),nm=a("li"),CH=a("strong"),DNe=o("data2vec-text"),qNe=o(" \u2014 "),A9=a("a"),GNe=o("Data2VecTextConfig"),ONe=o(" (Data2VecText model)"),XNe=l(),sm=a("li"),MH=a("strong"),VNe=o("deberta"),zNe=o(" \u2014 "),L9=a("a"),WNe=o("DebertaConfig"),QNe=o(" (DeBERTa model)"),HNe=l(),lm=a("li"),EH=a("strong"),UNe=o("deberta-v2"),JNe=o(" \u2014 "),B9=a("a"),YNe=o("DebertaV2Config"),KNe=o(" (DeBERTa-v2 model)"),ZNe=l(),im=a("li"),yH=a("strong"),eje=o("decision_transformer"),oje=o(" \u2014 "),x9=a("a"),rje=o("DecisionTransformerConfig"),tje=o(" (Decision Transformer model)"),aje=l(),dm=a("li"),wH=a("strong"),nje=o("deit"),sje=o(" \u2014 "),k9=a("a"),lje=o("DeiTConfig"),ije=o(" (DeiT model)"),dje=l(),cm=a("li"),AH=a("strong"),cje=o("detr"),fje=o(" \u2014 "),R9=a("a"),mje=o("DetrConfig"),gje=o(" (DETR model)"),hje=l(),fm=a("li"),LH=a("strong"),pje=o("distilbert"),_je=o(" \u2014 "),S9=a("a"),uje=o("DistilBertConfig"),bje=o(" (DistilBERT model)"),vje=l(),mm=a("li"),BH=a("strong"),Tje=o("dpr"),Fje=o(" \u2014 "),P9=a("a"),Cje=o("DPRConfig"),Mje=o(" (DPR model)"),Eje=l(),gm=a("li"),xH=a("strong"),yje=o("electra"),wje=o(" \u2014 "),$9=a("a"),Aje=o("ElectraConfig"),Lje=o(" (ELECTRA model)"),Bje=l(),hm=a("li"),kH=a("strong"),xje=o("encoder-decoder"),kje=o(" \u2014 "),I9=a("a"),Rje=o("EncoderDecoderConfig"),Sje=o(" (Encoder decoder model)"),Pje=l(),pm=a("li"),RH=a("strong"),$je=o("flaubert"),Ije=o(" \u2014 "),N9=a("a"),Nje=o("FlaubertConfig"),jje=o(" (FlauBERT model)"),Dje=l(),_m=a("li"),SH=a("strong"),qje=o("fnet"),Gje=o(" \u2014 "),j9=a("a"),Oje=o("FNetConfig"),Xje=o(" (FNet model)"),Vje=l(),um=a("li"),PH=a("strong"),zje=o("fsmt"),Wje=o(" \u2014 "),D9=a("a"),Qje=o("FSMTConfig"),Hje=o(" (FairSeq Machine-Translation model)"),Uje=l(),bm=a("li"),$H=a("strong"),Jje=o("funnel"),Yje=o(" \u2014 "),q9=a("a"),Kje=o("FunnelConfig"),Zje=o(" (Funnel Transformer model)"),eDe=l(),vm=a("li"),IH=a("strong"),oDe=o("glpn"),rDe=o(" \u2014 "),G9=a("a"),tDe=o("GLPNConfig"),aDe=o(" (GLPN model)"),nDe=l(),Tm=a("li"),NH=a("strong"),sDe=o("gpt2"),lDe=o(" \u2014 "),O9=a("a"),iDe=o("GPT2Config"),dDe=o(" (OpenAI GPT-2 model)"),cDe=l(),Fm=a("li"),jH=a("strong"),fDe=o("gpt_neo"),mDe=o(" \u2014 "),X9=a("a"),gDe=o("GPTNeoConfig"),hDe=o(" (GPT Neo model)"),pDe=l(),Cm=a("li"),DH=a("strong"),_De=o("gptj"),uDe=o(" \u2014 "),V9=a("a"),bDe=o("GPTJConfig"),vDe=o(" (GPT-J model)"),TDe=l(),Mm=a("li"),qH=a("strong"),FDe=o("hubert"),CDe=o(" \u2014 "),z9=a("a"),MDe=o("HubertConfig"),EDe=o(" (Hubert model)"),yDe=l(),Em=a("li"),GH=a("strong"),wDe=o("ibert"),ADe=o(" \u2014 "),W9=a("a"),LDe=o("IBertConfig"),BDe=o(" (I-BERT model)"),xDe=l(),ym=a("li"),OH=a("strong"),kDe=o("imagegpt"),RDe=o(" \u2014 "),Q9=a("a"),SDe=o("ImageGPTConfig"),PDe=o(" (ImageGPT model)"),$De=l(),wm=a("li"),XH=a("strong"),IDe=o("layoutlm"),NDe=o(" \u2014 "),H9=a("a"),jDe=o("LayoutLMConfig"),DDe=o(" (LayoutLM model)"),qDe=l(),Am=a("li"),VH=a("strong"),GDe=o("layoutlmv2"),ODe=o(" \u2014 "),U9=a("a"),XDe=o("LayoutLMv2Config"),VDe=o(" (LayoutLMv2 model)"),zDe=l(),Lm=a("li"),zH=a("strong"),WDe=o("led"),QDe=o(" \u2014 "),J9=a("a"),HDe=o("LEDConfig"),UDe=o(" (LED model)"),JDe=l(),Bm=a("li"),WH=a("strong"),YDe=o("longformer"),KDe=o(" \u2014 "),Y9=a("a"),ZDe=o("LongformerConfig"),eqe=o(" (Longformer model)"),oqe=l(),xm=a("li"),QH=a("strong"),rqe=o("luke"),tqe=o(" \u2014 "),K9=a("a"),aqe=o("LukeConfig"),nqe=o(" (LUKE model)"),sqe=l(),km=a("li"),HH=a("strong"),lqe=o("lxmert"),iqe=o(" \u2014 "),Z9=a("a"),dqe=o("LxmertConfig"),cqe=o(" (LXMERT model)"),fqe=l(),Rm=a("li"),UH=a("strong"),mqe=o("m2m_100"),gqe=o(" \u2014 "),eB=a("a"),hqe=o("M2M100Config"),pqe=o(" (M2M100 model)"),_qe=l(),Sm=a("li"),JH=a("strong"),uqe=o("marian"),bqe=o(" \u2014 "),oB=a("a"),vqe=o("MarianConfig"),Tqe=o(" (Marian model)"),Fqe=l(),Pm=a("li"),YH=a("strong"),Cqe=o("maskformer"),Mqe=o(" \u2014 "),rB=a("a"),Eqe=o("MaskFormerConfig"),yqe=o(" (MaskFormer model)"),wqe=l(),$m=a("li"),KH=a("strong"),Aqe=o("mbart"),Lqe=o(" \u2014 "),tB=a("a"),Bqe=o("MBartConfig"),xqe=o(" (mBART model)"),kqe=l(),Im=a("li"),ZH=a("strong"),Rqe=o("megatron-bert"),Sqe=o(" \u2014 "),aB=a("a"),Pqe=o("MegatronBertConfig"),$qe=o(" (MegatronBert model)"),Iqe=l(),Nm=a("li"),eU=a("strong"),Nqe=o("mobilebert"),jqe=o(" \u2014 "),nB=a("a"),Dqe=o("MobileBertConfig"),qqe=o(" (MobileBERT model)"),Gqe=l(),jm=a("li"),oU=a("strong"),Oqe=o("mpnet"),Xqe=o(" \u2014 "),sB=a("a"),Vqe=o("MPNetConfig"),zqe=o(" (MPNet model)"),Wqe=l(),Dm=a("li"),rU=a("strong"),Qqe=o("mt5"),Hqe=o(" \u2014 "),lB=a("a"),Uqe=o("MT5Config"),Jqe=o(" (mT5 model)"),Yqe=l(),qm=a("li"),tU=a("strong"),Kqe=o("nystromformer"),Zqe=o(" \u2014 "),iB=a("a"),eGe=o("NystromformerConfig"),oGe=o(" (Nystromformer model)"),rGe=l(),Gm=a("li"),aU=a("strong"),tGe=o("openai-gpt"),aGe=o(" \u2014 "),dB=a("a"),nGe=o("OpenAIGPTConfig"),sGe=o(" (OpenAI GPT model)"),lGe=l(),Om=a("li"),nU=a("strong"),iGe=o("pegasus"),dGe=o(" \u2014 "),cB=a("a"),cGe=o("PegasusConfig"),fGe=o(" (Pegasus model)"),mGe=l(),Xm=a("li"),sU=a("strong"),gGe=o("perceiver"),hGe=o(" \u2014 "),fB=a("a"),pGe=o("PerceiverConfig"),_Ge=o(" (Perceiver model)"),uGe=l(),Vm=a("li"),lU=a("strong"),bGe=o("plbart"),vGe=o(" \u2014 "),mB=a("a"),TGe=o("PLBartConfig"),FGe=o(" (PLBart model)"),CGe=l(),zm=a("li"),iU=a("strong"),MGe=o("poolformer"),EGe=o(" \u2014 "),gB=a("a"),yGe=o("PoolFormerConfig"),wGe=o(" (PoolFormer model)"),AGe=l(),Wm=a("li"),dU=a("strong"),LGe=o("prophetnet"),BGe=o(" \u2014 "),hB=a("a"),xGe=o("ProphetNetConfig"),kGe=o(" (ProphetNet model)"),RGe=l(),Qm=a("li"),cU=a("strong"),SGe=o("qdqbert"),PGe=o(" \u2014 "),pB=a("a"),$Ge=o("QDQBertConfig"),IGe=o(" (QDQBert model)"),NGe=l(),Hm=a("li"),fU=a("strong"),jGe=o("rag"),DGe=o(" \u2014 "),_B=a("a"),qGe=o("RagConfig"),GGe=o(" (RAG model)"),OGe=l(),Um=a("li"),mU=a("strong"),XGe=o("realm"),VGe=o(" \u2014 "),uB=a("a"),zGe=o("RealmConfig"),WGe=o(" (Realm model)"),QGe=l(),Jm=a("li"),gU=a("strong"),HGe=o("reformer"),UGe=o(" \u2014 "),bB=a("a"),JGe=o("ReformerConfig"),YGe=o(" (Reformer model)"),KGe=l(),Ym=a("li"),hU=a("strong"),ZGe=o("rembert"),eOe=o(" \u2014 "),vB=a("a"),oOe=o("RemBertConfig"),rOe=o(" (RemBERT model)"),tOe=l(),Km=a("li"),pU=a("strong"),aOe=o("resnet"),nOe=o(" \u2014 "),TB=a("a"),sOe=o("ResNetConfig"),lOe=o(" (ResNet model)"),iOe=l(),Zm=a("li"),_U=a("strong"),dOe=o("retribert"),cOe=o(" \u2014 "),FB=a("a"),fOe=o("RetriBertConfig"),mOe=o(" (RetriBERT model)"),gOe=l(),eg=a("li"),uU=a("strong"),hOe=o("roberta"),pOe=o(" \u2014 "),CB=a("a"),_Oe=o("RobertaConfig"),uOe=o(" (RoBERTa model)"),bOe=l(),og=a("li"),bU=a("strong"),vOe=o("roformer"),TOe=o(" \u2014 "),MB=a("a"),FOe=o("RoFormerConfig"),COe=o(" (RoFormer model)"),MOe=l(),rg=a("li"),vU=a("strong"),EOe=o("segformer"),yOe=o(" \u2014 "),EB=a("a"),wOe=o("SegformerConfig"),AOe=o(" (SegFormer model)"),LOe=l(),tg=a("li"),TU=a("strong"),BOe=o("sew"),xOe=o(" \u2014 "),yB=a("a"),kOe=o("SEWConfig"),ROe=o(" (SEW model)"),SOe=l(),ag=a("li"),FU=a("strong"),POe=o("sew-d"),$Oe=o(" \u2014 "),wB=a("a"),IOe=o("SEWDConfig"),NOe=o(" (SEW-D model)"),jOe=l(),ng=a("li"),CU=a("strong"),DOe=o("speech-encoder-decoder"),qOe=o(" \u2014 "),AB=a("a"),GOe=o("SpeechEncoderDecoderConfig"),OOe=o(" (Speech Encoder decoder model)"),XOe=l(),sg=a("li"),MU=a("strong"),VOe=o("speech_to_text"),zOe=o(" \u2014 "),LB=a("a"),WOe=o("Speech2TextConfig"),QOe=o(" (Speech2Text model)"),HOe=l(),lg=a("li"),EU=a("strong"),UOe=o("speech_to_text_2"),JOe=o(" \u2014 "),BB=a("a"),YOe=o("Speech2Text2Config"),KOe=o(" (Speech2Text2 model)"),ZOe=l(),ig=a("li"),yU=a("strong"),eXe=o("splinter"),oXe=o(" \u2014 "),xB=a("a"),rXe=o("SplinterConfig"),tXe=o(" (Splinter model)"),aXe=l(),dg=a("li"),wU=a("strong"),nXe=o("squeezebert"),sXe=o(" \u2014 "),kB=a("a"),lXe=o("SqueezeBertConfig"),iXe=o(" (SqueezeBERT model)"),dXe=l(),cg=a("li"),AU=a("strong"),cXe=o("swin"),fXe=o(" \u2014 "),RB=a("a"),mXe=o("SwinConfig"),gXe=o(" (Swin model)"),hXe=l(),fg=a("li"),LU=a("strong"),pXe=o("t5"),_Xe=o(" \u2014 "),SB=a("a"),uXe=o("T5Config"),bXe=o(" (T5 model)"),vXe=l(),mg=a("li"),BU=a("strong"),TXe=o("tapas"),FXe=o(" \u2014 "),PB=a("a"),CXe=o("TapasConfig"),MXe=o(" (TAPAS model)"),EXe=l(),gg=a("li"),xU=a("strong"),yXe=o("transfo-xl"),wXe=o(" \u2014 "),$B=a("a"),AXe=o("TransfoXLConfig"),LXe=o(" (Transformer-XL model)"),BXe=l(),hg=a("li"),kU=a("strong"),xXe=o("trocr"),kXe=o(" \u2014 "),IB=a("a"),RXe=o("TrOCRConfig"),SXe=o(" (TrOCR model)"),PXe=l(),pg=a("li"),RU=a("strong"),$Xe=o("unispeech"),IXe=o(" \u2014 "),NB=a("a"),NXe=o("UniSpeechConfig"),jXe=o(" (UniSpeech model)"),DXe=l(),_g=a("li"),SU=a("strong"),qXe=o("unispeech-sat"),GXe=o(" \u2014 "),jB=a("a"),OXe=o("UniSpeechSatConfig"),XXe=o(" (UniSpeechSat model)"),VXe=l(),ug=a("li"),PU=a("strong"),zXe=o("van"),WXe=o(" \u2014 "),DB=a("a"),QXe=o("VanConfig"),HXe=o(" (VAN model)"),UXe=l(),bg=a("li"),$U=a("strong"),JXe=o("vilt"),YXe=o(" \u2014 "),qB=a("a"),KXe=o("ViltConfig"),ZXe=o(" (ViLT model)"),eVe=l(),vg=a("li"),IU=a("strong"),oVe=o("vision-encoder-decoder"),rVe=o(" \u2014 "),GB=a("a"),tVe=o("VisionEncoderDecoderConfig"),aVe=o(" (Vision Encoder decoder model)"),nVe=l(),Tg=a("li"),NU=a("strong"),sVe=o("vision-text-dual-encoder"),lVe=o(" \u2014 "),OB=a("a"),iVe=o("VisionTextDualEncoderConfig"),dVe=o(" (VisionTextDualEncoder model)"),cVe=l(),Fg=a("li"),jU=a("strong"),fVe=o("visual_bert"),mVe=o(" \u2014 "),XB=a("a"),gVe=o("VisualBertConfig"),hVe=o(" (VisualBert model)"),pVe=l(),Cg=a("li"),DU=a("strong"),_Ve=o("vit"),uVe=o(" \u2014 "),VB=a("a"),bVe=o("ViTConfig"),vVe=o(" (ViT model)"),TVe=l(),Mg=a("li"),qU=a("strong"),FVe=o("vit_mae"),CVe=o(" \u2014 "),zB=a("a"),MVe=o("ViTMAEConfig"),EVe=o(" (ViTMAE model)"),yVe=l(),Eg=a("li"),GU=a("strong"),wVe=o("wav2vec2"),AVe=o(" \u2014 "),WB=a("a"),LVe=o("Wav2Vec2Config"),BVe=o(" (Wav2Vec2 model)"),xVe=l(),yg=a("li"),OU=a("strong"),kVe=o("wavlm"),RVe=o(" \u2014 "),QB=a("a"),SVe=o("WavLMConfig"),PVe=o(" (WavLM model)"),$Ve=l(),wg=a("li"),XU=a("strong"),IVe=o("xglm"),NVe=o(" \u2014 "),HB=a("a"),jVe=o("XGLMConfig"),DVe=o(" (XGLM model)"),qVe=l(),Ag=a("li"),VU=a("strong"),GVe=o("xlm"),OVe=o(" \u2014 "),UB=a("a"),XVe=o("XLMConfig"),VVe=o(" (XLM model)"),zVe=l(),Lg=a("li"),zU=a("strong"),WVe=o("xlm-prophetnet"),QVe=o(" \u2014 "),JB=a("a"),HVe=o("XLMProphetNetConfig"),UVe=o(" (XLMProphetNet model)"),JVe=l(),Bg=a("li"),WU=a("strong"),YVe=o("xlm-roberta"),KVe=o(" \u2014 "),YB=a("a"),ZVe=o("XLMRobertaConfig"),eze=o(" (XLM-RoBERTa model)"),oze=l(),xg=a("li"),QU=a("strong"),rze=o("xlm-roberta-xl"),tze=o(" \u2014 "),KB=a("a"),aze=o("XLMRobertaXLConfig"),nze=o(" (XLM-RoBERTa-XL model)"),sze=l(),kg=a("li"),HU=a("strong"),lze=o("xlnet"),ize=o(" \u2014 "),ZB=a("a"),dze=o("XLNetConfig"),cze=o(" (XLNet model)"),fze=l(),Rg=a("li"),UU=a("strong"),mze=o("yoso"),gze=o(" \u2014 "),ex=a("a"),hze=o("YosoConfig"),pze=o(" (YOSO model)"),_ze=l(),JU=a("p"),uze=o("Examples:"),bze=l(),f(C3.$$.fragment),vze=l(),Sg=a("div"),f(M3.$$.fragment),Tze=l(),YU=a("p"),Fze=o("Register a new configuration for this class."),kke=l(),Wi=a("h2"),Pg=a("a"),KU=a("span"),f(E3.$$.fragment),Cze=l(),ZU=a("span"),Mze=o("AutoTokenizer"),Rke=l(),Qo=a("div"),f(y3.$$.fragment),Eze=l(),w3=a("p"),yze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ox=a("a"),wze=o("AutoTokenizer.from_pretrained()"),Aze=o(" class method."),Lze=l(),A3=a("p"),Bze=o("This class cannot be instantiated directly using "),eJ=a("code"),xze=o("__init__()"),kze=o(" (throws an error)."),Rze=l(),go=a("div"),f(L3.$$.fragment),Sze=l(),oJ=a("p"),Pze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$ze=l(),Oa=a("p"),Ize=o("The tokenizer class to instantiate is selected based on the "),rJ=a("code"),Nze=o("model_type"),jze=o(` property of the config object (either
passed as an argument or loaded from `),tJ=a("code"),Dze=o("pretrained_model_name_or_path"),qze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aJ=a("code"),Gze=o("pretrained_model_name_or_path"),Oze=o(":"),Xze=l(),E=a("ul"),Wn=a("li"),nJ=a("strong"),Vze=o("albert"),zze=o(" \u2014 "),rx=a("a"),Wze=o("AlbertTokenizer"),Qze=o(" or "),tx=a("a"),Hze=o("AlbertTokenizerFast"),Uze=o(" (ALBERT model)"),Jze=l(),Qn=a("li"),sJ=a("strong"),Yze=o("bart"),Kze=o(" \u2014 "),ax=a("a"),Zze=o("BartTokenizer"),eWe=o(" or "),nx=a("a"),oWe=o("BartTokenizerFast"),rWe=o(" (BART model)"),tWe=l(),Hn=a("li"),lJ=a("strong"),aWe=o("barthez"),nWe=o(" \u2014 "),sx=a("a"),sWe=o("BarthezTokenizer"),lWe=o(" or "),lx=a("a"),iWe=o("BarthezTokenizerFast"),dWe=o(" (BARThez model)"),cWe=l(),$g=a("li"),iJ=a("strong"),fWe=o("bartpho"),mWe=o(" \u2014 "),ix=a("a"),gWe=o("BartphoTokenizer"),hWe=o(" (BARTpho model)"),pWe=l(),Un=a("li"),dJ=a("strong"),_We=o("bert"),uWe=o(" \u2014 "),dx=a("a"),bWe=o("BertTokenizer"),vWe=o(" or "),cx=a("a"),TWe=o("BertTokenizerFast"),FWe=o(" (BERT model)"),CWe=l(),Ig=a("li"),cJ=a("strong"),MWe=o("bert-generation"),EWe=o(" \u2014 "),fx=a("a"),yWe=o("BertGenerationTokenizer"),wWe=o(" (Bert Generation model)"),AWe=l(),Ng=a("li"),fJ=a("strong"),LWe=o("bert-japanese"),BWe=o(" \u2014 "),mx=a("a"),xWe=o("BertJapaneseTokenizer"),kWe=o(" (BertJapanese model)"),RWe=l(),jg=a("li"),mJ=a("strong"),SWe=o("bertweet"),PWe=o(" \u2014 "),gx=a("a"),$We=o("BertweetTokenizer"),IWe=o(" (Bertweet model)"),NWe=l(),Jn=a("li"),gJ=a("strong"),jWe=o("big_bird"),DWe=o(" \u2014 "),hx=a("a"),qWe=o("BigBirdTokenizer"),GWe=o(" or "),px=a("a"),OWe=o("BigBirdTokenizerFast"),XWe=o(" (BigBird model)"),VWe=l(),Yn=a("li"),hJ=a("strong"),zWe=o("bigbird_pegasus"),WWe=o(" \u2014 "),_x=a("a"),QWe=o("PegasusTokenizer"),HWe=o(" or "),ux=a("a"),UWe=o("PegasusTokenizerFast"),JWe=o(" (BigBirdPegasus model)"),YWe=l(),Kn=a("li"),pJ=a("strong"),KWe=o("blenderbot"),ZWe=o(" \u2014 "),bx=a("a"),eQe=o("BlenderbotTokenizer"),oQe=o(" or "),vx=a("a"),rQe=o("BlenderbotTokenizerFast"),tQe=o(" (Blenderbot model)"),aQe=l(),Dg=a("li"),_J=a("strong"),nQe=o("blenderbot-small"),sQe=o(" \u2014 "),Tx=a("a"),lQe=o("BlenderbotSmallTokenizer"),iQe=o(" (BlenderbotSmall model)"),dQe=l(),qg=a("li"),uJ=a("strong"),cQe=o("byt5"),fQe=o(" \u2014 "),Fx=a("a"),mQe=o("ByT5Tokenizer"),gQe=o(" (ByT5 model)"),hQe=l(),Zn=a("li"),bJ=a("strong"),pQe=o("camembert"),_Qe=o(" \u2014 "),Cx=a("a"),uQe=o("CamembertTokenizer"),bQe=o(" or "),Mx=a("a"),vQe=o("CamembertTokenizerFast"),TQe=o(" (CamemBERT model)"),FQe=l(),Gg=a("li"),vJ=a("strong"),CQe=o("canine"),MQe=o(" \u2014 "),Ex=a("a"),EQe=o("CanineTokenizer"),yQe=o(" (Canine model)"),wQe=l(),es=a("li"),TJ=a("strong"),AQe=o("clip"),LQe=o(" \u2014 "),yx=a("a"),BQe=o("CLIPTokenizer"),xQe=o(" or "),wx=a("a"),kQe=o("CLIPTokenizerFast"),RQe=o(" (CLIP model)"),SQe=l(),os=a("li"),FJ=a("strong"),PQe=o("convbert"),$Qe=o(" \u2014 "),Ax=a("a"),IQe=o("ConvBertTokenizer"),NQe=o(" or "),Lx=a("a"),jQe=o("ConvBertTokenizerFast"),DQe=o(" (ConvBERT model)"),qQe=l(),rs=a("li"),CJ=a("strong"),GQe=o("cpm"),OQe=o(" \u2014 "),Bx=a("a"),XQe=o("CpmTokenizer"),VQe=o(" or "),MJ=a("code"),zQe=o("CpmTokenizerFast"),WQe=o(" (CPM model)"),QQe=l(),Og=a("li"),EJ=a("strong"),HQe=o("ctrl"),UQe=o(" \u2014 "),xx=a("a"),JQe=o("CTRLTokenizer"),YQe=o(" (CTRL model)"),KQe=l(),ts=a("li"),yJ=a("strong"),ZQe=o("deberta"),eHe=o(" \u2014 "),kx=a("a"),oHe=o("DebertaTokenizer"),rHe=o(" or "),Rx=a("a"),tHe=o("DebertaTokenizerFast"),aHe=o(" (DeBERTa model)"),nHe=l(),Xg=a("li"),wJ=a("strong"),sHe=o("deberta-v2"),lHe=o(" \u2014 "),Sx=a("a"),iHe=o("DebertaV2Tokenizer"),dHe=o(" (DeBERTa-v2 model)"),cHe=l(),as=a("li"),AJ=a("strong"),fHe=o("distilbert"),mHe=o(" \u2014 "),Px=a("a"),gHe=o("DistilBertTokenizer"),hHe=o(" or "),$x=a("a"),pHe=o("DistilBertTokenizerFast"),_He=o(" (DistilBERT model)"),uHe=l(),ns=a("li"),LJ=a("strong"),bHe=o("dpr"),vHe=o(" \u2014 "),Ix=a("a"),THe=o("DPRQuestionEncoderTokenizer"),FHe=o(" or "),Nx=a("a"),CHe=o("DPRQuestionEncoderTokenizerFast"),MHe=o(" (DPR model)"),EHe=l(),ss=a("li"),BJ=a("strong"),yHe=o("electra"),wHe=o(" \u2014 "),jx=a("a"),AHe=o("ElectraTokenizer"),LHe=o(" or "),Dx=a("a"),BHe=o("ElectraTokenizerFast"),xHe=o(" (ELECTRA model)"),kHe=l(),Vg=a("li"),xJ=a("strong"),RHe=o("flaubert"),SHe=o(" \u2014 "),qx=a("a"),PHe=o("FlaubertTokenizer"),$He=o(" (FlauBERT model)"),IHe=l(),ls=a("li"),kJ=a("strong"),NHe=o("fnet"),jHe=o(" \u2014 "),Gx=a("a"),DHe=o("FNetTokenizer"),qHe=o(" or "),Ox=a("a"),GHe=o("FNetTokenizerFast"),OHe=o(" (FNet model)"),XHe=l(),zg=a("li"),RJ=a("strong"),VHe=o("fsmt"),zHe=o(" \u2014 "),Xx=a("a"),WHe=o("FSMTTokenizer"),QHe=o(" (FairSeq Machine-Translation model)"),HHe=l(),is=a("li"),SJ=a("strong"),UHe=o("funnel"),JHe=o(" \u2014 "),Vx=a("a"),YHe=o("FunnelTokenizer"),KHe=o(" or "),zx=a("a"),ZHe=o("FunnelTokenizerFast"),eUe=o(" (Funnel Transformer model)"),oUe=l(),ds=a("li"),PJ=a("strong"),rUe=o("gpt2"),tUe=o(" \u2014 "),Wx=a("a"),aUe=o("GPT2Tokenizer"),nUe=o(" or "),Qx=a("a"),sUe=o("GPT2TokenizerFast"),lUe=o(" (OpenAI GPT-2 model)"),iUe=l(),cs=a("li"),$J=a("strong"),dUe=o("gpt_neo"),cUe=o(" \u2014 "),Hx=a("a"),fUe=o("GPT2Tokenizer"),mUe=o(" or "),Ux=a("a"),gUe=o("GPT2TokenizerFast"),hUe=o(" (GPT Neo model)"),pUe=l(),fs=a("li"),IJ=a("strong"),_Ue=o("herbert"),uUe=o(" \u2014 "),Jx=a("a"),bUe=o("HerbertTokenizer"),vUe=o(" or "),Yx=a("a"),TUe=o("HerbertTokenizerFast"),FUe=o(" (HerBERT model)"),CUe=l(),Wg=a("li"),NJ=a("strong"),MUe=o("hubert"),EUe=o(" \u2014 "),Kx=a("a"),yUe=o("Wav2Vec2CTCTokenizer"),wUe=o(" (Hubert model)"),AUe=l(),ms=a("li"),jJ=a("strong"),LUe=o("ibert"),BUe=o(" \u2014 "),Zx=a("a"),xUe=o("RobertaTokenizer"),kUe=o(" or "),ek=a("a"),RUe=o("RobertaTokenizerFast"),SUe=o(" (I-BERT model)"),PUe=l(),gs=a("li"),DJ=a("strong"),$Ue=o("layoutlm"),IUe=o(" \u2014 "),ok=a("a"),NUe=o("LayoutLMTokenizer"),jUe=o(" or "),rk=a("a"),DUe=o("LayoutLMTokenizerFast"),qUe=o(" (LayoutLM model)"),GUe=l(),hs=a("li"),qJ=a("strong"),OUe=o("layoutlmv2"),XUe=o(" \u2014 "),tk=a("a"),VUe=o("LayoutLMv2Tokenizer"),zUe=o(" or "),ak=a("a"),WUe=o("LayoutLMv2TokenizerFast"),QUe=o(" (LayoutLMv2 model)"),HUe=l(),ps=a("li"),GJ=a("strong"),UUe=o("layoutxlm"),JUe=o(" \u2014 "),nk=a("a"),YUe=o("LayoutXLMTokenizer"),KUe=o(" or "),sk=a("a"),ZUe=o("LayoutXLMTokenizerFast"),eJe=o(" (LayoutXLM model)"),oJe=l(),_s=a("li"),OJ=a("strong"),rJe=o("led"),tJe=o(" \u2014 "),lk=a("a"),aJe=o("LEDTokenizer"),nJe=o(" or "),ik=a("a"),sJe=o("LEDTokenizerFast"),lJe=o(" (LED model)"),iJe=l(),us=a("li"),XJ=a("strong"),dJe=o("longformer"),cJe=o(" \u2014 "),dk=a("a"),fJe=o("LongformerTokenizer"),mJe=o(" or "),ck=a("a"),gJe=o("LongformerTokenizerFast"),hJe=o(" (Longformer model)"),pJe=l(),Qg=a("li"),VJ=a("strong"),_Je=o("luke"),uJe=o(" \u2014 "),fk=a("a"),bJe=o("LukeTokenizer"),vJe=o(" (LUKE model)"),TJe=l(),bs=a("li"),zJ=a("strong"),FJe=o("lxmert"),CJe=o(" \u2014 "),mk=a("a"),MJe=o("LxmertTokenizer"),EJe=o(" or "),gk=a("a"),yJe=o("LxmertTokenizerFast"),wJe=o(" (LXMERT model)"),AJe=l(),Hg=a("li"),WJ=a("strong"),LJe=o("m2m_100"),BJe=o(" \u2014 "),hk=a("a"),xJe=o("M2M100Tokenizer"),kJe=o(" (M2M100 model)"),RJe=l(),Ug=a("li"),QJ=a("strong"),SJe=o("marian"),PJe=o(" \u2014 "),pk=a("a"),$Je=o("MarianTokenizer"),IJe=o(" (Marian model)"),NJe=l(),vs=a("li"),HJ=a("strong"),jJe=o("mbart"),DJe=o(" \u2014 "),_k=a("a"),qJe=o("MBartTokenizer"),GJe=o(" or "),uk=a("a"),OJe=o("MBartTokenizerFast"),XJe=o(" (mBART model)"),VJe=l(),Ts=a("li"),UJ=a("strong"),zJe=o("mbart50"),WJe=o(" \u2014 "),bk=a("a"),QJe=o("MBart50Tokenizer"),HJe=o(" or "),vk=a("a"),UJe=o("MBart50TokenizerFast"),JJe=o(" (mBART-50 model)"),YJe=l(),Jg=a("li"),JJ=a("strong"),KJe=o("mluke"),ZJe=o(" \u2014 "),Tk=a("a"),eYe=o("MLukeTokenizer"),oYe=o(" (mLUKE model)"),rYe=l(),Fs=a("li"),YJ=a("strong"),tYe=o("mobilebert"),aYe=o(" \u2014 "),Fk=a("a"),nYe=o("MobileBertTokenizer"),sYe=o(" or "),Ck=a("a"),lYe=o("MobileBertTokenizerFast"),iYe=o(" (MobileBERT model)"),dYe=l(),Cs=a("li"),KJ=a("strong"),cYe=o("mpnet"),fYe=o(" \u2014 "),Mk=a("a"),mYe=o("MPNetTokenizer"),gYe=o(" or "),Ek=a("a"),hYe=o("MPNetTokenizerFast"),pYe=o(" (MPNet model)"),_Ye=l(),Ms=a("li"),ZJ=a("strong"),uYe=o("mt5"),bYe=o(" \u2014 "),yk=a("a"),vYe=o("MT5Tokenizer"),TYe=o(" or "),wk=a("a"),FYe=o("MT5TokenizerFast"),CYe=o(" (mT5 model)"),MYe=l(),Es=a("li"),eY=a("strong"),EYe=o("openai-gpt"),yYe=o(" \u2014 "),Ak=a("a"),wYe=o("OpenAIGPTTokenizer"),AYe=o(" or "),Lk=a("a"),LYe=o("OpenAIGPTTokenizerFast"),BYe=o(" (OpenAI GPT model)"),xYe=l(),ys=a("li"),oY=a("strong"),kYe=o("pegasus"),RYe=o(" \u2014 "),Bk=a("a"),SYe=o("PegasusTokenizer"),PYe=o(" or "),xk=a("a"),$Ye=o("PegasusTokenizerFast"),IYe=o(" (Pegasus model)"),NYe=l(),Yg=a("li"),rY=a("strong"),jYe=o("perceiver"),DYe=o(" \u2014 "),kk=a("a"),qYe=o("PerceiverTokenizer"),GYe=o(" (Perceiver model)"),OYe=l(),Kg=a("li"),tY=a("strong"),XYe=o("phobert"),VYe=o(" \u2014 "),Rk=a("a"),zYe=o("PhobertTokenizer"),WYe=o(" (PhoBERT model)"),QYe=l(),Zg=a("li"),aY=a("strong"),HYe=o("plbart"),UYe=o(" \u2014 "),Sk=a("a"),JYe=o("PLBartTokenizer"),YYe=o(" (PLBart model)"),KYe=l(),eh=a("li"),nY=a("strong"),ZYe=o("prophetnet"),eKe=o(" \u2014 "),Pk=a("a"),oKe=o("ProphetNetTokenizer"),rKe=o(" (ProphetNet model)"),tKe=l(),ws=a("li"),sY=a("strong"),aKe=o("qdqbert"),nKe=o(" \u2014 "),$k=a("a"),sKe=o("BertTokenizer"),lKe=o(" or "),Ik=a("a"),iKe=o("BertTokenizerFast"),dKe=o(" (QDQBert model)"),cKe=l(),oh=a("li"),lY=a("strong"),fKe=o("rag"),mKe=o(" \u2014 "),Nk=a("a"),gKe=o("RagTokenizer"),hKe=o(" (RAG model)"),pKe=l(),As=a("li"),iY=a("strong"),_Ke=o("realm"),uKe=o(" \u2014 "),jk=a("a"),bKe=o("RealmTokenizer"),vKe=o(" or "),Dk=a("a"),TKe=o("RealmTokenizerFast"),FKe=o(" (Realm model)"),CKe=l(),Ls=a("li"),dY=a("strong"),MKe=o("reformer"),EKe=o(" \u2014 "),qk=a("a"),yKe=o("ReformerTokenizer"),wKe=o(" or "),Gk=a("a"),AKe=o("ReformerTokenizerFast"),LKe=o(" (Reformer model)"),BKe=l(),Bs=a("li"),cY=a("strong"),xKe=o("rembert"),kKe=o(" \u2014 "),Ok=a("a"),RKe=o("RemBertTokenizer"),SKe=o(" or "),Xk=a("a"),PKe=o("RemBertTokenizerFast"),$Ke=o(" (RemBERT model)"),IKe=l(),xs=a("li"),fY=a("strong"),NKe=o("retribert"),jKe=o(" \u2014 "),Vk=a("a"),DKe=o("RetriBertTokenizer"),qKe=o(" or "),zk=a("a"),GKe=o("RetriBertTokenizerFast"),OKe=o(" (RetriBERT model)"),XKe=l(),ks=a("li"),mY=a("strong"),VKe=o("roberta"),zKe=o(" \u2014 "),Wk=a("a"),WKe=o("RobertaTokenizer"),QKe=o(" or "),Qk=a("a"),HKe=o("RobertaTokenizerFast"),UKe=o(" (RoBERTa model)"),JKe=l(),Rs=a("li"),gY=a("strong"),YKe=o("roformer"),KKe=o(" \u2014 "),Hk=a("a"),ZKe=o("RoFormerTokenizer"),eZe=o(" or "),Uk=a("a"),oZe=o("RoFormerTokenizerFast"),rZe=o(" (RoFormer model)"),tZe=l(),rh=a("li"),hY=a("strong"),aZe=o("speech_to_text"),nZe=o(" \u2014 "),Jk=a("a"),sZe=o("Speech2TextTokenizer"),lZe=o(" (Speech2Text model)"),iZe=l(),th=a("li"),pY=a("strong"),dZe=o("speech_to_text_2"),cZe=o(" \u2014 "),Yk=a("a"),fZe=o("Speech2Text2Tokenizer"),mZe=o(" (Speech2Text2 model)"),gZe=l(),Ss=a("li"),_Y=a("strong"),hZe=o("splinter"),pZe=o(" \u2014 "),Kk=a("a"),_Ze=o("SplinterTokenizer"),uZe=o(" or "),Zk=a("a"),bZe=o("SplinterTokenizerFast"),vZe=o(" (Splinter model)"),TZe=l(),Ps=a("li"),uY=a("strong"),FZe=o("squeezebert"),CZe=o(" \u2014 "),eR=a("a"),MZe=o("SqueezeBertTokenizer"),EZe=o(" or "),oR=a("a"),yZe=o("SqueezeBertTokenizerFast"),wZe=o(" (SqueezeBERT model)"),AZe=l(),$s=a("li"),bY=a("strong"),LZe=o("t5"),BZe=o(" \u2014 "),rR=a("a"),xZe=o("T5Tokenizer"),kZe=o(" or "),tR=a("a"),RZe=o("T5TokenizerFast"),SZe=o(" (T5 model)"),PZe=l(),ah=a("li"),vY=a("strong"),$Ze=o("tapas"),IZe=o(" \u2014 "),aR=a("a"),NZe=o("TapasTokenizer"),jZe=o(" (TAPAS model)"),DZe=l(),nh=a("li"),TY=a("strong"),qZe=o("transfo-xl"),GZe=o(" \u2014 "),nR=a("a"),OZe=o("TransfoXLTokenizer"),XZe=o(" (Transformer-XL model)"),VZe=l(),sh=a("li"),FY=a("strong"),zZe=o("wav2vec2"),WZe=o(" \u2014 "),sR=a("a"),QZe=o("Wav2Vec2CTCTokenizer"),HZe=o(" (Wav2Vec2 model)"),UZe=l(),lh=a("li"),CY=a("strong"),JZe=o("wav2vec2_phoneme"),YZe=o(" \u2014 "),lR=a("a"),KZe=o("Wav2Vec2PhonemeCTCTokenizer"),ZZe=o(" (Wav2Vec2Phoneme model)"),eeo=l(),Is=a("li"),MY=a("strong"),oeo=o("xglm"),reo=o(" \u2014 "),iR=a("a"),teo=o("XGLMTokenizer"),aeo=o(" or "),dR=a("a"),neo=o("XGLMTokenizerFast"),seo=o(" (XGLM model)"),leo=l(),ih=a("li"),EY=a("strong"),ieo=o("xlm"),deo=o(" \u2014 "),cR=a("a"),ceo=o("XLMTokenizer"),feo=o(" (XLM model)"),meo=l(),dh=a("li"),yY=a("strong"),geo=o("xlm-prophetnet"),heo=o(" \u2014 "),fR=a("a"),peo=o("XLMProphetNetTokenizer"),_eo=o(" (XLMProphetNet model)"),ueo=l(),Ns=a("li"),wY=a("strong"),beo=o("xlm-roberta"),veo=o(" \u2014 "),mR=a("a"),Teo=o("XLMRobertaTokenizer"),Feo=o(" or "),gR=a("a"),Ceo=o("XLMRobertaTokenizerFast"),Meo=o(" (XLM-RoBERTa model)"),Eeo=l(),js=a("li"),AY=a("strong"),yeo=o("xlnet"),weo=o(" \u2014 "),hR=a("a"),Aeo=o("XLNetTokenizer"),Leo=o(" or "),pR=a("a"),Beo=o("XLNetTokenizerFast"),xeo=o(" (XLNet model)"),keo=l(),LY=a("p"),Reo=o("Examples:"),Seo=l(),f(B3.$$.fragment),Peo=l(),ch=a("div"),f(x3.$$.fragment),$eo=l(),BY=a("p"),Ieo=o("Register a new tokenizer in this mapping."),Ske=l(),Qi=a("h2"),fh=a("a"),xY=a("span"),f(k3.$$.fragment),Neo=l(),kY=a("span"),jeo=o("AutoFeatureExtractor"),Pke=l(),Ho=a("div"),f(R3.$$.fragment),Deo=l(),S3=a("p"),qeo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_R=a("a"),Geo=o("AutoFeatureExtractor.from_pretrained()"),Oeo=o(" class method."),Xeo=l(),P3=a("p"),Veo=o("This class cannot be instantiated directly using "),RY=a("code"),zeo=o("__init__()"),Weo=o(" (throws an error)."),Qeo=l(),$e=a("div"),f($3.$$.fragment),Heo=l(),SY=a("p"),Ueo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jeo=l(),Xa=a("p"),Yeo=o("The feature extractor class to instantiate is selected based on the "),PY=a("code"),Keo=o("model_type"),Zeo=o(` property of the config object
(either passed as an argument or loaded from `),$Y=a("code"),eoo=o("pretrained_model_name_or_path"),ooo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),IY=a("code"),roo=o("pretrained_model_name_or_path"),too=o(":"),aoo=l(),te=a("ul"),mh=a("li"),NY=a("strong"),noo=o("beit"),soo=o(" \u2014 "),uR=a("a"),loo=o("BeitFeatureExtractor"),ioo=o(" (BEiT model)"),doo=l(),gh=a("li"),jY=a("strong"),coo=o("clip"),foo=o(" \u2014 "),bR=a("a"),moo=o("CLIPFeatureExtractor"),goo=o(" (CLIP model)"),hoo=l(),hh=a("li"),DY=a("strong"),poo=o("convnext"),_oo=o(" \u2014 "),vR=a("a"),uoo=o("ConvNextFeatureExtractor"),boo=o(" (ConvNext model)"),voo=l(),ph=a("li"),qY=a("strong"),Too=o("deit"),Foo=o(" \u2014 "),TR=a("a"),Coo=o("DeiTFeatureExtractor"),Moo=o(" (DeiT model)"),Eoo=l(),_h=a("li"),GY=a("strong"),yoo=o("detr"),woo=o(" \u2014 "),FR=a("a"),Aoo=o("DetrFeatureExtractor"),Loo=o(" (DETR model)"),Boo=l(),uh=a("li"),OY=a("strong"),xoo=o("hubert"),koo=o(" \u2014 "),CR=a("a"),Roo=o("Wav2Vec2FeatureExtractor"),Soo=o(" (Hubert model)"),Poo=l(),bh=a("li"),XY=a("strong"),$oo=o("layoutlmv2"),Ioo=o(" \u2014 "),MR=a("a"),Noo=o("LayoutLMv2FeatureExtractor"),joo=o(" (LayoutLMv2 model)"),Doo=l(),vh=a("li"),VY=a("strong"),qoo=o("maskformer"),Goo=o(" \u2014 "),ER=a("a"),Ooo=o("MaskFormerFeatureExtractor"),Xoo=o(" (MaskFormer model)"),Voo=l(),Th=a("li"),zY=a("strong"),zoo=o("perceiver"),Woo=o(" \u2014 "),yR=a("a"),Qoo=o("PerceiverFeatureExtractor"),Hoo=o(" (Perceiver model)"),Uoo=l(),Fh=a("li"),WY=a("strong"),Joo=o("poolformer"),Yoo=o(" \u2014 "),wR=a("a"),Koo=o("PoolFormerFeatureExtractor"),Zoo=o(" (PoolFormer model)"),ero=l(),Ch=a("li"),QY=a("strong"),oro=o("resnet"),rro=o(" \u2014 "),AR=a("a"),tro=o("ConvNextFeatureExtractor"),aro=o(" (ResNet model)"),nro=l(),Mh=a("li"),HY=a("strong"),sro=o("segformer"),lro=o(" \u2014 "),LR=a("a"),iro=o("SegformerFeatureExtractor"),dro=o(" (SegFormer model)"),cro=l(),Eh=a("li"),UY=a("strong"),fro=o("speech_to_text"),mro=o(" \u2014 "),BR=a("a"),gro=o("Speech2TextFeatureExtractor"),hro=o(" (Speech2Text model)"),pro=l(),yh=a("li"),JY=a("strong"),_ro=o("swin"),uro=o(" \u2014 "),xR=a("a"),bro=o("ViTFeatureExtractor"),vro=o(" (Swin model)"),Tro=l(),wh=a("li"),YY=a("strong"),Fro=o("van"),Cro=o(" \u2014 "),kR=a("a"),Mro=o("ConvNextFeatureExtractor"),Ero=o(" (VAN model)"),yro=l(),Ah=a("li"),KY=a("strong"),wro=o("vit"),Aro=o(" \u2014 "),RR=a("a"),Lro=o("ViTFeatureExtractor"),Bro=o(" (ViT model)"),xro=l(),Lh=a("li"),ZY=a("strong"),kro=o("vit_mae"),Rro=o(" \u2014 "),SR=a("a"),Sro=o("ViTFeatureExtractor"),Pro=o(" (ViTMAE model)"),$ro=l(),Bh=a("li"),eK=a("strong"),Iro=o("wav2vec2"),Nro=o(" \u2014 "),PR=a("a"),jro=o("Wav2Vec2FeatureExtractor"),Dro=o(" (Wav2Vec2 model)"),qro=l(),f(xh.$$.fragment),Gro=l(),oK=a("p"),Oro=o("Examples:"),Xro=l(),f(I3.$$.fragment),Vro=l(),kh=a("div"),f(N3.$$.fragment),zro=l(),rK=a("p"),Wro=o("Register a new feature extractor for this class."),$ke=l(),Hi=a("h2"),Rh=a("a"),tK=a("span"),f(j3.$$.fragment),Qro=l(),aK=a("span"),Hro=o("AutoProcessor"),Ike=l(),Uo=a("div"),f(D3.$$.fragment),Uro=l(),q3=a("p"),Jro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$R=a("a"),Yro=o("AutoProcessor.from_pretrained()"),Kro=o(" class method."),Zro=l(),G3=a("p"),eto=o("This class cannot be instantiated directly using "),nK=a("code"),oto=o("__init__()"),rto=o(" (throws an error)."),tto=l(),Ie=a("div"),f(O3.$$.fragment),ato=l(),sK=a("p"),nto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sto=l(),Ui=a("p"),lto=o("The processor class to instantiate is selected based on the "),lK=a("code"),ito=o("model_type"),dto=o(` property of the config object (either
passed as an argument or loaded from `),iK=a("code"),cto=o("pretrained_model_name_or_path"),fto=o(" if possible):"),mto=l(),xe=a("ul"),Sh=a("li"),dK=a("strong"),gto=o("clip"),hto=o(" \u2014 "),IR=a("a"),pto=o("CLIPProcessor"),_to=o(" (CLIP model)"),uto=l(),Ph=a("li"),cK=a("strong"),bto=o("layoutlmv2"),vto=o(" \u2014 "),NR=a("a"),Tto=o("LayoutLMv2Processor"),Fto=o(" (LayoutLMv2 model)"),Cto=l(),$h=a("li"),fK=a("strong"),Mto=o("layoutxlm"),Eto=o(" \u2014 "),jR=a("a"),yto=o("LayoutXLMProcessor"),wto=o(" (LayoutXLM model)"),Ato=l(),Ih=a("li"),mK=a("strong"),Lto=o("speech_to_text"),Bto=o(" \u2014 "),DR=a("a"),xto=o("Speech2TextProcessor"),kto=o(" (Speech2Text model)"),Rto=l(),Nh=a("li"),gK=a("strong"),Sto=o("speech_to_text_2"),Pto=o(" \u2014 "),qR=a("a"),$to=o("Speech2Text2Processor"),Ito=o(" (Speech2Text2 model)"),Nto=l(),jh=a("li"),hK=a("strong"),jto=o("trocr"),Dto=o(" \u2014 "),GR=a("a"),qto=o("TrOCRProcessor"),Gto=o(" (TrOCR model)"),Oto=l(),Dh=a("li"),pK=a("strong"),Xto=o("vision-text-dual-encoder"),Vto=o(" \u2014 "),OR=a("a"),zto=o("VisionTextDualEncoderProcessor"),Wto=o(" (VisionTextDualEncoder model)"),Qto=l(),qh=a("li"),_K=a("strong"),Hto=o("wav2vec2"),Uto=o(" \u2014 "),XR=a("a"),Jto=o("Wav2Vec2Processor"),Yto=o(" (Wav2Vec2 model)"),Kto=l(),f(Gh.$$.fragment),Zto=l(),uK=a("p"),eao=o("Examples:"),oao=l(),f(X3.$$.fragment),rao=l(),Oh=a("div"),f(V3.$$.fragment),tao=l(),bK=a("p"),aao=o("Register a new processor for this class."),Nke=l(),Ji=a("h2"),Xh=a("a"),vK=a("span"),f(z3.$$.fragment),nao=l(),TK=a("span"),sao=o("AutoModel"),jke=l(),Jo=a("div"),f(W3.$$.fragment),lao=l(),Yi=a("p"),iao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FK=a("code"),dao=o("from_pretrained()"),cao=o("class method or the "),CK=a("code"),fao=o("from_config()"),mao=o(`class
method.`),gao=l(),Q3=a("p"),hao=o("This class cannot be instantiated directly using "),MK=a("code"),pao=o("__init__()"),_ao=o(" (throws an error)."),uao=l(),Vr=a("div"),f(H3.$$.fragment),bao=l(),EK=a("p"),vao=o("Instantiates one of the base model classes of the library from a configuration."),Tao=l(),Ki=a("p"),Fao=o(`Note:
Loading a model from its configuration file does `),yK=a("strong"),Cao=o("not"),Mao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("code"),Eao=o("from_pretrained()"),yao=o("to load the model weights."),wao=l(),AK=a("p"),Aao=o("Examples:"),Lao=l(),f(U3.$$.fragment),Bao=l(),Ne=a("div"),f(J3.$$.fragment),xao=l(),LK=a("p"),kao=o("Instantiate one of the base model classes of the library from a pretrained model."),Rao=l(),Va=a("p"),Sao=o("The model class to instantiate is selected based on the "),BK=a("code"),Pao=o("model_type"),$ao=o(` property of the config object (either
passed as an argument or loaded from `),xK=a("code"),Iao=o("pretrained_model_name_or_path"),Nao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kK=a("code"),jao=o("pretrained_model_name_or_path"),Dao=o(":"),qao=l(),F=a("ul"),Vh=a("li"),RK=a("strong"),Gao=o("albert"),Oao=o(" \u2014 "),VR=a("a"),Xao=o("AlbertModel"),Vao=o(" (ALBERT model)"),zao=l(),zh=a("li"),SK=a("strong"),Wao=o("bart"),Qao=o(" \u2014 "),zR=a("a"),Hao=o("BartModel"),Uao=o(" (BART model)"),Jao=l(),Wh=a("li"),PK=a("strong"),Yao=o("beit"),Kao=o(" \u2014 "),WR=a("a"),Zao=o("BeitModel"),eno=o(" (BEiT model)"),ono=l(),Qh=a("li"),$K=a("strong"),rno=o("bert"),tno=o(" \u2014 "),QR=a("a"),ano=o("BertModel"),nno=o(" (BERT model)"),sno=l(),Hh=a("li"),IK=a("strong"),lno=o("bert-generation"),ino=o(" \u2014 "),HR=a("a"),dno=o("BertGenerationEncoder"),cno=o(" (Bert Generation model)"),fno=l(),Uh=a("li"),NK=a("strong"),mno=o("big_bird"),gno=o(" \u2014 "),UR=a("a"),hno=o("BigBirdModel"),pno=o(" (BigBird model)"),_no=l(),Jh=a("li"),jK=a("strong"),uno=o("bigbird_pegasus"),bno=o(" \u2014 "),JR=a("a"),vno=o("BigBirdPegasusModel"),Tno=o(" (BigBirdPegasus model)"),Fno=l(),Yh=a("li"),DK=a("strong"),Cno=o("blenderbot"),Mno=o(" \u2014 "),YR=a("a"),Eno=o("BlenderbotModel"),yno=o(" (Blenderbot model)"),wno=l(),Kh=a("li"),qK=a("strong"),Ano=o("blenderbot-small"),Lno=o(" \u2014 "),KR=a("a"),Bno=o("BlenderbotSmallModel"),xno=o(" (BlenderbotSmall model)"),kno=l(),Zh=a("li"),GK=a("strong"),Rno=o("camembert"),Sno=o(" \u2014 "),ZR=a("a"),Pno=o("CamembertModel"),$no=o(" (CamemBERT model)"),Ino=l(),ep=a("li"),OK=a("strong"),Nno=o("canine"),jno=o(" \u2014 "),eS=a("a"),Dno=o("CanineModel"),qno=o(" (Canine model)"),Gno=l(),op=a("li"),XK=a("strong"),Ono=o("clip"),Xno=o(" \u2014 "),oS=a("a"),Vno=o("CLIPModel"),zno=o(" (CLIP model)"),Wno=l(),rp=a("li"),VK=a("strong"),Qno=o("convbert"),Hno=o(" \u2014 "),rS=a("a"),Uno=o("ConvBertModel"),Jno=o(" (ConvBERT model)"),Yno=l(),tp=a("li"),zK=a("strong"),Kno=o("convnext"),Zno=o(" \u2014 "),tS=a("a"),eso=o("ConvNextModel"),oso=o(" (ConvNext model)"),rso=l(),ap=a("li"),WK=a("strong"),tso=o("ctrl"),aso=o(" \u2014 "),aS=a("a"),nso=o("CTRLModel"),sso=o(" (CTRL model)"),lso=l(),np=a("li"),QK=a("strong"),iso=o("data2vec-audio"),dso=o(" \u2014 "),nS=a("a"),cso=o("Data2VecAudioModel"),fso=o(" (Data2VecAudio model)"),mso=l(),sp=a("li"),HK=a("strong"),gso=o("data2vec-text"),hso=o(" \u2014 "),sS=a("a"),pso=o("Data2VecTextModel"),_so=o(" (Data2VecText model)"),uso=l(),lp=a("li"),UK=a("strong"),bso=o("deberta"),vso=o(" \u2014 "),lS=a("a"),Tso=o("DebertaModel"),Fso=o(" (DeBERTa model)"),Cso=l(),ip=a("li"),JK=a("strong"),Mso=o("deberta-v2"),Eso=o(" \u2014 "),iS=a("a"),yso=o("DebertaV2Model"),wso=o(" (DeBERTa-v2 model)"),Aso=l(),dp=a("li"),YK=a("strong"),Lso=o("decision_transformer"),Bso=o(" \u2014 "),dS=a("a"),xso=o("DecisionTransformerModel"),kso=o(" (Decision Transformer model)"),Rso=l(),cp=a("li"),KK=a("strong"),Sso=o("deit"),Pso=o(" \u2014 "),cS=a("a"),$so=o("DeiTModel"),Iso=o(" (DeiT model)"),Nso=l(),fp=a("li"),ZK=a("strong"),jso=o("detr"),Dso=o(" \u2014 "),fS=a("a"),qso=o("DetrModel"),Gso=o(" (DETR model)"),Oso=l(),mp=a("li"),eZ=a("strong"),Xso=o("distilbert"),Vso=o(" \u2014 "),mS=a("a"),zso=o("DistilBertModel"),Wso=o(" (DistilBERT model)"),Qso=l(),gp=a("li"),oZ=a("strong"),Hso=o("dpr"),Uso=o(" \u2014 "),gS=a("a"),Jso=o("DPRQuestionEncoder"),Yso=o(" (DPR model)"),Kso=l(),hp=a("li"),rZ=a("strong"),Zso=o("electra"),elo=o(" \u2014 "),hS=a("a"),olo=o("ElectraModel"),rlo=o(" (ELECTRA model)"),tlo=l(),pp=a("li"),tZ=a("strong"),alo=o("flaubert"),nlo=o(" \u2014 "),pS=a("a"),slo=o("FlaubertModel"),llo=o(" (FlauBERT model)"),ilo=l(),_p=a("li"),aZ=a("strong"),dlo=o("fnet"),clo=o(" \u2014 "),_S=a("a"),flo=o("FNetModel"),mlo=o(" (FNet model)"),glo=l(),up=a("li"),nZ=a("strong"),hlo=o("fsmt"),plo=o(" \u2014 "),uS=a("a"),_lo=o("FSMTModel"),ulo=o(" (FairSeq Machine-Translation model)"),blo=l(),Ds=a("li"),sZ=a("strong"),vlo=o("funnel"),Tlo=o(" \u2014 "),bS=a("a"),Flo=o("FunnelModel"),Clo=o(" or "),vS=a("a"),Mlo=o("FunnelBaseModel"),Elo=o(" (Funnel Transformer model)"),ylo=l(),bp=a("li"),lZ=a("strong"),wlo=o("glpn"),Alo=o(" \u2014 "),TS=a("a"),Llo=o("GLPNModel"),Blo=o(" (GLPN model)"),xlo=l(),vp=a("li"),iZ=a("strong"),klo=o("gpt2"),Rlo=o(" \u2014 "),FS=a("a"),Slo=o("GPT2Model"),Plo=o(" (OpenAI GPT-2 model)"),$lo=l(),Tp=a("li"),dZ=a("strong"),Ilo=o("gpt_neo"),Nlo=o(" \u2014 "),CS=a("a"),jlo=o("GPTNeoModel"),Dlo=o(" (GPT Neo model)"),qlo=l(),Fp=a("li"),cZ=a("strong"),Glo=o("gptj"),Olo=o(" \u2014 "),MS=a("a"),Xlo=o("GPTJModel"),Vlo=o(" (GPT-J model)"),zlo=l(),Cp=a("li"),fZ=a("strong"),Wlo=o("hubert"),Qlo=o(" \u2014 "),ES=a("a"),Hlo=o("HubertModel"),Ulo=o(" (Hubert model)"),Jlo=l(),Mp=a("li"),mZ=a("strong"),Ylo=o("ibert"),Klo=o(" \u2014 "),yS=a("a"),Zlo=o("IBertModel"),eio=o(" (I-BERT model)"),oio=l(),Ep=a("li"),gZ=a("strong"),rio=o("imagegpt"),tio=o(" \u2014 "),wS=a("a"),aio=o("ImageGPTModel"),nio=o(" (ImageGPT model)"),sio=l(),yp=a("li"),hZ=a("strong"),lio=o("layoutlm"),iio=o(" \u2014 "),AS=a("a"),dio=o("LayoutLMModel"),cio=o(" (LayoutLM model)"),fio=l(),wp=a("li"),pZ=a("strong"),mio=o("layoutlmv2"),gio=o(" \u2014 "),LS=a("a"),hio=o("LayoutLMv2Model"),pio=o(" (LayoutLMv2 model)"),_io=l(),Ap=a("li"),_Z=a("strong"),uio=o("led"),bio=o(" \u2014 "),BS=a("a"),vio=o("LEDModel"),Tio=o(" (LED model)"),Fio=l(),Lp=a("li"),uZ=a("strong"),Cio=o("longformer"),Mio=o(" \u2014 "),xS=a("a"),Eio=o("LongformerModel"),yio=o(" (Longformer model)"),wio=l(),Bp=a("li"),bZ=a("strong"),Aio=o("luke"),Lio=o(" \u2014 "),kS=a("a"),Bio=o("LukeModel"),xio=o(" (LUKE model)"),kio=l(),xp=a("li"),vZ=a("strong"),Rio=o("lxmert"),Sio=o(" \u2014 "),RS=a("a"),Pio=o("LxmertModel"),$io=o(" (LXMERT model)"),Iio=l(),kp=a("li"),TZ=a("strong"),Nio=o("m2m_100"),jio=o(" \u2014 "),SS=a("a"),Dio=o("M2M100Model"),qio=o(" (M2M100 model)"),Gio=l(),Rp=a("li"),FZ=a("strong"),Oio=o("marian"),Xio=o(" \u2014 "),PS=a("a"),Vio=o("MarianModel"),zio=o(" (Marian model)"),Wio=l(),Sp=a("li"),CZ=a("strong"),Qio=o("maskformer"),Hio=o(" \u2014 "),$S=a("a"),Uio=o("MaskFormerModel"),Jio=o(" (MaskFormer model)"),Yio=l(),Pp=a("li"),MZ=a("strong"),Kio=o("mbart"),Zio=o(" \u2014 "),IS=a("a"),edo=o("MBartModel"),odo=o(" (mBART model)"),rdo=l(),$p=a("li"),EZ=a("strong"),tdo=o("megatron-bert"),ado=o(" \u2014 "),NS=a("a"),ndo=o("MegatronBertModel"),sdo=o(" (MegatronBert model)"),ldo=l(),Ip=a("li"),yZ=a("strong"),ido=o("mobilebert"),ddo=o(" \u2014 "),jS=a("a"),cdo=o("MobileBertModel"),fdo=o(" (MobileBERT model)"),mdo=l(),Np=a("li"),wZ=a("strong"),gdo=o("mpnet"),hdo=o(" \u2014 "),DS=a("a"),pdo=o("MPNetModel"),_do=o(" (MPNet model)"),udo=l(),jp=a("li"),AZ=a("strong"),bdo=o("mt5"),vdo=o(" \u2014 "),qS=a("a"),Tdo=o("MT5Model"),Fdo=o(" (mT5 model)"),Cdo=l(),Dp=a("li"),LZ=a("strong"),Mdo=o("nystromformer"),Edo=o(" \u2014 "),GS=a("a"),ydo=o("NystromformerModel"),wdo=o(" (Nystromformer model)"),Ado=l(),qp=a("li"),BZ=a("strong"),Ldo=o("openai-gpt"),Bdo=o(" \u2014 "),OS=a("a"),xdo=o("OpenAIGPTModel"),kdo=o(" (OpenAI GPT model)"),Rdo=l(),Gp=a("li"),xZ=a("strong"),Sdo=o("pegasus"),Pdo=o(" \u2014 "),XS=a("a"),$do=o("PegasusModel"),Ido=o(" (Pegasus model)"),Ndo=l(),Op=a("li"),kZ=a("strong"),jdo=o("perceiver"),Ddo=o(" \u2014 "),VS=a("a"),qdo=o("PerceiverModel"),Gdo=o(" (Perceiver model)"),Odo=l(),Xp=a("li"),RZ=a("strong"),Xdo=o("plbart"),Vdo=o(" \u2014 "),zS=a("a"),zdo=o("PLBartModel"),Wdo=o(" (PLBart model)"),Qdo=l(),Vp=a("li"),SZ=a("strong"),Hdo=o("poolformer"),Udo=o(" \u2014 "),WS=a("a"),Jdo=o("PoolFormerModel"),Ydo=o(" (PoolFormer model)"),Kdo=l(),zp=a("li"),PZ=a("strong"),Zdo=o("prophetnet"),eco=o(" \u2014 "),QS=a("a"),oco=o("ProphetNetModel"),rco=o(" (ProphetNet model)"),tco=l(),Wp=a("li"),$Z=a("strong"),aco=o("qdqbert"),nco=o(" \u2014 "),HS=a("a"),sco=o("QDQBertModel"),lco=o(" (QDQBert model)"),ico=l(),Qp=a("li"),IZ=a("strong"),dco=o("reformer"),cco=o(" \u2014 "),US=a("a"),fco=o("ReformerModel"),mco=o(" (Reformer model)"),gco=l(),Hp=a("li"),NZ=a("strong"),hco=o("rembert"),pco=o(" \u2014 "),JS=a("a"),_co=o("RemBertModel"),uco=o(" (RemBERT model)"),bco=l(),Up=a("li"),jZ=a("strong"),vco=o("resnet"),Tco=o(" \u2014 "),YS=a("a"),Fco=o("ResNetModel"),Cco=o(" (ResNet model)"),Mco=l(),Jp=a("li"),DZ=a("strong"),Eco=o("retribert"),yco=o(" \u2014 "),KS=a("a"),wco=o("RetriBertModel"),Aco=o(" (RetriBERT model)"),Lco=l(),Yp=a("li"),qZ=a("strong"),Bco=o("roberta"),xco=o(" \u2014 "),ZS=a("a"),kco=o("RobertaModel"),Rco=o(" (RoBERTa model)"),Sco=l(),Kp=a("li"),GZ=a("strong"),Pco=o("roformer"),$co=o(" \u2014 "),eP=a("a"),Ico=o("RoFormerModel"),Nco=o(" (RoFormer model)"),jco=l(),Zp=a("li"),OZ=a("strong"),Dco=o("segformer"),qco=o(" \u2014 "),oP=a("a"),Gco=o("SegformerModel"),Oco=o(" (SegFormer model)"),Xco=l(),e_=a("li"),XZ=a("strong"),Vco=o("sew"),zco=o(" \u2014 "),rP=a("a"),Wco=o("SEWModel"),Qco=o(" (SEW model)"),Hco=l(),o_=a("li"),VZ=a("strong"),Uco=o("sew-d"),Jco=o(" \u2014 "),tP=a("a"),Yco=o("SEWDModel"),Kco=o(" (SEW-D model)"),Zco=l(),r_=a("li"),zZ=a("strong"),efo=o("speech_to_text"),ofo=o(" \u2014 "),aP=a("a"),rfo=o("Speech2TextModel"),tfo=o(" (Speech2Text model)"),afo=l(),t_=a("li"),WZ=a("strong"),nfo=o("splinter"),sfo=o(" \u2014 "),nP=a("a"),lfo=o("SplinterModel"),ifo=o(" (Splinter model)"),dfo=l(),a_=a("li"),QZ=a("strong"),cfo=o("squeezebert"),ffo=o(" \u2014 "),sP=a("a"),mfo=o("SqueezeBertModel"),gfo=o(" (SqueezeBERT model)"),hfo=l(),n_=a("li"),HZ=a("strong"),pfo=o("swin"),_fo=o(" \u2014 "),lP=a("a"),ufo=o("SwinModel"),bfo=o(" (Swin model)"),vfo=l(),s_=a("li"),UZ=a("strong"),Tfo=o("t5"),Ffo=o(" \u2014 "),iP=a("a"),Cfo=o("T5Model"),Mfo=o(" (T5 model)"),Efo=l(),l_=a("li"),JZ=a("strong"),yfo=o("tapas"),wfo=o(" \u2014 "),dP=a("a"),Afo=o("TapasModel"),Lfo=o(" (TAPAS model)"),Bfo=l(),i_=a("li"),YZ=a("strong"),xfo=o("transfo-xl"),kfo=o(" \u2014 "),cP=a("a"),Rfo=o("TransfoXLModel"),Sfo=o(" (Transformer-XL model)"),Pfo=l(),d_=a("li"),KZ=a("strong"),$fo=o("unispeech"),Ifo=o(" \u2014 "),fP=a("a"),Nfo=o("UniSpeechModel"),jfo=o(" (UniSpeech model)"),Dfo=l(),c_=a("li"),ZZ=a("strong"),qfo=o("unispeech-sat"),Gfo=o(" \u2014 "),mP=a("a"),Ofo=o("UniSpeechSatModel"),Xfo=o(" (UniSpeechSat model)"),Vfo=l(),f_=a("li"),eee=a("strong"),zfo=o("van"),Wfo=o(" \u2014 "),gP=a("a"),Qfo=o("VanModel"),Hfo=o(" (VAN model)"),Ufo=l(),m_=a("li"),oee=a("strong"),Jfo=o("vilt"),Yfo=o(" \u2014 "),hP=a("a"),Kfo=o("ViltModel"),Zfo=o(" (ViLT model)"),emo=l(),g_=a("li"),ree=a("strong"),omo=o("vision-text-dual-encoder"),rmo=o(" \u2014 "),pP=a("a"),tmo=o("VisionTextDualEncoderModel"),amo=o(" (VisionTextDualEncoder model)"),nmo=l(),h_=a("li"),tee=a("strong"),smo=o("visual_bert"),lmo=o(" \u2014 "),_P=a("a"),imo=o("VisualBertModel"),dmo=o(" (VisualBert model)"),cmo=l(),p_=a("li"),aee=a("strong"),fmo=o("vit"),mmo=o(" \u2014 "),uP=a("a"),gmo=o("ViTModel"),hmo=o(" (ViT model)"),pmo=l(),__=a("li"),nee=a("strong"),_mo=o("vit_mae"),umo=o(" \u2014 "),bP=a("a"),bmo=o("ViTMAEModel"),vmo=o(" (ViTMAE model)"),Tmo=l(),u_=a("li"),see=a("strong"),Fmo=o("wav2vec2"),Cmo=o(" \u2014 "),vP=a("a"),Mmo=o("Wav2Vec2Model"),Emo=o(" (Wav2Vec2 model)"),ymo=l(),b_=a("li"),lee=a("strong"),wmo=o("wavlm"),Amo=o(" \u2014 "),TP=a("a"),Lmo=o("WavLMModel"),Bmo=o(" (WavLM model)"),xmo=l(),v_=a("li"),iee=a("strong"),kmo=o("xglm"),Rmo=o(" \u2014 "),FP=a("a"),Smo=o("XGLMModel"),Pmo=o(" (XGLM model)"),$mo=l(),T_=a("li"),dee=a("strong"),Imo=o("xlm"),Nmo=o(" \u2014 "),CP=a("a"),jmo=o("XLMModel"),Dmo=o(" (XLM model)"),qmo=l(),F_=a("li"),cee=a("strong"),Gmo=o("xlm-prophetnet"),Omo=o(" \u2014 "),MP=a("a"),Xmo=o("XLMProphetNetModel"),Vmo=o(" (XLMProphetNet model)"),zmo=l(),C_=a("li"),fee=a("strong"),Wmo=o("xlm-roberta"),Qmo=o(" \u2014 "),EP=a("a"),Hmo=o("XLMRobertaModel"),Umo=o(" (XLM-RoBERTa model)"),Jmo=l(),M_=a("li"),mee=a("strong"),Ymo=o("xlm-roberta-xl"),Kmo=o(" \u2014 "),yP=a("a"),Zmo=o("XLMRobertaXLModel"),ego=o(" (XLM-RoBERTa-XL model)"),ogo=l(),E_=a("li"),gee=a("strong"),rgo=o("xlnet"),tgo=o(" \u2014 "),wP=a("a"),ago=o("XLNetModel"),ngo=o(" (XLNet model)"),sgo=l(),y_=a("li"),hee=a("strong"),lgo=o("yoso"),igo=o(" \u2014 "),AP=a("a"),dgo=o("YosoModel"),cgo=o(" (YOSO model)"),fgo=l(),w_=a("p"),mgo=o("The model is set in evaluation mode by default using "),pee=a("code"),ggo=o("model.eval()"),hgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ee=a("code"),pgo=o("model.train()"),_go=l(),uee=a("p"),ugo=o("Examples:"),bgo=l(),f(Y3.$$.fragment),Dke=l(),Zi=a("h2"),A_=a("a"),bee=a("span"),f(K3.$$.fragment),vgo=l(),vee=a("span"),Tgo=o("AutoModelForPreTraining"),qke=l(),Yo=a("div"),f(Z3.$$.fragment),Fgo=l(),ed=a("p"),Cgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tee=a("code"),Mgo=o("from_pretrained()"),Ego=o("class method or the "),Fee=a("code"),ygo=o("from_config()"),wgo=o(`class
method.`),Ago=l(),ey=a("p"),Lgo=o("This class cannot be instantiated directly using "),Cee=a("code"),Bgo=o("__init__()"),xgo=o(" (throws an error)."),kgo=l(),zr=a("div"),f(oy.$$.fragment),Rgo=l(),Mee=a("p"),Sgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pgo=l(),od=a("p"),$go=o(`Note:
Loading a model from its configuration file does `),Eee=a("strong"),Igo=o("not"),Ngo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("code"),jgo=o("from_pretrained()"),Dgo=o("to load the model weights."),qgo=l(),wee=a("p"),Ggo=o("Examples:"),Ogo=l(),f(ry.$$.fragment),Xgo=l(),je=a("div"),f(ty.$$.fragment),Vgo=l(),Aee=a("p"),zgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wgo=l(),za=a("p"),Qgo=o("The model class to instantiate is selected based on the "),Lee=a("code"),Hgo=o("model_type"),Ugo=o(` property of the config object (either
passed as an argument or loaded from `),Bee=a("code"),Jgo=o("pretrained_model_name_or_path"),Ygo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xee=a("code"),Kgo=o("pretrained_model_name_or_path"),Zgo=o(":"),eho=l(),k=a("ul"),L_=a("li"),kee=a("strong"),oho=o("albert"),rho=o(" \u2014 "),LP=a("a"),tho=o("AlbertForPreTraining"),aho=o(" (ALBERT model)"),nho=l(),B_=a("li"),Ree=a("strong"),sho=o("bart"),lho=o(" \u2014 "),BP=a("a"),iho=o("BartForConditionalGeneration"),dho=o(" (BART model)"),cho=l(),x_=a("li"),See=a("strong"),fho=o("bert"),mho=o(" \u2014 "),xP=a("a"),gho=o("BertForPreTraining"),hho=o(" (BERT model)"),pho=l(),k_=a("li"),Pee=a("strong"),_ho=o("big_bird"),uho=o(" \u2014 "),kP=a("a"),bho=o("BigBirdForPreTraining"),vho=o(" (BigBird model)"),Tho=l(),R_=a("li"),$ee=a("strong"),Fho=o("camembert"),Cho=o(" \u2014 "),RP=a("a"),Mho=o("CamembertForMaskedLM"),Eho=o(" (CamemBERT model)"),yho=l(),S_=a("li"),Iee=a("strong"),who=o("ctrl"),Aho=o(" \u2014 "),SP=a("a"),Lho=o("CTRLLMHeadModel"),Bho=o(" (CTRL model)"),xho=l(),P_=a("li"),Nee=a("strong"),kho=o("data2vec-text"),Rho=o(" \u2014 "),PP=a("a"),Sho=o("Data2VecTextForMaskedLM"),Pho=o(" (Data2VecText model)"),$ho=l(),$_=a("li"),jee=a("strong"),Iho=o("deberta"),Nho=o(" \u2014 "),$P=a("a"),jho=o("DebertaForMaskedLM"),Dho=o(" (DeBERTa model)"),qho=l(),I_=a("li"),Dee=a("strong"),Gho=o("deberta-v2"),Oho=o(" \u2014 "),IP=a("a"),Xho=o("DebertaV2ForMaskedLM"),Vho=o(" (DeBERTa-v2 model)"),zho=l(),N_=a("li"),qee=a("strong"),Who=o("distilbert"),Qho=o(" \u2014 "),NP=a("a"),Hho=o("DistilBertForMaskedLM"),Uho=o(" (DistilBERT model)"),Jho=l(),j_=a("li"),Gee=a("strong"),Yho=o("electra"),Kho=o(" \u2014 "),jP=a("a"),Zho=o("ElectraForPreTraining"),epo=o(" (ELECTRA model)"),opo=l(),D_=a("li"),Oee=a("strong"),rpo=o("flaubert"),tpo=o(" \u2014 "),DP=a("a"),apo=o("FlaubertWithLMHeadModel"),npo=o(" (FlauBERT model)"),spo=l(),q_=a("li"),Xee=a("strong"),lpo=o("fnet"),ipo=o(" \u2014 "),qP=a("a"),dpo=o("FNetForPreTraining"),cpo=o(" (FNet model)"),fpo=l(),G_=a("li"),Vee=a("strong"),mpo=o("fsmt"),gpo=o(" \u2014 "),GP=a("a"),hpo=o("FSMTForConditionalGeneration"),ppo=o(" (FairSeq Machine-Translation model)"),_po=l(),O_=a("li"),zee=a("strong"),upo=o("funnel"),bpo=o(" \u2014 "),OP=a("a"),vpo=o("FunnelForPreTraining"),Tpo=o(" (Funnel Transformer model)"),Fpo=l(),X_=a("li"),Wee=a("strong"),Cpo=o("gpt2"),Mpo=o(" \u2014 "),XP=a("a"),Epo=o("GPT2LMHeadModel"),ypo=o(" (OpenAI GPT-2 model)"),wpo=l(),V_=a("li"),Qee=a("strong"),Apo=o("ibert"),Lpo=o(" \u2014 "),VP=a("a"),Bpo=o("IBertForMaskedLM"),xpo=o(" (I-BERT model)"),kpo=l(),z_=a("li"),Hee=a("strong"),Rpo=o("layoutlm"),Spo=o(" \u2014 "),zP=a("a"),Ppo=o("LayoutLMForMaskedLM"),$po=o(" (LayoutLM model)"),Ipo=l(),W_=a("li"),Uee=a("strong"),Npo=o("longformer"),jpo=o(" \u2014 "),WP=a("a"),Dpo=o("LongformerForMaskedLM"),qpo=o(" (Longformer model)"),Gpo=l(),Q_=a("li"),Jee=a("strong"),Opo=o("lxmert"),Xpo=o(" \u2014 "),QP=a("a"),Vpo=o("LxmertForPreTraining"),zpo=o(" (LXMERT model)"),Wpo=l(),H_=a("li"),Yee=a("strong"),Qpo=o("megatron-bert"),Hpo=o(" \u2014 "),HP=a("a"),Upo=o("MegatronBertForPreTraining"),Jpo=o(" (MegatronBert model)"),Ypo=l(),U_=a("li"),Kee=a("strong"),Kpo=o("mobilebert"),Zpo=o(" \u2014 "),UP=a("a"),e_o=o("MobileBertForPreTraining"),o_o=o(" (MobileBERT model)"),r_o=l(),J_=a("li"),Zee=a("strong"),t_o=o("mpnet"),a_o=o(" \u2014 "),JP=a("a"),n_o=o("MPNetForMaskedLM"),s_o=o(" (MPNet model)"),l_o=l(),Y_=a("li"),eoe=a("strong"),i_o=o("openai-gpt"),d_o=o(" \u2014 "),YP=a("a"),c_o=o("OpenAIGPTLMHeadModel"),f_o=o(" (OpenAI GPT model)"),m_o=l(),K_=a("li"),ooe=a("strong"),g_o=o("retribert"),h_o=o(" \u2014 "),KP=a("a"),p_o=o("RetriBertModel"),__o=o(" (RetriBERT model)"),u_o=l(),Z_=a("li"),roe=a("strong"),b_o=o("roberta"),v_o=o(" \u2014 "),ZP=a("a"),T_o=o("RobertaForMaskedLM"),F_o=o(" (RoBERTa model)"),C_o=l(),eu=a("li"),toe=a("strong"),M_o=o("squeezebert"),E_o=o(" \u2014 "),e$=a("a"),y_o=o("SqueezeBertForMaskedLM"),w_o=o(" (SqueezeBERT model)"),A_o=l(),ou=a("li"),aoe=a("strong"),L_o=o("t5"),B_o=o(" \u2014 "),o$=a("a"),x_o=o("T5ForConditionalGeneration"),k_o=o(" (T5 model)"),R_o=l(),ru=a("li"),noe=a("strong"),S_o=o("tapas"),P_o=o(" \u2014 "),r$=a("a"),$_o=o("TapasForMaskedLM"),I_o=o(" (TAPAS model)"),N_o=l(),tu=a("li"),soe=a("strong"),j_o=o("transfo-xl"),D_o=o(" \u2014 "),t$=a("a"),q_o=o("TransfoXLLMHeadModel"),G_o=o(" (Transformer-XL model)"),O_o=l(),au=a("li"),loe=a("strong"),X_o=o("unispeech"),V_o=o(" \u2014 "),a$=a("a"),z_o=o("UniSpeechForPreTraining"),W_o=o(" (UniSpeech model)"),Q_o=l(),nu=a("li"),ioe=a("strong"),H_o=o("unispeech-sat"),U_o=o(" \u2014 "),n$=a("a"),J_o=o("UniSpeechSatForPreTraining"),Y_o=o(" (UniSpeechSat model)"),K_o=l(),su=a("li"),doe=a("strong"),Z_o=o("visual_bert"),euo=o(" \u2014 "),s$=a("a"),ouo=o("VisualBertForPreTraining"),ruo=o(" (VisualBert model)"),tuo=l(),lu=a("li"),coe=a("strong"),auo=o("vit_mae"),nuo=o(" \u2014 "),l$=a("a"),suo=o("ViTMAEForPreTraining"),luo=o(" (ViTMAE model)"),iuo=l(),iu=a("li"),foe=a("strong"),duo=o("wav2vec2"),cuo=o(" \u2014 "),i$=a("a"),fuo=o("Wav2Vec2ForPreTraining"),muo=o(" (Wav2Vec2 model)"),guo=l(),du=a("li"),moe=a("strong"),huo=o("xlm"),puo=o(" \u2014 "),d$=a("a"),_uo=o("XLMWithLMHeadModel"),uuo=o(" (XLM model)"),buo=l(),cu=a("li"),goe=a("strong"),vuo=o("xlm-roberta"),Tuo=o(" \u2014 "),c$=a("a"),Fuo=o("XLMRobertaForMaskedLM"),Cuo=o(" (XLM-RoBERTa model)"),Muo=l(),fu=a("li"),hoe=a("strong"),Euo=o("xlm-roberta-xl"),yuo=o(" \u2014 "),f$=a("a"),wuo=o("XLMRobertaXLForMaskedLM"),Auo=o(" (XLM-RoBERTa-XL model)"),Luo=l(),mu=a("li"),poe=a("strong"),Buo=o("xlnet"),xuo=o(" \u2014 "),m$=a("a"),kuo=o("XLNetLMHeadModel"),Ruo=o(" (XLNet model)"),Suo=l(),gu=a("p"),Puo=o("The model is set in evaluation mode by default using "),_oe=a("code"),$uo=o("model.eval()"),Iuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uoe=a("code"),Nuo=o("model.train()"),juo=l(),boe=a("p"),Duo=o("Examples:"),quo=l(),f(ay.$$.fragment),Gke=l(),rd=a("h2"),hu=a("a"),voe=a("span"),f(ny.$$.fragment),Guo=l(),Toe=a("span"),Ouo=o("AutoModelForCausalLM"),Oke=l(),Ko=a("div"),f(sy.$$.fragment),Xuo=l(),td=a("p"),Vuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Foe=a("code"),zuo=o("from_pretrained()"),Wuo=o("class method or the "),Coe=a("code"),Quo=o("from_config()"),Huo=o(`class
method.`),Uuo=l(),ly=a("p"),Juo=o("This class cannot be instantiated directly using "),Moe=a("code"),Yuo=o("__init__()"),Kuo=o(" (throws an error)."),Zuo=l(),Wr=a("div"),f(iy.$$.fragment),e5o=l(),Eoe=a("p"),o5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r5o=l(),ad=a("p"),t5o=o(`Note:
Loading a model from its configuration file does `),yoe=a("strong"),a5o=o("not"),n5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("code"),s5o=o("from_pretrained()"),l5o=o("to load the model weights."),i5o=l(),Aoe=a("p"),d5o=o("Examples:"),c5o=l(),f(dy.$$.fragment),f5o=l(),De=a("div"),f(cy.$$.fragment),m5o=l(),Loe=a("p"),g5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),h5o=l(),Wa=a("p"),p5o=o("The model class to instantiate is selected based on the "),Boe=a("code"),_5o=o("model_type"),u5o=o(` property of the config object (either
passed as an argument or loaded from `),xoe=a("code"),b5o=o("pretrained_model_name_or_path"),v5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),koe=a("code"),T5o=o("pretrained_model_name_or_path"),F5o=o(":"),C5o=l(),$=a("ul"),pu=a("li"),Roe=a("strong"),M5o=o("bart"),E5o=o(" \u2014 "),g$=a("a"),y5o=o("BartForCausalLM"),w5o=o(" (BART model)"),A5o=l(),_u=a("li"),Soe=a("strong"),L5o=o("bert"),B5o=o(" \u2014 "),h$=a("a"),x5o=o("BertLMHeadModel"),k5o=o(" (BERT model)"),R5o=l(),uu=a("li"),Poe=a("strong"),S5o=o("bert-generation"),P5o=o(" \u2014 "),p$=a("a"),$5o=o("BertGenerationDecoder"),I5o=o(" (Bert Generation model)"),N5o=l(),bu=a("li"),$oe=a("strong"),j5o=o("big_bird"),D5o=o(" \u2014 "),_$=a("a"),q5o=o("BigBirdForCausalLM"),G5o=o(" (BigBird model)"),O5o=l(),vu=a("li"),Ioe=a("strong"),X5o=o("bigbird_pegasus"),V5o=o(" \u2014 "),u$=a("a"),z5o=o("BigBirdPegasusForCausalLM"),W5o=o(" (BigBirdPegasus model)"),Q5o=l(),Tu=a("li"),Noe=a("strong"),H5o=o("blenderbot"),U5o=o(" \u2014 "),b$=a("a"),J5o=o("BlenderbotForCausalLM"),Y5o=o(" (Blenderbot model)"),K5o=l(),Fu=a("li"),joe=a("strong"),Z5o=o("blenderbot-small"),e2o=o(" \u2014 "),v$=a("a"),o2o=o("BlenderbotSmallForCausalLM"),r2o=o(" (BlenderbotSmall model)"),t2o=l(),Cu=a("li"),Doe=a("strong"),a2o=o("camembert"),n2o=o(" \u2014 "),T$=a("a"),s2o=o("CamembertForCausalLM"),l2o=o(" (CamemBERT model)"),i2o=l(),Mu=a("li"),qoe=a("strong"),d2o=o("ctrl"),c2o=o(" \u2014 "),F$=a("a"),f2o=o("CTRLLMHeadModel"),m2o=o(" (CTRL model)"),g2o=l(),Eu=a("li"),Goe=a("strong"),h2o=o("data2vec-text"),p2o=o(" \u2014 "),C$=a("a"),_2o=o("Data2VecTextForCausalLM"),u2o=o(" (Data2VecText model)"),b2o=l(),yu=a("li"),Ooe=a("strong"),v2o=o("electra"),T2o=o(" \u2014 "),M$=a("a"),F2o=o("ElectraForCausalLM"),C2o=o(" (ELECTRA model)"),M2o=l(),wu=a("li"),Xoe=a("strong"),E2o=o("gpt2"),y2o=o(" \u2014 "),E$=a("a"),w2o=o("GPT2LMHeadModel"),A2o=o(" (OpenAI GPT-2 model)"),L2o=l(),Au=a("li"),Voe=a("strong"),B2o=o("gpt_neo"),x2o=o(" \u2014 "),y$=a("a"),k2o=o("GPTNeoForCausalLM"),R2o=o(" (GPT Neo model)"),S2o=l(),Lu=a("li"),zoe=a("strong"),P2o=o("gptj"),$2o=o(" \u2014 "),w$=a("a"),I2o=o("GPTJForCausalLM"),N2o=o(" (GPT-J model)"),j2o=l(),Bu=a("li"),Woe=a("strong"),D2o=o("marian"),q2o=o(" \u2014 "),A$=a("a"),G2o=o("MarianForCausalLM"),O2o=o(" (Marian model)"),X2o=l(),xu=a("li"),Qoe=a("strong"),V2o=o("mbart"),z2o=o(" \u2014 "),L$=a("a"),W2o=o("MBartForCausalLM"),Q2o=o(" (mBART model)"),H2o=l(),ku=a("li"),Hoe=a("strong"),U2o=o("megatron-bert"),J2o=o(" \u2014 "),B$=a("a"),Y2o=o("MegatronBertForCausalLM"),K2o=o(" (MegatronBert model)"),Z2o=l(),Ru=a("li"),Uoe=a("strong"),e1o=o("openai-gpt"),o1o=o(" \u2014 "),x$=a("a"),r1o=o("OpenAIGPTLMHeadModel"),t1o=o(" (OpenAI GPT model)"),a1o=l(),Su=a("li"),Joe=a("strong"),n1o=o("pegasus"),s1o=o(" \u2014 "),k$=a("a"),l1o=o("PegasusForCausalLM"),i1o=o(" (Pegasus model)"),d1o=l(),Pu=a("li"),Yoe=a("strong"),c1o=o("plbart"),f1o=o(" \u2014 "),R$=a("a"),m1o=o("PLBartForCausalLM"),g1o=o(" (PLBart model)"),h1o=l(),$u=a("li"),Koe=a("strong"),p1o=o("prophetnet"),_1o=o(" \u2014 "),S$=a("a"),u1o=o("ProphetNetForCausalLM"),b1o=o(" (ProphetNet model)"),v1o=l(),Iu=a("li"),Zoe=a("strong"),T1o=o("qdqbert"),F1o=o(" \u2014 "),P$=a("a"),C1o=o("QDQBertLMHeadModel"),M1o=o(" (QDQBert model)"),E1o=l(),Nu=a("li"),ere=a("strong"),y1o=o("reformer"),w1o=o(" \u2014 "),$$=a("a"),A1o=o("ReformerModelWithLMHead"),L1o=o(" (Reformer model)"),B1o=l(),ju=a("li"),ore=a("strong"),x1o=o("rembert"),k1o=o(" \u2014 "),I$=a("a"),R1o=o("RemBertForCausalLM"),S1o=o(" (RemBERT model)"),P1o=l(),Du=a("li"),rre=a("strong"),$1o=o("roberta"),I1o=o(" \u2014 "),N$=a("a"),N1o=o("RobertaForCausalLM"),j1o=o(" (RoBERTa model)"),D1o=l(),qu=a("li"),tre=a("strong"),q1o=o("roformer"),G1o=o(" \u2014 "),j$=a("a"),O1o=o("RoFormerForCausalLM"),X1o=o(" (RoFormer model)"),V1o=l(),Gu=a("li"),are=a("strong"),z1o=o("speech_to_text_2"),W1o=o(" \u2014 "),D$=a("a"),Q1o=o("Speech2Text2ForCausalLM"),H1o=o(" (Speech2Text2 model)"),U1o=l(),Ou=a("li"),nre=a("strong"),J1o=o("transfo-xl"),Y1o=o(" \u2014 "),q$=a("a"),K1o=o("TransfoXLLMHeadModel"),Z1o=o(" (Transformer-XL model)"),ebo=l(),Xu=a("li"),sre=a("strong"),obo=o("trocr"),rbo=o(" \u2014 "),G$=a("a"),tbo=o("TrOCRForCausalLM"),abo=o(" (TrOCR model)"),nbo=l(),Vu=a("li"),lre=a("strong"),sbo=o("xglm"),lbo=o(" \u2014 "),O$=a("a"),ibo=o("XGLMForCausalLM"),dbo=o(" (XGLM model)"),cbo=l(),zu=a("li"),ire=a("strong"),fbo=o("xlm"),mbo=o(" \u2014 "),X$=a("a"),gbo=o("XLMWithLMHeadModel"),hbo=o(" (XLM model)"),pbo=l(),Wu=a("li"),dre=a("strong"),_bo=o("xlm-prophetnet"),ubo=o(" \u2014 "),V$=a("a"),bbo=o("XLMProphetNetForCausalLM"),vbo=o(" (XLMProphetNet model)"),Tbo=l(),Qu=a("li"),cre=a("strong"),Fbo=o("xlm-roberta"),Cbo=o(" \u2014 "),z$=a("a"),Mbo=o("XLMRobertaForCausalLM"),Ebo=o(" (XLM-RoBERTa model)"),ybo=l(),Hu=a("li"),fre=a("strong"),wbo=o("xlm-roberta-xl"),Abo=o(" \u2014 "),W$=a("a"),Lbo=o("XLMRobertaXLForCausalLM"),Bbo=o(" (XLM-RoBERTa-XL model)"),xbo=l(),Uu=a("li"),mre=a("strong"),kbo=o("xlnet"),Rbo=o(" \u2014 "),Q$=a("a"),Sbo=o("XLNetLMHeadModel"),Pbo=o(" (XLNet model)"),$bo=l(),Ju=a("p"),Ibo=o("The model is set in evaluation mode by default using "),gre=a("code"),Nbo=o("model.eval()"),jbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hre=a("code"),Dbo=o("model.train()"),qbo=l(),pre=a("p"),Gbo=o("Examples:"),Obo=l(),f(fy.$$.fragment),Xke=l(),nd=a("h2"),Yu=a("a"),_re=a("span"),f(my.$$.fragment),Xbo=l(),ure=a("span"),Vbo=o("AutoModelForMaskedLM"),Vke=l(),Zo=a("div"),f(gy.$$.fragment),zbo=l(),sd=a("p"),Wbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bre=a("code"),Qbo=o("from_pretrained()"),Hbo=o("class method or the "),vre=a("code"),Ubo=o("from_config()"),Jbo=o(`class
method.`),Ybo=l(),hy=a("p"),Kbo=o("This class cannot be instantiated directly using "),Tre=a("code"),Zbo=o("__init__()"),evo=o(" (throws an error)."),ovo=l(),Qr=a("div"),f(py.$$.fragment),rvo=l(),Fre=a("p"),tvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),avo=l(),ld=a("p"),nvo=o(`Note:
Loading a model from its configuration file does `),Cre=a("strong"),svo=o("not"),lvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("code"),ivo=o("from_pretrained()"),dvo=o("to load the model weights."),cvo=l(),Ere=a("p"),fvo=o("Examples:"),mvo=l(),f(_y.$$.fragment),gvo=l(),qe=a("div"),f(uy.$$.fragment),hvo=l(),yre=a("p"),pvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_vo=l(),Qa=a("p"),uvo=o("The model class to instantiate is selected based on the "),wre=a("code"),bvo=o("model_type"),vvo=o(` property of the config object (either
passed as an argument or loaded from `),Are=a("code"),Tvo=o("pretrained_model_name_or_path"),Fvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lre=a("code"),Cvo=o("pretrained_model_name_or_path"),Mvo=o(":"),Evo=l(),I=a("ul"),Ku=a("li"),Bre=a("strong"),yvo=o("albert"),wvo=o(" \u2014 "),H$=a("a"),Avo=o("AlbertForMaskedLM"),Lvo=o(" (ALBERT model)"),Bvo=l(),Zu=a("li"),xre=a("strong"),xvo=o("bart"),kvo=o(" \u2014 "),U$=a("a"),Rvo=o("BartForConditionalGeneration"),Svo=o(" (BART model)"),Pvo=l(),e5=a("li"),kre=a("strong"),$vo=o("bert"),Ivo=o(" \u2014 "),J$=a("a"),Nvo=o("BertForMaskedLM"),jvo=o(" (BERT model)"),Dvo=l(),o5=a("li"),Rre=a("strong"),qvo=o("big_bird"),Gvo=o(" \u2014 "),Y$=a("a"),Ovo=o("BigBirdForMaskedLM"),Xvo=o(" (BigBird model)"),Vvo=l(),r5=a("li"),Sre=a("strong"),zvo=o("camembert"),Wvo=o(" \u2014 "),K$=a("a"),Qvo=o("CamembertForMaskedLM"),Hvo=o(" (CamemBERT model)"),Uvo=l(),t5=a("li"),Pre=a("strong"),Jvo=o("convbert"),Yvo=o(" \u2014 "),Z$=a("a"),Kvo=o("ConvBertForMaskedLM"),Zvo=o(" (ConvBERT model)"),e6o=l(),a5=a("li"),$re=a("strong"),o6o=o("data2vec-text"),r6o=o(" \u2014 "),eI=a("a"),t6o=o("Data2VecTextForMaskedLM"),a6o=o(" (Data2VecText model)"),n6o=l(),n5=a("li"),Ire=a("strong"),s6o=o("deberta"),l6o=o(" \u2014 "),oI=a("a"),i6o=o("DebertaForMaskedLM"),d6o=o(" (DeBERTa model)"),c6o=l(),s5=a("li"),Nre=a("strong"),f6o=o("deberta-v2"),m6o=o(" \u2014 "),rI=a("a"),g6o=o("DebertaV2ForMaskedLM"),h6o=o(" (DeBERTa-v2 model)"),p6o=l(),l5=a("li"),jre=a("strong"),_6o=o("distilbert"),u6o=o(" \u2014 "),tI=a("a"),b6o=o("DistilBertForMaskedLM"),v6o=o(" (DistilBERT model)"),T6o=l(),i5=a("li"),Dre=a("strong"),F6o=o("electra"),C6o=o(" \u2014 "),aI=a("a"),M6o=o("ElectraForMaskedLM"),E6o=o(" (ELECTRA model)"),y6o=l(),d5=a("li"),qre=a("strong"),w6o=o("flaubert"),A6o=o(" \u2014 "),nI=a("a"),L6o=o("FlaubertWithLMHeadModel"),B6o=o(" (FlauBERT model)"),x6o=l(),c5=a("li"),Gre=a("strong"),k6o=o("fnet"),R6o=o(" \u2014 "),sI=a("a"),S6o=o("FNetForMaskedLM"),P6o=o(" (FNet model)"),$6o=l(),f5=a("li"),Ore=a("strong"),I6o=o("funnel"),N6o=o(" \u2014 "),lI=a("a"),j6o=o("FunnelForMaskedLM"),D6o=o(" (Funnel Transformer model)"),q6o=l(),m5=a("li"),Xre=a("strong"),G6o=o("ibert"),O6o=o(" \u2014 "),iI=a("a"),X6o=o("IBertForMaskedLM"),V6o=o(" (I-BERT model)"),z6o=l(),g5=a("li"),Vre=a("strong"),W6o=o("layoutlm"),Q6o=o(" \u2014 "),dI=a("a"),H6o=o("LayoutLMForMaskedLM"),U6o=o(" (LayoutLM model)"),J6o=l(),h5=a("li"),zre=a("strong"),Y6o=o("longformer"),K6o=o(" \u2014 "),cI=a("a"),Z6o=o("LongformerForMaskedLM"),eTo=o(" (Longformer model)"),oTo=l(),p5=a("li"),Wre=a("strong"),rTo=o("mbart"),tTo=o(" \u2014 "),fI=a("a"),aTo=o("MBartForConditionalGeneration"),nTo=o(" (mBART model)"),sTo=l(),_5=a("li"),Qre=a("strong"),lTo=o("megatron-bert"),iTo=o(" \u2014 "),mI=a("a"),dTo=o("MegatronBertForMaskedLM"),cTo=o(" (MegatronBert model)"),fTo=l(),u5=a("li"),Hre=a("strong"),mTo=o("mobilebert"),gTo=o(" \u2014 "),gI=a("a"),hTo=o("MobileBertForMaskedLM"),pTo=o(" (MobileBERT model)"),_To=l(),b5=a("li"),Ure=a("strong"),uTo=o("mpnet"),bTo=o(" \u2014 "),hI=a("a"),vTo=o("MPNetForMaskedLM"),TTo=o(" (MPNet model)"),FTo=l(),v5=a("li"),Jre=a("strong"),CTo=o("nystromformer"),MTo=o(" \u2014 "),pI=a("a"),ETo=o("NystromformerForMaskedLM"),yTo=o(" (Nystromformer model)"),wTo=l(),T5=a("li"),Yre=a("strong"),ATo=o("perceiver"),LTo=o(" \u2014 "),_I=a("a"),BTo=o("PerceiverForMaskedLM"),xTo=o(" (Perceiver model)"),kTo=l(),F5=a("li"),Kre=a("strong"),RTo=o("qdqbert"),STo=o(" \u2014 "),uI=a("a"),PTo=o("QDQBertForMaskedLM"),$To=o(" (QDQBert model)"),ITo=l(),C5=a("li"),Zre=a("strong"),NTo=o("reformer"),jTo=o(" \u2014 "),bI=a("a"),DTo=o("ReformerForMaskedLM"),qTo=o(" (Reformer model)"),GTo=l(),M5=a("li"),ete=a("strong"),OTo=o("rembert"),XTo=o(" \u2014 "),vI=a("a"),VTo=o("RemBertForMaskedLM"),zTo=o(" (RemBERT model)"),WTo=l(),E5=a("li"),ote=a("strong"),QTo=o("roberta"),HTo=o(" \u2014 "),TI=a("a"),UTo=o("RobertaForMaskedLM"),JTo=o(" (RoBERTa model)"),YTo=l(),y5=a("li"),rte=a("strong"),KTo=o("roformer"),ZTo=o(" \u2014 "),FI=a("a"),eFo=o("RoFormerForMaskedLM"),oFo=o(" (RoFormer model)"),rFo=l(),w5=a("li"),tte=a("strong"),tFo=o("squeezebert"),aFo=o(" \u2014 "),CI=a("a"),nFo=o("SqueezeBertForMaskedLM"),sFo=o(" (SqueezeBERT model)"),lFo=l(),A5=a("li"),ate=a("strong"),iFo=o("tapas"),dFo=o(" \u2014 "),MI=a("a"),cFo=o("TapasForMaskedLM"),fFo=o(" (TAPAS model)"),mFo=l(),L5=a("li"),nte=a("strong"),gFo=o("wav2vec2"),hFo=o(" \u2014 "),ste=a("code"),pFo=o("Wav2Vec2ForMaskedLM"),_Fo=o("(Wav2Vec2 model)"),uFo=l(),B5=a("li"),lte=a("strong"),bFo=o("xlm"),vFo=o(" \u2014 "),EI=a("a"),TFo=o("XLMWithLMHeadModel"),FFo=o(" (XLM model)"),CFo=l(),x5=a("li"),ite=a("strong"),MFo=o("xlm-roberta"),EFo=o(" \u2014 "),yI=a("a"),yFo=o("XLMRobertaForMaskedLM"),wFo=o(" (XLM-RoBERTa model)"),AFo=l(),k5=a("li"),dte=a("strong"),LFo=o("xlm-roberta-xl"),BFo=o(" \u2014 "),wI=a("a"),xFo=o("XLMRobertaXLForMaskedLM"),kFo=o(" (XLM-RoBERTa-XL model)"),RFo=l(),R5=a("li"),cte=a("strong"),SFo=o("yoso"),PFo=o(" \u2014 "),AI=a("a"),$Fo=o("YosoForMaskedLM"),IFo=o(" (YOSO model)"),NFo=l(),S5=a("p"),jFo=o("The model is set in evaluation mode by default using "),fte=a("code"),DFo=o("model.eval()"),qFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mte=a("code"),GFo=o("model.train()"),OFo=l(),gte=a("p"),XFo=o("Examples:"),VFo=l(),f(by.$$.fragment),zke=l(),id=a("h2"),P5=a("a"),hte=a("span"),f(vy.$$.fragment),zFo=l(),pte=a("span"),WFo=o("AutoModelForSeq2SeqLM"),Wke=l(),er=a("div"),f(Ty.$$.fragment),QFo=l(),dd=a("p"),HFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_te=a("code"),UFo=o("from_pretrained()"),JFo=o("class method or the "),ute=a("code"),YFo=o("from_config()"),KFo=o(`class
method.`),ZFo=l(),Fy=a("p"),eCo=o("This class cannot be instantiated directly using "),bte=a("code"),oCo=o("__init__()"),rCo=o(" (throws an error)."),tCo=l(),Hr=a("div"),f(Cy.$$.fragment),aCo=l(),vte=a("p"),nCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sCo=l(),cd=a("p"),lCo=o(`Note:
Loading a model from its configuration file does `),Tte=a("strong"),iCo=o("not"),dCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=a("code"),cCo=o("from_pretrained()"),fCo=o("to load the model weights."),mCo=l(),Cte=a("p"),gCo=o("Examples:"),hCo=l(),f(My.$$.fragment),pCo=l(),Ge=a("div"),f(Ey.$$.fragment),_Co=l(),Mte=a("p"),uCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bCo=l(),Ha=a("p"),vCo=o("The model class to instantiate is selected based on the "),Ete=a("code"),TCo=o("model_type"),FCo=o(` property of the config object (either
passed as an argument or loaded from `),yte=a("code"),CCo=o("pretrained_model_name_or_path"),MCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wte=a("code"),ECo=o("pretrained_model_name_or_path"),yCo=o(":"),wCo=l(),se=a("ul"),$5=a("li"),Ate=a("strong"),ACo=o("bart"),LCo=o(" \u2014 "),LI=a("a"),BCo=o("BartForConditionalGeneration"),xCo=o(" (BART model)"),kCo=l(),I5=a("li"),Lte=a("strong"),RCo=o("bigbird_pegasus"),SCo=o(" \u2014 "),BI=a("a"),PCo=o("BigBirdPegasusForConditionalGeneration"),$Co=o(" (BigBirdPegasus model)"),ICo=l(),N5=a("li"),Bte=a("strong"),NCo=o("blenderbot"),jCo=o(" \u2014 "),xI=a("a"),DCo=o("BlenderbotForConditionalGeneration"),qCo=o(" (Blenderbot model)"),GCo=l(),j5=a("li"),xte=a("strong"),OCo=o("blenderbot-small"),XCo=o(" \u2014 "),kI=a("a"),VCo=o("BlenderbotSmallForConditionalGeneration"),zCo=o(" (BlenderbotSmall model)"),WCo=l(),D5=a("li"),kte=a("strong"),QCo=o("encoder-decoder"),HCo=o(" \u2014 "),RI=a("a"),UCo=o("EncoderDecoderModel"),JCo=o(" (Encoder decoder model)"),YCo=l(),q5=a("li"),Rte=a("strong"),KCo=o("fsmt"),ZCo=o(" \u2014 "),SI=a("a"),eMo=o("FSMTForConditionalGeneration"),oMo=o(" (FairSeq Machine-Translation model)"),rMo=l(),G5=a("li"),Ste=a("strong"),tMo=o("led"),aMo=o(" \u2014 "),PI=a("a"),nMo=o("LEDForConditionalGeneration"),sMo=o(" (LED model)"),lMo=l(),O5=a("li"),Pte=a("strong"),iMo=o("m2m_100"),dMo=o(" \u2014 "),$I=a("a"),cMo=o("M2M100ForConditionalGeneration"),fMo=o(" (M2M100 model)"),mMo=l(),X5=a("li"),$te=a("strong"),gMo=o("marian"),hMo=o(" \u2014 "),II=a("a"),pMo=o("MarianMTModel"),_Mo=o(" (Marian model)"),uMo=l(),V5=a("li"),Ite=a("strong"),bMo=o("mbart"),vMo=o(" \u2014 "),NI=a("a"),TMo=o("MBartForConditionalGeneration"),FMo=o(" (mBART model)"),CMo=l(),z5=a("li"),Nte=a("strong"),MMo=o("mt5"),EMo=o(" \u2014 "),jI=a("a"),yMo=o("MT5ForConditionalGeneration"),wMo=o(" (mT5 model)"),AMo=l(),W5=a("li"),jte=a("strong"),LMo=o("pegasus"),BMo=o(" \u2014 "),DI=a("a"),xMo=o("PegasusForConditionalGeneration"),kMo=o(" (Pegasus model)"),RMo=l(),Q5=a("li"),Dte=a("strong"),SMo=o("plbart"),PMo=o(" \u2014 "),qI=a("a"),$Mo=o("PLBartForConditionalGeneration"),IMo=o(" (PLBart model)"),NMo=l(),H5=a("li"),qte=a("strong"),jMo=o("prophetnet"),DMo=o(" \u2014 "),GI=a("a"),qMo=o("ProphetNetForConditionalGeneration"),GMo=o(" (ProphetNet model)"),OMo=l(),U5=a("li"),Gte=a("strong"),XMo=o("t5"),VMo=o(" \u2014 "),OI=a("a"),zMo=o("T5ForConditionalGeneration"),WMo=o(" (T5 model)"),QMo=l(),J5=a("li"),Ote=a("strong"),HMo=o("xlm-prophetnet"),UMo=o(" \u2014 "),XI=a("a"),JMo=o("XLMProphetNetForConditionalGeneration"),YMo=o(" (XLMProphetNet model)"),KMo=l(),Y5=a("p"),ZMo=o("The model is set in evaluation mode by default using "),Xte=a("code"),e4o=o("model.eval()"),o4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vte=a("code"),r4o=o("model.train()"),t4o=l(),zte=a("p"),a4o=o("Examples:"),n4o=l(),f(yy.$$.fragment),Qke=l(),fd=a("h2"),K5=a("a"),Wte=a("span"),f(wy.$$.fragment),s4o=l(),Qte=a("span"),l4o=o("AutoModelForSequenceClassification"),Hke=l(),or=a("div"),f(Ay.$$.fragment),i4o=l(),md=a("p"),d4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Hte=a("code"),c4o=o("from_pretrained()"),f4o=o("class method or the "),Ute=a("code"),m4o=o("from_config()"),g4o=o(`class
method.`),h4o=l(),Ly=a("p"),p4o=o("This class cannot be instantiated directly using "),Jte=a("code"),_4o=o("__init__()"),u4o=o(" (throws an error)."),b4o=l(),Ur=a("div"),f(By.$$.fragment),v4o=l(),Yte=a("p"),T4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F4o=l(),gd=a("p"),C4o=o(`Note:
Loading a model from its configuration file does `),Kte=a("strong"),M4o=o("not"),E4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zte=a("code"),y4o=o("from_pretrained()"),w4o=o("to load the model weights."),A4o=l(),eae=a("p"),L4o=o("Examples:"),B4o=l(),f(xy.$$.fragment),x4o=l(),Oe=a("div"),f(ky.$$.fragment),k4o=l(),oae=a("p"),R4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),S4o=l(),Ua=a("p"),P4o=o("The model class to instantiate is selected based on the "),rae=a("code"),$4o=o("model_type"),I4o=o(` property of the config object (either
passed as an argument or loaded from `),tae=a("code"),N4o=o("pretrained_model_name_or_path"),j4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aae=a("code"),D4o=o("pretrained_model_name_or_path"),q4o=o(":"),G4o=l(),A=a("ul"),Z5=a("li"),nae=a("strong"),O4o=o("albert"),X4o=o(" \u2014 "),VI=a("a"),V4o=o("AlbertForSequenceClassification"),z4o=o(" (ALBERT model)"),W4o=l(),e2=a("li"),sae=a("strong"),Q4o=o("bart"),H4o=o(" \u2014 "),zI=a("a"),U4o=o("BartForSequenceClassification"),J4o=o(" (BART model)"),Y4o=l(),o2=a("li"),lae=a("strong"),K4o=o("bert"),Z4o=o(" \u2014 "),WI=a("a"),eEo=o("BertForSequenceClassification"),oEo=o(" (BERT model)"),rEo=l(),r2=a("li"),iae=a("strong"),tEo=o("big_bird"),aEo=o(" \u2014 "),QI=a("a"),nEo=o("BigBirdForSequenceClassification"),sEo=o(" (BigBird model)"),lEo=l(),t2=a("li"),dae=a("strong"),iEo=o("bigbird_pegasus"),dEo=o(" \u2014 "),HI=a("a"),cEo=o("BigBirdPegasusForSequenceClassification"),fEo=o(" (BigBirdPegasus model)"),mEo=l(),a2=a("li"),cae=a("strong"),gEo=o("camembert"),hEo=o(" \u2014 "),UI=a("a"),pEo=o("CamembertForSequenceClassification"),_Eo=o(" (CamemBERT model)"),uEo=l(),n2=a("li"),fae=a("strong"),bEo=o("canine"),vEo=o(" \u2014 "),JI=a("a"),TEo=o("CanineForSequenceClassification"),FEo=o(" (Canine model)"),CEo=l(),s2=a("li"),mae=a("strong"),MEo=o("convbert"),EEo=o(" \u2014 "),YI=a("a"),yEo=o("ConvBertForSequenceClassification"),wEo=o(" (ConvBERT model)"),AEo=l(),l2=a("li"),gae=a("strong"),LEo=o("ctrl"),BEo=o(" \u2014 "),KI=a("a"),xEo=o("CTRLForSequenceClassification"),kEo=o(" (CTRL model)"),REo=l(),i2=a("li"),hae=a("strong"),SEo=o("data2vec-text"),PEo=o(" \u2014 "),ZI=a("a"),$Eo=o("Data2VecTextForSequenceClassification"),IEo=o(" (Data2VecText model)"),NEo=l(),d2=a("li"),pae=a("strong"),jEo=o("deberta"),DEo=o(" \u2014 "),eN=a("a"),qEo=o("DebertaForSequenceClassification"),GEo=o(" (DeBERTa model)"),OEo=l(),c2=a("li"),_ae=a("strong"),XEo=o("deberta-v2"),VEo=o(" \u2014 "),oN=a("a"),zEo=o("DebertaV2ForSequenceClassification"),WEo=o(" (DeBERTa-v2 model)"),QEo=l(),f2=a("li"),uae=a("strong"),HEo=o("distilbert"),UEo=o(" \u2014 "),rN=a("a"),JEo=o("DistilBertForSequenceClassification"),YEo=o(" (DistilBERT model)"),KEo=l(),m2=a("li"),bae=a("strong"),ZEo=o("electra"),e3o=o(" \u2014 "),tN=a("a"),o3o=o("ElectraForSequenceClassification"),r3o=o(" (ELECTRA model)"),t3o=l(),g2=a("li"),vae=a("strong"),a3o=o("flaubert"),n3o=o(" \u2014 "),aN=a("a"),s3o=o("FlaubertForSequenceClassification"),l3o=o(" (FlauBERT model)"),i3o=l(),h2=a("li"),Tae=a("strong"),d3o=o("fnet"),c3o=o(" \u2014 "),nN=a("a"),f3o=o("FNetForSequenceClassification"),m3o=o(" (FNet model)"),g3o=l(),p2=a("li"),Fae=a("strong"),h3o=o("funnel"),p3o=o(" \u2014 "),sN=a("a"),_3o=o("FunnelForSequenceClassification"),u3o=o(" (Funnel Transformer model)"),b3o=l(),_2=a("li"),Cae=a("strong"),v3o=o("gpt2"),T3o=o(" \u2014 "),lN=a("a"),F3o=o("GPT2ForSequenceClassification"),C3o=o(" (OpenAI GPT-2 model)"),M3o=l(),u2=a("li"),Mae=a("strong"),E3o=o("gpt_neo"),y3o=o(" \u2014 "),iN=a("a"),w3o=o("GPTNeoForSequenceClassification"),A3o=o(" (GPT Neo model)"),L3o=l(),b2=a("li"),Eae=a("strong"),B3o=o("gptj"),x3o=o(" \u2014 "),dN=a("a"),k3o=o("GPTJForSequenceClassification"),R3o=o(" (GPT-J model)"),S3o=l(),v2=a("li"),yae=a("strong"),P3o=o("ibert"),$3o=o(" \u2014 "),cN=a("a"),I3o=o("IBertForSequenceClassification"),N3o=o(" (I-BERT model)"),j3o=l(),T2=a("li"),wae=a("strong"),D3o=o("layoutlm"),q3o=o(" \u2014 "),fN=a("a"),G3o=o("LayoutLMForSequenceClassification"),O3o=o(" (LayoutLM model)"),X3o=l(),F2=a("li"),Aae=a("strong"),V3o=o("layoutlmv2"),z3o=o(" \u2014 "),mN=a("a"),W3o=o("LayoutLMv2ForSequenceClassification"),Q3o=o(" (LayoutLMv2 model)"),H3o=l(),C2=a("li"),Lae=a("strong"),U3o=o("led"),J3o=o(" \u2014 "),gN=a("a"),Y3o=o("LEDForSequenceClassification"),K3o=o(" (LED model)"),Z3o=l(),M2=a("li"),Bae=a("strong"),eyo=o("longformer"),oyo=o(" \u2014 "),hN=a("a"),ryo=o("LongformerForSequenceClassification"),tyo=o(" (Longformer model)"),ayo=l(),E2=a("li"),xae=a("strong"),nyo=o("mbart"),syo=o(" \u2014 "),pN=a("a"),lyo=o("MBartForSequenceClassification"),iyo=o(" (mBART model)"),dyo=l(),y2=a("li"),kae=a("strong"),cyo=o("megatron-bert"),fyo=o(" \u2014 "),_N=a("a"),myo=o("MegatronBertForSequenceClassification"),gyo=o(" (MegatronBert model)"),hyo=l(),w2=a("li"),Rae=a("strong"),pyo=o("mobilebert"),_yo=o(" \u2014 "),uN=a("a"),uyo=o("MobileBertForSequenceClassification"),byo=o(" (MobileBERT model)"),vyo=l(),A2=a("li"),Sae=a("strong"),Tyo=o("mpnet"),Fyo=o(" \u2014 "),bN=a("a"),Cyo=o("MPNetForSequenceClassification"),Myo=o(" (MPNet model)"),Eyo=l(),L2=a("li"),Pae=a("strong"),yyo=o("nystromformer"),wyo=o(" \u2014 "),vN=a("a"),Ayo=o("NystromformerForSequenceClassification"),Lyo=o(" (Nystromformer model)"),Byo=l(),B2=a("li"),$ae=a("strong"),xyo=o("openai-gpt"),kyo=o(" \u2014 "),TN=a("a"),Ryo=o("OpenAIGPTForSequenceClassification"),Syo=o(" (OpenAI GPT model)"),Pyo=l(),x2=a("li"),Iae=a("strong"),$yo=o("perceiver"),Iyo=o(" \u2014 "),FN=a("a"),Nyo=o("PerceiverForSequenceClassification"),jyo=o(" (Perceiver model)"),Dyo=l(),k2=a("li"),Nae=a("strong"),qyo=o("plbart"),Gyo=o(" \u2014 "),CN=a("a"),Oyo=o("PLBartForSequenceClassification"),Xyo=o(" (PLBart model)"),Vyo=l(),R2=a("li"),jae=a("strong"),zyo=o("qdqbert"),Wyo=o(" \u2014 "),MN=a("a"),Qyo=o("QDQBertForSequenceClassification"),Hyo=o(" (QDQBert model)"),Uyo=l(),S2=a("li"),Dae=a("strong"),Jyo=o("reformer"),Yyo=o(" \u2014 "),EN=a("a"),Kyo=o("ReformerForSequenceClassification"),Zyo=o(" (Reformer model)"),ewo=l(),P2=a("li"),qae=a("strong"),owo=o("rembert"),rwo=o(" \u2014 "),yN=a("a"),two=o("RemBertForSequenceClassification"),awo=o(" (RemBERT model)"),nwo=l(),$2=a("li"),Gae=a("strong"),swo=o("roberta"),lwo=o(" \u2014 "),wN=a("a"),iwo=o("RobertaForSequenceClassification"),dwo=o(" (RoBERTa model)"),cwo=l(),I2=a("li"),Oae=a("strong"),fwo=o("roformer"),mwo=o(" \u2014 "),AN=a("a"),gwo=o("RoFormerForSequenceClassification"),hwo=o(" (RoFormer model)"),pwo=l(),N2=a("li"),Xae=a("strong"),_wo=o("squeezebert"),uwo=o(" \u2014 "),LN=a("a"),bwo=o("SqueezeBertForSequenceClassification"),vwo=o(" (SqueezeBERT model)"),Two=l(),j2=a("li"),Vae=a("strong"),Fwo=o("tapas"),Cwo=o(" \u2014 "),BN=a("a"),Mwo=o("TapasForSequenceClassification"),Ewo=o(" (TAPAS model)"),ywo=l(),D2=a("li"),zae=a("strong"),wwo=o("transfo-xl"),Awo=o(" \u2014 "),xN=a("a"),Lwo=o("TransfoXLForSequenceClassification"),Bwo=o(" (Transformer-XL model)"),xwo=l(),q2=a("li"),Wae=a("strong"),kwo=o("xlm"),Rwo=o(" \u2014 "),kN=a("a"),Swo=o("XLMForSequenceClassification"),Pwo=o(" (XLM model)"),$wo=l(),G2=a("li"),Qae=a("strong"),Iwo=o("xlm-roberta"),Nwo=o(" \u2014 "),RN=a("a"),jwo=o("XLMRobertaForSequenceClassification"),Dwo=o(" (XLM-RoBERTa model)"),qwo=l(),O2=a("li"),Hae=a("strong"),Gwo=o("xlm-roberta-xl"),Owo=o(" \u2014 "),SN=a("a"),Xwo=o("XLMRobertaXLForSequenceClassification"),Vwo=o(" (XLM-RoBERTa-XL model)"),zwo=l(),X2=a("li"),Uae=a("strong"),Wwo=o("xlnet"),Qwo=o(" \u2014 "),PN=a("a"),Hwo=o("XLNetForSequenceClassification"),Uwo=o(" (XLNet model)"),Jwo=l(),V2=a("li"),Jae=a("strong"),Ywo=o("yoso"),Kwo=o(" \u2014 "),$N=a("a"),Zwo=o("YosoForSequenceClassification"),eAo=o(" (YOSO model)"),oAo=l(),z2=a("p"),rAo=o("The model is set in evaluation mode by default using "),Yae=a("code"),tAo=o("model.eval()"),aAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kae=a("code"),nAo=o("model.train()"),sAo=l(),Zae=a("p"),lAo=o("Examples:"),iAo=l(),f(Ry.$$.fragment),Uke=l(),hd=a("h2"),W2=a("a"),ene=a("span"),f(Sy.$$.fragment),dAo=l(),one=a("span"),cAo=o("AutoModelForMultipleChoice"),Jke=l(),rr=a("div"),f(Py.$$.fragment),fAo=l(),pd=a("p"),mAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rne=a("code"),gAo=o("from_pretrained()"),hAo=o("class method or the "),tne=a("code"),pAo=o("from_config()"),_Ao=o(`class
method.`),uAo=l(),$y=a("p"),bAo=o("This class cannot be instantiated directly using "),ane=a("code"),vAo=o("__init__()"),TAo=o(" (throws an error)."),FAo=l(),Jr=a("div"),f(Iy.$$.fragment),CAo=l(),nne=a("p"),MAo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EAo=l(),_d=a("p"),yAo=o(`Note:
Loading a model from its configuration file does `),sne=a("strong"),wAo=o("not"),AAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lne=a("code"),LAo=o("from_pretrained()"),BAo=o("to load the model weights."),xAo=l(),ine=a("p"),kAo=o("Examples:"),RAo=l(),f(Ny.$$.fragment),SAo=l(),Xe=a("div"),f(jy.$$.fragment),PAo=l(),dne=a("p"),$Ao=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IAo=l(),Ja=a("p"),NAo=o("The model class to instantiate is selected based on the "),cne=a("code"),jAo=o("model_type"),DAo=o(` property of the config object (either
passed as an argument or loaded from `),fne=a("code"),qAo=o("pretrained_model_name_or_path"),GAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=a("code"),OAo=o("pretrained_model_name_or_path"),XAo=o(":"),VAo=l(),G=a("ul"),Q2=a("li"),gne=a("strong"),zAo=o("albert"),WAo=o(" \u2014 "),IN=a("a"),QAo=o("AlbertForMultipleChoice"),HAo=o(" (ALBERT model)"),UAo=l(),H2=a("li"),hne=a("strong"),JAo=o("bert"),YAo=o(" \u2014 "),NN=a("a"),KAo=o("BertForMultipleChoice"),ZAo=o(" (BERT model)"),e0o=l(),U2=a("li"),pne=a("strong"),o0o=o("big_bird"),r0o=o(" \u2014 "),jN=a("a"),t0o=o("BigBirdForMultipleChoice"),a0o=o(" (BigBird model)"),n0o=l(),J2=a("li"),_ne=a("strong"),s0o=o("camembert"),l0o=o(" \u2014 "),DN=a("a"),i0o=o("CamembertForMultipleChoice"),d0o=o(" (CamemBERT model)"),c0o=l(),Y2=a("li"),une=a("strong"),f0o=o("canine"),m0o=o(" \u2014 "),qN=a("a"),g0o=o("CanineForMultipleChoice"),h0o=o(" (Canine model)"),p0o=l(),K2=a("li"),bne=a("strong"),_0o=o("convbert"),u0o=o(" \u2014 "),GN=a("a"),b0o=o("ConvBertForMultipleChoice"),v0o=o(" (ConvBERT model)"),T0o=l(),Z2=a("li"),vne=a("strong"),F0o=o("data2vec-text"),C0o=o(" \u2014 "),ON=a("a"),M0o=o("Data2VecTextForMultipleChoice"),E0o=o(" (Data2VecText model)"),y0o=l(),e1=a("li"),Tne=a("strong"),w0o=o("distilbert"),A0o=o(" \u2014 "),XN=a("a"),L0o=o("DistilBertForMultipleChoice"),B0o=o(" (DistilBERT model)"),x0o=l(),o1=a("li"),Fne=a("strong"),k0o=o("electra"),R0o=o(" \u2014 "),VN=a("a"),S0o=o("ElectraForMultipleChoice"),P0o=o(" (ELECTRA model)"),$0o=l(),r1=a("li"),Cne=a("strong"),I0o=o("flaubert"),N0o=o(" \u2014 "),zN=a("a"),j0o=o("FlaubertForMultipleChoice"),D0o=o(" (FlauBERT model)"),q0o=l(),t1=a("li"),Mne=a("strong"),G0o=o("fnet"),O0o=o(" \u2014 "),WN=a("a"),X0o=o("FNetForMultipleChoice"),V0o=o(" (FNet model)"),z0o=l(),a1=a("li"),Ene=a("strong"),W0o=o("funnel"),Q0o=o(" \u2014 "),QN=a("a"),H0o=o("FunnelForMultipleChoice"),U0o=o(" (Funnel Transformer model)"),J0o=l(),n1=a("li"),yne=a("strong"),Y0o=o("ibert"),K0o=o(" \u2014 "),HN=a("a"),Z0o=o("IBertForMultipleChoice"),eLo=o(" (I-BERT model)"),oLo=l(),s1=a("li"),wne=a("strong"),rLo=o("longformer"),tLo=o(" \u2014 "),UN=a("a"),aLo=o("LongformerForMultipleChoice"),nLo=o(" (Longformer model)"),sLo=l(),l1=a("li"),Ane=a("strong"),lLo=o("megatron-bert"),iLo=o(" \u2014 "),JN=a("a"),dLo=o("MegatronBertForMultipleChoice"),cLo=o(" (MegatronBert model)"),fLo=l(),i1=a("li"),Lne=a("strong"),mLo=o("mobilebert"),gLo=o(" \u2014 "),YN=a("a"),hLo=o("MobileBertForMultipleChoice"),pLo=o(" (MobileBERT model)"),_Lo=l(),d1=a("li"),Bne=a("strong"),uLo=o("mpnet"),bLo=o(" \u2014 "),KN=a("a"),vLo=o("MPNetForMultipleChoice"),TLo=o(" (MPNet model)"),FLo=l(),c1=a("li"),xne=a("strong"),CLo=o("nystromformer"),MLo=o(" \u2014 "),ZN=a("a"),ELo=o("NystromformerForMultipleChoice"),yLo=o(" (Nystromformer model)"),wLo=l(),f1=a("li"),kne=a("strong"),ALo=o("qdqbert"),LLo=o(" \u2014 "),ej=a("a"),BLo=o("QDQBertForMultipleChoice"),xLo=o(" (QDQBert model)"),kLo=l(),m1=a("li"),Rne=a("strong"),RLo=o("rembert"),SLo=o(" \u2014 "),oj=a("a"),PLo=o("RemBertForMultipleChoice"),$Lo=o(" (RemBERT model)"),ILo=l(),g1=a("li"),Sne=a("strong"),NLo=o("roberta"),jLo=o(" \u2014 "),rj=a("a"),DLo=o("RobertaForMultipleChoice"),qLo=o(" (RoBERTa model)"),GLo=l(),h1=a("li"),Pne=a("strong"),OLo=o("roformer"),XLo=o(" \u2014 "),tj=a("a"),VLo=o("RoFormerForMultipleChoice"),zLo=o(" (RoFormer model)"),WLo=l(),p1=a("li"),$ne=a("strong"),QLo=o("squeezebert"),HLo=o(" \u2014 "),aj=a("a"),ULo=o("SqueezeBertForMultipleChoice"),JLo=o(" (SqueezeBERT model)"),YLo=l(),_1=a("li"),Ine=a("strong"),KLo=o("xlm"),ZLo=o(" \u2014 "),nj=a("a"),e7o=o("XLMForMultipleChoice"),o7o=o(" (XLM model)"),r7o=l(),u1=a("li"),Nne=a("strong"),t7o=o("xlm-roberta"),a7o=o(" \u2014 "),sj=a("a"),n7o=o("XLMRobertaForMultipleChoice"),s7o=o(" (XLM-RoBERTa model)"),l7o=l(),b1=a("li"),jne=a("strong"),i7o=o("xlm-roberta-xl"),d7o=o(" \u2014 "),lj=a("a"),c7o=o("XLMRobertaXLForMultipleChoice"),f7o=o(" (XLM-RoBERTa-XL model)"),m7o=l(),v1=a("li"),Dne=a("strong"),g7o=o("xlnet"),h7o=o(" \u2014 "),ij=a("a"),p7o=o("XLNetForMultipleChoice"),_7o=o(" (XLNet model)"),u7o=l(),T1=a("li"),qne=a("strong"),b7o=o("yoso"),v7o=o(" \u2014 "),dj=a("a"),T7o=o("YosoForMultipleChoice"),F7o=o(" (YOSO model)"),C7o=l(),F1=a("p"),M7o=o("The model is set in evaluation mode by default using "),Gne=a("code"),E7o=o("model.eval()"),y7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=a("code"),w7o=o("model.train()"),A7o=l(),Xne=a("p"),L7o=o("Examples:"),B7o=l(),f(Dy.$$.fragment),Yke=l(),ud=a("h2"),C1=a("a"),Vne=a("span"),f(qy.$$.fragment),x7o=l(),zne=a("span"),k7o=o("AutoModelForNextSentencePrediction"),Kke=l(),tr=a("div"),f(Gy.$$.fragment),R7o=l(),bd=a("p"),S7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Wne=a("code"),P7o=o("from_pretrained()"),$7o=o("class method or the "),Qne=a("code"),I7o=o("from_config()"),N7o=o(`class
method.`),j7o=l(),Oy=a("p"),D7o=o("This class cannot be instantiated directly using "),Hne=a("code"),q7o=o("__init__()"),G7o=o(" (throws an error)."),O7o=l(),Yr=a("div"),f(Xy.$$.fragment),X7o=l(),Une=a("p"),V7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),z7o=l(),vd=a("p"),W7o=o(`Note:
Loading a model from its configuration file does `),Jne=a("strong"),Q7o=o("not"),H7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yne=a("code"),U7o=o("from_pretrained()"),J7o=o("to load the model weights."),Y7o=l(),Kne=a("p"),K7o=o("Examples:"),Z7o=l(),f(Vy.$$.fragment),e8o=l(),Ve=a("div"),f(zy.$$.fragment),o8o=l(),Zne=a("p"),r8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),t8o=l(),Ya=a("p"),a8o=o("The model class to instantiate is selected based on the "),ese=a("code"),n8o=o("model_type"),s8o=o(` property of the config object (either
passed as an argument or loaded from `),ose=a("code"),l8o=o("pretrained_model_name_or_path"),i8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=a("code"),d8o=o("pretrained_model_name_or_path"),c8o=o(":"),f8o=l(),da=a("ul"),M1=a("li"),tse=a("strong"),m8o=o("bert"),g8o=o(" \u2014 "),cj=a("a"),h8o=o("BertForNextSentencePrediction"),p8o=o(" (BERT model)"),_8o=l(),E1=a("li"),ase=a("strong"),u8o=o("fnet"),b8o=o(" \u2014 "),fj=a("a"),v8o=o("FNetForNextSentencePrediction"),T8o=o(" (FNet model)"),F8o=l(),y1=a("li"),nse=a("strong"),C8o=o("megatron-bert"),M8o=o(" \u2014 "),mj=a("a"),E8o=o("MegatronBertForNextSentencePrediction"),y8o=o(" (MegatronBert model)"),w8o=l(),w1=a("li"),sse=a("strong"),A8o=o("mobilebert"),L8o=o(" \u2014 "),gj=a("a"),B8o=o("MobileBertForNextSentencePrediction"),x8o=o(" (MobileBERT model)"),k8o=l(),A1=a("li"),lse=a("strong"),R8o=o("qdqbert"),S8o=o(" \u2014 "),hj=a("a"),P8o=o("QDQBertForNextSentencePrediction"),$8o=o(" (QDQBert model)"),I8o=l(),L1=a("p"),N8o=o("The model is set in evaluation mode by default using "),ise=a("code"),j8o=o("model.eval()"),D8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dse=a("code"),q8o=o("model.train()"),G8o=l(),cse=a("p"),O8o=o("Examples:"),X8o=l(),f(Wy.$$.fragment),Zke=l(),Td=a("h2"),B1=a("a"),fse=a("span"),f(Qy.$$.fragment),V8o=l(),mse=a("span"),z8o=o("AutoModelForTokenClassification"),eRe=l(),ar=a("div"),f(Hy.$$.fragment),W8o=l(),Fd=a("p"),Q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gse=a("code"),H8o=o("from_pretrained()"),U8o=o("class method or the "),hse=a("code"),J8o=o("from_config()"),Y8o=o(`class
method.`),K8o=l(),Uy=a("p"),Z8o=o("This class cannot be instantiated directly using "),pse=a("code"),e9o=o("__init__()"),o9o=o(" (throws an error)."),r9o=l(),Kr=a("div"),f(Jy.$$.fragment),t9o=l(),_se=a("p"),a9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n9o=l(),Cd=a("p"),s9o=o(`Note:
Loading a model from its configuration file does `),use=a("strong"),l9o=o("not"),i9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bse=a("code"),d9o=o("from_pretrained()"),c9o=o("to load the model weights."),f9o=l(),vse=a("p"),m9o=o("Examples:"),g9o=l(),f(Yy.$$.fragment),h9o=l(),ze=a("div"),f(Ky.$$.fragment),p9o=l(),Tse=a("p"),_9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u9o=l(),Ka=a("p"),b9o=o("The model class to instantiate is selected based on the "),Fse=a("code"),v9o=o("model_type"),T9o=o(` property of the config object (either
passed as an argument or loaded from `),Cse=a("code"),F9o=o("pretrained_model_name_or_path"),C9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=a("code"),M9o=o("pretrained_model_name_or_path"),E9o=o(":"),y9o=l(),D=a("ul"),x1=a("li"),Ese=a("strong"),w9o=o("albert"),A9o=o(" \u2014 "),pj=a("a"),L9o=o("AlbertForTokenClassification"),B9o=o(" (ALBERT model)"),x9o=l(),k1=a("li"),yse=a("strong"),k9o=o("bert"),R9o=o(" \u2014 "),_j=a("a"),S9o=o("BertForTokenClassification"),P9o=o(" (BERT model)"),$9o=l(),R1=a("li"),wse=a("strong"),I9o=o("big_bird"),N9o=o(" \u2014 "),uj=a("a"),j9o=o("BigBirdForTokenClassification"),D9o=o(" (BigBird model)"),q9o=l(),S1=a("li"),Ase=a("strong"),G9o=o("camembert"),O9o=o(" \u2014 "),bj=a("a"),X9o=o("CamembertForTokenClassification"),V9o=o(" (CamemBERT model)"),z9o=l(),P1=a("li"),Lse=a("strong"),W9o=o("canine"),Q9o=o(" \u2014 "),vj=a("a"),H9o=o("CanineForTokenClassification"),U9o=o(" (Canine model)"),J9o=l(),$1=a("li"),Bse=a("strong"),Y9o=o("convbert"),K9o=o(" \u2014 "),Tj=a("a"),Z9o=o("ConvBertForTokenClassification"),eBo=o(" (ConvBERT model)"),oBo=l(),I1=a("li"),xse=a("strong"),rBo=o("data2vec-text"),tBo=o(" \u2014 "),Fj=a("a"),aBo=o("Data2VecTextForTokenClassification"),nBo=o(" (Data2VecText model)"),sBo=l(),N1=a("li"),kse=a("strong"),lBo=o("deberta"),iBo=o(" \u2014 "),Cj=a("a"),dBo=o("DebertaForTokenClassification"),cBo=o(" (DeBERTa model)"),fBo=l(),j1=a("li"),Rse=a("strong"),mBo=o("deberta-v2"),gBo=o(" \u2014 "),Mj=a("a"),hBo=o("DebertaV2ForTokenClassification"),pBo=o(" (DeBERTa-v2 model)"),_Bo=l(),D1=a("li"),Sse=a("strong"),uBo=o("distilbert"),bBo=o(" \u2014 "),Ej=a("a"),vBo=o("DistilBertForTokenClassification"),TBo=o(" (DistilBERT model)"),FBo=l(),q1=a("li"),Pse=a("strong"),CBo=o("electra"),MBo=o(" \u2014 "),yj=a("a"),EBo=o("ElectraForTokenClassification"),yBo=o(" (ELECTRA model)"),wBo=l(),G1=a("li"),$se=a("strong"),ABo=o("flaubert"),LBo=o(" \u2014 "),wj=a("a"),BBo=o("FlaubertForTokenClassification"),xBo=o(" (FlauBERT model)"),kBo=l(),O1=a("li"),Ise=a("strong"),RBo=o("fnet"),SBo=o(" \u2014 "),Aj=a("a"),PBo=o("FNetForTokenClassification"),$Bo=o(" (FNet model)"),IBo=l(),X1=a("li"),Nse=a("strong"),NBo=o("funnel"),jBo=o(" \u2014 "),Lj=a("a"),DBo=o("FunnelForTokenClassification"),qBo=o(" (Funnel Transformer model)"),GBo=l(),V1=a("li"),jse=a("strong"),OBo=o("gpt2"),XBo=o(" \u2014 "),Bj=a("a"),VBo=o("GPT2ForTokenClassification"),zBo=o(" (OpenAI GPT-2 model)"),WBo=l(),z1=a("li"),Dse=a("strong"),QBo=o("ibert"),HBo=o(" \u2014 "),xj=a("a"),UBo=o("IBertForTokenClassification"),JBo=o(" (I-BERT model)"),YBo=l(),W1=a("li"),qse=a("strong"),KBo=o("layoutlm"),ZBo=o(" \u2014 "),kj=a("a"),exo=o("LayoutLMForTokenClassification"),oxo=o(" (LayoutLM model)"),rxo=l(),Q1=a("li"),Gse=a("strong"),txo=o("layoutlmv2"),axo=o(" \u2014 "),Rj=a("a"),nxo=o("LayoutLMv2ForTokenClassification"),sxo=o(" (LayoutLMv2 model)"),lxo=l(),H1=a("li"),Ose=a("strong"),ixo=o("longformer"),dxo=o(" \u2014 "),Sj=a("a"),cxo=o("LongformerForTokenClassification"),fxo=o(" (Longformer model)"),mxo=l(),U1=a("li"),Xse=a("strong"),gxo=o("megatron-bert"),hxo=o(" \u2014 "),Pj=a("a"),pxo=o("MegatronBertForTokenClassification"),_xo=o(" (MegatronBert model)"),uxo=l(),J1=a("li"),Vse=a("strong"),bxo=o("mobilebert"),vxo=o(" \u2014 "),$j=a("a"),Txo=o("MobileBertForTokenClassification"),Fxo=o(" (MobileBERT model)"),Cxo=l(),Y1=a("li"),zse=a("strong"),Mxo=o("mpnet"),Exo=o(" \u2014 "),Ij=a("a"),yxo=o("MPNetForTokenClassification"),wxo=o(" (MPNet model)"),Axo=l(),K1=a("li"),Wse=a("strong"),Lxo=o("nystromformer"),Bxo=o(" \u2014 "),Nj=a("a"),xxo=o("NystromformerForTokenClassification"),kxo=o(" (Nystromformer model)"),Rxo=l(),Z1=a("li"),Qse=a("strong"),Sxo=o("qdqbert"),Pxo=o(" \u2014 "),jj=a("a"),$xo=o("QDQBertForTokenClassification"),Ixo=o(" (QDQBert model)"),Nxo=l(),eb=a("li"),Hse=a("strong"),jxo=o("rembert"),Dxo=o(" \u2014 "),Dj=a("a"),qxo=o("RemBertForTokenClassification"),Gxo=o(" (RemBERT model)"),Oxo=l(),ob=a("li"),Use=a("strong"),Xxo=o("roberta"),Vxo=o(" \u2014 "),qj=a("a"),zxo=o("RobertaForTokenClassification"),Wxo=o(" (RoBERTa model)"),Qxo=l(),rb=a("li"),Jse=a("strong"),Hxo=o("roformer"),Uxo=o(" \u2014 "),Gj=a("a"),Jxo=o("RoFormerForTokenClassification"),Yxo=o(" (RoFormer model)"),Kxo=l(),tb=a("li"),Yse=a("strong"),Zxo=o("squeezebert"),eko=o(" \u2014 "),Oj=a("a"),oko=o("SqueezeBertForTokenClassification"),rko=o(" (SqueezeBERT model)"),tko=l(),ab=a("li"),Kse=a("strong"),ako=o("xlm"),nko=o(" \u2014 "),Xj=a("a"),sko=o("XLMForTokenClassification"),lko=o(" (XLM model)"),iko=l(),nb=a("li"),Zse=a("strong"),dko=o("xlm-roberta"),cko=o(" \u2014 "),Vj=a("a"),fko=o("XLMRobertaForTokenClassification"),mko=o(" (XLM-RoBERTa model)"),gko=l(),sb=a("li"),ele=a("strong"),hko=o("xlm-roberta-xl"),pko=o(" \u2014 "),zj=a("a"),_ko=o("XLMRobertaXLForTokenClassification"),uko=o(" (XLM-RoBERTa-XL model)"),bko=l(),lb=a("li"),ole=a("strong"),vko=o("xlnet"),Tko=o(" \u2014 "),Wj=a("a"),Fko=o("XLNetForTokenClassification"),Cko=o(" (XLNet model)"),Mko=l(),ib=a("li"),rle=a("strong"),Eko=o("yoso"),yko=o(" \u2014 "),Qj=a("a"),wko=o("YosoForTokenClassification"),Ako=o(" (YOSO model)"),Lko=l(),db=a("p"),Bko=o("The model is set in evaluation mode by default using "),tle=a("code"),xko=o("model.eval()"),kko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ale=a("code"),Rko=o("model.train()"),Sko=l(),nle=a("p"),Pko=o("Examples:"),$ko=l(),f(Zy.$$.fragment),oRe=l(),Md=a("h2"),cb=a("a"),sle=a("span"),f(ew.$$.fragment),Iko=l(),lle=a("span"),Nko=o("AutoModelForQuestionAnswering"),rRe=l(),nr=a("div"),f(ow.$$.fragment),jko=l(),Ed=a("p"),Dko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ile=a("code"),qko=o("from_pretrained()"),Gko=o("class method or the "),dle=a("code"),Oko=o("from_config()"),Xko=o(`class
method.`),Vko=l(),rw=a("p"),zko=o("This class cannot be instantiated directly using "),cle=a("code"),Wko=o("__init__()"),Qko=o(" (throws an error)."),Hko=l(),Zr=a("div"),f(tw.$$.fragment),Uko=l(),fle=a("p"),Jko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Yko=l(),yd=a("p"),Kko=o(`Note:
Loading a model from its configuration file does `),mle=a("strong"),Zko=o("not"),eRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gle=a("code"),oRo=o("from_pretrained()"),rRo=o("to load the model weights."),tRo=l(),hle=a("p"),aRo=o("Examples:"),nRo=l(),f(aw.$$.fragment),sRo=l(),We=a("div"),f(nw.$$.fragment),lRo=l(),ple=a("p"),iRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dRo=l(),Za=a("p"),cRo=o("The model class to instantiate is selected based on the "),_le=a("code"),fRo=o("model_type"),mRo=o(` property of the config object (either
passed as an argument or loaded from `),ule=a("code"),gRo=o("pretrained_model_name_or_path"),hRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=a("code"),pRo=o("pretrained_model_name_or_path"),_Ro=o(":"),uRo=l(),R=a("ul"),fb=a("li"),vle=a("strong"),bRo=o("albert"),vRo=o(" \u2014 "),Hj=a("a"),TRo=o("AlbertForQuestionAnswering"),FRo=o(" (ALBERT model)"),CRo=l(),mb=a("li"),Tle=a("strong"),MRo=o("bart"),ERo=o(" \u2014 "),Uj=a("a"),yRo=o("BartForQuestionAnswering"),wRo=o(" (BART model)"),ARo=l(),gb=a("li"),Fle=a("strong"),LRo=o("bert"),BRo=o(" \u2014 "),Jj=a("a"),xRo=o("BertForQuestionAnswering"),kRo=o(" (BERT model)"),RRo=l(),hb=a("li"),Cle=a("strong"),SRo=o("big_bird"),PRo=o(" \u2014 "),Yj=a("a"),$Ro=o("BigBirdForQuestionAnswering"),IRo=o(" (BigBird model)"),NRo=l(),pb=a("li"),Mle=a("strong"),jRo=o("bigbird_pegasus"),DRo=o(" \u2014 "),Kj=a("a"),qRo=o("BigBirdPegasusForQuestionAnswering"),GRo=o(" (BigBirdPegasus model)"),ORo=l(),_b=a("li"),Ele=a("strong"),XRo=o("camembert"),VRo=o(" \u2014 "),Zj=a("a"),zRo=o("CamembertForQuestionAnswering"),WRo=o(" (CamemBERT model)"),QRo=l(),ub=a("li"),yle=a("strong"),HRo=o("canine"),URo=o(" \u2014 "),eD=a("a"),JRo=o("CanineForQuestionAnswering"),YRo=o(" (Canine model)"),KRo=l(),bb=a("li"),wle=a("strong"),ZRo=o("convbert"),eSo=o(" \u2014 "),oD=a("a"),oSo=o("ConvBertForQuestionAnswering"),rSo=o(" (ConvBERT model)"),tSo=l(),vb=a("li"),Ale=a("strong"),aSo=o("data2vec-text"),nSo=o(" \u2014 "),rD=a("a"),sSo=o("Data2VecTextForQuestionAnswering"),lSo=o(" (Data2VecText model)"),iSo=l(),Tb=a("li"),Lle=a("strong"),dSo=o("deberta"),cSo=o(" \u2014 "),tD=a("a"),fSo=o("DebertaForQuestionAnswering"),mSo=o(" (DeBERTa model)"),gSo=l(),Fb=a("li"),Ble=a("strong"),hSo=o("deberta-v2"),pSo=o(" \u2014 "),aD=a("a"),_So=o("DebertaV2ForQuestionAnswering"),uSo=o(" (DeBERTa-v2 model)"),bSo=l(),Cb=a("li"),xle=a("strong"),vSo=o("distilbert"),TSo=o(" \u2014 "),nD=a("a"),FSo=o("DistilBertForQuestionAnswering"),CSo=o(" (DistilBERT model)"),MSo=l(),Mb=a("li"),kle=a("strong"),ESo=o("electra"),ySo=o(" \u2014 "),sD=a("a"),wSo=o("ElectraForQuestionAnswering"),ASo=o(" (ELECTRA model)"),LSo=l(),Eb=a("li"),Rle=a("strong"),BSo=o("flaubert"),xSo=o(" \u2014 "),lD=a("a"),kSo=o("FlaubertForQuestionAnsweringSimple"),RSo=o(" (FlauBERT model)"),SSo=l(),yb=a("li"),Sle=a("strong"),PSo=o("fnet"),$So=o(" \u2014 "),iD=a("a"),ISo=o("FNetForQuestionAnswering"),NSo=o(" (FNet model)"),jSo=l(),wb=a("li"),Ple=a("strong"),DSo=o("funnel"),qSo=o(" \u2014 "),dD=a("a"),GSo=o("FunnelForQuestionAnswering"),OSo=o(" (Funnel Transformer model)"),XSo=l(),Ab=a("li"),$le=a("strong"),VSo=o("gptj"),zSo=o(" \u2014 "),cD=a("a"),WSo=o("GPTJForQuestionAnswering"),QSo=o(" (GPT-J model)"),HSo=l(),Lb=a("li"),Ile=a("strong"),USo=o("ibert"),JSo=o(" \u2014 "),fD=a("a"),YSo=o("IBertForQuestionAnswering"),KSo=o(" (I-BERT model)"),ZSo=l(),Bb=a("li"),Nle=a("strong"),ePo=o("layoutlmv2"),oPo=o(" \u2014 "),mD=a("a"),rPo=o("LayoutLMv2ForQuestionAnswering"),tPo=o(" (LayoutLMv2 model)"),aPo=l(),xb=a("li"),jle=a("strong"),nPo=o("led"),sPo=o(" \u2014 "),gD=a("a"),lPo=o("LEDForQuestionAnswering"),iPo=o(" (LED model)"),dPo=l(),kb=a("li"),Dle=a("strong"),cPo=o("longformer"),fPo=o(" \u2014 "),hD=a("a"),mPo=o("LongformerForQuestionAnswering"),gPo=o(" (Longformer model)"),hPo=l(),Rb=a("li"),qle=a("strong"),pPo=o("lxmert"),_Po=o(" \u2014 "),pD=a("a"),uPo=o("LxmertForQuestionAnswering"),bPo=o(" (LXMERT model)"),vPo=l(),Sb=a("li"),Gle=a("strong"),TPo=o("mbart"),FPo=o(" \u2014 "),_D=a("a"),CPo=o("MBartForQuestionAnswering"),MPo=o(" (mBART model)"),EPo=l(),Pb=a("li"),Ole=a("strong"),yPo=o("megatron-bert"),wPo=o(" \u2014 "),uD=a("a"),APo=o("MegatronBertForQuestionAnswering"),LPo=o(" (MegatronBert model)"),BPo=l(),$b=a("li"),Xle=a("strong"),xPo=o("mobilebert"),kPo=o(" \u2014 "),bD=a("a"),RPo=o("MobileBertForQuestionAnswering"),SPo=o(" (MobileBERT model)"),PPo=l(),Ib=a("li"),Vle=a("strong"),$Po=o("mpnet"),IPo=o(" \u2014 "),vD=a("a"),NPo=o("MPNetForQuestionAnswering"),jPo=o(" (MPNet model)"),DPo=l(),Nb=a("li"),zle=a("strong"),qPo=o("nystromformer"),GPo=o(" \u2014 "),TD=a("a"),OPo=o("NystromformerForQuestionAnswering"),XPo=o(" (Nystromformer model)"),VPo=l(),jb=a("li"),Wle=a("strong"),zPo=o("qdqbert"),WPo=o(" \u2014 "),FD=a("a"),QPo=o("QDQBertForQuestionAnswering"),HPo=o(" (QDQBert model)"),UPo=l(),Db=a("li"),Qle=a("strong"),JPo=o("reformer"),YPo=o(" \u2014 "),CD=a("a"),KPo=o("ReformerForQuestionAnswering"),ZPo=o(" (Reformer model)"),e$o=l(),qb=a("li"),Hle=a("strong"),o$o=o("rembert"),r$o=o(" \u2014 "),MD=a("a"),t$o=o("RemBertForQuestionAnswering"),a$o=o(" (RemBERT model)"),n$o=l(),Gb=a("li"),Ule=a("strong"),s$o=o("roberta"),l$o=o(" \u2014 "),ED=a("a"),i$o=o("RobertaForQuestionAnswering"),d$o=o(" (RoBERTa model)"),c$o=l(),Ob=a("li"),Jle=a("strong"),f$o=o("roformer"),m$o=o(" \u2014 "),yD=a("a"),g$o=o("RoFormerForQuestionAnswering"),h$o=o(" (RoFormer model)"),p$o=l(),Xb=a("li"),Yle=a("strong"),_$o=o("splinter"),u$o=o(" \u2014 "),wD=a("a"),b$o=o("SplinterForQuestionAnswering"),v$o=o(" (Splinter model)"),T$o=l(),Vb=a("li"),Kle=a("strong"),F$o=o("squeezebert"),C$o=o(" \u2014 "),AD=a("a"),M$o=o("SqueezeBertForQuestionAnswering"),E$o=o(" (SqueezeBERT model)"),y$o=l(),zb=a("li"),Zle=a("strong"),w$o=o("xlm"),A$o=o(" \u2014 "),LD=a("a"),L$o=o("XLMForQuestionAnsweringSimple"),B$o=o(" (XLM model)"),x$o=l(),Wb=a("li"),eie=a("strong"),k$o=o("xlm-roberta"),R$o=o(" \u2014 "),BD=a("a"),S$o=o("XLMRobertaForQuestionAnswering"),P$o=o(" (XLM-RoBERTa model)"),$$o=l(),Qb=a("li"),oie=a("strong"),I$o=o("xlm-roberta-xl"),N$o=o(" \u2014 "),xD=a("a"),j$o=o("XLMRobertaXLForQuestionAnswering"),D$o=o(" (XLM-RoBERTa-XL model)"),q$o=l(),Hb=a("li"),rie=a("strong"),G$o=o("xlnet"),O$o=o(" \u2014 "),kD=a("a"),X$o=o("XLNetForQuestionAnsweringSimple"),V$o=o(" (XLNet model)"),z$o=l(),Ub=a("li"),tie=a("strong"),W$o=o("yoso"),Q$o=o(" \u2014 "),RD=a("a"),H$o=o("YosoForQuestionAnswering"),U$o=o(" (YOSO model)"),J$o=l(),Jb=a("p"),Y$o=o("The model is set in evaluation mode by default using "),aie=a("code"),K$o=o("model.eval()"),Z$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=a("code"),eIo=o("model.train()"),oIo=l(),sie=a("p"),rIo=o("Examples:"),tIo=l(),f(sw.$$.fragment),tRe=l(),wd=a("h2"),Yb=a("a"),lie=a("span"),f(lw.$$.fragment),aIo=l(),iie=a("span"),nIo=o("AutoModelForTableQuestionAnswering"),aRe=l(),sr=a("div"),f(iw.$$.fragment),sIo=l(),Ad=a("p"),lIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),die=a("code"),iIo=o("from_pretrained()"),dIo=o("class method or the "),cie=a("code"),cIo=o("from_config()"),fIo=o(`class
method.`),mIo=l(),dw=a("p"),gIo=o("This class cannot be instantiated directly using "),fie=a("code"),hIo=o("__init__()"),pIo=o(" (throws an error)."),_Io=l(),et=a("div"),f(cw.$$.fragment),uIo=l(),mie=a("p"),bIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vIo=l(),Ld=a("p"),TIo=o(`Note:
Loading a model from its configuration file does `),gie=a("strong"),FIo=o("not"),CIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hie=a("code"),MIo=o("from_pretrained()"),EIo=o("to load the model weights."),yIo=l(),pie=a("p"),wIo=o("Examples:"),AIo=l(),f(fw.$$.fragment),LIo=l(),Qe=a("div"),f(mw.$$.fragment),BIo=l(),_ie=a("p"),xIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kIo=l(),en=a("p"),RIo=o("The model class to instantiate is selected based on the "),uie=a("code"),SIo=o("model_type"),PIo=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),$Io=o("pretrained_model_name_or_path"),IIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=a("code"),NIo=o("pretrained_model_name_or_path"),jIo=o(":"),DIo=l(),Tie=a("ul"),Kb=a("li"),Fie=a("strong"),qIo=o("tapas"),GIo=o(" \u2014 "),SD=a("a"),OIo=o("TapasForQuestionAnswering"),XIo=o(" (TAPAS model)"),VIo=l(),Zb=a("p"),zIo=o("The model is set in evaluation mode by default using "),Cie=a("code"),WIo=o("model.eval()"),QIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mie=a("code"),HIo=o("model.train()"),UIo=l(),Eie=a("p"),JIo=o("Examples:"),YIo=l(),f(gw.$$.fragment),nRe=l(),Bd=a("h2"),ev=a("a"),yie=a("span"),f(hw.$$.fragment),KIo=l(),wie=a("span"),ZIo=o("AutoModelForImageClassification"),sRe=l(),lr=a("div"),f(pw.$$.fragment),eNo=l(),xd=a("p"),oNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Aie=a("code"),rNo=o("from_pretrained()"),tNo=o("class method or the "),Lie=a("code"),aNo=o("from_config()"),nNo=o(`class
method.`),sNo=l(),_w=a("p"),lNo=o("This class cannot be instantiated directly using "),Bie=a("code"),iNo=o("__init__()"),dNo=o(" (throws an error)."),cNo=l(),ot=a("div"),f(uw.$$.fragment),fNo=l(),xie=a("p"),mNo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gNo=l(),kd=a("p"),hNo=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),pNo=o("not"),_No=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rie=a("code"),uNo=o("from_pretrained()"),bNo=o("to load the model weights."),vNo=l(),Sie=a("p"),TNo=o("Examples:"),FNo=l(),f(bw.$$.fragment),CNo=l(),He=a("div"),f(vw.$$.fragment),MNo=l(),Pie=a("p"),ENo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yNo=l(),on=a("p"),wNo=o("The model class to instantiate is selected based on the "),$ie=a("code"),ANo=o("model_type"),LNo=o(` property of the config object (either
passed as an argument or loaded from `),Iie=a("code"),BNo=o("pretrained_model_name_or_path"),xNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=a("code"),kNo=o("pretrained_model_name_or_path"),RNo=o(":"),SNo=l(),ge=a("ul"),ov=a("li"),jie=a("strong"),PNo=o("beit"),$No=o(" \u2014 "),PD=a("a"),INo=o("BeitForImageClassification"),NNo=o(" (BEiT model)"),jNo=l(),rv=a("li"),Die=a("strong"),DNo=o("convnext"),qNo=o(" \u2014 "),$D=a("a"),GNo=o("ConvNextForImageClassification"),ONo=o(" (ConvNext model)"),XNo=l(),qs=a("li"),qie=a("strong"),VNo=o("deit"),zNo=o(" \u2014 "),ID=a("a"),WNo=o("DeiTForImageClassification"),QNo=o(" or "),ND=a("a"),HNo=o("DeiTForImageClassificationWithTeacher"),UNo=o(" (DeiT model)"),JNo=l(),tv=a("li"),Gie=a("strong"),YNo=o("imagegpt"),KNo=o(" \u2014 "),jD=a("a"),ZNo=o("ImageGPTForImageClassification"),ejo=o(" (ImageGPT model)"),ojo=l(),ma=a("li"),Oie=a("strong"),rjo=o("perceiver"),tjo=o(" \u2014 "),DD=a("a"),ajo=o("PerceiverForImageClassificationLearned"),njo=o(" or "),qD=a("a"),sjo=o("PerceiverForImageClassificationFourier"),ljo=o(" or "),GD=a("a"),ijo=o("PerceiverForImageClassificationConvProcessing"),djo=o(" (Perceiver model)"),cjo=l(),av=a("li"),Xie=a("strong"),fjo=o("poolformer"),mjo=o(" \u2014 "),OD=a("a"),gjo=o("PoolFormerForImageClassification"),hjo=o(" (PoolFormer model)"),pjo=l(),nv=a("li"),Vie=a("strong"),_jo=o("resnet"),ujo=o(" \u2014 "),XD=a("a"),bjo=o("ResNetForImageClassification"),vjo=o(" (ResNet model)"),Tjo=l(),sv=a("li"),zie=a("strong"),Fjo=o("segformer"),Cjo=o(" \u2014 "),VD=a("a"),Mjo=o("SegformerForImageClassification"),Ejo=o(" (SegFormer model)"),yjo=l(),lv=a("li"),Wie=a("strong"),wjo=o("swin"),Ajo=o(" \u2014 "),zD=a("a"),Ljo=o("SwinForImageClassification"),Bjo=o(" (Swin model)"),xjo=l(),iv=a("li"),Qie=a("strong"),kjo=o("van"),Rjo=o(" \u2014 "),WD=a("a"),Sjo=o("VanForImageClassification"),Pjo=o(" (VAN model)"),$jo=l(),dv=a("li"),Hie=a("strong"),Ijo=o("vit"),Njo=o(" \u2014 "),QD=a("a"),jjo=o("ViTForImageClassification"),Djo=o(" (ViT model)"),qjo=l(),cv=a("p"),Gjo=o("The model is set in evaluation mode by default using "),Uie=a("code"),Ojo=o("model.eval()"),Xjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),Vjo=o("model.train()"),zjo=l(),Yie=a("p"),Wjo=o("Examples:"),Qjo=l(),f(Tw.$$.fragment),lRe=l(),Rd=a("h2"),fv=a("a"),Kie=a("span"),f(Fw.$$.fragment),Hjo=l(),Zie=a("span"),Ujo=o("AutoModelForVision2Seq"),iRe=l(),ir=a("div"),f(Cw.$$.fragment),Jjo=l(),Sd=a("p"),Yjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ede=a("code"),Kjo=o("from_pretrained()"),Zjo=o("class method or the "),ode=a("code"),eDo=o("from_config()"),oDo=o(`class
method.`),rDo=l(),Mw=a("p"),tDo=o("This class cannot be instantiated directly using "),rde=a("code"),aDo=o("__init__()"),nDo=o(" (throws an error)."),sDo=l(),rt=a("div"),f(Ew.$$.fragment),lDo=l(),tde=a("p"),iDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dDo=l(),Pd=a("p"),cDo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),fDo=o("not"),mDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=a("code"),gDo=o("from_pretrained()"),hDo=o("to load the model weights."),pDo=l(),sde=a("p"),_Do=o("Examples:"),uDo=l(),f(yw.$$.fragment),bDo=l(),Ue=a("div"),f(ww.$$.fragment),vDo=l(),lde=a("p"),TDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FDo=l(),rn=a("p"),CDo=o("The model class to instantiate is selected based on the "),ide=a("code"),MDo=o("model_type"),EDo=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),yDo=o("pretrained_model_name_or_path"),wDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),ADo=o("pretrained_model_name_or_path"),LDo=o(":"),BDo=l(),fde=a("ul"),mv=a("li"),mde=a("strong"),xDo=o("vision-encoder-decoder"),kDo=o(" \u2014 "),HD=a("a"),RDo=o("VisionEncoderDecoderModel"),SDo=o(" (Vision Encoder decoder model)"),PDo=l(),gv=a("p"),$Do=o("The model is set in evaluation mode by default using "),gde=a("code"),IDo=o("model.eval()"),NDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=a("code"),jDo=o("model.train()"),DDo=l(),pde=a("p"),qDo=o("Examples:"),GDo=l(),f(Aw.$$.fragment),dRe=l(),$d=a("h2"),hv=a("a"),_de=a("span"),f(Lw.$$.fragment),ODo=l(),ude=a("span"),XDo=o("AutoModelForAudioClassification"),cRe=l(),dr=a("div"),f(Bw.$$.fragment),VDo=l(),Id=a("p"),zDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bde=a("code"),WDo=o("from_pretrained()"),QDo=o("class method or the "),vde=a("code"),HDo=o("from_config()"),UDo=o(`class
method.`),JDo=l(),xw=a("p"),YDo=o("This class cannot be instantiated directly using "),Tde=a("code"),KDo=o("__init__()"),ZDo=o(" (throws an error)."),eqo=l(),tt=a("div"),f(kw.$$.fragment),oqo=l(),Fde=a("p"),rqo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tqo=l(),Nd=a("p"),aqo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),nqo=o("not"),sqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=a("code"),lqo=o("from_pretrained()"),iqo=o("to load the model weights."),dqo=l(),Ede=a("p"),cqo=o("Examples:"),fqo=l(),f(Rw.$$.fragment),mqo=l(),Je=a("div"),f(Sw.$$.fragment),gqo=l(),yde=a("p"),hqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),pqo=l(),tn=a("p"),_qo=o("The model class to instantiate is selected based on the "),wde=a("code"),uqo=o("model_type"),bqo=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),vqo=o("pretrained_model_name_or_path"),Tqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),Fqo=o("pretrained_model_name_or_path"),Cqo=o(":"),Mqo=l(),ke=a("ul"),pv=a("li"),Bde=a("strong"),Eqo=o("data2vec-audio"),yqo=o(" \u2014 "),UD=a("a"),wqo=o("Data2VecAudioForSequenceClassification"),Aqo=o(" (Data2VecAudio model)"),Lqo=l(),_v=a("li"),xde=a("strong"),Bqo=o("hubert"),xqo=o(" \u2014 "),JD=a("a"),kqo=o("HubertForSequenceClassification"),Rqo=o(" (Hubert model)"),Sqo=l(),uv=a("li"),kde=a("strong"),Pqo=o("sew"),$qo=o(" \u2014 "),YD=a("a"),Iqo=o("SEWForSequenceClassification"),Nqo=o(" (SEW model)"),jqo=l(),bv=a("li"),Rde=a("strong"),Dqo=o("sew-d"),qqo=o(" \u2014 "),KD=a("a"),Gqo=o("SEWDForSequenceClassification"),Oqo=o(" (SEW-D model)"),Xqo=l(),vv=a("li"),Sde=a("strong"),Vqo=o("unispeech"),zqo=o(" \u2014 "),ZD=a("a"),Wqo=o("UniSpeechForSequenceClassification"),Qqo=o(" (UniSpeech model)"),Hqo=l(),Tv=a("li"),Pde=a("strong"),Uqo=o("unispeech-sat"),Jqo=o(" \u2014 "),eq=a("a"),Yqo=o("UniSpeechSatForSequenceClassification"),Kqo=o(" (UniSpeechSat model)"),Zqo=l(),Fv=a("li"),$de=a("strong"),eGo=o("wav2vec2"),oGo=o(" \u2014 "),oq=a("a"),rGo=o("Wav2Vec2ForSequenceClassification"),tGo=o(" (Wav2Vec2 model)"),aGo=l(),Cv=a("li"),Ide=a("strong"),nGo=o("wavlm"),sGo=o(" \u2014 "),rq=a("a"),lGo=o("WavLMForSequenceClassification"),iGo=o(" (WavLM model)"),dGo=l(),Mv=a("p"),cGo=o("The model is set in evaluation mode by default using "),Nde=a("code"),fGo=o("model.eval()"),mGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=a("code"),gGo=o("model.train()"),hGo=l(),Dde=a("p"),pGo=o("Examples:"),_Go=l(),f(Pw.$$.fragment),fRe=l(),jd=a("h2"),Ev=a("a"),qde=a("span"),f($w.$$.fragment),uGo=l(),Gde=a("span"),bGo=o("AutoModelForAudioFrameClassification"),mRe=l(),cr=a("div"),f(Iw.$$.fragment),vGo=l(),Dd=a("p"),TGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ode=a("code"),FGo=o("from_pretrained()"),CGo=o("class method or the "),Xde=a("code"),MGo=o("from_config()"),EGo=o(`class
method.`),yGo=l(),Nw=a("p"),wGo=o("This class cannot be instantiated directly using "),Vde=a("code"),AGo=o("__init__()"),LGo=o(" (throws an error)."),BGo=l(),at=a("div"),f(jw.$$.fragment),xGo=l(),zde=a("p"),kGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),RGo=l(),qd=a("p"),SGo=o(`Note:
Loading a model from its configuration file does `),Wde=a("strong"),PGo=o("not"),$Go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qde=a("code"),IGo=o("from_pretrained()"),NGo=o("to load the model weights."),jGo=l(),Hde=a("p"),DGo=o("Examples:"),qGo=l(),f(Dw.$$.fragment),GGo=l(),Ye=a("div"),f(qw.$$.fragment),OGo=l(),Ude=a("p"),XGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),VGo=l(),an=a("p"),zGo=o("The model class to instantiate is selected based on the "),Jde=a("code"),WGo=o("model_type"),QGo=o(` property of the config object (either
passed as an argument or loaded from `),Yde=a("code"),HGo=o("pretrained_model_name_or_path"),UGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kde=a("code"),JGo=o("pretrained_model_name_or_path"),YGo=o(":"),KGo=l(),nn=a("ul"),yv=a("li"),Zde=a("strong"),ZGo=o("data2vec-audio"),eOo=o(" \u2014 "),tq=a("a"),oOo=o("Data2VecAudioForAudioFrameClassification"),rOo=o(" (Data2VecAudio model)"),tOo=l(),wv=a("li"),ece=a("strong"),aOo=o("unispeech-sat"),nOo=o(" \u2014 "),aq=a("a"),sOo=o("UniSpeechSatForAudioFrameClassification"),lOo=o(" (UniSpeechSat model)"),iOo=l(),Av=a("li"),oce=a("strong"),dOo=o("wav2vec2"),cOo=o(" \u2014 "),nq=a("a"),fOo=o("Wav2Vec2ForAudioFrameClassification"),mOo=o(" (Wav2Vec2 model)"),gOo=l(),Lv=a("li"),rce=a("strong"),hOo=o("wavlm"),pOo=o(" \u2014 "),sq=a("a"),_Oo=o("WavLMForAudioFrameClassification"),uOo=o(" (WavLM model)"),bOo=l(),Bv=a("p"),vOo=o("The model is set in evaluation mode by default using "),tce=a("code"),TOo=o("model.eval()"),FOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),COo=o("model.train()"),MOo=l(),nce=a("p"),EOo=o("Examples:"),yOo=l(),f(Gw.$$.fragment),gRe=l(),Gd=a("h2"),xv=a("a"),sce=a("span"),f(Ow.$$.fragment),wOo=l(),lce=a("span"),AOo=o("AutoModelForCTC"),hRe=l(),fr=a("div"),f(Xw.$$.fragment),LOo=l(),Od=a("p"),BOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ice=a("code"),xOo=o("from_pretrained()"),kOo=o("class method or the "),dce=a("code"),ROo=o("from_config()"),SOo=o(`class
method.`),POo=l(),Vw=a("p"),$Oo=o("This class cannot be instantiated directly using "),cce=a("code"),IOo=o("__init__()"),NOo=o(" (throws an error)."),jOo=l(),nt=a("div"),f(zw.$$.fragment),DOo=l(),fce=a("p"),qOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),GOo=l(),Xd=a("p"),OOo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),XOo=o("not"),VOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=a("code"),zOo=o("from_pretrained()"),WOo=o("to load the model weights."),QOo=l(),hce=a("p"),HOo=o("Examples:"),UOo=l(),f(Ww.$$.fragment),JOo=l(),Ke=a("div"),f(Qw.$$.fragment),YOo=l(),pce=a("p"),KOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ZOo=l(),sn=a("p"),eXo=o("The model class to instantiate is selected based on the "),_ce=a("code"),oXo=o("model_type"),rXo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),tXo=o("pretrained_model_name_or_path"),aXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),nXo=o("pretrained_model_name_or_path"),sXo=o(":"),lXo=l(),Re=a("ul"),kv=a("li"),vce=a("strong"),iXo=o("data2vec-audio"),dXo=o(" \u2014 "),lq=a("a"),cXo=o("Data2VecAudioForCTC"),fXo=o(" (Data2VecAudio model)"),mXo=l(),Rv=a("li"),Tce=a("strong"),gXo=o("hubert"),hXo=o(" \u2014 "),iq=a("a"),pXo=o("HubertForCTC"),_Xo=o(" (Hubert model)"),uXo=l(),Sv=a("li"),Fce=a("strong"),bXo=o("sew"),vXo=o(" \u2014 "),dq=a("a"),TXo=o("SEWForCTC"),FXo=o(" (SEW model)"),CXo=l(),Pv=a("li"),Cce=a("strong"),MXo=o("sew-d"),EXo=o(" \u2014 "),cq=a("a"),yXo=o("SEWDForCTC"),wXo=o(" (SEW-D model)"),AXo=l(),$v=a("li"),Mce=a("strong"),LXo=o("unispeech"),BXo=o(" \u2014 "),fq=a("a"),xXo=o("UniSpeechForCTC"),kXo=o(" (UniSpeech model)"),RXo=l(),Iv=a("li"),Ece=a("strong"),SXo=o("unispeech-sat"),PXo=o(" \u2014 "),mq=a("a"),$Xo=o("UniSpeechSatForCTC"),IXo=o(" (UniSpeechSat model)"),NXo=l(),Nv=a("li"),yce=a("strong"),jXo=o("wav2vec2"),DXo=o(" \u2014 "),gq=a("a"),qXo=o("Wav2Vec2ForCTC"),GXo=o(" (Wav2Vec2 model)"),OXo=l(),jv=a("li"),wce=a("strong"),XXo=o("wavlm"),VXo=o(" \u2014 "),hq=a("a"),zXo=o("WavLMForCTC"),WXo=o(" (WavLM model)"),QXo=l(),Dv=a("p"),HXo=o("The model is set in evaluation mode by default using "),Ace=a("code"),UXo=o("model.eval()"),JXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),YXo=o("model.train()"),KXo=l(),Bce=a("p"),ZXo=o("Examples:"),eVo=l(),f(Hw.$$.fragment),pRe=l(),Vd=a("h2"),qv=a("a"),xce=a("span"),f(Uw.$$.fragment),oVo=l(),kce=a("span"),rVo=o("AutoModelForSpeechSeq2Seq"),_Re=l(),mr=a("div"),f(Jw.$$.fragment),tVo=l(),zd=a("p"),aVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rce=a("code"),nVo=o("from_pretrained()"),sVo=o("class method or the "),Sce=a("code"),lVo=o("from_config()"),iVo=o(`class
method.`),dVo=l(),Yw=a("p"),cVo=o("This class cannot be instantiated directly using "),Pce=a("code"),fVo=o("__init__()"),mVo=o(" (throws an error)."),gVo=l(),st=a("div"),f(Kw.$$.fragment),hVo=l(),$ce=a("p"),pVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_Vo=l(),Wd=a("p"),uVo=o(`Note:
Loading a model from its configuration file does `),Ice=a("strong"),bVo=o("not"),vVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=a("code"),TVo=o("from_pretrained()"),FVo=o("to load the model weights."),CVo=l(),jce=a("p"),MVo=o("Examples:"),EVo=l(),f(Zw.$$.fragment),yVo=l(),Ze=a("div"),f(eA.$$.fragment),wVo=l(),Dce=a("p"),AVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),LVo=l(),ln=a("p"),BVo=o("The model class to instantiate is selected based on the "),qce=a("code"),xVo=o("model_type"),kVo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),RVo=o("pretrained_model_name_or_path"),SVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),PVo=o("pretrained_model_name_or_path"),$Vo=o(":"),IVo=l(),oA=a("ul"),Gv=a("li"),Xce=a("strong"),NVo=o("speech-encoder-decoder"),jVo=o(" \u2014 "),pq=a("a"),DVo=o("SpeechEncoderDecoderModel"),qVo=o(" (Speech Encoder decoder model)"),GVo=l(),Ov=a("li"),Vce=a("strong"),OVo=o("speech_to_text"),XVo=o(" \u2014 "),_q=a("a"),VVo=o("Speech2TextForConditionalGeneration"),zVo=o(" (Speech2Text model)"),WVo=l(),Xv=a("p"),QVo=o("The model is set in evaluation mode by default using "),zce=a("code"),HVo=o("model.eval()"),UVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),JVo=o("model.train()"),YVo=l(),Qce=a("p"),KVo=o("Examples:"),ZVo=l(),f(rA.$$.fragment),uRe=l(),Qd=a("h2"),Vv=a("a"),Hce=a("span"),f(tA.$$.fragment),ezo=l(),Uce=a("span"),ozo=o("AutoModelForAudioXVector"),bRe=l(),gr=a("div"),f(aA.$$.fragment),rzo=l(),Hd=a("p"),tzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jce=a("code"),azo=o("from_pretrained()"),nzo=o("class method or the "),Yce=a("code"),szo=o("from_config()"),lzo=o(`class
method.`),izo=l(),nA=a("p"),dzo=o("This class cannot be instantiated directly using "),Kce=a("code"),czo=o("__init__()"),fzo=o(" (throws an error)."),mzo=l(),lt=a("div"),f(sA.$$.fragment),gzo=l(),Zce=a("p"),hzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pzo=l(),Ud=a("p"),_zo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),uzo=o("not"),bzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=a("code"),vzo=o("from_pretrained()"),Tzo=o("to load the model weights."),Fzo=l(),rfe=a("p"),Czo=o("Examples:"),Mzo=l(),f(lA.$$.fragment),Ezo=l(),eo=a("div"),f(iA.$$.fragment),yzo=l(),tfe=a("p"),wzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Azo=l(),dn=a("p"),Lzo=o("The model class to instantiate is selected based on the "),afe=a("code"),Bzo=o("model_type"),xzo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),kzo=o("pretrained_model_name_or_path"),Rzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),Szo=o("pretrained_model_name_or_path"),Pzo=o(":"),$zo=l(),cn=a("ul"),zv=a("li"),lfe=a("strong"),Izo=o("data2vec-audio"),Nzo=o(" \u2014 "),uq=a("a"),jzo=o("Data2VecAudioForXVector"),Dzo=o(" (Data2VecAudio model)"),qzo=l(),Wv=a("li"),ife=a("strong"),Gzo=o("unispeech-sat"),Ozo=o(" \u2014 "),bq=a("a"),Xzo=o("UniSpeechSatForXVector"),Vzo=o(" (UniSpeechSat model)"),zzo=l(),Qv=a("li"),dfe=a("strong"),Wzo=o("wav2vec2"),Qzo=o(" \u2014 "),vq=a("a"),Hzo=o("Wav2Vec2ForXVector"),Uzo=o(" (Wav2Vec2 model)"),Jzo=l(),Hv=a("li"),cfe=a("strong"),Yzo=o("wavlm"),Kzo=o(" \u2014 "),Tq=a("a"),Zzo=o("WavLMForXVector"),eWo=o(" (WavLM model)"),oWo=l(),Uv=a("p"),rWo=o("The model is set in evaluation mode by default using "),ffe=a("code"),tWo=o("model.eval()"),aWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=a("code"),nWo=o("model.train()"),sWo=l(),gfe=a("p"),lWo=o("Examples:"),iWo=l(),f(dA.$$.fragment),vRe=l(),Jd=a("h2"),Jv=a("a"),hfe=a("span"),f(cA.$$.fragment),dWo=l(),pfe=a("span"),cWo=o("AutoModelForMaskedImageModeling"),TRe=l(),hr=a("div"),f(fA.$$.fragment),fWo=l(),Yd=a("p"),mWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),_fe=a("code"),gWo=o("from_pretrained()"),hWo=o("class method or the "),ufe=a("code"),pWo=o("from_config()"),_Wo=o(`class
method.`),uWo=l(),mA=a("p"),bWo=o("This class cannot be instantiated directly using "),bfe=a("code"),vWo=o("__init__()"),TWo=o(" (throws an error)."),FWo=l(),it=a("div"),f(gA.$$.fragment),CWo=l(),vfe=a("p"),MWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),EWo=l(),Kd=a("p"),yWo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),wWo=o("not"),AWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ffe=a("code"),LWo=o("from_pretrained()"),BWo=o("to load the model weights."),xWo=l(),Cfe=a("p"),kWo=o("Examples:"),RWo=l(),f(hA.$$.fragment),SWo=l(),oo=a("div"),f(pA.$$.fragment),PWo=l(),Mfe=a("p"),$Wo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),IWo=l(),fn=a("p"),NWo=o("The model class to instantiate is selected based on the "),Efe=a("code"),jWo=o("model_type"),DWo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),qWo=o("pretrained_model_name_or_path"),GWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),OWo=o("pretrained_model_name_or_path"),XWo=o(":"),VWo=l(),Zd=a("ul"),Yv=a("li"),Afe=a("strong"),zWo=o("deit"),WWo=o(" \u2014 "),Fq=a("a"),QWo=o("DeiTForMaskedImageModeling"),HWo=o(" (DeiT model)"),UWo=l(),Kv=a("li"),Lfe=a("strong"),JWo=o("swin"),YWo=o(" \u2014 "),Cq=a("a"),KWo=o("SwinForMaskedImageModeling"),ZWo=o(" (Swin model)"),eQo=l(),Zv=a("li"),Bfe=a("strong"),oQo=o("vit"),rQo=o(" \u2014 "),Mq=a("a"),tQo=o("ViTForMaskedImageModeling"),aQo=o(" (ViT model)"),nQo=l(),e6=a("p"),sQo=o("The model is set in evaluation mode by default using "),xfe=a("code"),lQo=o("model.eval()"),iQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),dQo=o("model.train()"),cQo=l(),Rfe=a("p"),fQo=o("Examples:"),mQo=l(),f(_A.$$.fragment),FRe=l(),ec=a("h2"),o6=a("a"),Sfe=a("span"),f(uA.$$.fragment),gQo=l(),Pfe=a("span"),hQo=o("AutoModelForObjectDetection"),CRe=l(),pr=a("div"),f(bA.$$.fragment),pQo=l(),oc=a("p"),_Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$fe=a("code"),uQo=o("from_pretrained()"),bQo=o("class method or the "),Ife=a("code"),vQo=o("from_config()"),TQo=o(`class
method.`),FQo=l(),vA=a("p"),CQo=o("This class cannot be instantiated directly using "),Nfe=a("code"),MQo=o("__init__()"),EQo=o(" (throws an error)."),yQo=l(),dt=a("div"),f(TA.$$.fragment),wQo=l(),jfe=a("p"),AQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),LQo=l(),rc=a("p"),BQo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),xQo=o("not"),kQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=a("code"),RQo=o("from_pretrained()"),SQo=o("to load the model weights."),PQo=l(),Gfe=a("p"),$Qo=o("Examples:"),IQo=l(),f(FA.$$.fragment),NQo=l(),ro=a("div"),f(CA.$$.fragment),jQo=l(),Ofe=a("p"),DQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),qQo=l(),mn=a("p"),GQo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),OQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),VQo=o("pretrained_model_name_or_path"),zQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),WQo=o("pretrained_model_name_or_path"),QQo=o(":"),HQo=l(),Wfe=a("ul"),r6=a("li"),Qfe=a("strong"),UQo=o("detr"),JQo=o(" \u2014 "),Eq=a("a"),YQo=o("DetrForObjectDetection"),KQo=o(" (DETR model)"),ZQo=l(),t6=a("p"),eHo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),oHo=o("model.eval()"),rHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),tHo=o("model.train()"),aHo=l(),Jfe=a("p"),nHo=o("Examples:"),sHo=l(),f(MA.$$.fragment),MRe=l(),tc=a("h2"),a6=a("a"),Yfe=a("span"),f(EA.$$.fragment),lHo=l(),Kfe=a("span"),iHo=o("AutoModelForImageSegmentation"),ERe=l(),_r=a("div"),f(yA.$$.fragment),dHo=l(),ac=a("p"),cHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Zfe=a("code"),fHo=o("from_pretrained()"),mHo=o("class method or the "),eme=a("code"),gHo=o("from_config()"),hHo=o(`class
method.`),pHo=l(),wA=a("p"),_Ho=o("This class cannot be instantiated directly using "),ome=a("code"),uHo=o("__init__()"),bHo=o(" (throws an error)."),vHo=l(),ct=a("div"),f(AA.$$.fragment),THo=l(),rme=a("p"),FHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),CHo=l(),nc=a("p"),MHo=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),EHo=o("not"),yHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=a("code"),wHo=o("from_pretrained()"),AHo=o("to load the model weights."),LHo=l(),nme=a("p"),BHo=o("Examples:"),xHo=l(),f(LA.$$.fragment),kHo=l(),to=a("div"),f(BA.$$.fragment),RHo=l(),sme=a("p"),SHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),PHo=l(),gn=a("p"),$Ho=o("The model class to instantiate is selected based on the "),lme=a("code"),IHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),qHo=o("pretrained_model_name_or_path"),GHo=o(":"),OHo=l(),cme=a("ul"),n6=a("li"),fme=a("strong"),XHo=o("detr"),VHo=o(" \u2014 "),yq=a("a"),zHo=o("DetrForSegmentation"),WHo=o(" (DETR model)"),QHo=l(),s6=a("p"),HHo=o("The model is set in evaluation mode by default using "),mme=a("code"),UHo=o("model.eval()"),JHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),YHo=o("model.train()"),KHo=l(),hme=a("p"),ZHo=o("Examples:"),eUo=l(),f(xA.$$.fragment),yRe=l(),sc=a("h2"),l6=a("a"),pme=a("span"),f(kA.$$.fragment),oUo=l(),_me=a("span"),rUo=o("AutoModelForSemanticSegmentation"),wRe=l(),ur=a("div"),f(RA.$$.fragment),tUo=l(),lc=a("p"),aUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ume=a("code"),nUo=o("from_pretrained()"),sUo=o("class method or the "),bme=a("code"),lUo=o("from_config()"),iUo=o(`class
method.`),dUo=l(),SA=a("p"),cUo=o("This class cannot be instantiated directly using "),vme=a("code"),fUo=o("__init__()"),mUo=o(" (throws an error)."),gUo=l(),ft=a("div"),f(PA.$$.fragment),hUo=l(),Tme=a("p"),pUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),_Uo=l(),ic=a("p"),uUo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),bUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=a("code"),TUo=o("from_pretrained()"),FUo=o("to load the model weights."),CUo=l(),Mme=a("p"),MUo=o("Examples:"),EUo=l(),f($A.$$.fragment),yUo=l(),ao=a("div"),f(IA.$$.fragment),wUo=l(),Eme=a("p"),AUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),LUo=l(),hn=a("p"),BUo=o("The model class to instantiate is selected based on the "),yme=a("code"),xUo=o("model_type"),kUo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),RUo=o("pretrained_model_name_or_path"),SUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),PUo=o("pretrained_model_name_or_path"),$Uo=o(":"),IUo=l(),NA=a("ul"),i6=a("li"),Lme=a("strong"),NUo=o("beit"),jUo=o(" \u2014 "),wq=a("a"),DUo=o("BeitForSemanticSegmentation"),qUo=o(" (BEiT model)"),GUo=l(),d6=a("li"),Bme=a("strong"),OUo=o("segformer"),XUo=o(" \u2014 "),Aq=a("a"),VUo=o("SegformerForSemanticSegmentation"),zUo=o(" (SegFormer model)"),WUo=l(),c6=a("p"),QUo=o("The model is set in evaluation mode by default using "),xme=a("code"),HUo=o("model.eval()"),UUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),JUo=o("model.train()"),YUo=l(),Rme=a("p"),KUo=o("Examples:"),ZUo=l(),f(jA.$$.fragment),ARe=l(),dc=a("h2"),f6=a("a"),Sme=a("span"),f(DA.$$.fragment),eJo=l(),Pme=a("span"),oJo=o("AutoModelForInstanceSegmentation"),LRe=l(),br=a("div"),f(qA.$$.fragment),rJo=l(),cc=a("p"),tJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$me=a("code"),aJo=o("from_pretrained()"),nJo=o("class method or the "),Ime=a("code"),sJo=o("from_config()"),lJo=o(`class
method.`),iJo=l(),GA=a("p"),dJo=o("This class cannot be instantiated directly using "),Nme=a("code"),cJo=o("__init__()"),fJo=o(" (throws an error)."),mJo=l(),mt=a("div"),f(OA.$$.fragment),gJo=l(),jme=a("p"),hJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pJo=l(),fc=a("p"),_Jo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),uJo=o("not"),bJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=a("code"),vJo=o("from_pretrained()"),TJo=o("to load the model weights."),FJo=l(),Gme=a("p"),CJo=o("Examples:"),MJo=l(),f(XA.$$.fragment),EJo=l(),no=a("div"),f(VA.$$.fragment),yJo=l(),Ome=a("p"),wJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),AJo=l(),pn=a("p"),LJo=o("The model class to instantiate is selected based on the "),Xme=a("code"),BJo=o("model_type"),xJo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),kJo=o("pretrained_model_name_or_path"),RJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),SJo=o("pretrained_model_name_or_path"),PJo=o(":"),$Jo=l(),Wme=a("ul"),m6=a("li"),Qme=a("strong"),IJo=o("maskformer"),NJo=o(" \u2014 "),Lq=a("a"),jJo=o("MaskFormerForInstanceSegmentation"),DJo=o(" (MaskFormer model)"),qJo=l(),g6=a("p"),GJo=o("The model is set in evaluation mode by default using "),Hme=a("code"),OJo=o("model.eval()"),XJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),VJo=o("model.train()"),zJo=l(),Jme=a("p"),WJo=o("Examples:"),QJo=l(),f(zA.$$.fragment),BRe=l(),mc=a("h2"),h6=a("a"),Yme=a("span"),f(WA.$$.fragment),HJo=l(),Kme=a("span"),UJo=o("TFAutoModel"),xRe=l(),vr=a("div"),f(QA.$$.fragment),JJo=l(),gc=a("p"),YJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zme=a("code"),KJo=o("from_pretrained()"),ZJo=o("class method or the "),ege=a("code"),eYo=o("from_config()"),oYo=o(`class
method.`),rYo=l(),HA=a("p"),tYo=o("This class cannot be instantiated directly using "),oge=a("code"),aYo=o("__init__()"),nYo=o(" (throws an error)."),sYo=l(),gt=a("div"),f(UA.$$.fragment),lYo=l(),rge=a("p"),iYo=o("Instantiates one of the base model classes of the library from a configuration."),dYo=l(),hc=a("p"),cYo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),fYo=o("not"),mYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),age=a("code"),gYo=o("from_pretrained()"),hYo=o("to load the model weights."),pYo=l(),nge=a("p"),_Yo=o("Examples:"),uYo=l(),f(JA.$$.fragment),bYo=l(),ho=a("div"),f(YA.$$.fragment),vYo=l(),sge=a("p"),TYo=o("Instantiate one of the base model classes of the library from a pretrained model."),FYo=l(),_n=a("p"),CYo=o("The model class to instantiate is selected based on the "),lge=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),yYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),AYo=o("pretrained_model_name_or_path"),LYo=o(":"),BYo=l(),B=a("ul"),p6=a("li"),cge=a("strong"),xYo=o("albert"),kYo=o(" \u2014 "),Bq=a("a"),RYo=o("TFAlbertModel"),SYo=o(" (ALBERT model)"),PYo=l(),_6=a("li"),fge=a("strong"),$Yo=o("bart"),IYo=o(" \u2014 "),xq=a("a"),NYo=o("TFBartModel"),jYo=o(" (BART model)"),DYo=l(),u6=a("li"),mge=a("strong"),qYo=o("bert"),GYo=o(" \u2014 "),kq=a("a"),OYo=o("TFBertModel"),XYo=o(" (BERT model)"),VYo=l(),b6=a("li"),gge=a("strong"),zYo=o("blenderbot"),WYo=o(" \u2014 "),Rq=a("a"),QYo=o("TFBlenderbotModel"),HYo=o(" (Blenderbot model)"),UYo=l(),v6=a("li"),hge=a("strong"),JYo=o("blenderbot-small"),YYo=o(" \u2014 "),Sq=a("a"),KYo=o("TFBlenderbotSmallModel"),ZYo=o(" (BlenderbotSmall model)"),eKo=l(),T6=a("li"),pge=a("strong"),oKo=o("camembert"),rKo=o(" \u2014 "),Pq=a("a"),tKo=o("TFCamembertModel"),aKo=o(" (CamemBERT model)"),nKo=l(),F6=a("li"),_ge=a("strong"),sKo=o("clip"),lKo=o(" \u2014 "),$q=a("a"),iKo=o("TFCLIPModel"),dKo=o(" (CLIP model)"),cKo=l(),C6=a("li"),uge=a("strong"),fKo=o("convbert"),mKo=o(" \u2014 "),Iq=a("a"),gKo=o("TFConvBertModel"),hKo=o(" (ConvBERT model)"),pKo=l(),M6=a("li"),bge=a("strong"),_Ko=o("convnext"),uKo=o(" \u2014 "),Nq=a("a"),bKo=o("TFConvNextModel"),vKo=o(" (ConvNext model)"),TKo=l(),E6=a("li"),vge=a("strong"),FKo=o("ctrl"),CKo=o(" \u2014 "),jq=a("a"),MKo=o("TFCTRLModel"),EKo=o(" (CTRL model)"),yKo=l(),y6=a("li"),Tge=a("strong"),wKo=o("deberta"),AKo=o(" \u2014 "),Dq=a("a"),LKo=o("TFDebertaModel"),BKo=o(" (DeBERTa model)"),xKo=l(),w6=a("li"),Fge=a("strong"),kKo=o("deberta-v2"),RKo=o(" \u2014 "),qq=a("a"),SKo=o("TFDebertaV2Model"),PKo=o(" (DeBERTa-v2 model)"),$Ko=l(),A6=a("li"),Cge=a("strong"),IKo=o("distilbert"),NKo=o(" \u2014 "),Gq=a("a"),jKo=o("TFDistilBertModel"),DKo=o(" (DistilBERT model)"),qKo=l(),L6=a("li"),Mge=a("strong"),GKo=o("dpr"),OKo=o(" \u2014 "),Oq=a("a"),XKo=o("TFDPRQuestionEncoder"),VKo=o(" (DPR model)"),zKo=l(),B6=a("li"),Ege=a("strong"),WKo=o("electra"),QKo=o(" \u2014 "),Xq=a("a"),HKo=o("TFElectraModel"),UKo=o(" (ELECTRA model)"),JKo=l(),x6=a("li"),yge=a("strong"),YKo=o("flaubert"),KKo=o(" \u2014 "),Vq=a("a"),ZKo=o("TFFlaubertModel"),eZo=o(" (FlauBERT model)"),oZo=l(),Gs=a("li"),wge=a("strong"),rZo=o("funnel"),tZo=o(" \u2014 "),zq=a("a"),aZo=o("TFFunnelModel"),nZo=o(" or "),Wq=a("a"),sZo=o("TFFunnelBaseModel"),lZo=o(" (Funnel Transformer model)"),iZo=l(),k6=a("li"),Age=a("strong"),dZo=o("gpt2"),cZo=o(" \u2014 "),Qq=a("a"),fZo=o("TFGPT2Model"),mZo=o(" (OpenAI GPT-2 model)"),gZo=l(),R6=a("li"),Lge=a("strong"),hZo=o("gptj"),pZo=o(" \u2014 "),Hq=a("a"),_Zo=o("TFGPTJModel"),uZo=o(" (GPT-J model)"),bZo=l(),S6=a("li"),Bge=a("strong"),vZo=o("hubert"),TZo=o(" \u2014 "),Uq=a("a"),FZo=o("TFHubertModel"),CZo=o(" (Hubert model)"),MZo=l(),P6=a("li"),xge=a("strong"),EZo=o("layoutlm"),yZo=o(" \u2014 "),Jq=a("a"),wZo=o("TFLayoutLMModel"),AZo=o(" (LayoutLM model)"),LZo=l(),$6=a("li"),kge=a("strong"),BZo=o("led"),xZo=o(" \u2014 "),Yq=a("a"),kZo=o("TFLEDModel"),RZo=o(" (LED model)"),SZo=l(),I6=a("li"),Rge=a("strong"),PZo=o("longformer"),$Zo=o(" \u2014 "),Kq=a("a"),IZo=o("TFLongformerModel"),NZo=o(" (Longformer model)"),jZo=l(),N6=a("li"),Sge=a("strong"),DZo=o("lxmert"),qZo=o(" \u2014 "),Zq=a("a"),GZo=o("TFLxmertModel"),OZo=o(" (LXMERT model)"),XZo=l(),j6=a("li"),Pge=a("strong"),VZo=o("marian"),zZo=o(" \u2014 "),eG=a("a"),WZo=o("TFMarianModel"),QZo=o(" (Marian model)"),HZo=l(),D6=a("li"),$ge=a("strong"),UZo=o("mbart"),JZo=o(" \u2014 "),oG=a("a"),YZo=o("TFMBartModel"),KZo=o(" (mBART model)"),ZZo=l(),q6=a("li"),Ige=a("strong"),eer=o("mobilebert"),oer=o(" \u2014 "),rG=a("a"),rer=o("TFMobileBertModel"),ter=o(" (MobileBERT model)"),aer=l(),G6=a("li"),Nge=a("strong"),ner=o("mpnet"),ser=o(" \u2014 "),tG=a("a"),ler=o("TFMPNetModel"),ier=o(" (MPNet model)"),der=l(),O6=a("li"),jge=a("strong"),cer=o("mt5"),fer=o(" \u2014 "),aG=a("a"),mer=o("TFMT5Model"),ger=o(" (mT5 model)"),her=l(),X6=a("li"),Dge=a("strong"),per=o("openai-gpt"),_er=o(" \u2014 "),nG=a("a"),uer=o("TFOpenAIGPTModel"),ber=o(" (OpenAI GPT model)"),ver=l(),V6=a("li"),qge=a("strong"),Ter=o("pegasus"),Fer=o(" \u2014 "),sG=a("a"),Cer=o("TFPegasusModel"),Mer=o(" (Pegasus model)"),Eer=l(),z6=a("li"),Gge=a("strong"),yer=o("rembert"),wer=o(" \u2014 "),lG=a("a"),Aer=o("TFRemBertModel"),Ler=o(" (RemBERT model)"),Ber=l(),W6=a("li"),Oge=a("strong"),xer=o("roberta"),ker=o(" \u2014 "),iG=a("a"),Rer=o("TFRobertaModel"),Ser=o(" (RoBERTa model)"),Per=l(),Q6=a("li"),Xge=a("strong"),$er=o("roformer"),Ier=o(" \u2014 "),dG=a("a"),Ner=o("TFRoFormerModel"),jer=o(" (RoFormer model)"),Der=l(),H6=a("li"),Vge=a("strong"),qer=o("speech_to_text"),Ger=o(" \u2014 "),cG=a("a"),Oer=o("TFSpeech2TextModel"),Xer=o(" (Speech2Text model)"),Ver=l(),U6=a("li"),zge=a("strong"),zer=o("t5"),Wer=o(" \u2014 "),fG=a("a"),Qer=o("TFT5Model"),Her=o(" (T5 model)"),Uer=l(),J6=a("li"),Wge=a("strong"),Jer=o("tapas"),Yer=o(" \u2014 "),mG=a("a"),Ker=o("TFTapasModel"),Zer=o(" (TAPAS model)"),eor=l(),Y6=a("li"),Qge=a("strong"),oor=o("transfo-xl"),ror=o(" \u2014 "),gG=a("a"),tor=o("TFTransfoXLModel"),aor=o(" (Transformer-XL model)"),nor=l(),K6=a("li"),Hge=a("strong"),sor=o("vit"),lor=o(" \u2014 "),hG=a("a"),ior=o("TFViTModel"),dor=o(" (ViT model)"),cor=l(),Z6=a("li"),Uge=a("strong"),mor=o("vit_mae"),gor=o(" \u2014 "),pG=a("a"),hor=o("TFViTMAEModel"),por=o(" (ViTMAE model)"),_or=l(),eT=a("li"),Jge=a("strong"),uor=o("wav2vec2"),bor=o(" \u2014 "),_G=a("a"),vor=o("TFWav2Vec2Model"),Tor=o(" (Wav2Vec2 model)"),For=l(),oT=a("li"),Yge=a("strong"),Cor=o("xlm"),Mor=o(" \u2014 "),uG=a("a"),Eor=o("TFXLMModel"),yor=o(" (XLM model)"),wor=l(),rT=a("li"),Kge=a("strong"),Aor=o("xlm-roberta"),Lor=o(" \u2014 "),bG=a("a"),Bor=o("TFXLMRobertaModel"),xor=o(" (XLM-RoBERTa model)"),kor=l(),tT=a("li"),Zge=a("strong"),Ror=o("xlnet"),Sor=o(" \u2014 "),vG=a("a"),Por=o("TFXLNetModel"),$or=o(" (XLNet model)"),Ior=l(),ehe=a("p"),Nor=o("Examples:"),jor=l(),f(KA.$$.fragment),kRe=l(),pc=a("h2"),aT=a("a"),ohe=a("span"),f(ZA.$$.fragment),Dor=l(),rhe=a("span"),qor=o("TFAutoModelForPreTraining"),RRe=l(),Tr=a("div"),f(e0.$$.fragment),Gor=l(),_c=a("p"),Oor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),the=a("code"),Xor=o("from_pretrained()"),Vor=o("class method or the "),ahe=a("code"),zor=o("from_config()"),Wor=o(`class
method.`),Qor=l(),o0=a("p"),Hor=o("This class cannot be instantiated directly using "),nhe=a("code"),Uor=o("__init__()"),Jor=o(" (throws an error)."),Yor=l(),ht=a("div"),f(r0.$$.fragment),Kor=l(),she=a("p"),Zor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),err=l(),uc=a("p"),orr=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),rrr=o("not"),trr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ihe=a("code"),arr=o("from_pretrained()"),nrr=o("to load the model weights."),srr=l(),dhe=a("p"),lrr=o("Examples:"),irr=l(),f(t0.$$.fragment),drr=l(),po=a("div"),f(a0.$$.fragment),crr=l(),che=a("p"),frr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mrr=l(),un=a("p"),grr=o("The model class to instantiate is selected based on the "),fhe=a("code"),hrr=o("model_type"),prr=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),_rr=o("pretrained_model_name_or_path"),urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(":"),Trr=l(),H=a("ul"),nT=a("li"),hhe=a("strong"),Frr=o("albert"),Crr=o(" \u2014 "),TG=a("a"),Mrr=o("TFAlbertForPreTraining"),Err=o(" (ALBERT model)"),yrr=l(),sT=a("li"),phe=a("strong"),wrr=o("bart"),Arr=o(" \u2014 "),FG=a("a"),Lrr=o("TFBartForConditionalGeneration"),Brr=o(" (BART model)"),xrr=l(),lT=a("li"),_he=a("strong"),krr=o("bert"),Rrr=o(" \u2014 "),CG=a("a"),Srr=o("TFBertForPreTraining"),Prr=o(" (BERT model)"),$rr=l(),iT=a("li"),uhe=a("strong"),Irr=o("camembert"),Nrr=o(" \u2014 "),MG=a("a"),jrr=o("TFCamembertForMaskedLM"),Drr=o(" (CamemBERT model)"),qrr=l(),dT=a("li"),bhe=a("strong"),Grr=o("ctrl"),Orr=o(" \u2014 "),EG=a("a"),Xrr=o("TFCTRLLMHeadModel"),Vrr=o(" (CTRL model)"),zrr=l(),cT=a("li"),vhe=a("strong"),Wrr=o("distilbert"),Qrr=o(" \u2014 "),yG=a("a"),Hrr=o("TFDistilBertForMaskedLM"),Urr=o(" (DistilBERT model)"),Jrr=l(),fT=a("li"),The=a("strong"),Yrr=o("electra"),Krr=o(" \u2014 "),wG=a("a"),Zrr=o("TFElectraForPreTraining"),etr=o(" (ELECTRA model)"),otr=l(),mT=a("li"),Fhe=a("strong"),rtr=o("flaubert"),ttr=o(" \u2014 "),AG=a("a"),atr=o("TFFlaubertWithLMHeadModel"),ntr=o(" (FlauBERT model)"),str=l(),gT=a("li"),Che=a("strong"),ltr=o("funnel"),itr=o(" \u2014 "),LG=a("a"),dtr=o("TFFunnelForPreTraining"),ctr=o(" (Funnel Transformer model)"),ftr=l(),hT=a("li"),Mhe=a("strong"),mtr=o("gpt2"),gtr=o(" \u2014 "),BG=a("a"),htr=o("TFGPT2LMHeadModel"),ptr=o(" (OpenAI GPT-2 model)"),_tr=l(),pT=a("li"),Ehe=a("strong"),utr=o("layoutlm"),btr=o(" \u2014 "),xG=a("a"),vtr=o("TFLayoutLMForMaskedLM"),Ttr=o(" (LayoutLM model)"),Ftr=l(),_T=a("li"),yhe=a("strong"),Ctr=o("lxmert"),Mtr=o(" \u2014 "),kG=a("a"),Etr=o("TFLxmertForPreTraining"),ytr=o(" (LXMERT model)"),wtr=l(),uT=a("li"),whe=a("strong"),Atr=o("mobilebert"),Ltr=o(" \u2014 "),RG=a("a"),Btr=o("TFMobileBertForPreTraining"),xtr=o(" (MobileBERT model)"),ktr=l(),bT=a("li"),Ahe=a("strong"),Rtr=o("mpnet"),Str=o(" \u2014 "),SG=a("a"),Ptr=o("TFMPNetForMaskedLM"),$tr=o(" (MPNet model)"),Itr=l(),vT=a("li"),Lhe=a("strong"),Ntr=o("openai-gpt"),jtr=o(" \u2014 "),PG=a("a"),Dtr=o("TFOpenAIGPTLMHeadModel"),qtr=o(" (OpenAI GPT model)"),Gtr=l(),TT=a("li"),Bhe=a("strong"),Otr=o("roberta"),Xtr=o(" \u2014 "),$G=a("a"),Vtr=o("TFRobertaForMaskedLM"),ztr=o(" (RoBERTa model)"),Wtr=l(),FT=a("li"),xhe=a("strong"),Qtr=o("t5"),Htr=o(" \u2014 "),IG=a("a"),Utr=o("TFT5ForConditionalGeneration"),Jtr=o(" (T5 model)"),Ytr=l(),CT=a("li"),khe=a("strong"),Ktr=o("tapas"),Ztr=o(" \u2014 "),NG=a("a"),ear=o("TFTapasForMaskedLM"),oar=o(" (TAPAS model)"),rar=l(),MT=a("li"),Rhe=a("strong"),tar=o("transfo-xl"),aar=o(" \u2014 "),jG=a("a"),nar=o("TFTransfoXLLMHeadModel"),sar=o(" (Transformer-XL model)"),lar=l(),ET=a("li"),She=a("strong"),iar=o("vit_mae"),dar=o(" \u2014 "),DG=a("a"),car=o("TFViTMAEForPreTraining"),far=o(" (ViTMAE model)"),mar=l(),yT=a("li"),Phe=a("strong"),gar=o("xlm"),har=o(" \u2014 "),qG=a("a"),par=o("TFXLMWithLMHeadModel"),_ar=o(" (XLM model)"),uar=l(),wT=a("li"),$he=a("strong"),bar=o("xlm-roberta"),Tar=o(" \u2014 "),GG=a("a"),Far=o("TFXLMRobertaForMaskedLM"),Car=o(" (XLM-RoBERTa model)"),Mar=l(),AT=a("li"),Ihe=a("strong"),Ear=o("xlnet"),yar=o(" \u2014 "),OG=a("a"),war=o("TFXLNetLMHeadModel"),Aar=o(" (XLNet model)"),Lar=l(),Nhe=a("p"),Bar=o("Examples:"),xar=l(),f(n0.$$.fragment),SRe=l(),bc=a("h2"),LT=a("a"),jhe=a("span"),f(s0.$$.fragment),kar=l(),Dhe=a("span"),Rar=o("TFAutoModelForCausalLM"),PRe=l(),Fr=a("div"),f(l0.$$.fragment),Sar=l(),vc=a("p"),Par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qhe=a("code"),$ar=o("from_pretrained()"),Iar=o("class method or the "),Ghe=a("code"),Nar=o("from_config()"),jar=o(`class
method.`),Dar=l(),i0=a("p"),qar=o("This class cannot be instantiated directly using "),Ohe=a("code"),Gar=o("__init__()"),Oar=o(" (throws an error)."),Xar=l(),pt=a("div"),f(d0.$$.fragment),Var=l(),Xhe=a("p"),zar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),War=l(),Tc=a("p"),Qar=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),Har=o("not"),Uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zhe=a("code"),Jar=o("from_pretrained()"),Yar=o("to load the model weights."),Kar=l(),Whe=a("p"),Zar=o("Examples:"),enr=l(),f(c0.$$.fragment),onr=l(),_o=a("div"),f(f0.$$.fragment),rnr=l(),Qhe=a("p"),tnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),anr=l(),bn=a("p"),nnr=o("The model class to instantiate is selected based on the "),Hhe=a("code"),snr=o("model_type"),lnr=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),inr=o("pretrained_model_name_or_path"),dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),cnr=o("pretrained_model_name_or_path"),fnr=o(":"),mnr=l(),ce=a("ul"),BT=a("li"),Yhe=a("strong"),gnr=o("bert"),hnr=o(" \u2014 "),XG=a("a"),pnr=o("TFBertLMHeadModel"),_nr=o(" (BERT model)"),unr=l(),xT=a("li"),Khe=a("strong"),bnr=o("camembert"),vnr=o(" \u2014 "),VG=a("a"),Tnr=o("TFCamembertForCausalLM"),Fnr=o(" (CamemBERT model)"),Cnr=l(),kT=a("li"),Zhe=a("strong"),Mnr=o("ctrl"),Enr=o(" \u2014 "),zG=a("a"),ynr=o("TFCTRLLMHeadModel"),wnr=o(" (CTRL model)"),Anr=l(),RT=a("li"),epe=a("strong"),Lnr=o("gpt2"),Bnr=o(" \u2014 "),WG=a("a"),xnr=o("TFGPT2LMHeadModel"),knr=o(" (OpenAI GPT-2 model)"),Rnr=l(),ST=a("li"),ope=a("strong"),Snr=o("gptj"),Pnr=o(" \u2014 "),QG=a("a"),$nr=o("TFGPTJForCausalLM"),Inr=o(" (GPT-J model)"),Nnr=l(),PT=a("li"),rpe=a("strong"),jnr=o("openai-gpt"),Dnr=o(" \u2014 "),HG=a("a"),qnr=o("TFOpenAIGPTLMHeadModel"),Gnr=o(" (OpenAI GPT model)"),Onr=l(),$T=a("li"),tpe=a("strong"),Xnr=o("rembert"),Vnr=o(" \u2014 "),UG=a("a"),znr=o("TFRemBertForCausalLM"),Wnr=o(" (RemBERT model)"),Qnr=l(),IT=a("li"),ape=a("strong"),Hnr=o("roberta"),Unr=o(" \u2014 "),JG=a("a"),Jnr=o("TFRobertaForCausalLM"),Ynr=o(" (RoBERTa model)"),Knr=l(),NT=a("li"),npe=a("strong"),Znr=o("roformer"),esr=o(" \u2014 "),YG=a("a"),osr=o("TFRoFormerForCausalLM"),rsr=o(" (RoFormer model)"),tsr=l(),jT=a("li"),spe=a("strong"),asr=o("transfo-xl"),nsr=o(" \u2014 "),KG=a("a"),ssr=o("TFTransfoXLLMHeadModel"),lsr=o(" (Transformer-XL model)"),isr=l(),DT=a("li"),lpe=a("strong"),dsr=o("xlm"),csr=o(" \u2014 "),ZG=a("a"),fsr=o("TFXLMWithLMHeadModel"),msr=o(" (XLM model)"),gsr=l(),qT=a("li"),ipe=a("strong"),hsr=o("xlnet"),psr=o(" \u2014 "),eO=a("a"),_sr=o("TFXLNetLMHeadModel"),usr=o(" (XLNet model)"),bsr=l(),dpe=a("p"),vsr=o("Examples:"),Tsr=l(),f(m0.$$.fragment),$Re=l(),Fc=a("h2"),GT=a("a"),cpe=a("span"),f(g0.$$.fragment),Fsr=l(),fpe=a("span"),Csr=o("TFAutoModelForImageClassification"),IRe=l(),Cr=a("div"),f(h0.$$.fragment),Msr=l(),Cc=a("p"),Esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mpe=a("code"),ysr=o("from_pretrained()"),wsr=o("class method or the "),gpe=a("code"),Asr=o("from_config()"),Lsr=o(`class
method.`),Bsr=l(),p0=a("p"),xsr=o("This class cannot be instantiated directly using "),hpe=a("code"),ksr=o("__init__()"),Rsr=o(" (throws an error)."),Ssr=l(),_t=a("div"),f(_0.$$.fragment),Psr=l(),ppe=a("p"),$sr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Isr=l(),Mc=a("p"),Nsr=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),jsr=o("not"),Dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=a("code"),qsr=o("from_pretrained()"),Gsr=o("to load the model weights."),Osr=l(),bpe=a("p"),Xsr=o("Examples:"),Vsr=l(),f(u0.$$.fragment),zsr=l(),uo=a("div"),f(b0.$$.fragment),Wsr=l(),vpe=a("p"),Qsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hsr=l(),vn=a("p"),Usr=o("The model class to instantiate is selected based on the "),Tpe=a("code"),Jsr=o("model_type"),Ysr=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),Ksr=o("pretrained_model_name_or_path"),Zsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),elr=o("pretrained_model_name_or_path"),olr=o(":"),rlr=l(),v0=a("ul"),OT=a("li"),Mpe=a("strong"),tlr=o("convnext"),alr=o(" \u2014 "),oO=a("a"),nlr=o("TFConvNextForImageClassification"),slr=o(" (ConvNext model)"),llr=l(),XT=a("li"),Epe=a("strong"),ilr=o("vit"),dlr=o(" \u2014 "),rO=a("a"),clr=o("TFViTForImageClassification"),flr=o(" (ViT model)"),mlr=l(),ype=a("p"),glr=o("Examples:"),hlr=l(),f(T0.$$.fragment),NRe=l(),Ec=a("h2"),VT=a("a"),wpe=a("span"),f(F0.$$.fragment),plr=l(),Ape=a("span"),_lr=o("TFAutoModelForMaskedLM"),jRe=l(),Mr=a("div"),f(C0.$$.fragment),ulr=l(),yc=a("p"),blr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Lpe=a("code"),vlr=o("from_pretrained()"),Tlr=o("class method or the "),Bpe=a("code"),Flr=o("from_config()"),Clr=o(`class
method.`),Mlr=l(),M0=a("p"),Elr=o("This class cannot be instantiated directly using "),xpe=a("code"),ylr=o("__init__()"),wlr=o(" (throws an error)."),Alr=l(),ut=a("div"),f(E0.$$.fragment),Llr=l(),kpe=a("p"),Blr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xlr=l(),wc=a("p"),klr=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),Rlr=o("not"),Slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Spe=a("code"),Plr=o("from_pretrained()"),$lr=o("to load the model weights."),Ilr=l(),Ppe=a("p"),Nlr=o("Examples:"),jlr=l(),f(y0.$$.fragment),Dlr=l(),bo=a("div"),f(w0.$$.fragment),qlr=l(),$pe=a("p"),Glr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Olr=l(),Tn=a("p"),Xlr=o("The model class to instantiate is selected based on the "),Ipe=a("code"),Vlr=o("model_type"),zlr=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),Wlr=o("pretrained_model_name_or_path"),Qlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),Hlr=o("pretrained_model_name_or_path"),Ulr=o(":"),Jlr=l(),J=a("ul"),zT=a("li"),Dpe=a("strong"),Ylr=o("albert"),Klr=o(" \u2014 "),tO=a("a"),Zlr=o("TFAlbertForMaskedLM"),eir=o(" (ALBERT model)"),oir=l(),WT=a("li"),qpe=a("strong"),rir=o("bert"),tir=o(" \u2014 "),aO=a("a"),air=o("TFBertForMaskedLM"),nir=o(" (BERT model)"),sir=l(),QT=a("li"),Gpe=a("strong"),lir=o("camembert"),iir=o(" \u2014 "),nO=a("a"),dir=o("TFCamembertForMaskedLM"),cir=o(" (CamemBERT model)"),fir=l(),HT=a("li"),Ope=a("strong"),mir=o("convbert"),gir=o(" \u2014 "),sO=a("a"),hir=o("TFConvBertForMaskedLM"),pir=o(" (ConvBERT model)"),_ir=l(),UT=a("li"),Xpe=a("strong"),uir=o("deberta"),bir=o(" \u2014 "),lO=a("a"),vir=o("TFDebertaForMaskedLM"),Tir=o(" (DeBERTa model)"),Fir=l(),JT=a("li"),Vpe=a("strong"),Cir=o("deberta-v2"),Mir=o(" \u2014 "),iO=a("a"),Eir=o("TFDebertaV2ForMaskedLM"),yir=o(" (DeBERTa-v2 model)"),wir=l(),YT=a("li"),zpe=a("strong"),Air=o("distilbert"),Lir=o(" \u2014 "),dO=a("a"),Bir=o("TFDistilBertForMaskedLM"),xir=o(" (DistilBERT model)"),kir=l(),KT=a("li"),Wpe=a("strong"),Rir=o("electra"),Sir=o(" \u2014 "),cO=a("a"),Pir=o("TFElectraForMaskedLM"),$ir=o(" (ELECTRA model)"),Iir=l(),ZT=a("li"),Qpe=a("strong"),Nir=o("flaubert"),jir=o(" \u2014 "),fO=a("a"),Dir=o("TFFlaubertWithLMHeadModel"),qir=o(" (FlauBERT model)"),Gir=l(),eF=a("li"),Hpe=a("strong"),Oir=o("funnel"),Xir=o(" \u2014 "),mO=a("a"),Vir=o("TFFunnelForMaskedLM"),zir=o(" (Funnel Transformer model)"),Wir=l(),oF=a("li"),Upe=a("strong"),Qir=o("layoutlm"),Hir=o(" \u2014 "),gO=a("a"),Uir=o("TFLayoutLMForMaskedLM"),Jir=o(" (LayoutLM model)"),Yir=l(),rF=a("li"),Jpe=a("strong"),Kir=o("longformer"),Zir=o(" \u2014 "),hO=a("a"),edr=o("TFLongformerForMaskedLM"),odr=o(" (Longformer model)"),rdr=l(),tF=a("li"),Ype=a("strong"),tdr=o("mobilebert"),adr=o(" \u2014 "),pO=a("a"),ndr=o("TFMobileBertForMaskedLM"),sdr=o(" (MobileBERT model)"),ldr=l(),aF=a("li"),Kpe=a("strong"),idr=o("mpnet"),ddr=o(" \u2014 "),_O=a("a"),cdr=o("TFMPNetForMaskedLM"),fdr=o(" (MPNet model)"),mdr=l(),nF=a("li"),Zpe=a("strong"),gdr=o("rembert"),hdr=o(" \u2014 "),uO=a("a"),pdr=o("TFRemBertForMaskedLM"),_dr=o(" (RemBERT model)"),udr=l(),sF=a("li"),e_e=a("strong"),bdr=o("roberta"),vdr=o(" \u2014 "),bO=a("a"),Tdr=o("TFRobertaForMaskedLM"),Fdr=o(" (RoBERTa model)"),Cdr=l(),lF=a("li"),o_e=a("strong"),Mdr=o("roformer"),Edr=o(" \u2014 "),vO=a("a"),ydr=o("TFRoFormerForMaskedLM"),wdr=o(" (RoFormer model)"),Adr=l(),iF=a("li"),r_e=a("strong"),Ldr=o("tapas"),Bdr=o(" \u2014 "),TO=a("a"),xdr=o("TFTapasForMaskedLM"),kdr=o(" (TAPAS model)"),Rdr=l(),dF=a("li"),t_e=a("strong"),Sdr=o("xlm"),Pdr=o(" \u2014 "),FO=a("a"),$dr=o("TFXLMWithLMHeadModel"),Idr=o(" (XLM model)"),Ndr=l(),cF=a("li"),a_e=a("strong"),jdr=o("xlm-roberta"),Ddr=o(" \u2014 "),CO=a("a"),qdr=o("TFXLMRobertaForMaskedLM"),Gdr=o(" (XLM-RoBERTa model)"),Odr=l(),n_e=a("p"),Xdr=o("Examples:"),Vdr=l(),f(A0.$$.fragment),DRe=l(),Ac=a("h2"),fF=a("a"),s_e=a("span"),f(L0.$$.fragment),zdr=l(),l_e=a("span"),Wdr=o("TFAutoModelForSeq2SeqLM"),qRe=l(),Er=a("div"),f(B0.$$.fragment),Qdr=l(),Lc=a("p"),Hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),i_e=a("code"),Udr=o("from_pretrained()"),Jdr=o("class method or the "),d_e=a("code"),Ydr=o("from_config()"),Kdr=o(`class
method.`),Zdr=l(),x0=a("p"),ecr=o("This class cannot be instantiated directly using "),c_e=a("code"),ocr=o("__init__()"),rcr=o(" (throws an error)."),tcr=l(),bt=a("div"),f(k0.$$.fragment),acr=l(),f_e=a("p"),ncr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),scr=l(),Bc=a("p"),lcr=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),icr=o("not"),dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g_e=a("code"),ccr=o("from_pretrained()"),fcr=o("to load the model weights."),mcr=l(),h_e=a("p"),gcr=o("Examples:"),hcr=l(),f(R0.$$.fragment),pcr=l(),vo=a("div"),f(S0.$$.fragment),_cr=l(),p_e=a("p"),ucr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bcr=l(),Fn=a("p"),vcr=o("The model class to instantiate is selected based on the "),__e=a("code"),Tcr=o("model_type"),Fcr=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),Ccr=o("pretrained_model_name_or_path"),Mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),Ecr=o("pretrained_model_name_or_path"),ycr=o(":"),wcr=l(),ue=a("ul"),mF=a("li"),v_e=a("strong"),Acr=o("bart"),Lcr=o(" \u2014 "),MO=a("a"),Bcr=o("TFBartForConditionalGeneration"),xcr=o(" (BART model)"),kcr=l(),gF=a("li"),T_e=a("strong"),Rcr=o("blenderbot"),Scr=o(" \u2014 "),EO=a("a"),Pcr=o("TFBlenderbotForConditionalGeneration"),$cr=o(" (Blenderbot model)"),Icr=l(),hF=a("li"),F_e=a("strong"),Ncr=o("blenderbot-small"),jcr=o(" \u2014 "),yO=a("a"),Dcr=o("TFBlenderbotSmallForConditionalGeneration"),qcr=o(" (BlenderbotSmall model)"),Gcr=l(),pF=a("li"),C_e=a("strong"),Ocr=o("encoder-decoder"),Xcr=o(" \u2014 "),wO=a("a"),Vcr=o("TFEncoderDecoderModel"),zcr=o(" (Encoder decoder model)"),Wcr=l(),_F=a("li"),M_e=a("strong"),Qcr=o("led"),Hcr=o(" \u2014 "),AO=a("a"),Ucr=o("TFLEDForConditionalGeneration"),Jcr=o(" (LED model)"),Ycr=l(),uF=a("li"),E_e=a("strong"),Kcr=o("marian"),Zcr=o(" \u2014 "),LO=a("a"),efr=o("TFMarianMTModel"),ofr=o(" (Marian model)"),rfr=l(),bF=a("li"),y_e=a("strong"),tfr=o("mbart"),afr=o(" \u2014 "),BO=a("a"),nfr=o("TFMBartForConditionalGeneration"),sfr=o(" (mBART model)"),lfr=l(),vF=a("li"),w_e=a("strong"),ifr=o("mt5"),dfr=o(" \u2014 "),xO=a("a"),cfr=o("TFMT5ForConditionalGeneration"),ffr=o(" (mT5 model)"),mfr=l(),TF=a("li"),A_e=a("strong"),gfr=o("pegasus"),hfr=o(" \u2014 "),kO=a("a"),pfr=o("TFPegasusForConditionalGeneration"),_fr=o(" (Pegasus model)"),ufr=l(),FF=a("li"),L_e=a("strong"),bfr=o("t5"),vfr=o(" \u2014 "),RO=a("a"),Tfr=o("TFT5ForConditionalGeneration"),Ffr=o(" (T5 model)"),Cfr=l(),B_e=a("p"),Mfr=o("Examples:"),Efr=l(),f(P0.$$.fragment),GRe=l(),xc=a("h2"),CF=a("a"),x_e=a("span"),f($0.$$.fragment),yfr=l(),k_e=a("span"),wfr=o("TFAutoModelForSequenceClassification"),ORe=l(),yr=a("div"),f(I0.$$.fragment),Afr=l(),kc=a("p"),Lfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),R_e=a("code"),Bfr=o("from_pretrained()"),xfr=o("class method or the "),S_e=a("code"),kfr=o("from_config()"),Rfr=o(`class
method.`),Sfr=l(),N0=a("p"),Pfr=o("This class cannot be instantiated directly using "),P_e=a("code"),$fr=o("__init__()"),Ifr=o(" (throws an error)."),Nfr=l(),vt=a("div"),f(j0.$$.fragment),jfr=l(),$_e=a("p"),Dfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qfr=l(),Rc=a("p"),Gfr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),Ofr=o("not"),Xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N_e=a("code"),Vfr=o("from_pretrained()"),zfr=o("to load the model weights."),Wfr=l(),j_e=a("p"),Qfr=o("Examples:"),Hfr=l(),f(D0.$$.fragment),Ufr=l(),To=a("div"),f(q0.$$.fragment),Jfr=l(),D_e=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kfr=l(),Cn=a("p"),Zfr=o("The model class to instantiate is selected based on the "),q_e=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),X=a("ul"),MF=a("li"),X_e=a("strong"),lmr=o("albert"),imr=o(" \u2014 "),SO=a("a"),dmr=o("TFAlbertForSequenceClassification"),cmr=o(" (ALBERT model)"),fmr=l(),EF=a("li"),V_e=a("strong"),mmr=o("bert"),gmr=o(" \u2014 "),PO=a("a"),hmr=o("TFBertForSequenceClassification"),pmr=o(" (BERT model)"),_mr=l(),yF=a("li"),z_e=a("strong"),umr=o("camembert"),bmr=o(" \u2014 "),$O=a("a"),vmr=o("TFCamembertForSequenceClassification"),Tmr=o(" (CamemBERT model)"),Fmr=l(),wF=a("li"),W_e=a("strong"),Cmr=o("convbert"),Mmr=o(" \u2014 "),IO=a("a"),Emr=o("TFConvBertForSequenceClassification"),ymr=o(" (ConvBERT model)"),wmr=l(),AF=a("li"),Q_e=a("strong"),Amr=o("ctrl"),Lmr=o(" \u2014 "),NO=a("a"),Bmr=o("TFCTRLForSequenceClassification"),xmr=o(" (CTRL model)"),kmr=l(),LF=a("li"),H_e=a("strong"),Rmr=o("deberta"),Smr=o(" \u2014 "),jO=a("a"),Pmr=o("TFDebertaForSequenceClassification"),$mr=o(" (DeBERTa model)"),Imr=l(),BF=a("li"),U_e=a("strong"),Nmr=o("deberta-v2"),jmr=o(" \u2014 "),DO=a("a"),Dmr=o("TFDebertaV2ForSequenceClassification"),qmr=o(" (DeBERTa-v2 model)"),Gmr=l(),xF=a("li"),J_e=a("strong"),Omr=o("distilbert"),Xmr=o(" \u2014 "),qO=a("a"),Vmr=o("TFDistilBertForSequenceClassification"),zmr=o(" (DistilBERT model)"),Wmr=l(),kF=a("li"),Y_e=a("strong"),Qmr=o("electra"),Hmr=o(" \u2014 "),GO=a("a"),Umr=o("TFElectraForSequenceClassification"),Jmr=o(" (ELECTRA model)"),Ymr=l(),RF=a("li"),K_e=a("strong"),Kmr=o("flaubert"),Zmr=o(" \u2014 "),OO=a("a"),egr=o("TFFlaubertForSequenceClassification"),ogr=o(" (FlauBERT model)"),rgr=l(),SF=a("li"),Z_e=a("strong"),tgr=o("funnel"),agr=o(" \u2014 "),XO=a("a"),ngr=o("TFFunnelForSequenceClassification"),sgr=o(" (Funnel Transformer model)"),lgr=l(),PF=a("li"),eue=a("strong"),igr=o("gpt2"),dgr=o(" \u2014 "),VO=a("a"),cgr=o("TFGPT2ForSequenceClassification"),fgr=o(" (OpenAI GPT-2 model)"),mgr=l(),$F=a("li"),oue=a("strong"),ggr=o("gptj"),hgr=o(" \u2014 "),zO=a("a"),pgr=o("TFGPTJForSequenceClassification"),_gr=o(" (GPT-J model)"),ugr=l(),IF=a("li"),rue=a("strong"),bgr=o("layoutlm"),vgr=o(" \u2014 "),WO=a("a"),Tgr=o("TFLayoutLMForSequenceClassification"),Fgr=o(" (LayoutLM model)"),Cgr=l(),NF=a("li"),tue=a("strong"),Mgr=o("longformer"),Egr=o(" \u2014 "),QO=a("a"),ygr=o("TFLongformerForSequenceClassification"),wgr=o(" (Longformer model)"),Agr=l(),jF=a("li"),aue=a("strong"),Lgr=o("mobilebert"),Bgr=o(" \u2014 "),HO=a("a"),xgr=o("TFMobileBertForSequenceClassification"),kgr=o(" (MobileBERT model)"),Rgr=l(),DF=a("li"),nue=a("strong"),Sgr=o("mpnet"),Pgr=o(" \u2014 "),UO=a("a"),$gr=o("TFMPNetForSequenceClassification"),Igr=o(" (MPNet model)"),Ngr=l(),qF=a("li"),sue=a("strong"),jgr=o("openai-gpt"),Dgr=o(" \u2014 "),JO=a("a"),qgr=o("TFOpenAIGPTForSequenceClassification"),Ggr=o(" (OpenAI GPT model)"),Ogr=l(),GF=a("li"),lue=a("strong"),Xgr=o("rembert"),Vgr=o(" \u2014 "),YO=a("a"),zgr=o("TFRemBertForSequenceClassification"),Wgr=o(" (RemBERT model)"),Qgr=l(),OF=a("li"),iue=a("strong"),Hgr=o("roberta"),Ugr=o(" \u2014 "),KO=a("a"),Jgr=o("TFRobertaForSequenceClassification"),Ygr=o(" (RoBERTa model)"),Kgr=l(),XF=a("li"),due=a("strong"),Zgr=o("roformer"),ehr=o(" \u2014 "),ZO=a("a"),ohr=o("TFRoFormerForSequenceClassification"),rhr=o(" (RoFormer model)"),thr=l(),VF=a("li"),cue=a("strong"),ahr=o("tapas"),nhr=o(" \u2014 "),eX=a("a"),shr=o("TFTapasForSequenceClassification"),lhr=o(" (TAPAS model)"),ihr=l(),zF=a("li"),fue=a("strong"),dhr=o("transfo-xl"),chr=o(" \u2014 "),oX=a("a"),fhr=o("TFTransfoXLForSequenceClassification"),mhr=o(" (Transformer-XL model)"),ghr=l(),WF=a("li"),mue=a("strong"),hhr=o("xlm"),phr=o(" \u2014 "),rX=a("a"),_hr=o("TFXLMForSequenceClassification"),uhr=o(" (XLM model)"),bhr=l(),QF=a("li"),gue=a("strong"),vhr=o("xlm-roberta"),Thr=o(" \u2014 "),tX=a("a"),Fhr=o("TFXLMRobertaForSequenceClassification"),Chr=o(" (XLM-RoBERTa model)"),Mhr=l(),HF=a("li"),hue=a("strong"),Ehr=o("xlnet"),yhr=o(" \u2014 "),aX=a("a"),whr=o("TFXLNetForSequenceClassification"),Ahr=o(" (XLNet model)"),Lhr=l(),pue=a("p"),Bhr=o("Examples:"),xhr=l(),f(G0.$$.fragment),XRe=l(),Sc=a("h2"),UF=a("a"),_ue=a("span"),f(O0.$$.fragment),khr=l(),uue=a("span"),Rhr=o("TFAutoModelForMultipleChoice"),VRe=l(),wr=a("div"),f(X0.$$.fragment),Shr=l(),Pc=a("p"),Phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bue=a("code"),$hr=o("from_pretrained()"),Ihr=o("class method or the "),vue=a("code"),Nhr=o("from_config()"),jhr=o(`class
method.`),Dhr=l(),V0=a("p"),qhr=o("This class cannot be instantiated directly using "),Tue=a("code"),Ghr=o("__init__()"),Ohr=o(" (throws an error)."),Xhr=l(),Tt=a("div"),f(z0.$$.fragment),Vhr=l(),Fue=a("p"),zhr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Whr=l(),$c=a("p"),Qhr=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),Hhr=o("not"),Uhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mue=a("code"),Jhr=o("from_pretrained()"),Yhr=o("to load the model weights."),Khr=l(),Eue=a("p"),Zhr=o("Examples:"),epr=l(),f(W0.$$.fragment),opr=l(),Fo=a("div"),f(Q0.$$.fragment),rpr=l(),yue=a("p"),tpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),apr=l(),Mn=a("p"),npr=o("The model class to instantiate is selected based on the "),wue=a("code"),spr=o("model_type"),lpr=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),ipr=o("pretrained_model_name_or_path"),dpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(":"),mpr=l(),ae=a("ul"),JF=a("li"),Bue=a("strong"),gpr=o("albert"),hpr=o(" \u2014 "),nX=a("a"),ppr=o("TFAlbertForMultipleChoice"),_pr=o(" (ALBERT model)"),upr=l(),YF=a("li"),xue=a("strong"),bpr=o("bert"),vpr=o(" \u2014 "),sX=a("a"),Tpr=o("TFBertForMultipleChoice"),Fpr=o(" (BERT model)"),Cpr=l(),KF=a("li"),kue=a("strong"),Mpr=o("camembert"),Epr=o(" \u2014 "),lX=a("a"),ypr=o("TFCamembertForMultipleChoice"),wpr=o(" (CamemBERT model)"),Apr=l(),ZF=a("li"),Rue=a("strong"),Lpr=o("convbert"),Bpr=o(" \u2014 "),iX=a("a"),xpr=o("TFConvBertForMultipleChoice"),kpr=o(" (ConvBERT model)"),Rpr=l(),eC=a("li"),Sue=a("strong"),Spr=o("distilbert"),Ppr=o(" \u2014 "),dX=a("a"),$pr=o("TFDistilBertForMultipleChoice"),Ipr=o(" (DistilBERT model)"),Npr=l(),oC=a("li"),Pue=a("strong"),jpr=o("electra"),Dpr=o(" \u2014 "),cX=a("a"),qpr=o("TFElectraForMultipleChoice"),Gpr=o(" (ELECTRA model)"),Opr=l(),rC=a("li"),$ue=a("strong"),Xpr=o("flaubert"),Vpr=o(" \u2014 "),fX=a("a"),zpr=o("TFFlaubertForMultipleChoice"),Wpr=o(" (FlauBERT model)"),Qpr=l(),tC=a("li"),Iue=a("strong"),Hpr=o("funnel"),Upr=o(" \u2014 "),mX=a("a"),Jpr=o("TFFunnelForMultipleChoice"),Ypr=o(" (Funnel Transformer model)"),Kpr=l(),aC=a("li"),Nue=a("strong"),Zpr=o("longformer"),e_r=o(" \u2014 "),gX=a("a"),o_r=o("TFLongformerForMultipleChoice"),r_r=o(" (Longformer model)"),t_r=l(),nC=a("li"),jue=a("strong"),a_r=o("mobilebert"),n_r=o(" \u2014 "),hX=a("a"),s_r=o("TFMobileBertForMultipleChoice"),l_r=o(" (MobileBERT model)"),i_r=l(),sC=a("li"),Due=a("strong"),d_r=o("mpnet"),c_r=o(" \u2014 "),pX=a("a"),f_r=o("TFMPNetForMultipleChoice"),m_r=o(" (MPNet model)"),g_r=l(),lC=a("li"),que=a("strong"),h_r=o("rembert"),p_r=o(" \u2014 "),_X=a("a"),__r=o("TFRemBertForMultipleChoice"),u_r=o(" (RemBERT model)"),b_r=l(),iC=a("li"),Gue=a("strong"),v_r=o("roberta"),T_r=o(" \u2014 "),uX=a("a"),F_r=o("TFRobertaForMultipleChoice"),C_r=o(" (RoBERTa model)"),M_r=l(),dC=a("li"),Oue=a("strong"),E_r=o("roformer"),y_r=o(" \u2014 "),bX=a("a"),w_r=o("TFRoFormerForMultipleChoice"),A_r=o(" (RoFormer model)"),L_r=l(),cC=a("li"),Xue=a("strong"),B_r=o("xlm"),x_r=o(" \u2014 "),vX=a("a"),k_r=o("TFXLMForMultipleChoice"),R_r=o(" (XLM model)"),S_r=l(),fC=a("li"),Vue=a("strong"),P_r=o("xlm-roberta"),$_r=o(" \u2014 "),TX=a("a"),I_r=o("TFXLMRobertaForMultipleChoice"),N_r=o(" (XLM-RoBERTa model)"),j_r=l(),mC=a("li"),zue=a("strong"),D_r=o("xlnet"),q_r=o(" \u2014 "),FX=a("a"),G_r=o("TFXLNetForMultipleChoice"),O_r=o(" (XLNet model)"),X_r=l(),Wue=a("p"),V_r=o("Examples:"),z_r=l(),f(H0.$$.fragment),zRe=l(),Ic=a("h2"),gC=a("a"),Que=a("span"),f(U0.$$.fragment),W_r=l(),Hue=a("span"),Q_r=o("TFAutoModelForTableQuestionAnswering"),WRe=l(),Ar=a("div"),f(J0.$$.fragment),H_r=l(),Nc=a("p"),U_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Uue=a("code"),J_r=o("from_pretrained()"),Y_r=o("class method or the "),Jue=a("code"),K_r=o("from_config()"),Z_r=o(`class
method.`),eur=l(),Y0=a("p"),our=o("This class cannot be instantiated directly using "),Yue=a("code"),rur=o("__init__()"),tur=o(" (throws an error)."),aur=l(),Ft=a("div"),f(K0.$$.fragment),nur=l(),Kue=a("p"),sur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lur=l(),jc=a("p"),iur=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),dur=o("not"),cur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e5e=a("code"),fur=o("from_pretrained()"),mur=o("to load the model weights."),gur=l(),o5e=a("p"),hur=o("Examples:"),pur=l(),f(Z0.$$.fragment),_ur=l(),Co=a("div"),f(eL.$$.fragment),uur=l(),r5e=a("p"),bur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vur=l(),En=a("p"),Tur=o("The model class to instantiate is selected based on the "),t5e=a("code"),Fur=o("model_type"),Cur=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),Mur=o("pretrained_model_name_or_path"),Eur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),yur=o("pretrained_model_name_or_path"),wur=o(":"),Aur=l(),s5e=a("ul"),hC=a("li"),l5e=a("strong"),Lur=o("tapas"),Bur=o(" \u2014 "),CX=a("a"),xur=o("TFTapasForQuestionAnswering"),kur=o(" (TAPAS model)"),Rur=l(),i5e=a("p"),Sur=o("Examples:"),Pur=l(),f(oL.$$.fragment),QRe=l(),Dc=a("h2"),pC=a("a"),d5e=a("span"),f(rL.$$.fragment),$ur=l(),c5e=a("span"),Iur=o("TFAutoModelForTokenClassification"),HRe=l(),Lr=a("div"),f(tL.$$.fragment),Nur=l(),qc=a("p"),jur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),f5e=a("code"),Dur=o("from_pretrained()"),qur=o("class method or the "),m5e=a("code"),Gur=o("from_config()"),Our=o(`class
method.`),Xur=l(),aL=a("p"),Vur=o("This class cannot be instantiated directly using "),g5e=a("code"),zur=o("__init__()"),Wur=o(" (throws an error)."),Qur=l(),Ct=a("div"),f(nL.$$.fragment),Hur=l(),h5e=a("p"),Uur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jur=l(),Gc=a("p"),Yur=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),Kur=o("not"),Zur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_5e=a("code"),e5r=o("from_pretrained()"),o5r=o("to load the model weights."),r5r=l(),u5e=a("p"),t5r=o("Examples:"),a5r=l(),f(sL.$$.fragment),n5r=l(),Mo=a("div"),f(lL.$$.fragment),s5r=l(),b5e=a("p"),l5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),i5r=l(),yn=a("p"),d5r=o("The model class to instantiate is selected based on the "),v5e=a("code"),c5r=o("model_type"),f5r=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),m5r=o("pretrained_model_name_or_path"),g5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),h5r=o("pretrained_model_name_or_path"),p5r=o(":"),_5r=l(),Y=a("ul"),_C=a("li"),C5e=a("strong"),u5r=o("albert"),b5r=o(" \u2014 "),MX=a("a"),v5r=o("TFAlbertForTokenClassification"),T5r=o(" (ALBERT model)"),F5r=l(),uC=a("li"),M5e=a("strong"),C5r=o("bert"),M5r=o(" \u2014 "),EX=a("a"),E5r=o("TFBertForTokenClassification"),y5r=o(" (BERT model)"),w5r=l(),bC=a("li"),E5e=a("strong"),A5r=o("camembert"),L5r=o(" \u2014 "),yX=a("a"),B5r=o("TFCamembertForTokenClassification"),x5r=o(" (CamemBERT model)"),k5r=l(),vC=a("li"),y5e=a("strong"),R5r=o("convbert"),S5r=o(" \u2014 "),wX=a("a"),P5r=o("TFConvBertForTokenClassification"),$5r=o(" (ConvBERT model)"),I5r=l(),TC=a("li"),w5e=a("strong"),N5r=o("deberta"),j5r=o(" \u2014 "),AX=a("a"),D5r=o("TFDebertaForTokenClassification"),q5r=o(" (DeBERTa model)"),G5r=l(),FC=a("li"),A5e=a("strong"),O5r=o("deberta-v2"),X5r=o(" \u2014 "),LX=a("a"),V5r=o("TFDebertaV2ForTokenClassification"),z5r=o(" (DeBERTa-v2 model)"),W5r=l(),CC=a("li"),L5e=a("strong"),Q5r=o("distilbert"),H5r=o(" \u2014 "),BX=a("a"),U5r=o("TFDistilBertForTokenClassification"),J5r=o(" (DistilBERT model)"),Y5r=l(),MC=a("li"),B5e=a("strong"),K5r=o("electra"),Z5r=o(" \u2014 "),xX=a("a"),e2r=o("TFElectraForTokenClassification"),o2r=o(" (ELECTRA model)"),r2r=l(),EC=a("li"),x5e=a("strong"),t2r=o("flaubert"),a2r=o(" \u2014 "),kX=a("a"),n2r=o("TFFlaubertForTokenClassification"),s2r=o(" (FlauBERT model)"),l2r=l(),yC=a("li"),k5e=a("strong"),i2r=o("funnel"),d2r=o(" \u2014 "),RX=a("a"),c2r=o("TFFunnelForTokenClassification"),f2r=o(" (Funnel Transformer model)"),m2r=l(),wC=a("li"),R5e=a("strong"),g2r=o("layoutlm"),h2r=o(" \u2014 "),SX=a("a"),p2r=o("TFLayoutLMForTokenClassification"),_2r=o(" (LayoutLM model)"),u2r=l(),AC=a("li"),S5e=a("strong"),b2r=o("longformer"),v2r=o(" \u2014 "),PX=a("a"),T2r=o("TFLongformerForTokenClassification"),F2r=o(" (Longformer model)"),C2r=l(),LC=a("li"),P5e=a("strong"),M2r=o("mobilebert"),E2r=o(" \u2014 "),$X=a("a"),y2r=o("TFMobileBertForTokenClassification"),w2r=o(" (MobileBERT model)"),A2r=l(),BC=a("li"),$5e=a("strong"),L2r=o("mpnet"),B2r=o(" \u2014 "),IX=a("a"),x2r=o("TFMPNetForTokenClassification"),k2r=o(" (MPNet model)"),R2r=l(),xC=a("li"),I5e=a("strong"),S2r=o("rembert"),P2r=o(" \u2014 "),NX=a("a"),$2r=o("TFRemBertForTokenClassification"),I2r=o(" (RemBERT model)"),N2r=l(),kC=a("li"),N5e=a("strong"),j2r=o("roberta"),D2r=o(" \u2014 "),jX=a("a"),q2r=o("TFRobertaForTokenClassification"),G2r=o(" (RoBERTa model)"),O2r=l(),RC=a("li"),j5e=a("strong"),X2r=o("roformer"),V2r=o(" \u2014 "),DX=a("a"),z2r=o("TFRoFormerForTokenClassification"),W2r=o(" (RoFormer model)"),Q2r=l(),SC=a("li"),D5e=a("strong"),H2r=o("xlm"),U2r=o(" \u2014 "),qX=a("a"),J2r=o("TFXLMForTokenClassification"),Y2r=o(" (XLM model)"),K2r=l(),PC=a("li"),q5e=a("strong"),Z2r=o("xlm-roberta"),e1r=o(" \u2014 "),GX=a("a"),o1r=o("TFXLMRobertaForTokenClassification"),r1r=o(" (XLM-RoBERTa model)"),t1r=l(),$C=a("li"),G5e=a("strong"),a1r=o("xlnet"),n1r=o(" \u2014 "),OX=a("a"),s1r=o("TFXLNetForTokenClassification"),l1r=o(" (XLNet model)"),i1r=l(),O5e=a("p"),d1r=o("Examples:"),c1r=l(),f(iL.$$.fragment),URe=l(),Oc=a("h2"),IC=a("a"),X5e=a("span"),f(dL.$$.fragment),f1r=l(),V5e=a("span"),m1r=o("TFAutoModelForQuestionAnswering"),JRe=l(),Br=a("div"),f(cL.$$.fragment),g1r=l(),Xc=a("p"),h1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),z5e=a("code"),p1r=o("from_pretrained()"),_1r=o("class method or the "),W5e=a("code"),u1r=o("from_config()"),b1r=o(`class
method.`),v1r=l(),fL=a("p"),T1r=o("This class cannot be instantiated directly using "),Q5e=a("code"),F1r=o("__init__()"),C1r=o(" (throws an error)."),M1r=l(),Mt=a("div"),f(mL.$$.fragment),E1r=l(),H5e=a("p"),y1r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w1r=l(),Vc=a("p"),A1r=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),L1r=o("not"),B1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J5e=a("code"),x1r=o("from_pretrained()"),k1r=o("to load the model weights."),R1r=l(),Y5e=a("p"),S1r=o("Examples:"),P1r=l(),f(gL.$$.fragment),$1r=l(),Eo=a("div"),f(hL.$$.fragment),I1r=l(),K5e=a("p"),N1r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j1r=l(),wn=a("p"),D1r=o("The model class to instantiate is selected based on the "),Z5e=a("code"),q1r=o("model_type"),G1r=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),O1r=o("pretrained_model_name_or_path"),X1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),V1r=o("pretrained_model_name_or_path"),z1r=o(":"),W1r=l(),K=a("ul"),NC=a("li"),r2e=a("strong"),Q1r=o("albert"),H1r=o(" \u2014 "),XX=a("a"),U1r=o("TFAlbertForQuestionAnswering"),J1r=o(" (ALBERT model)"),Y1r=l(),jC=a("li"),t2e=a("strong"),K1r=o("bert"),Z1r=o(" \u2014 "),VX=a("a"),ebr=o("TFBertForQuestionAnswering"),obr=o(" (BERT model)"),rbr=l(),DC=a("li"),a2e=a("strong"),tbr=o("camembert"),abr=o(" \u2014 "),zX=a("a"),nbr=o("TFCamembertForQuestionAnswering"),sbr=o(" (CamemBERT model)"),lbr=l(),qC=a("li"),n2e=a("strong"),ibr=o("convbert"),dbr=o(" \u2014 "),WX=a("a"),cbr=o("TFConvBertForQuestionAnswering"),fbr=o(" (ConvBERT model)"),mbr=l(),GC=a("li"),s2e=a("strong"),gbr=o("deberta"),hbr=o(" \u2014 "),QX=a("a"),pbr=o("TFDebertaForQuestionAnswering"),_br=o(" (DeBERTa model)"),ubr=l(),OC=a("li"),l2e=a("strong"),bbr=o("deberta-v2"),vbr=o(" \u2014 "),HX=a("a"),Tbr=o("TFDebertaV2ForQuestionAnswering"),Fbr=o(" (DeBERTa-v2 model)"),Cbr=l(),XC=a("li"),i2e=a("strong"),Mbr=o("distilbert"),Ebr=o(" \u2014 "),UX=a("a"),ybr=o("TFDistilBertForQuestionAnswering"),wbr=o(" (DistilBERT model)"),Abr=l(),VC=a("li"),d2e=a("strong"),Lbr=o("electra"),Bbr=o(" \u2014 "),JX=a("a"),xbr=o("TFElectraForQuestionAnswering"),kbr=o(" (ELECTRA model)"),Rbr=l(),zC=a("li"),c2e=a("strong"),Sbr=o("flaubert"),Pbr=o(" \u2014 "),YX=a("a"),$br=o("TFFlaubertForQuestionAnsweringSimple"),Ibr=o(" (FlauBERT model)"),Nbr=l(),WC=a("li"),f2e=a("strong"),jbr=o("funnel"),Dbr=o(" \u2014 "),KX=a("a"),qbr=o("TFFunnelForQuestionAnswering"),Gbr=o(" (Funnel Transformer model)"),Obr=l(),QC=a("li"),m2e=a("strong"),Xbr=o("gptj"),Vbr=o(" \u2014 "),ZX=a("a"),zbr=o("TFGPTJForQuestionAnswering"),Wbr=o(" (GPT-J model)"),Qbr=l(),HC=a("li"),g2e=a("strong"),Hbr=o("longformer"),Ubr=o(" \u2014 "),eV=a("a"),Jbr=o("TFLongformerForQuestionAnswering"),Ybr=o(" (Longformer model)"),Kbr=l(),UC=a("li"),h2e=a("strong"),Zbr=o("mobilebert"),evr=o(" \u2014 "),oV=a("a"),ovr=o("TFMobileBertForQuestionAnswering"),rvr=o(" (MobileBERT model)"),tvr=l(),JC=a("li"),p2e=a("strong"),avr=o("mpnet"),nvr=o(" \u2014 "),rV=a("a"),svr=o("TFMPNetForQuestionAnswering"),lvr=o(" (MPNet model)"),ivr=l(),YC=a("li"),_2e=a("strong"),dvr=o("rembert"),cvr=o(" \u2014 "),tV=a("a"),fvr=o("TFRemBertForQuestionAnswering"),mvr=o(" (RemBERT model)"),gvr=l(),KC=a("li"),u2e=a("strong"),hvr=o("roberta"),pvr=o(" \u2014 "),aV=a("a"),_vr=o("TFRobertaForQuestionAnswering"),uvr=o(" (RoBERTa model)"),bvr=l(),ZC=a("li"),b2e=a("strong"),vvr=o("roformer"),Tvr=o(" \u2014 "),nV=a("a"),Fvr=o("TFRoFormerForQuestionAnswering"),Cvr=o(" (RoFormer model)"),Mvr=l(),eM=a("li"),v2e=a("strong"),Evr=o("xlm"),yvr=o(" \u2014 "),sV=a("a"),wvr=o("TFXLMForQuestionAnsweringSimple"),Avr=o(" (XLM model)"),Lvr=l(),oM=a("li"),T2e=a("strong"),Bvr=o("xlm-roberta"),xvr=o(" \u2014 "),lV=a("a"),kvr=o("TFXLMRobertaForQuestionAnswering"),Rvr=o(" (XLM-RoBERTa model)"),Svr=l(),rM=a("li"),F2e=a("strong"),Pvr=o("xlnet"),$vr=o(" \u2014 "),iV=a("a"),Ivr=o("TFXLNetForQuestionAnsweringSimple"),Nvr=o(" (XLNet model)"),jvr=l(),C2e=a("p"),Dvr=o("Examples:"),qvr=l(),f(pL.$$.fragment),YRe=l(),zc=a("h2"),tM=a("a"),M2e=a("span"),f(_L.$$.fragment),Gvr=l(),E2e=a("span"),Ovr=o("TFAutoModelForVision2Seq"),KRe=l(),xr=a("div"),f(uL.$$.fragment),Xvr=l(),Wc=a("p"),Vvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),y2e=a("code"),zvr=o("from_pretrained()"),Wvr=o("class method or the "),w2e=a("code"),Qvr=o("from_config()"),Hvr=o(`class
method.`),Uvr=l(),bL=a("p"),Jvr=o("This class cannot be instantiated directly using "),A2e=a("code"),Yvr=o("__init__()"),Kvr=o(" (throws an error)."),Zvr=l(),Et=a("div"),f(vL.$$.fragment),e6r=l(),L2e=a("p"),o6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),r6r=l(),Qc=a("p"),t6r=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),a6r=o("not"),n6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x2e=a("code"),s6r=o("from_pretrained()"),l6r=o("to load the model weights."),i6r=l(),k2e=a("p"),d6r=o("Examples:"),c6r=l(),f(TL.$$.fragment),f6r=l(),yo=a("div"),f(FL.$$.fragment),m6r=l(),R2e=a("p"),g6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h6r=l(),An=a("p"),p6r=o("The model class to instantiate is selected based on the "),S2e=a("code"),_6r=o("model_type"),u6r=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),b6r=o("pretrained_model_name_or_path"),v6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),T6r=o("pretrained_model_name_or_path"),F6r=o(":"),C6r=l(),I2e=a("ul"),aM=a("li"),N2e=a("strong"),M6r=o("vision-encoder-decoder"),E6r=o(" \u2014 "),dV=a("a"),y6r=o("TFVisionEncoderDecoderModel"),w6r=o(" (Vision Encoder decoder model)"),A6r=l(),j2e=a("p"),L6r=o("Examples:"),B6r=l(),f(CL.$$.fragment),ZRe=l(),Hc=a("h2"),nM=a("a"),D2e=a("span"),f(ML.$$.fragment),x6r=l(),q2e=a("span"),k6r=o("TFAutoModelForSpeechSeq2Seq"),eSe=l(),kr=a("div"),f(EL.$$.fragment),R6r=l(),Uc=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),G2e=a("code"),P6r=o("from_pretrained()"),$6r=o("class method or the "),O2e=a("code"),I6r=o("from_config()"),N6r=o(`class
method.`),j6r=l(),yL=a("p"),D6r=o("This class cannot be instantiated directly using "),X2e=a("code"),q6r=o("__init__()"),G6r=o(" (throws an error)."),O6r=l(),yt=a("div"),f(wL.$$.fragment),X6r=l(),V2e=a("p"),V6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z6r=l(),Jc=a("p"),W6r=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),Q6r=o("not"),H6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W2e=a("code"),U6r=o("from_pretrained()"),J6r=o("to load the model weights."),Y6r=l(),Q2e=a("p"),K6r=o("Examples:"),Z6r=l(),f(AL.$$.fragment),eTr=l(),wo=a("div"),f(LL.$$.fragment),oTr=l(),H2e=a("p"),rTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tTr=l(),Ln=a("p"),aTr=o("The model class to instantiate is selected based on the "),U2e=a("code"),nTr=o("model_type"),sTr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),dTr=o("pretrained_model_name_or_path"),cTr=o(":"),fTr=l(),K2e=a("ul"),sM=a("li"),Z2e=a("strong"),mTr=o("speech_to_text"),gTr=o(" \u2014 "),cV=a("a"),hTr=o("TFSpeech2TextForConditionalGeneration"),pTr=o(" (Speech2Text model)"),_Tr=l(),e1e=a("p"),uTr=o("Examples:"),bTr=l(),f(BL.$$.fragment),oSe=l(),Yc=a("h2"),lM=a("a"),o1e=a("span"),f(xL.$$.fragment),vTr=l(),r1e=a("span"),TTr=o("FlaxAutoModel"),rSe=l(),Rr=a("div"),f(kL.$$.fragment),FTr=l(),Kc=a("p"),CTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),t1e=a("code"),MTr=o("from_pretrained()"),ETr=o("class method or the "),a1e=a("code"),yTr=o("from_config()"),wTr=o(`class
method.`),ATr=l(),RL=a("p"),LTr=o("This class cannot be instantiated directly using "),n1e=a("code"),BTr=o("__init__()"),xTr=o(" (throws an error)."),kTr=l(),wt=a("div"),f(SL.$$.fragment),RTr=l(),s1e=a("p"),STr=o("Instantiates one of the base model classes of the library from a configuration."),PTr=l(),Zc=a("p"),$Tr=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),ITr=o("not"),NTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i1e=a("code"),jTr=o("from_pretrained()"),DTr=o("to load the model weights."),qTr=l(),d1e=a("p"),GTr=o("Examples:"),OTr=l(),f(PL.$$.fragment),XTr=l(),Ao=a("div"),f($L.$$.fragment),VTr=l(),c1e=a("p"),zTr=o("Instantiate one of the base model classes of the library from a pretrained model."),WTr=l(),Bn=a("p"),QTr=o("The model class to instantiate is selected based on the "),f1e=a("code"),HTr=o("model_type"),UTr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(":"),eFr=l(),z=a("ul"),iM=a("li"),h1e=a("strong"),oFr=o("albert"),rFr=o(" \u2014 "),fV=a("a"),tFr=o("FlaxAlbertModel"),aFr=o(" (ALBERT model)"),nFr=l(),dM=a("li"),p1e=a("strong"),sFr=o("bart"),lFr=o(" \u2014 "),mV=a("a"),iFr=o("FlaxBartModel"),dFr=o(" (BART model)"),cFr=l(),cM=a("li"),_1e=a("strong"),fFr=o("beit"),mFr=o(" \u2014 "),gV=a("a"),gFr=o("FlaxBeitModel"),hFr=o(" (BEiT model)"),pFr=l(),fM=a("li"),u1e=a("strong"),_Fr=o("bert"),uFr=o(" \u2014 "),hV=a("a"),bFr=o("FlaxBertModel"),vFr=o(" (BERT model)"),TFr=l(),mM=a("li"),b1e=a("strong"),FFr=o("big_bird"),CFr=o(" \u2014 "),pV=a("a"),MFr=o("FlaxBigBirdModel"),EFr=o(" (BigBird model)"),yFr=l(),gM=a("li"),v1e=a("strong"),wFr=o("blenderbot"),AFr=o(" \u2014 "),_V=a("a"),LFr=o("FlaxBlenderbotModel"),BFr=o(" (Blenderbot model)"),xFr=l(),hM=a("li"),T1e=a("strong"),kFr=o("blenderbot-small"),RFr=o(" \u2014 "),uV=a("a"),SFr=o("FlaxBlenderbotSmallModel"),PFr=o(" (BlenderbotSmall model)"),$Fr=l(),pM=a("li"),F1e=a("strong"),IFr=o("clip"),NFr=o(" \u2014 "),bV=a("a"),jFr=o("FlaxCLIPModel"),DFr=o(" (CLIP model)"),qFr=l(),_M=a("li"),C1e=a("strong"),GFr=o("distilbert"),OFr=o(" \u2014 "),vV=a("a"),XFr=o("FlaxDistilBertModel"),VFr=o(" (DistilBERT model)"),zFr=l(),uM=a("li"),M1e=a("strong"),WFr=o("electra"),QFr=o(" \u2014 "),TV=a("a"),HFr=o("FlaxElectraModel"),UFr=o(" (ELECTRA model)"),JFr=l(),bM=a("li"),E1e=a("strong"),YFr=o("gpt2"),KFr=o(" \u2014 "),FV=a("a"),ZFr=o("FlaxGPT2Model"),eCr=o(" (OpenAI GPT-2 model)"),oCr=l(),vM=a("li"),y1e=a("strong"),rCr=o("gpt_neo"),tCr=o(" \u2014 "),CV=a("a"),aCr=o("FlaxGPTNeoModel"),nCr=o(" (GPT Neo model)"),sCr=l(),TM=a("li"),w1e=a("strong"),lCr=o("gptj"),iCr=o(" \u2014 "),MV=a("a"),dCr=o("FlaxGPTJModel"),cCr=o(" (GPT-J model)"),fCr=l(),FM=a("li"),A1e=a("strong"),mCr=o("marian"),gCr=o(" \u2014 "),EV=a("a"),hCr=o("FlaxMarianModel"),pCr=o(" (Marian model)"),_Cr=l(),CM=a("li"),L1e=a("strong"),uCr=o("mbart"),bCr=o(" \u2014 "),yV=a("a"),vCr=o("FlaxMBartModel"),TCr=o(" (mBART model)"),FCr=l(),MM=a("li"),B1e=a("strong"),CCr=o("mt5"),MCr=o(" \u2014 "),wV=a("a"),ECr=o("FlaxMT5Model"),yCr=o(" (mT5 model)"),wCr=l(),EM=a("li"),x1e=a("strong"),ACr=o("pegasus"),LCr=o(" \u2014 "),AV=a("a"),BCr=o("FlaxPegasusModel"),xCr=o(" (Pegasus model)"),kCr=l(),yM=a("li"),k1e=a("strong"),RCr=o("roberta"),SCr=o(" \u2014 "),LV=a("a"),PCr=o("FlaxRobertaModel"),$Cr=o(" (RoBERTa model)"),ICr=l(),wM=a("li"),R1e=a("strong"),NCr=o("roformer"),jCr=o(" \u2014 "),BV=a("a"),DCr=o("FlaxRoFormerModel"),qCr=o(" (RoFormer model)"),GCr=l(),AM=a("li"),S1e=a("strong"),OCr=o("t5"),XCr=o(" \u2014 "),xV=a("a"),VCr=o("FlaxT5Model"),zCr=o(" (T5 model)"),WCr=l(),LM=a("li"),P1e=a("strong"),QCr=o("vision-text-dual-encoder"),HCr=o(" \u2014 "),kV=a("a"),UCr=o("FlaxVisionTextDualEncoderModel"),JCr=o(" (VisionTextDualEncoder model)"),YCr=l(),BM=a("li"),$1e=a("strong"),KCr=o("vit"),ZCr=o(" \u2014 "),RV=a("a"),eMr=o("FlaxViTModel"),oMr=o(" (ViT model)"),rMr=l(),xM=a("li"),I1e=a("strong"),tMr=o("wav2vec2"),aMr=o(" \u2014 "),SV=a("a"),nMr=o("FlaxWav2Vec2Model"),sMr=o(" (Wav2Vec2 model)"),lMr=l(),kM=a("li"),N1e=a("strong"),iMr=o("xglm"),dMr=o(" \u2014 "),PV=a("a"),cMr=o("FlaxXGLMModel"),fMr=o(" (XGLM model)"),mMr=l(),RM=a("li"),j1e=a("strong"),gMr=o("xlm-roberta"),hMr=o(" \u2014 "),$V=a("a"),pMr=o("FlaxXLMRobertaModel"),_Mr=o(" (XLM-RoBERTa model)"),uMr=l(),D1e=a("p"),bMr=o("Examples:"),vMr=l(),f(IL.$$.fragment),tSe=l(),ef=a("h2"),SM=a("a"),q1e=a("span"),f(NL.$$.fragment),TMr=l(),G1e=a("span"),FMr=o("FlaxAutoModelForCausalLM"),aSe=l(),Sr=a("div"),f(jL.$$.fragment),CMr=l(),of=a("p"),MMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),O1e=a("code"),EMr=o("from_pretrained()"),yMr=o("class method or the "),X1e=a("code"),wMr=o("from_config()"),AMr=o(`class
method.`),LMr=l(),DL=a("p"),BMr=o("This class cannot be instantiated directly using "),V1e=a("code"),xMr=o("__init__()"),kMr=o(" (throws an error)."),RMr=l(),At=a("div"),f(qL.$$.fragment),SMr=l(),z1e=a("p"),PMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Mr=l(),rf=a("p"),IMr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),NMr=o("not"),jMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q1e=a("code"),DMr=o("from_pretrained()"),qMr=o("to load the model weights."),GMr=l(),H1e=a("p"),OMr=o("Examples:"),XMr=l(),f(GL.$$.fragment),VMr=l(),Lo=a("div"),f(OL.$$.fragment),zMr=l(),U1e=a("p"),WMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QMr=l(),xn=a("p"),HMr=o("The model class to instantiate is selected based on the "),J1e=a("code"),UMr=o("model_type"),JMr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),ZMr=o("pretrained_model_name_or_path"),e4r=o(":"),o4r=l(),ca=a("ul"),PM=a("li"),Z1e=a("strong"),r4r=o("bart"),t4r=o(" \u2014 "),IV=a("a"),a4r=o("FlaxBartForCausalLM"),n4r=o(" (BART model)"),s4r=l(),$M=a("li"),ebe=a("strong"),l4r=o("gpt2"),i4r=o(" \u2014 "),NV=a("a"),d4r=o("FlaxGPT2LMHeadModel"),c4r=o(" (OpenAI GPT-2 model)"),f4r=l(),IM=a("li"),obe=a("strong"),m4r=o("gpt_neo"),g4r=o(" \u2014 "),jV=a("a"),h4r=o("FlaxGPTNeoForCausalLM"),p4r=o(" (GPT Neo model)"),_4r=l(),NM=a("li"),rbe=a("strong"),u4r=o("gptj"),b4r=o(" \u2014 "),DV=a("a"),v4r=o("FlaxGPTJForCausalLM"),T4r=o(" (GPT-J model)"),F4r=l(),jM=a("li"),tbe=a("strong"),C4r=o("xglm"),M4r=o(" \u2014 "),qV=a("a"),E4r=o("FlaxXGLMForCausalLM"),y4r=o(" (XGLM model)"),w4r=l(),abe=a("p"),A4r=o("Examples:"),L4r=l(),f(XL.$$.fragment),nSe=l(),tf=a("h2"),DM=a("a"),nbe=a("span"),f(VL.$$.fragment),B4r=l(),sbe=a("span"),x4r=o("FlaxAutoModelForPreTraining"),sSe=l(),Pr=a("div"),f(zL.$$.fragment),k4r=l(),af=a("p"),R4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lbe=a("code"),S4r=o("from_pretrained()"),P4r=o("class method or the "),ibe=a("code"),$4r=o("from_config()"),I4r=o(`class
method.`),N4r=l(),WL=a("p"),j4r=o("This class cannot be instantiated directly using "),dbe=a("code"),D4r=o("__init__()"),q4r=o(" (throws an error)."),G4r=l(),Lt=a("div"),f(QL.$$.fragment),O4r=l(),cbe=a("p"),X4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V4r=l(),nf=a("p"),z4r=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),W4r=o("not"),Q4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mbe=a("code"),H4r=o("from_pretrained()"),U4r=o("to load the model weights."),J4r=l(),gbe=a("p"),Y4r=o("Examples:"),K4r=l(),f(HL.$$.fragment),Z4r=l(),Bo=a("div"),f(UL.$$.fragment),eEr=l(),hbe=a("p"),oEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rEr=l(),kn=a("p"),tEr=o("The model class to instantiate is selected based on the "),pbe=a("code"),aEr=o("model_type"),nEr=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),iEr=o("pretrained_model_name_or_path"),dEr=o(":"),cEr=l(),fe=a("ul"),qM=a("li"),bbe=a("strong"),fEr=o("albert"),mEr=o(" \u2014 "),GV=a("a"),gEr=o("FlaxAlbertForPreTraining"),hEr=o(" (ALBERT model)"),pEr=l(),GM=a("li"),vbe=a("strong"),_Er=o("bart"),uEr=o(" \u2014 "),OV=a("a"),bEr=o("FlaxBartForConditionalGeneration"),vEr=o(" (BART model)"),TEr=l(),OM=a("li"),Tbe=a("strong"),FEr=o("bert"),CEr=o(" \u2014 "),XV=a("a"),MEr=o("FlaxBertForPreTraining"),EEr=o(" (BERT model)"),yEr=l(),XM=a("li"),Fbe=a("strong"),wEr=o("big_bird"),AEr=o(" \u2014 "),VV=a("a"),LEr=o("FlaxBigBirdForPreTraining"),BEr=o(" (BigBird model)"),xEr=l(),VM=a("li"),Cbe=a("strong"),kEr=o("electra"),REr=o(" \u2014 "),zV=a("a"),SEr=o("FlaxElectraForPreTraining"),PEr=o(" (ELECTRA model)"),$Er=l(),zM=a("li"),Mbe=a("strong"),IEr=o("mbart"),NEr=o(" \u2014 "),WV=a("a"),jEr=o("FlaxMBartForConditionalGeneration"),DEr=o(" (mBART model)"),qEr=l(),WM=a("li"),Ebe=a("strong"),GEr=o("mt5"),OEr=o(" \u2014 "),QV=a("a"),XEr=o("FlaxMT5ForConditionalGeneration"),VEr=o(" (mT5 model)"),zEr=l(),QM=a("li"),ybe=a("strong"),WEr=o("roberta"),QEr=o(" \u2014 "),HV=a("a"),HEr=o("FlaxRobertaForMaskedLM"),UEr=o(" (RoBERTa model)"),JEr=l(),HM=a("li"),wbe=a("strong"),YEr=o("roformer"),KEr=o(" \u2014 "),UV=a("a"),ZEr=o("FlaxRoFormerForMaskedLM"),e3r=o(" (RoFormer model)"),o3r=l(),UM=a("li"),Abe=a("strong"),r3r=o("t5"),t3r=o(" \u2014 "),JV=a("a"),a3r=o("FlaxT5ForConditionalGeneration"),n3r=o(" (T5 model)"),s3r=l(),JM=a("li"),Lbe=a("strong"),l3r=o("wav2vec2"),i3r=o(" \u2014 "),YV=a("a"),d3r=o("FlaxWav2Vec2ForPreTraining"),c3r=o(" (Wav2Vec2 model)"),f3r=l(),YM=a("li"),Bbe=a("strong"),m3r=o("xlm-roberta"),g3r=o(" \u2014 "),KV=a("a"),h3r=o("FlaxXLMRobertaForMaskedLM"),p3r=o(" (XLM-RoBERTa model)"),_3r=l(),xbe=a("p"),u3r=o("Examples:"),b3r=l(),f(JL.$$.fragment),lSe=l(),sf=a("h2"),KM=a("a"),kbe=a("span"),f(YL.$$.fragment),v3r=l(),Rbe=a("span"),T3r=o("FlaxAutoModelForMaskedLM"),iSe=l(),$r=a("div"),f(KL.$$.fragment),F3r=l(),lf=a("p"),C3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Sbe=a("code"),M3r=o("from_pretrained()"),E3r=o("class method or the "),Pbe=a("code"),y3r=o("from_config()"),w3r=o(`class
method.`),A3r=l(),ZL=a("p"),L3r=o("This class cannot be instantiated directly using "),$be=a("code"),B3r=o("__init__()"),x3r=o(" (throws an error)."),k3r=l(),Bt=a("div"),f(e7.$$.fragment),R3r=l(),Ibe=a("p"),S3r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P3r=l(),df=a("p"),$3r=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),I3r=o("not"),N3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jbe=a("code"),j3r=o("from_pretrained()"),D3r=o("to load the model weights."),q3r=l(),Dbe=a("p"),G3r=o("Examples:"),O3r=l(),f(o7.$$.fragment),X3r=l(),xo=a("div"),f(r7.$$.fragment),V3r=l(),qbe=a("p"),z3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W3r=l(),Rn=a("p"),Q3r=o("The model class to instantiate is selected based on the "),Gbe=a("code"),H3r=o("model_type"),U3r=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),J3r=o("pretrained_model_name_or_path"),Y3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),K3r=o("pretrained_model_name_or_path"),Z3r=o(":"),eyr=l(),be=a("ul"),ZM=a("li"),Vbe=a("strong"),oyr=o("albert"),ryr=o(" \u2014 "),ZV=a("a"),tyr=o("FlaxAlbertForMaskedLM"),ayr=o(" (ALBERT model)"),nyr=l(),e4=a("li"),zbe=a("strong"),syr=o("bart"),lyr=o(" \u2014 "),ez=a("a"),iyr=o("FlaxBartForConditionalGeneration"),dyr=o(" (BART model)"),cyr=l(),o4=a("li"),Wbe=a("strong"),fyr=o("bert"),myr=o(" \u2014 "),oz=a("a"),gyr=o("FlaxBertForMaskedLM"),hyr=o(" (BERT model)"),pyr=l(),r4=a("li"),Qbe=a("strong"),_yr=o("big_bird"),uyr=o(" \u2014 "),rz=a("a"),byr=o("FlaxBigBirdForMaskedLM"),vyr=o(" (BigBird model)"),Tyr=l(),t4=a("li"),Hbe=a("strong"),Fyr=o("distilbert"),Cyr=o(" \u2014 "),tz=a("a"),Myr=o("FlaxDistilBertForMaskedLM"),Eyr=o(" (DistilBERT model)"),yyr=l(),a4=a("li"),Ube=a("strong"),wyr=o("electra"),Ayr=o(" \u2014 "),az=a("a"),Lyr=o("FlaxElectraForMaskedLM"),Byr=o(" (ELECTRA model)"),xyr=l(),n4=a("li"),Jbe=a("strong"),kyr=o("mbart"),Ryr=o(" \u2014 "),nz=a("a"),Syr=o("FlaxMBartForConditionalGeneration"),Pyr=o(" (mBART model)"),$yr=l(),s4=a("li"),Ybe=a("strong"),Iyr=o("roberta"),Nyr=o(" \u2014 "),sz=a("a"),jyr=o("FlaxRobertaForMaskedLM"),Dyr=o(" (RoBERTa model)"),qyr=l(),l4=a("li"),Kbe=a("strong"),Gyr=o("roformer"),Oyr=o(" \u2014 "),lz=a("a"),Xyr=o("FlaxRoFormerForMaskedLM"),Vyr=o(" (RoFormer model)"),zyr=l(),i4=a("li"),Zbe=a("strong"),Wyr=o("xlm-roberta"),Qyr=o(" \u2014 "),iz=a("a"),Hyr=o("FlaxXLMRobertaForMaskedLM"),Uyr=o(" (XLM-RoBERTa model)"),Jyr=l(),eve=a("p"),Yyr=o("Examples:"),Kyr=l(),f(t7.$$.fragment),dSe=l(),cf=a("h2"),d4=a("a"),ove=a("span"),f(a7.$$.fragment),Zyr=l(),rve=a("span"),ewr=o("FlaxAutoModelForSeq2SeqLM"),cSe=l(),Ir=a("div"),f(n7.$$.fragment),owr=l(),ff=a("p"),rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tve=a("code"),twr=o("from_pretrained()"),awr=o("class method or the "),ave=a("code"),nwr=o("from_config()"),swr=o(`class
method.`),lwr=l(),s7=a("p"),iwr=o("This class cannot be instantiated directly using "),nve=a("code"),dwr=o("__init__()"),cwr=o(" (throws an error)."),fwr=l(),xt=a("div"),f(l7.$$.fragment),mwr=l(),sve=a("p"),gwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hwr=l(),mf=a("p"),pwr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),_wr=o("not"),uwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ive=a("code"),bwr=o("from_pretrained()"),vwr=o("to load the model weights."),Twr=l(),dve=a("p"),Fwr=o("Examples:"),Cwr=l(),f(i7.$$.fragment),Mwr=l(),ko=a("div"),f(d7.$$.fragment),Ewr=l(),cve=a("p"),ywr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wwr=l(),Sn=a("p"),Awr=o("The model class to instantiate is selected based on the "),fve=a("code"),Lwr=o("model_type"),Bwr=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),xwr=o("pretrained_model_name_or_path"),kwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),Rwr=o("pretrained_model_name_or_path"),Swr=o(":"),Pwr=l(),Me=a("ul"),c4=a("li"),hve=a("strong"),$wr=o("bart"),Iwr=o(" \u2014 "),dz=a("a"),Nwr=o("FlaxBartForConditionalGeneration"),jwr=o(" (BART model)"),Dwr=l(),f4=a("li"),pve=a("strong"),qwr=o("blenderbot"),Gwr=o(" \u2014 "),cz=a("a"),Owr=o("FlaxBlenderbotForConditionalGeneration"),Xwr=o(" (Blenderbot model)"),Vwr=l(),m4=a("li"),_ve=a("strong"),zwr=o("blenderbot-small"),Wwr=o(" \u2014 "),fz=a("a"),Qwr=o("FlaxBlenderbotSmallForConditionalGeneration"),Hwr=o(" (BlenderbotSmall model)"),Uwr=l(),g4=a("li"),uve=a("strong"),Jwr=o("encoder-decoder"),Ywr=o(" \u2014 "),mz=a("a"),Kwr=o("FlaxEncoderDecoderModel"),Zwr=o(" (Encoder decoder model)"),eAr=l(),h4=a("li"),bve=a("strong"),oAr=o("marian"),rAr=o(" \u2014 "),gz=a("a"),tAr=o("FlaxMarianMTModel"),aAr=o(" (Marian model)"),nAr=l(),p4=a("li"),vve=a("strong"),sAr=o("mbart"),lAr=o(" \u2014 "),hz=a("a"),iAr=o("FlaxMBartForConditionalGeneration"),dAr=o(" (mBART model)"),cAr=l(),_4=a("li"),Tve=a("strong"),fAr=o("mt5"),mAr=o(" \u2014 "),pz=a("a"),gAr=o("FlaxMT5ForConditionalGeneration"),hAr=o(" (mT5 model)"),pAr=l(),u4=a("li"),Fve=a("strong"),_Ar=o("pegasus"),uAr=o(" \u2014 "),_z=a("a"),bAr=o("FlaxPegasusForConditionalGeneration"),vAr=o(" (Pegasus model)"),TAr=l(),b4=a("li"),Cve=a("strong"),FAr=o("t5"),CAr=o(" \u2014 "),uz=a("a"),MAr=o("FlaxT5ForConditionalGeneration"),EAr=o(" (T5 model)"),yAr=l(),Mve=a("p"),wAr=o("Examples:"),AAr=l(),f(c7.$$.fragment),fSe=l(),gf=a("h2"),v4=a("a"),Eve=a("span"),f(f7.$$.fragment),LAr=l(),yve=a("span"),BAr=o("FlaxAutoModelForSequenceClassification"),mSe=l(),Nr=a("div"),f(m7.$$.fragment),xAr=l(),hf=a("p"),kAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wve=a("code"),RAr=o("from_pretrained()"),SAr=o("class method or the "),Ave=a("code"),PAr=o("from_config()"),$Ar=o(`class
method.`),IAr=l(),g7=a("p"),NAr=o("This class cannot be instantiated directly using "),Lve=a("code"),jAr=o("__init__()"),DAr=o(" (throws an error)."),qAr=l(),kt=a("div"),f(h7.$$.fragment),GAr=l(),Bve=a("p"),OAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XAr=l(),pf=a("p"),VAr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),zAr=o("not"),WAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kve=a("code"),QAr=o("from_pretrained()"),HAr=o("to load the model weights."),UAr=l(),Rve=a("p"),JAr=o("Examples:"),YAr=l(),f(p7.$$.fragment),KAr=l(),Ro=a("div"),f(_7.$$.fragment),ZAr=l(),Sve=a("p"),e0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),o0r=l(),Pn=a("p"),r0r=o("The model class to instantiate is selected based on the "),Pve=a("code"),t0r=o("model_type"),a0r=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(":"),d0r=l(),ve=a("ul"),T4=a("li"),Nve=a("strong"),c0r=o("albert"),f0r=o(" \u2014 "),bz=a("a"),m0r=o("FlaxAlbertForSequenceClassification"),g0r=o(" (ALBERT model)"),h0r=l(),F4=a("li"),jve=a("strong"),p0r=o("bart"),_0r=o(" \u2014 "),vz=a("a"),u0r=o("FlaxBartForSequenceClassification"),b0r=o(" (BART model)"),v0r=l(),C4=a("li"),Dve=a("strong"),T0r=o("bert"),F0r=o(" \u2014 "),Tz=a("a"),C0r=o("FlaxBertForSequenceClassification"),M0r=o(" (BERT model)"),E0r=l(),M4=a("li"),qve=a("strong"),y0r=o("big_bird"),w0r=o(" \u2014 "),Fz=a("a"),A0r=o("FlaxBigBirdForSequenceClassification"),L0r=o(" (BigBird model)"),B0r=l(),E4=a("li"),Gve=a("strong"),x0r=o("distilbert"),k0r=o(" \u2014 "),Cz=a("a"),R0r=o("FlaxDistilBertForSequenceClassification"),S0r=o(" (DistilBERT model)"),P0r=l(),y4=a("li"),Ove=a("strong"),$0r=o("electra"),I0r=o(" \u2014 "),Mz=a("a"),N0r=o("FlaxElectraForSequenceClassification"),j0r=o(" (ELECTRA model)"),D0r=l(),w4=a("li"),Xve=a("strong"),q0r=o("mbart"),G0r=o(" \u2014 "),Ez=a("a"),O0r=o("FlaxMBartForSequenceClassification"),X0r=o(" (mBART model)"),V0r=l(),A4=a("li"),Vve=a("strong"),z0r=o("roberta"),W0r=o(" \u2014 "),yz=a("a"),Q0r=o("FlaxRobertaForSequenceClassification"),H0r=o(" (RoBERTa model)"),U0r=l(),L4=a("li"),zve=a("strong"),J0r=o("roformer"),Y0r=o(" \u2014 "),wz=a("a"),K0r=o("FlaxRoFormerForSequenceClassification"),Z0r=o(" (RoFormer model)"),eLr=l(),B4=a("li"),Wve=a("strong"),oLr=o("xlm-roberta"),rLr=o(" \u2014 "),Az=a("a"),tLr=o("FlaxXLMRobertaForSequenceClassification"),aLr=o(" (XLM-RoBERTa model)"),nLr=l(),Qve=a("p"),sLr=o("Examples:"),lLr=l(),f(u7.$$.fragment),gSe=l(),_f=a("h2"),x4=a("a"),Hve=a("span"),f(b7.$$.fragment),iLr=l(),Uve=a("span"),dLr=o("FlaxAutoModelForQuestionAnswering"),hSe=l(),jr=a("div"),f(v7.$$.fragment),cLr=l(),uf=a("p"),fLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jve=a("code"),mLr=o("from_pretrained()"),gLr=o("class method or the "),Yve=a("code"),hLr=o("from_config()"),pLr=o(`class
method.`),_Lr=l(),T7=a("p"),uLr=o("This class cannot be instantiated directly using "),Kve=a("code"),bLr=o("__init__()"),vLr=o(" (throws an error)."),TLr=l(),Rt=a("div"),f(F7.$$.fragment),FLr=l(),Zve=a("p"),CLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MLr=l(),bf=a("p"),ELr=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),yLr=o("not"),wLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o6e=a("code"),ALr=o("from_pretrained()"),LLr=o("to load the model weights."),BLr=l(),r6e=a("p"),xLr=o("Examples:"),kLr=l(),f(C7.$$.fragment),RLr=l(),So=a("div"),f(M7.$$.fragment),SLr=l(),t6e=a("p"),PLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Lr=l(),$n=a("p"),ILr=o("The model class to instantiate is selected based on the "),a6e=a("code"),NLr=o("model_type"),jLr=o(` property of the config object (either
passed as an argument or loaded from `),n6e=a("code"),DLr=o("pretrained_model_name_or_path"),qLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=a("code"),GLr=o("pretrained_model_name_or_path"),OLr=o(":"),XLr=l(),Te=a("ul"),k4=a("li"),l6e=a("strong"),VLr=o("albert"),zLr=o(" \u2014 "),Lz=a("a"),WLr=o("FlaxAlbertForQuestionAnswering"),QLr=o(" (ALBERT model)"),HLr=l(),R4=a("li"),i6e=a("strong"),ULr=o("bart"),JLr=o(" \u2014 "),Bz=a("a"),YLr=o("FlaxBartForQuestionAnswering"),KLr=o(" (BART model)"),ZLr=l(),S4=a("li"),d6e=a("strong"),e7r=o("bert"),o7r=o(" \u2014 "),xz=a("a"),r7r=o("FlaxBertForQuestionAnswering"),t7r=o(" (BERT model)"),a7r=l(),P4=a("li"),c6e=a("strong"),n7r=o("big_bird"),s7r=o(" \u2014 "),kz=a("a"),l7r=o("FlaxBigBirdForQuestionAnswering"),i7r=o(" (BigBird model)"),d7r=l(),$4=a("li"),f6e=a("strong"),c7r=o("distilbert"),f7r=o(" \u2014 "),Rz=a("a"),m7r=o("FlaxDistilBertForQuestionAnswering"),g7r=o(" (DistilBERT model)"),h7r=l(),I4=a("li"),m6e=a("strong"),p7r=o("electra"),_7r=o(" \u2014 "),Sz=a("a"),u7r=o("FlaxElectraForQuestionAnswering"),b7r=o(" (ELECTRA model)"),v7r=l(),N4=a("li"),g6e=a("strong"),T7r=o("mbart"),F7r=o(" \u2014 "),Pz=a("a"),C7r=o("FlaxMBartForQuestionAnswering"),M7r=o(" (mBART model)"),E7r=l(),j4=a("li"),h6e=a("strong"),y7r=o("roberta"),w7r=o(" \u2014 "),$z=a("a"),A7r=o("FlaxRobertaForQuestionAnswering"),L7r=o(" (RoBERTa model)"),B7r=l(),D4=a("li"),p6e=a("strong"),x7r=o("roformer"),k7r=o(" \u2014 "),Iz=a("a"),R7r=o("FlaxRoFormerForQuestionAnswering"),S7r=o(" (RoFormer model)"),P7r=l(),q4=a("li"),_6e=a("strong"),$7r=o("xlm-roberta"),I7r=o(" \u2014 "),Nz=a("a"),N7r=o("FlaxXLMRobertaForQuestionAnswering"),j7r=o(" (XLM-RoBERTa model)"),D7r=l(),u6e=a("p"),q7r=o("Examples:"),G7r=l(),f(E7.$$.fragment),pSe=l(),vf=a("h2"),G4=a("a"),b6e=a("span"),f(y7.$$.fragment),O7r=l(),v6e=a("span"),X7r=o("FlaxAutoModelForTokenClassification"),_Se=l(),Dr=a("div"),f(w7.$$.fragment),V7r=l(),Tf=a("p"),z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),T6e=a("code"),W7r=o("from_pretrained()"),Q7r=o("class method or the "),F6e=a("code"),H7r=o("from_config()"),U7r=o(`class
method.`),J7r=l(),A7=a("p"),Y7r=o("This class cannot be instantiated directly using "),C6e=a("code"),K7r=o("__init__()"),Z7r=o(" (throws an error)."),e8r=l(),St=a("div"),f(L7.$$.fragment),o8r=l(),M6e=a("p"),r8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t8r=l(),Ff=a("p"),a8r=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),n8r=o("not"),s8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y6e=a("code"),l8r=o("from_pretrained()"),i8r=o("to load the model weights."),d8r=l(),w6e=a("p"),c8r=o("Examples:"),f8r=l(),f(B7.$$.fragment),m8r=l(),Po=a("div"),f(x7.$$.fragment),g8r=l(),A6e=a("p"),h8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p8r=l(),In=a("p"),_8r=o("The model class to instantiate is selected based on the "),L6e=a("code"),u8r=o("model_type"),b8r=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),v8r=o("pretrained_model_name_or_path"),T8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),F8r=o("pretrained_model_name_or_path"),C8r=o(":"),M8r=l(),Se=a("ul"),O4=a("li"),k6e=a("strong"),E8r=o("albert"),y8r=o(" \u2014 "),jz=a("a"),w8r=o("FlaxAlbertForTokenClassification"),A8r=o(" (ALBERT model)"),L8r=l(),X4=a("li"),R6e=a("strong"),B8r=o("bert"),x8r=o(" \u2014 "),Dz=a("a"),k8r=o("FlaxBertForTokenClassification"),R8r=o(" (BERT model)"),S8r=l(),V4=a("li"),S6e=a("strong"),P8r=o("big_bird"),$8r=o(" \u2014 "),qz=a("a"),I8r=o("FlaxBigBirdForTokenClassification"),N8r=o(" (BigBird model)"),j8r=l(),z4=a("li"),P6e=a("strong"),D8r=o("distilbert"),q8r=o(" \u2014 "),Gz=a("a"),G8r=o("FlaxDistilBertForTokenClassification"),O8r=o(" (DistilBERT model)"),X8r=l(),W4=a("li"),$6e=a("strong"),V8r=o("electra"),z8r=o(" \u2014 "),Oz=a("a"),W8r=o("FlaxElectraForTokenClassification"),Q8r=o(" (ELECTRA model)"),H8r=l(),Q4=a("li"),I6e=a("strong"),U8r=o("roberta"),J8r=o(" \u2014 "),Xz=a("a"),Y8r=o("FlaxRobertaForTokenClassification"),K8r=o(" (RoBERTa model)"),Z8r=l(),H4=a("li"),N6e=a("strong"),e9r=o("roformer"),o9r=o(" \u2014 "),Vz=a("a"),r9r=o("FlaxRoFormerForTokenClassification"),t9r=o(" (RoFormer model)"),a9r=l(),U4=a("li"),j6e=a("strong"),n9r=o("xlm-roberta"),s9r=o(" \u2014 "),zz=a("a"),l9r=o("FlaxXLMRobertaForTokenClassification"),i9r=o(" (XLM-RoBERTa model)"),d9r=l(),D6e=a("p"),c9r=o("Examples:"),f9r=l(),f(k7.$$.fragment),uSe=l(),Cf=a("h2"),J4=a("a"),q6e=a("span"),f(R7.$$.fragment),m9r=l(),G6e=a("span"),g9r=o("FlaxAutoModelForMultipleChoice"),bSe=l(),qr=a("div"),f(S7.$$.fragment),h9r=l(),Mf=a("p"),p9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),O6e=a("code"),_9r=o("from_pretrained()"),u9r=o("class method or the "),X6e=a("code"),b9r=o("from_config()"),v9r=o(`class
method.`),T9r=l(),P7=a("p"),F9r=o("This class cannot be instantiated directly using "),V6e=a("code"),C9r=o("__init__()"),M9r=o(" (throws an error)."),E9r=l(),Pt=a("div"),f($7.$$.fragment),y9r=l(),z6e=a("p"),w9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A9r=l(),Ef=a("p"),L9r=o(`Note:
Loading a model from its configuration file does `),W6e=a("strong"),B9r=o("not"),x9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q6e=a("code"),k9r=o("from_pretrained()"),R9r=o("to load the model weights."),S9r=l(),H6e=a("p"),P9r=o("Examples:"),$9r=l(),f(I7.$$.fragment),I9r=l(),$o=a("div"),f(N7.$$.fragment),N9r=l(),U6e=a("p"),j9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D9r=l(),Nn=a("p"),q9r=o("The model class to instantiate is selected based on the "),J6e=a("code"),G9r=o("model_type"),O9r=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),X9r=o("pretrained_model_name_or_path"),V9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),z9r=o("pretrained_model_name_or_path"),W9r=o(":"),Q9r=l(),Pe=a("ul"),Y4=a("li"),Z6e=a("strong"),H9r=o("albert"),U9r=o(" \u2014 "),Wz=a("a"),J9r=o("FlaxAlbertForMultipleChoice"),Y9r=o(" (ALBERT model)"),K9r=l(),K4=a("li"),eTe=a("strong"),Z9r=o("bert"),eBr=o(" \u2014 "),Qz=a("a"),oBr=o("FlaxBertForMultipleChoice"),rBr=o(" (BERT model)"),tBr=l(),Z4=a("li"),oTe=a("strong"),aBr=o("big_bird"),nBr=o(" \u2014 "),Hz=a("a"),sBr=o("FlaxBigBirdForMultipleChoice"),lBr=o(" (BigBird model)"),iBr=l(),eE=a("li"),rTe=a("strong"),dBr=o("distilbert"),cBr=o(" \u2014 "),Uz=a("a"),fBr=o("FlaxDistilBertForMultipleChoice"),mBr=o(" (DistilBERT model)"),gBr=l(),oE=a("li"),tTe=a("strong"),hBr=o("electra"),pBr=o(" \u2014 "),Jz=a("a"),_Br=o("FlaxElectraForMultipleChoice"),uBr=o(" (ELECTRA model)"),bBr=l(),rE=a("li"),aTe=a("strong"),vBr=o("roberta"),TBr=o(" \u2014 "),Yz=a("a"),FBr=o("FlaxRobertaForMultipleChoice"),CBr=o(" (RoBERTa model)"),MBr=l(),tE=a("li"),nTe=a("strong"),EBr=o("roformer"),yBr=o(" \u2014 "),Kz=a("a"),wBr=o("FlaxRoFormerForMultipleChoice"),ABr=o(" (RoFormer model)"),LBr=l(),aE=a("li"),sTe=a("strong"),BBr=o("xlm-roberta"),xBr=o(" \u2014 "),Zz=a("a"),kBr=o("FlaxXLMRobertaForMultipleChoice"),RBr=o(" (XLM-RoBERTa model)"),SBr=l(),lTe=a("p"),PBr=o("Examples:"),$Br=l(),f(j7.$$.fragment),vSe=l(),yf=a("h2"),nE=a("a"),iTe=a("span"),f(D7.$$.fragment),IBr=l(),dTe=a("span"),NBr=o("FlaxAutoModelForNextSentencePrediction"),TSe=l(),Gr=a("div"),f(q7.$$.fragment),jBr=l(),wf=a("p"),DBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cTe=a("code"),qBr=o("from_pretrained()"),GBr=o("class method or the "),fTe=a("code"),OBr=o("from_config()"),XBr=o(`class
method.`),VBr=l(),G7=a("p"),zBr=o("This class cannot be instantiated directly using "),mTe=a("code"),WBr=o("__init__()"),QBr=o(" (throws an error)."),HBr=l(),$t=a("div"),f(O7.$$.fragment),UBr=l(),gTe=a("p"),JBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YBr=l(),Af=a("p"),KBr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),ZBr=o("not"),exr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pTe=a("code"),oxr=o("from_pretrained()"),rxr=o("to load the model weights."),txr=l(),_Te=a("p"),axr=o("Examples:"),nxr=l(),f(X7.$$.fragment),sxr=l(),Io=a("div"),f(V7.$$.fragment),lxr=l(),uTe=a("p"),ixr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dxr=l(),jn=a("p"),cxr=o("The model class to instantiate is selected based on the "),bTe=a("code"),fxr=o("model_type"),mxr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),pxr=o("pretrained_model_name_or_path"),_xr=o(":"),uxr=l(),FTe=a("ul"),sE=a("li"),CTe=a("strong"),bxr=o("bert"),vxr=o(" \u2014 "),eW=a("a"),Txr=o("FlaxBertForNextSentencePrediction"),Fxr=o(" (BERT model)"),Cxr=l(),MTe=a("p"),Mxr=o("Examples:"),Exr=l(),f(z7.$$.fragment),FSe=l(),Lf=a("h2"),lE=a("a"),ETe=a("span"),f(W7.$$.fragment),yxr=l(),yTe=a("span"),wxr=o("FlaxAutoModelForImageClassification"),CSe=l(),Or=a("div"),f(Q7.$$.fragment),Axr=l(),Bf=a("p"),Lxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wTe=a("code"),Bxr=o("from_pretrained()"),xxr=o("class method or the "),ATe=a("code"),kxr=o("from_config()"),Rxr=o(`class
method.`),Sxr=l(),H7=a("p"),Pxr=o("This class cannot be instantiated directly using "),LTe=a("code"),$xr=o("__init__()"),Ixr=o(" (throws an error)."),Nxr=l(),It=a("div"),f(U7.$$.fragment),jxr=l(),BTe=a("p"),Dxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qxr=l(),xf=a("p"),Gxr=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),Oxr=o("not"),Xxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kTe=a("code"),Vxr=o("from_pretrained()"),zxr=o("to load the model weights."),Wxr=l(),RTe=a("p"),Qxr=o("Examples:"),Hxr=l(),f(J7.$$.fragment),Uxr=l(),No=a("div"),f(Y7.$$.fragment),Jxr=l(),STe=a("p"),Yxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kxr=l(),Dn=a("p"),Zxr=o("The model class to instantiate is selected based on the "),PTe=a("code"),ekr=o("model_type"),okr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),rkr=o("pretrained_model_name_or_path"),tkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),akr=o("pretrained_model_name_or_path"),nkr=o(":"),skr=l(),K7=a("ul"),iE=a("li"),NTe=a("strong"),lkr=o("beit"),ikr=o(" \u2014 "),oW=a("a"),dkr=o("FlaxBeitForImageClassification"),ckr=o(" (BEiT model)"),fkr=l(),dE=a("li"),jTe=a("strong"),mkr=o("vit"),gkr=o(" \u2014 "),rW=a("a"),hkr=o("FlaxViTForImageClassification"),pkr=o(" (ViT model)"),_kr=l(),DTe=a("p"),ukr=o("Examples:"),bkr=l(),f(Z7.$$.fragment),MSe=l(),kf=a("h2"),cE=a("a"),qTe=a("span"),f(e8.$$.fragment),vkr=l(),GTe=a("span"),Tkr=o("FlaxAutoModelForVision2Seq"),ESe=l(),Xr=a("div"),f(o8.$$.fragment),Fkr=l(),Rf=a("p"),Ckr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OTe=a("code"),Mkr=o("from_pretrained()"),Ekr=o("class method or the "),XTe=a("code"),ykr=o("from_config()"),wkr=o(`class
method.`),Akr=l(),r8=a("p"),Lkr=o("This class cannot be instantiated directly using "),VTe=a("code"),Bkr=o("__init__()"),xkr=o(" (throws an error)."),kkr=l(),Nt=a("div"),f(t8.$$.fragment),Rkr=l(),zTe=a("p"),Skr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pkr=l(),Sf=a("p"),$kr=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),Ikr=o("not"),Nkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QTe=a("code"),jkr=o("from_pretrained()"),Dkr=o("to load the model weights."),qkr=l(),HTe=a("p"),Gkr=o("Examples:"),Okr=l(),f(a8.$$.fragment),Xkr=l(),jo=a("div"),f(n8.$$.fragment),Vkr=l(),UTe=a("p"),zkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wkr=l(),qn=a("p"),Qkr=o("The model class to instantiate is selected based on the "),JTe=a("code"),Hkr=o("model_type"),Ukr=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),Kkr=o("pretrained_model_name_or_path"),Zkr=o(":"),eRr=l(),ZTe=a("ul"),fE=a("li"),eFe=a("strong"),oRr=o("vision-encoder-decoder"),rRr=o(" \u2014 "),tW=a("a"),tRr=o("FlaxVisionEncoderDecoderModel"),aRr=o(" (Vision Encoder decoder model)"),nRr=l(),oFe=a("p"),sRr=o("Examples:"),lRr=l(),f(s8.$$.fragment),this.h()},l(c){const u=T4t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var l8=s(de);Ee=n(l8,"A",{id:!0,class:!0,href:!0});var rFe=s(Ee);lo=n(rFe,"SPAN",{});var tFe=s(lo);m(me.$$.fragment,tFe),tFe.forEach(t),rFe.forEach(t),Ce=i(l8),Vo=n(l8,"SPAN",{});var dRr=s(Vo);Ii=r(dRr,"Auto Classes"),dRr.forEach(t),l8.forEach(t),If=i(c),fa=n(c,"P",{});var wSe=s(fa);Ni=r(wSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(wSe,"CODE",{});var cRr=s(ji);f3=r(cRr,"from_pretrained()"),cRr.forEach(t),Nf=r(wSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wSe.forEach(t),Be=i(c),co=n(c,"P",{});var mE=s(co);Di=r(mE,"Instantiating one of "),Gn=n(mE,"A",{href:!0});var fRr=s(Gn);m3=r(fRr,"AutoConfig"),fRr.forEach(t),On=r(mE,", "),Xn=n(mE,"A",{href:!0});var mRr=s(Xn);g3=r(mRr,"AutoModel"),mRr.forEach(t),qi=r(mE,`, and
`),Vn=n(mE,"A",{href:!0});var gRr=s(Vn);h3=r(gRr,"AutoTokenizer"),gRr.forEach(t),Gi=r(mE," will directly create a class of the relevant architecture. For instance"),mE.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var ASe=s(_e);a9=r(ASe,"will create a model that is an instance of "),Oi=n(ASe,"A",{href:!0});var hRr=s(Oi);n9=r(hRr,"BertModel"),hRr.forEach(t),s9=r(ASe,"."),ASe.forEach(t),zo=i(c),Ga=n(c,"P",{});var LSe=s(Ga);l9=r(LSe,"There is one class of "),Df=n(LSe,"CODE",{});var pRr=s(Df);i9=r(pRr,"AutoModel"),pRr.forEach(t),j$e=r(LSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),LSe.forEach(t),Eke=i(c),Xi=n(c,"H2",{class:!0});var BSe=s(Xi);qf=n(BSe,"A",{id:!0,class:!0,href:!0});var _Rr=s(qf);JQ=n(_Rr,"SPAN",{});var uRr=s(JQ);m(p3.$$.fragment,uRr),uRr.forEach(t),_Rr.forEach(t),D$e=i(BSe),YQ=n(BSe,"SPAN",{});var bRr=s(YQ);q$e=r(bRr,"Extending the Auto Classes"),bRr.forEach(t),BSe.forEach(t),yke=i(c),zn=n(c,"P",{});var aW=s(zn);G$e=r(aW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),KQ=n(aW,"CODE",{});var vRr=s(KQ);O$e=r(vRr,"NewModel"),vRr.forEach(t),X$e=r(aW,", make sure you have a "),ZQ=n(aW,"CODE",{});var TRr=s(ZQ);V$e=r(TRr,"NewModelConfig"),TRr.forEach(t),z$e=r(aW,` then you can add those to the auto
classes like this:`),aW.forEach(t),wke=i(c),m(_3.$$.fragment,c),Ake=i(c),d9=n(c,"P",{});var FRr=s(d9);W$e=r(FRr,"You will then be able to use the auto classes like you would usually do!"),FRr.forEach(t),Lke=i(c),m(Gf.$$.fragment,c),Bke=i(c),Vi=n(c,"H2",{class:!0});var xSe=s(Vi);Of=n(xSe,"A",{id:!0,class:!0,href:!0});var CRr=s(Of);eH=n(CRr,"SPAN",{});var MRr=s(eH);m(u3.$$.fragment,MRr),MRr.forEach(t),CRr.forEach(t),Q$e=i(xSe),oH=n(xSe,"SPAN",{});var ERr=s(oH);H$e=r(ERr,"AutoConfig"),ERr.forEach(t),xSe.forEach(t),xke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(b3.$$.fragment,Os),U$e=i(Os),v3=n(Os,"P",{});var kSe=s(v3);J$e=r(kSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),c9=n(kSe,"A",{href:!0});var yRr=s(c9);Y$e=r(yRr,"from_pretrained()"),yRr.forEach(t),K$e=r(kSe," class method."),kSe.forEach(t),Z$e=i(Os),T3=n(Os,"P",{});var RSe=s(T3);eIe=r(RSe,"This class cannot be instantiated directly using "),rH=n(RSe,"CODE",{});var wRr=s(rH);oIe=r(wRr,"__init__()"),wRr.forEach(t),rIe=r(RSe," (throws an error)."),RSe.forEach(t),tIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(F3.$$.fragment,ga),aIe=i(ga),tH=n(ga,"P",{});var ARr=s(tH);nIe=r(ARr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ARr.forEach(t),sIe=i(ga),zi=n(ga,"P",{});var nW=s(zi);lIe=r(nW,"The configuration class to instantiate is selected based on the "),aH=n(nW,"CODE",{});var LRr=s(aH);iIe=r(LRr,"model_type"),LRr.forEach(t),dIe=r(nW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nH=n(nW,"CODE",{});var BRr=s(nH);cIe=r(BRr,"pretrained_model_name_or_path"),BRr.forEach(t),fIe=r(nW,":"),nW.forEach(t),mIe=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var aFe=s(Xf);sH=n(aFe,"STRONG",{});var xRr=s(sH);gIe=r(xRr,"albert"),xRr.forEach(t),hIe=r(aFe," \u2014 "),f9=n(aFe,"A",{href:!0});var kRr=s(f9);pIe=r(kRr,"AlbertConfig"),kRr.forEach(t),_Ie=r(aFe," (ALBERT model)"),aFe.forEach(t),uIe=i(T),Vf=n(T,"LI",{});var nFe=s(Vf);lH=n(nFe,"STRONG",{});var RRr=s(lH);bIe=r(RRr,"bart"),RRr.forEach(t),vIe=r(nFe," \u2014 "),m9=n(nFe,"A",{href:!0});var SRr=s(m9);TIe=r(SRr,"BartConfig"),SRr.forEach(t),FIe=r(nFe," (BART model)"),nFe.forEach(t),CIe=i(T),zf=n(T,"LI",{});var sFe=s(zf);iH=n(sFe,"STRONG",{});var PRr=s(iH);MIe=r(PRr,"beit"),PRr.forEach(t),EIe=r(sFe," \u2014 "),g9=n(sFe,"A",{href:!0});var $Rr=s(g9);yIe=r($Rr,"BeitConfig"),$Rr.forEach(t),wIe=r(sFe," (BEiT model)"),sFe.forEach(t),AIe=i(T),Wf=n(T,"LI",{});var lFe=s(Wf);dH=n(lFe,"STRONG",{});var IRr=s(dH);LIe=r(IRr,"bert"),IRr.forEach(t),BIe=r(lFe," \u2014 "),h9=n(lFe,"A",{href:!0});var NRr=s(h9);xIe=r(NRr,"BertConfig"),NRr.forEach(t),kIe=r(lFe," (BERT model)"),lFe.forEach(t),RIe=i(T),Qf=n(T,"LI",{});var iFe=s(Qf);cH=n(iFe,"STRONG",{});var jRr=s(cH);SIe=r(jRr,"bert-generation"),jRr.forEach(t),PIe=r(iFe," \u2014 "),p9=n(iFe,"A",{href:!0});var DRr=s(p9);$Ie=r(DRr,"BertGenerationConfig"),DRr.forEach(t),IIe=r(iFe," (Bert Generation model)"),iFe.forEach(t),NIe=i(T),Hf=n(T,"LI",{});var dFe=s(Hf);fH=n(dFe,"STRONG",{});var qRr=s(fH);jIe=r(qRr,"big_bird"),qRr.forEach(t),DIe=r(dFe," \u2014 "),_9=n(dFe,"A",{href:!0});var GRr=s(_9);qIe=r(GRr,"BigBirdConfig"),GRr.forEach(t),GIe=r(dFe," (BigBird model)"),dFe.forEach(t),OIe=i(T),Uf=n(T,"LI",{});var cFe=s(Uf);mH=n(cFe,"STRONG",{});var ORr=s(mH);XIe=r(ORr,"bigbird_pegasus"),ORr.forEach(t),VIe=r(cFe," \u2014 "),u9=n(cFe,"A",{href:!0});var XRr=s(u9);zIe=r(XRr,"BigBirdPegasusConfig"),XRr.forEach(t),WIe=r(cFe," (BigBirdPegasus model)"),cFe.forEach(t),QIe=i(T),Jf=n(T,"LI",{});var fFe=s(Jf);gH=n(fFe,"STRONG",{});var VRr=s(gH);HIe=r(VRr,"blenderbot"),VRr.forEach(t),UIe=r(fFe," \u2014 "),b9=n(fFe,"A",{href:!0});var zRr=s(b9);JIe=r(zRr,"BlenderbotConfig"),zRr.forEach(t),YIe=r(fFe," (Blenderbot model)"),fFe.forEach(t),KIe=i(T),Yf=n(T,"LI",{});var mFe=s(Yf);hH=n(mFe,"STRONG",{});var WRr=s(hH);ZIe=r(WRr,"blenderbot-small"),WRr.forEach(t),eNe=r(mFe," \u2014 "),v9=n(mFe,"A",{href:!0});var QRr=s(v9);oNe=r(QRr,"BlenderbotSmallConfig"),QRr.forEach(t),rNe=r(mFe," (BlenderbotSmall model)"),mFe.forEach(t),tNe=i(T),Kf=n(T,"LI",{});var gFe=s(Kf);pH=n(gFe,"STRONG",{});var HRr=s(pH);aNe=r(HRr,"camembert"),HRr.forEach(t),nNe=r(gFe," \u2014 "),T9=n(gFe,"A",{href:!0});var URr=s(T9);sNe=r(URr,"CamembertConfig"),URr.forEach(t),lNe=r(gFe," (CamemBERT model)"),gFe.forEach(t),iNe=i(T),Zf=n(T,"LI",{});var hFe=s(Zf);_H=n(hFe,"STRONG",{});var JRr=s(_H);dNe=r(JRr,"canine"),JRr.forEach(t),cNe=r(hFe," \u2014 "),F9=n(hFe,"A",{href:!0});var YRr=s(F9);fNe=r(YRr,"CanineConfig"),YRr.forEach(t),mNe=r(hFe," (Canine model)"),hFe.forEach(t),gNe=i(T),em=n(T,"LI",{});var pFe=s(em);uH=n(pFe,"STRONG",{});var KRr=s(uH);hNe=r(KRr,"clip"),KRr.forEach(t),pNe=r(pFe," \u2014 "),C9=n(pFe,"A",{href:!0});var ZRr=s(C9);_Ne=r(ZRr,"CLIPConfig"),ZRr.forEach(t),uNe=r(pFe," (CLIP model)"),pFe.forEach(t),bNe=i(T),om=n(T,"LI",{});var _Fe=s(om);bH=n(_Fe,"STRONG",{});var eSr=s(bH);vNe=r(eSr,"convbert"),eSr.forEach(t),TNe=r(_Fe," \u2014 "),M9=n(_Fe,"A",{href:!0});var oSr=s(M9);FNe=r(oSr,"ConvBertConfig"),oSr.forEach(t),CNe=r(_Fe," (ConvBERT model)"),_Fe.forEach(t),MNe=i(T),rm=n(T,"LI",{});var uFe=s(rm);vH=n(uFe,"STRONG",{});var rSr=s(vH);ENe=r(rSr,"convnext"),rSr.forEach(t),yNe=r(uFe," \u2014 "),E9=n(uFe,"A",{href:!0});var tSr=s(E9);wNe=r(tSr,"ConvNextConfig"),tSr.forEach(t),ANe=r(uFe," (ConvNext model)"),uFe.forEach(t),LNe=i(T),tm=n(T,"LI",{});var bFe=s(tm);TH=n(bFe,"STRONG",{});var aSr=s(TH);BNe=r(aSr,"ctrl"),aSr.forEach(t),xNe=r(bFe," \u2014 "),y9=n(bFe,"A",{href:!0});var nSr=s(y9);kNe=r(nSr,"CTRLConfig"),nSr.forEach(t),RNe=r(bFe," (CTRL model)"),bFe.forEach(t),SNe=i(T),am=n(T,"LI",{});var vFe=s(am);FH=n(vFe,"STRONG",{});var sSr=s(FH);PNe=r(sSr,"data2vec-audio"),sSr.forEach(t),$Ne=r(vFe," \u2014 "),w9=n(vFe,"A",{href:!0});var lSr=s(w9);INe=r(lSr,"Data2VecAudioConfig"),lSr.forEach(t),NNe=r(vFe," (Data2VecAudio model)"),vFe.forEach(t),jNe=i(T),nm=n(T,"LI",{});var TFe=s(nm);CH=n(TFe,"STRONG",{});var iSr=s(CH);DNe=r(iSr,"data2vec-text"),iSr.forEach(t),qNe=r(TFe," \u2014 "),A9=n(TFe,"A",{href:!0});var dSr=s(A9);GNe=r(dSr,"Data2VecTextConfig"),dSr.forEach(t),ONe=r(TFe," (Data2VecText model)"),TFe.forEach(t),XNe=i(T),sm=n(T,"LI",{});var FFe=s(sm);MH=n(FFe,"STRONG",{});var cSr=s(MH);VNe=r(cSr,"deberta"),cSr.forEach(t),zNe=r(FFe," \u2014 "),L9=n(FFe,"A",{href:!0});var fSr=s(L9);WNe=r(fSr,"DebertaConfig"),fSr.forEach(t),QNe=r(FFe," (DeBERTa model)"),FFe.forEach(t),HNe=i(T),lm=n(T,"LI",{});var CFe=s(lm);EH=n(CFe,"STRONG",{});var mSr=s(EH);UNe=r(mSr,"deberta-v2"),mSr.forEach(t),JNe=r(CFe," \u2014 "),B9=n(CFe,"A",{href:!0});var gSr=s(B9);YNe=r(gSr,"DebertaV2Config"),gSr.forEach(t),KNe=r(CFe," (DeBERTa-v2 model)"),CFe.forEach(t),ZNe=i(T),im=n(T,"LI",{});var MFe=s(im);yH=n(MFe,"STRONG",{});var hSr=s(yH);eje=r(hSr,"decision_transformer"),hSr.forEach(t),oje=r(MFe," \u2014 "),x9=n(MFe,"A",{href:!0});var pSr=s(x9);rje=r(pSr,"DecisionTransformerConfig"),pSr.forEach(t),tje=r(MFe," (Decision Transformer model)"),MFe.forEach(t),aje=i(T),dm=n(T,"LI",{});var EFe=s(dm);wH=n(EFe,"STRONG",{});var _Sr=s(wH);nje=r(_Sr,"deit"),_Sr.forEach(t),sje=r(EFe," \u2014 "),k9=n(EFe,"A",{href:!0});var uSr=s(k9);lje=r(uSr,"DeiTConfig"),uSr.forEach(t),ije=r(EFe," (DeiT model)"),EFe.forEach(t),dje=i(T),cm=n(T,"LI",{});var yFe=s(cm);AH=n(yFe,"STRONG",{});var bSr=s(AH);cje=r(bSr,"detr"),bSr.forEach(t),fje=r(yFe," \u2014 "),R9=n(yFe,"A",{href:!0});var vSr=s(R9);mje=r(vSr,"DetrConfig"),vSr.forEach(t),gje=r(yFe," (DETR model)"),yFe.forEach(t),hje=i(T),fm=n(T,"LI",{});var wFe=s(fm);LH=n(wFe,"STRONG",{});var TSr=s(LH);pje=r(TSr,"distilbert"),TSr.forEach(t),_je=r(wFe," \u2014 "),S9=n(wFe,"A",{href:!0});var FSr=s(S9);uje=r(FSr,"DistilBertConfig"),FSr.forEach(t),bje=r(wFe," (DistilBERT model)"),wFe.forEach(t),vje=i(T),mm=n(T,"LI",{});var AFe=s(mm);BH=n(AFe,"STRONG",{});var CSr=s(BH);Tje=r(CSr,"dpr"),CSr.forEach(t),Fje=r(AFe," \u2014 "),P9=n(AFe,"A",{href:!0});var MSr=s(P9);Cje=r(MSr,"DPRConfig"),MSr.forEach(t),Mje=r(AFe," (DPR model)"),AFe.forEach(t),Eje=i(T),gm=n(T,"LI",{});var LFe=s(gm);xH=n(LFe,"STRONG",{});var ESr=s(xH);yje=r(ESr,"electra"),ESr.forEach(t),wje=r(LFe," \u2014 "),$9=n(LFe,"A",{href:!0});var ySr=s($9);Aje=r(ySr,"ElectraConfig"),ySr.forEach(t),Lje=r(LFe," (ELECTRA model)"),LFe.forEach(t),Bje=i(T),hm=n(T,"LI",{});var BFe=s(hm);kH=n(BFe,"STRONG",{});var wSr=s(kH);xje=r(wSr,"encoder-decoder"),wSr.forEach(t),kje=r(BFe," \u2014 "),I9=n(BFe,"A",{href:!0});var ASr=s(I9);Rje=r(ASr,"EncoderDecoderConfig"),ASr.forEach(t),Sje=r(BFe," (Encoder decoder model)"),BFe.forEach(t),Pje=i(T),pm=n(T,"LI",{});var xFe=s(pm);RH=n(xFe,"STRONG",{});var LSr=s(RH);$je=r(LSr,"flaubert"),LSr.forEach(t),Ije=r(xFe," \u2014 "),N9=n(xFe,"A",{href:!0});var BSr=s(N9);Nje=r(BSr,"FlaubertConfig"),BSr.forEach(t),jje=r(xFe," (FlauBERT model)"),xFe.forEach(t),Dje=i(T),_m=n(T,"LI",{});var kFe=s(_m);SH=n(kFe,"STRONG",{});var xSr=s(SH);qje=r(xSr,"fnet"),xSr.forEach(t),Gje=r(kFe," \u2014 "),j9=n(kFe,"A",{href:!0});var kSr=s(j9);Oje=r(kSr,"FNetConfig"),kSr.forEach(t),Xje=r(kFe," (FNet model)"),kFe.forEach(t),Vje=i(T),um=n(T,"LI",{});var RFe=s(um);PH=n(RFe,"STRONG",{});var RSr=s(PH);zje=r(RSr,"fsmt"),RSr.forEach(t),Wje=r(RFe," \u2014 "),D9=n(RFe,"A",{href:!0});var SSr=s(D9);Qje=r(SSr,"FSMTConfig"),SSr.forEach(t),Hje=r(RFe," (FairSeq Machine-Translation model)"),RFe.forEach(t),Uje=i(T),bm=n(T,"LI",{});var SFe=s(bm);$H=n(SFe,"STRONG",{});var PSr=s($H);Jje=r(PSr,"funnel"),PSr.forEach(t),Yje=r(SFe," \u2014 "),q9=n(SFe,"A",{href:!0});var $Sr=s(q9);Kje=r($Sr,"FunnelConfig"),$Sr.forEach(t),Zje=r(SFe," (Funnel Transformer model)"),SFe.forEach(t),eDe=i(T),vm=n(T,"LI",{});var PFe=s(vm);IH=n(PFe,"STRONG",{});var ISr=s(IH);oDe=r(ISr,"glpn"),ISr.forEach(t),rDe=r(PFe," \u2014 "),G9=n(PFe,"A",{href:!0});var NSr=s(G9);tDe=r(NSr,"GLPNConfig"),NSr.forEach(t),aDe=r(PFe," (GLPN model)"),PFe.forEach(t),nDe=i(T),Tm=n(T,"LI",{});var $Fe=s(Tm);NH=n($Fe,"STRONG",{});var jSr=s(NH);sDe=r(jSr,"gpt2"),jSr.forEach(t),lDe=r($Fe," \u2014 "),O9=n($Fe,"A",{href:!0});var DSr=s(O9);iDe=r(DSr,"GPT2Config"),DSr.forEach(t),dDe=r($Fe," (OpenAI GPT-2 model)"),$Fe.forEach(t),cDe=i(T),Fm=n(T,"LI",{});var IFe=s(Fm);jH=n(IFe,"STRONG",{});var qSr=s(jH);fDe=r(qSr,"gpt_neo"),qSr.forEach(t),mDe=r(IFe," \u2014 "),X9=n(IFe,"A",{href:!0});var GSr=s(X9);gDe=r(GSr,"GPTNeoConfig"),GSr.forEach(t),hDe=r(IFe," (GPT Neo model)"),IFe.forEach(t),pDe=i(T),Cm=n(T,"LI",{});var NFe=s(Cm);DH=n(NFe,"STRONG",{});var OSr=s(DH);_De=r(OSr,"gptj"),OSr.forEach(t),uDe=r(NFe," \u2014 "),V9=n(NFe,"A",{href:!0});var XSr=s(V9);bDe=r(XSr,"GPTJConfig"),XSr.forEach(t),vDe=r(NFe," (GPT-J model)"),NFe.forEach(t),TDe=i(T),Mm=n(T,"LI",{});var jFe=s(Mm);qH=n(jFe,"STRONG",{});var VSr=s(qH);FDe=r(VSr,"hubert"),VSr.forEach(t),CDe=r(jFe," \u2014 "),z9=n(jFe,"A",{href:!0});var zSr=s(z9);MDe=r(zSr,"HubertConfig"),zSr.forEach(t),EDe=r(jFe," (Hubert model)"),jFe.forEach(t),yDe=i(T),Em=n(T,"LI",{});var DFe=s(Em);GH=n(DFe,"STRONG",{});var WSr=s(GH);wDe=r(WSr,"ibert"),WSr.forEach(t),ADe=r(DFe," \u2014 "),W9=n(DFe,"A",{href:!0});var QSr=s(W9);LDe=r(QSr,"IBertConfig"),QSr.forEach(t),BDe=r(DFe," (I-BERT model)"),DFe.forEach(t),xDe=i(T),ym=n(T,"LI",{});var qFe=s(ym);OH=n(qFe,"STRONG",{});var HSr=s(OH);kDe=r(HSr,"imagegpt"),HSr.forEach(t),RDe=r(qFe," \u2014 "),Q9=n(qFe,"A",{href:!0});var USr=s(Q9);SDe=r(USr,"ImageGPTConfig"),USr.forEach(t),PDe=r(qFe," (ImageGPT model)"),qFe.forEach(t),$De=i(T),wm=n(T,"LI",{});var GFe=s(wm);XH=n(GFe,"STRONG",{});var JSr=s(XH);IDe=r(JSr,"layoutlm"),JSr.forEach(t),NDe=r(GFe," \u2014 "),H9=n(GFe,"A",{href:!0});var YSr=s(H9);jDe=r(YSr,"LayoutLMConfig"),YSr.forEach(t),DDe=r(GFe," (LayoutLM model)"),GFe.forEach(t),qDe=i(T),Am=n(T,"LI",{});var OFe=s(Am);VH=n(OFe,"STRONG",{});var KSr=s(VH);GDe=r(KSr,"layoutlmv2"),KSr.forEach(t),ODe=r(OFe," \u2014 "),U9=n(OFe,"A",{href:!0});var ZSr=s(U9);XDe=r(ZSr,"LayoutLMv2Config"),ZSr.forEach(t),VDe=r(OFe," (LayoutLMv2 model)"),OFe.forEach(t),zDe=i(T),Lm=n(T,"LI",{});var XFe=s(Lm);zH=n(XFe,"STRONG",{});var ePr=s(zH);WDe=r(ePr,"led"),ePr.forEach(t),QDe=r(XFe," \u2014 "),J9=n(XFe,"A",{href:!0});var oPr=s(J9);HDe=r(oPr,"LEDConfig"),oPr.forEach(t),UDe=r(XFe," (LED model)"),XFe.forEach(t),JDe=i(T),Bm=n(T,"LI",{});var VFe=s(Bm);WH=n(VFe,"STRONG",{});var rPr=s(WH);YDe=r(rPr,"longformer"),rPr.forEach(t),KDe=r(VFe," \u2014 "),Y9=n(VFe,"A",{href:!0});var tPr=s(Y9);ZDe=r(tPr,"LongformerConfig"),tPr.forEach(t),eqe=r(VFe," (Longformer model)"),VFe.forEach(t),oqe=i(T),xm=n(T,"LI",{});var zFe=s(xm);QH=n(zFe,"STRONG",{});var aPr=s(QH);rqe=r(aPr,"luke"),aPr.forEach(t),tqe=r(zFe," \u2014 "),K9=n(zFe,"A",{href:!0});var nPr=s(K9);aqe=r(nPr,"LukeConfig"),nPr.forEach(t),nqe=r(zFe," (LUKE model)"),zFe.forEach(t),sqe=i(T),km=n(T,"LI",{});var WFe=s(km);HH=n(WFe,"STRONG",{});var sPr=s(HH);lqe=r(sPr,"lxmert"),sPr.forEach(t),iqe=r(WFe," \u2014 "),Z9=n(WFe,"A",{href:!0});var lPr=s(Z9);dqe=r(lPr,"LxmertConfig"),lPr.forEach(t),cqe=r(WFe," (LXMERT model)"),WFe.forEach(t),fqe=i(T),Rm=n(T,"LI",{});var QFe=s(Rm);UH=n(QFe,"STRONG",{});var iPr=s(UH);mqe=r(iPr,"m2m_100"),iPr.forEach(t),gqe=r(QFe," \u2014 "),eB=n(QFe,"A",{href:!0});var dPr=s(eB);hqe=r(dPr,"M2M100Config"),dPr.forEach(t),pqe=r(QFe," (M2M100 model)"),QFe.forEach(t),_qe=i(T),Sm=n(T,"LI",{});var HFe=s(Sm);JH=n(HFe,"STRONG",{});var cPr=s(JH);uqe=r(cPr,"marian"),cPr.forEach(t),bqe=r(HFe," \u2014 "),oB=n(HFe,"A",{href:!0});var fPr=s(oB);vqe=r(fPr,"MarianConfig"),fPr.forEach(t),Tqe=r(HFe," (Marian model)"),HFe.forEach(t),Fqe=i(T),Pm=n(T,"LI",{});var UFe=s(Pm);YH=n(UFe,"STRONG",{});var mPr=s(YH);Cqe=r(mPr,"maskformer"),mPr.forEach(t),Mqe=r(UFe," \u2014 "),rB=n(UFe,"A",{href:!0});var gPr=s(rB);Eqe=r(gPr,"MaskFormerConfig"),gPr.forEach(t),yqe=r(UFe," (MaskFormer model)"),UFe.forEach(t),wqe=i(T),$m=n(T,"LI",{});var JFe=s($m);KH=n(JFe,"STRONG",{});var hPr=s(KH);Aqe=r(hPr,"mbart"),hPr.forEach(t),Lqe=r(JFe," \u2014 "),tB=n(JFe,"A",{href:!0});var pPr=s(tB);Bqe=r(pPr,"MBartConfig"),pPr.forEach(t),xqe=r(JFe," (mBART model)"),JFe.forEach(t),kqe=i(T),Im=n(T,"LI",{});var YFe=s(Im);ZH=n(YFe,"STRONG",{});var _Pr=s(ZH);Rqe=r(_Pr,"megatron-bert"),_Pr.forEach(t),Sqe=r(YFe," \u2014 "),aB=n(YFe,"A",{href:!0});var uPr=s(aB);Pqe=r(uPr,"MegatronBertConfig"),uPr.forEach(t),$qe=r(YFe," (MegatronBert model)"),YFe.forEach(t),Iqe=i(T),Nm=n(T,"LI",{});var KFe=s(Nm);eU=n(KFe,"STRONG",{});var bPr=s(eU);Nqe=r(bPr,"mobilebert"),bPr.forEach(t),jqe=r(KFe," \u2014 "),nB=n(KFe,"A",{href:!0});var vPr=s(nB);Dqe=r(vPr,"MobileBertConfig"),vPr.forEach(t),qqe=r(KFe," (MobileBERT model)"),KFe.forEach(t),Gqe=i(T),jm=n(T,"LI",{});var ZFe=s(jm);oU=n(ZFe,"STRONG",{});var TPr=s(oU);Oqe=r(TPr,"mpnet"),TPr.forEach(t),Xqe=r(ZFe," \u2014 "),sB=n(ZFe,"A",{href:!0});var FPr=s(sB);Vqe=r(FPr,"MPNetConfig"),FPr.forEach(t),zqe=r(ZFe," (MPNet model)"),ZFe.forEach(t),Wqe=i(T),Dm=n(T,"LI",{});var eCe=s(Dm);rU=n(eCe,"STRONG",{});var CPr=s(rU);Qqe=r(CPr,"mt5"),CPr.forEach(t),Hqe=r(eCe," \u2014 "),lB=n(eCe,"A",{href:!0});var MPr=s(lB);Uqe=r(MPr,"MT5Config"),MPr.forEach(t),Jqe=r(eCe," (mT5 model)"),eCe.forEach(t),Yqe=i(T),qm=n(T,"LI",{});var oCe=s(qm);tU=n(oCe,"STRONG",{});var EPr=s(tU);Kqe=r(EPr,"nystromformer"),EPr.forEach(t),Zqe=r(oCe," \u2014 "),iB=n(oCe,"A",{href:!0});var yPr=s(iB);eGe=r(yPr,"NystromformerConfig"),yPr.forEach(t),oGe=r(oCe," (Nystromformer model)"),oCe.forEach(t),rGe=i(T),Gm=n(T,"LI",{});var rCe=s(Gm);aU=n(rCe,"STRONG",{});var wPr=s(aU);tGe=r(wPr,"openai-gpt"),wPr.forEach(t),aGe=r(rCe," \u2014 "),dB=n(rCe,"A",{href:!0});var APr=s(dB);nGe=r(APr,"OpenAIGPTConfig"),APr.forEach(t),sGe=r(rCe," (OpenAI GPT model)"),rCe.forEach(t),lGe=i(T),Om=n(T,"LI",{});var tCe=s(Om);nU=n(tCe,"STRONG",{});var LPr=s(nU);iGe=r(LPr,"pegasus"),LPr.forEach(t),dGe=r(tCe," \u2014 "),cB=n(tCe,"A",{href:!0});var BPr=s(cB);cGe=r(BPr,"PegasusConfig"),BPr.forEach(t),fGe=r(tCe," (Pegasus model)"),tCe.forEach(t),mGe=i(T),Xm=n(T,"LI",{});var aCe=s(Xm);sU=n(aCe,"STRONG",{});var xPr=s(sU);gGe=r(xPr,"perceiver"),xPr.forEach(t),hGe=r(aCe," \u2014 "),fB=n(aCe,"A",{href:!0});var kPr=s(fB);pGe=r(kPr,"PerceiverConfig"),kPr.forEach(t),_Ge=r(aCe," (Perceiver model)"),aCe.forEach(t),uGe=i(T),Vm=n(T,"LI",{});var nCe=s(Vm);lU=n(nCe,"STRONG",{});var RPr=s(lU);bGe=r(RPr,"plbart"),RPr.forEach(t),vGe=r(nCe," \u2014 "),mB=n(nCe,"A",{href:!0});var SPr=s(mB);TGe=r(SPr,"PLBartConfig"),SPr.forEach(t),FGe=r(nCe," (PLBart model)"),nCe.forEach(t),CGe=i(T),zm=n(T,"LI",{});var sCe=s(zm);iU=n(sCe,"STRONG",{});var PPr=s(iU);MGe=r(PPr,"poolformer"),PPr.forEach(t),EGe=r(sCe," \u2014 "),gB=n(sCe,"A",{href:!0});var $Pr=s(gB);yGe=r($Pr,"PoolFormerConfig"),$Pr.forEach(t),wGe=r(sCe," (PoolFormer model)"),sCe.forEach(t),AGe=i(T),Wm=n(T,"LI",{});var lCe=s(Wm);dU=n(lCe,"STRONG",{});var IPr=s(dU);LGe=r(IPr,"prophetnet"),IPr.forEach(t),BGe=r(lCe," \u2014 "),hB=n(lCe,"A",{href:!0});var NPr=s(hB);xGe=r(NPr,"ProphetNetConfig"),NPr.forEach(t),kGe=r(lCe," (ProphetNet model)"),lCe.forEach(t),RGe=i(T),Qm=n(T,"LI",{});var iCe=s(Qm);cU=n(iCe,"STRONG",{});var jPr=s(cU);SGe=r(jPr,"qdqbert"),jPr.forEach(t),PGe=r(iCe," \u2014 "),pB=n(iCe,"A",{href:!0});var DPr=s(pB);$Ge=r(DPr,"QDQBertConfig"),DPr.forEach(t),IGe=r(iCe," (QDQBert model)"),iCe.forEach(t),NGe=i(T),Hm=n(T,"LI",{});var dCe=s(Hm);fU=n(dCe,"STRONG",{});var qPr=s(fU);jGe=r(qPr,"rag"),qPr.forEach(t),DGe=r(dCe," \u2014 "),_B=n(dCe,"A",{href:!0});var GPr=s(_B);qGe=r(GPr,"RagConfig"),GPr.forEach(t),GGe=r(dCe," (RAG model)"),dCe.forEach(t),OGe=i(T),Um=n(T,"LI",{});var cCe=s(Um);mU=n(cCe,"STRONG",{});var OPr=s(mU);XGe=r(OPr,"realm"),OPr.forEach(t),VGe=r(cCe," \u2014 "),uB=n(cCe,"A",{href:!0});var XPr=s(uB);zGe=r(XPr,"RealmConfig"),XPr.forEach(t),WGe=r(cCe," (Realm model)"),cCe.forEach(t),QGe=i(T),Jm=n(T,"LI",{});var fCe=s(Jm);gU=n(fCe,"STRONG",{});var VPr=s(gU);HGe=r(VPr,"reformer"),VPr.forEach(t),UGe=r(fCe," \u2014 "),bB=n(fCe,"A",{href:!0});var zPr=s(bB);JGe=r(zPr,"ReformerConfig"),zPr.forEach(t),YGe=r(fCe," (Reformer model)"),fCe.forEach(t),KGe=i(T),Ym=n(T,"LI",{});var mCe=s(Ym);hU=n(mCe,"STRONG",{});var WPr=s(hU);ZGe=r(WPr,"rembert"),WPr.forEach(t),eOe=r(mCe," \u2014 "),vB=n(mCe,"A",{href:!0});var QPr=s(vB);oOe=r(QPr,"RemBertConfig"),QPr.forEach(t),rOe=r(mCe," (RemBERT model)"),mCe.forEach(t),tOe=i(T),Km=n(T,"LI",{});var gCe=s(Km);pU=n(gCe,"STRONG",{});var HPr=s(pU);aOe=r(HPr,"resnet"),HPr.forEach(t),nOe=r(gCe," \u2014 "),TB=n(gCe,"A",{href:!0});var UPr=s(TB);sOe=r(UPr,"ResNetConfig"),UPr.forEach(t),lOe=r(gCe," (ResNet model)"),gCe.forEach(t),iOe=i(T),Zm=n(T,"LI",{});var hCe=s(Zm);_U=n(hCe,"STRONG",{});var JPr=s(_U);dOe=r(JPr,"retribert"),JPr.forEach(t),cOe=r(hCe," \u2014 "),FB=n(hCe,"A",{href:!0});var YPr=s(FB);fOe=r(YPr,"RetriBertConfig"),YPr.forEach(t),mOe=r(hCe," (RetriBERT model)"),hCe.forEach(t),gOe=i(T),eg=n(T,"LI",{});var pCe=s(eg);uU=n(pCe,"STRONG",{});var KPr=s(uU);hOe=r(KPr,"roberta"),KPr.forEach(t),pOe=r(pCe," \u2014 "),CB=n(pCe,"A",{href:!0});var ZPr=s(CB);_Oe=r(ZPr,"RobertaConfig"),ZPr.forEach(t),uOe=r(pCe," (RoBERTa model)"),pCe.forEach(t),bOe=i(T),og=n(T,"LI",{});var _Ce=s(og);bU=n(_Ce,"STRONG",{});var e$r=s(bU);vOe=r(e$r,"roformer"),e$r.forEach(t),TOe=r(_Ce," \u2014 "),MB=n(_Ce,"A",{href:!0});var o$r=s(MB);FOe=r(o$r,"RoFormerConfig"),o$r.forEach(t),COe=r(_Ce," (RoFormer model)"),_Ce.forEach(t),MOe=i(T),rg=n(T,"LI",{});var uCe=s(rg);vU=n(uCe,"STRONG",{});var r$r=s(vU);EOe=r(r$r,"segformer"),r$r.forEach(t),yOe=r(uCe," \u2014 "),EB=n(uCe,"A",{href:!0});var t$r=s(EB);wOe=r(t$r,"SegformerConfig"),t$r.forEach(t),AOe=r(uCe," (SegFormer model)"),uCe.forEach(t),LOe=i(T),tg=n(T,"LI",{});var bCe=s(tg);TU=n(bCe,"STRONG",{});var a$r=s(TU);BOe=r(a$r,"sew"),a$r.forEach(t),xOe=r(bCe," \u2014 "),yB=n(bCe,"A",{href:!0});var n$r=s(yB);kOe=r(n$r,"SEWConfig"),n$r.forEach(t),ROe=r(bCe," (SEW model)"),bCe.forEach(t),SOe=i(T),ag=n(T,"LI",{});var vCe=s(ag);FU=n(vCe,"STRONG",{});var s$r=s(FU);POe=r(s$r,"sew-d"),s$r.forEach(t),$Oe=r(vCe," \u2014 "),wB=n(vCe,"A",{href:!0});var l$r=s(wB);IOe=r(l$r,"SEWDConfig"),l$r.forEach(t),NOe=r(vCe," (SEW-D model)"),vCe.forEach(t),jOe=i(T),ng=n(T,"LI",{});var TCe=s(ng);CU=n(TCe,"STRONG",{});var i$r=s(CU);DOe=r(i$r,"speech-encoder-decoder"),i$r.forEach(t),qOe=r(TCe," \u2014 "),AB=n(TCe,"A",{href:!0});var d$r=s(AB);GOe=r(d$r,"SpeechEncoderDecoderConfig"),d$r.forEach(t),OOe=r(TCe," (Speech Encoder decoder model)"),TCe.forEach(t),XOe=i(T),sg=n(T,"LI",{});var FCe=s(sg);MU=n(FCe,"STRONG",{});var c$r=s(MU);VOe=r(c$r,"speech_to_text"),c$r.forEach(t),zOe=r(FCe," \u2014 "),LB=n(FCe,"A",{href:!0});var f$r=s(LB);WOe=r(f$r,"Speech2TextConfig"),f$r.forEach(t),QOe=r(FCe," (Speech2Text model)"),FCe.forEach(t),HOe=i(T),lg=n(T,"LI",{});var CCe=s(lg);EU=n(CCe,"STRONG",{});var m$r=s(EU);UOe=r(m$r,"speech_to_text_2"),m$r.forEach(t),JOe=r(CCe," \u2014 "),BB=n(CCe,"A",{href:!0});var g$r=s(BB);YOe=r(g$r,"Speech2Text2Config"),g$r.forEach(t),KOe=r(CCe," (Speech2Text2 model)"),CCe.forEach(t),ZOe=i(T),ig=n(T,"LI",{});var MCe=s(ig);yU=n(MCe,"STRONG",{});var h$r=s(yU);eXe=r(h$r,"splinter"),h$r.forEach(t),oXe=r(MCe," \u2014 "),xB=n(MCe,"A",{href:!0});var p$r=s(xB);rXe=r(p$r,"SplinterConfig"),p$r.forEach(t),tXe=r(MCe," (Splinter model)"),MCe.forEach(t),aXe=i(T),dg=n(T,"LI",{});var ECe=s(dg);wU=n(ECe,"STRONG",{});var _$r=s(wU);nXe=r(_$r,"squeezebert"),_$r.forEach(t),sXe=r(ECe," \u2014 "),kB=n(ECe,"A",{href:!0});var u$r=s(kB);lXe=r(u$r,"SqueezeBertConfig"),u$r.forEach(t),iXe=r(ECe," (SqueezeBERT model)"),ECe.forEach(t),dXe=i(T),cg=n(T,"LI",{});var yCe=s(cg);AU=n(yCe,"STRONG",{});var b$r=s(AU);cXe=r(b$r,"swin"),b$r.forEach(t),fXe=r(yCe," \u2014 "),RB=n(yCe,"A",{href:!0});var v$r=s(RB);mXe=r(v$r,"SwinConfig"),v$r.forEach(t),gXe=r(yCe," (Swin model)"),yCe.forEach(t),hXe=i(T),fg=n(T,"LI",{});var wCe=s(fg);LU=n(wCe,"STRONG",{});var T$r=s(LU);pXe=r(T$r,"t5"),T$r.forEach(t),_Xe=r(wCe," \u2014 "),SB=n(wCe,"A",{href:!0});var F$r=s(SB);uXe=r(F$r,"T5Config"),F$r.forEach(t),bXe=r(wCe," (T5 model)"),wCe.forEach(t),vXe=i(T),mg=n(T,"LI",{});var ACe=s(mg);BU=n(ACe,"STRONG",{});var C$r=s(BU);TXe=r(C$r,"tapas"),C$r.forEach(t),FXe=r(ACe," \u2014 "),PB=n(ACe,"A",{href:!0});var M$r=s(PB);CXe=r(M$r,"TapasConfig"),M$r.forEach(t),MXe=r(ACe," (TAPAS model)"),ACe.forEach(t),EXe=i(T),gg=n(T,"LI",{});var LCe=s(gg);xU=n(LCe,"STRONG",{});var E$r=s(xU);yXe=r(E$r,"transfo-xl"),E$r.forEach(t),wXe=r(LCe," \u2014 "),$B=n(LCe,"A",{href:!0});var y$r=s($B);AXe=r(y$r,"TransfoXLConfig"),y$r.forEach(t),LXe=r(LCe," (Transformer-XL model)"),LCe.forEach(t),BXe=i(T),hg=n(T,"LI",{});var BCe=s(hg);kU=n(BCe,"STRONG",{});var w$r=s(kU);xXe=r(w$r,"trocr"),w$r.forEach(t),kXe=r(BCe," \u2014 "),IB=n(BCe,"A",{href:!0});var A$r=s(IB);RXe=r(A$r,"TrOCRConfig"),A$r.forEach(t),SXe=r(BCe," (TrOCR model)"),BCe.forEach(t),PXe=i(T),pg=n(T,"LI",{});var xCe=s(pg);RU=n(xCe,"STRONG",{});var L$r=s(RU);$Xe=r(L$r,"unispeech"),L$r.forEach(t),IXe=r(xCe," \u2014 "),NB=n(xCe,"A",{href:!0});var B$r=s(NB);NXe=r(B$r,"UniSpeechConfig"),B$r.forEach(t),jXe=r(xCe," (UniSpeech model)"),xCe.forEach(t),DXe=i(T),_g=n(T,"LI",{});var kCe=s(_g);SU=n(kCe,"STRONG",{});var x$r=s(SU);qXe=r(x$r,"unispeech-sat"),x$r.forEach(t),GXe=r(kCe," \u2014 "),jB=n(kCe,"A",{href:!0});var k$r=s(jB);OXe=r(k$r,"UniSpeechSatConfig"),k$r.forEach(t),XXe=r(kCe," (UniSpeechSat model)"),kCe.forEach(t),VXe=i(T),ug=n(T,"LI",{});var RCe=s(ug);PU=n(RCe,"STRONG",{});var R$r=s(PU);zXe=r(R$r,"van"),R$r.forEach(t),WXe=r(RCe," \u2014 "),DB=n(RCe,"A",{href:!0});var S$r=s(DB);QXe=r(S$r,"VanConfig"),S$r.forEach(t),HXe=r(RCe," (VAN model)"),RCe.forEach(t),UXe=i(T),bg=n(T,"LI",{});var SCe=s(bg);$U=n(SCe,"STRONG",{});var P$r=s($U);JXe=r(P$r,"vilt"),P$r.forEach(t),YXe=r(SCe," \u2014 "),qB=n(SCe,"A",{href:!0});var $$r=s(qB);KXe=r($$r,"ViltConfig"),$$r.forEach(t),ZXe=r(SCe," (ViLT model)"),SCe.forEach(t),eVe=i(T),vg=n(T,"LI",{});var PCe=s(vg);IU=n(PCe,"STRONG",{});var I$r=s(IU);oVe=r(I$r,"vision-encoder-decoder"),I$r.forEach(t),rVe=r(PCe," \u2014 "),GB=n(PCe,"A",{href:!0});var N$r=s(GB);tVe=r(N$r,"VisionEncoderDecoderConfig"),N$r.forEach(t),aVe=r(PCe," (Vision Encoder decoder model)"),PCe.forEach(t),nVe=i(T),Tg=n(T,"LI",{});var $Ce=s(Tg);NU=n($Ce,"STRONG",{});var j$r=s(NU);sVe=r(j$r,"vision-text-dual-encoder"),j$r.forEach(t),lVe=r($Ce," \u2014 "),OB=n($Ce,"A",{href:!0});var D$r=s(OB);iVe=r(D$r,"VisionTextDualEncoderConfig"),D$r.forEach(t),dVe=r($Ce," (VisionTextDualEncoder model)"),$Ce.forEach(t),cVe=i(T),Fg=n(T,"LI",{});var ICe=s(Fg);jU=n(ICe,"STRONG",{});var q$r=s(jU);fVe=r(q$r,"visual_bert"),q$r.forEach(t),mVe=r(ICe," \u2014 "),XB=n(ICe,"A",{href:!0});var G$r=s(XB);gVe=r(G$r,"VisualBertConfig"),G$r.forEach(t),hVe=r(ICe," (VisualBert model)"),ICe.forEach(t),pVe=i(T),Cg=n(T,"LI",{});var NCe=s(Cg);DU=n(NCe,"STRONG",{});var O$r=s(DU);_Ve=r(O$r,"vit"),O$r.forEach(t),uVe=r(NCe," \u2014 "),VB=n(NCe,"A",{href:!0});var X$r=s(VB);bVe=r(X$r,"ViTConfig"),X$r.forEach(t),vVe=r(NCe," (ViT model)"),NCe.forEach(t),TVe=i(T),Mg=n(T,"LI",{});var jCe=s(Mg);qU=n(jCe,"STRONG",{});var V$r=s(qU);FVe=r(V$r,"vit_mae"),V$r.forEach(t),CVe=r(jCe," \u2014 "),zB=n(jCe,"A",{href:!0});var z$r=s(zB);MVe=r(z$r,"ViTMAEConfig"),z$r.forEach(t),EVe=r(jCe," (ViTMAE model)"),jCe.forEach(t),yVe=i(T),Eg=n(T,"LI",{});var DCe=s(Eg);GU=n(DCe,"STRONG",{});var W$r=s(GU);wVe=r(W$r,"wav2vec2"),W$r.forEach(t),AVe=r(DCe," \u2014 "),WB=n(DCe,"A",{href:!0});var Q$r=s(WB);LVe=r(Q$r,"Wav2Vec2Config"),Q$r.forEach(t),BVe=r(DCe," (Wav2Vec2 model)"),DCe.forEach(t),xVe=i(T),yg=n(T,"LI",{});var qCe=s(yg);OU=n(qCe,"STRONG",{});var H$r=s(OU);kVe=r(H$r,"wavlm"),H$r.forEach(t),RVe=r(qCe," \u2014 "),QB=n(qCe,"A",{href:!0});var U$r=s(QB);SVe=r(U$r,"WavLMConfig"),U$r.forEach(t),PVe=r(qCe," (WavLM model)"),qCe.forEach(t),$Ve=i(T),wg=n(T,"LI",{});var GCe=s(wg);XU=n(GCe,"STRONG",{});var J$r=s(XU);IVe=r(J$r,"xglm"),J$r.forEach(t),NVe=r(GCe," \u2014 "),HB=n(GCe,"A",{href:!0});var Y$r=s(HB);jVe=r(Y$r,"XGLMConfig"),Y$r.forEach(t),DVe=r(GCe," (XGLM model)"),GCe.forEach(t),qVe=i(T),Ag=n(T,"LI",{});var OCe=s(Ag);VU=n(OCe,"STRONG",{});var K$r=s(VU);GVe=r(K$r,"xlm"),K$r.forEach(t),OVe=r(OCe," \u2014 "),UB=n(OCe,"A",{href:!0});var Z$r=s(UB);XVe=r(Z$r,"XLMConfig"),Z$r.forEach(t),VVe=r(OCe," (XLM model)"),OCe.forEach(t),zVe=i(T),Lg=n(T,"LI",{});var XCe=s(Lg);zU=n(XCe,"STRONG",{});var eIr=s(zU);WVe=r(eIr,"xlm-prophetnet"),eIr.forEach(t),QVe=r(XCe," \u2014 "),JB=n(XCe,"A",{href:!0});var oIr=s(JB);HVe=r(oIr,"XLMProphetNetConfig"),oIr.forEach(t),UVe=r(XCe," (XLMProphetNet model)"),XCe.forEach(t),JVe=i(T),Bg=n(T,"LI",{});var VCe=s(Bg);WU=n(VCe,"STRONG",{});var rIr=s(WU);YVe=r(rIr,"xlm-roberta"),rIr.forEach(t),KVe=r(VCe," \u2014 "),YB=n(VCe,"A",{href:!0});var tIr=s(YB);ZVe=r(tIr,"XLMRobertaConfig"),tIr.forEach(t),eze=r(VCe," (XLM-RoBERTa model)"),VCe.forEach(t),oze=i(T),xg=n(T,"LI",{});var zCe=s(xg);QU=n(zCe,"STRONG",{});var aIr=s(QU);rze=r(aIr,"xlm-roberta-xl"),aIr.forEach(t),tze=r(zCe," \u2014 "),KB=n(zCe,"A",{href:!0});var nIr=s(KB);aze=r(nIr,"XLMRobertaXLConfig"),nIr.forEach(t),nze=r(zCe," (XLM-RoBERTa-XL model)"),zCe.forEach(t),sze=i(T),kg=n(T,"LI",{});var WCe=s(kg);HU=n(WCe,"STRONG",{});var sIr=s(HU);lze=r(sIr,"xlnet"),sIr.forEach(t),ize=r(WCe," \u2014 "),ZB=n(WCe,"A",{href:!0});var lIr=s(ZB);dze=r(lIr,"XLNetConfig"),lIr.forEach(t),cze=r(WCe," (XLNet model)"),WCe.forEach(t),fze=i(T),Rg=n(T,"LI",{});var QCe=s(Rg);UU=n(QCe,"STRONG",{});var iIr=s(UU);mze=r(iIr,"yoso"),iIr.forEach(t),gze=r(QCe," \u2014 "),ex=n(QCe,"A",{href:!0});var dIr=s(ex);hze=r(dIr,"YosoConfig"),dIr.forEach(t),pze=r(QCe," (YOSO model)"),QCe.forEach(t),T.forEach(t),_ze=i(ga),JU=n(ga,"P",{});var cIr=s(JU);uze=r(cIr,"Examples:"),cIr.forEach(t),bze=i(ga),m(C3.$$.fragment,ga),ga.forEach(t),vze=i(Os),Sg=n(Os,"DIV",{class:!0});var SSe=s(Sg);m(M3.$$.fragment,SSe),Tze=i(SSe),YU=n(SSe,"P",{});var fIr=s(YU);Fze=r(fIr,"Register a new configuration for this class."),fIr.forEach(t),SSe.forEach(t),Os.forEach(t),kke=i(c),Wi=n(c,"H2",{class:!0});var PSe=s(Wi);Pg=n(PSe,"A",{id:!0,class:!0,href:!0});var mIr=s(Pg);KU=n(mIr,"SPAN",{});var gIr=s(KU);m(E3.$$.fragment,gIr),gIr.forEach(t),mIr.forEach(t),Cze=i(PSe),ZU=n(PSe,"SPAN",{});var hIr=s(ZU);Mze=r(hIr,"AutoTokenizer"),hIr.forEach(t),PSe.forEach(t),Rke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(y3.$$.fragment,Xs),Eze=i(Xs),w3=n(Xs,"P",{});var $Se=s(w3);yze=r($Se,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ox=n($Se,"A",{href:!0});var pIr=s(ox);wze=r(pIr,"AutoTokenizer.from_pretrained()"),pIr.forEach(t),Aze=r($Se," class method."),$Se.forEach(t),Lze=i(Xs),A3=n(Xs,"P",{});var ISe=s(A3);Bze=r(ISe,"This class cannot be instantiated directly using "),eJ=n(ISe,"CODE",{});var _Ir=s(eJ);xze=r(_Ir,"__init__()"),_Ir.forEach(t),kze=r(ISe," (throws an error)."),ISe.forEach(t),Rze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(L3.$$.fragment,ha),Sze=i(ha),oJ=n(ha,"P",{});var uIr=s(oJ);Pze=r(uIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uIr.forEach(t),$ze=i(ha),Oa=n(ha,"P",{});var gE=s(Oa);Ize=r(gE,"The tokenizer class to instantiate is selected based on the "),rJ=n(gE,"CODE",{});var bIr=s(rJ);Nze=r(bIr,"model_type"),bIr.forEach(t),jze=r(gE,` property of the config object (either
passed as an argument or loaded from `),tJ=n(gE,"CODE",{});var vIr=s(tJ);Dze=r(vIr,"pretrained_model_name_or_path"),vIr.forEach(t),qze=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aJ=n(gE,"CODE",{});var TIr=s(aJ);Gze=r(TIr,"pretrained_model_name_or_path"),TIr.forEach(t),Oze=r(gE,":"),gE.forEach(t),Xze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var i8=s(Wn);nJ=n(i8,"STRONG",{});var FIr=s(nJ);Vze=r(FIr,"albert"),FIr.forEach(t),zze=r(i8," \u2014 "),rx=n(i8,"A",{href:!0});var CIr=s(rx);Wze=r(CIr,"AlbertTokenizer"),CIr.forEach(t),Qze=r(i8," or "),tx=n(i8,"A",{href:!0});var MIr=s(tx);Hze=r(MIr,"AlbertTokenizerFast"),MIr.forEach(t),Uze=r(i8," (ALBERT model)"),i8.forEach(t),Jze=i(y),Qn=n(y,"LI",{});var d8=s(Qn);sJ=n(d8,"STRONG",{});var EIr=s(sJ);Yze=r(EIr,"bart"),EIr.forEach(t),Kze=r(d8," \u2014 "),ax=n(d8,"A",{href:!0});var yIr=s(ax);Zze=r(yIr,"BartTokenizer"),yIr.forEach(t),eWe=r(d8," or "),nx=n(d8,"A",{href:!0});var wIr=s(nx);oWe=r(wIr,"BartTokenizerFast"),wIr.forEach(t),rWe=r(d8," (BART model)"),d8.forEach(t),tWe=i(y),Hn=n(y,"LI",{});var c8=s(Hn);lJ=n(c8,"STRONG",{});var AIr=s(lJ);aWe=r(AIr,"barthez"),AIr.forEach(t),nWe=r(c8," \u2014 "),sx=n(c8,"A",{href:!0});var LIr=s(sx);sWe=r(LIr,"BarthezTokenizer"),LIr.forEach(t),lWe=r(c8," or "),lx=n(c8,"A",{href:!0});var BIr=s(lx);iWe=r(BIr,"BarthezTokenizerFast"),BIr.forEach(t),dWe=r(c8," (BARThez model)"),c8.forEach(t),cWe=i(y),$g=n(y,"LI",{});var HCe=s($g);iJ=n(HCe,"STRONG",{});var xIr=s(iJ);fWe=r(xIr,"bartpho"),xIr.forEach(t),mWe=r(HCe," \u2014 "),ix=n(HCe,"A",{href:!0});var kIr=s(ix);gWe=r(kIr,"BartphoTokenizer"),kIr.forEach(t),hWe=r(HCe," (BARTpho model)"),HCe.forEach(t),pWe=i(y),Un=n(y,"LI",{});var f8=s(Un);dJ=n(f8,"STRONG",{});var RIr=s(dJ);_We=r(RIr,"bert"),RIr.forEach(t),uWe=r(f8," \u2014 "),dx=n(f8,"A",{href:!0});var SIr=s(dx);bWe=r(SIr,"BertTokenizer"),SIr.forEach(t),vWe=r(f8," or "),cx=n(f8,"A",{href:!0});var PIr=s(cx);TWe=r(PIr,"BertTokenizerFast"),PIr.forEach(t),FWe=r(f8," (BERT model)"),f8.forEach(t),CWe=i(y),Ig=n(y,"LI",{});var UCe=s(Ig);cJ=n(UCe,"STRONG",{});var $Ir=s(cJ);MWe=r($Ir,"bert-generation"),$Ir.forEach(t),EWe=r(UCe," \u2014 "),fx=n(UCe,"A",{href:!0});var IIr=s(fx);yWe=r(IIr,"BertGenerationTokenizer"),IIr.forEach(t),wWe=r(UCe," (Bert Generation model)"),UCe.forEach(t),AWe=i(y),Ng=n(y,"LI",{});var JCe=s(Ng);fJ=n(JCe,"STRONG",{});var NIr=s(fJ);LWe=r(NIr,"bert-japanese"),NIr.forEach(t),BWe=r(JCe," \u2014 "),mx=n(JCe,"A",{href:!0});var jIr=s(mx);xWe=r(jIr,"BertJapaneseTokenizer"),jIr.forEach(t),kWe=r(JCe," (BertJapanese model)"),JCe.forEach(t),RWe=i(y),jg=n(y,"LI",{});var YCe=s(jg);mJ=n(YCe,"STRONG",{});var DIr=s(mJ);SWe=r(DIr,"bertweet"),DIr.forEach(t),PWe=r(YCe," \u2014 "),gx=n(YCe,"A",{href:!0});var qIr=s(gx);$We=r(qIr,"BertweetTokenizer"),qIr.forEach(t),IWe=r(YCe," (Bertweet model)"),YCe.forEach(t),NWe=i(y),Jn=n(y,"LI",{});var m8=s(Jn);gJ=n(m8,"STRONG",{});var GIr=s(gJ);jWe=r(GIr,"big_bird"),GIr.forEach(t),DWe=r(m8," \u2014 "),hx=n(m8,"A",{href:!0});var OIr=s(hx);qWe=r(OIr,"BigBirdTokenizer"),OIr.forEach(t),GWe=r(m8," or "),px=n(m8,"A",{href:!0});var XIr=s(px);OWe=r(XIr,"BigBirdTokenizerFast"),XIr.forEach(t),XWe=r(m8," (BigBird model)"),m8.forEach(t),VWe=i(y),Yn=n(y,"LI",{});var g8=s(Yn);hJ=n(g8,"STRONG",{});var VIr=s(hJ);zWe=r(VIr,"bigbird_pegasus"),VIr.forEach(t),WWe=r(g8," \u2014 "),_x=n(g8,"A",{href:!0});var zIr=s(_x);QWe=r(zIr,"PegasusTokenizer"),zIr.forEach(t),HWe=r(g8," or "),ux=n(g8,"A",{href:!0});var WIr=s(ux);UWe=r(WIr,"PegasusTokenizerFast"),WIr.forEach(t),JWe=r(g8," (BigBirdPegasus model)"),g8.forEach(t),YWe=i(y),Kn=n(y,"LI",{});var h8=s(Kn);pJ=n(h8,"STRONG",{});var QIr=s(pJ);KWe=r(QIr,"blenderbot"),QIr.forEach(t),ZWe=r(h8," \u2014 "),bx=n(h8,"A",{href:!0});var HIr=s(bx);eQe=r(HIr,"BlenderbotTokenizer"),HIr.forEach(t),oQe=r(h8," or "),vx=n(h8,"A",{href:!0});var UIr=s(vx);rQe=r(UIr,"BlenderbotTokenizerFast"),UIr.forEach(t),tQe=r(h8," (Blenderbot model)"),h8.forEach(t),aQe=i(y),Dg=n(y,"LI",{});var KCe=s(Dg);_J=n(KCe,"STRONG",{});var JIr=s(_J);nQe=r(JIr,"blenderbot-small"),JIr.forEach(t),sQe=r(KCe," \u2014 "),Tx=n(KCe,"A",{href:!0});var YIr=s(Tx);lQe=r(YIr,"BlenderbotSmallTokenizer"),YIr.forEach(t),iQe=r(KCe," (BlenderbotSmall model)"),KCe.forEach(t),dQe=i(y),qg=n(y,"LI",{});var ZCe=s(qg);uJ=n(ZCe,"STRONG",{});var KIr=s(uJ);cQe=r(KIr,"byt5"),KIr.forEach(t),fQe=r(ZCe," \u2014 "),Fx=n(ZCe,"A",{href:!0});var ZIr=s(Fx);mQe=r(ZIr,"ByT5Tokenizer"),ZIr.forEach(t),gQe=r(ZCe," (ByT5 model)"),ZCe.forEach(t),hQe=i(y),Zn=n(y,"LI",{});var p8=s(Zn);bJ=n(p8,"STRONG",{});var eNr=s(bJ);pQe=r(eNr,"camembert"),eNr.forEach(t),_Qe=r(p8," \u2014 "),Cx=n(p8,"A",{href:!0});var oNr=s(Cx);uQe=r(oNr,"CamembertTokenizer"),oNr.forEach(t),bQe=r(p8," or "),Mx=n(p8,"A",{href:!0});var rNr=s(Mx);vQe=r(rNr,"CamembertTokenizerFast"),rNr.forEach(t),TQe=r(p8," (CamemBERT model)"),p8.forEach(t),FQe=i(y),Gg=n(y,"LI",{});var eMe=s(Gg);vJ=n(eMe,"STRONG",{});var tNr=s(vJ);CQe=r(tNr,"canine"),tNr.forEach(t),MQe=r(eMe," \u2014 "),Ex=n(eMe,"A",{href:!0});var aNr=s(Ex);EQe=r(aNr,"CanineTokenizer"),aNr.forEach(t),yQe=r(eMe," (Canine model)"),eMe.forEach(t),wQe=i(y),es=n(y,"LI",{});var _8=s(es);TJ=n(_8,"STRONG",{});var nNr=s(TJ);AQe=r(nNr,"clip"),nNr.forEach(t),LQe=r(_8," \u2014 "),yx=n(_8,"A",{href:!0});var sNr=s(yx);BQe=r(sNr,"CLIPTokenizer"),sNr.forEach(t),xQe=r(_8," or "),wx=n(_8,"A",{href:!0});var lNr=s(wx);kQe=r(lNr,"CLIPTokenizerFast"),lNr.forEach(t),RQe=r(_8," (CLIP model)"),_8.forEach(t),SQe=i(y),os=n(y,"LI",{});var u8=s(os);FJ=n(u8,"STRONG",{});var iNr=s(FJ);PQe=r(iNr,"convbert"),iNr.forEach(t),$Qe=r(u8," \u2014 "),Ax=n(u8,"A",{href:!0});var dNr=s(Ax);IQe=r(dNr,"ConvBertTokenizer"),dNr.forEach(t),NQe=r(u8," or "),Lx=n(u8,"A",{href:!0});var cNr=s(Lx);jQe=r(cNr,"ConvBertTokenizerFast"),cNr.forEach(t),DQe=r(u8," (ConvBERT model)"),u8.forEach(t),qQe=i(y),rs=n(y,"LI",{});var b8=s(rs);CJ=n(b8,"STRONG",{});var fNr=s(CJ);GQe=r(fNr,"cpm"),fNr.forEach(t),OQe=r(b8," \u2014 "),Bx=n(b8,"A",{href:!0});var mNr=s(Bx);XQe=r(mNr,"CpmTokenizer"),mNr.forEach(t),VQe=r(b8," or "),MJ=n(b8,"CODE",{});var gNr=s(MJ);zQe=r(gNr,"CpmTokenizerFast"),gNr.forEach(t),WQe=r(b8," (CPM model)"),b8.forEach(t),QQe=i(y),Og=n(y,"LI",{});var oMe=s(Og);EJ=n(oMe,"STRONG",{});var hNr=s(EJ);HQe=r(hNr,"ctrl"),hNr.forEach(t),UQe=r(oMe," \u2014 "),xx=n(oMe,"A",{href:!0});var pNr=s(xx);JQe=r(pNr,"CTRLTokenizer"),pNr.forEach(t),YQe=r(oMe," (CTRL model)"),oMe.forEach(t),KQe=i(y),ts=n(y,"LI",{});var v8=s(ts);yJ=n(v8,"STRONG",{});var _Nr=s(yJ);ZQe=r(_Nr,"deberta"),_Nr.forEach(t),eHe=r(v8," \u2014 "),kx=n(v8,"A",{href:!0});var uNr=s(kx);oHe=r(uNr,"DebertaTokenizer"),uNr.forEach(t),rHe=r(v8," or "),Rx=n(v8,"A",{href:!0});var bNr=s(Rx);tHe=r(bNr,"DebertaTokenizerFast"),bNr.forEach(t),aHe=r(v8," (DeBERTa model)"),v8.forEach(t),nHe=i(y),Xg=n(y,"LI",{});var rMe=s(Xg);wJ=n(rMe,"STRONG",{});var vNr=s(wJ);sHe=r(vNr,"deberta-v2"),vNr.forEach(t),lHe=r(rMe," \u2014 "),Sx=n(rMe,"A",{href:!0});var TNr=s(Sx);iHe=r(TNr,"DebertaV2Tokenizer"),TNr.forEach(t),dHe=r(rMe," (DeBERTa-v2 model)"),rMe.forEach(t),cHe=i(y),as=n(y,"LI",{});var T8=s(as);AJ=n(T8,"STRONG",{});var FNr=s(AJ);fHe=r(FNr,"distilbert"),FNr.forEach(t),mHe=r(T8," \u2014 "),Px=n(T8,"A",{href:!0});var CNr=s(Px);gHe=r(CNr,"DistilBertTokenizer"),CNr.forEach(t),hHe=r(T8," or "),$x=n(T8,"A",{href:!0});var MNr=s($x);pHe=r(MNr,"DistilBertTokenizerFast"),MNr.forEach(t),_He=r(T8," (DistilBERT model)"),T8.forEach(t),uHe=i(y),ns=n(y,"LI",{});var F8=s(ns);LJ=n(F8,"STRONG",{});var ENr=s(LJ);bHe=r(ENr,"dpr"),ENr.forEach(t),vHe=r(F8," \u2014 "),Ix=n(F8,"A",{href:!0});var yNr=s(Ix);THe=r(yNr,"DPRQuestionEncoderTokenizer"),yNr.forEach(t),FHe=r(F8," or "),Nx=n(F8,"A",{href:!0});var wNr=s(Nx);CHe=r(wNr,"DPRQuestionEncoderTokenizerFast"),wNr.forEach(t),MHe=r(F8," (DPR model)"),F8.forEach(t),EHe=i(y),ss=n(y,"LI",{});var C8=s(ss);BJ=n(C8,"STRONG",{});var ANr=s(BJ);yHe=r(ANr,"electra"),ANr.forEach(t),wHe=r(C8," \u2014 "),jx=n(C8,"A",{href:!0});var LNr=s(jx);AHe=r(LNr,"ElectraTokenizer"),LNr.forEach(t),LHe=r(C8," or "),Dx=n(C8,"A",{href:!0});var BNr=s(Dx);BHe=r(BNr,"ElectraTokenizerFast"),BNr.forEach(t),xHe=r(C8," (ELECTRA model)"),C8.forEach(t),kHe=i(y),Vg=n(y,"LI",{});var tMe=s(Vg);xJ=n(tMe,"STRONG",{});var xNr=s(xJ);RHe=r(xNr,"flaubert"),xNr.forEach(t),SHe=r(tMe," \u2014 "),qx=n(tMe,"A",{href:!0});var kNr=s(qx);PHe=r(kNr,"FlaubertTokenizer"),kNr.forEach(t),$He=r(tMe," (FlauBERT model)"),tMe.forEach(t),IHe=i(y),ls=n(y,"LI",{});var M8=s(ls);kJ=n(M8,"STRONG",{});var RNr=s(kJ);NHe=r(RNr,"fnet"),RNr.forEach(t),jHe=r(M8," \u2014 "),Gx=n(M8,"A",{href:!0});var SNr=s(Gx);DHe=r(SNr,"FNetTokenizer"),SNr.forEach(t),qHe=r(M8," or "),Ox=n(M8,"A",{href:!0});var PNr=s(Ox);GHe=r(PNr,"FNetTokenizerFast"),PNr.forEach(t),OHe=r(M8," (FNet model)"),M8.forEach(t),XHe=i(y),zg=n(y,"LI",{});var aMe=s(zg);RJ=n(aMe,"STRONG",{});var $Nr=s(RJ);VHe=r($Nr,"fsmt"),$Nr.forEach(t),zHe=r(aMe," \u2014 "),Xx=n(aMe,"A",{href:!0});var INr=s(Xx);WHe=r(INr,"FSMTTokenizer"),INr.forEach(t),QHe=r(aMe," (FairSeq Machine-Translation model)"),aMe.forEach(t),HHe=i(y),is=n(y,"LI",{});var E8=s(is);SJ=n(E8,"STRONG",{});var NNr=s(SJ);UHe=r(NNr,"funnel"),NNr.forEach(t),JHe=r(E8," \u2014 "),Vx=n(E8,"A",{href:!0});var jNr=s(Vx);YHe=r(jNr,"FunnelTokenizer"),jNr.forEach(t),KHe=r(E8," or "),zx=n(E8,"A",{href:!0});var DNr=s(zx);ZHe=r(DNr,"FunnelTokenizerFast"),DNr.forEach(t),eUe=r(E8," (Funnel Transformer model)"),E8.forEach(t),oUe=i(y),ds=n(y,"LI",{});var y8=s(ds);PJ=n(y8,"STRONG",{});var qNr=s(PJ);rUe=r(qNr,"gpt2"),qNr.forEach(t),tUe=r(y8," \u2014 "),Wx=n(y8,"A",{href:!0});var GNr=s(Wx);aUe=r(GNr,"GPT2Tokenizer"),GNr.forEach(t),nUe=r(y8," or "),Qx=n(y8,"A",{href:!0});var ONr=s(Qx);sUe=r(ONr,"GPT2TokenizerFast"),ONr.forEach(t),lUe=r(y8," (OpenAI GPT-2 model)"),y8.forEach(t),iUe=i(y),cs=n(y,"LI",{});var w8=s(cs);$J=n(w8,"STRONG",{});var XNr=s($J);dUe=r(XNr,"gpt_neo"),XNr.forEach(t),cUe=r(w8," \u2014 "),Hx=n(w8,"A",{href:!0});var VNr=s(Hx);fUe=r(VNr,"GPT2Tokenizer"),VNr.forEach(t),mUe=r(w8," or "),Ux=n(w8,"A",{href:!0});var zNr=s(Ux);gUe=r(zNr,"GPT2TokenizerFast"),zNr.forEach(t),hUe=r(w8," (GPT Neo model)"),w8.forEach(t),pUe=i(y),fs=n(y,"LI",{});var A8=s(fs);IJ=n(A8,"STRONG",{});var WNr=s(IJ);_Ue=r(WNr,"herbert"),WNr.forEach(t),uUe=r(A8," \u2014 "),Jx=n(A8,"A",{href:!0});var QNr=s(Jx);bUe=r(QNr,"HerbertTokenizer"),QNr.forEach(t),vUe=r(A8," or "),Yx=n(A8,"A",{href:!0});var HNr=s(Yx);TUe=r(HNr,"HerbertTokenizerFast"),HNr.forEach(t),FUe=r(A8," (HerBERT model)"),A8.forEach(t),CUe=i(y),Wg=n(y,"LI",{});var nMe=s(Wg);NJ=n(nMe,"STRONG",{});var UNr=s(NJ);MUe=r(UNr,"hubert"),UNr.forEach(t),EUe=r(nMe," \u2014 "),Kx=n(nMe,"A",{href:!0});var JNr=s(Kx);yUe=r(JNr,"Wav2Vec2CTCTokenizer"),JNr.forEach(t),wUe=r(nMe," (Hubert model)"),nMe.forEach(t),AUe=i(y),ms=n(y,"LI",{});var L8=s(ms);jJ=n(L8,"STRONG",{});var YNr=s(jJ);LUe=r(YNr,"ibert"),YNr.forEach(t),BUe=r(L8," \u2014 "),Zx=n(L8,"A",{href:!0});var KNr=s(Zx);xUe=r(KNr,"RobertaTokenizer"),KNr.forEach(t),kUe=r(L8," or "),ek=n(L8,"A",{href:!0});var ZNr=s(ek);RUe=r(ZNr,"RobertaTokenizerFast"),ZNr.forEach(t),SUe=r(L8," (I-BERT model)"),L8.forEach(t),PUe=i(y),gs=n(y,"LI",{});var B8=s(gs);DJ=n(B8,"STRONG",{});var ejr=s(DJ);$Ue=r(ejr,"layoutlm"),ejr.forEach(t),IUe=r(B8," \u2014 "),ok=n(B8,"A",{href:!0});var ojr=s(ok);NUe=r(ojr,"LayoutLMTokenizer"),ojr.forEach(t),jUe=r(B8," or "),rk=n(B8,"A",{href:!0});var rjr=s(rk);DUe=r(rjr,"LayoutLMTokenizerFast"),rjr.forEach(t),qUe=r(B8," (LayoutLM model)"),B8.forEach(t),GUe=i(y),hs=n(y,"LI",{});var x8=s(hs);qJ=n(x8,"STRONG",{});var tjr=s(qJ);OUe=r(tjr,"layoutlmv2"),tjr.forEach(t),XUe=r(x8," \u2014 "),tk=n(x8,"A",{href:!0});var ajr=s(tk);VUe=r(ajr,"LayoutLMv2Tokenizer"),ajr.forEach(t),zUe=r(x8," or "),ak=n(x8,"A",{href:!0});var njr=s(ak);WUe=r(njr,"LayoutLMv2TokenizerFast"),njr.forEach(t),QUe=r(x8," (LayoutLMv2 model)"),x8.forEach(t),HUe=i(y),ps=n(y,"LI",{});var k8=s(ps);GJ=n(k8,"STRONG",{});var sjr=s(GJ);UUe=r(sjr,"layoutxlm"),sjr.forEach(t),JUe=r(k8," \u2014 "),nk=n(k8,"A",{href:!0});var ljr=s(nk);YUe=r(ljr,"LayoutXLMTokenizer"),ljr.forEach(t),KUe=r(k8," or "),sk=n(k8,"A",{href:!0});var ijr=s(sk);ZUe=r(ijr,"LayoutXLMTokenizerFast"),ijr.forEach(t),eJe=r(k8," (LayoutXLM model)"),k8.forEach(t),oJe=i(y),_s=n(y,"LI",{});var R8=s(_s);OJ=n(R8,"STRONG",{});var djr=s(OJ);rJe=r(djr,"led"),djr.forEach(t),tJe=r(R8," \u2014 "),lk=n(R8,"A",{href:!0});var cjr=s(lk);aJe=r(cjr,"LEDTokenizer"),cjr.forEach(t),nJe=r(R8," or "),ik=n(R8,"A",{href:!0});var fjr=s(ik);sJe=r(fjr,"LEDTokenizerFast"),fjr.forEach(t),lJe=r(R8," (LED model)"),R8.forEach(t),iJe=i(y),us=n(y,"LI",{});var S8=s(us);XJ=n(S8,"STRONG",{});var mjr=s(XJ);dJe=r(mjr,"longformer"),mjr.forEach(t),cJe=r(S8," \u2014 "),dk=n(S8,"A",{href:!0});var gjr=s(dk);fJe=r(gjr,"LongformerTokenizer"),gjr.forEach(t),mJe=r(S8," or "),ck=n(S8,"A",{href:!0});var hjr=s(ck);gJe=r(hjr,"LongformerTokenizerFast"),hjr.forEach(t),hJe=r(S8," (Longformer model)"),S8.forEach(t),pJe=i(y),Qg=n(y,"LI",{});var sMe=s(Qg);VJ=n(sMe,"STRONG",{});var pjr=s(VJ);_Je=r(pjr,"luke"),pjr.forEach(t),uJe=r(sMe," \u2014 "),fk=n(sMe,"A",{href:!0});var _jr=s(fk);bJe=r(_jr,"LukeTokenizer"),_jr.forEach(t),vJe=r(sMe," (LUKE model)"),sMe.forEach(t),TJe=i(y),bs=n(y,"LI",{});var P8=s(bs);zJ=n(P8,"STRONG",{});var ujr=s(zJ);FJe=r(ujr,"lxmert"),ujr.forEach(t),CJe=r(P8," \u2014 "),mk=n(P8,"A",{href:!0});var bjr=s(mk);MJe=r(bjr,"LxmertTokenizer"),bjr.forEach(t),EJe=r(P8," or "),gk=n(P8,"A",{href:!0});var vjr=s(gk);yJe=r(vjr,"LxmertTokenizerFast"),vjr.forEach(t),wJe=r(P8," (LXMERT model)"),P8.forEach(t),AJe=i(y),Hg=n(y,"LI",{});var lMe=s(Hg);WJ=n(lMe,"STRONG",{});var Tjr=s(WJ);LJe=r(Tjr,"m2m_100"),Tjr.forEach(t),BJe=r(lMe," \u2014 "),hk=n(lMe,"A",{href:!0});var Fjr=s(hk);xJe=r(Fjr,"M2M100Tokenizer"),Fjr.forEach(t),kJe=r(lMe," (M2M100 model)"),lMe.forEach(t),RJe=i(y),Ug=n(y,"LI",{});var iMe=s(Ug);QJ=n(iMe,"STRONG",{});var Cjr=s(QJ);SJe=r(Cjr,"marian"),Cjr.forEach(t),PJe=r(iMe," \u2014 "),pk=n(iMe,"A",{href:!0});var Mjr=s(pk);$Je=r(Mjr,"MarianTokenizer"),Mjr.forEach(t),IJe=r(iMe," (Marian model)"),iMe.forEach(t),NJe=i(y),vs=n(y,"LI",{});var $8=s(vs);HJ=n($8,"STRONG",{});var Ejr=s(HJ);jJe=r(Ejr,"mbart"),Ejr.forEach(t),DJe=r($8," \u2014 "),_k=n($8,"A",{href:!0});var yjr=s(_k);qJe=r(yjr,"MBartTokenizer"),yjr.forEach(t),GJe=r($8," or "),uk=n($8,"A",{href:!0});var wjr=s(uk);OJe=r(wjr,"MBartTokenizerFast"),wjr.forEach(t),XJe=r($8," (mBART model)"),$8.forEach(t),VJe=i(y),Ts=n(y,"LI",{});var I8=s(Ts);UJ=n(I8,"STRONG",{});var Ajr=s(UJ);zJe=r(Ajr,"mbart50"),Ajr.forEach(t),WJe=r(I8," \u2014 "),bk=n(I8,"A",{href:!0});var Ljr=s(bk);QJe=r(Ljr,"MBart50Tokenizer"),Ljr.forEach(t),HJe=r(I8," or "),vk=n(I8,"A",{href:!0});var Bjr=s(vk);UJe=r(Bjr,"MBart50TokenizerFast"),Bjr.forEach(t),JJe=r(I8," (mBART-50 model)"),I8.forEach(t),YJe=i(y),Jg=n(y,"LI",{});var dMe=s(Jg);JJ=n(dMe,"STRONG",{});var xjr=s(JJ);KJe=r(xjr,"mluke"),xjr.forEach(t),ZJe=r(dMe," \u2014 "),Tk=n(dMe,"A",{href:!0});var kjr=s(Tk);eYe=r(kjr,"MLukeTokenizer"),kjr.forEach(t),oYe=r(dMe," (mLUKE model)"),dMe.forEach(t),rYe=i(y),Fs=n(y,"LI",{});var N8=s(Fs);YJ=n(N8,"STRONG",{});var Rjr=s(YJ);tYe=r(Rjr,"mobilebert"),Rjr.forEach(t),aYe=r(N8," \u2014 "),Fk=n(N8,"A",{href:!0});var Sjr=s(Fk);nYe=r(Sjr,"MobileBertTokenizer"),Sjr.forEach(t),sYe=r(N8," or "),Ck=n(N8,"A",{href:!0});var Pjr=s(Ck);lYe=r(Pjr,"MobileBertTokenizerFast"),Pjr.forEach(t),iYe=r(N8," (MobileBERT model)"),N8.forEach(t),dYe=i(y),Cs=n(y,"LI",{});var j8=s(Cs);KJ=n(j8,"STRONG",{});var $jr=s(KJ);cYe=r($jr,"mpnet"),$jr.forEach(t),fYe=r(j8," \u2014 "),Mk=n(j8,"A",{href:!0});var Ijr=s(Mk);mYe=r(Ijr,"MPNetTokenizer"),Ijr.forEach(t),gYe=r(j8," or "),Ek=n(j8,"A",{href:!0});var Njr=s(Ek);hYe=r(Njr,"MPNetTokenizerFast"),Njr.forEach(t),pYe=r(j8," (MPNet model)"),j8.forEach(t),_Ye=i(y),Ms=n(y,"LI",{});var D8=s(Ms);ZJ=n(D8,"STRONG",{});var jjr=s(ZJ);uYe=r(jjr,"mt5"),jjr.forEach(t),bYe=r(D8," \u2014 "),yk=n(D8,"A",{href:!0});var Djr=s(yk);vYe=r(Djr,"MT5Tokenizer"),Djr.forEach(t),TYe=r(D8," or "),wk=n(D8,"A",{href:!0});var qjr=s(wk);FYe=r(qjr,"MT5TokenizerFast"),qjr.forEach(t),CYe=r(D8," (mT5 model)"),D8.forEach(t),MYe=i(y),Es=n(y,"LI",{});var q8=s(Es);eY=n(q8,"STRONG",{});var Gjr=s(eY);EYe=r(Gjr,"openai-gpt"),Gjr.forEach(t),yYe=r(q8," \u2014 "),Ak=n(q8,"A",{href:!0});var Ojr=s(Ak);wYe=r(Ojr,"OpenAIGPTTokenizer"),Ojr.forEach(t),AYe=r(q8," or "),Lk=n(q8,"A",{href:!0});var Xjr=s(Lk);LYe=r(Xjr,"OpenAIGPTTokenizerFast"),Xjr.forEach(t),BYe=r(q8," (OpenAI GPT model)"),q8.forEach(t),xYe=i(y),ys=n(y,"LI",{});var G8=s(ys);oY=n(G8,"STRONG",{});var Vjr=s(oY);kYe=r(Vjr,"pegasus"),Vjr.forEach(t),RYe=r(G8," \u2014 "),Bk=n(G8,"A",{href:!0});var zjr=s(Bk);SYe=r(zjr,"PegasusTokenizer"),zjr.forEach(t),PYe=r(G8," or "),xk=n(G8,"A",{href:!0});var Wjr=s(xk);$Ye=r(Wjr,"PegasusTokenizerFast"),Wjr.forEach(t),IYe=r(G8," (Pegasus model)"),G8.forEach(t),NYe=i(y),Yg=n(y,"LI",{});var cMe=s(Yg);rY=n(cMe,"STRONG",{});var Qjr=s(rY);jYe=r(Qjr,"perceiver"),Qjr.forEach(t),DYe=r(cMe," \u2014 "),kk=n(cMe,"A",{href:!0});var Hjr=s(kk);qYe=r(Hjr,"PerceiverTokenizer"),Hjr.forEach(t),GYe=r(cMe," (Perceiver model)"),cMe.forEach(t),OYe=i(y),Kg=n(y,"LI",{});var fMe=s(Kg);tY=n(fMe,"STRONG",{});var Ujr=s(tY);XYe=r(Ujr,"phobert"),Ujr.forEach(t),VYe=r(fMe," \u2014 "),Rk=n(fMe,"A",{href:!0});var Jjr=s(Rk);zYe=r(Jjr,"PhobertTokenizer"),Jjr.forEach(t),WYe=r(fMe," (PhoBERT model)"),fMe.forEach(t),QYe=i(y),Zg=n(y,"LI",{});var mMe=s(Zg);aY=n(mMe,"STRONG",{});var Yjr=s(aY);HYe=r(Yjr,"plbart"),Yjr.forEach(t),UYe=r(mMe," \u2014 "),Sk=n(mMe,"A",{href:!0});var Kjr=s(Sk);JYe=r(Kjr,"PLBartTokenizer"),Kjr.forEach(t),YYe=r(mMe," (PLBart model)"),mMe.forEach(t),KYe=i(y),eh=n(y,"LI",{});var gMe=s(eh);nY=n(gMe,"STRONG",{});var Zjr=s(nY);ZYe=r(Zjr,"prophetnet"),Zjr.forEach(t),eKe=r(gMe," \u2014 "),Pk=n(gMe,"A",{href:!0});var eDr=s(Pk);oKe=r(eDr,"ProphetNetTokenizer"),eDr.forEach(t),rKe=r(gMe," (ProphetNet model)"),gMe.forEach(t),tKe=i(y),ws=n(y,"LI",{});var O8=s(ws);sY=n(O8,"STRONG",{});var oDr=s(sY);aKe=r(oDr,"qdqbert"),oDr.forEach(t),nKe=r(O8," \u2014 "),$k=n(O8,"A",{href:!0});var rDr=s($k);sKe=r(rDr,"BertTokenizer"),rDr.forEach(t),lKe=r(O8," or "),Ik=n(O8,"A",{href:!0});var tDr=s(Ik);iKe=r(tDr,"BertTokenizerFast"),tDr.forEach(t),dKe=r(O8," (QDQBert model)"),O8.forEach(t),cKe=i(y),oh=n(y,"LI",{});var hMe=s(oh);lY=n(hMe,"STRONG",{});var aDr=s(lY);fKe=r(aDr,"rag"),aDr.forEach(t),mKe=r(hMe," \u2014 "),Nk=n(hMe,"A",{href:!0});var nDr=s(Nk);gKe=r(nDr,"RagTokenizer"),nDr.forEach(t),hKe=r(hMe," (RAG model)"),hMe.forEach(t),pKe=i(y),As=n(y,"LI",{});var X8=s(As);iY=n(X8,"STRONG",{});var sDr=s(iY);_Ke=r(sDr,"realm"),sDr.forEach(t),uKe=r(X8," \u2014 "),jk=n(X8,"A",{href:!0});var lDr=s(jk);bKe=r(lDr,"RealmTokenizer"),lDr.forEach(t),vKe=r(X8," or "),Dk=n(X8,"A",{href:!0});var iDr=s(Dk);TKe=r(iDr,"RealmTokenizerFast"),iDr.forEach(t),FKe=r(X8," (Realm model)"),X8.forEach(t),CKe=i(y),Ls=n(y,"LI",{});var V8=s(Ls);dY=n(V8,"STRONG",{});var dDr=s(dY);MKe=r(dDr,"reformer"),dDr.forEach(t),EKe=r(V8," \u2014 "),qk=n(V8,"A",{href:!0});var cDr=s(qk);yKe=r(cDr,"ReformerTokenizer"),cDr.forEach(t),wKe=r(V8," or "),Gk=n(V8,"A",{href:!0});var fDr=s(Gk);AKe=r(fDr,"ReformerTokenizerFast"),fDr.forEach(t),LKe=r(V8," (Reformer model)"),V8.forEach(t),BKe=i(y),Bs=n(y,"LI",{});var z8=s(Bs);cY=n(z8,"STRONG",{});var mDr=s(cY);xKe=r(mDr,"rembert"),mDr.forEach(t),kKe=r(z8," \u2014 "),Ok=n(z8,"A",{href:!0});var gDr=s(Ok);RKe=r(gDr,"RemBertTokenizer"),gDr.forEach(t),SKe=r(z8," or "),Xk=n(z8,"A",{href:!0});var hDr=s(Xk);PKe=r(hDr,"RemBertTokenizerFast"),hDr.forEach(t),$Ke=r(z8," (RemBERT model)"),z8.forEach(t),IKe=i(y),xs=n(y,"LI",{});var W8=s(xs);fY=n(W8,"STRONG",{});var pDr=s(fY);NKe=r(pDr,"retribert"),pDr.forEach(t),jKe=r(W8," \u2014 "),Vk=n(W8,"A",{href:!0});var _Dr=s(Vk);DKe=r(_Dr,"RetriBertTokenizer"),_Dr.forEach(t),qKe=r(W8," or "),zk=n(W8,"A",{href:!0});var uDr=s(zk);GKe=r(uDr,"RetriBertTokenizerFast"),uDr.forEach(t),OKe=r(W8," (RetriBERT model)"),W8.forEach(t),XKe=i(y),ks=n(y,"LI",{});var Q8=s(ks);mY=n(Q8,"STRONG",{});var bDr=s(mY);VKe=r(bDr,"roberta"),bDr.forEach(t),zKe=r(Q8," \u2014 "),Wk=n(Q8,"A",{href:!0});var vDr=s(Wk);WKe=r(vDr,"RobertaTokenizer"),vDr.forEach(t),QKe=r(Q8," or "),Qk=n(Q8,"A",{href:!0});var TDr=s(Qk);HKe=r(TDr,"RobertaTokenizerFast"),TDr.forEach(t),UKe=r(Q8," (RoBERTa model)"),Q8.forEach(t),JKe=i(y),Rs=n(y,"LI",{});var H8=s(Rs);gY=n(H8,"STRONG",{});var FDr=s(gY);YKe=r(FDr,"roformer"),FDr.forEach(t),KKe=r(H8," \u2014 "),Hk=n(H8,"A",{href:!0});var CDr=s(Hk);ZKe=r(CDr,"RoFormerTokenizer"),CDr.forEach(t),eZe=r(H8," or "),Uk=n(H8,"A",{href:!0});var MDr=s(Uk);oZe=r(MDr,"RoFormerTokenizerFast"),MDr.forEach(t),rZe=r(H8," (RoFormer model)"),H8.forEach(t),tZe=i(y),rh=n(y,"LI",{});var pMe=s(rh);hY=n(pMe,"STRONG",{});var EDr=s(hY);aZe=r(EDr,"speech_to_text"),EDr.forEach(t),nZe=r(pMe," \u2014 "),Jk=n(pMe,"A",{href:!0});var yDr=s(Jk);sZe=r(yDr,"Speech2TextTokenizer"),yDr.forEach(t),lZe=r(pMe," (Speech2Text model)"),pMe.forEach(t),iZe=i(y),th=n(y,"LI",{});var _Me=s(th);pY=n(_Me,"STRONG",{});var wDr=s(pY);dZe=r(wDr,"speech_to_text_2"),wDr.forEach(t),cZe=r(_Me," \u2014 "),Yk=n(_Me,"A",{href:!0});var ADr=s(Yk);fZe=r(ADr,"Speech2Text2Tokenizer"),ADr.forEach(t),mZe=r(_Me," (Speech2Text2 model)"),_Me.forEach(t),gZe=i(y),Ss=n(y,"LI",{});var U8=s(Ss);_Y=n(U8,"STRONG",{});var LDr=s(_Y);hZe=r(LDr,"splinter"),LDr.forEach(t),pZe=r(U8," \u2014 "),Kk=n(U8,"A",{href:!0});var BDr=s(Kk);_Ze=r(BDr,"SplinterTokenizer"),BDr.forEach(t),uZe=r(U8," or "),Zk=n(U8,"A",{href:!0});var xDr=s(Zk);bZe=r(xDr,"SplinterTokenizerFast"),xDr.forEach(t),vZe=r(U8," (Splinter model)"),U8.forEach(t),TZe=i(y),Ps=n(y,"LI",{});var J8=s(Ps);uY=n(J8,"STRONG",{});var kDr=s(uY);FZe=r(kDr,"squeezebert"),kDr.forEach(t),CZe=r(J8," \u2014 "),eR=n(J8,"A",{href:!0});var RDr=s(eR);MZe=r(RDr,"SqueezeBertTokenizer"),RDr.forEach(t),EZe=r(J8," or "),oR=n(J8,"A",{href:!0});var SDr=s(oR);yZe=r(SDr,"SqueezeBertTokenizerFast"),SDr.forEach(t),wZe=r(J8," (SqueezeBERT model)"),J8.forEach(t),AZe=i(y),$s=n(y,"LI",{});var Y8=s($s);bY=n(Y8,"STRONG",{});var PDr=s(bY);LZe=r(PDr,"t5"),PDr.forEach(t),BZe=r(Y8," \u2014 "),rR=n(Y8,"A",{href:!0});var $Dr=s(rR);xZe=r($Dr,"T5Tokenizer"),$Dr.forEach(t),kZe=r(Y8," or "),tR=n(Y8,"A",{href:!0});var IDr=s(tR);RZe=r(IDr,"T5TokenizerFast"),IDr.forEach(t),SZe=r(Y8," (T5 model)"),Y8.forEach(t),PZe=i(y),ah=n(y,"LI",{});var uMe=s(ah);vY=n(uMe,"STRONG",{});var NDr=s(vY);$Ze=r(NDr,"tapas"),NDr.forEach(t),IZe=r(uMe," \u2014 "),aR=n(uMe,"A",{href:!0});var jDr=s(aR);NZe=r(jDr,"TapasTokenizer"),jDr.forEach(t),jZe=r(uMe," (TAPAS model)"),uMe.forEach(t),DZe=i(y),nh=n(y,"LI",{});var bMe=s(nh);TY=n(bMe,"STRONG",{});var DDr=s(TY);qZe=r(DDr,"transfo-xl"),DDr.forEach(t),GZe=r(bMe," \u2014 "),nR=n(bMe,"A",{href:!0});var qDr=s(nR);OZe=r(qDr,"TransfoXLTokenizer"),qDr.forEach(t),XZe=r(bMe," (Transformer-XL model)"),bMe.forEach(t),VZe=i(y),sh=n(y,"LI",{});var vMe=s(sh);FY=n(vMe,"STRONG",{});var GDr=s(FY);zZe=r(GDr,"wav2vec2"),GDr.forEach(t),WZe=r(vMe," \u2014 "),sR=n(vMe,"A",{href:!0});var ODr=s(sR);QZe=r(ODr,"Wav2Vec2CTCTokenizer"),ODr.forEach(t),HZe=r(vMe," (Wav2Vec2 model)"),vMe.forEach(t),UZe=i(y),lh=n(y,"LI",{});var TMe=s(lh);CY=n(TMe,"STRONG",{});var XDr=s(CY);JZe=r(XDr,"wav2vec2_phoneme"),XDr.forEach(t),YZe=r(TMe," \u2014 "),lR=n(TMe,"A",{href:!0});var VDr=s(lR);KZe=r(VDr,"Wav2Vec2PhonemeCTCTokenizer"),VDr.forEach(t),ZZe=r(TMe," (Wav2Vec2Phoneme model)"),TMe.forEach(t),eeo=i(y),Is=n(y,"LI",{});var K8=s(Is);MY=n(K8,"STRONG",{});var zDr=s(MY);oeo=r(zDr,"xglm"),zDr.forEach(t),reo=r(K8," \u2014 "),iR=n(K8,"A",{href:!0});var WDr=s(iR);teo=r(WDr,"XGLMTokenizer"),WDr.forEach(t),aeo=r(K8," or "),dR=n(K8,"A",{href:!0});var QDr=s(dR);neo=r(QDr,"XGLMTokenizerFast"),QDr.forEach(t),seo=r(K8," (XGLM model)"),K8.forEach(t),leo=i(y),ih=n(y,"LI",{});var FMe=s(ih);EY=n(FMe,"STRONG",{});var HDr=s(EY);ieo=r(HDr,"xlm"),HDr.forEach(t),deo=r(FMe," \u2014 "),cR=n(FMe,"A",{href:!0});var UDr=s(cR);ceo=r(UDr,"XLMTokenizer"),UDr.forEach(t),feo=r(FMe," (XLM model)"),FMe.forEach(t),meo=i(y),dh=n(y,"LI",{});var CMe=s(dh);yY=n(CMe,"STRONG",{});var JDr=s(yY);geo=r(JDr,"xlm-prophetnet"),JDr.forEach(t),heo=r(CMe," \u2014 "),fR=n(CMe,"A",{href:!0});var YDr=s(fR);peo=r(YDr,"XLMProphetNetTokenizer"),YDr.forEach(t),_eo=r(CMe," (XLMProphetNet model)"),CMe.forEach(t),ueo=i(y),Ns=n(y,"LI",{});var Z8=s(Ns);wY=n(Z8,"STRONG",{});var KDr=s(wY);beo=r(KDr,"xlm-roberta"),KDr.forEach(t),veo=r(Z8," \u2014 "),mR=n(Z8,"A",{href:!0});var ZDr=s(mR);Teo=r(ZDr,"XLMRobertaTokenizer"),ZDr.forEach(t),Feo=r(Z8," or "),gR=n(Z8,"A",{href:!0});var eqr=s(gR);Ceo=r(eqr,"XLMRobertaTokenizerFast"),eqr.forEach(t),Meo=r(Z8," (XLM-RoBERTa model)"),Z8.forEach(t),Eeo=i(y),js=n(y,"LI",{});var e9=s(js);AY=n(e9,"STRONG",{});var oqr=s(AY);yeo=r(oqr,"xlnet"),oqr.forEach(t),weo=r(e9," \u2014 "),hR=n(e9,"A",{href:!0});var rqr=s(hR);Aeo=r(rqr,"XLNetTokenizer"),rqr.forEach(t),Leo=r(e9," or "),pR=n(e9,"A",{href:!0});var tqr=s(pR);Beo=r(tqr,"XLNetTokenizerFast"),tqr.forEach(t),xeo=r(e9," (XLNet model)"),e9.forEach(t),y.forEach(t),keo=i(ha),LY=n(ha,"P",{});var aqr=s(LY);Reo=r(aqr,"Examples:"),aqr.forEach(t),Seo=i(ha),m(B3.$$.fragment,ha),ha.forEach(t),Peo=i(Xs),ch=n(Xs,"DIV",{class:!0});var NSe=s(ch);m(x3.$$.fragment,NSe),$eo=i(NSe),BY=n(NSe,"P",{});var nqr=s(BY);Ieo=r(nqr,"Register a new tokenizer in this mapping."),nqr.forEach(t),NSe.forEach(t),Xs.forEach(t),Ske=i(c),Qi=n(c,"H2",{class:!0});var jSe=s(Qi);fh=n(jSe,"A",{id:!0,class:!0,href:!0});var sqr=s(fh);xY=n(sqr,"SPAN",{});var lqr=s(xY);m(k3.$$.fragment,lqr),lqr.forEach(t),sqr.forEach(t),Neo=i(jSe),kY=n(jSe,"SPAN",{});var iqr=s(kY);jeo=r(iqr,"AutoFeatureExtractor"),iqr.forEach(t),jSe.forEach(t),Pke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(R3.$$.fragment,Vs),Deo=i(Vs),S3=n(Vs,"P",{});var DSe=s(S3);qeo=r(DSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_R=n(DSe,"A",{href:!0});var dqr=s(_R);Geo=r(dqr,"AutoFeatureExtractor.from_pretrained()"),dqr.forEach(t),Oeo=r(DSe," class method."),DSe.forEach(t),Xeo=i(Vs),P3=n(Vs,"P",{});var qSe=s(P3);Veo=r(qSe,"This class cannot be instantiated directly using "),RY=n(qSe,"CODE",{});var cqr=s(RY);zeo=r(cqr,"__init__()"),cqr.forEach(t),Weo=r(qSe," (throws an error)."),qSe.forEach(t),Qeo=i(Vs),$e=n(Vs,"DIV",{class:!0});var jt=s($e);m($3.$$.fragment,jt),Heo=i(jt),SY=n(jt,"P",{});var fqr=s(SY);Ueo=r(fqr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fqr.forEach(t),Jeo=i(jt),Xa=n(jt,"P",{});var hE=s(Xa);Yeo=r(hE,"The feature extractor class to instantiate is selected based on the "),PY=n(hE,"CODE",{});var mqr=s(PY);Keo=r(mqr,"model_type"),mqr.forEach(t),Zeo=r(hE,` property of the config object
(either passed as an argument or loaded from `),$Y=n(hE,"CODE",{});var gqr=s($Y);eoo=r(gqr,"pretrained_model_name_or_path"),gqr.forEach(t),ooo=r(hE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),IY=n(hE,"CODE",{});var hqr=s(IY);roo=r(hqr,"pretrained_model_name_or_path"),hqr.forEach(t),too=r(hE,":"),hE.forEach(t),aoo=i(jt),te=n(jt,"UL",{});var ne=s(te);mh=n(ne,"LI",{});var MMe=s(mh);NY=n(MMe,"STRONG",{});var pqr=s(NY);noo=r(pqr,"beit"),pqr.forEach(t),soo=r(MMe," \u2014 "),uR=n(MMe,"A",{href:!0});var _qr=s(uR);loo=r(_qr,"BeitFeatureExtractor"),_qr.forEach(t),ioo=r(MMe," (BEiT model)"),MMe.forEach(t),doo=i(ne),gh=n(ne,"LI",{});var EMe=s(gh);jY=n(EMe,"STRONG",{});var uqr=s(jY);coo=r(uqr,"clip"),uqr.forEach(t),foo=r(EMe," \u2014 "),bR=n(EMe,"A",{href:!0});var bqr=s(bR);moo=r(bqr,"CLIPFeatureExtractor"),bqr.forEach(t),goo=r(EMe," (CLIP model)"),EMe.forEach(t),hoo=i(ne),hh=n(ne,"LI",{});var yMe=s(hh);DY=n(yMe,"STRONG",{});var vqr=s(DY);poo=r(vqr,"convnext"),vqr.forEach(t),_oo=r(yMe," \u2014 "),vR=n(yMe,"A",{href:!0});var Tqr=s(vR);uoo=r(Tqr,"ConvNextFeatureExtractor"),Tqr.forEach(t),boo=r(yMe," (ConvNext model)"),yMe.forEach(t),voo=i(ne),ph=n(ne,"LI",{});var wMe=s(ph);qY=n(wMe,"STRONG",{});var Fqr=s(qY);Too=r(Fqr,"deit"),Fqr.forEach(t),Foo=r(wMe," \u2014 "),TR=n(wMe,"A",{href:!0});var Cqr=s(TR);Coo=r(Cqr,"DeiTFeatureExtractor"),Cqr.forEach(t),Moo=r(wMe," (DeiT model)"),wMe.forEach(t),Eoo=i(ne),_h=n(ne,"LI",{});var AMe=s(_h);GY=n(AMe,"STRONG",{});var Mqr=s(GY);yoo=r(Mqr,"detr"),Mqr.forEach(t),woo=r(AMe," \u2014 "),FR=n(AMe,"A",{href:!0});var Eqr=s(FR);Aoo=r(Eqr,"DetrFeatureExtractor"),Eqr.forEach(t),Loo=r(AMe," (DETR model)"),AMe.forEach(t),Boo=i(ne),uh=n(ne,"LI",{});var LMe=s(uh);OY=n(LMe,"STRONG",{});var yqr=s(OY);xoo=r(yqr,"hubert"),yqr.forEach(t),koo=r(LMe," \u2014 "),CR=n(LMe,"A",{href:!0});var wqr=s(CR);Roo=r(wqr,"Wav2Vec2FeatureExtractor"),wqr.forEach(t),Soo=r(LMe," (Hubert model)"),LMe.forEach(t),Poo=i(ne),bh=n(ne,"LI",{});var BMe=s(bh);XY=n(BMe,"STRONG",{});var Aqr=s(XY);$oo=r(Aqr,"layoutlmv2"),Aqr.forEach(t),Ioo=r(BMe," \u2014 "),MR=n(BMe,"A",{href:!0});var Lqr=s(MR);Noo=r(Lqr,"LayoutLMv2FeatureExtractor"),Lqr.forEach(t),joo=r(BMe," (LayoutLMv2 model)"),BMe.forEach(t),Doo=i(ne),vh=n(ne,"LI",{});var xMe=s(vh);VY=n(xMe,"STRONG",{});var Bqr=s(VY);qoo=r(Bqr,"maskformer"),Bqr.forEach(t),Goo=r(xMe," \u2014 "),ER=n(xMe,"A",{href:!0});var xqr=s(ER);Ooo=r(xqr,"MaskFormerFeatureExtractor"),xqr.forEach(t),Xoo=r(xMe," (MaskFormer model)"),xMe.forEach(t),Voo=i(ne),Th=n(ne,"LI",{});var kMe=s(Th);zY=n(kMe,"STRONG",{});var kqr=s(zY);zoo=r(kqr,"perceiver"),kqr.forEach(t),Woo=r(kMe," \u2014 "),yR=n(kMe,"A",{href:!0});var Rqr=s(yR);Qoo=r(Rqr,"PerceiverFeatureExtractor"),Rqr.forEach(t),Hoo=r(kMe," (Perceiver model)"),kMe.forEach(t),Uoo=i(ne),Fh=n(ne,"LI",{});var RMe=s(Fh);WY=n(RMe,"STRONG",{});var Sqr=s(WY);Joo=r(Sqr,"poolformer"),Sqr.forEach(t),Yoo=r(RMe," \u2014 "),wR=n(RMe,"A",{href:!0});var Pqr=s(wR);Koo=r(Pqr,"PoolFormerFeatureExtractor"),Pqr.forEach(t),Zoo=r(RMe," (PoolFormer model)"),RMe.forEach(t),ero=i(ne),Ch=n(ne,"LI",{});var SMe=s(Ch);QY=n(SMe,"STRONG",{});var $qr=s(QY);oro=r($qr,"resnet"),$qr.forEach(t),rro=r(SMe," \u2014 "),AR=n(SMe,"A",{href:!0});var Iqr=s(AR);tro=r(Iqr,"ConvNextFeatureExtractor"),Iqr.forEach(t),aro=r(SMe," (ResNet model)"),SMe.forEach(t),nro=i(ne),Mh=n(ne,"LI",{});var PMe=s(Mh);HY=n(PMe,"STRONG",{});var Nqr=s(HY);sro=r(Nqr,"segformer"),Nqr.forEach(t),lro=r(PMe," \u2014 "),LR=n(PMe,"A",{href:!0});var jqr=s(LR);iro=r(jqr,"SegformerFeatureExtractor"),jqr.forEach(t),dro=r(PMe," (SegFormer model)"),PMe.forEach(t),cro=i(ne),Eh=n(ne,"LI",{});var $Me=s(Eh);UY=n($Me,"STRONG",{});var Dqr=s(UY);fro=r(Dqr,"speech_to_text"),Dqr.forEach(t),mro=r($Me," \u2014 "),BR=n($Me,"A",{href:!0});var qqr=s(BR);gro=r(qqr,"Speech2TextFeatureExtractor"),qqr.forEach(t),hro=r($Me," (Speech2Text model)"),$Me.forEach(t),pro=i(ne),yh=n(ne,"LI",{});var IMe=s(yh);JY=n(IMe,"STRONG",{});var Gqr=s(JY);_ro=r(Gqr,"swin"),Gqr.forEach(t),uro=r(IMe," \u2014 "),xR=n(IMe,"A",{href:!0});var Oqr=s(xR);bro=r(Oqr,"ViTFeatureExtractor"),Oqr.forEach(t),vro=r(IMe," (Swin model)"),IMe.forEach(t),Tro=i(ne),wh=n(ne,"LI",{});var NMe=s(wh);YY=n(NMe,"STRONG",{});var Xqr=s(YY);Fro=r(Xqr,"van"),Xqr.forEach(t),Cro=r(NMe," \u2014 "),kR=n(NMe,"A",{href:!0});var Vqr=s(kR);Mro=r(Vqr,"ConvNextFeatureExtractor"),Vqr.forEach(t),Ero=r(NMe," (VAN model)"),NMe.forEach(t),yro=i(ne),Ah=n(ne,"LI",{});var jMe=s(Ah);KY=n(jMe,"STRONG",{});var zqr=s(KY);wro=r(zqr,"vit"),zqr.forEach(t),Aro=r(jMe," \u2014 "),RR=n(jMe,"A",{href:!0});var Wqr=s(RR);Lro=r(Wqr,"ViTFeatureExtractor"),Wqr.forEach(t),Bro=r(jMe," (ViT model)"),jMe.forEach(t),xro=i(ne),Lh=n(ne,"LI",{});var DMe=s(Lh);ZY=n(DMe,"STRONG",{});var Qqr=s(ZY);kro=r(Qqr,"vit_mae"),Qqr.forEach(t),Rro=r(DMe," \u2014 "),SR=n(DMe,"A",{href:!0});var Hqr=s(SR);Sro=r(Hqr,"ViTFeatureExtractor"),Hqr.forEach(t),Pro=r(DMe," (ViTMAE model)"),DMe.forEach(t),$ro=i(ne),Bh=n(ne,"LI",{});var qMe=s(Bh);eK=n(qMe,"STRONG",{});var Uqr=s(eK);Iro=r(Uqr,"wav2vec2"),Uqr.forEach(t),Nro=r(qMe," \u2014 "),PR=n(qMe,"A",{href:!0});var Jqr=s(PR);jro=r(Jqr,"Wav2Vec2FeatureExtractor"),Jqr.forEach(t),Dro=r(qMe," (Wav2Vec2 model)"),qMe.forEach(t),ne.forEach(t),qro=i(jt),m(xh.$$.fragment,jt),Gro=i(jt),oK=n(jt,"P",{});var Yqr=s(oK);Oro=r(Yqr,"Examples:"),Yqr.forEach(t),Xro=i(jt),m(I3.$$.fragment,jt),jt.forEach(t),Vro=i(Vs),kh=n(Vs,"DIV",{class:!0});var GSe=s(kh);m(N3.$$.fragment,GSe),zro=i(GSe),rK=n(GSe,"P",{});var Kqr=s(rK);Wro=r(Kqr,"Register a new feature extractor for this class."),Kqr.forEach(t),GSe.forEach(t),Vs.forEach(t),$ke=i(c),Hi=n(c,"H2",{class:!0});var OSe=s(Hi);Rh=n(OSe,"A",{id:!0,class:!0,href:!0});var Zqr=s(Rh);tK=n(Zqr,"SPAN",{});var eGr=s(tK);m(j3.$$.fragment,eGr),eGr.forEach(t),Zqr.forEach(t),Qro=i(OSe),aK=n(OSe,"SPAN",{});var oGr=s(aK);Hro=r(oGr,"AutoProcessor"),oGr.forEach(t),OSe.forEach(t),Ike=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(D3.$$.fragment,zs),Uro=i(zs),q3=n(zs,"P",{});var XSe=s(q3);Jro=r(XSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$R=n(XSe,"A",{href:!0});var rGr=s($R);Yro=r(rGr,"AutoProcessor.from_pretrained()"),rGr.forEach(t),Kro=r(XSe," class method."),XSe.forEach(t),Zro=i(zs),G3=n(zs,"P",{});var VSe=s(G3);eto=r(VSe,"This class cannot be instantiated directly using "),nK=n(VSe,"CODE",{});var tGr=s(nK);oto=r(tGr,"__init__()"),tGr.forEach(t),rto=r(VSe," (throws an error)."),VSe.forEach(t),tto=i(zs),Ie=n(zs,"DIV",{class:!0});var Dt=s(Ie);m(O3.$$.fragment,Dt),ato=i(Dt),sK=n(Dt,"P",{});var aGr=s(sK);nto=r(aGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aGr.forEach(t),sto=i(Dt),Ui=n(Dt,"P",{});var sW=s(Ui);lto=r(sW,"The processor class to instantiate is selected based on the "),lK=n(sW,"CODE",{});var nGr=s(lK);ito=r(nGr,"model_type"),nGr.forEach(t),dto=r(sW,` property of the config object (either
passed as an argument or loaded from `),iK=n(sW,"CODE",{});var sGr=s(iK);cto=r(sGr,"pretrained_model_name_or_path"),sGr.forEach(t),fto=r(sW," if possible):"),sW.forEach(t),mto=i(Dt),xe=n(Dt,"UL",{});var Do=s(xe);Sh=n(Do,"LI",{});var GMe=s(Sh);dK=n(GMe,"STRONG",{});var lGr=s(dK);gto=r(lGr,"clip"),lGr.forEach(t),hto=r(GMe," \u2014 "),IR=n(GMe,"A",{href:!0});var iGr=s(IR);pto=r(iGr,"CLIPProcessor"),iGr.forEach(t),_to=r(GMe," (CLIP model)"),GMe.forEach(t),uto=i(Do),Ph=n(Do,"LI",{});var OMe=s(Ph);cK=n(OMe,"STRONG",{});var dGr=s(cK);bto=r(dGr,"layoutlmv2"),dGr.forEach(t),vto=r(OMe," \u2014 "),NR=n(OMe,"A",{href:!0});var cGr=s(NR);Tto=r(cGr,"LayoutLMv2Processor"),cGr.forEach(t),Fto=r(OMe," (LayoutLMv2 model)"),OMe.forEach(t),Cto=i(Do),$h=n(Do,"LI",{});var XMe=s($h);fK=n(XMe,"STRONG",{});var fGr=s(fK);Mto=r(fGr,"layoutxlm"),fGr.forEach(t),Eto=r(XMe," \u2014 "),jR=n(XMe,"A",{href:!0});var mGr=s(jR);yto=r(mGr,"LayoutXLMProcessor"),mGr.forEach(t),wto=r(XMe," (LayoutXLM model)"),XMe.forEach(t),Ato=i(Do),Ih=n(Do,"LI",{});var VMe=s(Ih);mK=n(VMe,"STRONG",{});var gGr=s(mK);Lto=r(gGr,"speech_to_text"),gGr.forEach(t),Bto=r(VMe," \u2014 "),DR=n(VMe,"A",{href:!0});var hGr=s(DR);xto=r(hGr,"Speech2TextProcessor"),hGr.forEach(t),kto=r(VMe," (Speech2Text model)"),VMe.forEach(t),Rto=i(Do),Nh=n(Do,"LI",{});var zMe=s(Nh);gK=n(zMe,"STRONG",{});var pGr=s(gK);Sto=r(pGr,"speech_to_text_2"),pGr.forEach(t),Pto=r(zMe," \u2014 "),qR=n(zMe,"A",{href:!0});var _Gr=s(qR);$to=r(_Gr,"Speech2Text2Processor"),_Gr.forEach(t),Ito=r(zMe," (Speech2Text2 model)"),zMe.forEach(t),Nto=i(Do),jh=n(Do,"LI",{});var WMe=s(jh);hK=n(WMe,"STRONG",{});var uGr=s(hK);jto=r(uGr,"trocr"),uGr.forEach(t),Dto=r(WMe," \u2014 "),GR=n(WMe,"A",{href:!0});var bGr=s(GR);qto=r(bGr,"TrOCRProcessor"),bGr.forEach(t),Gto=r(WMe," (TrOCR model)"),WMe.forEach(t),Oto=i(Do),Dh=n(Do,"LI",{});var QMe=s(Dh);pK=n(QMe,"STRONG",{});var vGr=s(pK);Xto=r(vGr,"vision-text-dual-encoder"),vGr.forEach(t),Vto=r(QMe," \u2014 "),OR=n(QMe,"A",{href:!0});var TGr=s(OR);zto=r(TGr,"VisionTextDualEncoderProcessor"),TGr.forEach(t),Wto=r(QMe," (VisionTextDualEncoder model)"),QMe.forEach(t),Qto=i(Do),qh=n(Do,"LI",{});var HMe=s(qh);_K=n(HMe,"STRONG",{});var FGr=s(_K);Hto=r(FGr,"wav2vec2"),FGr.forEach(t),Uto=r(HMe," \u2014 "),XR=n(HMe,"A",{href:!0});var CGr=s(XR);Jto=r(CGr,"Wav2Vec2Processor"),CGr.forEach(t),Yto=r(HMe," (Wav2Vec2 model)"),HMe.forEach(t),Do.forEach(t),Kto=i(Dt),m(Gh.$$.fragment,Dt),Zto=i(Dt),uK=n(Dt,"P",{});var MGr=s(uK);eao=r(MGr,"Examples:"),MGr.forEach(t),oao=i(Dt),m(X3.$$.fragment,Dt),Dt.forEach(t),rao=i(zs),Oh=n(zs,"DIV",{class:!0});var zSe=s(Oh);m(V3.$$.fragment,zSe),tao=i(zSe),bK=n(zSe,"P",{});var EGr=s(bK);aao=r(EGr,"Register a new processor for this class."),EGr.forEach(t),zSe.forEach(t),zs.forEach(t),Nke=i(c),Ji=n(c,"H2",{class:!0});var WSe=s(Ji);Xh=n(WSe,"A",{id:!0,class:!0,href:!0});var yGr=s(Xh);vK=n(yGr,"SPAN",{});var wGr=s(vK);m(z3.$$.fragment,wGr),wGr.forEach(t),yGr.forEach(t),nao=i(WSe),TK=n(WSe,"SPAN",{});var AGr=s(TK);sao=r(AGr,"AutoModel"),AGr.forEach(t),WSe.forEach(t),jke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(W3.$$.fragment,Ws),lao=i(Ws),Yi=n(Ws,"P",{});var lW=s(Yi);iao=r(lW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FK=n(lW,"CODE",{});var LGr=s(FK);dao=r(LGr,"from_pretrained()"),LGr.forEach(t),cao=r(lW,"class method or the "),CK=n(lW,"CODE",{});var BGr=s(CK);fao=r(BGr,"from_config()"),BGr.forEach(t),mao=r(lW,`class
method.`),lW.forEach(t),gao=i(Ws),Q3=n(Ws,"P",{});var QSe=s(Q3);hao=r(QSe,"This class cannot be instantiated directly using "),MK=n(QSe,"CODE",{});var xGr=s(MK);pao=r(xGr,"__init__()"),xGr.forEach(t),_ao=r(QSe," (throws an error)."),QSe.forEach(t),uao=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(H3.$$.fragment,Qs),bao=i(Qs),EK=n(Qs,"P",{});var kGr=s(EK);vao=r(kGr,"Instantiates one of the base model classes of the library from a configuration."),kGr.forEach(t),Tao=i(Qs),Ki=n(Qs,"P",{});var iW=s(Ki);Fao=r(iW,`Note:
Loading a model from its configuration file does `),yK=n(iW,"STRONG",{});var RGr=s(yK);Cao=r(RGr,"not"),RGr.forEach(t),Mao=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(iW,"CODE",{});var SGr=s(wK);Eao=r(SGr,"from_pretrained()"),SGr.forEach(t),yao=r(iW,"to load the model weights."),iW.forEach(t),wao=i(Qs),AK=n(Qs,"P",{});var PGr=s(AK);Aao=r(PGr,"Examples:"),PGr.forEach(t),Lao=i(Qs),m(U3.$$.fragment,Qs),Qs.forEach(t),Bao=i(Ws),Ne=n(Ws,"DIV",{class:!0});var qt=s(Ne);m(J3.$$.fragment,qt),xao=i(qt),LK=n(qt,"P",{});var $Gr=s(LK);kao=r($Gr,"Instantiate one of the base model classes of the library from a pretrained model."),$Gr.forEach(t),Rao=i(qt),Va=n(qt,"P",{});var pE=s(Va);Sao=r(pE,"The model class to instantiate is selected based on the "),BK=n(pE,"CODE",{});var IGr=s(BK);Pao=r(IGr,"model_type"),IGr.forEach(t),$ao=r(pE,` property of the config object (either
passed as an argument or loaded from `),xK=n(pE,"CODE",{});var NGr=s(xK);Iao=r(NGr,"pretrained_model_name_or_path"),NGr.forEach(t),Nao=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kK=n(pE,"CODE",{});var jGr=s(kK);jao=r(jGr,"pretrained_model_name_or_path"),jGr.forEach(t),Dao=r(pE,":"),pE.forEach(t),qao=i(qt),F=n(qt,"UL",{});var C=s(F);Vh=n(C,"LI",{});var UMe=s(Vh);RK=n(UMe,"STRONG",{});var DGr=s(RK);Gao=r(DGr,"albert"),DGr.forEach(t),Oao=r(UMe," \u2014 "),VR=n(UMe,"A",{href:!0});var qGr=s(VR);Xao=r(qGr,"AlbertModel"),qGr.forEach(t),Vao=r(UMe," (ALBERT model)"),UMe.forEach(t),zao=i(C),zh=n(C,"LI",{});var JMe=s(zh);SK=n(JMe,"STRONG",{});var GGr=s(SK);Wao=r(GGr,"bart"),GGr.forEach(t),Qao=r(JMe," \u2014 "),zR=n(JMe,"A",{href:!0});var OGr=s(zR);Hao=r(OGr,"BartModel"),OGr.forEach(t),Uao=r(JMe," (BART model)"),JMe.forEach(t),Jao=i(C),Wh=n(C,"LI",{});var YMe=s(Wh);PK=n(YMe,"STRONG",{});var XGr=s(PK);Yao=r(XGr,"beit"),XGr.forEach(t),Kao=r(YMe," \u2014 "),WR=n(YMe,"A",{href:!0});var VGr=s(WR);Zao=r(VGr,"BeitModel"),VGr.forEach(t),eno=r(YMe," (BEiT model)"),YMe.forEach(t),ono=i(C),Qh=n(C,"LI",{});var KMe=s(Qh);$K=n(KMe,"STRONG",{});var zGr=s($K);rno=r(zGr,"bert"),zGr.forEach(t),tno=r(KMe," \u2014 "),QR=n(KMe,"A",{href:!0});var WGr=s(QR);ano=r(WGr,"BertModel"),WGr.forEach(t),nno=r(KMe," (BERT model)"),KMe.forEach(t),sno=i(C),Hh=n(C,"LI",{});var ZMe=s(Hh);IK=n(ZMe,"STRONG",{});var QGr=s(IK);lno=r(QGr,"bert-generation"),QGr.forEach(t),ino=r(ZMe," \u2014 "),HR=n(ZMe,"A",{href:!0});var HGr=s(HR);dno=r(HGr,"BertGenerationEncoder"),HGr.forEach(t),cno=r(ZMe," (Bert Generation model)"),ZMe.forEach(t),fno=i(C),Uh=n(C,"LI",{});var e4e=s(Uh);NK=n(e4e,"STRONG",{});var UGr=s(NK);mno=r(UGr,"big_bird"),UGr.forEach(t),gno=r(e4e," \u2014 "),UR=n(e4e,"A",{href:!0});var JGr=s(UR);hno=r(JGr,"BigBirdModel"),JGr.forEach(t),pno=r(e4e," (BigBird model)"),e4e.forEach(t),_no=i(C),Jh=n(C,"LI",{});var o4e=s(Jh);jK=n(o4e,"STRONG",{});var YGr=s(jK);uno=r(YGr,"bigbird_pegasus"),YGr.forEach(t),bno=r(o4e," \u2014 "),JR=n(o4e,"A",{href:!0});var KGr=s(JR);vno=r(KGr,"BigBirdPegasusModel"),KGr.forEach(t),Tno=r(o4e," (BigBirdPegasus model)"),o4e.forEach(t),Fno=i(C),Yh=n(C,"LI",{});var r4e=s(Yh);DK=n(r4e,"STRONG",{});var ZGr=s(DK);Cno=r(ZGr,"blenderbot"),ZGr.forEach(t),Mno=r(r4e," \u2014 "),YR=n(r4e,"A",{href:!0});var eOr=s(YR);Eno=r(eOr,"BlenderbotModel"),eOr.forEach(t),yno=r(r4e," (Blenderbot model)"),r4e.forEach(t),wno=i(C),Kh=n(C,"LI",{});var t4e=s(Kh);qK=n(t4e,"STRONG",{});var oOr=s(qK);Ano=r(oOr,"blenderbot-small"),oOr.forEach(t),Lno=r(t4e," \u2014 "),KR=n(t4e,"A",{href:!0});var rOr=s(KR);Bno=r(rOr,"BlenderbotSmallModel"),rOr.forEach(t),xno=r(t4e," (BlenderbotSmall model)"),t4e.forEach(t),kno=i(C),Zh=n(C,"LI",{});var a4e=s(Zh);GK=n(a4e,"STRONG",{});var tOr=s(GK);Rno=r(tOr,"camembert"),tOr.forEach(t),Sno=r(a4e," \u2014 "),ZR=n(a4e,"A",{href:!0});var aOr=s(ZR);Pno=r(aOr,"CamembertModel"),aOr.forEach(t),$no=r(a4e," (CamemBERT model)"),a4e.forEach(t),Ino=i(C),ep=n(C,"LI",{});var n4e=s(ep);OK=n(n4e,"STRONG",{});var nOr=s(OK);Nno=r(nOr,"canine"),nOr.forEach(t),jno=r(n4e," \u2014 "),eS=n(n4e,"A",{href:!0});var sOr=s(eS);Dno=r(sOr,"CanineModel"),sOr.forEach(t),qno=r(n4e," (Canine model)"),n4e.forEach(t),Gno=i(C),op=n(C,"LI",{});var s4e=s(op);XK=n(s4e,"STRONG",{});var lOr=s(XK);Ono=r(lOr,"clip"),lOr.forEach(t),Xno=r(s4e," \u2014 "),oS=n(s4e,"A",{href:!0});var iOr=s(oS);Vno=r(iOr,"CLIPModel"),iOr.forEach(t),zno=r(s4e," (CLIP model)"),s4e.forEach(t),Wno=i(C),rp=n(C,"LI",{});var l4e=s(rp);VK=n(l4e,"STRONG",{});var dOr=s(VK);Qno=r(dOr,"convbert"),dOr.forEach(t),Hno=r(l4e," \u2014 "),rS=n(l4e,"A",{href:!0});var cOr=s(rS);Uno=r(cOr,"ConvBertModel"),cOr.forEach(t),Jno=r(l4e," (ConvBERT model)"),l4e.forEach(t),Yno=i(C),tp=n(C,"LI",{});var i4e=s(tp);zK=n(i4e,"STRONG",{});var fOr=s(zK);Kno=r(fOr,"convnext"),fOr.forEach(t),Zno=r(i4e," \u2014 "),tS=n(i4e,"A",{href:!0});var mOr=s(tS);eso=r(mOr,"ConvNextModel"),mOr.forEach(t),oso=r(i4e," (ConvNext model)"),i4e.forEach(t),rso=i(C),ap=n(C,"LI",{});var d4e=s(ap);WK=n(d4e,"STRONG",{});var gOr=s(WK);tso=r(gOr,"ctrl"),gOr.forEach(t),aso=r(d4e," \u2014 "),aS=n(d4e,"A",{href:!0});var hOr=s(aS);nso=r(hOr,"CTRLModel"),hOr.forEach(t),sso=r(d4e," (CTRL model)"),d4e.forEach(t),lso=i(C),np=n(C,"LI",{});var c4e=s(np);QK=n(c4e,"STRONG",{});var pOr=s(QK);iso=r(pOr,"data2vec-audio"),pOr.forEach(t),dso=r(c4e," \u2014 "),nS=n(c4e,"A",{href:!0});var _Or=s(nS);cso=r(_Or,"Data2VecAudioModel"),_Or.forEach(t),fso=r(c4e," (Data2VecAudio model)"),c4e.forEach(t),mso=i(C),sp=n(C,"LI",{});var f4e=s(sp);HK=n(f4e,"STRONG",{});var uOr=s(HK);gso=r(uOr,"data2vec-text"),uOr.forEach(t),hso=r(f4e," \u2014 "),sS=n(f4e,"A",{href:!0});var bOr=s(sS);pso=r(bOr,"Data2VecTextModel"),bOr.forEach(t),_so=r(f4e," (Data2VecText model)"),f4e.forEach(t),uso=i(C),lp=n(C,"LI",{});var m4e=s(lp);UK=n(m4e,"STRONG",{});var vOr=s(UK);bso=r(vOr,"deberta"),vOr.forEach(t),vso=r(m4e," \u2014 "),lS=n(m4e,"A",{href:!0});var TOr=s(lS);Tso=r(TOr,"DebertaModel"),TOr.forEach(t),Fso=r(m4e," (DeBERTa model)"),m4e.forEach(t),Cso=i(C),ip=n(C,"LI",{});var g4e=s(ip);JK=n(g4e,"STRONG",{});var FOr=s(JK);Mso=r(FOr,"deberta-v2"),FOr.forEach(t),Eso=r(g4e," \u2014 "),iS=n(g4e,"A",{href:!0});var COr=s(iS);yso=r(COr,"DebertaV2Model"),COr.forEach(t),wso=r(g4e," (DeBERTa-v2 model)"),g4e.forEach(t),Aso=i(C),dp=n(C,"LI",{});var h4e=s(dp);YK=n(h4e,"STRONG",{});var MOr=s(YK);Lso=r(MOr,"decision_transformer"),MOr.forEach(t),Bso=r(h4e," \u2014 "),dS=n(h4e,"A",{href:!0});var EOr=s(dS);xso=r(EOr,"DecisionTransformerModel"),EOr.forEach(t),kso=r(h4e," (Decision Transformer model)"),h4e.forEach(t),Rso=i(C),cp=n(C,"LI",{});var p4e=s(cp);KK=n(p4e,"STRONG",{});var yOr=s(KK);Sso=r(yOr,"deit"),yOr.forEach(t),Pso=r(p4e," \u2014 "),cS=n(p4e,"A",{href:!0});var wOr=s(cS);$so=r(wOr,"DeiTModel"),wOr.forEach(t),Iso=r(p4e," (DeiT model)"),p4e.forEach(t),Nso=i(C),fp=n(C,"LI",{});var _4e=s(fp);ZK=n(_4e,"STRONG",{});var AOr=s(ZK);jso=r(AOr,"detr"),AOr.forEach(t),Dso=r(_4e," \u2014 "),fS=n(_4e,"A",{href:!0});var LOr=s(fS);qso=r(LOr,"DetrModel"),LOr.forEach(t),Gso=r(_4e," (DETR model)"),_4e.forEach(t),Oso=i(C),mp=n(C,"LI",{});var u4e=s(mp);eZ=n(u4e,"STRONG",{});var BOr=s(eZ);Xso=r(BOr,"distilbert"),BOr.forEach(t),Vso=r(u4e," \u2014 "),mS=n(u4e,"A",{href:!0});var xOr=s(mS);zso=r(xOr,"DistilBertModel"),xOr.forEach(t),Wso=r(u4e," (DistilBERT model)"),u4e.forEach(t),Qso=i(C),gp=n(C,"LI",{});var b4e=s(gp);oZ=n(b4e,"STRONG",{});var kOr=s(oZ);Hso=r(kOr,"dpr"),kOr.forEach(t),Uso=r(b4e," \u2014 "),gS=n(b4e,"A",{href:!0});var ROr=s(gS);Jso=r(ROr,"DPRQuestionEncoder"),ROr.forEach(t),Yso=r(b4e," (DPR model)"),b4e.forEach(t),Kso=i(C),hp=n(C,"LI",{});var v4e=s(hp);rZ=n(v4e,"STRONG",{});var SOr=s(rZ);Zso=r(SOr,"electra"),SOr.forEach(t),elo=r(v4e," \u2014 "),hS=n(v4e,"A",{href:!0});var POr=s(hS);olo=r(POr,"ElectraModel"),POr.forEach(t),rlo=r(v4e," (ELECTRA model)"),v4e.forEach(t),tlo=i(C),pp=n(C,"LI",{});var T4e=s(pp);tZ=n(T4e,"STRONG",{});var $Or=s(tZ);alo=r($Or,"flaubert"),$Or.forEach(t),nlo=r(T4e," \u2014 "),pS=n(T4e,"A",{href:!0});var IOr=s(pS);slo=r(IOr,"FlaubertModel"),IOr.forEach(t),llo=r(T4e," (FlauBERT model)"),T4e.forEach(t),ilo=i(C),_p=n(C,"LI",{});var F4e=s(_p);aZ=n(F4e,"STRONG",{});var NOr=s(aZ);dlo=r(NOr,"fnet"),NOr.forEach(t),clo=r(F4e," \u2014 "),_S=n(F4e,"A",{href:!0});var jOr=s(_S);flo=r(jOr,"FNetModel"),jOr.forEach(t),mlo=r(F4e," (FNet model)"),F4e.forEach(t),glo=i(C),up=n(C,"LI",{});var C4e=s(up);nZ=n(C4e,"STRONG",{});var DOr=s(nZ);hlo=r(DOr,"fsmt"),DOr.forEach(t),plo=r(C4e," \u2014 "),uS=n(C4e,"A",{href:!0});var qOr=s(uS);_lo=r(qOr,"FSMTModel"),qOr.forEach(t),ulo=r(C4e," (FairSeq Machine-Translation model)"),C4e.forEach(t),blo=i(C),Ds=n(C,"LI",{});var o9=s(Ds);sZ=n(o9,"STRONG",{});var GOr=s(sZ);vlo=r(GOr,"funnel"),GOr.forEach(t),Tlo=r(o9," \u2014 "),bS=n(o9,"A",{href:!0});var OOr=s(bS);Flo=r(OOr,"FunnelModel"),OOr.forEach(t),Clo=r(o9," or "),vS=n(o9,"A",{href:!0});var XOr=s(vS);Mlo=r(XOr,"FunnelBaseModel"),XOr.forEach(t),Elo=r(o9," (Funnel Transformer model)"),o9.forEach(t),ylo=i(C),bp=n(C,"LI",{});var M4e=s(bp);lZ=n(M4e,"STRONG",{});var VOr=s(lZ);wlo=r(VOr,"glpn"),VOr.forEach(t),Alo=r(M4e," \u2014 "),TS=n(M4e,"A",{href:!0});var zOr=s(TS);Llo=r(zOr,"GLPNModel"),zOr.forEach(t),Blo=r(M4e," (GLPN model)"),M4e.forEach(t),xlo=i(C),vp=n(C,"LI",{});var E4e=s(vp);iZ=n(E4e,"STRONG",{});var WOr=s(iZ);klo=r(WOr,"gpt2"),WOr.forEach(t),Rlo=r(E4e," \u2014 "),FS=n(E4e,"A",{href:!0});var QOr=s(FS);Slo=r(QOr,"GPT2Model"),QOr.forEach(t),Plo=r(E4e," (OpenAI GPT-2 model)"),E4e.forEach(t),$lo=i(C),Tp=n(C,"LI",{});var y4e=s(Tp);dZ=n(y4e,"STRONG",{});var HOr=s(dZ);Ilo=r(HOr,"gpt_neo"),HOr.forEach(t),Nlo=r(y4e," \u2014 "),CS=n(y4e,"A",{href:!0});var UOr=s(CS);jlo=r(UOr,"GPTNeoModel"),UOr.forEach(t),Dlo=r(y4e," (GPT Neo model)"),y4e.forEach(t),qlo=i(C),Fp=n(C,"LI",{});var w4e=s(Fp);cZ=n(w4e,"STRONG",{});var JOr=s(cZ);Glo=r(JOr,"gptj"),JOr.forEach(t),Olo=r(w4e," \u2014 "),MS=n(w4e,"A",{href:!0});var YOr=s(MS);Xlo=r(YOr,"GPTJModel"),YOr.forEach(t),Vlo=r(w4e," (GPT-J model)"),w4e.forEach(t),zlo=i(C),Cp=n(C,"LI",{});var A4e=s(Cp);fZ=n(A4e,"STRONG",{});var KOr=s(fZ);Wlo=r(KOr,"hubert"),KOr.forEach(t),Qlo=r(A4e," \u2014 "),ES=n(A4e,"A",{href:!0});var ZOr=s(ES);Hlo=r(ZOr,"HubertModel"),ZOr.forEach(t),Ulo=r(A4e," (Hubert model)"),A4e.forEach(t),Jlo=i(C),Mp=n(C,"LI",{});var L4e=s(Mp);mZ=n(L4e,"STRONG",{});var eXr=s(mZ);Ylo=r(eXr,"ibert"),eXr.forEach(t),Klo=r(L4e," \u2014 "),yS=n(L4e,"A",{href:!0});var oXr=s(yS);Zlo=r(oXr,"IBertModel"),oXr.forEach(t),eio=r(L4e," (I-BERT model)"),L4e.forEach(t),oio=i(C),Ep=n(C,"LI",{});var B4e=s(Ep);gZ=n(B4e,"STRONG",{});var rXr=s(gZ);rio=r(rXr,"imagegpt"),rXr.forEach(t),tio=r(B4e," \u2014 "),wS=n(B4e,"A",{href:!0});var tXr=s(wS);aio=r(tXr,"ImageGPTModel"),tXr.forEach(t),nio=r(B4e," (ImageGPT model)"),B4e.forEach(t),sio=i(C),yp=n(C,"LI",{});var x4e=s(yp);hZ=n(x4e,"STRONG",{});var aXr=s(hZ);lio=r(aXr,"layoutlm"),aXr.forEach(t),iio=r(x4e," \u2014 "),AS=n(x4e,"A",{href:!0});var nXr=s(AS);dio=r(nXr,"LayoutLMModel"),nXr.forEach(t),cio=r(x4e," (LayoutLM model)"),x4e.forEach(t),fio=i(C),wp=n(C,"LI",{});var k4e=s(wp);pZ=n(k4e,"STRONG",{});var sXr=s(pZ);mio=r(sXr,"layoutlmv2"),sXr.forEach(t),gio=r(k4e," \u2014 "),LS=n(k4e,"A",{href:!0});var lXr=s(LS);hio=r(lXr,"LayoutLMv2Model"),lXr.forEach(t),pio=r(k4e," (LayoutLMv2 model)"),k4e.forEach(t),_io=i(C),Ap=n(C,"LI",{});var R4e=s(Ap);_Z=n(R4e,"STRONG",{});var iXr=s(_Z);uio=r(iXr,"led"),iXr.forEach(t),bio=r(R4e," \u2014 "),BS=n(R4e,"A",{href:!0});var dXr=s(BS);vio=r(dXr,"LEDModel"),dXr.forEach(t),Tio=r(R4e," (LED model)"),R4e.forEach(t),Fio=i(C),Lp=n(C,"LI",{});var S4e=s(Lp);uZ=n(S4e,"STRONG",{});var cXr=s(uZ);Cio=r(cXr,"longformer"),cXr.forEach(t),Mio=r(S4e," \u2014 "),xS=n(S4e,"A",{href:!0});var fXr=s(xS);Eio=r(fXr,"LongformerModel"),fXr.forEach(t),yio=r(S4e," (Longformer model)"),S4e.forEach(t),wio=i(C),Bp=n(C,"LI",{});var P4e=s(Bp);bZ=n(P4e,"STRONG",{});var mXr=s(bZ);Aio=r(mXr,"luke"),mXr.forEach(t),Lio=r(P4e," \u2014 "),kS=n(P4e,"A",{href:!0});var gXr=s(kS);Bio=r(gXr,"LukeModel"),gXr.forEach(t),xio=r(P4e," (LUKE model)"),P4e.forEach(t),kio=i(C),xp=n(C,"LI",{});var $4e=s(xp);vZ=n($4e,"STRONG",{});var hXr=s(vZ);Rio=r(hXr,"lxmert"),hXr.forEach(t),Sio=r($4e," \u2014 "),RS=n($4e,"A",{href:!0});var pXr=s(RS);Pio=r(pXr,"LxmertModel"),pXr.forEach(t),$io=r($4e," (LXMERT model)"),$4e.forEach(t),Iio=i(C),kp=n(C,"LI",{});var I4e=s(kp);TZ=n(I4e,"STRONG",{});var _Xr=s(TZ);Nio=r(_Xr,"m2m_100"),_Xr.forEach(t),jio=r(I4e," \u2014 "),SS=n(I4e,"A",{href:!0});var uXr=s(SS);Dio=r(uXr,"M2M100Model"),uXr.forEach(t),qio=r(I4e," (M2M100 model)"),I4e.forEach(t),Gio=i(C),Rp=n(C,"LI",{});var N4e=s(Rp);FZ=n(N4e,"STRONG",{});var bXr=s(FZ);Oio=r(bXr,"marian"),bXr.forEach(t),Xio=r(N4e," \u2014 "),PS=n(N4e,"A",{href:!0});var vXr=s(PS);Vio=r(vXr,"MarianModel"),vXr.forEach(t),zio=r(N4e," (Marian model)"),N4e.forEach(t),Wio=i(C),Sp=n(C,"LI",{});var j4e=s(Sp);CZ=n(j4e,"STRONG",{});var TXr=s(CZ);Qio=r(TXr,"maskformer"),TXr.forEach(t),Hio=r(j4e," \u2014 "),$S=n(j4e,"A",{href:!0});var FXr=s($S);Uio=r(FXr,"MaskFormerModel"),FXr.forEach(t),Jio=r(j4e," (MaskFormer model)"),j4e.forEach(t),Yio=i(C),Pp=n(C,"LI",{});var D4e=s(Pp);MZ=n(D4e,"STRONG",{});var CXr=s(MZ);Kio=r(CXr,"mbart"),CXr.forEach(t),Zio=r(D4e," \u2014 "),IS=n(D4e,"A",{href:!0});var MXr=s(IS);edo=r(MXr,"MBartModel"),MXr.forEach(t),odo=r(D4e," (mBART model)"),D4e.forEach(t),rdo=i(C),$p=n(C,"LI",{});var q4e=s($p);EZ=n(q4e,"STRONG",{});var EXr=s(EZ);tdo=r(EXr,"megatron-bert"),EXr.forEach(t),ado=r(q4e," \u2014 "),NS=n(q4e,"A",{href:!0});var yXr=s(NS);ndo=r(yXr,"MegatronBertModel"),yXr.forEach(t),sdo=r(q4e," (MegatronBert model)"),q4e.forEach(t),ldo=i(C),Ip=n(C,"LI",{});var G4e=s(Ip);yZ=n(G4e,"STRONG",{});var wXr=s(yZ);ido=r(wXr,"mobilebert"),wXr.forEach(t),ddo=r(G4e," \u2014 "),jS=n(G4e,"A",{href:!0});var AXr=s(jS);cdo=r(AXr,"MobileBertModel"),AXr.forEach(t),fdo=r(G4e," (MobileBERT model)"),G4e.forEach(t),mdo=i(C),Np=n(C,"LI",{});var O4e=s(Np);wZ=n(O4e,"STRONG",{});var LXr=s(wZ);gdo=r(LXr,"mpnet"),LXr.forEach(t),hdo=r(O4e," \u2014 "),DS=n(O4e,"A",{href:!0});var BXr=s(DS);pdo=r(BXr,"MPNetModel"),BXr.forEach(t),_do=r(O4e," (MPNet model)"),O4e.forEach(t),udo=i(C),jp=n(C,"LI",{});var X4e=s(jp);AZ=n(X4e,"STRONG",{});var xXr=s(AZ);bdo=r(xXr,"mt5"),xXr.forEach(t),vdo=r(X4e," \u2014 "),qS=n(X4e,"A",{href:!0});var kXr=s(qS);Tdo=r(kXr,"MT5Model"),kXr.forEach(t),Fdo=r(X4e," (mT5 model)"),X4e.forEach(t),Cdo=i(C),Dp=n(C,"LI",{});var V4e=s(Dp);LZ=n(V4e,"STRONG",{});var RXr=s(LZ);Mdo=r(RXr,"nystromformer"),RXr.forEach(t),Edo=r(V4e," \u2014 "),GS=n(V4e,"A",{href:!0});var SXr=s(GS);ydo=r(SXr,"NystromformerModel"),SXr.forEach(t),wdo=r(V4e," (Nystromformer model)"),V4e.forEach(t),Ado=i(C),qp=n(C,"LI",{});var z4e=s(qp);BZ=n(z4e,"STRONG",{});var PXr=s(BZ);Ldo=r(PXr,"openai-gpt"),PXr.forEach(t),Bdo=r(z4e," \u2014 "),OS=n(z4e,"A",{href:!0});var $Xr=s(OS);xdo=r($Xr,"OpenAIGPTModel"),$Xr.forEach(t),kdo=r(z4e," (OpenAI GPT model)"),z4e.forEach(t),Rdo=i(C),Gp=n(C,"LI",{});var W4e=s(Gp);xZ=n(W4e,"STRONG",{});var IXr=s(xZ);Sdo=r(IXr,"pegasus"),IXr.forEach(t),Pdo=r(W4e," \u2014 "),XS=n(W4e,"A",{href:!0});var NXr=s(XS);$do=r(NXr,"PegasusModel"),NXr.forEach(t),Ido=r(W4e," (Pegasus model)"),W4e.forEach(t),Ndo=i(C),Op=n(C,"LI",{});var Q4e=s(Op);kZ=n(Q4e,"STRONG",{});var jXr=s(kZ);jdo=r(jXr,"perceiver"),jXr.forEach(t),Ddo=r(Q4e," \u2014 "),VS=n(Q4e,"A",{href:!0});var DXr=s(VS);qdo=r(DXr,"PerceiverModel"),DXr.forEach(t),Gdo=r(Q4e," (Perceiver model)"),Q4e.forEach(t),Odo=i(C),Xp=n(C,"LI",{});var H4e=s(Xp);RZ=n(H4e,"STRONG",{});var qXr=s(RZ);Xdo=r(qXr,"plbart"),qXr.forEach(t),Vdo=r(H4e," \u2014 "),zS=n(H4e,"A",{href:!0});var GXr=s(zS);zdo=r(GXr,"PLBartModel"),GXr.forEach(t),Wdo=r(H4e," (PLBart model)"),H4e.forEach(t),Qdo=i(C),Vp=n(C,"LI",{});var U4e=s(Vp);SZ=n(U4e,"STRONG",{});var OXr=s(SZ);Hdo=r(OXr,"poolformer"),OXr.forEach(t),Udo=r(U4e," \u2014 "),WS=n(U4e,"A",{href:!0});var XXr=s(WS);Jdo=r(XXr,"PoolFormerModel"),XXr.forEach(t),Ydo=r(U4e," (PoolFormer model)"),U4e.forEach(t),Kdo=i(C),zp=n(C,"LI",{});var J4e=s(zp);PZ=n(J4e,"STRONG",{});var VXr=s(PZ);Zdo=r(VXr,"prophetnet"),VXr.forEach(t),eco=r(J4e," \u2014 "),QS=n(J4e,"A",{href:!0});var zXr=s(QS);oco=r(zXr,"ProphetNetModel"),zXr.forEach(t),rco=r(J4e," (ProphetNet model)"),J4e.forEach(t),tco=i(C),Wp=n(C,"LI",{});var Y4e=s(Wp);$Z=n(Y4e,"STRONG",{});var WXr=s($Z);aco=r(WXr,"qdqbert"),WXr.forEach(t),nco=r(Y4e," \u2014 "),HS=n(Y4e,"A",{href:!0});var QXr=s(HS);sco=r(QXr,"QDQBertModel"),QXr.forEach(t),lco=r(Y4e," (QDQBert model)"),Y4e.forEach(t),ico=i(C),Qp=n(C,"LI",{});var K4e=s(Qp);IZ=n(K4e,"STRONG",{});var HXr=s(IZ);dco=r(HXr,"reformer"),HXr.forEach(t),cco=r(K4e," \u2014 "),US=n(K4e,"A",{href:!0});var UXr=s(US);fco=r(UXr,"ReformerModel"),UXr.forEach(t),mco=r(K4e," (Reformer model)"),K4e.forEach(t),gco=i(C),Hp=n(C,"LI",{});var Z4e=s(Hp);NZ=n(Z4e,"STRONG",{});var JXr=s(NZ);hco=r(JXr,"rembert"),JXr.forEach(t),pco=r(Z4e," \u2014 "),JS=n(Z4e,"A",{href:!0});var YXr=s(JS);_co=r(YXr,"RemBertModel"),YXr.forEach(t),uco=r(Z4e," (RemBERT model)"),Z4e.forEach(t),bco=i(C),Up=n(C,"LI",{});var eEe=s(Up);jZ=n(eEe,"STRONG",{});var KXr=s(jZ);vco=r(KXr,"resnet"),KXr.forEach(t),Tco=r(eEe," \u2014 "),YS=n(eEe,"A",{href:!0});var ZXr=s(YS);Fco=r(ZXr,"ResNetModel"),ZXr.forEach(t),Cco=r(eEe," (ResNet model)"),eEe.forEach(t),Mco=i(C),Jp=n(C,"LI",{});var oEe=s(Jp);DZ=n(oEe,"STRONG",{});var eVr=s(DZ);Eco=r(eVr,"retribert"),eVr.forEach(t),yco=r(oEe," \u2014 "),KS=n(oEe,"A",{href:!0});var oVr=s(KS);wco=r(oVr,"RetriBertModel"),oVr.forEach(t),Aco=r(oEe," (RetriBERT model)"),oEe.forEach(t),Lco=i(C),Yp=n(C,"LI",{});var rEe=s(Yp);qZ=n(rEe,"STRONG",{});var rVr=s(qZ);Bco=r(rVr,"roberta"),rVr.forEach(t),xco=r(rEe," \u2014 "),ZS=n(rEe,"A",{href:!0});var tVr=s(ZS);kco=r(tVr,"RobertaModel"),tVr.forEach(t),Rco=r(rEe," (RoBERTa model)"),rEe.forEach(t),Sco=i(C),Kp=n(C,"LI",{});var tEe=s(Kp);GZ=n(tEe,"STRONG",{});var aVr=s(GZ);Pco=r(aVr,"roformer"),aVr.forEach(t),$co=r(tEe," \u2014 "),eP=n(tEe,"A",{href:!0});var nVr=s(eP);Ico=r(nVr,"RoFormerModel"),nVr.forEach(t),Nco=r(tEe," (RoFormer model)"),tEe.forEach(t),jco=i(C),Zp=n(C,"LI",{});var aEe=s(Zp);OZ=n(aEe,"STRONG",{});var sVr=s(OZ);Dco=r(sVr,"segformer"),sVr.forEach(t),qco=r(aEe," \u2014 "),oP=n(aEe,"A",{href:!0});var lVr=s(oP);Gco=r(lVr,"SegformerModel"),lVr.forEach(t),Oco=r(aEe," (SegFormer model)"),aEe.forEach(t),Xco=i(C),e_=n(C,"LI",{});var nEe=s(e_);XZ=n(nEe,"STRONG",{});var iVr=s(XZ);Vco=r(iVr,"sew"),iVr.forEach(t),zco=r(nEe," \u2014 "),rP=n(nEe,"A",{href:!0});var dVr=s(rP);Wco=r(dVr,"SEWModel"),dVr.forEach(t),Qco=r(nEe," (SEW model)"),nEe.forEach(t),Hco=i(C),o_=n(C,"LI",{});var sEe=s(o_);VZ=n(sEe,"STRONG",{});var cVr=s(VZ);Uco=r(cVr,"sew-d"),cVr.forEach(t),Jco=r(sEe," \u2014 "),tP=n(sEe,"A",{href:!0});var fVr=s(tP);Yco=r(fVr,"SEWDModel"),fVr.forEach(t),Kco=r(sEe," (SEW-D model)"),sEe.forEach(t),Zco=i(C),r_=n(C,"LI",{});var lEe=s(r_);zZ=n(lEe,"STRONG",{});var mVr=s(zZ);efo=r(mVr,"speech_to_text"),mVr.forEach(t),ofo=r(lEe," \u2014 "),aP=n(lEe,"A",{href:!0});var gVr=s(aP);rfo=r(gVr,"Speech2TextModel"),gVr.forEach(t),tfo=r(lEe," (Speech2Text model)"),lEe.forEach(t),afo=i(C),t_=n(C,"LI",{});var iEe=s(t_);WZ=n(iEe,"STRONG",{});var hVr=s(WZ);nfo=r(hVr,"splinter"),hVr.forEach(t),sfo=r(iEe," \u2014 "),nP=n(iEe,"A",{href:!0});var pVr=s(nP);lfo=r(pVr,"SplinterModel"),pVr.forEach(t),ifo=r(iEe," (Splinter model)"),iEe.forEach(t),dfo=i(C),a_=n(C,"LI",{});var dEe=s(a_);QZ=n(dEe,"STRONG",{});var _Vr=s(QZ);cfo=r(_Vr,"squeezebert"),_Vr.forEach(t),ffo=r(dEe," \u2014 "),sP=n(dEe,"A",{href:!0});var uVr=s(sP);mfo=r(uVr,"SqueezeBertModel"),uVr.forEach(t),gfo=r(dEe," (SqueezeBERT model)"),dEe.forEach(t),hfo=i(C),n_=n(C,"LI",{});var cEe=s(n_);HZ=n(cEe,"STRONG",{});var bVr=s(HZ);pfo=r(bVr,"swin"),bVr.forEach(t),_fo=r(cEe," \u2014 "),lP=n(cEe,"A",{href:!0});var vVr=s(lP);ufo=r(vVr,"SwinModel"),vVr.forEach(t),bfo=r(cEe," (Swin model)"),cEe.forEach(t),vfo=i(C),s_=n(C,"LI",{});var fEe=s(s_);UZ=n(fEe,"STRONG",{});var TVr=s(UZ);Tfo=r(TVr,"t5"),TVr.forEach(t),Ffo=r(fEe," \u2014 "),iP=n(fEe,"A",{href:!0});var FVr=s(iP);Cfo=r(FVr,"T5Model"),FVr.forEach(t),Mfo=r(fEe," (T5 model)"),fEe.forEach(t),Efo=i(C),l_=n(C,"LI",{});var mEe=s(l_);JZ=n(mEe,"STRONG",{});var CVr=s(JZ);yfo=r(CVr,"tapas"),CVr.forEach(t),wfo=r(mEe," \u2014 "),dP=n(mEe,"A",{href:!0});var MVr=s(dP);Afo=r(MVr,"TapasModel"),MVr.forEach(t),Lfo=r(mEe," (TAPAS model)"),mEe.forEach(t),Bfo=i(C),i_=n(C,"LI",{});var gEe=s(i_);YZ=n(gEe,"STRONG",{});var EVr=s(YZ);xfo=r(EVr,"transfo-xl"),EVr.forEach(t),kfo=r(gEe," \u2014 "),cP=n(gEe,"A",{href:!0});var yVr=s(cP);Rfo=r(yVr,"TransfoXLModel"),yVr.forEach(t),Sfo=r(gEe," (Transformer-XL model)"),gEe.forEach(t),Pfo=i(C),d_=n(C,"LI",{});var hEe=s(d_);KZ=n(hEe,"STRONG",{});var wVr=s(KZ);$fo=r(wVr,"unispeech"),wVr.forEach(t),Ifo=r(hEe," \u2014 "),fP=n(hEe,"A",{href:!0});var AVr=s(fP);Nfo=r(AVr,"UniSpeechModel"),AVr.forEach(t),jfo=r(hEe," (UniSpeech model)"),hEe.forEach(t),Dfo=i(C),c_=n(C,"LI",{});var pEe=s(c_);ZZ=n(pEe,"STRONG",{});var LVr=s(ZZ);qfo=r(LVr,"unispeech-sat"),LVr.forEach(t),Gfo=r(pEe," \u2014 "),mP=n(pEe,"A",{href:!0});var BVr=s(mP);Ofo=r(BVr,"UniSpeechSatModel"),BVr.forEach(t),Xfo=r(pEe," (UniSpeechSat model)"),pEe.forEach(t),Vfo=i(C),f_=n(C,"LI",{});var _Ee=s(f_);eee=n(_Ee,"STRONG",{});var xVr=s(eee);zfo=r(xVr,"van"),xVr.forEach(t),Wfo=r(_Ee," \u2014 "),gP=n(_Ee,"A",{href:!0});var kVr=s(gP);Qfo=r(kVr,"VanModel"),kVr.forEach(t),Hfo=r(_Ee," (VAN model)"),_Ee.forEach(t),Ufo=i(C),m_=n(C,"LI",{});var uEe=s(m_);oee=n(uEe,"STRONG",{});var RVr=s(oee);Jfo=r(RVr,"vilt"),RVr.forEach(t),Yfo=r(uEe," \u2014 "),hP=n(uEe,"A",{href:!0});var SVr=s(hP);Kfo=r(SVr,"ViltModel"),SVr.forEach(t),Zfo=r(uEe," (ViLT model)"),uEe.forEach(t),emo=i(C),g_=n(C,"LI",{});var bEe=s(g_);ree=n(bEe,"STRONG",{});var PVr=s(ree);omo=r(PVr,"vision-text-dual-encoder"),PVr.forEach(t),rmo=r(bEe," \u2014 "),pP=n(bEe,"A",{href:!0});var $Vr=s(pP);tmo=r($Vr,"VisionTextDualEncoderModel"),$Vr.forEach(t),amo=r(bEe," (VisionTextDualEncoder model)"),bEe.forEach(t),nmo=i(C),h_=n(C,"LI",{});var vEe=s(h_);tee=n(vEe,"STRONG",{});var IVr=s(tee);smo=r(IVr,"visual_bert"),IVr.forEach(t),lmo=r(vEe," \u2014 "),_P=n(vEe,"A",{href:!0});var NVr=s(_P);imo=r(NVr,"VisualBertModel"),NVr.forEach(t),dmo=r(vEe," (VisualBert model)"),vEe.forEach(t),cmo=i(C),p_=n(C,"LI",{});var TEe=s(p_);aee=n(TEe,"STRONG",{});var jVr=s(aee);fmo=r(jVr,"vit"),jVr.forEach(t),mmo=r(TEe," \u2014 "),uP=n(TEe,"A",{href:!0});var DVr=s(uP);gmo=r(DVr,"ViTModel"),DVr.forEach(t),hmo=r(TEe," (ViT model)"),TEe.forEach(t),pmo=i(C),__=n(C,"LI",{});var FEe=s(__);nee=n(FEe,"STRONG",{});var qVr=s(nee);_mo=r(qVr,"vit_mae"),qVr.forEach(t),umo=r(FEe," \u2014 "),bP=n(FEe,"A",{href:!0});var GVr=s(bP);bmo=r(GVr,"ViTMAEModel"),GVr.forEach(t),vmo=r(FEe," (ViTMAE model)"),FEe.forEach(t),Tmo=i(C),u_=n(C,"LI",{});var CEe=s(u_);see=n(CEe,"STRONG",{});var OVr=s(see);Fmo=r(OVr,"wav2vec2"),OVr.forEach(t),Cmo=r(CEe," \u2014 "),vP=n(CEe,"A",{href:!0});var XVr=s(vP);Mmo=r(XVr,"Wav2Vec2Model"),XVr.forEach(t),Emo=r(CEe," (Wav2Vec2 model)"),CEe.forEach(t),ymo=i(C),b_=n(C,"LI",{});var MEe=s(b_);lee=n(MEe,"STRONG",{});var VVr=s(lee);wmo=r(VVr,"wavlm"),VVr.forEach(t),Amo=r(MEe," \u2014 "),TP=n(MEe,"A",{href:!0});var zVr=s(TP);Lmo=r(zVr,"WavLMModel"),zVr.forEach(t),Bmo=r(MEe," (WavLM model)"),MEe.forEach(t),xmo=i(C),v_=n(C,"LI",{});var EEe=s(v_);iee=n(EEe,"STRONG",{});var WVr=s(iee);kmo=r(WVr,"xglm"),WVr.forEach(t),Rmo=r(EEe," \u2014 "),FP=n(EEe,"A",{href:!0});var QVr=s(FP);Smo=r(QVr,"XGLMModel"),QVr.forEach(t),Pmo=r(EEe," (XGLM model)"),EEe.forEach(t),$mo=i(C),T_=n(C,"LI",{});var yEe=s(T_);dee=n(yEe,"STRONG",{});var HVr=s(dee);Imo=r(HVr,"xlm"),HVr.forEach(t),Nmo=r(yEe," \u2014 "),CP=n(yEe,"A",{href:!0});var UVr=s(CP);jmo=r(UVr,"XLMModel"),UVr.forEach(t),Dmo=r(yEe," (XLM model)"),yEe.forEach(t),qmo=i(C),F_=n(C,"LI",{});var wEe=s(F_);cee=n(wEe,"STRONG",{});var JVr=s(cee);Gmo=r(JVr,"xlm-prophetnet"),JVr.forEach(t),Omo=r(wEe," \u2014 "),MP=n(wEe,"A",{href:!0});var YVr=s(MP);Xmo=r(YVr,"XLMProphetNetModel"),YVr.forEach(t),Vmo=r(wEe," (XLMProphetNet model)"),wEe.forEach(t),zmo=i(C),C_=n(C,"LI",{});var AEe=s(C_);fee=n(AEe,"STRONG",{});var KVr=s(fee);Wmo=r(KVr,"xlm-roberta"),KVr.forEach(t),Qmo=r(AEe," \u2014 "),EP=n(AEe,"A",{href:!0});var ZVr=s(EP);Hmo=r(ZVr,"XLMRobertaModel"),ZVr.forEach(t),Umo=r(AEe," (XLM-RoBERTa model)"),AEe.forEach(t),Jmo=i(C),M_=n(C,"LI",{});var LEe=s(M_);mee=n(LEe,"STRONG",{});var ezr=s(mee);Ymo=r(ezr,"xlm-roberta-xl"),ezr.forEach(t),Kmo=r(LEe," \u2014 "),yP=n(LEe,"A",{href:!0});var ozr=s(yP);Zmo=r(ozr,"XLMRobertaXLModel"),ozr.forEach(t),ego=r(LEe," (XLM-RoBERTa-XL model)"),LEe.forEach(t),ogo=i(C),E_=n(C,"LI",{});var BEe=s(E_);gee=n(BEe,"STRONG",{});var rzr=s(gee);rgo=r(rzr,"xlnet"),rzr.forEach(t),tgo=r(BEe," \u2014 "),wP=n(BEe,"A",{href:!0});var tzr=s(wP);ago=r(tzr,"XLNetModel"),tzr.forEach(t),ngo=r(BEe," (XLNet model)"),BEe.forEach(t),sgo=i(C),y_=n(C,"LI",{});var xEe=s(y_);hee=n(xEe,"STRONG",{});var azr=s(hee);lgo=r(azr,"yoso"),azr.forEach(t),igo=r(xEe," \u2014 "),AP=n(xEe,"A",{href:!0});var nzr=s(AP);dgo=r(nzr,"YosoModel"),nzr.forEach(t),cgo=r(xEe," (YOSO model)"),xEe.forEach(t),C.forEach(t),fgo=i(qt),w_=n(qt,"P",{});var kEe=s(w_);mgo=r(kEe,"The model is set in evaluation mode by default using "),pee=n(kEe,"CODE",{});var szr=s(pee);ggo=r(szr,"model.eval()"),szr.forEach(t),hgo=r(kEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ee=n(kEe,"CODE",{});var lzr=s(_ee);pgo=r(lzr,"model.train()"),lzr.forEach(t),kEe.forEach(t),_go=i(qt),uee=n(qt,"P",{});var izr=s(uee);ugo=r(izr,"Examples:"),izr.forEach(t),bgo=i(qt),m(Y3.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Dke=i(c),Zi=n(c,"H2",{class:!0});var HSe=s(Zi);A_=n(HSe,"A",{id:!0,class:!0,href:!0});var dzr=s(A_);bee=n(dzr,"SPAN",{});var czr=s(bee);m(K3.$$.fragment,czr),czr.forEach(t),dzr.forEach(t),vgo=i(HSe),vee=n(HSe,"SPAN",{});var fzr=s(vee);Tgo=r(fzr,"AutoModelForPreTraining"),fzr.forEach(t),HSe.forEach(t),qke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(Z3.$$.fragment,Hs),Fgo=i(Hs),ed=n(Hs,"P",{});var dW=s(ed);Cgo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tee=n(dW,"CODE",{});var mzr=s(Tee);Mgo=r(mzr,"from_pretrained()"),mzr.forEach(t),Ego=r(dW,"class method or the "),Fee=n(dW,"CODE",{});var gzr=s(Fee);ygo=r(gzr,"from_config()"),gzr.forEach(t),wgo=r(dW,`class
method.`),dW.forEach(t),Ago=i(Hs),ey=n(Hs,"P",{});var USe=s(ey);Lgo=r(USe,"This class cannot be instantiated directly using "),Cee=n(USe,"CODE",{});var hzr=s(Cee);Bgo=r(hzr,"__init__()"),hzr.forEach(t),xgo=r(USe," (throws an error)."),USe.forEach(t),kgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(oy.$$.fragment,Us),Rgo=i(Us),Mee=n(Us,"P",{});var pzr=s(Mee);Sgo=r(pzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pzr.forEach(t),Pgo=i(Us),od=n(Us,"P",{});var cW=s(od);$go=r(cW,`Note:
Loading a model from its configuration file does `),Eee=n(cW,"STRONG",{});var _zr=s(Eee);Igo=r(_zr,"not"),_zr.forEach(t),Ngo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(cW,"CODE",{});var uzr=s(yee);jgo=r(uzr,"from_pretrained()"),uzr.forEach(t),Dgo=r(cW,"to load the model weights."),cW.forEach(t),qgo=i(Us),wee=n(Us,"P",{});var bzr=s(wee);Ggo=r(bzr,"Examples:"),bzr.forEach(t),Ogo=i(Us),m(ry.$$.fragment,Us),Us.forEach(t),Xgo=i(Hs),je=n(Hs,"DIV",{class:!0});var Gt=s(je);m(ty.$$.fragment,Gt),Vgo=i(Gt),Aee=n(Gt,"P",{});var vzr=s(Aee);zgo=r(vzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vzr.forEach(t),Wgo=i(Gt),za=n(Gt,"P",{});var _E=s(za);Qgo=r(_E,"The model class to instantiate is selected based on the "),Lee=n(_E,"CODE",{});var Tzr=s(Lee);Hgo=r(Tzr,"model_type"),Tzr.forEach(t),Ugo=r(_E,` property of the config object (either
passed as an argument or loaded from `),Bee=n(_E,"CODE",{});var Fzr=s(Bee);Jgo=r(Fzr,"pretrained_model_name_or_path"),Fzr.forEach(t),Ygo=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xee=n(_E,"CODE",{});var Czr=s(xee);Kgo=r(Czr,"pretrained_model_name_or_path"),Czr.forEach(t),Zgo=r(_E,":"),_E.forEach(t),eho=i(Gt),k=n(Gt,"UL",{});var S=s(k);L_=n(S,"LI",{});var REe=s(L_);kee=n(REe,"STRONG",{});var Mzr=s(kee);oho=r(Mzr,"albert"),Mzr.forEach(t),rho=r(REe," \u2014 "),LP=n(REe,"A",{href:!0});var Ezr=s(LP);tho=r(Ezr,"AlbertForPreTraining"),Ezr.forEach(t),aho=r(REe," (ALBERT model)"),REe.forEach(t),nho=i(S),B_=n(S,"LI",{});var SEe=s(B_);Ree=n(SEe,"STRONG",{});var yzr=s(Ree);sho=r(yzr,"bart"),yzr.forEach(t),lho=r(SEe," \u2014 "),BP=n(SEe,"A",{href:!0});var wzr=s(BP);iho=r(wzr,"BartForConditionalGeneration"),wzr.forEach(t),dho=r(SEe," (BART model)"),SEe.forEach(t),cho=i(S),x_=n(S,"LI",{});var PEe=s(x_);See=n(PEe,"STRONG",{});var Azr=s(See);fho=r(Azr,"bert"),Azr.forEach(t),mho=r(PEe," \u2014 "),xP=n(PEe,"A",{href:!0});var Lzr=s(xP);gho=r(Lzr,"BertForPreTraining"),Lzr.forEach(t),hho=r(PEe," (BERT model)"),PEe.forEach(t),pho=i(S),k_=n(S,"LI",{});var $Ee=s(k_);Pee=n($Ee,"STRONG",{});var Bzr=s(Pee);_ho=r(Bzr,"big_bird"),Bzr.forEach(t),uho=r($Ee," \u2014 "),kP=n($Ee,"A",{href:!0});var xzr=s(kP);bho=r(xzr,"BigBirdForPreTraining"),xzr.forEach(t),vho=r($Ee," (BigBird model)"),$Ee.forEach(t),Tho=i(S),R_=n(S,"LI",{});var IEe=s(R_);$ee=n(IEe,"STRONG",{});var kzr=s($ee);Fho=r(kzr,"camembert"),kzr.forEach(t),Cho=r(IEe," \u2014 "),RP=n(IEe,"A",{href:!0});var Rzr=s(RP);Mho=r(Rzr,"CamembertForMaskedLM"),Rzr.forEach(t),Eho=r(IEe," (CamemBERT model)"),IEe.forEach(t),yho=i(S),S_=n(S,"LI",{});var NEe=s(S_);Iee=n(NEe,"STRONG",{});var Szr=s(Iee);who=r(Szr,"ctrl"),Szr.forEach(t),Aho=r(NEe," \u2014 "),SP=n(NEe,"A",{href:!0});var Pzr=s(SP);Lho=r(Pzr,"CTRLLMHeadModel"),Pzr.forEach(t),Bho=r(NEe," (CTRL model)"),NEe.forEach(t),xho=i(S),P_=n(S,"LI",{});var jEe=s(P_);Nee=n(jEe,"STRONG",{});var $zr=s(Nee);kho=r($zr,"data2vec-text"),$zr.forEach(t),Rho=r(jEe," \u2014 "),PP=n(jEe,"A",{href:!0});var Izr=s(PP);Sho=r(Izr,"Data2VecTextForMaskedLM"),Izr.forEach(t),Pho=r(jEe," (Data2VecText model)"),jEe.forEach(t),$ho=i(S),$_=n(S,"LI",{});var DEe=s($_);jee=n(DEe,"STRONG",{});var Nzr=s(jee);Iho=r(Nzr,"deberta"),Nzr.forEach(t),Nho=r(DEe," \u2014 "),$P=n(DEe,"A",{href:!0});var jzr=s($P);jho=r(jzr,"DebertaForMaskedLM"),jzr.forEach(t),Dho=r(DEe," (DeBERTa model)"),DEe.forEach(t),qho=i(S),I_=n(S,"LI",{});var qEe=s(I_);Dee=n(qEe,"STRONG",{});var Dzr=s(Dee);Gho=r(Dzr,"deberta-v2"),Dzr.forEach(t),Oho=r(qEe," \u2014 "),IP=n(qEe,"A",{href:!0});var qzr=s(IP);Xho=r(qzr,"DebertaV2ForMaskedLM"),qzr.forEach(t),Vho=r(qEe," (DeBERTa-v2 model)"),qEe.forEach(t),zho=i(S),N_=n(S,"LI",{});var GEe=s(N_);qee=n(GEe,"STRONG",{});var Gzr=s(qee);Who=r(Gzr,"distilbert"),Gzr.forEach(t),Qho=r(GEe," \u2014 "),NP=n(GEe,"A",{href:!0});var Ozr=s(NP);Hho=r(Ozr,"DistilBertForMaskedLM"),Ozr.forEach(t),Uho=r(GEe," (DistilBERT model)"),GEe.forEach(t),Jho=i(S),j_=n(S,"LI",{});var OEe=s(j_);Gee=n(OEe,"STRONG",{});var Xzr=s(Gee);Yho=r(Xzr,"electra"),Xzr.forEach(t),Kho=r(OEe," \u2014 "),jP=n(OEe,"A",{href:!0});var Vzr=s(jP);Zho=r(Vzr,"ElectraForPreTraining"),Vzr.forEach(t),epo=r(OEe," (ELECTRA model)"),OEe.forEach(t),opo=i(S),D_=n(S,"LI",{});var XEe=s(D_);Oee=n(XEe,"STRONG",{});var zzr=s(Oee);rpo=r(zzr,"flaubert"),zzr.forEach(t),tpo=r(XEe," \u2014 "),DP=n(XEe,"A",{href:!0});var Wzr=s(DP);apo=r(Wzr,"FlaubertWithLMHeadModel"),Wzr.forEach(t),npo=r(XEe," (FlauBERT model)"),XEe.forEach(t),spo=i(S),q_=n(S,"LI",{});var VEe=s(q_);Xee=n(VEe,"STRONG",{});var Qzr=s(Xee);lpo=r(Qzr,"fnet"),Qzr.forEach(t),ipo=r(VEe," \u2014 "),qP=n(VEe,"A",{href:!0});var Hzr=s(qP);dpo=r(Hzr,"FNetForPreTraining"),Hzr.forEach(t),cpo=r(VEe," (FNet model)"),VEe.forEach(t),fpo=i(S),G_=n(S,"LI",{});var zEe=s(G_);Vee=n(zEe,"STRONG",{});var Uzr=s(Vee);mpo=r(Uzr,"fsmt"),Uzr.forEach(t),gpo=r(zEe," \u2014 "),GP=n(zEe,"A",{href:!0});var Jzr=s(GP);hpo=r(Jzr,"FSMTForConditionalGeneration"),Jzr.forEach(t),ppo=r(zEe," (FairSeq Machine-Translation model)"),zEe.forEach(t),_po=i(S),O_=n(S,"LI",{});var WEe=s(O_);zee=n(WEe,"STRONG",{});var Yzr=s(zee);upo=r(Yzr,"funnel"),Yzr.forEach(t),bpo=r(WEe," \u2014 "),OP=n(WEe,"A",{href:!0});var Kzr=s(OP);vpo=r(Kzr,"FunnelForPreTraining"),Kzr.forEach(t),Tpo=r(WEe," (Funnel Transformer model)"),WEe.forEach(t),Fpo=i(S),X_=n(S,"LI",{});var QEe=s(X_);Wee=n(QEe,"STRONG",{});var Zzr=s(Wee);Cpo=r(Zzr,"gpt2"),Zzr.forEach(t),Mpo=r(QEe," \u2014 "),XP=n(QEe,"A",{href:!0});var eWr=s(XP);Epo=r(eWr,"GPT2LMHeadModel"),eWr.forEach(t),ypo=r(QEe," (OpenAI GPT-2 model)"),QEe.forEach(t),wpo=i(S),V_=n(S,"LI",{});var HEe=s(V_);Qee=n(HEe,"STRONG",{});var oWr=s(Qee);Apo=r(oWr,"ibert"),oWr.forEach(t),Lpo=r(HEe," \u2014 "),VP=n(HEe,"A",{href:!0});var rWr=s(VP);Bpo=r(rWr,"IBertForMaskedLM"),rWr.forEach(t),xpo=r(HEe," (I-BERT model)"),HEe.forEach(t),kpo=i(S),z_=n(S,"LI",{});var UEe=s(z_);Hee=n(UEe,"STRONG",{});var tWr=s(Hee);Rpo=r(tWr,"layoutlm"),tWr.forEach(t),Spo=r(UEe," \u2014 "),zP=n(UEe,"A",{href:!0});var aWr=s(zP);Ppo=r(aWr,"LayoutLMForMaskedLM"),aWr.forEach(t),$po=r(UEe," (LayoutLM model)"),UEe.forEach(t),Ipo=i(S),W_=n(S,"LI",{});var JEe=s(W_);Uee=n(JEe,"STRONG",{});var nWr=s(Uee);Npo=r(nWr,"longformer"),nWr.forEach(t),jpo=r(JEe," \u2014 "),WP=n(JEe,"A",{href:!0});var sWr=s(WP);Dpo=r(sWr,"LongformerForMaskedLM"),sWr.forEach(t),qpo=r(JEe," (Longformer model)"),JEe.forEach(t),Gpo=i(S),Q_=n(S,"LI",{});var YEe=s(Q_);Jee=n(YEe,"STRONG",{});var lWr=s(Jee);Opo=r(lWr,"lxmert"),lWr.forEach(t),Xpo=r(YEe," \u2014 "),QP=n(YEe,"A",{href:!0});var iWr=s(QP);Vpo=r(iWr,"LxmertForPreTraining"),iWr.forEach(t),zpo=r(YEe," (LXMERT model)"),YEe.forEach(t),Wpo=i(S),H_=n(S,"LI",{});var KEe=s(H_);Yee=n(KEe,"STRONG",{});var dWr=s(Yee);Qpo=r(dWr,"megatron-bert"),dWr.forEach(t),Hpo=r(KEe," \u2014 "),HP=n(KEe,"A",{href:!0});var cWr=s(HP);Upo=r(cWr,"MegatronBertForPreTraining"),cWr.forEach(t),Jpo=r(KEe," (MegatronBert model)"),KEe.forEach(t),Ypo=i(S),U_=n(S,"LI",{});var ZEe=s(U_);Kee=n(ZEe,"STRONG",{});var fWr=s(Kee);Kpo=r(fWr,"mobilebert"),fWr.forEach(t),Zpo=r(ZEe," \u2014 "),UP=n(ZEe,"A",{href:!0});var mWr=s(UP);e_o=r(mWr,"MobileBertForPreTraining"),mWr.forEach(t),o_o=r(ZEe," (MobileBERT model)"),ZEe.forEach(t),r_o=i(S),J_=n(S,"LI",{});var e3e=s(J_);Zee=n(e3e,"STRONG",{});var gWr=s(Zee);t_o=r(gWr,"mpnet"),gWr.forEach(t),a_o=r(e3e," \u2014 "),JP=n(e3e,"A",{href:!0});var hWr=s(JP);n_o=r(hWr,"MPNetForMaskedLM"),hWr.forEach(t),s_o=r(e3e," (MPNet model)"),e3e.forEach(t),l_o=i(S),Y_=n(S,"LI",{});var o3e=s(Y_);eoe=n(o3e,"STRONG",{});var pWr=s(eoe);i_o=r(pWr,"openai-gpt"),pWr.forEach(t),d_o=r(o3e," \u2014 "),YP=n(o3e,"A",{href:!0});var _Wr=s(YP);c_o=r(_Wr,"OpenAIGPTLMHeadModel"),_Wr.forEach(t),f_o=r(o3e," (OpenAI GPT model)"),o3e.forEach(t),m_o=i(S),K_=n(S,"LI",{});var r3e=s(K_);ooe=n(r3e,"STRONG",{});var uWr=s(ooe);g_o=r(uWr,"retribert"),uWr.forEach(t),h_o=r(r3e," \u2014 "),KP=n(r3e,"A",{href:!0});var bWr=s(KP);p_o=r(bWr,"RetriBertModel"),bWr.forEach(t),__o=r(r3e," (RetriBERT model)"),r3e.forEach(t),u_o=i(S),Z_=n(S,"LI",{});var t3e=s(Z_);roe=n(t3e,"STRONG",{});var vWr=s(roe);b_o=r(vWr,"roberta"),vWr.forEach(t),v_o=r(t3e," \u2014 "),ZP=n(t3e,"A",{href:!0});var TWr=s(ZP);T_o=r(TWr,"RobertaForMaskedLM"),TWr.forEach(t),F_o=r(t3e," (RoBERTa model)"),t3e.forEach(t),C_o=i(S),eu=n(S,"LI",{});var a3e=s(eu);toe=n(a3e,"STRONG",{});var FWr=s(toe);M_o=r(FWr,"squeezebert"),FWr.forEach(t),E_o=r(a3e," \u2014 "),e$=n(a3e,"A",{href:!0});var CWr=s(e$);y_o=r(CWr,"SqueezeBertForMaskedLM"),CWr.forEach(t),w_o=r(a3e," (SqueezeBERT model)"),a3e.forEach(t),A_o=i(S),ou=n(S,"LI",{});var n3e=s(ou);aoe=n(n3e,"STRONG",{});var MWr=s(aoe);L_o=r(MWr,"t5"),MWr.forEach(t),B_o=r(n3e," \u2014 "),o$=n(n3e,"A",{href:!0});var EWr=s(o$);x_o=r(EWr,"T5ForConditionalGeneration"),EWr.forEach(t),k_o=r(n3e," (T5 model)"),n3e.forEach(t),R_o=i(S),ru=n(S,"LI",{});var s3e=s(ru);noe=n(s3e,"STRONG",{});var yWr=s(noe);S_o=r(yWr,"tapas"),yWr.forEach(t),P_o=r(s3e," \u2014 "),r$=n(s3e,"A",{href:!0});var wWr=s(r$);$_o=r(wWr,"TapasForMaskedLM"),wWr.forEach(t),I_o=r(s3e," (TAPAS model)"),s3e.forEach(t),N_o=i(S),tu=n(S,"LI",{});var l3e=s(tu);soe=n(l3e,"STRONG",{});var AWr=s(soe);j_o=r(AWr,"transfo-xl"),AWr.forEach(t),D_o=r(l3e," \u2014 "),t$=n(l3e,"A",{href:!0});var LWr=s(t$);q_o=r(LWr,"TransfoXLLMHeadModel"),LWr.forEach(t),G_o=r(l3e," (Transformer-XL model)"),l3e.forEach(t),O_o=i(S),au=n(S,"LI",{});var i3e=s(au);loe=n(i3e,"STRONG",{});var BWr=s(loe);X_o=r(BWr,"unispeech"),BWr.forEach(t),V_o=r(i3e," \u2014 "),a$=n(i3e,"A",{href:!0});var xWr=s(a$);z_o=r(xWr,"UniSpeechForPreTraining"),xWr.forEach(t),W_o=r(i3e," (UniSpeech model)"),i3e.forEach(t),Q_o=i(S),nu=n(S,"LI",{});var d3e=s(nu);ioe=n(d3e,"STRONG",{});var kWr=s(ioe);H_o=r(kWr,"unispeech-sat"),kWr.forEach(t),U_o=r(d3e," \u2014 "),n$=n(d3e,"A",{href:!0});var RWr=s(n$);J_o=r(RWr,"UniSpeechSatForPreTraining"),RWr.forEach(t),Y_o=r(d3e," (UniSpeechSat model)"),d3e.forEach(t),K_o=i(S),su=n(S,"LI",{});var c3e=s(su);doe=n(c3e,"STRONG",{});var SWr=s(doe);Z_o=r(SWr,"visual_bert"),SWr.forEach(t),euo=r(c3e," \u2014 "),s$=n(c3e,"A",{href:!0});var PWr=s(s$);ouo=r(PWr,"VisualBertForPreTraining"),PWr.forEach(t),ruo=r(c3e," (VisualBert model)"),c3e.forEach(t),tuo=i(S),lu=n(S,"LI",{});var f3e=s(lu);coe=n(f3e,"STRONG",{});var $Wr=s(coe);auo=r($Wr,"vit_mae"),$Wr.forEach(t),nuo=r(f3e," \u2014 "),l$=n(f3e,"A",{href:!0});var IWr=s(l$);suo=r(IWr,"ViTMAEForPreTraining"),IWr.forEach(t),luo=r(f3e," (ViTMAE model)"),f3e.forEach(t),iuo=i(S),iu=n(S,"LI",{});var m3e=s(iu);foe=n(m3e,"STRONG",{});var NWr=s(foe);duo=r(NWr,"wav2vec2"),NWr.forEach(t),cuo=r(m3e," \u2014 "),i$=n(m3e,"A",{href:!0});var jWr=s(i$);fuo=r(jWr,"Wav2Vec2ForPreTraining"),jWr.forEach(t),muo=r(m3e," (Wav2Vec2 model)"),m3e.forEach(t),guo=i(S),du=n(S,"LI",{});var g3e=s(du);moe=n(g3e,"STRONG",{});var DWr=s(moe);huo=r(DWr,"xlm"),DWr.forEach(t),puo=r(g3e," \u2014 "),d$=n(g3e,"A",{href:!0});var qWr=s(d$);_uo=r(qWr,"XLMWithLMHeadModel"),qWr.forEach(t),uuo=r(g3e," (XLM model)"),g3e.forEach(t),buo=i(S),cu=n(S,"LI",{});var h3e=s(cu);goe=n(h3e,"STRONG",{});var GWr=s(goe);vuo=r(GWr,"xlm-roberta"),GWr.forEach(t),Tuo=r(h3e," \u2014 "),c$=n(h3e,"A",{href:!0});var OWr=s(c$);Fuo=r(OWr,"XLMRobertaForMaskedLM"),OWr.forEach(t),Cuo=r(h3e," (XLM-RoBERTa model)"),h3e.forEach(t),Muo=i(S),fu=n(S,"LI",{});var p3e=s(fu);hoe=n(p3e,"STRONG",{});var XWr=s(hoe);Euo=r(XWr,"xlm-roberta-xl"),XWr.forEach(t),yuo=r(p3e," \u2014 "),f$=n(p3e,"A",{href:!0});var VWr=s(f$);wuo=r(VWr,"XLMRobertaXLForMaskedLM"),VWr.forEach(t),Auo=r(p3e," (XLM-RoBERTa-XL model)"),p3e.forEach(t),Luo=i(S),mu=n(S,"LI",{});var _3e=s(mu);poe=n(_3e,"STRONG",{});var zWr=s(poe);Buo=r(zWr,"xlnet"),zWr.forEach(t),xuo=r(_3e," \u2014 "),m$=n(_3e,"A",{href:!0});var WWr=s(m$);kuo=r(WWr,"XLNetLMHeadModel"),WWr.forEach(t),Ruo=r(_3e," (XLNet model)"),_3e.forEach(t),S.forEach(t),Suo=i(Gt),gu=n(Gt,"P",{});var u3e=s(gu);Puo=r(u3e,"The model is set in evaluation mode by default using "),_oe=n(u3e,"CODE",{});var QWr=s(_oe);$uo=r(QWr,"model.eval()"),QWr.forEach(t),Iuo=r(u3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uoe=n(u3e,"CODE",{});var HWr=s(uoe);Nuo=r(HWr,"model.train()"),HWr.forEach(t),u3e.forEach(t),juo=i(Gt),boe=n(Gt,"P",{});var UWr=s(boe);Duo=r(UWr,"Examples:"),UWr.forEach(t),quo=i(Gt),m(ay.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Gke=i(c),rd=n(c,"H2",{class:!0});var JSe=s(rd);hu=n(JSe,"A",{id:!0,class:!0,href:!0});var JWr=s(hu);voe=n(JWr,"SPAN",{});var YWr=s(voe);m(ny.$$.fragment,YWr),YWr.forEach(t),JWr.forEach(t),Guo=i(JSe),Toe=n(JSe,"SPAN",{});var KWr=s(Toe);Ouo=r(KWr,"AutoModelForCausalLM"),KWr.forEach(t),JSe.forEach(t),Oke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(sy.$$.fragment,Js),Xuo=i(Js),td=n(Js,"P",{});var fW=s(td);Vuo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Foe=n(fW,"CODE",{});var ZWr=s(Foe);zuo=r(ZWr,"from_pretrained()"),ZWr.forEach(t),Wuo=r(fW,"class method or the "),Coe=n(fW,"CODE",{});var eQr=s(Coe);Quo=r(eQr,"from_config()"),eQr.forEach(t),Huo=r(fW,`class
method.`),fW.forEach(t),Uuo=i(Js),ly=n(Js,"P",{});var YSe=s(ly);Juo=r(YSe,"This class cannot be instantiated directly using "),Moe=n(YSe,"CODE",{});var oQr=s(Moe);Yuo=r(oQr,"__init__()"),oQr.forEach(t),Kuo=r(YSe," (throws an error)."),YSe.forEach(t),Zuo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(iy.$$.fragment,Ys),e5o=i(Ys),Eoe=n(Ys,"P",{});var rQr=s(Eoe);o5o=r(rQr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rQr.forEach(t),r5o=i(Ys),ad=n(Ys,"P",{});var mW=s(ad);t5o=r(mW,`Note:
Loading a model from its configuration file does `),yoe=n(mW,"STRONG",{});var tQr=s(yoe);a5o=r(tQr,"not"),tQr.forEach(t),n5o=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n(mW,"CODE",{});var aQr=s(woe);s5o=r(aQr,"from_pretrained()"),aQr.forEach(t),l5o=r(mW,"to load the model weights."),mW.forEach(t),i5o=i(Ys),Aoe=n(Ys,"P",{});var nQr=s(Aoe);d5o=r(nQr,"Examples:"),nQr.forEach(t),c5o=i(Ys),m(dy.$$.fragment,Ys),Ys.forEach(t),f5o=i(Js),De=n(Js,"DIV",{class:!0});var Ot=s(De);m(cy.$$.fragment,Ot),m5o=i(Ot),Loe=n(Ot,"P",{});var sQr=s(Loe);g5o=r(sQr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sQr.forEach(t),h5o=i(Ot),Wa=n(Ot,"P",{});var uE=s(Wa);p5o=r(uE,"The model class to instantiate is selected based on the "),Boe=n(uE,"CODE",{});var lQr=s(Boe);_5o=r(lQr,"model_type"),lQr.forEach(t),u5o=r(uE,` property of the config object (either
passed as an argument or loaded from `),xoe=n(uE,"CODE",{});var iQr=s(xoe);b5o=r(iQr,"pretrained_model_name_or_path"),iQr.forEach(t),v5o=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),koe=n(uE,"CODE",{});var dQr=s(koe);T5o=r(dQr,"pretrained_model_name_or_path"),dQr.forEach(t),F5o=r(uE,":"),uE.forEach(t),C5o=i(Ot),$=n(Ot,"UL",{});var N=s($);pu=n(N,"LI",{});var b3e=s(pu);Roe=n(b3e,"STRONG",{});var cQr=s(Roe);M5o=r(cQr,"bart"),cQr.forEach(t),E5o=r(b3e," \u2014 "),g$=n(b3e,"A",{href:!0});var fQr=s(g$);y5o=r(fQr,"BartForCausalLM"),fQr.forEach(t),w5o=r(b3e," (BART model)"),b3e.forEach(t),A5o=i(N),_u=n(N,"LI",{});var v3e=s(_u);Soe=n(v3e,"STRONG",{});var mQr=s(Soe);L5o=r(mQr,"bert"),mQr.forEach(t),B5o=r(v3e," \u2014 "),h$=n(v3e,"A",{href:!0});var gQr=s(h$);x5o=r(gQr,"BertLMHeadModel"),gQr.forEach(t),k5o=r(v3e," (BERT model)"),v3e.forEach(t),R5o=i(N),uu=n(N,"LI",{});var T3e=s(uu);Poe=n(T3e,"STRONG",{});var hQr=s(Poe);S5o=r(hQr,"bert-generation"),hQr.forEach(t),P5o=r(T3e," \u2014 "),p$=n(T3e,"A",{href:!0});var pQr=s(p$);$5o=r(pQr,"BertGenerationDecoder"),pQr.forEach(t),I5o=r(T3e," (Bert Generation model)"),T3e.forEach(t),N5o=i(N),bu=n(N,"LI",{});var F3e=s(bu);$oe=n(F3e,"STRONG",{});var _Qr=s($oe);j5o=r(_Qr,"big_bird"),_Qr.forEach(t),D5o=r(F3e," \u2014 "),_$=n(F3e,"A",{href:!0});var uQr=s(_$);q5o=r(uQr,"BigBirdForCausalLM"),uQr.forEach(t),G5o=r(F3e," (BigBird model)"),F3e.forEach(t),O5o=i(N),vu=n(N,"LI",{});var C3e=s(vu);Ioe=n(C3e,"STRONG",{});var bQr=s(Ioe);X5o=r(bQr,"bigbird_pegasus"),bQr.forEach(t),V5o=r(C3e," \u2014 "),u$=n(C3e,"A",{href:!0});var vQr=s(u$);z5o=r(vQr,"BigBirdPegasusForCausalLM"),vQr.forEach(t),W5o=r(C3e," (BigBirdPegasus model)"),C3e.forEach(t),Q5o=i(N),Tu=n(N,"LI",{});var M3e=s(Tu);Noe=n(M3e,"STRONG",{});var TQr=s(Noe);H5o=r(TQr,"blenderbot"),TQr.forEach(t),U5o=r(M3e," \u2014 "),b$=n(M3e,"A",{href:!0});var FQr=s(b$);J5o=r(FQr,"BlenderbotForCausalLM"),FQr.forEach(t),Y5o=r(M3e," (Blenderbot model)"),M3e.forEach(t),K5o=i(N),Fu=n(N,"LI",{});var E3e=s(Fu);joe=n(E3e,"STRONG",{});var CQr=s(joe);Z5o=r(CQr,"blenderbot-small"),CQr.forEach(t),e2o=r(E3e," \u2014 "),v$=n(E3e,"A",{href:!0});var MQr=s(v$);o2o=r(MQr,"BlenderbotSmallForCausalLM"),MQr.forEach(t),r2o=r(E3e," (BlenderbotSmall model)"),E3e.forEach(t),t2o=i(N),Cu=n(N,"LI",{});var y3e=s(Cu);Doe=n(y3e,"STRONG",{});var EQr=s(Doe);a2o=r(EQr,"camembert"),EQr.forEach(t),n2o=r(y3e," \u2014 "),T$=n(y3e,"A",{href:!0});var yQr=s(T$);s2o=r(yQr,"CamembertForCausalLM"),yQr.forEach(t),l2o=r(y3e," (CamemBERT model)"),y3e.forEach(t),i2o=i(N),Mu=n(N,"LI",{});var w3e=s(Mu);qoe=n(w3e,"STRONG",{});var wQr=s(qoe);d2o=r(wQr,"ctrl"),wQr.forEach(t),c2o=r(w3e," \u2014 "),F$=n(w3e,"A",{href:!0});var AQr=s(F$);f2o=r(AQr,"CTRLLMHeadModel"),AQr.forEach(t),m2o=r(w3e," (CTRL model)"),w3e.forEach(t),g2o=i(N),Eu=n(N,"LI",{});var A3e=s(Eu);Goe=n(A3e,"STRONG",{});var LQr=s(Goe);h2o=r(LQr,"data2vec-text"),LQr.forEach(t),p2o=r(A3e," \u2014 "),C$=n(A3e,"A",{href:!0});var BQr=s(C$);_2o=r(BQr,"Data2VecTextForCausalLM"),BQr.forEach(t),u2o=r(A3e," (Data2VecText model)"),A3e.forEach(t),b2o=i(N),yu=n(N,"LI",{});var L3e=s(yu);Ooe=n(L3e,"STRONG",{});var xQr=s(Ooe);v2o=r(xQr,"electra"),xQr.forEach(t),T2o=r(L3e," \u2014 "),M$=n(L3e,"A",{href:!0});var kQr=s(M$);F2o=r(kQr,"ElectraForCausalLM"),kQr.forEach(t),C2o=r(L3e," (ELECTRA model)"),L3e.forEach(t),M2o=i(N),wu=n(N,"LI",{});var B3e=s(wu);Xoe=n(B3e,"STRONG",{});var RQr=s(Xoe);E2o=r(RQr,"gpt2"),RQr.forEach(t),y2o=r(B3e," \u2014 "),E$=n(B3e,"A",{href:!0});var SQr=s(E$);w2o=r(SQr,"GPT2LMHeadModel"),SQr.forEach(t),A2o=r(B3e," (OpenAI GPT-2 model)"),B3e.forEach(t),L2o=i(N),Au=n(N,"LI",{});var x3e=s(Au);Voe=n(x3e,"STRONG",{});var PQr=s(Voe);B2o=r(PQr,"gpt_neo"),PQr.forEach(t),x2o=r(x3e," \u2014 "),y$=n(x3e,"A",{href:!0});var $Qr=s(y$);k2o=r($Qr,"GPTNeoForCausalLM"),$Qr.forEach(t),R2o=r(x3e," (GPT Neo model)"),x3e.forEach(t),S2o=i(N),Lu=n(N,"LI",{});var k3e=s(Lu);zoe=n(k3e,"STRONG",{});var IQr=s(zoe);P2o=r(IQr,"gptj"),IQr.forEach(t),$2o=r(k3e," \u2014 "),w$=n(k3e,"A",{href:!0});var NQr=s(w$);I2o=r(NQr,"GPTJForCausalLM"),NQr.forEach(t),N2o=r(k3e," (GPT-J model)"),k3e.forEach(t),j2o=i(N),Bu=n(N,"LI",{});var R3e=s(Bu);Woe=n(R3e,"STRONG",{});var jQr=s(Woe);D2o=r(jQr,"marian"),jQr.forEach(t),q2o=r(R3e," \u2014 "),A$=n(R3e,"A",{href:!0});var DQr=s(A$);G2o=r(DQr,"MarianForCausalLM"),DQr.forEach(t),O2o=r(R3e," (Marian model)"),R3e.forEach(t),X2o=i(N),xu=n(N,"LI",{});var S3e=s(xu);Qoe=n(S3e,"STRONG",{});var qQr=s(Qoe);V2o=r(qQr,"mbart"),qQr.forEach(t),z2o=r(S3e," \u2014 "),L$=n(S3e,"A",{href:!0});var GQr=s(L$);W2o=r(GQr,"MBartForCausalLM"),GQr.forEach(t),Q2o=r(S3e," (mBART model)"),S3e.forEach(t),H2o=i(N),ku=n(N,"LI",{});var P3e=s(ku);Hoe=n(P3e,"STRONG",{});var OQr=s(Hoe);U2o=r(OQr,"megatron-bert"),OQr.forEach(t),J2o=r(P3e," \u2014 "),B$=n(P3e,"A",{href:!0});var XQr=s(B$);Y2o=r(XQr,"MegatronBertForCausalLM"),XQr.forEach(t),K2o=r(P3e," (MegatronBert model)"),P3e.forEach(t),Z2o=i(N),Ru=n(N,"LI",{});var $3e=s(Ru);Uoe=n($3e,"STRONG",{});var VQr=s(Uoe);e1o=r(VQr,"openai-gpt"),VQr.forEach(t),o1o=r($3e," \u2014 "),x$=n($3e,"A",{href:!0});var zQr=s(x$);r1o=r(zQr,"OpenAIGPTLMHeadModel"),zQr.forEach(t),t1o=r($3e," (OpenAI GPT model)"),$3e.forEach(t),a1o=i(N),Su=n(N,"LI",{});var I3e=s(Su);Joe=n(I3e,"STRONG",{});var WQr=s(Joe);n1o=r(WQr,"pegasus"),WQr.forEach(t),s1o=r(I3e," \u2014 "),k$=n(I3e,"A",{href:!0});var QQr=s(k$);l1o=r(QQr,"PegasusForCausalLM"),QQr.forEach(t),i1o=r(I3e," (Pegasus model)"),I3e.forEach(t),d1o=i(N),Pu=n(N,"LI",{});var N3e=s(Pu);Yoe=n(N3e,"STRONG",{});var HQr=s(Yoe);c1o=r(HQr,"plbart"),HQr.forEach(t),f1o=r(N3e," \u2014 "),R$=n(N3e,"A",{href:!0});var UQr=s(R$);m1o=r(UQr,"PLBartForCausalLM"),UQr.forEach(t),g1o=r(N3e," (PLBart model)"),N3e.forEach(t),h1o=i(N),$u=n(N,"LI",{});var j3e=s($u);Koe=n(j3e,"STRONG",{});var JQr=s(Koe);p1o=r(JQr,"prophetnet"),JQr.forEach(t),_1o=r(j3e," \u2014 "),S$=n(j3e,"A",{href:!0});var YQr=s(S$);u1o=r(YQr,"ProphetNetForCausalLM"),YQr.forEach(t),b1o=r(j3e," (ProphetNet model)"),j3e.forEach(t),v1o=i(N),Iu=n(N,"LI",{});var D3e=s(Iu);Zoe=n(D3e,"STRONG",{});var KQr=s(Zoe);T1o=r(KQr,"qdqbert"),KQr.forEach(t),F1o=r(D3e," \u2014 "),P$=n(D3e,"A",{href:!0});var ZQr=s(P$);C1o=r(ZQr,"QDQBertLMHeadModel"),ZQr.forEach(t),M1o=r(D3e," (QDQBert model)"),D3e.forEach(t),E1o=i(N),Nu=n(N,"LI",{});var q3e=s(Nu);ere=n(q3e,"STRONG",{});var eHr=s(ere);y1o=r(eHr,"reformer"),eHr.forEach(t),w1o=r(q3e," \u2014 "),$$=n(q3e,"A",{href:!0});var oHr=s($$);A1o=r(oHr,"ReformerModelWithLMHead"),oHr.forEach(t),L1o=r(q3e," (Reformer model)"),q3e.forEach(t),B1o=i(N),ju=n(N,"LI",{});var G3e=s(ju);ore=n(G3e,"STRONG",{});var rHr=s(ore);x1o=r(rHr,"rembert"),rHr.forEach(t),k1o=r(G3e," \u2014 "),I$=n(G3e,"A",{href:!0});var tHr=s(I$);R1o=r(tHr,"RemBertForCausalLM"),tHr.forEach(t),S1o=r(G3e," (RemBERT model)"),G3e.forEach(t),P1o=i(N),Du=n(N,"LI",{});var O3e=s(Du);rre=n(O3e,"STRONG",{});var aHr=s(rre);$1o=r(aHr,"roberta"),aHr.forEach(t),I1o=r(O3e," \u2014 "),N$=n(O3e,"A",{href:!0});var nHr=s(N$);N1o=r(nHr,"RobertaForCausalLM"),nHr.forEach(t),j1o=r(O3e," (RoBERTa model)"),O3e.forEach(t),D1o=i(N),qu=n(N,"LI",{});var X3e=s(qu);tre=n(X3e,"STRONG",{});var sHr=s(tre);q1o=r(sHr,"roformer"),sHr.forEach(t),G1o=r(X3e," \u2014 "),j$=n(X3e,"A",{href:!0});var lHr=s(j$);O1o=r(lHr,"RoFormerForCausalLM"),lHr.forEach(t),X1o=r(X3e," (RoFormer model)"),X3e.forEach(t),V1o=i(N),Gu=n(N,"LI",{});var V3e=s(Gu);are=n(V3e,"STRONG",{});var iHr=s(are);z1o=r(iHr,"speech_to_text_2"),iHr.forEach(t),W1o=r(V3e," \u2014 "),D$=n(V3e,"A",{href:!0});var dHr=s(D$);Q1o=r(dHr,"Speech2Text2ForCausalLM"),dHr.forEach(t),H1o=r(V3e," (Speech2Text2 model)"),V3e.forEach(t),U1o=i(N),Ou=n(N,"LI",{});var z3e=s(Ou);nre=n(z3e,"STRONG",{});var cHr=s(nre);J1o=r(cHr,"transfo-xl"),cHr.forEach(t),Y1o=r(z3e," \u2014 "),q$=n(z3e,"A",{href:!0});var fHr=s(q$);K1o=r(fHr,"TransfoXLLMHeadModel"),fHr.forEach(t),Z1o=r(z3e," (Transformer-XL model)"),z3e.forEach(t),ebo=i(N),Xu=n(N,"LI",{});var W3e=s(Xu);sre=n(W3e,"STRONG",{});var mHr=s(sre);obo=r(mHr,"trocr"),mHr.forEach(t),rbo=r(W3e," \u2014 "),G$=n(W3e,"A",{href:!0});var gHr=s(G$);tbo=r(gHr,"TrOCRForCausalLM"),gHr.forEach(t),abo=r(W3e," (TrOCR model)"),W3e.forEach(t),nbo=i(N),Vu=n(N,"LI",{});var Q3e=s(Vu);lre=n(Q3e,"STRONG",{});var hHr=s(lre);sbo=r(hHr,"xglm"),hHr.forEach(t),lbo=r(Q3e," \u2014 "),O$=n(Q3e,"A",{href:!0});var pHr=s(O$);ibo=r(pHr,"XGLMForCausalLM"),pHr.forEach(t),dbo=r(Q3e," (XGLM model)"),Q3e.forEach(t),cbo=i(N),zu=n(N,"LI",{});var H3e=s(zu);ire=n(H3e,"STRONG",{});var _Hr=s(ire);fbo=r(_Hr,"xlm"),_Hr.forEach(t),mbo=r(H3e," \u2014 "),X$=n(H3e,"A",{href:!0});var uHr=s(X$);gbo=r(uHr,"XLMWithLMHeadModel"),uHr.forEach(t),hbo=r(H3e," (XLM model)"),H3e.forEach(t),pbo=i(N),Wu=n(N,"LI",{});var U3e=s(Wu);dre=n(U3e,"STRONG",{});var bHr=s(dre);_bo=r(bHr,"xlm-prophetnet"),bHr.forEach(t),ubo=r(U3e," \u2014 "),V$=n(U3e,"A",{href:!0});var vHr=s(V$);bbo=r(vHr,"XLMProphetNetForCausalLM"),vHr.forEach(t),vbo=r(U3e," (XLMProphetNet model)"),U3e.forEach(t),Tbo=i(N),Qu=n(N,"LI",{});var J3e=s(Qu);cre=n(J3e,"STRONG",{});var THr=s(cre);Fbo=r(THr,"xlm-roberta"),THr.forEach(t),Cbo=r(J3e," \u2014 "),z$=n(J3e,"A",{href:!0});var FHr=s(z$);Mbo=r(FHr,"XLMRobertaForCausalLM"),FHr.forEach(t),Ebo=r(J3e," (XLM-RoBERTa model)"),J3e.forEach(t),ybo=i(N),Hu=n(N,"LI",{});var Y3e=s(Hu);fre=n(Y3e,"STRONG",{});var CHr=s(fre);wbo=r(CHr,"xlm-roberta-xl"),CHr.forEach(t),Abo=r(Y3e," \u2014 "),W$=n(Y3e,"A",{href:!0});var MHr=s(W$);Lbo=r(MHr,"XLMRobertaXLForCausalLM"),MHr.forEach(t),Bbo=r(Y3e," (XLM-RoBERTa-XL model)"),Y3e.forEach(t),xbo=i(N),Uu=n(N,"LI",{});var K3e=s(Uu);mre=n(K3e,"STRONG",{});var EHr=s(mre);kbo=r(EHr,"xlnet"),EHr.forEach(t),Rbo=r(K3e," \u2014 "),Q$=n(K3e,"A",{href:!0});var yHr=s(Q$);Sbo=r(yHr,"XLNetLMHeadModel"),yHr.forEach(t),Pbo=r(K3e," (XLNet model)"),K3e.forEach(t),N.forEach(t),$bo=i(Ot),Ju=n(Ot,"P",{});var Z3e=s(Ju);Ibo=r(Z3e,"The model is set in evaluation mode by default using "),gre=n(Z3e,"CODE",{});var wHr=s(gre);Nbo=r(wHr,"model.eval()"),wHr.forEach(t),jbo=r(Z3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hre=n(Z3e,"CODE",{});var AHr=s(hre);Dbo=r(AHr,"model.train()"),AHr.forEach(t),Z3e.forEach(t),qbo=i(Ot),pre=n(Ot,"P",{});var LHr=s(pre);Gbo=r(LHr,"Examples:"),LHr.forEach(t),Obo=i(Ot),m(fy.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),Xke=i(c),nd=n(c,"H2",{class:!0});var KSe=s(nd);Yu=n(KSe,"A",{id:!0,class:!0,href:!0});var BHr=s(Yu);_re=n(BHr,"SPAN",{});var xHr=s(_re);m(my.$$.fragment,xHr),xHr.forEach(t),BHr.forEach(t),Xbo=i(KSe),ure=n(KSe,"SPAN",{});var kHr=s(ure);Vbo=r(kHr,"AutoModelForMaskedLM"),kHr.forEach(t),KSe.forEach(t),Vke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(gy.$$.fragment,Ks),zbo=i(Ks),sd=n(Ks,"P",{});var gW=s(sd);Wbo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bre=n(gW,"CODE",{});var RHr=s(bre);Qbo=r(RHr,"from_pretrained()"),RHr.forEach(t),Hbo=r(gW,"class method or the "),vre=n(gW,"CODE",{});var SHr=s(vre);Ubo=r(SHr,"from_config()"),SHr.forEach(t),Jbo=r(gW,`class
method.`),gW.forEach(t),Ybo=i(Ks),hy=n(Ks,"P",{});var ZSe=s(hy);Kbo=r(ZSe,"This class cannot be instantiated directly using "),Tre=n(ZSe,"CODE",{});var PHr=s(Tre);Zbo=r(PHr,"__init__()"),PHr.forEach(t),evo=r(ZSe," (throws an error)."),ZSe.forEach(t),ovo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(py.$$.fragment,Zs),rvo=i(Zs),Fre=n(Zs,"P",{});var $Hr=s(Fre);tvo=r($Hr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Hr.forEach(t),avo=i(Zs),ld=n(Zs,"P",{});var hW=s(ld);nvo=r(hW,`Note:
Loading a model from its configuration file does `),Cre=n(hW,"STRONG",{});var IHr=s(Cre);svo=r(IHr,"not"),IHr.forEach(t),lvo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(hW,"CODE",{});var NHr=s(Mre);ivo=r(NHr,"from_pretrained()"),NHr.forEach(t),dvo=r(hW,"to load the model weights."),hW.forEach(t),cvo=i(Zs),Ere=n(Zs,"P",{});var jHr=s(Ere);fvo=r(jHr,"Examples:"),jHr.forEach(t),mvo=i(Zs),m(_y.$$.fragment,Zs),Zs.forEach(t),gvo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(uy.$$.fragment,Xt),hvo=i(Xt),yre=n(Xt,"P",{});var DHr=s(yre);pvo=r(DHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DHr.forEach(t),_vo=i(Xt),Qa=n(Xt,"P",{});var bE=s(Qa);uvo=r(bE,"The model class to instantiate is selected based on the "),wre=n(bE,"CODE",{});var qHr=s(wre);bvo=r(qHr,"model_type"),qHr.forEach(t),vvo=r(bE,` property of the config object (either
passed as an argument or loaded from `),Are=n(bE,"CODE",{});var GHr=s(Are);Tvo=r(GHr,"pretrained_model_name_or_path"),GHr.forEach(t),Fvo=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lre=n(bE,"CODE",{});var OHr=s(Lre);Cvo=r(OHr,"pretrained_model_name_or_path"),OHr.forEach(t),Mvo=r(bE,":"),bE.forEach(t),Evo=i(Xt),I=n(Xt,"UL",{});var j=s(I);Ku=n(j,"LI",{});var eye=s(Ku);Bre=n(eye,"STRONG",{});var XHr=s(Bre);yvo=r(XHr,"albert"),XHr.forEach(t),wvo=r(eye," \u2014 "),H$=n(eye,"A",{href:!0});var VHr=s(H$);Avo=r(VHr,"AlbertForMaskedLM"),VHr.forEach(t),Lvo=r(eye," (ALBERT model)"),eye.forEach(t),Bvo=i(j),Zu=n(j,"LI",{});var oye=s(Zu);xre=n(oye,"STRONG",{});var zHr=s(xre);xvo=r(zHr,"bart"),zHr.forEach(t),kvo=r(oye," \u2014 "),U$=n(oye,"A",{href:!0});var WHr=s(U$);Rvo=r(WHr,"BartForConditionalGeneration"),WHr.forEach(t),Svo=r(oye," (BART model)"),oye.forEach(t),Pvo=i(j),e5=n(j,"LI",{});var rye=s(e5);kre=n(rye,"STRONG",{});var QHr=s(kre);$vo=r(QHr,"bert"),QHr.forEach(t),Ivo=r(rye," \u2014 "),J$=n(rye,"A",{href:!0});var HHr=s(J$);Nvo=r(HHr,"BertForMaskedLM"),HHr.forEach(t),jvo=r(rye," (BERT model)"),rye.forEach(t),Dvo=i(j),o5=n(j,"LI",{});var tye=s(o5);Rre=n(tye,"STRONG",{});var UHr=s(Rre);qvo=r(UHr,"big_bird"),UHr.forEach(t),Gvo=r(tye," \u2014 "),Y$=n(tye,"A",{href:!0});var JHr=s(Y$);Ovo=r(JHr,"BigBirdForMaskedLM"),JHr.forEach(t),Xvo=r(tye," (BigBird model)"),tye.forEach(t),Vvo=i(j),r5=n(j,"LI",{});var aye=s(r5);Sre=n(aye,"STRONG",{});var YHr=s(Sre);zvo=r(YHr,"camembert"),YHr.forEach(t),Wvo=r(aye," \u2014 "),K$=n(aye,"A",{href:!0});var KHr=s(K$);Qvo=r(KHr,"CamembertForMaskedLM"),KHr.forEach(t),Hvo=r(aye," (CamemBERT model)"),aye.forEach(t),Uvo=i(j),t5=n(j,"LI",{});var nye=s(t5);Pre=n(nye,"STRONG",{});var ZHr=s(Pre);Jvo=r(ZHr,"convbert"),ZHr.forEach(t),Yvo=r(nye," \u2014 "),Z$=n(nye,"A",{href:!0});var eUr=s(Z$);Kvo=r(eUr,"ConvBertForMaskedLM"),eUr.forEach(t),Zvo=r(nye," (ConvBERT model)"),nye.forEach(t),e6o=i(j),a5=n(j,"LI",{});var sye=s(a5);$re=n(sye,"STRONG",{});var oUr=s($re);o6o=r(oUr,"data2vec-text"),oUr.forEach(t),r6o=r(sye," \u2014 "),eI=n(sye,"A",{href:!0});var rUr=s(eI);t6o=r(rUr,"Data2VecTextForMaskedLM"),rUr.forEach(t),a6o=r(sye," (Data2VecText model)"),sye.forEach(t),n6o=i(j),n5=n(j,"LI",{});var lye=s(n5);Ire=n(lye,"STRONG",{});var tUr=s(Ire);s6o=r(tUr,"deberta"),tUr.forEach(t),l6o=r(lye," \u2014 "),oI=n(lye,"A",{href:!0});var aUr=s(oI);i6o=r(aUr,"DebertaForMaskedLM"),aUr.forEach(t),d6o=r(lye," (DeBERTa model)"),lye.forEach(t),c6o=i(j),s5=n(j,"LI",{});var iye=s(s5);Nre=n(iye,"STRONG",{});var nUr=s(Nre);f6o=r(nUr,"deberta-v2"),nUr.forEach(t),m6o=r(iye," \u2014 "),rI=n(iye,"A",{href:!0});var sUr=s(rI);g6o=r(sUr,"DebertaV2ForMaskedLM"),sUr.forEach(t),h6o=r(iye," (DeBERTa-v2 model)"),iye.forEach(t),p6o=i(j),l5=n(j,"LI",{});var dye=s(l5);jre=n(dye,"STRONG",{});var lUr=s(jre);_6o=r(lUr,"distilbert"),lUr.forEach(t),u6o=r(dye," \u2014 "),tI=n(dye,"A",{href:!0});var iUr=s(tI);b6o=r(iUr,"DistilBertForMaskedLM"),iUr.forEach(t),v6o=r(dye," (DistilBERT model)"),dye.forEach(t),T6o=i(j),i5=n(j,"LI",{});var cye=s(i5);Dre=n(cye,"STRONG",{});var dUr=s(Dre);F6o=r(dUr,"electra"),dUr.forEach(t),C6o=r(cye," \u2014 "),aI=n(cye,"A",{href:!0});var cUr=s(aI);M6o=r(cUr,"ElectraForMaskedLM"),cUr.forEach(t),E6o=r(cye," (ELECTRA model)"),cye.forEach(t),y6o=i(j),d5=n(j,"LI",{});var fye=s(d5);qre=n(fye,"STRONG",{});var fUr=s(qre);w6o=r(fUr,"flaubert"),fUr.forEach(t),A6o=r(fye," \u2014 "),nI=n(fye,"A",{href:!0});var mUr=s(nI);L6o=r(mUr,"FlaubertWithLMHeadModel"),mUr.forEach(t),B6o=r(fye," (FlauBERT model)"),fye.forEach(t),x6o=i(j),c5=n(j,"LI",{});var mye=s(c5);Gre=n(mye,"STRONG",{});var gUr=s(Gre);k6o=r(gUr,"fnet"),gUr.forEach(t),R6o=r(mye," \u2014 "),sI=n(mye,"A",{href:!0});var hUr=s(sI);S6o=r(hUr,"FNetForMaskedLM"),hUr.forEach(t),P6o=r(mye," (FNet model)"),mye.forEach(t),$6o=i(j),f5=n(j,"LI",{});var gye=s(f5);Ore=n(gye,"STRONG",{});var pUr=s(Ore);I6o=r(pUr,"funnel"),pUr.forEach(t),N6o=r(gye," \u2014 "),lI=n(gye,"A",{href:!0});var _Ur=s(lI);j6o=r(_Ur,"FunnelForMaskedLM"),_Ur.forEach(t),D6o=r(gye," (Funnel Transformer model)"),gye.forEach(t),q6o=i(j),m5=n(j,"LI",{});var hye=s(m5);Xre=n(hye,"STRONG",{});var uUr=s(Xre);G6o=r(uUr,"ibert"),uUr.forEach(t),O6o=r(hye," \u2014 "),iI=n(hye,"A",{href:!0});var bUr=s(iI);X6o=r(bUr,"IBertForMaskedLM"),bUr.forEach(t),V6o=r(hye," (I-BERT model)"),hye.forEach(t),z6o=i(j),g5=n(j,"LI",{});var pye=s(g5);Vre=n(pye,"STRONG",{});var vUr=s(Vre);W6o=r(vUr,"layoutlm"),vUr.forEach(t),Q6o=r(pye," \u2014 "),dI=n(pye,"A",{href:!0});var TUr=s(dI);H6o=r(TUr,"LayoutLMForMaskedLM"),TUr.forEach(t),U6o=r(pye," (LayoutLM model)"),pye.forEach(t),J6o=i(j),h5=n(j,"LI",{});var _ye=s(h5);zre=n(_ye,"STRONG",{});var FUr=s(zre);Y6o=r(FUr,"longformer"),FUr.forEach(t),K6o=r(_ye," \u2014 "),cI=n(_ye,"A",{href:!0});var CUr=s(cI);Z6o=r(CUr,"LongformerForMaskedLM"),CUr.forEach(t),eTo=r(_ye," (Longformer model)"),_ye.forEach(t),oTo=i(j),p5=n(j,"LI",{});var uye=s(p5);Wre=n(uye,"STRONG",{});var MUr=s(Wre);rTo=r(MUr,"mbart"),MUr.forEach(t),tTo=r(uye," \u2014 "),fI=n(uye,"A",{href:!0});var EUr=s(fI);aTo=r(EUr,"MBartForConditionalGeneration"),EUr.forEach(t),nTo=r(uye," (mBART model)"),uye.forEach(t),sTo=i(j),_5=n(j,"LI",{});var bye=s(_5);Qre=n(bye,"STRONG",{});var yUr=s(Qre);lTo=r(yUr,"megatron-bert"),yUr.forEach(t),iTo=r(bye," \u2014 "),mI=n(bye,"A",{href:!0});var wUr=s(mI);dTo=r(wUr,"MegatronBertForMaskedLM"),wUr.forEach(t),cTo=r(bye," (MegatronBert model)"),bye.forEach(t),fTo=i(j),u5=n(j,"LI",{});var vye=s(u5);Hre=n(vye,"STRONG",{});var AUr=s(Hre);mTo=r(AUr,"mobilebert"),AUr.forEach(t),gTo=r(vye," \u2014 "),gI=n(vye,"A",{href:!0});var LUr=s(gI);hTo=r(LUr,"MobileBertForMaskedLM"),LUr.forEach(t),pTo=r(vye," (MobileBERT model)"),vye.forEach(t),_To=i(j),b5=n(j,"LI",{});var Tye=s(b5);Ure=n(Tye,"STRONG",{});var BUr=s(Ure);uTo=r(BUr,"mpnet"),BUr.forEach(t),bTo=r(Tye," \u2014 "),hI=n(Tye,"A",{href:!0});var xUr=s(hI);vTo=r(xUr,"MPNetForMaskedLM"),xUr.forEach(t),TTo=r(Tye," (MPNet model)"),Tye.forEach(t),FTo=i(j),v5=n(j,"LI",{});var Fye=s(v5);Jre=n(Fye,"STRONG",{});var kUr=s(Jre);CTo=r(kUr,"nystromformer"),kUr.forEach(t),MTo=r(Fye," \u2014 "),pI=n(Fye,"A",{href:!0});var RUr=s(pI);ETo=r(RUr,"NystromformerForMaskedLM"),RUr.forEach(t),yTo=r(Fye," (Nystromformer model)"),Fye.forEach(t),wTo=i(j),T5=n(j,"LI",{});var Cye=s(T5);Yre=n(Cye,"STRONG",{});var SUr=s(Yre);ATo=r(SUr,"perceiver"),SUr.forEach(t),LTo=r(Cye," \u2014 "),_I=n(Cye,"A",{href:!0});var PUr=s(_I);BTo=r(PUr,"PerceiverForMaskedLM"),PUr.forEach(t),xTo=r(Cye," (Perceiver model)"),Cye.forEach(t),kTo=i(j),F5=n(j,"LI",{});var Mye=s(F5);Kre=n(Mye,"STRONG",{});var $Ur=s(Kre);RTo=r($Ur,"qdqbert"),$Ur.forEach(t),STo=r(Mye," \u2014 "),uI=n(Mye,"A",{href:!0});var IUr=s(uI);PTo=r(IUr,"QDQBertForMaskedLM"),IUr.forEach(t),$To=r(Mye," (QDQBert model)"),Mye.forEach(t),ITo=i(j),C5=n(j,"LI",{});var Eye=s(C5);Zre=n(Eye,"STRONG",{});var NUr=s(Zre);NTo=r(NUr,"reformer"),NUr.forEach(t),jTo=r(Eye," \u2014 "),bI=n(Eye,"A",{href:!0});var jUr=s(bI);DTo=r(jUr,"ReformerForMaskedLM"),jUr.forEach(t),qTo=r(Eye," (Reformer model)"),Eye.forEach(t),GTo=i(j),M5=n(j,"LI",{});var yye=s(M5);ete=n(yye,"STRONG",{});var DUr=s(ete);OTo=r(DUr,"rembert"),DUr.forEach(t),XTo=r(yye," \u2014 "),vI=n(yye,"A",{href:!0});var qUr=s(vI);VTo=r(qUr,"RemBertForMaskedLM"),qUr.forEach(t),zTo=r(yye," (RemBERT model)"),yye.forEach(t),WTo=i(j),E5=n(j,"LI",{});var wye=s(E5);ote=n(wye,"STRONG",{});var GUr=s(ote);QTo=r(GUr,"roberta"),GUr.forEach(t),HTo=r(wye," \u2014 "),TI=n(wye,"A",{href:!0});var OUr=s(TI);UTo=r(OUr,"RobertaForMaskedLM"),OUr.forEach(t),JTo=r(wye," (RoBERTa model)"),wye.forEach(t),YTo=i(j),y5=n(j,"LI",{});var Aye=s(y5);rte=n(Aye,"STRONG",{});var XUr=s(rte);KTo=r(XUr,"roformer"),XUr.forEach(t),ZTo=r(Aye," \u2014 "),FI=n(Aye,"A",{href:!0});var VUr=s(FI);eFo=r(VUr,"RoFormerForMaskedLM"),VUr.forEach(t),oFo=r(Aye," (RoFormer model)"),Aye.forEach(t),rFo=i(j),w5=n(j,"LI",{});var Lye=s(w5);tte=n(Lye,"STRONG",{});var zUr=s(tte);tFo=r(zUr,"squeezebert"),zUr.forEach(t),aFo=r(Lye," \u2014 "),CI=n(Lye,"A",{href:!0});var WUr=s(CI);nFo=r(WUr,"SqueezeBertForMaskedLM"),WUr.forEach(t),sFo=r(Lye," (SqueezeBERT model)"),Lye.forEach(t),lFo=i(j),A5=n(j,"LI",{});var Bye=s(A5);ate=n(Bye,"STRONG",{});var QUr=s(ate);iFo=r(QUr,"tapas"),QUr.forEach(t),dFo=r(Bye," \u2014 "),MI=n(Bye,"A",{href:!0});var HUr=s(MI);cFo=r(HUr,"TapasForMaskedLM"),HUr.forEach(t),fFo=r(Bye," (TAPAS model)"),Bye.forEach(t),mFo=i(j),L5=n(j,"LI",{});var xye=s(L5);nte=n(xye,"STRONG",{});var UUr=s(nte);gFo=r(UUr,"wav2vec2"),UUr.forEach(t),hFo=r(xye," \u2014 "),ste=n(xye,"CODE",{});var JUr=s(ste);pFo=r(JUr,"Wav2Vec2ForMaskedLM"),JUr.forEach(t),_Fo=r(xye,"(Wav2Vec2 model)"),xye.forEach(t),uFo=i(j),B5=n(j,"LI",{});var kye=s(B5);lte=n(kye,"STRONG",{});var YUr=s(lte);bFo=r(YUr,"xlm"),YUr.forEach(t),vFo=r(kye," \u2014 "),EI=n(kye,"A",{href:!0});var KUr=s(EI);TFo=r(KUr,"XLMWithLMHeadModel"),KUr.forEach(t),FFo=r(kye," (XLM model)"),kye.forEach(t),CFo=i(j),x5=n(j,"LI",{});var Rye=s(x5);ite=n(Rye,"STRONG",{});var ZUr=s(ite);MFo=r(ZUr,"xlm-roberta"),ZUr.forEach(t),EFo=r(Rye," \u2014 "),yI=n(Rye,"A",{href:!0});var eJr=s(yI);yFo=r(eJr,"XLMRobertaForMaskedLM"),eJr.forEach(t),wFo=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),AFo=i(j),k5=n(j,"LI",{});var Sye=s(k5);dte=n(Sye,"STRONG",{});var oJr=s(dte);LFo=r(oJr,"xlm-roberta-xl"),oJr.forEach(t),BFo=r(Sye," \u2014 "),wI=n(Sye,"A",{href:!0});var rJr=s(wI);xFo=r(rJr,"XLMRobertaXLForMaskedLM"),rJr.forEach(t),kFo=r(Sye," (XLM-RoBERTa-XL model)"),Sye.forEach(t),RFo=i(j),R5=n(j,"LI",{});var Pye=s(R5);cte=n(Pye,"STRONG",{});var tJr=s(cte);SFo=r(tJr,"yoso"),tJr.forEach(t),PFo=r(Pye," \u2014 "),AI=n(Pye,"A",{href:!0});var aJr=s(AI);$Fo=r(aJr,"YosoForMaskedLM"),aJr.forEach(t),IFo=r(Pye," (YOSO model)"),Pye.forEach(t),j.forEach(t),NFo=i(Xt),S5=n(Xt,"P",{});var $ye=s(S5);jFo=r($ye,"The model is set in evaluation mode by default using "),fte=n($ye,"CODE",{});var nJr=s(fte);DFo=r(nJr,"model.eval()"),nJr.forEach(t),qFo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mte=n($ye,"CODE",{});var sJr=s(mte);GFo=r(sJr,"model.train()"),sJr.forEach(t),$ye.forEach(t),OFo=i(Xt),gte=n(Xt,"P",{});var lJr=s(gte);XFo=r(lJr,"Examples:"),lJr.forEach(t),VFo=i(Xt),m(by.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),zke=i(c),id=n(c,"H2",{class:!0});var ePe=s(id);P5=n(ePe,"A",{id:!0,class:!0,href:!0});var iJr=s(P5);hte=n(iJr,"SPAN",{});var dJr=s(hte);m(vy.$$.fragment,dJr),dJr.forEach(t),iJr.forEach(t),zFo=i(ePe),pte=n(ePe,"SPAN",{});var cJr=s(pte);WFo=r(cJr,"AutoModelForSeq2SeqLM"),cJr.forEach(t),ePe.forEach(t),Wke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(Ty.$$.fragment,el),QFo=i(el),dd=n(el,"P",{});var pW=s(dd);HFo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_te=n(pW,"CODE",{});var fJr=s(_te);UFo=r(fJr,"from_pretrained()"),fJr.forEach(t),JFo=r(pW,"class method or the "),ute=n(pW,"CODE",{});var mJr=s(ute);YFo=r(mJr,"from_config()"),mJr.forEach(t),KFo=r(pW,`class
method.`),pW.forEach(t),ZFo=i(el),Fy=n(el,"P",{});var oPe=s(Fy);eCo=r(oPe,"This class cannot be instantiated directly using "),bte=n(oPe,"CODE",{});var gJr=s(bte);oCo=r(gJr,"__init__()"),gJr.forEach(t),rCo=r(oPe," (throws an error)."),oPe.forEach(t),tCo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(Cy.$$.fragment,ol),aCo=i(ol),vte=n(ol,"P",{});var hJr=s(vte);nCo=r(hJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hJr.forEach(t),sCo=i(ol),cd=n(ol,"P",{});var _W=s(cd);lCo=r(_W,`Note:
Loading a model from its configuration file does `),Tte=n(_W,"STRONG",{});var pJr=s(Tte);iCo=r(pJr,"not"),pJr.forEach(t),dCo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=n(_W,"CODE",{});var _Jr=s(Fte);cCo=r(_Jr,"from_pretrained()"),_Jr.forEach(t),fCo=r(_W,"to load the model weights."),_W.forEach(t),mCo=i(ol),Cte=n(ol,"P",{});var uJr=s(Cte);gCo=r(uJr,"Examples:"),uJr.forEach(t),hCo=i(ol),m(My.$$.fragment,ol),ol.forEach(t),pCo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(Ey.$$.fragment,Vt),_Co=i(Vt),Mte=n(Vt,"P",{});var bJr=s(Mte);uCo=r(bJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bJr.forEach(t),bCo=i(Vt),Ha=n(Vt,"P",{});var vE=s(Ha);vCo=r(vE,"The model class to instantiate is selected based on the "),Ete=n(vE,"CODE",{});var vJr=s(Ete);TCo=r(vJr,"model_type"),vJr.forEach(t),FCo=r(vE,` property of the config object (either
passed as an argument or loaded from `),yte=n(vE,"CODE",{});var TJr=s(yte);CCo=r(TJr,"pretrained_model_name_or_path"),TJr.forEach(t),MCo=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wte=n(vE,"CODE",{});var FJr=s(wte);ECo=r(FJr,"pretrained_model_name_or_path"),FJr.forEach(t),yCo=r(vE,":"),vE.forEach(t),wCo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);$5=n(ie,"LI",{});var Iye=s($5);Ate=n(Iye,"STRONG",{});var CJr=s(Ate);ACo=r(CJr,"bart"),CJr.forEach(t),LCo=r(Iye," \u2014 "),LI=n(Iye,"A",{href:!0});var MJr=s(LI);BCo=r(MJr,"BartForConditionalGeneration"),MJr.forEach(t),xCo=r(Iye," (BART model)"),Iye.forEach(t),kCo=i(ie),I5=n(ie,"LI",{});var Nye=s(I5);Lte=n(Nye,"STRONG",{});var EJr=s(Lte);RCo=r(EJr,"bigbird_pegasus"),EJr.forEach(t),SCo=r(Nye," \u2014 "),BI=n(Nye,"A",{href:!0});var yJr=s(BI);PCo=r(yJr,"BigBirdPegasusForConditionalGeneration"),yJr.forEach(t),$Co=r(Nye," (BigBirdPegasus model)"),Nye.forEach(t),ICo=i(ie),N5=n(ie,"LI",{});var jye=s(N5);Bte=n(jye,"STRONG",{});var wJr=s(Bte);NCo=r(wJr,"blenderbot"),wJr.forEach(t),jCo=r(jye," \u2014 "),xI=n(jye,"A",{href:!0});var AJr=s(xI);DCo=r(AJr,"BlenderbotForConditionalGeneration"),AJr.forEach(t),qCo=r(jye," (Blenderbot model)"),jye.forEach(t),GCo=i(ie),j5=n(ie,"LI",{});var Dye=s(j5);xte=n(Dye,"STRONG",{});var LJr=s(xte);OCo=r(LJr,"blenderbot-small"),LJr.forEach(t),XCo=r(Dye," \u2014 "),kI=n(Dye,"A",{href:!0});var BJr=s(kI);VCo=r(BJr,"BlenderbotSmallForConditionalGeneration"),BJr.forEach(t),zCo=r(Dye," (BlenderbotSmall model)"),Dye.forEach(t),WCo=i(ie),D5=n(ie,"LI",{});var qye=s(D5);kte=n(qye,"STRONG",{});var xJr=s(kte);QCo=r(xJr,"encoder-decoder"),xJr.forEach(t),HCo=r(qye," \u2014 "),RI=n(qye,"A",{href:!0});var kJr=s(RI);UCo=r(kJr,"EncoderDecoderModel"),kJr.forEach(t),JCo=r(qye," (Encoder decoder model)"),qye.forEach(t),YCo=i(ie),q5=n(ie,"LI",{});var Gye=s(q5);Rte=n(Gye,"STRONG",{});var RJr=s(Rte);KCo=r(RJr,"fsmt"),RJr.forEach(t),ZCo=r(Gye," \u2014 "),SI=n(Gye,"A",{href:!0});var SJr=s(SI);eMo=r(SJr,"FSMTForConditionalGeneration"),SJr.forEach(t),oMo=r(Gye," (FairSeq Machine-Translation model)"),Gye.forEach(t),rMo=i(ie),G5=n(ie,"LI",{});var Oye=s(G5);Ste=n(Oye,"STRONG",{});var PJr=s(Ste);tMo=r(PJr,"led"),PJr.forEach(t),aMo=r(Oye," \u2014 "),PI=n(Oye,"A",{href:!0});var $Jr=s(PI);nMo=r($Jr,"LEDForConditionalGeneration"),$Jr.forEach(t),sMo=r(Oye," (LED model)"),Oye.forEach(t),lMo=i(ie),O5=n(ie,"LI",{});var Xye=s(O5);Pte=n(Xye,"STRONG",{});var IJr=s(Pte);iMo=r(IJr,"m2m_100"),IJr.forEach(t),dMo=r(Xye," \u2014 "),$I=n(Xye,"A",{href:!0});var NJr=s($I);cMo=r(NJr,"M2M100ForConditionalGeneration"),NJr.forEach(t),fMo=r(Xye," (M2M100 model)"),Xye.forEach(t),mMo=i(ie),X5=n(ie,"LI",{});var Vye=s(X5);$te=n(Vye,"STRONG",{});var jJr=s($te);gMo=r(jJr,"marian"),jJr.forEach(t),hMo=r(Vye," \u2014 "),II=n(Vye,"A",{href:!0});var DJr=s(II);pMo=r(DJr,"MarianMTModel"),DJr.forEach(t),_Mo=r(Vye," (Marian model)"),Vye.forEach(t),uMo=i(ie),V5=n(ie,"LI",{});var zye=s(V5);Ite=n(zye,"STRONG",{});var qJr=s(Ite);bMo=r(qJr,"mbart"),qJr.forEach(t),vMo=r(zye," \u2014 "),NI=n(zye,"A",{href:!0});var GJr=s(NI);TMo=r(GJr,"MBartForConditionalGeneration"),GJr.forEach(t),FMo=r(zye," (mBART model)"),zye.forEach(t),CMo=i(ie),z5=n(ie,"LI",{});var Wye=s(z5);Nte=n(Wye,"STRONG",{});var OJr=s(Nte);MMo=r(OJr,"mt5"),OJr.forEach(t),EMo=r(Wye," \u2014 "),jI=n(Wye,"A",{href:!0});var XJr=s(jI);yMo=r(XJr,"MT5ForConditionalGeneration"),XJr.forEach(t),wMo=r(Wye," (mT5 model)"),Wye.forEach(t),AMo=i(ie),W5=n(ie,"LI",{});var Qye=s(W5);jte=n(Qye,"STRONG",{});var VJr=s(jte);LMo=r(VJr,"pegasus"),VJr.forEach(t),BMo=r(Qye," \u2014 "),DI=n(Qye,"A",{href:!0});var zJr=s(DI);xMo=r(zJr,"PegasusForConditionalGeneration"),zJr.forEach(t),kMo=r(Qye," (Pegasus model)"),Qye.forEach(t),RMo=i(ie),Q5=n(ie,"LI",{});var Hye=s(Q5);Dte=n(Hye,"STRONG",{});var WJr=s(Dte);SMo=r(WJr,"plbart"),WJr.forEach(t),PMo=r(Hye," \u2014 "),qI=n(Hye,"A",{href:!0});var QJr=s(qI);$Mo=r(QJr,"PLBartForConditionalGeneration"),QJr.forEach(t),IMo=r(Hye," (PLBart model)"),Hye.forEach(t),NMo=i(ie),H5=n(ie,"LI",{});var Uye=s(H5);qte=n(Uye,"STRONG",{});var HJr=s(qte);jMo=r(HJr,"prophetnet"),HJr.forEach(t),DMo=r(Uye," \u2014 "),GI=n(Uye,"A",{href:!0});var UJr=s(GI);qMo=r(UJr,"ProphetNetForConditionalGeneration"),UJr.forEach(t),GMo=r(Uye," (ProphetNet model)"),Uye.forEach(t),OMo=i(ie),U5=n(ie,"LI",{});var Jye=s(U5);Gte=n(Jye,"STRONG",{});var JJr=s(Gte);XMo=r(JJr,"t5"),JJr.forEach(t),VMo=r(Jye," \u2014 "),OI=n(Jye,"A",{href:!0});var YJr=s(OI);zMo=r(YJr,"T5ForConditionalGeneration"),YJr.forEach(t),WMo=r(Jye," (T5 model)"),Jye.forEach(t),QMo=i(ie),J5=n(ie,"LI",{});var Yye=s(J5);Ote=n(Yye,"STRONG",{});var KJr=s(Ote);HMo=r(KJr,"xlm-prophetnet"),KJr.forEach(t),UMo=r(Yye," \u2014 "),XI=n(Yye,"A",{href:!0});var ZJr=s(XI);JMo=r(ZJr,"XLMProphetNetForConditionalGeneration"),ZJr.forEach(t),YMo=r(Yye," (XLMProphetNet model)"),Yye.forEach(t),ie.forEach(t),KMo=i(Vt),Y5=n(Vt,"P",{});var Kye=s(Y5);ZMo=r(Kye,"The model is set in evaluation mode by default using "),Xte=n(Kye,"CODE",{});var eYr=s(Xte);e4o=r(eYr,"model.eval()"),eYr.forEach(t),o4o=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vte=n(Kye,"CODE",{});var oYr=s(Vte);r4o=r(oYr,"model.train()"),oYr.forEach(t),Kye.forEach(t),t4o=i(Vt),zte=n(Vt,"P",{});var rYr=s(zte);a4o=r(rYr,"Examples:"),rYr.forEach(t),n4o=i(Vt),m(yy.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Qke=i(c),fd=n(c,"H2",{class:!0});var rPe=s(fd);K5=n(rPe,"A",{id:!0,class:!0,href:!0});var tYr=s(K5);Wte=n(tYr,"SPAN",{});var aYr=s(Wte);m(wy.$$.fragment,aYr),aYr.forEach(t),tYr.forEach(t),s4o=i(rPe),Qte=n(rPe,"SPAN",{});var nYr=s(Qte);l4o=r(nYr,"AutoModelForSequenceClassification"),nYr.forEach(t),rPe.forEach(t),Hke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(Ay.$$.fragment,rl),i4o=i(rl),md=n(rl,"P",{});var uW=s(md);d4o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Hte=n(uW,"CODE",{});var sYr=s(Hte);c4o=r(sYr,"from_pretrained()"),sYr.forEach(t),f4o=r(uW,"class method or the "),Ute=n(uW,"CODE",{});var lYr=s(Ute);m4o=r(lYr,"from_config()"),lYr.forEach(t),g4o=r(uW,`class
method.`),uW.forEach(t),h4o=i(rl),Ly=n(rl,"P",{});var tPe=s(Ly);p4o=r(tPe,"This class cannot be instantiated directly using "),Jte=n(tPe,"CODE",{});var iYr=s(Jte);_4o=r(iYr,"__init__()"),iYr.forEach(t),u4o=r(tPe," (throws an error)."),tPe.forEach(t),b4o=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(By.$$.fragment,tl),v4o=i(tl),Yte=n(tl,"P",{});var dYr=s(Yte);T4o=r(dYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dYr.forEach(t),F4o=i(tl),gd=n(tl,"P",{});var bW=s(gd);C4o=r(bW,`Note:
Loading a model from its configuration file does `),Kte=n(bW,"STRONG",{});var cYr=s(Kte);M4o=r(cYr,"not"),cYr.forEach(t),E4o=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zte=n(bW,"CODE",{});var fYr=s(Zte);y4o=r(fYr,"from_pretrained()"),fYr.forEach(t),w4o=r(bW,"to load the model weights."),bW.forEach(t),A4o=i(tl),eae=n(tl,"P",{});var mYr=s(eae);L4o=r(mYr,"Examples:"),mYr.forEach(t),B4o=i(tl),m(xy.$$.fragment,tl),tl.forEach(t),x4o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(ky.$$.fragment,zt),k4o=i(zt),oae=n(zt,"P",{});var gYr=s(oae);R4o=r(gYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gYr.forEach(t),S4o=i(zt),Ua=n(zt,"P",{});var TE=s(Ua);P4o=r(TE,"The model class to instantiate is selected based on the "),rae=n(TE,"CODE",{});var hYr=s(rae);$4o=r(hYr,"model_type"),hYr.forEach(t),I4o=r(TE,` property of the config object (either
passed as an argument or loaded from `),tae=n(TE,"CODE",{});var pYr=s(tae);N4o=r(pYr,"pretrained_model_name_or_path"),pYr.forEach(t),j4o=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aae=n(TE,"CODE",{});var _Yr=s(aae);D4o=r(_Yr,"pretrained_model_name_or_path"),_Yr.forEach(t),q4o=r(TE,":"),TE.forEach(t),G4o=i(zt),A=n(zt,"UL",{});var L=s(A);Z5=n(L,"LI",{});var Zye=s(Z5);nae=n(Zye,"STRONG",{});var uYr=s(nae);O4o=r(uYr,"albert"),uYr.forEach(t),X4o=r(Zye," \u2014 "),VI=n(Zye,"A",{href:!0});var bYr=s(VI);V4o=r(bYr,"AlbertForSequenceClassification"),bYr.forEach(t),z4o=r(Zye," (ALBERT model)"),Zye.forEach(t),W4o=i(L),e2=n(L,"LI",{});var ewe=s(e2);sae=n(ewe,"STRONG",{});var vYr=s(sae);Q4o=r(vYr,"bart"),vYr.forEach(t),H4o=r(ewe," \u2014 "),zI=n(ewe,"A",{href:!0});var TYr=s(zI);U4o=r(TYr,"BartForSequenceClassification"),TYr.forEach(t),J4o=r(ewe," (BART model)"),ewe.forEach(t),Y4o=i(L),o2=n(L,"LI",{});var owe=s(o2);lae=n(owe,"STRONG",{});var FYr=s(lae);K4o=r(FYr,"bert"),FYr.forEach(t),Z4o=r(owe," \u2014 "),WI=n(owe,"A",{href:!0});var CYr=s(WI);eEo=r(CYr,"BertForSequenceClassification"),CYr.forEach(t),oEo=r(owe," (BERT model)"),owe.forEach(t),rEo=i(L),r2=n(L,"LI",{});var rwe=s(r2);iae=n(rwe,"STRONG",{});var MYr=s(iae);tEo=r(MYr,"big_bird"),MYr.forEach(t),aEo=r(rwe," \u2014 "),QI=n(rwe,"A",{href:!0});var EYr=s(QI);nEo=r(EYr,"BigBirdForSequenceClassification"),EYr.forEach(t),sEo=r(rwe," (BigBird model)"),rwe.forEach(t),lEo=i(L),t2=n(L,"LI",{});var twe=s(t2);dae=n(twe,"STRONG",{});var yYr=s(dae);iEo=r(yYr,"bigbird_pegasus"),yYr.forEach(t),dEo=r(twe," \u2014 "),HI=n(twe,"A",{href:!0});var wYr=s(HI);cEo=r(wYr,"BigBirdPegasusForSequenceClassification"),wYr.forEach(t),fEo=r(twe," (BigBirdPegasus model)"),twe.forEach(t),mEo=i(L),a2=n(L,"LI",{});var awe=s(a2);cae=n(awe,"STRONG",{});var AYr=s(cae);gEo=r(AYr,"camembert"),AYr.forEach(t),hEo=r(awe," \u2014 "),UI=n(awe,"A",{href:!0});var LYr=s(UI);pEo=r(LYr,"CamembertForSequenceClassification"),LYr.forEach(t),_Eo=r(awe," (CamemBERT model)"),awe.forEach(t),uEo=i(L),n2=n(L,"LI",{});var nwe=s(n2);fae=n(nwe,"STRONG",{});var BYr=s(fae);bEo=r(BYr,"canine"),BYr.forEach(t),vEo=r(nwe," \u2014 "),JI=n(nwe,"A",{href:!0});var xYr=s(JI);TEo=r(xYr,"CanineForSequenceClassification"),xYr.forEach(t),FEo=r(nwe," (Canine model)"),nwe.forEach(t),CEo=i(L),s2=n(L,"LI",{});var swe=s(s2);mae=n(swe,"STRONG",{});var kYr=s(mae);MEo=r(kYr,"convbert"),kYr.forEach(t),EEo=r(swe," \u2014 "),YI=n(swe,"A",{href:!0});var RYr=s(YI);yEo=r(RYr,"ConvBertForSequenceClassification"),RYr.forEach(t),wEo=r(swe," (ConvBERT model)"),swe.forEach(t),AEo=i(L),l2=n(L,"LI",{});var lwe=s(l2);gae=n(lwe,"STRONG",{});var SYr=s(gae);LEo=r(SYr,"ctrl"),SYr.forEach(t),BEo=r(lwe," \u2014 "),KI=n(lwe,"A",{href:!0});var PYr=s(KI);xEo=r(PYr,"CTRLForSequenceClassification"),PYr.forEach(t),kEo=r(lwe," (CTRL model)"),lwe.forEach(t),REo=i(L),i2=n(L,"LI",{});var iwe=s(i2);hae=n(iwe,"STRONG",{});var $Yr=s(hae);SEo=r($Yr,"data2vec-text"),$Yr.forEach(t),PEo=r(iwe," \u2014 "),ZI=n(iwe,"A",{href:!0});var IYr=s(ZI);$Eo=r(IYr,"Data2VecTextForSequenceClassification"),IYr.forEach(t),IEo=r(iwe," (Data2VecText model)"),iwe.forEach(t),NEo=i(L),d2=n(L,"LI",{});var dwe=s(d2);pae=n(dwe,"STRONG",{});var NYr=s(pae);jEo=r(NYr,"deberta"),NYr.forEach(t),DEo=r(dwe," \u2014 "),eN=n(dwe,"A",{href:!0});var jYr=s(eN);qEo=r(jYr,"DebertaForSequenceClassification"),jYr.forEach(t),GEo=r(dwe," (DeBERTa model)"),dwe.forEach(t),OEo=i(L),c2=n(L,"LI",{});var cwe=s(c2);_ae=n(cwe,"STRONG",{});var DYr=s(_ae);XEo=r(DYr,"deberta-v2"),DYr.forEach(t),VEo=r(cwe," \u2014 "),oN=n(cwe,"A",{href:!0});var qYr=s(oN);zEo=r(qYr,"DebertaV2ForSequenceClassification"),qYr.forEach(t),WEo=r(cwe," (DeBERTa-v2 model)"),cwe.forEach(t),QEo=i(L),f2=n(L,"LI",{});var fwe=s(f2);uae=n(fwe,"STRONG",{});var GYr=s(uae);HEo=r(GYr,"distilbert"),GYr.forEach(t),UEo=r(fwe," \u2014 "),rN=n(fwe,"A",{href:!0});var OYr=s(rN);JEo=r(OYr,"DistilBertForSequenceClassification"),OYr.forEach(t),YEo=r(fwe," (DistilBERT model)"),fwe.forEach(t),KEo=i(L),m2=n(L,"LI",{});var mwe=s(m2);bae=n(mwe,"STRONG",{});var XYr=s(bae);ZEo=r(XYr,"electra"),XYr.forEach(t),e3o=r(mwe," \u2014 "),tN=n(mwe,"A",{href:!0});var VYr=s(tN);o3o=r(VYr,"ElectraForSequenceClassification"),VYr.forEach(t),r3o=r(mwe," (ELECTRA model)"),mwe.forEach(t),t3o=i(L),g2=n(L,"LI",{});var gwe=s(g2);vae=n(gwe,"STRONG",{});var zYr=s(vae);a3o=r(zYr,"flaubert"),zYr.forEach(t),n3o=r(gwe," \u2014 "),aN=n(gwe,"A",{href:!0});var WYr=s(aN);s3o=r(WYr,"FlaubertForSequenceClassification"),WYr.forEach(t),l3o=r(gwe," (FlauBERT model)"),gwe.forEach(t),i3o=i(L),h2=n(L,"LI",{});var hwe=s(h2);Tae=n(hwe,"STRONG",{});var QYr=s(Tae);d3o=r(QYr,"fnet"),QYr.forEach(t),c3o=r(hwe," \u2014 "),nN=n(hwe,"A",{href:!0});var HYr=s(nN);f3o=r(HYr,"FNetForSequenceClassification"),HYr.forEach(t),m3o=r(hwe," (FNet model)"),hwe.forEach(t),g3o=i(L),p2=n(L,"LI",{});var pwe=s(p2);Fae=n(pwe,"STRONG",{});var UYr=s(Fae);h3o=r(UYr,"funnel"),UYr.forEach(t),p3o=r(pwe," \u2014 "),sN=n(pwe,"A",{href:!0});var JYr=s(sN);_3o=r(JYr,"FunnelForSequenceClassification"),JYr.forEach(t),u3o=r(pwe," (Funnel Transformer model)"),pwe.forEach(t),b3o=i(L),_2=n(L,"LI",{});var _we=s(_2);Cae=n(_we,"STRONG",{});var YYr=s(Cae);v3o=r(YYr,"gpt2"),YYr.forEach(t),T3o=r(_we," \u2014 "),lN=n(_we,"A",{href:!0});var KYr=s(lN);F3o=r(KYr,"GPT2ForSequenceClassification"),KYr.forEach(t),C3o=r(_we," (OpenAI GPT-2 model)"),_we.forEach(t),M3o=i(L),u2=n(L,"LI",{});var uwe=s(u2);Mae=n(uwe,"STRONG",{});var ZYr=s(Mae);E3o=r(ZYr,"gpt_neo"),ZYr.forEach(t),y3o=r(uwe," \u2014 "),iN=n(uwe,"A",{href:!0});var eKr=s(iN);w3o=r(eKr,"GPTNeoForSequenceClassification"),eKr.forEach(t),A3o=r(uwe," (GPT Neo model)"),uwe.forEach(t),L3o=i(L),b2=n(L,"LI",{});var bwe=s(b2);Eae=n(bwe,"STRONG",{});var oKr=s(Eae);B3o=r(oKr,"gptj"),oKr.forEach(t),x3o=r(bwe," \u2014 "),dN=n(bwe,"A",{href:!0});var rKr=s(dN);k3o=r(rKr,"GPTJForSequenceClassification"),rKr.forEach(t),R3o=r(bwe," (GPT-J model)"),bwe.forEach(t),S3o=i(L),v2=n(L,"LI",{});var vwe=s(v2);yae=n(vwe,"STRONG",{});var tKr=s(yae);P3o=r(tKr,"ibert"),tKr.forEach(t),$3o=r(vwe," \u2014 "),cN=n(vwe,"A",{href:!0});var aKr=s(cN);I3o=r(aKr,"IBertForSequenceClassification"),aKr.forEach(t),N3o=r(vwe," (I-BERT model)"),vwe.forEach(t),j3o=i(L),T2=n(L,"LI",{});var Twe=s(T2);wae=n(Twe,"STRONG",{});var nKr=s(wae);D3o=r(nKr,"layoutlm"),nKr.forEach(t),q3o=r(Twe," \u2014 "),fN=n(Twe,"A",{href:!0});var sKr=s(fN);G3o=r(sKr,"LayoutLMForSequenceClassification"),sKr.forEach(t),O3o=r(Twe," (LayoutLM model)"),Twe.forEach(t),X3o=i(L),F2=n(L,"LI",{});var Fwe=s(F2);Aae=n(Fwe,"STRONG",{});var lKr=s(Aae);V3o=r(lKr,"layoutlmv2"),lKr.forEach(t),z3o=r(Fwe," \u2014 "),mN=n(Fwe,"A",{href:!0});var iKr=s(mN);W3o=r(iKr,"LayoutLMv2ForSequenceClassification"),iKr.forEach(t),Q3o=r(Fwe," (LayoutLMv2 model)"),Fwe.forEach(t),H3o=i(L),C2=n(L,"LI",{});var Cwe=s(C2);Lae=n(Cwe,"STRONG",{});var dKr=s(Lae);U3o=r(dKr,"led"),dKr.forEach(t),J3o=r(Cwe," \u2014 "),gN=n(Cwe,"A",{href:!0});var cKr=s(gN);Y3o=r(cKr,"LEDForSequenceClassification"),cKr.forEach(t),K3o=r(Cwe," (LED model)"),Cwe.forEach(t),Z3o=i(L),M2=n(L,"LI",{});var Mwe=s(M2);Bae=n(Mwe,"STRONG",{});var fKr=s(Bae);eyo=r(fKr,"longformer"),fKr.forEach(t),oyo=r(Mwe," \u2014 "),hN=n(Mwe,"A",{href:!0});var mKr=s(hN);ryo=r(mKr,"LongformerForSequenceClassification"),mKr.forEach(t),tyo=r(Mwe," (Longformer model)"),Mwe.forEach(t),ayo=i(L),E2=n(L,"LI",{});var Ewe=s(E2);xae=n(Ewe,"STRONG",{});var gKr=s(xae);nyo=r(gKr,"mbart"),gKr.forEach(t),syo=r(Ewe," \u2014 "),pN=n(Ewe,"A",{href:!0});var hKr=s(pN);lyo=r(hKr,"MBartForSequenceClassification"),hKr.forEach(t),iyo=r(Ewe," (mBART model)"),Ewe.forEach(t),dyo=i(L),y2=n(L,"LI",{});var ywe=s(y2);kae=n(ywe,"STRONG",{});var pKr=s(kae);cyo=r(pKr,"megatron-bert"),pKr.forEach(t),fyo=r(ywe," \u2014 "),_N=n(ywe,"A",{href:!0});var _Kr=s(_N);myo=r(_Kr,"MegatronBertForSequenceClassification"),_Kr.forEach(t),gyo=r(ywe," (MegatronBert model)"),ywe.forEach(t),hyo=i(L),w2=n(L,"LI",{});var wwe=s(w2);Rae=n(wwe,"STRONG",{});var uKr=s(Rae);pyo=r(uKr,"mobilebert"),uKr.forEach(t),_yo=r(wwe," \u2014 "),uN=n(wwe,"A",{href:!0});var bKr=s(uN);uyo=r(bKr,"MobileBertForSequenceClassification"),bKr.forEach(t),byo=r(wwe," (MobileBERT model)"),wwe.forEach(t),vyo=i(L),A2=n(L,"LI",{});var Awe=s(A2);Sae=n(Awe,"STRONG",{});var vKr=s(Sae);Tyo=r(vKr,"mpnet"),vKr.forEach(t),Fyo=r(Awe," \u2014 "),bN=n(Awe,"A",{href:!0});var TKr=s(bN);Cyo=r(TKr,"MPNetForSequenceClassification"),TKr.forEach(t),Myo=r(Awe," (MPNet model)"),Awe.forEach(t),Eyo=i(L),L2=n(L,"LI",{});var Lwe=s(L2);Pae=n(Lwe,"STRONG",{});var FKr=s(Pae);yyo=r(FKr,"nystromformer"),FKr.forEach(t),wyo=r(Lwe," \u2014 "),vN=n(Lwe,"A",{href:!0});var CKr=s(vN);Ayo=r(CKr,"NystromformerForSequenceClassification"),CKr.forEach(t),Lyo=r(Lwe," (Nystromformer model)"),Lwe.forEach(t),Byo=i(L),B2=n(L,"LI",{});var Bwe=s(B2);$ae=n(Bwe,"STRONG",{});var MKr=s($ae);xyo=r(MKr,"openai-gpt"),MKr.forEach(t),kyo=r(Bwe," \u2014 "),TN=n(Bwe,"A",{href:!0});var EKr=s(TN);Ryo=r(EKr,"OpenAIGPTForSequenceClassification"),EKr.forEach(t),Syo=r(Bwe," (OpenAI GPT model)"),Bwe.forEach(t),Pyo=i(L),x2=n(L,"LI",{});var xwe=s(x2);Iae=n(xwe,"STRONG",{});var yKr=s(Iae);$yo=r(yKr,"perceiver"),yKr.forEach(t),Iyo=r(xwe," \u2014 "),FN=n(xwe,"A",{href:!0});var wKr=s(FN);Nyo=r(wKr,"PerceiverForSequenceClassification"),wKr.forEach(t),jyo=r(xwe," (Perceiver model)"),xwe.forEach(t),Dyo=i(L),k2=n(L,"LI",{});var kwe=s(k2);Nae=n(kwe,"STRONG",{});var AKr=s(Nae);qyo=r(AKr,"plbart"),AKr.forEach(t),Gyo=r(kwe," \u2014 "),CN=n(kwe,"A",{href:!0});var LKr=s(CN);Oyo=r(LKr,"PLBartForSequenceClassification"),LKr.forEach(t),Xyo=r(kwe," (PLBart model)"),kwe.forEach(t),Vyo=i(L),R2=n(L,"LI",{});var Rwe=s(R2);jae=n(Rwe,"STRONG",{});var BKr=s(jae);zyo=r(BKr,"qdqbert"),BKr.forEach(t),Wyo=r(Rwe," \u2014 "),MN=n(Rwe,"A",{href:!0});var xKr=s(MN);Qyo=r(xKr,"QDQBertForSequenceClassification"),xKr.forEach(t),Hyo=r(Rwe," (QDQBert model)"),Rwe.forEach(t),Uyo=i(L),S2=n(L,"LI",{});var Swe=s(S2);Dae=n(Swe,"STRONG",{});var kKr=s(Dae);Jyo=r(kKr,"reformer"),kKr.forEach(t),Yyo=r(Swe," \u2014 "),EN=n(Swe,"A",{href:!0});var RKr=s(EN);Kyo=r(RKr,"ReformerForSequenceClassification"),RKr.forEach(t),Zyo=r(Swe," (Reformer model)"),Swe.forEach(t),ewo=i(L),P2=n(L,"LI",{});var Pwe=s(P2);qae=n(Pwe,"STRONG",{});var SKr=s(qae);owo=r(SKr,"rembert"),SKr.forEach(t),rwo=r(Pwe," \u2014 "),yN=n(Pwe,"A",{href:!0});var PKr=s(yN);two=r(PKr,"RemBertForSequenceClassification"),PKr.forEach(t),awo=r(Pwe," (RemBERT model)"),Pwe.forEach(t),nwo=i(L),$2=n(L,"LI",{});var $we=s($2);Gae=n($we,"STRONG",{});var $Kr=s(Gae);swo=r($Kr,"roberta"),$Kr.forEach(t),lwo=r($we," \u2014 "),wN=n($we,"A",{href:!0});var IKr=s(wN);iwo=r(IKr,"RobertaForSequenceClassification"),IKr.forEach(t),dwo=r($we," (RoBERTa model)"),$we.forEach(t),cwo=i(L),I2=n(L,"LI",{});var Iwe=s(I2);Oae=n(Iwe,"STRONG",{});var NKr=s(Oae);fwo=r(NKr,"roformer"),NKr.forEach(t),mwo=r(Iwe," \u2014 "),AN=n(Iwe,"A",{href:!0});var jKr=s(AN);gwo=r(jKr,"RoFormerForSequenceClassification"),jKr.forEach(t),hwo=r(Iwe," (RoFormer model)"),Iwe.forEach(t),pwo=i(L),N2=n(L,"LI",{});var Nwe=s(N2);Xae=n(Nwe,"STRONG",{});var DKr=s(Xae);_wo=r(DKr,"squeezebert"),DKr.forEach(t),uwo=r(Nwe," \u2014 "),LN=n(Nwe,"A",{href:!0});var qKr=s(LN);bwo=r(qKr,"SqueezeBertForSequenceClassification"),qKr.forEach(t),vwo=r(Nwe," (SqueezeBERT model)"),Nwe.forEach(t),Two=i(L),j2=n(L,"LI",{});var jwe=s(j2);Vae=n(jwe,"STRONG",{});var GKr=s(Vae);Fwo=r(GKr,"tapas"),GKr.forEach(t),Cwo=r(jwe," \u2014 "),BN=n(jwe,"A",{href:!0});var OKr=s(BN);Mwo=r(OKr,"TapasForSequenceClassification"),OKr.forEach(t),Ewo=r(jwe," (TAPAS model)"),jwe.forEach(t),ywo=i(L),D2=n(L,"LI",{});var Dwe=s(D2);zae=n(Dwe,"STRONG",{});var XKr=s(zae);wwo=r(XKr,"transfo-xl"),XKr.forEach(t),Awo=r(Dwe," \u2014 "),xN=n(Dwe,"A",{href:!0});var VKr=s(xN);Lwo=r(VKr,"TransfoXLForSequenceClassification"),VKr.forEach(t),Bwo=r(Dwe," (Transformer-XL model)"),Dwe.forEach(t),xwo=i(L),q2=n(L,"LI",{});var qwe=s(q2);Wae=n(qwe,"STRONG",{});var zKr=s(Wae);kwo=r(zKr,"xlm"),zKr.forEach(t),Rwo=r(qwe," \u2014 "),kN=n(qwe,"A",{href:!0});var WKr=s(kN);Swo=r(WKr,"XLMForSequenceClassification"),WKr.forEach(t),Pwo=r(qwe," (XLM model)"),qwe.forEach(t),$wo=i(L),G2=n(L,"LI",{});var Gwe=s(G2);Qae=n(Gwe,"STRONG",{});var QKr=s(Qae);Iwo=r(QKr,"xlm-roberta"),QKr.forEach(t),Nwo=r(Gwe," \u2014 "),RN=n(Gwe,"A",{href:!0});var HKr=s(RN);jwo=r(HKr,"XLMRobertaForSequenceClassification"),HKr.forEach(t),Dwo=r(Gwe," (XLM-RoBERTa model)"),Gwe.forEach(t),qwo=i(L),O2=n(L,"LI",{});var Owe=s(O2);Hae=n(Owe,"STRONG",{});var UKr=s(Hae);Gwo=r(UKr,"xlm-roberta-xl"),UKr.forEach(t),Owo=r(Owe," \u2014 "),SN=n(Owe,"A",{href:!0});var JKr=s(SN);Xwo=r(JKr,"XLMRobertaXLForSequenceClassification"),JKr.forEach(t),Vwo=r(Owe," (XLM-RoBERTa-XL model)"),Owe.forEach(t),zwo=i(L),X2=n(L,"LI",{});var Xwe=s(X2);Uae=n(Xwe,"STRONG",{});var YKr=s(Uae);Wwo=r(YKr,"xlnet"),YKr.forEach(t),Qwo=r(Xwe," \u2014 "),PN=n(Xwe,"A",{href:!0});var KKr=s(PN);Hwo=r(KKr,"XLNetForSequenceClassification"),KKr.forEach(t),Uwo=r(Xwe," (XLNet model)"),Xwe.forEach(t),Jwo=i(L),V2=n(L,"LI",{});var Vwe=s(V2);Jae=n(Vwe,"STRONG",{});var ZKr=s(Jae);Ywo=r(ZKr,"yoso"),ZKr.forEach(t),Kwo=r(Vwe," \u2014 "),$N=n(Vwe,"A",{href:!0});var eZr=s($N);Zwo=r(eZr,"YosoForSequenceClassification"),eZr.forEach(t),eAo=r(Vwe," (YOSO model)"),Vwe.forEach(t),L.forEach(t),oAo=i(zt),z2=n(zt,"P",{});var zwe=s(z2);rAo=r(zwe,"The model is set in evaluation mode by default using "),Yae=n(zwe,"CODE",{});var oZr=s(Yae);tAo=r(oZr,"model.eval()"),oZr.forEach(t),aAo=r(zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kae=n(zwe,"CODE",{});var rZr=s(Kae);nAo=r(rZr,"model.train()"),rZr.forEach(t),zwe.forEach(t),sAo=i(zt),Zae=n(zt,"P",{});var tZr=s(Zae);lAo=r(tZr,"Examples:"),tZr.forEach(t),iAo=i(zt),m(Ry.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Uke=i(c),hd=n(c,"H2",{class:!0});var aPe=s(hd);W2=n(aPe,"A",{id:!0,class:!0,href:!0});var aZr=s(W2);ene=n(aZr,"SPAN",{});var nZr=s(ene);m(Sy.$$.fragment,nZr),nZr.forEach(t),aZr.forEach(t),dAo=i(aPe),one=n(aPe,"SPAN",{});var sZr=s(one);cAo=r(sZr,"AutoModelForMultipleChoice"),sZr.forEach(t),aPe.forEach(t),Jke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Py.$$.fragment,al),fAo=i(al),pd=n(al,"P",{});var vW=s(pd);mAo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rne=n(vW,"CODE",{});var lZr=s(rne);gAo=r(lZr,"from_pretrained()"),lZr.forEach(t),hAo=r(vW,"class method or the "),tne=n(vW,"CODE",{});var iZr=s(tne);pAo=r(iZr,"from_config()"),iZr.forEach(t),_Ao=r(vW,`class
method.`),vW.forEach(t),uAo=i(al),$y=n(al,"P",{});var nPe=s($y);bAo=r(nPe,"This class cannot be instantiated directly using "),ane=n(nPe,"CODE",{});var dZr=s(ane);vAo=r(dZr,"__init__()"),dZr.forEach(t),TAo=r(nPe," (throws an error)."),nPe.forEach(t),FAo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Iy.$$.fragment,nl),CAo=i(nl),nne=n(nl,"P",{});var cZr=s(nne);MAo=r(cZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cZr.forEach(t),EAo=i(nl),_d=n(nl,"P",{});var TW=s(_d);yAo=r(TW,`Note:
Loading a model from its configuration file does `),sne=n(TW,"STRONG",{});var fZr=s(sne);wAo=r(fZr,"not"),fZr.forEach(t),AAo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),lne=n(TW,"CODE",{});var mZr=s(lne);LAo=r(mZr,"from_pretrained()"),mZr.forEach(t),BAo=r(TW,"to load the model weights."),TW.forEach(t),xAo=i(nl),ine=n(nl,"P",{});var gZr=s(ine);kAo=r(gZr,"Examples:"),gZr.forEach(t),RAo=i(nl),m(Ny.$$.fragment,nl),nl.forEach(t),SAo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(jy.$$.fragment,Wt),PAo=i(Wt),dne=n(Wt,"P",{});var hZr=s(dne);$Ao=r(hZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hZr.forEach(t),IAo=i(Wt),Ja=n(Wt,"P",{});var FE=s(Ja);NAo=r(FE,"The model class to instantiate is selected based on the "),cne=n(FE,"CODE",{});var pZr=s(cne);jAo=r(pZr,"model_type"),pZr.forEach(t),DAo=r(FE,` property of the config object (either
passed as an argument or loaded from `),fne=n(FE,"CODE",{});var _Zr=s(fne);qAo=r(_Zr,"pretrained_model_name_or_path"),_Zr.forEach(t),GAo=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=n(FE,"CODE",{});var uZr=s(mne);OAo=r(uZr,"pretrained_model_name_or_path"),uZr.forEach(t),XAo=r(FE,":"),FE.forEach(t),VAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);Q2=n(O,"LI",{});var Wwe=s(Q2);gne=n(Wwe,"STRONG",{});var bZr=s(gne);zAo=r(bZr,"albert"),bZr.forEach(t),WAo=r(Wwe," \u2014 "),IN=n(Wwe,"A",{href:!0});var vZr=s(IN);QAo=r(vZr,"AlbertForMultipleChoice"),vZr.forEach(t),HAo=r(Wwe," (ALBERT model)"),Wwe.forEach(t),UAo=i(O),H2=n(O,"LI",{});var Qwe=s(H2);hne=n(Qwe,"STRONG",{});var TZr=s(hne);JAo=r(TZr,"bert"),TZr.forEach(t),YAo=r(Qwe," \u2014 "),NN=n(Qwe,"A",{href:!0});var FZr=s(NN);KAo=r(FZr,"BertForMultipleChoice"),FZr.forEach(t),ZAo=r(Qwe," (BERT model)"),Qwe.forEach(t),e0o=i(O),U2=n(O,"LI",{});var Hwe=s(U2);pne=n(Hwe,"STRONG",{});var CZr=s(pne);o0o=r(CZr,"big_bird"),CZr.forEach(t),r0o=r(Hwe," \u2014 "),jN=n(Hwe,"A",{href:!0});var MZr=s(jN);t0o=r(MZr,"BigBirdForMultipleChoice"),MZr.forEach(t),a0o=r(Hwe," (BigBird model)"),Hwe.forEach(t),n0o=i(O),J2=n(O,"LI",{});var Uwe=s(J2);_ne=n(Uwe,"STRONG",{});var EZr=s(_ne);s0o=r(EZr,"camembert"),EZr.forEach(t),l0o=r(Uwe," \u2014 "),DN=n(Uwe,"A",{href:!0});var yZr=s(DN);i0o=r(yZr,"CamembertForMultipleChoice"),yZr.forEach(t),d0o=r(Uwe," (CamemBERT model)"),Uwe.forEach(t),c0o=i(O),Y2=n(O,"LI",{});var Jwe=s(Y2);une=n(Jwe,"STRONG",{});var wZr=s(une);f0o=r(wZr,"canine"),wZr.forEach(t),m0o=r(Jwe," \u2014 "),qN=n(Jwe,"A",{href:!0});var AZr=s(qN);g0o=r(AZr,"CanineForMultipleChoice"),AZr.forEach(t),h0o=r(Jwe," (Canine model)"),Jwe.forEach(t),p0o=i(O),K2=n(O,"LI",{});var Ywe=s(K2);bne=n(Ywe,"STRONG",{});var LZr=s(bne);_0o=r(LZr,"convbert"),LZr.forEach(t),u0o=r(Ywe," \u2014 "),GN=n(Ywe,"A",{href:!0});var BZr=s(GN);b0o=r(BZr,"ConvBertForMultipleChoice"),BZr.forEach(t),v0o=r(Ywe," (ConvBERT model)"),Ywe.forEach(t),T0o=i(O),Z2=n(O,"LI",{});var Kwe=s(Z2);vne=n(Kwe,"STRONG",{});var xZr=s(vne);F0o=r(xZr,"data2vec-text"),xZr.forEach(t),C0o=r(Kwe," \u2014 "),ON=n(Kwe,"A",{href:!0});var kZr=s(ON);M0o=r(kZr,"Data2VecTextForMultipleChoice"),kZr.forEach(t),E0o=r(Kwe," (Data2VecText model)"),Kwe.forEach(t),y0o=i(O),e1=n(O,"LI",{});var Zwe=s(e1);Tne=n(Zwe,"STRONG",{});var RZr=s(Tne);w0o=r(RZr,"distilbert"),RZr.forEach(t),A0o=r(Zwe," \u2014 "),XN=n(Zwe,"A",{href:!0});var SZr=s(XN);L0o=r(SZr,"DistilBertForMultipleChoice"),SZr.forEach(t),B0o=r(Zwe," (DistilBERT model)"),Zwe.forEach(t),x0o=i(O),o1=n(O,"LI",{});var eAe=s(o1);Fne=n(eAe,"STRONG",{});var PZr=s(Fne);k0o=r(PZr,"electra"),PZr.forEach(t),R0o=r(eAe," \u2014 "),VN=n(eAe,"A",{href:!0});var $Zr=s(VN);S0o=r($Zr,"ElectraForMultipleChoice"),$Zr.forEach(t),P0o=r(eAe," (ELECTRA model)"),eAe.forEach(t),$0o=i(O),r1=n(O,"LI",{});var oAe=s(r1);Cne=n(oAe,"STRONG",{});var IZr=s(Cne);I0o=r(IZr,"flaubert"),IZr.forEach(t),N0o=r(oAe," \u2014 "),zN=n(oAe,"A",{href:!0});var NZr=s(zN);j0o=r(NZr,"FlaubertForMultipleChoice"),NZr.forEach(t),D0o=r(oAe," (FlauBERT model)"),oAe.forEach(t),q0o=i(O),t1=n(O,"LI",{});var rAe=s(t1);Mne=n(rAe,"STRONG",{});var jZr=s(Mne);G0o=r(jZr,"fnet"),jZr.forEach(t),O0o=r(rAe," \u2014 "),WN=n(rAe,"A",{href:!0});var DZr=s(WN);X0o=r(DZr,"FNetForMultipleChoice"),DZr.forEach(t),V0o=r(rAe," (FNet model)"),rAe.forEach(t),z0o=i(O),a1=n(O,"LI",{});var tAe=s(a1);Ene=n(tAe,"STRONG",{});var qZr=s(Ene);W0o=r(qZr,"funnel"),qZr.forEach(t),Q0o=r(tAe," \u2014 "),QN=n(tAe,"A",{href:!0});var GZr=s(QN);H0o=r(GZr,"FunnelForMultipleChoice"),GZr.forEach(t),U0o=r(tAe," (Funnel Transformer model)"),tAe.forEach(t),J0o=i(O),n1=n(O,"LI",{});var aAe=s(n1);yne=n(aAe,"STRONG",{});var OZr=s(yne);Y0o=r(OZr,"ibert"),OZr.forEach(t),K0o=r(aAe," \u2014 "),HN=n(aAe,"A",{href:!0});var XZr=s(HN);Z0o=r(XZr,"IBertForMultipleChoice"),XZr.forEach(t),eLo=r(aAe," (I-BERT model)"),aAe.forEach(t),oLo=i(O),s1=n(O,"LI",{});var nAe=s(s1);wne=n(nAe,"STRONG",{});var VZr=s(wne);rLo=r(VZr,"longformer"),VZr.forEach(t),tLo=r(nAe," \u2014 "),UN=n(nAe,"A",{href:!0});var zZr=s(UN);aLo=r(zZr,"LongformerForMultipleChoice"),zZr.forEach(t),nLo=r(nAe," (Longformer model)"),nAe.forEach(t),sLo=i(O),l1=n(O,"LI",{});var sAe=s(l1);Ane=n(sAe,"STRONG",{});var WZr=s(Ane);lLo=r(WZr,"megatron-bert"),WZr.forEach(t),iLo=r(sAe," \u2014 "),JN=n(sAe,"A",{href:!0});var QZr=s(JN);dLo=r(QZr,"MegatronBertForMultipleChoice"),QZr.forEach(t),cLo=r(sAe," (MegatronBert model)"),sAe.forEach(t),fLo=i(O),i1=n(O,"LI",{});var lAe=s(i1);Lne=n(lAe,"STRONG",{});var HZr=s(Lne);mLo=r(HZr,"mobilebert"),HZr.forEach(t),gLo=r(lAe," \u2014 "),YN=n(lAe,"A",{href:!0});var UZr=s(YN);hLo=r(UZr,"MobileBertForMultipleChoice"),UZr.forEach(t),pLo=r(lAe," (MobileBERT model)"),lAe.forEach(t),_Lo=i(O),d1=n(O,"LI",{});var iAe=s(d1);Bne=n(iAe,"STRONG",{});var JZr=s(Bne);uLo=r(JZr,"mpnet"),JZr.forEach(t),bLo=r(iAe," \u2014 "),KN=n(iAe,"A",{href:!0});var YZr=s(KN);vLo=r(YZr,"MPNetForMultipleChoice"),YZr.forEach(t),TLo=r(iAe," (MPNet model)"),iAe.forEach(t),FLo=i(O),c1=n(O,"LI",{});var dAe=s(c1);xne=n(dAe,"STRONG",{});var KZr=s(xne);CLo=r(KZr,"nystromformer"),KZr.forEach(t),MLo=r(dAe," \u2014 "),ZN=n(dAe,"A",{href:!0});var ZZr=s(ZN);ELo=r(ZZr,"NystromformerForMultipleChoice"),ZZr.forEach(t),yLo=r(dAe," (Nystromformer model)"),dAe.forEach(t),wLo=i(O),f1=n(O,"LI",{});var cAe=s(f1);kne=n(cAe,"STRONG",{});var eet=s(kne);ALo=r(eet,"qdqbert"),eet.forEach(t),LLo=r(cAe," \u2014 "),ej=n(cAe,"A",{href:!0});var oet=s(ej);BLo=r(oet,"QDQBertForMultipleChoice"),oet.forEach(t),xLo=r(cAe," (QDQBert model)"),cAe.forEach(t),kLo=i(O),m1=n(O,"LI",{});var fAe=s(m1);Rne=n(fAe,"STRONG",{});var ret=s(Rne);RLo=r(ret,"rembert"),ret.forEach(t),SLo=r(fAe," \u2014 "),oj=n(fAe,"A",{href:!0});var tet=s(oj);PLo=r(tet,"RemBertForMultipleChoice"),tet.forEach(t),$Lo=r(fAe," (RemBERT model)"),fAe.forEach(t),ILo=i(O),g1=n(O,"LI",{});var mAe=s(g1);Sne=n(mAe,"STRONG",{});var aet=s(Sne);NLo=r(aet,"roberta"),aet.forEach(t),jLo=r(mAe," \u2014 "),rj=n(mAe,"A",{href:!0});var net=s(rj);DLo=r(net,"RobertaForMultipleChoice"),net.forEach(t),qLo=r(mAe," (RoBERTa model)"),mAe.forEach(t),GLo=i(O),h1=n(O,"LI",{});var gAe=s(h1);Pne=n(gAe,"STRONG",{});var set=s(Pne);OLo=r(set,"roformer"),set.forEach(t),XLo=r(gAe," \u2014 "),tj=n(gAe,"A",{href:!0});var iet=s(tj);VLo=r(iet,"RoFormerForMultipleChoice"),iet.forEach(t),zLo=r(gAe," (RoFormer model)"),gAe.forEach(t),WLo=i(O),p1=n(O,"LI",{});var hAe=s(p1);$ne=n(hAe,"STRONG",{});var det=s($ne);QLo=r(det,"squeezebert"),det.forEach(t),HLo=r(hAe," \u2014 "),aj=n(hAe,"A",{href:!0});var cet=s(aj);ULo=r(cet,"SqueezeBertForMultipleChoice"),cet.forEach(t),JLo=r(hAe," (SqueezeBERT model)"),hAe.forEach(t),YLo=i(O),_1=n(O,"LI",{});var pAe=s(_1);Ine=n(pAe,"STRONG",{});var fet=s(Ine);KLo=r(fet,"xlm"),fet.forEach(t),ZLo=r(pAe," \u2014 "),nj=n(pAe,"A",{href:!0});var met=s(nj);e7o=r(met,"XLMForMultipleChoice"),met.forEach(t),o7o=r(pAe," (XLM model)"),pAe.forEach(t),r7o=i(O),u1=n(O,"LI",{});var _Ae=s(u1);Nne=n(_Ae,"STRONG",{});var get=s(Nne);t7o=r(get,"xlm-roberta"),get.forEach(t),a7o=r(_Ae," \u2014 "),sj=n(_Ae,"A",{href:!0});var het=s(sj);n7o=r(het,"XLMRobertaForMultipleChoice"),het.forEach(t),s7o=r(_Ae," (XLM-RoBERTa model)"),_Ae.forEach(t),l7o=i(O),b1=n(O,"LI",{});var uAe=s(b1);jne=n(uAe,"STRONG",{});var pet=s(jne);i7o=r(pet,"xlm-roberta-xl"),pet.forEach(t),d7o=r(uAe," \u2014 "),lj=n(uAe,"A",{href:!0});var _et=s(lj);c7o=r(_et,"XLMRobertaXLForMultipleChoice"),_et.forEach(t),f7o=r(uAe," (XLM-RoBERTa-XL model)"),uAe.forEach(t),m7o=i(O),v1=n(O,"LI",{});var bAe=s(v1);Dne=n(bAe,"STRONG",{});var uet=s(Dne);g7o=r(uet,"xlnet"),uet.forEach(t),h7o=r(bAe," \u2014 "),ij=n(bAe,"A",{href:!0});var bet=s(ij);p7o=r(bet,"XLNetForMultipleChoice"),bet.forEach(t),_7o=r(bAe," (XLNet model)"),bAe.forEach(t),u7o=i(O),T1=n(O,"LI",{});var vAe=s(T1);qne=n(vAe,"STRONG",{});var vet=s(qne);b7o=r(vet,"yoso"),vet.forEach(t),v7o=r(vAe," \u2014 "),dj=n(vAe,"A",{href:!0});var Tet=s(dj);T7o=r(Tet,"YosoForMultipleChoice"),Tet.forEach(t),F7o=r(vAe," (YOSO model)"),vAe.forEach(t),O.forEach(t),C7o=i(Wt),F1=n(Wt,"P",{});var TAe=s(F1);M7o=r(TAe,"The model is set in evaluation mode by default using "),Gne=n(TAe,"CODE",{});var Fet=s(Gne);E7o=r(Fet,"model.eval()"),Fet.forEach(t),y7o=r(TAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=n(TAe,"CODE",{});var Cet=s(One);w7o=r(Cet,"model.train()"),Cet.forEach(t),TAe.forEach(t),A7o=i(Wt),Xne=n(Wt,"P",{});var Met=s(Xne);L7o=r(Met,"Examples:"),Met.forEach(t),B7o=i(Wt),m(Dy.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Yke=i(c),ud=n(c,"H2",{class:!0});var sPe=s(ud);C1=n(sPe,"A",{id:!0,class:!0,href:!0});var Eet=s(C1);Vne=n(Eet,"SPAN",{});var yet=s(Vne);m(qy.$$.fragment,yet),yet.forEach(t),Eet.forEach(t),x7o=i(sPe),zne=n(sPe,"SPAN",{});var wet=s(zne);k7o=r(wet,"AutoModelForNextSentencePrediction"),wet.forEach(t),sPe.forEach(t),Kke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(Gy.$$.fragment,sl),R7o=i(sl),bd=n(sl,"P",{});var FW=s(bd);S7o=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Wne=n(FW,"CODE",{});var Aet=s(Wne);P7o=r(Aet,"from_pretrained()"),Aet.forEach(t),$7o=r(FW,"class method or the "),Qne=n(FW,"CODE",{});var Let=s(Qne);I7o=r(Let,"from_config()"),Let.forEach(t),N7o=r(FW,`class
method.`),FW.forEach(t),j7o=i(sl),Oy=n(sl,"P",{});var lPe=s(Oy);D7o=r(lPe,"This class cannot be instantiated directly using "),Hne=n(lPe,"CODE",{});var Bet=s(Hne);q7o=r(Bet,"__init__()"),Bet.forEach(t),G7o=r(lPe," (throws an error)."),lPe.forEach(t),O7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Xy.$$.fragment,ll),X7o=i(ll),Une=n(ll,"P",{});var xet=s(Une);V7o=r(xet,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xet.forEach(t),z7o=i(ll),vd=n(ll,"P",{});var CW=s(vd);W7o=r(CW,`Note:
Loading a model from its configuration file does `),Jne=n(CW,"STRONG",{});var ket=s(Jne);Q7o=r(ket,"not"),ket.forEach(t),H7o=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yne=n(CW,"CODE",{});var Ret=s(Yne);U7o=r(Ret,"from_pretrained()"),Ret.forEach(t),J7o=r(CW,"to load the model weights."),CW.forEach(t),Y7o=i(ll),Kne=n(ll,"P",{});var Set=s(Kne);K7o=r(Set,"Examples:"),Set.forEach(t),Z7o=i(ll),m(Vy.$$.fragment,ll),ll.forEach(t),e8o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(zy.$$.fragment,Qt),o8o=i(Qt),Zne=n(Qt,"P",{});var Pet=s(Zne);r8o=r(Pet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pet.forEach(t),t8o=i(Qt),Ya=n(Qt,"P",{});var CE=s(Ya);a8o=r(CE,"The model class to instantiate is selected based on the "),ese=n(CE,"CODE",{});var $et=s(ese);n8o=r($et,"model_type"),$et.forEach(t),s8o=r(CE,` property of the config object (either
passed as an argument or loaded from `),ose=n(CE,"CODE",{});var Iet=s(ose);l8o=r(Iet,"pretrained_model_name_or_path"),Iet.forEach(t),i8o=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=n(CE,"CODE",{});var Net=s(rse);d8o=r(Net,"pretrained_model_name_or_path"),Net.forEach(t),c8o=r(CE,":"),CE.forEach(t),f8o=i(Qt),da=n(Qt,"UL",{});var il=s(da);M1=n(il,"LI",{});var FAe=s(M1);tse=n(FAe,"STRONG",{});var jet=s(tse);m8o=r(jet,"bert"),jet.forEach(t),g8o=r(FAe," \u2014 "),cj=n(FAe,"A",{href:!0});var Det=s(cj);h8o=r(Det,"BertForNextSentencePrediction"),Det.forEach(t),p8o=r(FAe," (BERT model)"),FAe.forEach(t),_8o=i(il),E1=n(il,"LI",{});var CAe=s(E1);ase=n(CAe,"STRONG",{});var qet=s(ase);u8o=r(qet,"fnet"),qet.forEach(t),b8o=r(CAe," \u2014 "),fj=n(CAe,"A",{href:!0});var Get=s(fj);v8o=r(Get,"FNetForNextSentencePrediction"),Get.forEach(t),T8o=r(CAe," (FNet model)"),CAe.forEach(t),F8o=i(il),y1=n(il,"LI",{});var MAe=s(y1);nse=n(MAe,"STRONG",{});var Oet=s(nse);C8o=r(Oet,"megatron-bert"),Oet.forEach(t),M8o=r(MAe," \u2014 "),mj=n(MAe,"A",{href:!0});var Xet=s(mj);E8o=r(Xet,"MegatronBertForNextSentencePrediction"),Xet.forEach(t),y8o=r(MAe," (MegatronBert model)"),MAe.forEach(t),w8o=i(il),w1=n(il,"LI",{});var EAe=s(w1);sse=n(EAe,"STRONG",{});var Vet=s(sse);A8o=r(Vet,"mobilebert"),Vet.forEach(t),L8o=r(EAe," \u2014 "),gj=n(EAe,"A",{href:!0});var zet=s(gj);B8o=r(zet,"MobileBertForNextSentencePrediction"),zet.forEach(t),x8o=r(EAe," (MobileBERT model)"),EAe.forEach(t),k8o=i(il),A1=n(il,"LI",{});var yAe=s(A1);lse=n(yAe,"STRONG",{});var Wet=s(lse);R8o=r(Wet,"qdqbert"),Wet.forEach(t),S8o=r(yAe," \u2014 "),hj=n(yAe,"A",{href:!0});var Qet=s(hj);P8o=r(Qet,"QDQBertForNextSentencePrediction"),Qet.forEach(t),$8o=r(yAe," (QDQBert model)"),yAe.forEach(t),il.forEach(t),I8o=i(Qt),L1=n(Qt,"P",{});var wAe=s(L1);N8o=r(wAe,"The model is set in evaluation mode by default using "),ise=n(wAe,"CODE",{});var Het=s(ise);j8o=r(Het,"model.eval()"),Het.forEach(t),D8o=r(wAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dse=n(wAe,"CODE",{});var Uet=s(dse);q8o=r(Uet,"model.train()"),Uet.forEach(t),wAe.forEach(t),G8o=i(Qt),cse=n(Qt,"P",{});var Jet=s(cse);O8o=r(Jet,"Examples:"),Jet.forEach(t),X8o=i(Qt),m(Wy.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Zke=i(c),Td=n(c,"H2",{class:!0});var iPe=s(Td);B1=n(iPe,"A",{id:!0,class:!0,href:!0});var Yet=s(B1);fse=n(Yet,"SPAN",{});var Ket=s(fse);m(Qy.$$.fragment,Ket),Ket.forEach(t),Yet.forEach(t),V8o=i(iPe),mse=n(iPe,"SPAN",{});var Zet=s(mse);z8o=r(Zet,"AutoModelForTokenClassification"),Zet.forEach(t),iPe.forEach(t),eRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Hy.$$.fragment,dl),W8o=i(dl),Fd=n(dl,"P",{});var MW=s(Fd);Q8o=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gse=n(MW,"CODE",{});var eot=s(gse);H8o=r(eot,"from_pretrained()"),eot.forEach(t),U8o=r(MW,"class method or the "),hse=n(MW,"CODE",{});var oot=s(hse);J8o=r(oot,"from_config()"),oot.forEach(t),Y8o=r(MW,`class
method.`),MW.forEach(t),K8o=i(dl),Uy=n(dl,"P",{});var dPe=s(Uy);Z8o=r(dPe,"This class cannot be instantiated directly using "),pse=n(dPe,"CODE",{});var rot=s(pse);e9o=r(rot,"__init__()"),rot.forEach(t),o9o=r(dPe," (throws an error)."),dPe.forEach(t),r9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(Jy.$$.fragment,cl),t9o=i(cl),_se=n(cl,"P",{});var tot=s(_se);a9o=r(tot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tot.forEach(t),n9o=i(cl),Cd=n(cl,"P",{});var EW=s(Cd);s9o=r(EW,`Note:
Loading a model from its configuration file does `),use=n(EW,"STRONG",{});var aot=s(use);l9o=r(aot,"not"),aot.forEach(t),i9o=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bse=n(EW,"CODE",{});var not=s(bse);d9o=r(not,"from_pretrained()"),not.forEach(t),c9o=r(EW,"to load the model weights."),EW.forEach(t),f9o=i(cl),vse=n(cl,"P",{});var sot=s(vse);m9o=r(sot,"Examples:"),sot.forEach(t),g9o=i(cl),m(Yy.$$.fragment,cl),cl.forEach(t),h9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(Ky.$$.fragment,Ht),p9o=i(Ht),Tse=n(Ht,"P",{});var lot=s(Tse);_9o=r(lot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lot.forEach(t),u9o=i(Ht),Ka=n(Ht,"P",{});var ME=s(Ka);b9o=r(ME,"The model class to instantiate is selected based on the "),Fse=n(ME,"CODE",{});var iot=s(Fse);v9o=r(iot,"model_type"),iot.forEach(t),T9o=r(ME,` property of the config object (either
passed as an argument or loaded from `),Cse=n(ME,"CODE",{});var dot=s(Cse);F9o=r(dot,"pretrained_model_name_or_path"),dot.forEach(t),C9o=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=n(ME,"CODE",{});var cot=s(Mse);M9o=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),E9o=r(ME,":"),ME.forEach(t),y9o=i(Ht),D=n(Ht,"UL",{});var q=s(D);x1=n(q,"LI",{});var AAe=s(x1);Ese=n(AAe,"STRONG",{});var fot=s(Ese);w9o=r(fot,"albert"),fot.forEach(t),A9o=r(AAe," \u2014 "),pj=n(AAe,"A",{href:!0});var mot=s(pj);L9o=r(mot,"AlbertForTokenClassification"),mot.forEach(t),B9o=r(AAe," (ALBERT model)"),AAe.forEach(t),x9o=i(q),k1=n(q,"LI",{});var LAe=s(k1);yse=n(LAe,"STRONG",{});var got=s(yse);k9o=r(got,"bert"),got.forEach(t),R9o=r(LAe," \u2014 "),_j=n(LAe,"A",{href:!0});var hot=s(_j);S9o=r(hot,"BertForTokenClassification"),hot.forEach(t),P9o=r(LAe," (BERT model)"),LAe.forEach(t),$9o=i(q),R1=n(q,"LI",{});var BAe=s(R1);wse=n(BAe,"STRONG",{});var pot=s(wse);I9o=r(pot,"big_bird"),pot.forEach(t),N9o=r(BAe," \u2014 "),uj=n(BAe,"A",{href:!0});var _ot=s(uj);j9o=r(_ot,"BigBirdForTokenClassification"),_ot.forEach(t),D9o=r(BAe," (BigBird model)"),BAe.forEach(t),q9o=i(q),S1=n(q,"LI",{});var xAe=s(S1);Ase=n(xAe,"STRONG",{});var uot=s(Ase);G9o=r(uot,"camembert"),uot.forEach(t),O9o=r(xAe," \u2014 "),bj=n(xAe,"A",{href:!0});var bot=s(bj);X9o=r(bot,"CamembertForTokenClassification"),bot.forEach(t),V9o=r(xAe," (CamemBERT model)"),xAe.forEach(t),z9o=i(q),P1=n(q,"LI",{});var kAe=s(P1);Lse=n(kAe,"STRONG",{});var vot=s(Lse);W9o=r(vot,"canine"),vot.forEach(t),Q9o=r(kAe," \u2014 "),vj=n(kAe,"A",{href:!0});var Tot=s(vj);H9o=r(Tot,"CanineForTokenClassification"),Tot.forEach(t),U9o=r(kAe," (Canine model)"),kAe.forEach(t),J9o=i(q),$1=n(q,"LI",{});var RAe=s($1);Bse=n(RAe,"STRONG",{});var Fot=s(Bse);Y9o=r(Fot,"convbert"),Fot.forEach(t),K9o=r(RAe," \u2014 "),Tj=n(RAe,"A",{href:!0});var Cot=s(Tj);Z9o=r(Cot,"ConvBertForTokenClassification"),Cot.forEach(t),eBo=r(RAe," (ConvBERT model)"),RAe.forEach(t),oBo=i(q),I1=n(q,"LI",{});var SAe=s(I1);xse=n(SAe,"STRONG",{});var Mot=s(xse);rBo=r(Mot,"data2vec-text"),Mot.forEach(t),tBo=r(SAe," \u2014 "),Fj=n(SAe,"A",{href:!0});var Eot=s(Fj);aBo=r(Eot,"Data2VecTextForTokenClassification"),Eot.forEach(t),nBo=r(SAe," (Data2VecText model)"),SAe.forEach(t),sBo=i(q),N1=n(q,"LI",{});var PAe=s(N1);kse=n(PAe,"STRONG",{});var yot=s(kse);lBo=r(yot,"deberta"),yot.forEach(t),iBo=r(PAe," \u2014 "),Cj=n(PAe,"A",{href:!0});var wot=s(Cj);dBo=r(wot,"DebertaForTokenClassification"),wot.forEach(t),cBo=r(PAe," (DeBERTa model)"),PAe.forEach(t),fBo=i(q),j1=n(q,"LI",{});var $Ae=s(j1);Rse=n($Ae,"STRONG",{});var Aot=s(Rse);mBo=r(Aot,"deberta-v2"),Aot.forEach(t),gBo=r($Ae," \u2014 "),Mj=n($Ae,"A",{href:!0});var Lot=s(Mj);hBo=r(Lot,"DebertaV2ForTokenClassification"),Lot.forEach(t),pBo=r($Ae," (DeBERTa-v2 model)"),$Ae.forEach(t),_Bo=i(q),D1=n(q,"LI",{});var IAe=s(D1);Sse=n(IAe,"STRONG",{});var Bot=s(Sse);uBo=r(Bot,"distilbert"),Bot.forEach(t),bBo=r(IAe," \u2014 "),Ej=n(IAe,"A",{href:!0});var xot=s(Ej);vBo=r(xot,"DistilBertForTokenClassification"),xot.forEach(t),TBo=r(IAe," (DistilBERT model)"),IAe.forEach(t),FBo=i(q),q1=n(q,"LI",{});var NAe=s(q1);Pse=n(NAe,"STRONG",{});var kot=s(Pse);CBo=r(kot,"electra"),kot.forEach(t),MBo=r(NAe," \u2014 "),yj=n(NAe,"A",{href:!0});var Rot=s(yj);EBo=r(Rot,"ElectraForTokenClassification"),Rot.forEach(t),yBo=r(NAe," (ELECTRA model)"),NAe.forEach(t),wBo=i(q),G1=n(q,"LI",{});var jAe=s(G1);$se=n(jAe,"STRONG",{});var Sot=s($se);ABo=r(Sot,"flaubert"),Sot.forEach(t),LBo=r(jAe," \u2014 "),wj=n(jAe,"A",{href:!0});var Pot=s(wj);BBo=r(Pot,"FlaubertForTokenClassification"),Pot.forEach(t),xBo=r(jAe," (FlauBERT model)"),jAe.forEach(t),kBo=i(q),O1=n(q,"LI",{});var DAe=s(O1);Ise=n(DAe,"STRONG",{});var $ot=s(Ise);RBo=r($ot,"fnet"),$ot.forEach(t),SBo=r(DAe," \u2014 "),Aj=n(DAe,"A",{href:!0});var Iot=s(Aj);PBo=r(Iot,"FNetForTokenClassification"),Iot.forEach(t),$Bo=r(DAe," (FNet model)"),DAe.forEach(t),IBo=i(q),X1=n(q,"LI",{});var qAe=s(X1);Nse=n(qAe,"STRONG",{});var Not=s(Nse);NBo=r(Not,"funnel"),Not.forEach(t),jBo=r(qAe," \u2014 "),Lj=n(qAe,"A",{href:!0});var jot=s(Lj);DBo=r(jot,"FunnelForTokenClassification"),jot.forEach(t),qBo=r(qAe," (Funnel Transformer model)"),qAe.forEach(t),GBo=i(q),V1=n(q,"LI",{});var GAe=s(V1);jse=n(GAe,"STRONG",{});var Dot=s(jse);OBo=r(Dot,"gpt2"),Dot.forEach(t),XBo=r(GAe," \u2014 "),Bj=n(GAe,"A",{href:!0});var qot=s(Bj);VBo=r(qot,"GPT2ForTokenClassification"),qot.forEach(t),zBo=r(GAe," (OpenAI GPT-2 model)"),GAe.forEach(t),WBo=i(q),z1=n(q,"LI",{});var OAe=s(z1);Dse=n(OAe,"STRONG",{});var Got=s(Dse);QBo=r(Got,"ibert"),Got.forEach(t),HBo=r(OAe," \u2014 "),xj=n(OAe,"A",{href:!0});var Oot=s(xj);UBo=r(Oot,"IBertForTokenClassification"),Oot.forEach(t),JBo=r(OAe," (I-BERT model)"),OAe.forEach(t),YBo=i(q),W1=n(q,"LI",{});var XAe=s(W1);qse=n(XAe,"STRONG",{});var Xot=s(qse);KBo=r(Xot,"layoutlm"),Xot.forEach(t),ZBo=r(XAe," \u2014 "),kj=n(XAe,"A",{href:!0});var Vot=s(kj);exo=r(Vot,"LayoutLMForTokenClassification"),Vot.forEach(t),oxo=r(XAe," (LayoutLM model)"),XAe.forEach(t),rxo=i(q),Q1=n(q,"LI",{});var VAe=s(Q1);Gse=n(VAe,"STRONG",{});var zot=s(Gse);txo=r(zot,"layoutlmv2"),zot.forEach(t),axo=r(VAe," \u2014 "),Rj=n(VAe,"A",{href:!0});var Wot=s(Rj);nxo=r(Wot,"LayoutLMv2ForTokenClassification"),Wot.forEach(t),sxo=r(VAe," (LayoutLMv2 model)"),VAe.forEach(t),lxo=i(q),H1=n(q,"LI",{});var zAe=s(H1);Ose=n(zAe,"STRONG",{});var Qot=s(Ose);ixo=r(Qot,"longformer"),Qot.forEach(t),dxo=r(zAe," \u2014 "),Sj=n(zAe,"A",{href:!0});var Hot=s(Sj);cxo=r(Hot,"LongformerForTokenClassification"),Hot.forEach(t),fxo=r(zAe," (Longformer model)"),zAe.forEach(t),mxo=i(q),U1=n(q,"LI",{});var WAe=s(U1);Xse=n(WAe,"STRONG",{});var Uot=s(Xse);gxo=r(Uot,"megatron-bert"),Uot.forEach(t),hxo=r(WAe," \u2014 "),Pj=n(WAe,"A",{href:!0});var Jot=s(Pj);pxo=r(Jot,"MegatronBertForTokenClassification"),Jot.forEach(t),_xo=r(WAe," (MegatronBert model)"),WAe.forEach(t),uxo=i(q),J1=n(q,"LI",{});var QAe=s(J1);Vse=n(QAe,"STRONG",{});var Yot=s(Vse);bxo=r(Yot,"mobilebert"),Yot.forEach(t),vxo=r(QAe," \u2014 "),$j=n(QAe,"A",{href:!0});var Kot=s($j);Txo=r(Kot,"MobileBertForTokenClassification"),Kot.forEach(t),Fxo=r(QAe," (MobileBERT model)"),QAe.forEach(t),Cxo=i(q),Y1=n(q,"LI",{});var HAe=s(Y1);zse=n(HAe,"STRONG",{});var Zot=s(zse);Mxo=r(Zot,"mpnet"),Zot.forEach(t),Exo=r(HAe," \u2014 "),Ij=n(HAe,"A",{href:!0});var ert=s(Ij);yxo=r(ert,"MPNetForTokenClassification"),ert.forEach(t),wxo=r(HAe," (MPNet model)"),HAe.forEach(t),Axo=i(q),K1=n(q,"LI",{});var UAe=s(K1);Wse=n(UAe,"STRONG",{});var ort=s(Wse);Lxo=r(ort,"nystromformer"),ort.forEach(t),Bxo=r(UAe," \u2014 "),Nj=n(UAe,"A",{href:!0});var rrt=s(Nj);xxo=r(rrt,"NystromformerForTokenClassification"),rrt.forEach(t),kxo=r(UAe," (Nystromformer model)"),UAe.forEach(t),Rxo=i(q),Z1=n(q,"LI",{});var JAe=s(Z1);Qse=n(JAe,"STRONG",{});var trt=s(Qse);Sxo=r(trt,"qdqbert"),trt.forEach(t),Pxo=r(JAe," \u2014 "),jj=n(JAe,"A",{href:!0});var art=s(jj);$xo=r(art,"QDQBertForTokenClassification"),art.forEach(t),Ixo=r(JAe," (QDQBert model)"),JAe.forEach(t),Nxo=i(q),eb=n(q,"LI",{});var YAe=s(eb);Hse=n(YAe,"STRONG",{});var nrt=s(Hse);jxo=r(nrt,"rembert"),nrt.forEach(t),Dxo=r(YAe," \u2014 "),Dj=n(YAe,"A",{href:!0});var srt=s(Dj);qxo=r(srt,"RemBertForTokenClassification"),srt.forEach(t),Gxo=r(YAe," (RemBERT model)"),YAe.forEach(t),Oxo=i(q),ob=n(q,"LI",{});var KAe=s(ob);Use=n(KAe,"STRONG",{});var lrt=s(Use);Xxo=r(lrt,"roberta"),lrt.forEach(t),Vxo=r(KAe," \u2014 "),qj=n(KAe,"A",{href:!0});var irt=s(qj);zxo=r(irt,"RobertaForTokenClassification"),irt.forEach(t),Wxo=r(KAe," (RoBERTa model)"),KAe.forEach(t),Qxo=i(q),rb=n(q,"LI",{});var ZAe=s(rb);Jse=n(ZAe,"STRONG",{});var drt=s(Jse);Hxo=r(drt,"roformer"),drt.forEach(t),Uxo=r(ZAe," \u2014 "),Gj=n(ZAe,"A",{href:!0});var crt=s(Gj);Jxo=r(crt,"RoFormerForTokenClassification"),crt.forEach(t),Yxo=r(ZAe," (RoFormer model)"),ZAe.forEach(t),Kxo=i(q),tb=n(q,"LI",{});var e0e=s(tb);Yse=n(e0e,"STRONG",{});var frt=s(Yse);Zxo=r(frt,"squeezebert"),frt.forEach(t),eko=r(e0e," \u2014 "),Oj=n(e0e,"A",{href:!0});var mrt=s(Oj);oko=r(mrt,"SqueezeBertForTokenClassification"),mrt.forEach(t),rko=r(e0e," (SqueezeBERT model)"),e0e.forEach(t),tko=i(q),ab=n(q,"LI",{});var o0e=s(ab);Kse=n(o0e,"STRONG",{});var grt=s(Kse);ako=r(grt,"xlm"),grt.forEach(t),nko=r(o0e," \u2014 "),Xj=n(o0e,"A",{href:!0});var hrt=s(Xj);sko=r(hrt,"XLMForTokenClassification"),hrt.forEach(t),lko=r(o0e," (XLM model)"),o0e.forEach(t),iko=i(q),nb=n(q,"LI",{});var r0e=s(nb);Zse=n(r0e,"STRONG",{});var prt=s(Zse);dko=r(prt,"xlm-roberta"),prt.forEach(t),cko=r(r0e," \u2014 "),Vj=n(r0e,"A",{href:!0});var _rt=s(Vj);fko=r(_rt,"XLMRobertaForTokenClassification"),_rt.forEach(t),mko=r(r0e," (XLM-RoBERTa model)"),r0e.forEach(t),gko=i(q),sb=n(q,"LI",{});var t0e=s(sb);ele=n(t0e,"STRONG",{});var urt=s(ele);hko=r(urt,"xlm-roberta-xl"),urt.forEach(t),pko=r(t0e," \u2014 "),zj=n(t0e,"A",{href:!0});var brt=s(zj);_ko=r(brt,"XLMRobertaXLForTokenClassification"),brt.forEach(t),uko=r(t0e," (XLM-RoBERTa-XL model)"),t0e.forEach(t),bko=i(q),lb=n(q,"LI",{});var a0e=s(lb);ole=n(a0e,"STRONG",{});var vrt=s(ole);vko=r(vrt,"xlnet"),vrt.forEach(t),Tko=r(a0e," \u2014 "),Wj=n(a0e,"A",{href:!0});var Trt=s(Wj);Fko=r(Trt,"XLNetForTokenClassification"),Trt.forEach(t),Cko=r(a0e," (XLNet model)"),a0e.forEach(t),Mko=i(q),ib=n(q,"LI",{});var n0e=s(ib);rle=n(n0e,"STRONG",{});var Frt=s(rle);Eko=r(Frt,"yoso"),Frt.forEach(t),yko=r(n0e," \u2014 "),Qj=n(n0e,"A",{href:!0});var Crt=s(Qj);wko=r(Crt,"YosoForTokenClassification"),Crt.forEach(t),Ako=r(n0e," (YOSO model)"),n0e.forEach(t),q.forEach(t),Lko=i(Ht),db=n(Ht,"P",{});var s0e=s(db);Bko=r(s0e,"The model is set in evaluation mode by default using "),tle=n(s0e,"CODE",{});var Mrt=s(tle);xko=r(Mrt,"model.eval()"),Mrt.forEach(t),kko=r(s0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ale=n(s0e,"CODE",{});var Ert=s(ale);Rko=r(Ert,"model.train()"),Ert.forEach(t),s0e.forEach(t),Sko=i(Ht),nle=n(Ht,"P",{});var yrt=s(nle);Pko=r(yrt,"Examples:"),yrt.forEach(t),$ko=i(Ht),m(Zy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),oRe=i(c),Md=n(c,"H2",{class:!0});var cPe=s(Md);cb=n(cPe,"A",{id:!0,class:!0,href:!0});var wrt=s(cb);sle=n(wrt,"SPAN",{});var Art=s(sle);m(ew.$$.fragment,Art),Art.forEach(t),wrt.forEach(t),Iko=i(cPe),lle=n(cPe,"SPAN",{});var Lrt=s(lle);Nko=r(Lrt,"AutoModelForQuestionAnswering"),Lrt.forEach(t),cPe.forEach(t),rRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(ow.$$.fragment,fl),jko=i(fl),Ed=n(fl,"P",{});var yW=s(Ed);Dko=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ile=n(yW,"CODE",{});var Brt=s(ile);qko=r(Brt,"from_pretrained()"),Brt.forEach(t),Gko=r(yW,"class method or the "),dle=n(yW,"CODE",{});var xrt=s(dle);Oko=r(xrt,"from_config()"),xrt.forEach(t),Xko=r(yW,`class
method.`),yW.forEach(t),Vko=i(fl),rw=n(fl,"P",{});var fPe=s(rw);zko=r(fPe,"This class cannot be instantiated directly using "),cle=n(fPe,"CODE",{});var krt=s(cle);Wko=r(krt,"__init__()"),krt.forEach(t),Qko=r(fPe," (throws an error)."),fPe.forEach(t),Hko=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(tw.$$.fragment,ml),Uko=i(ml),fle=n(ml,"P",{});var Rrt=s(fle);Jko=r(Rrt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rrt.forEach(t),Yko=i(ml),yd=n(ml,"P",{});var wW=s(yd);Kko=r(wW,`Note:
Loading a model from its configuration file does `),mle=n(wW,"STRONG",{});var Srt=s(mle);Zko=r(Srt,"not"),Srt.forEach(t),eRo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gle=n(wW,"CODE",{});var Prt=s(gle);oRo=r(Prt,"from_pretrained()"),Prt.forEach(t),rRo=r(wW,"to load the model weights."),wW.forEach(t),tRo=i(ml),hle=n(ml,"P",{});var $rt=s(hle);aRo=r($rt,"Examples:"),$rt.forEach(t),nRo=i(ml),m(aw.$$.fragment,ml),ml.forEach(t),sRo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(nw.$$.fragment,Ut),lRo=i(Ut),ple=n(Ut,"P",{});var Irt=s(ple);iRo=r(Irt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Irt.forEach(t),dRo=i(Ut),Za=n(Ut,"P",{});var EE=s(Za);cRo=r(EE,"The model class to instantiate is selected based on the "),_le=n(EE,"CODE",{});var Nrt=s(_le);fRo=r(Nrt,"model_type"),Nrt.forEach(t),mRo=r(EE,` property of the config object (either
passed as an argument or loaded from `),ule=n(EE,"CODE",{});var jrt=s(ule);gRo=r(jrt,"pretrained_model_name_or_path"),jrt.forEach(t),hRo=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=n(EE,"CODE",{});var Drt=s(ble);pRo=r(Drt,"pretrained_model_name_or_path"),Drt.forEach(t),_Ro=r(EE,":"),EE.forEach(t),uRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);fb=n(P,"LI",{});var l0e=s(fb);vle=n(l0e,"STRONG",{});var qrt=s(vle);bRo=r(qrt,"albert"),qrt.forEach(t),vRo=r(l0e," \u2014 "),Hj=n(l0e,"A",{href:!0});var Grt=s(Hj);TRo=r(Grt,"AlbertForQuestionAnswering"),Grt.forEach(t),FRo=r(l0e," (ALBERT model)"),l0e.forEach(t),CRo=i(P),mb=n(P,"LI",{});var i0e=s(mb);Tle=n(i0e,"STRONG",{});var Ort=s(Tle);MRo=r(Ort,"bart"),Ort.forEach(t),ERo=r(i0e," \u2014 "),Uj=n(i0e,"A",{href:!0});var Xrt=s(Uj);yRo=r(Xrt,"BartForQuestionAnswering"),Xrt.forEach(t),wRo=r(i0e," (BART model)"),i0e.forEach(t),ARo=i(P),gb=n(P,"LI",{});var d0e=s(gb);Fle=n(d0e,"STRONG",{});var Vrt=s(Fle);LRo=r(Vrt,"bert"),Vrt.forEach(t),BRo=r(d0e," \u2014 "),Jj=n(d0e,"A",{href:!0});var zrt=s(Jj);xRo=r(zrt,"BertForQuestionAnswering"),zrt.forEach(t),kRo=r(d0e," (BERT model)"),d0e.forEach(t),RRo=i(P),hb=n(P,"LI",{});var c0e=s(hb);Cle=n(c0e,"STRONG",{});var Wrt=s(Cle);SRo=r(Wrt,"big_bird"),Wrt.forEach(t),PRo=r(c0e," \u2014 "),Yj=n(c0e,"A",{href:!0});var Qrt=s(Yj);$Ro=r(Qrt,"BigBirdForQuestionAnswering"),Qrt.forEach(t),IRo=r(c0e," (BigBird model)"),c0e.forEach(t),NRo=i(P),pb=n(P,"LI",{});var f0e=s(pb);Mle=n(f0e,"STRONG",{});var Hrt=s(Mle);jRo=r(Hrt,"bigbird_pegasus"),Hrt.forEach(t),DRo=r(f0e," \u2014 "),Kj=n(f0e,"A",{href:!0});var Urt=s(Kj);qRo=r(Urt,"BigBirdPegasusForQuestionAnswering"),Urt.forEach(t),GRo=r(f0e," (BigBirdPegasus model)"),f0e.forEach(t),ORo=i(P),_b=n(P,"LI",{});var m0e=s(_b);Ele=n(m0e,"STRONG",{});var Jrt=s(Ele);XRo=r(Jrt,"camembert"),Jrt.forEach(t),VRo=r(m0e," \u2014 "),Zj=n(m0e,"A",{href:!0});var Yrt=s(Zj);zRo=r(Yrt,"CamembertForQuestionAnswering"),Yrt.forEach(t),WRo=r(m0e," (CamemBERT model)"),m0e.forEach(t),QRo=i(P),ub=n(P,"LI",{});var g0e=s(ub);yle=n(g0e,"STRONG",{});var Krt=s(yle);HRo=r(Krt,"canine"),Krt.forEach(t),URo=r(g0e," \u2014 "),eD=n(g0e,"A",{href:!0});var Zrt=s(eD);JRo=r(Zrt,"CanineForQuestionAnswering"),Zrt.forEach(t),YRo=r(g0e," (Canine model)"),g0e.forEach(t),KRo=i(P),bb=n(P,"LI",{});var h0e=s(bb);wle=n(h0e,"STRONG",{});var ett=s(wle);ZRo=r(ett,"convbert"),ett.forEach(t),eSo=r(h0e," \u2014 "),oD=n(h0e,"A",{href:!0});var ott=s(oD);oSo=r(ott,"ConvBertForQuestionAnswering"),ott.forEach(t),rSo=r(h0e," (ConvBERT model)"),h0e.forEach(t),tSo=i(P),vb=n(P,"LI",{});var p0e=s(vb);Ale=n(p0e,"STRONG",{});var rtt=s(Ale);aSo=r(rtt,"data2vec-text"),rtt.forEach(t),nSo=r(p0e," \u2014 "),rD=n(p0e,"A",{href:!0});var ttt=s(rD);sSo=r(ttt,"Data2VecTextForQuestionAnswering"),ttt.forEach(t),lSo=r(p0e," (Data2VecText model)"),p0e.forEach(t),iSo=i(P),Tb=n(P,"LI",{});var _0e=s(Tb);Lle=n(_0e,"STRONG",{});var att=s(Lle);dSo=r(att,"deberta"),att.forEach(t),cSo=r(_0e," \u2014 "),tD=n(_0e,"A",{href:!0});var ntt=s(tD);fSo=r(ntt,"DebertaForQuestionAnswering"),ntt.forEach(t),mSo=r(_0e," (DeBERTa model)"),_0e.forEach(t),gSo=i(P),Fb=n(P,"LI",{});var u0e=s(Fb);Ble=n(u0e,"STRONG",{});var stt=s(Ble);hSo=r(stt,"deberta-v2"),stt.forEach(t),pSo=r(u0e," \u2014 "),aD=n(u0e,"A",{href:!0});var ltt=s(aD);_So=r(ltt,"DebertaV2ForQuestionAnswering"),ltt.forEach(t),uSo=r(u0e," (DeBERTa-v2 model)"),u0e.forEach(t),bSo=i(P),Cb=n(P,"LI",{});var b0e=s(Cb);xle=n(b0e,"STRONG",{});var itt=s(xle);vSo=r(itt,"distilbert"),itt.forEach(t),TSo=r(b0e," \u2014 "),nD=n(b0e,"A",{href:!0});var dtt=s(nD);FSo=r(dtt,"DistilBertForQuestionAnswering"),dtt.forEach(t),CSo=r(b0e," (DistilBERT model)"),b0e.forEach(t),MSo=i(P),Mb=n(P,"LI",{});var v0e=s(Mb);kle=n(v0e,"STRONG",{});var ctt=s(kle);ESo=r(ctt,"electra"),ctt.forEach(t),ySo=r(v0e," \u2014 "),sD=n(v0e,"A",{href:!0});var ftt=s(sD);wSo=r(ftt,"ElectraForQuestionAnswering"),ftt.forEach(t),ASo=r(v0e," (ELECTRA model)"),v0e.forEach(t),LSo=i(P),Eb=n(P,"LI",{});var T0e=s(Eb);Rle=n(T0e,"STRONG",{});var mtt=s(Rle);BSo=r(mtt,"flaubert"),mtt.forEach(t),xSo=r(T0e," \u2014 "),lD=n(T0e,"A",{href:!0});var gtt=s(lD);kSo=r(gtt,"FlaubertForQuestionAnsweringSimple"),gtt.forEach(t),RSo=r(T0e," (FlauBERT model)"),T0e.forEach(t),SSo=i(P),yb=n(P,"LI",{});var F0e=s(yb);Sle=n(F0e,"STRONG",{});var htt=s(Sle);PSo=r(htt,"fnet"),htt.forEach(t),$So=r(F0e," \u2014 "),iD=n(F0e,"A",{href:!0});var ptt=s(iD);ISo=r(ptt,"FNetForQuestionAnswering"),ptt.forEach(t),NSo=r(F0e," (FNet model)"),F0e.forEach(t),jSo=i(P),wb=n(P,"LI",{});var C0e=s(wb);Ple=n(C0e,"STRONG",{});var _tt=s(Ple);DSo=r(_tt,"funnel"),_tt.forEach(t),qSo=r(C0e," \u2014 "),dD=n(C0e,"A",{href:!0});var utt=s(dD);GSo=r(utt,"FunnelForQuestionAnswering"),utt.forEach(t),OSo=r(C0e," (Funnel Transformer model)"),C0e.forEach(t),XSo=i(P),Ab=n(P,"LI",{});var M0e=s(Ab);$le=n(M0e,"STRONG",{});var btt=s($le);VSo=r(btt,"gptj"),btt.forEach(t),zSo=r(M0e," \u2014 "),cD=n(M0e,"A",{href:!0});var vtt=s(cD);WSo=r(vtt,"GPTJForQuestionAnswering"),vtt.forEach(t),QSo=r(M0e," (GPT-J model)"),M0e.forEach(t),HSo=i(P),Lb=n(P,"LI",{});var E0e=s(Lb);Ile=n(E0e,"STRONG",{});var Ttt=s(Ile);USo=r(Ttt,"ibert"),Ttt.forEach(t),JSo=r(E0e," \u2014 "),fD=n(E0e,"A",{href:!0});var Ftt=s(fD);YSo=r(Ftt,"IBertForQuestionAnswering"),Ftt.forEach(t),KSo=r(E0e," (I-BERT model)"),E0e.forEach(t),ZSo=i(P),Bb=n(P,"LI",{});var y0e=s(Bb);Nle=n(y0e,"STRONG",{});var Ctt=s(Nle);ePo=r(Ctt,"layoutlmv2"),Ctt.forEach(t),oPo=r(y0e," \u2014 "),mD=n(y0e,"A",{href:!0});var Mtt=s(mD);rPo=r(Mtt,"LayoutLMv2ForQuestionAnswering"),Mtt.forEach(t),tPo=r(y0e," (LayoutLMv2 model)"),y0e.forEach(t),aPo=i(P),xb=n(P,"LI",{});var w0e=s(xb);jle=n(w0e,"STRONG",{});var Ett=s(jle);nPo=r(Ett,"led"),Ett.forEach(t),sPo=r(w0e," \u2014 "),gD=n(w0e,"A",{href:!0});var ytt=s(gD);lPo=r(ytt,"LEDForQuestionAnswering"),ytt.forEach(t),iPo=r(w0e," (LED model)"),w0e.forEach(t),dPo=i(P),kb=n(P,"LI",{});var A0e=s(kb);Dle=n(A0e,"STRONG",{});var wtt=s(Dle);cPo=r(wtt,"longformer"),wtt.forEach(t),fPo=r(A0e," \u2014 "),hD=n(A0e,"A",{href:!0});var Att=s(hD);mPo=r(Att,"LongformerForQuestionAnswering"),Att.forEach(t),gPo=r(A0e," (Longformer model)"),A0e.forEach(t),hPo=i(P),Rb=n(P,"LI",{});var L0e=s(Rb);qle=n(L0e,"STRONG",{});var Ltt=s(qle);pPo=r(Ltt,"lxmert"),Ltt.forEach(t),_Po=r(L0e," \u2014 "),pD=n(L0e,"A",{href:!0});var Btt=s(pD);uPo=r(Btt,"LxmertForQuestionAnswering"),Btt.forEach(t),bPo=r(L0e," (LXMERT model)"),L0e.forEach(t),vPo=i(P),Sb=n(P,"LI",{});var B0e=s(Sb);Gle=n(B0e,"STRONG",{});var xtt=s(Gle);TPo=r(xtt,"mbart"),xtt.forEach(t),FPo=r(B0e," \u2014 "),_D=n(B0e,"A",{href:!0});var ktt=s(_D);CPo=r(ktt,"MBartForQuestionAnswering"),ktt.forEach(t),MPo=r(B0e," (mBART model)"),B0e.forEach(t),EPo=i(P),Pb=n(P,"LI",{});var x0e=s(Pb);Ole=n(x0e,"STRONG",{});var Rtt=s(Ole);yPo=r(Rtt,"megatron-bert"),Rtt.forEach(t),wPo=r(x0e," \u2014 "),uD=n(x0e,"A",{href:!0});var Stt=s(uD);APo=r(Stt,"MegatronBertForQuestionAnswering"),Stt.forEach(t),LPo=r(x0e," (MegatronBert model)"),x0e.forEach(t),BPo=i(P),$b=n(P,"LI",{});var k0e=s($b);Xle=n(k0e,"STRONG",{});var Ptt=s(Xle);xPo=r(Ptt,"mobilebert"),Ptt.forEach(t),kPo=r(k0e," \u2014 "),bD=n(k0e,"A",{href:!0});var $tt=s(bD);RPo=r($tt,"MobileBertForQuestionAnswering"),$tt.forEach(t),SPo=r(k0e," (MobileBERT model)"),k0e.forEach(t),PPo=i(P),Ib=n(P,"LI",{});var R0e=s(Ib);Vle=n(R0e,"STRONG",{});var Itt=s(Vle);$Po=r(Itt,"mpnet"),Itt.forEach(t),IPo=r(R0e," \u2014 "),vD=n(R0e,"A",{href:!0});var Ntt=s(vD);NPo=r(Ntt,"MPNetForQuestionAnswering"),Ntt.forEach(t),jPo=r(R0e," (MPNet model)"),R0e.forEach(t),DPo=i(P),Nb=n(P,"LI",{});var S0e=s(Nb);zle=n(S0e,"STRONG",{});var jtt=s(zle);qPo=r(jtt,"nystromformer"),jtt.forEach(t),GPo=r(S0e," \u2014 "),TD=n(S0e,"A",{href:!0});var Dtt=s(TD);OPo=r(Dtt,"NystromformerForQuestionAnswering"),Dtt.forEach(t),XPo=r(S0e," (Nystromformer model)"),S0e.forEach(t),VPo=i(P),jb=n(P,"LI",{});var P0e=s(jb);Wle=n(P0e,"STRONG",{});var qtt=s(Wle);zPo=r(qtt,"qdqbert"),qtt.forEach(t),WPo=r(P0e," \u2014 "),FD=n(P0e,"A",{href:!0});var Gtt=s(FD);QPo=r(Gtt,"QDQBertForQuestionAnswering"),Gtt.forEach(t),HPo=r(P0e," (QDQBert model)"),P0e.forEach(t),UPo=i(P),Db=n(P,"LI",{});var $0e=s(Db);Qle=n($0e,"STRONG",{});var Ott=s(Qle);JPo=r(Ott,"reformer"),Ott.forEach(t),YPo=r($0e," \u2014 "),CD=n($0e,"A",{href:!0});var Xtt=s(CD);KPo=r(Xtt,"ReformerForQuestionAnswering"),Xtt.forEach(t),ZPo=r($0e," (Reformer model)"),$0e.forEach(t),e$o=i(P),qb=n(P,"LI",{});var I0e=s(qb);Hle=n(I0e,"STRONG",{});var Vtt=s(Hle);o$o=r(Vtt,"rembert"),Vtt.forEach(t),r$o=r(I0e," \u2014 "),MD=n(I0e,"A",{href:!0});var ztt=s(MD);t$o=r(ztt,"RemBertForQuestionAnswering"),ztt.forEach(t),a$o=r(I0e," (RemBERT model)"),I0e.forEach(t),n$o=i(P),Gb=n(P,"LI",{});var N0e=s(Gb);Ule=n(N0e,"STRONG",{});var Wtt=s(Ule);s$o=r(Wtt,"roberta"),Wtt.forEach(t),l$o=r(N0e," \u2014 "),ED=n(N0e,"A",{href:!0});var Qtt=s(ED);i$o=r(Qtt,"RobertaForQuestionAnswering"),Qtt.forEach(t),d$o=r(N0e," (RoBERTa model)"),N0e.forEach(t),c$o=i(P),Ob=n(P,"LI",{});var j0e=s(Ob);Jle=n(j0e,"STRONG",{});var Htt=s(Jle);f$o=r(Htt,"roformer"),Htt.forEach(t),m$o=r(j0e," \u2014 "),yD=n(j0e,"A",{href:!0});var Utt=s(yD);g$o=r(Utt,"RoFormerForQuestionAnswering"),Utt.forEach(t),h$o=r(j0e," (RoFormer model)"),j0e.forEach(t),p$o=i(P),Xb=n(P,"LI",{});var D0e=s(Xb);Yle=n(D0e,"STRONG",{});var Jtt=s(Yle);_$o=r(Jtt,"splinter"),Jtt.forEach(t),u$o=r(D0e," \u2014 "),wD=n(D0e,"A",{href:!0});var Ytt=s(wD);b$o=r(Ytt,"SplinterForQuestionAnswering"),Ytt.forEach(t),v$o=r(D0e," (Splinter model)"),D0e.forEach(t),T$o=i(P),Vb=n(P,"LI",{});var q0e=s(Vb);Kle=n(q0e,"STRONG",{});var Ktt=s(Kle);F$o=r(Ktt,"squeezebert"),Ktt.forEach(t),C$o=r(q0e," \u2014 "),AD=n(q0e,"A",{href:!0});var Ztt=s(AD);M$o=r(Ztt,"SqueezeBertForQuestionAnswering"),Ztt.forEach(t),E$o=r(q0e," (SqueezeBERT model)"),q0e.forEach(t),y$o=i(P),zb=n(P,"LI",{});var G0e=s(zb);Zle=n(G0e,"STRONG",{});var eat=s(Zle);w$o=r(eat,"xlm"),eat.forEach(t),A$o=r(G0e," \u2014 "),LD=n(G0e,"A",{href:!0});var oat=s(LD);L$o=r(oat,"XLMForQuestionAnsweringSimple"),oat.forEach(t),B$o=r(G0e," (XLM model)"),G0e.forEach(t),x$o=i(P),Wb=n(P,"LI",{});var O0e=s(Wb);eie=n(O0e,"STRONG",{});var rat=s(eie);k$o=r(rat,"xlm-roberta"),rat.forEach(t),R$o=r(O0e," \u2014 "),BD=n(O0e,"A",{href:!0});var tat=s(BD);S$o=r(tat,"XLMRobertaForQuestionAnswering"),tat.forEach(t),P$o=r(O0e," (XLM-RoBERTa model)"),O0e.forEach(t),$$o=i(P),Qb=n(P,"LI",{});var X0e=s(Qb);oie=n(X0e,"STRONG",{});var aat=s(oie);I$o=r(aat,"xlm-roberta-xl"),aat.forEach(t),N$o=r(X0e," \u2014 "),xD=n(X0e,"A",{href:!0});var nat=s(xD);j$o=r(nat,"XLMRobertaXLForQuestionAnswering"),nat.forEach(t),D$o=r(X0e," (XLM-RoBERTa-XL model)"),X0e.forEach(t),q$o=i(P),Hb=n(P,"LI",{});var V0e=s(Hb);rie=n(V0e,"STRONG",{});var sat=s(rie);G$o=r(sat,"xlnet"),sat.forEach(t),O$o=r(V0e," \u2014 "),kD=n(V0e,"A",{href:!0});var lat=s(kD);X$o=r(lat,"XLNetForQuestionAnsweringSimple"),lat.forEach(t),V$o=r(V0e," (XLNet model)"),V0e.forEach(t),z$o=i(P),Ub=n(P,"LI",{});var z0e=s(Ub);tie=n(z0e,"STRONG",{});var iat=s(tie);W$o=r(iat,"yoso"),iat.forEach(t),Q$o=r(z0e," \u2014 "),RD=n(z0e,"A",{href:!0});var dat=s(RD);H$o=r(dat,"YosoForQuestionAnswering"),dat.forEach(t),U$o=r(z0e," (YOSO model)"),z0e.forEach(t),P.forEach(t),J$o=i(Ut),Jb=n(Ut,"P",{});var W0e=s(Jb);Y$o=r(W0e,"The model is set in evaluation mode by default using "),aie=n(W0e,"CODE",{});var cat=s(aie);K$o=r(cat,"model.eval()"),cat.forEach(t),Z$o=r(W0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=n(W0e,"CODE",{});var fat=s(nie);eIo=r(fat,"model.train()"),fat.forEach(t),W0e.forEach(t),oIo=i(Ut),sie=n(Ut,"P",{});var mat=s(sie);rIo=r(mat,"Examples:"),mat.forEach(t),tIo=i(Ut),m(sw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),tRe=i(c),wd=n(c,"H2",{class:!0});var mPe=s(wd);Yb=n(mPe,"A",{id:!0,class:!0,href:!0});var gat=s(Yb);lie=n(gat,"SPAN",{});var hat=s(lie);m(lw.$$.fragment,hat),hat.forEach(t),gat.forEach(t),aIo=i(mPe),iie=n(mPe,"SPAN",{});var pat=s(iie);nIo=r(pat,"AutoModelForTableQuestionAnswering"),pat.forEach(t),mPe.forEach(t),aRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(iw.$$.fragment,gl),sIo=i(gl),Ad=n(gl,"P",{});var AW=s(Ad);lIo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),die=n(AW,"CODE",{});var _at=s(die);iIo=r(_at,"from_pretrained()"),_at.forEach(t),dIo=r(AW,"class method or the "),cie=n(AW,"CODE",{});var uat=s(cie);cIo=r(uat,"from_config()"),uat.forEach(t),fIo=r(AW,`class
method.`),AW.forEach(t),mIo=i(gl),dw=n(gl,"P",{});var gPe=s(dw);gIo=r(gPe,"This class cannot be instantiated directly using "),fie=n(gPe,"CODE",{});var bat=s(fie);hIo=r(bat,"__init__()"),bat.forEach(t),pIo=r(gPe," (throws an error)."),gPe.forEach(t),_Io=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(cw.$$.fragment,hl),uIo=i(hl),mie=n(hl,"P",{});var vat=s(mie);bIo=r(vat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vat.forEach(t),vIo=i(hl),Ld=n(hl,"P",{});var LW=s(Ld);TIo=r(LW,`Note:
Loading a model from its configuration file does `),gie=n(LW,"STRONG",{});var Tat=s(gie);FIo=r(Tat,"not"),Tat.forEach(t),CIo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hie=n(LW,"CODE",{});var Fat=s(hie);MIo=r(Fat,"from_pretrained()"),Fat.forEach(t),EIo=r(LW,"to load the model weights."),LW.forEach(t),yIo=i(hl),pie=n(hl,"P",{});var Cat=s(pie);wIo=r(Cat,"Examples:"),Cat.forEach(t),AIo=i(hl),m(fw.$$.fragment,hl),hl.forEach(t),LIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(mw.$$.fragment,Jt),BIo=i(Jt),_ie=n(Jt,"P",{});var Mat=s(_ie);xIo=r(Mat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mat.forEach(t),kIo=i(Jt),en=n(Jt,"P",{});var yE=s(en);RIo=r(yE,"The model class to instantiate is selected based on the "),uie=n(yE,"CODE",{});var Eat=s(uie);SIo=r(Eat,"model_type"),Eat.forEach(t),PIo=r(yE,` property of the config object (either
passed as an argument or loaded from `),bie=n(yE,"CODE",{});var yat=s(bie);$Io=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),IIo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=n(yE,"CODE",{});var wat=s(vie);NIo=r(wat,"pretrained_model_name_or_path"),wat.forEach(t),jIo=r(yE,":"),yE.forEach(t),DIo=i(Jt),Tie=n(Jt,"UL",{});var Aat=s(Tie);Kb=n(Aat,"LI",{});var Q0e=s(Kb);Fie=n(Q0e,"STRONG",{});var Lat=s(Fie);qIo=r(Lat,"tapas"),Lat.forEach(t),GIo=r(Q0e," \u2014 "),SD=n(Q0e,"A",{href:!0});var Bat=s(SD);OIo=r(Bat,"TapasForQuestionAnswering"),Bat.forEach(t),XIo=r(Q0e," (TAPAS model)"),Q0e.forEach(t),Aat.forEach(t),VIo=i(Jt),Zb=n(Jt,"P",{});var H0e=s(Zb);zIo=r(H0e,"The model is set in evaluation mode by default using "),Cie=n(H0e,"CODE",{});var xat=s(Cie);WIo=r(xat,"model.eval()"),xat.forEach(t),QIo=r(H0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mie=n(H0e,"CODE",{});var kat=s(Mie);HIo=r(kat,"model.train()"),kat.forEach(t),H0e.forEach(t),UIo=i(Jt),Eie=n(Jt,"P",{});var Rat=s(Eie);JIo=r(Rat,"Examples:"),Rat.forEach(t),YIo=i(Jt),m(gw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),nRe=i(c),Bd=n(c,"H2",{class:!0});var hPe=s(Bd);ev=n(hPe,"A",{id:!0,class:!0,href:!0});var Sat=s(ev);yie=n(Sat,"SPAN",{});var Pat=s(yie);m(hw.$$.fragment,Pat),Pat.forEach(t),Sat.forEach(t),KIo=i(hPe),wie=n(hPe,"SPAN",{});var $at=s(wie);ZIo=r($at,"AutoModelForImageClassification"),$at.forEach(t),hPe.forEach(t),sRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(pw.$$.fragment,pl),eNo=i(pl),xd=n(pl,"P",{});var BW=s(xd);oNo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Aie=n(BW,"CODE",{});var Iat=s(Aie);rNo=r(Iat,"from_pretrained()"),Iat.forEach(t),tNo=r(BW,"class method or the "),Lie=n(BW,"CODE",{});var Nat=s(Lie);aNo=r(Nat,"from_config()"),Nat.forEach(t),nNo=r(BW,`class
method.`),BW.forEach(t),sNo=i(pl),_w=n(pl,"P",{});var pPe=s(_w);lNo=r(pPe,"This class cannot be instantiated directly using "),Bie=n(pPe,"CODE",{});var jat=s(Bie);iNo=r(jat,"__init__()"),jat.forEach(t),dNo=r(pPe," (throws an error)."),pPe.forEach(t),cNo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(uw.$$.fragment,_l),fNo=i(_l),xie=n(_l,"P",{});var Dat=s(xie);mNo=r(Dat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dat.forEach(t),gNo=i(_l),kd=n(_l,"P",{});var xW=s(kd);hNo=r(xW,`Note:
Loading a model from its configuration file does `),kie=n(xW,"STRONG",{});var qat=s(kie);pNo=r(qat,"not"),qat.forEach(t),_No=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rie=n(xW,"CODE",{});var Gat=s(Rie);uNo=r(Gat,"from_pretrained()"),Gat.forEach(t),bNo=r(xW,"to load the model weights."),xW.forEach(t),vNo=i(_l),Sie=n(_l,"P",{});var Oat=s(Sie);TNo=r(Oat,"Examples:"),Oat.forEach(t),FNo=i(_l),m(bw.$$.fragment,_l),_l.forEach(t),CNo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(vw.$$.fragment,Yt),MNo=i(Yt),Pie=n(Yt,"P",{});var Xat=s(Pie);ENo=r(Xat,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xat.forEach(t),yNo=i(Yt),on=n(Yt,"P",{});var wE=s(on);wNo=r(wE,"The model class to instantiate is selected based on the "),$ie=n(wE,"CODE",{});var Vat=s($ie);ANo=r(Vat,"model_type"),Vat.forEach(t),LNo=r(wE,` property of the config object (either
passed as an argument or loaded from `),Iie=n(wE,"CODE",{});var zat=s(Iie);BNo=r(zat,"pretrained_model_name_or_path"),zat.forEach(t),xNo=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=n(wE,"CODE",{});var Wat=s(Nie);kNo=r(Wat,"pretrained_model_name_or_path"),Wat.forEach(t),RNo=r(wE,":"),wE.forEach(t),SNo=i(Yt),ge=n(Yt,"UL",{});var Fe=s(ge);ov=n(Fe,"LI",{});var U0e=s(ov);jie=n(U0e,"STRONG",{});var Qat=s(jie);PNo=r(Qat,"beit"),Qat.forEach(t),$No=r(U0e," \u2014 "),PD=n(U0e,"A",{href:!0});var Hat=s(PD);INo=r(Hat,"BeitForImageClassification"),Hat.forEach(t),NNo=r(U0e," (BEiT model)"),U0e.forEach(t),jNo=i(Fe),rv=n(Fe,"LI",{});var J0e=s(rv);Die=n(J0e,"STRONG",{});var Uat=s(Die);DNo=r(Uat,"convnext"),Uat.forEach(t),qNo=r(J0e," \u2014 "),$D=n(J0e,"A",{href:!0});var Jat=s($D);GNo=r(Jat,"ConvNextForImageClassification"),Jat.forEach(t),ONo=r(J0e," (ConvNext model)"),J0e.forEach(t),XNo=i(Fe),qs=n(Fe,"LI",{});var r9=s(qs);qie=n(r9,"STRONG",{});var Yat=s(qie);VNo=r(Yat,"deit"),Yat.forEach(t),zNo=r(r9," \u2014 "),ID=n(r9,"A",{href:!0});var Kat=s(ID);WNo=r(Kat,"DeiTForImageClassification"),Kat.forEach(t),QNo=r(r9," or "),ND=n(r9,"A",{href:!0});var Zat=s(ND);HNo=r(Zat,"DeiTForImageClassificationWithTeacher"),Zat.forEach(t),UNo=r(r9," (DeiT model)"),r9.forEach(t),JNo=i(Fe),tv=n(Fe,"LI",{});var Y0e=s(tv);Gie=n(Y0e,"STRONG",{});var ent=s(Gie);YNo=r(ent,"imagegpt"),ent.forEach(t),KNo=r(Y0e," \u2014 "),jD=n(Y0e,"A",{href:!0});var ont=s(jD);ZNo=r(ont,"ImageGPTForImageClassification"),ont.forEach(t),ejo=r(Y0e," (ImageGPT model)"),Y0e.forEach(t),ojo=i(Fe),ma=n(Fe,"LI",{});var Pf=s(ma);Oie=n(Pf,"STRONG",{});var rnt=s(Oie);rjo=r(rnt,"perceiver"),rnt.forEach(t),tjo=r(Pf," \u2014 "),DD=n(Pf,"A",{href:!0});var tnt=s(DD);ajo=r(tnt,"PerceiverForImageClassificationLearned"),tnt.forEach(t),njo=r(Pf," or "),qD=n(Pf,"A",{href:!0});var ant=s(qD);sjo=r(ant,"PerceiverForImageClassificationFourier"),ant.forEach(t),ljo=r(Pf," or "),GD=n(Pf,"A",{href:!0});var nnt=s(GD);ijo=r(nnt,"PerceiverForImageClassificationConvProcessing"),nnt.forEach(t),djo=r(Pf," (Perceiver model)"),Pf.forEach(t),cjo=i(Fe),av=n(Fe,"LI",{});var K0e=s(av);Xie=n(K0e,"STRONG",{});var snt=s(Xie);fjo=r(snt,"poolformer"),snt.forEach(t),mjo=r(K0e," \u2014 "),OD=n(K0e,"A",{href:!0});var lnt=s(OD);gjo=r(lnt,"PoolFormerForImageClassification"),lnt.forEach(t),hjo=r(K0e," (PoolFormer model)"),K0e.forEach(t),pjo=i(Fe),nv=n(Fe,"LI",{});var Z0e=s(nv);Vie=n(Z0e,"STRONG",{});var int=s(Vie);_jo=r(int,"resnet"),int.forEach(t),ujo=r(Z0e," \u2014 "),XD=n(Z0e,"A",{href:!0});var dnt=s(XD);bjo=r(dnt,"ResNetForImageClassification"),dnt.forEach(t),vjo=r(Z0e," (ResNet model)"),Z0e.forEach(t),Tjo=i(Fe),sv=n(Fe,"LI",{});var eLe=s(sv);zie=n(eLe,"STRONG",{});var cnt=s(zie);Fjo=r(cnt,"segformer"),cnt.forEach(t),Cjo=r(eLe," \u2014 "),VD=n(eLe,"A",{href:!0});var fnt=s(VD);Mjo=r(fnt,"SegformerForImageClassification"),fnt.forEach(t),Ejo=r(eLe," (SegFormer model)"),eLe.forEach(t),yjo=i(Fe),lv=n(Fe,"LI",{});var oLe=s(lv);Wie=n(oLe,"STRONG",{});var mnt=s(Wie);wjo=r(mnt,"swin"),mnt.forEach(t),Ajo=r(oLe," \u2014 "),zD=n(oLe,"A",{href:!0});var gnt=s(zD);Ljo=r(gnt,"SwinForImageClassification"),gnt.forEach(t),Bjo=r(oLe," (Swin model)"),oLe.forEach(t),xjo=i(Fe),iv=n(Fe,"LI",{});var rLe=s(iv);Qie=n(rLe,"STRONG",{});var hnt=s(Qie);kjo=r(hnt,"van"),hnt.forEach(t),Rjo=r(rLe," \u2014 "),WD=n(rLe,"A",{href:!0});var pnt=s(WD);Sjo=r(pnt,"VanForImageClassification"),pnt.forEach(t),Pjo=r(rLe," (VAN model)"),rLe.forEach(t),$jo=i(Fe),dv=n(Fe,"LI",{});var tLe=s(dv);Hie=n(tLe,"STRONG",{});var _nt=s(Hie);Ijo=r(_nt,"vit"),_nt.forEach(t),Njo=r(tLe," \u2014 "),QD=n(tLe,"A",{href:!0});var unt=s(QD);jjo=r(unt,"ViTForImageClassification"),unt.forEach(t),Djo=r(tLe," (ViT model)"),tLe.forEach(t),Fe.forEach(t),qjo=i(Yt),cv=n(Yt,"P",{});var aLe=s(cv);Gjo=r(aLe,"The model is set in evaluation mode by default using "),Uie=n(aLe,"CODE",{});var bnt=s(Uie);Ojo=r(bnt,"model.eval()"),bnt.forEach(t),Xjo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(aLe,"CODE",{});var vnt=s(Jie);Vjo=r(vnt,"model.train()"),vnt.forEach(t),aLe.forEach(t),zjo=i(Yt),Yie=n(Yt,"P",{});var Tnt=s(Yie);Wjo=r(Tnt,"Examples:"),Tnt.forEach(t),Qjo=i(Yt),m(Tw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),lRe=i(c),Rd=n(c,"H2",{class:!0});var _Pe=s(Rd);fv=n(_Pe,"A",{id:!0,class:!0,href:!0});var Fnt=s(fv);Kie=n(Fnt,"SPAN",{});var Cnt=s(Kie);m(Fw.$$.fragment,Cnt),Cnt.forEach(t),Fnt.forEach(t),Hjo=i(_Pe),Zie=n(_Pe,"SPAN",{});var Mnt=s(Zie);Ujo=r(Mnt,"AutoModelForVision2Seq"),Mnt.forEach(t),_Pe.forEach(t),iRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(Cw.$$.fragment,ul),Jjo=i(ul),Sd=n(ul,"P",{});var kW=s(Sd);Yjo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ede=n(kW,"CODE",{});var Ent=s(ede);Kjo=r(Ent,"from_pretrained()"),Ent.forEach(t),Zjo=r(kW,"class method or the "),ode=n(kW,"CODE",{});var ynt=s(ode);eDo=r(ynt,"from_config()"),ynt.forEach(t),oDo=r(kW,`class
method.`),kW.forEach(t),rDo=i(ul),Mw=n(ul,"P",{});var uPe=s(Mw);tDo=r(uPe,"This class cannot be instantiated directly using "),rde=n(uPe,"CODE",{});var wnt=s(rde);aDo=r(wnt,"__init__()"),wnt.forEach(t),nDo=r(uPe," (throws an error)."),uPe.forEach(t),sDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Ew.$$.fragment,bl),lDo=i(bl),tde=n(bl,"P",{});var Ant=s(tde);iDo=r(Ant,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ant.forEach(t),dDo=i(bl),Pd=n(bl,"P",{});var RW=s(Pd);cDo=r(RW,`Note:
Loading a model from its configuration file does `),ade=n(RW,"STRONG",{});var Lnt=s(ade);fDo=r(Lnt,"not"),Lnt.forEach(t),mDo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=n(RW,"CODE",{});var Bnt=s(nde);gDo=r(Bnt,"from_pretrained()"),Bnt.forEach(t),hDo=r(RW,"to load the model weights."),RW.forEach(t),pDo=i(bl),sde=n(bl,"P",{});var xnt=s(sde);_Do=r(xnt,"Examples:"),xnt.forEach(t),uDo=i(bl),m(yw.$$.fragment,bl),bl.forEach(t),bDo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(ww.$$.fragment,Kt),vDo=i(Kt),lde=n(Kt,"P",{});var knt=s(lde);TDo=r(knt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),knt.forEach(t),FDo=i(Kt),rn=n(Kt,"P",{});var AE=s(rn);CDo=r(AE,"The model class to instantiate is selected based on the "),ide=n(AE,"CODE",{});var Rnt=s(ide);MDo=r(Rnt,"model_type"),Rnt.forEach(t),EDo=r(AE,` property of the config object (either
passed as an argument or loaded from `),dde=n(AE,"CODE",{});var Snt=s(dde);yDo=r(Snt,"pretrained_model_name_or_path"),Snt.forEach(t),wDo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(AE,"CODE",{});var Pnt=s(cde);ADo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),LDo=r(AE,":"),AE.forEach(t),BDo=i(Kt),fde=n(Kt,"UL",{});var $nt=s(fde);mv=n($nt,"LI",{});var nLe=s(mv);mde=n(nLe,"STRONG",{});var Int=s(mde);xDo=r(Int,"vision-encoder-decoder"),Int.forEach(t),kDo=r(nLe," \u2014 "),HD=n(nLe,"A",{href:!0});var Nnt=s(HD);RDo=r(Nnt,"VisionEncoderDecoderModel"),Nnt.forEach(t),SDo=r(nLe," (Vision Encoder decoder model)"),nLe.forEach(t),$nt.forEach(t),PDo=i(Kt),gv=n(Kt,"P",{});var sLe=s(gv);$Do=r(sLe,"The model is set in evaluation mode by default using "),gde=n(sLe,"CODE",{});var jnt=s(gde);IDo=r(jnt,"model.eval()"),jnt.forEach(t),NDo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=n(sLe,"CODE",{});var Dnt=s(hde);jDo=r(Dnt,"model.train()"),Dnt.forEach(t),sLe.forEach(t),DDo=i(Kt),pde=n(Kt,"P",{});var qnt=s(pde);qDo=r(qnt,"Examples:"),qnt.forEach(t),GDo=i(Kt),m(Aw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),dRe=i(c),$d=n(c,"H2",{class:!0});var bPe=s($d);hv=n(bPe,"A",{id:!0,class:!0,href:!0});var Gnt=s(hv);_de=n(Gnt,"SPAN",{});var Ont=s(_de);m(Lw.$$.fragment,Ont),Ont.forEach(t),Gnt.forEach(t),ODo=i(bPe),ude=n(bPe,"SPAN",{});var Xnt=s(ude);XDo=r(Xnt,"AutoModelForAudioClassification"),Xnt.forEach(t),bPe.forEach(t),cRe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(Bw.$$.fragment,vl),VDo=i(vl),Id=n(vl,"P",{});var SW=s(Id);zDo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bde=n(SW,"CODE",{});var Vnt=s(bde);WDo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),QDo=r(SW,"class method or the "),vde=n(SW,"CODE",{});var znt=s(vde);HDo=r(znt,"from_config()"),znt.forEach(t),UDo=r(SW,`class
method.`),SW.forEach(t),JDo=i(vl),xw=n(vl,"P",{});var vPe=s(xw);YDo=r(vPe,"This class cannot be instantiated directly using "),Tde=n(vPe,"CODE",{});var Wnt=s(Tde);KDo=r(Wnt,"__init__()"),Wnt.forEach(t),ZDo=r(vPe," (throws an error)."),vPe.forEach(t),eqo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(kw.$$.fragment,Tl),oqo=i(Tl),Fde=n(Tl,"P",{});var Qnt=s(Fde);rqo=r(Qnt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qnt.forEach(t),tqo=i(Tl),Nd=n(Tl,"P",{});var PW=s(Nd);aqo=r(PW,`Note:
Loading a model from its configuration file does `),Cde=n(PW,"STRONG",{});var Hnt=s(Cde);nqo=r(Hnt,"not"),Hnt.forEach(t),sqo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=n(PW,"CODE",{});var Unt=s(Mde);lqo=r(Unt,"from_pretrained()"),Unt.forEach(t),iqo=r(PW,"to load the model weights."),PW.forEach(t),dqo=i(Tl),Ede=n(Tl,"P",{});var Jnt=s(Ede);cqo=r(Jnt,"Examples:"),Jnt.forEach(t),fqo=i(Tl),m(Rw.$$.fragment,Tl),Tl.forEach(t),mqo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(Sw.$$.fragment,Zt),gqo=i(Zt),yde=n(Zt,"P",{});var Ynt=s(yde);hqo=r(Ynt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ynt.forEach(t),pqo=i(Zt),tn=n(Zt,"P",{});var LE=s(tn);_qo=r(LE,"The model class to instantiate is selected based on the "),wde=n(LE,"CODE",{});var Knt=s(wde);uqo=r(Knt,"model_type"),Knt.forEach(t),bqo=r(LE,` property of the config object (either
passed as an argument or loaded from `),Ade=n(LE,"CODE",{});var Znt=s(Ade);vqo=r(Znt,"pretrained_model_name_or_path"),Znt.forEach(t),Tqo=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(LE,"CODE",{});var est=s(Lde);Fqo=r(est,"pretrained_model_name_or_path"),est.forEach(t),Cqo=r(LE,":"),LE.forEach(t),Mqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);pv=n(qo,"LI",{});var lLe=s(pv);Bde=n(lLe,"STRONG",{});var ost=s(Bde);Eqo=r(ost,"data2vec-audio"),ost.forEach(t),yqo=r(lLe," \u2014 "),UD=n(lLe,"A",{href:!0});var rst=s(UD);wqo=r(rst,"Data2VecAudioForSequenceClassification"),rst.forEach(t),Aqo=r(lLe," (Data2VecAudio model)"),lLe.forEach(t),Lqo=i(qo),_v=n(qo,"LI",{});var iLe=s(_v);xde=n(iLe,"STRONG",{});var tst=s(xde);Bqo=r(tst,"hubert"),tst.forEach(t),xqo=r(iLe," \u2014 "),JD=n(iLe,"A",{href:!0});var ast=s(JD);kqo=r(ast,"HubertForSequenceClassification"),ast.forEach(t),Rqo=r(iLe," (Hubert model)"),iLe.forEach(t),Sqo=i(qo),uv=n(qo,"LI",{});var dLe=s(uv);kde=n(dLe,"STRONG",{});var nst=s(kde);Pqo=r(nst,"sew"),nst.forEach(t),$qo=r(dLe," \u2014 "),YD=n(dLe,"A",{href:!0});var sst=s(YD);Iqo=r(sst,"SEWForSequenceClassification"),sst.forEach(t),Nqo=r(dLe," (SEW model)"),dLe.forEach(t),jqo=i(qo),bv=n(qo,"LI",{});var cLe=s(bv);Rde=n(cLe,"STRONG",{});var lst=s(Rde);Dqo=r(lst,"sew-d"),lst.forEach(t),qqo=r(cLe," \u2014 "),KD=n(cLe,"A",{href:!0});var ist=s(KD);Gqo=r(ist,"SEWDForSequenceClassification"),ist.forEach(t),Oqo=r(cLe," (SEW-D model)"),cLe.forEach(t),Xqo=i(qo),vv=n(qo,"LI",{});var fLe=s(vv);Sde=n(fLe,"STRONG",{});var dst=s(Sde);Vqo=r(dst,"unispeech"),dst.forEach(t),zqo=r(fLe," \u2014 "),ZD=n(fLe,"A",{href:!0});var cst=s(ZD);Wqo=r(cst,"UniSpeechForSequenceClassification"),cst.forEach(t),Qqo=r(fLe," (UniSpeech model)"),fLe.forEach(t),Hqo=i(qo),Tv=n(qo,"LI",{});var mLe=s(Tv);Pde=n(mLe,"STRONG",{});var fst=s(Pde);Uqo=r(fst,"unispeech-sat"),fst.forEach(t),Jqo=r(mLe," \u2014 "),eq=n(mLe,"A",{href:!0});var mst=s(eq);Yqo=r(mst,"UniSpeechSatForSequenceClassification"),mst.forEach(t),Kqo=r(mLe," (UniSpeechSat model)"),mLe.forEach(t),Zqo=i(qo),Fv=n(qo,"LI",{});var gLe=s(Fv);$de=n(gLe,"STRONG",{});var gst=s($de);eGo=r(gst,"wav2vec2"),gst.forEach(t),oGo=r(gLe," \u2014 "),oq=n(gLe,"A",{href:!0});var hst=s(oq);rGo=r(hst,"Wav2Vec2ForSequenceClassification"),hst.forEach(t),tGo=r(gLe," (Wav2Vec2 model)"),gLe.forEach(t),aGo=i(qo),Cv=n(qo,"LI",{});var hLe=s(Cv);Ide=n(hLe,"STRONG",{});var pst=s(Ide);nGo=r(pst,"wavlm"),pst.forEach(t),sGo=r(hLe," \u2014 "),rq=n(hLe,"A",{href:!0});var _st=s(rq);lGo=r(_st,"WavLMForSequenceClassification"),_st.forEach(t),iGo=r(hLe," (WavLM model)"),hLe.forEach(t),qo.forEach(t),dGo=i(Zt),Mv=n(Zt,"P",{});var pLe=s(Mv);cGo=r(pLe,"The model is set in evaluation mode by default using "),Nde=n(pLe,"CODE",{});var ust=s(Nde);fGo=r(ust,"model.eval()"),ust.forEach(t),mGo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=n(pLe,"CODE",{});var bst=s(jde);gGo=r(bst,"model.train()"),bst.forEach(t),pLe.forEach(t),hGo=i(Zt),Dde=n(Zt,"P",{});var vst=s(Dde);pGo=r(vst,"Examples:"),vst.forEach(t),_Go=i(Zt),m(Pw.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),fRe=i(c),jd=n(c,"H2",{class:!0});var TPe=s(jd);Ev=n(TPe,"A",{id:!0,class:!0,href:!0});var Tst=s(Ev);qde=n(Tst,"SPAN",{});var Fst=s(qde);m($w.$$.fragment,Fst),Fst.forEach(t),Tst.forEach(t),uGo=i(TPe),Gde=n(TPe,"SPAN",{});var Cst=s(Gde);bGo=r(Cst,"AutoModelForAudioFrameClassification"),Cst.forEach(t),TPe.forEach(t),mRe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Iw.$$.fragment,Fl),vGo=i(Fl),Dd=n(Fl,"P",{});var $W=s(Dd);TGo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ode=n($W,"CODE",{});var Mst=s(Ode);FGo=r(Mst,"from_pretrained()"),Mst.forEach(t),CGo=r($W,"class method or the "),Xde=n($W,"CODE",{});var Est=s(Xde);MGo=r(Est,"from_config()"),Est.forEach(t),EGo=r($W,`class
method.`),$W.forEach(t),yGo=i(Fl),Nw=n(Fl,"P",{});var FPe=s(Nw);wGo=r(FPe,"This class cannot be instantiated directly using "),Vde=n(FPe,"CODE",{});var yst=s(Vde);AGo=r(yst,"__init__()"),yst.forEach(t),LGo=r(FPe," (throws an error)."),FPe.forEach(t),BGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(jw.$$.fragment,Cl),xGo=i(Cl),zde=n(Cl,"P",{});var wst=s(zde);kGo=r(wst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wst.forEach(t),RGo=i(Cl),qd=n(Cl,"P",{});var IW=s(qd);SGo=r(IW,`Note:
Loading a model from its configuration file does `),Wde=n(IW,"STRONG",{});var Ast=s(Wde);PGo=r(Ast,"not"),Ast.forEach(t),$Go=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qde=n(IW,"CODE",{});var Lst=s(Qde);IGo=r(Lst,"from_pretrained()"),Lst.forEach(t),NGo=r(IW,"to load the model weights."),IW.forEach(t),jGo=i(Cl),Hde=n(Cl,"P",{});var Bst=s(Hde);DGo=r(Bst,"Examples:"),Bst.forEach(t),qGo=i(Cl),m(Dw.$$.fragment,Cl),Cl.forEach(t),GGo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(qw.$$.fragment,ea),OGo=i(ea),Ude=n(ea,"P",{});var xst=s(Ude);XGo=r(xst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xst.forEach(t),VGo=i(ea),an=n(ea,"P",{});var BE=s(an);zGo=r(BE,"The model class to instantiate is selected based on the "),Jde=n(BE,"CODE",{});var kst=s(Jde);WGo=r(kst,"model_type"),kst.forEach(t),QGo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Yde=n(BE,"CODE",{});var Rst=s(Yde);HGo=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),UGo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kde=n(BE,"CODE",{});var Sst=s(Kde);JGo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),YGo=r(BE,":"),BE.forEach(t),KGo=i(ea),nn=n(ea,"UL",{});var xE=s(nn);yv=n(xE,"LI",{});var _Le=s(yv);Zde=n(_Le,"STRONG",{});var Pst=s(Zde);ZGo=r(Pst,"data2vec-audio"),Pst.forEach(t),eOo=r(_Le," \u2014 "),tq=n(_Le,"A",{href:!0});var $st=s(tq);oOo=r($st,"Data2VecAudioForAudioFrameClassification"),$st.forEach(t),rOo=r(_Le," (Data2VecAudio model)"),_Le.forEach(t),tOo=i(xE),wv=n(xE,"LI",{});var uLe=s(wv);ece=n(uLe,"STRONG",{});var Ist=s(ece);aOo=r(Ist,"unispeech-sat"),Ist.forEach(t),nOo=r(uLe," \u2014 "),aq=n(uLe,"A",{href:!0});var Nst=s(aq);sOo=r(Nst,"UniSpeechSatForAudioFrameClassification"),Nst.forEach(t),lOo=r(uLe," (UniSpeechSat model)"),uLe.forEach(t),iOo=i(xE),Av=n(xE,"LI",{});var bLe=s(Av);oce=n(bLe,"STRONG",{});var jst=s(oce);dOo=r(jst,"wav2vec2"),jst.forEach(t),cOo=r(bLe," \u2014 "),nq=n(bLe,"A",{href:!0});var Dst=s(nq);fOo=r(Dst,"Wav2Vec2ForAudioFrameClassification"),Dst.forEach(t),mOo=r(bLe," (Wav2Vec2 model)"),bLe.forEach(t),gOo=i(xE),Lv=n(xE,"LI",{});var vLe=s(Lv);rce=n(vLe,"STRONG",{});var qst=s(rce);hOo=r(qst,"wavlm"),qst.forEach(t),pOo=r(vLe," \u2014 "),sq=n(vLe,"A",{href:!0});var Gst=s(sq);_Oo=r(Gst,"WavLMForAudioFrameClassification"),Gst.forEach(t),uOo=r(vLe," (WavLM model)"),vLe.forEach(t),xE.forEach(t),bOo=i(ea),Bv=n(ea,"P",{});var TLe=s(Bv);vOo=r(TLe,"The model is set in evaluation mode by default using "),tce=n(TLe,"CODE",{});var Ost=s(tce);TOo=r(Ost,"model.eval()"),Ost.forEach(t),FOo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(TLe,"CODE",{});var Xst=s(ace);COo=r(Xst,"model.train()"),Xst.forEach(t),TLe.forEach(t),MOo=i(ea),nce=n(ea,"P",{});var Vst=s(nce);EOo=r(Vst,"Examples:"),Vst.forEach(t),yOo=i(ea),m(Gw.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),gRe=i(c),Gd=n(c,"H2",{class:!0});var CPe=s(Gd);xv=n(CPe,"A",{id:!0,class:!0,href:!0});var zst=s(xv);sce=n(zst,"SPAN",{});var Wst=s(sce);m(Ow.$$.fragment,Wst),Wst.forEach(t),zst.forEach(t),wOo=i(CPe),lce=n(CPe,"SPAN",{});var Qst=s(lce);AOo=r(Qst,"AutoModelForCTC"),Qst.forEach(t),CPe.forEach(t),hRe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Xw.$$.fragment,Ml),LOo=i(Ml),Od=n(Ml,"P",{});var NW=s(Od);BOo=r(NW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ice=n(NW,"CODE",{});var Hst=s(ice);xOo=r(Hst,"from_pretrained()"),Hst.forEach(t),kOo=r(NW,"class method or the "),dce=n(NW,"CODE",{});var Ust=s(dce);ROo=r(Ust,"from_config()"),Ust.forEach(t),SOo=r(NW,`class
method.`),NW.forEach(t),POo=i(Ml),Vw=n(Ml,"P",{});var MPe=s(Vw);$Oo=r(MPe,"This class cannot be instantiated directly using "),cce=n(MPe,"CODE",{});var Jst=s(cce);IOo=r(Jst,"__init__()"),Jst.forEach(t),NOo=r(MPe," (throws an error)."),MPe.forEach(t),jOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(zw.$$.fragment,El),DOo=i(El),fce=n(El,"P",{});var Yst=s(fce);qOo=r(Yst,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Yst.forEach(t),GOo=i(El),Xd=n(El,"P",{});var jW=s(Xd);OOo=r(jW,`Note:
Loading a model from its configuration file does `),mce=n(jW,"STRONG",{});var Kst=s(mce);XOo=r(Kst,"not"),Kst.forEach(t),VOo=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=n(jW,"CODE",{});var Zst=s(gce);zOo=r(Zst,"from_pretrained()"),Zst.forEach(t),WOo=r(jW,"to load the model weights."),jW.forEach(t),QOo=i(El),hce=n(El,"P",{});var elt=s(hce);HOo=r(elt,"Examples:"),elt.forEach(t),UOo=i(El),m(Ww.$$.fragment,El),El.forEach(t),JOo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(Qw.$$.fragment,oa),YOo=i(oa),pce=n(oa,"P",{});var olt=s(pce);KOo=r(olt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),olt.forEach(t),ZOo=i(oa),sn=n(oa,"P",{});var kE=s(sn);eXo=r(kE,"The model class to instantiate is selected based on the "),_ce=n(kE,"CODE",{});var rlt=s(_ce);oXo=r(rlt,"model_type"),rlt.forEach(t),rXo=r(kE,` property of the config object (either
passed as an argument or loaded from `),uce=n(kE,"CODE",{});var tlt=s(uce);tXo=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),aXo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(kE,"CODE",{});var alt=s(bce);nXo=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),sXo=r(kE,":"),kE.forEach(t),lXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);kv=n(Go,"LI",{});var FLe=s(kv);vce=n(FLe,"STRONG",{});var nlt=s(vce);iXo=r(nlt,"data2vec-audio"),nlt.forEach(t),dXo=r(FLe," \u2014 "),lq=n(FLe,"A",{href:!0});var slt=s(lq);cXo=r(slt,"Data2VecAudioForCTC"),slt.forEach(t),fXo=r(FLe," (Data2VecAudio model)"),FLe.forEach(t),mXo=i(Go),Rv=n(Go,"LI",{});var CLe=s(Rv);Tce=n(CLe,"STRONG",{});var llt=s(Tce);gXo=r(llt,"hubert"),llt.forEach(t),hXo=r(CLe," \u2014 "),iq=n(CLe,"A",{href:!0});var ilt=s(iq);pXo=r(ilt,"HubertForCTC"),ilt.forEach(t),_Xo=r(CLe," (Hubert model)"),CLe.forEach(t),uXo=i(Go),Sv=n(Go,"LI",{});var MLe=s(Sv);Fce=n(MLe,"STRONG",{});var dlt=s(Fce);bXo=r(dlt,"sew"),dlt.forEach(t),vXo=r(MLe," \u2014 "),dq=n(MLe,"A",{href:!0});var clt=s(dq);TXo=r(clt,"SEWForCTC"),clt.forEach(t),FXo=r(MLe," (SEW model)"),MLe.forEach(t),CXo=i(Go),Pv=n(Go,"LI",{});var ELe=s(Pv);Cce=n(ELe,"STRONG",{});var flt=s(Cce);MXo=r(flt,"sew-d"),flt.forEach(t),EXo=r(ELe," \u2014 "),cq=n(ELe,"A",{href:!0});var mlt=s(cq);yXo=r(mlt,"SEWDForCTC"),mlt.forEach(t),wXo=r(ELe," (SEW-D model)"),ELe.forEach(t),AXo=i(Go),$v=n(Go,"LI",{});var yLe=s($v);Mce=n(yLe,"STRONG",{});var glt=s(Mce);LXo=r(glt,"unispeech"),glt.forEach(t),BXo=r(yLe," \u2014 "),fq=n(yLe,"A",{href:!0});var hlt=s(fq);xXo=r(hlt,"UniSpeechForCTC"),hlt.forEach(t),kXo=r(yLe," (UniSpeech model)"),yLe.forEach(t),RXo=i(Go),Iv=n(Go,"LI",{});var wLe=s(Iv);Ece=n(wLe,"STRONG",{});var plt=s(Ece);SXo=r(plt,"unispeech-sat"),plt.forEach(t),PXo=r(wLe," \u2014 "),mq=n(wLe,"A",{href:!0});var _lt=s(mq);$Xo=r(_lt,"UniSpeechSatForCTC"),_lt.forEach(t),IXo=r(wLe," (UniSpeechSat model)"),wLe.forEach(t),NXo=i(Go),Nv=n(Go,"LI",{});var ALe=s(Nv);yce=n(ALe,"STRONG",{});var ult=s(yce);jXo=r(ult,"wav2vec2"),ult.forEach(t),DXo=r(ALe," \u2014 "),gq=n(ALe,"A",{href:!0});var blt=s(gq);qXo=r(blt,"Wav2Vec2ForCTC"),blt.forEach(t),GXo=r(ALe," (Wav2Vec2 model)"),ALe.forEach(t),OXo=i(Go),jv=n(Go,"LI",{});var LLe=s(jv);wce=n(LLe,"STRONG",{});var vlt=s(wce);XXo=r(vlt,"wavlm"),vlt.forEach(t),VXo=r(LLe," \u2014 "),hq=n(LLe,"A",{href:!0});var Tlt=s(hq);zXo=r(Tlt,"WavLMForCTC"),Tlt.forEach(t),WXo=r(LLe," (WavLM model)"),LLe.forEach(t),Go.forEach(t),QXo=i(oa),Dv=n(oa,"P",{});var BLe=s(Dv);HXo=r(BLe,"The model is set in evaluation mode by default using "),Ace=n(BLe,"CODE",{});var Flt=s(Ace);UXo=r(Flt,"model.eval()"),Flt.forEach(t),JXo=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(BLe,"CODE",{});var Clt=s(Lce);YXo=r(Clt,"model.train()"),Clt.forEach(t),BLe.forEach(t),KXo=i(oa),Bce=n(oa,"P",{});var Mlt=s(Bce);ZXo=r(Mlt,"Examples:"),Mlt.forEach(t),eVo=i(oa),m(Hw.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),pRe=i(c),Vd=n(c,"H2",{class:!0});var EPe=s(Vd);qv=n(EPe,"A",{id:!0,class:!0,href:!0});var Elt=s(qv);xce=n(Elt,"SPAN",{});var ylt=s(xce);m(Uw.$$.fragment,ylt),ylt.forEach(t),Elt.forEach(t),oVo=i(EPe),kce=n(EPe,"SPAN",{});var wlt=s(kce);rVo=r(wlt,"AutoModelForSpeechSeq2Seq"),wlt.forEach(t),EPe.forEach(t),_Re=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Jw.$$.fragment,yl),tVo=i(yl),zd=n(yl,"P",{});var DW=s(zd);aVo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rce=n(DW,"CODE",{});var Alt=s(Rce);nVo=r(Alt,"from_pretrained()"),Alt.forEach(t),sVo=r(DW,"class method or the "),Sce=n(DW,"CODE",{});var Llt=s(Sce);lVo=r(Llt,"from_config()"),Llt.forEach(t),iVo=r(DW,`class
method.`),DW.forEach(t),dVo=i(yl),Yw=n(yl,"P",{});var yPe=s(Yw);cVo=r(yPe,"This class cannot be instantiated directly using "),Pce=n(yPe,"CODE",{});var Blt=s(Pce);fVo=r(Blt,"__init__()"),Blt.forEach(t),mVo=r(yPe," (throws an error)."),yPe.forEach(t),gVo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Kw.$$.fragment,wl),hVo=i(wl),$ce=n(wl,"P",{});var xlt=s($ce);pVo=r(xlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xlt.forEach(t),_Vo=i(wl),Wd=n(wl,"P",{});var qW=s(Wd);uVo=r(qW,`Note:
Loading a model from its configuration file does `),Ice=n(qW,"STRONG",{});var klt=s(Ice);bVo=r(klt,"not"),klt.forEach(t),vVo=r(qW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=n(qW,"CODE",{});var Rlt=s(Nce);TVo=r(Rlt,"from_pretrained()"),Rlt.forEach(t),FVo=r(qW,"to load the model weights."),qW.forEach(t),CVo=i(wl),jce=n(wl,"P",{});var Slt=s(jce);MVo=r(Slt,"Examples:"),Slt.forEach(t),EVo=i(wl),m(Zw.$$.fragment,wl),wl.forEach(t),yVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(eA.$$.fragment,ra),wVo=i(ra),Dce=n(ra,"P",{});var Plt=s(Dce);AVo=r(Plt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Plt.forEach(t),LVo=i(ra),ln=n(ra,"P",{});var RE=s(ln);BVo=r(RE,"The model class to instantiate is selected based on the "),qce=n(RE,"CODE",{});var $lt=s(qce);xVo=r($lt,"model_type"),$lt.forEach(t),kVo=r(RE,` property of the config object (either
passed as an argument or loaded from `),Gce=n(RE,"CODE",{});var Ilt=s(Gce);RVo=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),SVo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(RE,"CODE",{});var Nlt=s(Oce);PVo=r(Nlt,"pretrained_model_name_or_path"),Nlt.forEach(t),$Vo=r(RE,":"),RE.forEach(t),IVo=i(ra),oA=n(ra,"UL",{});var wPe=s(oA);Gv=n(wPe,"LI",{});var xLe=s(Gv);Xce=n(xLe,"STRONG",{});var jlt=s(Xce);NVo=r(jlt,"speech-encoder-decoder"),jlt.forEach(t),jVo=r(xLe," \u2014 "),pq=n(xLe,"A",{href:!0});var Dlt=s(pq);DVo=r(Dlt,"SpeechEncoderDecoderModel"),Dlt.forEach(t),qVo=r(xLe," (Speech Encoder decoder model)"),xLe.forEach(t),GVo=i(wPe),Ov=n(wPe,"LI",{});var kLe=s(Ov);Vce=n(kLe,"STRONG",{});var qlt=s(Vce);OVo=r(qlt,"speech_to_text"),qlt.forEach(t),XVo=r(kLe," \u2014 "),_q=n(kLe,"A",{href:!0});var Glt=s(_q);VVo=r(Glt,"Speech2TextForConditionalGeneration"),Glt.forEach(t),zVo=r(kLe," (Speech2Text model)"),kLe.forEach(t),wPe.forEach(t),WVo=i(ra),Xv=n(ra,"P",{});var RLe=s(Xv);QVo=r(RLe,"The model is set in evaluation mode by default using "),zce=n(RLe,"CODE",{});var Olt=s(zce);HVo=r(Olt,"model.eval()"),Olt.forEach(t),UVo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(RLe,"CODE",{});var Xlt=s(Wce);JVo=r(Xlt,"model.train()"),Xlt.forEach(t),RLe.forEach(t),YVo=i(ra),Qce=n(ra,"P",{});var Vlt=s(Qce);KVo=r(Vlt,"Examples:"),Vlt.forEach(t),ZVo=i(ra),m(rA.$$.fragment,ra),ra.forEach(t),yl.forEach(t),uRe=i(c),Qd=n(c,"H2",{class:!0});var APe=s(Qd);Vv=n(APe,"A",{id:!0,class:!0,href:!0});var zlt=s(Vv);Hce=n(zlt,"SPAN",{});var Wlt=s(Hce);m(tA.$$.fragment,Wlt),Wlt.forEach(t),zlt.forEach(t),ezo=i(APe),Uce=n(APe,"SPAN",{});var Qlt=s(Uce);ozo=r(Qlt,"AutoModelForAudioXVector"),Qlt.forEach(t),APe.forEach(t),bRe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(aA.$$.fragment,Al),rzo=i(Al),Hd=n(Al,"P",{});var GW=s(Hd);tzo=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jce=n(GW,"CODE",{});var Hlt=s(Jce);azo=r(Hlt,"from_pretrained()"),Hlt.forEach(t),nzo=r(GW,"class method or the "),Yce=n(GW,"CODE",{});var Ult=s(Yce);szo=r(Ult,"from_config()"),Ult.forEach(t),lzo=r(GW,`class
method.`),GW.forEach(t),izo=i(Al),nA=n(Al,"P",{});var LPe=s(nA);dzo=r(LPe,"This class cannot be instantiated directly using "),Kce=n(LPe,"CODE",{});var Jlt=s(Kce);czo=r(Jlt,"__init__()"),Jlt.forEach(t),fzo=r(LPe," (throws an error)."),LPe.forEach(t),mzo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(sA.$$.fragment,Ll),gzo=i(Ll),Zce=n(Ll,"P",{});var Ylt=s(Zce);hzo=r(Ylt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ylt.forEach(t),pzo=i(Ll),Ud=n(Ll,"P",{});var OW=s(Ud);_zo=r(OW,`Note:
Loading a model from its configuration file does `),efe=n(OW,"STRONG",{});var Klt=s(efe);uzo=r(Klt,"not"),Klt.forEach(t),bzo=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=n(OW,"CODE",{});var Zlt=s(ofe);vzo=r(Zlt,"from_pretrained()"),Zlt.forEach(t),Tzo=r(OW,"to load the model weights."),OW.forEach(t),Fzo=i(Ll),rfe=n(Ll,"P",{});var eit=s(rfe);Czo=r(eit,"Examples:"),eit.forEach(t),Mzo=i(Ll),m(lA.$$.fragment,Ll),Ll.forEach(t),Ezo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(iA.$$.fragment,ta),yzo=i(ta),tfe=n(ta,"P",{});var oit=s(tfe);wzo=r(oit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),oit.forEach(t),Azo=i(ta),dn=n(ta,"P",{});var SE=s(dn);Lzo=r(SE,"The model class to instantiate is selected based on the "),afe=n(SE,"CODE",{});var rit=s(afe);Bzo=r(rit,"model_type"),rit.forEach(t),xzo=r(SE,` property of the config object (either
passed as an argument or loaded from `),nfe=n(SE,"CODE",{});var tit=s(nfe);kzo=r(tit,"pretrained_model_name_or_path"),tit.forEach(t),Rzo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(SE,"CODE",{});var ait=s(sfe);Szo=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),Pzo=r(SE,":"),SE.forEach(t),$zo=i(ta),cn=n(ta,"UL",{});var PE=s(cn);zv=n(PE,"LI",{});var SLe=s(zv);lfe=n(SLe,"STRONG",{});var nit=s(lfe);Izo=r(nit,"data2vec-audio"),nit.forEach(t),Nzo=r(SLe," \u2014 "),uq=n(SLe,"A",{href:!0});var sit=s(uq);jzo=r(sit,"Data2VecAudioForXVector"),sit.forEach(t),Dzo=r(SLe," (Data2VecAudio model)"),SLe.forEach(t),qzo=i(PE),Wv=n(PE,"LI",{});var PLe=s(Wv);ife=n(PLe,"STRONG",{});var lit=s(ife);Gzo=r(lit,"unispeech-sat"),lit.forEach(t),Ozo=r(PLe," \u2014 "),bq=n(PLe,"A",{href:!0});var iit=s(bq);Xzo=r(iit,"UniSpeechSatForXVector"),iit.forEach(t),Vzo=r(PLe," (UniSpeechSat model)"),PLe.forEach(t),zzo=i(PE),Qv=n(PE,"LI",{});var $Le=s(Qv);dfe=n($Le,"STRONG",{});var dit=s(dfe);Wzo=r(dit,"wav2vec2"),dit.forEach(t),Qzo=r($Le," \u2014 "),vq=n($Le,"A",{href:!0});var cit=s(vq);Hzo=r(cit,"Wav2Vec2ForXVector"),cit.forEach(t),Uzo=r($Le," (Wav2Vec2 model)"),$Le.forEach(t),Jzo=i(PE),Hv=n(PE,"LI",{});var ILe=s(Hv);cfe=n(ILe,"STRONG",{});var fit=s(cfe);Yzo=r(fit,"wavlm"),fit.forEach(t),Kzo=r(ILe," \u2014 "),Tq=n(ILe,"A",{href:!0});var mit=s(Tq);Zzo=r(mit,"WavLMForXVector"),mit.forEach(t),eWo=r(ILe," (WavLM model)"),ILe.forEach(t),PE.forEach(t),oWo=i(ta),Uv=n(ta,"P",{});var NLe=s(Uv);rWo=r(NLe,"The model is set in evaluation mode by default using "),ffe=n(NLe,"CODE",{});var git=s(ffe);tWo=r(git,"model.eval()"),git.forEach(t),aWo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=n(NLe,"CODE",{});var hit=s(mfe);nWo=r(hit,"model.train()"),hit.forEach(t),NLe.forEach(t),sWo=i(ta),gfe=n(ta,"P",{});var pit=s(gfe);lWo=r(pit,"Examples:"),pit.forEach(t),iWo=i(ta),m(dA.$$.fragment,ta),ta.forEach(t),Al.forEach(t),vRe=i(c),Jd=n(c,"H2",{class:!0});var BPe=s(Jd);Jv=n(BPe,"A",{id:!0,class:!0,href:!0});var _it=s(Jv);hfe=n(_it,"SPAN",{});var uit=s(hfe);m(cA.$$.fragment,uit),uit.forEach(t),_it.forEach(t),dWo=i(BPe),pfe=n(BPe,"SPAN",{});var bit=s(pfe);cWo=r(bit,"AutoModelForMaskedImageModeling"),bit.forEach(t),BPe.forEach(t),TRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(fA.$$.fragment,Bl),fWo=i(Bl),Yd=n(Bl,"P",{});var XW=s(Yd);mWo=r(XW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),_fe=n(XW,"CODE",{});var vit=s(_fe);gWo=r(vit,"from_pretrained()"),vit.forEach(t),hWo=r(XW,"class method or the "),ufe=n(XW,"CODE",{});var Tit=s(ufe);pWo=r(Tit,"from_config()"),Tit.forEach(t),_Wo=r(XW,`class
method.`),XW.forEach(t),uWo=i(Bl),mA=n(Bl,"P",{});var xPe=s(mA);bWo=r(xPe,"This class cannot be instantiated directly using "),bfe=n(xPe,"CODE",{});var Fit=s(bfe);vWo=r(Fit,"__init__()"),Fit.forEach(t),TWo=r(xPe," (throws an error)."),xPe.forEach(t),FWo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(gA.$$.fragment,xl),CWo=i(xl),vfe=n(xl,"P",{});var Cit=s(vfe);MWo=r(Cit,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Cit.forEach(t),EWo=i(xl),Kd=n(xl,"P",{});var VW=s(Kd);yWo=r(VW,`Note:
Loading a model from its configuration file does `),Tfe=n(VW,"STRONG",{});var Mit=s(Tfe);wWo=r(Mit,"not"),Mit.forEach(t),AWo=r(VW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ffe=n(VW,"CODE",{});var Eit=s(Ffe);LWo=r(Eit,"from_pretrained()"),Eit.forEach(t),BWo=r(VW,"to load the model weights."),VW.forEach(t),xWo=i(xl),Cfe=n(xl,"P",{});var yit=s(Cfe);kWo=r(yit,"Examples:"),yit.forEach(t),RWo=i(xl),m(hA.$$.fragment,xl),xl.forEach(t),SWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(pA.$$.fragment,aa),PWo=i(aa),Mfe=n(aa,"P",{});var wit=s(Mfe);$Wo=r(wit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wit.forEach(t),IWo=i(aa),fn=n(aa,"P",{});var $E=s(fn);NWo=r($E,"The model class to instantiate is selected based on the "),Efe=n($E,"CODE",{});var Ait=s(Efe);jWo=r(Ait,"model_type"),Ait.forEach(t),DWo=r($E,` property of the config object (either
passed as an argument or loaded from `),yfe=n($E,"CODE",{});var Lit=s(yfe);qWo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),GWo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n($E,"CODE",{});var Bit=s(wfe);OWo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),XWo=r($E,":"),$E.forEach(t),VWo=i(aa),Zd=n(aa,"UL",{});var zW=s(Zd);Yv=n(zW,"LI",{});var jLe=s(Yv);Afe=n(jLe,"STRONG",{});var xit=s(Afe);zWo=r(xit,"deit"),xit.forEach(t),WWo=r(jLe," \u2014 "),Fq=n(jLe,"A",{href:!0});var kit=s(Fq);QWo=r(kit,"DeiTForMaskedImageModeling"),kit.forEach(t),HWo=r(jLe," (DeiT model)"),jLe.forEach(t),UWo=i(zW),Kv=n(zW,"LI",{});var DLe=s(Kv);Lfe=n(DLe,"STRONG",{});var Rit=s(Lfe);JWo=r(Rit,"swin"),Rit.forEach(t),YWo=r(DLe," \u2014 "),Cq=n(DLe,"A",{href:!0});var Sit=s(Cq);KWo=r(Sit,"SwinForMaskedImageModeling"),Sit.forEach(t),ZWo=r(DLe," (Swin model)"),DLe.forEach(t),eQo=i(zW),Zv=n(zW,"LI",{});var qLe=s(Zv);Bfe=n(qLe,"STRONG",{});var Pit=s(Bfe);oQo=r(Pit,"vit"),Pit.forEach(t),rQo=r(qLe," \u2014 "),Mq=n(qLe,"A",{href:!0});var $it=s(Mq);tQo=r($it,"ViTForMaskedImageModeling"),$it.forEach(t),aQo=r(qLe," (ViT model)"),qLe.forEach(t),zW.forEach(t),nQo=i(aa),e6=n(aa,"P",{});var GLe=s(e6);sQo=r(GLe,"The model is set in evaluation mode by default using "),xfe=n(GLe,"CODE",{});var Iit=s(xfe);lQo=r(Iit,"model.eval()"),Iit.forEach(t),iQo=r(GLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(GLe,"CODE",{});var Nit=s(kfe);dQo=r(Nit,"model.train()"),Nit.forEach(t),GLe.forEach(t),cQo=i(aa),Rfe=n(aa,"P",{});var jit=s(Rfe);fQo=r(jit,"Examples:"),jit.forEach(t),mQo=i(aa),m(_A.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),FRe=i(c),ec=n(c,"H2",{class:!0});var kPe=s(ec);o6=n(kPe,"A",{id:!0,class:!0,href:!0});var Dit=s(o6);Sfe=n(Dit,"SPAN",{});var qit=s(Sfe);m(uA.$$.fragment,qit),qit.forEach(t),Dit.forEach(t),gQo=i(kPe),Pfe=n(kPe,"SPAN",{});var Git=s(Pfe);hQo=r(Git,"AutoModelForObjectDetection"),Git.forEach(t),kPe.forEach(t),CRe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(bA.$$.fragment,kl),pQo=i(kl),oc=n(kl,"P",{});var WW=s(oc);_Qo=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$fe=n(WW,"CODE",{});var Oit=s($fe);uQo=r(Oit,"from_pretrained()"),Oit.forEach(t),bQo=r(WW,"class method or the "),Ife=n(WW,"CODE",{});var Xit=s(Ife);vQo=r(Xit,"from_config()"),Xit.forEach(t),TQo=r(WW,`class
method.`),WW.forEach(t),FQo=i(kl),vA=n(kl,"P",{});var RPe=s(vA);CQo=r(RPe,"This class cannot be instantiated directly using "),Nfe=n(RPe,"CODE",{});var Vit=s(Nfe);MQo=r(Vit,"__init__()"),Vit.forEach(t),EQo=r(RPe," (throws an error)."),RPe.forEach(t),yQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(TA.$$.fragment,Rl),wQo=i(Rl),jfe=n(Rl,"P",{});var zit=s(jfe);AQo=r(zit,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zit.forEach(t),LQo=i(Rl),rc=n(Rl,"P",{});var QW=s(rc);BQo=r(QW,`Note:
Loading a model from its configuration file does `),Dfe=n(QW,"STRONG",{});var Wit=s(Dfe);xQo=r(Wit,"not"),Wit.forEach(t),kQo=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=n(QW,"CODE",{});var Qit=s(qfe);RQo=r(Qit,"from_pretrained()"),Qit.forEach(t),SQo=r(QW,"to load the model weights."),QW.forEach(t),PQo=i(Rl),Gfe=n(Rl,"P",{});var Hit=s(Gfe);$Qo=r(Hit,"Examples:"),Hit.forEach(t),IQo=i(Rl),m(FA.$$.fragment,Rl),Rl.forEach(t),NQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(CA.$$.fragment,na),jQo=i(na),Ofe=n(na,"P",{});var Uit=s(Ofe);DQo=r(Uit,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Uit.forEach(t),qQo=i(na),mn=n(na,"P",{});var IE=s(mn);GQo=r(IE,"The model class to instantiate is selected based on the "),Xfe=n(IE,"CODE",{});var Jit=s(Xfe);OQo=r(Jit,"model_type"),Jit.forEach(t),XQo=r(IE,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(IE,"CODE",{});var Yit=s(Vfe);VQo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),zQo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(IE,"CODE",{});var Kit=s(zfe);WQo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),QQo=r(IE,":"),IE.forEach(t),HQo=i(na),Wfe=n(na,"UL",{});var Zit=s(Wfe);r6=n(Zit,"LI",{});var OLe=s(r6);Qfe=n(OLe,"STRONG",{});var edt=s(Qfe);UQo=r(edt,"detr"),edt.forEach(t),JQo=r(OLe," \u2014 "),Eq=n(OLe,"A",{href:!0});var odt=s(Eq);YQo=r(odt,"DetrForObjectDetection"),odt.forEach(t),KQo=r(OLe," (DETR model)"),OLe.forEach(t),Zit.forEach(t),ZQo=i(na),t6=n(na,"P",{});var XLe=s(t6);eHo=r(XLe,"The model is set in evaluation mode by default using "),Hfe=n(XLe,"CODE",{});var rdt=s(Hfe);oHo=r(rdt,"model.eval()"),rdt.forEach(t),rHo=r(XLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(XLe,"CODE",{});var tdt=s(Ufe);tHo=r(tdt,"model.train()"),tdt.forEach(t),XLe.forEach(t),aHo=i(na),Jfe=n(na,"P",{});var adt=s(Jfe);nHo=r(adt,"Examples:"),adt.forEach(t),sHo=i(na),m(MA.$$.fragment,na),na.forEach(t),kl.forEach(t),MRe=i(c),tc=n(c,"H2",{class:!0});var SPe=s(tc);a6=n(SPe,"A",{id:!0,class:!0,href:!0});var ndt=s(a6);Yfe=n(ndt,"SPAN",{});var sdt=s(Yfe);m(EA.$$.fragment,sdt),sdt.forEach(t),ndt.forEach(t),lHo=i(SPe),Kfe=n(SPe,"SPAN",{});var ldt=s(Kfe);iHo=r(ldt,"AutoModelForImageSegmentation"),ldt.forEach(t),SPe.forEach(t),ERe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(yA.$$.fragment,Sl),dHo=i(Sl),ac=n(Sl,"P",{});var HW=s(ac);cHo=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Zfe=n(HW,"CODE",{});var idt=s(Zfe);fHo=r(idt,"from_pretrained()"),idt.forEach(t),mHo=r(HW,"class method or the "),eme=n(HW,"CODE",{});var ddt=s(eme);gHo=r(ddt,"from_config()"),ddt.forEach(t),hHo=r(HW,`class
method.`),HW.forEach(t),pHo=i(Sl),wA=n(Sl,"P",{});var PPe=s(wA);_Ho=r(PPe,"This class cannot be instantiated directly using "),ome=n(PPe,"CODE",{});var cdt=s(ome);uHo=r(cdt,"__init__()"),cdt.forEach(t),bHo=r(PPe," (throws an error)."),PPe.forEach(t),vHo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(AA.$$.fragment,Pl),THo=i(Pl),rme=n(Pl,"P",{});var fdt=s(rme);FHo=r(fdt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fdt.forEach(t),CHo=i(Pl),nc=n(Pl,"P",{});var UW=s(nc);MHo=r(UW,`Note:
Loading a model from its configuration file does `),tme=n(UW,"STRONG",{});var mdt=s(tme);EHo=r(mdt,"not"),mdt.forEach(t),yHo=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=n(UW,"CODE",{});var gdt=s(ame);wHo=r(gdt,"from_pretrained()"),gdt.forEach(t),AHo=r(UW,"to load the model weights."),UW.forEach(t),LHo=i(Pl),nme=n(Pl,"P",{});var hdt=s(nme);BHo=r(hdt,"Examples:"),hdt.forEach(t),xHo=i(Pl),m(LA.$$.fragment,Pl),Pl.forEach(t),kHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(BA.$$.fragment,sa),RHo=i(sa),sme=n(sa,"P",{});var pdt=s(sme);SHo=r(pdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pdt.forEach(t),PHo=i(sa),gn=n(sa,"P",{});var NE=s(gn);$Ho=r(NE,"The model class to instantiate is selected based on the "),lme=n(NE,"CODE",{});var _dt=s(lme);IHo=r(_dt,"model_type"),_dt.forEach(t),NHo=r(NE,` property of the config object (either
passed as an argument or loaded from `),ime=n(NE,"CODE",{});var udt=s(ime);jHo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),DHo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(NE,"CODE",{});var bdt=s(dme);qHo=r(bdt,"pretrained_model_name_or_path"),bdt.forEach(t),GHo=r(NE,":"),NE.forEach(t),OHo=i(sa),cme=n(sa,"UL",{});var vdt=s(cme);n6=n(vdt,"LI",{});var VLe=s(n6);fme=n(VLe,"STRONG",{});var Tdt=s(fme);XHo=r(Tdt,"detr"),Tdt.forEach(t),VHo=r(VLe," \u2014 "),yq=n(VLe,"A",{href:!0});var Fdt=s(yq);zHo=r(Fdt,"DetrForSegmentation"),Fdt.forEach(t),WHo=r(VLe," (DETR model)"),VLe.forEach(t),vdt.forEach(t),QHo=i(sa),s6=n(sa,"P",{});var zLe=s(s6);HHo=r(zLe,"The model is set in evaluation mode by default using "),mme=n(zLe,"CODE",{});var Cdt=s(mme);UHo=r(Cdt,"model.eval()"),Cdt.forEach(t),JHo=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(zLe,"CODE",{});var Mdt=s(gme);YHo=r(Mdt,"model.train()"),Mdt.forEach(t),zLe.forEach(t),KHo=i(sa),hme=n(sa,"P",{});var Edt=s(hme);ZHo=r(Edt,"Examples:"),Edt.forEach(t),eUo=i(sa),m(xA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),yRe=i(c),sc=n(c,"H2",{class:!0});var $Pe=s(sc);l6=n($Pe,"A",{id:!0,class:!0,href:!0});var ydt=s(l6);pme=n(ydt,"SPAN",{});var wdt=s(pme);m(kA.$$.fragment,wdt),wdt.forEach(t),ydt.forEach(t),oUo=i($Pe),_me=n($Pe,"SPAN",{});var Adt=s(_me);rUo=r(Adt,"AutoModelForSemanticSegmentation"),Adt.forEach(t),$Pe.forEach(t),wRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(RA.$$.fragment,$l),tUo=i($l),lc=n($l,"P",{});var JW=s(lc);aUo=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ume=n(JW,"CODE",{});var Ldt=s(ume);nUo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),sUo=r(JW,"class method or the "),bme=n(JW,"CODE",{});var Bdt=s(bme);lUo=r(Bdt,"from_config()"),Bdt.forEach(t),iUo=r(JW,`class
method.`),JW.forEach(t),dUo=i($l),SA=n($l,"P",{});var IPe=s(SA);cUo=r(IPe,"This class cannot be instantiated directly using "),vme=n(IPe,"CODE",{});var xdt=s(vme);fUo=r(xdt,"__init__()"),xdt.forEach(t),mUo=r(IPe," (throws an error)."),IPe.forEach(t),gUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(PA.$$.fragment,Il),hUo=i(Il),Tme=n(Il,"P",{});var kdt=s(Tme);pUo=r(kdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kdt.forEach(t),_Uo=i(Il),ic=n(Il,"P",{});var YW=s(ic);uUo=r(YW,`Note:
Loading a model from its configuration file does `),Fme=n(YW,"STRONG",{});var Rdt=s(Fme);bUo=r(Rdt,"not"),Rdt.forEach(t),vUo=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=n(YW,"CODE",{});var Sdt=s(Cme);TUo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),FUo=r(YW,"to load the model weights."),YW.forEach(t),CUo=i(Il),Mme=n(Il,"P",{});var Pdt=s(Mme);MUo=r(Pdt,"Examples:"),Pdt.forEach(t),EUo=i(Il),m($A.$$.fragment,Il),Il.forEach(t),yUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(IA.$$.fragment,la),wUo=i(la),Eme=n(la,"P",{});var $dt=s(Eme);AUo=r($dt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$dt.forEach(t),LUo=i(la),hn=n(la,"P",{});var jE=s(hn);BUo=r(jE,"The model class to instantiate is selected based on the "),yme=n(jE,"CODE",{});var Idt=s(yme);xUo=r(Idt,"model_type"),Idt.forEach(t),kUo=r(jE,` property of the config object (either
passed as an argument or loaded from `),wme=n(jE,"CODE",{});var Ndt=s(wme);RUo=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),SUo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(jE,"CODE",{});var jdt=s(Ame);PUo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),$Uo=r(jE,":"),jE.forEach(t),IUo=i(la),NA=n(la,"UL",{});var NPe=s(NA);i6=n(NPe,"LI",{});var WLe=s(i6);Lme=n(WLe,"STRONG",{});var Ddt=s(Lme);NUo=r(Ddt,"beit"),Ddt.forEach(t),jUo=r(WLe," \u2014 "),wq=n(WLe,"A",{href:!0});var qdt=s(wq);DUo=r(qdt,"BeitForSemanticSegmentation"),qdt.forEach(t),qUo=r(WLe," (BEiT model)"),WLe.forEach(t),GUo=i(NPe),d6=n(NPe,"LI",{});var QLe=s(d6);Bme=n(QLe,"STRONG",{});var Gdt=s(Bme);OUo=r(Gdt,"segformer"),Gdt.forEach(t),XUo=r(QLe," \u2014 "),Aq=n(QLe,"A",{href:!0});var Odt=s(Aq);VUo=r(Odt,"SegformerForSemanticSegmentation"),Odt.forEach(t),zUo=r(QLe," (SegFormer model)"),QLe.forEach(t),NPe.forEach(t),WUo=i(la),c6=n(la,"P",{});var HLe=s(c6);QUo=r(HLe,"The model is set in evaluation mode by default using "),xme=n(HLe,"CODE",{});var Xdt=s(xme);HUo=r(Xdt,"model.eval()"),Xdt.forEach(t),UUo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(HLe,"CODE",{});var Vdt=s(kme);JUo=r(Vdt,"model.train()"),Vdt.forEach(t),HLe.forEach(t),YUo=i(la),Rme=n(la,"P",{});var zdt=s(Rme);KUo=r(zdt,"Examples:"),zdt.forEach(t),ZUo=i(la),m(jA.$$.fragment,la),la.forEach(t),$l.forEach(t),ARe=i(c),dc=n(c,"H2",{class:!0});var jPe=s(dc);f6=n(jPe,"A",{id:!0,class:!0,href:!0});var Wdt=s(f6);Sme=n(Wdt,"SPAN",{});var Qdt=s(Sme);m(DA.$$.fragment,Qdt),Qdt.forEach(t),Wdt.forEach(t),eJo=i(jPe),Pme=n(jPe,"SPAN",{});var Hdt=s(Pme);oJo=r(Hdt,"AutoModelForInstanceSegmentation"),Hdt.forEach(t),jPe.forEach(t),LRe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(qA.$$.fragment,Nl),rJo=i(Nl),cc=n(Nl,"P",{});var KW=s(cc);tJo=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$me=n(KW,"CODE",{});var Udt=s($me);aJo=r(Udt,"from_pretrained()"),Udt.forEach(t),nJo=r(KW,"class method or the "),Ime=n(KW,"CODE",{});var Jdt=s(Ime);sJo=r(Jdt,"from_config()"),Jdt.forEach(t),lJo=r(KW,`class
method.`),KW.forEach(t),iJo=i(Nl),GA=n(Nl,"P",{});var DPe=s(GA);dJo=r(DPe,"This class cannot be instantiated directly using "),Nme=n(DPe,"CODE",{});var Ydt=s(Nme);cJo=r(Ydt,"__init__()"),Ydt.forEach(t),fJo=r(DPe," (throws an error)."),DPe.forEach(t),mJo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(OA.$$.fragment,jl),gJo=i(jl),jme=n(jl,"P",{});var Kdt=s(jme);hJo=r(Kdt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Kdt.forEach(t),pJo=i(jl),fc=n(jl,"P",{});var ZW=s(fc);_Jo=r(ZW,`Note:
Loading a model from its configuration file does `),Dme=n(ZW,"STRONG",{});var Zdt=s(Dme);uJo=r(Zdt,"not"),Zdt.forEach(t),bJo=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=n(ZW,"CODE",{});var ect=s(qme);vJo=r(ect,"from_pretrained()"),ect.forEach(t),TJo=r(ZW,"to load the model weights."),ZW.forEach(t),FJo=i(jl),Gme=n(jl,"P",{});var oct=s(Gme);CJo=r(oct,"Examples:"),oct.forEach(t),MJo=i(jl),m(XA.$$.fragment,jl),jl.forEach(t),EJo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(VA.$$.fragment,ia),yJo=i(ia),Ome=n(ia,"P",{});var rct=s(Ome);wJo=r(rct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rct.forEach(t),AJo=i(ia),pn=n(ia,"P",{});var DE=s(pn);LJo=r(DE,"The model class to instantiate is selected based on the "),Xme=n(DE,"CODE",{});var tct=s(Xme);BJo=r(tct,"model_type"),tct.forEach(t),xJo=r(DE,` property of the config object (either
passed as an argument or loaded from `),Vme=n(DE,"CODE",{});var act=s(Vme);kJo=r(act,"pretrained_model_name_or_path"),act.forEach(t),RJo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(DE,"CODE",{});var nct=s(zme);SJo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),PJo=r(DE,":"),DE.forEach(t),$Jo=i(ia),Wme=n(ia,"UL",{});var sct=s(Wme);m6=n(sct,"LI",{});var ULe=s(m6);Qme=n(ULe,"STRONG",{});var lct=s(Qme);IJo=r(lct,"maskformer"),lct.forEach(t),NJo=r(ULe," \u2014 "),Lq=n(ULe,"A",{href:!0});var ict=s(Lq);jJo=r(ict,"MaskFormerForInstanceSegmentation"),ict.forEach(t),DJo=r(ULe," (MaskFormer model)"),ULe.forEach(t),sct.forEach(t),qJo=i(ia),g6=n(ia,"P",{});var JLe=s(g6);GJo=r(JLe,"The model is set in evaluation mode by default using "),Hme=n(JLe,"CODE",{});var dct=s(Hme);OJo=r(dct,"model.eval()"),dct.forEach(t),XJo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(JLe,"CODE",{});var cct=s(Ume);VJo=r(cct,"model.train()"),cct.forEach(t),JLe.forEach(t),zJo=i(ia),Jme=n(ia,"P",{});var fct=s(Jme);WJo=r(fct,"Examples:"),fct.forEach(t),QJo=i(ia),m(zA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),BRe=i(c),mc=n(c,"H2",{class:!0});var qPe=s(mc);h6=n(qPe,"A",{id:!0,class:!0,href:!0});var mct=s(h6);Yme=n(mct,"SPAN",{});var gct=s(Yme);m(WA.$$.fragment,gct),gct.forEach(t),mct.forEach(t),HJo=i(qPe),Kme=n(qPe,"SPAN",{});var hct=s(Kme);UJo=r(hct,"TFAutoModel"),hct.forEach(t),qPe.forEach(t),xRe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(QA.$$.fragment,Dl),JJo=i(Dl),gc=n(Dl,"P",{});var eQ=s(gc);YJo=r(eQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zme=n(eQ,"CODE",{});var pct=s(Zme);KJo=r(pct,"from_pretrained()"),pct.forEach(t),ZJo=r(eQ,"class method or the "),ege=n(eQ,"CODE",{});var _ct=s(ege);eYo=r(_ct,"from_config()"),_ct.forEach(t),oYo=r(eQ,`class
method.`),eQ.forEach(t),rYo=i(Dl),HA=n(Dl,"P",{});var GPe=s(HA);tYo=r(GPe,"This class cannot be instantiated directly using "),oge=n(GPe,"CODE",{});var uct=s(oge);aYo=r(uct,"__init__()"),uct.forEach(t),nYo=r(GPe," (throws an error)."),GPe.forEach(t),sYo=i(Dl),gt=n(Dl,"DIV",{class:!0});var ql=s(gt);m(UA.$$.fragment,ql),lYo=i(ql),rge=n(ql,"P",{});var bct=s(rge);iYo=r(bct,"Instantiates one of the base model classes of the library from a configuration."),bct.forEach(t),dYo=i(ql),hc=n(ql,"P",{});var oQ=s(hc);cYo=r(oQ,`Note:
Loading a model from its configuration file does `),tge=n(oQ,"STRONG",{});var vct=s(tge);fYo=r(vct,"not"),vct.forEach(t),mYo=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),age=n(oQ,"CODE",{});var Tct=s(age);gYo=r(Tct,"from_pretrained()"),Tct.forEach(t),hYo=r(oQ,"to load the model weights."),oQ.forEach(t),pYo=i(ql),nge=n(ql,"P",{});var Fct=s(nge);_Yo=r(Fct,"Examples:"),Fct.forEach(t),uYo=i(ql),m(JA.$$.fragment,ql),ql.forEach(t),bYo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(YA.$$.fragment,pa),vYo=i(pa),sge=n(pa,"P",{});var Cct=s(sge);TYo=r(Cct,"Instantiate one of the base model classes of the library from a pretrained model."),Cct.forEach(t),FYo=i(pa),_n=n(pa,"P",{});var qE=s(_n);CYo=r(qE,"The model class to instantiate is selected based on the "),lge=n(qE,"CODE",{});var Mct=s(lge);MYo=r(Mct,"model_type"),Mct.forEach(t),EYo=r(qE,` property of the config object (either
passed as an argument or loaded from `),ige=n(qE,"CODE",{});var Ect=s(ige);yYo=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),wYo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(qE,"CODE",{});var yct=s(dge);AYo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),LYo=r(qE,":"),qE.forEach(t),BYo=i(pa),B=n(pa,"UL",{});var x=s(B);p6=n(x,"LI",{});var YLe=s(p6);cge=n(YLe,"STRONG",{});var wct=s(cge);xYo=r(wct,"albert"),wct.forEach(t),kYo=r(YLe," \u2014 "),Bq=n(YLe,"A",{href:!0});var Act=s(Bq);RYo=r(Act,"TFAlbertModel"),Act.forEach(t),SYo=r(YLe," (ALBERT model)"),YLe.forEach(t),PYo=i(x),_6=n(x,"LI",{});var KLe=s(_6);fge=n(KLe,"STRONG",{});var Lct=s(fge);$Yo=r(Lct,"bart"),Lct.forEach(t),IYo=r(KLe," \u2014 "),xq=n(KLe,"A",{href:!0});var Bct=s(xq);NYo=r(Bct,"TFBartModel"),Bct.forEach(t),jYo=r(KLe," (BART model)"),KLe.forEach(t),DYo=i(x),u6=n(x,"LI",{});var ZLe=s(u6);mge=n(ZLe,"STRONG",{});var xct=s(mge);qYo=r(xct,"bert"),xct.forEach(t),GYo=r(ZLe," \u2014 "),kq=n(ZLe,"A",{href:!0});var kct=s(kq);OYo=r(kct,"TFBertModel"),kct.forEach(t),XYo=r(ZLe," (BERT model)"),ZLe.forEach(t),VYo=i(x),b6=n(x,"LI",{});var e7e=s(b6);gge=n(e7e,"STRONG",{});var Rct=s(gge);zYo=r(Rct,"blenderbot"),Rct.forEach(t),WYo=r(e7e," \u2014 "),Rq=n(e7e,"A",{href:!0});var Sct=s(Rq);QYo=r(Sct,"TFBlenderbotModel"),Sct.forEach(t),HYo=r(e7e," (Blenderbot model)"),e7e.forEach(t),UYo=i(x),v6=n(x,"LI",{});var o7e=s(v6);hge=n(o7e,"STRONG",{});var Pct=s(hge);JYo=r(Pct,"blenderbot-small"),Pct.forEach(t),YYo=r(o7e," \u2014 "),Sq=n(o7e,"A",{href:!0});var $ct=s(Sq);KYo=r($ct,"TFBlenderbotSmallModel"),$ct.forEach(t),ZYo=r(o7e," (BlenderbotSmall model)"),o7e.forEach(t),eKo=i(x),T6=n(x,"LI",{});var r7e=s(T6);pge=n(r7e,"STRONG",{});var Ict=s(pge);oKo=r(Ict,"camembert"),Ict.forEach(t),rKo=r(r7e," \u2014 "),Pq=n(r7e,"A",{href:!0});var Nct=s(Pq);tKo=r(Nct,"TFCamembertModel"),Nct.forEach(t),aKo=r(r7e," (CamemBERT model)"),r7e.forEach(t),nKo=i(x),F6=n(x,"LI",{});var t7e=s(F6);_ge=n(t7e,"STRONG",{});var jct=s(_ge);sKo=r(jct,"clip"),jct.forEach(t),lKo=r(t7e," \u2014 "),$q=n(t7e,"A",{href:!0});var Dct=s($q);iKo=r(Dct,"TFCLIPModel"),Dct.forEach(t),dKo=r(t7e," (CLIP model)"),t7e.forEach(t),cKo=i(x),C6=n(x,"LI",{});var a7e=s(C6);uge=n(a7e,"STRONG",{});var qct=s(uge);fKo=r(qct,"convbert"),qct.forEach(t),mKo=r(a7e," \u2014 "),Iq=n(a7e,"A",{href:!0});var Gct=s(Iq);gKo=r(Gct,"TFConvBertModel"),Gct.forEach(t),hKo=r(a7e," (ConvBERT model)"),a7e.forEach(t),pKo=i(x),M6=n(x,"LI",{});var n7e=s(M6);bge=n(n7e,"STRONG",{});var Oct=s(bge);_Ko=r(Oct,"convnext"),Oct.forEach(t),uKo=r(n7e," \u2014 "),Nq=n(n7e,"A",{href:!0});var Xct=s(Nq);bKo=r(Xct,"TFConvNextModel"),Xct.forEach(t),vKo=r(n7e," (ConvNext model)"),n7e.forEach(t),TKo=i(x),E6=n(x,"LI",{});var s7e=s(E6);vge=n(s7e,"STRONG",{});var Vct=s(vge);FKo=r(Vct,"ctrl"),Vct.forEach(t),CKo=r(s7e," \u2014 "),jq=n(s7e,"A",{href:!0});var zct=s(jq);MKo=r(zct,"TFCTRLModel"),zct.forEach(t),EKo=r(s7e," (CTRL model)"),s7e.forEach(t),yKo=i(x),y6=n(x,"LI",{});var l7e=s(y6);Tge=n(l7e,"STRONG",{});var Wct=s(Tge);wKo=r(Wct,"deberta"),Wct.forEach(t),AKo=r(l7e," \u2014 "),Dq=n(l7e,"A",{href:!0});var Qct=s(Dq);LKo=r(Qct,"TFDebertaModel"),Qct.forEach(t),BKo=r(l7e," (DeBERTa model)"),l7e.forEach(t),xKo=i(x),w6=n(x,"LI",{});var i7e=s(w6);Fge=n(i7e,"STRONG",{});var Hct=s(Fge);kKo=r(Hct,"deberta-v2"),Hct.forEach(t),RKo=r(i7e," \u2014 "),qq=n(i7e,"A",{href:!0});var Uct=s(qq);SKo=r(Uct,"TFDebertaV2Model"),Uct.forEach(t),PKo=r(i7e," (DeBERTa-v2 model)"),i7e.forEach(t),$Ko=i(x),A6=n(x,"LI",{});var d7e=s(A6);Cge=n(d7e,"STRONG",{});var Jct=s(Cge);IKo=r(Jct,"distilbert"),Jct.forEach(t),NKo=r(d7e," \u2014 "),Gq=n(d7e,"A",{href:!0});var Yct=s(Gq);jKo=r(Yct,"TFDistilBertModel"),Yct.forEach(t),DKo=r(d7e," (DistilBERT model)"),d7e.forEach(t),qKo=i(x),L6=n(x,"LI",{});var c7e=s(L6);Mge=n(c7e,"STRONG",{});var Kct=s(Mge);GKo=r(Kct,"dpr"),Kct.forEach(t),OKo=r(c7e," \u2014 "),Oq=n(c7e,"A",{href:!0});var Zct=s(Oq);XKo=r(Zct,"TFDPRQuestionEncoder"),Zct.forEach(t),VKo=r(c7e," (DPR model)"),c7e.forEach(t),zKo=i(x),B6=n(x,"LI",{});var f7e=s(B6);Ege=n(f7e,"STRONG",{});var eft=s(Ege);WKo=r(eft,"electra"),eft.forEach(t),QKo=r(f7e," \u2014 "),Xq=n(f7e,"A",{href:!0});var oft=s(Xq);HKo=r(oft,"TFElectraModel"),oft.forEach(t),UKo=r(f7e," (ELECTRA model)"),f7e.forEach(t),JKo=i(x),x6=n(x,"LI",{});var m7e=s(x6);yge=n(m7e,"STRONG",{});var rft=s(yge);YKo=r(rft,"flaubert"),rft.forEach(t),KKo=r(m7e," \u2014 "),Vq=n(m7e,"A",{href:!0});var tft=s(Vq);ZKo=r(tft,"TFFlaubertModel"),tft.forEach(t),eZo=r(m7e," (FlauBERT model)"),m7e.forEach(t),oZo=i(x),Gs=n(x,"LI",{});var t9=s(Gs);wge=n(t9,"STRONG",{});var aft=s(wge);rZo=r(aft,"funnel"),aft.forEach(t),tZo=r(t9," \u2014 "),zq=n(t9,"A",{href:!0});var nft=s(zq);aZo=r(nft,"TFFunnelModel"),nft.forEach(t),nZo=r(t9," or "),Wq=n(t9,"A",{href:!0});var sft=s(Wq);sZo=r(sft,"TFFunnelBaseModel"),sft.forEach(t),lZo=r(t9," (Funnel Transformer model)"),t9.forEach(t),iZo=i(x),k6=n(x,"LI",{});var g7e=s(k6);Age=n(g7e,"STRONG",{});var lft=s(Age);dZo=r(lft,"gpt2"),lft.forEach(t),cZo=r(g7e," \u2014 "),Qq=n(g7e,"A",{href:!0});var ift=s(Qq);fZo=r(ift,"TFGPT2Model"),ift.forEach(t),mZo=r(g7e," (OpenAI GPT-2 model)"),g7e.forEach(t),gZo=i(x),R6=n(x,"LI",{});var h7e=s(R6);Lge=n(h7e,"STRONG",{});var dft=s(Lge);hZo=r(dft,"gptj"),dft.forEach(t),pZo=r(h7e," \u2014 "),Hq=n(h7e,"A",{href:!0});var cft=s(Hq);_Zo=r(cft,"TFGPTJModel"),cft.forEach(t),uZo=r(h7e," (GPT-J model)"),h7e.forEach(t),bZo=i(x),S6=n(x,"LI",{});var p7e=s(S6);Bge=n(p7e,"STRONG",{});var fft=s(Bge);vZo=r(fft,"hubert"),fft.forEach(t),TZo=r(p7e," \u2014 "),Uq=n(p7e,"A",{href:!0});var mft=s(Uq);FZo=r(mft,"TFHubertModel"),mft.forEach(t),CZo=r(p7e," (Hubert model)"),p7e.forEach(t),MZo=i(x),P6=n(x,"LI",{});var _7e=s(P6);xge=n(_7e,"STRONG",{});var gft=s(xge);EZo=r(gft,"layoutlm"),gft.forEach(t),yZo=r(_7e," \u2014 "),Jq=n(_7e,"A",{href:!0});var hft=s(Jq);wZo=r(hft,"TFLayoutLMModel"),hft.forEach(t),AZo=r(_7e," (LayoutLM model)"),_7e.forEach(t),LZo=i(x),$6=n(x,"LI",{});var u7e=s($6);kge=n(u7e,"STRONG",{});var pft=s(kge);BZo=r(pft,"led"),pft.forEach(t),xZo=r(u7e," \u2014 "),Yq=n(u7e,"A",{href:!0});var _ft=s(Yq);kZo=r(_ft,"TFLEDModel"),_ft.forEach(t),RZo=r(u7e," (LED model)"),u7e.forEach(t),SZo=i(x),I6=n(x,"LI",{});var b7e=s(I6);Rge=n(b7e,"STRONG",{});var uft=s(Rge);PZo=r(uft,"longformer"),uft.forEach(t),$Zo=r(b7e," \u2014 "),Kq=n(b7e,"A",{href:!0});var bft=s(Kq);IZo=r(bft,"TFLongformerModel"),bft.forEach(t),NZo=r(b7e," (Longformer model)"),b7e.forEach(t),jZo=i(x),N6=n(x,"LI",{});var v7e=s(N6);Sge=n(v7e,"STRONG",{});var vft=s(Sge);DZo=r(vft,"lxmert"),vft.forEach(t),qZo=r(v7e," \u2014 "),Zq=n(v7e,"A",{href:!0});var Tft=s(Zq);GZo=r(Tft,"TFLxmertModel"),Tft.forEach(t),OZo=r(v7e," (LXMERT model)"),v7e.forEach(t),XZo=i(x),j6=n(x,"LI",{});var T7e=s(j6);Pge=n(T7e,"STRONG",{});var Fft=s(Pge);VZo=r(Fft,"marian"),Fft.forEach(t),zZo=r(T7e," \u2014 "),eG=n(T7e,"A",{href:!0});var Cft=s(eG);WZo=r(Cft,"TFMarianModel"),Cft.forEach(t),QZo=r(T7e," (Marian model)"),T7e.forEach(t),HZo=i(x),D6=n(x,"LI",{});var F7e=s(D6);$ge=n(F7e,"STRONG",{});var Mft=s($ge);UZo=r(Mft,"mbart"),Mft.forEach(t),JZo=r(F7e," \u2014 "),oG=n(F7e,"A",{href:!0});var Eft=s(oG);YZo=r(Eft,"TFMBartModel"),Eft.forEach(t),KZo=r(F7e," (mBART model)"),F7e.forEach(t),ZZo=i(x),q6=n(x,"LI",{});var C7e=s(q6);Ige=n(C7e,"STRONG",{});var yft=s(Ige);eer=r(yft,"mobilebert"),yft.forEach(t),oer=r(C7e," \u2014 "),rG=n(C7e,"A",{href:!0});var wft=s(rG);rer=r(wft,"TFMobileBertModel"),wft.forEach(t),ter=r(C7e," (MobileBERT model)"),C7e.forEach(t),aer=i(x),G6=n(x,"LI",{});var M7e=s(G6);Nge=n(M7e,"STRONG",{});var Aft=s(Nge);ner=r(Aft,"mpnet"),Aft.forEach(t),ser=r(M7e," \u2014 "),tG=n(M7e,"A",{href:!0});var Lft=s(tG);ler=r(Lft,"TFMPNetModel"),Lft.forEach(t),ier=r(M7e," (MPNet model)"),M7e.forEach(t),der=i(x),O6=n(x,"LI",{});var E7e=s(O6);jge=n(E7e,"STRONG",{});var Bft=s(jge);cer=r(Bft,"mt5"),Bft.forEach(t),fer=r(E7e," \u2014 "),aG=n(E7e,"A",{href:!0});var xft=s(aG);mer=r(xft,"TFMT5Model"),xft.forEach(t),ger=r(E7e," (mT5 model)"),E7e.forEach(t),her=i(x),X6=n(x,"LI",{});var y7e=s(X6);Dge=n(y7e,"STRONG",{});var kft=s(Dge);per=r(kft,"openai-gpt"),kft.forEach(t),_er=r(y7e," \u2014 "),nG=n(y7e,"A",{href:!0});var Rft=s(nG);uer=r(Rft,"TFOpenAIGPTModel"),Rft.forEach(t),ber=r(y7e," (OpenAI GPT model)"),y7e.forEach(t),ver=i(x),V6=n(x,"LI",{});var w7e=s(V6);qge=n(w7e,"STRONG",{});var Sft=s(qge);Ter=r(Sft,"pegasus"),Sft.forEach(t),Fer=r(w7e," \u2014 "),sG=n(w7e,"A",{href:!0});var Pft=s(sG);Cer=r(Pft,"TFPegasusModel"),Pft.forEach(t),Mer=r(w7e," (Pegasus model)"),w7e.forEach(t),Eer=i(x),z6=n(x,"LI",{});var A7e=s(z6);Gge=n(A7e,"STRONG",{});var $ft=s(Gge);yer=r($ft,"rembert"),$ft.forEach(t),wer=r(A7e," \u2014 "),lG=n(A7e,"A",{href:!0});var Ift=s(lG);Aer=r(Ift,"TFRemBertModel"),Ift.forEach(t),Ler=r(A7e," (RemBERT model)"),A7e.forEach(t),Ber=i(x),W6=n(x,"LI",{});var L7e=s(W6);Oge=n(L7e,"STRONG",{});var Nft=s(Oge);xer=r(Nft,"roberta"),Nft.forEach(t),ker=r(L7e," \u2014 "),iG=n(L7e,"A",{href:!0});var jft=s(iG);Rer=r(jft,"TFRobertaModel"),jft.forEach(t),Ser=r(L7e," (RoBERTa model)"),L7e.forEach(t),Per=i(x),Q6=n(x,"LI",{});var B7e=s(Q6);Xge=n(B7e,"STRONG",{});var Dft=s(Xge);$er=r(Dft,"roformer"),Dft.forEach(t),Ier=r(B7e," \u2014 "),dG=n(B7e,"A",{href:!0});var qft=s(dG);Ner=r(qft,"TFRoFormerModel"),qft.forEach(t),jer=r(B7e," (RoFormer model)"),B7e.forEach(t),Der=i(x),H6=n(x,"LI",{});var x7e=s(H6);Vge=n(x7e,"STRONG",{});var Gft=s(Vge);qer=r(Gft,"speech_to_text"),Gft.forEach(t),Ger=r(x7e," \u2014 "),cG=n(x7e,"A",{href:!0});var Oft=s(cG);Oer=r(Oft,"TFSpeech2TextModel"),Oft.forEach(t),Xer=r(x7e," (Speech2Text model)"),x7e.forEach(t),Ver=i(x),U6=n(x,"LI",{});var k7e=s(U6);zge=n(k7e,"STRONG",{});var Xft=s(zge);zer=r(Xft,"t5"),Xft.forEach(t),Wer=r(k7e," \u2014 "),fG=n(k7e,"A",{href:!0});var Vft=s(fG);Qer=r(Vft,"TFT5Model"),Vft.forEach(t),Her=r(k7e," (T5 model)"),k7e.forEach(t),Uer=i(x),J6=n(x,"LI",{});var R7e=s(J6);Wge=n(R7e,"STRONG",{});var zft=s(Wge);Jer=r(zft,"tapas"),zft.forEach(t),Yer=r(R7e," \u2014 "),mG=n(R7e,"A",{href:!0});var Wft=s(mG);Ker=r(Wft,"TFTapasModel"),Wft.forEach(t),Zer=r(R7e," (TAPAS model)"),R7e.forEach(t),eor=i(x),Y6=n(x,"LI",{});var S7e=s(Y6);Qge=n(S7e,"STRONG",{});var Qft=s(Qge);oor=r(Qft,"transfo-xl"),Qft.forEach(t),ror=r(S7e," \u2014 "),gG=n(S7e,"A",{href:!0});var Hft=s(gG);tor=r(Hft,"TFTransfoXLModel"),Hft.forEach(t),aor=r(S7e," (Transformer-XL model)"),S7e.forEach(t),nor=i(x),K6=n(x,"LI",{});var P7e=s(K6);Hge=n(P7e,"STRONG",{});var Uft=s(Hge);sor=r(Uft,"vit"),Uft.forEach(t),lor=r(P7e," \u2014 "),hG=n(P7e,"A",{href:!0});var Jft=s(hG);ior=r(Jft,"TFViTModel"),Jft.forEach(t),dor=r(P7e," (ViT model)"),P7e.forEach(t),cor=i(x),Z6=n(x,"LI",{});var $7e=s(Z6);Uge=n($7e,"STRONG",{});var Yft=s(Uge);mor=r(Yft,"vit_mae"),Yft.forEach(t),gor=r($7e," \u2014 "),pG=n($7e,"A",{href:!0});var Kft=s(pG);hor=r(Kft,"TFViTMAEModel"),Kft.forEach(t),por=r($7e," (ViTMAE model)"),$7e.forEach(t),_or=i(x),eT=n(x,"LI",{});var I7e=s(eT);Jge=n(I7e,"STRONG",{});var Zft=s(Jge);uor=r(Zft,"wav2vec2"),Zft.forEach(t),bor=r(I7e," \u2014 "),_G=n(I7e,"A",{href:!0});var emt=s(_G);vor=r(emt,"TFWav2Vec2Model"),emt.forEach(t),Tor=r(I7e," (Wav2Vec2 model)"),I7e.forEach(t),For=i(x),oT=n(x,"LI",{});var N7e=s(oT);Yge=n(N7e,"STRONG",{});var omt=s(Yge);Cor=r(omt,"xlm"),omt.forEach(t),Mor=r(N7e," \u2014 "),uG=n(N7e,"A",{href:!0});var rmt=s(uG);Eor=r(rmt,"TFXLMModel"),rmt.forEach(t),yor=r(N7e," (XLM model)"),N7e.forEach(t),wor=i(x),rT=n(x,"LI",{});var j7e=s(rT);Kge=n(j7e,"STRONG",{});var tmt=s(Kge);Aor=r(tmt,"xlm-roberta"),tmt.forEach(t),Lor=r(j7e," \u2014 "),bG=n(j7e,"A",{href:!0});var amt=s(bG);Bor=r(amt,"TFXLMRobertaModel"),amt.forEach(t),xor=r(j7e," (XLM-RoBERTa model)"),j7e.forEach(t),kor=i(x),tT=n(x,"LI",{});var D7e=s(tT);Zge=n(D7e,"STRONG",{});var nmt=s(Zge);Ror=r(nmt,"xlnet"),nmt.forEach(t),Sor=r(D7e," \u2014 "),vG=n(D7e,"A",{href:!0});var smt=s(vG);Por=r(smt,"TFXLNetModel"),smt.forEach(t),$or=r(D7e," (XLNet model)"),D7e.forEach(t),x.forEach(t),Ior=i(pa),ehe=n(pa,"P",{});var lmt=s(ehe);Nor=r(lmt,"Examples:"),lmt.forEach(t),jor=i(pa),m(KA.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),kRe=i(c),pc=n(c,"H2",{class:!0});var OPe=s(pc);aT=n(OPe,"A",{id:!0,class:!0,href:!0});var imt=s(aT);ohe=n(imt,"SPAN",{});var dmt=s(ohe);m(ZA.$$.fragment,dmt),dmt.forEach(t),imt.forEach(t),Dor=i(OPe),rhe=n(OPe,"SPAN",{});var cmt=s(rhe);qor=r(cmt,"TFAutoModelForPreTraining"),cmt.forEach(t),OPe.forEach(t),RRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(e0.$$.fragment,Gl),Gor=i(Gl),_c=n(Gl,"P",{});var rQ=s(_c);Oor=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),the=n(rQ,"CODE",{});var fmt=s(the);Xor=r(fmt,"from_pretrained()"),fmt.forEach(t),Vor=r(rQ,"class method or the "),ahe=n(rQ,"CODE",{});var mmt=s(ahe);zor=r(mmt,"from_config()"),mmt.forEach(t),Wor=r(rQ,`class
method.`),rQ.forEach(t),Qor=i(Gl),o0=n(Gl,"P",{});var XPe=s(o0);Hor=r(XPe,"This class cannot be instantiated directly using "),nhe=n(XPe,"CODE",{});var gmt=s(nhe);Uor=r(gmt,"__init__()"),gmt.forEach(t),Jor=r(XPe," (throws an error)."),XPe.forEach(t),Yor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(r0.$$.fragment,Ol),Kor=i(Ol),she=n(Ol,"P",{});var hmt=s(she);Zor=r(hmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hmt.forEach(t),err=i(Ol),uc=n(Ol,"P",{});var tQ=s(uc);orr=r(tQ,`Note:
Loading a model from its configuration file does `),lhe=n(tQ,"STRONG",{});var pmt=s(lhe);rrr=r(pmt,"not"),pmt.forEach(t),trr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ihe=n(tQ,"CODE",{});var _mt=s(ihe);arr=r(_mt,"from_pretrained()"),_mt.forEach(t),nrr=r(tQ,"to load the model weights."),tQ.forEach(t),srr=i(Ol),dhe=n(Ol,"P",{});var umt=s(dhe);lrr=r(umt,"Examples:"),umt.forEach(t),irr=i(Ol),m(t0.$$.fragment,Ol),Ol.forEach(t),drr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(a0.$$.fragment,_a),crr=i(_a),che=n(_a,"P",{});var bmt=s(che);frr=r(bmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bmt.forEach(t),mrr=i(_a),un=n(_a,"P",{});var GE=s(un);grr=r(GE,"The model class to instantiate is selected based on the "),fhe=n(GE,"CODE",{});var vmt=s(fhe);hrr=r(vmt,"model_type"),vmt.forEach(t),prr=r(GE,` property of the config object (either
passed as an argument or loaded from `),mhe=n(GE,"CODE",{});var Tmt=s(mhe);_rr=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),urr=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(GE,"CODE",{});var Fmt=s(ghe);brr=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),vrr=r(GE,":"),GE.forEach(t),Trr=i(_a),H=n(_a,"UL",{});var U=s(H);nT=n(U,"LI",{});var q7e=s(nT);hhe=n(q7e,"STRONG",{});var Cmt=s(hhe);Frr=r(Cmt,"albert"),Cmt.forEach(t),Crr=r(q7e," \u2014 "),TG=n(q7e,"A",{href:!0});var Mmt=s(TG);Mrr=r(Mmt,"TFAlbertForPreTraining"),Mmt.forEach(t),Err=r(q7e," (ALBERT model)"),q7e.forEach(t),yrr=i(U),sT=n(U,"LI",{});var G7e=s(sT);phe=n(G7e,"STRONG",{});var Emt=s(phe);wrr=r(Emt,"bart"),Emt.forEach(t),Arr=r(G7e," \u2014 "),FG=n(G7e,"A",{href:!0});var ymt=s(FG);Lrr=r(ymt,"TFBartForConditionalGeneration"),ymt.forEach(t),Brr=r(G7e," (BART model)"),G7e.forEach(t),xrr=i(U),lT=n(U,"LI",{});var O7e=s(lT);_he=n(O7e,"STRONG",{});var wmt=s(_he);krr=r(wmt,"bert"),wmt.forEach(t),Rrr=r(O7e," \u2014 "),CG=n(O7e,"A",{href:!0});var Amt=s(CG);Srr=r(Amt,"TFBertForPreTraining"),Amt.forEach(t),Prr=r(O7e," (BERT model)"),O7e.forEach(t),$rr=i(U),iT=n(U,"LI",{});var X7e=s(iT);uhe=n(X7e,"STRONG",{});var Lmt=s(uhe);Irr=r(Lmt,"camembert"),Lmt.forEach(t),Nrr=r(X7e," \u2014 "),MG=n(X7e,"A",{href:!0});var Bmt=s(MG);jrr=r(Bmt,"TFCamembertForMaskedLM"),Bmt.forEach(t),Drr=r(X7e," (CamemBERT model)"),X7e.forEach(t),qrr=i(U),dT=n(U,"LI",{});var V7e=s(dT);bhe=n(V7e,"STRONG",{});var xmt=s(bhe);Grr=r(xmt,"ctrl"),xmt.forEach(t),Orr=r(V7e," \u2014 "),EG=n(V7e,"A",{href:!0});var kmt=s(EG);Xrr=r(kmt,"TFCTRLLMHeadModel"),kmt.forEach(t),Vrr=r(V7e," (CTRL model)"),V7e.forEach(t),zrr=i(U),cT=n(U,"LI",{});var z7e=s(cT);vhe=n(z7e,"STRONG",{});var Rmt=s(vhe);Wrr=r(Rmt,"distilbert"),Rmt.forEach(t),Qrr=r(z7e," \u2014 "),yG=n(z7e,"A",{href:!0});var Smt=s(yG);Hrr=r(Smt,"TFDistilBertForMaskedLM"),Smt.forEach(t),Urr=r(z7e," (DistilBERT model)"),z7e.forEach(t),Jrr=i(U),fT=n(U,"LI",{});var W7e=s(fT);The=n(W7e,"STRONG",{});var Pmt=s(The);Yrr=r(Pmt,"electra"),Pmt.forEach(t),Krr=r(W7e," \u2014 "),wG=n(W7e,"A",{href:!0});var $mt=s(wG);Zrr=r($mt,"TFElectraForPreTraining"),$mt.forEach(t),etr=r(W7e," (ELECTRA model)"),W7e.forEach(t),otr=i(U),mT=n(U,"LI",{});var Q7e=s(mT);Fhe=n(Q7e,"STRONG",{});var Imt=s(Fhe);rtr=r(Imt,"flaubert"),Imt.forEach(t),ttr=r(Q7e," \u2014 "),AG=n(Q7e,"A",{href:!0});var Nmt=s(AG);atr=r(Nmt,"TFFlaubertWithLMHeadModel"),Nmt.forEach(t),ntr=r(Q7e," (FlauBERT model)"),Q7e.forEach(t),str=i(U),gT=n(U,"LI",{});var H7e=s(gT);Che=n(H7e,"STRONG",{});var jmt=s(Che);ltr=r(jmt,"funnel"),jmt.forEach(t),itr=r(H7e," \u2014 "),LG=n(H7e,"A",{href:!0});var Dmt=s(LG);dtr=r(Dmt,"TFFunnelForPreTraining"),Dmt.forEach(t),ctr=r(H7e," (Funnel Transformer model)"),H7e.forEach(t),ftr=i(U),hT=n(U,"LI",{});var U7e=s(hT);Mhe=n(U7e,"STRONG",{});var qmt=s(Mhe);mtr=r(qmt,"gpt2"),qmt.forEach(t),gtr=r(U7e," \u2014 "),BG=n(U7e,"A",{href:!0});var Gmt=s(BG);htr=r(Gmt,"TFGPT2LMHeadModel"),Gmt.forEach(t),ptr=r(U7e," (OpenAI GPT-2 model)"),U7e.forEach(t),_tr=i(U),pT=n(U,"LI",{});var J7e=s(pT);Ehe=n(J7e,"STRONG",{});var Omt=s(Ehe);utr=r(Omt,"layoutlm"),Omt.forEach(t),btr=r(J7e," \u2014 "),xG=n(J7e,"A",{href:!0});var Xmt=s(xG);vtr=r(Xmt,"TFLayoutLMForMaskedLM"),Xmt.forEach(t),Ttr=r(J7e," (LayoutLM model)"),J7e.forEach(t),Ftr=i(U),_T=n(U,"LI",{});var Y7e=s(_T);yhe=n(Y7e,"STRONG",{});var Vmt=s(yhe);Ctr=r(Vmt,"lxmert"),Vmt.forEach(t),Mtr=r(Y7e," \u2014 "),kG=n(Y7e,"A",{href:!0});var zmt=s(kG);Etr=r(zmt,"TFLxmertForPreTraining"),zmt.forEach(t),ytr=r(Y7e," (LXMERT model)"),Y7e.forEach(t),wtr=i(U),uT=n(U,"LI",{});var K7e=s(uT);whe=n(K7e,"STRONG",{});var Wmt=s(whe);Atr=r(Wmt,"mobilebert"),Wmt.forEach(t),Ltr=r(K7e," \u2014 "),RG=n(K7e,"A",{href:!0});var Qmt=s(RG);Btr=r(Qmt,"TFMobileBertForPreTraining"),Qmt.forEach(t),xtr=r(K7e," (MobileBERT model)"),K7e.forEach(t),ktr=i(U),bT=n(U,"LI",{});var Z7e=s(bT);Ahe=n(Z7e,"STRONG",{});var Hmt=s(Ahe);Rtr=r(Hmt,"mpnet"),Hmt.forEach(t),Str=r(Z7e," \u2014 "),SG=n(Z7e,"A",{href:!0});var Umt=s(SG);Ptr=r(Umt,"TFMPNetForMaskedLM"),Umt.forEach(t),$tr=r(Z7e," (MPNet model)"),Z7e.forEach(t),Itr=i(U),vT=n(U,"LI",{});var e8e=s(vT);Lhe=n(e8e,"STRONG",{});var Jmt=s(Lhe);Ntr=r(Jmt,"openai-gpt"),Jmt.forEach(t),jtr=r(e8e," \u2014 "),PG=n(e8e,"A",{href:!0});var Ymt=s(PG);Dtr=r(Ymt,"TFOpenAIGPTLMHeadModel"),Ymt.forEach(t),qtr=r(e8e," (OpenAI GPT model)"),e8e.forEach(t),Gtr=i(U),TT=n(U,"LI",{});var o8e=s(TT);Bhe=n(o8e,"STRONG",{});var Kmt=s(Bhe);Otr=r(Kmt,"roberta"),Kmt.forEach(t),Xtr=r(o8e," \u2014 "),$G=n(o8e,"A",{href:!0});var Zmt=s($G);Vtr=r(Zmt,"TFRobertaForMaskedLM"),Zmt.forEach(t),ztr=r(o8e," (RoBERTa model)"),o8e.forEach(t),Wtr=i(U),FT=n(U,"LI",{});var r8e=s(FT);xhe=n(r8e,"STRONG",{});var egt=s(xhe);Qtr=r(egt,"t5"),egt.forEach(t),Htr=r(r8e," \u2014 "),IG=n(r8e,"A",{href:!0});var ogt=s(IG);Utr=r(ogt,"TFT5ForConditionalGeneration"),ogt.forEach(t),Jtr=r(r8e," (T5 model)"),r8e.forEach(t),Ytr=i(U),CT=n(U,"LI",{});var t8e=s(CT);khe=n(t8e,"STRONG",{});var rgt=s(khe);Ktr=r(rgt,"tapas"),rgt.forEach(t),Ztr=r(t8e," \u2014 "),NG=n(t8e,"A",{href:!0});var tgt=s(NG);ear=r(tgt,"TFTapasForMaskedLM"),tgt.forEach(t),oar=r(t8e," (TAPAS model)"),t8e.forEach(t),rar=i(U),MT=n(U,"LI",{});var a8e=s(MT);Rhe=n(a8e,"STRONG",{});var agt=s(Rhe);tar=r(agt,"transfo-xl"),agt.forEach(t),aar=r(a8e," \u2014 "),jG=n(a8e,"A",{href:!0});var ngt=s(jG);nar=r(ngt,"TFTransfoXLLMHeadModel"),ngt.forEach(t),sar=r(a8e," (Transformer-XL model)"),a8e.forEach(t),lar=i(U),ET=n(U,"LI",{});var n8e=s(ET);She=n(n8e,"STRONG",{});var sgt=s(She);iar=r(sgt,"vit_mae"),sgt.forEach(t),dar=r(n8e," \u2014 "),DG=n(n8e,"A",{href:!0});var lgt=s(DG);car=r(lgt,"TFViTMAEForPreTraining"),lgt.forEach(t),far=r(n8e," (ViTMAE model)"),n8e.forEach(t),mar=i(U),yT=n(U,"LI",{});var s8e=s(yT);Phe=n(s8e,"STRONG",{});var igt=s(Phe);gar=r(igt,"xlm"),igt.forEach(t),har=r(s8e," \u2014 "),qG=n(s8e,"A",{href:!0});var dgt=s(qG);par=r(dgt,"TFXLMWithLMHeadModel"),dgt.forEach(t),_ar=r(s8e," (XLM model)"),s8e.forEach(t),uar=i(U),wT=n(U,"LI",{});var l8e=s(wT);$he=n(l8e,"STRONG",{});var cgt=s($he);bar=r(cgt,"xlm-roberta"),cgt.forEach(t),Tar=r(l8e," \u2014 "),GG=n(l8e,"A",{href:!0});var fgt=s(GG);Far=r(fgt,"TFXLMRobertaForMaskedLM"),fgt.forEach(t),Car=r(l8e," (XLM-RoBERTa model)"),l8e.forEach(t),Mar=i(U),AT=n(U,"LI",{});var i8e=s(AT);Ihe=n(i8e,"STRONG",{});var mgt=s(Ihe);Ear=r(mgt,"xlnet"),mgt.forEach(t),yar=r(i8e," \u2014 "),OG=n(i8e,"A",{href:!0});var ggt=s(OG);war=r(ggt,"TFXLNetLMHeadModel"),ggt.forEach(t),Aar=r(i8e," (XLNet model)"),i8e.forEach(t),U.forEach(t),Lar=i(_a),Nhe=n(_a,"P",{});var hgt=s(Nhe);Bar=r(hgt,"Examples:"),hgt.forEach(t),xar=i(_a),m(n0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),SRe=i(c),bc=n(c,"H2",{class:!0});var VPe=s(bc);LT=n(VPe,"A",{id:!0,class:!0,href:!0});var pgt=s(LT);jhe=n(pgt,"SPAN",{});var _gt=s(jhe);m(s0.$$.fragment,_gt),_gt.forEach(t),pgt.forEach(t),kar=i(VPe),Dhe=n(VPe,"SPAN",{});var ugt=s(Dhe);Rar=r(ugt,"TFAutoModelForCausalLM"),ugt.forEach(t),VPe.forEach(t),PRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(l0.$$.fragment,Xl),Sar=i(Xl),vc=n(Xl,"P",{});var aQ=s(vc);Par=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qhe=n(aQ,"CODE",{});var bgt=s(qhe);$ar=r(bgt,"from_pretrained()"),bgt.forEach(t),Iar=r(aQ,"class method or the "),Ghe=n(aQ,"CODE",{});var vgt=s(Ghe);Nar=r(vgt,"from_config()"),vgt.forEach(t),jar=r(aQ,`class
method.`),aQ.forEach(t),Dar=i(Xl),i0=n(Xl,"P",{});var zPe=s(i0);qar=r(zPe,"This class cannot be instantiated directly using "),Ohe=n(zPe,"CODE",{});var Tgt=s(Ohe);Gar=r(Tgt,"__init__()"),Tgt.forEach(t),Oar=r(zPe," (throws an error)."),zPe.forEach(t),Xar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(d0.$$.fragment,Vl),Var=i(Vl),Xhe=n(Vl,"P",{});var Fgt=s(Xhe);zar=r(Fgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fgt.forEach(t),War=i(Vl),Tc=n(Vl,"P",{});var nQ=s(Tc);Qar=r(nQ,`Note:
Loading a model from its configuration file does `),Vhe=n(nQ,"STRONG",{});var Cgt=s(Vhe);Har=r(Cgt,"not"),Cgt.forEach(t),Uar=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zhe=n(nQ,"CODE",{});var Mgt=s(zhe);Jar=r(Mgt,"from_pretrained()"),Mgt.forEach(t),Yar=r(nQ,"to load the model weights."),nQ.forEach(t),Kar=i(Vl),Whe=n(Vl,"P",{});var Egt=s(Whe);Zar=r(Egt,"Examples:"),Egt.forEach(t),enr=i(Vl),m(c0.$$.fragment,Vl),Vl.forEach(t),onr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(f0.$$.fragment,ua),rnr=i(ua),Qhe=n(ua,"P",{});var ygt=s(Qhe);tnr=r(ygt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ygt.forEach(t),anr=i(ua),bn=n(ua,"P",{});var OE=s(bn);nnr=r(OE,"The model class to instantiate is selected based on the "),Hhe=n(OE,"CODE",{});var wgt=s(Hhe);snr=r(wgt,"model_type"),wgt.forEach(t),lnr=r(OE,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(OE,"CODE",{});var Agt=s(Uhe);inr=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),dnr=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(OE,"CODE",{});var Lgt=s(Jhe);cnr=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),fnr=r(OE,":"),OE.forEach(t),mnr=i(ua),ce=n(ua,"UL",{});var he=s(ce);BT=n(he,"LI",{});var d8e=s(BT);Yhe=n(d8e,"STRONG",{});var Bgt=s(Yhe);gnr=r(Bgt,"bert"),Bgt.forEach(t),hnr=r(d8e," \u2014 "),XG=n(d8e,"A",{href:!0});var xgt=s(XG);pnr=r(xgt,"TFBertLMHeadModel"),xgt.forEach(t),_nr=r(d8e," (BERT model)"),d8e.forEach(t),unr=i(he),xT=n(he,"LI",{});var c8e=s(xT);Khe=n(c8e,"STRONG",{});var kgt=s(Khe);bnr=r(kgt,"camembert"),kgt.forEach(t),vnr=r(c8e," \u2014 "),VG=n(c8e,"A",{href:!0});var Rgt=s(VG);Tnr=r(Rgt,"TFCamembertForCausalLM"),Rgt.forEach(t),Fnr=r(c8e," (CamemBERT model)"),c8e.forEach(t),Cnr=i(he),kT=n(he,"LI",{});var f8e=s(kT);Zhe=n(f8e,"STRONG",{});var Sgt=s(Zhe);Mnr=r(Sgt,"ctrl"),Sgt.forEach(t),Enr=r(f8e," \u2014 "),zG=n(f8e,"A",{href:!0});var Pgt=s(zG);ynr=r(Pgt,"TFCTRLLMHeadModel"),Pgt.forEach(t),wnr=r(f8e," (CTRL model)"),f8e.forEach(t),Anr=i(he),RT=n(he,"LI",{});var m8e=s(RT);epe=n(m8e,"STRONG",{});var $gt=s(epe);Lnr=r($gt,"gpt2"),$gt.forEach(t),Bnr=r(m8e," \u2014 "),WG=n(m8e,"A",{href:!0});var Igt=s(WG);xnr=r(Igt,"TFGPT2LMHeadModel"),Igt.forEach(t),knr=r(m8e," (OpenAI GPT-2 model)"),m8e.forEach(t),Rnr=i(he),ST=n(he,"LI",{});var g8e=s(ST);ope=n(g8e,"STRONG",{});var Ngt=s(ope);Snr=r(Ngt,"gptj"),Ngt.forEach(t),Pnr=r(g8e," \u2014 "),QG=n(g8e,"A",{href:!0});var jgt=s(QG);$nr=r(jgt,"TFGPTJForCausalLM"),jgt.forEach(t),Inr=r(g8e," (GPT-J model)"),g8e.forEach(t),Nnr=i(he),PT=n(he,"LI",{});var h8e=s(PT);rpe=n(h8e,"STRONG",{});var Dgt=s(rpe);jnr=r(Dgt,"openai-gpt"),Dgt.forEach(t),Dnr=r(h8e," \u2014 "),HG=n(h8e,"A",{href:!0});var qgt=s(HG);qnr=r(qgt,"TFOpenAIGPTLMHeadModel"),qgt.forEach(t),Gnr=r(h8e," (OpenAI GPT model)"),h8e.forEach(t),Onr=i(he),$T=n(he,"LI",{});var p8e=s($T);tpe=n(p8e,"STRONG",{});var Ggt=s(tpe);Xnr=r(Ggt,"rembert"),Ggt.forEach(t),Vnr=r(p8e," \u2014 "),UG=n(p8e,"A",{href:!0});var Ogt=s(UG);znr=r(Ogt,"TFRemBertForCausalLM"),Ogt.forEach(t),Wnr=r(p8e," (RemBERT model)"),p8e.forEach(t),Qnr=i(he),IT=n(he,"LI",{});var _8e=s(IT);ape=n(_8e,"STRONG",{});var Xgt=s(ape);Hnr=r(Xgt,"roberta"),Xgt.forEach(t),Unr=r(_8e," \u2014 "),JG=n(_8e,"A",{href:!0});var Vgt=s(JG);Jnr=r(Vgt,"TFRobertaForCausalLM"),Vgt.forEach(t),Ynr=r(_8e," (RoBERTa model)"),_8e.forEach(t),Knr=i(he),NT=n(he,"LI",{});var u8e=s(NT);npe=n(u8e,"STRONG",{});var zgt=s(npe);Znr=r(zgt,"roformer"),zgt.forEach(t),esr=r(u8e," \u2014 "),YG=n(u8e,"A",{href:!0});var Wgt=s(YG);osr=r(Wgt,"TFRoFormerForCausalLM"),Wgt.forEach(t),rsr=r(u8e," (RoFormer model)"),u8e.forEach(t),tsr=i(he),jT=n(he,"LI",{});var b8e=s(jT);spe=n(b8e,"STRONG",{});var Qgt=s(spe);asr=r(Qgt,"transfo-xl"),Qgt.forEach(t),nsr=r(b8e," \u2014 "),KG=n(b8e,"A",{href:!0});var Hgt=s(KG);ssr=r(Hgt,"TFTransfoXLLMHeadModel"),Hgt.forEach(t),lsr=r(b8e," (Transformer-XL model)"),b8e.forEach(t),isr=i(he),DT=n(he,"LI",{});var v8e=s(DT);lpe=n(v8e,"STRONG",{});var Ugt=s(lpe);dsr=r(Ugt,"xlm"),Ugt.forEach(t),csr=r(v8e," \u2014 "),ZG=n(v8e,"A",{href:!0});var Jgt=s(ZG);fsr=r(Jgt,"TFXLMWithLMHeadModel"),Jgt.forEach(t),msr=r(v8e," (XLM model)"),v8e.forEach(t),gsr=i(he),qT=n(he,"LI",{});var T8e=s(qT);ipe=n(T8e,"STRONG",{});var Ygt=s(ipe);hsr=r(Ygt,"xlnet"),Ygt.forEach(t),psr=r(T8e," \u2014 "),eO=n(T8e,"A",{href:!0});var Kgt=s(eO);_sr=r(Kgt,"TFXLNetLMHeadModel"),Kgt.forEach(t),usr=r(T8e," (XLNet model)"),T8e.forEach(t),he.forEach(t),bsr=i(ua),dpe=n(ua,"P",{});var Zgt=s(dpe);vsr=r(Zgt,"Examples:"),Zgt.forEach(t),Tsr=i(ua),m(m0.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),$Re=i(c),Fc=n(c,"H2",{class:!0});var WPe=s(Fc);GT=n(WPe,"A",{id:!0,class:!0,href:!0});var eht=s(GT);cpe=n(eht,"SPAN",{});var oht=s(cpe);m(g0.$$.fragment,oht),oht.forEach(t),eht.forEach(t),Fsr=i(WPe),fpe=n(WPe,"SPAN",{});var rht=s(fpe);Csr=r(rht,"TFAutoModelForImageClassification"),rht.forEach(t),WPe.forEach(t),IRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(h0.$$.fragment,zl),Msr=i(zl),Cc=n(zl,"P",{});var sQ=s(Cc);Esr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mpe=n(sQ,"CODE",{});var tht=s(mpe);ysr=r(tht,"from_pretrained()"),tht.forEach(t),wsr=r(sQ,"class method or the "),gpe=n(sQ,"CODE",{});var aht=s(gpe);Asr=r(aht,"from_config()"),aht.forEach(t),Lsr=r(sQ,`class
method.`),sQ.forEach(t),Bsr=i(zl),p0=n(zl,"P",{});var QPe=s(p0);xsr=r(QPe,"This class cannot be instantiated directly using "),hpe=n(QPe,"CODE",{});var nht=s(hpe);ksr=r(nht,"__init__()"),nht.forEach(t),Rsr=r(QPe," (throws an error)."),QPe.forEach(t),Ssr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(_0.$$.fragment,Wl),Psr=i(Wl),ppe=n(Wl,"P",{});var sht=s(ppe);$sr=r(sht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sht.forEach(t),Isr=i(Wl),Mc=n(Wl,"P",{});var lQ=s(Mc);Nsr=r(lQ,`Note:
Loading a model from its configuration file does `),_pe=n(lQ,"STRONG",{});var lht=s(_pe);jsr=r(lht,"not"),lht.forEach(t),Dsr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=n(lQ,"CODE",{});var iht=s(upe);qsr=r(iht,"from_pretrained()"),iht.forEach(t),Gsr=r(lQ,"to load the model weights."),lQ.forEach(t),Osr=i(Wl),bpe=n(Wl,"P",{});var dht=s(bpe);Xsr=r(dht,"Examples:"),dht.forEach(t),Vsr=i(Wl),m(u0.$$.fragment,Wl),Wl.forEach(t),zsr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(b0.$$.fragment,ba),Wsr=i(ba),vpe=n(ba,"P",{});var cht=s(vpe);Qsr=r(cht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cht.forEach(t),Hsr=i(ba),vn=n(ba,"P",{});var XE=s(vn);Usr=r(XE,"The model class to instantiate is selected based on the "),Tpe=n(XE,"CODE",{});var fht=s(Tpe);Jsr=r(fht,"model_type"),fht.forEach(t),Ysr=r(XE,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(XE,"CODE",{});var mht=s(Fpe);Ksr=r(mht,"pretrained_model_name_or_path"),mht.forEach(t),Zsr=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(XE,"CODE",{});var ght=s(Cpe);elr=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),olr=r(XE,":"),XE.forEach(t),rlr=i(ba),v0=n(ba,"UL",{});var HPe=s(v0);OT=n(HPe,"LI",{});var F8e=s(OT);Mpe=n(F8e,"STRONG",{});var hht=s(Mpe);tlr=r(hht,"convnext"),hht.forEach(t),alr=r(F8e," \u2014 "),oO=n(F8e,"A",{href:!0});var pht=s(oO);nlr=r(pht,"TFConvNextForImageClassification"),pht.forEach(t),slr=r(F8e," (ConvNext model)"),F8e.forEach(t),llr=i(HPe),XT=n(HPe,"LI",{});var C8e=s(XT);Epe=n(C8e,"STRONG",{});var _ht=s(Epe);ilr=r(_ht,"vit"),_ht.forEach(t),dlr=r(C8e," \u2014 "),rO=n(C8e,"A",{href:!0});var uht=s(rO);clr=r(uht,"TFViTForImageClassification"),uht.forEach(t),flr=r(C8e," (ViT model)"),C8e.forEach(t),HPe.forEach(t),mlr=i(ba),ype=n(ba,"P",{});var bht=s(ype);glr=r(bht,"Examples:"),bht.forEach(t),hlr=i(ba),m(T0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),NRe=i(c),Ec=n(c,"H2",{class:!0});var UPe=s(Ec);VT=n(UPe,"A",{id:!0,class:!0,href:!0});var vht=s(VT);wpe=n(vht,"SPAN",{});var Tht=s(wpe);m(F0.$$.fragment,Tht),Tht.forEach(t),vht.forEach(t),plr=i(UPe),Ape=n(UPe,"SPAN",{});var Fht=s(Ape);_lr=r(Fht,"TFAutoModelForMaskedLM"),Fht.forEach(t),UPe.forEach(t),jRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(C0.$$.fragment,Ql),ulr=i(Ql),yc=n(Ql,"P",{});var iQ=s(yc);blr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Lpe=n(iQ,"CODE",{});var Cht=s(Lpe);vlr=r(Cht,"from_pretrained()"),Cht.forEach(t),Tlr=r(iQ,"class method or the "),Bpe=n(iQ,"CODE",{});var Mht=s(Bpe);Flr=r(Mht,"from_config()"),Mht.forEach(t),Clr=r(iQ,`class
method.`),iQ.forEach(t),Mlr=i(Ql),M0=n(Ql,"P",{});var JPe=s(M0);Elr=r(JPe,"This class cannot be instantiated directly using "),xpe=n(JPe,"CODE",{});var Eht=s(xpe);ylr=r(Eht,"__init__()"),Eht.forEach(t),wlr=r(JPe," (throws an error)."),JPe.forEach(t),Alr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(E0.$$.fragment,Hl),Llr=i(Hl),kpe=n(Hl,"P",{});var yht=s(kpe);Blr=r(yht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yht.forEach(t),xlr=i(Hl),wc=n(Hl,"P",{});var dQ=s(wc);klr=r(dQ,`Note:
Loading a model from its configuration file does `),Rpe=n(dQ,"STRONG",{});var wht=s(Rpe);Rlr=r(wht,"not"),wht.forEach(t),Slr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Spe=n(dQ,"CODE",{});var Aht=s(Spe);Plr=r(Aht,"from_pretrained()"),Aht.forEach(t),$lr=r(dQ,"to load the model weights."),dQ.forEach(t),Ilr=i(Hl),Ppe=n(Hl,"P",{});var Lht=s(Ppe);Nlr=r(Lht,"Examples:"),Lht.forEach(t),jlr=i(Hl),m(y0.$$.fragment,Hl),Hl.forEach(t),Dlr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(w0.$$.fragment,va),qlr=i(va),$pe=n(va,"P",{});var Bht=s($pe);Glr=r(Bht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bht.forEach(t),Olr=i(va),Tn=n(va,"P",{});var VE=s(Tn);Xlr=r(VE,"The model class to instantiate is selected based on the "),Ipe=n(VE,"CODE",{});var xht=s(Ipe);Vlr=r(xht,"model_type"),xht.forEach(t),zlr=r(VE,` property of the config object (either
passed as an argument or loaded from `),Npe=n(VE,"CODE",{});var kht=s(Npe);Wlr=r(kht,"pretrained_model_name_or_path"),kht.forEach(t),Qlr=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(VE,"CODE",{});var Rht=s(jpe);Hlr=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),Ulr=r(VE,":"),VE.forEach(t),Jlr=i(va),J=n(va,"UL",{});var ee=s(J);zT=n(ee,"LI",{});var M8e=s(zT);Dpe=n(M8e,"STRONG",{});var Sht=s(Dpe);Ylr=r(Sht,"albert"),Sht.forEach(t),Klr=r(M8e," \u2014 "),tO=n(M8e,"A",{href:!0});var Pht=s(tO);Zlr=r(Pht,"TFAlbertForMaskedLM"),Pht.forEach(t),eir=r(M8e," (ALBERT model)"),M8e.forEach(t),oir=i(ee),WT=n(ee,"LI",{});var E8e=s(WT);qpe=n(E8e,"STRONG",{});var $ht=s(qpe);rir=r($ht,"bert"),$ht.forEach(t),tir=r(E8e," \u2014 "),aO=n(E8e,"A",{href:!0});var Iht=s(aO);air=r(Iht,"TFBertForMaskedLM"),Iht.forEach(t),nir=r(E8e," (BERT model)"),E8e.forEach(t),sir=i(ee),QT=n(ee,"LI",{});var y8e=s(QT);Gpe=n(y8e,"STRONG",{});var Nht=s(Gpe);lir=r(Nht,"camembert"),Nht.forEach(t),iir=r(y8e," \u2014 "),nO=n(y8e,"A",{href:!0});var jht=s(nO);dir=r(jht,"TFCamembertForMaskedLM"),jht.forEach(t),cir=r(y8e," (CamemBERT model)"),y8e.forEach(t),fir=i(ee),HT=n(ee,"LI",{});var w8e=s(HT);Ope=n(w8e,"STRONG",{});var Dht=s(Ope);mir=r(Dht,"convbert"),Dht.forEach(t),gir=r(w8e," \u2014 "),sO=n(w8e,"A",{href:!0});var qht=s(sO);hir=r(qht,"TFConvBertForMaskedLM"),qht.forEach(t),pir=r(w8e," (ConvBERT model)"),w8e.forEach(t),_ir=i(ee),UT=n(ee,"LI",{});var A8e=s(UT);Xpe=n(A8e,"STRONG",{});var Ght=s(Xpe);uir=r(Ght,"deberta"),Ght.forEach(t),bir=r(A8e," \u2014 "),lO=n(A8e,"A",{href:!0});var Oht=s(lO);vir=r(Oht,"TFDebertaForMaskedLM"),Oht.forEach(t),Tir=r(A8e," (DeBERTa model)"),A8e.forEach(t),Fir=i(ee),JT=n(ee,"LI",{});var L8e=s(JT);Vpe=n(L8e,"STRONG",{});var Xht=s(Vpe);Cir=r(Xht,"deberta-v2"),Xht.forEach(t),Mir=r(L8e," \u2014 "),iO=n(L8e,"A",{href:!0});var Vht=s(iO);Eir=r(Vht,"TFDebertaV2ForMaskedLM"),Vht.forEach(t),yir=r(L8e," (DeBERTa-v2 model)"),L8e.forEach(t),wir=i(ee),YT=n(ee,"LI",{});var B8e=s(YT);zpe=n(B8e,"STRONG",{});var zht=s(zpe);Air=r(zht,"distilbert"),zht.forEach(t),Lir=r(B8e," \u2014 "),dO=n(B8e,"A",{href:!0});var Wht=s(dO);Bir=r(Wht,"TFDistilBertForMaskedLM"),Wht.forEach(t),xir=r(B8e," (DistilBERT model)"),B8e.forEach(t),kir=i(ee),KT=n(ee,"LI",{});var x8e=s(KT);Wpe=n(x8e,"STRONG",{});var Qht=s(Wpe);Rir=r(Qht,"electra"),Qht.forEach(t),Sir=r(x8e," \u2014 "),cO=n(x8e,"A",{href:!0});var Hht=s(cO);Pir=r(Hht,"TFElectraForMaskedLM"),Hht.forEach(t),$ir=r(x8e," (ELECTRA model)"),x8e.forEach(t),Iir=i(ee),ZT=n(ee,"LI",{});var k8e=s(ZT);Qpe=n(k8e,"STRONG",{});var Uht=s(Qpe);Nir=r(Uht,"flaubert"),Uht.forEach(t),jir=r(k8e," \u2014 "),fO=n(k8e,"A",{href:!0});var Jht=s(fO);Dir=r(Jht,"TFFlaubertWithLMHeadModel"),Jht.forEach(t),qir=r(k8e," (FlauBERT model)"),k8e.forEach(t),Gir=i(ee),eF=n(ee,"LI",{});var R8e=s(eF);Hpe=n(R8e,"STRONG",{});var Yht=s(Hpe);Oir=r(Yht,"funnel"),Yht.forEach(t),Xir=r(R8e," \u2014 "),mO=n(R8e,"A",{href:!0});var Kht=s(mO);Vir=r(Kht,"TFFunnelForMaskedLM"),Kht.forEach(t),zir=r(R8e," (Funnel Transformer model)"),R8e.forEach(t),Wir=i(ee),oF=n(ee,"LI",{});var S8e=s(oF);Upe=n(S8e,"STRONG",{});var Zht=s(Upe);Qir=r(Zht,"layoutlm"),Zht.forEach(t),Hir=r(S8e," \u2014 "),gO=n(S8e,"A",{href:!0});var ept=s(gO);Uir=r(ept,"TFLayoutLMForMaskedLM"),ept.forEach(t),Jir=r(S8e," (LayoutLM model)"),S8e.forEach(t),Yir=i(ee),rF=n(ee,"LI",{});var P8e=s(rF);Jpe=n(P8e,"STRONG",{});var opt=s(Jpe);Kir=r(opt,"longformer"),opt.forEach(t),Zir=r(P8e," \u2014 "),hO=n(P8e,"A",{href:!0});var rpt=s(hO);edr=r(rpt,"TFLongformerForMaskedLM"),rpt.forEach(t),odr=r(P8e," (Longformer model)"),P8e.forEach(t),rdr=i(ee),tF=n(ee,"LI",{});var $8e=s(tF);Ype=n($8e,"STRONG",{});var tpt=s(Ype);tdr=r(tpt,"mobilebert"),tpt.forEach(t),adr=r($8e," \u2014 "),pO=n($8e,"A",{href:!0});var apt=s(pO);ndr=r(apt,"TFMobileBertForMaskedLM"),apt.forEach(t),sdr=r($8e," (MobileBERT model)"),$8e.forEach(t),ldr=i(ee),aF=n(ee,"LI",{});var I8e=s(aF);Kpe=n(I8e,"STRONG",{});var npt=s(Kpe);idr=r(npt,"mpnet"),npt.forEach(t),ddr=r(I8e," \u2014 "),_O=n(I8e,"A",{href:!0});var spt=s(_O);cdr=r(spt,"TFMPNetForMaskedLM"),spt.forEach(t),fdr=r(I8e," (MPNet model)"),I8e.forEach(t),mdr=i(ee),nF=n(ee,"LI",{});var N8e=s(nF);Zpe=n(N8e,"STRONG",{});var lpt=s(Zpe);gdr=r(lpt,"rembert"),lpt.forEach(t),hdr=r(N8e," \u2014 "),uO=n(N8e,"A",{href:!0});var ipt=s(uO);pdr=r(ipt,"TFRemBertForMaskedLM"),ipt.forEach(t),_dr=r(N8e," (RemBERT model)"),N8e.forEach(t),udr=i(ee),sF=n(ee,"LI",{});var j8e=s(sF);e_e=n(j8e,"STRONG",{});var dpt=s(e_e);bdr=r(dpt,"roberta"),dpt.forEach(t),vdr=r(j8e," \u2014 "),bO=n(j8e,"A",{href:!0});var cpt=s(bO);Tdr=r(cpt,"TFRobertaForMaskedLM"),cpt.forEach(t),Fdr=r(j8e," (RoBERTa model)"),j8e.forEach(t),Cdr=i(ee),lF=n(ee,"LI",{});var D8e=s(lF);o_e=n(D8e,"STRONG",{});var fpt=s(o_e);Mdr=r(fpt,"roformer"),fpt.forEach(t),Edr=r(D8e," \u2014 "),vO=n(D8e,"A",{href:!0});var mpt=s(vO);ydr=r(mpt,"TFRoFormerForMaskedLM"),mpt.forEach(t),wdr=r(D8e," (RoFormer model)"),D8e.forEach(t),Adr=i(ee),iF=n(ee,"LI",{});var q8e=s(iF);r_e=n(q8e,"STRONG",{});var gpt=s(r_e);Ldr=r(gpt,"tapas"),gpt.forEach(t),Bdr=r(q8e," \u2014 "),TO=n(q8e,"A",{href:!0});var hpt=s(TO);xdr=r(hpt,"TFTapasForMaskedLM"),hpt.forEach(t),kdr=r(q8e," (TAPAS model)"),q8e.forEach(t),Rdr=i(ee),dF=n(ee,"LI",{});var G8e=s(dF);t_e=n(G8e,"STRONG",{});var ppt=s(t_e);Sdr=r(ppt,"xlm"),ppt.forEach(t),Pdr=r(G8e," \u2014 "),FO=n(G8e,"A",{href:!0});var _pt=s(FO);$dr=r(_pt,"TFXLMWithLMHeadModel"),_pt.forEach(t),Idr=r(G8e," (XLM model)"),G8e.forEach(t),Ndr=i(ee),cF=n(ee,"LI",{});var O8e=s(cF);a_e=n(O8e,"STRONG",{});var upt=s(a_e);jdr=r(upt,"xlm-roberta"),upt.forEach(t),Ddr=r(O8e," \u2014 "),CO=n(O8e,"A",{href:!0});var bpt=s(CO);qdr=r(bpt,"TFXLMRobertaForMaskedLM"),bpt.forEach(t),Gdr=r(O8e," (XLM-RoBERTa model)"),O8e.forEach(t),ee.forEach(t),Odr=i(va),n_e=n(va,"P",{});var vpt=s(n_e);Xdr=r(vpt,"Examples:"),vpt.forEach(t),Vdr=i(va),m(A0.$$.fragment,va),va.forEach(t),Ql.forEach(t),DRe=i(c),Ac=n(c,"H2",{class:!0});var YPe=s(Ac);fF=n(YPe,"A",{id:!0,class:!0,href:!0});var Tpt=s(fF);s_e=n(Tpt,"SPAN",{});var Fpt=s(s_e);m(L0.$$.fragment,Fpt),Fpt.forEach(t),Tpt.forEach(t),zdr=i(YPe),l_e=n(YPe,"SPAN",{});var Cpt=s(l_e);Wdr=r(Cpt,"TFAutoModelForSeq2SeqLM"),Cpt.forEach(t),YPe.forEach(t),qRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(B0.$$.fragment,Ul),Qdr=i(Ul),Lc=n(Ul,"P",{});var cQ=s(Lc);Hdr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),i_e=n(cQ,"CODE",{});var Mpt=s(i_e);Udr=r(Mpt,"from_pretrained()"),Mpt.forEach(t),Jdr=r(cQ,"class method or the "),d_e=n(cQ,"CODE",{});var Ept=s(d_e);Ydr=r(Ept,"from_config()"),Ept.forEach(t),Kdr=r(cQ,`class
method.`),cQ.forEach(t),Zdr=i(Ul),x0=n(Ul,"P",{});var KPe=s(x0);ecr=r(KPe,"This class cannot be instantiated directly using "),c_e=n(KPe,"CODE",{});var ypt=s(c_e);ocr=r(ypt,"__init__()"),ypt.forEach(t),rcr=r(KPe," (throws an error)."),KPe.forEach(t),tcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(k0.$$.fragment,Jl),acr=i(Jl),f_e=n(Jl,"P",{});var wpt=s(f_e);ncr=r(wpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wpt.forEach(t),scr=i(Jl),Bc=n(Jl,"P",{});var fQ=s(Bc);lcr=r(fQ,`Note:
Loading a model from its configuration file does `),m_e=n(fQ,"STRONG",{});var Apt=s(m_e);icr=r(Apt,"not"),Apt.forEach(t),dcr=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),g_e=n(fQ,"CODE",{});var Lpt=s(g_e);ccr=r(Lpt,"from_pretrained()"),Lpt.forEach(t),fcr=r(fQ,"to load the model weights."),fQ.forEach(t),mcr=i(Jl),h_e=n(Jl,"P",{});var Bpt=s(h_e);gcr=r(Bpt,"Examples:"),Bpt.forEach(t),hcr=i(Jl),m(R0.$$.fragment,Jl),Jl.forEach(t),pcr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(S0.$$.fragment,Ta),_cr=i(Ta),p_e=n(Ta,"P",{});var xpt=s(p_e);ucr=r(xpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xpt.forEach(t),bcr=i(Ta),Fn=n(Ta,"P",{});var zE=s(Fn);vcr=r(zE,"The model class to instantiate is selected based on the "),__e=n(zE,"CODE",{});var kpt=s(__e);Tcr=r(kpt,"model_type"),kpt.forEach(t),Fcr=r(zE,` property of the config object (either
passed as an argument or loaded from `),u_e=n(zE,"CODE",{});var Rpt=s(u_e);Ccr=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),Mcr=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(zE,"CODE",{});var Spt=s(b_e);Ecr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),ycr=r(zE,":"),zE.forEach(t),wcr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);mF=n(ye,"LI",{});var X8e=s(mF);v_e=n(X8e,"STRONG",{});var Ppt=s(v_e);Acr=r(Ppt,"bart"),Ppt.forEach(t),Lcr=r(X8e," \u2014 "),MO=n(X8e,"A",{href:!0});var $pt=s(MO);Bcr=r($pt,"TFBartForConditionalGeneration"),$pt.forEach(t),xcr=r(X8e," (BART model)"),X8e.forEach(t),kcr=i(ye),gF=n(ye,"LI",{});var V8e=s(gF);T_e=n(V8e,"STRONG",{});var Ipt=s(T_e);Rcr=r(Ipt,"blenderbot"),Ipt.forEach(t),Scr=r(V8e," \u2014 "),EO=n(V8e,"A",{href:!0});var Npt=s(EO);Pcr=r(Npt,"TFBlenderbotForConditionalGeneration"),Npt.forEach(t),$cr=r(V8e," (Blenderbot model)"),V8e.forEach(t),Icr=i(ye),hF=n(ye,"LI",{});var z8e=s(hF);F_e=n(z8e,"STRONG",{});var jpt=s(F_e);Ncr=r(jpt,"blenderbot-small"),jpt.forEach(t),jcr=r(z8e," \u2014 "),yO=n(z8e,"A",{href:!0});var Dpt=s(yO);Dcr=r(Dpt,"TFBlenderbotSmallForConditionalGeneration"),Dpt.forEach(t),qcr=r(z8e," (BlenderbotSmall model)"),z8e.forEach(t),Gcr=i(ye),pF=n(ye,"LI",{});var W8e=s(pF);C_e=n(W8e,"STRONG",{});var qpt=s(C_e);Ocr=r(qpt,"encoder-decoder"),qpt.forEach(t),Xcr=r(W8e," \u2014 "),wO=n(W8e,"A",{href:!0});var Gpt=s(wO);Vcr=r(Gpt,"TFEncoderDecoderModel"),Gpt.forEach(t),zcr=r(W8e," (Encoder decoder model)"),W8e.forEach(t),Wcr=i(ye),_F=n(ye,"LI",{});var Q8e=s(_F);M_e=n(Q8e,"STRONG",{});var Opt=s(M_e);Qcr=r(Opt,"led"),Opt.forEach(t),Hcr=r(Q8e," \u2014 "),AO=n(Q8e,"A",{href:!0});var Xpt=s(AO);Ucr=r(Xpt,"TFLEDForConditionalGeneration"),Xpt.forEach(t),Jcr=r(Q8e," (LED model)"),Q8e.forEach(t),Ycr=i(ye),uF=n(ye,"LI",{});var H8e=s(uF);E_e=n(H8e,"STRONG",{});var Vpt=s(E_e);Kcr=r(Vpt,"marian"),Vpt.forEach(t),Zcr=r(H8e," \u2014 "),LO=n(H8e,"A",{href:!0});var zpt=s(LO);efr=r(zpt,"TFMarianMTModel"),zpt.forEach(t),ofr=r(H8e," (Marian model)"),H8e.forEach(t),rfr=i(ye),bF=n(ye,"LI",{});var U8e=s(bF);y_e=n(U8e,"STRONG",{});var Wpt=s(y_e);tfr=r(Wpt,"mbart"),Wpt.forEach(t),afr=r(U8e," \u2014 "),BO=n(U8e,"A",{href:!0});var Qpt=s(BO);nfr=r(Qpt,"TFMBartForConditionalGeneration"),Qpt.forEach(t),sfr=r(U8e," (mBART model)"),U8e.forEach(t),lfr=i(ye),vF=n(ye,"LI",{});var J8e=s(vF);w_e=n(J8e,"STRONG",{});var Hpt=s(w_e);ifr=r(Hpt,"mt5"),Hpt.forEach(t),dfr=r(J8e," \u2014 "),xO=n(J8e,"A",{href:!0});var Upt=s(xO);cfr=r(Upt,"TFMT5ForConditionalGeneration"),Upt.forEach(t),ffr=r(J8e," (mT5 model)"),J8e.forEach(t),mfr=i(ye),TF=n(ye,"LI",{});var Y8e=s(TF);A_e=n(Y8e,"STRONG",{});var Jpt=s(A_e);gfr=r(Jpt,"pegasus"),Jpt.forEach(t),hfr=r(Y8e," \u2014 "),kO=n(Y8e,"A",{href:!0});var Ypt=s(kO);pfr=r(Ypt,"TFPegasusForConditionalGeneration"),Ypt.forEach(t),_fr=r(Y8e," (Pegasus model)"),Y8e.forEach(t),ufr=i(ye),FF=n(ye,"LI",{});var K8e=s(FF);L_e=n(K8e,"STRONG",{});var Kpt=s(L_e);bfr=r(Kpt,"t5"),Kpt.forEach(t),vfr=r(K8e," \u2014 "),RO=n(K8e,"A",{href:!0});var Zpt=s(RO);Tfr=r(Zpt,"TFT5ForConditionalGeneration"),Zpt.forEach(t),Ffr=r(K8e," (T5 model)"),K8e.forEach(t),ye.forEach(t),Cfr=i(Ta),B_e=n(Ta,"P",{});var e_t=s(B_e);Mfr=r(e_t,"Examples:"),e_t.forEach(t),Efr=i(Ta),m(P0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),GRe=i(c),xc=n(c,"H2",{class:!0});var ZPe=s(xc);CF=n(ZPe,"A",{id:!0,class:!0,href:!0});var o_t=s(CF);x_e=n(o_t,"SPAN",{});var r_t=s(x_e);m($0.$$.fragment,r_t),r_t.forEach(t),o_t.forEach(t),yfr=i(ZPe),k_e=n(ZPe,"SPAN",{});var t_t=s(k_e);wfr=r(t_t,"TFAutoModelForSequenceClassification"),t_t.forEach(t),ZPe.forEach(t),ORe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(I0.$$.fragment,Yl),Afr=i(Yl),kc=n(Yl,"P",{});var mQ=s(kc);Lfr=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),R_e=n(mQ,"CODE",{});var a_t=s(R_e);Bfr=r(a_t,"from_pretrained()"),a_t.forEach(t),xfr=r(mQ,"class method or the "),S_e=n(mQ,"CODE",{});var n_t=s(S_e);kfr=r(n_t,"from_config()"),n_t.forEach(t),Rfr=r(mQ,`class
method.`),mQ.forEach(t),Sfr=i(Yl),N0=n(Yl,"P",{});var e$e=s(N0);Pfr=r(e$e,"This class cannot be instantiated directly using "),P_e=n(e$e,"CODE",{});var s_t=s(P_e);$fr=r(s_t,"__init__()"),s_t.forEach(t),Ifr=r(e$e," (throws an error)."),e$e.forEach(t),Nfr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(j0.$$.fragment,Kl),jfr=i(Kl),$_e=n(Kl,"P",{});var l_t=s($_e);Dfr=r(l_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l_t.forEach(t),qfr=i(Kl),Rc=n(Kl,"P",{});var gQ=s(Rc);Gfr=r(gQ,`Note:
Loading a model from its configuration file does `),I_e=n(gQ,"STRONG",{});var i_t=s(I_e);Ofr=r(i_t,"not"),i_t.forEach(t),Xfr=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N_e=n(gQ,"CODE",{});var d_t=s(N_e);Vfr=r(d_t,"from_pretrained()"),d_t.forEach(t),zfr=r(gQ,"to load the model weights."),gQ.forEach(t),Wfr=i(Kl),j_e=n(Kl,"P",{});var c_t=s(j_e);Qfr=r(c_t,"Examples:"),c_t.forEach(t),Hfr=i(Kl),m(D0.$$.fragment,Kl),Kl.forEach(t),Ufr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(q0.$$.fragment,Fa),Jfr=i(Fa),D_e=n(Fa,"P",{});var f_t=s(D_e);Yfr=r(f_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),f_t.forEach(t),Kfr=i(Fa),Cn=n(Fa,"P",{});var WE=s(Cn);Zfr=r(WE,"The model class to instantiate is selected based on the "),q_e=n(WE,"CODE",{});var m_t=s(q_e);emr=r(m_t,"model_type"),m_t.forEach(t),omr=r(WE,` property of the config object (either
passed as an argument or loaded from `),G_e=n(WE,"CODE",{});var g_t=s(G_e);rmr=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),tmr=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(WE,"CODE",{});var h_t=s(O_e);amr=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),nmr=r(WE,":"),WE.forEach(t),smr=i(Fa),X=n(Fa,"UL",{});var W=s(X);MF=n(W,"LI",{});var Z8e=s(MF);X_e=n(Z8e,"STRONG",{});var p_t=s(X_e);lmr=r(p_t,"albert"),p_t.forEach(t),imr=r(Z8e," \u2014 "),SO=n(Z8e,"A",{href:!0});var __t=s(SO);dmr=r(__t,"TFAlbertForSequenceClassification"),__t.forEach(t),cmr=r(Z8e," (ALBERT model)"),Z8e.forEach(t),fmr=i(W),EF=n(W,"LI",{});var e9e=s(EF);V_e=n(e9e,"STRONG",{});var u_t=s(V_e);mmr=r(u_t,"bert"),u_t.forEach(t),gmr=r(e9e," \u2014 "),PO=n(e9e,"A",{href:!0});var b_t=s(PO);hmr=r(b_t,"TFBertForSequenceClassification"),b_t.forEach(t),pmr=r(e9e," (BERT model)"),e9e.forEach(t),_mr=i(W),yF=n(W,"LI",{});var o9e=s(yF);z_e=n(o9e,"STRONG",{});var v_t=s(z_e);umr=r(v_t,"camembert"),v_t.forEach(t),bmr=r(o9e," \u2014 "),$O=n(o9e,"A",{href:!0});var T_t=s($O);vmr=r(T_t,"TFCamembertForSequenceClassification"),T_t.forEach(t),Tmr=r(o9e," (CamemBERT model)"),o9e.forEach(t),Fmr=i(W),wF=n(W,"LI",{});var r9e=s(wF);W_e=n(r9e,"STRONG",{});var F_t=s(W_e);Cmr=r(F_t,"convbert"),F_t.forEach(t),Mmr=r(r9e," \u2014 "),IO=n(r9e,"A",{href:!0});var C_t=s(IO);Emr=r(C_t,"TFConvBertForSequenceClassification"),C_t.forEach(t),ymr=r(r9e," (ConvBERT model)"),r9e.forEach(t),wmr=i(W),AF=n(W,"LI",{});var t9e=s(AF);Q_e=n(t9e,"STRONG",{});var M_t=s(Q_e);Amr=r(M_t,"ctrl"),M_t.forEach(t),Lmr=r(t9e," \u2014 "),NO=n(t9e,"A",{href:!0});var E_t=s(NO);Bmr=r(E_t,"TFCTRLForSequenceClassification"),E_t.forEach(t),xmr=r(t9e," (CTRL model)"),t9e.forEach(t),kmr=i(W),LF=n(W,"LI",{});var a9e=s(LF);H_e=n(a9e,"STRONG",{});var y_t=s(H_e);Rmr=r(y_t,"deberta"),y_t.forEach(t),Smr=r(a9e," \u2014 "),jO=n(a9e,"A",{href:!0});var w_t=s(jO);Pmr=r(w_t,"TFDebertaForSequenceClassification"),w_t.forEach(t),$mr=r(a9e," (DeBERTa model)"),a9e.forEach(t),Imr=i(W),BF=n(W,"LI",{});var n9e=s(BF);U_e=n(n9e,"STRONG",{});var A_t=s(U_e);Nmr=r(A_t,"deberta-v2"),A_t.forEach(t),jmr=r(n9e," \u2014 "),DO=n(n9e,"A",{href:!0});var L_t=s(DO);Dmr=r(L_t,"TFDebertaV2ForSequenceClassification"),L_t.forEach(t),qmr=r(n9e," (DeBERTa-v2 model)"),n9e.forEach(t),Gmr=i(W),xF=n(W,"LI",{});var s9e=s(xF);J_e=n(s9e,"STRONG",{});var B_t=s(J_e);Omr=r(B_t,"distilbert"),B_t.forEach(t),Xmr=r(s9e," \u2014 "),qO=n(s9e,"A",{href:!0});var x_t=s(qO);Vmr=r(x_t,"TFDistilBertForSequenceClassification"),x_t.forEach(t),zmr=r(s9e," (DistilBERT model)"),s9e.forEach(t),Wmr=i(W),kF=n(W,"LI",{});var l9e=s(kF);Y_e=n(l9e,"STRONG",{});var k_t=s(Y_e);Qmr=r(k_t,"electra"),k_t.forEach(t),Hmr=r(l9e," \u2014 "),GO=n(l9e,"A",{href:!0});var R_t=s(GO);Umr=r(R_t,"TFElectraForSequenceClassification"),R_t.forEach(t),Jmr=r(l9e," (ELECTRA model)"),l9e.forEach(t),Ymr=i(W),RF=n(W,"LI",{});var i9e=s(RF);K_e=n(i9e,"STRONG",{});var S_t=s(K_e);Kmr=r(S_t,"flaubert"),S_t.forEach(t),Zmr=r(i9e," \u2014 "),OO=n(i9e,"A",{href:!0});var P_t=s(OO);egr=r(P_t,"TFFlaubertForSequenceClassification"),P_t.forEach(t),ogr=r(i9e," (FlauBERT model)"),i9e.forEach(t),rgr=i(W),SF=n(W,"LI",{});var d9e=s(SF);Z_e=n(d9e,"STRONG",{});var $_t=s(Z_e);tgr=r($_t,"funnel"),$_t.forEach(t),agr=r(d9e," \u2014 "),XO=n(d9e,"A",{href:!0});var I_t=s(XO);ngr=r(I_t,"TFFunnelForSequenceClassification"),I_t.forEach(t),sgr=r(d9e," (Funnel Transformer model)"),d9e.forEach(t),lgr=i(W),PF=n(W,"LI",{});var c9e=s(PF);eue=n(c9e,"STRONG",{});var N_t=s(eue);igr=r(N_t,"gpt2"),N_t.forEach(t),dgr=r(c9e," \u2014 "),VO=n(c9e,"A",{href:!0});var j_t=s(VO);cgr=r(j_t,"TFGPT2ForSequenceClassification"),j_t.forEach(t),fgr=r(c9e," (OpenAI GPT-2 model)"),c9e.forEach(t),mgr=i(W),$F=n(W,"LI",{});var f9e=s($F);oue=n(f9e,"STRONG",{});var D_t=s(oue);ggr=r(D_t,"gptj"),D_t.forEach(t),hgr=r(f9e," \u2014 "),zO=n(f9e,"A",{href:!0});var q_t=s(zO);pgr=r(q_t,"TFGPTJForSequenceClassification"),q_t.forEach(t),_gr=r(f9e," (GPT-J model)"),f9e.forEach(t),ugr=i(W),IF=n(W,"LI",{});var m9e=s(IF);rue=n(m9e,"STRONG",{});var G_t=s(rue);bgr=r(G_t,"layoutlm"),G_t.forEach(t),vgr=r(m9e," \u2014 "),WO=n(m9e,"A",{href:!0});var O_t=s(WO);Tgr=r(O_t,"TFLayoutLMForSequenceClassification"),O_t.forEach(t),Fgr=r(m9e," (LayoutLM model)"),m9e.forEach(t),Cgr=i(W),NF=n(W,"LI",{});var g9e=s(NF);tue=n(g9e,"STRONG",{});var X_t=s(tue);Mgr=r(X_t,"longformer"),X_t.forEach(t),Egr=r(g9e," \u2014 "),QO=n(g9e,"A",{href:!0});var V_t=s(QO);ygr=r(V_t,"TFLongformerForSequenceClassification"),V_t.forEach(t),wgr=r(g9e," (Longformer model)"),g9e.forEach(t),Agr=i(W),jF=n(W,"LI",{});var h9e=s(jF);aue=n(h9e,"STRONG",{});var z_t=s(aue);Lgr=r(z_t,"mobilebert"),z_t.forEach(t),Bgr=r(h9e," \u2014 "),HO=n(h9e,"A",{href:!0});var W_t=s(HO);xgr=r(W_t,"TFMobileBertForSequenceClassification"),W_t.forEach(t),kgr=r(h9e," (MobileBERT model)"),h9e.forEach(t),Rgr=i(W),DF=n(W,"LI",{});var p9e=s(DF);nue=n(p9e,"STRONG",{});var Q_t=s(nue);Sgr=r(Q_t,"mpnet"),Q_t.forEach(t),Pgr=r(p9e," \u2014 "),UO=n(p9e,"A",{href:!0});var H_t=s(UO);$gr=r(H_t,"TFMPNetForSequenceClassification"),H_t.forEach(t),Igr=r(p9e," (MPNet model)"),p9e.forEach(t),Ngr=i(W),qF=n(W,"LI",{});var _9e=s(qF);sue=n(_9e,"STRONG",{});var U_t=s(sue);jgr=r(U_t,"openai-gpt"),U_t.forEach(t),Dgr=r(_9e," \u2014 "),JO=n(_9e,"A",{href:!0});var J_t=s(JO);qgr=r(J_t,"TFOpenAIGPTForSequenceClassification"),J_t.forEach(t),Ggr=r(_9e," (OpenAI GPT model)"),_9e.forEach(t),Ogr=i(W),GF=n(W,"LI",{});var u9e=s(GF);lue=n(u9e,"STRONG",{});var Y_t=s(lue);Xgr=r(Y_t,"rembert"),Y_t.forEach(t),Vgr=r(u9e," \u2014 "),YO=n(u9e,"A",{href:!0});var K_t=s(YO);zgr=r(K_t,"TFRemBertForSequenceClassification"),K_t.forEach(t),Wgr=r(u9e," (RemBERT model)"),u9e.forEach(t),Qgr=i(W),OF=n(W,"LI",{});var b9e=s(OF);iue=n(b9e,"STRONG",{});var Z_t=s(iue);Hgr=r(Z_t,"roberta"),Z_t.forEach(t),Ugr=r(b9e," \u2014 "),KO=n(b9e,"A",{href:!0});var eut=s(KO);Jgr=r(eut,"TFRobertaForSequenceClassification"),eut.forEach(t),Ygr=r(b9e," (RoBERTa model)"),b9e.forEach(t),Kgr=i(W),XF=n(W,"LI",{});var v9e=s(XF);due=n(v9e,"STRONG",{});var out=s(due);Zgr=r(out,"roformer"),out.forEach(t),ehr=r(v9e," \u2014 "),ZO=n(v9e,"A",{href:!0});var rut=s(ZO);ohr=r(rut,"TFRoFormerForSequenceClassification"),rut.forEach(t),rhr=r(v9e," (RoFormer model)"),v9e.forEach(t),thr=i(W),VF=n(W,"LI",{});var T9e=s(VF);cue=n(T9e,"STRONG",{});var tut=s(cue);ahr=r(tut,"tapas"),tut.forEach(t),nhr=r(T9e," \u2014 "),eX=n(T9e,"A",{href:!0});var aut=s(eX);shr=r(aut,"TFTapasForSequenceClassification"),aut.forEach(t),lhr=r(T9e," (TAPAS model)"),T9e.forEach(t),ihr=i(W),zF=n(W,"LI",{});var F9e=s(zF);fue=n(F9e,"STRONG",{});var nut=s(fue);dhr=r(nut,"transfo-xl"),nut.forEach(t),chr=r(F9e," \u2014 "),oX=n(F9e,"A",{href:!0});var sut=s(oX);fhr=r(sut,"TFTransfoXLForSequenceClassification"),sut.forEach(t),mhr=r(F9e," (Transformer-XL model)"),F9e.forEach(t),ghr=i(W),WF=n(W,"LI",{});var C9e=s(WF);mue=n(C9e,"STRONG",{});var lut=s(mue);hhr=r(lut,"xlm"),lut.forEach(t),phr=r(C9e," \u2014 "),rX=n(C9e,"A",{href:!0});var iut=s(rX);_hr=r(iut,"TFXLMForSequenceClassification"),iut.forEach(t),uhr=r(C9e," (XLM model)"),C9e.forEach(t),bhr=i(W),QF=n(W,"LI",{});var M9e=s(QF);gue=n(M9e,"STRONG",{});var dut=s(gue);vhr=r(dut,"xlm-roberta"),dut.forEach(t),Thr=r(M9e," \u2014 "),tX=n(M9e,"A",{href:!0});var cut=s(tX);Fhr=r(cut,"TFXLMRobertaForSequenceClassification"),cut.forEach(t),Chr=r(M9e," (XLM-RoBERTa model)"),M9e.forEach(t),Mhr=i(W),HF=n(W,"LI",{});var E9e=s(HF);hue=n(E9e,"STRONG",{});var fut=s(hue);Ehr=r(fut,"xlnet"),fut.forEach(t),yhr=r(E9e," \u2014 "),aX=n(E9e,"A",{href:!0});var mut=s(aX);whr=r(mut,"TFXLNetForSequenceClassification"),mut.forEach(t),Ahr=r(E9e," (XLNet model)"),E9e.forEach(t),W.forEach(t),Lhr=i(Fa),pue=n(Fa,"P",{});var gut=s(pue);Bhr=r(gut,"Examples:"),gut.forEach(t),xhr=i(Fa),m(G0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),XRe=i(c),Sc=n(c,"H2",{class:!0});var o$e=s(Sc);UF=n(o$e,"A",{id:!0,class:!0,href:!0});var hut=s(UF);_ue=n(hut,"SPAN",{});var put=s(_ue);m(O0.$$.fragment,put),put.forEach(t),hut.forEach(t),khr=i(o$e),uue=n(o$e,"SPAN",{});var _ut=s(uue);Rhr=r(_ut,"TFAutoModelForMultipleChoice"),_ut.forEach(t),o$e.forEach(t),VRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(X0.$$.fragment,Zl),Shr=i(Zl),Pc=n(Zl,"P",{});var hQ=s(Pc);Phr=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bue=n(hQ,"CODE",{});var uut=s(bue);$hr=r(uut,"from_pretrained()"),uut.forEach(t),Ihr=r(hQ,"class method or the "),vue=n(hQ,"CODE",{});var but=s(vue);Nhr=r(but,"from_config()"),but.forEach(t),jhr=r(hQ,`class
method.`),hQ.forEach(t),Dhr=i(Zl),V0=n(Zl,"P",{});var r$e=s(V0);qhr=r(r$e,"This class cannot be instantiated directly using "),Tue=n(r$e,"CODE",{});var vut=s(Tue);Ghr=r(vut,"__init__()"),vut.forEach(t),Ohr=r(r$e," (throws an error)."),r$e.forEach(t),Xhr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(z0.$$.fragment,ei),Vhr=i(ei),Fue=n(ei,"P",{});var Tut=s(Fue);zhr=r(Tut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tut.forEach(t),Whr=i(ei),$c=n(ei,"P",{});var pQ=s($c);Qhr=r(pQ,`Note:
Loading a model from its configuration file does `),Cue=n(pQ,"STRONG",{});var Fut=s(Cue);Hhr=r(Fut,"not"),Fut.forEach(t),Uhr=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mue=n(pQ,"CODE",{});var Cut=s(Mue);Jhr=r(Cut,"from_pretrained()"),Cut.forEach(t),Yhr=r(pQ,"to load the model weights."),pQ.forEach(t),Khr=i(ei),Eue=n(ei,"P",{});var Mut=s(Eue);Zhr=r(Mut,"Examples:"),Mut.forEach(t),epr=i(ei),m(W0.$$.fragment,ei),ei.forEach(t),opr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(Q0.$$.fragment,Ca),rpr=i(Ca),yue=n(Ca,"P",{});var Eut=s(yue);tpr=r(Eut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Eut.forEach(t),apr=i(Ca),Mn=n(Ca,"P",{});var QE=s(Mn);npr=r(QE,"The model class to instantiate is selected based on the "),wue=n(QE,"CODE",{});var yut=s(wue);spr=r(yut,"model_type"),yut.forEach(t),lpr=r(QE,` property of the config object (either
passed as an argument or loaded from `),Aue=n(QE,"CODE",{});var wut=s(Aue);ipr=r(wut,"pretrained_model_name_or_path"),wut.forEach(t),dpr=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(QE,"CODE",{});var Aut=s(Lue);cpr=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),fpr=r(QE,":"),QE.forEach(t),mpr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);JF=n(le,"LI",{});var y9e=s(JF);Bue=n(y9e,"STRONG",{});var Lut=s(Bue);gpr=r(Lut,"albert"),Lut.forEach(t),hpr=r(y9e," \u2014 "),nX=n(y9e,"A",{href:!0});var But=s(nX);ppr=r(But,"TFAlbertForMultipleChoice"),But.forEach(t),_pr=r(y9e," (ALBERT model)"),y9e.forEach(t),upr=i(le),YF=n(le,"LI",{});var w9e=s(YF);xue=n(w9e,"STRONG",{});var xut=s(xue);bpr=r(xut,"bert"),xut.forEach(t),vpr=r(w9e," \u2014 "),sX=n(w9e,"A",{href:!0});var kut=s(sX);Tpr=r(kut,"TFBertForMultipleChoice"),kut.forEach(t),Fpr=r(w9e," (BERT model)"),w9e.forEach(t),Cpr=i(le),KF=n(le,"LI",{});var A9e=s(KF);kue=n(A9e,"STRONG",{});var Rut=s(kue);Mpr=r(Rut,"camembert"),Rut.forEach(t),Epr=r(A9e," \u2014 "),lX=n(A9e,"A",{href:!0});var Sut=s(lX);ypr=r(Sut,"TFCamembertForMultipleChoice"),Sut.forEach(t),wpr=r(A9e," (CamemBERT model)"),A9e.forEach(t),Apr=i(le),ZF=n(le,"LI",{});var L9e=s(ZF);Rue=n(L9e,"STRONG",{});var Put=s(Rue);Lpr=r(Put,"convbert"),Put.forEach(t),Bpr=r(L9e," \u2014 "),iX=n(L9e,"A",{href:!0});var $ut=s(iX);xpr=r($ut,"TFConvBertForMultipleChoice"),$ut.forEach(t),kpr=r(L9e," (ConvBERT model)"),L9e.forEach(t),Rpr=i(le),eC=n(le,"LI",{});var B9e=s(eC);Sue=n(B9e,"STRONG",{});var Iut=s(Sue);Spr=r(Iut,"distilbert"),Iut.forEach(t),Ppr=r(B9e," \u2014 "),dX=n(B9e,"A",{href:!0});var Nut=s(dX);$pr=r(Nut,"TFDistilBertForMultipleChoice"),Nut.forEach(t),Ipr=r(B9e," (DistilBERT model)"),B9e.forEach(t),Npr=i(le),oC=n(le,"LI",{});var x9e=s(oC);Pue=n(x9e,"STRONG",{});var jut=s(Pue);jpr=r(jut,"electra"),jut.forEach(t),Dpr=r(x9e," \u2014 "),cX=n(x9e,"A",{href:!0});var Dut=s(cX);qpr=r(Dut,"TFElectraForMultipleChoice"),Dut.forEach(t),Gpr=r(x9e," (ELECTRA model)"),x9e.forEach(t),Opr=i(le),rC=n(le,"LI",{});var k9e=s(rC);$ue=n(k9e,"STRONG",{});var qut=s($ue);Xpr=r(qut,"flaubert"),qut.forEach(t),Vpr=r(k9e," \u2014 "),fX=n(k9e,"A",{href:!0});var Gut=s(fX);zpr=r(Gut,"TFFlaubertForMultipleChoice"),Gut.forEach(t),Wpr=r(k9e," (FlauBERT model)"),k9e.forEach(t),Qpr=i(le),tC=n(le,"LI",{});var R9e=s(tC);Iue=n(R9e,"STRONG",{});var Out=s(Iue);Hpr=r(Out,"funnel"),Out.forEach(t),Upr=r(R9e," \u2014 "),mX=n(R9e,"A",{href:!0});var Xut=s(mX);Jpr=r(Xut,"TFFunnelForMultipleChoice"),Xut.forEach(t),Ypr=r(R9e," (Funnel Transformer model)"),R9e.forEach(t),Kpr=i(le),aC=n(le,"LI",{});var S9e=s(aC);Nue=n(S9e,"STRONG",{});var Vut=s(Nue);Zpr=r(Vut,"longformer"),Vut.forEach(t),e_r=r(S9e," \u2014 "),gX=n(S9e,"A",{href:!0});var zut=s(gX);o_r=r(zut,"TFLongformerForMultipleChoice"),zut.forEach(t),r_r=r(S9e," (Longformer model)"),S9e.forEach(t),t_r=i(le),nC=n(le,"LI",{});var P9e=s(nC);jue=n(P9e,"STRONG",{});var Wut=s(jue);a_r=r(Wut,"mobilebert"),Wut.forEach(t),n_r=r(P9e," \u2014 "),hX=n(P9e,"A",{href:!0});var Qut=s(hX);s_r=r(Qut,"TFMobileBertForMultipleChoice"),Qut.forEach(t),l_r=r(P9e," (MobileBERT model)"),P9e.forEach(t),i_r=i(le),sC=n(le,"LI",{});var $9e=s(sC);Due=n($9e,"STRONG",{});var Hut=s(Due);d_r=r(Hut,"mpnet"),Hut.forEach(t),c_r=r($9e," \u2014 "),pX=n($9e,"A",{href:!0});var Uut=s(pX);f_r=r(Uut,"TFMPNetForMultipleChoice"),Uut.forEach(t),m_r=r($9e," (MPNet model)"),$9e.forEach(t),g_r=i(le),lC=n(le,"LI",{});var I9e=s(lC);que=n(I9e,"STRONG",{});var Jut=s(que);h_r=r(Jut,"rembert"),Jut.forEach(t),p_r=r(I9e," \u2014 "),_X=n(I9e,"A",{href:!0});var Yut=s(_X);__r=r(Yut,"TFRemBertForMultipleChoice"),Yut.forEach(t),u_r=r(I9e," (RemBERT model)"),I9e.forEach(t),b_r=i(le),iC=n(le,"LI",{});var N9e=s(iC);Gue=n(N9e,"STRONG",{});var Kut=s(Gue);v_r=r(Kut,"roberta"),Kut.forEach(t),T_r=r(N9e," \u2014 "),uX=n(N9e,"A",{href:!0});var Zut=s(uX);F_r=r(Zut,"TFRobertaForMultipleChoice"),Zut.forEach(t),C_r=r(N9e," (RoBERTa model)"),N9e.forEach(t),M_r=i(le),dC=n(le,"LI",{});var j9e=s(dC);Oue=n(j9e,"STRONG",{});var e5t=s(Oue);E_r=r(e5t,"roformer"),e5t.forEach(t),y_r=r(j9e," \u2014 "),bX=n(j9e,"A",{href:!0});var o5t=s(bX);w_r=r(o5t,"TFRoFormerForMultipleChoice"),o5t.forEach(t),A_r=r(j9e," (RoFormer model)"),j9e.forEach(t),L_r=i(le),cC=n(le,"LI",{});var D9e=s(cC);Xue=n(D9e,"STRONG",{});var r5t=s(Xue);B_r=r(r5t,"xlm"),r5t.forEach(t),x_r=r(D9e," \u2014 "),vX=n(D9e,"A",{href:!0});var t5t=s(vX);k_r=r(t5t,"TFXLMForMultipleChoice"),t5t.forEach(t),R_r=r(D9e," (XLM model)"),D9e.forEach(t),S_r=i(le),fC=n(le,"LI",{});var q9e=s(fC);Vue=n(q9e,"STRONG",{});var a5t=s(Vue);P_r=r(a5t,"xlm-roberta"),a5t.forEach(t),$_r=r(q9e," \u2014 "),TX=n(q9e,"A",{href:!0});var n5t=s(TX);I_r=r(n5t,"TFXLMRobertaForMultipleChoice"),n5t.forEach(t),N_r=r(q9e," (XLM-RoBERTa model)"),q9e.forEach(t),j_r=i(le),mC=n(le,"LI",{});var G9e=s(mC);zue=n(G9e,"STRONG",{});var s5t=s(zue);D_r=r(s5t,"xlnet"),s5t.forEach(t),q_r=r(G9e," \u2014 "),FX=n(G9e,"A",{href:!0});var l5t=s(FX);G_r=r(l5t,"TFXLNetForMultipleChoice"),l5t.forEach(t),O_r=r(G9e," (XLNet model)"),G9e.forEach(t),le.forEach(t),X_r=i(Ca),Wue=n(Ca,"P",{});var i5t=s(Wue);V_r=r(i5t,"Examples:"),i5t.forEach(t),z_r=i(Ca),m(H0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),zRe=i(c),Ic=n(c,"H2",{class:!0});var t$e=s(Ic);gC=n(t$e,"A",{id:!0,class:!0,href:!0});var d5t=s(gC);Que=n(d5t,"SPAN",{});var c5t=s(Que);m(U0.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),W_r=i(t$e),Hue=n(t$e,"SPAN",{});var f5t=s(Hue);Q_r=r(f5t,"TFAutoModelForTableQuestionAnswering"),f5t.forEach(t),t$e.forEach(t),WRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(J0.$$.fragment,oi),H_r=i(oi),Nc=n(oi,"P",{});var _Q=s(Nc);U_r=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Uue=n(_Q,"CODE",{});var m5t=s(Uue);J_r=r(m5t,"from_pretrained()"),m5t.forEach(t),Y_r=r(_Q,"class method or the "),Jue=n(_Q,"CODE",{});var g5t=s(Jue);K_r=r(g5t,"from_config()"),g5t.forEach(t),Z_r=r(_Q,`class
method.`),_Q.forEach(t),eur=i(oi),Y0=n(oi,"P",{});var a$e=s(Y0);our=r(a$e,"This class cannot be instantiated directly using "),Yue=n(a$e,"CODE",{});var h5t=s(Yue);rur=r(h5t,"__init__()"),h5t.forEach(t),tur=r(a$e," (throws an error)."),a$e.forEach(t),aur=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(K0.$$.fragment,ri),nur=i(ri),Kue=n(ri,"P",{});var p5t=s(Kue);sur=r(p5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),p5t.forEach(t),lur=i(ri),jc=n(ri,"P",{});var uQ=s(jc);iur=r(uQ,`Note:
Loading a model from its configuration file does `),Zue=n(uQ,"STRONG",{});var _5t=s(Zue);dur=r(_5t,"not"),_5t.forEach(t),cur=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e5e=n(uQ,"CODE",{});var u5t=s(e5e);fur=r(u5t,"from_pretrained()"),u5t.forEach(t),mur=r(uQ,"to load the model weights."),uQ.forEach(t),gur=i(ri),o5e=n(ri,"P",{});var b5t=s(o5e);hur=r(b5t,"Examples:"),b5t.forEach(t),pur=i(ri),m(Z0.$$.fragment,ri),ri.forEach(t),_ur=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(eL.$$.fragment,Ma),uur=i(Ma),r5e=n(Ma,"P",{});var v5t=s(r5e);bur=r(v5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v5t.forEach(t),vur=i(Ma),En=n(Ma,"P",{});var HE=s(En);Tur=r(HE,"The model class to instantiate is selected based on the "),t5e=n(HE,"CODE",{});var T5t=s(t5e);Fur=r(T5t,"model_type"),T5t.forEach(t),Cur=r(HE,` property of the config object (either
passed as an argument or loaded from `),a5e=n(HE,"CODE",{});var F5t=s(a5e);Mur=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),Eur=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(HE,"CODE",{});var C5t=s(n5e);yur=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),wur=r(HE,":"),HE.forEach(t),Aur=i(Ma),s5e=n(Ma,"UL",{});var M5t=s(s5e);hC=n(M5t,"LI",{});var O9e=s(hC);l5e=n(O9e,"STRONG",{});var E5t=s(l5e);Lur=r(E5t,"tapas"),E5t.forEach(t),Bur=r(O9e," \u2014 "),CX=n(O9e,"A",{href:!0});var y5t=s(CX);xur=r(y5t,"TFTapasForQuestionAnswering"),y5t.forEach(t),kur=r(O9e," (TAPAS model)"),O9e.forEach(t),M5t.forEach(t),Rur=i(Ma),i5e=n(Ma,"P",{});var w5t=s(i5e);Sur=r(w5t,"Examples:"),w5t.forEach(t),Pur=i(Ma),m(oL.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),QRe=i(c),Dc=n(c,"H2",{class:!0});var n$e=s(Dc);pC=n(n$e,"A",{id:!0,class:!0,href:!0});var A5t=s(pC);d5e=n(A5t,"SPAN",{});var L5t=s(d5e);m(rL.$$.fragment,L5t),L5t.forEach(t),A5t.forEach(t),$ur=i(n$e),c5e=n(n$e,"SPAN",{});var B5t=s(c5e);Iur=r(B5t,"TFAutoModelForTokenClassification"),B5t.forEach(t),n$e.forEach(t),HRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(tL.$$.fragment,ti),Nur=i(ti),qc=n(ti,"P",{});var bQ=s(qc);jur=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),f5e=n(bQ,"CODE",{});var x5t=s(f5e);Dur=r(x5t,"from_pretrained()"),x5t.forEach(t),qur=r(bQ,"class method or the "),m5e=n(bQ,"CODE",{});var k5t=s(m5e);Gur=r(k5t,"from_config()"),k5t.forEach(t),Our=r(bQ,`class
method.`),bQ.forEach(t),Xur=i(ti),aL=n(ti,"P",{});var s$e=s(aL);Vur=r(s$e,"This class cannot be instantiated directly using "),g5e=n(s$e,"CODE",{});var R5t=s(g5e);zur=r(R5t,"__init__()"),R5t.forEach(t),Wur=r(s$e," (throws an error)."),s$e.forEach(t),Qur=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(nL.$$.fragment,ai),Hur=i(ai),h5e=n(ai,"P",{});var S5t=s(h5e);Uur=r(S5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S5t.forEach(t),Jur=i(ai),Gc=n(ai,"P",{});var vQ=s(Gc);Yur=r(vQ,`Note:
Loading a model from its configuration file does `),p5e=n(vQ,"STRONG",{});var P5t=s(p5e);Kur=r(P5t,"not"),P5t.forEach(t),Zur=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_5e=n(vQ,"CODE",{});var $5t=s(_5e);e5r=r($5t,"from_pretrained()"),$5t.forEach(t),o5r=r(vQ,"to load the model weights."),vQ.forEach(t),r5r=i(ai),u5e=n(ai,"P",{});var I5t=s(u5e);t5r=r(I5t,"Examples:"),I5t.forEach(t),a5r=i(ai),m(sL.$$.fragment,ai),ai.forEach(t),n5r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(lL.$$.fragment,Ea),s5r=i(Ea),b5e=n(Ea,"P",{});var N5t=s(b5e);l5r=r(N5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N5t.forEach(t),i5r=i(Ea),yn=n(Ea,"P",{});var UE=s(yn);d5r=r(UE,"The model class to instantiate is selected based on the "),v5e=n(UE,"CODE",{});var j5t=s(v5e);c5r=r(j5t,"model_type"),j5t.forEach(t),f5r=r(UE,` property of the config object (either
passed as an argument or loaded from `),T5e=n(UE,"CODE",{});var D5t=s(T5e);m5r=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),g5r=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(UE,"CODE",{});var q5t=s(F5e);h5r=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),p5r=r(UE,":"),UE.forEach(t),_5r=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);_C=n(oe,"LI",{});var X9e=s(_C);C5e=n(X9e,"STRONG",{});var G5t=s(C5e);u5r=r(G5t,"albert"),G5t.forEach(t),b5r=r(X9e," \u2014 "),MX=n(X9e,"A",{href:!0});var O5t=s(MX);v5r=r(O5t,"TFAlbertForTokenClassification"),O5t.forEach(t),T5r=r(X9e," (ALBERT model)"),X9e.forEach(t),F5r=i(oe),uC=n(oe,"LI",{});var V9e=s(uC);M5e=n(V9e,"STRONG",{});var X5t=s(M5e);C5r=r(X5t,"bert"),X5t.forEach(t),M5r=r(V9e," \u2014 "),EX=n(V9e,"A",{href:!0});var V5t=s(EX);E5r=r(V5t,"TFBertForTokenClassification"),V5t.forEach(t),y5r=r(V9e," (BERT model)"),V9e.forEach(t),w5r=i(oe),bC=n(oe,"LI",{});var z9e=s(bC);E5e=n(z9e,"STRONG",{});var z5t=s(E5e);A5r=r(z5t,"camembert"),z5t.forEach(t),L5r=r(z9e," \u2014 "),yX=n(z9e,"A",{href:!0});var W5t=s(yX);B5r=r(W5t,"TFCamembertForTokenClassification"),W5t.forEach(t),x5r=r(z9e," (CamemBERT model)"),z9e.forEach(t),k5r=i(oe),vC=n(oe,"LI",{});var W9e=s(vC);y5e=n(W9e,"STRONG",{});var Q5t=s(y5e);R5r=r(Q5t,"convbert"),Q5t.forEach(t),S5r=r(W9e," \u2014 "),wX=n(W9e,"A",{href:!0});var H5t=s(wX);P5r=r(H5t,"TFConvBertForTokenClassification"),H5t.forEach(t),$5r=r(W9e," (ConvBERT model)"),W9e.forEach(t),I5r=i(oe),TC=n(oe,"LI",{});var Q9e=s(TC);w5e=n(Q9e,"STRONG",{});var U5t=s(w5e);N5r=r(U5t,"deberta"),U5t.forEach(t),j5r=r(Q9e," \u2014 "),AX=n(Q9e,"A",{href:!0});var J5t=s(AX);D5r=r(J5t,"TFDebertaForTokenClassification"),J5t.forEach(t),q5r=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),G5r=i(oe),FC=n(oe,"LI",{});var H9e=s(FC);A5e=n(H9e,"STRONG",{});var Y5t=s(A5e);O5r=r(Y5t,"deberta-v2"),Y5t.forEach(t),X5r=r(H9e," \u2014 "),LX=n(H9e,"A",{href:!0});var K5t=s(LX);V5r=r(K5t,"TFDebertaV2ForTokenClassification"),K5t.forEach(t),z5r=r(H9e," (DeBERTa-v2 model)"),H9e.forEach(t),W5r=i(oe),CC=n(oe,"LI",{});var U9e=s(CC);L5e=n(U9e,"STRONG",{});var Z5t=s(L5e);Q5r=r(Z5t,"distilbert"),Z5t.forEach(t),H5r=r(U9e," \u2014 "),BX=n(U9e,"A",{href:!0});var e2t=s(BX);U5r=r(e2t,"TFDistilBertForTokenClassification"),e2t.forEach(t),J5r=r(U9e," (DistilBERT model)"),U9e.forEach(t),Y5r=i(oe),MC=n(oe,"LI",{});var J9e=s(MC);B5e=n(J9e,"STRONG",{});var o2t=s(B5e);K5r=r(o2t,"electra"),o2t.forEach(t),Z5r=r(J9e," \u2014 "),xX=n(J9e,"A",{href:!0});var r2t=s(xX);e2r=r(r2t,"TFElectraForTokenClassification"),r2t.forEach(t),o2r=r(J9e," (ELECTRA model)"),J9e.forEach(t),r2r=i(oe),EC=n(oe,"LI",{});var Y9e=s(EC);x5e=n(Y9e,"STRONG",{});var t2t=s(x5e);t2r=r(t2t,"flaubert"),t2t.forEach(t),a2r=r(Y9e," \u2014 "),kX=n(Y9e,"A",{href:!0});var a2t=s(kX);n2r=r(a2t,"TFFlaubertForTokenClassification"),a2t.forEach(t),s2r=r(Y9e," (FlauBERT model)"),Y9e.forEach(t),l2r=i(oe),yC=n(oe,"LI",{});var K9e=s(yC);k5e=n(K9e,"STRONG",{});var n2t=s(k5e);i2r=r(n2t,"funnel"),n2t.forEach(t),d2r=r(K9e," \u2014 "),RX=n(K9e,"A",{href:!0});var s2t=s(RX);c2r=r(s2t,"TFFunnelForTokenClassification"),s2t.forEach(t),f2r=r(K9e," (Funnel Transformer model)"),K9e.forEach(t),m2r=i(oe),wC=n(oe,"LI",{});var Z9e=s(wC);R5e=n(Z9e,"STRONG",{});var l2t=s(R5e);g2r=r(l2t,"layoutlm"),l2t.forEach(t),h2r=r(Z9e," \u2014 "),SX=n(Z9e,"A",{href:!0});var i2t=s(SX);p2r=r(i2t,"TFLayoutLMForTokenClassification"),i2t.forEach(t),_2r=r(Z9e," (LayoutLM model)"),Z9e.forEach(t),u2r=i(oe),AC=n(oe,"LI",{});var eBe=s(AC);S5e=n(eBe,"STRONG",{});var d2t=s(S5e);b2r=r(d2t,"longformer"),d2t.forEach(t),v2r=r(eBe," \u2014 "),PX=n(eBe,"A",{href:!0});var c2t=s(PX);T2r=r(c2t,"TFLongformerForTokenClassification"),c2t.forEach(t),F2r=r(eBe," (Longformer model)"),eBe.forEach(t),C2r=i(oe),LC=n(oe,"LI",{});var oBe=s(LC);P5e=n(oBe,"STRONG",{});var f2t=s(P5e);M2r=r(f2t,"mobilebert"),f2t.forEach(t),E2r=r(oBe," \u2014 "),$X=n(oBe,"A",{href:!0});var m2t=s($X);y2r=r(m2t,"TFMobileBertForTokenClassification"),m2t.forEach(t),w2r=r(oBe," (MobileBERT model)"),oBe.forEach(t),A2r=i(oe),BC=n(oe,"LI",{});var rBe=s(BC);$5e=n(rBe,"STRONG",{});var g2t=s($5e);L2r=r(g2t,"mpnet"),g2t.forEach(t),B2r=r(rBe," \u2014 "),IX=n(rBe,"A",{href:!0});var h2t=s(IX);x2r=r(h2t,"TFMPNetForTokenClassification"),h2t.forEach(t),k2r=r(rBe," (MPNet model)"),rBe.forEach(t),R2r=i(oe),xC=n(oe,"LI",{});var tBe=s(xC);I5e=n(tBe,"STRONG",{});var p2t=s(I5e);S2r=r(p2t,"rembert"),p2t.forEach(t),P2r=r(tBe," \u2014 "),NX=n(tBe,"A",{href:!0});var _2t=s(NX);$2r=r(_2t,"TFRemBertForTokenClassification"),_2t.forEach(t),I2r=r(tBe," (RemBERT model)"),tBe.forEach(t),N2r=i(oe),kC=n(oe,"LI",{});var aBe=s(kC);N5e=n(aBe,"STRONG",{});var u2t=s(N5e);j2r=r(u2t,"roberta"),u2t.forEach(t),D2r=r(aBe," \u2014 "),jX=n(aBe,"A",{href:!0});var b2t=s(jX);q2r=r(b2t,"TFRobertaForTokenClassification"),b2t.forEach(t),G2r=r(aBe," (RoBERTa model)"),aBe.forEach(t),O2r=i(oe),RC=n(oe,"LI",{});var nBe=s(RC);j5e=n(nBe,"STRONG",{});var v2t=s(j5e);X2r=r(v2t,"roformer"),v2t.forEach(t),V2r=r(nBe," \u2014 "),DX=n(nBe,"A",{href:!0});var T2t=s(DX);z2r=r(T2t,"TFRoFormerForTokenClassification"),T2t.forEach(t),W2r=r(nBe," (RoFormer model)"),nBe.forEach(t),Q2r=i(oe),SC=n(oe,"LI",{});var sBe=s(SC);D5e=n(sBe,"STRONG",{});var F2t=s(D5e);H2r=r(F2t,"xlm"),F2t.forEach(t),U2r=r(sBe," \u2014 "),qX=n(sBe,"A",{href:!0});var C2t=s(qX);J2r=r(C2t,"TFXLMForTokenClassification"),C2t.forEach(t),Y2r=r(sBe," (XLM model)"),sBe.forEach(t),K2r=i(oe),PC=n(oe,"LI",{});var lBe=s(PC);q5e=n(lBe,"STRONG",{});var M2t=s(q5e);Z2r=r(M2t,"xlm-roberta"),M2t.forEach(t),e1r=r(lBe," \u2014 "),GX=n(lBe,"A",{href:!0});var E2t=s(GX);o1r=r(E2t,"TFXLMRobertaForTokenClassification"),E2t.forEach(t),r1r=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),t1r=i(oe),$C=n(oe,"LI",{});var iBe=s($C);G5e=n(iBe,"STRONG",{});var y2t=s(G5e);a1r=r(y2t,"xlnet"),y2t.forEach(t),n1r=r(iBe," \u2014 "),OX=n(iBe,"A",{href:!0});var w2t=s(OX);s1r=r(w2t,"TFXLNetForTokenClassification"),w2t.forEach(t),l1r=r(iBe," (XLNet model)"),iBe.forEach(t),oe.forEach(t),i1r=i(Ea),O5e=n(Ea,"P",{});var A2t=s(O5e);d1r=r(A2t,"Examples:"),A2t.forEach(t),c1r=i(Ea),m(iL.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),URe=i(c),Oc=n(c,"H2",{class:!0});var l$e=s(Oc);IC=n(l$e,"A",{id:!0,class:!0,href:!0});var L2t=s(IC);X5e=n(L2t,"SPAN",{});var B2t=s(X5e);m(dL.$$.fragment,B2t),B2t.forEach(t),L2t.forEach(t),f1r=i(l$e),V5e=n(l$e,"SPAN",{});var x2t=s(V5e);m1r=r(x2t,"TFAutoModelForQuestionAnswering"),x2t.forEach(t),l$e.forEach(t),JRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(cL.$$.fragment,ni),g1r=i(ni),Xc=n(ni,"P",{});var TQ=s(Xc);h1r=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),z5e=n(TQ,"CODE",{});var k2t=s(z5e);p1r=r(k2t,"from_pretrained()"),k2t.forEach(t),_1r=r(TQ,"class method or the "),W5e=n(TQ,"CODE",{});var R2t=s(W5e);u1r=r(R2t,"from_config()"),R2t.forEach(t),b1r=r(TQ,`class
method.`),TQ.forEach(t),v1r=i(ni),fL=n(ni,"P",{});var i$e=s(fL);T1r=r(i$e,"This class cannot be instantiated directly using "),Q5e=n(i$e,"CODE",{});var S2t=s(Q5e);F1r=r(S2t,"__init__()"),S2t.forEach(t),C1r=r(i$e," (throws an error)."),i$e.forEach(t),M1r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(mL.$$.fragment,si),E1r=i(si),H5e=n(si,"P",{});var P2t=s(H5e);y1r=r(P2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P2t.forEach(t),w1r=i(si),Vc=n(si,"P",{});var FQ=s(Vc);A1r=r(FQ,`Note:
Loading a model from its configuration file does `),U5e=n(FQ,"STRONG",{});var $2t=s(U5e);L1r=r($2t,"not"),$2t.forEach(t),B1r=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),J5e=n(FQ,"CODE",{});var I2t=s(J5e);x1r=r(I2t,"from_pretrained()"),I2t.forEach(t),k1r=r(FQ,"to load the model weights."),FQ.forEach(t),R1r=i(si),Y5e=n(si,"P",{});var N2t=s(Y5e);S1r=r(N2t,"Examples:"),N2t.forEach(t),P1r=i(si),m(gL.$$.fragment,si),si.forEach(t),$1r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(hL.$$.fragment,ya),I1r=i(ya),K5e=n(ya,"P",{});var j2t=s(K5e);N1r=r(j2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j2t.forEach(t),j1r=i(ya),wn=n(ya,"P",{});var JE=s(wn);D1r=r(JE,"The model class to instantiate is selected based on the "),Z5e=n(JE,"CODE",{});var D2t=s(Z5e);q1r=r(D2t,"model_type"),D2t.forEach(t),G1r=r(JE,` property of the config object (either
passed as an argument or loaded from `),e2e=n(JE,"CODE",{});var q2t=s(e2e);O1r=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),X1r=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(JE,"CODE",{});var G2t=s(o2e);V1r=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),z1r=r(JE,":"),JE.forEach(t),W1r=i(ya),K=n(ya,"UL",{});var re=s(K);NC=n(re,"LI",{});var dBe=s(NC);r2e=n(dBe,"STRONG",{});var O2t=s(r2e);Q1r=r(O2t,"albert"),O2t.forEach(t),H1r=r(dBe," \u2014 "),XX=n(dBe,"A",{href:!0});var X2t=s(XX);U1r=r(X2t,"TFAlbertForQuestionAnswering"),X2t.forEach(t),J1r=r(dBe," (ALBERT model)"),dBe.forEach(t),Y1r=i(re),jC=n(re,"LI",{});var cBe=s(jC);t2e=n(cBe,"STRONG",{});var V2t=s(t2e);K1r=r(V2t,"bert"),V2t.forEach(t),Z1r=r(cBe," \u2014 "),VX=n(cBe,"A",{href:!0});var z2t=s(VX);ebr=r(z2t,"TFBertForQuestionAnswering"),z2t.forEach(t),obr=r(cBe," (BERT model)"),cBe.forEach(t),rbr=i(re),DC=n(re,"LI",{});var fBe=s(DC);a2e=n(fBe,"STRONG",{});var W2t=s(a2e);tbr=r(W2t,"camembert"),W2t.forEach(t),abr=r(fBe," \u2014 "),zX=n(fBe,"A",{href:!0});var Q2t=s(zX);nbr=r(Q2t,"TFCamembertForQuestionAnswering"),Q2t.forEach(t),sbr=r(fBe," (CamemBERT model)"),fBe.forEach(t),lbr=i(re),qC=n(re,"LI",{});var mBe=s(qC);n2e=n(mBe,"STRONG",{});var H2t=s(n2e);ibr=r(H2t,"convbert"),H2t.forEach(t),dbr=r(mBe," \u2014 "),WX=n(mBe,"A",{href:!0});var U2t=s(WX);cbr=r(U2t,"TFConvBertForQuestionAnswering"),U2t.forEach(t),fbr=r(mBe," (ConvBERT model)"),mBe.forEach(t),mbr=i(re),GC=n(re,"LI",{});var gBe=s(GC);s2e=n(gBe,"STRONG",{});var J2t=s(s2e);gbr=r(J2t,"deberta"),J2t.forEach(t),hbr=r(gBe," \u2014 "),QX=n(gBe,"A",{href:!0});var Y2t=s(QX);pbr=r(Y2t,"TFDebertaForQuestionAnswering"),Y2t.forEach(t),_br=r(gBe," (DeBERTa model)"),gBe.forEach(t),ubr=i(re),OC=n(re,"LI",{});var hBe=s(OC);l2e=n(hBe,"STRONG",{});var K2t=s(l2e);bbr=r(K2t,"deberta-v2"),K2t.forEach(t),vbr=r(hBe," \u2014 "),HX=n(hBe,"A",{href:!0});var Z2t=s(HX);Tbr=r(Z2t,"TFDebertaV2ForQuestionAnswering"),Z2t.forEach(t),Fbr=r(hBe," (DeBERTa-v2 model)"),hBe.forEach(t),Cbr=i(re),XC=n(re,"LI",{});var pBe=s(XC);i2e=n(pBe,"STRONG",{});var e1t=s(i2e);Mbr=r(e1t,"distilbert"),e1t.forEach(t),Ebr=r(pBe," \u2014 "),UX=n(pBe,"A",{href:!0});var o1t=s(UX);ybr=r(o1t,"TFDistilBertForQuestionAnswering"),o1t.forEach(t),wbr=r(pBe," (DistilBERT model)"),pBe.forEach(t),Abr=i(re),VC=n(re,"LI",{});var _Be=s(VC);d2e=n(_Be,"STRONG",{});var r1t=s(d2e);Lbr=r(r1t,"electra"),r1t.forEach(t),Bbr=r(_Be," \u2014 "),JX=n(_Be,"A",{href:!0});var t1t=s(JX);xbr=r(t1t,"TFElectraForQuestionAnswering"),t1t.forEach(t),kbr=r(_Be," (ELECTRA model)"),_Be.forEach(t),Rbr=i(re),zC=n(re,"LI",{});var uBe=s(zC);c2e=n(uBe,"STRONG",{});var a1t=s(c2e);Sbr=r(a1t,"flaubert"),a1t.forEach(t),Pbr=r(uBe," \u2014 "),YX=n(uBe,"A",{href:!0});var n1t=s(YX);$br=r(n1t,"TFFlaubertForQuestionAnsweringSimple"),n1t.forEach(t),Ibr=r(uBe," (FlauBERT model)"),uBe.forEach(t),Nbr=i(re),WC=n(re,"LI",{});var bBe=s(WC);f2e=n(bBe,"STRONG",{});var s1t=s(f2e);jbr=r(s1t,"funnel"),s1t.forEach(t),Dbr=r(bBe," \u2014 "),KX=n(bBe,"A",{href:!0});var l1t=s(KX);qbr=r(l1t,"TFFunnelForQuestionAnswering"),l1t.forEach(t),Gbr=r(bBe," (Funnel Transformer model)"),bBe.forEach(t),Obr=i(re),QC=n(re,"LI",{});var vBe=s(QC);m2e=n(vBe,"STRONG",{});var i1t=s(m2e);Xbr=r(i1t,"gptj"),i1t.forEach(t),Vbr=r(vBe," \u2014 "),ZX=n(vBe,"A",{href:!0});var d1t=s(ZX);zbr=r(d1t,"TFGPTJForQuestionAnswering"),d1t.forEach(t),Wbr=r(vBe," (GPT-J model)"),vBe.forEach(t),Qbr=i(re),HC=n(re,"LI",{});var TBe=s(HC);g2e=n(TBe,"STRONG",{});var c1t=s(g2e);Hbr=r(c1t,"longformer"),c1t.forEach(t),Ubr=r(TBe," \u2014 "),eV=n(TBe,"A",{href:!0});var f1t=s(eV);Jbr=r(f1t,"TFLongformerForQuestionAnswering"),f1t.forEach(t),Ybr=r(TBe," (Longformer model)"),TBe.forEach(t),Kbr=i(re),UC=n(re,"LI",{});var FBe=s(UC);h2e=n(FBe,"STRONG",{});var m1t=s(h2e);Zbr=r(m1t,"mobilebert"),m1t.forEach(t),evr=r(FBe," \u2014 "),oV=n(FBe,"A",{href:!0});var g1t=s(oV);ovr=r(g1t,"TFMobileBertForQuestionAnswering"),g1t.forEach(t),rvr=r(FBe," (MobileBERT model)"),FBe.forEach(t),tvr=i(re),JC=n(re,"LI",{});var CBe=s(JC);p2e=n(CBe,"STRONG",{});var h1t=s(p2e);avr=r(h1t,"mpnet"),h1t.forEach(t),nvr=r(CBe," \u2014 "),rV=n(CBe,"A",{href:!0});var p1t=s(rV);svr=r(p1t,"TFMPNetForQuestionAnswering"),p1t.forEach(t),lvr=r(CBe," (MPNet model)"),CBe.forEach(t),ivr=i(re),YC=n(re,"LI",{});var MBe=s(YC);_2e=n(MBe,"STRONG",{});var _1t=s(_2e);dvr=r(_1t,"rembert"),_1t.forEach(t),cvr=r(MBe," \u2014 "),tV=n(MBe,"A",{href:!0});var u1t=s(tV);fvr=r(u1t,"TFRemBertForQuestionAnswering"),u1t.forEach(t),mvr=r(MBe," (RemBERT model)"),MBe.forEach(t),gvr=i(re),KC=n(re,"LI",{});var EBe=s(KC);u2e=n(EBe,"STRONG",{});var b1t=s(u2e);hvr=r(b1t,"roberta"),b1t.forEach(t),pvr=r(EBe," \u2014 "),aV=n(EBe,"A",{href:!0});var v1t=s(aV);_vr=r(v1t,"TFRobertaForQuestionAnswering"),v1t.forEach(t),uvr=r(EBe," (RoBERTa model)"),EBe.forEach(t),bvr=i(re),ZC=n(re,"LI",{});var yBe=s(ZC);b2e=n(yBe,"STRONG",{});var T1t=s(b2e);vvr=r(T1t,"roformer"),T1t.forEach(t),Tvr=r(yBe," \u2014 "),nV=n(yBe,"A",{href:!0});var F1t=s(nV);Fvr=r(F1t,"TFRoFormerForQuestionAnswering"),F1t.forEach(t),Cvr=r(yBe," (RoFormer model)"),yBe.forEach(t),Mvr=i(re),eM=n(re,"LI",{});var wBe=s(eM);v2e=n(wBe,"STRONG",{});var C1t=s(v2e);Evr=r(C1t,"xlm"),C1t.forEach(t),yvr=r(wBe," \u2014 "),sV=n(wBe,"A",{href:!0});var M1t=s(sV);wvr=r(M1t,"TFXLMForQuestionAnsweringSimple"),M1t.forEach(t),Avr=r(wBe," (XLM model)"),wBe.forEach(t),Lvr=i(re),oM=n(re,"LI",{});var ABe=s(oM);T2e=n(ABe,"STRONG",{});var E1t=s(T2e);Bvr=r(E1t,"xlm-roberta"),E1t.forEach(t),xvr=r(ABe," \u2014 "),lV=n(ABe,"A",{href:!0});var y1t=s(lV);kvr=r(y1t,"TFXLMRobertaForQuestionAnswering"),y1t.forEach(t),Rvr=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),Svr=i(re),rM=n(re,"LI",{});var LBe=s(rM);F2e=n(LBe,"STRONG",{});var w1t=s(F2e);Pvr=r(w1t,"xlnet"),w1t.forEach(t),$vr=r(LBe," \u2014 "),iV=n(LBe,"A",{href:!0});var A1t=s(iV);Ivr=r(A1t,"TFXLNetForQuestionAnsweringSimple"),A1t.forEach(t),Nvr=r(LBe," (XLNet model)"),LBe.forEach(t),re.forEach(t),jvr=i(ya),C2e=n(ya,"P",{});var L1t=s(C2e);Dvr=r(L1t,"Examples:"),L1t.forEach(t),qvr=i(ya),m(pL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),YRe=i(c),zc=n(c,"H2",{class:!0});var d$e=s(zc);tM=n(d$e,"A",{id:!0,class:!0,href:!0});var B1t=s(tM);M2e=n(B1t,"SPAN",{});var x1t=s(M2e);m(_L.$$.fragment,x1t),x1t.forEach(t),B1t.forEach(t),Gvr=i(d$e),E2e=n(d$e,"SPAN",{});var k1t=s(E2e);Ovr=r(k1t,"TFAutoModelForVision2Seq"),k1t.forEach(t),d$e.forEach(t),KRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(uL.$$.fragment,li),Xvr=i(li),Wc=n(li,"P",{});var CQ=s(Wc);Vvr=r(CQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),y2e=n(CQ,"CODE",{});var R1t=s(y2e);zvr=r(R1t,"from_pretrained()"),R1t.forEach(t),Wvr=r(CQ,"class method or the "),w2e=n(CQ,"CODE",{});var S1t=s(w2e);Qvr=r(S1t,"from_config()"),S1t.forEach(t),Hvr=r(CQ,`class
method.`),CQ.forEach(t),Uvr=i(li),bL=n(li,"P",{});var c$e=s(bL);Jvr=r(c$e,"This class cannot be instantiated directly using "),A2e=n(c$e,"CODE",{});var P1t=s(A2e);Yvr=r(P1t,"__init__()"),P1t.forEach(t),Kvr=r(c$e," (throws an error)."),c$e.forEach(t),Zvr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(vL.$$.fragment,ii),e6r=i(ii),L2e=n(ii,"P",{});var $1t=s(L2e);o6r=r($1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$1t.forEach(t),r6r=i(ii),Qc=n(ii,"P",{});var MQ=s(Qc);t6r=r(MQ,`Note:
Loading a model from its configuration file does `),B2e=n(MQ,"STRONG",{});var I1t=s(B2e);a6r=r(I1t,"not"),I1t.forEach(t),n6r=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),x2e=n(MQ,"CODE",{});var N1t=s(x2e);s6r=r(N1t,"from_pretrained()"),N1t.forEach(t),l6r=r(MQ,"to load the model weights."),MQ.forEach(t),i6r=i(ii),k2e=n(ii,"P",{});var j1t=s(k2e);d6r=r(j1t,"Examples:"),j1t.forEach(t),c6r=i(ii),m(TL.$$.fragment,ii),ii.forEach(t),f6r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(FL.$$.fragment,wa),m6r=i(wa),R2e=n(wa,"P",{});var D1t=s(R2e);g6r=r(D1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D1t.forEach(t),h6r=i(wa),An=n(wa,"P",{});var YE=s(An);p6r=r(YE,"The model class to instantiate is selected based on the "),S2e=n(YE,"CODE",{});var q1t=s(S2e);_6r=r(q1t,"model_type"),q1t.forEach(t),u6r=r(YE,` property of the config object (either
passed as an argument or loaded from `),P2e=n(YE,"CODE",{});var G1t=s(P2e);b6r=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),v6r=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(YE,"CODE",{});var O1t=s($2e);T6r=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),F6r=r(YE,":"),YE.forEach(t),C6r=i(wa),I2e=n(wa,"UL",{});var X1t=s(I2e);aM=n(X1t,"LI",{});var BBe=s(aM);N2e=n(BBe,"STRONG",{});var V1t=s(N2e);M6r=r(V1t,"vision-encoder-decoder"),V1t.forEach(t),E6r=r(BBe," \u2014 "),dV=n(BBe,"A",{href:!0});var z1t=s(dV);y6r=r(z1t,"TFVisionEncoderDecoderModel"),z1t.forEach(t),w6r=r(BBe," (Vision Encoder decoder model)"),BBe.forEach(t),X1t.forEach(t),A6r=i(wa),j2e=n(wa,"P",{});var W1t=s(j2e);L6r=r(W1t,"Examples:"),W1t.forEach(t),B6r=i(wa),m(CL.$$.fragment,wa),wa.forEach(t),li.forEach(t),ZRe=i(c),Hc=n(c,"H2",{class:!0});var f$e=s(Hc);nM=n(f$e,"A",{id:!0,class:!0,href:!0});var Q1t=s(nM);D2e=n(Q1t,"SPAN",{});var H1t=s(D2e);m(ML.$$.fragment,H1t),H1t.forEach(t),Q1t.forEach(t),x6r=i(f$e),q2e=n(f$e,"SPAN",{});var U1t=s(q2e);k6r=r(U1t,"TFAutoModelForSpeechSeq2Seq"),U1t.forEach(t),f$e.forEach(t),eSe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(EL.$$.fragment,di),R6r=i(di),Uc=n(di,"P",{});var EQ=s(Uc);S6r=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),G2e=n(EQ,"CODE",{});var J1t=s(G2e);P6r=r(J1t,"from_pretrained()"),J1t.forEach(t),$6r=r(EQ,"class method or the "),O2e=n(EQ,"CODE",{});var Y1t=s(O2e);I6r=r(Y1t,"from_config()"),Y1t.forEach(t),N6r=r(EQ,`class
method.`),EQ.forEach(t),j6r=i(di),yL=n(di,"P",{});var m$e=s(yL);D6r=r(m$e,"This class cannot be instantiated directly using "),X2e=n(m$e,"CODE",{});var K1t=s(X2e);q6r=r(K1t,"__init__()"),K1t.forEach(t),G6r=r(m$e," (throws an error)."),m$e.forEach(t),O6r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(wL.$$.fragment,ci),X6r=i(ci),V2e=n(ci,"P",{});var Z1t=s(V2e);V6r=r(Z1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Z1t.forEach(t),z6r=i(ci),Jc=n(ci,"P",{});var yQ=s(Jc);W6r=r(yQ,`Note:
Loading a model from its configuration file does `),z2e=n(yQ,"STRONG",{});var ebt=s(z2e);Q6r=r(ebt,"not"),ebt.forEach(t),H6r=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),W2e=n(yQ,"CODE",{});var obt=s(W2e);U6r=r(obt,"from_pretrained()"),obt.forEach(t),J6r=r(yQ,"to load the model weights."),yQ.forEach(t),Y6r=i(ci),Q2e=n(ci,"P",{});var rbt=s(Q2e);K6r=r(rbt,"Examples:"),rbt.forEach(t),Z6r=i(ci),m(AL.$$.fragment,ci),ci.forEach(t),eTr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(LL.$$.fragment,Aa),oTr=i(Aa),H2e=n(Aa,"P",{});var tbt=s(H2e);rTr=r(tbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tbt.forEach(t),tTr=i(Aa),Ln=n(Aa,"P",{});var KE=s(Ln);aTr=r(KE,"The model class to instantiate is selected based on the "),U2e=n(KE,"CODE",{});var abt=s(U2e);nTr=r(abt,"model_type"),abt.forEach(t),sTr=r(KE,` property of the config object (either
passed as an argument or loaded from `),J2e=n(KE,"CODE",{});var nbt=s(J2e);lTr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),iTr=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(KE,"CODE",{});var sbt=s(Y2e);dTr=r(sbt,"pretrained_model_name_or_path"),sbt.forEach(t),cTr=r(KE,":"),KE.forEach(t),fTr=i(Aa),K2e=n(Aa,"UL",{});var lbt=s(K2e);sM=n(lbt,"LI",{});var xBe=s(sM);Z2e=n(xBe,"STRONG",{});var ibt=s(Z2e);mTr=r(ibt,"speech_to_text"),ibt.forEach(t),gTr=r(xBe," \u2014 "),cV=n(xBe,"A",{href:!0});var dbt=s(cV);hTr=r(dbt,"TFSpeech2TextForConditionalGeneration"),dbt.forEach(t),pTr=r(xBe," (Speech2Text model)"),xBe.forEach(t),lbt.forEach(t),_Tr=i(Aa),e1e=n(Aa,"P",{});var cbt=s(e1e);uTr=r(cbt,"Examples:"),cbt.forEach(t),bTr=i(Aa),m(BL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),oSe=i(c),Yc=n(c,"H2",{class:!0});var g$e=s(Yc);lM=n(g$e,"A",{id:!0,class:!0,href:!0});var fbt=s(lM);o1e=n(fbt,"SPAN",{});var mbt=s(o1e);m(xL.$$.fragment,mbt),mbt.forEach(t),fbt.forEach(t),vTr=i(g$e),r1e=n(g$e,"SPAN",{});var gbt=s(r1e);TTr=r(gbt,"FlaxAutoModel"),gbt.forEach(t),g$e.forEach(t),rSe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(kL.$$.fragment,fi),FTr=i(fi),Kc=n(fi,"P",{});var wQ=s(Kc);CTr=r(wQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),t1e=n(wQ,"CODE",{});var hbt=s(t1e);MTr=r(hbt,"from_pretrained()"),hbt.forEach(t),ETr=r(wQ,"class method or the "),a1e=n(wQ,"CODE",{});var pbt=s(a1e);yTr=r(pbt,"from_config()"),pbt.forEach(t),wTr=r(wQ,`class
method.`),wQ.forEach(t),ATr=i(fi),RL=n(fi,"P",{});var h$e=s(RL);LTr=r(h$e,"This class cannot be instantiated directly using "),n1e=n(h$e,"CODE",{});var _bt=s(n1e);BTr=r(_bt,"__init__()"),_bt.forEach(t),xTr=r(h$e," (throws an error)."),h$e.forEach(t),kTr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(SL.$$.fragment,mi),RTr=i(mi),s1e=n(mi,"P",{});var ubt=s(s1e);STr=r(ubt,"Instantiates one of the base model classes of the library from a configuration."),ubt.forEach(t),PTr=i(mi),Zc=n(mi,"P",{});var AQ=s(Zc);$Tr=r(AQ,`Note:
Loading a model from its configuration file does `),l1e=n(AQ,"STRONG",{});var bbt=s(l1e);ITr=r(bbt,"not"),bbt.forEach(t),NTr=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),i1e=n(AQ,"CODE",{});var vbt=s(i1e);jTr=r(vbt,"from_pretrained()"),vbt.forEach(t),DTr=r(AQ,"to load the model weights."),AQ.forEach(t),qTr=i(mi),d1e=n(mi,"P",{});var Tbt=s(d1e);GTr=r(Tbt,"Examples:"),Tbt.forEach(t),OTr=i(mi),m(PL.$$.fragment,mi),mi.forEach(t),XTr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m($L.$$.fragment,La),VTr=i(La),c1e=n(La,"P",{});var Fbt=s(c1e);zTr=r(Fbt,"Instantiate one of the base model classes of the library from a pretrained model."),Fbt.forEach(t),WTr=i(La),Bn=n(La,"P",{});var ZE=s(Bn);QTr=r(ZE,"The model class to instantiate is selected based on the "),f1e=n(ZE,"CODE",{});var Cbt=s(f1e);HTr=r(Cbt,"model_type"),Cbt.forEach(t),UTr=r(ZE,` property of the config object (either
passed as an argument or loaded from `),m1e=n(ZE,"CODE",{});var Mbt=s(m1e);JTr=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),YTr=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(ZE,"CODE",{});var Ebt=s(g1e);KTr=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),ZTr=r(ZE,":"),ZE.forEach(t),eFr=i(La),z=n(La,"UL",{});var Q=s(z);iM=n(Q,"LI",{});var kBe=s(iM);h1e=n(kBe,"STRONG",{});var ybt=s(h1e);oFr=r(ybt,"albert"),ybt.forEach(t),rFr=r(kBe," \u2014 "),fV=n(kBe,"A",{href:!0});var wbt=s(fV);tFr=r(wbt,"FlaxAlbertModel"),wbt.forEach(t),aFr=r(kBe," (ALBERT model)"),kBe.forEach(t),nFr=i(Q),dM=n(Q,"LI",{});var RBe=s(dM);p1e=n(RBe,"STRONG",{});var Abt=s(p1e);sFr=r(Abt,"bart"),Abt.forEach(t),lFr=r(RBe," \u2014 "),mV=n(RBe,"A",{href:!0});var Lbt=s(mV);iFr=r(Lbt,"FlaxBartModel"),Lbt.forEach(t),dFr=r(RBe," (BART model)"),RBe.forEach(t),cFr=i(Q),cM=n(Q,"LI",{});var SBe=s(cM);_1e=n(SBe,"STRONG",{});var Bbt=s(_1e);fFr=r(Bbt,"beit"),Bbt.forEach(t),mFr=r(SBe," \u2014 "),gV=n(SBe,"A",{href:!0});var xbt=s(gV);gFr=r(xbt,"FlaxBeitModel"),xbt.forEach(t),hFr=r(SBe," (BEiT model)"),SBe.forEach(t),pFr=i(Q),fM=n(Q,"LI",{});var PBe=s(fM);u1e=n(PBe,"STRONG",{});var kbt=s(u1e);_Fr=r(kbt,"bert"),kbt.forEach(t),uFr=r(PBe," \u2014 "),hV=n(PBe,"A",{href:!0});var Rbt=s(hV);bFr=r(Rbt,"FlaxBertModel"),Rbt.forEach(t),vFr=r(PBe," (BERT model)"),PBe.forEach(t),TFr=i(Q),mM=n(Q,"LI",{});var $Be=s(mM);b1e=n($Be,"STRONG",{});var Sbt=s(b1e);FFr=r(Sbt,"big_bird"),Sbt.forEach(t),CFr=r($Be," \u2014 "),pV=n($Be,"A",{href:!0});var Pbt=s(pV);MFr=r(Pbt,"FlaxBigBirdModel"),Pbt.forEach(t),EFr=r($Be," (BigBird model)"),$Be.forEach(t),yFr=i(Q),gM=n(Q,"LI",{});var IBe=s(gM);v1e=n(IBe,"STRONG",{});var $bt=s(v1e);wFr=r($bt,"blenderbot"),$bt.forEach(t),AFr=r(IBe," \u2014 "),_V=n(IBe,"A",{href:!0});var Ibt=s(_V);LFr=r(Ibt,"FlaxBlenderbotModel"),Ibt.forEach(t),BFr=r(IBe," (Blenderbot model)"),IBe.forEach(t),xFr=i(Q),hM=n(Q,"LI",{});var NBe=s(hM);T1e=n(NBe,"STRONG",{});var Nbt=s(T1e);kFr=r(Nbt,"blenderbot-small"),Nbt.forEach(t),RFr=r(NBe," \u2014 "),uV=n(NBe,"A",{href:!0});var jbt=s(uV);SFr=r(jbt,"FlaxBlenderbotSmallModel"),jbt.forEach(t),PFr=r(NBe," (BlenderbotSmall model)"),NBe.forEach(t),$Fr=i(Q),pM=n(Q,"LI",{});var jBe=s(pM);F1e=n(jBe,"STRONG",{});var Dbt=s(F1e);IFr=r(Dbt,"clip"),Dbt.forEach(t),NFr=r(jBe," \u2014 "),bV=n(jBe,"A",{href:!0});var qbt=s(bV);jFr=r(qbt,"FlaxCLIPModel"),qbt.forEach(t),DFr=r(jBe," (CLIP model)"),jBe.forEach(t),qFr=i(Q),_M=n(Q,"LI",{});var DBe=s(_M);C1e=n(DBe,"STRONG",{});var Gbt=s(C1e);GFr=r(Gbt,"distilbert"),Gbt.forEach(t),OFr=r(DBe," \u2014 "),vV=n(DBe,"A",{href:!0});var Obt=s(vV);XFr=r(Obt,"FlaxDistilBertModel"),Obt.forEach(t),VFr=r(DBe," (DistilBERT model)"),DBe.forEach(t),zFr=i(Q),uM=n(Q,"LI",{});var qBe=s(uM);M1e=n(qBe,"STRONG",{});var Xbt=s(M1e);WFr=r(Xbt,"electra"),Xbt.forEach(t),QFr=r(qBe," \u2014 "),TV=n(qBe,"A",{href:!0});var Vbt=s(TV);HFr=r(Vbt,"FlaxElectraModel"),Vbt.forEach(t),UFr=r(qBe," (ELECTRA model)"),qBe.forEach(t),JFr=i(Q),bM=n(Q,"LI",{});var GBe=s(bM);E1e=n(GBe,"STRONG",{});var zbt=s(E1e);YFr=r(zbt,"gpt2"),zbt.forEach(t),KFr=r(GBe," \u2014 "),FV=n(GBe,"A",{href:!0});var Wbt=s(FV);ZFr=r(Wbt,"FlaxGPT2Model"),Wbt.forEach(t),eCr=r(GBe," (OpenAI GPT-2 model)"),GBe.forEach(t),oCr=i(Q),vM=n(Q,"LI",{});var OBe=s(vM);y1e=n(OBe,"STRONG",{});var Qbt=s(y1e);rCr=r(Qbt,"gpt_neo"),Qbt.forEach(t),tCr=r(OBe," \u2014 "),CV=n(OBe,"A",{href:!0});var Hbt=s(CV);aCr=r(Hbt,"FlaxGPTNeoModel"),Hbt.forEach(t),nCr=r(OBe," (GPT Neo model)"),OBe.forEach(t),sCr=i(Q),TM=n(Q,"LI",{});var XBe=s(TM);w1e=n(XBe,"STRONG",{});var Ubt=s(w1e);lCr=r(Ubt,"gptj"),Ubt.forEach(t),iCr=r(XBe," \u2014 "),MV=n(XBe,"A",{href:!0});var Jbt=s(MV);dCr=r(Jbt,"FlaxGPTJModel"),Jbt.forEach(t),cCr=r(XBe," (GPT-J model)"),XBe.forEach(t),fCr=i(Q),FM=n(Q,"LI",{});var VBe=s(FM);A1e=n(VBe,"STRONG",{});var Ybt=s(A1e);mCr=r(Ybt,"marian"),Ybt.forEach(t),gCr=r(VBe," \u2014 "),EV=n(VBe,"A",{href:!0});var Kbt=s(EV);hCr=r(Kbt,"FlaxMarianModel"),Kbt.forEach(t),pCr=r(VBe," (Marian model)"),VBe.forEach(t),_Cr=i(Q),CM=n(Q,"LI",{});var zBe=s(CM);L1e=n(zBe,"STRONG",{});var Zbt=s(L1e);uCr=r(Zbt,"mbart"),Zbt.forEach(t),bCr=r(zBe," \u2014 "),yV=n(zBe,"A",{href:!0});var evt=s(yV);vCr=r(evt,"FlaxMBartModel"),evt.forEach(t),TCr=r(zBe," (mBART model)"),zBe.forEach(t),FCr=i(Q),MM=n(Q,"LI",{});var WBe=s(MM);B1e=n(WBe,"STRONG",{});var ovt=s(B1e);CCr=r(ovt,"mt5"),ovt.forEach(t),MCr=r(WBe," \u2014 "),wV=n(WBe,"A",{href:!0});var rvt=s(wV);ECr=r(rvt,"FlaxMT5Model"),rvt.forEach(t),yCr=r(WBe," (mT5 model)"),WBe.forEach(t),wCr=i(Q),EM=n(Q,"LI",{});var QBe=s(EM);x1e=n(QBe,"STRONG",{});var tvt=s(x1e);ACr=r(tvt,"pegasus"),tvt.forEach(t),LCr=r(QBe," \u2014 "),AV=n(QBe,"A",{href:!0});var avt=s(AV);BCr=r(avt,"FlaxPegasusModel"),avt.forEach(t),xCr=r(QBe," (Pegasus model)"),QBe.forEach(t),kCr=i(Q),yM=n(Q,"LI",{});var HBe=s(yM);k1e=n(HBe,"STRONG",{});var nvt=s(k1e);RCr=r(nvt,"roberta"),nvt.forEach(t),SCr=r(HBe," \u2014 "),LV=n(HBe,"A",{href:!0});var svt=s(LV);PCr=r(svt,"FlaxRobertaModel"),svt.forEach(t),$Cr=r(HBe," (RoBERTa model)"),HBe.forEach(t),ICr=i(Q),wM=n(Q,"LI",{});var UBe=s(wM);R1e=n(UBe,"STRONG",{});var lvt=s(R1e);NCr=r(lvt,"roformer"),lvt.forEach(t),jCr=r(UBe," \u2014 "),BV=n(UBe,"A",{href:!0});var ivt=s(BV);DCr=r(ivt,"FlaxRoFormerModel"),ivt.forEach(t),qCr=r(UBe," (RoFormer model)"),UBe.forEach(t),GCr=i(Q),AM=n(Q,"LI",{});var JBe=s(AM);S1e=n(JBe,"STRONG",{});var dvt=s(S1e);OCr=r(dvt,"t5"),dvt.forEach(t),XCr=r(JBe," \u2014 "),xV=n(JBe,"A",{href:!0});var cvt=s(xV);VCr=r(cvt,"FlaxT5Model"),cvt.forEach(t),zCr=r(JBe," (T5 model)"),JBe.forEach(t),WCr=i(Q),LM=n(Q,"LI",{});var YBe=s(LM);P1e=n(YBe,"STRONG",{});var fvt=s(P1e);QCr=r(fvt,"vision-text-dual-encoder"),fvt.forEach(t),HCr=r(YBe," \u2014 "),kV=n(YBe,"A",{href:!0});var mvt=s(kV);UCr=r(mvt,"FlaxVisionTextDualEncoderModel"),mvt.forEach(t),JCr=r(YBe," (VisionTextDualEncoder model)"),YBe.forEach(t),YCr=i(Q),BM=n(Q,"LI",{});var KBe=s(BM);$1e=n(KBe,"STRONG",{});var gvt=s($1e);KCr=r(gvt,"vit"),gvt.forEach(t),ZCr=r(KBe," \u2014 "),RV=n(KBe,"A",{href:!0});var hvt=s(RV);eMr=r(hvt,"FlaxViTModel"),hvt.forEach(t),oMr=r(KBe," (ViT model)"),KBe.forEach(t),rMr=i(Q),xM=n(Q,"LI",{});var ZBe=s(xM);I1e=n(ZBe,"STRONG",{});var pvt=s(I1e);tMr=r(pvt,"wav2vec2"),pvt.forEach(t),aMr=r(ZBe," \u2014 "),SV=n(ZBe,"A",{href:!0});var _vt=s(SV);nMr=r(_vt,"FlaxWav2Vec2Model"),_vt.forEach(t),sMr=r(ZBe," (Wav2Vec2 model)"),ZBe.forEach(t),lMr=i(Q),kM=n(Q,"LI",{});var exe=s(kM);N1e=n(exe,"STRONG",{});var uvt=s(N1e);iMr=r(uvt,"xglm"),uvt.forEach(t),dMr=r(exe," \u2014 "),PV=n(exe,"A",{href:!0});var bvt=s(PV);cMr=r(bvt,"FlaxXGLMModel"),bvt.forEach(t),fMr=r(exe," (XGLM model)"),exe.forEach(t),mMr=i(Q),RM=n(Q,"LI",{});var oxe=s(RM);j1e=n(oxe,"STRONG",{});var vvt=s(j1e);gMr=r(vvt,"xlm-roberta"),vvt.forEach(t),hMr=r(oxe," \u2014 "),$V=n(oxe,"A",{href:!0});var Tvt=s($V);pMr=r(Tvt,"FlaxXLMRobertaModel"),Tvt.forEach(t),_Mr=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),Q.forEach(t),uMr=i(La),D1e=n(La,"P",{});var Fvt=s(D1e);bMr=r(Fvt,"Examples:"),Fvt.forEach(t),vMr=i(La),m(IL.$$.fragment,La),La.forEach(t),fi.forEach(t),tSe=i(c),ef=n(c,"H2",{class:!0});var p$e=s(ef);SM=n(p$e,"A",{id:!0,class:!0,href:!0});var Cvt=s(SM);q1e=n(Cvt,"SPAN",{});var Mvt=s(q1e);m(NL.$$.fragment,Mvt),Mvt.forEach(t),Cvt.forEach(t),TMr=i(p$e),G1e=n(p$e,"SPAN",{});var Evt=s(G1e);FMr=r(Evt,"FlaxAutoModelForCausalLM"),Evt.forEach(t),p$e.forEach(t),aSe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(jL.$$.fragment,gi),CMr=i(gi),of=n(gi,"P",{});var LQ=s(of);MMr=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),O1e=n(LQ,"CODE",{});var yvt=s(O1e);EMr=r(yvt,"from_pretrained()"),yvt.forEach(t),yMr=r(LQ,"class method or the "),X1e=n(LQ,"CODE",{});var wvt=s(X1e);wMr=r(wvt,"from_config()"),wvt.forEach(t),AMr=r(LQ,`class
method.`),LQ.forEach(t),LMr=i(gi),DL=n(gi,"P",{});var _$e=s(DL);BMr=r(_$e,"This class cannot be instantiated directly using "),V1e=n(_$e,"CODE",{});var Avt=s(V1e);xMr=r(Avt,"__init__()"),Avt.forEach(t),kMr=r(_$e," (throws an error)."),_$e.forEach(t),RMr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(qL.$$.fragment,hi),SMr=i(hi),z1e=n(hi,"P",{});var Lvt=s(z1e);PMr=r(Lvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lvt.forEach(t),$Mr=i(hi),rf=n(hi,"P",{});var BQ=s(rf);IMr=r(BQ,`Note:
Loading a model from its configuration file does `),W1e=n(BQ,"STRONG",{});var Bvt=s(W1e);NMr=r(Bvt,"not"),Bvt.forEach(t),jMr=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q1e=n(BQ,"CODE",{});var xvt=s(Q1e);DMr=r(xvt,"from_pretrained()"),xvt.forEach(t),qMr=r(BQ,"to load the model weights."),BQ.forEach(t),GMr=i(hi),H1e=n(hi,"P",{});var kvt=s(H1e);OMr=r(kvt,"Examples:"),kvt.forEach(t),XMr=i(hi),m(GL.$$.fragment,hi),hi.forEach(t),VMr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(OL.$$.fragment,Ba),zMr=i(Ba),U1e=n(Ba,"P",{});var Rvt=s(U1e);WMr=r(Rvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rvt.forEach(t),QMr=i(Ba),xn=n(Ba,"P",{});var e3=s(xn);HMr=r(e3,"The model class to instantiate is selected based on the "),J1e=n(e3,"CODE",{});var Svt=s(J1e);UMr=r(Svt,"model_type"),Svt.forEach(t),JMr=r(e3,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(e3,"CODE",{});var Pvt=s(Y1e);YMr=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),KMr=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(e3,"CODE",{});var $vt=s(K1e);ZMr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),e4r=r(e3,":"),e3.forEach(t),o4r=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);PM=n(pi,"LI",{});var rxe=s(PM);Z1e=n(rxe,"STRONG",{});var Ivt=s(Z1e);r4r=r(Ivt,"bart"),Ivt.forEach(t),t4r=r(rxe," \u2014 "),IV=n(rxe,"A",{href:!0});var Nvt=s(IV);a4r=r(Nvt,"FlaxBartForCausalLM"),Nvt.forEach(t),n4r=r(rxe," (BART model)"),rxe.forEach(t),s4r=i(pi),$M=n(pi,"LI",{});var txe=s($M);ebe=n(txe,"STRONG",{});var jvt=s(ebe);l4r=r(jvt,"gpt2"),jvt.forEach(t),i4r=r(txe," \u2014 "),NV=n(txe,"A",{href:!0});var Dvt=s(NV);d4r=r(Dvt,"FlaxGPT2LMHeadModel"),Dvt.forEach(t),c4r=r(txe," (OpenAI GPT-2 model)"),txe.forEach(t),f4r=i(pi),IM=n(pi,"LI",{});var axe=s(IM);obe=n(axe,"STRONG",{});var qvt=s(obe);m4r=r(qvt,"gpt_neo"),qvt.forEach(t),g4r=r(axe," \u2014 "),jV=n(axe,"A",{href:!0});var Gvt=s(jV);h4r=r(Gvt,"FlaxGPTNeoForCausalLM"),Gvt.forEach(t),p4r=r(axe," (GPT Neo model)"),axe.forEach(t),_4r=i(pi),NM=n(pi,"LI",{});var nxe=s(NM);rbe=n(nxe,"STRONG",{});var Ovt=s(rbe);u4r=r(Ovt,"gptj"),Ovt.forEach(t),b4r=r(nxe," \u2014 "),DV=n(nxe,"A",{href:!0});var Xvt=s(DV);v4r=r(Xvt,"FlaxGPTJForCausalLM"),Xvt.forEach(t),T4r=r(nxe," (GPT-J model)"),nxe.forEach(t),F4r=i(pi),jM=n(pi,"LI",{});var sxe=s(jM);tbe=n(sxe,"STRONG",{});var Vvt=s(tbe);C4r=r(Vvt,"xglm"),Vvt.forEach(t),M4r=r(sxe," \u2014 "),qV=n(sxe,"A",{href:!0});var zvt=s(qV);E4r=r(zvt,"FlaxXGLMForCausalLM"),zvt.forEach(t),y4r=r(sxe," (XGLM model)"),sxe.forEach(t),pi.forEach(t),w4r=i(Ba),abe=n(Ba,"P",{});var Wvt=s(abe);A4r=r(Wvt,"Examples:"),Wvt.forEach(t),L4r=i(Ba),m(XL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),nSe=i(c),tf=n(c,"H2",{class:!0});var u$e=s(tf);DM=n(u$e,"A",{id:!0,class:!0,href:!0});var Qvt=s(DM);nbe=n(Qvt,"SPAN",{});var Hvt=s(nbe);m(VL.$$.fragment,Hvt),Hvt.forEach(t),Qvt.forEach(t),B4r=i(u$e),sbe=n(u$e,"SPAN",{});var Uvt=s(sbe);x4r=r(Uvt,"FlaxAutoModelForPreTraining"),Uvt.forEach(t),u$e.forEach(t),sSe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(zL.$$.fragment,_i),k4r=i(_i),af=n(_i,"P",{});var xQ=s(af);R4r=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lbe=n(xQ,"CODE",{});var Jvt=s(lbe);S4r=r(Jvt,"from_pretrained()"),Jvt.forEach(t),P4r=r(xQ,"class method or the "),ibe=n(xQ,"CODE",{});var Yvt=s(ibe);$4r=r(Yvt,"from_config()"),Yvt.forEach(t),I4r=r(xQ,`class
method.`),xQ.forEach(t),N4r=i(_i),WL=n(_i,"P",{});var b$e=s(WL);j4r=r(b$e,"This class cannot be instantiated directly using "),dbe=n(b$e,"CODE",{});var Kvt=s(dbe);D4r=r(Kvt,"__init__()"),Kvt.forEach(t),q4r=r(b$e," (throws an error)."),b$e.forEach(t),G4r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(QL.$$.fragment,ui),O4r=i(ui),cbe=n(ui,"P",{});var Zvt=s(cbe);X4r=r(Zvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Zvt.forEach(t),V4r=i(ui),nf=n(ui,"P",{});var kQ=s(nf);z4r=r(kQ,`Note:
Loading a model from its configuration file does `),fbe=n(kQ,"STRONG",{});var e6t=s(fbe);W4r=r(e6t,"not"),e6t.forEach(t),Q4r=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mbe=n(kQ,"CODE",{});var o6t=s(mbe);H4r=r(o6t,"from_pretrained()"),o6t.forEach(t),U4r=r(kQ,"to load the model weights."),kQ.forEach(t),J4r=i(ui),gbe=n(ui,"P",{});var r6t=s(gbe);Y4r=r(r6t,"Examples:"),r6t.forEach(t),K4r=i(ui),m(HL.$$.fragment,ui),ui.forEach(t),Z4r=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(UL.$$.fragment,xa),eEr=i(xa),hbe=n(xa,"P",{});var t6t=s(hbe);oEr=r(t6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t6t.forEach(t),rEr=i(xa),kn=n(xa,"P",{});var o3=s(kn);tEr=r(o3,"The model class to instantiate is selected based on the "),pbe=n(o3,"CODE",{});var a6t=s(pbe);aEr=r(a6t,"model_type"),a6t.forEach(t),nEr=r(o3,` property of the config object (either
passed as an argument or loaded from `),_be=n(o3,"CODE",{});var n6t=s(_be);sEr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),lEr=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(o3,"CODE",{});var s6t=s(ube);iEr=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),dEr=r(o3,":"),o3.forEach(t),cEr=i(xa),fe=n(xa,"UL",{});var pe=s(fe);qM=n(pe,"LI",{});var lxe=s(qM);bbe=n(lxe,"STRONG",{});var l6t=s(bbe);fEr=r(l6t,"albert"),l6t.forEach(t),mEr=r(lxe," \u2014 "),GV=n(lxe,"A",{href:!0});var i6t=s(GV);gEr=r(i6t,"FlaxAlbertForPreTraining"),i6t.forEach(t),hEr=r(lxe," (ALBERT model)"),lxe.forEach(t),pEr=i(pe),GM=n(pe,"LI",{});var ixe=s(GM);vbe=n(ixe,"STRONG",{});var d6t=s(vbe);_Er=r(d6t,"bart"),d6t.forEach(t),uEr=r(ixe," \u2014 "),OV=n(ixe,"A",{href:!0});var c6t=s(OV);bEr=r(c6t,"FlaxBartForConditionalGeneration"),c6t.forEach(t),vEr=r(ixe," (BART model)"),ixe.forEach(t),TEr=i(pe),OM=n(pe,"LI",{});var dxe=s(OM);Tbe=n(dxe,"STRONG",{});var f6t=s(Tbe);FEr=r(f6t,"bert"),f6t.forEach(t),CEr=r(dxe," \u2014 "),XV=n(dxe,"A",{href:!0});var m6t=s(XV);MEr=r(m6t,"FlaxBertForPreTraining"),m6t.forEach(t),EEr=r(dxe," (BERT model)"),dxe.forEach(t),yEr=i(pe),XM=n(pe,"LI",{});var cxe=s(XM);Fbe=n(cxe,"STRONG",{});var g6t=s(Fbe);wEr=r(g6t,"big_bird"),g6t.forEach(t),AEr=r(cxe," \u2014 "),VV=n(cxe,"A",{href:!0});var h6t=s(VV);LEr=r(h6t,"FlaxBigBirdForPreTraining"),h6t.forEach(t),BEr=r(cxe," (BigBird model)"),cxe.forEach(t),xEr=i(pe),VM=n(pe,"LI",{});var fxe=s(VM);Cbe=n(fxe,"STRONG",{});var p6t=s(Cbe);kEr=r(p6t,"electra"),p6t.forEach(t),REr=r(fxe," \u2014 "),zV=n(fxe,"A",{href:!0});var _6t=s(zV);SEr=r(_6t,"FlaxElectraForPreTraining"),_6t.forEach(t),PEr=r(fxe," (ELECTRA model)"),fxe.forEach(t),$Er=i(pe),zM=n(pe,"LI",{});var mxe=s(zM);Mbe=n(mxe,"STRONG",{});var u6t=s(Mbe);IEr=r(u6t,"mbart"),u6t.forEach(t),NEr=r(mxe," \u2014 "),WV=n(mxe,"A",{href:!0});var b6t=s(WV);jEr=r(b6t,"FlaxMBartForConditionalGeneration"),b6t.forEach(t),DEr=r(mxe," (mBART model)"),mxe.forEach(t),qEr=i(pe),WM=n(pe,"LI",{});var gxe=s(WM);Ebe=n(gxe,"STRONG",{});var v6t=s(Ebe);GEr=r(v6t,"mt5"),v6t.forEach(t),OEr=r(gxe," \u2014 "),QV=n(gxe,"A",{href:!0});var T6t=s(QV);XEr=r(T6t,"FlaxMT5ForConditionalGeneration"),T6t.forEach(t),VEr=r(gxe," (mT5 model)"),gxe.forEach(t),zEr=i(pe),QM=n(pe,"LI",{});var hxe=s(QM);ybe=n(hxe,"STRONG",{});var F6t=s(ybe);WEr=r(F6t,"roberta"),F6t.forEach(t),QEr=r(hxe," \u2014 "),HV=n(hxe,"A",{href:!0});var C6t=s(HV);HEr=r(C6t,"FlaxRobertaForMaskedLM"),C6t.forEach(t),UEr=r(hxe," (RoBERTa model)"),hxe.forEach(t),JEr=i(pe),HM=n(pe,"LI",{});var pxe=s(HM);wbe=n(pxe,"STRONG",{});var M6t=s(wbe);YEr=r(M6t,"roformer"),M6t.forEach(t),KEr=r(pxe," \u2014 "),UV=n(pxe,"A",{href:!0});var E6t=s(UV);ZEr=r(E6t,"FlaxRoFormerForMaskedLM"),E6t.forEach(t),e3r=r(pxe," (RoFormer model)"),pxe.forEach(t),o3r=i(pe),UM=n(pe,"LI",{});var _xe=s(UM);Abe=n(_xe,"STRONG",{});var y6t=s(Abe);r3r=r(y6t,"t5"),y6t.forEach(t),t3r=r(_xe," \u2014 "),JV=n(_xe,"A",{href:!0});var w6t=s(JV);a3r=r(w6t,"FlaxT5ForConditionalGeneration"),w6t.forEach(t),n3r=r(_xe," (T5 model)"),_xe.forEach(t),s3r=i(pe),JM=n(pe,"LI",{});var uxe=s(JM);Lbe=n(uxe,"STRONG",{});var A6t=s(Lbe);l3r=r(A6t,"wav2vec2"),A6t.forEach(t),i3r=r(uxe," \u2014 "),YV=n(uxe,"A",{href:!0});var L6t=s(YV);d3r=r(L6t,"FlaxWav2Vec2ForPreTraining"),L6t.forEach(t),c3r=r(uxe," (Wav2Vec2 model)"),uxe.forEach(t),f3r=i(pe),YM=n(pe,"LI",{});var bxe=s(YM);Bbe=n(bxe,"STRONG",{});var B6t=s(Bbe);m3r=r(B6t,"xlm-roberta"),B6t.forEach(t),g3r=r(bxe," \u2014 "),KV=n(bxe,"A",{href:!0});var x6t=s(KV);h3r=r(x6t,"FlaxXLMRobertaForMaskedLM"),x6t.forEach(t),p3r=r(bxe," (XLM-RoBERTa model)"),bxe.forEach(t),pe.forEach(t),_3r=i(xa),xbe=n(xa,"P",{});var k6t=s(xbe);u3r=r(k6t,"Examples:"),k6t.forEach(t),b3r=i(xa),m(JL.$$.fragment,xa),xa.forEach(t),_i.forEach(t),lSe=i(c),sf=n(c,"H2",{class:!0});var v$e=s(sf);KM=n(v$e,"A",{id:!0,class:!0,href:!0});var R6t=s(KM);kbe=n(R6t,"SPAN",{});var S6t=s(kbe);m(YL.$$.fragment,S6t),S6t.forEach(t),R6t.forEach(t),v3r=i(v$e),Rbe=n(v$e,"SPAN",{});var P6t=s(Rbe);T3r=r(P6t,"FlaxAutoModelForMaskedLM"),P6t.forEach(t),v$e.forEach(t),iSe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(KL.$$.fragment,bi),F3r=i(bi),lf=n(bi,"P",{});var RQ=s(lf);C3r=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Sbe=n(RQ,"CODE",{});var $6t=s(Sbe);M3r=r($6t,"from_pretrained()"),$6t.forEach(t),E3r=r(RQ,"class method or the "),Pbe=n(RQ,"CODE",{});var I6t=s(Pbe);y3r=r(I6t,"from_config()"),I6t.forEach(t),w3r=r(RQ,`class
method.`),RQ.forEach(t),A3r=i(bi),ZL=n(bi,"P",{});var T$e=s(ZL);L3r=r(T$e,"This class cannot be instantiated directly using "),$be=n(T$e,"CODE",{});var N6t=s($be);B3r=r(N6t,"__init__()"),N6t.forEach(t),x3r=r(T$e," (throws an error)."),T$e.forEach(t),k3r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(e7.$$.fragment,vi),R3r=i(vi),Ibe=n(vi,"P",{});var j6t=s(Ibe);S3r=r(j6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),j6t.forEach(t),P3r=i(vi),df=n(vi,"P",{});var SQ=s(df);$3r=r(SQ,`Note:
Loading a model from its configuration file does `),Nbe=n(SQ,"STRONG",{});var D6t=s(Nbe);I3r=r(D6t,"not"),D6t.forEach(t),N3r=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jbe=n(SQ,"CODE",{});var q6t=s(jbe);j3r=r(q6t,"from_pretrained()"),q6t.forEach(t),D3r=r(SQ,"to load the model weights."),SQ.forEach(t),q3r=i(vi),Dbe=n(vi,"P",{});var G6t=s(Dbe);G3r=r(G6t,"Examples:"),G6t.forEach(t),O3r=i(vi),m(o7.$$.fragment,vi),vi.forEach(t),X3r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(r7.$$.fragment,ka),V3r=i(ka),qbe=n(ka,"P",{});var O6t=s(qbe);z3r=r(O6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O6t.forEach(t),W3r=i(ka),Rn=n(ka,"P",{});var r3=s(Rn);Q3r=r(r3,"The model class to instantiate is selected based on the "),Gbe=n(r3,"CODE",{});var X6t=s(Gbe);H3r=r(X6t,"model_type"),X6t.forEach(t),U3r=r(r3,` property of the config object (either
passed as an argument or loaded from `),Obe=n(r3,"CODE",{});var V6t=s(Obe);J3r=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),Y3r=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(r3,"CODE",{});var z6t=s(Xbe);K3r=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),Z3r=r(r3,":"),r3.forEach(t),eyr=i(ka),be=n(ka,"UL",{});var we=s(be);ZM=n(we,"LI",{});var vxe=s(ZM);Vbe=n(vxe,"STRONG",{});var W6t=s(Vbe);oyr=r(W6t,"albert"),W6t.forEach(t),ryr=r(vxe," \u2014 "),ZV=n(vxe,"A",{href:!0});var Q6t=s(ZV);tyr=r(Q6t,"FlaxAlbertForMaskedLM"),Q6t.forEach(t),ayr=r(vxe," (ALBERT model)"),vxe.forEach(t),nyr=i(we),e4=n(we,"LI",{});var Txe=s(e4);zbe=n(Txe,"STRONG",{});var H6t=s(zbe);syr=r(H6t,"bart"),H6t.forEach(t),lyr=r(Txe," \u2014 "),ez=n(Txe,"A",{href:!0});var U6t=s(ez);iyr=r(U6t,"FlaxBartForConditionalGeneration"),U6t.forEach(t),dyr=r(Txe," (BART model)"),Txe.forEach(t),cyr=i(we),o4=n(we,"LI",{});var Fxe=s(o4);Wbe=n(Fxe,"STRONG",{});var J6t=s(Wbe);fyr=r(J6t,"bert"),J6t.forEach(t),myr=r(Fxe," \u2014 "),oz=n(Fxe,"A",{href:!0});var Y6t=s(oz);gyr=r(Y6t,"FlaxBertForMaskedLM"),Y6t.forEach(t),hyr=r(Fxe," (BERT model)"),Fxe.forEach(t),pyr=i(we),r4=n(we,"LI",{});var Cxe=s(r4);Qbe=n(Cxe,"STRONG",{});var K6t=s(Qbe);_yr=r(K6t,"big_bird"),K6t.forEach(t),uyr=r(Cxe," \u2014 "),rz=n(Cxe,"A",{href:!0});var Z6t=s(rz);byr=r(Z6t,"FlaxBigBirdForMaskedLM"),Z6t.forEach(t),vyr=r(Cxe," (BigBird model)"),Cxe.forEach(t),Tyr=i(we),t4=n(we,"LI",{});var Mxe=s(t4);Hbe=n(Mxe,"STRONG",{});var eTt=s(Hbe);Fyr=r(eTt,"distilbert"),eTt.forEach(t),Cyr=r(Mxe," \u2014 "),tz=n(Mxe,"A",{href:!0});var oTt=s(tz);Myr=r(oTt,"FlaxDistilBertForMaskedLM"),oTt.forEach(t),Eyr=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),yyr=i(we),a4=n(we,"LI",{});var Exe=s(a4);Ube=n(Exe,"STRONG",{});var rTt=s(Ube);wyr=r(rTt,"electra"),rTt.forEach(t),Ayr=r(Exe," \u2014 "),az=n(Exe,"A",{href:!0});var tTt=s(az);Lyr=r(tTt,"FlaxElectraForMaskedLM"),tTt.forEach(t),Byr=r(Exe," (ELECTRA model)"),Exe.forEach(t),xyr=i(we),n4=n(we,"LI",{});var yxe=s(n4);Jbe=n(yxe,"STRONG",{});var aTt=s(Jbe);kyr=r(aTt,"mbart"),aTt.forEach(t),Ryr=r(yxe," \u2014 "),nz=n(yxe,"A",{href:!0});var nTt=s(nz);Syr=r(nTt,"FlaxMBartForConditionalGeneration"),nTt.forEach(t),Pyr=r(yxe," (mBART model)"),yxe.forEach(t),$yr=i(we),s4=n(we,"LI",{});var wxe=s(s4);Ybe=n(wxe,"STRONG",{});var sTt=s(Ybe);Iyr=r(sTt,"roberta"),sTt.forEach(t),Nyr=r(wxe," \u2014 "),sz=n(wxe,"A",{href:!0});var lTt=s(sz);jyr=r(lTt,"FlaxRobertaForMaskedLM"),lTt.forEach(t),Dyr=r(wxe," (RoBERTa model)"),wxe.forEach(t),qyr=i(we),l4=n(we,"LI",{});var Axe=s(l4);Kbe=n(Axe,"STRONG",{});var iTt=s(Kbe);Gyr=r(iTt,"roformer"),iTt.forEach(t),Oyr=r(Axe," \u2014 "),lz=n(Axe,"A",{href:!0});var dTt=s(lz);Xyr=r(dTt,"FlaxRoFormerForMaskedLM"),dTt.forEach(t),Vyr=r(Axe," (RoFormer model)"),Axe.forEach(t),zyr=i(we),i4=n(we,"LI",{});var Lxe=s(i4);Zbe=n(Lxe,"STRONG",{});var cTt=s(Zbe);Wyr=r(cTt,"xlm-roberta"),cTt.forEach(t),Qyr=r(Lxe," \u2014 "),iz=n(Lxe,"A",{href:!0});var fTt=s(iz);Hyr=r(fTt,"FlaxXLMRobertaForMaskedLM"),fTt.forEach(t),Uyr=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),we.forEach(t),Jyr=i(ka),eve=n(ka,"P",{});var mTt=s(eve);Yyr=r(mTt,"Examples:"),mTt.forEach(t),Kyr=i(ka),m(t7.$$.fragment,ka),ka.forEach(t),bi.forEach(t),dSe=i(c),cf=n(c,"H2",{class:!0});var F$e=s(cf);d4=n(F$e,"A",{id:!0,class:!0,href:!0});var gTt=s(d4);ove=n(gTt,"SPAN",{});var hTt=s(ove);m(a7.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),Zyr=i(F$e),rve=n(F$e,"SPAN",{});var pTt=s(rve);ewr=r(pTt,"FlaxAutoModelForSeq2SeqLM"),pTt.forEach(t),F$e.forEach(t),cSe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(n7.$$.fragment,Ti),owr=i(Ti),ff=n(Ti,"P",{});var PQ=s(ff);rwr=r(PQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tve=n(PQ,"CODE",{});var _Tt=s(tve);twr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),awr=r(PQ,"class method or the "),ave=n(PQ,"CODE",{});var uTt=s(ave);nwr=r(uTt,"from_config()"),uTt.forEach(t),swr=r(PQ,`class
method.`),PQ.forEach(t),lwr=i(Ti),s7=n(Ti,"P",{});var C$e=s(s7);iwr=r(C$e,"This class cannot be instantiated directly using "),nve=n(C$e,"CODE",{});var bTt=s(nve);dwr=r(bTt,"__init__()"),bTt.forEach(t),cwr=r(C$e," (throws an error)."),C$e.forEach(t),fwr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(l7.$$.fragment,Fi),mwr=i(Fi),sve=n(Fi,"P",{});var vTt=s(sve);gwr=r(vTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vTt.forEach(t),hwr=i(Fi),mf=n(Fi,"P",{});var $Q=s(mf);pwr=r($Q,`Note:
Loading a model from its configuration file does `),lve=n($Q,"STRONG",{});var TTt=s(lve);_wr=r(TTt,"not"),TTt.forEach(t),uwr=r($Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),ive=n($Q,"CODE",{});var FTt=s(ive);bwr=r(FTt,"from_pretrained()"),FTt.forEach(t),vwr=r($Q,"to load the model weights."),$Q.forEach(t),Twr=i(Fi),dve=n(Fi,"P",{});var CTt=s(dve);Fwr=r(CTt,"Examples:"),CTt.forEach(t),Cwr=i(Fi),m(i7.$$.fragment,Fi),Fi.forEach(t),Mwr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(d7.$$.fragment,Ra),Ewr=i(Ra),cve=n(Ra,"P",{});var MTt=s(cve);ywr=r(MTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),MTt.forEach(t),wwr=i(Ra),Sn=n(Ra,"P",{});var t3=s(Sn);Awr=r(t3,"The model class to instantiate is selected based on the "),fve=n(t3,"CODE",{});var ETt=s(fve);Lwr=r(ETt,"model_type"),ETt.forEach(t),Bwr=r(t3,` property of the config object (either
passed as an argument or loaded from `),mve=n(t3,"CODE",{});var yTt=s(mve);xwr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),kwr=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(t3,"CODE",{});var wTt=s(gve);Rwr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),Swr=r(t3,":"),t3.forEach(t),Pwr=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);c4=n(so,"LI",{});var Bxe=s(c4);hve=n(Bxe,"STRONG",{});var ATt=s(hve);$wr=r(ATt,"bart"),ATt.forEach(t),Iwr=r(Bxe," \u2014 "),dz=n(Bxe,"A",{href:!0});var LTt=s(dz);Nwr=r(LTt,"FlaxBartForConditionalGeneration"),LTt.forEach(t),jwr=r(Bxe," (BART model)"),Bxe.forEach(t),Dwr=i(so),f4=n(so,"LI",{});var xxe=s(f4);pve=n(xxe,"STRONG",{});var BTt=s(pve);qwr=r(BTt,"blenderbot"),BTt.forEach(t),Gwr=r(xxe," \u2014 "),cz=n(xxe,"A",{href:!0});var xTt=s(cz);Owr=r(xTt,"FlaxBlenderbotForConditionalGeneration"),xTt.forEach(t),Xwr=r(xxe," (Blenderbot model)"),xxe.forEach(t),Vwr=i(so),m4=n(so,"LI",{});var kxe=s(m4);_ve=n(kxe,"STRONG",{});var kTt=s(_ve);zwr=r(kTt,"blenderbot-small"),kTt.forEach(t),Wwr=r(kxe," \u2014 "),fz=n(kxe,"A",{href:!0});var RTt=s(fz);Qwr=r(RTt,"FlaxBlenderbotSmallForConditionalGeneration"),RTt.forEach(t),Hwr=r(kxe," (BlenderbotSmall model)"),kxe.forEach(t),Uwr=i(so),g4=n(so,"LI",{});var Rxe=s(g4);uve=n(Rxe,"STRONG",{});var STt=s(uve);Jwr=r(STt,"encoder-decoder"),STt.forEach(t),Ywr=r(Rxe," \u2014 "),mz=n(Rxe,"A",{href:!0});var PTt=s(mz);Kwr=r(PTt,"FlaxEncoderDecoderModel"),PTt.forEach(t),Zwr=r(Rxe," (Encoder decoder model)"),Rxe.forEach(t),eAr=i(so),h4=n(so,"LI",{});var Sxe=s(h4);bve=n(Sxe,"STRONG",{});var $Tt=s(bve);oAr=r($Tt,"marian"),$Tt.forEach(t),rAr=r(Sxe," \u2014 "),gz=n(Sxe,"A",{href:!0});var ITt=s(gz);tAr=r(ITt,"FlaxMarianMTModel"),ITt.forEach(t),aAr=r(Sxe," (Marian model)"),Sxe.forEach(t),nAr=i(so),p4=n(so,"LI",{});var Pxe=s(p4);vve=n(Pxe,"STRONG",{});var NTt=s(vve);sAr=r(NTt,"mbart"),NTt.forEach(t),lAr=r(Pxe," \u2014 "),hz=n(Pxe,"A",{href:!0});var jTt=s(hz);iAr=r(jTt,"FlaxMBartForConditionalGeneration"),jTt.forEach(t),dAr=r(Pxe," (mBART model)"),Pxe.forEach(t),cAr=i(so),_4=n(so,"LI",{});var $xe=s(_4);Tve=n($xe,"STRONG",{});var DTt=s(Tve);fAr=r(DTt,"mt5"),DTt.forEach(t),mAr=r($xe," \u2014 "),pz=n($xe,"A",{href:!0});var qTt=s(pz);gAr=r(qTt,"FlaxMT5ForConditionalGeneration"),qTt.forEach(t),hAr=r($xe," (mT5 model)"),$xe.forEach(t),pAr=i(so),u4=n(so,"LI",{});var Ixe=s(u4);Fve=n(Ixe,"STRONG",{});var GTt=s(Fve);_Ar=r(GTt,"pegasus"),GTt.forEach(t),uAr=r(Ixe," \u2014 "),_z=n(Ixe,"A",{href:!0});var OTt=s(_z);bAr=r(OTt,"FlaxPegasusForConditionalGeneration"),OTt.forEach(t),vAr=r(Ixe," (Pegasus model)"),Ixe.forEach(t),TAr=i(so),b4=n(so,"LI",{});var Nxe=s(b4);Cve=n(Nxe,"STRONG",{});var XTt=s(Cve);FAr=r(XTt,"t5"),XTt.forEach(t),CAr=r(Nxe," \u2014 "),uz=n(Nxe,"A",{href:!0});var VTt=s(uz);MAr=r(VTt,"FlaxT5ForConditionalGeneration"),VTt.forEach(t),EAr=r(Nxe," (T5 model)"),Nxe.forEach(t),so.forEach(t),yAr=i(Ra),Mve=n(Ra,"P",{});var zTt=s(Mve);wAr=r(zTt,"Examples:"),zTt.forEach(t),AAr=i(Ra),m(c7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),fSe=i(c),gf=n(c,"H2",{class:!0});var M$e=s(gf);v4=n(M$e,"A",{id:!0,class:!0,href:!0});var WTt=s(v4);Eve=n(WTt,"SPAN",{});var QTt=s(Eve);m(f7.$$.fragment,QTt),QTt.forEach(t),WTt.forEach(t),LAr=i(M$e),yve=n(M$e,"SPAN",{});var HTt=s(yve);BAr=r(HTt,"FlaxAutoModelForSequenceClassification"),HTt.forEach(t),M$e.forEach(t),mSe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(m7.$$.fragment,Ci),xAr=i(Ci),hf=n(Ci,"P",{});var IQ=s(hf);kAr=r(IQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wve=n(IQ,"CODE",{});var UTt=s(wve);RAr=r(UTt,"from_pretrained()"),UTt.forEach(t),SAr=r(IQ,"class method or the "),Ave=n(IQ,"CODE",{});var JTt=s(Ave);PAr=r(JTt,"from_config()"),JTt.forEach(t),$Ar=r(IQ,`class
method.`),IQ.forEach(t),IAr=i(Ci),g7=n(Ci,"P",{});var E$e=s(g7);NAr=r(E$e,"This class cannot be instantiated directly using "),Lve=n(E$e,"CODE",{});var YTt=s(Lve);jAr=r(YTt,"__init__()"),YTt.forEach(t),DAr=r(E$e," (throws an error)."),E$e.forEach(t),qAr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(h7.$$.fragment,Mi),GAr=i(Mi),Bve=n(Mi,"P",{});var KTt=s(Bve);OAr=r(KTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KTt.forEach(t),XAr=i(Mi),pf=n(Mi,"P",{});var NQ=s(pf);VAr=r(NQ,`Note:
Loading a model from its configuration file does `),xve=n(NQ,"STRONG",{});var ZTt=s(xve);zAr=r(ZTt,"not"),ZTt.forEach(t),WAr=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kve=n(NQ,"CODE",{});var eFt=s(kve);QAr=r(eFt,"from_pretrained()"),eFt.forEach(t),HAr=r(NQ,"to load the model weights."),NQ.forEach(t),UAr=i(Mi),Rve=n(Mi,"P",{});var oFt=s(Rve);JAr=r(oFt,"Examples:"),oFt.forEach(t),YAr=i(Mi),m(p7.$$.fragment,Mi),Mi.forEach(t),KAr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(_7.$$.fragment,Sa),ZAr=i(Sa),Sve=n(Sa,"P",{});var rFt=s(Sve);e0r=r(rFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rFt.forEach(t),o0r=i(Sa),Pn=n(Sa,"P",{});var a3=s(Pn);r0r=r(a3,"The model class to instantiate is selected based on the "),Pve=n(a3,"CODE",{});var tFt=s(Pve);t0r=r(tFt,"model_type"),tFt.forEach(t),a0r=r(a3,` property of the config object (either
passed as an argument or loaded from `),$ve=n(a3,"CODE",{});var aFt=s($ve);n0r=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),s0r=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(a3,"CODE",{});var nFt=s(Ive);l0r=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),i0r=r(a3,":"),a3.forEach(t),d0r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);T4=n(Ae,"LI",{});var jxe=s(T4);Nve=n(jxe,"STRONG",{});var sFt=s(Nve);c0r=r(sFt,"albert"),sFt.forEach(t),f0r=r(jxe," \u2014 "),bz=n(jxe,"A",{href:!0});var lFt=s(bz);m0r=r(lFt,"FlaxAlbertForSequenceClassification"),lFt.forEach(t),g0r=r(jxe," (ALBERT model)"),jxe.forEach(t),h0r=i(Ae),F4=n(Ae,"LI",{});var Dxe=s(F4);jve=n(Dxe,"STRONG",{});var iFt=s(jve);p0r=r(iFt,"bart"),iFt.forEach(t),_0r=r(Dxe," \u2014 "),vz=n(Dxe,"A",{href:!0});var dFt=s(vz);u0r=r(dFt,"FlaxBartForSequenceClassification"),dFt.forEach(t),b0r=r(Dxe," (BART model)"),Dxe.forEach(t),v0r=i(Ae),C4=n(Ae,"LI",{});var qxe=s(C4);Dve=n(qxe,"STRONG",{});var cFt=s(Dve);T0r=r(cFt,"bert"),cFt.forEach(t),F0r=r(qxe," \u2014 "),Tz=n(qxe,"A",{href:!0});var fFt=s(Tz);C0r=r(fFt,"FlaxBertForSequenceClassification"),fFt.forEach(t),M0r=r(qxe," (BERT model)"),qxe.forEach(t),E0r=i(Ae),M4=n(Ae,"LI",{});var Gxe=s(M4);qve=n(Gxe,"STRONG",{});var mFt=s(qve);y0r=r(mFt,"big_bird"),mFt.forEach(t),w0r=r(Gxe," \u2014 "),Fz=n(Gxe,"A",{href:!0});var gFt=s(Fz);A0r=r(gFt,"FlaxBigBirdForSequenceClassification"),gFt.forEach(t),L0r=r(Gxe," (BigBird model)"),Gxe.forEach(t),B0r=i(Ae),E4=n(Ae,"LI",{});var Oxe=s(E4);Gve=n(Oxe,"STRONG",{});var hFt=s(Gve);x0r=r(hFt,"distilbert"),hFt.forEach(t),k0r=r(Oxe," \u2014 "),Cz=n(Oxe,"A",{href:!0});var pFt=s(Cz);R0r=r(pFt,"FlaxDistilBertForSequenceClassification"),pFt.forEach(t),S0r=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),P0r=i(Ae),y4=n(Ae,"LI",{});var Xxe=s(y4);Ove=n(Xxe,"STRONG",{});var _Ft=s(Ove);$0r=r(_Ft,"electra"),_Ft.forEach(t),I0r=r(Xxe," \u2014 "),Mz=n(Xxe,"A",{href:!0});var uFt=s(Mz);N0r=r(uFt,"FlaxElectraForSequenceClassification"),uFt.forEach(t),j0r=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),D0r=i(Ae),w4=n(Ae,"LI",{});var Vxe=s(w4);Xve=n(Vxe,"STRONG",{});var bFt=s(Xve);q0r=r(bFt,"mbart"),bFt.forEach(t),G0r=r(Vxe," \u2014 "),Ez=n(Vxe,"A",{href:!0});var vFt=s(Ez);O0r=r(vFt,"FlaxMBartForSequenceClassification"),vFt.forEach(t),X0r=r(Vxe," (mBART model)"),Vxe.forEach(t),V0r=i(Ae),A4=n(Ae,"LI",{});var zxe=s(A4);Vve=n(zxe,"STRONG",{});var TFt=s(Vve);z0r=r(TFt,"roberta"),TFt.forEach(t),W0r=r(zxe," \u2014 "),yz=n(zxe,"A",{href:!0});var FFt=s(yz);Q0r=r(FFt,"FlaxRobertaForSequenceClassification"),FFt.forEach(t),H0r=r(zxe," (RoBERTa model)"),zxe.forEach(t),U0r=i(Ae),L4=n(Ae,"LI",{});var Wxe=s(L4);zve=n(Wxe,"STRONG",{});var CFt=s(zve);J0r=r(CFt,"roformer"),CFt.forEach(t),Y0r=r(Wxe," \u2014 "),wz=n(Wxe,"A",{href:!0});var MFt=s(wz);K0r=r(MFt,"FlaxRoFormerForSequenceClassification"),MFt.forEach(t),Z0r=r(Wxe," (RoFormer model)"),Wxe.forEach(t),eLr=i(Ae),B4=n(Ae,"LI",{});var Qxe=s(B4);Wve=n(Qxe,"STRONG",{});var EFt=s(Wve);oLr=r(EFt,"xlm-roberta"),EFt.forEach(t),rLr=r(Qxe," \u2014 "),Az=n(Qxe,"A",{href:!0});var yFt=s(Az);tLr=r(yFt,"FlaxXLMRobertaForSequenceClassification"),yFt.forEach(t),aLr=r(Qxe," (XLM-RoBERTa model)"),Qxe.forEach(t),Ae.forEach(t),nLr=i(Sa),Qve=n(Sa,"P",{});var wFt=s(Qve);sLr=r(wFt,"Examples:"),wFt.forEach(t),lLr=i(Sa),m(u7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),gSe=i(c),_f=n(c,"H2",{class:!0});var y$e=s(_f);x4=n(y$e,"A",{id:!0,class:!0,href:!0});var AFt=s(x4);Hve=n(AFt,"SPAN",{});var LFt=s(Hve);m(b7.$$.fragment,LFt),LFt.forEach(t),AFt.forEach(t),iLr=i(y$e),Uve=n(y$e,"SPAN",{});var BFt=s(Uve);dLr=r(BFt,"FlaxAutoModelForQuestionAnswering"),BFt.forEach(t),y$e.forEach(t),hSe=i(c),jr=n(c,"DIV",{class:!0});var Ei=s(jr);m(v7.$$.fragment,Ei),cLr=i(Ei),uf=n(Ei,"P",{});var jQ=s(uf);fLr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jve=n(jQ,"CODE",{});var xFt=s(Jve);mLr=r(xFt,"from_pretrained()"),xFt.forEach(t),gLr=r(jQ,"class method or the "),Yve=n(jQ,"CODE",{});var kFt=s(Yve);hLr=r(kFt,"from_config()"),kFt.forEach(t),pLr=r(jQ,`class
method.`),jQ.forEach(t),_Lr=i(Ei),T7=n(Ei,"P",{});var w$e=s(T7);uLr=r(w$e,"This class cannot be instantiated directly using "),Kve=n(w$e,"CODE",{});var RFt=s(Kve);bLr=r(RFt,"__init__()"),RFt.forEach(t),vLr=r(w$e," (throws an error)."),w$e.forEach(t),TLr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(F7.$$.fragment,yi),FLr=i(yi),Zve=n(yi,"P",{});var SFt=s(Zve);CLr=r(SFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SFt.forEach(t),MLr=i(yi),bf=n(yi,"P",{});var DQ=s(bf);ELr=r(DQ,`Note:
Loading a model from its configuration file does `),e6e=n(DQ,"STRONG",{});var PFt=s(e6e);yLr=r(PFt,"not"),PFt.forEach(t),wLr=r(DQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),o6e=n(DQ,"CODE",{});var $Ft=s(o6e);ALr=r($Ft,"from_pretrained()"),$Ft.forEach(t),LLr=r(DQ,"to load the model weights."),DQ.forEach(t),BLr=i(yi),r6e=n(yi,"P",{});var IFt=s(r6e);xLr=r(IFt,"Examples:"),IFt.forEach(t),kLr=i(yi),m(C7.$$.fragment,yi),yi.forEach(t),RLr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(M7.$$.fragment,Pa),SLr=i(Pa),t6e=n(Pa,"P",{});var NFt=s(t6e);PLr=r(NFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NFt.forEach(t),$Lr=i(Pa),$n=n(Pa,"P",{});var n3=s($n);ILr=r(n3,"The model class to instantiate is selected based on the "),a6e=n(n3,"CODE",{});var jFt=s(a6e);NLr=r(jFt,"model_type"),jFt.forEach(t),jLr=r(n3,` property of the config object (either
passed as an argument or loaded from `),n6e=n(n3,"CODE",{});var DFt=s(n6e);DLr=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),qLr=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=n(n3,"CODE",{});var qFt=s(s6e);GLr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),OLr=r(n3,":"),n3.forEach(t),XLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);k4=n(Le,"LI",{});var Hxe=s(k4);l6e=n(Hxe,"STRONG",{});var GFt=s(l6e);VLr=r(GFt,"albert"),GFt.forEach(t),zLr=r(Hxe," \u2014 "),Lz=n(Hxe,"A",{href:!0});var OFt=s(Lz);WLr=r(OFt,"FlaxAlbertForQuestionAnswering"),OFt.forEach(t),QLr=r(Hxe," (ALBERT model)"),Hxe.forEach(t),HLr=i(Le),R4=n(Le,"LI",{});var Uxe=s(R4);i6e=n(Uxe,"STRONG",{});var XFt=s(i6e);ULr=r(XFt,"bart"),XFt.forEach(t),JLr=r(Uxe," \u2014 "),Bz=n(Uxe,"A",{href:!0});var VFt=s(Bz);YLr=r(VFt,"FlaxBartForQuestionAnswering"),VFt.forEach(t),KLr=r(Uxe," (BART model)"),Uxe.forEach(t),ZLr=i(Le),S4=n(Le,"LI",{});var Jxe=s(S4);d6e=n(Jxe,"STRONG",{});var zFt=s(d6e);e7r=r(zFt,"bert"),zFt.forEach(t),o7r=r(Jxe," \u2014 "),xz=n(Jxe,"A",{href:!0});var WFt=s(xz);r7r=r(WFt,"FlaxBertForQuestionAnswering"),WFt.forEach(t),t7r=r(Jxe," (BERT model)"),Jxe.forEach(t),a7r=i(Le),P4=n(Le,"LI",{});var Yxe=s(P4);c6e=n(Yxe,"STRONG",{});var QFt=s(c6e);n7r=r(QFt,"big_bird"),QFt.forEach(t),s7r=r(Yxe," \u2014 "),kz=n(Yxe,"A",{href:!0});var HFt=s(kz);l7r=r(HFt,"FlaxBigBirdForQuestionAnswering"),HFt.forEach(t),i7r=r(Yxe," (BigBird model)"),Yxe.forEach(t),d7r=i(Le),$4=n(Le,"LI",{});var Kxe=s($4);f6e=n(Kxe,"STRONG",{});var UFt=s(f6e);c7r=r(UFt,"distilbert"),UFt.forEach(t),f7r=r(Kxe," \u2014 "),Rz=n(Kxe,"A",{href:!0});var JFt=s(Rz);m7r=r(JFt,"FlaxDistilBertForQuestionAnswering"),JFt.forEach(t),g7r=r(Kxe," (DistilBERT model)"),Kxe.forEach(t),h7r=i(Le),I4=n(Le,"LI",{});var Zxe=s(I4);m6e=n(Zxe,"STRONG",{});var YFt=s(m6e);p7r=r(YFt,"electra"),YFt.forEach(t),_7r=r(Zxe," \u2014 "),Sz=n(Zxe,"A",{href:!0});var KFt=s(Sz);u7r=r(KFt,"FlaxElectraForQuestionAnswering"),KFt.forEach(t),b7r=r(Zxe," (ELECTRA model)"),Zxe.forEach(t),v7r=i(Le),N4=n(Le,"LI",{});var eke=s(N4);g6e=n(eke,"STRONG",{});var ZFt=s(g6e);T7r=r(ZFt,"mbart"),ZFt.forEach(t),F7r=r(eke," \u2014 "),Pz=n(eke,"A",{href:!0});var eCt=s(Pz);C7r=r(eCt,"FlaxMBartForQuestionAnswering"),eCt.forEach(t),M7r=r(eke," (mBART model)"),eke.forEach(t),E7r=i(Le),j4=n(Le,"LI",{});var oke=s(j4);h6e=n(oke,"STRONG",{});var oCt=s(h6e);y7r=r(oCt,"roberta"),oCt.forEach(t),w7r=r(oke," \u2014 "),$z=n(oke,"A",{href:!0});var rCt=s($z);A7r=r(rCt,"FlaxRobertaForQuestionAnswering"),rCt.forEach(t),L7r=r(oke," (RoBERTa model)"),oke.forEach(t),B7r=i(Le),D4=n(Le,"LI",{});var rke=s(D4);p6e=n(rke,"STRONG",{});var tCt=s(p6e);x7r=r(tCt,"roformer"),tCt.forEach(t),k7r=r(rke," \u2014 "),Iz=n(rke,"A",{href:!0});var aCt=s(Iz);R7r=r(aCt,"FlaxRoFormerForQuestionAnswering"),aCt.forEach(t),S7r=r(rke," (RoFormer model)"),rke.forEach(t),P7r=i(Le),q4=n(Le,"LI",{});var tke=s(q4);_6e=n(tke,"STRONG",{});var nCt=s(_6e);$7r=r(nCt,"xlm-roberta"),nCt.forEach(t),I7r=r(tke," \u2014 "),Nz=n(tke,"A",{href:!0});var sCt=s(Nz);N7r=r(sCt,"FlaxXLMRobertaForQuestionAnswering"),sCt.forEach(t),j7r=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),Le.forEach(t),D7r=i(Pa),u6e=n(Pa,"P",{});var lCt=s(u6e);q7r=r(lCt,"Examples:"),lCt.forEach(t),G7r=i(Pa),m(E7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),pSe=i(c),vf=n(c,"H2",{class:!0});var A$e=s(vf);G4=n(A$e,"A",{id:!0,class:!0,href:!0});var iCt=s(G4);b6e=n(iCt,"SPAN",{});var dCt=s(b6e);m(y7.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),O7r=i(A$e),v6e=n(A$e,"SPAN",{});var cCt=s(v6e);X7r=r(cCt,"FlaxAutoModelForTokenClassification"),cCt.forEach(t),A$e.forEach(t),_Se=i(c),Dr=n(c,"DIV",{class:!0});var wi=s(Dr);m(w7.$$.fragment,wi),V7r=i(wi),Tf=n(wi,"P",{});var qQ=s(Tf);z7r=r(qQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),T6e=n(qQ,"CODE",{});var fCt=s(T6e);W7r=r(fCt,"from_pretrained()"),fCt.forEach(t),Q7r=r(qQ,"class method or the "),F6e=n(qQ,"CODE",{});var mCt=s(F6e);H7r=r(mCt,"from_config()"),mCt.forEach(t),U7r=r(qQ,`class
method.`),qQ.forEach(t),J7r=i(wi),A7=n(wi,"P",{});var L$e=s(A7);Y7r=r(L$e,"This class cannot be instantiated directly using "),C6e=n(L$e,"CODE",{});var gCt=s(C6e);K7r=r(gCt,"__init__()"),gCt.forEach(t),Z7r=r(L$e," (throws an error)."),L$e.forEach(t),e8r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(L7.$$.fragment,Ai),o8r=i(Ai),M6e=n(Ai,"P",{});var hCt=s(M6e);r8r=r(hCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hCt.forEach(t),t8r=i(Ai),Ff=n(Ai,"P",{});var GQ=s(Ff);a8r=r(GQ,`Note:
Loading a model from its configuration file does `),E6e=n(GQ,"STRONG",{});var pCt=s(E6e);n8r=r(pCt,"not"),pCt.forEach(t),s8r=r(GQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),y6e=n(GQ,"CODE",{});var _Ct=s(y6e);l8r=r(_Ct,"from_pretrained()"),_Ct.forEach(t),i8r=r(GQ,"to load the model weights."),GQ.forEach(t),d8r=i(Ai),w6e=n(Ai,"P",{});var uCt=s(w6e);c8r=r(uCt,"Examples:"),uCt.forEach(t),f8r=i(Ai),m(B7.$$.fragment,Ai),Ai.forEach(t),m8r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(x7.$$.fragment,$a),g8r=i($a),A6e=n($a,"P",{});var bCt=s(A6e);h8r=r(bCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bCt.forEach(t),p8r=i($a),In=n($a,"P",{});var s3=s(In);_8r=r(s3,"The model class to instantiate is selected based on the "),L6e=n(s3,"CODE",{});var vCt=s(L6e);u8r=r(vCt,"model_type"),vCt.forEach(t),b8r=r(s3,` property of the config object (either
passed as an argument or loaded from `),B6e=n(s3,"CODE",{});var TCt=s(B6e);v8r=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),T8r=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(s3,"CODE",{});var FCt=s(x6e);F8r=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),C8r=r(s3,":"),s3.forEach(t),M8r=i($a),Se=n($a,"UL",{});var Oo=s(Se);O4=n(Oo,"LI",{});var ake=s(O4);k6e=n(ake,"STRONG",{});var CCt=s(k6e);E8r=r(CCt,"albert"),CCt.forEach(t),y8r=r(ake," \u2014 "),jz=n(ake,"A",{href:!0});var MCt=s(jz);w8r=r(MCt,"FlaxAlbertForTokenClassification"),MCt.forEach(t),A8r=r(ake," (ALBERT model)"),ake.forEach(t),L8r=i(Oo),X4=n(Oo,"LI",{});var nke=s(X4);R6e=n(nke,"STRONG",{});var ECt=s(R6e);B8r=r(ECt,"bert"),ECt.forEach(t),x8r=r(nke," \u2014 "),Dz=n(nke,"A",{href:!0});var yCt=s(Dz);k8r=r(yCt,"FlaxBertForTokenClassification"),yCt.forEach(t),R8r=r(nke," (BERT model)"),nke.forEach(t),S8r=i(Oo),V4=n(Oo,"LI",{});var ske=s(V4);S6e=n(ske,"STRONG",{});var wCt=s(S6e);P8r=r(wCt,"big_bird"),wCt.forEach(t),$8r=r(ske," \u2014 "),qz=n(ske,"A",{href:!0});var ACt=s(qz);I8r=r(ACt,"FlaxBigBirdForTokenClassification"),ACt.forEach(t),N8r=r(ske," (BigBird model)"),ske.forEach(t),j8r=i(Oo),z4=n(Oo,"LI",{});var lke=s(z4);P6e=n(lke,"STRONG",{});var LCt=s(P6e);D8r=r(LCt,"distilbert"),LCt.forEach(t),q8r=r(lke," \u2014 "),Gz=n(lke,"A",{href:!0});var BCt=s(Gz);G8r=r(BCt,"FlaxDistilBertForTokenClassification"),BCt.forEach(t),O8r=r(lke," (DistilBERT model)"),lke.forEach(t),X8r=i(Oo),W4=n(Oo,"LI",{});var ike=s(W4);$6e=n(ike,"STRONG",{});var xCt=s($6e);V8r=r(xCt,"electra"),xCt.forEach(t),z8r=r(ike," \u2014 "),Oz=n(ike,"A",{href:!0});var kCt=s(Oz);W8r=r(kCt,"FlaxElectraForTokenClassification"),kCt.forEach(t),Q8r=r(ike," (ELECTRA model)"),ike.forEach(t),H8r=i(Oo),Q4=n(Oo,"LI",{});var dke=s(Q4);I6e=n(dke,"STRONG",{});var RCt=s(I6e);U8r=r(RCt,"roberta"),RCt.forEach(t),J8r=r(dke," \u2014 "),Xz=n(dke,"A",{href:!0});var SCt=s(Xz);Y8r=r(SCt,"FlaxRobertaForTokenClassification"),SCt.forEach(t),K8r=r(dke," (RoBERTa model)"),dke.forEach(t),Z8r=i(Oo),H4=n(Oo,"LI",{});var cke=s(H4);N6e=n(cke,"STRONG",{});var PCt=s(N6e);e9r=r(PCt,"roformer"),PCt.forEach(t),o9r=r(cke," \u2014 "),Vz=n(cke,"A",{href:!0});var $Ct=s(Vz);r9r=r($Ct,"FlaxRoFormerForTokenClassification"),$Ct.forEach(t),t9r=r(cke," (RoFormer model)"),cke.forEach(t),a9r=i(Oo),U4=n(Oo,"LI",{});var fke=s(U4);j6e=n(fke,"STRONG",{});var ICt=s(j6e);n9r=r(ICt,"xlm-roberta"),ICt.forEach(t),s9r=r(fke," \u2014 "),zz=n(fke,"A",{href:!0});var NCt=s(zz);l9r=r(NCt,"FlaxXLMRobertaForTokenClassification"),NCt.forEach(t),i9r=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),Oo.forEach(t),d9r=i($a),D6e=n($a,"P",{});var jCt=s(D6e);c9r=r(jCt,"Examples:"),jCt.forEach(t),f9r=i($a),m(k7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),uSe=i(c),Cf=n(c,"H2",{class:!0});var B$e=s(Cf);J4=n(B$e,"A",{id:!0,class:!0,href:!0});var DCt=s(J4);q6e=n(DCt,"SPAN",{});var qCt=s(q6e);m(R7.$$.fragment,qCt),qCt.forEach(t),DCt.forEach(t),m9r=i(B$e),G6e=n(B$e,"SPAN",{});var GCt=s(G6e);g9r=r(GCt,"FlaxAutoModelForMultipleChoice"),GCt.forEach(t),B$e.forEach(t),bSe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(S7.$$.fragment,Li),h9r=i(Li),Mf=n(Li,"P",{});var OQ=s(Mf);p9r=r(OQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),O6e=n(OQ,"CODE",{});var OCt=s(O6e);_9r=r(OCt,"from_pretrained()"),OCt.forEach(t),u9r=r(OQ,"class method or the "),X6e=n(OQ,"CODE",{});var XCt=s(X6e);b9r=r(XCt,"from_config()"),XCt.forEach(t),v9r=r(OQ,`class
method.`),OQ.forEach(t),T9r=i(Li),P7=n(Li,"P",{});var x$e=s(P7);F9r=r(x$e,"This class cannot be instantiated directly using "),V6e=n(x$e,"CODE",{});var VCt=s(V6e);C9r=r(VCt,"__init__()"),VCt.forEach(t),M9r=r(x$e," (throws an error)."),x$e.forEach(t),E9r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m($7.$$.fragment,Bi),y9r=i(Bi),z6e=n(Bi,"P",{});var zCt=s(z6e);w9r=r(zCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zCt.forEach(t),A9r=i(Bi),Ef=n(Bi,"P",{});var XQ=s(Ef);L9r=r(XQ,`Note:
Loading a model from its configuration file does `),W6e=n(XQ,"STRONG",{});var WCt=s(W6e);B9r=r(WCt,"not"),WCt.forEach(t),x9r=r(XQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q6e=n(XQ,"CODE",{});var QCt=s(Q6e);k9r=r(QCt,"from_pretrained()"),QCt.forEach(t),R9r=r(XQ,"to load the model weights."),XQ.forEach(t),S9r=i(Bi),H6e=n(Bi,"P",{});var HCt=s(H6e);P9r=r(HCt,"Examples:"),HCt.forEach(t),$9r=i(Bi),m(I7.$$.fragment,Bi),Bi.forEach(t),I9r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(N7.$$.fragment,Ia),N9r=i(Ia),U6e=n(Ia,"P",{});var UCt=s(U6e);j9r=r(UCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UCt.forEach(t),D9r=i(Ia),Nn=n(Ia,"P",{});var l3=s(Nn);q9r=r(l3,"The model class to instantiate is selected based on the "),J6e=n(l3,"CODE",{});var JCt=s(J6e);G9r=r(JCt,"model_type"),JCt.forEach(t),O9r=r(l3,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(l3,"CODE",{});var YCt=s(Y6e);X9r=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),V9r=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(l3,"CODE",{});var KCt=s(K6e);z9r=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),W9r=r(l3,":"),l3.forEach(t),Q9r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);Y4=n(Xo,"LI",{});var mke=s(Y4);Z6e=n(mke,"STRONG",{});var ZCt=s(Z6e);H9r=r(ZCt,"albert"),ZCt.forEach(t),U9r=r(mke," \u2014 "),Wz=n(mke,"A",{href:!0});var eMt=s(Wz);J9r=r(eMt,"FlaxAlbertForMultipleChoice"),eMt.forEach(t),Y9r=r(mke," (ALBERT model)"),mke.forEach(t),K9r=i(Xo),K4=n(Xo,"LI",{});var gke=s(K4);eTe=n(gke,"STRONG",{});var oMt=s(eTe);Z9r=r(oMt,"bert"),oMt.forEach(t),eBr=r(gke," \u2014 "),Qz=n(gke,"A",{href:!0});var rMt=s(Qz);oBr=r(rMt,"FlaxBertForMultipleChoice"),rMt.forEach(t),rBr=r(gke," (BERT model)"),gke.forEach(t),tBr=i(Xo),Z4=n(Xo,"LI",{});var hke=s(Z4);oTe=n(hke,"STRONG",{});var tMt=s(oTe);aBr=r(tMt,"big_bird"),tMt.forEach(t),nBr=r(hke," \u2014 "),Hz=n(hke,"A",{href:!0});var aMt=s(Hz);sBr=r(aMt,"FlaxBigBirdForMultipleChoice"),aMt.forEach(t),lBr=r(hke," (BigBird model)"),hke.forEach(t),iBr=i(Xo),eE=n(Xo,"LI",{});var pke=s(eE);rTe=n(pke,"STRONG",{});var nMt=s(rTe);dBr=r(nMt,"distilbert"),nMt.forEach(t),cBr=r(pke," \u2014 "),Uz=n(pke,"A",{href:!0});var sMt=s(Uz);fBr=r(sMt,"FlaxDistilBertForMultipleChoice"),sMt.forEach(t),mBr=r(pke," (DistilBERT model)"),pke.forEach(t),gBr=i(Xo),oE=n(Xo,"LI",{});var _ke=s(oE);tTe=n(_ke,"STRONG",{});var lMt=s(tTe);hBr=r(lMt,"electra"),lMt.forEach(t),pBr=r(_ke," \u2014 "),Jz=n(_ke,"A",{href:!0});var iMt=s(Jz);_Br=r(iMt,"FlaxElectraForMultipleChoice"),iMt.forEach(t),uBr=r(_ke," (ELECTRA model)"),_ke.forEach(t),bBr=i(Xo),rE=n(Xo,"LI",{});var uke=s(rE);aTe=n(uke,"STRONG",{});var dMt=s(aTe);vBr=r(dMt,"roberta"),dMt.forEach(t),TBr=r(uke," \u2014 "),Yz=n(uke,"A",{href:!0});var cMt=s(Yz);FBr=r(cMt,"FlaxRobertaForMultipleChoice"),cMt.forEach(t),CBr=r(uke," (RoBERTa model)"),uke.forEach(t),MBr=i(Xo),tE=n(Xo,"LI",{});var bke=s(tE);nTe=n(bke,"STRONG",{});var fMt=s(nTe);EBr=r(fMt,"roformer"),fMt.forEach(t),yBr=r(bke," \u2014 "),Kz=n(bke,"A",{href:!0});var mMt=s(Kz);wBr=r(mMt,"FlaxRoFormerForMultipleChoice"),mMt.forEach(t),ABr=r(bke," (RoFormer model)"),bke.forEach(t),LBr=i(Xo),aE=n(Xo,"LI",{});var vke=s(aE);sTe=n(vke,"STRONG",{});var gMt=s(sTe);BBr=r(gMt,"xlm-roberta"),gMt.forEach(t),xBr=r(vke," \u2014 "),Zz=n(vke,"A",{href:!0});var hMt=s(Zz);kBr=r(hMt,"FlaxXLMRobertaForMultipleChoice"),hMt.forEach(t),RBr=r(vke," (XLM-RoBERTa model)"),vke.forEach(t),Xo.forEach(t),SBr=i(Ia),lTe=n(Ia,"P",{});var pMt=s(lTe);PBr=r(pMt,"Examples:"),pMt.forEach(t),$Br=i(Ia),m(j7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),vSe=i(c),yf=n(c,"H2",{class:!0});var k$e=s(yf);nE=n(k$e,"A",{id:!0,class:!0,href:!0});var _Mt=s(nE);iTe=n(_Mt,"SPAN",{});var uMt=s(iTe);m(D7.$$.fragment,uMt),uMt.forEach(t),_Mt.forEach(t),IBr=i(k$e),dTe=n(k$e,"SPAN",{});var bMt=s(dTe);NBr=r(bMt,"FlaxAutoModelForNextSentencePrediction"),bMt.forEach(t),k$e.forEach(t),TSe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(q7.$$.fragment,xi),jBr=i(xi),wf=n(xi,"P",{});var VQ=s(wf);DBr=r(VQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cTe=n(VQ,"CODE",{});var vMt=s(cTe);qBr=r(vMt,"from_pretrained()"),vMt.forEach(t),GBr=r(VQ,"class method or the "),fTe=n(VQ,"CODE",{});var TMt=s(fTe);OBr=r(TMt,"from_config()"),TMt.forEach(t),XBr=r(VQ,`class
method.`),VQ.forEach(t),VBr=i(xi),G7=n(xi,"P",{});var R$e=s(G7);zBr=r(R$e,"This class cannot be instantiated directly using "),mTe=n(R$e,"CODE",{});var FMt=s(mTe);WBr=r(FMt,"__init__()"),FMt.forEach(t),QBr=r(R$e," (throws an error)."),R$e.forEach(t),HBr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(O7.$$.fragment,ki),UBr=i(ki),gTe=n(ki,"P",{});var CMt=s(gTe);JBr=r(CMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CMt.forEach(t),YBr=i(ki),Af=n(ki,"P",{});var zQ=s(Af);KBr=r(zQ,`Note:
Loading a model from its configuration file does `),hTe=n(zQ,"STRONG",{});var MMt=s(hTe);ZBr=r(MMt,"not"),MMt.forEach(t),exr=r(zQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pTe=n(zQ,"CODE",{});var EMt=s(pTe);oxr=r(EMt,"from_pretrained()"),EMt.forEach(t),rxr=r(zQ,"to load the model weights."),zQ.forEach(t),txr=i(ki),_Te=n(ki,"P",{});var yMt=s(_Te);axr=r(yMt,"Examples:"),yMt.forEach(t),nxr=i(ki),m(X7.$$.fragment,ki),ki.forEach(t),sxr=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);m(V7.$$.fragment,Na),lxr=i(Na),uTe=n(Na,"P",{});var wMt=s(uTe);ixr=r(wMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wMt.forEach(t),dxr=i(Na),jn=n(Na,"P",{});var i3=s(jn);cxr=r(i3,"The model class to instantiate is selected based on the "),bTe=n(i3,"CODE",{});var AMt=s(bTe);fxr=r(AMt,"model_type"),AMt.forEach(t),mxr=r(i3,` property of the config object (either
passed as an argument or loaded from `),vTe=n(i3,"CODE",{});var LMt=s(vTe);gxr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),hxr=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(i3,"CODE",{});var BMt=s(TTe);pxr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),_xr=r(i3,":"),i3.forEach(t),uxr=i(Na),FTe=n(Na,"UL",{});var xMt=s(FTe);sE=n(xMt,"LI",{});var Tke=s(sE);CTe=n(Tke,"STRONG",{});var kMt=s(CTe);bxr=r(kMt,"bert"),kMt.forEach(t),vxr=r(Tke," \u2014 "),eW=n(Tke,"A",{href:!0});var RMt=s(eW);Txr=r(RMt,"FlaxBertForNextSentencePrediction"),RMt.forEach(t),Fxr=r(Tke," (BERT model)"),Tke.forEach(t),xMt.forEach(t),Cxr=i(Na),MTe=n(Na,"P",{});var SMt=s(MTe);Mxr=r(SMt,"Examples:"),SMt.forEach(t),Exr=i(Na),m(z7.$$.fragment,Na),Na.forEach(t),xi.forEach(t),FSe=i(c),Lf=n(c,"H2",{class:!0});var S$e=s(Lf);lE=n(S$e,"A",{id:!0,class:!0,href:!0});var PMt=s(lE);ETe=n(PMt,"SPAN",{});var $Mt=s(ETe);m(W7.$$.fragment,$Mt),$Mt.forEach(t),PMt.forEach(t),yxr=i(S$e),yTe=n(S$e,"SPAN",{});var IMt=s(yTe);wxr=r(IMt,"FlaxAutoModelForImageClassification"),IMt.forEach(t),S$e.forEach(t),CSe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(Q7.$$.fragment,Ri),Axr=i(Ri),Bf=n(Ri,"P",{});var WQ=s(Bf);Lxr=r(WQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wTe=n(WQ,"CODE",{});var NMt=s(wTe);Bxr=r(NMt,"from_pretrained()"),NMt.forEach(t),xxr=r(WQ,"class method or the "),ATe=n(WQ,"CODE",{});var jMt=s(ATe);kxr=r(jMt,"from_config()"),jMt.forEach(t),Rxr=r(WQ,`class
method.`),WQ.forEach(t),Sxr=i(Ri),H7=n(Ri,"P",{});var P$e=s(H7);Pxr=r(P$e,"This class cannot be instantiated directly using "),LTe=n(P$e,"CODE",{});var DMt=s(LTe);$xr=r(DMt,"__init__()"),DMt.forEach(t),Ixr=r(P$e," (throws an error)."),P$e.forEach(t),Nxr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(U7.$$.fragment,Si),jxr=i(Si),BTe=n(Si,"P",{});var qMt=s(BTe);Dxr=r(qMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qMt.forEach(t),qxr=i(Si),xf=n(Si,"P",{});var QQ=s(xf);Gxr=r(QQ,`Note:
Loading a model from its configuration file does `),xTe=n(QQ,"STRONG",{});var GMt=s(xTe);Oxr=r(GMt,"not"),GMt.forEach(t),Xxr=r(QQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kTe=n(QQ,"CODE",{});var OMt=s(kTe);Vxr=r(OMt,"from_pretrained()"),OMt.forEach(t),zxr=r(QQ,"to load the model weights."),QQ.forEach(t),Wxr=i(Si),RTe=n(Si,"P",{});var XMt=s(RTe);Qxr=r(XMt,"Examples:"),XMt.forEach(t),Hxr=i(Si),m(J7.$$.fragment,Si),Si.forEach(t),Uxr=i(Ri),No=n(Ri,"DIV",{class:!0});var ja=s(No);m(Y7.$$.fragment,ja),Jxr=i(ja),STe=n(ja,"P",{});var VMt=s(STe);Yxr=r(VMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VMt.forEach(t),Kxr=i(ja),Dn=n(ja,"P",{});var d3=s(Dn);Zxr=r(d3,"The model class to instantiate is selected based on the "),PTe=n(d3,"CODE",{});var zMt=s(PTe);ekr=r(zMt,"model_type"),zMt.forEach(t),okr=r(d3,` property of the config object (either
passed as an argument or loaded from `),$Te=n(d3,"CODE",{});var WMt=s($Te);rkr=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),tkr=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(d3,"CODE",{});var QMt=s(ITe);akr=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),nkr=r(d3,":"),d3.forEach(t),skr=i(ja),K7=n(ja,"UL",{});var $$e=s(K7);iE=n($$e,"LI",{});var Fke=s(iE);NTe=n(Fke,"STRONG",{});var HMt=s(NTe);lkr=r(HMt,"beit"),HMt.forEach(t),ikr=r(Fke," \u2014 "),oW=n(Fke,"A",{href:!0});var UMt=s(oW);dkr=r(UMt,"FlaxBeitForImageClassification"),UMt.forEach(t),ckr=r(Fke," (BEiT model)"),Fke.forEach(t),fkr=i($$e),dE=n($$e,"LI",{});var Cke=s(dE);jTe=n(Cke,"STRONG",{});var JMt=s(jTe);mkr=r(JMt,"vit"),JMt.forEach(t),gkr=r(Cke," \u2014 "),rW=n(Cke,"A",{href:!0});var YMt=s(rW);hkr=r(YMt,"FlaxViTForImageClassification"),YMt.forEach(t),pkr=r(Cke," (ViT model)"),Cke.forEach(t),$$e.forEach(t),_kr=i(ja),DTe=n(ja,"P",{});var KMt=s(DTe);ukr=r(KMt,"Examples:"),KMt.forEach(t),bkr=i(ja),m(Z7.$$.fragment,ja),ja.forEach(t),Ri.forEach(t),MSe=i(c),kf=n(c,"H2",{class:!0});var I$e=s(kf);cE=n(I$e,"A",{id:!0,class:!0,href:!0});var ZMt=s(cE);qTe=n(ZMt,"SPAN",{});var e4t=s(qTe);m(e8.$$.fragment,e4t),e4t.forEach(t),ZMt.forEach(t),vkr=i(I$e),GTe=n(I$e,"SPAN",{});var o4t=s(GTe);Tkr=r(o4t,"FlaxAutoModelForVision2Seq"),o4t.forEach(t),I$e.forEach(t),ESe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(o8.$$.fragment,Pi),Fkr=i(Pi),Rf=n(Pi,"P",{});var HQ=s(Rf);Ckr=r(HQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OTe=n(HQ,"CODE",{});var r4t=s(OTe);Mkr=r(r4t,"from_pretrained()"),r4t.forEach(t),Ekr=r(HQ,"class method or the "),XTe=n(HQ,"CODE",{});var t4t=s(XTe);ykr=r(t4t,"from_config()"),t4t.forEach(t),wkr=r(HQ,`class
method.`),HQ.forEach(t),Akr=i(Pi),r8=n(Pi,"P",{});var N$e=s(r8);Lkr=r(N$e,"This class cannot be instantiated directly using "),VTe=n(N$e,"CODE",{});var a4t=s(VTe);Bkr=r(a4t,"__init__()"),a4t.forEach(t),xkr=r(N$e," (throws an error)."),N$e.forEach(t),kkr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);m(t8.$$.fragment,$i),Rkr=i($i),zTe=n($i,"P",{});var n4t=s(zTe);Skr=r(n4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),n4t.forEach(t),Pkr=i($i),Sf=n($i,"P",{});var UQ=s(Sf);$kr=r(UQ,`Note:
Loading a model from its configuration file does `),WTe=n(UQ,"STRONG",{});var s4t=s(WTe);Ikr=r(s4t,"not"),s4t.forEach(t),Nkr=r(UQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QTe=n(UQ,"CODE",{});var l4t=s(QTe);jkr=r(l4t,"from_pretrained()"),l4t.forEach(t),Dkr=r(UQ,"to load the model weights."),UQ.forEach(t),qkr=i($i),HTe=n($i,"P",{});var i4t=s(HTe);Gkr=r(i4t,"Examples:"),i4t.forEach(t),Okr=i($i),m(a8.$$.fragment,$i),$i.forEach(t),Xkr=i(Pi),jo=n(Pi,"DIV",{class:!0});var Da=s(jo);m(n8.$$.fragment,Da),Vkr=i(Da),UTe=n(Da,"P",{});var d4t=s(UTe);zkr=r(d4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d4t.forEach(t),Wkr=i(Da),qn=n(Da,"P",{});var c3=s(qn);Qkr=r(c3,"The model class to instantiate is selected based on the "),JTe=n(c3,"CODE",{});var c4t=s(JTe);Hkr=r(c4t,"model_type"),c4t.forEach(t),Ukr=r(c3,` property of the config object (either
passed as an argument or loaded from `),YTe=n(c3,"CODE",{});var f4t=s(YTe);Jkr=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),Ykr=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(c3,"CODE",{});var m4t=s(KTe);Kkr=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),Zkr=r(c3,":"),c3.forEach(t),eRr=i(Da),ZTe=n(Da,"UL",{});var g4t=s(ZTe);fE=n(g4t,"LI",{});var Mke=s(fE);eFe=n(Mke,"STRONG",{});var h4t=s(eFe);oRr=r(h4t,"vision-encoder-decoder"),h4t.forEach(t),rRr=r(Mke," \u2014 "),tW=n(Mke,"A",{href:!0});var p4t=s(tW);tRr=r(p4t,"FlaxVisionEncoderDecoderModel"),p4t.forEach(t),aRr=r(Mke," (Vision Encoder decoder model)"),Mke.forEach(t),g4t.forEach(t),nRr=i(Da),oFe=n(Da,"P",{});var _4t=s(oFe);sRr=r(_4t,"Examples:"),_4t.forEach(t),lRr=i(Da),m(s8.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(w4t)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(c9,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(f9,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertConfig"),d(m9,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartConfig"),d(g9,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitConfig"),d(h9,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertConfig"),d(p9,"href","/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(_9,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdConfig"),d(u9,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(b9,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(v9,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(T9,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertConfig"),d(F9,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineConfig"),d(C9,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPConfig"),d(M9,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertConfig"),d(E9,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextConfig"),d(y9,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLConfig"),d(w9,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(A9,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(L9,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaConfig"),d(B9,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(x9,"href","/docs/transformers/pr_16255/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(k9,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTConfig"),d(R9,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrConfig"),d(S9,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertConfig"),d(P9,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRConfig"),d($9,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraConfig"),d(I9,"href","/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(N9,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertConfig"),d(j9,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetConfig"),d(D9,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTConfig"),d(q9,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelConfig"),d(G9,"href","/docs/transformers/pr_16255/en/model_doc/glpn#transformers.GLPNConfig"),d(O9,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Config"),d(X9,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(V9,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJConfig"),d(z9,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertConfig"),d(W9,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertConfig"),d(Q9,"href","/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(H9,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(U9,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(J9,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDConfig"),d(Y9,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerConfig"),d(K9,"href","/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeConfig"),d(Z9,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertConfig"),d(eB,"href","/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Config"),d(oB,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianConfig"),d(rB,"href","/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(tB,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartConfig"),d(aB,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(nB,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(sB,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetConfig"),d(lB,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Config"),d(iB,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(dB,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(cB,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusConfig"),d(fB,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverConfig"),d(mB,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartConfig"),d(gB,"href","/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(hB,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(pB,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(_B,"href","/docs/transformers/pr_16255/en/model_doc/rag#transformers.RagConfig"),d(uB,"href","/docs/transformers/pr_16255/en/model_doc/realm#transformers.RealmConfig"),d(bB,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerConfig"),d(vB,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertConfig"),d(TB,"href","/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetConfig"),d(FB,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertConfig"),d(CB,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaConfig"),d(MB,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerConfig"),d(EB,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerConfig"),d(yB,"href","/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWConfig"),d(wB,"href","/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDConfig"),d(AB,"href","/docs/transformers/pr_16255/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(LB,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(BB,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(xB,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterConfig"),d(kB,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(RB,"href","/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinConfig"),d(SB,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Config"),d(PB,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasConfig"),d($B,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(IB,"href","/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRConfig"),d(NB,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(jB,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(DB,"href","/docs/transformers/pr_16255/en/model_doc/van#transformers.VanConfig"),d(qB,"href","/docs/transformers/pr_16255/en/model_doc/vilt#transformers.ViltConfig"),d(GB,"href","/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(OB,"href","/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(XB,"href","/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(VB,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTConfig"),d(zB,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(WB,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(QB,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMConfig"),d(HB,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMConfig"),d(UB,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMConfig"),d(JB,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(YB,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(KB,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ZB,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetConfig"),d(ex,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Sg,"class","docstring"),d(Wo,"class","docstring"),d(Pg,"id","transformers.AutoTokenizer"),d(Pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(ox,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(rx,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertTokenizer"),d(tx,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ax,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartTokenizer"),d(nx,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartTokenizerFast"),d(sx,"href","/docs/transformers/pr_16255/en/model_doc/barthez#transformers.BarthezTokenizer"),d(lx,"href","/docs/transformers/pr_16255/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(ix,"href","/docs/transformers/pr_16255/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(dx,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertTokenizer"),d(cx,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertTokenizerFast"),d(fx,"href","/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(mx,"href","/docs/transformers/pr_16255/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(gx,"href","/docs/transformers/pr_16255/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(hx,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(px,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(_x,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(ux,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(bx,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(vx,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Tx,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Fx,"href","/docs/transformers/pr_16255/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Cx,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Mx,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Ex,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineTokenizer"),d(yx,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPTokenizer"),d(wx,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Ax,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Lx,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Bx,"href","/docs/transformers/pr_16255/en/model_doc/cpm#transformers.CpmTokenizer"),d(xx,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(kx,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Rx,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Sx,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Px,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d($x,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Ix,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Nx,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(jx,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraTokenizer"),d(Dx,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(qx,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Gx,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetTokenizer"),d(Ox,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Xx,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Vx,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelTokenizer"),d(zx,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Wx,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Qx,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Hx,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Ux,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Jx,"href","/docs/transformers/pr_16255/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Yx,"href","/docs/transformers/pr_16255/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Kx,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Zx,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ek,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ok,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(rk,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(tk,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(ak,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(nk,"href","/docs/transformers/pr_16255/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(sk,"href","/docs/transformers/pr_16255/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(lk,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDTokenizer"),d(ik,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDTokenizerFast"),d(dk,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerTokenizer"),d(ck,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(fk,"href","/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeTokenizer"),d(mk,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(gk,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(hk,"href","/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(pk,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianTokenizer"),d(_k,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartTokenizer"),d(uk,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(bk,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(vk,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(Tk,"href","/docs/transformers/pr_16255/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Fk,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Ck,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Ek,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(yk,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.T5Tokenizer"),d(wk,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Ak,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Lk,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(xk,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(kk,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Rk,"href","/docs/transformers/pr_16255/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Sk,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Pk,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d($k,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertTokenizer"),d(Ik,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16255/en/model_doc/rag#transformers.RagTokenizer"),d(jk,"href","/docs/transformers/pr_16255/en/model_doc/realm#transformers.RealmTokenizer"),d(Dk,"href","/docs/transformers/pr_16255/en/model_doc/realm#transformers.RealmTokenizerFast"),d(qk,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Gk,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Xk,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(zk,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Qk,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Uk,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Yk,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Kk,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Zk,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(eR,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(oR,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(rR,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.T5Tokenizer"),d(tR,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.T5TokenizerFast"),d(aR,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasTokenizer"),d(nR,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(sR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(lR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(iR,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMTokenizer"),d(dR,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(cR,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMTokenizer"),d(fR,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(mR,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(gR,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(hR,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(pR,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ch,"class","docstring"),d(Qo,"class","docstring"),d(fh,"id","transformers.AutoFeatureExtractor"),d(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(_R,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(uR,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(bR,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(vR,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(FR,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(MR,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(ER,"href","/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(kh,"class","docstring"),d(Ho,"class","docstring"),d(Rh,"id","transformers.AutoProcessor"),d(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d($R,"href","/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(IR,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPProcessor"),d(NR,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(jR,"href","/docs/transformers/pr_16255/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(DR,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(qR,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(GR,"href","/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRProcessor"),d(OR,"href","/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(XR,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Oh,"class","docstring"),d(Uo,"class","docstring"),d(Xh,"id","transformers.AutoModel"),d(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(VR,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertModel"),d(zR,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartModel"),d(WR,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitModel"),d(QR,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertModel"),d(HR,"href","/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(UR,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdModel"),d(JR,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(YR,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(KR,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(ZR,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertModel"),d(eS,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineModel"),d(oS,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.CLIPModel"),d(rS,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertModel"),d(tS,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextModel"),d(aS,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLModel"),d(nS,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(sS,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(lS,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaModel"),d(iS,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(dS,"href","/docs/transformers/pr_16255/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(cS,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTModel"),d(fS,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrModel"),d(mS,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertModel"),d(gS,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(hS,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraModel"),d(pS,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertModel"),d(_S,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetModel"),d(uS,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTModel"),d(bS,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelModel"),d(vS,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelBaseModel"),d(TS,"href","/docs/transformers/pr_16255/en/model_doc/glpn#transformers.GLPNModel"),d(FS,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2Model"),d(CS,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(MS,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJModel"),d(ES,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertModel"),d(yS,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertModel"),d(wS,"href","/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(AS,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(LS,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(BS,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDModel"),d(xS,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerModel"),d(kS,"href","/docs/transformers/pr_16255/en/model_doc/luke#transformers.LukeModel"),d(RS,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertModel"),d(SS,"href","/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100Model"),d(PS,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianModel"),d($S,"href","/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerModel"),d(IS,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartModel"),d(NS,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(jS,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertModel"),d(DS,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetModel"),d(qS,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5Model"),d(GS,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerModel"),d(OS,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(XS,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusModel"),d(VS,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverModel"),d(zS,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartModel"),d(WS,"href","/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerModel"),d(QS,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(HS,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertModel"),d(US,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerModel"),d(JS,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertModel"),d(YS,"href","/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetModel"),d(KS,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertModel"),d(ZS,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaModel"),d(eP,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerModel"),d(oP,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerModel"),d(rP,"href","/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWModel"),d(tP,"href","/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDModel"),d(aP,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(nP,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterModel"),d(sP,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(lP,"href","/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinModel"),d(iP,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5Model"),d(dP,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasModel"),d(cP,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(fP,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechModel"),d(mP,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(gP,"href","/docs/transformers/pr_16255/en/model_doc/van#transformers.VanModel"),d(hP,"href","/docs/transformers/pr_16255/en/model_doc/vilt#transformers.ViltModel"),d(pP,"href","/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(_P,"href","/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertModel"),d(uP,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTModel"),d(bP,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(vP,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(TP,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMModel"),d(FP,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMModel"),d(CP,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMModel"),d(MP,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(EP,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(yP,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(wP,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetModel"),d(AP,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring"),d(Jo,"class","docstring"),d(A_,"id","transformers.AutoModelForPreTraining"),d(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(LP,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForPreTraining"),d(BP,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(xP,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForPreTraining"),d(kP,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(RP,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(SP,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(PP,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d($P,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(IP,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(NP,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(jP,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForPreTraining"),d(DP,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(qP,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForPreTraining"),d(GP,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(OP,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(XP,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(VP,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(zP,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(WP,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(QP,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(HP,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(UP,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(JP,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(YP,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(KP,"href","/docs/transformers/pr_16255/en/model_doc/retribert#transformers.RetriBertModel"),d(ZP,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(e$,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(o$,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(r$,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(t$,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(a$,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(n$,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(s$,"href","/docs/transformers/pr_16255/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(l$,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(i$,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(d$,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(c$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(f$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(m$,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Yo,"class","docstring"),d(hu,"id","transformers.AutoModelForCausalLM"),d(hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(g$,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForCausalLM"),d(h$,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertLMHeadModel"),d(p$,"href","/docs/transformers/pr_16255/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(_$,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(u$,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(b$,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(v$,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(T$,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(F$,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(C$,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(M$,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForCausalLM"),d(E$,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(y$,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(w$,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(A$,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianForCausalLM"),d(L$,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForCausalLM"),d(B$,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(x$,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(k$,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(R$,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(S$,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(P$,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d($$,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(I$,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(N$,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(j$,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(D$,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(q$,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(G$,"href","/docs/transformers/pr_16255/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(O$,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(X$,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(V$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(z$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(W$,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(Q$,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(Yu,"id","transformers.AutoModelForMaskedLM"),d(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yu,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(H$,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(U$,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(J$,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(K$,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(eI,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(oI,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(rI,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(tI,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(aI,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(nI,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(sI,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(lI,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(iI,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(dI,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(cI,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(fI,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(mI,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(gI,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(pI,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(_I,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(uI,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(bI,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(vI,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(TI,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(FI,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(CI,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(MI,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(EI,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(yI,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(wI,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(AI,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(P5,"id","transformers.AutoModelForSeq2SeqLM"),d(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P5,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(LI,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(SI,"href","/docs/transformers/pr_16255/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForConditionalGeneration"),d($I,"href","/docs/transformers/pr_16255/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(II,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.MarianMTModel"),d(NI,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(qI,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(GI,"href","/docs/transformers/pr_16255/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(OI,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(XI,"href","/docs/transformers/pr_16255/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(K5,"id","transformers.AutoModelForSequenceClassification"),d(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K5,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(VI,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16255/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d($N,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(W2,"id","transformers.AutoModelForMultipleChoice"),d(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W2,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(IN,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(ij,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(dj,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(C1,"id","transformers.AutoModelForNextSentencePrediction"),d(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C1,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(cj,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(fj,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(mj,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(gj,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(hj,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(B1,"id","transformers.AutoModelForTokenClassification"),d(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B1,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(pj,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(_j,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(bj,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(wj,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(xj,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(kj,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d($j,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(jj,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(qj,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(zj,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(cb,"id","transformers.AutoModelForQuestionAnswering"),d(cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cb,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(Hj,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16255/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16255/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(iD,"href","/docs/transformers/pr_16255/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16255/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16255/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16255/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16255/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16255/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16255/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16255/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16255/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(BD,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(RD,"href","/docs/transformers/pr_16255/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(Yb,"id","transformers.AutoModelForTableQuestionAnswering"),d(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yb,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(SD,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(ev,"id","transformers.AutoModelForImageClassification"),d(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ev,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(PD,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitForImageClassification"),d($D,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ID,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForImageClassification"),d(ND,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(jD,"href","/docs/transformers/pr_16255/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(DD,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(qD,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(GD,"href","/docs/transformers/pr_16255/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(OD,"href","/docs/transformers/pr_16255/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(XD,"href","/docs/transformers/pr_16255/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(VD,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(zD,"href","/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinForImageClassification"),d(WD,"href","/docs/transformers/pr_16255/en/model_doc/van#transformers.VanForImageClassification"),d(QD,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(fv,"id","transformers.AutoModelForVision2Seq"),d(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fv,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(HD,"href","/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(hv,"id","transformers.AutoModelForAudioClassification"),d(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hv,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(UD,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(JD,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(YD,"href","/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(KD,"href","/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(ZD,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(eq,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(oq,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(rq,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(Ev,"id","transformers.AutoModelForAudioFrameClassification"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(at,"class","docstring"),d(tq,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(aq,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(nq,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(sq,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(xv,"id","transformers.AutoModelForCTC"),d(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xv,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(lq,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(iq,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.HubertForCTC"),d(dq,"href","/docs/transformers/pr_16255/en/model_doc/sew#transformers.SEWForCTC"),d(cq,"href","/docs/transformers/pr_16255/en/model_doc/sew-d#transformers.SEWDForCTC"),d(fq,"href","/docs/transformers/pr_16255/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(mq,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(gq,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(hq,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(qv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(pq,"href","/docs/transformers/pr_16255/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(_q,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(Vv,"id","transformers.AutoModelForAudioXVector"),d(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vv,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(uq,"href","/docs/transformers/pr_16255/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(bq,"href","/docs/transformers/pr_16255/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(vq,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(Tq,"href","/docs/transformers/pr_16255/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(Jv,"id","transformers.AutoModelForMaskedImageModeling"),d(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(Fq,"href","/docs/transformers/pr_16255/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(Cq,"href","/docs/transformers/pr_16255/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(Mq,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(o6,"id","transformers.AutoModelForObjectDetection"),d(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o6,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(Eq,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(a6,"id","transformers.AutoModelForImageSegmentation"),d(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a6,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(yq,"href","/docs/transformers/pr_16255/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(l6,"id","transformers.AutoModelForSemanticSegmentation"),d(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l6,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(wq,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Aq,"href","/docs/transformers/pr_16255/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(f6,"id","transformers.AutoModelForInstanceSegmentation"),d(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f6,"href","#transformers.AutoModelForInstanceSegmentation"),d(dc,"class","relative group"),d(mt,"class","docstring"),d(Lq,"href","/docs/transformers/pr_16255/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(h6,"id","transformers.TFAutoModel"),d(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h6,"href","#transformers.TFAutoModel"),d(mc,"class","relative group"),d(gt,"class","docstring"),d(Bq,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertModel"),d(xq,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartModel"),d(kq,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertModel"),d(Rq,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Sq,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Pq,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertModel"),d($q,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.TFCLIPModel"),d(Iq,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertModel"),d(Nq,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.TFConvNextModel"),d(jq,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Dq,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaModel"),d(qq,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Gq,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Oq,"href","/docs/transformers/pr_16255/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Xq,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraModel"),d(Vq,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(zq,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelModel"),d(Wq,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Qq,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Hq,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.TFGPTJModel"),d(Uq,"href","/docs/transformers/pr_16255/en/model_doc/hubert#transformers.TFHubertModel"),d(Jq,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Yq,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.TFLEDModel"),d(Kq,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerModel"),d(Zq,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.TFLxmertModel"),d(eG,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.TFMarianModel"),d(oG,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.TFMBartModel"),d(rG,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(tG,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetModel"),d(aG,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.TFMT5Model"),d(nG,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(sG,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.TFPegasusModel"),d(lG,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertModel"),d(iG,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaModel"),d(dG,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerModel"),d(cG,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(fG,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5Model"),d(mG,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasModel"),d(gG,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(hG,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.TFViTModel"),d(pG,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(_G,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(uG,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMModel"),d(bG,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(vG,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(aT,"id","transformers.TFAutoModelForPreTraining"),d(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aT,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(ht,"class","docstring"),d(TG,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(FG,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(CG,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForPreTraining"),d(MG,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(EG,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(yG,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(wG,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(AG,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(LG,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(BG,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(xG,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(kG,"href","/docs/transformers/pr_16255/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(RG,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(SG,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(PG,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d($G,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(IG,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(NG,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(jG,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(DG,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(qG,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(GG,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(OG,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(LT,"id","transformers.TFAutoModelForCausalLM"),d(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LT,"href","#transformers.TFAutoModelForCausalLM"),d(bc,"class","relative group"),d(pt,"class","docstring"),d(XG,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(VG,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(zG,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(WG,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(QG,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(HG,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(UG,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(JG,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(YG,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(KG,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(ZG,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(eO,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(GT,"id","transformers.TFAutoModelForImageClassification"),d(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GT,"href","#transformers.TFAutoModelForImageClassification"),d(Fc,"class","relative group"),d(_t,"class","docstring"),d(oO,"href","/docs/transformers/pr_16255/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(rO,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(VT,"id","transformers.TFAutoModelForMaskedLM"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.TFAutoModelForMaskedLM"),d(Ec,"class","relative group"),d(ut,"class","docstring"),d(tO,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(aO,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(nO,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(sO,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(lO,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(iO,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(dO,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(cO,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(fO,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(mO,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(gO,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(hO,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(pO,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(_O,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(uO,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(bO,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(vO,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(TO,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(FO,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(CO,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(fF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ac,"class","relative group"),d(bt,"class","docstring"),d(MO,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(EO,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(yO,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(wO,"href","/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(AO,"href","/docs/transformers/pr_16255/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(LO,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.TFMarianMTModel"),d(BO,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(xO,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(kO,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(RO,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(CF,"id","transformers.TFAutoModelForSequenceClassification"),d(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CF,"href","#transformers.TFAutoModelForSequenceClassification"),d(xc,"class","relative group"),d(vt,"class","docstring"),d(SO,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(PO,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d($O,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(IO,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(NO,"href","/docs/transformers/pr_16255/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(jO,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(DO,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(qO,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(GO,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(OO,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(XO,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(VO,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(zO,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(WO,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(QO,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(HO,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(UO,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(JO,"href","/docs/transformers/pr_16255/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(YO,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(KO,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(ZO,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(eX,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(oX,"href","/docs/transformers/pr_16255/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(rX,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(tX,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(aX,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(UF,"id","transformers.TFAutoModelForMultipleChoice"),d(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UF,"href","#transformers.TFAutoModelForMultipleChoice"),d(Sc,"class","relative group"),d(Tt,"class","docstring"),d(nX,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(sX,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(lX,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(iX,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(dX,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(cX,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(fX,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(mX,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(gX,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(hX,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(pX,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(_X,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(uX,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(bX,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(vX,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(TX,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(FX,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(gC,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Ic,"class","relative group"),d(Ft,"class","docstring"),d(CX,"href","/docs/transformers/pr_16255/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(pC,"id","transformers.TFAutoModelForTokenClassification"),d(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pC,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Ct,"class","docstring"),d(MX,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(EX,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(yX,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(wX,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(AX,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(LX,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(BX,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(xX,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(kX,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(RX,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(SX,"href","/docs/transformers/pr_16255/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(PX,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d($X,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(IX,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(NX,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(jX,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(DX,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(qX,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(GX,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(OX,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(IC,"id","transformers.TFAutoModelForQuestionAnswering"),d(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Oc,"class","relative group"),d(Mt,"class","docstring"),d(XX,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(zX,"href","/docs/transformers/pr_16255/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_16255/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_16255/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_16255/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(UX,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(YX,"href","/docs/transformers/pr_16255/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(KX,"href","/docs/transformers/pr_16255/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(ZX,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(eV,"href","/docs/transformers/pr_16255/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(oV,"href","/docs/transformers/pr_16255/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(rV,"href","/docs/transformers/pr_16255/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(tV,"href","/docs/transformers/pr_16255/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(aV,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(nV,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(sV,"href","/docs/transformers/pr_16255/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(lV,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(iV,"href","/docs/transformers/pr_16255/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(tM,"id","transformers.TFAutoModelForVision2Seq"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.TFAutoModelForVision2Seq"),d(zc,"class","relative group"),d(Et,"class","docstring"),d(dV,"href","/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(nM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Hc,"class","relative group"),d(yt,"class","docstring"),d(cV,"href","/docs/transformers/pr_16255/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(lM,"id","transformers.FlaxAutoModel"),d(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lM,"href","#transformers.FlaxAutoModel"),d(Yc,"class","relative group"),d(wt,"class","docstring"),d(fV,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertModel"),d(mV,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartModel"),d(gV,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.FlaxBeitModel"),d(hV,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertModel"),d(pV,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(_V,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(uV,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(bV,"href","/docs/transformers/pr_16255/en/model_doc/clip#transformers.FlaxCLIPModel"),d(vV,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(TV,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraModel"),d(FV,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(CV,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(MV,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(EV,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.FlaxMarianModel"),d(yV,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartModel"),d(wV,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5Model"),d(AV,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(LV,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(BV,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(xV,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5Model"),d(kV,"href","/docs/transformers/pr_16255/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(RV,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.FlaxViTModel"),d(SV,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(PV,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.FlaxXGLMModel"),d($V,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(SM,"id","transformers.FlaxAutoModelForCausalLM"),d(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SM,"href","#transformers.FlaxAutoModelForCausalLM"),d(ef,"class","relative group"),d(At,"class","docstring"),d(IV,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(NV,"href","/docs/transformers/pr_16255/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(jV,"href","/docs/transformers/pr_16255/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(DV,"href","/docs/transformers/pr_16255/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(qV,"href","/docs/transformers/pr_16255/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(DM,"id","transformers.FlaxAutoModelForPreTraining"),d(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DM,"href","#transformers.FlaxAutoModelForPreTraining"),d(tf,"class","relative group"),d(Lt,"class","docstring"),d(GV,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(OV,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(XV,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(VV,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(zV,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(WV,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(QV,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(HV,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(UV,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(JV,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_16255/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(KV,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(KM,"id","transformers.FlaxAutoModelForMaskedLM"),d(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(sf,"class","relative group"),d(Bt,"class","docstring"),d(ZV,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(ez,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(oz,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(rz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(tz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(az,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(nz,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(sz,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(lz,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(iz,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(d4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(cf,"class","relative group"),d(xt,"class","docstring"),d(dz,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(cz,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(fz,"href","/docs/transformers/pr_16255/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(mz,"href","/docs/transformers/pr_16255/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(gz,"href","/docs/transformers/pr_16255/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(hz,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(pz,"href","/docs/transformers/pr_16255/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(_z,"href","/docs/transformers/pr_16255/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(uz,"href","/docs/transformers/pr_16255/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(v4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(gf,"class","relative group"),d(kt,"class","docstring"),d(bz,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(yz,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(wz,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Az,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(x4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(_f,"class","relative group"),d(Rt,"class","docstring"),d(Lz,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Bz,"href","/docs/transformers/pr_16255/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(xz,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(kz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Rz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Sz,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Pz,"href","/docs/transformers/pr_16255/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d($z,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Iz,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Nz,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(jr,"class","docstring"),d(G4,"id","transformers.FlaxAutoModelForTokenClassification"),d(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(St,"class","docstring"),d(jz,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(qz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(zz,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(J4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(Pt,"class","docstring"),d(Wz,"href","/docs/transformers/pr_16255/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_16255/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_16255/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_16255/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_16255/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_16255/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_16255/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(nE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d($t,"class","docstring"),d(eW,"href","/docs/transformers/pr_16255/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(lE,"id","transformers.FlaxAutoModelForImageClassification"),d(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lE,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(It,"class","docstring"),d(oW,"href","/docs/transformers/pr_16255/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(rW,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(cE,"id","transformers.FlaxAutoModelForVision2Seq"),d(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(kf,"class","relative group"),d(Nt,"class","docstring"),d(tW,"href","/docs/transformers/pr_16255/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(me,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,If,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,f3),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,Di),e(co,Gn),e(Gn,m3),e(co,On),e(co,Xn),e(Xn,g3),e(co,qi),e(co,Vn),e(Vn,h3),e(co,Gi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,a9),e(_e,Oi),e(Oi,n9),e(_e,s9),b(c,zo,u),b(c,Ga,u),e(Ga,l9),e(Ga,Df),e(Df,i9),e(Ga,j$e),b(c,Eke,u),b(c,Xi,u),e(Xi,qf),e(qf,JQ),g(p3,JQ,null),e(Xi,D$e),e(Xi,YQ),e(YQ,q$e),b(c,yke,u),b(c,zn,u),e(zn,G$e),e(zn,KQ),e(KQ,O$e),e(zn,X$e),e(zn,ZQ),e(ZQ,V$e),e(zn,z$e),b(c,wke,u),g(_3,c,u),b(c,Ake,u),b(c,d9,u),e(d9,W$e),b(c,Lke,u),g(Gf,c,u),b(c,Bke,u),b(c,Vi,u),e(Vi,Of),e(Of,eH),g(u3,eH,null),e(Vi,Q$e),e(Vi,oH),e(oH,H$e),b(c,xke,u),b(c,Wo,u),g(b3,Wo,null),e(Wo,U$e),e(Wo,v3),e(v3,J$e),e(v3,c9),e(c9,Y$e),e(v3,K$e),e(Wo,Z$e),e(Wo,T3),e(T3,eIe),e(T3,rH),e(rH,oIe),e(T3,rIe),e(Wo,tIe),e(Wo,mo),g(F3,mo,null),e(mo,aIe),e(mo,tH),e(tH,nIe),e(mo,sIe),e(mo,zi),e(zi,lIe),e(zi,aH),e(aH,iIe),e(zi,dIe),e(zi,nH),e(nH,cIe),e(zi,fIe),e(mo,mIe),e(mo,v),e(v,Xf),e(Xf,sH),e(sH,gIe),e(Xf,hIe),e(Xf,f9),e(f9,pIe),e(Xf,_Ie),e(v,uIe),e(v,Vf),e(Vf,lH),e(lH,bIe),e(Vf,vIe),e(Vf,m9),e(m9,TIe),e(Vf,FIe),e(v,CIe),e(v,zf),e(zf,iH),e(iH,MIe),e(zf,EIe),e(zf,g9),e(g9,yIe),e(zf,wIe),e(v,AIe),e(v,Wf),e(Wf,dH),e(dH,LIe),e(Wf,BIe),e(Wf,h9),e(h9,xIe),e(Wf,kIe),e(v,RIe),e(v,Qf),e(Qf,cH),e(cH,SIe),e(Qf,PIe),e(Qf,p9),e(p9,$Ie),e(Qf,IIe),e(v,NIe),e(v,Hf),e(Hf,fH),e(fH,jIe),e(Hf,DIe),e(Hf,_9),e(_9,qIe),e(Hf,GIe),e(v,OIe),e(v,Uf),e(Uf,mH),e(mH,XIe),e(Uf,VIe),e(Uf,u9),e(u9,zIe),e(Uf,WIe),e(v,QIe),e(v,Jf),e(Jf,gH),e(gH,HIe),e(Jf,UIe),e(Jf,b9),e(b9,JIe),e(Jf,YIe),e(v,KIe),e(v,Yf),e(Yf,hH),e(hH,ZIe),e(Yf,eNe),e(Yf,v9),e(v9,oNe),e(Yf,rNe),e(v,tNe),e(v,Kf),e(Kf,pH),e(pH,aNe),e(Kf,nNe),e(Kf,T9),e(T9,sNe),e(Kf,lNe),e(v,iNe),e(v,Zf),e(Zf,_H),e(_H,dNe),e(Zf,cNe),e(Zf,F9),e(F9,fNe),e(Zf,mNe),e(v,gNe),e(v,em),e(em,uH),e(uH,hNe),e(em,pNe),e(em,C9),e(C9,_Ne),e(em,uNe),e(v,bNe),e(v,om),e(om,bH),e(bH,vNe),e(om,TNe),e(om,M9),e(M9,FNe),e(om,CNe),e(v,MNe),e(v,rm),e(rm,vH),e(vH,ENe),e(rm,yNe),e(rm,E9),e(E9,wNe),e(rm,ANe),e(v,LNe),e(v,tm),e(tm,TH),e(TH,BNe),e(tm,xNe),e(tm,y9),e(y9,kNe),e(tm,RNe),e(v,SNe),e(v,am),e(am,FH),e(FH,PNe),e(am,$Ne),e(am,w9),e(w9,INe),e(am,NNe),e(v,jNe),e(v,nm),e(nm,CH),e(CH,DNe),e(nm,qNe),e(nm,A9),e(A9,GNe),e(nm,ONe),e(v,XNe),e(v,sm),e(sm,MH),e(MH,VNe),e(sm,zNe),e(sm,L9),e(L9,WNe),e(sm,QNe),e(v,HNe),e(v,lm),e(lm,EH),e(EH,UNe),e(lm,JNe),e(lm,B9),e(B9,YNe),e(lm,KNe),e(v,ZNe),e(v,im),e(im,yH),e(yH,eje),e(im,oje),e(im,x9),e(x9,rje),e(im,tje),e(v,aje),e(v,dm),e(dm,wH),e(wH,nje),e(dm,sje),e(dm,k9),e(k9,lje),e(dm,ije),e(v,dje),e(v,cm),e(cm,AH),e(AH,cje),e(cm,fje),e(cm,R9),e(R9,mje),e(cm,gje),e(v,hje),e(v,fm),e(fm,LH),e(LH,pje),e(fm,_je),e(fm,S9),e(S9,uje),e(fm,bje),e(v,vje),e(v,mm),e(mm,BH),e(BH,Tje),e(mm,Fje),e(mm,P9),e(P9,Cje),e(mm,Mje),e(v,Eje),e(v,gm),e(gm,xH),e(xH,yje),e(gm,wje),e(gm,$9),e($9,Aje),e(gm,Lje),e(v,Bje),e(v,hm),e(hm,kH),e(kH,xje),e(hm,kje),e(hm,I9),e(I9,Rje),e(hm,Sje),e(v,Pje),e(v,pm),e(pm,RH),e(RH,$je),e(pm,Ije),e(pm,N9),e(N9,Nje),e(pm,jje),e(v,Dje),e(v,_m),e(_m,SH),e(SH,qje),e(_m,Gje),e(_m,j9),e(j9,Oje),e(_m,Xje),e(v,Vje),e(v,um),e(um,PH),e(PH,zje),e(um,Wje),e(um,D9),e(D9,Qje),e(um,Hje),e(v,Uje),e(v,bm),e(bm,$H),e($H,Jje),e(bm,Yje),e(bm,q9),e(q9,Kje),e(bm,Zje),e(v,eDe),e(v,vm),e(vm,IH),e(IH,oDe),e(vm,rDe),e(vm,G9),e(G9,tDe),e(vm,aDe),e(v,nDe),e(v,Tm),e(Tm,NH),e(NH,sDe),e(Tm,lDe),e(Tm,O9),e(O9,iDe),e(Tm,dDe),e(v,cDe),e(v,Fm),e(Fm,jH),e(jH,fDe),e(Fm,mDe),e(Fm,X9),e(X9,gDe),e(Fm,hDe),e(v,pDe),e(v,Cm),e(Cm,DH),e(DH,_De),e(Cm,uDe),e(Cm,V9),e(V9,bDe),e(Cm,vDe),e(v,TDe),e(v,Mm),e(Mm,qH),e(qH,FDe),e(Mm,CDe),e(Mm,z9),e(z9,MDe),e(Mm,EDe),e(v,yDe),e(v,Em),e(Em,GH),e(GH,wDe),e(Em,ADe),e(Em,W9),e(W9,LDe),e(Em,BDe),e(v,xDe),e(v,ym),e(ym,OH),e(OH,kDe),e(ym,RDe),e(ym,Q9),e(Q9,SDe),e(ym,PDe),e(v,$De),e(v,wm),e(wm,XH),e(XH,IDe),e(wm,NDe),e(wm,H9),e(H9,jDe),e(wm,DDe),e(v,qDe),e(v,Am),e(Am,VH),e(VH,GDe),e(Am,ODe),e(Am,U9),e(U9,XDe),e(Am,VDe),e(v,zDe),e(v,Lm),e(Lm,zH),e(zH,WDe),e(Lm,QDe),e(Lm,J9),e(J9,HDe),e(Lm,UDe),e(v,JDe),e(v,Bm),e(Bm,WH),e(WH,YDe),e(Bm,KDe),e(Bm,Y9),e(Y9,ZDe),e(Bm,eqe),e(v,oqe),e(v,xm),e(xm,QH),e(QH,rqe),e(xm,tqe),e(xm,K9),e(K9,aqe),e(xm,nqe),e(v,sqe),e(v,km),e(km,HH),e(HH,lqe),e(km,iqe),e(km,Z9),e(Z9,dqe),e(km,cqe),e(v,fqe),e(v,Rm),e(Rm,UH),e(UH,mqe),e(Rm,gqe),e(Rm,eB),e(eB,hqe),e(Rm,pqe),e(v,_qe),e(v,Sm),e(Sm,JH),e(JH,uqe),e(Sm,bqe),e(Sm,oB),e(oB,vqe),e(Sm,Tqe),e(v,Fqe),e(v,Pm),e(Pm,YH),e(YH,Cqe),e(Pm,Mqe),e(Pm,rB),e(rB,Eqe),e(Pm,yqe),e(v,wqe),e(v,$m),e($m,KH),e(KH,Aqe),e($m,Lqe),e($m,tB),e(tB,Bqe),e($m,xqe),e(v,kqe),e(v,Im),e(Im,ZH),e(ZH,Rqe),e(Im,Sqe),e(Im,aB),e(aB,Pqe),e(Im,$qe),e(v,Iqe),e(v,Nm),e(Nm,eU),e(eU,Nqe),e(Nm,jqe),e(Nm,nB),e(nB,Dqe),e(Nm,qqe),e(v,Gqe),e(v,jm),e(jm,oU),e(oU,Oqe),e(jm,Xqe),e(jm,sB),e(sB,Vqe),e(jm,zqe),e(v,Wqe),e(v,Dm),e(Dm,rU),e(rU,Qqe),e(Dm,Hqe),e(Dm,lB),e(lB,Uqe),e(Dm,Jqe),e(v,Yqe),e(v,qm),e(qm,tU),e(tU,Kqe),e(qm,Zqe),e(qm,iB),e(iB,eGe),e(qm,oGe),e(v,rGe),e(v,Gm),e(Gm,aU),e(aU,tGe),e(Gm,aGe),e(Gm,dB),e(dB,nGe),e(Gm,sGe),e(v,lGe),e(v,Om),e(Om,nU),e(nU,iGe),e(Om,dGe),e(Om,cB),e(cB,cGe),e(Om,fGe),e(v,mGe),e(v,Xm),e(Xm,sU),e(sU,gGe),e(Xm,hGe),e(Xm,fB),e(fB,pGe),e(Xm,_Ge),e(v,uGe),e(v,Vm),e(Vm,lU),e(lU,bGe),e(Vm,vGe),e(Vm,mB),e(mB,TGe),e(Vm,FGe),e(v,CGe),e(v,zm),e(zm,iU),e(iU,MGe),e(zm,EGe),e(zm,gB),e(gB,yGe),e(zm,wGe),e(v,AGe),e(v,Wm),e(Wm,dU),e(dU,LGe),e(Wm,BGe),e(Wm,hB),e(hB,xGe),e(Wm,kGe),e(v,RGe),e(v,Qm),e(Qm,cU),e(cU,SGe),e(Qm,PGe),e(Qm,pB),e(pB,$Ge),e(Qm,IGe),e(v,NGe),e(v,Hm),e(Hm,fU),e(fU,jGe),e(Hm,DGe),e(Hm,_B),e(_B,qGe),e(Hm,GGe),e(v,OGe),e(v,Um),e(Um,mU),e(mU,XGe),e(Um,VGe),e(Um,uB),e(uB,zGe),e(Um,WGe),e(v,QGe),e(v,Jm),e(Jm,gU),e(gU,HGe),e(Jm,UGe),e(Jm,bB),e(bB,JGe),e(Jm,YGe),e(v,KGe),e(v,Ym),e(Ym,hU),e(hU,ZGe),e(Ym,eOe),e(Ym,vB),e(vB,oOe),e(Ym,rOe),e(v,tOe),e(v,Km),e(Km,pU),e(pU,aOe),e(Km,nOe),e(Km,TB),e(TB,sOe),e(Km,lOe),e(v,iOe),e(v,Zm),e(Zm,_U),e(_U,dOe),e(Zm,cOe),e(Zm,FB),e(FB,fOe),e(Zm,mOe),e(v,gOe),e(v,eg),e(eg,uU),e(uU,hOe),e(eg,pOe),e(eg,CB),e(CB,_Oe),e(eg,uOe),e(v,bOe),e(v,og),e(og,bU),e(bU,vOe),e(og,TOe),e(og,MB),e(MB,FOe),e(og,COe),e(v,MOe),e(v,rg),e(rg,vU),e(vU,EOe),e(rg,yOe),e(rg,EB),e(EB,wOe),e(rg,AOe),e(v,LOe),e(v,tg),e(tg,TU),e(TU,BOe),e(tg,xOe),e(tg,yB),e(yB,kOe),e(tg,ROe),e(v,SOe),e(v,ag),e(ag,FU),e(FU,POe),e(ag,$Oe),e(ag,wB),e(wB,IOe),e(ag,NOe),e(v,jOe),e(v,ng),e(ng,CU),e(CU,DOe),e(ng,qOe),e(ng,AB),e(AB,GOe),e(ng,OOe),e(v,XOe),e(v,sg),e(sg,MU),e(MU,VOe),e(sg,zOe),e(sg,LB),e(LB,WOe),e(sg,QOe),e(v,HOe),e(v,lg),e(lg,EU),e(EU,UOe),e(lg,JOe),e(lg,BB),e(BB,YOe),e(lg,KOe),e(v,ZOe),e(v,ig),e(ig,yU),e(yU,eXe),e(ig,oXe),e(ig,xB),e(xB,rXe),e(ig,tXe),e(v,aXe),e(v,dg),e(dg,wU),e(wU,nXe),e(dg,sXe),e(dg,kB),e(kB,lXe),e(dg,iXe),e(v,dXe),e(v,cg),e(cg,AU),e(AU,cXe),e(cg,fXe),e(cg,RB),e(RB,mXe),e(cg,gXe),e(v,hXe),e(v,fg),e(fg,LU),e(LU,pXe),e(fg,_Xe),e(fg,SB),e(SB,uXe),e(fg,bXe),e(v,vXe),e(v,mg),e(mg,BU),e(BU,TXe),e(mg,FXe),e(mg,PB),e(PB,CXe),e(mg,MXe),e(v,EXe),e(v,gg),e(gg,xU),e(xU,yXe),e(gg,wXe),e(gg,$B),e($B,AXe),e(gg,LXe),e(v,BXe),e(v,hg),e(hg,kU),e(kU,xXe),e(hg,kXe),e(hg,IB),e(IB,RXe),e(hg,SXe),e(v,PXe),e(v,pg),e(pg,RU),e(RU,$Xe),e(pg,IXe),e(pg,NB),e(NB,NXe),e(pg,jXe),e(v,DXe),e(v,_g),e(_g,SU),e(SU,qXe),e(_g,GXe),e(_g,jB),e(jB,OXe),e(_g,XXe),e(v,VXe),e(v,ug),e(ug,PU),e(PU,zXe),e(ug,WXe),e(ug,DB),e(DB,QXe),e(ug,HXe),e(v,UXe),e(v,bg),e(bg,$U),e($U,JXe),e(bg,YXe),e(bg,qB),e(qB,KXe),e(bg,ZXe),e(v,eVe),e(v,vg),e(vg,IU),e(IU,oVe),e(vg,rVe),e(vg,GB),e(GB,tVe),e(vg,aVe),e(v,nVe),e(v,Tg),e(Tg,NU),e(NU,sVe),e(Tg,lVe),e(Tg,OB),e(OB,iVe),e(Tg,dVe),e(v,cVe),e(v,Fg),e(Fg,jU),e(jU,fVe),e(Fg,mVe),e(Fg,XB),e(XB,gVe),e(Fg,hVe),e(v,pVe),e(v,Cg),e(Cg,DU),e(DU,_Ve),e(Cg,uVe),e(Cg,VB),e(VB,bVe),e(Cg,vVe),e(v,TVe),e(v,Mg),e(Mg,qU),e(qU,FVe),e(Mg,CVe),e(Mg,zB),e(zB,MVe),e(Mg,EVe),e(v,yVe),e(v,Eg),e(Eg,GU),e(GU,wVe),e(Eg,AVe),e(Eg,WB),e(WB,LVe),e(Eg,BVe),e(v,xVe),e(v,yg),e(yg,OU),e(OU,kVe),e(yg,RVe),e(yg,QB),e(QB,SVe),e(yg,PVe),e(v,$Ve),e(v,wg),e(wg,XU),e(XU,IVe),e(wg,NVe),e(wg,HB),e(HB,jVe),e(wg,DVe),e(v,qVe),e(v,Ag),e(Ag,VU),e(VU,GVe),e(Ag,OVe),e(Ag,UB),e(UB,XVe),e(Ag,VVe),e(v,zVe),e(v,Lg),e(Lg,zU),e(zU,WVe),e(Lg,QVe),e(Lg,JB),e(JB,HVe),e(Lg,UVe),e(v,JVe),e(v,Bg),e(Bg,WU),e(WU,YVe),e(Bg,KVe),e(Bg,YB),e(YB,ZVe),e(Bg,eze),e(v,oze),e(v,xg),e(xg,QU),e(QU,rze),e(xg,tze),e(xg,KB),e(KB,aze),e(xg,nze),e(v,sze),e(v,kg),e(kg,HU),e(HU,lze),e(kg,ize),e(kg,ZB),e(ZB,dze),e(kg,cze),e(v,fze),e(v,Rg),e(Rg,UU),e(UU,mze),e(Rg,gze),e(Rg,ex),e(ex,hze),e(Rg,pze),e(mo,_ze),e(mo,JU),e(JU,uze),e(mo,bze),g(C3,mo,null),e(Wo,vze),e(Wo,Sg),g(M3,Sg,null),e(Sg,Tze),e(Sg,YU),e(YU,Fze),b(c,kke,u),b(c,Wi,u),e(Wi,Pg),e(Pg,KU),g(E3,KU,null),e(Wi,Cze),e(Wi,ZU),e(ZU,Mze),b(c,Rke,u),b(c,Qo,u),g(y3,Qo,null),e(Qo,Eze),e(Qo,w3),e(w3,yze),e(w3,ox),e(ox,wze),e(w3,Aze),e(Qo,Lze),e(Qo,A3),e(A3,Bze),e(A3,eJ),e(eJ,xze),e(A3,kze),e(Qo,Rze),e(Qo,go),g(L3,go,null),e(go,Sze),e(go,oJ),e(oJ,Pze),e(go,$ze),e(go,Oa),e(Oa,Ize),e(Oa,rJ),e(rJ,Nze),e(Oa,jze),e(Oa,tJ),e(tJ,Dze),e(Oa,qze),e(Oa,aJ),e(aJ,Gze),e(Oa,Oze),e(go,Xze),e(go,E),e(E,Wn),e(Wn,nJ),e(nJ,Vze),e(Wn,zze),e(Wn,rx),e(rx,Wze),e(Wn,Qze),e(Wn,tx),e(tx,Hze),e(Wn,Uze),e(E,Jze),e(E,Qn),e(Qn,sJ),e(sJ,Yze),e(Qn,Kze),e(Qn,ax),e(ax,Zze),e(Qn,eWe),e(Qn,nx),e(nx,oWe),e(Qn,rWe),e(E,tWe),e(E,Hn),e(Hn,lJ),e(lJ,aWe),e(Hn,nWe),e(Hn,sx),e(sx,sWe),e(Hn,lWe),e(Hn,lx),e(lx,iWe),e(Hn,dWe),e(E,cWe),e(E,$g),e($g,iJ),e(iJ,fWe),e($g,mWe),e($g,ix),e(ix,gWe),e($g,hWe),e(E,pWe),e(E,Un),e(Un,dJ),e(dJ,_We),e(Un,uWe),e(Un,dx),e(dx,bWe),e(Un,vWe),e(Un,cx),e(cx,TWe),e(Un,FWe),e(E,CWe),e(E,Ig),e(Ig,cJ),e(cJ,MWe),e(Ig,EWe),e(Ig,fx),e(fx,yWe),e(Ig,wWe),e(E,AWe),e(E,Ng),e(Ng,fJ),e(fJ,LWe),e(Ng,BWe),e(Ng,mx),e(mx,xWe),e(Ng,kWe),e(E,RWe),e(E,jg),e(jg,mJ),e(mJ,SWe),e(jg,PWe),e(jg,gx),e(gx,$We),e(jg,IWe),e(E,NWe),e(E,Jn),e(Jn,gJ),e(gJ,jWe),e(Jn,DWe),e(Jn,hx),e(hx,qWe),e(Jn,GWe),e(Jn,px),e(px,OWe),e(Jn,XWe),e(E,VWe),e(E,Yn),e(Yn,hJ),e(hJ,zWe),e(Yn,WWe),e(Yn,_x),e(_x,QWe),e(Yn,HWe),e(Yn,ux),e(ux,UWe),e(Yn,JWe),e(E,YWe),e(E,Kn),e(Kn,pJ),e(pJ,KWe),e(Kn,ZWe),e(Kn,bx),e(bx,eQe),e(Kn,oQe),e(Kn,vx),e(vx,rQe),e(Kn,tQe),e(E,aQe),e(E,Dg),e(Dg,_J),e(_J,nQe),e(Dg,sQe),e(Dg,Tx),e(Tx,lQe),e(Dg,iQe),e(E,dQe),e(E,qg),e(qg,uJ),e(uJ,cQe),e(qg,fQe),e(qg,Fx),e(Fx,mQe),e(qg,gQe),e(E,hQe),e(E,Zn),e(Zn,bJ),e(bJ,pQe),e(Zn,_Qe),e(Zn,Cx),e(Cx,uQe),e(Zn,bQe),e(Zn,Mx),e(Mx,vQe),e(Zn,TQe),e(E,FQe),e(E,Gg),e(Gg,vJ),e(vJ,CQe),e(Gg,MQe),e(Gg,Ex),e(Ex,EQe),e(Gg,yQe),e(E,wQe),e(E,es),e(es,TJ),e(TJ,AQe),e(es,LQe),e(es,yx),e(yx,BQe),e(es,xQe),e(es,wx),e(wx,kQe),e(es,RQe),e(E,SQe),e(E,os),e(os,FJ),e(FJ,PQe),e(os,$Qe),e(os,Ax),e(Ax,IQe),e(os,NQe),e(os,Lx),e(Lx,jQe),e(os,DQe),e(E,qQe),e(E,rs),e(rs,CJ),e(CJ,GQe),e(rs,OQe),e(rs,Bx),e(Bx,XQe),e(rs,VQe),e(rs,MJ),e(MJ,zQe),e(rs,WQe),e(E,QQe),e(E,Og),e(Og,EJ),e(EJ,HQe),e(Og,UQe),e(Og,xx),e(xx,JQe),e(Og,YQe),e(E,KQe),e(E,ts),e(ts,yJ),e(yJ,ZQe),e(ts,eHe),e(ts,kx),e(kx,oHe),e(ts,rHe),e(ts,Rx),e(Rx,tHe),e(ts,aHe),e(E,nHe),e(E,Xg),e(Xg,wJ),e(wJ,sHe),e(Xg,lHe),e(Xg,Sx),e(Sx,iHe),e(Xg,dHe),e(E,cHe),e(E,as),e(as,AJ),e(AJ,fHe),e(as,mHe),e(as,Px),e(Px,gHe),e(as,hHe),e(as,$x),e($x,pHe),e(as,_He),e(E,uHe),e(E,ns),e(ns,LJ),e(LJ,bHe),e(ns,vHe),e(ns,Ix),e(Ix,THe),e(ns,FHe),e(ns,Nx),e(Nx,CHe),e(ns,MHe),e(E,EHe),e(E,ss),e(ss,BJ),e(BJ,yHe),e(ss,wHe),e(ss,jx),e(jx,AHe),e(ss,LHe),e(ss,Dx),e(Dx,BHe),e(ss,xHe),e(E,kHe),e(E,Vg),e(Vg,xJ),e(xJ,RHe),e(Vg,SHe),e(Vg,qx),e(qx,PHe),e(Vg,$He),e(E,IHe),e(E,ls),e(ls,kJ),e(kJ,NHe),e(ls,jHe),e(ls,Gx),e(Gx,DHe),e(ls,qHe),e(ls,Ox),e(Ox,GHe),e(ls,OHe),e(E,XHe),e(E,zg),e(zg,RJ),e(RJ,VHe),e(zg,zHe),e(zg,Xx),e(Xx,WHe),e(zg,QHe),e(E,HHe),e(E,is),e(is,SJ),e(SJ,UHe),e(is,JHe),e(is,Vx),e(Vx,YHe),e(is,KHe),e(is,zx),e(zx,ZHe),e(is,eUe),e(E,oUe),e(E,ds),e(ds,PJ),e(PJ,rUe),e(ds,tUe),e(ds,Wx),e(Wx,aUe),e(ds,nUe),e(ds,Qx),e(Qx,sUe),e(ds,lUe),e(E,iUe),e(E,cs),e(cs,$J),e($J,dUe),e(cs,cUe),e(cs,Hx),e(Hx,fUe),e(cs,mUe),e(cs,Ux),e(Ux,gUe),e(cs,hUe),e(E,pUe),e(E,fs),e(fs,IJ),e(IJ,_Ue),e(fs,uUe),e(fs,Jx),e(Jx,bUe),e(fs,vUe),e(fs,Yx),e(Yx,TUe),e(fs,FUe),e(E,CUe),e(E,Wg),e(Wg,NJ),e(NJ,MUe),e(Wg,EUe),e(Wg,Kx),e(Kx,yUe),e(Wg,wUe),e(E,AUe),e(E,ms),e(ms,jJ),e(jJ,LUe),e(ms,BUe),e(ms,Zx),e(Zx,xUe),e(ms,kUe),e(ms,ek),e(ek,RUe),e(ms,SUe),e(E,PUe),e(E,gs),e(gs,DJ),e(DJ,$Ue),e(gs,IUe),e(gs,ok),e(ok,NUe),e(gs,jUe),e(gs,rk),e(rk,DUe),e(gs,qUe),e(E,GUe),e(E,hs),e(hs,qJ),e(qJ,OUe),e(hs,XUe),e(hs,tk),e(tk,VUe),e(hs,zUe),e(hs,ak),e(ak,WUe),e(hs,QUe),e(E,HUe),e(E,ps),e(ps,GJ),e(GJ,UUe),e(ps,JUe),e(ps,nk),e(nk,YUe),e(ps,KUe),e(ps,sk),e(sk,ZUe),e(ps,eJe),e(E,oJe),e(E,_s),e(_s,OJ),e(OJ,rJe),e(_s,tJe),e(_s,lk),e(lk,aJe),e(_s,nJe),e(_s,ik),e(ik,sJe),e(_s,lJe),e(E,iJe),e(E,us),e(us,XJ),e(XJ,dJe),e(us,cJe),e(us,dk),e(dk,fJe),e(us,mJe),e(us,ck),e(ck,gJe),e(us,hJe),e(E,pJe),e(E,Qg),e(Qg,VJ),e(VJ,_Je),e(Qg,uJe),e(Qg,fk),e(fk,bJe),e(Qg,vJe),e(E,TJe),e(E,bs),e(bs,zJ),e(zJ,FJe),e(bs,CJe),e(bs,mk),e(mk,MJe),e(bs,EJe),e(bs,gk),e(gk,yJe),e(bs,wJe),e(E,AJe),e(E,Hg),e(Hg,WJ),e(WJ,LJe),e(Hg,BJe),e(Hg,hk),e(hk,xJe),e(Hg,kJe),e(E,RJe),e(E,Ug),e(Ug,QJ),e(QJ,SJe),e(Ug,PJe),e(Ug,pk),e(pk,$Je),e(Ug,IJe),e(E,NJe),e(E,vs),e(vs,HJ),e(HJ,jJe),e(vs,DJe),e(vs,_k),e(_k,qJe),e(vs,GJe),e(vs,uk),e(uk,OJe),e(vs,XJe),e(E,VJe),e(E,Ts),e(Ts,UJ),e(UJ,zJe),e(Ts,WJe),e(Ts,bk),e(bk,QJe),e(Ts,HJe),e(Ts,vk),e(vk,UJe),e(Ts,JJe),e(E,YJe),e(E,Jg),e(Jg,JJ),e(JJ,KJe),e(Jg,ZJe),e(Jg,Tk),e(Tk,eYe),e(Jg,oYe),e(E,rYe),e(E,Fs),e(Fs,YJ),e(YJ,tYe),e(Fs,aYe),e(Fs,Fk),e(Fk,nYe),e(Fs,sYe),e(Fs,Ck),e(Ck,lYe),e(Fs,iYe),e(E,dYe),e(E,Cs),e(Cs,KJ),e(KJ,cYe),e(Cs,fYe),e(Cs,Mk),e(Mk,mYe),e(Cs,gYe),e(Cs,Ek),e(Ek,hYe),e(Cs,pYe),e(E,_Ye),e(E,Ms),e(Ms,ZJ),e(ZJ,uYe),e(Ms,bYe),e(Ms,yk),e(yk,vYe),e(Ms,TYe),e(Ms,wk),e(wk,FYe),e(Ms,CYe),e(E,MYe),e(E,Es),e(Es,eY),e(eY,EYe),e(Es,yYe),e(Es,Ak),e(Ak,wYe),e(Es,AYe),e(Es,Lk),e(Lk,LYe),e(Es,BYe),e(E,xYe),e(E,ys),e(ys,oY),e(oY,kYe),e(ys,RYe),e(ys,Bk),e(Bk,SYe),e(ys,PYe),e(ys,xk),e(xk,$Ye),e(ys,IYe),e(E,NYe),e(E,Yg),e(Yg,rY),e(rY,jYe),e(Yg,DYe),e(Yg,kk),e(kk,qYe),e(Yg,GYe),e(E,OYe),e(E,Kg),e(Kg,tY),e(tY,XYe),e(Kg,VYe),e(Kg,Rk),e(Rk,zYe),e(Kg,WYe),e(E,QYe),e(E,Zg),e(Zg,aY),e(aY,HYe),e(Zg,UYe),e(Zg,Sk),e(Sk,JYe),e(Zg,YYe),e(E,KYe),e(E,eh),e(eh,nY),e(nY,ZYe),e(eh,eKe),e(eh,Pk),e(Pk,oKe),e(eh,rKe),e(E,tKe),e(E,ws),e(ws,sY),e(sY,aKe),e(ws,nKe),e(ws,$k),e($k,sKe),e(ws,lKe),e(ws,Ik),e(Ik,iKe),e(ws,dKe),e(E,cKe),e(E,oh),e(oh,lY),e(lY,fKe),e(oh,mKe),e(oh,Nk),e(Nk,gKe),e(oh,hKe),e(E,pKe),e(E,As),e(As,iY),e(iY,_Ke),e(As,uKe),e(As,jk),e(jk,bKe),e(As,vKe),e(As,Dk),e(Dk,TKe),e(As,FKe),e(E,CKe),e(E,Ls),e(Ls,dY),e(dY,MKe),e(Ls,EKe),e(Ls,qk),e(qk,yKe),e(Ls,wKe),e(Ls,Gk),e(Gk,AKe),e(Ls,LKe),e(E,BKe),e(E,Bs),e(Bs,cY),e(cY,xKe),e(Bs,kKe),e(Bs,Ok),e(Ok,RKe),e(Bs,SKe),e(Bs,Xk),e(Xk,PKe),e(Bs,$Ke),e(E,IKe),e(E,xs),e(xs,fY),e(fY,NKe),e(xs,jKe),e(xs,Vk),e(Vk,DKe),e(xs,qKe),e(xs,zk),e(zk,GKe),e(xs,OKe),e(E,XKe),e(E,ks),e(ks,mY),e(mY,VKe),e(ks,zKe),e(ks,Wk),e(Wk,WKe),e(ks,QKe),e(ks,Qk),e(Qk,HKe),e(ks,UKe),e(E,JKe),e(E,Rs),e(Rs,gY),e(gY,YKe),e(Rs,KKe),e(Rs,Hk),e(Hk,ZKe),e(Rs,eZe),e(Rs,Uk),e(Uk,oZe),e(Rs,rZe),e(E,tZe),e(E,rh),e(rh,hY),e(hY,aZe),e(rh,nZe),e(rh,Jk),e(Jk,sZe),e(rh,lZe),e(E,iZe),e(E,th),e(th,pY),e(pY,dZe),e(th,cZe),e(th,Yk),e(Yk,fZe),e(th,mZe),e(E,gZe),e(E,Ss),e(Ss,_Y),e(_Y,hZe),e(Ss,pZe),e(Ss,Kk),e(Kk,_Ze),e(Ss,uZe),e(Ss,Zk),e(Zk,bZe),e(Ss,vZe),e(E,TZe),e(E,Ps),e(Ps,uY),e(uY,FZe),e(Ps,CZe),e(Ps,eR),e(eR,MZe),e(Ps,EZe),e(Ps,oR),e(oR,yZe),e(Ps,wZe),e(E,AZe),e(E,$s),e($s,bY),e(bY,LZe),e($s,BZe),e($s,rR),e(rR,xZe),e($s,kZe),e($s,tR),e(tR,RZe),e($s,SZe),e(E,PZe),e(E,ah),e(ah,vY),e(vY,$Ze),e(ah,IZe),e(ah,aR),e(aR,NZe),e(ah,jZe),e(E,DZe),e(E,nh),e(nh,TY),e(TY,qZe),e(nh,GZe),e(nh,nR),e(nR,OZe),e(nh,XZe),e(E,VZe),e(E,sh),e(sh,FY),e(FY,zZe),e(sh,WZe),e(sh,sR),e(sR,QZe),e(sh,HZe),e(E,UZe),e(E,lh),e(lh,CY),e(CY,JZe),e(lh,YZe),e(lh,lR),e(lR,KZe),e(lh,ZZe),e(E,eeo),e(E,Is),e(Is,MY),e(MY,oeo),e(Is,reo),e(Is,iR),e(iR,teo),e(Is,aeo),e(Is,dR),e(dR,neo),e(Is,seo),e(E,leo),e(E,ih),e(ih,EY),e(EY,ieo),e(ih,deo),e(ih,cR),e(cR,ceo),e(ih,feo),e(E,meo),e(E,dh),e(dh,yY),e(yY,geo),e(dh,heo),e(dh,fR),e(fR,peo),e(dh,_eo),e(E,ueo),e(E,Ns),e(Ns,wY),e(wY,beo),e(Ns,veo),e(Ns,mR),e(mR,Teo),e(Ns,Feo),e(Ns,gR),e(gR,Ceo),e(Ns,Meo),e(E,Eeo),e(E,js),e(js,AY),e(AY,yeo),e(js,weo),e(js,hR),e(hR,Aeo),e(js,Leo),e(js,pR),e(pR,Beo),e(js,xeo),e(go,keo),e(go,LY),e(LY,Reo),e(go,Seo),g(B3,go,null),e(Qo,Peo),e(Qo,ch),g(x3,ch,null),e(ch,$eo),e(ch,BY),e(BY,Ieo),b(c,Ske,u),b(c,Qi,u),e(Qi,fh),e(fh,xY),g(k3,xY,null),e(Qi,Neo),e(Qi,kY),e(kY,jeo),b(c,Pke,u),b(c,Ho,u),g(R3,Ho,null),e(Ho,Deo),e(Ho,S3),e(S3,qeo),e(S3,_R),e(_R,Geo),e(S3,Oeo),e(Ho,Xeo),e(Ho,P3),e(P3,Veo),e(P3,RY),e(RY,zeo),e(P3,Weo),e(Ho,Qeo),e(Ho,$e),g($3,$e,null),e($e,Heo),e($e,SY),e(SY,Ueo),e($e,Jeo),e($e,Xa),e(Xa,Yeo),e(Xa,PY),e(PY,Keo),e(Xa,Zeo),e(Xa,$Y),e($Y,eoo),e(Xa,ooo),e(Xa,IY),e(IY,roo),e(Xa,too),e($e,aoo),e($e,te),e(te,mh),e(mh,NY),e(NY,noo),e(mh,soo),e(mh,uR),e(uR,loo),e(mh,ioo),e(te,doo),e(te,gh),e(gh,jY),e(jY,coo),e(gh,foo),e(gh,bR),e(bR,moo),e(gh,goo),e(te,hoo),e(te,hh),e(hh,DY),e(DY,poo),e(hh,_oo),e(hh,vR),e(vR,uoo),e(hh,boo),e(te,voo),e(te,ph),e(ph,qY),e(qY,Too),e(ph,Foo),e(ph,TR),e(TR,Coo),e(ph,Moo),e(te,Eoo),e(te,_h),e(_h,GY),e(GY,yoo),e(_h,woo),e(_h,FR),e(FR,Aoo),e(_h,Loo),e(te,Boo),e(te,uh),e(uh,OY),e(OY,xoo),e(uh,koo),e(uh,CR),e(CR,Roo),e(uh,Soo),e(te,Poo),e(te,bh),e(bh,XY),e(XY,$oo),e(bh,Ioo),e(bh,MR),e(MR,Noo),e(bh,joo),e(te,Doo),e(te,vh),e(vh,VY),e(VY,qoo),e(vh,Goo),e(vh,ER),e(ER,Ooo),e(vh,Xoo),e(te,Voo),e(te,Th),e(Th,zY),e(zY,zoo),e(Th,Woo),e(Th,yR),e(yR,Qoo),e(Th,Hoo),e(te,Uoo),e(te,Fh),e(Fh,WY),e(WY,Joo),e(Fh,Yoo),e(Fh,wR),e(wR,Koo),e(Fh,Zoo),e(te,ero),e(te,Ch),e(Ch,QY),e(QY,oro),e(Ch,rro),e(Ch,AR),e(AR,tro),e(Ch,aro),e(te,nro),e(te,Mh),e(Mh,HY),e(HY,sro),e(Mh,lro),e(Mh,LR),e(LR,iro),e(Mh,dro),e(te,cro),e(te,Eh),e(Eh,UY),e(UY,fro),e(Eh,mro),e(Eh,BR),e(BR,gro),e(Eh,hro),e(te,pro),e(te,yh),e(yh,JY),e(JY,_ro),e(yh,uro),e(yh,xR),e(xR,bro),e(yh,vro),e(te,Tro),e(te,wh),e(wh,YY),e(YY,Fro),e(wh,Cro),e(wh,kR),e(kR,Mro),e(wh,Ero),e(te,yro),e(te,Ah),e(Ah,KY),e(KY,wro),e(Ah,Aro),e(Ah,RR),e(RR,Lro),e(Ah,Bro),e(te,xro),e(te,Lh),e(Lh,ZY),e(ZY,kro),e(Lh,Rro),e(Lh,SR),e(SR,Sro),e(Lh,Pro),e(te,$ro),e(te,Bh),e(Bh,eK),e(eK,Iro),e(Bh,Nro),e(Bh,PR),e(PR,jro),e(Bh,Dro),e($e,qro),g(xh,$e,null),e($e,Gro),e($e,oK),e(oK,Oro),e($e,Xro),g(I3,$e,null),e(Ho,Vro),e(Ho,kh),g(N3,kh,null),e(kh,zro),e(kh,rK),e(rK,Wro),b(c,$ke,u),b(c,Hi,u),e(Hi,Rh),e(Rh,tK),g(j3,tK,null),e(Hi,Qro),e(Hi,aK),e(aK,Hro),b(c,Ike,u),b(c,Uo,u),g(D3,Uo,null),e(Uo,Uro),e(Uo,q3),e(q3,Jro),e(q3,$R),e($R,Yro),e(q3,Kro),e(Uo,Zro),e(Uo,G3),e(G3,eto),e(G3,nK),e(nK,oto),e(G3,rto),e(Uo,tto),e(Uo,Ie),g(O3,Ie,null),e(Ie,ato),e(Ie,sK),e(sK,nto),e(Ie,sto),e(Ie,Ui),e(Ui,lto),e(Ui,lK),e(lK,ito),e(Ui,dto),e(Ui,iK),e(iK,cto),e(Ui,fto),e(Ie,mto),e(Ie,xe),e(xe,Sh),e(Sh,dK),e(dK,gto),e(Sh,hto),e(Sh,IR),e(IR,pto),e(Sh,_to),e(xe,uto),e(xe,Ph),e(Ph,cK),e(cK,bto),e(Ph,vto),e(Ph,NR),e(NR,Tto),e(Ph,Fto),e(xe,Cto),e(xe,$h),e($h,fK),e(fK,Mto),e($h,Eto),e($h,jR),e(jR,yto),e($h,wto),e(xe,Ato),e(xe,Ih),e(Ih,mK),e(mK,Lto),e(Ih,Bto),e(Ih,DR),e(DR,xto),e(Ih,kto),e(xe,Rto),e(xe,Nh),e(Nh,gK),e(gK,Sto),e(Nh,Pto),e(Nh,qR),e(qR,$to),e(Nh,Ito),e(xe,Nto),e(xe,jh),e(jh,hK),e(hK,jto),e(jh,Dto),e(jh,GR),e(GR,qto),e(jh,Gto),e(xe,Oto),e(xe,Dh),e(Dh,pK),e(pK,Xto),e(Dh,Vto),e(Dh,OR),e(OR,zto),e(Dh,Wto),e(xe,Qto),e(xe,qh),e(qh,_K),e(_K,Hto),e(qh,Uto),e(qh,XR),e(XR,Jto),e(qh,Yto),e(Ie,Kto),g(Gh,Ie,null),e(Ie,Zto),e(Ie,uK),e(uK,eao),e(Ie,oao),g(X3,Ie,null),e(Uo,rao),e(Uo,Oh),g(V3,Oh,null),e(Oh,tao),e(Oh,bK),e(bK,aao),b(c,Nke,u),b(c,Ji,u),e(Ji,Xh),e(Xh,vK),g(z3,vK,null),e(Ji,nao),e(Ji,TK),e(TK,sao),b(c,jke,u),b(c,Jo,u),g(W3,Jo,null),e(Jo,lao),e(Jo,Yi),e(Yi,iao),e(Yi,FK),e(FK,dao),e(Yi,cao),e(Yi,CK),e(CK,fao),e(Yi,mao),e(Jo,gao),e(Jo,Q3),e(Q3,hao),e(Q3,MK),e(MK,pao),e(Q3,_ao),e(Jo,uao),e(Jo,Vr),g(H3,Vr,null),e(Vr,bao),e(Vr,EK),e(EK,vao),e(Vr,Tao),e(Vr,Ki),e(Ki,Fao),e(Ki,yK),e(yK,Cao),e(Ki,Mao),e(Ki,wK),e(wK,Eao),e(Ki,yao),e(Vr,wao),e(Vr,AK),e(AK,Aao),e(Vr,Lao),g(U3,Vr,null),e(Jo,Bao),e(Jo,Ne),g(J3,Ne,null),e(Ne,xao),e(Ne,LK),e(LK,kao),e(Ne,Rao),e(Ne,Va),e(Va,Sao),e(Va,BK),e(BK,Pao),e(Va,$ao),e(Va,xK),e(xK,Iao),e(Va,Nao),e(Va,kK),e(kK,jao),e(Va,Dao),e(Ne,qao),e(Ne,F),e(F,Vh),e(Vh,RK),e(RK,Gao),e(Vh,Oao),e(Vh,VR),e(VR,Xao),e(Vh,Vao),e(F,zao),e(F,zh),e(zh,SK),e(SK,Wao),e(zh,Qao),e(zh,zR),e(zR,Hao),e(zh,Uao),e(F,Jao),e(F,Wh),e(Wh,PK),e(PK,Yao),e(Wh,Kao),e(Wh,WR),e(WR,Zao),e(Wh,eno),e(F,ono),e(F,Qh),e(Qh,$K),e($K,rno),e(Qh,tno),e(Qh,QR),e(QR,ano),e(Qh,nno),e(F,sno),e(F,Hh),e(Hh,IK),e(IK,lno),e(Hh,ino),e(Hh,HR),e(HR,dno),e(Hh,cno),e(F,fno),e(F,Uh),e(Uh,NK),e(NK,mno),e(Uh,gno),e(Uh,UR),e(UR,hno),e(Uh,pno),e(F,_no),e(F,Jh),e(Jh,jK),e(jK,uno),e(Jh,bno),e(Jh,JR),e(JR,vno),e(Jh,Tno),e(F,Fno),e(F,Yh),e(Yh,DK),e(DK,Cno),e(Yh,Mno),e(Yh,YR),e(YR,Eno),e(Yh,yno),e(F,wno),e(F,Kh),e(Kh,qK),e(qK,Ano),e(Kh,Lno),e(Kh,KR),e(KR,Bno),e(Kh,xno),e(F,kno),e(F,Zh),e(Zh,GK),e(GK,Rno),e(Zh,Sno),e(Zh,ZR),e(ZR,Pno),e(Zh,$no),e(F,Ino),e(F,ep),e(ep,OK),e(OK,Nno),e(ep,jno),e(ep,eS),e(eS,Dno),e(ep,qno),e(F,Gno),e(F,op),e(op,XK),e(XK,Ono),e(op,Xno),e(op,oS),e(oS,Vno),e(op,zno),e(F,Wno),e(F,rp),e(rp,VK),e(VK,Qno),e(rp,Hno),e(rp,rS),e(rS,Uno),e(rp,Jno),e(F,Yno),e(F,tp),e(tp,zK),e(zK,Kno),e(tp,Zno),e(tp,tS),e(tS,eso),e(tp,oso),e(F,rso),e(F,ap),e(ap,WK),e(WK,tso),e(ap,aso),e(ap,aS),e(aS,nso),e(ap,sso),e(F,lso),e(F,np),e(np,QK),e(QK,iso),e(np,dso),e(np,nS),e(nS,cso),e(np,fso),e(F,mso),e(F,sp),e(sp,HK),e(HK,gso),e(sp,hso),e(sp,sS),e(sS,pso),e(sp,_so),e(F,uso),e(F,lp),e(lp,UK),e(UK,bso),e(lp,vso),e(lp,lS),e(lS,Tso),e(lp,Fso),e(F,Cso),e(F,ip),e(ip,JK),e(JK,Mso),e(ip,Eso),e(ip,iS),e(iS,yso),e(ip,wso),e(F,Aso),e(F,dp),e(dp,YK),e(YK,Lso),e(dp,Bso),e(dp,dS),e(dS,xso),e(dp,kso),e(F,Rso),e(F,cp),e(cp,KK),e(KK,Sso),e(cp,Pso),e(cp,cS),e(cS,$so),e(cp,Iso),e(F,Nso),e(F,fp),e(fp,ZK),e(ZK,jso),e(fp,Dso),e(fp,fS),e(fS,qso),e(fp,Gso),e(F,Oso),e(F,mp),e(mp,eZ),e(eZ,Xso),e(mp,Vso),e(mp,mS),e(mS,zso),e(mp,Wso),e(F,Qso),e(F,gp),e(gp,oZ),e(oZ,Hso),e(gp,Uso),e(gp,gS),e(gS,Jso),e(gp,Yso),e(F,Kso),e(F,hp),e(hp,rZ),e(rZ,Zso),e(hp,elo),e(hp,hS),e(hS,olo),e(hp,rlo),e(F,tlo),e(F,pp),e(pp,tZ),e(tZ,alo),e(pp,nlo),e(pp,pS),e(pS,slo),e(pp,llo),e(F,ilo),e(F,_p),e(_p,aZ),e(aZ,dlo),e(_p,clo),e(_p,_S),e(_S,flo),e(_p,mlo),e(F,glo),e(F,up),e(up,nZ),e(nZ,hlo),e(up,plo),e(up,uS),e(uS,_lo),e(up,ulo),e(F,blo),e(F,Ds),e(Ds,sZ),e(sZ,vlo),e(Ds,Tlo),e(Ds,bS),e(bS,Flo),e(Ds,Clo),e(Ds,vS),e(vS,Mlo),e(Ds,Elo),e(F,ylo),e(F,bp),e(bp,lZ),e(lZ,wlo),e(bp,Alo),e(bp,TS),e(TS,Llo),e(bp,Blo),e(F,xlo),e(F,vp),e(vp,iZ),e(iZ,klo),e(vp,Rlo),e(vp,FS),e(FS,Slo),e(vp,Plo),e(F,$lo),e(F,Tp),e(Tp,dZ),e(dZ,Ilo),e(Tp,Nlo),e(Tp,CS),e(CS,jlo),e(Tp,Dlo),e(F,qlo),e(F,Fp),e(Fp,cZ),e(cZ,Glo),e(Fp,Olo),e(Fp,MS),e(MS,Xlo),e(Fp,Vlo),e(F,zlo),e(F,Cp),e(Cp,fZ),e(fZ,Wlo),e(Cp,Qlo),e(Cp,ES),e(ES,Hlo),e(Cp,Ulo),e(F,Jlo),e(F,Mp),e(Mp,mZ),e(mZ,Ylo),e(Mp,Klo),e(Mp,yS),e(yS,Zlo),e(Mp,eio),e(F,oio),e(F,Ep),e(Ep,gZ),e(gZ,rio),e(Ep,tio),e(Ep,wS),e(wS,aio),e(Ep,nio),e(F,sio),e(F,yp),e(yp,hZ),e(hZ,lio),e(yp,iio),e(yp,AS),e(AS,dio),e(yp,cio),e(F,fio),e(F,wp),e(wp,pZ),e(pZ,mio),e(wp,gio),e(wp,LS),e(LS,hio),e(wp,pio),e(F,_io),e(F,Ap),e(Ap,_Z),e(_Z,uio),e(Ap,bio),e(Ap,BS),e(BS,vio),e(Ap,Tio),e(F,Fio),e(F,Lp),e(Lp,uZ),e(uZ,Cio),e(Lp,Mio),e(Lp,xS),e(xS,Eio),e(Lp,yio),e(F,wio),e(F,Bp),e(Bp,bZ),e(bZ,Aio),e(Bp,Lio),e(Bp,kS),e(kS,Bio),e(Bp,xio),e(F,kio),e(F,xp),e(xp,vZ),e(vZ,Rio),e(xp,Sio),e(xp,RS),e(RS,Pio),e(xp,$io),e(F,Iio),e(F,kp),e(kp,TZ),e(TZ,Nio),e(kp,jio),e(kp,SS),e(SS,Dio),e(kp,qio),e(F,Gio),e(F,Rp),e(Rp,FZ),e(FZ,Oio),e(Rp,Xio),e(Rp,PS),e(PS,Vio),e(Rp,zio),e(F,Wio),e(F,Sp),e(Sp,CZ),e(CZ,Qio),e(Sp,Hio),e(Sp,$S),e($S,Uio),e(Sp,Jio),e(F,Yio),e(F,Pp),e(Pp,MZ),e(MZ,Kio),e(Pp,Zio),e(Pp,IS),e(IS,edo),e(Pp,odo),e(F,rdo),e(F,$p),e($p,EZ),e(EZ,tdo),e($p,ado),e($p,NS),e(NS,ndo),e($p,sdo),e(F,ldo),e(F,Ip),e(Ip,yZ),e(yZ,ido),e(Ip,ddo),e(Ip,jS),e(jS,cdo),e(Ip,fdo),e(F,mdo),e(F,Np),e(Np,wZ),e(wZ,gdo),e(Np,hdo),e(Np,DS),e(DS,pdo),e(Np,_do),e(F,udo),e(F,jp),e(jp,AZ),e(AZ,bdo),e(jp,vdo),e(jp,qS),e(qS,Tdo),e(jp,Fdo),e(F,Cdo),e(F,Dp),e(Dp,LZ),e(LZ,Mdo),e(Dp,Edo),e(Dp,GS),e(GS,ydo),e(Dp,wdo),e(F,Ado),e(F,qp),e(qp,BZ),e(BZ,Ldo),e(qp,Bdo),e(qp,OS),e(OS,xdo),e(qp,kdo),e(F,Rdo),e(F,Gp),e(Gp,xZ),e(xZ,Sdo),e(Gp,Pdo),e(Gp,XS),e(XS,$do),e(Gp,Ido),e(F,Ndo),e(F,Op),e(Op,kZ),e(kZ,jdo),e(Op,Ddo),e(Op,VS),e(VS,qdo),e(Op,Gdo),e(F,Odo),e(F,Xp),e(Xp,RZ),e(RZ,Xdo),e(Xp,Vdo),e(Xp,zS),e(zS,zdo),e(Xp,Wdo),e(F,Qdo),e(F,Vp),e(Vp,SZ),e(SZ,Hdo),e(Vp,Udo),e(Vp,WS),e(WS,Jdo),e(Vp,Ydo),e(F,Kdo),e(F,zp),e(zp,PZ),e(PZ,Zdo),e(zp,eco),e(zp,QS),e(QS,oco),e(zp,rco),e(F,tco),e(F,Wp),e(Wp,$Z),e($Z,aco),e(Wp,nco),e(Wp,HS),e(HS,sco),e(Wp,lco),e(F,ico),e(F,Qp),e(Qp,IZ),e(IZ,dco),e(Qp,cco),e(Qp,US),e(US,fco),e(Qp,mco),e(F,gco),e(F,Hp),e(Hp,NZ),e(NZ,hco),e(Hp,pco),e(Hp,JS),e(JS,_co),e(Hp,uco),e(F,bco),e(F,Up),e(Up,jZ),e(jZ,vco),e(Up,Tco),e(Up,YS),e(YS,Fco),e(Up,Cco),e(F,Mco),e(F,Jp),e(Jp,DZ),e(DZ,Eco),e(Jp,yco),e(Jp,KS),e(KS,wco),e(Jp,Aco),e(F,Lco),e(F,Yp),e(Yp,qZ),e(qZ,Bco),e(Yp,xco),e(Yp,ZS),e(ZS,kco),e(Yp,Rco),e(F,Sco),e(F,Kp),e(Kp,GZ),e(GZ,Pco),e(Kp,$co),e(Kp,eP),e(eP,Ico),e(Kp,Nco),e(F,jco),e(F,Zp),e(Zp,OZ),e(OZ,Dco),e(Zp,qco),e(Zp,oP),e(oP,Gco),e(Zp,Oco),e(F,Xco),e(F,e_),e(e_,XZ),e(XZ,Vco),e(e_,zco),e(e_,rP),e(rP,Wco),e(e_,Qco),e(F,Hco),e(F,o_),e(o_,VZ),e(VZ,Uco),e(o_,Jco),e(o_,tP),e(tP,Yco),e(o_,Kco),e(F,Zco),e(F,r_),e(r_,zZ),e(zZ,efo),e(r_,ofo),e(r_,aP),e(aP,rfo),e(r_,tfo),e(F,afo),e(F,t_),e(t_,WZ),e(WZ,nfo),e(t_,sfo),e(t_,nP),e(nP,lfo),e(t_,ifo),e(F,dfo),e(F,a_),e(a_,QZ),e(QZ,cfo),e(a_,ffo),e(a_,sP),e(sP,mfo),e(a_,gfo),e(F,hfo),e(F,n_),e(n_,HZ),e(HZ,pfo),e(n_,_fo),e(n_,lP),e(lP,ufo),e(n_,bfo),e(F,vfo),e(F,s_),e(s_,UZ),e(UZ,Tfo),e(s_,Ffo),e(s_,iP),e(iP,Cfo),e(s_,Mfo),e(F,Efo),e(F,l_),e(l_,JZ),e(JZ,yfo),e(l_,wfo),e(l_,dP),e(dP,Afo),e(l_,Lfo),e(F,Bfo),e(F,i_),e(i_,YZ),e(YZ,xfo),e(i_,kfo),e(i_,cP),e(cP,Rfo),e(i_,Sfo),e(F,Pfo),e(F,d_),e(d_,KZ),e(KZ,$fo),e(d_,Ifo),e(d_,fP),e(fP,Nfo),e(d_,jfo),e(F,Dfo),e(F,c_),e(c_,ZZ),e(ZZ,qfo),e(c_,Gfo),e(c_,mP),e(mP,Ofo),e(c_,Xfo),e(F,Vfo),e(F,f_),e(f_,eee),e(eee,zfo),e(f_,Wfo),e(f_,gP),e(gP,Qfo),e(f_,Hfo),e(F,Ufo),e(F,m_),e(m_,oee),e(oee,Jfo),e(m_,Yfo),e(m_,hP),e(hP,Kfo),e(m_,Zfo),e(F,emo),e(F,g_),e(g_,ree),e(ree,omo),e(g_,rmo),e(g_,pP),e(pP,tmo),e(g_,amo),e(F,nmo),e(F,h_),e(h_,tee),e(tee,smo),e(h_,lmo),e(h_,_P),e(_P,imo),e(h_,dmo),e(F,cmo),e(F,p_),e(p_,aee),e(aee,fmo),e(p_,mmo),e(p_,uP),e(uP,gmo),e(p_,hmo),e(F,pmo),e(F,__),e(__,nee),e(nee,_mo),e(__,umo),e(__,bP),e(bP,bmo),e(__,vmo),e(F,Tmo),e(F,u_),e(u_,see),e(see,Fmo),e(u_,Cmo),e(u_,vP),e(vP,Mmo),e(u_,Emo),e(F,ymo),e(F,b_),e(b_,lee),e(lee,wmo),e(b_,Amo),e(b_,TP),e(TP,Lmo),e(b_,Bmo),e(F,xmo),e(F,v_),e(v_,iee),e(iee,kmo),e(v_,Rmo),e(v_,FP),e(FP,Smo),e(v_,Pmo),e(F,$mo),e(F,T_),e(T_,dee),e(dee,Imo),e(T_,Nmo),e(T_,CP),e(CP,jmo),e(T_,Dmo),e(F,qmo),e(F,F_),e(F_,cee),e(cee,Gmo),e(F_,Omo),e(F_,MP),e(MP,Xmo),e(F_,Vmo),e(F,zmo),e(F,C_),e(C_,fee),e(fee,Wmo),e(C_,Qmo),e(C_,EP),e(EP,Hmo),e(C_,Umo),e(F,Jmo),e(F,M_),e(M_,mee),e(mee,Ymo),e(M_,Kmo),e(M_,yP),e(yP,Zmo),e(M_,ego),e(F,ogo),e(F,E_),e(E_,gee),e(gee,rgo),e(E_,tgo),e(E_,wP),e(wP,ago),e(E_,ngo),e(F,sgo),e(F,y_),e(y_,hee),e(hee,lgo),e(y_,igo),e(y_,AP),e(AP,dgo),e(y_,cgo),e(Ne,fgo),e(Ne,w_),e(w_,mgo),e(w_,pee),e(pee,ggo),e(w_,hgo),e(w_,_ee),e(_ee,pgo),e(Ne,_go),e(Ne,uee),e(uee,ugo),e(Ne,bgo),g(Y3,Ne,null),b(c,Dke,u),b(c,Zi,u),e(Zi,A_),e(A_,bee),g(K3,bee,null),e(Zi,vgo),e(Zi,vee),e(vee,Tgo),b(c,qke,u),b(c,Yo,u),g(Z3,Yo,null),e(Yo,Fgo),e(Yo,ed),e(ed,Cgo),e(ed,Tee),e(Tee,Mgo),e(ed,Ego),e(ed,Fee),e(Fee,ygo),e(ed,wgo),e(Yo,Ago),e(Yo,ey),e(ey,Lgo),e(ey,Cee),e(Cee,Bgo),e(ey,xgo),e(Yo,kgo),e(Yo,zr),g(oy,zr,null),e(zr,Rgo),e(zr,Mee),e(Mee,Sgo),e(zr,Pgo),e(zr,od),e(od,$go),e(od,Eee),e(Eee,Igo),e(od,Ngo),e(od,yee),e(yee,jgo),e(od,Dgo),e(zr,qgo),e(zr,wee),e(wee,Ggo),e(zr,Ogo),g(ry,zr,null),e(Yo,Xgo),e(Yo,je),g(ty,je,null),e(je,Vgo),e(je,Aee),e(Aee,zgo),e(je,Wgo),e(je,za),e(za,Qgo),e(za,Lee),e(Lee,Hgo),e(za,Ugo),e(za,Bee),e(Bee,Jgo),e(za,Ygo),e(za,xee),e(xee,Kgo),e(za,Zgo),e(je,eho),e(je,k),e(k,L_),e(L_,kee),e(kee,oho),e(L_,rho),e(L_,LP),e(LP,tho),e(L_,aho),e(k,nho),e(k,B_),e(B_,Ree),e(Ree,sho),e(B_,lho),e(B_,BP),e(BP,iho),e(B_,dho),e(k,cho),e(k,x_),e(x_,See),e(See,fho),e(x_,mho),e(x_,xP),e(xP,gho),e(x_,hho),e(k,pho),e(k,k_),e(k_,Pee),e(Pee,_ho),e(k_,uho),e(k_,kP),e(kP,bho),e(k_,vho),e(k,Tho),e(k,R_),e(R_,$ee),e($ee,Fho),e(R_,Cho),e(R_,RP),e(RP,Mho),e(R_,Eho),e(k,yho),e(k,S_),e(S_,Iee),e(Iee,who),e(S_,Aho),e(S_,SP),e(SP,Lho),e(S_,Bho),e(k,xho),e(k,P_),e(P_,Nee),e(Nee,kho),e(P_,Rho),e(P_,PP),e(PP,Sho),e(P_,Pho),e(k,$ho),e(k,$_),e($_,jee),e(jee,Iho),e($_,Nho),e($_,$P),e($P,jho),e($_,Dho),e(k,qho),e(k,I_),e(I_,Dee),e(Dee,Gho),e(I_,Oho),e(I_,IP),e(IP,Xho),e(I_,Vho),e(k,zho),e(k,N_),e(N_,qee),e(qee,Who),e(N_,Qho),e(N_,NP),e(NP,Hho),e(N_,Uho),e(k,Jho),e(k,j_),e(j_,Gee),e(Gee,Yho),e(j_,Kho),e(j_,jP),e(jP,Zho),e(j_,epo),e(k,opo),e(k,D_),e(D_,Oee),e(Oee,rpo),e(D_,tpo),e(D_,DP),e(DP,apo),e(D_,npo),e(k,spo),e(k,q_),e(q_,Xee),e(Xee,lpo),e(q_,ipo),e(q_,qP),e(qP,dpo),e(q_,cpo),e(k,fpo),e(k,G_),e(G_,Vee),e(Vee,mpo),e(G_,gpo),e(G_,GP),e(GP,hpo),e(G_,ppo),e(k,_po),e(k,O_),e(O_,zee),e(zee,upo),e(O_,bpo),e(O_,OP),e(OP,vpo),e(O_,Tpo),e(k,Fpo),e(k,X_),e(X_,Wee),e(Wee,Cpo),e(X_,Mpo),e(X_,XP),e(XP,Epo),e(X_,ypo),e(k,wpo),e(k,V_),e(V_,Qee),e(Qee,Apo),e(V_,Lpo),e(V_,VP),e(VP,Bpo),e(V_,xpo),e(k,kpo),e(k,z_),e(z_,Hee),e(Hee,Rpo),e(z_,Spo),e(z_,zP),e(zP,Ppo),e(z_,$po),e(k,Ipo),e(k,W_),e(W_,Uee),e(Uee,Npo),e(W_,jpo),e(W_,WP),e(WP,Dpo),e(W_,qpo),e(k,Gpo),e(k,Q_),e(Q_,Jee),e(Jee,Opo),e(Q_,Xpo),e(Q_,QP),e(QP,Vpo),e(Q_,zpo),e(k,Wpo),e(k,H_),e(H_,Yee),e(Yee,Qpo),e(H_,Hpo),e(H_,HP),e(HP,Upo),e(H_,Jpo),e(k,Ypo),e(k,U_),e(U_,Kee),e(Kee,Kpo),e(U_,Zpo),e(U_,UP),e(UP,e_o),e(U_,o_o),e(k,r_o),e(k,J_),e(J_,Zee),e(Zee,t_o),e(J_,a_o),e(J_,JP),e(JP,n_o),e(J_,s_o),e(k,l_o),e(k,Y_),e(Y_,eoe),e(eoe,i_o),e(Y_,d_o),e(Y_,YP),e(YP,c_o),e(Y_,f_o),e(k,m_o),e(k,K_),e(K_,ooe),e(ooe,g_o),e(K_,h_o),e(K_,KP),e(KP,p_o),e(K_,__o),e(k,u_o),e(k,Z_),e(Z_,roe),e(roe,b_o),e(Z_,v_o),e(Z_,ZP),e(ZP,T_o),e(Z_,F_o),e(k,C_o),e(k,eu),e(eu,toe),e(toe,M_o),e(eu,E_o),e(eu,e$),e(e$,y_o),e(eu,w_o),e(k,A_o),e(k,ou),e(ou,aoe),e(aoe,L_o),e(ou,B_o),e(ou,o$),e(o$,x_o),e(ou,k_o),e(k,R_o),e(k,ru),e(ru,noe),e(noe,S_o),e(ru,P_o),e(ru,r$),e(r$,$_o),e(ru,I_o),e(k,N_o),e(k,tu),e(tu,soe),e(soe,j_o),e(tu,D_o),e(tu,t$),e(t$,q_o),e(tu,G_o),e(k,O_o),e(k,au),e(au,loe),e(loe,X_o),e(au,V_o),e(au,a$),e(a$,z_o),e(au,W_o),e(k,Q_o),e(k,nu),e(nu,ioe),e(ioe,H_o),e(nu,U_o),e(nu,n$),e(n$,J_o),e(nu,Y_o),e(k,K_o),e(k,su),e(su,doe),e(doe,Z_o),e(su,euo),e(su,s$),e(s$,ouo),e(su,ruo),e(k,tuo),e(k,lu),e(lu,coe),e(coe,auo),e(lu,nuo),e(lu,l$),e(l$,suo),e(lu,luo),e(k,iuo),e(k,iu),e(iu,foe),e(foe,duo),e(iu,cuo),e(iu,i$),e(i$,fuo),e(iu,muo),e(k,guo),e(k,du),e(du,moe),e(moe,huo),e(du,puo),e(du,d$),e(d$,_uo),e(du,uuo),e(k,buo),e(k,cu),e(cu,goe),e(goe,vuo),e(cu,Tuo),e(cu,c$),e(c$,Fuo),e(cu,Cuo),e(k,Muo),e(k,fu),e(fu,hoe),e(hoe,Euo),e(fu,yuo),e(fu,f$),e(f$,wuo),e(fu,Auo),e(k,Luo),e(k,mu),e(mu,poe),e(poe,Buo),e(mu,xuo),e(mu,m$),e(m$,kuo),e(mu,Ruo),e(je,Suo),e(je,gu),e(gu,Puo),e(gu,_oe),e(_oe,$uo),e(gu,Iuo),e(gu,uoe),e(uoe,Nuo),e(je,juo),e(je,boe),e(boe,Duo),e(je,quo),g(ay,je,null),b(c,Gke,u),b(c,rd,u),e(rd,hu),e(hu,voe),g(ny,voe,null),e(rd,Guo),e(rd,Toe),e(Toe,Ouo),b(c,Oke,u),b(c,Ko,u),g(sy,Ko,null),e(Ko,Xuo),e(Ko,td),e(td,Vuo),e(td,Foe),e(Foe,zuo),e(td,Wuo),e(td,Coe),e(Coe,Quo),e(td,Huo),e(Ko,Uuo),e(Ko,ly),e(ly,Juo),e(ly,Moe),e(Moe,Yuo),e(ly,Kuo),e(Ko,Zuo),e(Ko,Wr),g(iy,Wr,null),e(Wr,e5o),e(Wr,Eoe),e(Eoe,o5o),e(Wr,r5o),e(Wr,ad),e(ad,t5o),e(ad,yoe),e(yoe,a5o),e(ad,n5o),e(ad,woe),e(woe,s5o),e(ad,l5o),e(Wr,i5o),e(Wr,Aoe),e(Aoe,d5o),e(Wr,c5o),g(dy,Wr,null),e(Ko,f5o),e(Ko,De),g(cy,De,null),e(De,m5o),e(De,Loe),e(Loe,g5o),e(De,h5o),e(De,Wa),e(Wa,p5o),e(Wa,Boe),e(Boe,_5o),e(Wa,u5o),e(Wa,xoe),e(xoe,b5o),e(Wa,v5o),e(Wa,koe),e(koe,T5o),e(Wa,F5o),e(De,C5o),e(De,$),e($,pu),e(pu,Roe),e(Roe,M5o),e(pu,E5o),e(pu,g$),e(g$,y5o),e(pu,w5o),e($,A5o),e($,_u),e(_u,Soe),e(Soe,L5o),e(_u,B5o),e(_u,h$),e(h$,x5o),e(_u,k5o),e($,R5o),e($,uu),e(uu,Poe),e(Poe,S5o),e(uu,P5o),e(uu,p$),e(p$,$5o),e(uu,I5o),e($,N5o),e($,bu),e(bu,$oe),e($oe,j5o),e(bu,D5o),e(bu,_$),e(_$,q5o),e(bu,G5o),e($,O5o),e($,vu),e(vu,Ioe),e(Ioe,X5o),e(vu,V5o),e(vu,u$),e(u$,z5o),e(vu,W5o),e($,Q5o),e($,Tu),e(Tu,Noe),e(Noe,H5o),e(Tu,U5o),e(Tu,b$),e(b$,J5o),e(Tu,Y5o),e($,K5o),e($,Fu),e(Fu,joe),e(joe,Z5o),e(Fu,e2o),e(Fu,v$),e(v$,o2o),e(Fu,r2o),e($,t2o),e($,Cu),e(Cu,Doe),e(Doe,a2o),e(Cu,n2o),e(Cu,T$),e(T$,s2o),e(Cu,l2o),e($,i2o),e($,Mu),e(Mu,qoe),e(qoe,d2o),e(Mu,c2o),e(Mu,F$),e(F$,f2o),e(Mu,m2o),e($,g2o),e($,Eu),e(Eu,Goe),e(Goe,h2o),e(Eu,p2o),e(Eu,C$),e(C$,_2o),e(Eu,u2o),e($,b2o),e($,yu),e(yu,Ooe),e(Ooe,v2o),e(yu,T2o),e(yu,M$),e(M$,F2o),e(yu,C2o),e($,M2o),e($,wu),e(wu,Xoe),e(Xoe,E2o),e(wu,y2o),e(wu,E$),e(E$,w2o),e(wu,A2o),e($,L2o),e($,Au),e(Au,Voe),e(Voe,B2o),e(Au,x2o),e(Au,y$),e(y$,k2o),e(Au,R2o),e($,S2o),e($,Lu),e(Lu,zoe),e(zoe,P2o),e(Lu,$2o),e(Lu,w$),e(w$,I2o),e(Lu,N2o),e($,j2o),e($,Bu),e(Bu,Woe),e(Woe,D2o),e(Bu,q2o),e(Bu,A$),e(A$,G2o),e(Bu,O2o),e($,X2o),e($,xu),e(xu,Qoe),e(Qoe,V2o),e(xu,z2o),e(xu,L$),e(L$,W2o),e(xu,Q2o),e($,H2o),e($,ku),e(ku,Hoe),e(Hoe,U2o),e(ku,J2o),e(ku,B$),e(B$,Y2o),e(ku,K2o),e($,Z2o),e($,Ru),e(Ru,Uoe),e(Uoe,e1o),e(Ru,o1o),e(Ru,x$),e(x$,r1o),e(Ru,t1o),e($,a1o),e($,Su),e(Su,Joe),e(Joe,n1o),e(Su,s1o),e(Su,k$),e(k$,l1o),e(Su,i1o),e($,d1o),e($,Pu),e(Pu,Yoe),e(Yoe,c1o),e(Pu,f1o),e(Pu,R$),e(R$,m1o),e(Pu,g1o),e($,h1o),e($,$u),e($u,Koe),e(Koe,p1o),e($u,_1o),e($u,S$),e(S$,u1o),e($u,b1o),e($,v1o),e($,Iu),e(Iu,Zoe),e(Zoe,T1o),e(Iu,F1o),e(Iu,P$),e(P$,C1o),e(Iu,M1o),e($,E1o),e($,Nu),e(Nu,ere),e(ere,y1o),e(Nu,w1o),e(Nu,$$),e($$,A1o),e(Nu,L1o),e($,B1o),e($,ju),e(ju,ore),e(ore,x1o),e(ju,k1o),e(ju,I$),e(I$,R1o),e(ju,S1o),e($,P1o),e($,Du),e(Du,rre),e(rre,$1o),e(Du,I1o),e(Du,N$),e(N$,N1o),e(Du,j1o),e($,D1o),e($,qu),e(qu,tre),e(tre,q1o),e(qu,G1o),e(qu,j$),e(j$,O1o),e(qu,X1o),e($,V1o),e($,Gu),e(Gu,are),e(are,z1o),e(Gu,W1o),e(Gu,D$),e(D$,Q1o),e(Gu,H1o),e($,U1o),e($,Ou),e(Ou,nre),e(nre,J1o),e(Ou,Y1o),e(Ou,q$),e(q$,K1o),e(Ou,Z1o),e($,ebo),e($,Xu),e(Xu,sre),e(sre,obo),e(Xu,rbo),e(Xu,G$),e(G$,tbo),e(Xu,abo),e($,nbo),e($,Vu),e(Vu,lre),e(lre,sbo),e(Vu,lbo),e(Vu,O$),e(O$,ibo),e(Vu,dbo),e($,cbo),e($,zu),e(zu,ire),e(ire,fbo),e(zu,mbo),e(zu,X$),e(X$,gbo),e(zu,hbo),e($,pbo),e($,Wu),e(Wu,dre),e(dre,_bo),e(Wu,ubo),e(Wu,V$),e(V$,bbo),e(Wu,vbo),e($,Tbo),e($,Qu),e(Qu,cre),e(cre,Fbo),e(Qu,Cbo),e(Qu,z$),e(z$,Mbo),e(Qu,Ebo),e($,ybo),e($,Hu),e(Hu,fre),e(fre,wbo),e(Hu,Abo),e(Hu,W$),e(W$,Lbo),e(Hu,Bbo),e($,xbo),e($,Uu),e(Uu,mre),e(mre,kbo),e(Uu,Rbo),e(Uu,Q$),e(Q$,Sbo),e(Uu,Pbo),e(De,$bo),e(De,Ju),e(Ju,Ibo),e(Ju,gre),e(gre,Nbo),e(Ju,jbo),e(Ju,hre),e(hre,Dbo),e(De,qbo),e(De,pre),e(pre,Gbo),e(De,Obo),g(fy,De,null),b(c,Xke,u),b(c,nd,u),e(nd,Yu),e(Yu,_re),g(my,_re,null),e(nd,Xbo),e(nd,ure),e(ure,Vbo),b(c,Vke,u),b(c,Zo,u),g(gy,Zo,null),e(Zo,zbo),e(Zo,sd),e(sd,Wbo),e(sd,bre),e(bre,Qbo),e(sd,Hbo),e(sd,vre),e(vre,Ubo),e(sd,Jbo),e(Zo,Ybo),e(Zo,hy),e(hy,Kbo),e(hy,Tre),e(Tre,Zbo),e(hy,evo),e(Zo,ovo),e(Zo,Qr),g(py,Qr,null),e(Qr,rvo),e(Qr,Fre),e(Fre,tvo),e(Qr,avo),e(Qr,ld),e(ld,nvo),e(ld,Cre),e(Cre,svo),e(ld,lvo),e(ld,Mre),e(Mre,ivo),e(ld,dvo),e(Qr,cvo),e(Qr,Ere),e(Ere,fvo),e(Qr,mvo),g(_y,Qr,null),e(Zo,gvo),e(Zo,qe),g(uy,qe,null),e(qe,hvo),e(qe,yre),e(yre,pvo),e(qe,_vo),e(qe,Qa),e(Qa,uvo),e(Qa,wre),e(wre,bvo),e(Qa,vvo),e(Qa,Are),e(Are,Tvo),e(Qa,Fvo),e(Qa,Lre),e(Lre,Cvo),e(Qa,Mvo),e(qe,Evo),e(qe,I),e(I,Ku),e(Ku,Bre),e(Bre,yvo),e(Ku,wvo),e(Ku,H$),e(H$,Avo),e(Ku,Lvo),e(I,Bvo),e(I,Zu),e(Zu,xre),e(xre,xvo),e(Zu,kvo),e(Zu,U$),e(U$,Rvo),e(Zu,Svo),e(I,Pvo),e(I,e5),e(e5,kre),e(kre,$vo),e(e5,Ivo),e(e5,J$),e(J$,Nvo),e(e5,jvo),e(I,Dvo),e(I,o5),e(o5,Rre),e(Rre,qvo),e(o5,Gvo),e(o5,Y$),e(Y$,Ovo),e(o5,Xvo),e(I,Vvo),e(I,r5),e(r5,Sre),e(Sre,zvo),e(r5,Wvo),e(r5,K$),e(K$,Qvo),e(r5,Hvo),e(I,Uvo),e(I,t5),e(t5,Pre),e(Pre,Jvo),e(t5,Yvo),e(t5,Z$),e(Z$,Kvo),e(t5,Zvo),e(I,e6o),e(I,a5),e(a5,$re),e($re,o6o),e(a5,r6o),e(a5,eI),e(eI,t6o),e(a5,a6o),e(I,n6o),e(I,n5),e(n5,Ire),e(Ire,s6o),e(n5,l6o),e(n5,oI),e(oI,i6o),e(n5,d6o),e(I,c6o),e(I,s5),e(s5,Nre),e(Nre,f6o),e(s5,m6o),e(s5,rI),e(rI,g6o),e(s5,h6o),e(I,p6o),e(I,l5),e(l5,jre),e(jre,_6o),e(l5,u6o),e(l5,tI),e(tI,b6o),e(l5,v6o),e(I,T6o),e(I,i5),e(i5,Dre),e(Dre,F6o),e(i5,C6o),e(i5,aI),e(aI,M6o),e(i5,E6o),e(I,y6o),e(I,d5),e(d5,qre),e(qre,w6o),e(d5,A6o),e(d5,nI),e(nI,L6o),e(d5,B6o),e(I,x6o),e(I,c5),e(c5,Gre),e(Gre,k6o),e(c5,R6o),e(c5,sI),e(sI,S6o),e(c5,P6o),e(I,$6o),e(I,f5),e(f5,Ore),e(Ore,I6o),e(f5,N6o),e(f5,lI),e(lI,j6o),e(f5,D6o),e(I,q6o),e(I,m5),e(m5,Xre),e(Xre,G6o),e(m5,O6o),e(m5,iI),e(iI,X6o),e(m5,V6o),e(I,z6o),e(I,g5),e(g5,Vre),e(Vre,W6o),e(g5,Q6o),e(g5,dI),e(dI,H6o),e(g5,U6o),e(I,J6o),e(I,h5),e(h5,zre),e(zre,Y6o),e(h5,K6o),e(h5,cI),e(cI,Z6o),e(h5,eTo),e(I,oTo),e(I,p5),e(p5,Wre),e(Wre,rTo),e(p5,tTo),e(p5,fI),e(fI,aTo),e(p5,nTo),e(I,sTo),e(I,_5),e(_5,Qre),e(Qre,lTo),e(_5,iTo),e(_5,mI),e(mI,dTo),e(_5,cTo),e(I,fTo),e(I,u5),e(u5,Hre),e(Hre,mTo),e(u5,gTo),e(u5,gI),e(gI,hTo),e(u5,pTo),e(I,_To),e(I,b5),e(b5,Ure),e(Ure,uTo),e(b5,bTo),e(b5,hI),e(hI,vTo),e(b5,TTo),e(I,FTo),e(I,v5),e(v5,Jre),e(Jre,CTo),e(v5,MTo),e(v5,pI),e(pI,ETo),e(v5,yTo),e(I,wTo),e(I,T5),e(T5,Yre),e(Yre,ATo),e(T5,LTo),e(T5,_I),e(_I,BTo),e(T5,xTo),e(I,kTo),e(I,F5),e(F5,Kre),e(Kre,RTo),e(F5,STo),e(F5,uI),e(uI,PTo),e(F5,$To),e(I,ITo),e(I,C5),e(C5,Zre),e(Zre,NTo),e(C5,jTo),e(C5,bI),e(bI,DTo),e(C5,qTo),e(I,GTo),e(I,M5),e(M5,ete),e(ete,OTo),e(M5,XTo),e(M5,vI),e(vI,VTo),e(M5,zTo),e(I,WTo),e(I,E5),e(E5,ote),e(ote,QTo),e(E5,HTo),e(E5,TI),e(TI,UTo),e(E5,JTo),e(I,YTo),e(I,y5),e(y5,rte),e(rte,KTo),e(y5,ZTo),e(y5,FI),e(FI,eFo),e(y5,oFo),e(I,rFo),e(I,w5),e(w5,tte),e(tte,tFo),e(w5,aFo),e(w5,CI),e(CI,nFo),e(w5,sFo),e(I,lFo),e(I,A5),e(A5,ate),e(ate,iFo),e(A5,dFo),e(A5,MI),e(MI,cFo),e(A5,fFo),e(I,mFo),e(I,L5),e(L5,nte),e(nte,gFo),e(L5,hFo),e(L5,ste),e(ste,pFo),e(L5,_Fo),e(I,uFo),e(I,B5),e(B5,lte),e(lte,bFo),e(B5,vFo),e(B5,EI),e(EI,TFo),e(B5,FFo),e(I,CFo),e(I,x5),e(x5,ite),e(ite,MFo),e(x5,EFo),e(x5,yI),e(yI,yFo),e(x5,wFo),e(I,AFo),e(I,k5),e(k5,dte),e(dte,LFo),e(k5,BFo),e(k5,wI),e(wI,xFo),e(k5,kFo),e(I,RFo),e(I,R5),e(R5,cte),e(cte,SFo),e(R5,PFo),e(R5,AI),e(AI,$Fo),e(R5,IFo),e(qe,NFo),e(qe,S5),e(S5,jFo),e(S5,fte),e(fte,DFo),e(S5,qFo),e(S5,mte),e(mte,GFo),e(qe,OFo),e(qe,gte),e(gte,XFo),e(qe,VFo),g(by,qe,null),b(c,zke,u),b(c,id,u),e(id,P5),e(P5,hte),g(vy,hte,null),e(id,zFo),e(id,pte),e(pte,WFo),b(c,Wke,u),b(c,er,u),g(Ty,er,null),e(er,QFo),e(er,dd),e(dd,HFo),e(dd,_te),e(_te,UFo),e(dd,JFo),e(dd,ute),e(ute,YFo),e(dd,KFo),e(er,ZFo),e(er,Fy),e(Fy,eCo),e(Fy,bte),e(bte,oCo),e(Fy,rCo),e(er,tCo),e(er,Hr),g(Cy,Hr,null),e(Hr,aCo),e(Hr,vte),e(vte,nCo),e(Hr,sCo),e(Hr,cd),e(cd,lCo),e(cd,Tte),e(Tte,iCo),e(cd,dCo),e(cd,Fte),e(Fte,cCo),e(cd,fCo),e(Hr,mCo),e(Hr,Cte),e(Cte,gCo),e(Hr,hCo),g(My,Hr,null),e(er,pCo),e(er,Ge),g(Ey,Ge,null),e(Ge,_Co),e(Ge,Mte),e(Mte,uCo),e(Ge,bCo),e(Ge,Ha),e(Ha,vCo),e(Ha,Ete),e(Ete,TCo),e(Ha,FCo),e(Ha,yte),e(yte,CCo),e(Ha,MCo),e(Ha,wte),e(wte,ECo),e(Ha,yCo),e(Ge,wCo),e(Ge,se),e(se,$5),e($5,Ate),e(Ate,ACo),e($5,LCo),e($5,LI),e(LI,BCo),e($5,xCo),e(se,kCo),e(se,I5),e(I5,Lte),e(Lte,RCo),e(I5,SCo),e(I5,BI),e(BI,PCo),e(I5,$Co),e(se,ICo),e(se,N5),e(N5,Bte),e(Bte,NCo),e(N5,jCo),e(N5,xI),e(xI,DCo),e(N5,qCo),e(se,GCo),e(se,j5),e(j5,xte),e(xte,OCo),e(j5,XCo),e(j5,kI),e(kI,VCo),e(j5,zCo),e(se,WCo),e(se,D5),e(D5,kte),e(kte,QCo),e(D5,HCo),e(D5,RI),e(RI,UCo),e(D5,JCo),e(se,YCo),e(se,q5),e(q5,Rte),e(Rte,KCo),e(q5,ZCo),e(q5,SI),e(SI,eMo),e(q5,oMo),e(se,rMo),e(se,G5),e(G5,Ste),e(Ste,tMo),e(G5,aMo),e(G5,PI),e(PI,nMo),e(G5,sMo),e(se,lMo),e(se,O5),e(O5,Pte),e(Pte,iMo),e(O5,dMo),e(O5,$I),e($I,cMo),e(O5,fMo),e(se,mMo),e(se,X5),e(X5,$te),e($te,gMo),e(X5,hMo),e(X5,II),e(II,pMo),e(X5,_Mo),e(se,uMo),e(se,V5),e(V5,Ite),e(Ite,bMo),e(V5,vMo),e(V5,NI),e(NI,TMo),e(V5,FMo),e(se,CMo),e(se,z5),e(z5,Nte),e(Nte,MMo),e(z5,EMo),e(z5,jI),e(jI,yMo),e(z5,wMo),e(se,AMo),e(se,W5),e(W5,jte),e(jte,LMo),e(W5,BMo),e(W5,DI),e(DI,xMo),e(W5,kMo),e(se,RMo),e(se,Q5),e(Q5,Dte),e(Dte,SMo),e(Q5,PMo),e(Q5,qI),e(qI,$Mo),e(Q5,IMo),e(se,NMo),e(se,H5),e(H5,qte),e(qte,jMo),e(H5,DMo),e(H5,GI),e(GI,qMo),e(H5,GMo),e(se,OMo),e(se,U5),e(U5,Gte),e(Gte,XMo),e(U5,VMo),e(U5,OI),e(OI,zMo),e(U5,WMo),e(se,QMo),e(se,J5),e(J5,Ote),e(Ote,HMo),e(J5,UMo),e(J5,XI),e(XI,JMo),e(J5,YMo),e(Ge,KMo),e(Ge,Y5),e(Y5,ZMo),e(Y5,Xte),e(Xte,e4o),e(Y5,o4o),e(Y5,Vte),e(Vte,r4o),e(Ge,t4o),e(Ge,zte),e(zte,a4o),e(Ge,n4o),g(yy,Ge,null),b(c,Qke,u),b(c,fd,u),e(fd,K5),e(K5,Wte),g(wy,Wte,null),e(fd,s4o),e(fd,Qte),e(Qte,l4o),b(c,Hke,u),b(c,or,u),g(Ay,or,null),e(or,i4o),e(or,md),e(md,d4o),e(md,Hte),e(Hte,c4o),e(md,f4o),e(md,Ute),e(Ute,m4o),e(md,g4o),e(or,h4o),e(or,Ly),e(Ly,p4o),e(Ly,Jte),e(Jte,_4o),e(Ly,u4o),e(or,b4o),e(or,Ur),g(By,Ur,null),e(Ur,v4o),e(Ur,Yte),e(Yte,T4o),e(Ur,F4o),e(Ur,gd),e(gd,C4o),e(gd,Kte),e(Kte,M4o),e(gd,E4o),e(gd,Zte),e(Zte,y4o),e(gd,w4o),e(Ur,A4o),e(Ur,eae),e(eae,L4o),e(Ur,B4o),g(xy,Ur,null),e(or,x4o),e(or,Oe),g(ky,Oe,null),e(Oe,k4o),e(Oe,oae),e(oae,R4o),e(Oe,S4o),e(Oe,Ua),e(Ua,P4o),e(Ua,rae),e(rae,$4o),e(Ua,I4o),e(Ua,tae),e(tae,N4o),e(Ua,j4o),e(Ua,aae),e(aae,D4o),e(Ua,q4o),e(Oe,G4o),e(Oe,A),e(A,Z5),e(Z5,nae),e(nae,O4o),e(Z5,X4o),e(Z5,VI),e(VI,V4o),e(Z5,z4o),e(A,W4o),e(A,e2),e(e2,sae),e(sae,Q4o),e(e2,H4o),e(e2,zI),e(zI,U4o),e(e2,J4o),e(A,Y4o),e(A,o2),e(o2,lae),e(lae,K4o),e(o2,Z4o),e(o2,WI),e(WI,eEo),e(o2,oEo),e(A,rEo),e(A,r2),e(r2,iae),e(iae,tEo),e(r2,aEo),e(r2,QI),e(QI,nEo),e(r2,sEo),e(A,lEo),e(A,t2),e(t2,dae),e(dae,iEo),e(t2,dEo),e(t2,HI),e(HI,cEo),e(t2,fEo),e(A,mEo),e(A,a2),e(a2,cae),e(cae,gEo),e(a2,hEo),e(a2,UI),e(UI,pEo),e(a2,_Eo),e(A,uEo),e(A,n2),e(n2,fae),e(fae,bEo),e(n2,vEo),e(n2,JI),e(JI,TEo),e(n2,FEo),e(A,CEo),e(A,s2),e(s2,mae),e(mae,MEo),e(s2,EEo),e(s2,YI),e(YI,yEo),e(s2,wEo),e(A,AEo),e(A,l2),e(l2,gae),e(gae,LEo),e(l2,BEo),e(l2,KI),e(KI,xEo),e(l2,kEo),e(A,REo),e(A,i2),e(i2,hae),e(hae,SEo),e(i2,PEo),e(i2,ZI),e(ZI,$Eo),e(i2,IEo),e(A,NEo),e(A,d2),e(d2,pae),e(pae,jEo),e(d2,DEo),e(d2,eN),e(eN,qEo),e(d2,GEo),e(A,OEo),e(A,c2),e(c2,_ae),e(_ae,XEo),e(c2,VEo),e(c2,oN),e(oN,zEo),e(c2,WEo),e(A,QEo),e(A,f2),e(f2,uae),e(uae,HEo),e(f2,UEo),e(f2,rN),e(rN,JEo),e(f2,YEo),e(A,KEo),e(A,m2),e(m2,bae),e(bae,ZEo),e(m2,e3o),e(m2,tN),e(tN,o3o),e(m2,r3o),e(A,t3o),e(A,g2),e(g2,vae),e(vae,a3o),e(g2,n3o),e(g2,aN),e(aN,s3o),e(g2,l3o),e(A,i3o),e(A,h2),e(h2,Tae),e(Tae,d3o),e(h2,c3o),e(h2,nN),e(nN,f3o),e(h2,m3o),e(A,g3o),e(A,p2),e(p2,Fae),e(Fae,h3o),e(p2,p3o),e(p2,sN),e(sN,_3o),e(p2,u3o),e(A,b3o),e(A,_2),e(_2,Cae),e(Cae,v3o),e(_2,T3o),e(_2,lN),e(lN,F3o),e(_2,C3o),e(A,M3o),e(A,u2),e(u2,Mae),e(Mae,E3o),e(u2,y3o),e(u2,iN),e(iN,w3o),e(u2,A3o),e(A,L3o),e(A,b2),e(b2,Eae),e(Eae,B3o),e(b2,x3o),e(b2,dN),e(dN,k3o),e(b2,R3o),e(A,S3o),e(A,v2),e(v2,yae),e(yae,P3o),e(v2,$3o),e(v2,cN),e(cN,I3o),e(v2,N3o),e(A,j3o),e(A,T2),e(T2,wae),e(wae,D3o),e(T2,q3o),e(T2,fN),e(fN,G3o),e(T2,O3o),e(A,X3o),e(A,F2),e(F2,Aae),e(Aae,V3o),e(F2,z3o),e(F2,mN),e(mN,W3o),e(F2,Q3o),e(A,H3o),e(A,C2),e(C2,Lae),e(Lae,U3o),e(C2,J3o),e(C2,gN),e(gN,Y3o),e(C2,K3o),e(A,Z3o),e(A,M2),e(M2,Bae),e(Bae,eyo),e(M2,oyo),e(M2,hN),e(hN,ryo),e(M2,tyo),e(A,ayo),e(A,E2),e(E2,xae),e(xae,nyo),e(E2,syo),e(E2,pN),e(pN,lyo),e(E2,iyo),e(A,dyo),e(A,y2),e(y2,kae),e(kae,cyo),e(y2,fyo),e(y2,_N),e(_N,myo),e(y2,gyo),e(A,hyo),e(A,w2),e(w2,Rae),e(Rae,pyo),e(w2,_yo),e(w2,uN),e(uN,uyo),e(w2,byo),e(A,vyo),e(A,A2),e(A2,Sae),e(Sae,Tyo),e(A2,Fyo),e(A2,bN),e(bN,Cyo),e(A2,Myo),e(A,Eyo),e(A,L2),e(L2,Pae),e(Pae,yyo),e(L2,wyo),e(L2,vN),e(vN,Ayo),e(L2,Lyo),e(A,Byo),e(A,B2),e(B2,$ae),e($ae,xyo),e(B2,kyo),e(B2,TN),e(TN,Ryo),e(B2,Syo),e(A,Pyo),e(A,x2),e(x2,Iae),e(Iae,$yo),e(x2,Iyo),e(x2,FN),e(FN,Nyo),e(x2,jyo),e(A,Dyo),e(A,k2),e(k2,Nae),e(Nae,qyo),e(k2,Gyo),e(k2,CN),e(CN,Oyo),e(k2,Xyo),e(A,Vyo),e(A,R2),e(R2,jae),e(jae,zyo),e(R2,Wyo),e(R2,MN),e(MN,Qyo),e(R2,Hyo),e(A,Uyo),e(A,S2),e(S2,Dae),e(Dae,Jyo),e(S2,Yyo),e(S2,EN),e(EN,Kyo),e(S2,Zyo),e(A,ewo),e(A,P2),e(P2,qae),e(qae,owo),e(P2,rwo),e(P2,yN),e(yN,two),e(P2,awo),e(A,nwo),e(A,$2),e($2,Gae),e(Gae,swo),e($2,lwo),e($2,wN),e(wN,iwo),e($2,dwo),e(A,cwo),e(A,I2),e(I2,Oae),e(Oae,fwo),e(I2,mwo),e(I2,AN),e(AN,gwo),e(I2,hwo),e(A,pwo),e(A,N2),e(N2,Xae),e(Xae,_wo),e(N2,uwo),e(N2,LN),e(LN,bwo),e(N2,vwo),e(A,Two),e(A,j2),e(j2,Vae),e(Vae,Fwo),e(j2,Cwo),e(j2,BN),e(BN,Mwo),e(j2,Ewo),e(A,ywo),e(A,D2),e(D2,zae),e(zae,wwo),e(D2,Awo),e(D2,xN),e(xN,Lwo),e(D2,Bwo),e(A,xwo),e(A,q2),e(q2,Wae),e(Wae,kwo),e(q2,Rwo),e(q2,kN),e(kN,Swo),e(q2,Pwo),e(A,$wo),e(A,G2),e(G2,Qae),e(Qae,Iwo),e(G2,Nwo),e(G2,RN),e(RN,jwo),e(G2,Dwo),e(A,qwo),e(A,O2),e(O2,Hae),e(Hae,Gwo),e(O2,Owo),e(O2,SN),e(SN,Xwo),e(O2,Vwo),e(A,zwo),e(A,X2),e(X2,Uae),e(Uae,Wwo),e(X2,Qwo),e(X2,PN),e(PN,Hwo),e(X2,Uwo),e(A,Jwo),e(A,V2),e(V2,Jae),e(Jae,Ywo),e(V2,Kwo),e(V2,$N),e($N,Zwo),e(V2,eAo),e(Oe,oAo),e(Oe,z2),e(z2,rAo),e(z2,Yae),e(Yae,tAo),e(z2,aAo),e(z2,Kae),e(Kae,nAo),e(Oe,sAo),e(Oe,Zae),e(Zae,lAo),e(Oe,iAo),g(Ry,Oe,null),b(c,Uke,u),b(c,hd,u),e(hd,W2),e(W2,ene),g(Sy,ene,null),e(hd,dAo),e(hd,one),e(one,cAo),b(c,Jke,u),b(c,rr,u),g(Py,rr,null),e(rr,fAo),e(rr,pd),e(pd,mAo),e(pd,rne),e(rne,gAo),e(pd,hAo),e(pd,tne),e(tne,pAo),e(pd,_Ao),e(rr,uAo),e(rr,$y),e($y,bAo),e($y,ane),e(ane,vAo),e($y,TAo),e(rr,FAo),e(rr,Jr),g(Iy,Jr,null),e(Jr,CAo),e(Jr,nne),e(nne,MAo),e(Jr,EAo),e(Jr,_d),e(_d,yAo),e(_d,sne),e(sne,wAo),e(_d,AAo),e(_d,lne),e(lne,LAo),e(_d,BAo),e(Jr,xAo),e(Jr,ine),e(ine,kAo),e(Jr,RAo),g(Ny,Jr,null),e(rr,SAo),e(rr,Xe),g(jy,Xe,null),e(Xe,PAo),e(Xe,dne),e(dne,$Ao),e(Xe,IAo),e(Xe,Ja),e(Ja,NAo),e(Ja,cne),e(cne,jAo),e(Ja,DAo),e(Ja,fne),e(fne,qAo),e(Ja,GAo),e(Ja,mne),e(mne,OAo),e(Ja,XAo),e(Xe,VAo),e(Xe,G),e(G,Q2),e(Q2,gne),e(gne,zAo),e(Q2,WAo),e(Q2,IN),e(IN,QAo),e(Q2,HAo),e(G,UAo),e(G,H2),e(H2,hne),e(hne,JAo),e(H2,YAo),e(H2,NN),e(NN,KAo),e(H2,ZAo),e(G,e0o),e(G,U2),e(U2,pne),e(pne,o0o),e(U2,r0o),e(U2,jN),e(jN,t0o),e(U2,a0o),e(G,n0o),e(G,J2),e(J2,_ne),e(_ne,s0o),e(J2,l0o),e(J2,DN),e(DN,i0o),e(J2,d0o),e(G,c0o),e(G,Y2),e(Y2,une),e(une,f0o),e(Y2,m0o),e(Y2,qN),e(qN,g0o),e(Y2,h0o),e(G,p0o),e(G,K2),e(K2,bne),e(bne,_0o),e(K2,u0o),e(K2,GN),e(GN,b0o),e(K2,v0o),e(G,T0o),e(G,Z2),e(Z2,vne),e(vne,F0o),e(Z2,C0o),e(Z2,ON),e(ON,M0o),e(Z2,E0o),e(G,y0o),e(G,e1),e(e1,Tne),e(Tne,w0o),e(e1,A0o),e(e1,XN),e(XN,L0o),e(e1,B0o),e(G,x0o),e(G,o1),e(o1,Fne),e(Fne,k0o),e(o1,R0o),e(o1,VN),e(VN,S0o),e(o1,P0o),e(G,$0o),e(G,r1),e(r1,Cne),e(Cne,I0o),e(r1,N0o),e(r1,zN),e(zN,j0o),e(r1,D0o),e(G,q0o),e(G,t1),e(t1,Mne),e(Mne,G0o),e(t1,O0o),e(t1,WN),e(WN,X0o),e(t1,V0o),e(G,z0o),e(G,a1),e(a1,Ene),e(Ene,W0o),e(a1,Q0o),e(a1,QN),e(QN,H0o),e(a1,U0o),e(G,J0o),e(G,n1),e(n1,yne),e(yne,Y0o),e(n1,K0o),e(n1,HN),e(HN,Z0o),e(n1,eLo),e(G,oLo),e(G,s1),e(s1,wne),e(wne,rLo),e(s1,tLo),e(s1,UN),e(UN,aLo),e(s1,nLo),e(G,sLo),e(G,l1),e(l1,Ane),e(Ane,lLo),e(l1,iLo),e(l1,JN),e(JN,dLo),e(l1,cLo),e(G,fLo),e(G,i1),e(i1,Lne),e(Lne,mLo),e(i1,gLo),e(i1,YN),e(YN,hLo),e(i1,pLo),e(G,_Lo),e(G,d1),e(d1,Bne),e(Bne,uLo),e(d1,bLo),e(d1,KN),e(KN,vLo),e(d1,TLo),e(G,FLo),e(G,c1),e(c1,xne),e(xne,CLo),e(c1,MLo),e(c1,ZN),e(ZN,ELo),e(c1,yLo),e(G,wLo),e(G,f1),e(f1,kne),e(kne,ALo),e(f1,LLo),e(f1,ej),e(ej,BLo),e(f1,xLo),e(G,kLo),e(G,m1),e(m1,Rne),e(Rne,RLo),e(m1,SLo),e(m1,oj),e(oj,PLo),e(m1,$Lo),e(G,ILo),e(G,g1),e(g1,Sne),e(Sne,NLo),e(g1,jLo),e(g1,rj),e(rj,DLo),e(g1,qLo),e(G,GLo),e(G,h1),e(h1,Pne),e(Pne,OLo),e(h1,XLo),e(h1,tj),e(tj,VLo),e(h1,zLo),e(G,WLo),e(G,p1),e(p1,$ne),e($ne,QLo),e(p1,HLo),e(p1,aj),e(aj,ULo),e(p1,JLo),e(G,YLo),e(G,_1),e(_1,Ine),e(Ine,KLo),e(_1,ZLo),e(_1,nj),e(nj,e7o),e(_1,o7o),e(G,r7o),e(G,u1),e(u1,Nne),e(Nne,t7o),e(u1,a7o),e(u1,sj),e(sj,n7o),e(u1,s7o),e(G,l7o),e(G,b1),e(b1,jne),e(jne,i7o),e(b1,d7o),e(b1,lj),e(lj,c7o),e(b1,f7o),e(G,m7o),e(G,v1),e(v1,Dne),e(Dne,g7o),e(v1,h7o),e(v1,ij),e(ij,p7o),e(v1,_7o),e(G,u7o),e(G,T1),e(T1,qne),e(qne,b7o),e(T1,v7o),e(T1,dj),e(dj,T7o),e(T1,F7o),e(Xe,C7o),e(Xe,F1),e(F1,M7o),e(F1,Gne),e(Gne,E7o),e(F1,y7o),e(F1,One),e(One,w7o),e(Xe,A7o),e(Xe,Xne),e(Xne,L7o),e(Xe,B7o),g(Dy,Xe,null),b(c,Yke,u),b(c,ud,u),e(ud,C1),e(C1,Vne),g(qy,Vne,null),e(ud,x7o),e(ud,zne),e(zne,k7o),b(c,Kke,u),b(c,tr,u),g(Gy,tr,null),e(tr,R7o),e(tr,bd),e(bd,S7o),e(bd,Wne),e(Wne,P7o),e(bd,$7o),e(bd,Qne),e(Qne,I7o),e(bd,N7o),e(tr,j7o),e(tr,Oy),e(Oy,D7o),e(Oy,Hne),e(Hne,q7o),e(Oy,G7o),e(tr,O7o),e(tr,Yr),g(Xy,Yr,null),e(Yr,X7o),e(Yr,Une),e(Une,V7o),e(Yr,z7o),e(Yr,vd),e(vd,W7o),e(vd,Jne),e(Jne,Q7o),e(vd,H7o),e(vd,Yne),e(Yne,U7o),e(vd,J7o),e(Yr,Y7o),e(Yr,Kne),e(Kne,K7o),e(Yr,Z7o),g(Vy,Yr,null),e(tr,e8o),e(tr,Ve),g(zy,Ve,null),e(Ve,o8o),e(Ve,Zne),e(Zne,r8o),e(Ve,t8o),e(Ve,Ya),e(Ya,a8o),e(Ya,ese),e(ese,n8o),e(Ya,s8o),e(Ya,ose),e(ose,l8o),e(Ya,i8o),e(Ya,rse),e(rse,d8o),e(Ya,c8o),e(Ve,f8o),e(Ve,da),e(da,M1),e(M1,tse),e(tse,m8o),e(M1,g8o),e(M1,cj),e(cj,h8o),e(M1,p8o),e(da,_8o),e(da,E1),e(E1,ase),e(ase,u8o),e(E1,b8o),e(E1,fj),e(fj,v8o),e(E1,T8o),e(da,F8o),e(da,y1),e(y1,nse),e(nse,C8o),e(y1,M8o),e(y1,mj),e(mj,E8o),e(y1,y8o),e(da,w8o),e(da,w1),e(w1,sse),e(sse,A8o),e(w1,L8o),e(w1,gj),e(gj,B8o),e(w1,x8o),e(da,k8o),e(da,A1),e(A1,lse),e(lse,R8o),e(A1,S8o),e(A1,hj),e(hj,P8o),e(A1,$8o),e(Ve,I8o),e(Ve,L1),e(L1,N8o),e(L1,ise),e(ise,j8o),e(L1,D8o),e(L1,dse),e(dse,q8o),e(Ve,G8o),e(Ve,cse),e(cse,O8o),e(Ve,X8o),g(Wy,Ve,null),b(c,Zke,u),b(c,Td,u),e(Td,B1),e(B1,fse),g(Qy,fse,null),e(Td,V8o),e(Td,mse),e(mse,z8o),b(c,eRe,u),b(c,ar,u),g(Hy,ar,null),e(ar,W8o),e(ar,Fd),e(Fd,Q8o),e(Fd,gse),e(gse,H8o),e(Fd,U8o),e(Fd,hse),e(hse,J8o),e(Fd,Y8o),e(ar,K8o),e(ar,Uy),e(Uy,Z8o),e(Uy,pse),e(pse,e9o),e(Uy,o9o),e(ar,r9o),e(ar,Kr),g(Jy,Kr,null),e(Kr,t9o),e(Kr,_se),e(_se,a9o),e(Kr,n9o),e(Kr,Cd),e(Cd,s9o),e(Cd,use),e(use,l9o),e(Cd,i9o),e(Cd,bse),e(bse,d9o),e(Cd,c9o),e(Kr,f9o),e(Kr,vse),e(vse,m9o),e(Kr,g9o),g(Yy,Kr,null),e(ar,h9o),e(ar,ze),g(Ky,ze,null),e(ze,p9o),e(ze,Tse),e(Tse,_9o),e(ze,u9o),e(ze,Ka),e(Ka,b9o),e(Ka,Fse),e(Fse,v9o),e(Ka,T9o),e(Ka,Cse),e(Cse,F9o),e(Ka,C9o),e(Ka,Mse),e(Mse,M9o),e(Ka,E9o),e(ze,y9o),e(ze,D),e(D,x1),e(x1,Ese),e(Ese,w9o),e(x1,A9o),e(x1,pj),e(pj,L9o),e(x1,B9o),e(D,x9o),e(D,k1),e(k1,yse),e(yse,k9o),e(k1,R9o),e(k1,_j),e(_j,S9o),e(k1,P9o),e(D,$9o),e(D,R1),e(R1,wse),e(wse,I9o),e(R1,N9o),e(R1,uj),e(uj,j9o),e(R1,D9o),e(D,q9o),e(D,S1),e(S1,Ase),e(Ase,G9o),e(S1,O9o),e(S1,bj),e(bj,X9o),e(S1,V9o),e(D,z9o),e(D,P1),e(P1,Lse),e(Lse,W9o),e(P1,Q9o),e(P1,vj),e(vj,H9o),e(P1,U9o),e(D,J9o),e(D,$1),e($1,Bse),e(Bse,Y9o),e($1,K9o),e($1,Tj),e(Tj,Z9o),e($1,eBo),e(D,oBo),e(D,I1),e(I1,xse),e(xse,rBo),e(I1,tBo),e(I1,Fj),e(Fj,aBo),e(I1,nBo),e(D,sBo),e(D,N1),e(N1,kse),e(kse,lBo),e(N1,iBo),e(N1,Cj),e(Cj,dBo),e(N1,cBo),e(D,fBo),e(D,j1),e(j1,Rse),e(Rse,mBo),e(j1,gBo),e(j1,Mj),e(Mj,hBo),e(j1,pBo),e(D,_Bo),e(D,D1),e(D1,Sse),e(Sse,uBo),e(D1,bBo),e(D1,Ej),e(Ej,vBo),e(D1,TBo),e(D,FBo),e(D,q1),e(q1,Pse),e(Pse,CBo),e(q1,MBo),e(q1,yj),e(yj,EBo),e(q1,yBo),e(D,wBo),e(D,G1),e(G1,$se),e($se,ABo),e(G1,LBo),e(G1,wj),e(wj,BBo),e(G1,xBo),e(D,kBo),e(D,O1),e(O1,Ise),e(Ise,RBo),e(O1,SBo),e(O1,Aj),e(Aj,PBo),e(O1,$Bo),e(D,IBo),e(D,X1),e(X1,Nse),e(Nse,NBo),e(X1,jBo),e(X1,Lj),e(Lj,DBo),e(X1,qBo),e(D,GBo),e(D,V1),e(V1,jse),e(jse,OBo),e(V1,XBo),e(V1,Bj),e(Bj,VBo),e(V1,zBo),e(D,WBo),e(D,z1),e(z1,Dse),e(Dse,QBo),e(z1,HBo),e(z1,xj),e(xj,UBo),e(z1,JBo),e(D,YBo),e(D,W1),e(W1,qse),e(qse,KBo),e(W1,ZBo),e(W1,kj),e(kj,exo),e(W1,oxo),e(D,rxo),e(D,Q1),e(Q1,Gse),e(Gse,txo),e(Q1,axo),e(Q1,Rj),e(Rj,nxo),e(Q1,sxo),e(D,lxo),e(D,H1),e(H1,Ose),e(Ose,ixo),e(H1,dxo),e(H1,Sj),e(Sj,cxo),e(H1,fxo),e(D,mxo),e(D,U1),e(U1,Xse),e(Xse,gxo),e(U1,hxo),e(U1,Pj),e(Pj,pxo),e(U1,_xo),e(D,uxo),e(D,J1),e(J1,Vse),e(Vse,bxo),e(J1,vxo),e(J1,$j),e($j,Txo),e(J1,Fxo),e(D,Cxo),e(D,Y1),e(Y1,zse),e(zse,Mxo),e(Y1,Exo),e(Y1,Ij),e(Ij,yxo),e(Y1,wxo),e(D,Axo),e(D,K1),e(K1,Wse),e(Wse,Lxo),e(K1,Bxo),e(K1,Nj),e(Nj,xxo),e(K1,kxo),e(D,Rxo),e(D,Z1),e(Z1,Qse),e(Qse,Sxo),e(Z1,Pxo),e(Z1,jj),e(jj,$xo),e(Z1,Ixo),e(D,Nxo),e(D,eb),e(eb,Hse),e(Hse,jxo),e(eb,Dxo),e(eb,Dj),e(Dj,qxo),e(eb,Gxo),e(D,Oxo),e(D,ob),e(ob,Use),e(Use,Xxo),e(ob,Vxo),e(ob,qj),e(qj,zxo),e(ob,Wxo),e(D,Qxo),e(D,rb),e(rb,Jse),e(Jse,Hxo),e(rb,Uxo),e(rb,Gj),e(Gj,Jxo),e(rb,Yxo),e(D,Kxo),e(D,tb),e(tb,Yse),e(Yse,Zxo),e(tb,eko),e(tb,Oj),e(Oj,oko),e(tb,rko),e(D,tko),e(D,ab),e(ab,Kse),e(Kse,ako),e(ab,nko),e(ab,Xj),e(Xj,sko),e(ab,lko),e(D,iko),e(D,nb),e(nb,Zse),e(Zse,dko),e(nb,cko),e(nb,Vj),e(Vj,fko),e(nb,mko),e(D,gko),e(D,sb),e(sb,ele),e(ele,hko),e(sb,pko),e(sb,zj),e(zj,_ko),e(sb,uko),e(D,bko),e(D,lb),e(lb,ole),e(ole,vko),e(lb,Tko),e(lb,Wj),e(Wj,Fko),e(lb,Cko),e(D,Mko),e(D,ib),e(ib,rle),e(rle,Eko),e(ib,yko),e(ib,Qj),e(Qj,wko),e(ib,Ako),e(ze,Lko),e(ze,db),e(db,Bko),e(db,tle),e(tle,xko),e(db,kko),e(db,ale),e(ale,Rko),e(ze,Sko),e(ze,nle),e(nle,Pko),e(ze,$ko),g(Zy,ze,null),b(c,oRe,u),b(c,Md,u),e(Md,cb),e(cb,sle),g(ew,sle,null),e(Md,Iko),e(Md,lle),e(lle,Nko),b(c,rRe,u),b(c,nr,u),g(ow,nr,null),e(nr,jko),e(nr,Ed),e(Ed,Dko),e(Ed,ile),e(ile,qko),e(Ed,Gko),e(Ed,dle),e(dle,Oko),e(Ed,Xko),e(nr,Vko),e(nr,rw),e(rw,zko),e(rw,cle),e(cle,Wko),e(rw,Qko),e(nr,Hko),e(nr,Zr),g(tw,Zr,null),e(Zr,Uko),e(Zr,fle),e(fle,Jko),e(Zr,Yko),e(Zr,yd),e(yd,Kko),e(yd,mle),e(mle,Zko),e(yd,eRo),e(yd,gle),e(gle,oRo),e(yd,rRo),e(Zr,tRo),e(Zr,hle),e(hle,aRo),e(Zr,nRo),g(aw,Zr,null),e(nr,sRo),e(nr,We),g(nw,We,null),e(We,lRo),e(We,ple),e(ple,iRo),e(We,dRo),e(We,Za),e(Za,cRo),e(Za,_le),e(_le,fRo),e(Za,mRo),e(Za,ule),e(ule,gRo),e(Za,hRo),e(Za,ble),e(ble,pRo),e(Za,_Ro),e(We,uRo),e(We,R),e(R,fb),e(fb,vle),e(vle,bRo),e(fb,vRo),e(fb,Hj),e(Hj,TRo),e(fb,FRo),e(R,CRo),e(R,mb),e(mb,Tle),e(Tle,MRo),e(mb,ERo),e(mb,Uj),e(Uj,yRo),e(mb,wRo),e(R,ARo),e(R,gb),e(gb,Fle),e(Fle,LRo),e(gb,BRo),e(gb,Jj),e(Jj,xRo),e(gb,kRo),e(R,RRo),e(R,hb),e(hb,Cle),e(Cle,SRo),e(hb,PRo),e(hb,Yj),e(Yj,$Ro),e(hb,IRo),e(R,NRo),e(R,pb),e(pb,Mle),e(Mle,jRo),e(pb,DRo),e(pb,Kj),e(Kj,qRo),e(pb,GRo),e(R,ORo),e(R,_b),e(_b,Ele),e(Ele,XRo),e(_b,VRo),e(_b,Zj),e(Zj,zRo),e(_b,WRo),e(R,QRo),e(R,ub),e(ub,yle),e(yle,HRo),e(ub,URo),e(ub,eD),e(eD,JRo),e(ub,YRo),e(R,KRo),e(R,bb),e(bb,wle),e(wle,ZRo),e(bb,eSo),e(bb,oD),e(oD,oSo),e(bb,rSo),e(R,tSo),e(R,vb),e(vb,Ale),e(Ale,aSo),e(vb,nSo),e(vb,rD),e(rD,sSo),e(vb,lSo),e(R,iSo),e(R,Tb),e(Tb,Lle),e(Lle,dSo),e(Tb,cSo),e(Tb,tD),e(tD,fSo),e(Tb,mSo),e(R,gSo),e(R,Fb),e(Fb,Ble),e(Ble,hSo),e(Fb,pSo),e(Fb,aD),e(aD,_So),e(Fb,uSo),e(R,bSo),e(R,Cb),e(Cb,xle),e(xle,vSo),e(Cb,TSo),e(Cb,nD),e(nD,FSo),e(Cb,CSo),e(R,MSo),e(R,Mb),e(Mb,kle),e(kle,ESo),e(Mb,ySo),e(Mb,sD),e(sD,wSo),e(Mb,ASo),e(R,LSo),e(R,Eb),e(Eb,Rle),e(Rle,BSo),e(Eb,xSo),e(Eb,lD),e(lD,kSo),e(Eb,RSo),e(R,SSo),e(R,yb),e(yb,Sle),e(Sle,PSo),e(yb,$So),e(yb,iD),e(iD,ISo),e(yb,NSo),e(R,jSo),e(R,wb),e(wb,Ple),e(Ple,DSo),e(wb,qSo),e(wb,dD),e(dD,GSo),e(wb,OSo),e(R,XSo),e(R,Ab),e(Ab,$le),e($le,VSo),e(Ab,zSo),e(Ab,cD),e(cD,WSo),e(Ab,QSo),e(R,HSo),e(R,Lb),e(Lb,Ile),e(Ile,USo),e(Lb,JSo),e(Lb,fD),e(fD,YSo),e(Lb,KSo),e(R,ZSo),e(R,Bb),e(Bb,Nle),e(Nle,ePo),e(Bb,oPo),e(Bb,mD),e(mD,rPo),e(Bb,tPo),e(R,aPo),e(R,xb),e(xb,jle),e(jle,nPo),e(xb,sPo),e(xb,gD),e(gD,lPo),e(xb,iPo),e(R,dPo),e(R,kb),e(kb,Dle),e(Dle,cPo),e(kb,fPo),e(kb,hD),e(hD,mPo),e(kb,gPo),e(R,hPo),e(R,Rb),e(Rb,qle),e(qle,pPo),e(Rb,_Po),e(Rb,pD),e(pD,uPo),e(Rb,bPo),e(R,vPo),e(R,Sb),e(Sb,Gle),e(Gle,TPo),e(Sb,FPo),e(Sb,_D),e(_D,CPo),e(Sb,MPo),e(R,EPo),e(R,Pb),e(Pb,Ole),e(Ole,yPo),e(Pb,wPo),e(Pb,uD),e(uD,APo),e(Pb,LPo),e(R,BPo),e(R,$b),e($b,Xle),e(Xle,xPo),e($b,kPo),e($b,bD),e(bD,RPo),e($b,SPo),e(R,PPo),e(R,Ib),e(Ib,Vle),e(Vle,$Po),e(Ib,IPo),e(Ib,vD),e(vD,NPo),e(Ib,jPo),e(R,DPo),e(R,Nb),e(Nb,zle),e(zle,qPo),e(Nb,GPo),e(Nb,TD),e(TD,OPo),e(Nb,XPo),e(R,VPo),e(R,jb),e(jb,Wle),e(Wle,zPo),e(jb,WPo),e(jb,FD),e(FD,QPo),e(jb,HPo),e(R,UPo),e(R,Db),e(Db,Qle),e(Qle,JPo),e(Db,YPo),e(Db,CD),e(CD,KPo),e(Db,ZPo),e(R,e$o),e(R,qb),e(qb,Hle),e(Hle,o$o),e(qb,r$o),e(qb,MD),e(MD,t$o),e(qb,a$o),e(R,n$o),e(R,Gb),e(Gb,Ule),e(Ule,s$o),e(Gb,l$o),e(Gb,ED),e(ED,i$o),e(Gb,d$o),e(R,c$o),e(R,Ob),e(Ob,Jle),e(Jle,f$o),e(Ob,m$o),e(Ob,yD),e(yD,g$o),e(Ob,h$o),e(R,p$o),e(R,Xb),e(Xb,Yle),e(Yle,_$o),e(Xb,u$o),e(Xb,wD),e(wD,b$o),e(Xb,v$o),e(R,T$o),e(R,Vb),e(Vb,Kle),e(Kle,F$o),e(Vb,C$o),e(Vb,AD),e(AD,M$o),e(Vb,E$o),e(R,y$o),e(R,zb),e(zb,Zle),e(Zle,w$o),e(zb,A$o),e(zb,LD),e(LD,L$o),e(zb,B$o),e(R,x$o),e(R,Wb),e(Wb,eie),e(eie,k$o),e(Wb,R$o),e(Wb,BD),e(BD,S$o),e(Wb,P$o),e(R,$$o),e(R,Qb),e(Qb,oie),e(oie,I$o),e(Qb,N$o),e(Qb,xD),e(xD,j$o),e(Qb,D$o),e(R,q$o),e(R,Hb),e(Hb,rie),e(rie,G$o),e(Hb,O$o),e(Hb,kD),e(kD,X$o),e(Hb,V$o),e(R,z$o),e(R,Ub),e(Ub,tie),e(tie,W$o),e(Ub,Q$o),e(Ub,RD),e(RD,H$o),e(Ub,U$o),e(We,J$o),e(We,Jb),e(Jb,Y$o),e(Jb,aie),e(aie,K$o),e(Jb,Z$o),e(Jb,nie),e(nie,eIo),e(We,oIo),e(We,sie),e(sie,rIo),e(We,tIo),g(sw,We,null),b(c,tRe,u),b(c,wd,u),e(wd,Yb),e(Yb,lie),g(lw,lie,null),e(wd,aIo),e(wd,iie),e(iie,nIo),b(c,aRe,u),b(c,sr,u),g(iw,sr,null),e(sr,sIo),e(sr,Ad),e(Ad,lIo),e(Ad,die),e(die,iIo),e(Ad,dIo),e(Ad,cie),e(cie,cIo),e(Ad,fIo),e(sr,mIo),e(sr,dw),e(dw,gIo),e(dw,fie),e(fie,hIo),e(dw,pIo),e(sr,_Io),e(sr,et),g(cw,et,null),e(et,uIo),e(et,mie),e(mie,bIo),e(et,vIo),e(et,Ld),e(Ld,TIo),e(Ld,gie),e(gie,FIo),e(Ld,CIo),e(Ld,hie),e(hie,MIo),e(Ld,EIo),e(et,yIo),e(et,pie),e(pie,wIo),e(et,AIo),g(fw,et,null),e(sr,LIo),e(sr,Qe),g(mw,Qe,null),e(Qe,BIo),e(Qe,_ie),e(_ie,xIo),e(Qe,kIo),e(Qe,en),e(en,RIo),e(en,uie),e(uie,SIo),e(en,PIo),e(en,bie),e(bie,$Io),e(en,IIo),e(en,vie),e(vie,NIo),e(en,jIo),e(Qe,DIo),e(Qe,Tie),e(Tie,Kb),e(Kb,Fie),e(Fie,qIo),e(Kb,GIo),e(Kb,SD),e(SD,OIo),e(Kb,XIo),e(Qe,VIo),e(Qe,Zb),e(Zb,zIo),e(Zb,Cie),e(Cie,WIo),e(Zb,QIo),e(Zb,Mie),e(Mie,HIo),e(Qe,UIo),e(Qe,Eie),e(Eie,JIo),e(Qe,YIo),g(gw,Qe,null),b(c,nRe,u),b(c,Bd,u),e(Bd,ev),e(ev,yie),g(hw,yie,null),e(Bd,KIo),e(Bd,wie),e(wie,ZIo),b(c,sRe,u),b(c,lr,u),g(pw,lr,null),e(lr,eNo),e(lr,xd),e(xd,oNo),e(xd,Aie),e(Aie,rNo),e(xd,tNo),e(xd,Lie),e(Lie,aNo),e(xd,nNo),e(lr,sNo),e(lr,_w),e(_w,lNo),e(_w,Bie),e(Bie,iNo),e(_w,dNo),e(lr,cNo),e(lr,ot),g(uw,ot,null),e(ot,fNo),e(ot,xie),e(xie,mNo),e(ot,gNo),e(ot,kd),e(kd,hNo),e(kd,kie),e(kie,pNo),e(kd,_No),e(kd,Rie),e(Rie,uNo),e(kd,bNo),e(ot,vNo),e(ot,Sie),e(Sie,TNo),e(ot,FNo),g(bw,ot,null),e(lr,CNo),e(lr,He),g(vw,He,null),e(He,MNo),e(He,Pie),e(Pie,ENo),e(He,yNo),e(He,on),e(on,wNo),e(on,$ie),e($ie,ANo),e(on,LNo),e(on,Iie),e(Iie,BNo),e(on,xNo),e(on,Nie),e(Nie,kNo),e(on,RNo),e(He,SNo),e(He,ge),e(ge,ov),e(ov,jie),e(jie,PNo),e(ov,$No),e(ov,PD),e(PD,INo),e(ov,NNo),e(ge,jNo),e(ge,rv),e(rv,Die),e(Die,DNo),e(rv,qNo),e(rv,$D),e($D,GNo),e(rv,ONo),e(ge,XNo),e(ge,qs),e(qs,qie),e(qie,VNo),e(qs,zNo),e(qs,ID),e(ID,WNo),e(qs,QNo),e(qs,ND),e(ND,HNo),e(qs,UNo),e(ge,JNo),e(ge,tv),e(tv,Gie),e(Gie,YNo),e(tv,KNo),e(tv,jD),e(jD,ZNo),e(tv,ejo),e(ge,ojo),e(ge,ma),e(ma,Oie),e(Oie,rjo),e(ma,tjo),e(ma,DD),e(DD,ajo),e(ma,njo),e(ma,qD),e(qD,sjo),e(ma,ljo),e(ma,GD),e(GD,ijo),e(ma,djo),e(ge,cjo),e(ge,av),e(av,Xie),e(Xie,fjo),e(av,mjo),e(av,OD),e(OD,gjo),e(av,hjo),e(ge,pjo),e(ge,nv),e(nv,Vie),e(Vie,_jo),e(nv,ujo),e(nv,XD),e(XD,bjo),e(nv,vjo),e(ge,Tjo),e(ge,sv),e(sv,zie),e(zie,Fjo),e(sv,Cjo),e(sv,VD),e(VD,Mjo),e(sv,Ejo),e(ge,yjo),e(ge,lv),e(lv,Wie),e(Wie,wjo),e(lv,Ajo),e(lv,zD),e(zD,Ljo),e(lv,Bjo),e(ge,xjo),e(ge,iv),e(iv,Qie),e(Qie,kjo),e(iv,Rjo),e(iv,WD),e(WD,Sjo),e(iv,Pjo),e(ge,$jo),e(ge,dv),e(dv,Hie),e(Hie,Ijo),e(dv,Njo),e(dv,QD),e(QD,jjo),e(dv,Djo),e(He,qjo),e(He,cv),e(cv,Gjo),e(cv,Uie),e(Uie,Ojo),e(cv,Xjo),e(cv,Jie),e(Jie,Vjo),e(He,zjo),e(He,Yie),e(Yie,Wjo),e(He,Qjo),g(Tw,He,null),b(c,lRe,u),b(c,Rd,u),e(Rd,fv),e(fv,Kie),g(Fw,Kie,null),e(Rd,Hjo),e(Rd,Zie),e(Zie,Ujo),b(c,iRe,u),b(c,ir,u),g(Cw,ir,null),e(ir,Jjo),e(ir,Sd),e(Sd,Yjo),e(Sd,ede),e(ede,Kjo),e(Sd,Zjo),e(Sd,ode),e(ode,eDo),e(Sd,oDo),e(ir,rDo),e(ir,Mw),e(Mw,tDo),e(Mw,rde),e(rde,aDo),e(Mw,nDo),e(ir,sDo),e(ir,rt),g(Ew,rt,null),e(rt,lDo),e(rt,tde),e(tde,iDo),e(rt,dDo),e(rt,Pd),e(Pd,cDo),e(Pd,ade),e(ade,fDo),e(Pd,mDo),e(Pd,nde),e(nde,gDo),e(Pd,hDo),e(rt,pDo),e(rt,sde),e(sde,_Do),e(rt,uDo),g(yw,rt,null),e(ir,bDo),e(ir,Ue),g(ww,Ue,null),e(Ue,vDo),e(Ue,lde),e(lde,TDo),e(Ue,FDo),e(Ue,rn),e(rn,CDo),e(rn,ide),e(ide,MDo),e(rn,EDo),e(rn,dde),e(dde,yDo),e(rn,wDo),e(rn,cde),e(cde,ADo),e(rn,LDo),e(Ue,BDo),e(Ue,fde),e(fde,mv),e(mv,mde),e(mde,xDo),e(mv,kDo),e(mv,HD),e(HD,RDo),e(mv,SDo),e(Ue,PDo),e(Ue,gv),e(gv,$Do),e(gv,gde),e(gde,IDo),e(gv,NDo),e(gv,hde),e(hde,jDo),e(Ue,DDo),e(Ue,pde),e(pde,qDo),e(Ue,GDo),g(Aw,Ue,null),b(c,dRe,u),b(c,$d,u),e($d,hv),e(hv,_de),g(Lw,_de,null),e($d,ODo),e($d,ude),e(ude,XDo),b(c,cRe,u),b(c,dr,u),g(Bw,dr,null),e(dr,VDo),e(dr,Id),e(Id,zDo),e(Id,bde),e(bde,WDo),e(Id,QDo),e(Id,vde),e(vde,HDo),e(Id,UDo),e(dr,JDo),e(dr,xw),e(xw,YDo),e(xw,Tde),e(Tde,KDo),e(xw,ZDo),e(dr,eqo),e(dr,tt),g(kw,tt,null),e(tt,oqo),e(tt,Fde),e(Fde,rqo),e(tt,tqo),e(tt,Nd),e(Nd,aqo),e(Nd,Cde),e(Cde,nqo),e(Nd,sqo),e(Nd,Mde),e(Mde,lqo),e(Nd,iqo),e(tt,dqo),e(tt,Ede),e(Ede,cqo),e(tt,fqo),g(Rw,tt,null),e(dr,mqo),e(dr,Je),g(Sw,Je,null),e(Je,gqo),e(Je,yde),e(yde,hqo),e(Je,pqo),e(Je,tn),e(tn,_qo),e(tn,wde),e(wde,uqo),e(tn,bqo),e(tn,Ade),e(Ade,vqo),e(tn,Tqo),e(tn,Lde),e(Lde,Fqo),e(tn,Cqo),e(Je,Mqo),e(Je,ke),e(ke,pv),e(pv,Bde),e(Bde,Eqo),e(pv,yqo),e(pv,UD),e(UD,wqo),e(pv,Aqo),e(ke,Lqo),e(ke,_v),e(_v,xde),e(xde,Bqo),e(_v,xqo),e(_v,JD),e(JD,kqo),e(_v,Rqo),e(ke,Sqo),e(ke,uv),e(uv,kde),e(kde,Pqo),e(uv,$qo),e(uv,YD),e(YD,Iqo),e(uv,Nqo),e(ke,jqo),e(ke,bv),e(bv,Rde),e(Rde,Dqo),e(bv,qqo),e(bv,KD),e(KD,Gqo),e(bv,Oqo),e(ke,Xqo),e(ke,vv),e(vv,Sde),e(Sde,Vqo),e(vv,zqo),e(vv,ZD),e(ZD,Wqo),e(vv,Qqo),e(ke,Hqo),e(ke,Tv),e(Tv,Pde),e(Pde,Uqo),e(Tv,Jqo),e(Tv,eq),e(eq,Yqo),e(Tv,Kqo),e(ke,Zqo),e(ke,Fv),e(Fv,$de),e($de,eGo),e(Fv,oGo),e(Fv,oq),e(oq,rGo),e(Fv,tGo),e(ke,aGo),e(ke,Cv),e(Cv,Ide),e(Ide,nGo),e(Cv,sGo),e(Cv,rq),e(rq,lGo),e(Cv,iGo),e(Je,dGo),e(Je,Mv),e(Mv,cGo),e(Mv,Nde),e(Nde,fGo),e(Mv,mGo),e(Mv,jde),e(jde,gGo),e(Je,hGo),e(Je,Dde),e(Dde,pGo),e(Je,_Go),g(Pw,Je,null),b(c,fRe,u),b(c,jd,u),e(jd,Ev),e(Ev,qde),g($w,qde,null),e(jd,uGo),e(jd,Gde),e(Gde,bGo),b(c,mRe,u),b(c,cr,u),g(Iw,cr,null),e(cr,vGo),e(cr,Dd),e(Dd,TGo),e(Dd,Ode),e(Ode,FGo),e(Dd,CGo),e(Dd,Xde),e(Xde,MGo),e(Dd,EGo),e(cr,yGo),e(cr,Nw),e(Nw,wGo),e(Nw,Vde),e(Vde,AGo),e(Nw,LGo),e(cr,BGo),e(cr,at),g(jw,at,null),e(at,xGo),e(at,zde),e(zde,kGo),e(at,RGo),e(at,qd),e(qd,SGo),e(qd,Wde),e(Wde,PGo),e(qd,$Go),e(qd,Qde),e(Qde,IGo),e(qd,NGo),e(at,jGo),e(at,Hde),e(Hde,DGo),e(at,qGo),g(Dw,at,null),e(cr,GGo),e(cr,Ye),g(qw,Ye,null),e(Ye,OGo),e(Ye,Ude),e(Ude,XGo),e(Ye,VGo),e(Ye,an),e(an,zGo),e(an,Jde),e(Jde,WGo),e(an,QGo),e(an,Yde),e(Yde,HGo),e(an,UGo),e(an,Kde),e(Kde,JGo),e(an,YGo),e(Ye,KGo),e(Ye,nn),e(nn,yv),e(yv,Zde),e(Zde,ZGo),e(yv,eOo),e(yv,tq),e(tq,oOo),e(yv,rOo),e(nn,tOo),e(nn,wv),e(wv,ece),e(ece,aOo),e(wv,nOo),e(wv,aq),e(aq,sOo),e(wv,lOo),e(nn,iOo),e(nn,Av),e(Av,oce),e(oce,dOo),e(Av,cOo),e(Av,nq),e(nq,fOo),e(Av,mOo),e(nn,gOo),e(nn,Lv),e(Lv,rce),e(rce,hOo),e(Lv,pOo),e(Lv,sq),e(sq,_Oo),e(Lv,uOo),e(Ye,bOo),e(Ye,Bv),e(Bv,vOo),e(Bv,tce),e(tce,TOo),e(Bv,FOo),e(Bv,ace),e(ace,COo),e(Ye,MOo),e(Ye,nce),e(nce,EOo),e(Ye,yOo),g(Gw,Ye,null),b(c,gRe,u),b(c,Gd,u),e(Gd,xv),e(xv,sce),g(Ow,sce,null),e(Gd,wOo),e(Gd,lce),e(lce,AOo),b(c,hRe,u),b(c,fr,u),g(Xw,fr,null),e(fr,LOo),e(fr,Od),e(Od,BOo),e(Od,ice),e(ice,xOo),e(Od,kOo),e(Od,dce),e(dce,ROo),e(Od,SOo),e(fr,POo),e(fr,Vw),e(Vw,$Oo),e(Vw,cce),e(cce,IOo),e(Vw,NOo),e(fr,jOo),e(fr,nt),g(zw,nt,null),e(nt,DOo),e(nt,fce),e(fce,qOo),e(nt,GOo),e(nt,Xd),e(Xd,OOo),e(Xd,mce),e(mce,XOo),e(Xd,VOo),e(Xd,gce),e(gce,zOo),e(Xd,WOo),e(nt,QOo),e(nt,hce),e(hce,HOo),e(nt,UOo),g(Ww,nt,null),e(fr,JOo),e(fr,Ke),g(Qw,Ke,null),e(Ke,YOo),e(Ke,pce),e(pce,KOo),e(Ke,ZOo),e(Ke,sn),e(sn,eXo),e(sn,_ce),e(_ce,oXo),e(sn,rXo),e(sn,uce),e(uce,tXo),e(sn,aXo),e(sn,bce),e(bce,nXo),e(sn,sXo),e(Ke,lXo),e(Ke,Re),e(Re,kv),e(kv,vce),e(vce,iXo),e(kv,dXo),e(kv,lq),e(lq,cXo),e(kv,fXo),e(Re,mXo),e(Re,Rv),e(Rv,Tce),e(Tce,gXo),e(Rv,hXo),e(Rv,iq),e(iq,pXo),e(Rv,_Xo),e(Re,uXo),e(Re,Sv),e(Sv,Fce),e(Fce,bXo),e(Sv,vXo),e(Sv,dq),e(dq,TXo),e(Sv,FXo),e(Re,CXo),e(Re,Pv),e(Pv,Cce),e(Cce,MXo),e(Pv,EXo),e(Pv,cq),e(cq,yXo),e(Pv,wXo),e(Re,AXo),e(Re,$v),e($v,Mce),e(Mce,LXo),e($v,BXo),e($v,fq),e(fq,xXo),e($v,kXo),e(Re,RXo),e(Re,Iv),e(Iv,Ece),e(Ece,SXo),e(Iv,PXo),e(Iv,mq),e(mq,$Xo),e(Iv,IXo),e(Re,NXo),e(Re,Nv),e(Nv,yce),e(yce,jXo),e(Nv,DXo),e(Nv,gq),e(gq,qXo),e(Nv,GXo),e(Re,OXo),e(Re,jv),e(jv,wce),e(wce,XXo),e(jv,VXo),e(jv,hq),e(hq,zXo),e(jv,WXo),e(Ke,QXo),e(Ke,Dv),e(Dv,HXo),e(Dv,Ace),e(Ace,UXo),e(Dv,JXo),e(Dv,Lce),e(Lce,YXo),e(Ke,KXo),e(Ke,Bce),e(Bce,ZXo),e(Ke,eVo),g(Hw,Ke,null),b(c,pRe,u),b(c,Vd,u),e(Vd,qv),e(qv,xce),g(Uw,xce,null),e(Vd,oVo),e(Vd,kce),e(kce,rVo),b(c,_Re,u),b(c,mr,u),g(Jw,mr,null),e(mr,tVo),e(mr,zd),e(zd,aVo),e(zd,Rce),e(Rce,nVo),e(zd,sVo),e(zd,Sce),e(Sce,lVo),e(zd,iVo),e(mr,dVo),e(mr,Yw),e(Yw,cVo),e(Yw,Pce),e(Pce,fVo),e(Yw,mVo),e(mr,gVo),e(mr,st),g(Kw,st,null),e(st,hVo),e(st,$ce),e($ce,pVo),e(st,_Vo),e(st,Wd),e(Wd,uVo),e(Wd,Ice),e(Ice,bVo),e(Wd,vVo),e(Wd,Nce),e(Nce,TVo),e(Wd,FVo),e(st,CVo),e(st,jce),e(jce,MVo),e(st,EVo),g(Zw,st,null),e(mr,yVo),e(mr,Ze),g(eA,Ze,null),e(Ze,wVo),e(Ze,Dce),e(Dce,AVo),e(Ze,LVo),e(Ze,ln),e(ln,BVo),e(ln,qce),e(qce,xVo),e(ln,kVo),e(ln,Gce),e(Gce,RVo),e(ln,SVo),e(ln,Oce),e(Oce,PVo),e(ln,$Vo),e(Ze,IVo),e(Ze,oA),e(oA,Gv),e(Gv,Xce),e(Xce,NVo),e(Gv,jVo),e(Gv,pq),e(pq,DVo),e(Gv,qVo),e(oA,GVo),e(oA,Ov),e(Ov,Vce),e(Vce,OVo),e(Ov,XVo),e(Ov,_q),e(_q,VVo),e(Ov,zVo),e(Ze,WVo),e(Ze,Xv),e(Xv,QVo),e(Xv,zce),e(zce,HVo),e(Xv,UVo),e(Xv,Wce),e(Wce,JVo),e(Ze,YVo),e(Ze,Qce),e(Qce,KVo),e(Ze,ZVo),g(rA,Ze,null),b(c,uRe,u),b(c,Qd,u),e(Qd,Vv),e(Vv,Hce),g(tA,Hce,null),e(Qd,ezo),e(Qd,Uce),e(Uce,ozo),b(c,bRe,u),b(c,gr,u),g(aA,gr,null),e(gr,rzo),e(gr,Hd),e(Hd,tzo),e(Hd,Jce),e(Jce,azo),e(Hd,nzo),e(Hd,Yce),e(Yce,szo),e(Hd,lzo),e(gr,izo),e(gr,nA),e(nA,dzo),e(nA,Kce),e(Kce,czo),e(nA,fzo),e(gr,mzo),e(gr,lt),g(sA,lt,null),e(lt,gzo),e(lt,Zce),e(Zce,hzo),e(lt,pzo),e(lt,Ud),e(Ud,_zo),e(Ud,efe),e(efe,uzo),e(Ud,bzo),e(Ud,ofe),e(ofe,vzo),e(Ud,Tzo),e(lt,Fzo),e(lt,rfe),e(rfe,Czo),e(lt,Mzo),g(lA,lt,null),e(gr,Ezo),e(gr,eo),g(iA,eo,null),e(eo,yzo),e(eo,tfe),e(tfe,wzo),e(eo,Azo),e(eo,dn),e(dn,Lzo),e(dn,afe),e(afe,Bzo),e(dn,xzo),e(dn,nfe),e(nfe,kzo),e(dn,Rzo),e(dn,sfe),e(sfe,Szo),e(dn,Pzo),e(eo,$zo),e(eo,cn),e(cn,zv),e(zv,lfe),e(lfe,Izo),e(zv,Nzo),e(zv,uq),e(uq,jzo),e(zv,Dzo),e(cn,qzo),e(cn,Wv),e(Wv,ife),e(ife,Gzo),e(Wv,Ozo),e(Wv,bq),e(bq,Xzo),e(Wv,Vzo),e(cn,zzo),e(cn,Qv),e(Qv,dfe),e(dfe,Wzo),e(Qv,Qzo),e(Qv,vq),e(vq,Hzo),e(Qv,Uzo),e(cn,Jzo),e(cn,Hv),e(Hv,cfe),e(cfe,Yzo),e(Hv,Kzo),e(Hv,Tq),e(Tq,Zzo),e(Hv,eWo),e(eo,oWo),e(eo,Uv),e(Uv,rWo),e(Uv,ffe),e(ffe,tWo),e(Uv,aWo),e(Uv,mfe),e(mfe,nWo),e(eo,sWo),e(eo,gfe),e(gfe,lWo),e(eo,iWo),g(dA,eo,null),b(c,vRe,u),b(c,Jd,u),e(Jd,Jv),e(Jv,hfe),g(cA,hfe,null),e(Jd,dWo),e(Jd,pfe),e(pfe,cWo),b(c,TRe,u),b(c,hr,u),g(fA,hr,null),e(hr,fWo),e(hr,Yd),e(Yd,mWo),e(Yd,_fe),e(_fe,gWo),e(Yd,hWo),e(Yd,ufe),e(ufe,pWo),e(Yd,_Wo),e(hr,uWo),e(hr,mA),e(mA,bWo),e(mA,bfe),e(bfe,vWo),e(mA,TWo),e(hr,FWo),e(hr,it),g(gA,it,null),e(it,CWo),e(it,vfe),e(vfe,MWo),e(it,EWo),e(it,Kd),e(Kd,yWo),e(Kd,Tfe),e(Tfe,wWo),e(Kd,AWo),e(Kd,Ffe),e(Ffe,LWo),e(Kd,BWo),e(it,xWo),e(it,Cfe),e(Cfe,kWo),e(it,RWo),g(hA,it,null),e(hr,SWo),e(hr,oo),g(pA,oo,null),e(oo,PWo),e(oo,Mfe),e(Mfe,$Wo),e(oo,IWo),e(oo,fn),e(fn,NWo),e(fn,Efe),e(Efe,jWo),e(fn,DWo),e(fn,yfe),e(yfe,qWo),e(fn,GWo),e(fn,wfe),e(wfe,OWo),e(fn,XWo),e(oo,VWo),e(oo,Zd),e(Zd,Yv),e(Yv,Afe),e(Afe,zWo),e(Yv,WWo),e(Yv,Fq),e(Fq,QWo),e(Yv,HWo),e(Zd,UWo),e(Zd,Kv),e(Kv,Lfe),e(Lfe,JWo),e(Kv,YWo),e(Kv,Cq),e(Cq,KWo),e(Kv,ZWo),e(Zd,eQo),e(Zd,Zv),e(Zv,Bfe),e(Bfe,oQo),e(Zv,rQo),e(Zv,Mq),e(Mq,tQo),e(Zv,aQo),e(oo,nQo),e(oo,e6),e(e6,sQo),e(e6,xfe),e(xfe,lQo),e(e6,iQo),e(e6,kfe),e(kfe,dQo),e(oo,cQo),e(oo,Rfe),e(Rfe,fQo),e(oo,mQo),g(_A,oo,null),b(c,FRe,u),b(c,ec,u),e(ec,o6),e(o6,Sfe),g(uA,Sfe,null),e(ec,gQo),e(ec,Pfe),e(Pfe,hQo),b(c,CRe,u),b(c,pr,u),g(bA,pr,null),e(pr,pQo),e(pr,oc),e(oc,_Qo),e(oc,$fe),e($fe,uQo),e(oc,bQo),e(oc,Ife),e(Ife,vQo),e(oc,TQo),e(pr,FQo),e(pr,vA),e(vA,CQo),e(vA,Nfe),e(Nfe,MQo),e(vA,EQo),e(pr,yQo),e(pr,dt),g(TA,dt,null),e(dt,wQo),e(dt,jfe),e(jfe,AQo),e(dt,LQo),e(dt,rc),e(rc,BQo),e(rc,Dfe),e(Dfe,xQo),e(rc,kQo),e(rc,qfe),e(qfe,RQo),e(rc,SQo),e(dt,PQo),e(dt,Gfe),e(Gfe,$Qo),e(dt,IQo),g(FA,dt,null),e(pr,NQo),e(pr,ro),g(CA,ro,null),e(ro,jQo),e(ro,Ofe),e(Ofe,DQo),e(ro,qQo),e(ro,mn),e(mn,GQo),e(mn,Xfe),e(Xfe,OQo),e(mn,XQo),e(mn,Vfe),e(Vfe,VQo),e(mn,zQo),e(mn,zfe),e(zfe,WQo),e(mn,QQo),e(ro,HQo),e(ro,Wfe),e(Wfe,r6),e(r6,Qfe),e(Qfe,UQo),e(r6,JQo),e(r6,Eq),e(Eq,YQo),e(r6,KQo),e(ro,ZQo),e(ro,t6),e(t6,eHo),e(t6,Hfe),e(Hfe,oHo),e(t6,rHo),e(t6,Ufe),e(Ufe,tHo),e(ro,aHo),e(ro,Jfe),e(Jfe,nHo),e(ro,sHo),g(MA,ro,null),b(c,MRe,u),b(c,tc,u),e(tc,a6),e(a6,Yfe),g(EA,Yfe,null),e(tc,lHo),e(tc,Kfe),e(Kfe,iHo),b(c,ERe,u),b(c,_r,u),g(yA,_r,null),e(_r,dHo),e(_r,ac),e(ac,cHo),e(ac,Zfe),e(Zfe,fHo),e(ac,mHo),e(ac,eme),e(eme,gHo),e(ac,hHo),e(_r,pHo),e(_r,wA),e(wA,_Ho),e(wA,ome),e(ome,uHo),e(wA,bHo),e(_r,vHo),e(_r,ct),g(AA,ct,null),e(ct,THo),e(ct,rme),e(rme,FHo),e(ct,CHo),e(ct,nc),e(nc,MHo),e(nc,tme),e(tme,EHo),e(nc,yHo),e(nc,ame),e(ame,wHo),e(nc,AHo),e(ct,LHo),e(ct,nme),e(nme,BHo),e(ct,xHo),g(LA,ct,null),e(_r,kHo),e(_r,to),g(BA,to,null),e(to,RHo),e(to,sme),e(sme,SHo),e(to,PHo),e(to,gn),e(gn,$Ho),e(gn,lme),e(lme,IHo),e(gn,NHo),e(gn,ime),e(ime,jHo),e(gn,DHo),e(gn,dme),e(dme,qHo),e(gn,GHo),e(to,OHo),e(to,cme),e(cme,n6),e(n6,fme),e(fme,XHo),e(n6,VHo),e(n6,yq),e(yq,zHo),e(n6,WHo),e(to,QHo),e(to,s6),e(s6,HHo),e(s6,mme),e(mme,UHo),e(s6,JHo),e(s6,gme),e(gme,YHo),e(to,KHo),e(to,hme),e(hme,ZHo),e(to,eUo),g(xA,to,null),b(c,yRe,u),b(c,sc,u),e(sc,l6),e(l6,pme),g(kA,pme,null),e(sc,oUo),e(sc,_me),e(_me,rUo),b(c,wRe,u),b(c,ur,u),g(RA,ur,null),e(ur,tUo),e(ur,lc),e(lc,aUo),e(lc,ume),e(ume,nUo),e(lc,sUo),e(lc,bme),e(bme,lUo),e(lc,iUo),e(ur,dUo),e(ur,SA),e(SA,cUo),e(SA,vme),e(vme,fUo),e(SA,mUo),e(ur,gUo),e(ur,ft),g(PA,ft,null),e(ft,hUo),e(ft,Tme),e(Tme,pUo),e(ft,_Uo),e(ft,ic),e(ic,uUo),e(ic,Fme),e(Fme,bUo),e(ic,vUo),e(ic,Cme),e(Cme,TUo),e(ic,FUo),e(ft,CUo),e(ft,Mme),e(Mme,MUo),e(ft,EUo),g($A,ft,null),e(ur,yUo),e(ur,ao),g(IA,ao,null),e(ao,wUo),e(ao,Eme),e(Eme,AUo),e(ao,LUo),e(ao,hn),e(hn,BUo),e(hn,yme),e(yme,xUo),e(hn,kUo),e(hn,wme),e(wme,RUo),e(hn,SUo),e(hn,Ame),e(Ame,PUo),e(hn,$Uo),e(ao,IUo),e(ao,NA),e(NA,i6),e(i6,Lme),e(Lme,NUo),e(i6,jUo),e(i6,wq),e(wq,DUo),e(i6,qUo),e(NA,GUo),e(NA,d6),e(d6,Bme),e(Bme,OUo),e(d6,XUo),e(d6,Aq),e(Aq,VUo),e(d6,zUo),e(ao,WUo),e(ao,c6),e(c6,QUo),e(c6,xme),e(xme,HUo),e(c6,UUo),e(c6,kme),e(kme,JUo),e(ao,YUo),e(ao,Rme),e(Rme,KUo),e(ao,ZUo),g(jA,ao,null),b(c,ARe,u),b(c,dc,u),e(dc,f6),e(f6,Sme),g(DA,Sme,null),e(dc,eJo),e(dc,Pme),e(Pme,oJo),b(c,LRe,u),b(c,br,u),g(qA,br,null),e(br,rJo),e(br,cc),e(cc,tJo),e(cc,$me),e($me,aJo),e(cc,nJo),e(cc,Ime),e(Ime,sJo),e(cc,lJo),e(br,iJo),e(br,GA),e(GA,dJo),e(GA,Nme),e(Nme,cJo),e(GA,fJo),e(br,mJo),e(br,mt),g(OA,mt,null),e(mt,gJo),e(mt,jme),e(jme,hJo),e(mt,pJo),e(mt,fc),e(fc,_Jo),e(fc,Dme),e(Dme,uJo),e(fc,bJo),e(fc,qme),e(qme,vJo),e(fc,TJo),e(mt,FJo),e(mt,Gme),e(Gme,CJo),e(mt,MJo),g(XA,mt,null),e(br,EJo),e(br,no),g(VA,no,null),e(no,yJo),e(no,Ome),e(Ome,wJo),e(no,AJo),e(no,pn),e(pn,LJo),e(pn,Xme),e(Xme,BJo),e(pn,xJo),e(pn,Vme),e(Vme,kJo),e(pn,RJo),e(pn,zme),e(zme,SJo),e(pn,PJo),e(no,$Jo),e(no,Wme),e(Wme,m6),e(m6,Qme),e(Qme,IJo),e(m6,NJo),e(m6,Lq),e(Lq,jJo),e(m6,DJo),e(no,qJo),e(no,g6),e(g6,GJo),e(g6,Hme),e(Hme,OJo),e(g6,XJo),e(g6,Ume),e(Ume,VJo),e(no,zJo),e(no,Jme),e(Jme,WJo),e(no,QJo),g(zA,no,null),b(c,BRe,u),b(c,mc,u),e(mc,h6),e(h6,Yme),g(WA,Yme,null),e(mc,HJo),e(mc,Kme),e(Kme,UJo),b(c,xRe,u),b(c,vr,u),g(QA,vr,null),e(vr,JJo),e(vr,gc),e(gc,YJo),e(gc,Zme),e(Zme,KJo),e(gc,ZJo),e(gc,ege),e(ege,eYo),e(gc,oYo),e(vr,rYo),e(vr,HA),e(HA,tYo),e(HA,oge),e(oge,aYo),e(HA,nYo),e(vr,sYo),e(vr,gt),g(UA,gt,null),e(gt,lYo),e(gt,rge),e(rge,iYo),e(gt,dYo),e(gt,hc),e(hc,cYo),e(hc,tge),e(tge,fYo),e(hc,mYo),e(hc,age),e(age,gYo),e(hc,hYo),e(gt,pYo),e(gt,nge),e(nge,_Yo),e(gt,uYo),g(JA,gt,null),e(vr,bYo),e(vr,ho),g(YA,ho,null),e(ho,vYo),e(ho,sge),e(sge,TYo),e(ho,FYo),e(ho,_n),e(_n,CYo),e(_n,lge),e(lge,MYo),e(_n,EYo),e(_n,ige),e(ige,yYo),e(_n,wYo),e(_n,dge),e(dge,AYo),e(_n,LYo),e(ho,BYo),e(ho,B),e(B,p6),e(p6,cge),e(cge,xYo),e(p6,kYo),e(p6,Bq),e(Bq,RYo),e(p6,SYo),e(B,PYo),e(B,_6),e(_6,fge),e(fge,$Yo),e(_6,IYo),e(_6,xq),e(xq,NYo),e(_6,jYo),e(B,DYo),e(B,u6),e(u6,mge),e(mge,qYo),e(u6,GYo),e(u6,kq),e(kq,OYo),e(u6,XYo),e(B,VYo),e(B,b6),e(b6,gge),e(gge,zYo),e(b6,WYo),e(b6,Rq),e(Rq,QYo),e(b6,HYo),e(B,UYo),e(B,v6),e(v6,hge),e(hge,JYo),e(v6,YYo),e(v6,Sq),e(Sq,KYo),e(v6,ZYo),e(B,eKo),e(B,T6),e(T6,pge),e(pge,oKo),e(T6,rKo),e(T6,Pq),e(Pq,tKo),e(T6,aKo),e(B,nKo),e(B,F6),e(F6,_ge),e(_ge,sKo),e(F6,lKo),e(F6,$q),e($q,iKo),e(F6,dKo),e(B,cKo),e(B,C6),e(C6,uge),e(uge,fKo),e(C6,mKo),e(C6,Iq),e(Iq,gKo),e(C6,hKo),e(B,pKo),e(B,M6),e(M6,bge),e(bge,_Ko),e(M6,uKo),e(M6,Nq),e(Nq,bKo),e(M6,vKo),e(B,TKo),e(B,E6),e(E6,vge),e(vge,FKo),e(E6,CKo),e(E6,jq),e(jq,MKo),e(E6,EKo),e(B,yKo),e(B,y6),e(y6,Tge),e(Tge,wKo),e(y6,AKo),e(y6,Dq),e(Dq,LKo),e(y6,BKo),e(B,xKo),e(B,w6),e(w6,Fge),e(Fge,kKo),e(w6,RKo),e(w6,qq),e(qq,SKo),e(w6,PKo),e(B,$Ko),e(B,A6),e(A6,Cge),e(Cge,IKo),e(A6,NKo),e(A6,Gq),e(Gq,jKo),e(A6,DKo),e(B,qKo),e(B,L6),e(L6,Mge),e(Mge,GKo),e(L6,OKo),e(L6,Oq),e(Oq,XKo),e(L6,VKo),e(B,zKo),e(B,B6),e(B6,Ege),e(Ege,WKo),e(B6,QKo),e(B6,Xq),e(Xq,HKo),e(B6,UKo),e(B,JKo),e(B,x6),e(x6,yge),e(yge,YKo),e(x6,KKo),e(x6,Vq),e(Vq,ZKo),e(x6,eZo),e(B,oZo),e(B,Gs),e(Gs,wge),e(wge,rZo),e(Gs,tZo),e(Gs,zq),e(zq,aZo),e(Gs,nZo),e(Gs,Wq),e(Wq,sZo),e(Gs,lZo),e(B,iZo),e(B,k6),e(k6,Age),e(Age,dZo),e(k6,cZo),e(k6,Qq),e(Qq,fZo),e(k6,mZo),e(B,gZo),e(B,R6),e(R6,Lge),e(Lge,hZo),e(R6,pZo),e(R6,Hq),e(Hq,_Zo),e(R6,uZo),e(B,bZo),e(B,S6),e(S6,Bge),e(Bge,vZo),e(S6,TZo),e(S6,Uq),e(Uq,FZo),e(S6,CZo),e(B,MZo),e(B,P6),e(P6,xge),e(xge,EZo),e(P6,yZo),e(P6,Jq),e(Jq,wZo),e(P6,AZo),e(B,LZo),e(B,$6),e($6,kge),e(kge,BZo),e($6,xZo),e($6,Yq),e(Yq,kZo),e($6,RZo),e(B,SZo),e(B,I6),e(I6,Rge),e(Rge,PZo),e(I6,$Zo),e(I6,Kq),e(Kq,IZo),e(I6,NZo),e(B,jZo),e(B,N6),e(N6,Sge),e(Sge,DZo),e(N6,qZo),e(N6,Zq),e(Zq,GZo),e(N6,OZo),e(B,XZo),e(B,j6),e(j6,Pge),e(Pge,VZo),e(j6,zZo),e(j6,eG),e(eG,WZo),e(j6,QZo),e(B,HZo),e(B,D6),e(D6,$ge),e($ge,UZo),e(D6,JZo),e(D6,oG),e(oG,YZo),e(D6,KZo),e(B,ZZo),e(B,q6),e(q6,Ige),e(Ige,eer),e(q6,oer),e(q6,rG),e(rG,rer),e(q6,ter),e(B,aer),e(B,G6),e(G6,Nge),e(Nge,ner),e(G6,ser),e(G6,tG),e(tG,ler),e(G6,ier),e(B,der),e(B,O6),e(O6,jge),e(jge,cer),e(O6,fer),e(O6,aG),e(aG,mer),e(O6,ger),e(B,her),e(B,X6),e(X6,Dge),e(Dge,per),e(X6,_er),e(X6,nG),e(nG,uer),e(X6,ber),e(B,ver),e(B,V6),e(V6,qge),e(qge,Ter),e(V6,Fer),e(V6,sG),e(sG,Cer),e(V6,Mer),e(B,Eer),e(B,z6),e(z6,Gge),e(Gge,yer),e(z6,wer),e(z6,lG),e(lG,Aer),e(z6,Ler),e(B,Ber),e(B,W6),e(W6,Oge),e(Oge,xer),e(W6,ker),e(W6,iG),e(iG,Rer),e(W6,Ser),e(B,Per),e(B,Q6),e(Q6,Xge),e(Xge,$er),e(Q6,Ier),e(Q6,dG),e(dG,Ner),e(Q6,jer),e(B,Der),e(B,H6),e(H6,Vge),e(Vge,qer),e(H6,Ger),e(H6,cG),e(cG,Oer),e(H6,Xer),e(B,Ver),e(B,U6),e(U6,zge),e(zge,zer),e(U6,Wer),e(U6,fG),e(fG,Qer),e(U6,Her),e(B,Uer),e(B,J6),e(J6,Wge),e(Wge,Jer),e(J6,Yer),e(J6,mG),e(mG,Ker),e(J6,Zer),e(B,eor),e(B,Y6),e(Y6,Qge),e(Qge,oor),e(Y6,ror),e(Y6,gG),e(gG,tor),e(Y6,aor),e(B,nor),e(B,K6),e(K6,Hge),e(Hge,sor),e(K6,lor),e(K6,hG),e(hG,ior),e(K6,dor),e(B,cor),e(B,Z6),e(Z6,Uge),e(Uge,mor),e(Z6,gor),e(Z6,pG),e(pG,hor),e(Z6,por),e(B,_or),e(B,eT),e(eT,Jge),e(Jge,uor),e(eT,bor),e(eT,_G),e(_G,vor),e(eT,Tor),e(B,For),e(B,oT),e(oT,Yge),e(Yge,Cor),e(oT,Mor),e(oT,uG),e(uG,Eor),e(oT,yor),e(B,wor),e(B,rT),e(rT,Kge),e(Kge,Aor),e(rT,Lor),e(rT,bG),e(bG,Bor),e(rT,xor),e(B,kor),e(B,tT),e(tT,Zge),e(Zge,Ror),e(tT,Sor),e(tT,vG),e(vG,Por),e(tT,$or),e(ho,Ior),e(ho,ehe),e(ehe,Nor),e(ho,jor),g(KA,ho,null),b(c,kRe,u),b(c,pc,u),e(pc,aT),e(aT,ohe),g(ZA,ohe,null),e(pc,Dor),e(pc,rhe),e(rhe,qor),b(c,RRe,u),b(c,Tr,u),g(e0,Tr,null),e(Tr,Gor),e(Tr,_c),e(_c,Oor),e(_c,the),e(the,Xor),e(_c,Vor),e(_c,ahe),e(ahe,zor),e(_c,Wor),e(Tr,Qor),e(Tr,o0),e(o0,Hor),e(o0,nhe),e(nhe,Uor),e(o0,Jor),e(Tr,Yor),e(Tr,ht),g(r0,ht,null),e(ht,Kor),e(ht,she),e(she,Zor),e(ht,err),e(ht,uc),e(uc,orr),e(uc,lhe),e(lhe,rrr),e(uc,trr),e(uc,ihe),e(ihe,arr),e(uc,nrr),e(ht,srr),e(ht,dhe),e(dhe,lrr),e(ht,irr),g(t0,ht,null),e(Tr,drr),e(Tr,po),g(a0,po,null),e(po,crr),e(po,che),e(che,frr),e(po,mrr),e(po,un),e(un,grr),e(un,fhe),e(fhe,hrr),e(un,prr),e(un,mhe),e(mhe,_rr),e(un,urr),e(un,ghe),e(ghe,brr),e(un,vrr),e(po,Trr),e(po,H),e(H,nT),e(nT,hhe),e(hhe,Frr),e(nT,Crr),e(nT,TG),e(TG,Mrr),e(nT,Err),e(H,yrr),e(H,sT),e(sT,phe),e(phe,wrr),e(sT,Arr),e(sT,FG),e(FG,Lrr),e(sT,Brr),e(H,xrr),e(H,lT),e(lT,_he),e(_he,krr),e(lT,Rrr),e(lT,CG),e(CG,Srr),e(lT,Prr),e(H,$rr),e(H,iT),e(iT,uhe),e(uhe,Irr),e(iT,Nrr),e(iT,MG),e(MG,jrr),e(iT,Drr),e(H,qrr),e(H,dT),e(dT,bhe),e(bhe,Grr),e(dT,Orr),e(dT,EG),e(EG,Xrr),e(dT,Vrr),e(H,zrr),e(H,cT),e(cT,vhe),e(vhe,Wrr),e(cT,Qrr),e(cT,yG),e(yG,Hrr),e(cT,Urr),e(H,Jrr),e(H,fT),e(fT,The),e(The,Yrr),e(fT,Krr),e(fT,wG),e(wG,Zrr),e(fT,etr),e(H,otr),e(H,mT),e(mT,Fhe),e(Fhe,rtr),e(mT,ttr),e(mT,AG),e(AG,atr),e(mT,ntr),e(H,str),e(H,gT),e(gT,Che),e(Che,ltr),e(gT,itr),e(gT,LG),e(LG,dtr),e(gT,ctr),e(H,ftr),e(H,hT),e(hT,Mhe),e(Mhe,mtr),e(hT,gtr),e(hT,BG),e(BG,htr),e(hT,ptr),e(H,_tr),e(H,pT),e(pT,Ehe),e(Ehe,utr),e(pT,btr),e(pT,xG),e(xG,vtr),e(pT,Ttr),e(H,Ftr),e(H,_T),e(_T,yhe),e(yhe,Ctr),e(_T,Mtr),e(_T,kG),e(kG,Etr),e(_T,ytr),e(H,wtr),e(H,uT),e(uT,whe),e(whe,Atr),e(uT,Ltr),e(uT,RG),e(RG,Btr),e(uT,xtr),e(H,ktr),e(H,bT),e(bT,Ahe),e(Ahe,Rtr),e(bT,Str),e(bT,SG),e(SG,Ptr),e(bT,$tr),e(H,Itr),e(H,vT),e(vT,Lhe),e(Lhe,Ntr),e(vT,jtr),e(vT,PG),e(PG,Dtr),e(vT,qtr),e(H,Gtr),e(H,TT),e(TT,Bhe),e(Bhe,Otr),e(TT,Xtr),e(TT,$G),e($G,Vtr),e(TT,ztr),e(H,Wtr),e(H,FT),e(FT,xhe),e(xhe,Qtr),e(FT,Htr),e(FT,IG),e(IG,Utr),e(FT,Jtr),e(H,Ytr),e(H,CT),e(CT,khe),e(khe,Ktr),e(CT,Ztr),e(CT,NG),e(NG,ear),e(CT,oar),e(H,rar),e(H,MT),e(MT,Rhe),e(Rhe,tar),e(MT,aar),e(MT,jG),e(jG,nar),e(MT,sar),e(H,lar),e(H,ET),e(ET,She),e(She,iar),e(ET,dar),e(ET,DG),e(DG,car),e(ET,far),e(H,mar),e(H,yT),e(yT,Phe),e(Phe,gar),e(yT,har),e(yT,qG),e(qG,par),e(yT,_ar),e(H,uar),e(H,wT),e(wT,$he),e($he,bar),e(wT,Tar),e(wT,GG),e(GG,Far),e(wT,Car),e(H,Mar),e(H,AT),e(AT,Ihe),e(Ihe,Ear),e(AT,yar),e(AT,OG),e(OG,war),e(AT,Aar),e(po,Lar),e(po,Nhe),e(Nhe,Bar),e(po,xar),g(n0,po,null),b(c,SRe,u),b(c,bc,u),e(bc,LT),e(LT,jhe),g(s0,jhe,null),e(bc,kar),e(bc,Dhe),e(Dhe,Rar),b(c,PRe,u),b(c,Fr,u),g(l0,Fr,null),e(Fr,Sar),e(Fr,vc),e(vc,Par),e(vc,qhe),e(qhe,$ar),e(vc,Iar),e(vc,Ghe),e(Ghe,Nar),e(vc,jar),e(Fr,Dar),e(Fr,i0),e(i0,qar),e(i0,Ohe),e(Ohe,Gar),e(i0,Oar),e(Fr,Xar),e(Fr,pt),g(d0,pt,null),e(pt,Var),e(pt,Xhe),e(Xhe,zar),e(pt,War),e(pt,Tc),e(Tc,Qar),e(Tc,Vhe),e(Vhe,Har),e(Tc,Uar),e(Tc,zhe),e(zhe,Jar),e(Tc,Yar),e(pt,Kar),e(pt,Whe),e(Whe,Zar),e(pt,enr),g(c0,pt,null),e(Fr,onr),e(Fr,_o),g(f0,_o,null),e(_o,rnr),e(_o,Qhe),e(Qhe,tnr),e(_o,anr),e(_o,bn),e(bn,nnr),e(bn,Hhe),e(Hhe,snr),e(bn,lnr),e(bn,Uhe),e(Uhe,inr),e(bn,dnr),e(bn,Jhe),e(Jhe,cnr),e(bn,fnr),e(_o,mnr),e(_o,ce),e(ce,BT),e(BT,Yhe),e(Yhe,gnr),e(BT,hnr),e(BT,XG),e(XG,pnr),e(BT,_nr),e(ce,unr),e(ce,xT),e(xT,Khe),e(Khe,bnr),e(xT,vnr),e(xT,VG),e(VG,Tnr),e(xT,Fnr),e(ce,Cnr),e(ce,kT),e(kT,Zhe),e(Zhe,Mnr),e(kT,Enr),e(kT,zG),e(zG,ynr),e(kT,wnr),e(ce,Anr),e(ce,RT),e(RT,epe),e(epe,Lnr),e(RT,Bnr),e(RT,WG),e(WG,xnr),e(RT,knr),e(ce,Rnr),e(ce,ST),e(ST,ope),e(ope,Snr),e(ST,Pnr),e(ST,QG),e(QG,$nr),e(ST,Inr),e(ce,Nnr),e(ce,PT),e(PT,rpe),e(rpe,jnr),e(PT,Dnr),e(PT,HG),e(HG,qnr),e(PT,Gnr),e(ce,Onr),e(ce,$T),e($T,tpe),e(tpe,Xnr),e($T,Vnr),e($T,UG),e(UG,znr),e($T,Wnr),e(ce,Qnr),e(ce,IT),e(IT,ape),e(ape,Hnr),e(IT,Unr),e(IT,JG),e(JG,Jnr),e(IT,Ynr),e(ce,Knr),e(ce,NT),e(NT,npe),e(npe,Znr),e(NT,esr),e(NT,YG),e(YG,osr),e(NT,rsr),e(ce,tsr),e(ce,jT),e(jT,spe),e(spe,asr),e(jT,nsr),e(jT,KG),e(KG,ssr),e(jT,lsr),e(ce,isr),e(ce,DT),e(DT,lpe),e(lpe,dsr),e(DT,csr),e(DT,ZG),e(ZG,fsr),e(DT,msr),e(ce,gsr),e(ce,qT),e(qT,ipe),e(ipe,hsr),e(qT,psr),e(qT,eO),e(eO,_sr),e(qT,usr),e(_o,bsr),e(_o,dpe),e(dpe,vsr),e(_o,Tsr),g(m0,_o,null),b(c,$Re,u),b(c,Fc,u),e(Fc,GT),e(GT,cpe),g(g0,cpe,null),e(Fc,Fsr),e(Fc,fpe),e(fpe,Csr),b(c,IRe,u),b(c,Cr,u),g(h0,Cr,null),e(Cr,Msr),e(Cr,Cc),e(Cc,Esr),e(Cc,mpe),e(mpe,ysr),e(Cc,wsr),e(Cc,gpe),e(gpe,Asr),e(Cc,Lsr),e(Cr,Bsr),e(Cr,p0),e(p0,xsr),e(p0,hpe),e(hpe,ksr),e(p0,Rsr),e(Cr,Ssr),e(Cr,_t),g(_0,_t,null),e(_t,Psr),e(_t,ppe),e(ppe,$sr),e(_t,Isr),e(_t,Mc),e(Mc,Nsr),e(Mc,_pe),e(_pe,jsr),e(Mc,Dsr),e(Mc,upe),e(upe,qsr),e(Mc,Gsr),e(_t,Osr),e(_t,bpe),e(bpe,Xsr),e(_t,Vsr),g(u0,_t,null),e(Cr,zsr),e(Cr,uo),g(b0,uo,null),e(uo,Wsr),e(uo,vpe),e(vpe,Qsr),e(uo,Hsr),e(uo,vn),e(vn,Usr),e(vn,Tpe),e(Tpe,Jsr),e(vn,Ysr),e(vn,Fpe),e(Fpe,Ksr),e(vn,Zsr),e(vn,Cpe),e(Cpe,elr),e(vn,olr),e(uo,rlr),e(uo,v0),e(v0,OT),e(OT,Mpe),e(Mpe,tlr),e(OT,alr),e(OT,oO),e(oO,nlr),e(OT,slr),e(v0,llr),e(v0,XT),e(XT,Epe),e(Epe,ilr),e(XT,dlr),e(XT,rO),e(rO,clr),e(XT,flr),e(uo,mlr),e(uo,ype),e(ype,glr),e(uo,hlr),g(T0,uo,null),b(c,NRe,u),b(c,Ec,u),e(Ec,VT),e(VT,wpe),g(F0,wpe,null),e(Ec,plr),e(Ec,Ape),e(Ape,_lr),b(c,jRe,u),b(c,Mr,u),g(C0,Mr,null),e(Mr,ulr),e(Mr,yc),e(yc,blr),e(yc,Lpe),e(Lpe,vlr),e(yc,Tlr),e(yc,Bpe),e(Bpe,Flr),e(yc,Clr),e(Mr,Mlr),e(Mr,M0),e(M0,Elr),e(M0,xpe),e(xpe,ylr),e(M0,wlr),e(Mr,Alr),e(Mr,ut),g(E0,ut,null),e(ut,Llr),e(ut,kpe),e(kpe,Blr),e(ut,xlr),e(ut,wc),e(wc,klr),e(wc,Rpe),e(Rpe,Rlr),e(wc,Slr),e(wc,Spe),e(Spe,Plr),e(wc,$lr),e(ut,Ilr),e(ut,Ppe),e(Ppe,Nlr),e(ut,jlr),g(y0,ut,null),e(Mr,Dlr),e(Mr,bo),g(w0,bo,null),e(bo,qlr),e(bo,$pe),e($pe,Glr),e(bo,Olr),e(bo,Tn),e(Tn,Xlr),e(Tn,Ipe),e(Ipe,Vlr),e(Tn,zlr),e(Tn,Npe),e(Npe,Wlr),e(Tn,Qlr),e(Tn,jpe),e(jpe,Hlr),e(Tn,Ulr),e(bo,Jlr),e(bo,J),e(J,zT),e(zT,Dpe),e(Dpe,Ylr),e(zT,Klr),e(zT,tO),e(tO,Zlr),e(zT,eir),e(J,oir),e(J,WT),e(WT,qpe),e(qpe,rir),e(WT,tir),e(WT,aO),e(aO,air),e(WT,nir),e(J,sir),e(J,QT),e(QT,Gpe),e(Gpe,lir),e(QT,iir),e(QT,nO),e(nO,dir),e(QT,cir),e(J,fir),e(J,HT),e(HT,Ope),e(Ope,mir),e(HT,gir),e(HT,sO),e(sO,hir),e(HT,pir),e(J,_ir),e(J,UT),e(UT,Xpe),e(Xpe,uir),e(UT,bir),e(UT,lO),e(lO,vir),e(UT,Tir),e(J,Fir),e(J,JT),e(JT,Vpe),e(Vpe,Cir),e(JT,Mir),e(JT,iO),e(iO,Eir),e(JT,yir),e(J,wir),e(J,YT),e(YT,zpe),e(zpe,Air),e(YT,Lir),e(YT,dO),e(dO,Bir),e(YT,xir),e(J,kir),e(J,KT),e(KT,Wpe),e(Wpe,Rir),e(KT,Sir),e(KT,cO),e(cO,Pir),e(KT,$ir),e(J,Iir),e(J,ZT),e(ZT,Qpe),e(Qpe,Nir),e(ZT,jir),e(ZT,fO),e(fO,Dir),e(ZT,qir),e(J,Gir),e(J,eF),e(eF,Hpe),e(Hpe,Oir),e(eF,Xir),e(eF,mO),e(mO,Vir),e(eF,zir),e(J,Wir),e(J,oF),e(oF,Upe),e(Upe,Qir),e(oF,Hir),e(oF,gO),e(gO,Uir),e(oF,Jir),e(J,Yir),e(J,rF),e(rF,Jpe),e(Jpe,Kir),e(rF,Zir),e(rF,hO),e(hO,edr),e(rF,odr),e(J,rdr),e(J,tF),e(tF,Ype),e(Ype,tdr),e(tF,adr),e(tF,pO),e(pO,ndr),e(tF,sdr),e(J,ldr),e(J,aF),e(aF,Kpe),e(Kpe,idr),e(aF,ddr),e(aF,_O),e(_O,cdr),e(aF,fdr),e(J,mdr),e(J,nF),e(nF,Zpe),e(Zpe,gdr),e(nF,hdr),e(nF,uO),e(uO,pdr),e(nF,_dr),e(J,udr),e(J,sF),e(sF,e_e),e(e_e,bdr),e(sF,vdr),e(sF,bO),e(bO,Tdr),e(sF,Fdr),e(J,Cdr),e(J,lF),e(lF,o_e),e(o_e,Mdr),e(lF,Edr),e(lF,vO),e(vO,ydr),e(lF,wdr),e(J,Adr),e(J,iF),e(iF,r_e),e(r_e,Ldr),e(iF,Bdr),e(iF,TO),e(TO,xdr),e(iF,kdr),e(J,Rdr),e(J,dF),e(dF,t_e),e(t_e,Sdr),e(dF,Pdr),e(dF,FO),e(FO,$dr),e(dF,Idr),e(J,Ndr),e(J,cF),e(cF,a_e),e(a_e,jdr),e(cF,Ddr),e(cF,CO),e(CO,qdr),e(cF,Gdr),e(bo,Odr),e(bo,n_e),e(n_e,Xdr),e(bo,Vdr),g(A0,bo,null),b(c,DRe,u),b(c,Ac,u),e(Ac,fF),e(fF,s_e),g(L0,s_e,null),e(Ac,zdr),e(Ac,l_e),e(l_e,Wdr),b(c,qRe,u),b(c,Er,u),g(B0,Er,null),e(Er,Qdr),e(Er,Lc),e(Lc,Hdr),e(Lc,i_e),e(i_e,Udr),e(Lc,Jdr),e(Lc,d_e),e(d_e,Ydr),e(Lc,Kdr),e(Er,Zdr),e(Er,x0),e(x0,ecr),e(x0,c_e),e(c_e,ocr),e(x0,rcr),e(Er,tcr),e(Er,bt),g(k0,bt,null),e(bt,acr),e(bt,f_e),e(f_e,ncr),e(bt,scr),e(bt,Bc),e(Bc,lcr),e(Bc,m_e),e(m_e,icr),e(Bc,dcr),e(Bc,g_e),e(g_e,ccr),e(Bc,fcr),e(bt,mcr),e(bt,h_e),e(h_e,gcr),e(bt,hcr),g(R0,bt,null),e(Er,pcr),e(Er,vo),g(S0,vo,null),e(vo,_cr),e(vo,p_e),e(p_e,ucr),e(vo,bcr),e(vo,Fn),e(Fn,vcr),e(Fn,__e),e(__e,Tcr),e(Fn,Fcr),e(Fn,u_e),e(u_e,Ccr),e(Fn,Mcr),e(Fn,b_e),e(b_e,Ecr),e(Fn,ycr),e(vo,wcr),e(vo,ue),e(ue,mF),e(mF,v_e),e(v_e,Acr),e(mF,Lcr),e(mF,MO),e(MO,Bcr),e(mF,xcr),e(ue,kcr),e(ue,gF),e(gF,T_e),e(T_e,Rcr),e(gF,Scr),e(gF,EO),e(EO,Pcr),e(gF,$cr),e(ue,Icr),e(ue,hF),e(hF,F_e),e(F_e,Ncr),e(hF,jcr),e(hF,yO),e(yO,Dcr),e(hF,qcr),e(ue,Gcr),e(ue,pF),e(pF,C_e),e(C_e,Ocr),e(pF,Xcr),e(pF,wO),e(wO,Vcr),e(pF,zcr),e(ue,Wcr),e(ue,_F),e(_F,M_e),e(M_e,Qcr),e(_F,Hcr),e(_F,AO),e(AO,Ucr),e(_F,Jcr),e(ue,Ycr),e(ue,uF),e(uF,E_e),e(E_e,Kcr),e(uF,Zcr),e(uF,LO),e(LO,efr),e(uF,ofr),e(ue,rfr),e(ue,bF),e(bF,y_e),e(y_e,tfr),e(bF,afr),e(bF,BO),e(BO,nfr),e(bF,sfr),e(ue,lfr),e(ue,vF),e(vF,w_e),e(w_e,ifr),e(vF,dfr),e(vF,xO),e(xO,cfr),e(vF,ffr),e(ue,mfr),e(ue,TF),e(TF,A_e),e(A_e,gfr),e(TF,hfr),e(TF,kO),e(kO,pfr),e(TF,_fr),e(ue,ufr),e(ue,FF),e(FF,L_e),e(L_e,bfr),e(FF,vfr),e(FF,RO),e(RO,Tfr),e(FF,Ffr),e(vo,Cfr),e(vo,B_e),e(B_e,Mfr),e(vo,Efr),g(P0,vo,null),b(c,GRe,u),b(c,xc,u),e(xc,CF),e(CF,x_e),g($0,x_e,null),e(xc,yfr),e(xc,k_e),e(k_e,wfr),b(c,ORe,u),b(c,yr,u),g(I0,yr,null),e(yr,Afr),e(yr,kc),e(kc,Lfr),e(kc,R_e),e(R_e,Bfr),e(kc,xfr),e(kc,S_e),e(S_e,kfr),e(kc,Rfr),e(yr,Sfr),e(yr,N0),e(N0,Pfr),e(N0,P_e),e(P_e,$fr),e(N0,Ifr),e(yr,Nfr),e(yr,vt),g(j0,vt,null),e(vt,jfr),e(vt,$_e),e($_e,Dfr),e(vt,qfr),e(vt,Rc),e(Rc,Gfr),e(Rc,I_e),e(I_e,Ofr),e(Rc,Xfr),e(Rc,N_e),e(N_e,Vfr),e(Rc,zfr),e(vt,Wfr),e(vt,j_e),e(j_e,Qfr),e(vt,Hfr),g(D0,vt,null),e(yr,Ufr),e(yr,To),g(q0,To,null),e(To,Jfr),e(To,D_e),e(D_e,Yfr),e(To,Kfr),e(To,Cn),e(Cn,Zfr),e(Cn,q_e),e(q_e,emr),e(Cn,omr),e(Cn,G_e),e(G_e,rmr),e(Cn,tmr),e(Cn,O_e),e(O_e,amr),e(Cn,nmr),e(To,smr),e(To,X),e(X,MF),e(MF,X_e),e(X_e,lmr),e(MF,imr),e(MF,SO),e(SO,dmr),e(MF,cmr),e(X,fmr),e(X,EF),e(EF,V_e),e(V_e,mmr),e(EF,gmr),e(EF,PO),e(PO,hmr),e(EF,pmr),e(X,_mr),e(X,yF),e(yF,z_e),e(z_e,umr),e(yF,bmr),e(yF,$O),e($O,vmr),e(yF,Tmr),e(X,Fmr),e(X,wF),e(wF,W_e),e(W_e,Cmr),e(wF,Mmr),e(wF,IO),e(IO,Emr),e(wF,ymr),e(X,wmr),e(X,AF),e(AF,Q_e),e(Q_e,Amr),e(AF,Lmr),e(AF,NO),e(NO,Bmr),e(AF,xmr),e(X,kmr),e(X,LF),e(LF,H_e),e(H_e,Rmr),e(LF,Smr),e(LF,jO),e(jO,Pmr),e(LF,$mr),e(X,Imr),e(X,BF),e(BF,U_e),e(U_e,Nmr),e(BF,jmr),e(BF,DO),e(DO,Dmr),e(BF,qmr),e(X,Gmr),e(X,xF),e(xF,J_e),e(J_e,Omr),e(xF,Xmr),e(xF,qO),e(qO,Vmr),e(xF,zmr),e(X,Wmr),e(X,kF),e(kF,Y_e),e(Y_e,Qmr),e(kF,Hmr),e(kF,GO),e(GO,Umr),e(kF,Jmr),e(X,Ymr),e(X,RF),e(RF,K_e),e(K_e,Kmr),e(RF,Zmr),e(RF,OO),e(OO,egr),e(RF,ogr),e(X,rgr),e(X,SF),e(SF,Z_e),e(Z_e,tgr),e(SF,agr),e(SF,XO),e(XO,ngr),e(SF,sgr),e(X,lgr),e(X,PF),e(PF,eue),e(eue,igr),e(PF,dgr),e(PF,VO),e(VO,cgr),e(PF,fgr),e(X,mgr),e(X,$F),e($F,oue),e(oue,ggr),e($F,hgr),e($F,zO),e(zO,pgr),e($F,_gr),e(X,ugr),e(X,IF),e(IF,rue),e(rue,bgr),e(IF,vgr),e(IF,WO),e(WO,Tgr),e(IF,Fgr),e(X,Cgr),e(X,NF),e(NF,tue),e(tue,Mgr),e(NF,Egr),e(NF,QO),e(QO,ygr),e(NF,wgr),e(X,Agr),e(X,jF),e(jF,aue),e(aue,Lgr),e(jF,Bgr),e(jF,HO),e(HO,xgr),e(jF,kgr),e(X,Rgr),e(X,DF),e(DF,nue),e(nue,Sgr),e(DF,Pgr),e(DF,UO),e(UO,$gr),e(DF,Igr),e(X,Ngr),e(X,qF),e(qF,sue),e(sue,jgr),e(qF,Dgr),e(qF,JO),e(JO,qgr),e(qF,Ggr),e(X,Ogr),e(X,GF),e(GF,lue),e(lue,Xgr),e(GF,Vgr),e(GF,YO),e(YO,zgr),e(GF,Wgr),e(X,Qgr),e(X,OF),e(OF,iue),e(iue,Hgr),e(OF,Ugr),e(OF,KO),e(KO,Jgr),e(OF,Ygr),e(X,Kgr),e(X,XF),e(XF,due),e(due,Zgr),e(XF,ehr),e(XF,ZO),e(ZO,ohr),e(XF,rhr),e(X,thr),e(X,VF),e(VF,cue),e(cue,ahr),e(VF,nhr),e(VF,eX),e(eX,shr),e(VF,lhr),e(X,ihr),e(X,zF),e(zF,fue),e(fue,dhr),e(zF,chr),e(zF,oX),e(oX,fhr),e(zF,mhr),e(X,ghr),e(X,WF),e(WF,mue),e(mue,hhr),e(WF,phr),e(WF,rX),e(rX,_hr),e(WF,uhr),e(X,bhr),e(X,QF),e(QF,gue),e(gue,vhr),e(QF,Thr),e(QF,tX),e(tX,Fhr),e(QF,Chr),e(X,Mhr),e(X,HF),e(HF,hue),e(hue,Ehr),e(HF,yhr),e(HF,aX),e(aX,whr),e(HF,Ahr),e(To,Lhr),e(To,pue),e(pue,Bhr),e(To,xhr),g(G0,To,null),b(c,XRe,u),b(c,Sc,u),e(Sc,UF),e(UF,_ue),g(O0,_ue,null),e(Sc,khr),e(Sc,uue),e(uue,Rhr),b(c,VRe,u),b(c,wr,u),g(X0,wr,null),e(wr,Shr),e(wr,Pc),e(Pc,Phr),e(Pc,bue),e(bue,$hr),e(Pc,Ihr),e(Pc,vue),e(vue,Nhr),e(Pc,jhr),e(wr,Dhr),e(wr,V0),e(V0,qhr),e(V0,Tue),e(Tue,Ghr),e(V0,Ohr),e(wr,Xhr),e(wr,Tt),g(z0,Tt,null),e(Tt,Vhr),e(Tt,Fue),e(Fue,zhr),e(Tt,Whr),e(Tt,$c),e($c,Qhr),e($c,Cue),e(Cue,Hhr),e($c,Uhr),e($c,Mue),e(Mue,Jhr),e($c,Yhr),e(Tt,Khr),e(Tt,Eue),e(Eue,Zhr),e(Tt,epr),g(W0,Tt,null),e(wr,opr),e(wr,Fo),g(Q0,Fo,null),e(Fo,rpr),e(Fo,yue),e(yue,tpr),e(Fo,apr),e(Fo,Mn),e(Mn,npr),e(Mn,wue),e(wue,spr),e(Mn,lpr),e(Mn,Aue),e(Aue,ipr),e(Mn,dpr),e(Mn,Lue),e(Lue,cpr),e(Mn,fpr),e(Fo,mpr),e(Fo,ae),e(ae,JF),e(JF,Bue),e(Bue,gpr),e(JF,hpr),e(JF,nX),e(nX,ppr),e(JF,_pr),e(ae,upr),e(ae,YF),e(YF,xue),e(xue,bpr),e(YF,vpr),e(YF,sX),e(sX,Tpr),e(YF,Fpr),e(ae,Cpr),e(ae,KF),e(KF,kue),e(kue,Mpr),e(KF,Epr),e(KF,lX),e(lX,ypr),e(KF,wpr),e(ae,Apr),e(ae,ZF),e(ZF,Rue),e(Rue,Lpr),e(ZF,Bpr),e(ZF,iX),e(iX,xpr),e(ZF,kpr),e(ae,Rpr),e(ae,eC),e(eC,Sue),e(Sue,Spr),e(eC,Ppr),e(eC,dX),e(dX,$pr),e(eC,Ipr),e(ae,Npr),e(ae,oC),e(oC,Pue),e(Pue,jpr),e(oC,Dpr),e(oC,cX),e(cX,qpr),e(oC,Gpr),e(ae,Opr),e(ae,rC),e(rC,$ue),e($ue,Xpr),e(rC,Vpr),e(rC,fX),e(fX,zpr),e(rC,Wpr),e(ae,Qpr),e(ae,tC),e(tC,Iue),e(Iue,Hpr),e(tC,Upr),e(tC,mX),e(mX,Jpr),e(tC,Ypr),e(ae,Kpr),e(ae,aC),e(aC,Nue),e(Nue,Zpr),e(aC,e_r),e(aC,gX),e(gX,o_r),e(aC,r_r),e(ae,t_r),e(ae,nC),e(nC,jue),e(jue,a_r),e(nC,n_r),e(nC,hX),e(hX,s_r),e(nC,l_r),e(ae,i_r),e(ae,sC),e(sC,Due),e(Due,d_r),e(sC,c_r),e(sC,pX),e(pX,f_r),e(sC,m_r),e(ae,g_r),e(ae,lC),e(lC,que),e(que,h_r),e(lC,p_r),e(lC,_X),e(_X,__r),e(lC,u_r),e(ae,b_r),e(ae,iC),e(iC,Gue),e(Gue,v_r),e(iC,T_r),e(iC,uX),e(uX,F_r),e(iC,C_r),e(ae,M_r),e(ae,dC),e(dC,Oue),e(Oue,E_r),e(dC,y_r),e(dC,bX),e(bX,w_r),e(dC,A_r),e(ae,L_r),e(ae,cC),e(cC,Xue),e(Xue,B_r),e(cC,x_r),e(cC,vX),e(vX,k_r),e(cC,R_r),e(ae,S_r),e(ae,fC),e(fC,Vue),e(Vue,P_r),e(fC,$_r),e(fC,TX),e(TX,I_r),e(fC,N_r),e(ae,j_r),e(ae,mC),e(mC,zue),e(zue,D_r),e(mC,q_r),e(mC,FX),e(FX,G_r),e(mC,O_r),e(Fo,X_r),e(Fo,Wue),e(Wue,V_r),e(Fo,z_r),g(H0,Fo,null),b(c,zRe,u),b(c,Ic,u),e(Ic,gC),e(gC,Que),g(U0,Que,null),e(Ic,W_r),e(Ic,Hue),e(Hue,Q_r),b(c,WRe,u),b(c,Ar,u),g(J0,Ar,null),e(Ar,H_r),e(Ar,Nc),e(Nc,U_r),e(Nc,Uue),e(Uue,J_r),e(Nc,Y_r),e(Nc,Jue),e(Jue,K_r),e(Nc,Z_r),e(Ar,eur),e(Ar,Y0),e(Y0,our),e(Y0,Yue),e(Yue,rur),e(Y0,tur),e(Ar,aur),e(Ar,Ft),g(K0,Ft,null),e(Ft,nur),e(Ft,Kue),e(Kue,sur),e(Ft,lur),e(Ft,jc),e(jc,iur),e(jc,Zue),e(Zue,dur),e(jc,cur),e(jc,e5e),e(e5e,fur),e(jc,mur),e(Ft,gur),e(Ft,o5e),e(o5e,hur),e(Ft,pur),g(Z0,Ft,null),e(Ar,_ur),e(Ar,Co),g(eL,Co,null),e(Co,uur),e(Co,r5e),e(r5e,bur),e(Co,vur),e(Co,En),e(En,Tur),e(En,t5e),e(t5e,Fur),e(En,Cur),e(En,a5e),e(a5e,Mur),e(En,Eur),e(En,n5e),e(n5e,yur),e(En,wur),e(Co,Aur),e(Co,s5e),e(s5e,hC),e(hC,l5e),e(l5e,Lur),e(hC,Bur),e(hC,CX),e(CX,xur),e(hC,kur),e(Co,Rur),e(Co,i5e),e(i5e,Sur),e(Co,Pur),g(oL,Co,null),b(c,QRe,u),b(c,Dc,u),e(Dc,pC),e(pC,d5e),g(rL,d5e,null),e(Dc,$ur),e(Dc,c5e),e(c5e,Iur),b(c,HRe,u),b(c,Lr,u),g(tL,Lr,null),e(Lr,Nur),e(Lr,qc),e(qc,jur),e(qc,f5e),e(f5e,Dur),e(qc,qur),e(qc,m5e),e(m5e,Gur),e(qc,Our),e(Lr,Xur),e(Lr,aL),e(aL,Vur),e(aL,g5e),e(g5e,zur),e(aL,Wur),e(Lr,Qur),e(Lr,Ct),g(nL,Ct,null),e(Ct,Hur),e(Ct,h5e),e(h5e,Uur),e(Ct,Jur),e(Ct,Gc),e(Gc,Yur),e(Gc,p5e),e(p5e,Kur),e(Gc,Zur),e(Gc,_5e),e(_5e,e5r),e(Gc,o5r),e(Ct,r5r),e(Ct,u5e),e(u5e,t5r),e(Ct,a5r),g(sL,Ct,null),e(Lr,n5r),e(Lr,Mo),g(lL,Mo,null),e(Mo,s5r),e(Mo,b5e),e(b5e,l5r),e(Mo,i5r),e(Mo,yn),e(yn,d5r),e(yn,v5e),e(v5e,c5r),e(yn,f5r),e(yn,T5e),e(T5e,m5r),e(yn,g5r),e(yn,F5e),e(F5e,h5r),e(yn,p5r),e(Mo,_5r),e(Mo,Y),e(Y,_C),e(_C,C5e),e(C5e,u5r),e(_C,b5r),e(_C,MX),e(MX,v5r),e(_C,T5r),e(Y,F5r),e(Y,uC),e(uC,M5e),e(M5e,C5r),e(uC,M5r),e(uC,EX),e(EX,E5r),e(uC,y5r),e(Y,w5r),e(Y,bC),e(bC,E5e),e(E5e,A5r),e(bC,L5r),e(bC,yX),e(yX,B5r),e(bC,x5r),e(Y,k5r),e(Y,vC),e(vC,y5e),e(y5e,R5r),e(vC,S5r),e(vC,wX),e(wX,P5r),e(vC,$5r),e(Y,I5r),e(Y,TC),e(TC,w5e),e(w5e,N5r),e(TC,j5r),e(TC,AX),e(AX,D5r),e(TC,q5r),e(Y,G5r),e(Y,FC),e(FC,A5e),e(A5e,O5r),e(FC,X5r),e(FC,LX),e(LX,V5r),e(FC,z5r),e(Y,W5r),e(Y,CC),e(CC,L5e),e(L5e,Q5r),e(CC,H5r),e(CC,BX),e(BX,U5r),e(CC,J5r),e(Y,Y5r),e(Y,MC),e(MC,B5e),e(B5e,K5r),e(MC,Z5r),e(MC,xX),e(xX,e2r),e(MC,o2r),e(Y,r2r),e(Y,EC),e(EC,x5e),e(x5e,t2r),e(EC,a2r),e(EC,kX),e(kX,n2r),e(EC,s2r),e(Y,l2r),e(Y,yC),e(yC,k5e),e(k5e,i2r),e(yC,d2r),e(yC,RX),e(RX,c2r),e(yC,f2r),e(Y,m2r),e(Y,wC),e(wC,R5e),e(R5e,g2r),e(wC,h2r),e(wC,SX),e(SX,p2r),e(wC,_2r),e(Y,u2r),e(Y,AC),e(AC,S5e),e(S5e,b2r),e(AC,v2r),e(AC,PX),e(PX,T2r),e(AC,F2r),e(Y,C2r),e(Y,LC),e(LC,P5e),e(P5e,M2r),e(LC,E2r),e(LC,$X),e($X,y2r),e(LC,w2r),e(Y,A2r),e(Y,BC),e(BC,$5e),e($5e,L2r),e(BC,B2r),e(BC,IX),e(IX,x2r),e(BC,k2r),e(Y,R2r),e(Y,xC),e(xC,I5e),e(I5e,S2r),e(xC,P2r),e(xC,NX),e(NX,$2r),e(xC,I2r),e(Y,N2r),e(Y,kC),e(kC,N5e),e(N5e,j2r),e(kC,D2r),e(kC,jX),e(jX,q2r),e(kC,G2r),e(Y,O2r),e(Y,RC),e(RC,j5e),e(j5e,X2r),e(RC,V2r),e(RC,DX),e(DX,z2r),e(RC,W2r),e(Y,Q2r),e(Y,SC),e(SC,D5e),e(D5e,H2r),e(SC,U2r),e(SC,qX),e(qX,J2r),e(SC,Y2r),e(Y,K2r),e(Y,PC),e(PC,q5e),e(q5e,Z2r),e(PC,e1r),e(PC,GX),e(GX,o1r),e(PC,r1r),e(Y,t1r),e(Y,$C),e($C,G5e),e(G5e,a1r),e($C,n1r),e($C,OX),e(OX,s1r),e($C,l1r),e(Mo,i1r),e(Mo,O5e),e(O5e,d1r),e(Mo,c1r),g(iL,Mo,null),b(c,URe,u),b(c,Oc,u),e(Oc,IC),e(IC,X5e),g(dL,X5e,null),e(Oc,f1r),e(Oc,V5e),e(V5e,m1r),b(c,JRe,u),b(c,Br,u),g(cL,Br,null),e(Br,g1r),e(Br,Xc),e(Xc,h1r),e(Xc,z5e),e(z5e,p1r),e(Xc,_1r),e(Xc,W5e),e(W5e,u1r),e(Xc,b1r),e(Br,v1r),e(Br,fL),e(fL,T1r),e(fL,Q5e),e(Q5e,F1r),e(fL,C1r),e(Br,M1r),e(Br,Mt),g(mL,Mt,null),e(Mt,E1r),e(Mt,H5e),e(H5e,y1r),e(Mt,w1r),e(Mt,Vc),e(Vc,A1r),e(Vc,U5e),e(U5e,L1r),e(Vc,B1r),e(Vc,J5e),e(J5e,x1r),e(Vc,k1r),e(Mt,R1r),e(Mt,Y5e),e(Y5e,S1r),e(Mt,P1r),g(gL,Mt,null),e(Br,$1r),e(Br,Eo),g(hL,Eo,null),e(Eo,I1r),e(Eo,K5e),e(K5e,N1r),e(Eo,j1r),e(Eo,wn),e(wn,D1r),e(wn,Z5e),e(Z5e,q1r),e(wn,G1r),e(wn,e2e),e(e2e,O1r),e(wn,X1r),e(wn,o2e),e(o2e,V1r),e(wn,z1r),e(Eo,W1r),e(Eo,K),e(K,NC),e(NC,r2e),e(r2e,Q1r),e(NC,H1r),e(NC,XX),e(XX,U1r),e(NC,J1r),e(K,Y1r),e(K,jC),e(jC,t2e),e(t2e,K1r),e(jC,Z1r),e(jC,VX),e(VX,ebr),e(jC,obr),e(K,rbr),e(K,DC),e(DC,a2e),e(a2e,tbr),e(DC,abr),e(DC,zX),e(zX,nbr),e(DC,sbr),e(K,lbr),e(K,qC),e(qC,n2e),e(n2e,ibr),e(qC,dbr),e(qC,WX),e(WX,cbr),e(qC,fbr),e(K,mbr),e(K,GC),e(GC,s2e),e(s2e,gbr),e(GC,hbr),e(GC,QX),e(QX,pbr),e(GC,_br),e(K,ubr),e(K,OC),e(OC,l2e),e(l2e,bbr),e(OC,vbr),e(OC,HX),e(HX,Tbr),e(OC,Fbr),e(K,Cbr),e(K,XC),e(XC,i2e),e(i2e,Mbr),e(XC,Ebr),e(XC,UX),e(UX,ybr),e(XC,wbr),e(K,Abr),e(K,VC),e(VC,d2e),e(d2e,Lbr),e(VC,Bbr),e(VC,JX),e(JX,xbr),e(VC,kbr),e(K,Rbr),e(K,zC),e(zC,c2e),e(c2e,Sbr),e(zC,Pbr),e(zC,YX),e(YX,$br),e(zC,Ibr),e(K,Nbr),e(K,WC),e(WC,f2e),e(f2e,jbr),e(WC,Dbr),e(WC,KX),e(KX,qbr),e(WC,Gbr),e(K,Obr),e(K,QC),e(QC,m2e),e(m2e,Xbr),e(QC,Vbr),e(QC,ZX),e(ZX,zbr),e(QC,Wbr),e(K,Qbr),e(K,HC),e(HC,g2e),e(g2e,Hbr),e(HC,Ubr),e(HC,eV),e(eV,Jbr),e(HC,Ybr),e(K,Kbr),e(K,UC),e(UC,h2e),e(h2e,Zbr),e(UC,evr),e(UC,oV),e(oV,ovr),e(UC,rvr),e(K,tvr),e(K,JC),e(JC,p2e),e(p2e,avr),e(JC,nvr),e(JC,rV),e(rV,svr),e(JC,lvr),e(K,ivr),e(K,YC),e(YC,_2e),e(_2e,dvr),e(YC,cvr),e(YC,tV),e(tV,fvr),e(YC,mvr),e(K,gvr),e(K,KC),e(KC,u2e),e(u2e,hvr),e(KC,pvr),e(KC,aV),e(aV,_vr),e(KC,uvr),e(K,bvr),e(K,ZC),e(ZC,b2e),e(b2e,vvr),e(ZC,Tvr),e(ZC,nV),e(nV,Fvr),e(ZC,Cvr),e(K,Mvr),e(K,eM),e(eM,v2e),e(v2e,Evr),e(eM,yvr),e(eM,sV),e(sV,wvr),e(eM,Avr),e(K,Lvr),e(K,oM),e(oM,T2e),e(T2e,Bvr),e(oM,xvr),e(oM,lV),e(lV,kvr),e(oM,Rvr),e(K,Svr),e(K,rM),e(rM,F2e),e(F2e,Pvr),e(rM,$vr),e(rM,iV),e(iV,Ivr),e(rM,Nvr),e(Eo,jvr),e(Eo,C2e),e(C2e,Dvr),e(Eo,qvr),g(pL,Eo,null),b(c,YRe,u),b(c,zc,u),e(zc,tM),e(tM,M2e),g(_L,M2e,null),e(zc,Gvr),e(zc,E2e),e(E2e,Ovr),b(c,KRe,u),b(c,xr,u),g(uL,xr,null),e(xr,Xvr),e(xr,Wc),e(Wc,Vvr),e(Wc,y2e),e(y2e,zvr),e(Wc,Wvr),e(Wc,w2e),e(w2e,Qvr),e(Wc,Hvr),e(xr,Uvr),e(xr,bL),e(bL,Jvr),e(bL,A2e),e(A2e,Yvr),e(bL,Kvr),e(xr,Zvr),e(xr,Et),g(vL,Et,null),e(Et,e6r),e(Et,L2e),e(L2e,o6r),e(Et,r6r),e(Et,Qc),e(Qc,t6r),e(Qc,B2e),e(B2e,a6r),e(Qc,n6r),e(Qc,x2e),e(x2e,s6r),e(Qc,l6r),e(Et,i6r),e(Et,k2e),e(k2e,d6r),e(Et,c6r),g(TL,Et,null),e(xr,f6r),e(xr,yo),g(FL,yo,null),e(yo,m6r),e(yo,R2e),e(R2e,g6r),e(yo,h6r),e(yo,An),e(An,p6r),e(An,S2e),e(S2e,_6r),e(An,u6r),e(An,P2e),e(P2e,b6r),e(An,v6r),e(An,$2e),e($2e,T6r),e(An,F6r),e(yo,C6r),e(yo,I2e),e(I2e,aM),e(aM,N2e),e(N2e,M6r),e(aM,E6r),e(aM,dV),e(dV,y6r),e(aM,w6r),e(yo,A6r),e(yo,j2e),e(j2e,L6r),e(yo,B6r),g(CL,yo,null),b(c,ZRe,u),b(c,Hc,u),e(Hc,nM),e(nM,D2e),g(ML,D2e,null),e(Hc,x6r),e(Hc,q2e),e(q2e,k6r),b(c,eSe,u),b(c,kr,u),g(EL,kr,null),e(kr,R6r),e(kr,Uc),e(Uc,S6r),e(Uc,G2e),e(G2e,P6r),e(Uc,$6r),e(Uc,O2e),e(O2e,I6r),e(Uc,N6r),e(kr,j6r),e(kr,yL),e(yL,D6r),e(yL,X2e),e(X2e,q6r),e(yL,G6r),e(kr,O6r),e(kr,yt),g(wL,yt,null),e(yt,X6r),e(yt,V2e),e(V2e,V6r),e(yt,z6r),e(yt,Jc),e(Jc,W6r),e(Jc,z2e),e(z2e,Q6r),e(Jc,H6r),e(Jc,W2e),e(W2e,U6r),e(Jc,J6r),e(yt,Y6r),e(yt,Q2e),e(Q2e,K6r),e(yt,Z6r),g(AL,yt,null),e(kr,eTr),e(kr,wo),g(LL,wo,null),e(wo,oTr),e(wo,H2e),e(H2e,rTr),e(wo,tTr),e(wo,Ln),e(Ln,aTr),e(Ln,U2e),e(U2e,nTr),e(Ln,sTr),e(Ln,J2e),e(J2e,lTr),e(Ln,iTr),e(Ln,Y2e),e(Y2e,dTr),e(Ln,cTr),e(wo,fTr),e(wo,K2e),e(K2e,sM),e(sM,Z2e),e(Z2e,mTr),e(sM,gTr),e(sM,cV),e(cV,hTr),e(sM,pTr),e(wo,_Tr),e(wo,e1e),e(e1e,uTr),e(wo,bTr),g(BL,wo,null),b(c,oSe,u),b(c,Yc,u),e(Yc,lM),e(lM,o1e),g(xL,o1e,null),e(Yc,vTr),e(Yc,r1e),e(r1e,TTr),b(c,rSe,u),b(c,Rr,u),g(kL,Rr,null),e(Rr,FTr),e(Rr,Kc),e(Kc,CTr),e(Kc,t1e),e(t1e,MTr),e(Kc,ETr),e(Kc,a1e),e(a1e,yTr),e(Kc,wTr),e(Rr,ATr),e(Rr,RL),e(RL,LTr),e(RL,n1e),e(n1e,BTr),e(RL,xTr),e(Rr,kTr),e(Rr,wt),g(SL,wt,null),e(wt,RTr),e(wt,s1e),e(s1e,STr),e(wt,PTr),e(wt,Zc),e(Zc,$Tr),e(Zc,l1e),e(l1e,ITr),e(Zc,NTr),e(Zc,i1e),e(i1e,jTr),e(Zc,DTr),e(wt,qTr),e(wt,d1e),e(d1e,GTr),e(wt,OTr),g(PL,wt,null),e(Rr,XTr),e(Rr,Ao),g($L,Ao,null),e(Ao,VTr),e(Ao,c1e),e(c1e,zTr),e(Ao,WTr),e(Ao,Bn),e(Bn,QTr),e(Bn,f1e),e(f1e,HTr),e(Bn,UTr),e(Bn,m1e),e(m1e,JTr),e(Bn,YTr),e(Bn,g1e),e(g1e,KTr),e(Bn,ZTr),e(Ao,eFr),e(Ao,z),e(z,iM),e(iM,h1e),e(h1e,oFr),e(iM,rFr),e(iM,fV),e(fV,tFr),e(iM,aFr),e(z,nFr),e(z,dM),e(dM,p1e),e(p1e,sFr),e(dM,lFr),e(dM,mV),e(mV,iFr),e(dM,dFr),e(z,cFr),e(z,cM),e(cM,_1e),e(_1e,fFr),e(cM,mFr),e(cM,gV),e(gV,gFr),e(cM,hFr),e(z,pFr),e(z,fM),e(fM,u1e),e(u1e,_Fr),e(fM,uFr),e(fM,hV),e(hV,bFr),e(fM,vFr),e(z,TFr),e(z,mM),e(mM,b1e),e(b1e,FFr),e(mM,CFr),e(mM,pV),e(pV,MFr),e(mM,EFr),e(z,yFr),e(z,gM),e(gM,v1e),e(v1e,wFr),e(gM,AFr),e(gM,_V),e(_V,LFr),e(gM,BFr),e(z,xFr),e(z,hM),e(hM,T1e),e(T1e,kFr),e(hM,RFr),e(hM,uV),e(uV,SFr),e(hM,PFr),e(z,$Fr),e(z,pM),e(pM,F1e),e(F1e,IFr),e(pM,NFr),e(pM,bV),e(bV,jFr),e(pM,DFr),e(z,qFr),e(z,_M),e(_M,C1e),e(C1e,GFr),e(_M,OFr),e(_M,vV),e(vV,XFr),e(_M,VFr),e(z,zFr),e(z,uM),e(uM,M1e),e(M1e,WFr),e(uM,QFr),e(uM,TV),e(TV,HFr),e(uM,UFr),e(z,JFr),e(z,bM),e(bM,E1e),e(E1e,YFr),e(bM,KFr),e(bM,FV),e(FV,ZFr),e(bM,eCr),e(z,oCr),e(z,vM),e(vM,y1e),e(y1e,rCr),e(vM,tCr),e(vM,CV),e(CV,aCr),e(vM,nCr),e(z,sCr),e(z,TM),e(TM,w1e),e(w1e,lCr),e(TM,iCr),e(TM,MV),e(MV,dCr),e(TM,cCr),e(z,fCr),e(z,FM),e(FM,A1e),e(A1e,mCr),e(FM,gCr),e(FM,EV),e(EV,hCr),e(FM,pCr),e(z,_Cr),e(z,CM),e(CM,L1e),e(L1e,uCr),e(CM,bCr),e(CM,yV),e(yV,vCr),e(CM,TCr),e(z,FCr),e(z,MM),e(MM,B1e),e(B1e,CCr),e(MM,MCr),e(MM,wV),e(wV,ECr),e(MM,yCr),e(z,wCr),e(z,EM),e(EM,x1e),e(x1e,ACr),e(EM,LCr),e(EM,AV),e(AV,BCr),e(EM,xCr),e(z,kCr),e(z,yM),e(yM,k1e),e(k1e,RCr),e(yM,SCr),e(yM,LV),e(LV,PCr),e(yM,$Cr),e(z,ICr),e(z,wM),e(wM,R1e),e(R1e,NCr),e(wM,jCr),e(wM,BV),e(BV,DCr),e(wM,qCr),e(z,GCr),e(z,AM),e(AM,S1e),e(S1e,OCr),e(AM,XCr),e(AM,xV),e(xV,VCr),e(AM,zCr),e(z,WCr),e(z,LM),e(LM,P1e),e(P1e,QCr),e(LM,HCr),e(LM,kV),e(kV,UCr),e(LM,JCr),e(z,YCr),e(z,BM),e(BM,$1e),e($1e,KCr),e(BM,ZCr),e(BM,RV),e(RV,eMr),e(BM,oMr),e(z,rMr),e(z,xM),e(xM,I1e),e(I1e,tMr),e(xM,aMr),e(xM,SV),e(SV,nMr),e(xM,sMr),e(z,lMr),e(z,kM),e(kM,N1e),e(N1e,iMr),e(kM,dMr),e(kM,PV),e(PV,cMr),e(kM,fMr),e(z,mMr),e(z,RM),e(RM,j1e),e(j1e,gMr),e(RM,hMr),e(RM,$V),e($V,pMr),e(RM,_Mr),e(Ao,uMr),e(Ao,D1e),e(D1e,bMr),e(Ao,vMr),g(IL,Ao,null),b(c,tSe,u),b(c,ef,u),e(ef,SM),e(SM,q1e),g(NL,q1e,null),e(ef,TMr),e(ef,G1e),e(G1e,FMr),b(c,aSe,u),b(c,Sr,u),g(jL,Sr,null),e(Sr,CMr),e(Sr,of),e(of,MMr),e(of,O1e),e(O1e,EMr),e(of,yMr),e(of,X1e),e(X1e,wMr),e(of,AMr),e(Sr,LMr),e(Sr,DL),e(DL,BMr),e(DL,V1e),e(V1e,xMr),e(DL,kMr),e(Sr,RMr),e(Sr,At),g(qL,At,null),e(At,SMr),e(At,z1e),e(z1e,PMr),e(At,$Mr),e(At,rf),e(rf,IMr),e(rf,W1e),e(W1e,NMr),e(rf,jMr),e(rf,Q1e),e(Q1e,DMr),e(rf,qMr),e(At,GMr),e(At,H1e),e(H1e,OMr),e(At,XMr),g(GL,At,null),e(Sr,VMr),e(Sr,Lo),g(OL,Lo,null),e(Lo,zMr),e(Lo,U1e),e(U1e,WMr),e(Lo,QMr),e(Lo,xn),e(xn,HMr),e(xn,J1e),e(J1e,UMr),e(xn,JMr),e(xn,Y1e),e(Y1e,YMr),e(xn,KMr),e(xn,K1e),e(K1e,ZMr),e(xn,e4r),e(Lo,o4r),e(Lo,ca),e(ca,PM),e(PM,Z1e),e(Z1e,r4r),e(PM,t4r),e(PM,IV),e(IV,a4r),e(PM,n4r),e(ca,s4r),e(ca,$M),e($M,ebe),e(ebe,l4r),e($M,i4r),e($M,NV),e(NV,d4r),e($M,c4r),e(ca,f4r),e(ca,IM),e(IM,obe),e(obe,m4r),e(IM,g4r),e(IM,jV),e(jV,h4r),e(IM,p4r),e(ca,_4r),e(ca,NM),e(NM,rbe),e(rbe,u4r),e(NM,b4r),e(NM,DV),e(DV,v4r),e(NM,T4r),e(ca,F4r),e(ca,jM),e(jM,tbe),e(tbe,C4r),e(jM,M4r),e(jM,qV),e(qV,E4r),e(jM,y4r),e(Lo,w4r),e(Lo,abe),e(abe,A4r),e(Lo,L4r),g(XL,Lo,null),b(c,nSe,u),b(c,tf,u),e(tf,DM),e(DM,nbe),g(VL,nbe,null),e(tf,B4r),e(tf,sbe),e(sbe,x4r),b(c,sSe,u),b(c,Pr,u),g(zL,Pr,null),e(Pr,k4r),e(Pr,af),e(af,R4r),e(af,lbe),e(lbe,S4r),e(af,P4r),e(af,ibe),e(ibe,$4r),e(af,I4r),e(Pr,N4r),e(Pr,WL),e(WL,j4r),e(WL,dbe),e(dbe,D4r),e(WL,q4r),e(Pr,G4r),e(Pr,Lt),g(QL,Lt,null),e(Lt,O4r),e(Lt,cbe),e(cbe,X4r),e(Lt,V4r),e(Lt,nf),e(nf,z4r),e(nf,fbe),e(fbe,W4r),e(nf,Q4r),e(nf,mbe),e(mbe,H4r),e(nf,U4r),e(Lt,J4r),e(Lt,gbe),e(gbe,Y4r),e(Lt,K4r),g(HL,Lt,null),e(Pr,Z4r),e(Pr,Bo),g(UL,Bo,null),e(Bo,eEr),e(Bo,hbe),e(hbe,oEr),e(Bo,rEr),e(Bo,kn),e(kn,tEr),e(kn,pbe),e(pbe,aEr),e(kn,nEr),e(kn,_be),e(_be,sEr),e(kn,lEr),e(kn,ube),e(ube,iEr),e(kn,dEr),e(Bo,cEr),e(Bo,fe),e(fe,qM),e(qM,bbe),e(bbe,fEr),e(qM,mEr),e(qM,GV),e(GV,gEr),e(qM,hEr),e(fe,pEr),e(fe,GM),e(GM,vbe),e(vbe,_Er),e(GM,uEr),e(GM,OV),e(OV,bEr),e(GM,vEr),e(fe,TEr),e(fe,OM),e(OM,Tbe),e(Tbe,FEr),e(OM,CEr),e(OM,XV),e(XV,MEr),e(OM,EEr),e(fe,yEr),e(fe,XM),e(XM,Fbe),e(Fbe,wEr),e(XM,AEr),e(XM,VV),e(VV,LEr),e(XM,BEr),e(fe,xEr),e(fe,VM),e(VM,Cbe),e(Cbe,kEr),e(VM,REr),e(VM,zV),e(zV,SEr),e(VM,PEr),e(fe,$Er),e(fe,zM),e(zM,Mbe),e(Mbe,IEr),e(zM,NEr),e(zM,WV),e(WV,jEr),e(zM,DEr),e(fe,qEr),e(fe,WM),e(WM,Ebe),e(Ebe,GEr),e(WM,OEr),e(WM,QV),e(QV,XEr),e(WM,VEr),e(fe,zEr),e(fe,QM),e(QM,ybe),e(ybe,WEr),e(QM,QEr),e(QM,HV),e(HV,HEr),e(QM,UEr),e(fe,JEr),e(fe,HM),e(HM,wbe),e(wbe,YEr),e(HM,KEr),e(HM,UV),e(UV,ZEr),e(HM,e3r),e(fe,o3r),e(fe,UM),e(UM,Abe),e(Abe,r3r),e(UM,t3r),e(UM,JV),e(JV,a3r),e(UM,n3r),e(fe,s3r),e(fe,JM),e(JM,Lbe),e(Lbe,l3r),e(JM,i3r),e(JM,YV),e(YV,d3r),e(JM,c3r),e(fe,f3r),e(fe,YM),e(YM,Bbe),e(Bbe,m3r),e(YM,g3r),e(YM,KV),e(KV,h3r),e(YM,p3r),e(Bo,_3r),e(Bo,xbe),e(xbe,u3r),e(Bo,b3r),g(JL,Bo,null),b(c,lSe,u),b(c,sf,u),e(sf,KM),e(KM,kbe),g(YL,kbe,null),e(sf,v3r),e(sf,Rbe),e(Rbe,T3r),b(c,iSe,u),b(c,$r,u),g(KL,$r,null),e($r,F3r),e($r,lf),e(lf,C3r),e(lf,Sbe),e(Sbe,M3r),e(lf,E3r),e(lf,Pbe),e(Pbe,y3r),e(lf,w3r),e($r,A3r),e($r,ZL),e(ZL,L3r),e(ZL,$be),e($be,B3r),e(ZL,x3r),e($r,k3r),e($r,Bt),g(e7,Bt,null),e(Bt,R3r),e(Bt,Ibe),e(Ibe,S3r),e(Bt,P3r),e(Bt,df),e(df,$3r),e(df,Nbe),e(Nbe,I3r),e(df,N3r),e(df,jbe),e(jbe,j3r),e(df,D3r),e(Bt,q3r),e(Bt,Dbe),e(Dbe,G3r),e(Bt,O3r),g(o7,Bt,null),e($r,X3r),e($r,xo),g(r7,xo,null),e(xo,V3r),e(xo,qbe),e(qbe,z3r),e(xo,W3r),e(xo,Rn),e(Rn,Q3r),e(Rn,Gbe),e(Gbe,H3r),e(Rn,U3r),e(Rn,Obe),e(Obe,J3r),e(Rn,Y3r),e(Rn,Xbe),e(Xbe,K3r),e(Rn,Z3r),e(xo,eyr),e(xo,be),e(be,ZM),e(ZM,Vbe),e(Vbe,oyr),e(ZM,ryr),e(ZM,ZV),e(ZV,tyr),e(ZM,ayr),e(be,nyr),e(be,e4),e(e4,zbe),e(zbe,syr),e(e4,lyr),e(e4,ez),e(ez,iyr),e(e4,dyr),e(be,cyr),e(be,o4),e(o4,Wbe),e(Wbe,fyr),e(o4,myr),e(o4,oz),e(oz,gyr),e(o4,hyr),e(be,pyr),e(be,r4),e(r4,Qbe),e(Qbe,_yr),e(r4,uyr),e(r4,rz),e(rz,byr),e(r4,vyr),e(be,Tyr),e(be,t4),e(t4,Hbe),e(Hbe,Fyr),e(t4,Cyr),e(t4,tz),e(tz,Myr),e(t4,Eyr),e(be,yyr),e(be,a4),e(a4,Ube),e(Ube,wyr),e(a4,Ayr),e(a4,az),e(az,Lyr),e(a4,Byr),e(be,xyr),e(be,n4),e(n4,Jbe),e(Jbe,kyr),e(n4,Ryr),e(n4,nz),e(nz,Syr),e(n4,Pyr),e(be,$yr),e(be,s4),e(s4,Ybe),e(Ybe,Iyr),e(s4,Nyr),e(s4,sz),e(sz,jyr),e(s4,Dyr),e(be,qyr),e(be,l4),e(l4,Kbe),e(Kbe,Gyr),e(l4,Oyr),e(l4,lz),e(lz,Xyr),e(l4,Vyr),e(be,zyr),e(be,i4),e(i4,Zbe),e(Zbe,Wyr),e(i4,Qyr),e(i4,iz),e(iz,Hyr),e(i4,Uyr),e(xo,Jyr),e(xo,eve),e(eve,Yyr),e(xo,Kyr),g(t7,xo,null),b(c,dSe,u),b(c,cf,u),e(cf,d4),e(d4,ove),g(a7,ove,null),e(cf,Zyr),e(cf,rve),e(rve,ewr),b(c,cSe,u),b(c,Ir,u),g(n7,Ir,null),e(Ir,owr),e(Ir,ff),e(ff,rwr),e(ff,tve),e(tve,twr),e(ff,awr),e(ff,ave),e(ave,nwr),e(ff,swr),e(Ir,lwr),e(Ir,s7),e(s7,iwr),e(s7,nve),e(nve,dwr),e(s7,cwr),e(Ir,fwr),e(Ir,xt),g(l7,xt,null),e(xt,mwr),e(xt,sve),e(sve,gwr),e(xt,hwr),e(xt,mf),e(mf,pwr),e(mf,lve),e(lve,_wr),e(mf,uwr),e(mf,ive),e(ive,bwr),e(mf,vwr),e(xt,Twr),e(xt,dve),e(dve,Fwr),e(xt,Cwr),g(i7,xt,null),e(Ir,Mwr),e(Ir,ko),g(d7,ko,null),e(ko,Ewr),e(ko,cve),e(cve,ywr),e(ko,wwr),e(ko,Sn),e(Sn,Awr),e(Sn,fve),e(fve,Lwr),e(Sn,Bwr),e(Sn,mve),e(mve,xwr),e(Sn,kwr),e(Sn,gve),e(gve,Rwr),e(Sn,Swr),e(ko,Pwr),e(ko,Me),e(Me,c4),e(c4,hve),e(hve,$wr),e(c4,Iwr),e(c4,dz),e(dz,Nwr),e(c4,jwr),e(Me,Dwr),e(Me,f4),e(f4,pve),e(pve,qwr),e(f4,Gwr),e(f4,cz),e(cz,Owr),e(f4,Xwr),e(Me,Vwr),e(Me,m4),e(m4,_ve),e(_ve,zwr),e(m4,Wwr),e(m4,fz),e(fz,Qwr),e(m4,Hwr),e(Me,Uwr),e(Me,g4),e(g4,uve),e(uve,Jwr),e(g4,Ywr),e(g4,mz),e(mz,Kwr),e(g4,Zwr),e(Me,eAr),e(Me,h4),e(h4,bve),e(bve,oAr),e(h4,rAr),e(h4,gz),e(gz,tAr),e(h4,aAr),e(Me,nAr),e(Me,p4),e(p4,vve),e(vve,sAr),e(p4,lAr),e(p4,hz),e(hz,iAr),e(p4,dAr),e(Me,cAr),e(Me,_4),e(_4,Tve),e(Tve,fAr),e(_4,mAr),e(_4,pz),e(pz,gAr),e(_4,hAr),e(Me,pAr),e(Me,u4),e(u4,Fve),e(Fve,_Ar),e(u4,uAr),e(u4,_z),e(_z,bAr),e(u4,vAr),e(Me,TAr),e(Me,b4),e(b4,Cve),e(Cve,FAr),e(b4,CAr),e(b4,uz),e(uz,MAr),e(b4,EAr),e(ko,yAr),e(ko,Mve),e(Mve,wAr),e(ko,AAr),g(c7,ko,null),b(c,fSe,u),b(c,gf,u),e(gf,v4),e(v4,Eve),g(f7,Eve,null),e(gf,LAr),e(gf,yve),e(yve,BAr),b(c,mSe,u),b(c,Nr,u),g(m7,Nr,null),e(Nr,xAr),e(Nr,hf),e(hf,kAr),e(hf,wve),e(wve,RAr),e(hf,SAr),e(hf,Ave),e(Ave,PAr),e(hf,$Ar),e(Nr,IAr),e(Nr,g7),e(g7,NAr),e(g7,Lve),e(Lve,jAr),e(g7,DAr),e(Nr,qAr),e(Nr,kt),g(h7,kt,null),e(kt,GAr),e(kt,Bve),e(Bve,OAr),e(kt,XAr),e(kt,pf),e(pf,VAr),e(pf,xve),e(xve,zAr),e(pf,WAr),e(pf,kve),e(kve,QAr),e(pf,HAr),e(kt,UAr),e(kt,Rve),e(Rve,JAr),e(kt,YAr),g(p7,kt,null),e(Nr,KAr),e(Nr,Ro),g(_7,Ro,null),e(Ro,ZAr),e(Ro,Sve),e(Sve,e0r),e(Ro,o0r),e(Ro,Pn),e(Pn,r0r),e(Pn,Pve),e(Pve,t0r),e(Pn,a0r),e(Pn,$ve),e($ve,n0r),e(Pn,s0r),e(Pn,Ive),e(Ive,l0r),e(Pn,i0r),e(Ro,d0r),e(Ro,ve),e(ve,T4),e(T4,Nve),e(Nve,c0r),e(T4,f0r),e(T4,bz),e(bz,m0r),e(T4,g0r),e(ve,h0r),e(ve,F4),e(F4,jve),e(jve,p0r),e(F4,_0r),e(F4,vz),e(vz,u0r),e(F4,b0r),e(ve,v0r),e(ve,C4),e(C4,Dve),e(Dve,T0r),e(C4,F0r),e(C4,Tz),e(Tz,C0r),e(C4,M0r),e(ve,E0r),e(ve,M4),e(M4,qve),e(qve,y0r),e(M4,w0r),e(M4,Fz),e(Fz,A0r),e(M4,L0r),e(ve,B0r),e(ve,E4),e(E4,Gve),e(Gve,x0r),e(E4,k0r),e(E4,Cz),e(Cz,R0r),e(E4,S0r),e(ve,P0r),e(ve,y4),e(y4,Ove),e(Ove,$0r),e(y4,I0r),e(y4,Mz),e(Mz,N0r),e(y4,j0r),e(ve,D0r),e(ve,w4),e(w4,Xve),e(Xve,q0r),e(w4,G0r),e(w4,Ez),e(Ez,O0r),e(w4,X0r),e(ve,V0r),e(ve,A4),e(A4,Vve),e(Vve,z0r),e(A4,W0r),e(A4,yz),e(yz,Q0r),e(A4,H0r),e(ve,U0r),e(ve,L4),e(L4,zve),e(zve,J0r),e(L4,Y0r),e(L4,wz),e(wz,K0r),e(L4,Z0r),e(ve,eLr),e(ve,B4),e(B4,Wve),e(Wve,oLr),e(B4,rLr),e(B4,Az),e(Az,tLr),e(B4,aLr),e(Ro,nLr),e(Ro,Qve),e(Qve,sLr),e(Ro,lLr),g(u7,Ro,null),b(c,gSe,u),b(c,_f,u),e(_f,x4),e(x4,Hve),g(b7,Hve,null),e(_f,iLr),e(_f,Uve),e(Uve,dLr),b(c,hSe,u),b(c,jr,u),g(v7,jr,null),e(jr,cLr),e(jr,uf),e(uf,fLr),e(uf,Jve),e(Jve,mLr),e(uf,gLr),e(uf,Yve),e(Yve,hLr),e(uf,pLr),e(jr,_Lr),e(jr,T7),e(T7,uLr),e(T7,Kve),e(Kve,bLr),e(T7,vLr),e(jr,TLr),e(jr,Rt),g(F7,Rt,null),e(Rt,FLr),e(Rt,Zve),e(Zve,CLr),e(Rt,MLr),e(Rt,bf),e(bf,ELr),e(bf,e6e),e(e6e,yLr),e(bf,wLr),e(bf,o6e),e(o6e,ALr),e(bf,LLr),e(Rt,BLr),e(Rt,r6e),e(r6e,xLr),e(Rt,kLr),g(C7,Rt,null),e(jr,RLr),e(jr,So),g(M7,So,null),e(So,SLr),e(So,t6e),e(t6e,PLr),e(So,$Lr),e(So,$n),e($n,ILr),e($n,a6e),e(a6e,NLr),e($n,jLr),e($n,n6e),e(n6e,DLr),e($n,qLr),e($n,s6e),e(s6e,GLr),e($n,OLr),e(So,XLr),e(So,Te),e(Te,k4),e(k4,l6e),e(l6e,VLr),e(k4,zLr),e(k4,Lz),e(Lz,WLr),e(k4,QLr),e(Te,HLr),e(Te,R4),e(R4,i6e),e(i6e,ULr),e(R4,JLr),e(R4,Bz),e(Bz,YLr),e(R4,KLr),e(Te,ZLr),e(Te,S4),e(S4,d6e),e(d6e,e7r),e(S4,o7r),e(S4,xz),e(xz,r7r),e(S4,t7r),e(Te,a7r),e(Te,P4),e(P4,c6e),e(c6e,n7r),e(P4,s7r),e(P4,kz),e(kz,l7r),e(P4,i7r),e(Te,d7r),e(Te,$4),e($4,f6e),e(f6e,c7r),e($4,f7r),e($4,Rz),e(Rz,m7r),e($4,g7r),e(Te,h7r),e(Te,I4),e(I4,m6e),e(m6e,p7r),e(I4,_7r),e(I4,Sz),e(Sz,u7r),e(I4,b7r),e(Te,v7r),e(Te,N4),e(N4,g6e),e(g6e,T7r),e(N4,F7r),e(N4,Pz),e(Pz,C7r),e(N4,M7r),e(Te,E7r),e(Te,j4),e(j4,h6e),e(h6e,y7r),e(j4,w7r),e(j4,$z),e($z,A7r),e(j4,L7r),e(Te,B7r),e(Te,D4),e(D4,p6e),e(p6e,x7r),e(D4,k7r),e(D4,Iz),e(Iz,R7r),e(D4,S7r),e(Te,P7r),e(Te,q4),e(q4,_6e),e(_6e,$7r),e(q4,I7r),e(q4,Nz),e(Nz,N7r),e(q4,j7r),e(So,D7r),e(So,u6e),e(u6e,q7r),e(So,G7r),g(E7,So,null),b(c,pSe,u),b(c,vf,u),e(vf,G4),e(G4,b6e),g(y7,b6e,null),e(vf,O7r),e(vf,v6e),e(v6e,X7r),b(c,_Se,u),b(c,Dr,u),g(w7,Dr,null),e(Dr,V7r),e(Dr,Tf),e(Tf,z7r),e(Tf,T6e),e(T6e,W7r),e(Tf,Q7r),e(Tf,F6e),e(F6e,H7r),e(Tf,U7r),e(Dr,J7r),e(Dr,A7),e(A7,Y7r),e(A7,C6e),e(C6e,K7r),e(A7,Z7r),e(Dr,e8r),e(Dr,St),g(L7,St,null),e(St,o8r),e(St,M6e),e(M6e,r8r),e(St,t8r),e(St,Ff),e(Ff,a8r),e(Ff,E6e),e(E6e,n8r),e(Ff,s8r),e(Ff,y6e),e(y6e,l8r),e(Ff,i8r),e(St,d8r),e(St,w6e),e(w6e,c8r),e(St,f8r),g(B7,St,null),e(Dr,m8r),e(Dr,Po),g(x7,Po,null),e(Po,g8r),e(Po,A6e),e(A6e,h8r),e(Po,p8r),e(Po,In),e(In,_8r),e(In,L6e),e(L6e,u8r),e(In,b8r),e(In,B6e),e(B6e,v8r),e(In,T8r),e(In,x6e),e(x6e,F8r),e(In,C8r),e(Po,M8r),e(Po,Se),e(Se,O4),e(O4,k6e),e(k6e,E8r),e(O4,y8r),e(O4,jz),e(jz,w8r),e(O4,A8r),e(Se,L8r),e(Se,X4),e(X4,R6e),e(R6e,B8r),e(X4,x8r),e(X4,Dz),e(Dz,k8r),e(X4,R8r),e(Se,S8r),e(Se,V4),e(V4,S6e),e(S6e,P8r),e(V4,$8r),e(V4,qz),e(qz,I8r),e(V4,N8r),e(Se,j8r),e(Se,z4),e(z4,P6e),e(P6e,D8r),e(z4,q8r),e(z4,Gz),e(Gz,G8r),e(z4,O8r),e(Se,X8r),e(Se,W4),e(W4,$6e),e($6e,V8r),e(W4,z8r),e(W4,Oz),e(Oz,W8r),e(W4,Q8r),e(Se,H8r),e(Se,Q4),e(Q4,I6e),e(I6e,U8r),e(Q4,J8r),e(Q4,Xz),e(Xz,Y8r),e(Q4,K8r),e(Se,Z8r),e(Se,H4),e(H4,N6e),e(N6e,e9r),e(H4,o9r),e(H4,Vz),e(Vz,r9r),e(H4,t9r),e(Se,a9r),e(Se,U4),e(U4,j6e),e(j6e,n9r),e(U4,s9r),e(U4,zz),e(zz,l9r),e(U4,i9r),e(Po,d9r),e(Po,D6e),e(D6e,c9r),e(Po,f9r),g(k7,Po,null),b(c,uSe,u),b(c,Cf,u),e(Cf,J4),e(J4,q6e),g(R7,q6e,null),e(Cf,m9r),e(Cf,G6e),e(G6e,g9r),b(c,bSe,u),b(c,qr,u),g(S7,qr,null),e(qr,h9r),e(qr,Mf),e(Mf,p9r),e(Mf,O6e),e(O6e,_9r),e(Mf,u9r),e(Mf,X6e),e(X6e,b9r),e(Mf,v9r),e(qr,T9r),e(qr,P7),e(P7,F9r),e(P7,V6e),e(V6e,C9r),e(P7,M9r),e(qr,E9r),e(qr,Pt),g($7,Pt,null),e(Pt,y9r),e(Pt,z6e),e(z6e,w9r),e(Pt,A9r),e(Pt,Ef),e(Ef,L9r),e(Ef,W6e),e(W6e,B9r),e(Ef,x9r),e(Ef,Q6e),e(Q6e,k9r),e(Ef,R9r),e(Pt,S9r),e(Pt,H6e),e(H6e,P9r),e(Pt,$9r),g(I7,Pt,null),e(qr,I9r),e(qr,$o),g(N7,$o,null),e($o,N9r),e($o,U6e),e(U6e,j9r),e($o,D9r),e($o,Nn),e(Nn,q9r),e(Nn,J6e),e(J6e,G9r),e(Nn,O9r),e(Nn,Y6e),e(Y6e,X9r),e(Nn,V9r),e(Nn,K6e),e(K6e,z9r),e(Nn,W9r),e($o,Q9r),e($o,Pe),e(Pe,Y4),e(Y4,Z6e),e(Z6e,H9r),e(Y4,U9r),e(Y4,Wz),e(Wz,J9r),e(Y4,Y9r),e(Pe,K9r),e(Pe,K4),e(K4,eTe),e(eTe,Z9r),e(K4,eBr),e(K4,Qz),e(Qz,oBr),e(K4,rBr),e(Pe,tBr),e(Pe,Z4),e(Z4,oTe),e(oTe,aBr),e(Z4,nBr),e(Z4,Hz),e(Hz,sBr),e(Z4,lBr),e(Pe,iBr),e(Pe,eE),e(eE,rTe),e(rTe,dBr),e(eE,cBr),e(eE,Uz),e(Uz,fBr),e(eE,mBr),e(Pe,gBr),e(Pe,oE),e(oE,tTe),e(tTe,hBr),e(oE,pBr),e(oE,Jz),e(Jz,_Br),e(oE,uBr),e(Pe,bBr),e(Pe,rE),e(rE,aTe),e(aTe,vBr),e(rE,TBr),e(rE,Yz),e(Yz,FBr),e(rE,CBr),e(Pe,MBr),e(Pe,tE),e(tE,nTe),e(nTe,EBr),e(tE,yBr),e(tE,Kz),e(Kz,wBr),e(tE,ABr),e(Pe,LBr),e(Pe,aE),e(aE,sTe),e(sTe,BBr),e(aE,xBr),e(aE,Zz),e(Zz,kBr),e(aE,RBr),e($o,SBr),e($o,lTe),e(lTe,PBr),e($o,$Br),g(j7,$o,null),b(c,vSe,u),b(c,yf,u),e(yf,nE),e(nE,iTe),g(D7,iTe,null),e(yf,IBr),e(yf,dTe),e(dTe,NBr),b(c,TSe,u),b(c,Gr,u),g(q7,Gr,null),e(Gr,jBr),e(Gr,wf),e(wf,DBr),e(wf,cTe),e(cTe,qBr),e(wf,GBr),e(wf,fTe),e(fTe,OBr),e(wf,XBr),e(Gr,VBr),e(Gr,G7),e(G7,zBr),e(G7,mTe),e(mTe,WBr),e(G7,QBr),e(Gr,HBr),e(Gr,$t),g(O7,$t,null),e($t,UBr),e($t,gTe),e(gTe,JBr),e($t,YBr),e($t,Af),e(Af,KBr),e(Af,hTe),e(hTe,ZBr),e(Af,exr),e(Af,pTe),e(pTe,oxr),e(Af,rxr),e($t,txr),e($t,_Te),e(_Te,axr),e($t,nxr),g(X7,$t,null),e(Gr,sxr),e(Gr,Io),g(V7,Io,null),e(Io,lxr),e(Io,uTe),e(uTe,ixr),e(Io,dxr),e(Io,jn),e(jn,cxr),e(jn,bTe),e(bTe,fxr),e(jn,mxr),e(jn,vTe),e(vTe,gxr),e(jn,hxr),e(jn,TTe),e(TTe,pxr),e(jn,_xr),e(Io,uxr),e(Io,FTe),e(FTe,sE),e(sE,CTe),e(CTe,bxr),e(sE,vxr),e(sE,eW),e(eW,Txr),e(sE,Fxr),e(Io,Cxr),e(Io,MTe),e(MTe,Mxr),e(Io,Exr),g(z7,Io,null),b(c,FSe,u),b(c,Lf,u),e(Lf,lE),e(lE,ETe),g(W7,ETe,null),e(Lf,yxr),e(Lf,yTe),e(yTe,wxr),b(c,CSe,u),b(c,Or,u),g(Q7,Or,null),e(Or,Axr),e(Or,Bf),e(Bf,Lxr),e(Bf,wTe),e(wTe,Bxr),e(Bf,xxr),e(Bf,ATe),e(ATe,kxr),e(Bf,Rxr),e(Or,Sxr),e(Or,H7),e(H7,Pxr),e(H7,LTe),e(LTe,$xr),e(H7,Ixr),e(Or,Nxr),e(Or,It),g(U7,It,null),e(It,jxr),e(It,BTe),e(BTe,Dxr),e(It,qxr),e(It,xf),e(xf,Gxr),e(xf,xTe),e(xTe,Oxr),e(xf,Xxr),e(xf,kTe),e(kTe,Vxr),e(xf,zxr),e(It,Wxr),e(It,RTe),e(RTe,Qxr),e(It,Hxr),g(J7,It,null),e(Or,Uxr),e(Or,No),g(Y7,No,null),e(No,Jxr),e(No,STe),e(STe,Yxr),e(No,Kxr),e(No,Dn),e(Dn,Zxr),e(Dn,PTe),e(PTe,ekr),e(Dn,okr),e(Dn,$Te),e($Te,rkr),e(Dn,tkr),e(Dn,ITe),e(ITe,akr),e(Dn,nkr),e(No,skr),e(No,K7),e(K7,iE),e(iE,NTe),e(NTe,lkr),e(iE,ikr),e(iE,oW),e(oW,dkr),e(iE,ckr),e(K7,fkr),e(K7,dE),e(dE,jTe),e(jTe,mkr),e(dE,gkr),e(dE,rW),e(rW,hkr),e(dE,pkr),e(No,_kr),e(No,DTe),e(DTe,ukr),e(No,bkr),g(Z7,No,null),b(c,MSe,u),b(c,kf,u),e(kf,cE),e(cE,qTe),g(e8,qTe,null),e(kf,vkr),e(kf,GTe),e(GTe,Tkr),b(c,ESe,u),b(c,Xr,u),g(o8,Xr,null),e(Xr,Fkr),e(Xr,Rf),e(Rf,Ckr),e(Rf,OTe),e(OTe,Mkr),e(Rf,Ekr),e(Rf,XTe),e(XTe,ykr),e(Rf,wkr),e(Xr,Akr),e(Xr,r8),e(r8,Lkr),e(r8,VTe),e(VTe,Bkr),e(r8,xkr),e(Xr,kkr),e(Xr,Nt),g(t8,Nt,null),e(Nt,Rkr),e(Nt,zTe),e(zTe,Skr),e(Nt,Pkr),e(Nt,Sf),e(Sf,$kr),e(Sf,WTe),e(WTe,Ikr),e(Sf,Nkr),e(Sf,QTe),e(QTe,jkr),e(Sf,Dkr),e(Nt,qkr),e(Nt,HTe),e(HTe,Gkr),e(Nt,Okr),g(a8,Nt,null),e(Xr,Xkr),e(Xr,jo),g(n8,jo,null),e(jo,Vkr),e(jo,UTe),e(UTe,zkr),e(jo,Wkr),e(jo,qn),e(qn,Qkr),e(qn,JTe),e(JTe,Hkr),e(qn,Ukr),e(qn,YTe),e(YTe,Jkr),e(qn,Ykr),e(qn,KTe),e(KTe,Kkr),e(qn,Zkr),e(jo,eRr),e(jo,ZTe),e(ZTe,fE),e(fE,eFe),e(eFe,oRr),e(fE,rRr),e(fE,tW),e(tW,tRr),e(fE,aRr),e(jo,nRr),e(jo,oFe),e(oFe,sRr),e(jo,lRr),g(s8,jo,null),ySe=!0},p(c,[u]){const l8={};u&2&&(l8.$$scope={dirty:u,ctx:c}),Gf.$set(l8);const rFe={};u&2&&(rFe.$$scope={dirty:u,ctx:c}),xh.$set(rFe);const tFe={};u&2&&(tFe.$$scope={dirty:u,ctx:c}),Gh.$set(tFe)},i(c){ySe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(Gf.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(R3.$$.fragment,c),h($3.$$.fragment,c),h(xh.$$.fragment,c),h(I3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(O3.$$.fragment,c),h(Gh.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(qA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(b7.$$.fragment,c),h(v7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(y7.$$.fragment,c),h(w7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(R7.$$.fragment,c),h(S7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(N7.$$.fragment,c),h(j7.$$.fragment,c),h(D7.$$.fragment,c),h(q7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),h(W7.$$.fragment,c),h(Q7.$$.fragment,c),h(U7.$$.fragment,c),h(J7.$$.fragment,c),h(Y7.$$.fragment,c),h(Z7.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),ySe=!0)},o(c){p(me.$$.fragment,c),p(qa.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(Gf.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(F3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(B3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(R3.$$.fragment,c),p($3.$$.fragment,c),p(xh.$$.fragment,c),p(I3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(O3.$$.fragment,c),p(Gh.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(qA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(b7.$$.fragment,c),p(v7.$$.fragment,c),p(F7.$$.fragment,c),p(C7.$$.fragment,c),p(M7.$$.fragment,c),p(E7.$$.fragment,c),p(y7.$$.fragment,c),p(w7.$$.fragment,c),p(L7.$$.fragment,c),p(B7.$$.fragment,c),p(x7.$$.fragment,c),p(k7.$$.fragment,c),p(R7.$$.fragment,c),p(S7.$$.fragment,c),p($7.$$.fragment,c),p(I7.$$.fragment,c),p(N7.$$.fragment,c),p(j7.$$.fragment,c),p(D7.$$.fragment,c),p(q7.$$.fragment,c),p(O7.$$.fragment,c),p(X7.$$.fragment,c),p(V7.$$.fragment,c),p(z7.$$.fragment,c),p(W7.$$.fragment,c),p(Q7.$$.fragment,c),p(U7.$$.fragment,c),p(J7.$$.fragment,c),p(Y7.$$.fragment,c),p(Z7.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),ySe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(Eke),c&&t(Xi),_(p3),c&&t(yke),c&&t(zn),c&&t(wke),_(_3,c),c&&t(Ake),c&&t(d9),c&&t(Lke),_(Gf,c),c&&t(Bke),c&&t(Vi),_(u3),c&&t(xke),c&&t(Wo),_(b3),_(F3),_(C3),_(M3),c&&t(kke),c&&t(Wi),_(E3),c&&t(Rke),c&&t(Qo),_(y3),_(L3),_(B3),_(x3),c&&t(Ske),c&&t(Qi),_(k3),c&&t(Pke),c&&t(Ho),_(R3),_($3),_(xh),_(I3),_(N3),c&&t($ke),c&&t(Hi),_(j3),c&&t(Ike),c&&t(Uo),_(D3),_(O3),_(Gh),_(X3),_(V3),c&&t(Nke),c&&t(Ji),_(z3),c&&t(jke),c&&t(Jo),_(W3),_(H3),_(U3),_(J3),_(Y3),c&&t(Dke),c&&t(Zi),_(K3),c&&t(qke),c&&t(Yo),_(Z3),_(oy),_(ry),_(ty),_(ay),c&&t(Gke),c&&t(rd),_(ny),c&&t(Oke),c&&t(Ko),_(sy),_(iy),_(dy),_(cy),_(fy),c&&t(Xke),c&&t(nd),_(my),c&&t(Vke),c&&t(Zo),_(gy),_(py),_(_y),_(uy),_(by),c&&t(zke),c&&t(id),_(vy),c&&t(Wke),c&&t(er),_(Ty),_(Cy),_(My),_(Ey),_(yy),c&&t(Qke),c&&t(fd),_(wy),c&&t(Hke),c&&t(or),_(Ay),_(By),_(xy),_(ky),_(Ry),c&&t(Uke),c&&t(hd),_(Sy),c&&t(Jke),c&&t(rr),_(Py),_(Iy),_(Ny),_(jy),_(Dy),c&&t(Yke),c&&t(ud),_(qy),c&&t(Kke),c&&t(tr),_(Gy),_(Xy),_(Vy),_(zy),_(Wy),c&&t(Zke),c&&t(Td),_(Qy),c&&t(eRe),c&&t(ar),_(Hy),_(Jy),_(Yy),_(Ky),_(Zy),c&&t(oRe),c&&t(Md),_(ew),c&&t(rRe),c&&t(nr),_(ow),_(tw),_(aw),_(nw),_(sw),c&&t(tRe),c&&t(wd),_(lw),c&&t(aRe),c&&t(sr),_(iw),_(cw),_(fw),_(mw),_(gw),c&&t(nRe),c&&t(Bd),_(hw),c&&t(sRe),c&&t(lr),_(pw),_(uw),_(bw),_(vw),_(Tw),c&&t(lRe),c&&t(Rd),_(Fw),c&&t(iRe),c&&t(ir),_(Cw),_(Ew),_(yw),_(ww),_(Aw),c&&t(dRe),c&&t($d),_(Lw),c&&t(cRe),c&&t(dr),_(Bw),_(kw),_(Rw),_(Sw),_(Pw),c&&t(fRe),c&&t(jd),_($w),c&&t(mRe),c&&t(cr),_(Iw),_(jw),_(Dw),_(qw),_(Gw),c&&t(gRe),c&&t(Gd),_(Ow),c&&t(hRe),c&&t(fr),_(Xw),_(zw),_(Ww),_(Qw),_(Hw),c&&t(pRe),c&&t(Vd),_(Uw),c&&t(_Re),c&&t(mr),_(Jw),_(Kw),_(Zw),_(eA),_(rA),c&&t(uRe),c&&t(Qd),_(tA),c&&t(bRe),c&&t(gr),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(vRe),c&&t(Jd),_(cA),c&&t(TRe),c&&t(hr),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(FRe),c&&t(ec),_(uA),c&&t(CRe),c&&t(pr),_(bA),_(TA),_(FA),_(CA),_(MA),c&&t(MRe),c&&t(tc),_(EA),c&&t(ERe),c&&t(_r),_(yA),_(AA),_(LA),_(BA),_(xA),c&&t(yRe),c&&t(sc),_(kA),c&&t(wRe),c&&t(ur),_(RA),_(PA),_($A),_(IA),_(jA),c&&t(ARe),c&&t(dc),_(DA),c&&t(LRe),c&&t(br),_(qA),_(OA),_(XA),_(VA),_(zA),c&&t(BRe),c&&t(mc),_(WA),c&&t(xRe),c&&t(vr),_(QA),_(UA),_(JA),_(YA),_(KA),c&&t(kRe),c&&t(pc),_(ZA),c&&t(RRe),c&&t(Tr),_(e0),_(r0),_(t0),_(a0),_(n0),c&&t(SRe),c&&t(bc),_(s0),c&&t(PRe),c&&t(Fr),_(l0),_(d0),_(c0),_(f0),_(m0),c&&t($Re),c&&t(Fc),_(g0),c&&t(IRe),c&&t(Cr),_(h0),_(_0),_(u0),_(b0),_(T0),c&&t(NRe),c&&t(Ec),_(F0),c&&t(jRe),c&&t(Mr),_(C0),_(E0),_(y0),_(w0),_(A0),c&&t(DRe),c&&t(Ac),_(L0),c&&t(qRe),c&&t(Er),_(B0),_(k0),_(R0),_(S0),_(P0),c&&t(GRe),c&&t(xc),_($0),c&&t(ORe),c&&t(yr),_(I0),_(j0),_(D0),_(q0),_(G0),c&&t(XRe),c&&t(Sc),_(O0),c&&t(VRe),c&&t(wr),_(X0),_(z0),_(W0),_(Q0),_(H0),c&&t(zRe),c&&t(Ic),_(U0),c&&t(WRe),c&&t(Ar),_(J0),_(K0),_(Z0),_(eL),_(oL),c&&t(QRe),c&&t(Dc),_(rL),c&&t(HRe),c&&t(Lr),_(tL),_(nL),_(sL),_(lL),_(iL),c&&t(URe),c&&t(Oc),_(dL),c&&t(JRe),c&&t(Br),_(cL),_(mL),_(gL),_(hL),_(pL),c&&t(YRe),c&&t(zc),_(_L),c&&t(KRe),c&&t(xr),_(uL),_(vL),_(TL),_(FL),_(CL),c&&t(ZRe),c&&t(Hc),_(ML),c&&t(eSe),c&&t(kr),_(EL),_(wL),_(AL),_(LL),_(BL),c&&t(oSe),c&&t(Yc),_(xL),c&&t(rSe),c&&t(Rr),_(kL),_(SL),_(PL),_($L),_(IL),c&&t(tSe),c&&t(ef),_(NL),c&&t(aSe),c&&t(Sr),_(jL),_(qL),_(GL),_(OL),_(XL),c&&t(nSe),c&&t(tf),_(VL),c&&t(sSe),c&&t(Pr),_(zL),_(QL),_(HL),_(UL),_(JL),c&&t(lSe),c&&t(sf),_(YL),c&&t(iSe),c&&t($r),_(KL),_(e7),_(o7),_(r7),_(t7),c&&t(dSe),c&&t(cf),_(a7),c&&t(cSe),c&&t(Ir),_(n7),_(l7),_(i7),_(d7),_(c7),c&&t(fSe),c&&t(gf),_(f7),c&&t(mSe),c&&t(Nr),_(m7),_(h7),_(p7),_(_7),_(u7),c&&t(gSe),c&&t(_f),_(b7),c&&t(hSe),c&&t(jr),_(v7),_(F7),_(C7),_(M7),_(E7),c&&t(pSe),c&&t(vf),_(y7),c&&t(_Se),c&&t(Dr),_(w7),_(L7),_(B7),_(x7),_(k7),c&&t(uSe),c&&t(Cf),_(R7),c&&t(bSe),c&&t(qr),_(S7),_($7),_(I7),_(N7),_(j7),c&&t(vSe),c&&t(yf),_(D7),c&&t(TSe),c&&t(Gr),_(q7),_(O7),_(X7),_(V7),_(z7),c&&t(FSe),c&&t(Lf),_(W7),c&&t(CSe),c&&t(Or),_(Q7),_(U7),_(J7),_(Y7),_(Z7),c&&t(MSe),c&&t(kf),_(e8),c&&t(ESe),c&&t(Xr),_(o8),_(t8),_(a8),_(n8),_(s8)}}}const w4t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function A4t($f){return F4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class S4t extends u4t{constructor(Z){super();b4t(this,Z,A4t,y4t,v4t,{})}}export{S4t as default,w4t as metadata};
