import{S as Gs,i as Rs,s as Xs,e as a,k as d,w as b,t as r,M as Bs,c as s,d as o,m as c,a as i,x as A,h as n,b as l,N as Ys,F as e,g as p,y,q as $,o as k,B as V}from"../../chunks/vendor-6b77c823.js";import{T as oo}from"../../chunks/Tip-39098574.js";import{D as ye}from"../../chunks/Docstring-abef54e3.js";import{C as Fo}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Vt}from"../../chunks/IconCopyLink-7a11ce68.js";function Js(I){let h,E,f,u,v;return{c(){h=a("p"),E=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=a("code"),u=r("Module"),v=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){h=s(_,"P",{});var T=i(h);E=n(T,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=s(T,"CODE",{});var M=i(f);u=n(M,"Module"),M.forEach(o),v=n(T,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),T.forEach(o)},m(_,T){p(_,h,T),e(h,E),e(h,f),e(f,u),e(h,v)},d(_){_&&o(h)}}}function Qs(I){let h,E,f,u,v;return{c(){h=a("p"),E=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=a("code"),u=r("Module"),v=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){h=s(_,"P",{});var T=i(h);E=n(T,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=s(T,"CODE",{});var M=i(f);u=n(M,"Module"),M.forEach(o),v=n(T,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),T.forEach(o)},m(_,T){p(_,h,T),e(h,E),e(h,f),e(f,u),e(h,v)},d(_){_&&o(h)}}}function Zs(I){let h,E,f,u,v,_,T,M,Y,S,w,C,P,D,J,j,Q,R;return{c(){h=a("p"),E=r("TF 2.0 models accepts two formats as inputs:"),f=d(),u=a("ul"),v=a("li"),_=r("having all inputs as keyword arguments (like PyTorch models), or"),T=d(),M=a("li"),Y=r("having all inputs as a list, tuple or dict in the first positional arguments."),S=d(),w=a("p"),C=r("This second option is useful when using "),P=a("code"),D=r("tf.keras.Model.fit"),J=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),j=a("code"),Q=r("model(inputs)"),R=r(".")},l(g){h=s(g,"P",{});var F=i(h);E=n(F,"TF 2.0 models accepts two formats as inputs:"),F.forEach(o),f=c(g),u=s(g,"UL",{});var q=i(u);v=s(q,"LI",{});var de=i(v);_=n(de,"having all inputs as keyword arguments (like PyTorch models), or"),de.forEach(o),T=c(q),M=s(q,"LI",{});var ce=i(M);Y=n(ce,"having all inputs as a list, tuple or dict in the first positional arguments."),ce.forEach(o),q.forEach(o),S=c(g),w=s(g,"P",{});var x=i(w);C=n(x,"This second option is useful when using "),P=s(x,"CODE",{});var X=i(P);D=n(X,"tf.keras.Model.fit"),X.forEach(o),J=n(x,` method which currently requires having all the
tensors in the first argument of the model call function: `),j=s(x,"CODE",{});var he=i(j);Q=n(he,"model(inputs)"),he.forEach(o),R=n(x,"."),x.forEach(o)},m(g,F){p(g,h,F),e(h,E),p(g,f,F),p(g,u,F),e(u,v),e(v,_),e(u,T),e(u,M),e(M,Y),p(g,S,F),p(g,w,F),e(w,C),e(w,P),e(P,D),e(w,J),e(w,j),e(j,Q),e(w,R)},d(g){g&&o(h),g&&o(f),g&&o(u),g&&o(S),g&&o(w)}}}function ei(I){let h,E,f,u,v;return{c(){h=a("p"),E=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=a("code"),u=r("Module"),v=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){h=s(_,"P",{});var T=i(h);E=n(T,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=s(T,"CODE",{});var M=i(f);u=n(M,"Module"),M.forEach(o),v=n(T,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),T.forEach(o)},m(_,T){p(_,h,T),e(h,E),e(h,f),e(f,u),e(h,v)},d(_){_&&o(h)}}}function ti(I){let h,E,f,u,v,_,T,M,Y,S,w,C,P,D,J,j,Q,R;return{c(){h=a("p"),E=r("TF 2.0 models accepts two formats as inputs:"),f=d(),u=a("ul"),v=a("li"),_=r("having all inputs as keyword arguments (like PyTorch models), or"),T=d(),M=a("li"),Y=r("having all inputs as a list, tuple or dict in the first positional arguments."),S=d(),w=a("p"),C=r("This second option is useful when using "),P=a("code"),D=r("tf.keras.Model.fit"),J=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),j=a("code"),Q=r("model(inputs)"),R=r(".")},l(g){h=s(g,"P",{});var F=i(h);E=n(F,"TF 2.0 models accepts two formats as inputs:"),F.forEach(o),f=c(g),u=s(g,"UL",{});var q=i(u);v=s(q,"LI",{});var de=i(v);_=n(de,"having all inputs as keyword arguments (like PyTorch models), or"),de.forEach(o),T=c(q),M=s(q,"LI",{});var ce=i(M);Y=n(ce,"having all inputs as a list, tuple or dict in the first positional arguments."),ce.forEach(o),q.forEach(o),S=c(g),w=s(g,"P",{});var x=i(w);C=n(x,"This second option is useful when using "),P=s(x,"CODE",{});var X=i(P);D=n(X,"tf.keras.Model.fit"),X.forEach(o),J=n(x,` method which currently requires having all the
tensors in the first argument of the model call function: `),j=s(x,"CODE",{});var he=i(j);Q=n(he,"model(inputs)"),he.forEach(o),R=n(x,"."),x.forEach(o)},m(g,F){p(g,h,F),e(h,E),p(g,f,F),p(g,u,F),e(u,v),e(v,_),e(u,T),e(u,M),e(M,Y),p(g,S,F),p(g,w,F),e(w,C),e(w,P),e(P,D),e(w,J),e(w,j),e(j,Q),e(w,R)},d(g){g&&o(h),g&&o(f),g&&o(u),g&&o(S),g&&o(w)}}}function oi(I){let h,E,f,u,v;return{c(){h=a("p"),E=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=a("code"),u=r("Module"),v=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){h=s(_,"P",{});var T=i(h);E=n(T,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=s(T,"CODE",{});var M=i(f);u=n(M,"Module"),M.forEach(o),v=n(T,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),T.forEach(o)},m(_,T){p(_,h,T),e(h,E),e(h,f),e(f,u),e(h,v)},d(_){_&&o(h)}}}function ri(I){let h,E,f,u,v,_,T,M,Y,S,w,C,P,D,J,j,Q,R,g,F,q,de,ce,x,X,he,xo,Ft,ro,cr,Po,xt,hr,jo,z,Oe,mr,Pt,pr,fr,ur,me,gr,jt,_r,Tr,Le,vr,wr,Er,pe,Mr,qt,br,Ar,Se,yr,$r,kr,Ke,Vr,Ct,Fr,xr,Pr,Ue,jr,zt,qr,Cr,zr,no,Ir,qo,$e,La,Co,We,Dr,It,Nr,zo,K,Or,He,Lr,Sr,Ge,Kr,Ur,Re,Wr,Hr,Xe,Gr,Rr,Io,ke,Xr,Be,Br,Yr,Do,fe,Ve,ao,Ye,Jr,so,Qr,No,N,Je,Zr,ue,en,Dt,tn,on,Qe,rn,nn,an,ge,sn,Nt,ln,dn,Ot,cn,hn,mn,io,pn,fn,Ze,Oo,_e,Fe,lo,et,un,co,gn,Lo,Z,tt,_n,ot,Tn,rt,vn,wn,En,U,nt,Mn,Te,bn,Lt,An,yn,ho,$n,kn,Vn,xe,Fn,mo,xn,Pn,at,So,ve,Pe,po,st,jn,fo,qn,Ko,ee,it,Cn,lt,zn,dt,In,Dn,Nn,W,ct,On,we,Ln,St,Sn,Kn,uo,Un,Wn,Hn,je,Gn,go,Rn,Xn,ht,Uo,Ee,qe,_o,mt,Bn,To,Yn,Wo,O,pt,Jn,ft,Qn,Kt,Zn,ea,ta,ut,oa,gt,ra,na,aa,Ce,sa,H,_t,ia,Me,la,Ut,da,ca,vo,ha,ma,pa,ze,fa,wo,ua,ga,Tt,Ho,be,Ie,Eo,vt,_a,Mo,Ta,Go,L,wt,va,Et,wa,Wt,Ea,Ma,ba,Mt,Aa,bt,ya,$a,ka,De,Va,G,At,Fa,Ae,xa,Ht,Pa,ja,bo,qa,Ca,za,Ne,Ia,Ao,Da,Na,yt,Ro;return _=new Vt({}),D=new Vt({}),Ye=new Vt({}),Je=new ye({props:{name:"class transformers.ViTMAEConfig",anchor:"transformers.ViTMAEConfig",parameters:[{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"image_size",val:" = 224"},{name:"patch_size",val:" = 16"},{name:"num_channels",val:" = 3"},{name:"qkv_bias",val:" = True"},{name:"decoder_num_attention_heads",val:" = 16"},{name:"decoder_hidden_size",val:" = 512"},{name:"decoder_num_hidden_layers",val:" = 8"},{name:"decoder_intermediate_size",val:" = 2048"},{name:"mask_ratio",val:" = 0.75"},{name:"norm_pix_loss",val:" = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/configuration_vit_mae.py#L29",parametersDescription:[{anchor:"transformers.ViTMAEConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.ViTMAEConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.ViTMAEConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.ViTMAEConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.ViTMAEConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ViTMAEConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.ViTMAEConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.ViTMAEConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ViTMAEConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ViTMAEConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.ViTMAEConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.ViTMAEConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ViTMAEConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.ViTMAEConfig.decoder_num_attention_heads",description:`<strong>decoder_num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the decoder.`,name:"decoder_num_attention_heads"},{anchor:"transformers.ViTMAEConfig.decoder_hidden_size",description:`<strong>decoder_hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimensionality of the decoder.`,name:"decoder_hidden_size"},{anchor:"transformers.ViTMAEConfig.decoder_num_hidden_layers",description:`<strong>decoder_num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of hidden layers in the decoder.`,name:"decoder_num_hidden_layers"},{anchor:"transformers.ViTMAEConfig.decoder_intermediate_size",description:`<strong>decoder_intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the decoder.`,name:"decoder_intermediate_size"},{anchor:"transformers.ViTMAEConfig.mask_ratio",description:`<strong>mask_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.75) &#x2014;
The ratio of the number of masked tokens in the input sequence.`,name:"mask_ratio"},{anchor:"transformers.ViTMAEConfig.norm_pix_loss",description:`<strong>norm_pix_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to train with normalized pixels (see Table 3 in the paper). Using normalized pixels improved
representation quality in the experiments of the authors.`,name:"norm_pix_loss"}]}}),Ze=new Fo({props:{code:`from transformers import ViTMAEModel, ViTMAEConfig

# Initializing a ViT MAE vit-mae-base style configuration
configuration = ViTMAEConfig()

# Initializing a model from the vit-mae-base style configuration
model = ViTMAEModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTMAEModel, ViTMAEConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ViT MAE vit-mae-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ViTMAEConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the vit-mae-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),et=new Vt({}),tt=new ye({props:{name:"class transformers.ViTMAEModel",anchor:"transformers.ViTMAEModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/modeling_vit_mae.py#L645",parametersDescription:[{anchor:"transformers.ViTMAEModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),nt=new ye({props:{name:"forward",anchor:"transformers.ViTMAEModel.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"noise",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/modeling_vit_mae.py#L669",parametersDescription:[{anchor:"transformers.ViTMAEModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ViTMAEModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ViTMAEModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ViTMAEModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ViTMAEModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16255/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEModelOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig"
>ViTMAEConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor indicating which patches are masked (1) and which are not (0).</li>
<li><strong>ids_restore</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor containing the original index of the (shuffled) masked patches.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEModelOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),xe=new oo({props:{$$slots:{default:[Js]},$$scope:{ctx:I}}}),at=new Fo({props:{code:`from transformers import AutoFeatureExtractor, ViTMAEModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/vit-mae-base")
model = ViTMAEModel.from_pretrained("facebook/vit-mae-base")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ViTMAEModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEModel.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),st=new Vt({}),it=new ye({props:{name:"class transformers.ViTMAEForPreTraining",anchor:"transformers.ViTMAEForPreTraining",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/modeling_vit_mae.py#L848",parametersDescription:[{anchor:"transformers.ViTMAEForPreTraining.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ct=new ye({props:{name:"forward",anchor:"transformers.ViTMAEForPreTraining.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"noise",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/modeling_vit_mae.py#L912",parametersDescription:[{anchor:"transformers.ViTMAEForPreTraining.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ViTMAEForPreTraining.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ViTMAEForPreTraining.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ViTMAEForPreTraining.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ViTMAEForPreTraining.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16255/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEForPreTrainingOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig"
>ViTMAEConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>) \u2014 Pixel reconstruction loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, patch_size ** 2 * num_channels)</code>) \u2014 Pixel reconstruction logits.</li>
<li><strong>mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor indicating which patches are masked (1) and which are not (0).</li>
<li><strong>ids_restore</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor containing the original index of the (shuffled) masked patches.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEForPreTrainingOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),je=new oo({props:{$$slots:{default:[Qs]},$$scope:{ctx:I}}}),ht=new Fo({props:{code:`from transformers import AutoFeatureExtractor, ViTMAEForPreTraining
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/vit-mae-base")
model = ViTMAEForPreTraining.from_pretrained("facebook/vit-mae-base")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
loss = outputs.loss
mask = outputs.mask
ids_restore = outputs.ids_restore`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ViTMAEForPreTraining
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEForPreTraining.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = outputs.mask
<span class="hljs-meta">&gt;&gt;&gt; </span>ids_restore = outputs.ids_restore`}}),mt=new Vt({}),pt=new ye({props:{name:"class transformers.TFViTMAEModel",anchor:"transformers.TFViTMAEModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/modeling_tf_vit_mae.py#L834",parametersDescription:[{anchor:"transformers.TFViTMAEModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ce=new oo({props:{$$slots:{default:[Zs]},$$scope:{ctx:I}}}),_t=new ye({props:{name:"call",anchor:"transformers.TFViTMAEModel.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"noise",val:": Tensor = None"},{name:"head_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/modeling_tf_vit_mae.py#L843",parametersDescription:[{anchor:"transformers.TFViTMAEModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.TFViTMAEModel.call.head_mask",description:`<strong>head_mask</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.TFViTMAEModel.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFViTMAEModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFViTMAEModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16255/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used
in eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFViTMAEModel.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],returnDescription:`
<p>A <code>transformers.models.vit_mae.modeling_tf_vit_mae.TFViTMAEModelOutput</code>or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig"
>ViTMAEConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>mask</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor indicating which patches are masked (1) and which are not (0).</li>
<li><strong>ids_restore</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor containing the original index of the (shuffled) masked patches.</li>
<li><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer plus
the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.vit_mae.modeling_tf_vit_mae.TFViTMAEModelOutput</code>or <code>tuple(tf.Tensor)</code></p>
`}}),ze=new oo({props:{$$slots:{default:[ei]},$$scope:{ctx:I}}}),Tt=new Fo({props:{code:`from transformers import AutoFeatureExtractor, TFViTMAEModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/vit-mae-base")
model = TFViTMAEModel.from_pretrained("facebook/vit-mae-base")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, TFViTMAEModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFViTMAEModel.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),vt=new Vt({}),wt=new ye({props:{name:"class transformers.TFViTMAEForPreTraining",anchor:"transformers.TFViTMAEForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/modeling_tf_vit_mae.py#L998",parametersDescription:[{anchor:"transformers.TFViTMAEForPreTraining.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16255/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),De=new oo({props:{$$slots:{default:[ti]},$$scope:{ctx:I}}}),At=new ye({props:{name:"call",anchor:"transformers.TFViTMAEForPreTraining.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"noise",val:": Tensor = None"},{name:"head_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16255/src/transformers/models/vit_mae/modeling_tf_vit_mae.py#L1058",parametersDescription:[{anchor:"transformers.TFViTMAEForPreTraining.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16255/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.TFViTMAEForPreTraining.call.head_mask",description:`<strong>head_mask</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.TFViTMAEForPreTraining.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFViTMAEForPreTraining.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFViTMAEForPreTraining.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16255/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used
in eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFViTMAEForPreTraining.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],returnDescription:`
<p>A <code>transformers.models.vit_mae.modeling_tf_vit_mae.TFViTMAEForPreTrainingOutput</code>or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEConfig"
>ViTMAEConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>) \u2014 Pixel reconstruction loss.</li>
<li><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, patch_size ** 2 * num_channels)</code>) \u2014 Pixel reconstruction logits.</li>
<li><strong>mask</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor indicating which patches are masked (1) and which are not (0).</li>
<li><strong>ids_restore</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor containing the original index of the (shuffled) masked patches.</li>
<li><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer plus
the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.vit_mae.modeling_tf_vit_mae.TFViTMAEForPreTrainingOutput</code>or <code>tuple(tf.Tensor)</code></p>
`}}),Ne=new oo({props:{$$slots:{default:[oi]},$$scope:{ctx:I}}}),yt=new Fo({props:{code:`from transformers import AutoFeatureExtractor, TFViTMAEForPreTraining
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/vit-mae-base")
model = TFViTMAEForPreTraining.from_pretrained("facebook/vit-mae-base")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
loss = outputs.loss
mask = outputs.mask
ids_restore = outputs.ids_restore`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, TFViTMAEForPreTraining
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFViTMAEForPreTraining.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = outputs.mask
<span class="hljs-meta">&gt;&gt;&gt; </span>ids_restore = outputs.ids_restore`}}),{c(){h=a("meta"),E=d(),f=a("h1"),u=a("a"),v=a("span"),b(_.$$.fragment),T=d(),M=a("span"),Y=r("ViTMAE"),S=d(),w=a("h2"),C=a("a"),P=a("span"),b(D.$$.fragment),J=d(),j=a("span"),Q=r("Overview"),R=d(),g=a("p"),F=r("The ViTMAE model was proposed in "),q=a("a"),de=r("Masked Autoencoders Are Scalable Vision Learners"),ce=r(` by Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li,
Piotr Doll\xE1r, Ross Girshick. The paper shows that, by pre-training a Vision Transformer (ViT) to reconstruct pixel values for masked patches, one can get results after
fine-tuning that outperform supervised pre-training.`),x=d(),X=a("p"),he=r("The abstract from the paper is the following:"),xo=d(),Ft=a("p"),ro=a("em"),cr=r(`This paper shows that masked autoencoders (MAE) are scalable self-supervised learners for computer vision. Our MAE approach is simple: we mask random patches of the
input image and reconstruct the missing pixels. It is based on two core designs. First, we develop an asymmetric encoder-decoder architecture, with an encoder that operates
only on the visible subset of patches (without mask tokens), along with a lightweight decoder that reconstructs the original image from the latent representation and mask
tokens. Second, we find that masking a high proportion of the input image, e.g., 75%, yields a nontrivial and meaningful self-supervisory task. Coupling these two designs
enables us to train large models efficiently and effectively: we accelerate training (by 3x or more) and improve accuracy. Our scalable approach allows for learning high-capacity
models that generalize well: e.g., a vanilla ViT-Huge model achieves the best accuracy (87.8%) among methods that use only ImageNet-1K data. Transfer performance in downstream
tasks outperforms supervised pre-training and shows promising scaling behavior.`),Po=d(),xt=a("p"),hr=r("Tips:"),jo=d(),z=a("ul"),Oe=a("li"),mr=r(`MAE (masked auto encoding) is a method for self-supervised pre-training of Vision Transformers (ViTs). The pre-training objective is relatively simple:
by masking a large portion (75%) of the image patches, the model must reconstruct raw pixel values. One can use `),Pt=a("a"),pr=r("ViTMAEForPreTraining"),fr=r(" for this purpose."),ur=d(),me=a("li"),gr=r("An example Python script that illustrates how to pre-train "),jt=a("a"),_r=r("ViTMAEForPreTraining"),Tr=r(" from scratch can be found "),Le=a("a"),vr=r("here"),wr=r(`.
One can easily tweak it for their own use case.`),Er=d(),pe=a("li"),Mr=r("A notebook that illustrates how to visualize reconstructed pixel values with "),qt=a("a"),br=r("ViTMAEForPreTraining"),Ar=r(" can be found "),Se=a("a"),yr=r("here"),$r=r("."),kr=d(),Ke=a("li"),Vr=r(`After pre-training, one \u201Cthrows away\u201D the decoder used to reconstruct pixels, and one uses the encoder for fine-tuning/linear probing. This means that after
fine-tuning, one can directly plug in the weights into a `),Ct=a("a"),Fr=r("ViTForImageClassification"),xr=r("."),Pr=d(),Ue=a("li"),jr=r("One can use "),zt=a("a"),qr=r("ViTFeatureExtractor"),Cr=r(" to prepare images for the model. See the code examples for more info."),zr=d(),no=a("li"),Ir=r(`Note that the encoder of MAE is only used to encode the visual patches. The encoded patches are then concatenated with mask tokens, which the decoder (which also
consists of Transformer blocks) takes as input. Each mask token is a shared, learned vector that indicates the presence of a missing patch to be predicted. Fixed
sin/cos position embeddings are added both to the input of the encoder and the decoder.`),qo=d(),$e=a("img"),Co=d(),We=a("small"),Dr=r("MAE architecture. Taken from the "),It=a("a"),Nr=r("original paper."),zo=d(),K=a("p"),Or=r("This model was contributed by "),He=a("a"),Lr=r("nielsr"),Sr=r(". TensorFlow version of the model was contributed by "),Ge=a("a"),Kr=r("sayakpaul"),Ur=r(` and
`),Re=a("a"),Wr=r("ariG23498"),Hr=r(" (equal contribution). The original code can be found "),Xe=a("a"),Gr=r("here"),Rr=r("."),Io=d(),ke=a("p"),Xr=r("For a visual understanding of how MAEs work you can check out this "),Be=a("a"),Br=r("Keras post"),Yr=r("."),Do=d(),fe=a("h2"),Ve=a("a"),ao=a("span"),b(Ye.$$.fragment),Jr=d(),so=a("span"),Qr=r("ViTMAEConfig"),No=d(),N=a("div"),b(Je.$$.fragment),Zr=d(),ue=a("p"),en=r("This is the configuration class to store the configuration of a "),Dt=a("a"),tn=r("ViTMAEModel"),on=r(`. It is used to instantiate an ViT
MAE model according to the specified arguments, defining the model architecture. Instantiating a configuration with
the defaults will yield a similar configuration to that of the ViT
`),Qe=a("a"),rn=r("facebook/vit-mae-base"),nn=r(" architecture."),an=d(),ge=a("p"),sn=r("Configuration objects inherit from "),Nt=a("a"),ln=r("PretrainedConfig"),dn=r(` and can be used to control the model outputs. Read the
documentation from `),Ot=a("a"),cn=r("PretrainedConfig"),hn=r(" for more information."),mn=d(),io=a("p"),pn=r("Example:"),fn=d(),b(Ze.$$.fragment),Oo=d(),_e=a("h2"),Fe=a("a"),lo=a("span"),b(et.$$.fragment),un=d(),co=a("span"),gn=r("ViTMAEModel"),Lo=d(),Z=a("div"),b(tt.$$.fragment),_n=d(),ot=a("p"),Tn=r(`The bare ViTMAE Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),rt=a("a"),vn=r("torch.nn.Module"),wn=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),En=d(),U=a("div"),b(nt.$$.fragment),Mn=d(),Te=a("p"),bn=r("The "),Lt=a("a"),An=r("ViTMAEModel"),yn=r(" forward method, overrides the "),ho=a("code"),$n=r("__call__"),kn=r(" special method."),Vn=d(),b(xe.$$.fragment),Fn=d(),mo=a("p"),xn=r("Examples:"),Pn=d(),b(at.$$.fragment),So=d(),ve=a("h2"),Pe=a("a"),po=a("span"),b(st.$$.fragment),jn=d(),fo=a("span"),qn=r("ViTMAEForPreTraining"),Ko=d(),ee=a("div"),b(it.$$.fragment),Cn=d(),lt=a("p"),zn=r(`The ViTMAE Model transformer with the decoder on top for self-supervised pre-training.
This model is a PyTorch `),dt=a("a"),In=r("torch.nn.Module"),Dn=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Nn=d(),W=a("div"),b(ct.$$.fragment),On=d(),we=a("p"),Ln=r("The "),St=a("a"),Sn=r("ViTMAEForPreTraining"),Kn=r(" forward method, overrides the "),uo=a("code"),Un=r("__call__"),Wn=r(" special method."),Hn=d(),b(je.$$.fragment),Gn=d(),go=a("p"),Rn=r("Examples:"),Xn=d(),b(ht.$$.fragment),Uo=d(),Ee=a("h2"),qe=a("a"),_o=a("span"),b(mt.$$.fragment),Bn=d(),To=a("span"),Yn=r("TFViTMAEModel"),Wo=d(),O=a("div"),b(pt.$$.fragment),Jn=d(),ft=a("p"),Qn=r(`The bare ViTMAE Model transformer outputting raw hidden-states without any specific head on top.
This model inherits from `),Kt=a("a"),Zn=r("TFPreTrainedModel"),ea=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ta=d(),ut=a("p"),oa=r("This model is also a "),gt=a("a"),ra=r("tf.keras.Model"),na=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),aa=d(),b(Ce.$$.fragment),sa=d(),H=a("div"),b(_t.$$.fragment),ia=d(),Me=a("p"),la=r("The "),Ut=a("a"),da=r("TFViTMAEModel"),ca=r(" forward method, overrides the "),vo=a("code"),ha=r("__call__"),ma=r(" special method."),pa=d(),b(ze.$$.fragment),fa=d(),wo=a("p"),ua=r("Examples:"),ga=d(),b(Tt.$$.fragment),Ho=d(),be=a("h2"),Ie=a("a"),Eo=a("span"),b(vt.$$.fragment),_a=d(),Mo=a("span"),Ta=r("TFViTMAEForPreTraining"),Go=d(),L=a("div"),b(wt.$$.fragment),va=d(),Et=a("p"),wa=r(`The ViTMAE Model transformer with the decoder on top for self-supervised pre-training.
This model inherits from `),Wt=a("a"),Ea=r("TFPreTrainedModel"),Ma=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ba=d(),Mt=a("p"),Aa=r("This model is also a "),bt=a("a"),ya=r("tf.keras.Model"),$a=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ka=d(),b(De.$$.fragment),Va=d(),G=a("div"),b(At.$$.fragment),Fa=d(),Ae=a("p"),xa=r("The "),Ht=a("a"),Pa=r("TFViTMAEForPreTraining"),ja=r(" forward method, overrides the "),bo=a("code"),qa=r("__call__"),Ca=r(" special method."),za=d(),b(Ne.$$.fragment),Ia=d(),Ao=a("p"),Da=r("Examples:"),Na=d(),b(yt.$$.fragment),this.h()},l(t){const m=Bs('[data-svelte="svelte-1phssyn"]',document.head);h=s(m,"META",{name:!0,content:!0}),m.forEach(o),E=c(t),f=s(t,"H1",{class:!0});var $t=i(f);u=s($t,"A",{id:!0,class:!0,href:!0});var yo=i(u);v=s(yo,"SPAN",{});var $o=i(v);A(_.$$.fragment,$o),$o.forEach(o),yo.forEach(o),T=c($t),M=s($t,"SPAN",{});var ko=i(M);Y=n(ko,"ViTMAE"),ko.forEach(o),$t.forEach(o),S=c(t),w=s(t,"H2",{class:!0});var kt=i(w);C=s(kt,"A",{id:!0,class:!0,href:!0});var Vo=i(C);P=s(Vo,"SPAN",{});var Sa=i(P);A(D.$$.fragment,Sa),Sa.forEach(o),Vo.forEach(o),J=c(kt),j=s(kt,"SPAN",{});var Ka=i(j);Q=n(Ka,"Overview"),Ka.forEach(o),kt.forEach(o),R=c(t),g=s(t,"P",{});var Xo=i(g);F=n(Xo,"The ViTMAE model was proposed in "),q=s(Xo,"A",{href:!0,rel:!0});var Ua=i(q);de=n(Ua,"Masked Autoencoders Are Scalable Vision Learners"),Ua.forEach(o),ce=n(Xo,` by Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li,
Piotr Doll\xE1r, Ross Girshick. The paper shows that, by pre-training a Vision Transformer (ViT) to reconstruct pixel values for masked patches, one can get results after
fine-tuning that outperform supervised pre-training.`),Xo.forEach(o),x=c(t),X=s(t,"P",{});var Wa=i(X);he=n(Wa,"The abstract from the paper is the following:"),Wa.forEach(o),xo=c(t),Ft=s(t,"P",{});var Ha=i(Ft);ro=s(Ha,"EM",{});var Ga=i(ro);cr=n(Ga,`This paper shows that masked autoencoders (MAE) are scalable self-supervised learners for computer vision. Our MAE approach is simple: we mask random patches of the
input image and reconstruct the missing pixels. It is based on two core designs. First, we develop an asymmetric encoder-decoder architecture, with an encoder that operates
only on the visible subset of patches (without mask tokens), along with a lightweight decoder that reconstructs the original image from the latent representation and mask
tokens. Second, we find that masking a high proportion of the input image, e.g., 75%, yields a nontrivial and meaningful self-supervisory task. Coupling these two designs
enables us to train large models efficiently and effectively: we accelerate training (by 3x or more) and improve accuracy. Our scalable approach allows for learning high-capacity
models that generalize well: e.g., a vanilla ViT-Huge model achieves the best accuracy (87.8%) among methods that use only ImageNet-1K data. Transfer performance in downstream
tasks outperforms supervised pre-training and shows promising scaling behavior.`),Ga.forEach(o),Ha.forEach(o),Po=c(t),xt=s(t,"P",{});var Ra=i(xt);hr=n(Ra,"Tips:"),Ra.forEach(o),jo=c(t),z=s(t,"UL",{});var B=i(z);Oe=s(B,"LI",{});var Bo=i(Oe);mr=n(Bo,`MAE (masked auto encoding) is a method for self-supervised pre-training of Vision Transformers (ViTs). The pre-training objective is relatively simple:
by masking a large portion (75%) of the image patches, the model must reconstruct raw pixel values. One can use `),Pt=s(Bo,"A",{href:!0});var Xa=i(Pt);pr=n(Xa,"ViTMAEForPreTraining"),Xa.forEach(o),fr=n(Bo," for this purpose."),Bo.forEach(o),ur=c(B),me=s(B,"LI",{});var Gt=i(me);gr=n(Gt,"An example Python script that illustrates how to pre-train "),jt=s(Gt,"A",{href:!0});var Ba=i(jt);_r=n(Ba,"ViTMAEForPreTraining"),Ba.forEach(o),Tr=n(Gt," from scratch can be found "),Le=s(Gt,"A",{href:!0,rel:!0});var Ya=i(Le);vr=n(Ya,"here"),Ya.forEach(o),wr=n(Gt,`.
One can easily tweak it for their own use case.`),Gt.forEach(o),Er=c(B),pe=s(B,"LI",{});var Rt=i(pe);Mr=n(Rt,"A notebook that illustrates how to visualize reconstructed pixel values with "),qt=s(Rt,"A",{href:!0});var Ja=i(qt);br=n(Ja,"ViTMAEForPreTraining"),Ja.forEach(o),Ar=n(Rt," can be found "),Se=s(Rt,"A",{href:!0,rel:!0});var Qa=i(Se);yr=n(Qa,"here"),Qa.forEach(o),$r=n(Rt,"."),Rt.forEach(o),kr=c(B),Ke=s(B,"LI",{});var Yo=i(Ke);Vr=n(Yo,`After pre-training, one \u201Cthrows away\u201D the decoder used to reconstruct pixels, and one uses the encoder for fine-tuning/linear probing. This means that after
fine-tuning, one can directly plug in the weights into a `),Ct=s(Yo,"A",{href:!0});var Za=i(Ct);Fr=n(Za,"ViTForImageClassification"),Za.forEach(o),xr=n(Yo,"."),Yo.forEach(o),Pr=c(B),Ue=s(B,"LI",{});var Jo=i(Ue);jr=n(Jo,"One can use "),zt=s(Jo,"A",{href:!0});var es=i(zt);qr=n(es,"ViTFeatureExtractor"),es.forEach(o),Cr=n(Jo," to prepare images for the model. See the code examples for more info."),Jo.forEach(o),zr=c(B),no=s(B,"LI",{});var ts=i(no);Ir=n(ts,`Note that the encoder of MAE is only used to encode the visual patches. The encoded patches are then concatenated with mask tokens, which the decoder (which also
consists of Transformer blocks) takes as input. Each mask token is a shared, learned vector that indicates the presence of a missing patch to be predicted. Fixed
sin/cos position embeddings are added both to the input of the encoder and the decoder.`),ts.forEach(o),B.forEach(o),qo=c(t),$e=s(t,"IMG",{src:!0,alt:!0,width:!0}),Co=c(t),We=s(t,"SMALL",{});var Oa=i(We);Dr=n(Oa,"MAE architecture. Taken from the "),It=s(Oa,"A",{href:!0});var os=i(It);Nr=n(os,"original paper."),os.forEach(o),Oa.forEach(o),zo=c(t),K=s(t,"P",{});var te=i(K);Or=n(te,"This model was contributed by "),He=s(te,"A",{href:!0,rel:!0});var rs=i(He);Lr=n(rs,"nielsr"),rs.forEach(o),Sr=n(te,". TensorFlow version of the model was contributed by "),Ge=s(te,"A",{href:!0,rel:!0});var ns=i(Ge);Kr=n(ns,"sayakpaul"),ns.forEach(o),Ur=n(te,` and
`),Re=s(te,"A",{href:!0,rel:!0});var as=i(Re);Wr=n(as,"ariG23498"),as.forEach(o),Hr=n(te," (equal contribution). The original code can be found "),Xe=s(te,"A",{href:!0,rel:!0});var ss=i(Xe);Gr=n(ss,"here"),ss.forEach(o),Rr=n(te,"."),te.forEach(o),Io=c(t),ke=s(t,"P",{});var Qo=i(ke);Xr=n(Qo,"For a visual understanding of how MAEs work you can check out this "),Be=s(Qo,"A",{href:!0,rel:!0});var is=i(Be);Br=n(is,"Keras post"),is.forEach(o),Yr=n(Qo,"."),Qo.forEach(o),Do=c(t),fe=s(t,"H2",{class:!0});var Zo=i(fe);Ve=s(Zo,"A",{id:!0,class:!0,href:!0});var ls=i(Ve);ao=s(ls,"SPAN",{});var ds=i(ao);A(Ye.$$.fragment,ds),ds.forEach(o),ls.forEach(o),Jr=c(Zo),so=s(Zo,"SPAN",{});var cs=i(so);Qr=n(cs,"ViTMAEConfig"),cs.forEach(o),Zo.forEach(o),No=c(t),N=s(t,"DIV",{class:!0});var oe=i(N);A(Je.$$.fragment,oe),Zr=c(oe),ue=s(oe,"P",{});var Xt=i(ue);en=n(Xt,"This is the configuration class to store the configuration of a "),Dt=s(Xt,"A",{href:!0});var hs=i(Dt);tn=n(hs,"ViTMAEModel"),hs.forEach(o),on=n(Xt,`. It is used to instantiate an ViT
MAE model according to the specified arguments, defining the model architecture. Instantiating a configuration with
the defaults will yield a similar configuration to that of the ViT
`),Qe=s(Xt,"A",{href:!0,rel:!0});var ms=i(Qe);rn=n(ms,"facebook/vit-mae-base"),ms.forEach(o),nn=n(Xt," architecture."),Xt.forEach(o),an=c(oe),ge=s(oe,"P",{});var Bt=i(ge);sn=n(Bt,"Configuration objects inherit from "),Nt=s(Bt,"A",{href:!0});var ps=i(Nt);ln=n(ps,"PretrainedConfig"),ps.forEach(o),dn=n(Bt,` and can be used to control the model outputs. Read the
documentation from `),Ot=s(Bt,"A",{href:!0});var fs=i(Ot);cn=n(fs,"PretrainedConfig"),fs.forEach(o),hn=n(Bt," for more information."),Bt.forEach(o),mn=c(oe),io=s(oe,"P",{});var us=i(io);pn=n(us,"Example:"),us.forEach(o),fn=c(oe),A(Ze.$$.fragment,oe),oe.forEach(o),Oo=c(t),_e=s(t,"H2",{class:!0});var er=i(_e);Fe=s(er,"A",{id:!0,class:!0,href:!0});var gs=i(Fe);lo=s(gs,"SPAN",{});var _s=i(lo);A(et.$$.fragment,_s),_s.forEach(o),gs.forEach(o),un=c(er),co=s(er,"SPAN",{});var Ts=i(co);gn=n(Ts,"ViTMAEModel"),Ts.forEach(o),er.forEach(o),Lo=c(t),Z=s(t,"DIV",{class:!0});var Yt=i(Z);A(tt.$$.fragment,Yt),_n=c(Yt),ot=s(Yt,"P",{});var tr=i(ot);Tn=n(tr,`The bare ViTMAE Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),rt=s(tr,"A",{href:!0,rel:!0});var vs=i(rt);vn=n(vs,"torch.nn.Module"),vs.forEach(o),wn=n(tr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),tr.forEach(o),En=c(Yt),U=s(Yt,"DIV",{class:!0});var re=i(U);A(nt.$$.fragment,re),Mn=c(re),Te=s(re,"P",{});var Jt=i(Te);bn=n(Jt,"The "),Lt=s(Jt,"A",{href:!0});var ws=i(Lt);An=n(ws,"ViTMAEModel"),ws.forEach(o),yn=n(Jt," forward method, overrides the "),ho=s(Jt,"CODE",{});var Es=i(ho);$n=n(Es,"__call__"),Es.forEach(o),kn=n(Jt," special method."),Jt.forEach(o),Vn=c(re),A(xe.$$.fragment,re),Fn=c(re),mo=s(re,"P",{});var Ms=i(mo);xn=n(Ms,"Examples:"),Ms.forEach(o),Pn=c(re),A(at.$$.fragment,re),re.forEach(o),Yt.forEach(o),So=c(t),ve=s(t,"H2",{class:!0});var or=i(ve);Pe=s(or,"A",{id:!0,class:!0,href:!0});var bs=i(Pe);po=s(bs,"SPAN",{});var As=i(po);A(st.$$.fragment,As),As.forEach(o),bs.forEach(o),jn=c(or),fo=s(or,"SPAN",{});var ys=i(fo);qn=n(ys,"ViTMAEForPreTraining"),ys.forEach(o),or.forEach(o),Ko=c(t),ee=s(t,"DIV",{class:!0});var Qt=i(ee);A(it.$$.fragment,Qt),Cn=c(Qt),lt=s(Qt,"P",{});var rr=i(lt);zn=n(rr,`The ViTMAE Model transformer with the decoder on top for self-supervised pre-training.
This model is a PyTorch `),dt=s(rr,"A",{href:!0,rel:!0});var $s=i(dt);In=n($s,"torch.nn.Module"),$s.forEach(o),Dn=n(rr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),rr.forEach(o),Nn=c(Qt),W=s(Qt,"DIV",{class:!0});var ne=i(W);A(ct.$$.fragment,ne),On=c(ne),we=s(ne,"P",{});var Zt=i(we);Ln=n(Zt,"The "),St=s(Zt,"A",{href:!0});var ks=i(St);Sn=n(ks,"ViTMAEForPreTraining"),ks.forEach(o),Kn=n(Zt," forward method, overrides the "),uo=s(Zt,"CODE",{});var Vs=i(uo);Un=n(Vs,"__call__"),Vs.forEach(o),Wn=n(Zt," special method."),Zt.forEach(o),Hn=c(ne),A(je.$$.fragment,ne),Gn=c(ne),go=s(ne,"P",{});var Fs=i(go);Rn=n(Fs,"Examples:"),Fs.forEach(o),Xn=c(ne),A(ht.$$.fragment,ne),ne.forEach(o),Qt.forEach(o),Uo=c(t),Ee=s(t,"H2",{class:!0});var nr=i(Ee);qe=s(nr,"A",{id:!0,class:!0,href:!0});var xs=i(qe);_o=s(xs,"SPAN",{});var Ps=i(_o);A(mt.$$.fragment,Ps),Ps.forEach(o),xs.forEach(o),Bn=c(nr),To=s(nr,"SPAN",{});var js=i(To);Yn=n(js,"TFViTMAEModel"),js.forEach(o),nr.forEach(o),Wo=c(t),O=s(t,"DIV",{class:!0});var ae=i(O);A(pt.$$.fragment,ae),Jn=c(ae),ft=s(ae,"P",{});var ar=i(ft);Qn=n(ar,`The bare ViTMAE Model transformer outputting raw hidden-states without any specific head on top.
This model inherits from `),Kt=s(ar,"A",{href:!0});var qs=i(Kt);Zn=n(qs,"TFPreTrainedModel"),qs.forEach(o),ea=n(ar,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ar.forEach(o),ta=c(ae),ut=s(ae,"P",{});var sr=i(ut);oa=n(sr,"This model is also a "),gt=s(sr,"A",{href:!0,rel:!0});var Cs=i(gt);ra=n(Cs,"tf.keras.Model"),Cs.forEach(o),na=n(sr,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),sr.forEach(o),aa=c(ae),A(Ce.$$.fragment,ae),sa=c(ae),H=s(ae,"DIV",{class:!0});var se=i(H);A(_t.$$.fragment,se),ia=c(se),Me=s(se,"P",{});var eo=i(Me);la=n(eo,"The "),Ut=s(eo,"A",{href:!0});var zs=i(Ut);da=n(zs,"TFViTMAEModel"),zs.forEach(o),ca=n(eo," forward method, overrides the "),vo=s(eo,"CODE",{});var Is=i(vo);ha=n(Is,"__call__"),Is.forEach(o),ma=n(eo," special method."),eo.forEach(o),pa=c(se),A(ze.$$.fragment,se),fa=c(se),wo=s(se,"P",{});var Ds=i(wo);ua=n(Ds,"Examples:"),Ds.forEach(o),ga=c(se),A(Tt.$$.fragment,se),se.forEach(o),ae.forEach(o),Ho=c(t),be=s(t,"H2",{class:!0});var ir=i(be);Ie=s(ir,"A",{id:!0,class:!0,href:!0});var Ns=i(Ie);Eo=s(Ns,"SPAN",{});var Os=i(Eo);A(vt.$$.fragment,Os),Os.forEach(o),Ns.forEach(o),_a=c(ir),Mo=s(ir,"SPAN",{});var Ls=i(Mo);Ta=n(Ls,"TFViTMAEForPreTraining"),Ls.forEach(o),ir.forEach(o),Go=c(t),L=s(t,"DIV",{class:!0});var ie=i(L);A(wt.$$.fragment,ie),va=c(ie),Et=s(ie,"P",{});var lr=i(Et);wa=n(lr,`The ViTMAE Model transformer with the decoder on top for self-supervised pre-training.
This model inherits from `),Wt=s(lr,"A",{href:!0});var Ss=i(Wt);Ea=n(Ss,"TFPreTrainedModel"),Ss.forEach(o),Ma=n(lr,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),lr.forEach(o),ba=c(ie),Mt=s(ie,"P",{});var dr=i(Mt);Aa=n(dr,"This model is also a "),bt=s(dr,"A",{href:!0,rel:!0});var Ks=i(bt);ya=n(Ks,"tf.keras.Model"),Ks.forEach(o),$a=n(dr,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),dr.forEach(o),ka=c(ie),A(De.$$.fragment,ie),Va=c(ie),G=s(ie,"DIV",{class:!0});var le=i(G);A(At.$$.fragment,le),Fa=c(le),Ae=s(le,"P",{});var to=i(Ae);xa=n(to,"The "),Ht=s(to,"A",{href:!0});var Us=i(Ht);Pa=n(Us,"TFViTMAEForPreTraining"),Us.forEach(o),ja=n(to," forward method, overrides the "),bo=s(to,"CODE",{});var Ws=i(bo);qa=n(Ws,"__call__"),Ws.forEach(o),Ca=n(to," special method."),to.forEach(o),za=c(le),A(Ne.$$.fragment,le),Ia=c(le),Ao=s(le,"P",{});var Hs=i(Ao);Da=n(Hs,"Examples:"),Hs.forEach(o),Na=c(le),A(yt.$$.fragment,le),le.forEach(o),ie.forEach(o),this.h()},h(){l(h,"name","hf:doc:metadata"),l(h,"content",JSON.stringify(ni)),l(u,"id","vitmae"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#vitmae"),l(f,"class","relative group"),l(C,"id","overview"),l(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(C,"href","#overview"),l(w,"class","relative group"),l(q,"href","https://arxiv.org/abs/2111.06377v2"),l(q,"rel","nofollow"),l(Pt,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),l(jt,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),l(Le,"href","https://github.com/huggingface/transformers/tree/master/examples/pytorch/image-pretraining"),l(Le,"rel","nofollow"),l(qt,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),l(Se,"href","https://github.com/NielsRogge/Transformers-Tutorials/blob/master/ViTMAE/ViT_MAE_visualization_demo.ipynb"),l(Se,"rel","nofollow"),l(Ct,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTForImageClassification"),l(zt,"href","/docs/transformers/pr_16255/en/model_doc/vit#transformers.ViTFeatureExtractor"),Ys($e.src,La="https://user-images.githubusercontent.com/11435359/146857310-f258c86c-fde6-48e8-9cee-badd2b21bd2c.png")||l($e,"src",La),l($e,"alt","drawing"),l($e,"width","600"),l(It,"href","https://arxiv.org/abs/2111.06377"),l(He,"href","https://huggingface.co/nielsr"),l(He,"rel","nofollow"),l(Ge,"href","https://github.com/sayakpaul"),l(Ge,"rel","nofollow"),l(Re,"href","https://github.com/ariG23498"),l(Re,"rel","nofollow"),l(Xe,"href","https://github.com/facebookresearch/mae"),l(Xe,"rel","nofollow"),l(Be,"href","https://keras.io/examples/vision/masked_image_modeling/"),l(Be,"rel","nofollow"),l(Ve,"id","transformers.ViTMAEConfig"),l(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ve,"href","#transformers.ViTMAEConfig"),l(fe,"class","relative group"),l(Dt,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEModel"),l(Qe,"href","https://huggingface.co/facebook/vit-mae-base"),l(Qe,"rel","nofollow"),l(Nt,"href","/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig"),l(Ot,"href","/docs/transformers/pr_16255/en/main_classes/configuration#transformers.PretrainedConfig"),l(N,"class","docstring"),l(Fe,"id","transformers.ViTMAEModel"),l(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Fe,"href","#transformers.ViTMAEModel"),l(_e,"class","relative group"),l(rt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(rt,"rel","nofollow"),l(Lt,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEModel"),l(U,"class","docstring"),l(Z,"class","docstring"),l(Pe,"id","transformers.ViTMAEForPreTraining"),l(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Pe,"href","#transformers.ViTMAEForPreTraining"),l(ve,"class","relative group"),l(dt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(dt,"rel","nofollow"),l(St,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),l(W,"class","docstring"),l(ee,"class","docstring"),l(qe,"id","transformers.TFViTMAEModel"),l(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(qe,"href","#transformers.TFViTMAEModel"),l(Ee,"class","relative group"),l(Kt,"href","/docs/transformers/pr_16255/en/main_classes/model#transformers.TFPreTrainedModel"),l(gt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(gt,"rel","nofollow"),l(Ut,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEModel"),l(H,"class","docstring"),l(O,"class","docstring"),l(Ie,"id","transformers.TFViTMAEForPreTraining"),l(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ie,"href","#transformers.TFViTMAEForPreTraining"),l(be,"class","relative group"),l(Wt,"href","/docs/transformers/pr_16255/en/main_classes/model#transformers.TFPreTrainedModel"),l(bt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(bt,"rel","nofollow"),l(Ht,"href","/docs/transformers/pr_16255/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),l(G,"class","docstring"),l(L,"class","docstring")},m(t,m){e(document.head,h),p(t,E,m),p(t,f,m),e(f,u),e(u,v),y(_,v,null),e(f,T),e(f,M),e(M,Y),p(t,S,m),p(t,w,m),e(w,C),e(C,P),y(D,P,null),e(w,J),e(w,j),e(j,Q),p(t,R,m),p(t,g,m),e(g,F),e(g,q),e(q,de),e(g,ce),p(t,x,m),p(t,X,m),e(X,he),p(t,xo,m),p(t,Ft,m),e(Ft,ro),e(ro,cr),p(t,Po,m),p(t,xt,m),e(xt,hr),p(t,jo,m),p(t,z,m),e(z,Oe),e(Oe,mr),e(Oe,Pt),e(Pt,pr),e(Oe,fr),e(z,ur),e(z,me),e(me,gr),e(me,jt),e(jt,_r),e(me,Tr),e(me,Le),e(Le,vr),e(me,wr),e(z,Er),e(z,pe),e(pe,Mr),e(pe,qt),e(qt,br),e(pe,Ar),e(pe,Se),e(Se,yr),e(pe,$r),e(z,kr),e(z,Ke),e(Ke,Vr),e(Ke,Ct),e(Ct,Fr),e(Ke,xr),e(z,Pr),e(z,Ue),e(Ue,jr),e(Ue,zt),e(zt,qr),e(Ue,Cr),e(z,zr),e(z,no),e(no,Ir),p(t,qo,m),p(t,$e,m),p(t,Co,m),p(t,We,m),e(We,Dr),e(We,It),e(It,Nr),p(t,zo,m),p(t,K,m),e(K,Or),e(K,He),e(He,Lr),e(K,Sr),e(K,Ge),e(Ge,Kr),e(K,Ur),e(K,Re),e(Re,Wr),e(K,Hr),e(K,Xe),e(Xe,Gr),e(K,Rr),p(t,Io,m),p(t,ke,m),e(ke,Xr),e(ke,Be),e(Be,Br),e(ke,Yr),p(t,Do,m),p(t,fe,m),e(fe,Ve),e(Ve,ao),y(Ye,ao,null),e(fe,Jr),e(fe,so),e(so,Qr),p(t,No,m),p(t,N,m),y(Je,N,null),e(N,Zr),e(N,ue),e(ue,en),e(ue,Dt),e(Dt,tn),e(ue,on),e(ue,Qe),e(Qe,rn),e(ue,nn),e(N,an),e(N,ge),e(ge,sn),e(ge,Nt),e(Nt,ln),e(ge,dn),e(ge,Ot),e(Ot,cn),e(ge,hn),e(N,mn),e(N,io),e(io,pn),e(N,fn),y(Ze,N,null),p(t,Oo,m),p(t,_e,m),e(_e,Fe),e(Fe,lo),y(et,lo,null),e(_e,un),e(_e,co),e(co,gn),p(t,Lo,m),p(t,Z,m),y(tt,Z,null),e(Z,_n),e(Z,ot),e(ot,Tn),e(ot,rt),e(rt,vn),e(ot,wn),e(Z,En),e(Z,U),y(nt,U,null),e(U,Mn),e(U,Te),e(Te,bn),e(Te,Lt),e(Lt,An),e(Te,yn),e(Te,ho),e(ho,$n),e(Te,kn),e(U,Vn),y(xe,U,null),e(U,Fn),e(U,mo),e(mo,xn),e(U,Pn),y(at,U,null),p(t,So,m),p(t,ve,m),e(ve,Pe),e(Pe,po),y(st,po,null),e(ve,jn),e(ve,fo),e(fo,qn),p(t,Ko,m),p(t,ee,m),y(it,ee,null),e(ee,Cn),e(ee,lt),e(lt,zn),e(lt,dt),e(dt,In),e(lt,Dn),e(ee,Nn),e(ee,W),y(ct,W,null),e(W,On),e(W,we),e(we,Ln),e(we,St),e(St,Sn),e(we,Kn),e(we,uo),e(uo,Un),e(we,Wn),e(W,Hn),y(je,W,null),e(W,Gn),e(W,go),e(go,Rn),e(W,Xn),y(ht,W,null),p(t,Uo,m),p(t,Ee,m),e(Ee,qe),e(qe,_o),y(mt,_o,null),e(Ee,Bn),e(Ee,To),e(To,Yn),p(t,Wo,m),p(t,O,m),y(pt,O,null),e(O,Jn),e(O,ft),e(ft,Qn),e(ft,Kt),e(Kt,Zn),e(ft,ea),e(O,ta),e(O,ut),e(ut,oa),e(ut,gt),e(gt,ra),e(ut,na),e(O,aa),y(Ce,O,null),e(O,sa),e(O,H),y(_t,H,null),e(H,ia),e(H,Me),e(Me,la),e(Me,Ut),e(Ut,da),e(Me,ca),e(Me,vo),e(vo,ha),e(Me,ma),e(H,pa),y(ze,H,null),e(H,fa),e(H,wo),e(wo,ua),e(H,ga),y(Tt,H,null),p(t,Ho,m),p(t,be,m),e(be,Ie),e(Ie,Eo),y(vt,Eo,null),e(be,_a),e(be,Mo),e(Mo,Ta),p(t,Go,m),p(t,L,m),y(wt,L,null),e(L,va),e(L,Et),e(Et,wa),e(Et,Wt),e(Wt,Ea),e(Et,Ma),e(L,ba),e(L,Mt),e(Mt,Aa),e(Mt,bt),e(bt,ya),e(Mt,$a),e(L,ka),y(De,L,null),e(L,Va),e(L,G),y(At,G,null),e(G,Fa),e(G,Ae),e(Ae,xa),e(Ae,Ht),e(Ht,Pa),e(Ae,ja),e(Ae,bo),e(bo,qa),e(Ae,Ca),e(G,za),y(Ne,G,null),e(G,Ia),e(G,Ao),e(Ao,Da),e(G,Na),y(yt,G,null),Ro=!0},p(t,[m]){const $t={};m&2&&($t.$$scope={dirty:m,ctx:t}),xe.$set($t);const yo={};m&2&&(yo.$$scope={dirty:m,ctx:t}),je.$set(yo);const $o={};m&2&&($o.$$scope={dirty:m,ctx:t}),Ce.$set($o);const ko={};m&2&&(ko.$$scope={dirty:m,ctx:t}),ze.$set(ko);const kt={};m&2&&(kt.$$scope={dirty:m,ctx:t}),De.$set(kt);const Vo={};m&2&&(Vo.$$scope={dirty:m,ctx:t}),Ne.$set(Vo)},i(t){Ro||($(_.$$.fragment,t),$(D.$$.fragment,t),$(Ye.$$.fragment,t),$(Je.$$.fragment,t),$(Ze.$$.fragment,t),$(et.$$.fragment,t),$(tt.$$.fragment,t),$(nt.$$.fragment,t),$(xe.$$.fragment,t),$(at.$$.fragment,t),$(st.$$.fragment,t),$(it.$$.fragment,t),$(ct.$$.fragment,t),$(je.$$.fragment,t),$(ht.$$.fragment,t),$(mt.$$.fragment,t),$(pt.$$.fragment,t),$(Ce.$$.fragment,t),$(_t.$$.fragment,t),$(ze.$$.fragment,t),$(Tt.$$.fragment,t),$(vt.$$.fragment,t),$(wt.$$.fragment,t),$(De.$$.fragment,t),$(At.$$.fragment,t),$(Ne.$$.fragment,t),$(yt.$$.fragment,t),Ro=!0)},o(t){k(_.$$.fragment,t),k(D.$$.fragment,t),k(Ye.$$.fragment,t),k(Je.$$.fragment,t),k(Ze.$$.fragment,t),k(et.$$.fragment,t),k(tt.$$.fragment,t),k(nt.$$.fragment,t),k(xe.$$.fragment,t),k(at.$$.fragment,t),k(st.$$.fragment,t),k(it.$$.fragment,t),k(ct.$$.fragment,t),k(je.$$.fragment,t),k(ht.$$.fragment,t),k(mt.$$.fragment,t),k(pt.$$.fragment,t),k(Ce.$$.fragment,t),k(_t.$$.fragment,t),k(ze.$$.fragment,t),k(Tt.$$.fragment,t),k(vt.$$.fragment,t),k(wt.$$.fragment,t),k(De.$$.fragment,t),k(At.$$.fragment,t),k(Ne.$$.fragment,t),k(yt.$$.fragment,t),Ro=!1},d(t){o(h),t&&o(E),t&&o(f),V(_),t&&o(S),t&&o(w),V(D),t&&o(R),t&&o(g),t&&o(x),t&&o(X),t&&o(xo),t&&o(Ft),t&&o(Po),t&&o(xt),t&&o(jo),t&&o(z),t&&o(qo),t&&o($e),t&&o(Co),t&&o(We),t&&o(zo),t&&o(K),t&&o(Io),t&&o(ke),t&&o(Do),t&&o(fe),V(Ye),t&&o(No),t&&o(N),V(Je),V(Ze),t&&o(Oo),t&&o(_e),V(et),t&&o(Lo),t&&o(Z),V(tt),V(nt),V(xe),V(at),t&&o(So),t&&o(ve),V(st),t&&o(Ko),t&&o(ee),V(it),V(ct),V(je),V(ht),t&&o(Uo),t&&o(Ee),V(mt),t&&o(Wo),t&&o(O),V(pt),V(Ce),V(_t),V(ze),V(Tt),t&&o(Ho),t&&o(be),V(vt),t&&o(Go),t&&o(L),V(wt),V(De),V(At),V(Ne),V(yt)}}}const ni={local:"vitmae",sections:[{local:"overview",title:"Overview"},{local:"transformers.ViTMAEConfig",title:"ViTMAEConfig"},{local:"transformers.ViTMAEModel",title:"ViTMAEModel"},{local:"transformers.ViTMAEForPreTraining",title:"ViTMAEForPreTraining"},{local:"transformers.TFViTMAEModel",title:"TFViTMAEModel"},{local:"transformers.TFViTMAEForPreTraining",title:"TFViTMAEForPreTraining"}],title:"ViTMAE"};function ai(I,h,E){let{fw:f}=h;return I.$$set=u=>{"fw"in u&&E(0,f=u.fw)},[f]}class hi extends Gs{constructor(h){super();Rs(this,h,ai,ri,Xs,{fw:0})}}export{hi as default,ni as metadata};
