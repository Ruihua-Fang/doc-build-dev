import{S as rl,i as pl,s as cl,e as o,k as c,w as m,t as l,M as dl,c as i,d as s,m as d,a as r,x as h,h as n,b as u,N as ul,F as a,g as p,y as g,q as v,o as $,B as _,v as fl}from"../chunks/vendor-c570b7f7.js";import{T as ml}from"../chunks/Tip-4965f0b6.js";import{I as ta,C as A}from"../chunks/CodeBlock-8a2530c2.js";function hl(la){let f,T,j,w,D;return{c(){f=o("p"),T=l("Echa un vistazo a la documentaci\xF3n de "),j=o("code"),w=l("pipeline()"),D=l("para obtener una lista completa de tareas admitidas.")},l(k){f=i(k,"P",{});var q=r(f);T=n(q,"Echa un vistazo a la documentaci\xF3n de "),j=i(q,"CODE",{});var H=r(j);w=n(H,"pipeline()"),H.forEach(s),D=n(q,"para obtener una lista completa de tareas admitidas."),q.forEach(s)},m(k,q){p(k,f,q),a(f,T),a(f,j),a(j,w),a(f,D)},d(k){k&&s(f)}}}function gl(la){let f,T,j,w,D,k,q,H,Qa,na,U,Va,V,Xa,Ya,oa,P,X,Za,Pe,es,as,ss,ze,ts,ls,Y,ns,Ce,os,is,ia,F,ra,M,N,Ae,Z,rs,De,ps,pa,y,cs,Me,ds,us,Se,fs,ms,Oe,hs,gs,ca,Ee,ee,vs,Le,$s,_s,da,ae,ua,se,xe,js,Te,Es,fa,te,ma,ke,xs,ha,le,ga,E,ks,He,ws,ys,Ue,bs,qs,Fe,Ps,zs,Ne,Cs,As,va,ne,$a,S,I,Ie,oe,Ds,Re,Ms,_a,x,Ss,Je,Os,Ls,ie,Ts,Hs,Ke,Us,Fs,We,Ns,Is,ja,re,Ea,R,Rs,Be,Js,Ks,xa,pe,ka,J,Ws,Ge,Bs,Gs,wa,ce,ya,O,K,Qe,de,Qs,Ve,Vs,ba,W,Xs,Xe,Ys,Zs,qa,b,et,ue,at,st,fe,tt,lt,Ye,nt,Pa,me,za,he,ot,Ze,it,Ca,ge,Aa,L,B,ea,ve,rt,aa,pt,Da,G,ct,sa,dt,ut,Ma,we,ft,Sa,ye,be,gt,Oa,$e,La;return k=new ta({}),F=new ml({props:{$$slots:{default:[hl]},$$scope:{ctx:la}}}),Z=new ta({}),ae=new A({props:{code:`from transformers import pipeline

generator = pipeline(task="text-generation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(task=<span class="hljs-string">&quot;text-generation&quot;</span>)`}}),te=new A({props:{code:'generator("Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(<span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&#x27;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone, Seven for the Iron-priests at the door to the east, and thirteen for the Lord Kings at the end of the mountain&#x27;</span>}]`}}),le=new A({props:{code:`generator(
    [
        "Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone",
        "Nine for Mortal Men, doomed to die, One for the Dark Lord on his dark throne",
    ]
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(
<span class="hljs-meta">... </span>    [
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;Nine for Mortal Men, doomed to die, One for the Dark Lord on his dark throne&quot;</span>,
<span class="hljs-meta">... </span>    ]
<span class="hljs-meta">... </span>)`}}),ne=new A({props:{code:`generator(
    "Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone",
    num_return_sequences=2,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>,
<span class="hljs-meta">... </span>    num_return_sequences=<span class="hljs-number">2</span>,
<span class="hljs-meta">... </span>)`}}),oe=new ta({}),re=new A({props:{code:`from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("distilgpt2")
model = AutoModelForCausalLM.from_pretrained("distilgpt2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)`}}),pe=new A({props:{code:`from transformers import pipeline

generator = pipeline(task="text-generation", model=model, tokenizer=tokenizer)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(task=<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)`}}),ce=new A({props:{code:'generator("Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(<span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&#x27;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone, Seven for the Dragon-lords (for them to rule in a world ruled by their rulers, and all who live within the realm&#x27;</span>}]`}}),de=new ta({}),me=new A({props:{code:`from transformers import pipeline

audio_classifier = pipeline(
    task="audio-classification", model="ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>audio_classifier = pipeline(
<span class="hljs-meta">... </span>    task=<span class="hljs-string">&quot;audio-classification&quot;</span>, model=<span class="hljs-string">&quot;ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition&quot;</span>
<span class="hljs-meta">... </span>)`}}),ge=new A({props:{code:'audio_classifier("jfk_moon_speech.wav")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>audio_classifier(<span class="hljs-string">&quot;jfk_moon_speech.wav&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;calm&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.13856211304664612</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;disgust&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.13148026168346405</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;happy&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12635163962841034</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;angry&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12439591437578201</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;fearful&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12404385954141617</span>}]`}}),ve=new ta({}),$e=new A({props:{code:`from transformers import pipeline

vision_classifier = pipeline(task="image-classification")
vision_classifier(
    images="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>vision_classifier = pipeline(task=<span class="hljs-string">&quot;image-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>vision_classifier(
<span class="hljs-meta">... </span>    images=<span class="hljs-string">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg&quot;</span>
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;lynx, catamount&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.4403027892112732</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;cougar, puma, catamount, mountain lion, painter, panther, Felis concolor&#x27;</span>,
  <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.03433405980467796</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;snow leopard, ounce, Panthera uncia&#x27;</span>,
  <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.032148055732250214</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;Egyptian cat&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.02353910356760025</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;tiger cat&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.023034192621707916</span>}]`}}),{c(){f=o("meta"),T=c(),j=o("h1"),w=o("a"),D=o("span"),m(k.$$.fragment),q=c(),H=o("span"),Qa=l("Pipelines para inferencia"),na=c(),U=o("p"),Va=l("Un [pipeline] simplifica el uso de cualquier modelo del "),V=o("a"),Xa=l("Model Hub"),Ya=l(" para la inferencia en una variedad de tareas como la generaci\xF3n de texto, la segmentaci\xF3n de im\xE1genes y la clasificaci\xF3n de audio. Incluso si no tienes experiencia con una modalidad espec\xEDfica o no comprendes el c\xF3digo que alimenta los modelos, \xA1a\xFAn puedes usarlos con el [pipeline]! Este tutorial te ense\xF1ar\xE1 a:"),oa=c(),P=o("ul"),X=o("li"),Za=l("Utilizar un "),Pe=o("code"),es=l("pipeline()"),as=l("para inferencia."),ss=c(),ze=o("li"),ts=l("Utilizar un tokenizador o modelo espec\xEDfico."),ls=c(),Y=o("li"),ns=l("Utilizar un "),Ce=o("code"),os=l("pipeline()"),is=l("para tareas de audio y visi\xF3n."),ia=c(),m(F.$$.fragment),ra=c(),M=o("h2"),N=o("a"),Ae=o("span"),m(Z.$$.fragment),rs=c(),De=o("span"),ps=l("Uso del pipeline"),pa=c(),y=o("p"),cs=l("Si bien cada tarea tiene un "),Me=o("code"),ds=l("pipeline()"),us=l("asociado, es m\xE1s sencillo usar la abstracci\xF3n general "),Se=o("code"),fs=l("pipeline()"),ms=l("que contiene todos los pipelines de tareas espec\xEDficas. El "),Oe=o("code"),hs=l("pipeline()"),gs=l("carga autom\xE1ticamente un modelo predeterminado y un tokenizador con capacidad de inferencia para tu tarea."),ca=c(),Ee=o("ol"),ee=o("li"),vs=l("Comienza creando un "),Le=o("code"),$s=l("pipeline()"),_s=l("y espec\xEDfica una tarea de inferencia:"),da=c(),m(ae.$$.fragment),ua=c(),se=o("ol"),xe=o("li"),js=l("Pasa tu texto de entrada al "),Te=o("code"),Es=l("pipeline()"),fa=c(),m(te.$$.fragment),ma=c(),ke=o("p"),xs=l("Si tienes m\xE1s de una entrada, p\xE1sala como una lista:"),ha=c(),m(le.$$.fragment),ga=c(),E=o("p"),ks=l("Cualquier par\xE1metro adicional para tu tarea tambi\xE9n se puede incluir en el "),He=o("code"),ws=l("pipeline()"),ys=l(" La tarea "),Ue=o("code"),bs=l("text-generation"),qs=l(" tiene un m\xE9todo "),Fe=o("code"),Ps=l("generate()"),zs=l("con varios par\xE1metros para controlar la salida. Por ejemplo, si deseas generar m\xE1s de una salida, def\xEDnelo en el par\xE1metro "),Ne=o("code"),Cs=l("num_return_sequences"),As=l(":"),va=c(),m(ne.$$.fragment),$a=c(),S=o("h3"),I=o("a"),Ie=o("span"),m(oe.$$.fragment),Ds=c(),Re=o("span"),Ms=l("Selecciona un modelo y un tokenizador"),_a=c(),x=o("p"),Ss=l("El "),Je=o("code"),Os=l("pipeline()"),Ls=l("acepta cualquier modelo del "),ie=o("a"),Ts=l("Model Hub"),Hs=l(". Hay etiquetas en el Model Hub que te permiten filtrar por el modelo que te gustar\xEDa utilizar para tu tarea. Una vez que hayas elegido un modelo apropiado, c\xE1rgalo con la clase "),Ke=o("code"),Us=l("AutoModelFor"),Fs=l(" y [`AutoTokenizer\u2019] correspondientes. Por ejemplo, carga la clase "),We=o("code"),Ns=l("AutoModelForCausalLM"),Is=l("para una tarea de modelado de lenguaje causal:"),ja=c(),m(re.$$.fragment),Ea=c(),R=o("p"),Rs=l("Crea un "),Be=o("code"),Js=l("pipeline()"),Ks=l("para tu tarea y espec\xEDfica el modelo y el tokenizador que cargaste:"),xa=c(),m(pe.$$.fragment),ka=c(),J=o("p"),Ws=l("Pasa tu texto de entrada a "),Ge=o("code"),Bs=l("pipeline()"),Gs=l("para generar algo de texto:"),wa=c(),m(ce.$$.fragment),ya=c(),O=o("h2"),K=o("a"),Qe=o("span"),m(de.$$.fragment),Qs=c(),Ve=o("span"),Vs=l("Pipeline de audio"),ba=c(),W=o("p"),Xs=l("La flexibilidad de "),Xe=o("code"),Ys=l("pipeline()"),Zs=l("significa que tambi\xE9n se puede extender a tareas de audio."),qa=c(),b=o("p"),et=l("Por ejemplo, clasifiquemos la emoci\xF3n de un breve fragmento del famoso discurso de John F. Kennedy "),ue=o("a"),at=l("\u201CWe choose to go to the Moon\u201D"),st=l(". Encuentra un modelo de "),fe=o("a"),tt=l("audio classification"),lt=l(" para reconocimiento de emociones en el Model Hub y c\xE1rgalo en el "),Ye=o("code"),nt=l("pipeline()"),Pa=c(),m(me.$$.fragment),za=c(),he=o("p"),ot=l("Pasa el archivo de audio al "),Ze=o("code"),it=l("pipeline()"),Ca=c(),m(ge.$$.fragment),Aa=c(),L=o("h2"),B=o("a"),ea=o("span"),m(ve.$$.fragment),rt=c(),aa=o("span"),pt=l("Pipeline de visi\xF3n"),Da=c(),G=o("p"),ct=l("Finalmente, utilizar un "),sa=o("code"),dt=l("pipeline()"),ut=l("para tareas de visi\xF3n es pr\xE1cticamente id\xE9ntico."),Ma=c(),we=o("p"),ft=l("Espec\xEDfica tu tarea de visi\xF3n y pasa tu imagen al clasificador. La imagen puede ser un enlace o una ruta local a la imagen. Por ejemplo, \xBFqu\xE9 especie de gato se muestra a continuaci\xF3n?"),Sa=c(),ye=o("p"),be=o("img"),Oa=c(),m($e.$$.fragment),this.h()},l(e){const t=dl('[data-svelte="svelte-1phssyn"]',document.head);f=i(t,"META",{name:!0,content:!0}),t.forEach(s),T=d(e),j=i(e,"H1",{class:!0});var _e=r(j);w=i(_e,"A",{id:!0,class:!0,href:!0});var vt=r(w);D=i(vt,"SPAN",{});var $t=r(D);h(k.$$.fragment,$t),$t.forEach(s),vt.forEach(s),q=d(_e),H=i(_e,"SPAN",{});var _t=r(H);Qa=n(_t,"Pipelines para inferencia"),_t.forEach(s),_e.forEach(s),na=d(e),U=i(e,"P",{});var Ta=r(U);Va=n(Ta,"Un [pipeline] simplifica el uso de cualquier modelo del "),V=i(Ta,"A",{href:!0,rel:!0});var jt=r(V);Xa=n(jt,"Model Hub"),jt.forEach(s),Ya=n(Ta," para la inferencia en una variedad de tareas como la generaci\xF3n de texto, la segmentaci\xF3n de im\xE1genes y la clasificaci\xF3n de audio. Incluso si no tienes experiencia con una modalidad espec\xEDfica o no comprendes el c\xF3digo que alimenta los modelos, \xA1a\xFAn puedes usarlos con el [pipeline]! Este tutorial te ense\xF1ar\xE1 a:"),Ta.forEach(s),oa=d(e),P=i(e,"UL",{});var qe=r(P);X=i(qe,"LI",{});var Ha=r(X);Za=n(Ha,"Utilizar un "),Pe=i(Ha,"CODE",{});var Et=r(Pe);es=n(Et,"pipeline()"),Et.forEach(s),as=n(Ha,"para inferencia."),Ha.forEach(s),ss=d(qe),ze=i(qe,"LI",{});var xt=r(ze);ts=n(xt,"Utilizar un tokenizador o modelo espec\xEDfico."),xt.forEach(s),ls=d(qe),Y=i(qe,"LI",{});var Ua=r(Y);ns=n(Ua,"Utilizar un "),Ce=i(Ua,"CODE",{});var kt=r(Ce);os=n(kt,"pipeline()"),kt.forEach(s),is=n(Ua,"para tareas de audio y visi\xF3n."),Ua.forEach(s),qe.forEach(s),ia=d(e),h(F.$$.fragment,e),ra=d(e),M=i(e,"H2",{class:!0});var Fa=r(M);N=i(Fa,"A",{id:!0,class:!0,href:!0});var wt=r(N);Ae=i(wt,"SPAN",{});var yt=r(Ae);h(Z.$$.fragment,yt),yt.forEach(s),wt.forEach(s),rs=d(Fa),De=i(Fa,"SPAN",{});var bt=r(De);ps=n(bt,"Uso del pipeline"),bt.forEach(s),Fa.forEach(s),pa=d(e),y=i(e,"P",{});var Q=r(y);cs=n(Q,"Si bien cada tarea tiene un "),Me=i(Q,"CODE",{});var qt=r(Me);ds=n(qt,"pipeline()"),qt.forEach(s),us=n(Q,"asociado, es m\xE1s sencillo usar la abstracci\xF3n general "),Se=i(Q,"CODE",{});var Pt=r(Se);fs=n(Pt,"pipeline()"),Pt.forEach(s),ms=n(Q,"que contiene todos los pipelines de tareas espec\xEDficas. El "),Oe=i(Q,"CODE",{});var zt=r(Oe);hs=n(zt,"pipeline()"),zt.forEach(s),gs=n(Q,"carga autom\xE1ticamente un modelo predeterminado y un tokenizador con capacidad de inferencia para tu tarea."),Q.forEach(s),ca=d(e),Ee=i(e,"OL",{});var Ct=r(Ee);ee=i(Ct,"LI",{});var Na=r(ee);vs=n(Na,"Comienza creando un "),Le=i(Na,"CODE",{});var At=r(Le);$s=n(At,"pipeline()"),At.forEach(s),_s=n(Na,"y espec\xEDfica una tarea de inferencia:"),Na.forEach(s),Ct.forEach(s),da=d(e),h(ae.$$.fragment,e),ua=d(e),se=i(e,"OL",{start:!0});var Dt=r(se);xe=i(Dt,"LI",{});var mt=r(xe);js=n(mt,"Pasa tu texto de entrada al "),Te=i(mt,"CODE",{});var Mt=r(Te);Es=n(Mt,"pipeline()"),Mt.forEach(s),mt.forEach(s),Dt.forEach(s),fa=d(e),h(te.$$.fragment,e),ma=d(e),ke=i(e,"P",{});var St=r(ke);xs=n(St,"Si tienes m\xE1s de una entrada, p\xE1sala como una lista:"),St.forEach(s),ha=d(e),h(le.$$.fragment,e),ga=d(e),E=i(e,"P",{});var z=r(E);ks=n(z,"Cualquier par\xE1metro adicional para tu tarea tambi\xE9n se puede incluir en el "),He=i(z,"CODE",{});var Ot=r(He);ws=n(Ot,"pipeline()"),Ot.forEach(s),ys=n(z," La tarea "),Ue=i(z,"CODE",{});var Lt=r(Ue);bs=n(Lt,"text-generation"),Lt.forEach(s),qs=n(z," tiene un m\xE9todo "),Fe=i(z,"CODE",{});var Tt=r(Fe);Ps=n(Tt,"generate()"),Tt.forEach(s),zs=n(z,"con varios par\xE1metros para controlar la salida. Por ejemplo, si deseas generar m\xE1s de una salida, def\xEDnelo en el par\xE1metro "),Ne=i(z,"CODE",{});var Ht=r(Ne);Cs=n(Ht,"num_return_sequences"),Ht.forEach(s),As=n(z,":"),z.forEach(s),va=d(e),h(ne.$$.fragment,e),$a=d(e),S=i(e,"H3",{class:!0});var Ia=r(S);I=i(Ia,"A",{id:!0,class:!0,href:!0});var Ut=r(I);Ie=i(Ut,"SPAN",{});var Ft=r(Ie);h(oe.$$.fragment,Ft),Ft.forEach(s),Ut.forEach(s),Ds=d(Ia),Re=i(Ia,"SPAN",{});var Nt=r(Re);Ms=n(Nt,"Selecciona un modelo y un tokenizador"),Nt.forEach(s),Ia.forEach(s),_a=d(e),x=i(e,"P",{});var C=r(x);Ss=n(C,"El "),Je=i(C,"CODE",{});var It=r(Je);Os=n(It,"pipeline()"),It.forEach(s),Ls=n(C,"acepta cualquier modelo del "),ie=i(C,"A",{href:!0,rel:!0});var Rt=r(ie);Ts=n(Rt,"Model Hub"),Rt.forEach(s),Hs=n(C,". Hay etiquetas en el Model Hub que te permiten filtrar por el modelo que te gustar\xEDa utilizar para tu tarea. Una vez que hayas elegido un modelo apropiado, c\xE1rgalo con la clase "),Ke=i(C,"CODE",{});var Jt=r(Ke);Us=n(Jt,"AutoModelFor"),Jt.forEach(s),Fs=n(C," y [`AutoTokenizer\u2019] correspondientes. Por ejemplo, carga la clase "),We=i(C,"CODE",{});var Kt=r(We);Ns=n(Kt,"AutoModelForCausalLM"),Kt.forEach(s),Is=n(C,"para una tarea de modelado de lenguaje causal:"),C.forEach(s),ja=d(e),h(re.$$.fragment,e),Ea=d(e),R=i(e,"P",{});var Ra=r(R);Rs=n(Ra,"Crea un "),Be=i(Ra,"CODE",{});var Wt=r(Be);Js=n(Wt,"pipeline()"),Wt.forEach(s),Ks=n(Ra,"para tu tarea y espec\xEDfica el modelo y el tokenizador que cargaste:"),Ra.forEach(s),xa=d(e),h(pe.$$.fragment,e),ka=d(e),J=i(e,"P",{});var Ja=r(J);Ws=n(Ja,"Pasa tu texto de entrada a "),Ge=i(Ja,"CODE",{});var Bt=r(Ge);Bs=n(Bt,"pipeline()"),Bt.forEach(s),Gs=n(Ja,"para generar algo de texto:"),Ja.forEach(s),wa=d(e),h(ce.$$.fragment,e),ya=d(e),O=i(e,"H2",{class:!0});var Ka=r(O);K=i(Ka,"A",{id:!0,class:!0,href:!0});var Gt=r(K);Qe=i(Gt,"SPAN",{});var Qt=r(Qe);h(de.$$.fragment,Qt),Qt.forEach(s),Gt.forEach(s),Qs=d(Ka),Ve=i(Ka,"SPAN",{});var Vt=r(Ve);Vs=n(Vt,"Pipeline de audio"),Vt.forEach(s),Ka.forEach(s),ba=d(e),W=i(e,"P",{});var Wa=r(W);Xs=n(Wa,"La flexibilidad de "),Xe=i(Wa,"CODE",{});var Xt=r(Xe);Ys=n(Xt,"pipeline()"),Xt.forEach(s),Zs=n(Wa,"significa que tambi\xE9n se puede extender a tareas de audio."),Wa.forEach(s),qa=d(e),b=i(e,"P",{});var je=r(b);et=n(je,"Por ejemplo, clasifiquemos la emoci\xF3n de un breve fragmento del famoso discurso de John F. Kennedy "),ue=i(je,"A",{href:!0,rel:!0});var Yt=r(ue);at=n(Yt,"\u201CWe choose to go to the Moon\u201D"),Yt.forEach(s),st=n(je,". Encuentra un modelo de "),fe=i(je,"A",{href:!0,rel:!0});var Zt=r(fe);tt=n(Zt,"audio classification"),Zt.forEach(s),lt=n(je," para reconocimiento de emociones en el Model Hub y c\xE1rgalo en el "),Ye=i(je,"CODE",{});var el=r(Ye);nt=n(el,"pipeline()"),el.forEach(s),je.forEach(s),Pa=d(e),h(me.$$.fragment,e),za=d(e),he=i(e,"P",{});var ht=r(he);ot=n(ht,"Pasa el archivo de audio al "),Ze=i(ht,"CODE",{});var al=r(Ze);it=n(al,"pipeline()"),al.forEach(s),ht.forEach(s),Ca=d(e),h(ge.$$.fragment,e),Aa=d(e),L=i(e,"H2",{class:!0});var Ba=r(L);B=i(Ba,"A",{id:!0,class:!0,href:!0});var sl=r(B);ea=i(sl,"SPAN",{});var tl=r(ea);h(ve.$$.fragment,tl),tl.forEach(s),sl.forEach(s),rt=d(Ba),aa=i(Ba,"SPAN",{});var ll=r(aa);pt=n(ll,"Pipeline de visi\xF3n"),ll.forEach(s),Ba.forEach(s),Da=d(e),G=i(e,"P",{});var Ga=r(G);ct=n(Ga,"Finalmente, utilizar un "),sa=i(Ga,"CODE",{});var nl=r(sa);dt=n(nl,"pipeline()"),nl.forEach(s),ut=n(Ga,"para tareas de visi\xF3n es pr\xE1cticamente id\xE9ntico."),Ga.forEach(s),Ma=d(e),we=i(e,"P",{});var ol=r(we);ft=n(ol,"Espec\xEDfica tu tarea de visi\xF3n y pasa tu imagen al clasificador. La imagen puede ser un enlace o una ruta local a la imagen. Por ejemplo, \xBFqu\xE9 especie de gato se muestra a continuaci\xF3n?"),ol.forEach(s),Sa=d(e),ye=i(e,"P",{});var il=r(ye);be=i(il,"IMG",{src:!0,alt:!0}),il.forEach(s),Oa=d(e),h($e.$$.fragment,e),this.h()},h(){u(f,"name","hf:doc:metadata"),u(f,"content",JSON.stringify(vl)),u(w,"id","pipelines-para-inferencia"),u(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(w,"href","#pipelines-para-inferencia"),u(j,"class","relative group"),u(V,"href","https://huggingface.co/models"),u(V,"rel","nofollow"),u(N,"id","uso-del-pipeline"),u(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(N,"href","#uso-del-pipeline"),u(M,"class","relative group"),u(se,"start","2"),u(I,"id","selecciona-un-modelo-y-un-tokenizador"),u(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(I,"href","#selecciona-un-modelo-y-un-tokenizador"),u(S,"class","relative group"),u(ie,"href","https://huggingface.co/models"),u(ie,"rel","nofollow"),u(K,"id","pipeline-de-audio"),u(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(K,"href","#pipeline-de-audio"),u(O,"class","relative group"),u(ue,"href","https://en.wikipedia.org/wiki/We_choose_to_go_to_the_Moon"),u(ue,"rel","nofollow"),u(fe,"href","https://huggingface.co/models?pipeline_tag=audio-classification"),u(fe,"rel","nofollow"),u(B,"id","pipeline-de-visin"),u(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(B,"href","#pipeline-de-visin"),u(L,"class","relative group"),ul(be.src,gt="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg")||u(be,"src",gt),u(be,"alt","pipeline-cat-chonk")},m(e,t){a(document.head,f),p(e,T,t),p(e,j,t),a(j,w),a(w,D),g(k,D,null),a(j,q),a(j,H),a(H,Qa),p(e,na,t),p(e,U,t),a(U,Va),a(U,V),a(V,Xa),a(U,Ya),p(e,oa,t),p(e,P,t),a(P,X),a(X,Za),a(X,Pe),a(Pe,es),a(X,as),a(P,ss),a(P,ze),a(ze,ts),a(P,ls),a(P,Y),a(Y,ns),a(Y,Ce),a(Ce,os),a(Y,is),p(e,ia,t),g(F,e,t),p(e,ra,t),p(e,M,t),a(M,N),a(N,Ae),g(Z,Ae,null),a(M,rs),a(M,De),a(De,ps),p(e,pa,t),p(e,y,t),a(y,cs),a(y,Me),a(Me,ds),a(y,us),a(y,Se),a(Se,fs),a(y,ms),a(y,Oe),a(Oe,hs),a(y,gs),p(e,ca,t),p(e,Ee,t),a(Ee,ee),a(ee,vs),a(ee,Le),a(Le,$s),a(ee,_s),p(e,da,t),g(ae,e,t),p(e,ua,t),p(e,se,t),a(se,xe),a(xe,js),a(xe,Te),a(Te,Es),p(e,fa,t),g(te,e,t),p(e,ma,t),p(e,ke,t),a(ke,xs),p(e,ha,t),g(le,e,t),p(e,ga,t),p(e,E,t),a(E,ks),a(E,He),a(He,ws),a(E,ys),a(E,Ue),a(Ue,bs),a(E,qs),a(E,Fe),a(Fe,Ps),a(E,zs),a(E,Ne),a(Ne,Cs),a(E,As),p(e,va,t),g(ne,e,t),p(e,$a,t),p(e,S,t),a(S,I),a(I,Ie),g(oe,Ie,null),a(S,Ds),a(S,Re),a(Re,Ms),p(e,_a,t),p(e,x,t),a(x,Ss),a(x,Je),a(Je,Os),a(x,Ls),a(x,ie),a(ie,Ts),a(x,Hs),a(x,Ke),a(Ke,Us),a(x,Fs),a(x,We),a(We,Ns),a(x,Is),p(e,ja,t),g(re,e,t),p(e,Ea,t),p(e,R,t),a(R,Rs),a(R,Be),a(Be,Js),a(R,Ks),p(e,xa,t),g(pe,e,t),p(e,ka,t),p(e,J,t),a(J,Ws),a(J,Ge),a(Ge,Bs),a(J,Gs),p(e,wa,t),g(ce,e,t),p(e,ya,t),p(e,O,t),a(O,K),a(K,Qe),g(de,Qe,null),a(O,Qs),a(O,Ve),a(Ve,Vs),p(e,ba,t),p(e,W,t),a(W,Xs),a(W,Xe),a(Xe,Ys),a(W,Zs),p(e,qa,t),p(e,b,t),a(b,et),a(b,ue),a(ue,at),a(b,st),a(b,fe),a(fe,tt),a(b,lt),a(b,Ye),a(Ye,nt),p(e,Pa,t),g(me,e,t),p(e,za,t),p(e,he,t),a(he,ot),a(he,Ze),a(Ze,it),p(e,Ca,t),g(ge,e,t),p(e,Aa,t),p(e,L,t),a(L,B),a(B,ea),g(ve,ea,null),a(L,rt),a(L,aa),a(aa,pt),p(e,Da,t),p(e,G,t),a(G,ct),a(G,sa),a(sa,dt),a(G,ut),p(e,Ma,t),p(e,we,t),a(we,ft),p(e,Sa,t),p(e,ye,t),a(ye,be),p(e,Oa,t),g($e,e,t),La=!0},p(e,[t]){const _e={};t&2&&(_e.$$scope={dirty:t,ctx:e}),F.$set(_e)},i(e){La||(v(k.$$.fragment,e),v(F.$$.fragment,e),v(Z.$$.fragment,e),v(ae.$$.fragment,e),v(te.$$.fragment,e),v(le.$$.fragment,e),v(ne.$$.fragment,e),v(oe.$$.fragment,e),v(re.$$.fragment,e),v(pe.$$.fragment,e),v(ce.$$.fragment,e),v(de.$$.fragment,e),v(me.$$.fragment,e),v(ge.$$.fragment,e),v(ve.$$.fragment,e),v($e.$$.fragment,e),La=!0)},o(e){$(k.$$.fragment,e),$(F.$$.fragment,e),$(Z.$$.fragment,e),$(ae.$$.fragment,e),$(te.$$.fragment,e),$(le.$$.fragment,e),$(ne.$$.fragment,e),$(oe.$$.fragment,e),$(re.$$.fragment,e),$(pe.$$.fragment,e),$(ce.$$.fragment,e),$(de.$$.fragment,e),$(me.$$.fragment,e),$(ge.$$.fragment,e),$(ve.$$.fragment,e),$($e.$$.fragment,e),La=!1},d(e){s(f),e&&s(T),e&&s(j),_(k),e&&s(na),e&&s(U),e&&s(oa),e&&s(P),e&&s(ia),_(F,e),e&&s(ra),e&&s(M),_(Z),e&&s(pa),e&&s(y),e&&s(ca),e&&s(Ee),e&&s(da),_(ae,e),e&&s(ua),e&&s(se),e&&s(fa),_(te,e),e&&s(ma),e&&s(ke),e&&s(ha),_(le,e),e&&s(ga),e&&s(E),e&&s(va),_(ne,e),e&&s($a),e&&s(S),_(oe),e&&s(_a),e&&s(x),e&&s(ja),_(re,e),e&&s(Ea),e&&s(R),e&&s(xa),_(pe,e),e&&s(ka),e&&s(J),e&&s(wa),_(ce,e),e&&s(ya),e&&s(O),_(de),e&&s(ba),e&&s(W),e&&s(qa),e&&s(b),e&&s(Pa),_(me,e),e&&s(za),e&&s(he),e&&s(Ca),_(ge,e),e&&s(Aa),e&&s(L),_(ve),e&&s(Da),e&&s(G),e&&s(Ma),e&&s(we),e&&s(Sa),e&&s(ye),e&&s(Oa),_($e,e)}}}const vl={local:"pipelines-para-inferencia",sections:[{local:"uso-del-pipeline",sections:[{local:"selecciona-un-modelo-y-un-tokenizador",title:"Selecciona un modelo y un tokenizador"}],title:"Uso del pipeline"},{local:"pipeline-de-audio",title:"Pipeline de audio"},{local:"pipeline-de-visin",title:"Pipeline de visi\xF3n"}],title:"Pipelines para inferencia"};function $l(la){return fl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xl extends rl{constructor(f){super();pl(this,f,$l,gl,cl,{})}}export{xl as default,vl as metadata};
