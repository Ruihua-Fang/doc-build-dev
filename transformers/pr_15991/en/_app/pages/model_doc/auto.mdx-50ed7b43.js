import{S as NMt,i as jMt,s as qMt,e as a,k as l,w as f,t as o,M as GMt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as OMt}from"../../chunks/vendor-6b77c823.js";import{T as $kr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function XMt(If){let K,io,de,Ee,lo,fe,Ce,Vo,Ii,Df,fa,Di,Ni,d3,Nf,Be,co,ji,Gn,c3,On,Xn,f3,qi,Vn,m3,Gi,jf,qa;return{c(){K=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),fe=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),Df=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),d3=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),c3=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),f3=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),m3=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){K=n(fo,"P",{});var pe=s(K);io=r(pe,"If your "),de=n(pe,"CODE",{});var o8=s(de);Ee=r(o8,"NewModelConfig"),o8.forEach(t),lo=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Oi=s(fe);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(pe,`, make sure its
`),Ii=n(pe,"CODE",{});var r8=s(Ii);Df=r(r8,"model_type"),r8.forEach(t),fa=r(pe," attribute is set to the same key you use when registering the config (here "),Di=n(pe,"CODE",{});var t8=s(Di);Ni=r(t8,'"new-model"'),t8.forEach(t),d3=r(pe,")."),pe.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),c3=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var a8=s(On);Xn=r(a8,"PreTrainedModel"),a8.forEach(t),f3=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var qf=s(qi);Vn=r(qf,"config_class"),qf.forEach(t),m3=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var n8=s(Gi);jf=r(n8,"NewModelConfig"),n8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel")},m(fo,pe){b(fo,K,pe),e(K,io),e(K,de),e(de,Ee),e(K,lo),e(K,fe),e(fe,Ce),e(K,Vo),e(K,Ii),e(Ii,Df),e(K,fa),e(K,Di),e(Di,Ni),e(K,d3),b(fo,Nf,pe),b(fo,Be,pe),e(Be,co),e(Be,ji),e(ji,Gn),e(Be,c3),e(Be,On),e(On,Xn),e(Be,f3),e(Be,qi),e(qi,Vn),e(Be,m3),e(Be,Gi),e(Gi,jf),e(Be,qa)},d(fo){fo&&t(K),fo&&t(Nf),fo&&t(Be)}}}function VMt(If){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){K=n(fe,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(fe){fe&&t(K)}}}function zMt(If){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){K=n(fe,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(fe){fe&&t(K)}}}function WMt(If){let K,io,de,Ee,lo,fe,Ce,Vo,Ii,Df,fa,Di,Ni,d3,Nf,Be,co,ji,Gn,c3,On,Xn,f3,qi,Vn,m3,Gi,jf,qa,fo,pe,o8,Oi,r8,t8,zo,Ga,a8,qf,n8,w$e,gke,Xi,Gf,zQ,g3,A$e,WQ,L$e,hke,zn,B$e,QQ,x$e,k$e,HQ,R$e,S$e,pke,h3,_ke,s8,P$e,uke,Of,bke,Vi,Xf,UQ,p3,$$e,JQ,I$e,vke,Wo,_3,D$e,u3,N$e,l8,j$e,q$e,G$e,b3,O$e,YQ,X$e,V$e,z$e,mo,v3,W$e,KQ,Q$e,H$e,zi,U$e,ZQ,J$e,Y$e,eH,K$e,Z$e,eIe,v,Vf,oH,oIe,rIe,i8,tIe,aIe,nIe,zf,rH,sIe,lIe,d8,iIe,dIe,cIe,Wf,tH,fIe,mIe,c8,gIe,hIe,pIe,Qf,aH,_Ie,uIe,f8,bIe,vIe,TIe,Hf,nH,FIe,CIe,m8,MIe,EIe,yIe,Uf,sH,wIe,AIe,g8,LIe,BIe,xIe,Jf,lH,kIe,RIe,h8,SIe,PIe,$Ie,Yf,iH,IIe,DIe,p8,NIe,jIe,qIe,Kf,dH,GIe,OIe,_8,XIe,VIe,zIe,Zf,cH,WIe,QIe,u8,HIe,UIe,JIe,em,fH,YIe,KIe,b8,ZIe,eDe,oDe,om,mH,rDe,tDe,v8,aDe,nDe,sDe,rm,gH,lDe,iDe,T8,dDe,cDe,fDe,tm,hH,mDe,gDe,F8,hDe,pDe,_De,am,pH,uDe,bDe,C8,vDe,TDe,FDe,nm,_H,CDe,MDe,M8,EDe,yDe,wDe,sm,uH,ADe,LDe,E8,BDe,xDe,kDe,lm,bH,RDe,SDe,y8,PDe,$De,IDe,im,vH,DDe,NDe,w8,jDe,qDe,GDe,dm,TH,ODe,XDe,A8,VDe,zDe,WDe,cm,FH,QDe,HDe,L8,UDe,JDe,YDe,fm,CH,KDe,ZDe,B8,eNe,oNe,rNe,mm,MH,tNe,aNe,x8,nNe,sNe,lNe,gm,EH,iNe,dNe,k8,cNe,fNe,mNe,hm,yH,gNe,hNe,R8,pNe,_Ne,uNe,pm,wH,bNe,vNe,S8,TNe,FNe,CNe,_m,AH,MNe,ENe,P8,yNe,wNe,ANe,um,LH,LNe,BNe,$8,xNe,kNe,RNe,bm,BH,SNe,PNe,I8,$Ne,INe,DNe,vm,xH,NNe,jNe,D8,qNe,GNe,ONe,Tm,kH,XNe,VNe,N8,zNe,WNe,QNe,Fm,RH,HNe,UNe,j8,JNe,YNe,KNe,Cm,SH,ZNe,eje,q8,oje,rje,tje,Mm,PH,aje,nje,G8,sje,lje,ije,Em,$H,dje,cje,O8,fje,mje,gje,ym,IH,hje,pje,X8,_je,uje,bje,wm,DH,vje,Tje,V8,Fje,Cje,Mje,Am,NH,Eje,yje,z8,wje,Aje,Lje,Lm,jH,Bje,xje,W8,kje,Rje,Sje,Bm,qH,Pje,$je,Q8,Ije,Dje,Nje,xm,GH,jje,qje,H8,Gje,Oje,Xje,km,OH,Vje,zje,U8,Wje,Qje,Hje,Rm,XH,Uje,Jje,J8,Yje,Kje,Zje,Sm,VH,eqe,oqe,Y8,rqe,tqe,aqe,Pm,zH,nqe,sqe,K8,lqe,iqe,dqe,$m,WH,cqe,fqe,Z8,mqe,gqe,hqe,Im,QH,pqe,_qe,eB,uqe,bqe,vqe,Dm,HH,Tqe,Fqe,oB,Cqe,Mqe,Eqe,Nm,UH,yqe,wqe,rB,Aqe,Lqe,Bqe,jm,JH,xqe,kqe,tB,Rqe,Sqe,Pqe,qm,YH,$qe,Iqe,aB,Dqe,Nqe,jqe,Gm,KH,qqe,Gqe,nB,Oqe,Xqe,Vqe,Om,ZH,zqe,Wqe,sB,Qqe,Hqe,Uqe,Xm,eU,Jqe,Yqe,lB,Kqe,Zqe,eGe,Vm,oU,oGe,rGe,iB,tGe,aGe,nGe,zm,rU,sGe,lGe,dB,iGe,dGe,cGe,Wm,tU,fGe,mGe,cB,gGe,hGe,pGe,Qm,aU,_Ge,uGe,fB,bGe,vGe,TGe,Hm,nU,FGe,CGe,mB,MGe,EGe,yGe,Um,sU,wGe,AGe,gB,LGe,BGe,xGe,Jm,lU,kGe,RGe,hB,SGe,PGe,$Ge,Ym,iU,IGe,DGe,pB,NGe,jGe,qGe,Km,dU,GGe,OGe,_B,XGe,VGe,zGe,Zm,cU,WGe,QGe,uB,HGe,UGe,JGe,eg,fU,YGe,KGe,bB,ZGe,eOe,oOe,og,mU,rOe,tOe,vB,aOe,nOe,sOe,rg,gU,lOe,iOe,TB,dOe,cOe,fOe,tg,hU,mOe,gOe,FB,hOe,pOe,_Oe,ag,pU,uOe,bOe,CB,vOe,TOe,FOe,ng,_U,COe,MOe,MB,EOe,yOe,wOe,sg,uU,AOe,LOe,EB,BOe,xOe,kOe,lg,bU,ROe,SOe,yB,POe,$Oe,IOe,ig,vU,DOe,NOe,wB,jOe,qOe,GOe,dg,TU,OOe,XOe,AB,VOe,zOe,WOe,cg,FU,QOe,HOe,LB,UOe,JOe,YOe,fg,CU,KOe,ZOe,BB,eXe,oXe,rXe,mg,MU,tXe,aXe,xB,nXe,sXe,lXe,gg,EU,iXe,dXe,kB,cXe,fXe,mXe,hg,yU,gXe,hXe,RB,pXe,_Xe,uXe,pg,wU,bXe,vXe,SB,TXe,FXe,CXe,_g,AU,MXe,EXe,PB,yXe,wXe,AXe,ug,LU,LXe,BXe,$B,xXe,kXe,RXe,bg,BU,SXe,PXe,IB,$Xe,IXe,DXe,vg,xU,NXe,jXe,DB,qXe,GXe,OXe,Tg,kU,XXe,VXe,NB,zXe,WXe,QXe,Fg,RU,HXe,UXe,jB,JXe,YXe,KXe,Cg,SU,ZXe,eVe,qB,oVe,rVe,tVe,Mg,PU,aVe,nVe,GB,sVe,lVe,iVe,Eg,$U,dVe,cVe,OB,fVe,mVe,gVe,yg,IU,hVe,pVe,XB,_Ve,uVe,bVe,wg,DU,vVe,TVe,VB,FVe,CVe,MVe,Ag,NU,EVe,yVe,zB,wVe,AVe,LVe,Lg,jU,BVe,xVe,WB,kVe,RVe,SVe,Bg,qU,PVe,$Ve,QB,IVe,DVe,NVe,xg,GU,jVe,qVe,HB,GVe,OVe,XVe,kg,OU,VVe,zVe,UB,WVe,QVe,HVe,Rg,XU,UVe,JVe,JB,YVe,KVe,ZVe,Sg,VU,eze,oze,YB,rze,tze,aze,Pg,zU,nze,sze,KB,lze,ize,dze,WU,cze,fze,T3,mze,$g,F3,gze,QU,hze,Tke,Wi,Ig,HU,C3,pze,UU,_ze,Fke,Qo,M3,uze,E3,bze,ZB,vze,Tze,Fze,y3,Cze,JU,Mze,Eze,yze,go,w3,wze,YU,Aze,Lze,Oa,Bze,KU,xze,kze,ZU,Rze,Sze,eJ,Pze,$ze,Ize,E,Wn,oJ,Dze,Nze,ex,jze,qze,ox,Gze,Oze,Xze,Qn,rJ,Vze,zze,rx,Wze,Qze,tx,Hze,Uze,Jze,Hn,tJ,Yze,Kze,ax,Zze,eWe,nx,oWe,rWe,tWe,Dg,aJ,aWe,nWe,sx,sWe,lWe,iWe,Un,nJ,dWe,cWe,lx,fWe,mWe,ix,gWe,hWe,pWe,Ng,sJ,_We,uWe,dx,bWe,vWe,TWe,jg,lJ,FWe,CWe,cx,MWe,EWe,yWe,qg,iJ,wWe,AWe,fx,LWe,BWe,xWe,Jn,dJ,kWe,RWe,mx,SWe,PWe,gx,$We,IWe,DWe,Yn,cJ,NWe,jWe,hx,qWe,GWe,px,OWe,XWe,VWe,Kn,fJ,zWe,WWe,_x,QWe,HWe,ux,UWe,JWe,YWe,Gg,mJ,KWe,ZWe,bx,eQe,oQe,rQe,Og,gJ,tQe,aQe,vx,nQe,sQe,lQe,Zn,hJ,iQe,dQe,Tx,cQe,fQe,Fx,mQe,gQe,hQe,Xg,pJ,pQe,_Qe,Cx,uQe,bQe,vQe,es,_J,TQe,FQe,Mx,CQe,MQe,Ex,EQe,yQe,wQe,os,uJ,AQe,LQe,yx,BQe,xQe,wx,kQe,RQe,SQe,rs,bJ,PQe,$Qe,Ax,IQe,DQe,vJ,NQe,jQe,qQe,Vg,TJ,GQe,OQe,Lx,XQe,VQe,zQe,ts,FJ,WQe,QQe,Bx,HQe,UQe,xx,JQe,YQe,KQe,zg,CJ,ZQe,eHe,kx,oHe,rHe,tHe,as,MJ,aHe,nHe,Rx,sHe,lHe,Sx,iHe,dHe,cHe,ns,EJ,fHe,mHe,Px,gHe,hHe,$x,pHe,_He,uHe,ss,yJ,bHe,vHe,Ix,THe,FHe,Dx,CHe,MHe,EHe,Wg,wJ,yHe,wHe,Nx,AHe,LHe,BHe,ls,AJ,xHe,kHe,jx,RHe,SHe,qx,PHe,$He,IHe,Qg,LJ,DHe,NHe,Gx,jHe,qHe,GHe,is,BJ,OHe,XHe,Ox,VHe,zHe,Xx,WHe,QHe,HHe,ds,xJ,UHe,JHe,Vx,YHe,KHe,zx,ZHe,eUe,oUe,cs,kJ,rUe,tUe,Wx,aUe,nUe,Qx,sUe,lUe,iUe,fs,RJ,dUe,cUe,Hx,fUe,mUe,Ux,gUe,hUe,pUe,Hg,SJ,_Ue,uUe,Jx,bUe,vUe,TUe,ms,PJ,FUe,CUe,Yx,MUe,EUe,Kx,yUe,wUe,AUe,gs,$J,LUe,BUe,Zx,xUe,kUe,ek,RUe,SUe,PUe,hs,IJ,$Ue,IUe,ok,DUe,NUe,rk,jUe,qUe,GUe,ps,DJ,OUe,XUe,tk,VUe,zUe,ak,WUe,QUe,HUe,_s,NJ,UUe,JUe,nk,YUe,KUe,sk,ZUe,eJe,oJe,us,jJ,rJe,tJe,lk,aJe,nJe,ik,sJe,lJe,iJe,Ug,qJ,dJe,cJe,dk,fJe,mJe,gJe,bs,GJ,hJe,pJe,ck,_Je,uJe,fk,bJe,vJe,TJe,Jg,OJ,FJe,CJe,mk,MJe,EJe,yJe,Yg,XJ,wJe,AJe,gk,LJe,BJe,xJe,vs,VJ,kJe,RJe,hk,SJe,PJe,pk,$Je,IJe,DJe,Ts,zJ,NJe,jJe,_k,qJe,GJe,uk,OJe,XJe,VJe,Kg,WJ,zJe,WJe,bk,QJe,HJe,UJe,Fs,QJ,JJe,YJe,vk,KJe,ZJe,Tk,eYe,oYe,rYe,Cs,HJ,tYe,aYe,Fk,nYe,sYe,Ck,lYe,iYe,dYe,Ms,UJ,cYe,fYe,Mk,mYe,gYe,Ek,hYe,pYe,_Ye,Es,JJ,uYe,bYe,yk,vYe,TYe,wk,FYe,CYe,MYe,ys,YJ,EYe,yYe,Ak,wYe,AYe,Lk,LYe,BYe,xYe,Zg,KJ,kYe,RYe,Bk,SYe,PYe,$Ye,eh,ZJ,IYe,DYe,xk,NYe,jYe,qYe,oh,eY,GYe,OYe,kk,XYe,VYe,zYe,rh,oY,WYe,QYe,Rk,HYe,UYe,JYe,ws,rY,YYe,KYe,Sk,ZYe,eKe,Pk,oKe,rKe,tKe,th,tY,aKe,nKe,$k,sKe,lKe,iKe,As,aY,dKe,cKe,Ik,fKe,mKe,Dk,gKe,hKe,pKe,Ls,nY,_Ke,uKe,Nk,bKe,vKe,jk,TKe,FKe,CKe,Bs,sY,MKe,EKe,qk,yKe,wKe,Gk,AKe,LKe,BKe,xs,lY,xKe,kKe,Ok,RKe,SKe,Xk,PKe,$Ke,IKe,ks,iY,DKe,NKe,Vk,jKe,qKe,zk,GKe,OKe,XKe,Rs,dY,VKe,zKe,Wk,WKe,QKe,Qk,HKe,UKe,JKe,ah,cY,YKe,KKe,Hk,ZKe,eZe,oZe,nh,fY,rZe,tZe,Uk,aZe,nZe,sZe,Ss,mY,lZe,iZe,Jk,dZe,cZe,Yk,fZe,mZe,gZe,Ps,gY,hZe,pZe,Kk,_Ze,uZe,Zk,bZe,vZe,TZe,$s,hY,FZe,CZe,eR,MZe,EZe,oR,yZe,wZe,AZe,sh,pY,LZe,BZe,rR,xZe,kZe,RZe,lh,_Y,SZe,PZe,tR,$Ze,IZe,DZe,ih,uY,NZe,jZe,aR,qZe,GZe,OZe,dh,bY,XZe,VZe,nR,zZe,WZe,QZe,Is,vY,HZe,UZe,sR,JZe,YZe,lR,KZe,ZZe,eeo,ch,TY,oeo,reo,iR,teo,aeo,neo,fh,FY,seo,leo,dR,ieo,deo,ceo,Ds,CY,feo,meo,cR,geo,heo,fR,peo,_eo,ueo,Ns,MY,beo,veo,mR,Teo,Feo,gR,Ceo,Meo,Eeo,EY,yeo,weo,A3,Aeo,mh,L3,Leo,yY,Beo,Cke,Qi,gh,wY,B3,xeo,AY,keo,Mke,Ho,x3,Reo,k3,Seo,hR,Peo,$eo,Ieo,R3,Deo,LY,Neo,jeo,qeo,$e,S3,Geo,BY,Oeo,Xeo,Xa,Veo,xY,zeo,Weo,kY,Qeo,Heo,RY,Ueo,Jeo,Yeo,re,hh,SY,Keo,Zeo,pR,eoo,ooo,roo,ph,PY,too,aoo,_R,noo,soo,loo,_h,$Y,ioo,doo,uR,coo,foo,moo,uh,IY,goo,hoo,bR,poo,_oo,uoo,bh,DY,boo,voo,vR,Too,Foo,Coo,vh,NY,Moo,Eoo,TR,yoo,woo,Aoo,Th,jY,Loo,Boo,FR,xoo,koo,Roo,Fh,qY,Soo,Poo,CR,$oo,Ioo,Doo,Ch,GY,Noo,joo,MR,qoo,Goo,Ooo,Mh,OY,Xoo,Voo,ER,zoo,Woo,Qoo,Eh,XY,Hoo,Uoo,yR,Joo,Yoo,Koo,yh,VY,Zoo,ero,wR,oro,rro,tro,wh,zY,aro,nro,AR,sro,lro,iro,Ah,WY,dro,cro,LR,fro,mro,gro,Lh,QY,hro,pro,BR,_ro,uro,bro,Bh,HY,vro,Tro,xR,Fro,Cro,Mro,xh,UY,Ero,yro,kR,wro,Aro,Lro,kh,JY,Bro,xro,RR,kro,Rro,Sro,Rh,Pro,YY,$ro,Iro,P3,Dro,Sh,$3,Nro,KY,jro,Eke,Hi,Ph,ZY,I3,qro,eK,Gro,yke,Uo,D3,Oro,N3,Xro,SR,Vro,zro,Wro,j3,Qro,oK,Hro,Uro,Jro,Ie,q3,Yro,rK,Kro,Zro,Ui,eto,tK,oto,rto,aK,tto,ato,nto,xe,$h,nK,sto,lto,PR,ito,dto,cto,Ih,sK,fto,mto,$R,gto,hto,pto,Dh,lK,_to,uto,IR,bto,vto,Tto,Nh,iK,Fto,Cto,DR,Mto,Eto,yto,jh,dK,wto,Ato,NR,Lto,Bto,xto,qh,cK,kto,Rto,jR,Sto,Pto,$to,Gh,fK,Ito,Dto,qR,Nto,jto,qto,Oh,mK,Gto,Oto,GR,Xto,Vto,zto,Xh,Wto,gK,Qto,Hto,G3,Uto,Vh,O3,Jto,hK,Yto,wke,Ji,zh,pK,X3,Kto,_K,Zto,Ake,Jo,V3,eao,Yi,oao,uK,rao,tao,bK,aao,nao,sao,z3,lao,vK,iao,dao,cao,Vr,W3,fao,TK,mao,gao,Ki,hao,FK,pao,_ao,CK,uao,bao,vao,MK,Tao,Fao,Q3,Cao,De,H3,Mao,EK,Eao,yao,Va,wao,yK,Aao,Lao,wK,Bao,xao,AK,kao,Rao,Sao,F,Wh,LK,Pao,$ao,OR,Iao,Dao,Nao,Qh,BK,jao,qao,XR,Gao,Oao,Xao,Hh,xK,Vao,zao,VR,Wao,Qao,Hao,Uh,kK,Uao,Jao,zR,Yao,Kao,Zao,Jh,RK,eno,ono,WR,rno,tno,ano,Yh,SK,nno,sno,QR,lno,ino,dno,Kh,PK,cno,fno,HR,mno,gno,hno,Zh,$K,pno,_no,UR,uno,bno,vno,ep,IK,Tno,Fno,JR,Cno,Mno,Eno,op,DK,yno,wno,YR,Ano,Lno,Bno,rp,NK,xno,kno,KR,Rno,Sno,Pno,tp,jK,$no,Ino,ZR,Dno,Nno,jno,ap,qK,qno,Gno,eS,Ono,Xno,Vno,np,GK,zno,Wno,oS,Qno,Hno,Uno,sp,OK,Jno,Yno,rS,Kno,Zno,eso,lp,XK,oso,rso,tS,tso,aso,nso,ip,VK,sso,lso,aS,iso,dso,cso,dp,zK,fso,mso,nS,gso,hso,pso,cp,WK,_so,uso,sS,bso,vso,Tso,fp,QK,Fso,Cso,lS,Mso,Eso,yso,mp,HK,wso,Aso,iS,Lso,Bso,xso,gp,UK,kso,Rso,dS,Sso,Pso,$so,hp,JK,Iso,Dso,cS,Nso,jso,qso,pp,YK,Gso,Oso,fS,Xso,Vso,zso,_p,KK,Wso,Qso,mS,Hso,Uso,Jso,up,ZK,Yso,Kso,gS,Zso,elo,olo,bp,eZ,rlo,tlo,hS,alo,nlo,slo,vp,oZ,llo,ilo,pS,dlo,clo,flo,Tp,rZ,mlo,glo,_S,hlo,plo,_lo,js,tZ,ulo,blo,uS,vlo,Tlo,bS,Flo,Clo,Mlo,Fp,aZ,Elo,ylo,vS,wlo,Alo,Llo,Cp,nZ,Blo,xlo,TS,klo,Rlo,Slo,Mp,sZ,Plo,$lo,FS,Ilo,Dlo,Nlo,Ep,lZ,jlo,qlo,CS,Glo,Olo,Xlo,yp,iZ,Vlo,zlo,MS,Wlo,Qlo,Hlo,wp,dZ,Ulo,Jlo,ES,Ylo,Klo,Zlo,Ap,cZ,eio,oio,yS,rio,tio,aio,Lp,fZ,nio,sio,wS,lio,iio,dio,Bp,mZ,cio,fio,AS,mio,gio,hio,xp,gZ,pio,_io,LS,uio,bio,vio,kp,hZ,Tio,Fio,BS,Cio,Mio,Eio,Rp,pZ,yio,wio,xS,Aio,Lio,Bio,Sp,_Z,xio,kio,kS,Rio,Sio,Pio,Pp,uZ,$io,Iio,RS,Dio,Nio,jio,$p,bZ,qio,Gio,SS,Oio,Xio,Vio,Ip,vZ,zio,Wio,PS,Qio,Hio,Uio,Dp,TZ,Jio,Yio,$S,Kio,Zio,edo,Np,FZ,odo,rdo,IS,tdo,ado,ndo,jp,CZ,sdo,ldo,DS,ido,ddo,cdo,qp,MZ,fdo,mdo,NS,gdo,hdo,pdo,Gp,EZ,_do,udo,jS,bdo,vdo,Tdo,Op,yZ,Fdo,Cdo,qS,Mdo,Edo,ydo,Xp,wZ,wdo,Ado,GS,Ldo,Bdo,xdo,Vp,AZ,kdo,Rdo,OS,Sdo,Pdo,$do,zp,LZ,Ido,Ddo,XS,Ndo,jdo,qdo,Wp,BZ,Gdo,Odo,VS,Xdo,Vdo,zdo,Qp,xZ,Wdo,Qdo,zS,Hdo,Udo,Jdo,Hp,kZ,Ydo,Kdo,WS,Zdo,eco,oco,Up,RZ,rco,tco,QS,aco,nco,sco,Jp,SZ,lco,ico,HS,dco,cco,fco,Yp,PZ,mco,gco,US,hco,pco,_co,Kp,$Z,uco,bco,JS,vco,Tco,Fco,Zp,IZ,Cco,Mco,YS,Eco,yco,wco,e_,DZ,Aco,Lco,KS,Bco,xco,kco,o_,NZ,Rco,Sco,ZS,Pco,$co,Ico,r_,jZ,Dco,Nco,eP,jco,qco,Gco,t_,qZ,Oco,Xco,oP,Vco,zco,Wco,a_,GZ,Qco,Hco,rP,Uco,Jco,Yco,n_,OZ,Kco,Zco,tP,efo,ofo,rfo,s_,XZ,tfo,afo,aP,nfo,sfo,lfo,l_,VZ,ifo,dfo,nP,cfo,ffo,mfo,i_,zZ,gfo,hfo,sP,pfo,_fo,ufo,d_,WZ,bfo,vfo,lP,Tfo,Ffo,Cfo,c_,QZ,Mfo,Efo,iP,yfo,wfo,Afo,f_,HZ,Lfo,Bfo,dP,xfo,kfo,Rfo,m_,UZ,Sfo,Pfo,cP,$fo,Ifo,Dfo,g_,JZ,Nfo,jfo,fP,qfo,Gfo,Ofo,h_,YZ,Xfo,Vfo,mP,zfo,Wfo,Qfo,p_,KZ,Hfo,Ufo,gP,Jfo,Yfo,Kfo,__,ZZ,Zfo,emo,hP,omo,rmo,tmo,u_,eee,amo,nmo,pP,smo,lmo,imo,b_,oee,dmo,cmo,_P,fmo,mmo,gmo,v_,ree,hmo,pmo,uP,_mo,umo,bmo,T_,tee,vmo,Tmo,bP,Fmo,Cmo,Mmo,F_,aee,Emo,ymo,vP,wmo,Amo,Lmo,C_,nee,Bmo,xmo,TP,kmo,Rmo,Smo,M_,see,Pmo,$mo,FP,Imo,Dmo,Nmo,E_,lee,jmo,qmo,CP,Gmo,Omo,Xmo,y_,iee,Vmo,zmo,MP,Wmo,Qmo,Hmo,w_,dee,Umo,Jmo,EP,Ymo,Kmo,Zmo,A_,cee,ego,ogo,yP,rgo,tgo,ago,L_,fee,ngo,sgo,wP,lgo,igo,dgo,B_,cgo,mee,fgo,mgo,gee,ggo,hgo,hee,pgo,_go,U3,Lke,Zi,x_,pee,J3,ugo,_ee,bgo,Bke,Yo,Y3,vgo,ed,Tgo,uee,Fgo,Cgo,bee,Mgo,Ego,ygo,K3,wgo,vee,Ago,Lgo,Bgo,zr,Z3,xgo,Tee,kgo,Rgo,od,Sgo,Fee,Pgo,$go,Cee,Igo,Dgo,Ngo,Mee,jgo,qgo,ey,Ggo,Ne,oy,Ogo,Eee,Xgo,Vgo,za,zgo,yee,Wgo,Qgo,wee,Hgo,Ugo,Aee,Jgo,Ygo,Kgo,k,k_,Lee,Zgo,eho,AP,oho,rho,tho,R_,Bee,aho,nho,LP,sho,lho,iho,S_,xee,dho,cho,BP,fho,mho,gho,P_,kee,hho,pho,xP,_ho,uho,bho,$_,Ree,vho,Tho,kP,Fho,Cho,Mho,I_,See,Eho,yho,RP,who,Aho,Lho,D_,Pee,Bho,xho,SP,kho,Rho,Sho,N_,$ee,Pho,$ho,PP,Iho,Dho,Nho,j_,Iee,jho,qho,$P,Gho,Oho,Xho,q_,Dee,Vho,zho,IP,Who,Qho,Hho,G_,Nee,Uho,Jho,DP,Yho,Kho,Zho,O_,jee,epo,opo,NP,rpo,tpo,apo,X_,qee,npo,spo,jP,lpo,ipo,dpo,V_,Gee,cpo,fpo,qP,mpo,gpo,hpo,z_,Oee,ppo,_po,GP,upo,bpo,vpo,W_,Xee,Tpo,Fpo,OP,Cpo,Mpo,Epo,Q_,Vee,ypo,wpo,XP,Apo,Lpo,Bpo,H_,zee,xpo,kpo,VP,Rpo,Spo,Ppo,U_,Wee,$po,Ipo,zP,Dpo,Npo,jpo,J_,Qee,qpo,Gpo,WP,Opo,Xpo,Vpo,Y_,Hee,zpo,Wpo,QP,Qpo,Hpo,Upo,K_,Uee,Jpo,Ypo,HP,Kpo,Zpo,e_o,Z_,Jee,o_o,r_o,UP,t_o,a_o,n_o,eu,Yee,s_o,l_o,JP,i_o,d_o,c_o,ou,Kee,f_o,m_o,YP,g_o,h_o,p_o,ru,Zee,__o,u_o,KP,b_o,v_o,T_o,tu,eoe,F_o,C_o,ZP,M_o,E_o,y_o,au,ooe,w_o,A_o,e$,L_o,B_o,x_o,nu,roe,k_o,R_o,o$,S_o,P_o,$_o,su,toe,I_o,D_o,r$,N_o,j_o,q_o,lu,aoe,G_o,O_o,t$,X_o,V_o,z_o,iu,noe,W_o,Q_o,a$,H_o,U_o,J_o,du,soe,Y_o,K_o,n$,Z_o,euo,ouo,cu,loe,ruo,tuo,s$,auo,nuo,suo,fu,ioe,luo,iuo,l$,duo,cuo,fuo,mu,doe,muo,guo,i$,huo,puo,_uo,gu,coe,uuo,buo,d$,vuo,Tuo,Fuo,hu,foe,Cuo,Muo,c$,Euo,yuo,wuo,pu,moe,Auo,Luo,f$,Buo,xuo,kuo,_u,Ruo,goe,Suo,Puo,hoe,$uo,Iuo,poe,Duo,Nuo,ry,xke,rd,uu,_oe,ty,juo,uoe,quo,kke,Ko,ay,Guo,td,Ouo,boe,Xuo,Vuo,voe,zuo,Wuo,Quo,ny,Huo,Toe,Uuo,Juo,Yuo,Wr,sy,Kuo,Foe,Zuo,e1o,ad,o1o,Coe,r1o,t1o,Moe,a1o,n1o,s1o,Eoe,l1o,i1o,ly,d1o,je,iy,c1o,yoe,f1o,m1o,Wa,g1o,woe,h1o,p1o,Aoe,_1o,u1o,Loe,b1o,v1o,T1o,$,bu,Boe,F1o,C1o,m$,M1o,E1o,y1o,vu,xoe,w1o,A1o,g$,L1o,B1o,x1o,Tu,koe,k1o,R1o,h$,S1o,P1o,$1o,Fu,Roe,I1o,D1o,p$,N1o,j1o,q1o,Cu,Soe,G1o,O1o,_$,X1o,V1o,z1o,Mu,Poe,W1o,Q1o,u$,H1o,U1o,J1o,Eu,$oe,Y1o,K1o,b$,Z1o,e9o,o9o,yu,Ioe,r9o,t9o,v$,a9o,n9o,s9o,wu,Doe,l9o,i9o,T$,d9o,c9o,f9o,Au,Noe,m9o,g9o,F$,h9o,p9o,_9o,Lu,joe,u9o,b9o,C$,v9o,T9o,F9o,Bu,qoe,C9o,M9o,M$,E9o,y9o,w9o,xu,Goe,A9o,L9o,E$,B9o,x9o,k9o,ku,Ooe,R9o,S9o,y$,P9o,$9o,I9o,Ru,Xoe,D9o,N9o,w$,j9o,q9o,G9o,Su,Voe,O9o,X9o,A$,V9o,z9o,W9o,Pu,zoe,Q9o,H9o,L$,U9o,J9o,Y9o,$u,Woe,K9o,Z9o,B$,ebo,obo,rbo,Iu,Qoe,tbo,abo,x$,nbo,sbo,lbo,Du,Hoe,ibo,dbo,k$,cbo,fbo,mbo,Nu,Uoe,gbo,hbo,R$,pbo,_bo,ubo,ju,Joe,bbo,vbo,S$,Tbo,Fbo,Cbo,qu,Yoe,Mbo,Ebo,P$,ybo,wbo,Abo,Gu,Koe,Lbo,Bbo,$$,xbo,kbo,Rbo,Ou,Zoe,Sbo,Pbo,I$,$bo,Ibo,Dbo,Xu,ere,Nbo,jbo,D$,qbo,Gbo,Obo,Vu,ore,Xbo,Vbo,N$,zbo,Wbo,Qbo,zu,rre,Hbo,Ubo,j$,Jbo,Ybo,Kbo,Wu,tre,Zbo,e5o,q$,o5o,r5o,t5o,Qu,are,a5o,n5o,G$,s5o,l5o,i5o,Hu,nre,d5o,c5o,O$,f5o,m5o,g5o,Uu,sre,h5o,p5o,X$,_5o,u5o,b5o,Ju,lre,v5o,T5o,V$,F5o,C5o,M5o,Yu,ire,E5o,y5o,z$,w5o,A5o,L5o,Ku,dre,B5o,x5o,W$,k5o,R5o,S5o,Zu,P5o,cre,$5o,I5o,fre,D5o,N5o,mre,j5o,q5o,dy,Rke,nd,e1,gre,cy,G5o,hre,O5o,Ske,Zo,fy,X5o,sd,V5o,pre,z5o,W5o,_re,Q5o,H5o,U5o,my,J5o,ure,Y5o,K5o,Z5o,Qr,gy,e2o,bre,o2o,r2o,ld,t2o,vre,a2o,n2o,Tre,s2o,l2o,i2o,Fre,d2o,c2o,hy,f2o,qe,py,m2o,Cre,g2o,h2o,Qa,p2o,Mre,_2o,u2o,Ere,b2o,v2o,yre,T2o,F2o,C2o,I,o1,wre,M2o,E2o,Q$,y2o,w2o,A2o,r1,Are,L2o,B2o,H$,x2o,k2o,R2o,t1,Lre,S2o,P2o,U$,$2o,I2o,D2o,a1,Bre,N2o,j2o,J$,q2o,G2o,O2o,n1,xre,X2o,V2o,Y$,z2o,W2o,Q2o,s1,kre,H2o,U2o,K$,J2o,Y2o,K2o,l1,Rre,Z2o,evo,Z$,ovo,rvo,tvo,i1,Sre,avo,nvo,eI,svo,lvo,ivo,d1,Pre,dvo,cvo,oI,fvo,mvo,gvo,c1,$re,hvo,pvo,rI,_vo,uvo,bvo,f1,Ire,vvo,Tvo,tI,Fvo,Cvo,Mvo,m1,Dre,Evo,yvo,aI,wvo,Avo,Lvo,g1,Nre,Bvo,xvo,nI,kvo,Rvo,Svo,h1,jre,Pvo,$vo,sI,Ivo,Dvo,Nvo,p1,qre,jvo,qvo,lI,Gvo,Ovo,Xvo,_1,Gre,Vvo,zvo,iI,Wvo,Qvo,Hvo,u1,Ore,Uvo,Jvo,dI,Yvo,Kvo,Zvo,b1,Xre,eTo,oTo,cI,rTo,tTo,aTo,v1,Vre,nTo,sTo,fI,lTo,iTo,dTo,T1,zre,cTo,fTo,mI,mTo,gTo,hTo,F1,Wre,pTo,_To,gI,uTo,bTo,vTo,C1,Qre,TTo,FTo,hI,CTo,MTo,ETo,M1,Hre,yTo,wTo,pI,ATo,LTo,BTo,E1,Ure,xTo,kTo,_I,RTo,STo,PTo,y1,Jre,$To,ITo,uI,DTo,NTo,jTo,w1,Yre,qTo,GTo,bI,OTo,XTo,VTo,A1,Kre,zTo,WTo,vI,QTo,HTo,UTo,L1,Zre,JTo,YTo,TI,KTo,ZTo,eFo,B1,ete,oFo,rFo,FI,tFo,aFo,nFo,x1,ote,sFo,lFo,CI,iFo,dFo,cFo,k1,rte,fFo,mFo,tte,gFo,hFo,pFo,R1,ate,_Fo,uFo,MI,bFo,vFo,TFo,S1,nte,FFo,CFo,EI,MFo,EFo,yFo,P1,ste,wFo,AFo,yI,LFo,BFo,xFo,$1,lte,kFo,RFo,wI,SFo,PFo,$Fo,I1,IFo,ite,DFo,NFo,dte,jFo,qFo,cte,GFo,OFo,_y,Pke,id,D1,fte,uy,XFo,mte,VFo,$ke,er,by,zFo,dd,WFo,gte,QFo,HFo,hte,UFo,JFo,YFo,vy,KFo,pte,ZFo,eCo,oCo,Hr,Ty,rCo,_te,tCo,aCo,cd,nCo,ute,sCo,lCo,bte,iCo,dCo,cCo,vte,fCo,mCo,Fy,gCo,Ge,Cy,hCo,Tte,pCo,_Co,Ha,uCo,Fte,bCo,vCo,Cte,TCo,FCo,Mte,CCo,MCo,ECo,se,N1,Ete,yCo,wCo,AI,ACo,LCo,BCo,j1,yte,xCo,kCo,LI,RCo,SCo,PCo,q1,wte,$Co,ICo,BI,DCo,NCo,jCo,G1,Ate,qCo,GCo,xI,OCo,XCo,VCo,O1,Lte,zCo,WCo,kI,QCo,HCo,UCo,X1,Bte,JCo,YCo,RI,KCo,ZCo,eMo,V1,xte,oMo,rMo,SI,tMo,aMo,nMo,z1,kte,sMo,lMo,PI,iMo,dMo,cMo,W1,Rte,fMo,mMo,$I,gMo,hMo,pMo,Q1,Ste,_Mo,uMo,II,bMo,vMo,TMo,H1,Pte,FMo,CMo,DI,MMo,EMo,yMo,U1,$te,wMo,AMo,NI,LMo,BMo,xMo,J1,Ite,kMo,RMo,jI,SMo,PMo,$Mo,Y1,Dte,IMo,DMo,qI,NMo,jMo,qMo,K1,Nte,GMo,OMo,GI,XMo,VMo,zMo,Z1,jte,WMo,QMo,OI,HMo,UMo,JMo,e9,YMo,qte,KMo,ZMo,Gte,e4o,o4o,Ote,r4o,t4o,My,Ike,fd,o9,Xte,Ey,a4o,Vte,n4o,Dke,or,yy,s4o,md,l4o,zte,i4o,d4o,Wte,c4o,f4o,m4o,wy,g4o,Qte,h4o,p4o,_4o,Ur,Ay,u4o,Hte,b4o,v4o,gd,T4o,Ute,F4o,C4o,Jte,M4o,E4o,y4o,Yte,w4o,A4o,Ly,L4o,Oe,By,B4o,Kte,x4o,k4o,Ua,R4o,Zte,S4o,P4o,eae,$4o,I4o,oae,D4o,N4o,j4o,A,r9,rae,q4o,G4o,XI,O4o,X4o,V4o,t9,tae,z4o,W4o,VI,Q4o,H4o,U4o,a9,aae,J4o,Y4o,zI,K4o,Z4o,eEo,n9,nae,oEo,rEo,WI,tEo,aEo,nEo,s9,sae,sEo,lEo,QI,iEo,dEo,cEo,l9,lae,fEo,mEo,HI,gEo,hEo,pEo,i9,iae,_Eo,uEo,UI,bEo,vEo,TEo,d9,dae,FEo,CEo,JI,MEo,EEo,yEo,c9,cae,wEo,AEo,YI,LEo,BEo,xEo,f9,fae,kEo,REo,KI,SEo,PEo,$Eo,m9,mae,IEo,DEo,ZI,NEo,jEo,qEo,g9,gae,GEo,OEo,eD,XEo,VEo,zEo,h9,hae,WEo,QEo,oD,HEo,UEo,JEo,p9,pae,YEo,KEo,rD,ZEo,e3o,o3o,_9,_ae,r3o,t3o,tD,a3o,n3o,s3o,u9,uae,l3o,i3o,aD,d3o,c3o,f3o,b9,bae,m3o,g3o,nD,h3o,p3o,_3o,v9,vae,u3o,b3o,sD,v3o,T3o,F3o,T9,Tae,C3o,M3o,lD,E3o,y3o,w3o,F9,Fae,A3o,L3o,iD,B3o,x3o,k3o,C9,Cae,R3o,S3o,dD,P3o,$3o,I3o,M9,Mae,D3o,N3o,cD,j3o,q3o,G3o,E9,Eae,O3o,X3o,fD,V3o,z3o,W3o,y9,yae,Q3o,H3o,mD,U3o,J3o,Y3o,w9,wae,K3o,Z3o,gD,eyo,oyo,ryo,A9,Aae,tyo,ayo,hD,nyo,syo,lyo,L9,Lae,iyo,dyo,pD,cyo,fyo,myo,B9,Bae,gyo,hyo,_D,pyo,_yo,uyo,x9,xae,byo,vyo,uD,Tyo,Fyo,Cyo,k9,kae,Myo,Eyo,bD,yyo,wyo,Ayo,R9,Rae,Lyo,Byo,vD,xyo,kyo,Ryo,S9,Sae,Syo,Pyo,TD,$yo,Iyo,Dyo,P9,Pae,Nyo,jyo,FD,qyo,Gyo,Oyo,$9,$ae,Xyo,Vyo,CD,zyo,Wyo,Qyo,I9,Iae,Hyo,Uyo,MD,Jyo,Yyo,Kyo,D9,Dae,Zyo,ewo,ED,owo,rwo,two,N9,Nae,awo,nwo,yD,swo,lwo,iwo,j9,jae,dwo,cwo,wD,fwo,mwo,gwo,q9,qae,hwo,pwo,AD,_wo,uwo,bwo,G9,Gae,vwo,Two,LD,Fwo,Cwo,Mwo,O9,Oae,Ewo,ywo,BD,wwo,Awo,Lwo,X9,Xae,Bwo,xwo,xD,kwo,Rwo,Swo,V9,Vae,Pwo,$wo,kD,Iwo,Dwo,Nwo,z9,zae,jwo,qwo,RD,Gwo,Owo,Xwo,W9,Wae,Vwo,zwo,SD,Wwo,Qwo,Hwo,Q9,Qae,Uwo,Jwo,PD,Ywo,Kwo,Zwo,H9,e6o,Hae,o6o,r6o,Uae,t6o,a6o,Jae,n6o,s6o,xy,Nke,hd,U9,Yae,ky,l6o,Kae,i6o,jke,rr,Ry,d6o,pd,c6o,Zae,f6o,m6o,ene,g6o,h6o,p6o,Sy,_6o,one,u6o,b6o,v6o,Jr,Py,T6o,rne,F6o,C6o,_d,M6o,tne,E6o,y6o,ane,w6o,A6o,L6o,nne,B6o,x6o,$y,k6o,Xe,Iy,R6o,sne,S6o,P6o,Ja,$6o,lne,I6o,D6o,ine,N6o,j6o,dne,q6o,G6o,O6o,G,J9,cne,X6o,V6o,$D,z6o,W6o,Q6o,Y9,fne,H6o,U6o,ID,J6o,Y6o,K6o,K9,mne,Z6o,eAo,DD,oAo,rAo,tAo,Z9,gne,aAo,nAo,ND,sAo,lAo,iAo,eb,hne,dAo,cAo,jD,fAo,mAo,gAo,ob,pne,hAo,pAo,qD,_Ao,uAo,bAo,rb,_ne,vAo,TAo,GD,FAo,CAo,MAo,tb,une,EAo,yAo,OD,wAo,AAo,LAo,ab,bne,BAo,xAo,XD,kAo,RAo,SAo,nb,vne,PAo,$Ao,VD,IAo,DAo,NAo,sb,Tne,jAo,qAo,zD,GAo,OAo,XAo,lb,Fne,VAo,zAo,WD,WAo,QAo,HAo,ib,Cne,UAo,JAo,QD,YAo,KAo,ZAo,db,Mne,e0o,o0o,HD,r0o,t0o,a0o,cb,Ene,n0o,s0o,UD,l0o,i0o,d0o,fb,yne,c0o,f0o,JD,m0o,g0o,h0o,mb,wne,p0o,_0o,YD,u0o,b0o,v0o,gb,Ane,T0o,F0o,KD,C0o,M0o,E0o,hb,Lne,y0o,w0o,ZD,A0o,L0o,B0o,pb,Bne,x0o,k0o,eN,R0o,S0o,P0o,_b,xne,$0o,I0o,oN,D0o,N0o,j0o,ub,kne,q0o,G0o,rN,O0o,X0o,V0o,bb,Rne,z0o,W0o,tN,Q0o,H0o,U0o,vb,Sne,J0o,Y0o,aN,K0o,Z0o,eLo,Tb,Pne,oLo,rLo,nN,tLo,aLo,nLo,Fb,$ne,sLo,lLo,sN,iLo,dLo,cLo,Cb,Ine,fLo,mLo,lN,gLo,hLo,pLo,Mb,Dne,_Lo,uLo,iN,bLo,vLo,TLo,Eb,FLo,Nne,CLo,MLo,jne,ELo,yLo,qne,wLo,ALo,Dy,qke,ud,yb,Gne,Ny,LLo,One,BLo,Gke,tr,jy,xLo,bd,kLo,Xne,RLo,SLo,Vne,PLo,$Lo,ILo,qy,DLo,zne,NLo,jLo,qLo,Yr,Gy,GLo,Wne,OLo,XLo,vd,VLo,Qne,zLo,WLo,Hne,QLo,HLo,ULo,Une,JLo,YLo,Oy,KLo,Ve,Xy,ZLo,Jne,e7o,o7o,Ya,r7o,Yne,t7o,a7o,Kne,n7o,s7o,Zne,l7o,i7o,d7o,da,wb,ese,c7o,f7o,dN,m7o,g7o,h7o,Ab,ose,p7o,_7o,cN,u7o,b7o,v7o,Lb,rse,T7o,F7o,fN,C7o,M7o,E7o,Bb,tse,y7o,w7o,mN,A7o,L7o,B7o,xb,ase,x7o,k7o,gN,R7o,S7o,P7o,kb,$7o,nse,I7o,D7o,sse,N7o,j7o,lse,q7o,G7o,Vy,Oke,Td,Rb,ise,zy,O7o,dse,X7o,Xke,ar,Wy,V7o,Fd,z7o,cse,W7o,Q7o,fse,H7o,U7o,J7o,Qy,Y7o,mse,K7o,Z7o,e8o,Kr,Hy,o8o,gse,r8o,t8o,Cd,a8o,hse,n8o,s8o,pse,l8o,i8o,d8o,_se,c8o,f8o,Uy,m8o,ze,Jy,g8o,use,h8o,p8o,Ka,_8o,bse,u8o,b8o,vse,v8o,T8o,Tse,F8o,C8o,M8o,j,Sb,Fse,E8o,y8o,hN,w8o,A8o,L8o,Pb,Cse,B8o,x8o,pN,k8o,R8o,S8o,$b,Mse,P8o,$8o,_N,I8o,D8o,N8o,Ib,Ese,j8o,q8o,uN,G8o,O8o,X8o,Db,yse,V8o,z8o,bN,W8o,Q8o,H8o,Nb,wse,U8o,J8o,vN,Y8o,K8o,Z8o,jb,Ase,eBo,oBo,TN,rBo,tBo,aBo,qb,Lse,nBo,sBo,FN,lBo,iBo,dBo,Gb,Bse,cBo,fBo,CN,mBo,gBo,hBo,Ob,xse,pBo,_Bo,MN,uBo,bBo,vBo,Xb,kse,TBo,FBo,EN,CBo,MBo,EBo,Vb,Rse,yBo,wBo,yN,ABo,LBo,BBo,zb,Sse,xBo,kBo,wN,RBo,SBo,PBo,Wb,Pse,$Bo,IBo,AN,DBo,NBo,jBo,Qb,$se,qBo,GBo,LN,OBo,XBo,VBo,Hb,Ise,zBo,WBo,BN,QBo,HBo,UBo,Ub,Dse,JBo,YBo,xN,KBo,ZBo,exo,Jb,Nse,oxo,rxo,kN,txo,axo,nxo,Yb,jse,sxo,lxo,RN,ixo,dxo,cxo,Kb,qse,fxo,mxo,SN,gxo,hxo,pxo,Zb,Gse,_xo,uxo,PN,bxo,vxo,Txo,e5,Ose,Fxo,Cxo,$N,Mxo,Exo,yxo,o5,Xse,wxo,Axo,IN,Lxo,Bxo,xxo,r5,Vse,kxo,Rxo,DN,Sxo,Pxo,$xo,t5,zse,Ixo,Dxo,NN,Nxo,jxo,qxo,a5,Wse,Gxo,Oxo,jN,Xxo,Vxo,zxo,n5,Qse,Wxo,Qxo,qN,Hxo,Uxo,Jxo,s5,Hse,Yxo,Kxo,GN,Zxo,eko,oko,l5,Use,rko,tko,ON,ako,nko,sko,i5,Jse,lko,iko,XN,dko,cko,fko,d5,Yse,mko,gko,VN,hko,pko,_ko,c5,Kse,uko,bko,zN,vko,Tko,Fko,f5,Zse,Cko,Mko,WN,Eko,yko,wko,m5,Ako,ele,Lko,Bko,ole,xko,kko,rle,Rko,Sko,Yy,Vke,Md,g5,tle,Ky,Pko,ale,$ko,zke,nr,Zy,Iko,Ed,Dko,nle,Nko,jko,sle,qko,Gko,Oko,ew,Xko,lle,Vko,zko,Wko,Zr,ow,Qko,ile,Hko,Uko,yd,Jko,dle,Yko,Kko,cle,Zko,eRo,oRo,fle,rRo,tRo,rw,aRo,We,tw,nRo,mle,sRo,lRo,Za,iRo,gle,dRo,cRo,hle,fRo,mRo,ple,gRo,hRo,pRo,R,h5,_le,_Ro,uRo,QN,bRo,vRo,TRo,p5,ule,FRo,CRo,HN,MRo,ERo,yRo,_5,ble,wRo,ARo,UN,LRo,BRo,xRo,u5,vle,kRo,RRo,JN,SRo,PRo,$Ro,b5,Tle,IRo,DRo,YN,NRo,jRo,qRo,v5,Fle,GRo,ORo,KN,XRo,VRo,zRo,T5,Cle,WRo,QRo,ZN,HRo,URo,JRo,F5,Mle,YRo,KRo,ej,ZRo,eSo,oSo,C5,Ele,rSo,tSo,oj,aSo,nSo,sSo,M5,yle,lSo,iSo,rj,dSo,cSo,fSo,E5,wle,mSo,gSo,tj,hSo,pSo,_So,y5,Ale,uSo,bSo,aj,vSo,TSo,FSo,w5,Lle,CSo,MSo,nj,ESo,ySo,wSo,A5,Ble,ASo,LSo,sj,BSo,xSo,kSo,L5,xle,RSo,SSo,lj,PSo,$So,ISo,B5,kle,DSo,NSo,ij,jSo,qSo,GSo,x5,Rle,OSo,XSo,dj,VSo,zSo,WSo,k5,Sle,QSo,HSo,cj,USo,JSo,YSo,R5,Ple,KSo,ZSo,fj,ePo,oPo,rPo,S5,$le,tPo,aPo,mj,nPo,sPo,lPo,P5,Ile,iPo,dPo,gj,cPo,fPo,mPo,$5,Dle,gPo,hPo,hj,pPo,_Po,uPo,I5,Nle,bPo,vPo,pj,TPo,FPo,CPo,D5,jle,MPo,EPo,_j,yPo,wPo,APo,N5,qle,LPo,BPo,uj,xPo,kPo,RPo,j5,Gle,SPo,PPo,bj,$Po,IPo,DPo,q5,Ole,NPo,jPo,vj,qPo,GPo,OPo,G5,Xle,XPo,VPo,Tj,zPo,WPo,QPo,O5,Vle,HPo,UPo,Fj,JPo,YPo,KPo,X5,zle,ZPo,e$o,Cj,o$o,r$o,t$o,V5,Wle,a$o,n$o,Mj,s$o,l$o,i$o,z5,Qle,d$o,c$o,Ej,f$o,m$o,g$o,W5,Hle,h$o,p$o,yj,_$o,u$o,b$o,Q5,Ule,v$o,T$o,wj,F$o,C$o,M$o,H5,Jle,E$o,y$o,Aj,w$o,A$o,L$o,U5,Yle,B$o,x$o,Lj,k$o,R$o,S$o,J5,Kle,P$o,$$o,Bj,I$o,D$o,N$o,Y5,Zle,j$o,q$o,xj,G$o,O$o,X$o,K5,eie,V$o,z$o,kj,W$o,Q$o,H$o,Z5,U$o,oie,J$o,Y$o,rie,K$o,Z$o,tie,eIo,oIo,aw,Wke,wd,e2,aie,nw,rIo,nie,tIo,Qke,sr,sw,aIo,Ad,nIo,sie,sIo,lIo,lie,iIo,dIo,cIo,lw,fIo,iie,mIo,gIo,hIo,et,iw,pIo,die,_Io,uIo,Ld,bIo,cie,vIo,TIo,fie,FIo,CIo,MIo,mie,EIo,yIo,dw,wIo,Qe,cw,AIo,gie,LIo,BIo,en,xIo,hie,kIo,RIo,pie,SIo,PIo,_ie,$Io,IIo,DIo,uie,o2,bie,NIo,jIo,Rj,qIo,GIo,OIo,r2,XIo,vie,VIo,zIo,Tie,WIo,QIo,Fie,HIo,UIo,fw,Hke,Bd,t2,Cie,mw,JIo,Mie,YIo,Uke,lr,gw,KIo,xd,ZIo,Eie,eDo,oDo,yie,rDo,tDo,aDo,hw,nDo,wie,sDo,lDo,iDo,ot,pw,dDo,Aie,cDo,fDo,kd,mDo,Lie,gDo,hDo,Bie,pDo,_Do,uDo,xie,bDo,vDo,_w,TDo,He,uw,FDo,kie,CDo,MDo,on,EDo,Rie,yDo,wDo,Sie,ADo,LDo,Pie,BDo,xDo,kDo,me,a2,$ie,RDo,SDo,Sj,PDo,$Do,IDo,n2,Iie,DDo,NDo,Pj,jDo,qDo,GDo,qs,Die,ODo,XDo,$j,VDo,zDo,Ij,WDo,QDo,HDo,s2,Nie,UDo,JDo,Dj,YDo,KDo,ZDo,ma,jie,eNo,oNo,Nj,rNo,tNo,jj,aNo,nNo,qj,sNo,lNo,iNo,l2,qie,dNo,cNo,Gj,fNo,mNo,gNo,i2,Gie,hNo,pNo,Oj,_No,uNo,bNo,d2,Oie,vNo,TNo,Xj,FNo,CNo,MNo,c2,Xie,ENo,yNo,Vj,wNo,ANo,LNo,f2,Vie,BNo,xNo,zj,kNo,RNo,SNo,m2,zie,PNo,$No,Wj,INo,DNo,NNo,g2,jNo,Wie,qNo,GNo,Qie,ONo,XNo,Hie,VNo,zNo,bw,Jke,Rd,h2,Uie,vw,WNo,Jie,QNo,Yke,ir,Tw,HNo,Sd,UNo,Yie,JNo,YNo,Kie,KNo,ZNo,ejo,Fw,ojo,Zie,rjo,tjo,ajo,rt,Cw,njo,ede,sjo,ljo,Pd,ijo,ode,djo,cjo,rde,fjo,mjo,gjo,tde,hjo,pjo,Mw,_jo,Ue,Ew,ujo,ade,bjo,vjo,rn,Tjo,nde,Fjo,Cjo,sde,Mjo,Ejo,lde,yjo,wjo,Ajo,ide,p2,dde,Ljo,Bjo,Qj,xjo,kjo,Rjo,_2,Sjo,cde,Pjo,$jo,fde,Ijo,Djo,mde,Njo,jjo,yw,Kke,$d,u2,gde,ww,qjo,hde,Gjo,Zke,dr,Aw,Ojo,Id,Xjo,pde,Vjo,zjo,_de,Wjo,Qjo,Hjo,Lw,Ujo,ude,Jjo,Yjo,Kjo,tt,Bw,Zjo,bde,eqo,oqo,Dd,rqo,vde,tqo,aqo,Tde,nqo,sqo,lqo,Fde,iqo,dqo,xw,cqo,Je,kw,fqo,Cde,mqo,gqo,tn,hqo,Mde,pqo,_qo,Ede,uqo,bqo,yde,vqo,Tqo,Fqo,ke,b2,wde,Cqo,Mqo,Hj,Eqo,yqo,wqo,v2,Ade,Aqo,Lqo,Uj,Bqo,xqo,kqo,T2,Lde,Rqo,Sqo,Jj,Pqo,$qo,Iqo,F2,Bde,Dqo,Nqo,Yj,jqo,qqo,Gqo,C2,xde,Oqo,Xqo,Kj,Vqo,zqo,Wqo,M2,kde,Qqo,Hqo,Zj,Uqo,Jqo,Yqo,E2,Rde,Kqo,Zqo,eq,eGo,oGo,rGo,y2,Sde,tGo,aGo,oq,nGo,sGo,lGo,w2,iGo,Pde,dGo,cGo,$de,fGo,mGo,Ide,gGo,hGo,Rw,eRe,Nd,A2,Dde,Sw,pGo,Nde,_Go,oRe,cr,Pw,uGo,jd,bGo,jde,vGo,TGo,qde,FGo,CGo,MGo,$w,EGo,Gde,yGo,wGo,AGo,at,Iw,LGo,Ode,BGo,xGo,qd,kGo,Xde,RGo,SGo,Vde,PGo,$Go,IGo,zde,DGo,NGo,Dw,jGo,Ye,Nw,qGo,Wde,GGo,OGo,an,XGo,Qde,VGo,zGo,Hde,WGo,QGo,Ude,HGo,UGo,JGo,nn,L2,Jde,YGo,KGo,rq,ZGo,eOo,oOo,B2,Yde,rOo,tOo,tq,aOo,nOo,sOo,x2,Kde,lOo,iOo,aq,dOo,cOo,fOo,k2,Zde,mOo,gOo,nq,hOo,pOo,_Oo,R2,uOo,ece,bOo,vOo,oce,TOo,FOo,rce,COo,MOo,jw,rRe,Gd,S2,tce,qw,EOo,ace,yOo,tRe,fr,Gw,wOo,Od,AOo,nce,LOo,BOo,sce,xOo,kOo,ROo,Ow,SOo,lce,POo,$Oo,IOo,nt,Xw,DOo,ice,NOo,jOo,Xd,qOo,dce,GOo,OOo,cce,XOo,VOo,zOo,fce,WOo,QOo,Vw,HOo,Ke,zw,UOo,mce,JOo,YOo,sn,KOo,gce,ZOo,eXo,hce,oXo,rXo,pce,tXo,aXo,nXo,Re,P2,_ce,sXo,lXo,sq,iXo,dXo,cXo,$2,uce,fXo,mXo,lq,gXo,hXo,pXo,I2,bce,_Xo,uXo,iq,bXo,vXo,TXo,D2,vce,FXo,CXo,dq,MXo,EXo,yXo,N2,Tce,wXo,AXo,cq,LXo,BXo,xXo,j2,Fce,kXo,RXo,fq,SXo,PXo,$Xo,q2,Cce,IXo,DXo,mq,NXo,jXo,qXo,G2,Mce,GXo,OXo,gq,XXo,VXo,zXo,O2,WXo,Ece,QXo,HXo,yce,UXo,JXo,wce,YXo,KXo,Ww,aRe,Vd,X2,Ace,Qw,ZXo,Lce,eVo,nRe,mr,Hw,oVo,zd,rVo,Bce,tVo,aVo,xce,nVo,sVo,lVo,Uw,iVo,kce,dVo,cVo,fVo,st,Jw,mVo,Rce,gVo,hVo,Wd,pVo,Sce,_Vo,uVo,Pce,bVo,vVo,TVo,$ce,FVo,CVo,Yw,MVo,Ze,Kw,EVo,Ice,yVo,wVo,ln,AVo,Dce,LVo,BVo,Nce,xVo,kVo,jce,RVo,SVo,PVo,Zw,V2,qce,$Vo,IVo,hq,DVo,NVo,jVo,z2,Gce,qVo,GVo,pq,OVo,XVo,VVo,W2,zVo,Oce,WVo,QVo,Xce,HVo,UVo,Vce,JVo,YVo,e6,sRe,Qd,Q2,zce,o6,KVo,Wce,ZVo,lRe,gr,r6,ezo,Hd,ozo,Qce,rzo,tzo,Hce,azo,nzo,szo,t6,lzo,Uce,izo,dzo,czo,lt,a6,fzo,Jce,mzo,gzo,Ud,hzo,Yce,pzo,_zo,Kce,uzo,bzo,vzo,Zce,Tzo,Fzo,n6,Czo,eo,s6,Mzo,efe,Ezo,yzo,dn,wzo,ofe,Azo,Lzo,rfe,Bzo,xzo,tfe,kzo,Rzo,Szo,cn,H2,afe,Pzo,$zo,_q,Izo,Dzo,Nzo,U2,nfe,jzo,qzo,uq,Gzo,Ozo,Xzo,J2,sfe,Vzo,zzo,bq,Wzo,Qzo,Hzo,Y2,lfe,Uzo,Jzo,vq,Yzo,Kzo,Zzo,K2,eWo,ife,oWo,rWo,dfe,tWo,aWo,cfe,nWo,sWo,l6,iRe,Jd,Z2,ffe,i6,lWo,mfe,iWo,dRe,hr,d6,dWo,Yd,cWo,gfe,fWo,mWo,hfe,gWo,hWo,pWo,c6,_Wo,pfe,uWo,bWo,vWo,it,f6,TWo,_fe,FWo,CWo,Kd,MWo,ufe,EWo,yWo,bfe,wWo,AWo,LWo,vfe,BWo,xWo,m6,kWo,oo,g6,RWo,Tfe,SWo,PWo,fn,$Wo,Ffe,IWo,DWo,Cfe,NWo,jWo,Mfe,qWo,GWo,OWo,Zd,ev,Efe,XWo,VWo,Tq,zWo,WWo,QWo,ov,yfe,HWo,UWo,Fq,JWo,YWo,KWo,rv,wfe,ZWo,eQo,Cq,oQo,rQo,tQo,tv,aQo,Afe,nQo,sQo,Lfe,lQo,iQo,Bfe,dQo,cQo,h6,cRe,ec,av,xfe,p6,fQo,kfe,mQo,fRe,pr,_6,gQo,oc,hQo,Rfe,pQo,_Qo,Sfe,uQo,bQo,vQo,u6,TQo,Pfe,FQo,CQo,MQo,dt,b6,EQo,$fe,yQo,wQo,rc,AQo,Ife,LQo,BQo,Dfe,xQo,kQo,RQo,Nfe,SQo,PQo,v6,$Qo,ro,T6,IQo,jfe,DQo,NQo,mn,jQo,qfe,qQo,GQo,Gfe,OQo,XQo,Ofe,VQo,zQo,WQo,Xfe,nv,Vfe,QQo,HQo,Mq,UQo,JQo,YQo,sv,KQo,zfe,ZQo,eHo,Wfe,oHo,rHo,Qfe,tHo,aHo,F6,mRe,tc,lv,Hfe,C6,nHo,Ufe,sHo,gRe,_r,M6,lHo,ac,iHo,Jfe,dHo,cHo,Yfe,fHo,mHo,gHo,E6,hHo,Kfe,pHo,_Ho,uHo,ct,y6,bHo,Zfe,vHo,THo,nc,FHo,eme,CHo,MHo,ome,EHo,yHo,wHo,rme,AHo,LHo,w6,BHo,to,A6,xHo,tme,kHo,RHo,gn,SHo,ame,PHo,$Ho,nme,IHo,DHo,sme,NHo,jHo,qHo,lme,iv,ime,GHo,OHo,Eq,XHo,VHo,zHo,dv,WHo,dme,QHo,HHo,cme,UHo,JHo,fme,YHo,KHo,L6,hRe,sc,cv,mme,B6,ZHo,gme,eUo,pRe,ur,x6,oUo,lc,rUo,hme,tUo,aUo,pme,nUo,sUo,lUo,k6,iUo,_me,dUo,cUo,fUo,ft,R6,mUo,ume,gUo,hUo,ic,pUo,bme,_Uo,uUo,vme,bUo,vUo,TUo,Tme,FUo,CUo,S6,MUo,ao,P6,EUo,Fme,yUo,wUo,hn,AUo,Cme,LUo,BUo,Mme,xUo,kUo,Eme,RUo,SUo,PUo,dc,fv,yme,$Uo,IUo,yq,DUo,NUo,jUo,mv,wme,qUo,GUo,wq,OUo,XUo,VUo,gv,Ame,zUo,WUo,Aq,QUo,HUo,UUo,hv,JUo,Lme,YUo,KUo,Bme,ZUo,eJo,xme,oJo,rJo,$6,_Re,cc,pv,kme,I6,tJo,Rme,aJo,uRe,br,D6,nJo,fc,sJo,Sme,lJo,iJo,Pme,dJo,cJo,fJo,N6,mJo,$me,gJo,hJo,pJo,mt,j6,_Jo,Ime,uJo,bJo,mc,vJo,Dme,TJo,FJo,Nme,CJo,MJo,EJo,jme,yJo,wJo,q6,AJo,no,G6,LJo,qme,BJo,xJo,pn,kJo,Gme,RJo,SJo,Ome,PJo,$Jo,Xme,IJo,DJo,NJo,Vme,_v,zme,jJo,qJo,Lq,GJo,OJo,XJo,uv,VJo,Wme,zJo,WJo,Qme,QJo,HJo,Hme,UJo,JJo,O6,bRe,gc,bv,Ume,X6,YJo,Jme,KJo,vRe,vr,V6,ZJo,hc,eYo,Yme,oYo,rYo,Kme,tYo,aYo,nYo,z6,sYo,Zme,lYo,iYo,dYo,gt,W6,cYo,ege,fYo,mYo,pc,gYo,oge,hYo,pYo,rge,_Yo,uYo,bYo,tge,vYo,TYo,Q6,FYo,ho,H6,CYo,age,MYo,EYo,_n,yYo,nge,wYo,AYo,sge,LYo,BYo,lge,xYo,kYo,RYo,B,vv,ige,SYo,PYo,Bq,$Yo,IYo,DYo,Tv,dge,NYo,jYo,xq,qYo,GYo,OYo,Fv,cge,XYo,VYo,kq,zYo,WYo,QYo,Cv,fge,HYo,UYo,Rq,JYo,YYo,KYo,Mv,mge,ZYo,eKo,Sq,oKo,rKo,tKo,Ev,gge,aKo,nKo,Pq,sKo,lKo,iKo,yv,hge,dKo,cKo,$q,fKo,mKo,gKo,wv,pge,hKo,pKo,Iq,_Ko,uKo,bKo,Av,_ge,vKo,TKo,Dq,FKo,CKo,MKo,Lv,uge,EKo,yKo,Nq,wKo,AKo,LKo,Bv,bge,BKo,xKo,jq,kKo,RKo,SKo,xv,vge,PKo,$Ko,qq,IKo,DKo,NKo,kv,Tge,jKo,qKo,Gq,GKo,OKo,XKo,Rv,Fge,VKo,zKo,Oq,WKo,QKo,HKo,Sv,Cge,UKo,JKo,Xq,YKo,KKo,ZKo,Pv,Mge,eZo,oZo,Vq,rZo,tZo,aZo,Gs,Ege,nZo,sZo,zq,lZo,iZo,Wq,dZo,cZo,fZo,$v,yge,mZo,gZo,Qq,hZo,pZo,_Zo,Iv,wge,uZo,bZo,Hq,vZo,TZo,FZo,Dv,Age,CZo,MZo,Uq,EZo,yZo,wZo,Nv,Lge,AZo,LZo,Jq,BZo,xZo,kZo,jv,Bge,RZo,SZo,Yq,PZo,$Zo,IZo,qv,xge,DZo,NZo,Kq,jZo,qZo,GZo,Gv,kge,OZo,XZo,Zq,VZo,zZo,WZo,Ov,Rge,QZo,HZo,eG,UZo,JZo,YZo,Xv,Sge,KZo,ZZo,oG,eer,oer,rer,Vv,Pge,ter,aer,rG,ner,ser,ler,zv,$ge,ier,der,tG,cer,fer,mer,Wv,Ige,ger,her,aG,per,_er,uer,Qv,Dge,ber,ver,nG,Ter,Fer,Cer,Hv,Nge,Mer,Eer,sG,yer,wer,Aer,Uv,jge,Ler,Ber,lG,xer,ker,Rer,Jv,qge,Ser,Per,iG,$er,Ier,Der,Yv,Gge,Ner,jer,dG,qer,Ger,Oer,Kv,Oge,Xer,Ver,cG,zer,Wer,Qer,Zv,Xge,Her,Uer,fG,Jer,Yer,Ker,eT,Vge,Zer,eor,mG,oor,ror,tor,oT,zge,aor,nor,gG,sor,lor,ior,rT,Wge,dor,cor,hG,mor,gor,hor,tT,Qge,por,_or,pG,uor,bor,vor,aT,Hge,Tor,For,_G,Cor,Mor,Eor,nT,Uge,yor,wor,uG,Aor,Lor,Bor,Jge,xor,kor,U6,TRe,_c,sT,Yge,J6,Ror,Kge,Sor,FRe,Tr,Y6,Por,uc,$or,Zge,Ior,Dor,ehe,Nor,jor,qor,K6,Gor,ohe,Oor,Xor,Vor,ht,Z6,zor,rhe,Wor,Qor,bc,Hor,the,Uor,Jor,ahe,Yor,Kor,Zor,nhe,err,orr,eA,rrr,po,oA,trr,she,arr,nrr,un,srr,lhe,lrr,irr,ihe,drr,crr,dhe,frr,mrr,grr,H,lT,che,hrr,prr,bG,_rr,urr,brr,iT,fhe,vrr,Trr,vG,Frr,Crr,Mrr,dT,mhe,Err,yrr,TG,wrr,Arr,Lrr,cT,ghe,Brr,xrr,FG,krr,Rrr,Srr,fT,hhe,Prr,$rr,CG,Irr,Drr,Nrr,mT,phe,jrr,qrr,MG,Grr,Orr,Xrr,gT,_he,Vrr,zrr,EG,Wrr,Qrr,Hrr,hT,uhe,Urr,Jrr,yG,Yrr,Krr,Zrr,pT,bhe,etr,otr,wG,rtr,ttr,atr,_T,vhe,ntr,str,AG,ltr,itr,dtr,uT,The,ctr,ftr,LG,mtr,gtr,htr,bT,Fhe,ptr,_tr,BG,utr,btr,vtr,vT,Che,Ttr,Ftr,xG,Ctr,Mtr,Etr,TT,Mhe,ytr,wtr,kG,Atr,Ltr,Btr,FT,Ehe,xtr,ktr,RG,Rtr,Str,Ptr,CT,yhe,$tr,Itr,SG,Dtr,Ntr,jtr,MT,whe,qtr,Gtr,PG,Otr,Xtr,Vtr,ET,Ahe,ztr,Wtr,$G,Qtr,Htr,Utr,yT,Lhe,Jtr,Ytr,IG,Ktr,Ztr,ear,wT,Bhe,oar,rar,DG,tar,aar,nar,AT,xhe,sar,lar,NG,iar,dar,car,LT,khe,far,mar,jG,gar,har,par,Rhe,_ar,uar,rA,CRe,vc,BT,She,tA,bar,Phe,Tar,MRe,Fr,aA,Far,Tc,Car,$he,Mar,Ear,Ihe,yar,war,Aar,nA,Lar,Dhe,Bar,xar,kar,pt,sA,Rar,Nhe,Sar,Par,Fc,$ar,jhe,Iar,Dar,qhe,Nar,jar,qar,Ghe,Gar,Oar,lA,Xar,_o,iA,Var,Ohe,zar,War,bn,Qar,Xhe,Har,Uar,Vhe,Jar,Yar,zhe,Kar,Zar,enr,ge,xT,Whe,onr,rnr,qG,tnr,anr,nnr,kT,Qhe,snr,lnr,GG,inr,dnr,cnr,RT,Hhe,fnr,mnr,OG,gnr,hnr,pnr,ST,Uhe,_nr,unr,XG,bnr,vnr,Tnr,PT,Jhe,Fnr,Cnr,VG,Mnr,Enr,ynr,$T,Yhe,wnr,Anr,zG,Lnr,Bnr,xnr,IT,Khe,knr,Rnr,WG,Snr,Pnr,$nr,DT,Zhe,Inr,Dnr,QG,Nnr,jnr,qnr,NT,epe,Gnr,Onr,HG,Xnr,Vnr,znr,jT,ope,Wnr,Qnr,UG,Hnr,Unr,Jnr,qT,rpe,Ynr,Knr,JG,Znr,esr,osr,tpe,rsr,tsr,dA,ERe,Cc,GT,ape,cA,asr,npe,nsr,yRe,Cr,fA,ssr,Mc,lsr,spe,isr,dsr,lpe,csr,fsr,msr,mA,gsr,ipe,hsr,psr,_sr,_t,gA,usr,dpe,bsr,vsr,Ec,Tsr,cpe,Fsr,Csr,fpe,Msr,Esr,ysr,mpe,wsr,Asr,hA,Lsr,uo,pA,Bsr,gpe,xsr,ksr,vn,Rsr,hpe,Ssr,Psr,ppe,$sr,Isr,_pe,Dsr,Nsr,jsr,_A,OT,upe,qsr,Gsr,YG,Osr,Xsr,Vsr,XT,bpe,zsr,Wsr,KG,Qsr,Hsr,Usr,vpe,Jsr,Ysr,uA,wRe,yc,VT,Tpe,bA,Ksr,Fpe,Zsr,ARe,Mr,vA,elr,wc,olr,Cpe,rlr,tlr,Mpe,alr,nlr,slr,TA,llr,Epe,ilr,dlr,clr,ut,FA,flr,ype,mlr,glr,Ac,hlr,wpe,plr,_lr,Ape,ulr,blr,vlr,Lpe,Tlr,Flr,CA,Clr,bo,MA,Mlr,Bpe,Elr,ylr,Tn,wlr,xpe,Alr,Llr,kpe,Blr,xlr,Rpe,klr,Rlr,Slr,J,zT,Spe,Plr,$lr,ZG,Ilr,Dlr,Nlr,WT,Ppe,jlr,qlr,eO,Glr,Olr,Xlr,QT,$pe,Vlr,zlr,oO,Wlr,Qlr,Hlr,HT,Ipe,Ulr,Jlr,rO,Ylr,Klr,Zlr,UT,Dpe,eir,oir,tO,rir,tir,air,JT,Npe,nir,sir,aO,lir,iir,dir,YT,jpe,cir,fir,nO,mir,gir,hir,KT,qpe,pir,_ir,sO,uir,bir,vir,ZT,Gpe,Tir,Fir,lO,Cir,Mir,Eir,eF,Ope,yir,wir,iO,Air,Lir,Bir,oF,Xpe,xir,kir,dO,Rir,Sir,Pir,rF,Vpe,$ir,Iir,cO,Dir,Nir,jir,tF,zpe,qir,Gir,fO,Oir,Xir,Vir,aF,Wpe,zir,Wir,mO,Qir,Hir,Uir,nF,Qpe,Jir,Yir,gO,Kir,Zir,edr,sF,Hpe,odr,rdr,hO,tdr,adr,ndr,lF,Upe,sdr,ldr,pO,idr,ddr,cdr,iF,Jpe,fdr,mdr,_O,gdr,hdr,pdr,dF,Ype,_dr,udr,uO,bdr,vdr,Tdr,cF,Kpe,Fdr,Cdr,bO,Mdr,Edr,ydr,Zpe,wdr,Adr,EA,LRe,Lc,fF,e_e,yA,Ldr,o_e,Bdr,BRe,Er,wA,xdr,Bc,kdr,r_e,Rdr,Sdr,t_e,Pdr,$dr,Idr,AA,Ddr,a_e,Ndr,jdr,qdr,bt,LA,Gdr,n_e,Odr,Xdr,xc,Vdr,s_e,zdr,Wdr,l_e,Qdr,Hdr,Udr,i_e,Jdr,Ydr,BA,Kdr,vo,xA,Zdr,d_e,ecr,ocr,Fn,rcr,c_e,tcr,acr,f_e,ncr,scr,m_e,lcr,icr,dcr,_e,mF,g_e,ccr,fcr,vO,mcr,gcr,hcr,gF,h_e,pcr,_cr,TO,ucr,bcr,vcr,hF,p_e,Tcr,Fcr,FO,Ccr,Mcr,Ecr,pF,__e,ycr,wcr,CO,Acr,Lcr,Bcr,_F,u_e,xcr,kcr,MO,Rcr,Scr,Pcr,uF,b_e,$cr,Icr,EO,Dcr,Ncr,jcr,bF,v_e,qcr,Gcr,yO,Ocr,Xcr,Vcr,vF,T_e,zcr,Wcr,wO,Qcr,Hcr,Ucr,TF,F_e,Jcr,Ycr,AO,Kcr,Zcr,efr,FF,C_e,ofr,rfr,LO,tfr,afr,nfr,M_e,sfr,lfr,kA,xRe,kc,CF,E_e,RA,ifr,y_e,dfr,kRe,yr,SA,cfr,Rc,ffr,w_e,mfr,gfr,A_e,hfr,pfr,_fr,PA,ufr,L_e,bfr,vfr,Tfr,vt,$A,Ffr,B_e,Cfr,Mfr,Sc,Efr,x_e,yfr,wfr,k_e,Afr,Lfr,Bfr,R_e,xfr,kfr,IA,Rfr,To,DA,Sfr,S_e,Pfr,$fr,Cn,Ifr,P_e,Dfr,Nfr,$_e,jfr,qfr,I_e,Gfr,Ofr,Xfr,V,MF,D_e,Vfr,zfr,BO,Wfr,Qfr,Hfr,EF,N_e,Ufr,Jfr,xO,Yfr,Kfr,Zfr,yF,j_e,emr,omr,kO,rmr,tmr,amr,wF,q_e,nmr,smr,RO,lmr,imr,dmr,AF,G_e,cmr,fmr,SO,mmr,gmr,hmr,LF,O_e,pmr,_mr,PO,umr,bmr,vmr,BF,X_e,Tmr,Fmr,$O,Cmr,Mmr,Emr,xF,V_e,ymr,wmr,IO,Amr,Lmr,Bmr,kF,z_e,xmr,kmr,DO,Rmr,Smr,Pmr,RF,W_e,$mr,Imr,NO,Dmr,Nmr,jmr,SF,Q_e,qmr,Gmr,jO,Omr,Xmr,Vmr,PF,H_e,zmr,Wmr,qO,Qmr,Hmr,Umr,$F,U_e,Jmr,Ymr,GO,Kmr,Zmr,egr,IF,J_e,ogr,rgr,OO,tgr,agr,ngr,DF,Y_e,sgr,lgr,XO,igr,dgr,cgr,NF,K_e,fgr,mgr,VO,ggr,hgr,pgr,jF,Z_e,_gr,ugr,zO,bgr,vgr,Tgr,qF,eue,Fgr,Cgr,WO,Mgr,Egr,ygr,GF,oue,wgr,Agr,QO,Lgr,Bgr,xgr,OF,rue,kgr,Rgr,HO,Sgr,Pgr,$gr,XF,tue,Igr,Dgr,UO,Ngr,jgr,qgr,VF,aue,Ggr,Ogr,JO,Xgr,Vgr,zgr,zF,nue,Wgr,Qgr,YO,Hgr,Ugr,Jgr,WF,sue,Ygr,Kgr,KO,Zgr,ehr,ohr,QF,lue,rhr,thr,ZO,ahr,nhr,shr,iue,lhr,ihr,NA,RRe,Pc,HF,due,jA,dhr,cue,chr,SRe,wr,qA,fhr,$c,mhr,fue,ghr,hhr,mue,phr,_hr,uhr,GA,bhr,gue,vhr,Thr,Fhr,Tt,OA,Chr,hue,Mhr,Ehr,Ic,yhr,pue,whr,Ahr,_ue,Lhr,Bhr,xhr,uue,khr,Rhr,XA,Shr,Fo,VA,Phr,bue,$hr,Ihr,Mn,Dhr,vue,Nhr,jhr,Tue,qhr,Ghr,Fue,Ohr,Xhr,Vhr,ae,UF,Cue,zhr,Whr,eX,Qhr,Hhr,Uhr,JF,Mue,Jhr,Yhr,oX,Khr,Zhr,epr,YF,Eue,opr,rpr,rX,tpr,apr,npr,KF,yue,spr,lpr,tX,ipr,dpr,cpr,ZF,wue,fpr,mpr,aX,gpr,hpr,ppr,eC,Aue,_pr,upr,nX,bpr,vpr,Tpr,oC,Lue,Fpr,Cpr,sX,Mpr,Epr,ypr,rC,Bue,wpr,Apr,lX,Lpr,Bpr,xpr,tC,xue,kpr,Rpr,iX,Spr,Ppr,$pr,aC,kue,Ipr,Dpr,dX,Npr,jpr,qpr,nC,Rue,Gpr,Opr,cX,Xpr,Vpr,zpr,sC,Sue,Wpr,Qpr,fX,Hpr,Upr,Jpr,lC,Pue,Ypr,Kpr,mX,Zpr,e_r,o_r,iC,$ue,r_r,t_r,gX,a_r,n_r,s_r,dC,Iue,l_r,i_r,hX,d_r,c_r,f_r,cC,Due,m_r,g_r,pX,h_r,p_r,__r,fC,Nue,u_r,b_r,_X,v_r,T_r,F_r,jue,C_r,M_r,zA,PRe,Dc,mC,que,WA,E_r,Gue,y_r,$Re,Ar,QA,w_r,Nc,A_r,Oue,L_r,B_r,Xue,x_r,k_r,R_r,HA,S_r,Vue,P_r,$_r,I_r,Ft,UA,D_r,zue,N_r,j_r,jc,q_r,Wue,G_r,O_r,Que,X_r,V_r,z_r,Hue,W_r,Q_r,JA,H_r,Co,YA,U_r,Uue,J_r,Y_r,En,K_r,Jue,Z_r,eur,Yue,our,rur,Kue,tur,aur,nur,Zue,gC,e1e,sur,lur,uX,iur,dur,cur,o1e,fur,mur,KA,IRe,qc,hC,r1e,ZA,gur,t1e,hur,DRe,Lr,e0,pur,Gc,_ur,a1e,uur,bur,n1e,vur,Tur,Fur,o0,Cur,s1e,Mur,Eur,yur,Ct,r0,wur,l1e,Aur,Lur,Oc,Bur,i1e,xur,kur,d1e,Rur,Sur,Pur,c1e,$ur,Iur,t0,Dur,Mo,a0,Nur,f1e,jur,qur,yn,Gur,m1e,Our,Xur,g1e,Vur,zur,h1e,Wur,Qur,Hur,Y,pC,p1e,Uur,Jur,bX,Yur,Kur,Zur,_C,_1e,e1r,o1r,vX,r1r,t1r,a1r,uC,u1e,n1r,s1r,TX,l1r,i1r,d1r,bC,b1e,c1r,f1r,FX,m1r,g1r,h1r,vC,v1e,p1r,_1r,CX,u1r,b1r,v1r,TC,T1e,T1r,F1r,MX,C1r,M1r,E1r,FC,F1e,y1r,w1r,EX,A1r,L1r,B1r,CC,C1e,x1r,k1r,yX,R1r,S1r,P1r,MC,M1e,$1r,I1r,wX,D1r,N1r,j1r,EC,E1e,q1r,G1r,AX,O1r,X1r,V1r,yC,y1e,z1r,W1r,LX,Q1r,H1r,U1r,wC,w1e,J1r,Y1r,BX,K1r,Z1r,e9r,AC,A1e,o9r,r9r,xX,t9r,a9r,n9r,LC,L1e,s9r,l9r,kX,i9r,d9r,c9r,BC,B1e,f9r,m9r,RX,g9r,h9r,p9r,xC,x1e,_9r,u9r,SX,b9r,v9r,T9r,kC,k1e,F9r,C9r,PX,M9r,E9r,y9r,RC,R1e,w9r,A9r,$X,L9r,B9r,x9r,SC,S1e,k9r,R9r,IX,S9r,P9r,$9r,PC,P1e,I9r,D9r,DX,N9r,j9r,q9r,$1e,G9r,O9r,n0,NRe,Xc,$C,I1e,s0,X9r,D1e,V9r,jRe,Br,l0,z9r,Vc,W9r,N1e,Q9r,H9r,j1e,U9r,J9r,Y9r,i0,K9r,q1e,Z9r,ebr,obr,Mt,d0,rbr,G1e,tbr,abr,zc,nbr,O1e,sbr,lbr,X1e,ibr,dbr,cbr,V1e,fbr,mbr,c0,gbr,Eo,f0,hbr,z1e,pbr,_br,wn,ubr,W1e,bbr,vbr,Q1e,Tbr,Fbr,H1e,Cbr,Mbr,Ebr,Z,IC,U1e,ybr,wbr,NX,Abr,Lbr,Bbr,DC,J1e,xbr,kbr,jX,Rbr,Sbr,Pbr,NC,Y1e,$br,Ibr,qX,Dbr,Nbr,jbr,jC,K1e,qbr,Gbr,GX,Obr,Xbr,Vbr,qC,Z1e,zbr,Wbr,OX,Qbr,Hbr,Ubr,GC,e9e,Jbr,Ybr,XX,Kbr,Zbr,e5r,OC,o9e,o5r,r5r,VX,t5r,a5r,n5r,XC,r9e,s5r,l5r,zX,i5r,d5r,c5r,VC,t9e,f5r,m5r,WX,g5r,h5r,p5r,zC,a9e,_5r,u5r,QX,b5r,v5r,T5r,WC,n9e,F5r,C5r,HX,M5r,E5r,y5r,QC,s9e,w5r,A5r,UX,L5r,B5r,x5r,HC,l9e,k5r,R5r,JX,S5r,P5r,$5r,UC,i9e,I5r,D5r,YX,N5r,j5r,q5r,JC,d9e,G5r,O5r,KX,X5r,V5r,z5r,YC,c9e,W5r,Q5r,ZX,H5r,U5r,J5r,KC,f9e,Y5r,K5r,eV,Z5r,e2r,o2r,ZC,m9e,r2r,t2r,oV,a2r,n2r,s2r,eM,g9e,l2r,i2r,rV,d2r,c2r,f2r,h9e,m2r,g2r,m0,qRe,Wc,oM,p9e,g0,h2r,_9e,p2r,GRe,xr,h0,_2r,Qc,u2r,u9e,b2r,v2r,b9e,T2r,F2r,C2r,p0,M2r,v9e,E2r,y2r,w2r,Et,_0,A2r,T9e,L2r,B2r,Hc,x2r,F9e,k2r,R2r,C9e,S2r,P2r,$2r,M9e,I2r,D2r,u0,N2r,yo,b0,j2r,E9e,q2r,G2r,An,O2r,y9e,X2r,V2r,w9e,z2r,W2r,A9e,Q2r,H2r,U2r,L9e,rM,B9e,J2r,Y2r,tV,K2r,Z2r,evr,x9e,ovr,rvr,v0,ORe,Uc,tM,k9e,T0,tvr,R9e,avr,XRe,kr,F0,nvr,Jc,svr,S9e,lvr,ivr,P9e,dvr,cvr,fvr,C0,mvr,$9e,gvr,hvr,pvr,yt,M0,_vr,I9e,uvr,bvr,Yc,vvr,D9e,Tvr,Fvr,N9e,Cvr,Mvr,Evr,j9e,yvr,wvr,E0,Avr,wo,y0,Lvr,q9e,Bvr,xvr,Ln,kvr,G9e,Rvr,Svr,O9e,Pvr,$vr,X9e,Ivr,Dvr,Nvr,V9e,aM,z9e,jvr,qvr,aV,Gvr,Ovr,Xvr,W9e,Vvr,zvr,w0,VRe,Kc,nM,Q9e,A0,Wvr,H9e,Qvr,zRe,Rr,L0,Hvr,Zc,Uvr,U9e,Jvr,Yvr,J9e,Kvr,Zvr,eTr,B0,oTr,Y9e,rTr,tTr,aTr,wt,x0,nTr,K9e,sTr,lTr,ef,iTr,Z9e,dTr,cTr,ebe,fTr,mTr,gTr,obe,hTr,pTr,k0,_Tr,Ao,R0,uTr,rbe,bTr,vTr,Bn,TTr,tbe,FTr,CTr,abe,MTr,ETr,nbe,yTr,wTr,ATr,z,sM,sbe,LTr,BTr,nV,xTr,kTr,RTr,lM,lbe,STr,PTr,sV,$Tr,ITr,DTr,iM,ibe,NTr,jTr,lV,qTr,GTr,OTr,dM,dbe,XTr,VTr,iV,zTr,WTr,QTr,cM,cbe,HTr,UTr,dV,JTr,YTr,KTr,fM,fbe,ZTr,eFr,cV,oFr,rFr,tFr,mM,mbe,aFr,nFr,fV,sFr,lFr,iFr,gM,gbe,dFr,cFr,mV,fFr,mFr,gFr,hM,hbe,hFr,pFr,gV,_Fr,uFr,bFr,pM,pbe,vFr,TFr,hV,FFr,CFr,MFr,_M,_be,EFr,yFr,pV,wFr,AFr,LFr,uM,ube,BFr,xFr,_V,kFr,RFr,SFr,bM,bbe,PFr,$Fr,uV,IFr,DFr,NFr,vM,vbe,jFr,qFr,bV,GFr,OFr,XFr,TM,Tbe,VFr,zFr,vV,WFr,QFr,HFr,FM,Fbe,UFr,JFr,TV,YFr,KFr,ZFr,CM,Cbe,eCr,oCr,FV,rCr,tCr,aCr,MM,Mbe,nCr,sCr,CV,lCr,iCr,dCr,EM,Ebe,cCr,fCr,MV,mCr,gCr,hCr,yM,ybe,pCr,_Cr,EV,uCr,bCr,vCr,wM,wbe,TCr,FCr,yV,CCr,MCr,ECr,AM,Abe,yCr,wCr,wV,ACr,LCr,BCr,LM,Lbe,xCr,kCr,AV,RCr,SCr,PCr,BM,Bbe,$Cr,ICr,LV,DCr,NCr,jCr,xM,xbe,qCr,GCr,BV,OCr,XCr,VCr,kbe,zCr,WCr,S0,WRe,of,kM,Rbe,P0,QCr,Sbe,HCr,QRe,Sr,$0,UCr,rf,JCr,Pbe,YCr,KCr,$be,ZCr,eMr,oMr,I0,rMr,Ibe,tMr,aMr,nMr,At,D0,sMr,Dbe,lMr,iMr,tf,dMr,Nbe,cMr,fMr,jbe,mMr,gMr,hMr,qbe,pMr,_Mr,N0,uMr,Lo,j0,bMr,Gbe,vMr,TMr,xn,FMr,Obe,CMr,MMr,Xbe,EMr,yMr,Vbe,wMr,AMr,LMr,ca,RM,zbe,BMr,xMr,xV,kMr,RMr,SMr,SM,Wbe,PMr,$Mr,kV,IMr,DMr,NMr,PM,Qbe,jMr,qMr,RV,GMr,OMr,XMr,$M,Hbe,VMr,zMr,SV,WMr,QMr,HMr,IM,Ube,UMr,JMr,PV,YMr,KMr,ZMr,Jbe,e4r,o4r,q0,HRe,af,DM,Ybe,G0,r4r,Kbe,t4r,URe,Pr,O0,a4r,nf,n4r,Zbe,s4r,l4r,e5e,i4r,d4r,c4r,X0,f4r,o5e,m4r,g4r,h4r,Lt,V0,p4r,r5e,_4r,u4r,sf,b4r,t5e,v4r,T4r,a5e,F4r,C4r,M4r,n5e,E4r,y4r,z0,w4r,Bo,W0,A4r,s5e,L4r,B4r,kn,x4r,l5e,k4r,R4r,i5e,S4r,P4r,d5e,$4r,I4r,D4r,ce,NM,c5e,N4r,j4r,$V,q4r,G4r,O4r,jM,f5e,X4r,V4r,IV,z4r,W4r,Q4r,qM,m5e,H4r,U4r,DV,J4r,Y4r,K4r,GM,g5e,Z4r,eEr,NV,oEr,rEr,tEr,OM,h5e,aEr,nEr,jV,sEr,lEr,iEr,XM,p5e,dEr,cEr,qV,fEr,mEr,gEr,VM,_5e,hEr,pEr,GV,_Er,uEr,bEr,zM,u5e,vEr,TEr,OV,FEr,CEr,MEr,WM,b5e,EEr,yEr,XV,wEr,AEr,LEr,QM,v5e,BEr,xEr,VV,kEr,REr,SEr,HM,T5e,PEr,$Er,zV,IEr,DEr,NEr,UM,F5e,jEr,qEr,WV,GEr,OEr,XEr,C5e,VEr,zEr,Q0,JRe,lf,JM,M5e,H0,WEr,E5e,QEr,YRe,$r,U0,HEr,df,UEr,y5e,JEr,YEr,w5e,KEr,ZEr,e3r,J0,o3r,A5e,r3r,t3r,a3r,Bt,Y0,n3r,L5e,s3r,l3r,cf,i3r,B5e,d3r,c3r,x5e,f3r,m3r,g3r,k5e,h3r,p3r,K0,_3r,xo,Z0,u3r,R5e,b3r,v3r,Rn,T3r,S5e,F3r,C3r,P5e,M3r,E3r,$5e,y3r,w3r,A3r,ue,YM,I5e,L3r,B3r,QV,x3r,k3r,R3r,KM,D5e,S3r,P3r,HV,$3r,I3r,D3r,ZM,N5e,N3r,j3r,UV,q3r,G3r,O3r,e4,j5e,X3r,V3r,JV,z3r,W3r,Q3r,o4,q5e,H3r,U3r,YV,J3r,Y3r,K3r,r4,G5e,Z3r,eyr,KV,oyr,ryr,tyr,t4,O5e,ayr,nyr,ZV,syr,lyr,iyr,a4,X5e,dyr,cyr,ez,fyr,myr,gyr,n4,V5e,hyr,pyr,oz,_yr,uyr,byr,s4,z5e,vyr,Tyr,rz,Fyr,Cyr,Myr,W5e,Eyr,yyr,eL,KRe,ff,l4,Q5e,oL,wyr,H5e,Ayr,ZRe,Ir,rL,Lyr,mf,Byr,U5e,xyr,kyr,J5e,Ryr,Syr,Pyr,tL,$yr,Y5e,Iyr,Dyr,Nyr,xt,aL,jyr,K5e,qyr,Gyr,gf,Oyr,Z5e,Xyr,Vyr,e2e,zyr,Wyr,Qyr,o2e,Hyr,Uyr,nL,Jyr,ko,sL,Yyr,r2e,Kyr,Zyr,Sn,ewr,t2e,owr,rwr,a2e,twr,awr,n2e,nwr,swr,lwr,Me,i4,s2e,iwr,dwr,tz,cwr,fwr,mwr,d4,l2e,gwr,hwr,az,pwr,_wr,uwr,c4,i2e,bwr,vwr,nz,Twr,Fwr,Cwr,f4,d2e,Mwr,Ewr,sz,ywr,wwr,Awr,m4,c2e,Lwr,Bwr,lz,xwr,kwr,Rwr,g4,f2e,Swr,Pwr,iz,$wr,Iwr,Dwr,h4,m2e,Nwr,jwr,dz,qwr,Gwr,Owr,p4,g2e,Xwr,Vwr,cz,zwr,Wwr,Qwr,_4,h2e,Hwr,Uwr,fz,Jwr,Ywr,Kwr,p2e,Zwr,e6r,lL,eSe,hf,u4,_2e,iL,o6r,u2e,r6r,oSe,Dr,dL,t6r,pf,a6r,b2e,n6r,s6r,v2e,l6r,i6r,d6r,cL,c6r,T2e,f6r,m6r,g6r,kt,fL,h6r,F2e,p6r,_6r,_f,u6r,C2e,b6r,v6r,M2e,T6r,F6r,C6r,E2e,M6r,E6r,mL,y6r,Ro,gL,w6r,y2e,A6r,L6r,Pn,B6r,w2e,x6r,k6r,A2e,R6r,S6r,L2e,P6r,$6r,I6r,be,b4,B2e,D6r,N6r,mz,j6r,q6r,G6r,v4,x2e,O6r,X6r,gz,V6r,z6r,W6r,T4,k2e,Q6r,H6r,hz,U6r,J6r,Y6r,F4,R2e,K6r,Z6r,pz,eAr,oAr,rAr,C4,S2e,tAr,aAr,_z,nAr,sAr,lAr,M4,P2e,iAr,dAr,uz,cAr,fAr,mAr,E4,$2e,gAr,hAr,bz,pAr,_Ar,uAr,y4,I2e,bAr,vAr,vz,TAr,FAr,CAr,w4,D2e,MAr,EAr,Tz,yAr,wAr,AAr,A4,N2e,LAr,BAr,Fz,xAr,kAr,RAr,j2e,SAr,PAr,hL,rSe,uf,L4,q2e,pL,$Ar,G2e,IAr,tSe,Nr,_L,DAr,bf,NAr,O2e,jAr,qAr,X2e,GAr,OAr,XAr,uL,VAr,V2e,zAr,WAr,QAr,Rt,bL,HAr,z2e,UAr,JAr,vf,YAr,W2e,KAr,ZAr,Q2e,e0r,o0r,r0r,H2e,t0r,a0r,vL,n0r,So,TL,s0r,U2e,l0r,i0r,$n,d0r,J2e,c0r,f0r,Y2e,m0r,g0r,K2e,h0r,p0r,_0r,ve,B4,Z2e,u0r,b0r,Cz,v0r,T0r,F0r,x4,eve,C0r,M0r,Mz,E0r,y0r,w0r,k4,ove,A0r,L0r,Ez,B0r,x0r,k0r,R4,rve,R0r,S0r,yz,P0r,$0r,I0r,S4,tve,D0r,N0r,wz,j0r,q0r,G0r,P4,ave,O0r,X0r,Az,V0r,z0r,W0r,$4,nve,Q0r,H0r,Lz,U0r,J0r,Y0r,I4,sve,K0r,Z0r,Bz,eLr,oLr,rLr,D4,lve,tLr,aLr,xz,nLr,sLr,lLr,N4,ive,iLr,dLr,kz,cLr,fLr,mLr,dve,gLr,hLr,FL,aSe,Tf,j4,cve,CL,pLr,fve,_Lr,nSe,jr,ML,uLr,Ff,bLr,mve,vLr,TLr,gve,FLr,CLr,MLr,EL,ELr,hve,yLr,wLr,ALr,St,yL,LLr,pve,BLr,xLr,Cf,kLr,_ve,RLr,SLr,uve,PLr,$Lr,ILr,bve,DLr,NLr,wL,jLr,Po,AL,qLr,vve,GLr,OLr,In,XLr,Tve,VLr,zLr,Fve,WLr,QLr,Cve,HLr,ULr,JLr,Se,q4,Mve,YLr,KLr,Rz,ZLr,e7r,o7r,G4,Eve,r7r,t7r,Sz,a7r,n7r,s7r,O4,yve,l7r,i7r,Pz,d7r,c7r,f7r,X4,wve,m7r,g7r,$z,h7r,p7r,_7r,V4,Ave,u7r,b7r,Iz,v7r,T7r,F7r,z4,Lve,C7r,M7r,Dz,E7r,y7r,w7r,W4,Bve,A7r,L7r,Nz,B7r,x7r,k7r,Q4,xve,R7r,S7r,jz,P7r,$7r,I7r,kve,D7r,N7r,LL,sSe,Mf,H4,Rve,BL,j7r,Sve,q7r,lSe,qr,xL,G7r,Ef,O7r,Pve,X7r,V7r,$ve,z7r,W7r,Q7r,kL,H7r,Ive,U7r,J7r,Y7r,Pt,RL,K7r,Dve,Z7r,e8r,yf,o8r,Nve,r8r,t8r,jve,a8r,n8r,s8r,qve,l8r,i8r,SL,d8r,$o,PL,c8r,Gve,f8r,m8r,Dn,g8r,Ove,h8r,p8r,Xve,_8r,u8r,Vve,b8r,v8r,T8r,Pe,U4,zve,F8r,C8r,qz,M8r,E8r,y8r,J4,Wve,w8r,A8r,Gz,L8r,B8r,x8r,Y4,Qve,k8r,R8r,Oz,S8r,P8r,$8r,K4,Hve,I8r,D8r,Xz,N8r,j8r,q8r,Z4,Uve,G8r,O8r,Vz,X8r,V8r,z8r,eE,Jve,W8r,Q8r,zz,H8r,U8r,J8r,oE,Yve,Y8r,K8r,Wz,Z8r,eBr,oBr,rE,Kve,rBr,tBr,Qz,aBr,nBr,sBr,Zve,lBr,iBr,$L,iSe,wf,tE,eTe,IL,dBr,oTe,cBr,dSe,Gr,DL,fBr,Af,mBr,rTe,gBr,hBr,tTe,pBr,_Br,uBr,NL,bBr,aTe,vBr,TBr,FBr,$t,jL,CBr,nTe,MBr,EBr,Lf,yBr,sTe,wBr,ABr,lTe,LBr,BBr,xBr,iTe,kBr,RBr,qL,SBr,Io,GL,PBr,dTe,$Br,IBr,Nn,DBr,cTe,NBr,jBr,fTe,qBr,GBr,mTe,OBr,XBr,VBr,gTe,aE,hTe,zBr,WBr,Hz,QBr,HBr,UBr,pTe,JBr,YBr,OL,cSe,Bf,nE,_Te,XL,KBr,uTe,ZBr,fSe,Or,VL,exr,xf,oxr,bTe,rxr,txr,vTe,axr,nxr,sxr,zL,lxr,TTe,ixr,dxr,cxr,It,WL,fxr,FTe,mxr,gxr,kf,hxr,CTe,pxr,_xr,MTe,uxr,bxr,vxr,ETe,Txr,Fxr,QL,Cxr,Do,HL,Mxr,yTe,Exr,yxr,jn,wxr,wTe,Axr,Lxr,ATe,Bxr,xxr,LTe,kxr,Rxr,Sxr,UL,sE,BTe,Pxr,$xr,Uz,Ixr,Dxr,Nxr,lE,xTe,jxr,qxr,Jz,Gxr,Oxr,Xxr,kTe,Vxr,zxr,JL,mSe,Rf,iE,RTe,YL,Wxr,STe,Qxr,gSe,Xr,KL,Hxr,Sf,Uxr,PTe,Jxr,Yxr,$Te,Kxr,Zxr,ekr,ZL,okr,ITe,rkr,tkr,akr,Dt,e7,nkr,DTe,skr,lkr,Pf,ikr,NTe,dkr,ckr,jTe,fkr,mkr,gkr,qTe,hkr,pkr,o7,_kr,No,r7,ukr,GTe,bkr,vkr,qn,Tkr,OTe,Fkr,Ckr,XTe,Mkr,Ekr,VTe,ykr,wkr,Akr,zTe,dE,WTe,Lkr,Bkr,Yz,xkr,kkr,Rkr,QTe,Skr,Pkr,t7,hSe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),g3=new X({}),h3=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new $kr({props:{warning:!0,$$slots:{default:[XMt]},$$scope:{ctx:If}}}),p3=new X({}),_3=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/configuration_auto.py#L541"}}),v3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),T3=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),F3=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),C3=new X({}),M3=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/tokenization_auto.py#L351"}}),w3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15991/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),A3=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),L3=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),B3=new X({}),x3=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),S3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15991/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new $kr({props:{$$slots:{default:[VMt]},$$scope:{ctx:If}}}),P3=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),$3=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),I3=new X({}),D3=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/processing_auto.py#L70"}}),q3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Xh=new $kr({props:{$$slots:{default:[zMt]},$$scope:{ctx:If}}}),G3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),O3=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),X3=new X({}),V3=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L707"}}),W3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Q3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),H3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J3=new X({}),Y3=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L714"}}),Z3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),oy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new X({}),ay=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L729"}}),sy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L736"}}),gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),py=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L743"}}),Ty=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),yy=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L752"}}),Ay=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),By=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Ry=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L786"}}),Py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),jy=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L793"}}),Gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Wy=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L779"}}),Hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L761"}}),ow=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new X({}),sw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L768"}}),iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),cw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new X({}),gw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L802"}}),pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new X({}),Tw=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L841"}}),Cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Ew=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L848"}}),Bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new X({}),Pw=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L871"}}),Iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new X({}),Gw=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L855"}}),Xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Hw=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L862"}}),Jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o6=new X({}),r6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L880"}}),a6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),s6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i6=new X({}),d6=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L887"}}),f6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),g6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p6=new X({}),_6=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L834"}}),b6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),T6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C6=new X({}),M6=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L809"}}),y6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),A6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B6=new X({}),x6=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L816"}}),R6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),P6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new X({}),D6=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L825"}}),j6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),G6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new X({}),V6=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),W6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),H6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new X({}),Y6=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Z6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),oA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),sA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),iA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),fA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),gA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),pA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new X({}),vA=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),FA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),MA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),wA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),LA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),xA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),SA=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),$A=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),DA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),qA=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),OA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),VA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),QA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),UA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),YA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),e0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),r0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),a0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new X({}),l0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),d0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),f0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),_0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),b0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new X({}),F0=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),M0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),y0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new X({}),L0=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),x0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),R0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),D0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),N0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),j0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),V0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),W0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new X({}),U0=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),Y0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),K0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Z0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oL=new X({}),rL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),aL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),sL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new X({}),dL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),fL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),gL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new X({}),_L=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),bL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),TL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new X({}),ML=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),yL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),AL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new X({}),xL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),RL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),PL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IL=new X({}),DL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),jL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),GL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XL=new X({}),VL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),WL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),HL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YL=new X({}),KL=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),e7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),o7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),r7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){K=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(fe.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),Df=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),d3=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),c3=o("AutoConfig"),On=o(", "),Xn=a("a"),f3=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),m3=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),pe=a("p"),o8=o("will create a model that is an instance of "),Oi=a("a"),r8=o("BertModel"),t8=o("."),zo=l(),Ga=a("p"),a8=o("There is one class of "),qf=a("code"),n8=o("AutoModel"),w$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),gke=l(),Xi=a("h2"),Gf=a("a"),zQ=a("span"),f(g3.$$.fragment),A$e=l(),WQ=a("span"),L$e=o("Extending the Auto Classes"),hke=l(),zn=a("p"),B$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QQ=a("code"),x$e=o("NewModel"),k$e=o(", make sure you have a "),HQ=a("code"),R$e=o("NewModelConfig"),S$e=o(` then you can add those to the auto
classes like this:`),pke=l(),f(h3.$$.fragment),_ke=l(),s8=a("p"),P$e=o("You will then be able to use the auto classes like you would usually do!"),uke=l(),f(Of.$$.fragment),bke=l(),Vi=a("h2"),Xf=a("a"),UQ=a("span"),f(p3.$$.fragment),$$e=l(),JQ=a("span"),I$e=o("AutoConfig"),vke=l(),Wo=a("div"),f(_3.$$.fragment),D$e=l(),u3=a("p"),N$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),l8=a("a"),j$e=o("from_pretrained()"),q$e=o(" class method."),G$e=l(),b3=a("p"),O$e=o("This class cannot be instantiated directly using "),YQ=a("code"),X$e=o("__init__()"),V$e=o(" (throws an error)."),z$e=l(),mo=a("div"),f(v3.$$.fragment),W$e=l(),KQ=a("p"),Q$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),H$e=l(),zi=a("p"),U$e=o("The configuration class to instantiate is selected based on the "),ZQ=a("code"),J$e=o("model_type"),Y$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),eH=a("code"),K$e=o("pretrained_model_name_or_path"),Z$e=o(":"),eIe=l(),v=a("ul"),Vf=a("li"),oH=a("strong"),oIe=o("albert"),rIe=o(" \u2014 "),i8=a("a"),tIe=o("AlbertConfig"),aIe=o(" (ALBERT model)"),nIe=l(),zf=a("li"),rH=a("strong"),sIe=o("bart"),lIe=o(" \u2014 "),d8=a("a"),iIe=o("BartConfig"),dIe=o(" (BART model)"),cIe=l(),Wf=a("li"),tH=a("strong"),fIe=o("beit"),mIe=o(" \u2014 "),c8=a("a"),gIe=o("BeitConfig"),hIe=o(" (BEiT model)"),pIe=l(),Qf=a("li"),aH=a("strong"),_Ie=o("bert"),uIe=o(" \u2014 "),f8=a("a"),bIe=o("BertConfig"),vIe=o(" (BERT model)"),TIe=l(),Hf=a("li"),nH=a("strong"),FIe=o("bert-generation"),CIe=o(" \u2014 "),m8=a("a"),MIe=o("BertGenerationConfig"),EIe=o(" (Bert Generation model)"),yIe=l(),Uf=a("li"),sH=a("strong"),wIe=o("big_bird"),AIe=o(" \u2014 "),g8=a("a"),LIe=o("BigBirdConfig"),BIe=o(" (BigBird model)"),xIe=l(),Jf=a("li"),lH=a("strong"),kIe=o("bigbird_pegasus"),RIe=o(" \u2014 "),h8=a("a"),SIe=o("BigBirdPegasusConfig"),PIe=o(" (BigBirdPegasus model)"),$Ie=l(),Yf=a("li"),iH=a("strong"),IIe=o("blenderbot"),DIe=o(" \u2014 "),p8=a("a"),NIe=o("BlenderbotConfig"),jIe=o(" (Blenderbot model)"),qIe=l(),Kf=a("li"),dH=a("strong"),GIe=o("blenderbot-small"),OIe=o(" \u2014 "),_8=a("a"),XIe=o("BlenderbotSmallConfig"),VIe=o(" (BlenderbotSmall model)"),zIe=l(),Zf=a("li"),cH=a("strong"),WIe=o("camembert"),QIe=o(" \u2014 "),u8=a("a"),HIe=o("CamembertConfig"),UIe=o(" (CamemBERT model)"),JIe=l(),em=a("li"),fH=a("strong"),YIe=o("canine"),KIe=o(" \u2014 "),b8=a("a"),ZIe=o("CanineConfig"),eDe=o(" (Canine model)"),oDe=l(),om=a("li"),mH=a("strong"),rDe=o("clip"),tDe=o(" \u2014 "),v8=a("a"),aDe=o("CLIPConfig"),nDe=o(" (CLIP model)"),sDe=l(),rm=a("li"),gH=a("strong"),lDe=o("convbert"),iDe=o(" \u2014 "),T8=a("a"),dDe=o("ConvBertConfig"),cDe=o(" (ConvBERT model)"),fDe=l(),tm=a("li"),hH=a("strong"),mDe=o("convnext"),gDe=o(" \u2014 "),F8=a("a"),hDe=o("ConvNextConfig"),pDe=o(" (ConvNext model)"),_De=l(),am=a("li"),pH=a("strong"),uDe=o("ctrl"),bDe=o(" \u2014 "),C8=a("a"),vDe=o("CTRLConfig"),TDe=o(" (CTRL model)"),FDe=l(),nm=a("li"),_H=a("strong"),CDe=o("data2vec-audio"),MDe=o(" \u2014 "),M8=a("a"),EDe=o("Data2VecAudioConfig"),yDe=o(" (Data2VecAudio model)"),wDe=l(),sm=a("li"),uH=a("strong"),ADe=o("data2vec-text"),LDe=o(" \u2014 "),E8=a("a"),BDe=o("Data2VecTextConfig"),xDe=o(" (Data2VecText model)"),kDe=l(),lm=a("li"),bH=a("strong"),RDe=o("deberta"),SDe=o(" \u2014 "),y8=a("a"),PDe=o("DebertaConfig"),$De=o(" (DeBERTa model)"),IDe=l(),im=a("li"),vH=a("strong"),DDe=o("deberta-v2"),NDe=o(" \u2014 "),w8=a("a"),jDe=o("DebertaV2Config"),qDe=o(" (DeBERTa-v2 model)"),GDe=l(),dm=a("li"),TH=a("strong"),ODe=o("decision_transformer"),XDe=o(" \u2014 "),A8=a("a"),VDe=o("DecisionTransformerConfig"),zDe=o(" (Decision Transformer model)"),WDe=l(),cm=a("li"),FH=a("strong"),QDe=o("deit"),HDe=o(" \u2014 "),L8=a("a"),UDe=o("DeiTConfig"),JDe=o(" (DeiT model)"),YDe=l(),fm=a("li"),CH=a("strong"),KDe=o("detr"),ZDe=o(" \u2014 "),B8=a("a"),eNe=o("DetrConfig"),oNe=o(" (DETR model)"),rNe=l(),mm=a("li"),MH=a("strong"),tNe=o("distilbert"),aNe=o(" \u2014 "),x8=a("a"),nNe=o("DistilBertConfig"),sNe=o(" (DistilBERT model)"),lNe=l(),gm=a("li"),EH=a("strong"),iNe=o("dpr"),dNe=o(" \u2014 "),k8=a("a"),cNe=o("DPRConfig"),fNe=o(" (DPR model)"),mNe=l(),hm=a("li"),yH=a("strong"),gNe=o("dpt"),hNe=o(" \u2014 "),R8=a("a"),pNe=o("DPTConfig"),_Ne=o(" (DPT model)"),uNe=l(),pm=a("li"),wH=a("strong"),bNe=o("electra"),vNe=o(" \u2014 "),S8=a("a"),TNe=o("ElectraConfig"),FNe=o(" (ELECTRA model)"),CNe=l(),_m=a("li"),AH=a("strong"),MNe=o("encoder-decoder"),ENe=o(" \u2014 "),P8=a("a"),yNe=o("EncoderDecoderConfig"),wNe=o(" (Encoder decoder model)"),ANe=l(),um=a("li"),LH=a("strong"),LNe=o("flaubert"),BNe=o(" \u2014 "),$8=a("a"),xNe=o("FlaubertConfig"),kNe=o(" (FlauBERT model)"),RNe=l(),bm=a("li"),BH=a("strong"),SNe=o("fnet"),PNe=o(" \u2014 "),I8=a("a"),$Ne=o("FNetConfig"),INe=o(" (FNet model)"),DNe=l(),vm=a("li"),xH=a("strong"),NNe=o("fsmt"),jNe=o(" \u2014 "),D8=a("a"),qNe=o("FSMTConfig"),GNe=o(" (FairSeq Machine-Translation model)"),ONe=l(),Tm=a("li"),kH=a("strong"),XNe=o("funnel"),VNe=o(" \u2014 "),N8=a("a"),zNe=o("FunnelConfig"),WNe=o(" (Funnel Transformer model)"),QNe=l(),Fm=a("li"),RH=a("strong"),HNe=o("glpn"),UNe=o(" \u2014 "),j8=a("a"),JNe=o("GLPNConfig"),YNe=o(" (GLPN model)"),KNe=l(),Cm=a("li"),SH=a("strong"),ZNe=o("gpt2"),eje=o(" \u2014 "),q8=a("a"),oje=o("GPT2Config"),rje=o(" (OpenAI GPT-2 model)"),tje=l(),Mm=a("li"),PH=a("strong"),aje=o("gpt_neo"),nje=o(" \u2014 "),G8=a("a"),sje=o("GPTNeoConfig"),lje=o(" (GPT Neo model)"),ije=l(),Em=a("li"),$H=a("strong"),dje=o("gptj"),cje=o(" \u2014 "),O8=a("a"),fje=o("GPTJConfig"),mje=o(" (GPT-J model)"),gje=l(),ym=a("li"),IH=a("strong"),hje=o("hubert"),pje=o(" \u2014 "),X8=a("a"),_je=o("HubertConfig"),uje=o(" (Hubert model)"),bje=l(),wm=a("li"),DH=a("strong"),vje=o("ibert"),Tje=o(" \u2014 "),V8=a("a"),Fje=o("IBertConfig"),Cje=o(" (I-BERT model)"),Mje=l(),Am=a("li"),NH=a("strong"),Eje=o("imagegpt"),yje=o(" \u2014 "),z8=a("a"),wje=o("ImageGPTConfig"),Aje=o(" (ImageGPT model)"),Lje=l(),Lm=a("li"),jH=a("strong"),Bje=o("layoutlm"),xje=o(" \u2014 "),W8=a("a"),kje=o("LayoutLMConfig"),Rje=o(" (LayoutLM model)"),Sje=l(),Bm=a("li"),qH=a("strong"),Pje=o("layoutlmv2"),$je=o(" \u2014 "),Q8=a("a"),Ije=o("LayoutLMv2Config"),Dje=o(" (LayoutLMv2 model)"),Nje=l(),xm=a("li"),GH=a("strong"),jje=o("led"),qje=o(" \u2014 "),H8=a("a"),Gje=o("LEDConfig"),Oje=o(" (LED model)"),Xje=l(),km=a("li"),OH=a("strong"),Vje=o("longformer"),zje=o(" \u2014 "),U8=a("a"),Wje=o("LongformerConfig"),Qje=o(" (Longformer model)"),Hje=l(),Rm=a("li"),XH=a("strong"),Uje=o("luke"),Jje=o(" \u2014 "),J8=a("a"),Yje=o("LukeConfig"),Kje=o(" (LUKE model)"),Zje=l(),Sm=a("li"),VH=a("strong"),eqe=o("lxmert"),oqe=o(" \u2014 "),Y8=a("a"),rqe=o("LxmertConfig"),tqe=o(" (LXMERT model)"),aqe=l(),Pm=a("li"),zH=a("strong"),nqe=o("m2m_100"),sqe=o(" \u2014 "),K8=a("a"),lqe=o("M2M100Config"),iqe=o(" (M2M100 model)"),dqe=l(),$m=a("li"),WH=a("strong"),cqe=o("marian"),fqe=o(" \u2014 "),Z8=a("a"),mqe=o("MarianConfig"),gqe=o(" (Marian model)"),hqe=l(),Im=a("li"),QH=a("strong"),pqe=o("maskformer"),_qe=o(" \u2014 "),eB=a("a"),uqe=o("MaskFormerConfig"),bqe=o(" (MaskFormer model)"),vqe=l(),Dm=a("li"),HH=a("strong"),Tqe=o("mbart"),Fqe=o(" \u2014 "),oB=a("a"),Cqe=o("MBartConfig"),Mqe=o(" (mBART model)"),Eqe=l(),Nm=a("li"),UH=a("strong"),yqe=o("megatron-bert"),wqe=o(" \u2014 "),rB=a("a"),Aqe=o("MegatronBertConfig"),Lqe=o(" (MegatronBert model)"),Bqe=l(),jm=a("li"),JH=a("strong"),xqe=o("mobilebert"),kqe=o(" \u2014 "),tB=a("a"),Rqe=o("MobileBertConfig"),Sqe=o(" (MobileBERT model)"),Pqe=l(),qm=a("li"),YH=a("strong"),$qe=o("mpnet"),Iqe=o(" \u2014 "),aB=a("a"),Dqe=o("MPNetConfig"),Nqe=o(" (MPNet model)"),jqe=l(),Gm=a("li"),KH=a("strong"),qqe=o("mt5"),Gqe=o(" \u2014 "),nB=a("a"),Oqe=o("MT5Config"),Xqe=o(" (mT5 model)"),Vqe=l(),Om=a("li"),ZH=a("strong"),zqe=o("nystromformer"),Wqe=o(" \u2014 "),sB=a("a"),Qqe=o("NystromformerConfig"),Hqe=o(" (Nystromformer model)"),Uqe=l(),Xm=a("li"),eU=a("strong"),Jqe=o("openai-gpt"),Yqe=o(" \u2014 "),lB=a("a"),Kqe=o("OpenAIGPTConfig"),Zqe=o(" (OpenAI GPT model)"),eGe=l(),Vm=a("li"),oU=a("strong"),oGe=o("pegasus"),rGe=o(" \u2014 "),iB=a("a"),tGe=o("PegasusConfig"),aGe=o(" (Pegasus model)"),nGe=l(),zm=a("li"),rU=a("strong"),sGe=o("perceiver"),lGe=o(" \u2014 "),dB=a("a"),iGe=o("PerceiverConfig"),dGe=o(" (Perceiver model)"),cGe=l(),Wm=a("li"),tU=a("strong"),fGe=o("plbart"),mGe=o(" \u2014 "),cB=a("a"),gGe=o("PLBartConfig"),hGe=o(" (PLBart model)"),pGe=l(),Qm=a("li"),aU=a("strong"),_Ge=o("poolformer"),uGe=o(" \u2014 "),fB=a("a"),bGe=o("PoolFormerConfig"),vGe=o(" (PoolFormer model)"),TGe=l(),Hm=a("li"),nU=a("strong"),FGe=o("prophetnet"),CGe=o(" \u2014 "),mB=a("a"),MGe=o("ProphetNetConfig"),EGe=o(" (ProphetNet model)"),yGe=l(),Um=a("li"),sU=a("strong"),wGe=o("qdqbert"),AGe=o(" \u2014 "),gB=a("a"),LGe=o("QDQBertConfig"),BGe=o(" (QDQBert model)"),xGe=l(),Jm=a("li"),lU=a("strong"),kGe=o("rag"),RGe=o(" \u2014 "),hB=a("a"),SGe=o("RagConfig"),PGe=o(" (RAG model)"),$Ge=l(),Ym=a("li"),iU=a("strong"),IGe=o("realm"),DGe=o(" \u2014 "),pB=a("a"),NGe=o("RealmConfig"),jGe=o(" (Realm model)"),qGe=l(),Km=a("li"),dU=a("strong"),GGe=o("reformer"),OGe=o(" \u2014 "),_B=a("a"),XGe=o("ReformerConfig"),VGe=o(" (Reformer model)"),zGe=l(),Zm=a("li"),cU=a("strong"),WGe=o("rembert"),QGe=o(" \u2014 "),uB=a("a"),HGe=o("RemBertConfig"),UGe=o(" (RemBERT model)"),JGe=l(),eg=a("li"),fU=a("strong"),YGe=o("resnet"),KGe=o(" \u2014 "),bB=a("a"),ZGe=o("ResNetConfig"),eOe=o(" (ResNet model)"),oOe=l(),og=a("li"),mU=a("strong"),rOe=o("retribert"),tOe=o(" \u2014 "),vB=a("a"),aOe=o("RetriBertConfig"),nOe=o(" (RetriBERT model)"),sOe=l(),rg=a("li"),gU=a("strong"),lOe=o("roberta"),iOe=o(" \u2014 "),TB=a("a"),dOe=o("RobertaConfig"),cOe=o(" (RoBERTa model)"),fOe=l(),tg=a("li"),hU=a("strong"),mOe=o("roformer"),gOe=o(" \u2014 "),FB=a("a"),hOe=o("RoFormerConfig"),pOe=o(" (RoFormer model)"),_Oe=l(),ag=a("li"),pU=a("strong"),uOe=o("segformer"),bOe=o(" \u2014 "),CB=a("a"),vOe=o("SegformerConfig"),TOe=o(" (SegFormer model)"),FOe=l(),ng=a("li"),_U=a("strong"),COe=o("sew"),MOe=o(" \u2014 "),MB=a("a"),EOe=o("SEWConfig"),yOe=o(" (SEW model)"),wOe=l(),sg=a("li"),uU=a("strong"),AOe=o("sew-d"),LOe=o(" \u2014 "),EB=a("a"),BOe=o("SEWDConfig"),xOe=o(" (SEW-D model)"),kOe=l(),lg=a("li"),bU=a("strong"),ROe=o("speech-encoder-decoder"),SOe=o(" \u2014 "),yB=a("a"),POe=o("SpeechEncoderDecoderConfig"),$Oe=o(" (Speech Encoder decoder model)"),IOe=l(),ig=a("li"),vU=a("strong"),DOe=o("speech_to_text"),NOe=o(" \u2014 "),wB=a("a"),jOe=o("Speech2TextConfig"),qOe=o(" (Speech2Text model)"),GOe=l(),dg=a("li"),TU=a("strong"),OOe=o("speech_to_text_2"),XOe=o(" \u2014 "),AB=a("a"),VOe=o("Speech2Text2Config"),zOe=o(" (Speech2Text2 model)"),WOe=l(),cg=a("li"),FU=a("strong"),QOe=o("splinter"),HOe=o(" \u2014 "),LB=a("a"),UOe=o("SplinterConfig"),JOe=o(" (Splinter model)"),YOe=l(),fg=a("li"),CU=a("strong"),KOe=o("squeezebert"),ZOe=o(" \u2014 "),BB=a("a"),eXe=o("SqueezeBertConfig"),oXe=o(" (SqueezeBERT model)"),rXe=l(),mg=a("li"),MU=a("strong"),tXe=o("swin"),aXe=o(" \u2014 "),xB=a("a"),nXe=o("SwinConfig"),sXe=o(" (Swin model)"),lXe=l(),gg=a("li"),EU=a("strong"),iXe=o("t5"),dXe=o(" \u2014 "),kB=a("a"),cXe=o("T5Config"),fXe=o(" (T5 model)"),mXe=l(),hg=a("li"),yU=a("strong"),gXe=o("tapas"),hXe=o(" \u2014 "),RB=a("a"),pXe=o("TapasConfig"),_Xe=o(" (TAPAS model)"),uXe=l(),pg=a("li"),wU=a("strong"),bXe=o("transfo-xl"),vXe=o(" \u2014 "),SB=a("a"),TXe=o("TransfoXLConfig"),FXe=o(" (Transformer-XL model)"),CXe=l(),_g=a("li"),AU=a("strong"),MXe=o("trocr"),EXe=o(" \u2014 "),PB=a("a"),yXe=o("TrOCRConfig"),wXe=o(" (TrOCR model)"),AXe=l(),ug=a("li"),LU=a("strong"),LXe=o("unispeech"),BXe=o(" \u2014 "),$B=a("a"),xXe=o("UniSpeechConfig"),kXe=o(" (UniSpeech model)"),RXe=l(),bg=a("li"),BU=a("strong"),SXe=o("unispeech-sat"),PXe=o(" \u2014 "),IB=a("a"),$Xe=o("UniSpeechSatConfig"),IXe=o(" (UniSpeechSat model)"),DXe=l(),vg=a("li"),xU=a("strong"),NXe=o("van"),jXe=o(" \u2014 "),DB=a("a"),qXe=o("VanConfig"),GXe=o(" (VAN model)"),OXe=l(),Tg=a("li"),kU=a("strong"),XXe=o("vilt"),VXe=o(" \u2014 "),NB=a("a"),zXe=o("ViltConfig"),WXe=o(" (ViLT model)"),QXe=l(),Fg=a("li"),RU=a("strong"),HXe=o("vision-encoder-decoder"),UXe=o(" \u2014 "),jB=a("a"),JXe=o("VisionEncoderDecoderConfig"),YXe=o(" (Vision Encoder decoder model)"),KXe=l(),Cg=a("li"),SU=a("strong"),ZXe=o("vision-text-dual-encoder"),eVe=o(" \u2014 "),qB=a("a"),oVe=o("VisionTextDualEncoderConfig"),rVe=o(" (VisionTextDualEncoder model)"),tVe=l(),Mg=a("li"),PU=a("strong"),aVe=o("visual_bert"),nVe=o(" \u2014 "),GB=a("a"),sVe=o("VisualBertConfig"),lVe=o(" (VisualBert model)"),iVe=l(),Eg=a("li"),$U=a("strong"),dVe=o("vit"),cVe=o(" \u2014 "),OB=a("a"),fVe=o("ViTConfig"),mVe=o(" (ViT model)"),gVe=l(),yg=a("li"),IU=a("strong"),hVe=o("vit_mae"),pVe=o(" \u2014 "),XB=a("a"),_Ve=o("ViTMAEConfig"),uVe=o(" (ViTMAE model)"),bVe=l(),wg=a("li"),DU=a("strong"),vVe=o("wav2vec2"),TVe=o(" \u2014 "),VB=a("a"),FVe=o("Wav2Vec2Config"),CVe=o(" (Wav2Vec2 model)"),MVe=l(),Ag=a("li"),NU=a("strong"),EVe=o("wavlm"),yVe=o(" \u2014 "),zB=a("a"),wVe=o("WavLMConfig"),AVe=o(" (WavLM model)"),LVe=l(),Lg=a("li"),jU=a("strong"),BVe=o("xglm"),xVe=o(" \u2014 "),WB=a("a"),kVe=o("XGLMConfig"),RVe=o(" (XGLM model)"),SVe=l(),Bg=a("li"),qU=a("strong"),PVe=o("xlm"),$Ve=o(" \u2014 "),QB=a("a"),IVe=o("XLMConfig"),DVe=o(" (XLM model)"),NVe=l(),xg=a("li"),GU=a("strong"),jVe=o("xlm-prophetnet"),qVe=o(" \u2014 "),HB=a("a"),GVe=o("XLMProphetNetConfig"),OVe=o(" (XLMProphetNet model)"),XVe=l(),kg=a("li"),OU=a("strong"),VVe=o("xlm-roberta"),zVe=o(" \u2014 "),UB=a("a"),WVe=o("XLMRobertaConfig"),QVe=o(" (XLM-RoBERTa model)"),HVe=l(),Rg=a("li"),XU=a("strong"),UVe=o("xlm-roberta-xl"),JVe=o(" \u2014 "),JB=a("a"),YVe=o("XLMRobertaXLConfig"),KVe=o(" (XLM-RoBERTa-XL model)"),ZVe=l(),Sg=a("li"),VU=a("strong"),eze=o("xlnet"),oze=o(" \u2014 "),YB=a("a"),rze=o("XLNetConfig"),tze=o(" (XLNet model)"),aze=l(),Pg=a("li"),zU=a("strong"),nze=o("yoso"),sze=o(" \u2014 "),KB=a("a"),lze=o("YosoConfig"),ize=o(" (YOSO model)"),dze=l(),WU=a("p"),cze=o("Examples:"),fze=l(),f(T3.$$.fragment),mze=l(),$g=a("div"),f(F3.$$.fragment),gze=l(),QU=a("p"),hze=o("Register a new configuration for this class."),Tke=l(),Wi=a("h2"),Ig=a("a"),HU=a("span"),f(C3.$$.fragment),pze=l(),UU=a("span"),_ze=o("AutoTokenizer"),Fke=l(),Qo=a("div"),f(M3.$$.fragment),uze=l(),E3=a("p"),bze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZB=a("a"),vze=o("AutoTokenizer.from_pretrained()"),Tze=o(" class method."),Fze=l(),y3=a("p"),Cze=o("This class cannot be instantiated directly using "),JU=a("code"),Mze=o("__init__()"),Eze=o(" (throws an error)."),yze=l(),go=a("div"),f(w3.$$.fragment),wze=l(),YU=a("p"),Aze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Lze=l(),Oa=a("p"),Bze=o("The tokenizer class to instantiate is selected based on the "),KU=a("code"),xze=o("model_type"),kze=o(` property of the config object (either
passed as an argument or loaded from `),ZU=a("code"),Rze=o("pretrained_model_name_or_path"),Sze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eJ=a("code"),Pze=o("pretrained_model_name_or_path"),$ze=o(":"),Ize=l(),E=a("ul"),Wn=a("li"),oJ=a("strong"),Dze=o("albert"),Nze=o(" \u2014 "),ex=a("a"),jze=o("AlbertTokenizer"),qze=o(" or "),ox=a("a"),Gze=o("AlbertTokenizerFast"),Oze=o(" (ALBERT model)"),Xze=l(),Qn=a("li"),rJ=a("strong"),Vze=o("bart"),zze=o(" \u2014 "),rx=a("a"),Wze=o("BartTokenizer"),Qze=o(" or "),tx=a("a"),Hze=o("BartTokenizerFast"),Uze=o(" (BART model)"),Jze=l(),Hn=a("li"),tJ=a("strong"),Yze=o("barthez"),Kze=o(" \u2014 "),ax=a("a"),Zze=o("BarthezTokenizer"),eWe=o(" or "),nx=a("a"),oWe=o("BarthezTokenizerFast"),rWe=o(" (BARThez model)"),tWe=l(),Dg=a("li"),aJ=a("strong"),aWe=o("bartpho"),nWe=o(" \u2014 "),sx=a("a"),sWe=o("BartphoTokenizer"),lWe=o(" (BARTpho model)"),iWe=l(),Un=a("li"),nJ=a("strong"),dWe=o("bert"),cWe=o(" \u2014 "),lx=a("a"),fWe=o("BertTokenizer"),mWe=o(" or "),ix=a("a"),gWe=o("BertTokenizerFast"),hWe=o(" (BERT model)"),pWe=l(),Ng=a("li"),sJ=a("strong"),_We=o("bert-generation"),uWe=o(" \u2014 "),dx=a("a"),bWe=o("BertGenerationTokenizer"),vWe=o(" (Bert Generation model)"),TWe=l(),jg=a("li"),lJ=a("strong"),FWe=o("bert-japanese"),CWe=o(" \u2014 "),cx=a("a"),MWe=o("BertJapaneseTokenizer"),EWe=o(" (BertJapanese model)"),yWe=l(),qg=a("li"),iJ=a("strong"),wWe=o("bertweet"),AWe=o(" \u2014 "),fx=a("a"),LWe=o("BertweetTokenizer"),BWe=o(" (Bertweet model)"),xWe=l(),Jn=a("li"),dJ=a("strong"),kWe=o("big_bird"),RWe=o(" \u2014 "),mx=a("a"),SWe=o("BigBirdTokenizer"),PWe=o(" or "),gx=a("a"),$We=o("BigBirdTokenizerFast"),IWe=o(" (BigBird model)"),DWe=l(),Yn=a("li"),cJ=a("strong"),NWe=o("bigbird_pegasus"),jWe=o(" \u2014 "),hx=a("a"),qWe=o("PegasusTokenizer"),GWe=o(" or "),px=a("a"),OWe=o("PegasusTokenizerFast"),XWe=o(" (BigBirdPegasus model)"),VWe=l(),Kn=a("li"),fJ=a("strong"),zWe=o("blenderbot"),WWe=o(" \u2014 "),_x=a("a"),QWe=o("BlenderbotTokenizer"),HWe=o(" or "),ux=a("a"),UWe=o("BlenderbotTokenizerFast"),JWe=o(" (Blenderbot model)"),YWe=l(),Gg=a("li"),mJ=a("strong"),KWe=o("blenderbot-small"),ZWe=o(" \u2014 "),bx=a("a"),eQe=o("BlenderbotSmallTokenizer"),oQe=o(" (BlenderbotSmall model)"),rQe=l(),Og=a("li"),gJ=a("strong"),tQe=o("byt5"),aQe=o(" \u2014 "),vx=a("a"),nQe=o("ByT5Tokenizer"),sQe=o(" (ByT5 model)"),lQe=l(),Zn=a("li"),hJ=a("strong"),iQe=o("camembert"),dQe=o(" \u2014 "),Tx=a("a"),cQe=o("CamembertTokenizer"),fQe=o(" or "),Fx=a("a"),mQe=o("CamembertTokenizerFast"),gQe=o(" (CamemBERT model)"),hQe=l(),Xg=a("li"),pJ=a("strong"),pQe=o("canine"),_Qe=o(" \u2014 "),Cx=a("a"),uQe=o("CanineTokenizer"),bQe=o(" (Canine model)"),vQe=l(),es=a("li"),_J=a("strong"),TQe=o("clip"),FQe=o(" \u2014 "),Mx=a("a"),CQe=o("CLIPTokenizer"),MQe=o(" or "),Ex=a("a"),EQe=o("CLIPTokenizerFast"),yQe=o(" (CLIP model)"),wQe=l(),os=a("li"),uJ=a("strong"),AQe=o("convbert"),LQe=o(" \u2014 "),yx=a("a"),BQe=o("ConvBertTokenizer"),xQe=o(" or "),wx=a("a"),kQe=o("ConvBertTokenizerFast"),RQe=o(" (ConvBERT model)"),SQe=l(),rs=a("li"),bJ=a("strong"),PQe=o("cpm"),$Qe=o(" \u2014 "),Ax=a("a"),IQe=o("CpmTokenizer"),DQe=o(" or "),vJ=a("code"),NQe=o("CpmTokenizerFast"),jQe=o(" (CPM model)"),qQe=l(),Vg=a("li"),TJ=a("strong"),GQe=o("ctrl"),OQe=o(" \u2014 "),Lx=a("a"),XQe=o("CTRLTokenizer"),VQe=o(" (CTRL model)"),zQe=l(),ts=a("li"),FJ=a("strong"),WQe=o("deberta"),QQe=o(" \u2014 "),Bx=a("a"),HQe=o("DebertaTokenizer"),UQe=o(" or "),xx=a("a"),JQe=o("DebertaTokenizerFast"),YQe=o(" (DeBERTa model)"),KQe=l(),zg=a("li"),CJ=a("strong"),ZQe=o("deberta-v2"),eHe=o(" \u2014 "),kx=a("a"),oHe=o("DebertaV2Tokenizer"),rHe=o(" (DeBERTa-v2 model)"),tHe=l(),as=a("li"),MJ=a("strong"),aHe=o("distilbert"),nHe=o(" \u2014 "),Rx=a("a"),sHe=o("DistilBertTokenizer"),lHe=o(" or "),Sx=a("a"),iHe=o("DistilBertTokenizerFast"),dHe=o(" (DistilBERT model)"),cHe=l(),ns=a("li"),EJ=a("strong"),fHe=o("dpr"),mHe=o(" \u2014 "),Px=a("a"),gHe=o("DPRQuestionEncoderTokenizer"),hHe=o(" or "),$x=a("a"),pHe=o("DPRQuestionEncoderTokenizerFast"),_He=o(" (DPR model)"),uHe=l(),ss=a("li"),yJ=a("strong"),bHe=o("electra"),vHe=o(" \u2014 "),Ix=a("a"),THe=o("ElectraTokenizer"),FHe=o(" or "),Dx=a("a"),CHe=o("ElectraTokenizerFast"),MHe=o(" (ELECTRA model)"),EHe=l(),Wg=a("li"),wJ=a("strong"),yHe=o("flaubert"),wHe=o(" \u2014 "),Nx=a("a"),AHe=o("FlaubertTokenizer"),LHe=o(" (FlauBERT model)"),BHe=l(),ls=a("li"),AJ=a("strong"),xHe=o("fnet"),kHe=o(" \u2014 "),jx=a("a"),RHe=o("FNetTokenizer"),SHe=o(" or "),qx=a("a"),PHe=o("FNetTokenizerFast"),$He=o(" (FNet model)"),IHe=l(),Qg=a("li"),LJ=a("strong"),DHe=o("fsmt"),NHe=o(" \u2014 "),Gx=a("a"),jHe=o("FSMTTokenizer"),qHe=o(" (FairSeq Machine-Translation model)"),GHe=l(),is=a("li"),BJ=a("strong"),OHe=o("funnel"),XHe=o(" \u2014 "),Ox=a("a"),VHe=o("FunnelTokenizer"),zHe=o(" or "),Xx=a("a"),WHe=o("FunnelTokenizerFast"),QHe=o(" (Funnel Transformer model)"),HHe=l(),ds=a("li"),xJ=a("strong"),UHe=o("gpt2"),JHe=o(" \u2014 "),Vx=a("a"),YHe=o("GPT2Tokenizer"),KHe=o(" or "),zx=a("a"),ZHe=o("GPT2TokenizerFast"),eUe=o(" (OpenAI GPT-2 model)"),oUe=l(),cs=a("li"),kJ=a("strong"),rUe=o("gpt_neo"),tUe=o(" \u2014 "),Wx=a("a"),aUe=o("GPT2Tokenizer"),nUe=o(" or "),Qx=a("a"),sUe=o("GPT2TokenizerFast"),lUe=o(" (GPT Neo model)"),iUe=l(),fs=a("li"),RJ=a("strong"),dUe=o("herbert"),cUe=o(" \u2014 "),Hx=a("a"),fUe=o("HerbertTokenizer"),mUe=o(" or "),Ux=a("a"),gUe=o("HerbertTokenizerFast"),hUe=o(" (HerBERT model)"),pUe=l(),Hg=a("li"),SJ=a("strong"),_Ue=o("hubert"),uUe=o(" \u2014 "),Jx=a("a"),bUe=o("Wav2Vec2CTCTokenizer"),vUe=o(" (Hubert model)"),TUe=l(),ms=a("li"),PJ=a("strong"),FUe=o("ibert"),CUe=o(" \u2014 "),Yx=a("a"),MUe=o("RobertaTokenizer"),EUe=o(" or "),Kx=a("a"),yUe=o("RobertaTokenizerFast"),wUe=o(" (I-BERT model)"),AUe=l(),gs=a("li"),$J=a("strong"),LUe=o("layoutlm"),BUe=o(" \u2014 "),Zx=a("a"),xUe=o("LayoutLMTokenizer"),kUe=o(" or "),ek=a("a"),RUe=o("LayoutLMTokenizerFast"),SUe=o(" (LayoutLM model)"),PUe=l(),hs=a("li"),IJ=a("strong"),$Ue=o("layoutlmv2"),IUe=o(" \u2014 "),ok=a("a"),DUe=o("LayoutLMv2Tokenizer"),NUe=o(" or "),rk=a("a"),jUe=o("LayoutLMv2TokenizerFast"),qUe=o(" (LayoutLMv2 model)"),GUe=l(),ps=a("li"),DJ=a("strong"),OUe=o("layoutxlm"),XUe=o(" \u2014 "),tk=a("a"),VUe=o("LayoutXLMTokenizer"),zUe=o(" or "),ak=a("a"),WUe=o("LayoutXLMTokenizerFast"),QUe=o(" (LayoutXLM model)"),HUe=l(),_s=a("li"),NJ=a("strong"),UUe=o("led"),JUe=o(" \u2014 "),nk=a("a"),YUe=o("LEDTokenizer"),KUe=o(" or "),sk=a("a"),ZUe=o("LEDTokenizerFast"),eJe=o(" (LED model)"),oJe=l(),us=a("li"),jJ=a("strong"),rJe=o("longformer"),tJe=o(" \u2014 "),lk=a("a"),aJe=o("LongformerTokenizer"),nJe=o(" or "),ik=a("a"),sJe=o("LongformerTokenizerFast"),lJe=o(" (Longformer model)"),iJe=l(),Ug=a("li"),qJ=a("strong"),dJe=o("luke"),cJe=o(" \u2014 "),dk=a("a"),fJe=o("LukeTokenizer"),mJe=o(" (LUKE model)"),gJe=l(),bs=a("li"),GJ=a("strong"),hJe=o("lxmert"),pJe=o(" \u2014 "),ck=a("a"),_Je=o("LxmertTokenizer"),uJe=o(" or "),fk=a("a"),bJe=o("LxmertTokenizerFast"),vJe=o(" (LXMERT model)"),TJe=l(),Jg=a("li"),OJ=a("strong"),FJe=o("m2m_100"),CJe=o(" \u2014 "),mk=a("a"),MJe=o("M2M100Tokenizer"),EJe=o(" (M2M100 model)"),yJe=l(),Yg=a("li"),XJ=a("strong"),wJe=o("marian"),AJe=o(" \u2014 "),gk=a("a"),LJe=o("MarianTokenizer"),BJe=o(" (Marian model)"),xJe=l(),vs=a("li"),VJ=a("strong"),kJe=o("mbart"),RJe=o(" \u2014 "),hk=a("a"),SJe=o("MBartTokenizer"),PJe=o(" or "),pk=a("a"),$Je=o("MBartTokenizerFast"),IJe=o(" (mBART model)"),DJe=l(),Ts=a("li"),zJ=a("strong"),NJe=o("mbart50"),jJe=o(" \u2014 "),_k=a("a"),qJe=o("MBart50Tokenizer"),GJe=o(" or "),uk=a("a"),OJe=o("MBart50TokenizerFast"),XJe=o(" (mBART-50 model)"),VJe=l(),Kg=a("li"),WJ=a("strong"),zJe=o("mluke"),WJe=o(" \u2014 "),bk=a("a"),QJe=o("MLukeTokenizer"),HJe=o(" (mLUKE model)"),UJe=l(),Fs=a("li"),QJ=a("strong"),JJe=o("mobilebert"),YJe=o(" \u2014 "),vk=a("a"),KJe=o("MobileBertTokenizer"),ZJe=o(" or "),Tk=a("a"),eYe=o("MobileBertTokenizerFast"),oYe=o(" (MobileBERT model)"),rYe=l(),Cs=a("li"),HJ=a("strong"),tYe=o("mpnet"),aYe=o(" \u2014 "),Fk=a("a"),nYe=o("MPNetTokenizer"),sYe=o(" or "),Ck=a("a"),lYe=o("MPNetTokenizerFast"),iYe=o(" (MPNet model)"),dYe=l(),Ms=a("li"),UJ=a("strong"),cYe=o("mt5"),fYe=o(" \u2014 "),Mk=a("a"),mYe=o("MT5Tokenizer"),gYe=o(" or "),Ek=a("a"),hYe=o("MT5TokenizerFast"),pYe=o(" (mT5 model)"),_Ye=l(),Es=a("li"),JJ=a("strong"),uYe=o("openai-gpt"),bYe=o(" \u2014 "),yk=a("a"),vYe=o("OpenAIGPTTokenizer"),TYe=o(" or "),wk=a("a"),FYe=o("OpenAIGPTTokenizerFast"),CYe=o(" (OpenAI GPT model)"),MYe=l(),ys=a("li"),YJ=a("strong"),EYe=o("pegasus"),yYe=o(" \u2014 "),Ak=a("a"),wYe=o("PegasusTokenizer"),AYe=o(" or "),Lk=a("a"),LYe=o("PegasusTokenizerFast"),BYe=o(" (Pegasus model)"),xYe=l(),Zg=a("li"),KJ=a("strong"),kYe=o("perceiver"),RYe=o(" \u2014 "),Bk=a("a"),SYe=o("PerceiverTokenizer"),PYe=o(" (Perceiver model)"),$Ye=l(),eh=a("li"),ZJ=a("strong"),IYe=o("phobert"),DYe=o(" \u2014 "),xk=a("a"),NYe=o("PhobertTokenizer"),jYe=o(" (PhoBERT model)"),qYe=l(),oh=a("li"),eY=a("strong"),GYe=o("plbart"),OYe=o(" \u2014 "),kk=a("a"),XYe=o("PLBartTokenizer"),VYe=o(" (PLBart model)"),zYe=l(),rh=a("li"),oY=a("strong"),WYe=o("prophetnet"),QYe=o(" \u2014 "),Rk=a("a"),HYe=o("ProphetNetTokenizer"),UYe=o(" (ProphetNet model)"),JYe=l(),ws=a("li"),rY=a("strong"),YYe=o("qdqbert"),KYe=o(" \u2014 "),Sk=a("a"),ZYe=o("BertTokenizer"),eKe=o(" or "),Pk=a("a"),oKe=o("BertTokenizerFast"),rKe=o(" (QDQBert model)"),tKe=l(),th=a("li"),tY=a("strong"),aKe=o("rag"),nKe=o(" \u2014 "),$k=a("a"),sKe=o("RagTokenizer"),lKe=o(" (RAG model)"),iKe=l(),As=a("li"),aY=a("strong"),dKe=o("realm"),cKe=o(" \u2014 "),Ik=a("a"),fKe=o("RealmTokenizer"),mKe=o(" or "),Dk=a("a"),gKe=o("RealmTokenizerFast"),hKe=o(" (Realm model)"),pKe=l(),Ls=a("li"),nY=a("strong"),_Ke=o("reformer"),uKe=o(" \u2014 "),Nk=a("a"),bKe=o("ReformerTokenizer"),vKe=o(" or "),jk=a("a"),TKe=o("ReformerTokenizerFast"),FKe=o(" (Reformer model)"),CKe=l(),Bs=a("li"),sY=a("strong"),MKe=o("rembert"),EKe=o(" \u2014 "),qk=a("a"),yKe=o("RemBertTokenizer"),wKe=o(" or "),Gk=a("a"),AKe=o("RemBertTokenizerFast"),LKe=o(" (RemBERT model)"),BKe=l(),xs=a("li"),lY=a("strong"),xKe=o("retribert"),kKe=o(" \u2014 "),Ok=a("a"),RKe=o("RetriBertTokenizer"),SKe=o(" or "),Xk=a("a"),PKe=o("RetriBertTokenizerFast"),$Ke=o(" (RetriBERT model)"),IKe=l(),ks=a("li"),iY=a("strong"),DKe=o("roberta"),NKe=o(" \u2014 "),Vk=a("a"),jKe=o("RobertaTokenizer"),qKe=o(" or "),zk=a("a"),GKe=o("RobertaTokenizerFast"),OKe=o(" (RoBERTa model)"),XKe=l(),Rs=a("li"),dY=a("strong"),VKe=o("roformer"),zKe=o(" \u2014 "),Wk=a("a"),WKe=o("RoFormerTokenizer"),QKe=o(" or "),Qk=a("a"),HKe=o("RoFormerTokenizerFast"),UKe=o(" (RoFormer model)"),JKe=l(),ah=a("li"),cY=a("strong"),YKe=o("speech_to_text"),KKe=o(" \u2014 "),Hk=a("a"),ZKe=o("Speech2TextTokenizer"),eZe=o(" (Speech2Text model)"),oZe=l(),nh=a("li"),fY=a("strong"),rZe=o("speech_to_text_2"),tZe=o(" \u2014 "),Uk=a("a"),aZe=o("Speech2Text2Tokenizer"),nZe=o(" (Speech2Text2 model)"),sZe=l(),Ss=a("li"),mY=a("strong"),lZe=o("splinter"),iZe=o(" \u2014 "),Jk=a("a"),dZe=o("SplinterTokenizer"),cZe=o(" or "),Yk=a("a"),fZe=o("SplinterTokenizerFast"),mZe=o(" (Splinter model)"),gZe=l(),Ps=a("li"),gY=a("strong"),hZe=o("squeezebert"),pZe=o(" \u2014 "),Kk=a("a"),_Ze=o("SqueezeBertTokenizer"),uZe=o(" or "),Zk=a("a"),bZe=o("SqueezeBertTokenizerFast"),vZe=o(" (SqueezeBERT model)"),TZe=l(),$s=a("li"),hY=a("strong"),FZe=o("t5"),CZe=o(" \u2014 "),eR=a("a"),MZe=o("T5Tokenizer"),EZe=o(" or "),oR=a("a"),yZe=o("T5TokenizerFast"),wZe=o(" (T5 model)"),AZe=l(),sh=a("li"),pY=a("strong"),LZe=o("tapas"),BZe=o(" \u2014 "),rR=a("a"),xZe=o("TapasTokenizer"),kZe=o(" (TAPAS model)"),RZe=l(),lh=a("li"),_Y=a("strong"),SZe=o("transfo-xl"),PZe=o(" \u2014 "),tR=a("a"),$Ze=o("TransfoXLTokenizer"),IZe=o(" (Transformer-XL model)"),DZe=l(),ih=a("li"),uY=a("strong"),NZe=o("wav2vec2"),jZe=o(" \u2014 "),aR=a("a"),qZe=o("Wav2Vec2CTCTokenizer"),GZe=o(" (Wav2Vec2 model)"),OZe=l(),dh=a("li"),bY=a("strong"),XZe=o("wav2vec2_phoneme"),VZe=o(" \u2014 "),nR=a("a"),zZe=o("Wav2Vec2PhonemeCTCTokenizer"),WZe=o(" (Wav2Vec2Phoneme model)"),QZe=l(),Is=a("li"),vY=a("strong"),HZe=o("xglm"),UZe=o(" \u2014 "),sR=a("a"),JZe=o("XGLMTokenizer"),YZe=o(" or "),lR=a("a"),KZe=o("XGLMTokenizerFast"),ZZe=o(" (XGLM model)"),eeo=l(),ch=a("li"),TY=a("strong"),oeo=o("xlm"),reo=o(" \u2014 "),iR=a("a"),teo=o("XLMTokenizer"),aeo=o(" (XLM model)"),neo=l(),fh=a("li"),FY=a("strong"),seo=o("xlm-prophetnet"),leo=o(" \u2014 "),dR=a("a"),ieo=o("XLMProphetNetTokenizer"),deo=o(" (XLMProphetNet model)"),ceo=l(),Ds=a("li"),CY=a("strong"),feo=o("xlm-roberta"),meo=o(" \u2014 "),cR=a("a"),geo=o("XLMRobertaTokenizer"),heo=o(" or "),fR=a("a"),peo=o("XLMRobertaTokenizerFast"),_eo=o(" (XLM-RoBERTa model)"),ueo=l(),Ns=a("li"),MY=a("strong"),beo=o("xlnet"),veo=o(" \u2014 "),mR=a("a"),Teo=o("XLNetTokenizer"),Feo=o(" or "),gR=a("a"),Ceo=o("XLNetTokenizerFast"),Meo=o(" (XLNet model)"),Eeo=l(),EY=a("p"),yeo=o("Examples:"),weo=l(),f(A3.$$.fragment),Aeo=l(),mh=a("div"),f(L3.$$.fragment),Leo=l(),yY=a("p"),Beo=o("Register a new tokenizer in this mapping."),Cke=l(),Qi=a("h2"),gh=a("a"),wY=a("span"),f(B3.$$.fragment),xeo=l(),AY=a("span"),keo=o("AutoFeatureExtractor"),Mke=l(),Ho=a("div"),f(x3.$$.fragment),Reo=l(),k3=a("p"),Seo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hR=a("a"),Peo=o("AutoFeatureExtractor.from_pretrained()"),$eo=o(" class method."),Ieo=l(),R3=a("p"),Deo=o("This class cannot be instantiated directly using "),LY=a("code"),Neo=o("__init__()"),jeo=o(" (throws an error)."),qeo=l(),$e=a("div"),f(S3.$$.fragment),Geo=l(),BY=a("p"),Oeo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Xeo=l(),Xa=a("p"),Veo=o("The feature extractor class to instantiate is selected based on the "),xY=a("code"),zeo=o("model_type"),Weo=o(` property of the config object
(either passed as an argument or loaded from `),kY=a("code"),Qeo=o("pretrained_model_name_or_path"),Heo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),RY=a("code"),Ueo=o("pretrained_model_name_or_path"),Jeo=o(":"),Yeo=l(),re=a("ul"),hh=a("li"),SY=a("strong"),Keo=o("beit"),Zeo=o(" \u2014 "),pR=a("a"),eoo=o("BeitFeatureExtractor"),ooo=o(" (BEiT model)"),roo=l(),ph=a("li"),PY=a("strong"),too=o("clip"),aoo=o(" \u2014 "),_R=a("a"),noo=o("CLIPFeatureExtractor"),soo=o(" (CLIP model)"),loo=l(),_h=a("li"),$Y=a("strong"),ioo=o("convnext"),doo=o(" \u2014 "),uR=a("a"),coo=o("ConvNextFeatureExtractor"),foo=o(" (ConvNext model)"),moo=l(),uh=a("li"),IY=a("strong"),goo=o("deit"),hoo=o(" \u2014 "),bR=a("a"),poo=o("DeiTFeatureExtractor"),_oo=o(" (DeiT model)"),uoo=l(),bh=a("li"),DY=a("strong"),boo=o("detr"),voo=o(" \u2014 "),vR=a("a"),Too=o("DetrFeatureExtractor"),Foo=o(" (DETR model)"),Coo=l(),vh=a("li"),NY=a("strong"),Moo=o("hubert"),Eoo=o(" \u2014 "),TR=a("a"),yoo=o("Wav2Vec2FeatureExtractor"),woo=o(" (Hubert model)"),Aoo=l(),Th=a("li"),jY=a("strong"),Loo=o("layoutlmv2"),Boo=o(" \u2014 "),FR=a("a"),xoo=o("LayoutLMv2FeatureExtractor"),koo=o(" (LayoutLMv2 model)"),Roo=l(),Fh=a("li"),qY=a("strong"),Soo=o("maskformer"),Poo=o(" \u2014 "),CR=a("a"),$oo=o("MaskFormerFeatureExtractor"),Ioo=o(" (MaskFormer model)"),Doo=l(),Ch=a("li"),GY=a("strong"),Noo=o("perceiver"),joo=o(" \u2014 "),MR=a("a"),qoo=o("PerceiverFeatureExtractor"),Goo=o(" (Perceiver model)"),Ooo=l(),Mh=a("li"),OY=a("strong"),Xoo=o("poolformer"),Voo=o(" \u2014 "),ER=a("a"),zoo=o("PoolFormerFeatureExtractor"),Woo=o(" (PoolFormer model)"),Qoo=l(),Eh=a("li"),XY=a("strong"),Hoo=o("resnet"),Uoo=o(" \u2014 "),yR=a("a"),Joo=o("ConvNextFeatureExtractor"),Yoo=o(" (ResNet model)"),Koo=l(),yh=a("li"),VY=a("strong"),Zoo=o("segformer"),ero=o(" \u2014 "),wR=a("a"),oro=o("SegformerFeatureExtractor"),rro=o(" (SegFormer model)"),tro=l(),wh=a("li"),zY=a("strong"),aro=o("speech_to_text"),nro=o(" \u2014 "),AR=a("a"),sro=o("Speech2TextFeatureExtractor"),lro=o(" (Speech2Text model)"),iro=l(),Ah=a("li"),WY=a("strong"),dro=o("swin"),cro=o(" \u2014 "),LR=a("a"),fro=o("ViTFeatureExtractor"),mro=o(" (Swin model)"),gro=l(),Lh=a("li"),QY=a("strong"),hro=o("van"),pro=o(" \u2014 "),BR=a("a"),_ro=o("ConvNextFeatureExtractor"),uro=o(" (VAN model)"),bro=l(),Bh=a("li"),HY=a("strong"),vro=o("vit"),Tro=o(" \u2014 "),xR=a("a"),Fro=o("ViTFeatureExtractor"),Cro=o(" (ViT model)"),Mro=l(),xh=a("li"),UY=a("strong"),Ero=o("vit_mae"),yro=o(" \u2014 "),kR=a("a"),wro=o("ViTFeatureExtractor"),Aro=o(" (ViTMAE model)"),Lro=l(),kh=a("li"),JY=a("strong"),Bro=o("wav2vec2"),xro=o(" \u2014 "),RR=a("a"),kro=o("Wav2Vec2FeatureExtractor"),Rro=o(" (Wav2Vec2 model)"),Sro=l(),f(Rh.$$.fragment),Pro=l(),YY=a("p"),$ro=o("Examples:"),Iro=l(),f(P3.$$.fragment),Dro=l(),Sh=a("div"),f($3.$$.fragment),Nro=l(),KY=a("p"),jro=o("Register a new feature extractor for this class."),Eke=l(),Hi=a("h2"),Ph=a("a"),ZY=a("span"),f(I3.$$.fragment),qro=l(),eK=a("span"),Gro=o("AutoProcessor"),yke=l(),Uo=a("div"),f(D3.$$.fragment),Oro=l(),N3=a("p"),Xro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SR=a("a"),Vro=o("AutoProcessor.from_pretrained()"),zro=o(" class method."),Wro=l(),j3=a("p"),Qro=o("This class cannot be instantiated directly using "),oK=a("code"),Hro=o("__init__()"),Uro=o(" (throws an error)."),Jro=l(),Ie=a("div"),f(q3.$$.fragment),Yro=l(),rK=a("p"),Kro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Zro=l(),Ui=a("p"),eto=o("The processor class to instantiate is selected based on the "),tK=a("code"),oto=o("model_type"),rto=o(` property of the config object (either
passed as an argument or loaded from `),aK=a("code"),tto=o("pretrained_model_name_or_path"),ato=o(" if possible):"),nto=l(),xe=a("ul"),$h=a("li"),nK=a("strong"),sto=o("clip"),lto=o(" \u2014 "),PR=a("a"),ito=o("CLIPProcessor"),dto=o(" (CLIP model)"),cto=l(),Ih=a("li"),sK=a("strong"),fto=o("layoutlmv2"),mto=o(" \u2014 "),$R=a("a"),gto=o("LayoutLMv2Processor"),hto=o(" (LayoutLMv2 model)"),pto=l(),Dh=a("li"),lK=a("strong"),_to=o("layoutxlm"),uto=o(" \u2014 "),IR=a("a"),bto=o("LayoutXLMProcessor"),vto=o(" (LayoutXLM model)"),Tto=l(),Nh=a("li"),iK=a("strong"),Fto=o("speech_to_text"),Cto=o(" \u2014 "),DR=a("a"),Mto=o("Speech2TextProcessor"),Eto=o(" (Speech2Text model)"),yto=l(),jh=a("li"),dK=a("strong"),wto=o("speech_to_text_2"),Ato=o(" \u2014 "),NR=a("a"),Lto=o("Speech2Text2Processor"),Bto=o(" (Speech2Text2 model)"),xto=l(),qh=a("li"),cK=a("strong"),kto=o("trocr"),Rto=o(" \u2014 "),jR=a("a"),Sto=o("TrOCRProcessor"),Pto=o(" (TrOCR model)"),$to=l(),Gh=a("li"),fK=a("strong"),Ito=o("vision-text-dual-encoder"),Dto=o(" \u2014 "),qR=a("a"),Nto=o("VisionTextDualEncoderProcessor"),jto=o(" (VisionTextDualEncoder model)"),qto=l(),Oh=a("li"),mK=a("strong"),Gto=o("wav2vec2"),Oto=o(" \u2014 "),GR=a("a"),Xto=o("Wav2Vec2Processor"),Vto=o(" (Wav2Vec2 model)"),zto=l(),f(Xh.$$.fragment),Wto=l(),gK=a("p"),Qto=o("Examples:"),Hto=l(),f(G3.$$.fragment),Uto=l(),Vh=a("div"),f(O3.$$.fragment),Jto=l(),hK=a("p"),Yto=o("Register a new processor for this class."),wke=l(),Ji=a("h2"),zh=a("a"),pK=a("span"),f(X3.$$.fragment),Kto=l(),_K=a("span"),Zto=o("AutoModel"),Ake=l(),Jo=a("div"),f(V3.$$.fragment),eao=l(),Yi=a("p"),oao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=a("code"),rao=o("from_pretrained()"),tao=o("class method or the "),bK=a("code"),aao=o("from_config()"),nao=o(`class
method.`),sao=l(),z3=a("p"),lao=o("This class cannot be instantiated directly using "),vK=a("code"),iao=o("__init__()"),dao=o(" (throws an error)."),cao=l(),Vr=a("div"),f(W3.$$.fragment),fao=l(),TK=a("p"),mao=o("Instantiates one of the base model classes of the library from a configuration."),gao=l(),Ki=a("p"),hao=o(`Note:
Loading a model from its configuration file does `),FK=a("strong"),pao=o("not"),_ao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("code"),uao=o("from_pretrained()"),bao=o("to load the model weights."),vao=l(),MK=a("p"),Tao=o("Examples:"),Fao=l(),f(Q3.$$.fragment),Cao=l(),De=a("div"),f(H3.$$.fragment),Mao=l(),EK=a("p"),Eao=o("Instantiate one of the base model classes of the library from a pretrained model."),yao=l(),Va=a("p"),wao=o("The model class to instantiate is selected based on the "),yK=a("code"),Aao=o("model_type"),Lao=o(` property of the config object (either
passed as an argument or loaded from `),wK=a("code"),Bao=o("pretrained_model_name_or_path"),xao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AK=a("code"),kao=o("pretrained_model_name_or_path"),Rao=o(":"),Sao=l(),F=a("ul"),Wh=a("li"),LK=a("strong"),Pao=o("albert"),$ao=o(" \u2014 "),OR=a("a"),Iao=o("AlbertModel"),Dao=o(" (ALBERT model)"),Nao=l(),Qh=a("li"),BK=a("strong"),jao=o("bart"),qao=o(" \u2014 "),XR=a("a"),Gao=o("BartModel"),Oao=o(" (BART model)"),Xao=l(),Hh=a("li"),xK=a("strong"),Vao=o("beit"),zao=o(" \u2014 "),VR=a("a"),Wao=o("BeitModel"),Qao=o(" (BEiT model)"),Hao=l(),Uh=a("li"),kK=a("strong"),Uao=o("bert"),Jao=o(" \u2014 "),zR=a("a"),Yao=o("BertModel"),Kao=o(" (BERT model)"),Zao=l(),Jh=a("li"),RK=a("strong"),eno=o("bert-generation"),ono=o(" \u2014 "),WR=a("a"),rno=o("BertGenerationEncoder"),tno=o(" (Bert Generation model)"),ano=l(),Yh=a("li"),SK=a("strong"),nno=o("big_bird"),sno=o(" \u2014 "),QR=a("a"),lno=o("BigBirdModel"),ino=o(" (BigBird model)"),dno=l(),Kh=a("li"),PK=a("strong"),cno=o("bigbird_pegasus"),fno=o(" \u2014 "),HR=a("a"),mno=o("BigBirdPegasusModel"),gno=o(" (BigBirdPegasus model)"),hno=l(),Zh=a("li"),$K=a("strong"),pno=o("blenderbot"),_no=o(" \u2014 "),UR=a("a"),uno=o("BlenderbotModel"),bno=o(" (Blenderbot model)"),vno=l(),ep=a("li"),IK=a("strong"),Tno=o("blenderbot-small"),Fno=o(" \u2014 "),JR=a("a"),Cno=o("BlenderbotSmallModel"),Mno=o(" (BlenderbotSmall model)"),Eno=l(),op=a("li"),DK=a("strong"),yno=o("camembert"),wno=o(" \u2014 "),YR=a("a"),Ano=o("CamembertModel"),Lno=o(" (CamemBERT model)"),Bno=l(),rp=a("li"),NK=a("strong"),xno=o("canine"),kno=o(" \u2014 "),KR=a("a"),Rno=o("CanineModel"),Sno=o(" (Canine model)"),Pno=l(),tp=a("li"),jK=a("strong"),$no=o("clip"),Ino=o(" \u2014 "),ZR=a("a"),Dno=o("CLIPModel"),Nno=o(" (CLIP model)"),jno=l(),ap=a("li"),qK=a("strong"),qno=o("convbert"),Gno=o(" \u2014 "),eS=a("a"),Ono=o("ConvBertModel"),Xno=o(" (ConvBERT model)"),Vno=l(),np=a("li"),GK=a("strong"),zno=o("convnext"),Wno=o(" \u2014 "),oS=a("a"),Qno=o("ConvNextModel"),Hno=o(" (ConvNext model)"),Uno=l(),sp=a("li"),OK=a("strong"),Jno=o("ctrl"),Yno=o(" \u2014 "),rS=a("a"),Kno=o("CTRLModel"),Zno=o(" (CTRL model)"),eso=l(),lp=a("li"),XK=a("strong"),oso=o("data2vec-audio"),rso=o(" \u2014 "),tS=a("a"),tso=o("Data2VecAudioModel"),aso=o(" (Data2VecAudio model)"),nso=l(),ip=a("li"),VK=a("strong"),sso=o("data2vec-text"),lso=o(" \u2014 "),aS=a("a"),iso=o("Data2VecTextModel"),dso=o(" (Data2VecText model)"),cso=l(),dp=a("li"),zK=a("strong"),fso=o("deberta"),mso=o(" \u2014 "),nS=a("a"),gso=o("DebertaModel"),hso=o(" (DeBERTa model)"),pso=l(),cp=a("li"),WK=a("strong"),_so=o("deberta-v2"),uso=o(" \u2014 "),sS=a("a"),bso=o("DebertaV2Model"),vso=o(" (DeBERTa-v2 model)"),Tso=l(),fp=a("li"),QK=a("strong"),Fso=o("decision_transformer"),Cso=o(" \u2014 "),lS=a("a"),Mso=o("DecisionTransformerModel"),Eso=o(" (Decision Transformer model)"),yso=l(),mp=a("li"),HK=a("strong"),wso=o("deit"),Aso=o(" \u2014 "),iS=a("a"),Lso=o("DeiTModel"),Bso=o(" (DeiT model)"),xso=l(),gp=a("li"),UK=a("strong"),kso=o("detr"),Rso=o(" \u2014 "),dS=a("a"),Sso=o("DetrModel"),Pso=o(" (DETR model)"),$so=l(),hp=a("li"),JK=a("strong"),Iso=o("distilbert"),Dso=o(" \u2014 "),cS=a("a"),Nso=o("DistilBertModel"),jso=o(" (DistilBERT model)"),qso=l(),pp=a("li"),YK=a("strong"),Gso=o("dpr"),Oso=o(" \u2014 "),fS=a("a"),Xso=o("DPRQuestionEncoder"),Vso=o(" (DPR model)"),zso=l(),_p=a("li"),KK=a("strong"),Wso=o("dpt"),Qso=o(" \u2014 "),mS=a("a"),Hso=o("DPTModel"),Uso=o(" (DPT model)"),Jso=l(),up=a("li"),ZK=a("strong"),Yso=o("electra"),Kso=o(" \u2014 "),gS=a("a"),Zso=o("ElectraModel"),elo=o(" (ELECTRA model)"),olo=l(),bp=a("li"),eZ=a("strong"),rlo=o("flaubert"),tlo=o(" \u2014 "),hS=a("a"),alo=o("FlaubertModel"),nlo=o(" (FlauBERT model)"),slo=l(),vp=a("li"),oZ=a("strong"),llo=o("fnet"),ilo=o(" \u2014 "),pS=a("a"),dlo=o("FNetModel"),clo=o(" (FNet model)"),flo=l(),Tp=a("li"),rZ=a("strong"),mlo=o("fsmt"),glo=o(" \u2014 "),_S=a("a"),hlo=o("FSMTModel"),plo=o(" (FairSeq Machine-Translation model)"),_lo=l(),js=a("li"),tZ=a("strong"),ulo=o("funnel"),blo=o(" \u2014 "),uS=a("a"),vlo=o("FunnelModel"),Tlo=o(" or "),bS=a("a"),Flo=o("FunnelBaseModel"),Clo=o(" (Funnel Transformer model)"),Mlo=l(),Fp=a("li"),aZ=a("strong"),Elo=o("glpn"),ylo=o(" \u2014 "),vS=a("a"),wlo=o("GLPNModel"),Alo=o(" (GLPN model)"),Llo=l(),Cp=a("li"),nZ=a("strong"),Blo=o("gpt2"),xlo=o(" \u2014 "),TS=a("a"),klo=o("GPT2Model"),Rlo=o(" (OpenAI GPT-2 model)"),Slo=l(),Mp=a("li"),sZ=a("strong"),Plo=o("gpt_neo"),$lo=o(" \u2014 "),FS=a("a"),Ilo=o("GPTNeoModel"),Dlo=o(" (GPT Neo model)"),Nlo=l(),Ep=a("li"),lZ=a("strong"),jlo=o("gptj"),qlo=o(" \u2014 "),CS=a("a"),Glo=o("GPTJModel"),Olo=o(" (GPT-J model)"),Xlo=l(),yp=a("li"),iZ=a("strong"),Vlo=o("hubert"),zlo=o(" \u2014 "),MS=a("a"),Wlo=o("HubertModel"),Qlo=o(" (Hubert model)"),Hlo=l(),wp=a("li"),dZ=a("strong"),Ulo=o("ibert"),Jlo=o(" \u2014 "),ES=a("a"),Ylo=o("IBertModel"),Klo=o(" (I-BERT model)"),Zlo=l(),Ap=a("li"),cZ=a("strong"),eio=o("imagegpt"),oio=o(" \u2014 "),yS=a("a"),rio=o("ImageGPTModel"),tio=o(" (ImageGPT model)"),aio=l(),Lp=a("li"),fZ=a("strong"),nio=o("layoutlm"),sio=o(" \u2014 "),wS=a("a"),lio=o("LayoutLMModel"),iio=o(" (LayoutLM model)"),dio=l(),Bp=a("li"),mZ=a("strong"),cio=o("layoutlmv2"),fio=o(" \u2014 "),AS=a("a"),mio=o("LayoutLMv2Model"),gio=o(" (LayoutLMv2 model)"),hio=l(),xp=a("li"),gZ=a("strong"),pio=o("led"),_io=o(" \u2014 "),LS=a("a"),uio=o("LEDModel"),bio=o(" (LED model)"),vio=l(),kp=a("li"),hZ=a("strong"),Tio=o("longformer"),Fio=o(" \u2014 "),BS=a("a"),Cio=o("LongformerModel"),Mio=o(" (Longformer model)"),Eio=l(),Rp=a("li"),pZ=a("strong"),yio=o("luke"),wio=o(" \u2014 "),xS=a("a"),Aio=o("LukeModel"),Lio=o(" (LUKE model)"),Bio=l(),Sp=a("li"),_Z=a("strong"),xio=o("lxmert"),kio=o(" \u2014 "),kS=a("a"),Rio=o("LxmertModel"),Sio=o(" (LXMERT model)"),Pio=l(),Pp=a("li"),uZ=a("strong"),$io=o("m2m_100"),Iio=o(" \u2014 "),RS=a("a"),Dio=o("M2M100Model"),Nio=o(" (M2M100 model)"),jio=l(),$p=a("li"),bZ=a("strong"),qio=o("marian"),Gio=o(" \u2014 "),SS=a("a"),Oio=o("MarianModel"),Xio=o(" (Marian model)"),Vio=l(),Ip=a("li"),vZ=a("strong"),zio=o("maskformer"),Wio=o(" \u2014 "),PS=a("a"),Qio=o("MaskFormerModel"),Hio=o(" (MaskFormer model)"),Uio=l(),Dp=a("li"),TZ=a("strong"),Jio=o("mbart"),Yio=o(" \u2014 "),$S=a("a"),Kio=o("MBartModel"),Zio=o(" (mBART model)"),edo=l(),Np=a("li"),FZ=a("strong"),odo=o("megatron-bert"),rdo=o(" \u2014 "),IS=a("a"),tdo=o("MegatronBertModel"),ado=o(" (MegatronBert model)"),ndo=l(),jp=a("li"),CZ=a("strong"),sdo=o("mobilebert"),ldo=o(" \u2014 "),DS=a("a"),ido=o("MobileBertModel"),ddo=o(" (MobileBERT model)"),cdo=l(),qp=a("li"),MZ=a("strong"),fdo=o("mpnet"),mdo=o(" \u2014 "),NS=a("a"),gdo=o("MPNetModel"),hdo=o(" (MPNet model)"),pdo=l(),Gp=a("li"),EZ=a("strong"),_do=o("mt5"),udo=o(" \u2014 "),jS=a("a"),bdo=o("MT5Model"),vdo=o(" (mT5 model)"),Tdo=l(),Op=a("li"),yZ=a("strong"),Fdo=o("nystromformer"),Cdo=o(" \u2014 "),qS=a("a"),Mdo=o("NystromformerModel"),Edo=o(" (Nystromformer model)"),ydo=l(),Xp=a("li"),wZ=a("strong"),wdo=o("openai-gpt"),Ado=o(" \u2014 "),GS=a("a"),Ldo=o("OpenAIGPTModel"),Bdo=o(" (OpenAI GPT model)"),xdo=l(),Vp=a("li"),AZ=a("strong"),kdo=o("pegasus"),Rdo=o(" \u2014 "),OS=a("a"),Sdo=o("PegasusModel"),Pdo=o(" (Pegasus model)"),$do=l(),zp=a("li"),LZ=a("strong"),Ido=o("perceiver"),Ddo=o(" \u2014 "),XS=a("a"),Ndo=o("PerceiverModel"),jdo=o(" (Perceiver model)"),qdo=l(),Wp=a("li"),BZ=a("strong"),Gdo=o("plbart"),Odo=o(" \u2014 "),VS=a("a"),Xdo=o("PLBartModel"),Vdo=o(" (PLBart model)"),zdo=l(),Qp=a("li"),xZ=a("strong"),Wdo=o("poolformer"),Qdo=o(" \u2014 "),zS=a("a"),Hdo=o("PoolFormerModel"),Udo=o(" (PoolFormer model)"),Jdo=l(),Hp=a("li"),kZ=a("strong"),Ydo=o("prophetnet"),Kdo=o(" \u2014 "),WS=a("a"),Zdo=o("ProphetNetModel"),eco=o(" (ProphetNet model)"),oco=l(),Up=a("li"),RZ=a("strong"),rco=o("qdqbert"),tco=o(" \u2014 "),QS=a("a"),aco=o("QDQBertModel"),nco=o(" (QDQBert model)"),sco=l(),Jp=a("li"),SZ=a("strong"),lco=o("reformer"),ico=o(" \u2014 "),HS=a("a"),dco=o("ReformerModel"),cco=o(" (Reformer model)"),fco=l(),Yp=a("li"),PZ=a("strong"),mco=o("rembert"),gco=o(" \u2014 "),US=a("a"),hco=o("RemBertModel"),pco=o(" (RemBERT model)"),_co=l(),Kp=a("li"),$Z=a("strong"),uco=o("resnet"),bco=o(" \u2014 "),JS=a("a"),vco=o("ResNetModel"),Tco=o(" (ResNet model)"),Fco=l(),Zp=a("li"),IZ=a("strong"),Cco=o("retribert"),Mco=o(" \u2014 "),YS=a("a"),Eco=o("RetriBertModel"),yco=o(" (RetriBERT model)"),wco=l(),e_=a("li"),DZ=a("strong"),Aco=o("roberta"),Lco=o(" \u2014 "),KS=a("a"),Bco=o("RobertaModel"),xco=o(" (RoBERTa model)"),kco=l(),o_=a("li"),NZ=a("strong"),Rco=o("roformer"),Sco=o(" \u2014 "),ZS=a("a"),Pco=o("RoFormerModel"),$co=o(" (RoFormer model)"),Ico=l(),r_=a("li"),jZ=a("strong"),Dco=o("segformer"),Nco=o(" \u2014 "),eP=a("a"),jco=o("SegformerModel"),qco=o(" (SegFormer model)"),Gco=l(),t_=a("li"),qZ=a("strong"),Oco=o("sew"),Xco=o(" \u2014 "),oP=a("a"),Vco=o("SEWModel"),zco=o(" (SEW model)"),Wco=l(),a_=a("li"),GZ=a("strong"),Qco=o("sew-d"),Hco=o(" \u2014 "),rP=a("a"),Uco=o("SEWDModel"),Jco=o(" (SEW-D model)"),Yco=l(),n_=a("li"),OZ=a("strong"),Kco=o("speech_to_text"),Zco=o(" \u2014 "),tP=a("a"),efo=o("Speech2TextModel"),ofo=o(" (Speech2Text model)"),rfo=l(),s_=a("li"),XZ=a("strong"),tfo=o("splinter"),afo=o(" \u2014 "),aP=a("a"),nfo=o("SplinterModel"),sfo=o(" (Splinter model)"),lfo=l(),l_=a("li"),VZ=a("strong"),ifo=o("squeezebert"),dfo=o(" \u2014 "),nP=a("a"),cfo=o("SqueezeBertModel"),ffo=o(" (SqueezeBERT model)"),mfo=l(),i_=a("li"),zZ=a("strong"),gfo=o("swin"),hfo=o(" \u2014 "),sP=a("a"),pfo=o("SwinModel"),_fo=o(" (Swin model)"),ufo=l(),d_=a("li"),WZ=a("strong"),bfo=o("t5"),vfo=o(" \u2014 "),lP=a("a"),Tfo=o("T5Model"),Ffo=o(" (T5 model)"),Cfo=l(),c_=a("li"),QZ=a("strong"),Mfo=o("tapas"),Efo=o(" \u2014 "),iP=a("a"),yfo=o("TapasModel"),wfo=o(" (TAPAS model)"),Afo=l(),f_=a("li"),HZ=a("strong"),Lfo=o("transfo-xl"),Bfo=o(" \u2014 "),dP=a("a"),xfo=o("TransfoXLModel"),kfo=o(" (Transformer-XL model)"),Rfo=l(),m_=a("li"),UZ=a("strong"),Sfo=o("unispeech"),Pfo=o(" \u2014 "),cP=a("a"),$fo=o("UniSpeechModel"),Ifo=o(" (UniSpeech model)"),Dfo=l(),g_=a("li"),JZ=a("strong"),Nfo=o("unispeech-sat"),jfo=o(" \u2014 "),fP=a("a"),qfo=o("UniSpeechSatModel"),Gfo=o(" (UniSpeechSat model)"),Ofo=l(),h_=a("li"),YZ=a("strong"),Xfo=o("van"),Vfo=o(" \u2014 "),mP=a("a"),zfo=o("VanModel"),Wfo=o(" (VAN model)"),Qfo=l(),p_=a("li"),KZ=a("strong"),Hfo=o("vilt"),Ufo=o(" \u2014 "),gP=a("a"),Jfo=o("ViltModel"),Yfo=o(" (ViLT model)"),Kfo=l(),__=a("li"),ZZ=a("strong"),Zfo=o("vision-text-dual-encoder"),emo=o(" \u2014 "),hP=a("a"),omo=o("VisionTextDualEncoderModel"),rmo=o(" (VisionTextDualEncoder model)"),tmo=l(),u_=a("li"),eee=a("strong"),amo=o("visual_bert"),nmo=o(" \u2014 "),pP=a("a"),smo=o("VisualBertModel"),lmo=o(" (VisualBert model)"),imo=l(),b_=a("li"),oee=a("strong"),dmo=o("vit"),cmo=o(" \u2014 "),_P=a("a"),fmo=o("ViTModel"),mmo=o(" (ViT model)"),gmo=l(),v_=a("li"),ree=a("strong"),hmo=o("vit_mae"),pmo=o(" \u2014 "),uP=a("a"),_mo=o("ViTMAEModel"),umo=o(" (ViTMAE model)"),bmo=l(),T_=a("li"),tee=a("strong"),vmo=o("wav2vec2"),Tmo=o(" \u2014 "),bP=a("a"),Fmo=o("Wav2Vec2Model"),Cmo=o(" (Wav2Vec2 model)"),Mmo=l(),F_=a("li"),aee=a("strong"),Emo=o("wavlm"),ymo=o(" \u2014 "),vP=a("a"),wmo=o("WavLMModel"),Amo=o(" (WavLM model)"),Lmo=l(),C_=a("li"),nee=a("strong"),Bmo=o("xglm"),xmo=o(" \u2014 "),TP=a("a"),kmo=o("XGLMModel"),Rmo=o(" (XGLM model)"),Smo=l(),M_=a("li"),see=a("strong"),Pmo=o("xlm"),$mo=o(" \u2014 "),FP=a("a"),Imo=o("XLMModel"),Dmo=o(" (XLM model)"),Nmo=l(),E_=a("li"),lee=a("strong"),jmo=o("xlm-prophetnet"),qmo=o(" \u2014 "),CP=a("a"),Gmo=o("XLMProphetNetModel"),Omo=o(" (XLMProphetNet model)"),Xmo=l(),y_=a("li"),iee=a("strong"),Vmo=o("xlm-roberta"),zmo=o(" \u2014 "),MP=a("a"),Wmo=o("XLMRobertaModel"),Qmo=o(" (XLM-RoBERTa model)"),Hmo=l(),w_=a("li"),dee=a("strong"),Umo=o("xlm-roberta-xl"),Jmo=o(" \u2014 "),EP=a("a"),Ymo=o("XLMRobertaXLModel"),Kmo=o(" (XLM-RoBERTa-XL model)"),Zmo=l(),A_=a("li"),cee=a("strong"),ego=o("xlnet"),ogo=o(" \u2014 "),yP=a("a"),rgo=o("XLNetModel"),tgo=o(" (XLNet model)"),ago=l(),L_=a("li"),fee=a("strong"),ngo=o("yoso"),sgo=o(" \u2014 "),wP=a("a"),lgo=o("YosoModel"),igo=o(" (YOSO model)"),dgo=l(),B_=a("p"),cgo=o("The model is set in evaluation mode by default using "),mee=a("code"),fgo=o("model.eval()"),mgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gee=a("code"),ggo=o("model.train()"),hgo=l(),hee=a("p"),pgo=o("Examples:"),_go=l(),f(U3.$$.fragment),Lke=l(),Zi=a("h2"),x_=a("a"),pee=a("span"),f(J3.$$.fragment),ugo=l(),_ee=a("span"),bgo=o("AutoModelForPreTraining"),Bke=l(),Yo=a("div"),f(Y3.$$.fragment),vgo=l(),ed=a("p"),Tgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uee=a("code"),Fgo=o("from_pretrained()"),Cgo=o("class method or the "),bee=a("code"),Mgo=o("from_config()"),Ego=o(`class
method.`),ygo=l(),K3=a("p"),wgo=o("This class cannot be instantiated directly using "),vee=a("code"),Ago=o("__init__()"),Lgo=o(" (throws an error)."),Bgo=l(),zr=a("div"),f(Z3.$$.fragment),xgo=l(),Tee=a("p"),kgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rgo=l(),od=a("p"),Sgo=o(`Note:
Loading a model from its configuration file does `),Fee=a("strong"),Pgo=o("not"),$go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("code"),Igo=o("from_pretrained()"),Dgo=o("to load the model weights."),Ngo=l(),Mee=a("p"),jgo=o("Examples:"),qgo=l(),f(ey.$$.fragment),Ggo=l(),Ne=a("div"),f(oy.$$.fragment),Ogo=l(),Eee=a("p"),Xgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vgo=l(),za=a("p"),zgo=o("The model class to instantiate is selected based on the "),yee=a("code"),Wgo=o("model_type"),Qgo=o(` property of the config object (either
passed as an argument or loaded from `),wee=a("code"),Hgo=o("pretrained_model_name_or_path"),Ugo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aee=a("code"),Jgo=o("pretrained_model_name_or_path"),Ygo=o(":"),Kgo=l(),k=a("ul"),k_=a("li"),Lee=a("strong"),Zgo=o("albert"),eho=o(" \u2014 "),AP=a("a"),oho=o("AlbertForPreTraining"),rho=o(" (ALBERT model)"),tho=l(),R_=a("li"),Bee=a("strong"),aho=o("bart"),nho=o(" \u2014 "),LP=a("a"),sho=o("BartForConditionalGeneration"),lho=o(" (BART model)"),iho=l(),S_=a("li"),xee=a("strong"),dho=o("bert"),cho=o(" \u2014 "),BP=a("a"),fho=o("BertForPreTraining"),mho=o(" (BERT model)"),gho=l(),P_=a("li"),kee=a("strong"),hho=o("big_bird"),pho=o(" \u2014 "),xP=a("a"),_ho=o("BigBirdForPreTraining"),uho=o(" (BigBird model)"),bho=l(),$_=a("li"),Ree=a("strong"),vho=o("camembert"),Tho=o(" \u2014 "),kP=a("a"),Fho=o("CamembertForMaskedLM"),Cho=o(" (CamemBERT model)"),Mho=l(),I_=a("li"),See=a("strong"),Eho=o("ctrl"),yho=o(" \u2014 "),RP=a("a"),who=o("CTRLLMHeadModel"),Aho=o(" (CTRL model)"),Lho=l(),D_=a("li"),Pee=a("strong"),Bho=o("data2vec-text"),xho=o(" \u2014 "),SP=a("a"),kho=o("Data2VecTextForMaskedLM"),Rho=o(" (Data2VecText model)"),Sho=l(),N_=a("li"),$ee=a("strong"),Pho=o("deberta"),$ho=o(" \u2014 "),PP=a("a"),Iho=o("DebertaForMaskedLM"),Dho=o(" (DeBERTa model)"),Nho=l(),j_=a("li"),Iee=a("strong"),jho=o("deberta-v2"),qho=o(" \u2014 "),$P=a("a"),Gho=o("DebertaV2ForMaskedLM"),Oho=o(" (DeBERTa-v2 model)"),Xho=l(),q_=a("li"),Dee=a("strong"),Vho=o("distilbert"),zho=o(" \u2014 "),IP=a("a"),Who=o("DistilBertForMaskedLM"),Qho=o(" (DistilBERT model)"),Hho=l(),G_=a("li"),Nee=a("strong"),Uho=o("electra"),Jho=o(" \u2014 "),DP=a("a"),Yho=o("ElectraForPreTraining"),Kho=o(" (ELECTRA model)"),Zho=l(),O_=a("li"),jee=a("strong"),epo=o("flaubert"),opo=o(" \u2014 "),NP=a("a"),rpo=o("FlaubertWithLMHeadModel"),tpo=o(" (FlauBERT model)"),apo=l(),X_=a("li"),qee=a("strong"),npo=o("fnet"),spo=o(" \u2014 "),jP=a("a"),lpo=o("FNetForPreTraining"),ipo=o(" (FNet model)"),dpo=l(),V_=a("li"),Gee=a("strong"),cpo=o("fsmt"),fpo=o(" \u2014 "),qP=a("a"),mpo=o("FSMTForConditionalGeneration"),gpo=o(" (FairSeq Machine-Translation model)"),hpo=l(),z_=a("li"),Oee=a("strong"),ppo=o("funnel"),_po=o(" \u2014 "),GP=a("a"),upo=o("FunnelForPreTraining"),bpo=o(" (Funnel Transformer model)"),vpo=l(),W_=a("li"),Xee=a("strong"),Tpo=o("gpt2"),Fpo=o(" \u2014 "),OP=a("a"),Cpo=o("GPT2LMHeadModel"),Mpo=o(" (OpenAI GPT-2 model)"),Epo=l(),Q_=a("li"),Vee=a("strong"),ypo=o("ibert"),wpo=o(" \u2014 "),XP=a("a"),Apo=o("IBertForMaskedLM"),Lpo=o(" (I-BERT model)"),Bpo=l(),H_=a("li"),zee=a("strong"),xpo=o("layoutlm"),kpo=o(" \u2014 "),VP=a("a"),Rpo=o("LayoutLMForMaskedLM"),Spo=o(" (LayoutLM model)"),Ppo=l(),U_=a("li"),Wee=a("strong"),$po=o("longformer"),Ipo=o(" \u2014 "),zP=a("a"),Dpo=o("LongformerForMaskedLM"),Npo=o(" (Longformer model)"),jpo=l(),J_=a("li"),Qee=a("strong"),qpo=o("lxmert"),Gpo=o(" \u2014 "),WP=a("a"),Opo=o("LxmertForPreTraining"),Xpo=o(" (LXMERT model)"),Vpo=l(),Y_=a("li"),Hee=a("strong"),zpo=o("megatron-bert"),Wpo=o(" \u2014 "),QP=a("a"),Qpo=o("MegatronBertForPreTraining"),Hpo=o(" (MegatronBert model)"),Upo=l(),K_=a("li"),Uee=a("strong"),Jpo=o("mobilebert"),Ypo=o(" \u2014 "),HP=a("a"),Kpo=o("MobileBertForPreTraining"),Zpo=o(" (MobileBERT model)"),e_o=l(),Z_=a("li"),Jee=a("strong"),o_o=o("mpnet"),r_o=o(" \u2014 "),UP=a("a"),t_o=o("MPNetForMaskedLM"),a_o=o(" (MPNet model)"),n_o=l(),eu=a("li"),Yee=a("strong"),s_o=o("openai-gpt"),l_o=o(" \u2014 "),JP=a("a"),i_o=o("OpenAIGPTLMHeadModel"),d_o=o(" (OpenAI GPT model)"),c_o=l(),ou=a("li"),Kee=a("strong"),f_o=o("retribert"),m_o=o(" \u2014 "),YP=a("a"),g_o=o("RetriBertModel"),h_o=o(" (RetriBERT model)"),p_o=l(),ru=a("li"),Zee=a("strong"),__o=o("roberta"),u_o=o(" \u2014 "),KP=a("a"),b_o=o("RobertaForMaskedLM"),v_o=o(" (RoBERTa model)"),T_o=l(),tu=a("li"),eoe=a("strong"),F_o=o("squeezebert"),C_o=o(" \u2014 "),ZP=a("a"),M_o=o("SqueezeBertForMaskedLM"),E_o=o(" (SqueezeBERT model)"),y_o=l(),au=a("li"),ooe=a("strong"),w_o=o("t5"),A_o=o(" \u2014 "),e$=a("a"),L_o=o("T5ForConditionalGeneration"),B_o=o(" (T5 model)"),x_o=l(),nu=a("li"),roe=a("strong"),k_o=o("tapas"),R_o=o(" \u2014 "),o$=a("a"),S_o=o("TapasForMaskedLM"),P_o=o(" (TAPAS model)"),$_o=l(),su=a("li"),toe=a("strong"),I_o=o("transfo-xl"),D_o=o(" \u2014 "),r$=a("a"),N_o=o("TransfoXLLMHeadModel"),j_o=o(" (Transformer-XL model)"),q_o=l(),lu=a("li"),aoe=a("strong"),G_o=o("unispeech"),O_o=o(" \u2014 "),t$=a("a"),X_o=o("UniSpeechForPreTraining"),V_o=o(" (UniSpeech model)"),z_o=l(),iu=a("li"),noe=a("strong"),W_o=o("unispeech-sat"),Q_o=o(" \u2014 "),a$=a("a"),H_o=o("UniSpeechSatForPreTraining"),U_o=o(" (UniSpeechSat model)"),J_o=l(),du=a("li"),soe=a("strong"),Y_o=o("visual_bert"),K_o=o(" \u2014 "),n$=a("a"),Z_o=o("VisualBertForPreTraining"),euo=o(" (VisualBert model)"),ouo=l(),cu=a("li"),loe=a("strong"),ruo=o("vit_mae"),tuo=o(" \u2014 "),s$=a("a"),auo=o("ViTMAEForPreTraining"),nuo=o(" (ViTMAE model)"),suo=l(),fu=a("li"),ioe=a("strong"),luo=o("wav2vec2"),iuo=o(" \u2014 "),l$=a("a"),duo=o("Wav2Vec2ForPreTraining"),cuo=o(" (Wav2Vec2 model)"),fuo=l(),mu=a("li"),doe=a("strong"),muo=o("xlm"),guo=o(" \u2014 "),i$=a("a"),huo=o("XLMWithLMHeadModel"),puo=o(" (XLM model)"),_uo=l(),gu=a("li"),coe=a("strong"),uuo=o("xlm-roberta"),buo=o(" \u2014 "),d$=a("a"),vuo=o("XLMRobertaForMaskedLM"),Tuo=o(" (XLM-RoBERTa model)"),Fuo=l(),hu=a("li"),foe=a("strong"),Cuo=o("xlm-roberta-xl"),Muo=o(" \u2014 "),c$=a("a"),Euo=o("XLMRobertaXLForMaskedLM"),yuo=o(" (XLM-RoBERTa-XL model)"),wuo=l(),pu=a("li"),moe=a("strong"),Auo=o("xlnet"),Luo=o(" \u2014 "),f$=a("a"),Buo=o("XLNetLMHeadModel"),xuo=o(" (XLNet model)"),kuo=l(),_u=a("p"),Ruo=o("The model is set in evaluation mode by default using "),goe=a("code"),Suo=o("model.eval()"),Puo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hoe=a("code"),$uo=o("model.train()"),Iuo=l(),poe=a("p"),Duo=o("Examples:"),Nuo=l(),f(ry.$$.fragment),xke=l(),rd=a("h2"),uu=a("a"),_oe=a("span"),f(ty.$$.fragment),juo=l(),uoe=a("span"),quo=o("AutoModelForCausalLM"),kke=l(),Ko=a("div"),f(ay.$$.fragment),Guo=l(),td=a("p"),Ouo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),boe=a("code"),Xuo=o("from_pretrained()"),Vuo=o("class method or the "),voe=a("code"),zuo=o("from_config()"),Wuo=o(`class
method.`),Quo=l(),ny=a("p"),Huo=o("This class cannot be instantiated directly using "),Toe=a("code"),Uuo=o("__init__()"),Juo=o(" (throws an error)."),Yuo=l(),Wr=a("div"),f(sy.$$.fragment),Kuo=l(),Foe=a("p"),Zuo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e1o=l(),ad=a("p"),o1o=o(`Note:
Loading a model from its configuration file does `),Coe=a("strong"),r1o=o("not"),t1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=a("code"),a1o=o("from_pretrained()"),n1o=o("to load the model weights."),s1o=l(),Eoe=a("p"),l1o=o("Examples:"),i1o=l(),f(ly.$$.fragment),d1o=l(),je=a("div"),f(iy.$$.fragment),c1o=l(),yoe=a("p"),f1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),m1o=l(),Wa=a("p"),g1o=o("The model class to instantiate is selected based on the "),woe=a("code"),h1o=o("model_type"),p1o=o(` property of the config object (either
passed as an argument or loaded from `),Aoe=a("code"),_1o=o("pretrained_model_name_or_path"),u1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Loe=a("code"),b1o=o("pretrained_model_name_or_path"),v1o=o(":"),T1o=l(),$=a("ul"),bu=a("li"),Boe=a("strong"),F1o=o("bart"),C1o=o(" \u2014 "),m$=a("a"),M1o=o("BartForCausalLM"),E1o=o(" (BART model)"),y1o=l(),vu=a("li"),xoe=a("strong"),w1o=o("bert"),A1o=o(" \u2014 "),g$=a("a"),L1o=o("BertLMHeadModel"),B1o=o(" (BERT model)"),x1o=l(),Tu=a("li"),koe=a("strong"),k1o=o("bert-generation"),R1o=o(" \u2014 "),h$=a("a"),S1o=o("BertGenerationDecoder"),P1o=o(" (Bert Generation model)"),$1o=l(),Fu=a("li"),Roe=a("strong"),I1o=o("big_bird"),D1o=o(" \u2014 "),p$=a("a"),N1o=o("BigBirdForCausalLM"),j1o=o(" (BigBird model)"),q1o=l(),Cu=a("li"),Soe=a("strong"),G1o=o("bigbird_pegasus"),O1o=o(" \u2014 "),_$=a("a"),X1o=o("BigBirdPegasusForCausalLM"),V1o=o(" (BigBirdPegasus model)"),z1o=l(),Mu=a("li"),Poe=a("strong"),W1o=o("blenderbot"),Q1o=o(" \u2014 "),u$=a("a"),H1o=o("BlenderbotForCausalLM"),U1o=o(" (Blenderbot model)"),J1o=l(),Eu=a("li"),$oe=a("strong"),Y1o=o("blenderbot-small"),K1o=o(" \u2014 "),b$=a("a"),Z1o=o("BlenderbotSmallForCausalLM"),e9o=o(" (BlenderbotSmall model)"),o9o=l(),yu=a("li"),Ioe=a("strong"),r9o=o("camembert"),t9o=o(" \u2014 "),v$=a("a"),a9o=o("CamembertForCausalLM"),n9o=o(" (CamemBERT model)"),s9o=l(),wu=a("li"),Doe=a("strong"),l9o=o("ctrl"),i9o=o(" \u2014 "),T$=a("a"),d9o=o("CTRLLMHeadModel"),c9o=o(" (CTRL model)"),f9o=l(),Au=a("li"),Noe=a("strong"),m9o=o("data2vec-text"),g9o=o(" \u2014 "),F$=a("a"),h9o=o("Data2VecTextForCausalLM"),p9o=o(" (Data2VecText model)"),_9o=l(),Lu=a("li"),joe=a("strong"),u9o=o("electra"),b9o=o(" \u2014 "),C$=a("a"),v9o=o("ElectraForCausalLM"),T9o=o(" (ELECTRA model)"),F9o=l(),Bu=a("li"),qoe=a("strong"),C9o=o("gpt2"),M9o=o(" \u2014 "),M$=a("a"),E9o=o("GPT2LMHeadModel"),y9o=o(" (OpenAI GPT-2 model)"),w9o=l(),xu=a("li"),Goe=a("strong"),A9o=o("gpt_neo"),L9o=o(" \u2014 "),E$=a("a"),B9o=o("GPTNeoForCausalLM"),x9o=o(" (GPT Neo model)"),k9o=l(),ku=a("li"),Ooe=a("strong"),R9o=o("gptj"),S9o=o(" \u2014 "),y$=a("a"),P9o=o("GPTJForCausalLM"),$9o=o(" (GPT-J model)"),I9o=l(),Ru=a("li"),Xoe=a("strong"),D9o=o("marian"),N9o=o(" \u2014 "),w$=a("a"),j9o=o("MarianForCausalLM"),q9o=o(" (Marian model)"),G9o=l(),Su=a("li"),Voe=a("strong"),O9o=o("mbart"),X9o=o(" \u2014 "),A$=a("a"),V9o=o("MBartForCausalLM"),z9o=o(" (mBART model)"),W9o=l(),Pu=a("li"),zoe=a("strong"),Q9o=o("megatron-bert"),H9o=o(" \u2014 "),L$=a("a"),U9o=o("MegatronBertForCausalLM"),J9o=o(" (MegatronBert model)"),Y9o=l(),$u=a("li"),Woe=a("strong"),K9o=o("openai-gpt"),Z9o=o(" \u2014 "),B$=a("a"),ebo=o("OpenAIGPTLMHeadModel"),obo=o(" (OpenAI GPT model)"),rbo=l(),Iu=a("li"),Qoe=a("strong"),tbo=o("pegasus"),abo=o(" \u2014 "),x$=a("a"),nbo=o("PegasusForCausalLM"),sbo=o(" (Pegasus model)"),lbo=l(),Du=a("li"),Hoe=a("strong"),ibo=o("plbart"),dbo=o(" \u2014 "),k$=a("a"),cbo=o("PLBartForCausalLM"),fbo=o(" (PLBart model)"),mbo=l(),Nu=a("li"),Uoe=a("strong"),gbo=o("prophetnet"),hbo=o(" \u2014 "),R$=a("a"),pbo=o("ProphetNetForCausalLM"),_bo=o(" (ProphetNet model)"),ubo=l(),ju=a("li"),Joe=a("strong"),bbo=o("qdqbert"),vbo=o(" \u2014 "),S$=a("a"),Tbo=o("QDQBertLMHeadModel"),Fbo=o(" (QDQBert model)"),Cbo=l(),qu=a("li"),Yoe=a("strong"),Mbo=o("reformer"),Ebo=o(" \u2014 "),P$=a("a"),ybo=o("ReformerModelWithLMHead"),wbo=o(" (Reformer model)"),Abo=l(),Gu=a("li"),Koe=a("strong"),Lbo=o("rembert"),Bbo=o(" \u2014 "),$$=a("a"),xbo=o("RemBertForCausalLM"),kbo=o(" (RemBERT model)"),Rbo=l(),Ou=a("li"),Zoe=a("strong"),Sbo=o("roberta"),Pbo=o(" \u2014 "),I$=a("a"),$bo=o("RobertaForCausalLM"),Ibo=o(" (RoBERTa model)"),Dbo=l(),Xu=a("li"),ere=a("strong"),Nbo=o("roformer"),jbo=o(" \u2014 "),D$=a("a"),qbo=o("RoFormerForCausalLM"),Gbo=o(" (RoFormer model)"),Obo=l(),Vu=a("li"),ore=a("strong"),Xbo=o("speech_to_text_2"),Vbo=o(" \u2014 "),N$=a("a"),zbo=o("Speech2Text2ForCausalLM"),Wbo=o(" (Speech2Text2 model)"),Qbo=l(),zu=a("li"),rre=a("strong"),Hbo=o("transfo-xl"),Ubo=o(" \u2014 "),j$=a("a"),Jbo=o("TransfoXLLMHeadModel"),Ybo=o(" (Transformer-XL model)"),Kbo=l(),Wu=a("li"),tre=a("strong"),Zbo=o("trocr"),e5o=o(" \u2014 "),q$=a("a"),o5o=o("TrOCRForCausalLM"),r5o=o(" (TrOCR model)"),t5o=l(),Qu=a("li"),are=a("strong"),a5o=o("xglm"),n5o=o(" \u2014 "),G$=a("a"),s5o=o("XGLMForCausalLM"),l5o=o(" (XGLM model)"),i5o=l(),Hu=a("li"),nre=a("strong"),d5o=o("xlm"),c5o=o(" \u2014 "),O$=a("a"),f5o=o("XLMWithLMHeadModel"),m5o=o(" (XLM model)"),g5o=l(),Uu=a("li"),sre=a("strong"),h5o=o("xlm-prophetnet"),p5o=o(" \u2014 "),X$=a("a"),_5o=o("XLMProphetNetForCausalLM"),u5o=o(" (XLMProphetNet model)"),b5o=l(),Ju=a("li"),lre=a("strong"),v5o=o("xlm-roberta"),T5o=o(" \u2014 "),V$=a("a"),F5o=o("XLMRobertaForCausalLM"),C5o=o(" (XLM-RoBERTa model)"),M5o=l(),Yu=a("li"),ire=a("strong"),E5o=o("xlm-roberta-xl"),y5o=o(" \u2014 "),z$=a("a"),w5o=o("XLMRobertaXLForCausalLM"),A5o=o(" (XLM-RoBERTa-XL model)"),L5o=l(),Ku=a("li"),dre=a("strong"),B5o=o("xlnet"),x5o=o(" \u2014 "),W$=a("a"),k5o=o("XLNetLMHeadModel"),R5o=o(" (XLNet model)"),S5o=l(),Zu=a("p"),P5o=o("The model is set in evaluation mode by default using "),cre=a("code"),$5o=o("model.eval()"),I5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fre=a("code"),D5o=o("model.train()"),N5o=l(),mre=a("p"),j5o=o("Examples:"),q5o=l(),f(dy.$$.fragment),Rke=l(),nd=a("h2"),e1=a("a"),gre=a("span"),f(cy.$$.fragment),G5o=l(),hre=a("span"),O5o=o("AutoModelForMaskedLM"),Ske=l(),Zo=a("div"),f(fy.$$.fragment),X5o=l(),sd=a("p"),V5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pre=a("code"),z5o=o("from_pretrained()"),W5o=o("class method or the "),_re=a("code"),Q5o=o("from_config()"),H5o=o(`class
method.`),U5o=l(),my=a("p"),J5o=o("This class cannot be instantiated directly using "),ure=a("code"),Y5o=o("__init__()"),K5o=o(" (throws an error)."),Z5o=l(),Qr=a("div"),f(gy.$$.fragment),e2o=l(),bre=a("p"),o2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),r2o=l(),ld=a("p"),t2o=o(`Note:
Loading a model from its configuration file does `),vre=a("strong"),a2o=o("not"),n2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("code"),s2o=o("from_pretrained()"),l2o=o("to load the model weights."),i2o=l(),Fre=a("p"),d2o=o("Examples:"),c2o=l(),f(hy.$$.fragment),f2o=l(),qe=a("div"),f(py.$$.fragment),m2o=l(),Cre=a("p"),g2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h2o=l(),Qa=a("p"),p2o=o("The model class to instantiate is selected based on the "),Mre=a("code"),_2o=o("model_type"),u2o=o(` property of the config object (either
passed as an argument or loaded from `),Ere=a("code"),b2o=o("pretrained_model_name_or_path"),v2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yre=a("code"),T2o=o("pretrained_model_name_or_path"),F2o=o(":"),C2o=l(),I=a("ul"),o1=a("li"),wre=a("strong"),M2o=o("albert"),E2o=o(" \u2014 "),Q$=a("a"),y2o=o("AlbertForMaskedLM"),w2o=o(" (ALBERT model)"),A2o=l(),r1=a("li"),Are=a("strong"),L2o=o("bart"),B2o=o(" \u2014 "),H$=a("a"),x2o=o("BartForConditionalGeneration"),k2o=o(" (BART model)"),R2o=l(),t1=a("li"),Lre=a("strong"),S2o=o("bert"),P2o=o(" \u2014 "),U$=a("a"),$2o=o("BertForMaskedLM"),I2o=o(" (BERT model)"),D2o=l(),a1=a("li"),Bre=a("strong"),N2o=o("big_bird"),j2o=o(" \u2014 "),J$=a("a"),q2o=o("BigBirdForMaskedLM"),G2o=o(" (BigBird model)"),O2o=l(),n1=a("li"),xre=a("strong"),X2o=o("camembert"),V2o=o(" \u2014 "),Y$=a("a"),z2o=o("CamembertForMaskedLM"),W2o=o(" (CamemBERT model)"),Q2o=l(),s1=a("li"),kre=a("strong"),H2o=o("convbert"),U2o=o(" \u2014 "),K$=a("a"),J2o=o("ConvBertForMaskedLM"),Y2o=o(" (ConvBERT model)"),K2o=l(),l1=a("li"),Rre=a("strong"),Z2o=o("data2vec-text"),evo=o(" \u2014 "),Z$=a("a"),ovo=o("Data2VecTextForMaskedLM"),rvo=o(" (Data2VecText model)"),tvo=l(),i1=a("li"),Sre=a("strong"),avo=o("deberta"),nvo=o(" \u2014 "),eI=a("a"),svo=o("DebertaForMaskedLM"),lvo=o(" (DeBERTa model)"),ivo=l(),d1=a("li"),Pre=a("strong"),dvo=o("deberta-v2"),cvo=o(" \u2014 "),oI=a("a"),fvo=o("DebertaV2ForMaskedLM"),mvo=o(" (DeBERTa-v2 model)"),gvo=l(),c1=a("li"),$re=a("strong"),hvo=o("distilbert"),pvo=o(" \u2014 "),rI=a("a"),_vo=o("DistilBertForMaskedLM"),uvo=o(" (DistilBERT model)"),bvo=l(),f1=a("li"),Ire=a("strong"),vvo=o("electra"),Tvo=o(" \u2014 "),tI=a("a"),Fvo=o("ElectraForMaskedLM"),Cvo=o(" (ELECTRA model)"),Mvo=l(),m1=a("li"),Dre=a("strong"),Evo=o("flaubert"),yvo=o(" \u2014 "),aI=a("a"),wvo=o("FlaubertWithLMHeadModel"),Avo=o(" (FlauBERT model)"),Lvo=l(),g1=a("li"),Nre=a("strong"),Bvo=o("fnet"),xvo=o(" \u2014 "),nI=a("a"),kvo=o("FNetForMaskedLM"),Rvo=o(" (FNet model)"),Svo=l(),h1=a("li"),jre=a("strong"),Pvo=o("funnel"),$vo=o(" \u2014 "),sI=a("a"),Ivo=o("FunnelForMaskedLM"),Dvo=o(" (Funnel Transformer model)"),Nvo=l(),p1=a("li"),qre=a("strong"),jvo=o("ibert"),qvo=o(" \u2014 "),lI=a("a"),Gvo=o("IBertForMaskedLM"),Ovo=o(" (I-BERT model)"),Xvo=l(),_1=a("li"),Gre=a("strong"),Vvo=o("layoutlm"),zvo=o(" \u2014 "),iI=a("a"),Wvo=o("LayoutLMForMaskedLM"),Qvo=o(" (LayoutLM model)"),Hvo=l(),u1=a("li"),Ore=a("strong"),Uvo=o("longformer"),Jvo=o(" \u2014 "),dI=a("a"),Yvo=o("LongformerForMaskedLM"),Kvo=o(" (Longformer model)"),Zvo=l(),b1=a("li"),Xre=a("strong"),eTo=o("mbart"),oTo=o(" \u2014 "),cI=a("a"),rTo=o("MBartForConditionalGeneration"),tTo=o(" (mBART model)"),aTo=l(),v1=a("li"),Vre=a("strong"),nTo=o("megatron-bert"),sTo=o(" \u2014 "),fI=a("a"),lTo=o("MegatronBertForMaskedLM"),iTo=o(" (MegatronBert model)"),dTo=l(),T1=a("li"),zre=a("strong"),cTo=o("mobilebert"),fTo=o(" \u2014 "),mI=a("a"),mTo=o("MobileBertForMaskedLM"),gTo=o(" (MobileBERT model)"),hTo=l(),F1=a("li"),Wre=a("strong"),pTo=o("mpnet"),_To=o(" \u2014 "),gI=a("a"),uTo=o("MPNetForMaskedLM"),bTo=o(" (MPNet model)"),vTo=l(),C1=a("li"),Qre=a("strong"),TTo=o("nystromformer"),FTo=o(" \u2014 "),hI=a("a"),CTo=o("NystromformerForMaskedLM"),MTo=o(" (Nystromformer model)"),ETo=l(),M1=a("li"),Hre=a("strong"),yTo=o("perceiver"),wTo=o(" \u2014 "),pI=a("a"),ATo=o("PerceiverForMaskedLM"),LTo=o(" (Perceiver model)"),BTo=l(),E1=a("li"),Ure=a("strong"),xTo=o("qdqbert"),kTo=o(" \u2014 "),_I=a("a"),RTo=o("QDQBertForMaskedLM"),STo=o(" (QDQBert model)"),PTo=l(),y1=a("li"),Jre=a("strong"),$To=o("reformer"),ITo=o(" \u2014 "),uI=a("a"),DTo=o("ReformerForMaskedLM"),NTo=o(" (Reformer model)"),jTo=l(),w1=a("li"),Yre=a("strong"),qTo=o("rembert"),GTo=o(" \u2014 "),bI=a("a"),OTo=o("RemBertForMaskedLM"),XTo=o(" (RemBERT model)"),VTo=l(),A1=a("li"),Kre=a("strong"),zTo=o("roberta"),WTo=o(" \u2014 "),vI=a("a"),QTo=o("RobertaForMaskedLM"),HTo=o(" (RoBERTa model)"),UTo=l(),L1=a("li"),Zre=a("strong"),JTo=o("roformer"),YTo=o(" \u2014 "),TI=a("a"),KTo=o("RoFormerForMaskedLM"),ZTo=o(" (RoFormer model)"),eFo=l(),B1=a("li"),ete=a("strong"),oFo=o("squeezebert"),rFo=o(" \u2014 "),FI=a("a"),tFo=o("SqueezeBertForMaskedLM"),aFo=o(" (SqueezeBERT model)"),nFo=l(),x1=a("li"),ote=a("strong"),sFo=o("tapas"),lFo=o(" \u2014 "),CI=a("a"),iFo=o("TapasForMaskedLM"),dFo=o(" (TAPAS model)"),cFo=l(),k1=a("li"),rte=a("strong"),fFo=o("wav2vec2"),mFo=o(" \u2014 "),tte=a("code"),gFo=o("Wav2Vec2ForMaskedLM"),hFo=o("(Wav2Vec2 model)"),pFo=l(),R1=a("li"),ate=a("strong"),_Fo=o("xlm"),uFo=o(" \u2014 "),MI=a("a"),bFo=o("XLMWithLMHeadModel"),vFo=o(" (XLM model)"),TFo=l(),S1=a("li"),nte=a("strong"),FFo=o("xlm-roberta"),CFo=o(" \u2014 "),EI=a("a"),MFo=o("XLMRobertaForMaskedLM"),EFo=o(" (XLM-RoBERTa model)"),yFo=l(),P1=a("li"),ste=a("strong"),wFo=o("xlm-roberta-xl"),AFo=o(" \u2014 "),yI=a("a"),LFo=o("XLMRobertaXLForMaskedLM"),BFo=o(" (XLM-RoBERTa-XL model)"),xFo=l(),$1=a("li"),lte=a("strong"),kFo=o("yoso"),RFo=o(" \u2014 "),wI=a("a"),SFo=o("YosoForMaskedLM"),PFo=o(" (YOSO model)"),$Fo=l(),I1=a("p"),IFo=o("The model is set in evaluation mode by default using "),ite=a("code"),DFo=o("model.eval()"),NFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=a("code"),jFo=o("model.train()"),qFo=l(),cte=a("p"),GFo=o("Examples:"),OFo=l(),f(_y.$$.fragment),Pke=l(),id=a("h2"),D1=a("a"),fte=a("span"),f(uy.$$.fragment),XFo=l(),mte=a("span"),VFo=o("AutoModelForSeq2SeqLM"),$ke=l(),er=a("div"),f(by.$$.fragment),zFo=l(),dd=a("p"),WFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gte=a("code"),QFo=o("from_pretrained()"),HFo=o("class method or the "),hte=a("code"),UFo=o("from_config()"),JFo=o(`class
method.`),YFo=l(),vy=a("p"),KFo=o("This class cannot be instantiated directly using "),pte=a("code"),ZFo=o("__init__()"),eCo=o(" (throws an error)."),oCo=l(),Hr=a("div"),f(Ty.$$.fragment),rCo=l(),_te=a("p"),tCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aCo=l(),cd=a("p"),nCo=o(`Note:
Loading a model from its configuration file does `),ute=a("strong"),sCo=o("not"),lCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=a("code"),iCo=o("from_pretrained()"),dCo=o("to load the model weights."),cCo=l(),vte=a("p"),fCo=o("Examples:"),mCo=l(),f(Fy.$$.fragment),gCo=l(),Ge=a("div"),f(Cy.$$.fragment),hCo=l(),Tte=a("p"),pCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_Co=l(),Ha=a("p"),uCo=o("The model class to instantiate is selected based on the "),Fte=a("code"),bCo=o("model_type"),vCo=o(` property of the config object (either
passed as an argument or loaded from `),Cte=a("code"),TCo=o("pretrained_model_name_or_path"),FCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=a("code"),CCo=o("pretrained_model_name_or_path"),MCo=o(":"),ECo=l(),se=a("ul"),N1=a("li"),Ete=a("strong"),yCo=o("bart"),wCo=o(" \u2014 "),AI=a("a"),ACo=o("BartForConditionalGeneration"),LCo=o(" (BART model)"),BCo=l(),j1=a("li"),yte=a("strong"),xCo=o("bigbird_pegasus"),kCo=o(" \u2014 "),LI=a("a"),RCo=o("BigBirdPegasusForConditionalGeneration"),SCo=o(" (BigBirdPegasus model)"),PCo=l(),q1=a("li"),wte=a("strong"),$Co=o("blenderbot"),ICo=o(" \u2014 "),BI=a("a"),DCo=o("BlenderbotForConditionalGeneration"),NCo=o(" (Blenderbot model)"),jCo=l(),G1=a("li"),Ate=a("strong"),qCo=o("blenderbot-small"),GCo=o(" \u2014 "),xI=a("a"),OCo=o("BlenderbotSmallForConditionalGeneration"),XCo=o(" (BlenderbotSmall model)"),VCo=l(),O1=a("li"),Lte=a("strong"),zCo=o("encoder-decoder"),WCo=o(" \u2014 "),kI=a("a"),QCo=o("EncoderDecoderModel"),HCo=o(" (Encoder decoder model)"),UCo=l(),X1=a("li"),Bte=a("strong"),JCo=o("fsmt"),YCo=o(" \u2014 "),RI=a("a"),KCo=o("FSMTForConditionalGeneration"),ZCo=o(" (FairSeq Machine-Translation model)"),eMo=l(),V1=a("li"),xte=a("strong"),oMo=o("led"),rMo=o(" \u2014 "),SI=a("a"),tMo=o("LEDForConditionalGeneration"),aMo=o(" (LED model)"),nMo=l(),z1=a("li"),kte=a("strong"),sMo=o("m2m_100"),lMo=o(" \u2014 "),PI=a("a"),iMo=o("M2M100ForConditionalGeneration"),dMo=o(" (M2M100 model)"),cMo=l(),W1=a("li"),Rte=a("strong"),fMo=o("marian"),mMo=o(" \u2014 "),$I=a("a"),gMo=o("MarianMTModel"),hMo=o(" (Marian model)"),pMo=l(),Q1=a("li"),Ste=a("strong"),_Mo=o("mbart"),uMo=o(" \u2014 "),II=a("a"),bMo=o("MBartForConditionalGeneration"),vMo=o(" (mBART model)"),TMo=l(),H1=a("li"),Pte=a("strong"),FMo=o("mt5"),CMo=o(" \u2014 "),DI=a("a"),MMo=o("MT5ForConditionalGeneration"),EMo=o(" (mT5 model)"),yMo=l(),U1=a("li"),$te=a("strong"),wMo=o("pegasus"),AMo=o(" \u2014 "),NI=a("a"),LMo=o("PegasusForConditionalGeneration"),BMo=o(" (Pegasus model)"),xMo=l(),J1=a("li"),Ite=a("strong"),kMo=o("plbart"),RMo=o(" \u2014 "),jI=a("a"),SMo=o("PLBartForConditionalGeneration"),PMo=o(" (PLBart model)"),$Mo=l(),Y1=a("li"),Dte=a("strong"),IMo=o("prophetnet"),DMo=o(" \u2014 "),qI=a("a"),NMo=o("ProphetNetForConditionalGeneration"),jMo=o(" (ProphetNet model)"),qMo=l(),K1=a("li"),Nte=a("strong"),GMo=o("t5"),OMo=o(" \u2014 "),GI=a("a"),XMo=o("T5ForConditionalGeneration"),VMo=o(" (T5 model)"),zMo=l(),Z1=a("li"),jte=a("strong"),WMo=o("xlm-prophetnet"),QMo=o(" \u2014 "),OI=a("a"),HMo=o("XLMProphetNetForConditionalGeneration"),UMo=o(" (XLMProphetNet model)"),JMo=l(),e9=a("p"),YMo=o("The model is set in evaluation mode by default using "),qte=a("code"),KMo=o("model.eval()"),ZMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gte=a("code"),e4o=o("model.train()"),o4o=l(),Ote=a("p"),r4o=o("Examples:"),t4o=l(),f(My.$$.fragment),Ike=l(),fd=a("h2"),o9=a("a"),Xte=a("span"),f(Ey.$$.fragment),a4o=l(),Vte=a("span"),n4o=o("AutoModelForSequenceClassification"),Dke=l(),or=a("div"),f(yy.$$.fragment),s4o=l(),md=a("p"),l4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zte=a("code"),i4o=o("from_pretrained()"),d4o=o("class method or the "),Wte=a("code"),c4o=o("from_config()"),f4o=o(`class
method.`),m4o=l(),wy=a("p"),g4o=o("This class cannot be instantiated directly using "),Qte=a("code"),h4o=o("__init__()"),p4o=o(" (throws an error)."),_4o=l(),Ur=a("div"),f(Ay.$$.fragment),u4o=l(),Hte=a("p"),b4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v4o=l(),gd=a("p"),T4o=o(`Note:
Loading a model from its configuration file does `),Ute=a("strong"),F4o=o("not"),C4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=a("code"),M4o=o("from_pretrained()"),E4o=o("to load the model weights."),y4o=l(),Yte=a("p"),w4o=o("Examples:"),A4o=l(),f(Ly.$$.fragment),L4o=l(),Oe=a("div"),f(By.$$.fragment),B4o=l(),Kte=a("p"),x4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k4o=l(),Ua=a("p"),R4o=o("The model class to instantiate is selected based on the "),Zte=a("code"),S4o=o("model_type"),P4o=o(` property of the config object (either
passed as an argument or loaded from `),eae=a("code"),$4o=o("pretrained_model_name_or_path"),I4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oae=a("code"),D4o=o("pretrained_model_name_or_path"),N4o=o(":"),j4o=l(),A=a("ul"),r9=a("li"),rae=a("strong"),q4o=o("albert"),G4o=o(" \u2014 "),XI=a("a"),O4o=o("AlbertForSequenceClassification"),X4o=o(" (ALBERT model)"),V4o=l(),t9=a("li"),tae=a("strong"),z4o=o("bart"),W4o=o(" \u2014 "),VI=a("a"),Q4o=o("BartForSequenceClassification"),H4o=o(" (BART model)"),U4o=l(),a9=a("li"),aae=a("strong"),J4o=o("bert"),Y4o=o(" \u2014 "),zI=a("a"),K4o=o("BertForSequenceClassification"),Z4o=o(" (BERT model)"),eEo=l(),n9=a("li"),nae=a("strong"),oEo=o("big_bird"),rEo=o(" \u2014 "),WI=a("a"),tEo=o("BigBirdForSequenceClassification"),aEo=o(" (BigBird model)"),nEo=l(),s9=a("li"),sae=a("strong"),sEo=o("bigbird_pegasus"),lEo=o(" \u2014 "),QI=a("a"),iEo=o("BigBirdPegasusForSequenceClassification"),dEo=o(" (BigBirdPegasus model)"),cEo=l(),l9=a("li"),lae=a("strong"),fEo=o("camembert"),mEo=o(" \u2014 "),HI=a("a"),gEo=o("CamembertForSequenceClassification"),hEo=o(" (CamemBERT model)"),pEo=l(),i9=a("li"),iae=a("strong"),_Eo=o("canine"),uEo=o(" \u2014 "),UI=a("a"),bEo=o("CanineForSequenceClassification"),vEo=o(" (Canine model)"),TEo=l(),d9=a("li"),dae=a("strong"),FEo=o("convbert"),CEo=o(" \u2014 "),JI=a("a"),MEo=o("ConvBertForSequenceClassification"),EEo=o(" (ConvBERT model)"),yEo=l(),c9=a("li"),cae=a("strong"),wEo=o("ctrl"),AEo=o(" \u2014 "),YI=a("a"),LEo=o("CTRLForSequenceClassification"),BEo=o(" (CTRL model)"),xEo=l(),f9=a("li"),fae=a("strong"),kEo=o("data2vec-text"),REo=o(" \u2014 "),KI=a("a"),SEo=o("Data2VecTextForSequenceClassification"),PEo=o(" (Data2VecText model)"),$Eo=l(),m9=a("li"),mae=a("strong"),IEo=o("deberta"),DEo=o(" \u2014 "),ZI=a("a"),NEo=o("DebertaForSequenceClassification"),jEo=o(" (DeBERTa model)"),qEo=l(),g9=a("li"),gae=a("strong"),GEo=o("deberta-v2"),OEo=o(" \u2014 "),eD=a("a"),XEo=o("DebertaV2ForSequenceClassification"),VEo=o(" (DeBERTa-v2 model)"),zEo=l(),h9=a("li"),hae=a("strong"),WEo=o("distilbert"),QEo=o(" \u2014 "),oD=a("a"),HEo=o("DistilBertForSequenceClassification"),UEo=o(" (DistilBERT model)"),JEo=l(),p9=a("li"),pae=a("strong"),YEo=o("electra"),KEo=o(" \u2014 "),rD=a("a"),ZEo=o("ElectraForSequenceClassification"),e3o=o(" (ELECTRA model)"),o3o=l(),_9=a("li"),_ae=a("strong"),r3o=o("flaubert"),t3o=o(" \u2014 "),tD=a("a"),a3o=o("FlaubertForSequenceClassification"),n3o=o(" (FlauBERT model)"),s3o=l(),u9=a("li"),uae=a("strong"),l3o=o("fnet"),i3o=o(" \u2014 "),aD=a("a"),d3o=o("FNetForSequenceClassification"),c3o=o(" (FNet model)"),f3o=l(),b9=a("li"),bae=a("strong"),m3o=o("funnel"),g3o=o(" \u2014 "),nD=a("a"),h3o=o("FunnelForSequenceClassification"),p3o=o(" (Funnel Transformer model)"),_3o=l(),v9=a("li"),vae=a("strong"),u3o=o("gpt2"),b3o=o(" \u2014 "),sD=a("a"),v3o=o("GPT2ForSequenceClassification"),T3o=o(" (OpenAI GPT-2 model)"),F3o=l(),T9=a("li"),Tae=a("strong"),C3o=o("gpt_neo"),M3o=o(" \u2014 "),lD=a("a"),E3o=o("GPTNeoForSequenceClassification"),y3o=o(" (GPT Neo model)"),w3o=l(),F9=a("li"),Fae=a("strong"),A3o=o("gptj"),L3o=o(" \u2014 "),iD=a("a"),B3o=o("GPTJForSequenceClassification"),x3o=o(" (GPT-J model)"),k3o=l(),C9=a("li"),Cae=a("strong"),R3o=o("ibert"),S3o=o(" \u2014 "),dD=a("a"),P3o=o("IBertForSequenceClassification"),$3o=o(" (I-BERT model)"),I3o=l(),M9=a("li"),Mae=a("strong"),D3o=o("layoutlm"),N3o=o(" \u2014 "),cD=a("a"),j3o=o("LayoutLMForSequenceClassification"),q3o=o(" (LayoutLM model)"),G3o=l(),E9=a("li"),Eae=a("strong"),O3o=o("layoutlmv2"),X3o=o(" \u2014 "),fD=a("a"),V3o=o("LayoutLMv2ForSequenceClassification"),z3o=o(" (LayoutLMv2 model)"),W3o=l(),y9=a("li"),yae=a("strong"),Q3o=o("led"),H3o=o(" \u2014 "),mD=a("a"),U3o=o("LEDForSequenceClassification"),J3o=o(" (LED model)"),Y3o=l(),w9=a("li"),wae=a("strong"),K3o=o("longformer"),Z3o=o(" \u2014 "),gD=a("a"),eyo=o("LongformerForSequenceClassification"),oyo=o(" (Longformer model)"),ryo=l(),A9=a("li"),Aae=a("strong"),tyo=o("mbart"),ayo=o(" \u2014 "),hD=a("a"),nyo=o("MBartForSequenceClassification"),syo=o(" (mBART model)"),lyo=l(),L9=a("li"),Lae=a("strong"),iyo=o("megatron-bert"),dyo=o(" \u2014 "),pD=a("a"),cyo=o("MegatronBertForSequenceClassification"),fyo=o(" (MegatronBert model)"),myo=l(),B9=a("li"),Bae=a("strong"),gyo=o("mobilebert"),hyo=o(" \u2014 "),_D=a("a"),pyo=o("MobileBertForSequenceClassification"),_yo=o(" (MobileBERT model)"),uyo=l(),x9=a("li"),xae=a("strong"),byo=o("mpnet"),vyo=o(" \u2014 "),uD=a("a"),Tyo=o("MPNetForSequenceClassification"),Fyo=o(" (MPNet model)"),Cyo=l(),k9=a("li"),kae=a("strong"),Myo=o("nystromformer"),Eyo=o(" \u2014 "),bD=a("a"),yyo=o("NystromformerForSequenceClassification"),wyo=o(" (Nystromformer model)"),Ayo=l(),R9=a("li"),Rae=a("strong"),Lyo=o("openai-gpt"),Byo=o(" \u2014 "),vD=a("a"),xyo=o("OpenAIGPTForSequenceClassification"),kyo=o(" (OpenAI GPT model)"),Ryo=l(),S9=a("li"),Sae=a("strong"),Syo=o("perceiver"),Pyo=o(" \u2014 "),TD=a("a"),$yo=o("PerceiverForSequenceClassification"),Iyo=o(" (Perceiver model)"),Dyo=l(),P9=a("li"),Pae=a("strong"),Nyo=o("plbart"),jyo=o(" \u2014 "),FD=a("a"),qyo=o("PLBartForSequenceClassification"),Gyo=o(" (PLBart model)"),Oyo=l(),$9=a("li"),$ae=a("strong"),Xyo=o("qdqbert"),Vyo=o(" \u2014 "),CD=a("a"),zyo=o("QDQBertForSequenceClassification"),Wyo=o(" (QDQBert model)"),Qyo=l(),I9=a("li"),Iae=a("strong"),Hyo=o("reformer"),Uyo=o(" \u2014 "),MD=a("a"),Jyo=o("ReformerForSequenceClassification"),Yyo=o(" (Reformer model)"),Kyo=l(),D9=a("li"),Dae=a("strong"),Zyo=o("rembert"),ewo=o(" \u2014 "),ED=a("a"),owo=o("RemBertForSequenceClassification"),rwo=o(" (RemBERT model)"),two=l(),N9=a("li"),Nae=a("strong"),awo=o("roberta"),nwo=o(" \u2014 "),yD=a("a"),swo=o("RobertaForSequenceClassification"),lwo=o(" (RoBERTa model)"),iwo=l(),j9=a("li"),jae=a("strong"),dwo=o("roformer"),cwo=o(" \u2014 "),wD=a("a"),fwo=o("RoFormerForSequenceClassification"),mwo=o(" (RoFormer model)"),gwo=l(),q9=a("li"),qae=a("strong"),hwo=o("squeezebert"),pwo=o(" \u2014 "),AD=a("a"),_wo=o("SqueezeBertForSequenceClassification"),uwo=o(" (SqueezeBERT model)"),bwo=l(),G9=a("li"),Gae=a("strong"),vwo=o("tapas"),Two=o(" \u2014 "),LD=a("a"),Fwo=o("TapasForSequenceClassification"),Cwo=o(" (TAPAS model)"),Mwo=l(),O9=a("li"),Oae=a("strong"),Ewo=o("transfo-xl"),ywo=o(" \u2014 "),BD=a("a"),wwo=o("TransfoXLForSequenceClassification"),Awo=o(" (Transformer-XL model)"),Lwo=l(),X9=a("li"),Xae=a("strong"),Bwo=o("xlm"),xwo=o(" \u2014 "),xD=a("a"),kwo=o("XLMForSequenceClassification"),Rwo=o(" (XLM model)"),Swo=l(),V9=a("li"),Vae=a("strong"),Pwo=o("xlm-roberta"),$wo=o(" \u2014 "),kD=a("a"),Iwo=o("XLMRobertaForSequenceClassification"),Dwo=o(" (XLM-RoBERTa model)"),Nwo=l(),z9=a("li"),zae=a("strong"),jwo=o("xlm-roberta-xl"),qwo=o(" \u2014 "),RD=a("a"),Gwo=o("XLMRobertaXLForSequenceClassification"),Owo=o(" (XLM-RoBERTa-XL model)"),Xwo=l(),W9=a("li"),Wae=a("strong"),Vwo=o("xlnet"),zwo=o(" \u2014 "),SD=a("a"),Wwo=o("XLNetForSequenceClassification"),Qwo=o(" (XLNet model)"),Hwo=l(),Q9=a("li"),Qae=a("strong"),Uwo=o("yoso"),Jwo=o(" \u2014 "),PD=a("a"),Ywo=o("YosoForSequenceClassification"),Kwo=o(" (YOSO model)"),Zwo=l(),H9=a("p"),e6o=o("The model is set in evaluation mode by default using "),Hae=a("code"),o6o=o("model.eval()"),r6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uae=a("code"),t6o=o("model.train()"),a6o=l(),Jae=a("p"),n6o=o("Examples:"),s6o=l(),f(xy.$$.fragment),Nke=l(),hd=a("h2"),U9=a("a"),Yae=a("span"),f(ky.$$.fragment),l6o=l(),Kae=a("span"),i6o=o("AutoModelForMultipleChoice"),jke=l(),rr=a("div"),f(Ry.$$.fragment),d6o=l(),pd=a("p"),c6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Zae=a("code"),f6o=o("from_pretrained()"),m6o=o("class method or the "),ene=a("code"),g6o=o("from_config()"),h6o=o(`class
method.`),p6o=l(),Sy=a("p"),_6o=o("This class cannot be instantiated directly using "),one=a("code"),u6o=o("__init__()"),b6o=o(" (throws an error)."),v6o=l(),Jr=a("div"),f(Py.$$.fragment),T6o=l(),rne=a("p"),F6o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),C6o=l(),_d=a("p"),M6o=o(`Note:
Loading a model from its configuration file does `),tne=a("strong"),E6o=o("not"),y6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ane=a("code"),w6o=o("from_pretrained()"),A6o=o("to load the model weights."),L6o=l(),nne=a("p"),B6o=o("Examples:"),x6o=l(),f($y.$$.fragment),k6o=l(),Xe=a("div"),f(Iy.$$.fragment),R6o=l(),sne=a("p"),S6o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P6o=l(),Ja=a("p"),$6o=o("The model class to instantiate is selected based on the "),lne=a("code"),I6o=o("model_type"),D6o=o(` property of the config object (either
passed as an argument or loaded from `),ine=a("code"),N6o=o("pretrained_model_name_or_path"),j6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dne=a("code"),q6o=o("pretrained_model_name_or_path"),G6o=o(":"),O6o=l(),G=a("ul"),J9=a("li"),cne=a("strong"),X6o=o("albert"),V6o=o(" \u2014 "),$D=a("a"),z6o=o("AlbertForMultipleChoice"),W6o=o(" (ALBERT model)"),Q6o=l(),Y9=a("li"),fne=a("strong"),H6o=o("bert"),U6o=o(" \u2014 "),ID=a("a"),J6o=o("BertForMultipleChoice"),Y6o=o(" (BERT model)"),K6o=l(),K9=a("li"),mne=a("strong"),Z6o=o("big_bird"),eAo=o(" \u2014 "),DD=a("a"),oAo=o("BigBirdForMultipleChoice"),rAo=o(" (BigBird model)"),tAo=l(),Z9=a("li"),gne=a("strong"),aAo=o("camembert"),nAo=o(" \u2014 "),ND=a("a"),sAo=o("CamembertForMultipleChoice"),lAo=o(" (CamemBERT model)"),iAo=l(),eb=a("li"),hne=a("strong"),dAo=o("canine"),cAo=o(" \u2014 "),jD=a("a"),fAo=o("CanineForMultipleChoice"),mAo=o(" (Canine model)"),gAo=l(),ob=a("li"),pne=a("strong"),hAo=o("convbert"),pAo=o(" \u2014 "),qD=a("a"),_Ao=o("ConvBertForMultipleChoice"),uAo=o(" (ConvBERT model)"),bAo=l(),rb=a("li"),_ne=a("strong"),vAo=o("data2vec-text"),TAo=o(" \u2014 "),GD=a("a"),FAo=o("Data2VecTextForMultipleChoice"),CAo=o(" (Data2VecText model)"),MAo=l(),tb=a("li"),une=a("strong"),EAo=o("distilbert"),yAo=o(" \u2014 "),OD=a("a"),wAo=o("DistilBertForMultipleChoice"),AAo=o(" (DistilBERT model)"),LAo=l(),ab=a("li"),bne=a("strong"),BAo=o("electra"),xAo=o(" \u2014 "),XD=a("a"),kAo=o("ElectraForMultipleChoice"),RAo=o(" (ELECTRA model)"),SAo=l(),nb=a("li"),vne=a("strong"),PAo=o("flaubert"),$Ao=o(" \u2014 "),VD=a("a"),IAo=o("FlaubertForMultipleChoice"),DAo=o(" (FlauBERT model)"),NAo=l(),sb=a("li"),Tne=a("strong"),jAo=o("fnet"),qAo=o(" \u2014 "),zD=a("a"),GAo=o("FNetForMultipleChoice"),OAo=o(" (FNet model)"),XAo=l(),lb=a("li"),Fne=a("strong"),VAo=o("funnel"),zAo=o(" \u2014 "),WD=a("a"),WAo=o("FunnelForMultipleChoice"),QAo=o(" (Funnel Transformer model)"),HAo=l(),ib=a("li"),Cne=a("strong"),UAo=o("ibert"),JAo=o(" \u2014 "),QD=a("a"),YAo=o("IBertForMultipleChoice"),KAo=o(" (I-BERT model)"),ZAo=l(),db=a("li"),Mne=a("strong"),e0o=o("longformer"),o0o=o(" \u2014 "),HD=a("a"),r0o=o("LongformerForMultipleChoice"),t0o=o(" (Longformer model)"),a0o=l(),cb=a("li"),Ene=a("strong"),n0o=o("megatron-bert"),s0o=o(" \u2014 "),UD=a("a"),l0o=o("MegatronBertForMultipleChoice"),i0o=o(" (MegatronBert model)"),d0o=l(),fb=a("li"),yne=a("strong"),c0o=o("mobilebert"),f0o=o(" \u2014 "),JD=a("a"),m0o=o("MobileBertForMultipleChoice"),g0o=o(" (MobileBERT model)"),h0o=l(),mb=a("li"),wne=a("strong"),p0o=o("mpnet"),_0o=o(" \u2014 "),YD=a("a"),u0o=o("MPNetForMultipleChoice"),b0o=o(" (MPNet model)"),v0o=l(),gb=a("li"),Ane=a("strong"),T0o=o("nystromformer"),F0o=o(" \u2014 "),KD=a("a"),C0o=o("NystromformerForMultipleChoice"),M0o=o(" (Nystromformer model)"),E0o=l(),hb=a("li"),Lne=a("strong"),y0o=o("qdqbert"),w0o=o(" \u2014 "),ZD=a("a"),A0o=o("QDQBertForMultipleChoice"),L0o=o(" (QDQBert model)"),B0o=l(),pb=a("li"),Bne=a("strong"),x0o=o("rembert"),k0o=o(" \u2014 "),eN=a("a"),R0o=o("RemBertForMultipleChoice"),S0o=o(" (RemBERT model)"),P0o=l(),_b=a("li"),xne=a("strong"),$0o=o("roberta"),I0o=o(" \u2014 "),oN=a("a"),D0o=o("RobertaForMultipleChoice"),N0o=o(" (RoBERTa model)"),j0o=l(),ub=a("li"),kne=a("strong"),q0o=o("roformer"),G0o=o(" \u2014 "),rN=a("a"),O0o=o("RoFormerForMultipleChoice"),X0o=o(" (RoFormer model)"),V0o=l(),bb=a("li"),Rne=a("strong"),z0o=o("squeezebert"),W0o=o(" \u2014 "),tN=a("a"),Q0o=o("SqueezeBertForMultipleChoice"),H0o=o(" (SqueezeBERT model)"),U0o=l(),vb=a("li"),Sne=a("strong"),J0o=o("xlm"),Y0o=o(" \u2014 "),aN=a("a"),K0o=o("XLMForMultipleChoice"),Z0o=o(" (XLM model)"),eLo=l(),Tb=a("li"),Pne=a("strong"),oLo=o("xlm-roberta"),rLo=o(" \u2014 "),nN=a("a"),tLo=o("XLMRobertaForMultipleChoice"),aLo=o(" (XLM-RoBERTa model)"),nLo=l(),Fb=a("li"),$ne=a("strong"),sLo=o("xlm-roberta-xl"),lLo=o(" \u2014 "),sN=a("a"),iLo=o("XLMRobertaXLForMultipleChoice"),dLo=o(" (XLM-RoBERTa-XL model)"),cLo=l(),Cb=a("li"),Ine=a("strong"),fLo=o("xlnet"),mLo=o(" \u2014 "),lN=a("a"),gLo=o("XLNetForMultipleChoice"),hLo=o(" (XLNet model)"),pLo=l(),Mb=a("li"),Dne=a("strong"),_Lo=o("yoso"),uLo=o(" \u2014 "),iN=a("a"),bLo=o("YosoForMultipleChoice"),vLo=o(" (YOSO model)"),TLo=l(),Eb=a("p"),FLo=o("The model is set in evaluation mode by default using "),Nne=a("code"),CLo=o("model.eval()"),MLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jne=a("code"),ELo=o("model.train()"),yLo=l(),qne=a("p"),wLo=o("Examples:"),ALo=l(),f(Dy.$$.fragment),qke=l(),ud=a("h2"),yb=a("a"),Gne=a("span"),f(Ny.$$.fragment),LLo=l(),One=a("span"),BLo=o("AutoModelForNextSentencePrediction"),Gke=l(),tr=a("div"),f(jy.$$.fragment),xLo=l(),bd=a("p"),kLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xne=a("code"),RLo=o("from_pretrained()"),SLo=o("class method or the "),Vne=a("code"),PLo=o("from_config()"),$Lo=o(`class
method.`),ILo=l(),qy=a("p"),DLo=o("This class cannot be instantiated directly using "),zne=a("code"),NLo=o("__init__()"),jLo=o(" (throws an error)."),qLo=l(),Yr=a("div"),f(Gy.$$.fragment),GLo=l(),Wne=a("p"),OLo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XLo=l(),vd=a("p"),VLo=o(`Note:
Loading a model from its configuration file does `),Qne=a("strong"),zLo=o("not"),WLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hne=a("code"),QLo=o("from_pretrained()"),HLo=o("to load the model weights."),ULo=l(),Une=a("p"),JLo=o("Examples:"),YLo=l(),f(Oy.$$.fragment),KLo=l(),Ve=a("div"),f(Xy.$$.fragment),ZLo=l(),Jne=a("p"),e7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),o7o=l(),Ya=a("p"),r7o=o("The model class to instantiate is selected based on the "),Yne=a("code"),t7o=o("model_type"),a7o=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),n7o=o("pretrained_model_name_or_path"),s7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=a("code"),l7o=o("pretrained_model_name_or_path"),i7o=o(":"),d7o=l(),da=a("ul"),wb=a("li"),ese=a("strong"),c7o=o("bert"),f7o=o(" \u2014 "),dN=a("a"),m7o=o("BertForNextSentencePrediction"),g7o=o(" (BERT model)"),h7o=l(),Ab=a("li"),ose=a("strong"),p7o=o("fnet"),_7o=o(" \u2014 "),cN=a("a"),u7o=o("FNetForNextSentencePrediction"),b7o=o(" (FNet model)"),v7o=l(),Lb=a("li"),rse=a("strong"),T7o=o("megatron-bert"),F7o=o(" \u2014 "),fN=a("a"),C7o=o("MegatronBertForNextSentencePrediction"),M7o=o(" (MegatronBert model)"),E7o=l(),Bb=a("li"),tse=a("strong"),y7o=o("mobilebert"),w7o=o(" \u2014 "),mN=a("a"),A7o=o("MobileBertForNextSentencePrediction"),L7o=o(" (MobileBERT model)"),B7o=l(),xb=a("li"),ase=a("strong"),x7o=o("qdqbert"),k7o=o(" \u2014 "),gN=a("a"),R7o=o("QDQBertForNextSentencePrediction"),S7o=o(" (QDQBert model)"),P7o=l(),kb=a("p"),$7o=o("The model is set in evaluation mode by default using "),nse=a("code"),I7o=o("model.eval()"),D7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sse=a("code"),N7o=o("model.train()"),j7o=l(),lse=a("p"),q7o=o("Examples:"),G7o=l(),f(Vy.$$.fragment),Oke=l(),Td=a("h2"),Rb=a("a"),ise=a("span"),f(zy.$$.fragment),O7o=l(),dse=a("span"),X7o=o("AutoModelForTokenClassification"),Xke=l(),ar=a("div"),f(Wy.$$.fragment),V7o=l(),Fd=a("p"),z7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cse=a("code"),W7o=o("from_pretrained()"),Q7o=o("class method or the "),fse=a("code"),H7o=o("from_config()"),U7o=o(`class
method.`),J7o=l(),Qy=a("p"),Y7o=o("This class cannot be instantiated directly using "),mse=a("code"),K7o=o("__init__()"),Z7o=o(" (throws an error)."),e8o=l(),Kr=a("div"),f(Hy.$$.fragment),o8o=l(),gse=a("p"),r8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t8o=l(),Cd=a("p"),a8o=o(`Note:
Loading a model from its configuration file does `),hse=a("strong"),n8o=o("not"),s8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=a("code"),l8o=o("from_pretrained()"),i8o=o("to load the model weights."),d8o=l(),_se=a("p"),c8o=o("Examples:"),f8o=l(),f(Uy.$$.fragment),m8o=l(),ze=a("div"),f(Jy.$$.fragment),g8o=l(),use=a("p"),h8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p8o=l(),Ka=a("p"),_8o=o("The model class to instantiate is selected based on the "),bse=a("code"),u8o=o("model_type"),b8o=o(` property of the config object (either
passed as an argument or loaded from `),vse=a("code"),v8o=o("pretrained_model_name_or_path"),T8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tse=a("code"),F8o=o("pretrained_model_name_or_path"),C8o=o(":"),M8o=l(),j=a("ul"),Sb=a("li"),Fse=a("strong"),E8o=o("albert"),y8o=o(" \u2014 "),hN=a("a"),w8o=o("AlbertForTokenClassification"),A8o=o(" (ALBERT model)"),L8o=l(),Pb=a("li"),Cse=a("strong"),B8o=o("bert"),x8o=o(" \u2014 "),pN=a("a"),k8o=o("BertForTokenClassification"),R8o=o(" (BERT model)"),S8o=l(),$b=a("li"),Mse=a("strong"),P8o=o("big_bird"),$8o=o(" \u2014 "),_N=a("a"),I8o=o("BigBirdForTokenClassification"),D8o=o(" (BigBird model)"),N8o=l(),Ib=a("li"),Ese=a("strong"),j8o=o("camembert"),q8o=o(" \u2014 "),uN=a("a"),G8o=o("CamembertForTokenClassification"),O8o=o(" (CamemBERT model)"),X8o=l(),Db=a("li"),yse=a("strong"),V8o=o("canine"),z8o=o(" \u2014 "),bN=a("a"),W8o=o("CanineForTokenClassification"),Q8o=o(" (Canine model)"),H8o=l(),Nb=a("li"),wse=a("strong"),U8o=o("convbert"),J8o=o(" \u2014 "),vN=a("a"),Y8o=o("ConvBertForTokenClassification"),K8o=o(" (ConvBERT model)"),Z8o=l(),jb=a("li"),Ase=a("strong"),eBo=o("data2vec-text"),oBo=o(" \u2014 "),TN=a("a"),rBo=o("Data2VecTextForTokenClassification"),tBo=o(" (Data2VecText model)"),aBo=l(),qb=a("li"),Lse=a("strong"),nBo=o("deberta"),sBo=o(" \u2014 "),FN=a("a"),lBo=o("DebertaForTokenClassification"),iBo=o(" (DeBERTa model)"),dBo=l(),Gb=a("li"),Bse=a("strong"),cBo=o("deberta-v2"),fBo=o(" \u2014 "),CN=a("a"),mBo=o("DebertaV2ForTokenClassification"),gBo=o(" (DeBERTa-v2 model)"),hBo=l(),Ob=a("li"),xse=a("strong"),pBo=o("distilbert"),_Bo=o(" \u2014 "),MN=a("a"),uBo=o("DistilBertForTokenClassification"),bBo=o(" (DistilBERT model)"),vBo=l(),Xb=a("li"),kse=a("strong"),TBo=o("electra"),FBo=o(" \u2014 "),EN=a("a"),CBo=o("ElectraForTokenClassification"),MBo=o(" (ELECTRA model)"),EBo=l(),Vb=a("li"),Rse=a("strong"),yBo=o("flaubert"),wBo=o(" \u2014 "),yN=a("a"),ABo=o("FlaubertForTokenClassification"),LBo=o(" (FlauBERT model)"),BBo=l(),zb=a("li"),Sse=a("strong"),xBo=o("fnet"),kBo=o(" \u2014 "),wN=a("a"),RBo=o("FNetForTokenClassification"),SBo=o(" (FNet model)"),PBo=l(),Wb=a("li"),Pse=a("strong"),$Bo=o("funnel"),IBo=o(" \u2014 "),AN=a("a"),DBo=o("FunnelForTokenClassification"),NBo=o(" (Funnel Transformer model)"),jBo=l(),Qb=a("li"),$se=a("strong"),qBo=o("gpt2"),GBo=o(" \u2014 "),LN=a("a"),OBo=o("GPT2ForTokenClassification"),XBo=o(" (OpenAI GPT-2 model)"),VBo=l(),Hb=a("li"),Ise=a("strong"),zBo=o("ibert"),WBo=o(" \u2014 "),BN=a("a"),QBo=o("IBertForTokenClassification"),HBo=o(" (I-BERT model)"),UBo=l(),Ub=a("li"),Dse=a("strong"),JBo=o("layoutlm"),YBo=o(" \u2014 "),xN=a("a"),KBo=o("LayoutLMForTokenClassification"),ZBo=o(" (LayoutLM model)"),exo=l(),Jb=a("li"),Nse=a("strong"),oxo=o("layoutlmv2"),rxo=o(" \u2014 "),kN=a("a"),txo=o("LayoutLMv2ForTokenClassification"),axo=o(" (LayoutLMv2 model)"),nxo=l(),Yb=a("li"),jse=a("strong"),sxo=o("longformer"),lxo=o(" \u2014 "),RN=a("a"),ixo=o("LongformerForTokenClassification"),dxo=o(" (Longformer model)"),cxo=l(),Kb=a("li"),qse=a("strong"),fxo=o("megatron-bert"),mxo=o(" \u2014 "),SN=a("a"),gxo=o("MegatronBertForTokenClassification"),hxo=o(" (MegatronBert model)"),pxo=l(),Zb=a("li"),Gse=a("strong"),_xo=o("mobilebert"),uxo=o(" \u2014 "),PN=a("a"),bxo=o("MobileBertForTokenClassification"),vxo=o(" (MobileBERT model)"),Txo=l(),e5=a("li"),Ose=a("strong"),Fxo=o("mpnet"),Cxo=o(" \u2014 "),$N=a("a"),Mxo=o("MPNetForTokenClassification"),Exo=o(" (MPNet model)"),yxo=l(),o5=a("li"),Xse=a("strong"),wxo=o("nystromformer"),Axo=o(" \u2014 "),IN=a("a"),Lxo=o("NystromformerForTokenClassification"),Bxo=o(" (Nystromformer model)"),xxo=l(),r5=a("li"),Vse=a("strong"),kxo=o("qdqbert"),Rxo=o(" \u2014 "),DN=a("a"),Sxo=o("QDQBertForTokenClassification"),Pxo=o(" (QDQBert model)"),$xo=l(),t5=a("li"),zse=a("strong"),Ixo=o("rembert"),Dxo=o(" \u2014 "),NN=a("a"),Nxo=o("RemBertForTokenClassification"),jxo=o(" (RemBERT model)"),qxo=l(),a5=a("li"),Wse=a("strong"),Gxo=o("roberta"),Oxo=o(" \u2014 "),jN=a("a"),Xxo=o("RobertaForTokenClassification"),Vxo=o(" (RoBERTa model)"),zxo=l(),n5=a("li"),Qse=a("strong"),Wxo=o("roformer"),Qxo=o(" \u2014 "),qN=a("a"),Hxo=o("RoFormerForTokenClassification"),Uxo=o(" (RoFormer model)"),Jxo=l(),s5=a("li"),Hse=a("strong"),Yxo=o("squeezebert"),Kxo=o(" \u2014 "),GN=a("a"),Zxo=o("SqueezeBertForTokenClassification"),eko=o(" (SqueezeBERT model)"),oko=l(),l5=a("li"),Use=a("strong"),rko=o("xlm"),tko=o(" \u2014 "),ON=a("a"),ako=o("XLMForTokenClassification"),nko=o(" (XLM model)"),sko=l(),i5=a("li"),Jse=a("strong"),lko=o("xlm-roberta"),iko=o(" \u2014 "),XN=a("a"),dko=o("XLMRobertaForTokenClassification"),cko=o(" (XLM-RoBERTa model)"),fko=l(),d5=a("li"),Yse=a("strong"),mko=o("xlm-roberta-xl"),gko=o(" \u2014 "),VN=a("a"),hko=o("XLMRobertaXLForTokenClassification"),pko=o(" (XLM-RoBERTa-XL model)"),_ko=l(),c5=a("li"),Kse=a("strong"),uko=o("xlnet"),bko=o(" \u2014 "),zN=a("a"),vko=o("XLNetForTokenClassification"),Tko=o(" (XLNet model)"),Fko=l(),f5=a("li"),Zse=a("strong"),Cko=o("yoso"),Mko=o(" \u2014 "),WN=a("a"),Eko=o("YosoForTokenClassification"),yko=o(" (YOSO model)"),wko=l(),m5=a("p"),Ako=o("The model is set in evaluation mode by default using "),ele=a("code"),Lko=o("model.eval()"),Bko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ole=a("code"),xko=o("model.train()"),kko=l(),rle=a("p"),Rko=o("Examples:"),Sko=l(),f(Yy.$$.fragment),Vke=l(),Md=a("h2"),g5=a("a"),tle=a("span"),f(Ky.$$.fragment),Pko=l(),ale=a("span"),$ko=o("AutoModelForQuestionAnswering"),zke=l(),nr=a("div"),f(Zy.$$.fragment),Iko=l(),Ed=a("p"),Dko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nle=a("code"),Nko=o("from_pretrained()"),jko=o("class method or the "),sle=a("code"),qko=o("from_config()"),Gko=o(`class
method.`),Oko=l(),ew=a("p"),Xko=o("This class cannot be instantiated directly using "),lle=a("code"),Vko=o("__init__()"),zko=o(" (throws an error)."),Wko=l(),Zr=a("div"),f(ow.$$.fragment),Qko=l(),ile=a("p"),Hko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Uko=l(),yd=a("p"),Jko=o(`Note:
Loading a model from its configuration file does `),dle=a("strong"),Yko=o("not"),Kko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cle=a("code"),Zko=o("from_pretrained()"),eRo=o("to load the model weights."),oRo=l(),fle=a("p"),rRo=o("Examples:"),tRo=l(),f(rw.$$.fragment),aRo=l(),We=a("div"),f(tw.$$.fragment),nRo=l(),mle=a("p"),sRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lRo=l(),Za=a("p"),iRo=o("The model class to instantiate is selected based on the "),gle=a("code"),dRo=o("model_type"),cRo=o(` property of the config object (either
passed as an argument or loaded from `),hle=a("code"),fRo=o("pretrained_model_name_or_path"),mRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ple=a("code"),gRo=o("pretrained_model_name_or_path"),hRo=o(":"),pRo=l(),R=a("ul"),h5=a("li"),_le=a("strong"),_Ro=o("albert"),uRo=o(" \u2014 "),QN=a("a"),bRo=o("AlbertForQuestionAnswering"),vRo=o(" (ALBERT model)"),TRo=l(),p5=a("li"),ule=a("strong"),FRo=o("bart"),CRo=o(" \u2014 "),HN=a("a"),MRo=o("BartForQuestionAnswering"),ERo=o(" (BART model)"),yRo=l(),_5=a("li"),ble=a("strong"),wRo=o("bert"),ARo=o(" \u2014 "),UN=a("a"),LRo=o("BertForQuestionAnswering"),BRo=o(" (BERT model)"),xRo=l(),u5=a("li"),vle=a("strong"),kRo=o("big_bird"),RRo=o(" \u2014 "),JN=a("a"),SRo=o("BigBirdForQuestionAnswering"),PRo=o(" (BigBird model)"),$Ro=l(),b5=a("li"),Tle=a("strong"),IRo=o("bigbird_pegasus"),DRo=o(" \u2014 "),YN=a("a"),NRo=o("BigBirdPegasusForQuestionAnswering"),jRo=o(" (BigBirdPegasus model)"),qRo=l(),v5=a("li"),Fle=a("strong"),GRo=o("camembert"),ORo=o(" \u2014 "),KN=a("a"),XRo=o("CamembertForQuestionAnswering"),VRo=o(" (CamemBERT model)"),zRo=l(),T5=a("li"),Cle=a("strong"),WRo=o("canine"),QRo=o(" \u2014 "),ZN=a("a"),HRo=o("CanineForQuestionAnswering"),URo=o(" (Canine model)"),JRo=l(),F5=a("li"),Mle=a("strong"),YRo=o("convbert"),KRo=o(" \u2014 "),ej=a("a"),ZRo=o("ConvBertForQuestionAnswering"),eSo=o(" (ConvBERT model)"),oSo=l(),C5=a("li"),Ele=a("strong"),rSo=o("data2vec-text"),tSo=o(" \u2014 "),oj=a("a"),aSo=o("Data2VecTextForQuestionAnswering"),nSo=o(" (Data2VecText model)"),sSo=l(),M5=a("li"),yle=a("strong"),lSo=o("deberta"),iSo=o(" \u2014 "),rj=a("a"),dSo=o("DebertaForQuestionAnswering"),cSo=o(" (DeBERTa model)"),fSo=l(),E5=a("li"),wle=a("strong"),mSo=o("deberta-v2"),gSo=o(" \u2014 "),tj=a("a"),hSo=o("DebertaV2ForQuestionAnswering"),pSo=o(" (DeBERTa-v2 model)"),_So=l(),y5=a("li"),Ale=a("strong"),uSo=o("distilbert"),bSo=o(" \u2014 "),aj=a("a"),vSo=o("DistilBertForQuestionAnswering"),TSo=o(" (DistilBERT model)"),FSo=l(),w5=a("li"),Lle=a("strong"),CSo=o("electra"),MSo=o(" \u2014 "),nj=a("a"),ESo=o("ElectraForQuestionAnswering"),ySo=o(" (ELECTRA model)"),wSo=l(),A5=a("li"),Ble=a("strong"),ASo=o("flaubert"),LSo=o(" \u2014 "),sj=a("a"),BSo=o("FlaubertForQuestionAnsweringSimple"),xSo=o(" (FlauBERT model)"),kSo=l(),L5=a("li"),xle=a("strong"),RSo=o("fnet"),SSo=o(" \u2014 "),lj=a("a"),PSo=o("FNetForQuestionAnswering"),$So=o(" (FNet model)"),ISo=l(),B5=a("li"),kle=a("strong"),DSo=o("funnel"),NSo=o(" \u2014 "),ij=a("a"),jSo=o("FunnelForQuestionAnswering"),qSo=o(" (Funnel Transformer model)"),GSo=l(),x5=a("li"),Rle=a("strong"),OSo=o("gptj"),XSo=o(" \u2014 "),dj=a("a"),VSo=o("GPTJForQuestionAnswering"),zSo=o(" (GPT-J model)"),WSo=l(),k5=a("li"),Sle=a("strong"),QSo=o("ibert"),HSo=o(" \u2014 "),cj=a("a"),USo=o("IBertForQuestionAnswering"),JSo=o(" (I-BERT model)"),YSo=l(),R5=a("li"),Ple=a("strong"),KSo=o("layoutlmv2"),ZSo=o(" \u2014 "),fj=a("a"),ePo=o("LayoutLMv2ForQuestionAnswering"),oPo=o(" (LayoutLMv2 model)"),rPo=l(),S5=a("li"),$le=a("strong"),tPo=o("led"),aPo=o(" \u2014 "),mj=a("a"),nPo=o("LEDForQuestionAnswering"),sPo=o(" (LED model)"),lPo=l(),P5=a("li"),Ile=a("strong"),iPo=o("longformer"),dPo=o(" \u2014 "),gj=a("a"),cPo=o("LongformerForQuestionAnswering"),fPo=o(" (Longformer model)"),mPo=l(),$5=a("li"),Dle=a("strong"),gPo=o("lxmert"),hPo=o(" \u2014 "),hj=a("a"),pPo=o("LxmertForQuestionAnswering"),_Po=o(" (LXMERT model)"),uPo=l(),I5=a("li"),Nle=a("strong"),bPo=o("mbart"),vPo=o(" \u2014 "),pj=a("a"),TPo=o("MBartForQuestionAnswering"),FPo=o(" (mBART model)"),CPo=l(),D5=a("li"),jle=a("strong"),MPo=o("megatron-bert"),EPo=o(" \u2014 "),_j=a("a"),yPo=o("MegatronBertForQuestionAnswering"),wPo=o(" (MegatronBert model)"),APo=l(),N5=a("li"),qle=a("strong"),LPo=o("mobilebert"),BPo=o(" \u2014 "),uj=a("a"),xPo=o("MobileBertForQuestionAnswering"),kPo=o(" (MobileBERT model)"),RPo=l(),j5=a("li"),Gle=a("strong"),SPo=o("mpnet"),PPo=o(" \u2014 "),bj=a("a"),$Po=o("MPNetForQuestionAnswering"),IPo=o(" (MPNet model)"),DPo=l(),q5=a("li"),Ole=a("strong"),NPo=o("nystromformer"),jPo=o(" \u2014 "),vj=a("a"),qPo=o("NystromformerForQuestionAnswering"),GPo=o(" (Nystromformer model)"),OPo=l(),G5=a("li"),Xle=a("strong"),XPo=o("qdqbert"),VPo=o(" \u2014 "),Tj=a("a"),zPo=o("QDQBertForQuestionAnswering"),WPo=o(" (QDQBert model)"),QPo=l(),O5=a("li"),Vle=a("strong"),HPo=o("reformer"),UPo=o(" \u2014 "),Fj=a("a"),JPo=o("ReformerForQuestionAnswering"),YPo=o(" (Reformer model)"),KPo=l(),X5=a("li"),zle=a("strong"),ZPo=o("rembert"),e$o=o(" \u2014 "),Cj=a("a"),o$o=o("RemBertForQuestionAnswering"),r$o=o(" (RemBERT model)"),t$o=l(),V5=a("li"),Wle=a("strong"),a$o=o("roberta"),n$o=o(" \u2014 "),Mj=a("a"),s$o=o("RobertaForQuestionAnswering"),l$o=o(" (RoBERTa model)"),i$o=l(),z5=a("li"),Qle=a("strong"),d$o=o("roformer"),c$o=o(" \u2014 "),Ej=a("a"),f$o=o("RoFormerForQuestionAnswering"),m$o=o(" (RoFormer model)"),g$o=l(),W5=a("li"),Hle=a("strong"),h$o=o("splinter"),p$o=o(" \u2014 "),yj=a("a"),_$o=o("SplinterForQuestionAnswering"),u$o=o(" (Splinter model)"),b$o=l(),Q5=a("li"),Ule=a("strong"),v$o=o("squeezebert"),T$o=o(" \u2014 "),wj=a("a"),F$o=o("SqueezeBertForQuestionAnswering"),C$o=o(" (SqueezeBERT model)"),M$o=l(),H5=a("li"),Jle=a("strong"),E$o=o("xlm"),y$o=o(" \u2014 "),Aj=a("a"),w$o=o("XLMForQuestionAnsweringSimple"),A$o=o(" (XLM model)"),L$o=l(),U5=a("li"),Yle=a("strong"),B$o=o("xlm-roberta"),x$o=o(" \u2014 "),Lj=a("a"),k$o=o("XLMRobertaForQuestionAnswering"),R$o=o(" (XLM-RoBERTa model)"),S$o=l(),J5=a("li"),Kle=a("strong"),P$o=o("xlm-roberta-xl"),$$o=o(" \u2014 "),Bj=a("a"),I$o=o("XLMRobertaXLForQuestionAnswering"),D$o=o(" (XLM-RoBERTa-XL model)"),N$o=l(),Y5=a("li"),Zle=a("strong"),j$o=o("xlnet"),q$o=o(" \u2014 "),xj=a("a"),G$o=o("XLNetForQuestionAnsweringSimple"),O$o=o(" (XLNet model)"),X$o=l(),K5=a("li"),eie=a("strong"),V$o=o("yoso"),z$o=o(" \u2014 "),kj=a("a"),W$o=o("YosoForQuestionAnswering"),Q$o=o(" (YOSO model)"),H$o=l(),Z5=a("p"),U$o=o("The model is set in evaluation mode by default using "),oie=a("code"),J$o=o("model.eval()"),Y$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),K$o=o("model.train()"),Z$o=l(),tie=a("p"),eIo=o("Examples:"),oIo=l(),f(aw.$$.fragment),Wke=l(),wd=a("h2"),e2=a("a"),aie=a("span"),f(nw.$$.fragment),rIo=l(),nie=a("span"),tIo=o("AutoModelForTableQuestionAnswering"),Qke=l(),sr=a("div"),f(sw.$$.fragment),aIo=l(),Ad=a("p"),nIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sie=a("code"),sIo=o("from_pretrained()"),lIo=o("class method or the "),lie=a("code"),iIo=o("from_config()"),dIo=o(`class
method.`),cIo=l(),lw=a("p"),fIo=o("This class cannot be instantiated directly using "),iie=a("code"),mIo=o("__init__()"),gIo=o(" (throws an error)."),hIo=l(),et=a("div"),f(iw.$$.fragment),pIo=l(),die=a("p"),_Io=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uIo=l(),Ld=a("p"),bIo=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),vIo=o("not"),TIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=a("code"),FIo=o("from_pretrained()"),CIo=o("to load the model weights."),MIo=l(),mie=a("p"),EIo=o("Examples:"),yIo=l(),f(dw.$$.fragment),wIo=l(),Qe=a("div"),f(cw.$$.fragment),AIo=l(),gie=a("p"),LIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),BIo=l(),en=a("p"),xIo=o("The model class to instantiate is selected based on the "),hie=a("code"),kIo=o("model_type"),RIo=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),SIo=o("pretrained_model_name_or_path"),PIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=a("code"),$Io=o("pretrained_model_name_or_path"),IIo=o(":"),DIo=l(),uie=a("ul"),o2=a("li"),bie=a("strong"),NIo=o("tapas"),jIo=o(" \u2014 "),Rj=a("a"),qIo=o("TapasForQuestionAnswering"),GIo=o(" (TAPAS model)"),OIo=l(),r2=a("p"),XIo=o("The model is set in evaluation mode by default using "),vie=a("code"),VIo=o("model.eval()"),zIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),WIo=o("model.train()"),QIo=l(),Fie=a("p"),HIo=o("Examples:"),UIo=l(),f(fw.$$.fragment),Hke=l(),Bd=a("h2"),t2=a("a"),Cie=a("span"),f(mw.$$.fragment),JIo=l(),Mie=a("span"),YIo=o("AutoModelForImageClassification"),Uke=l(),lr=a("div"),f(gw.$$.fragment),KIo=l(),xd=a("p"),ZIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Eie=a("code"),eDo=o("from_pretrained()"),oDo=o("class method or the "),yie=a("code"),rDo=o("from_config()"),tDo=o(`class
method.`),aDo=l(),hw=a("p"),nDo=o("This class cannot be instantiated directly using "),wie=a("code"),sDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),ot=a("div"),f(pw.$$.fragment),dDo=l(),Aie=a("p"),cDo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fDo=l(),kd=a("p"),mDo=o(`Note:
Loading a model from its configuration file does `),Lie=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=a("code"),pDo=o("from_pretrained()"),_Do=o("to load the model weights."),uDo=l(),xie=a("p"),bDo=o("Examples:"),vDo=l(),f(_w.$$.fragment),TDo=l(),He=a("div"),f(uw.$$.fragment),FDo=l(),kie=a("p"),CDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MDo=l(),on=a("p"),EDo=o("The model class to instantiate is selected based on the "),Rie=a("code"),yDo=o("model_type"),wDo=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),ADo=o("pretrained_model_name_or_path"),LDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),BDo=o("pretrained_model_name_or_path"),xDo=o(":"),kDo=l(),me=a("ul"),a2=a("li"),$ie=a("strong"),RDo=o("beit"),SDo=o(" \u2014 "),Sj=a("a"),PDo=o("BeitForImageClassification"),$Do=o(" (BEiT model)"),IDo=l(),n2=a("li"),Iie=a("strong"),DDo=o("convnext"),NDo=o(" \u2014 "),Pj=a("a"),jDo=o("ConvNextForImageClassification"),qDo=o(" (ConvNext model)"),GDo=l(),qs=a("li"),Die=a("strong"),ODo=o("deit"),XDo=o(" \u2014 "),$j=a("a"),VDo=o("DeiTForImageClassification"),zDo=o(" or "),Ij=a("a"),WDo=o("DeiTForImageClassificationWithTeacher"),QDo=o(" (DeiT model)"),HDo=l(),s2=a("li"),Nie=a("strong"),UDo=o("imagegpt"),JDo=o(" \u2014 "),Dj=a("a"),YDo=o("ImageGPTForImageClassification"),KDo=o(" (ImageGPT model)"),ZDo=l(),ma=a("li"),jie=a("strong"),eNo=o("perceiver"),oNo=o(" \u2014 "),Nj=a("a"),rNo=o("PerceiverForImageClassificationLearned"),tNo=o(" or "),jj=a("a"),aNo=o("PerceiverForImageClassificationFourier"),nNo=o(" or "),qj=a("a"),sNo=o("PerceiverForImageClassificationConvProcessing"),lNo=o(" (Perceiver model)"),iNo=l(),l2=a("li"),qie=a("strong"),dNo=o("poolformer"),cNo=o(" \u2014 "),Gj=a("a"),fNo=o("PoolFormerForImageClassification"),mNo=o(" (PoolFormer model)"),gNo=l(),i2=a("li"),Gie=a("strong"),hNo=o("resnet"),pNo=o(" \u2014 "),Oj=a("a"),_No=o("ResNetForImageClassification"),uNo=o(" (ResNet model)"),bNo=l(),d2=a("li"),Oie=a("strong"),vNo=o("segformer"),TNo=o(" \u2014 "),Xj=a("a"),FNo=o("SegformerForImageClassification"),CNo=o(" (SegFormer model)"),MNo=l(),c2=a("li"),Xie=a("strong"),ENo=o("swin"),yNo=o(" \u2014 "),Vj=a("a"),wNo=o("SwinForImageClassification"),ANo=o(" (Swin model)"),LNo=l(),f2=a("li"),Vie=a("strong"),BNo=o("van"),xNo=o(" \u2014 "),zj=a("a"),kNo=o("VanForImageClassification"),RNo=o(" (VAN model)"),SNo=l(),m2=a("li"),zie=a("strong"),PNo=o("vit"),$No=o(" \u2014 "),Wj=a("a"),INo=o("ViTForImageClassification"),DNo=o(" (ViT model)"),NNo=l(),g2=a("p"),jNo=o("The model is set in evaluation mode by default using "),Wie=a("code"),qNo=o("model.eval()"),GNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qie=a("code"),ONo=o("model.train()"),XNo=l(),Hie=a("p"),VNo=o("Examples:"),zNo=l(),f(bw.$$.fragment),Jke=l(),Rd=a("h2"),h2=a("a"),Uie=a("span"),f(vw.$$.fragment),WNo=l(),Jie=a("span"),QNo=o("AutoModelForVision2Seq"),Yke=l(),ir=a("div"),f(Tw.$$.fragment),HNo=l(),Sd=a("p"),UNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yie=a("code"),JNo=o("from_pretrained()"),YNo=o("class method or the "),Kie=a("code"),KNo=o("from_config()"),ZNo=o(`class
method.`),ejo=l(),Fw=a("p"),ojo=o("This class cannot be instantiated directly using "),Zie=a("code"),rjo=o("__init__()"),tjo=o(" (throws an error)."),ajo=l(),rt=a("div"),f(Cw.$$.fragment),njo=l(),ede=a("p"),sjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ljo=l(),Pd=a("p"),ijo=o(`Note:
Loading a model from its configuration file does `),ode=a("strong"),djo=o("not"),cjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rde=a("code"),fjo=o("from_pretrained()"),mjo=o("to load the model weights."),gjo=l(),tde=a("p"),hjo=o("Examples:"),pjo=l(),f(Mw.$$.fragment),_jo=l(),Ue=a("div"),f(Ew.$$.fragment),ujo=l(),ade=a("p"),bjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vjo=l(),rn=a("p"),Tjo=o("The model class to instantiate is selected based on the "),nde=a("code"),Fjo=o("model_type"),Cjo=o(` property of the config object (either
passed as an argument or loaded from `),sde=a("code"),Mjo=o("pretrained_model_name_or_path"),Ejo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lde=a("code"),yjo=o("pretrained_model_name_or_path"),wjo=o(":"),Ajo=l(),ide=a("ul"),p2=a("li"),dde=a("strong"),Ljo=o("vision-encoder-decoder"),Bjo=o(" \u2014 "),Qj=a("a"),xjo=o("VisionEncoderDecoderModel"),kjo=o(" (Vision Encoder decoder model)"),Rjo=l(),_2=a("p"),Sjo=o("The model is set in evaluation mode by default using "),cde=a("code"),Pjo=o("model.eval()"),$jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),Ijo=o("model.train()"),Djo=l(),mde=a("p"),Njo=o("Examples:"),jjo=l(),f(yw.$$.fragment),Kke=l(),$d=a("h2"),u2=a("a"),gde=a("span"),f(ww.$$.fragment),qjo=l(),hde=a("span"),Gjo=o("AutoModelForAudioClassification"),Zke=l(),dr=a("div"),f(Aw.$$.fragment),Ojo=l(),Id=a("p"),Xjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pde=a("code"),Vjo=o("from_pretrained()"),zjo=o("class method or the "),_de=a("code"),Wjo=o("from_config()"),Qjo=o(`class
method.`),Hjo=l(),Lw=a("p"),Ujo=o("This class cannot be instantiated directly using "),ude=a("code"),Jjo=o("__init__()"),Yjo=o(" (throws an error)."),Kjo=l(),tt=a("div"),f(Bw.$$.fragment),Zjo=l(),bde=a("p"),eqo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oqo=l(),Dd=a("p"),rqo=o(`Note:
Loading a model from its configuration file does `),vde=a("strong"),tqo=o("not"),aqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tde=a("code"),nqo=o("from_pretrained()"),sqo=o("to load the model weights."),lqo=l(),Fde=a("p"),iqo=o("Examples:"),dqo=l(),f(xw.$$.fragment),cqo=l(),Je=a("div"),f(kw.$$.fragment),fqo=l(),Cde=a("p"),mqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),gqo=l(),tn=a("p"),hqo=o("The model class to instantiate is selected based on the "),Mde=a("code"),pqo=o("model_type"),_qo=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),uqo=o("pretrained_model_name_or_path"),bqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),vqo=o("pretrained_model_name_or_path"),Tqo=o(":"),Fqo=l(),ke=a("ul"),b2=a("li"),wde=a("strong"),Cqo=o("data2vec-audio"),Mqo=o(" \u2014 "),Hj=a("a"),Eqo=o("Data2VecAudioForSequenceClassification"),yqo=o(" (Data2VecAudio model)"),wqo=l(),v2=a("li"),Ade=a("strong"),Aqo=o("hubert"),Lqo=o(" \u2014 "),Uj=a("a"),Bqo=o("HubertForSequenceClassification"),xqo=o(" (Hubert model)"),kqo=l(),T2=a("li"),Lde=a("strong"),Rqo=o("sew"),Sqo=o(" \u2014 "),Jj=a("a"),Pqo=o("SEWForSequenceClassification"),$qo=o(" (SEW model)"),Iqo=l(),F2=a("li"),Bde=a("strong"),Dqo=o("sew-d"),Nqo=o(" \u2014 "),Yj=a("a"),jqo=o("SEWDForSequenceClassification"),qqo=o(" (SEW-D model)"),Gqo=l(),C2=a("li"),xde=a("strong"),Oqo=o("unispeech"),Xqo=o(" \u2014 "),Kj=a("a"),Vqo=o("UniSpeechForSequenceClassification"),zqo=o(" (UniSpeech model)"),Wqo=l(),M2=a("li"),kde=a("strong"),Qqo=o("unispeech-sat"),Hqo=o(" \u2014 "),Zj=a("a"),Uqo=o("UniSpeechSatForSequenceClassification"),Jqo=o(" (UniSpeechSat model)"),Yqo=l(),E2=a("li"),Rde=a("strong"),Kqo=o("wav2vec2"),Zqo=o(" \u2014 "),eq=a("a"),eGo=o("Wav2Vec2ForSequenceClassification"),oGo=o(" (Wav2Vec2 model)"),rGo=l(),y2=a("li"),Sde=a("strong"),tGo=o("wavlm"),aGo=o(" \u2014 "),oq=a("a"),nGo=o("WavLMForSequenceClassification"),sGo=o(" (WavLM model)"),lGo=l(),w2=a("p"),iGo=o("The model is set in evaluation mode by default using "),Pde=a("code"),dGo=o("model.eval()"),cGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),fGo=o("model.train()"),mGo=l(),Ide=a("p"),gGo=o("Examples:"),hGo=l(),f(Rw.$$.fragment),eRe=l(),Nd=a("h2"),A2=a("a"),Dde=a("span"),f(Sw.$$.fragment),pGo=l(),Nde=a("span"),_Go=o("AutoModelForAudioFrameClassification"),oRe=l(),cr=a("div"),f(Pw.$$.fragment),uGo=l(),jd=a("p"),bGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),jde=a("code"),vGo=o("from_pretrained()"),TGo=o("class method or the "),qde=a("code"),FGo=o("from_config()"),CGo=o(`class
method.`),MGo=l(),$w=a("p"),EGo=o("This class cannot be instantiated directly using "),Gde=a("code"),yGo=o("__init__()"),wGo=o(" (throws an error)."),AGo=l(),at=a("div"),f(Iw.$$.fragment),LGo=l(),Ode=a("p"),BGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xGo=l(),qd=a("p"),kGo=o(`Note:
Loading a model from its configuration file does `),Xde=a("strong"),RGo=o("not"),SGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vde=a("code"),PGo=o("from_pretrained()"),$Go=o("to load the model weights."),IGo=l(),zde=a("p"),DGo=o("Examples:"),NGo=l(),f(Dw.$$.fragment),jGo=l(),Ye=a("div"),f(Nw.$$.fragment),qGo=l(),Wde=a("p"),GGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),OGo=l(),an=a("p"),XGo=o("The model class to instantiate is selected based on the "),Qde=a("code"),VGo=o("model_type"),zGo=o(` property of the config object (either
passed as an argument or loaded from `),Hde=a("code"),WGo=o("pretrained_model_name_or_path"),QGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=a("code"),HGo=o("pretrained_model_name_or_path"),UGo=o(":"),JGo=l(),nn=a("ul"),L2=a("li"),Jde=a("strong"),YGo=o("data2vec-audio"),KGo=o(" \u2014 "),rq=a("a"),ZGo=o("Data2VecAudioForAudioFrameClassification"),eOo=o(" (Data2VecAudio model)"),oOo=l(),B2=a("li"),Yde=a("strong"),rOo=o("unispeech-sat"),tOo=o(" \u2014 "),tq=a("a"),aOo=o("UniSpeechSatForAudioFrameClassification"),nOo=o(" (UniSpeechSat model)"),sOo=l(),x2=a("li"),Kde=a("strong"),lOo=o("wav2vec2"),iOo=o(" \u2014 "),aq=a("a"),dOo=o("Wav2Vec2ForAudioFrameClassification"),cOo=o(" (Wav2Vec2 model)"),fOo=l(),k2=a("li"),Zde=a("strong"),mOo=o("wavlm"),gOo=o(" \u2014 "),nq=a("a"),hOo=o("WavLMForAudioFrameClassification"),pOo=o(" (WavLM model)"),_Oo=l(),R2=a("p"),uOo=o("The model is set in evaluation mode by default using "),ece=a("code"),bOo=o("model.eval()"),vOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),TOo=o("model.train()"),FOo=l(),rce=a("p"),COo=o("Examples:"),MOo=l(),f(jw.$$.fragment),rRe=l(),Gd=a("h2"),S2=a("a"),tce=a("span"),f(qw.$$.fragment),EOo=l(),ace=a("span"),yOo=o("AutoModelForCTC"),tRe=l(),fr=a("div"),f(Gw.$$.fragment),wOo=l(),Od=a("p"),AOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nce=a("code"),LOo=o("from_pretrained()"),BOo=o("class method or the "),sce=a("code"),xOo=o("from_config()"),kOo=o(`class
method.`),ROo=l(),Ow=a("p"),SOo=o("This class cannot be instantiated directly using "),lce=a("code"),POo=o("__init__()"),$Oo=o(" (throws an error)."),IOo=l(),nt=a("div"),f(Xw.$$.fragment),DOo=l(),ice=a("p"),NOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jOo=l(),Xd=a("p"),qOo=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),GOo=o("not"),OOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cce=a("code"),XOo=o("from_pretrained()"),VOo=o("to load the model weights."),zOo=l(),fce=a("p"),WOo=o("Examples:"),QOo=l(),f(Vw.$$.fragment),HOo=l(),Ke=a("div"),f(zw.$$.fragment),UOo=l(),mce=a("p"),JOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),YOo=l(),sn=a("p"),KOo=o("The model class to instantiate is selected based on the "),gce=a("code"),ZOo=o("model_type"),eXo=o(` property of the config object (either
passed as an argument or loaded from `),hce=a("code"),oXo=o("pretrained_model_name_or_path"),rXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pce=a("code"),tXo=o("pretrained_model_name_or_path"),aXo=o(":"),nXo=l(),Re=a("ul"),P2=a("li"),_ce=a("strong"),sXo=o("data2vec-audio"),lXo=o(" \u2014 "),sq=a("a"),iXo=o("Data2VecAudioForCTC"),dXo=o(" (Data2VecAudio model)"),cXo=l(),$2=a("li"),uce=a("strong"),fXo=o("hubert"),mXo=o(" \u2014 "),lq=a("a"),gXo=o("HubertForCTC"),hXo=o(" (Hubert model)"),pXo=l(),I2=a("li"),bce=a("strong"),_Xo=o("sew"),uXo=o(" \u2014 "),iq=a("a"),bXo=o("SEWForCTC"),vXo=o(" (SEW model)"),TXo=l(),D2=a("li"),vce=a("strong"),FXo=o("sew-d"),CXo=o(" \u2014 "),dq=a("a"),MXo=o("SEWDForCTC"),EXo=o(" (SEW-D model)"),yXo=l(),N2=a("li"),Tce=a("strong"),wXo=o("unispeech"),AXo=o(" \u2014 "),cq=a("a"),LXo=o("UniSpeechForCTC"),BXo=o(" (UniSpeech model)"),xXo=l(),j2=a("li"),Fce=a("strong"),kXo=o("unispeech-sat"),RXo=o(" \u2014 "),fq=a("a"),SXo=o("UniSpeechSatForCTC"),PXo=o(" (UniSpeechSat model)"),$Xo=l(),q2=a("li"),Cce=a("strong"),IXo=o("wav2vec2"),DXo=o(" \u2014 "),mq=a("a"),NXo=o("Wav2Vec2ForCTC"),jXo=o(" (Wav2Vec2 model)"),qXo=l(),G2=a("li"),Mce=a("strong"),GXo=o("wavlm"),OXo=o(" \u2014 "),gq=a("a"),XXo=o("WavLMForCTC"),VXo=o(" (WavLM model)"),zXo=l(),O2=a("p"),WXo=o("The model is set in evaluation mode by default using "),Ece=a("code"),QXo=o("model.eval()"),HXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=a("code"),UXo=o("model.train()"),JXo=l(),wce=a("p"),YXo=o("Examples:"),KXo=l(),f(Ww.$$.fragment),aRe=l(),Vd=a("h2"),X2=a("a"),Ace=a("span"),f(Qw.$$.fragment),ZXo=l(),Lce=a("span"),eVo=o("AutoModelForSpeechSeq2Seq"),nRe=l(),mr=a("div"),f(Hw.$$.fragment),oVo=l(),zd=a("p"),rVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Bce=a("code"),tVo=o("from_pretrained()"),aVo=o("class method or the "),xce=a("code"),nVo=o("from_config()"),sVo=o(`class
method.`),lVo=l(),Uw=a("p"),iVo=o("This class cannot be instantiated directly using "),kce=a("code"),dVo=o("__init__()"),cVo=o(" (throws an error)."),fVo=l(),st=a("div"),f(Jw.$$.fragment),mVo=l(),Rce=a("p"),gVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hVo=l(),Wd=a("p"),pVo=o(`Note:
Loading a model from its configuration file does `),Sce=a("strong"),_Vo=o("not"),uVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pce=a("code"),bVo=o("from_pretrained()"),vVo=o("to load the model weights."),TVo=l(),$ce=a("p"),FVo=o("Examples:"),CVo=l(),f(Yw.$$.fragment),MVo=l(),Ze=a("div"),f(Kw.$$.fragment),EVo=l(),Ice=a("p"),yVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wVo=l(),ln=a("p"),AVo=o("The model class to instantiate is selected based on the "),Dce=a("code"),LVo=o("model_type"),BVo=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),xVo=o("pretrained_model_name_or_path"),kVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),RVo=o("pretrained_model_name_or_path"),SVo=o(":"),PVo=l(),Zw=a("ul"),V2=a("li"),qce=a("strong"),$Vo=o("speech-encoder-decoder"),IVo=o(" \u2014 "),hq=a("a"),DVo=o("SpeechEncoderDecoderModel"),NVo=o(" (Speech Encoder decoder model)"),jVo=l(),z2=a("li"),Gce=a("strong"),qVo=o("speech_to_text"),GVo=o(" \u2014 "),pq=a("a"),OVo=o("Speech2TextForConditionalGeneration"),XVo=o(" (Speech2Text model)"),VVo=l(),W2=a("p"),zVo=o("The model is set in evaluation mode by default using "),Oce=a("code"),WVo=o("model.eval()"),QVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=a("code"),HVo=o("model.train()"),UVo=l(),Vce=a("p"),JVo=o("Examples:"),YVo=l(),f(e6.$$.fragment),sRe=l(),Qd=a("h2"),Q2=a("a"),zce=a("span"),f(o6.$$.fragment),KVo=l(),Wce=a("span"),ZVo=o("AutoModelForAudioXVector"),lRe=l(),gr=a("div"),f(r6.$$.fragment),ezo=l(),Hd=a("p"),ozo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Qce=a("code"),rzo=o("from_pretrained()"),tzo=o("class method or the "),Hce=a("code"),azo=o("from_config()"),nzo=o(`class
method.`),szo=l(),t6=a("p"),lzo=o("This class cannot be instantiated directly using "),Uce=a("code"),izo=o("__init__()"),dzo=o(" (throws an error)."),czo=l(),lt=a("div"),f(a6.$$.fragment),fzo=l(),Jce=a("p"),mzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gzo=l(),Ud=a("p"),hzo=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),pzo=o("not"),_zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kce=a("code"),uzo=o("from_pretrained()"),bzo=o("to load the model weights."),vzo=l(),Zce=a("p"),Tzo=o("Examples:"),Fzo=l(),f(n6.$$.fragment),Czo=l(),eo=a("div"),f(s6.$$.fragment),Mzo=l(),efe=a("p"),Ezo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),yzo=l(),dn=a("p"),wzo=o("The model class to instantiate is selected based on the "),ofe=a("code"),Azo=o("model_type"),Lzo=o(` property of the config object (either
passed as an argument or loaded from `),rfe=a("code"),Bzo=o("pretrained_model_name_or_path"),xzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=a("code"),kzo=o("pretrained_model_name_or_path"),Rzo=o(":"),Szo=l(),cn=a("ul"),H2=a("li"),afe=a("strong"),Pzo=o("data2vec-audio"),$zo=o(" \u2014 "),_q=a("a"),Izo=o("Data2VecAudioForXVector"),Dzo=o(" (Data2VecAudio model)"),Nzo=l(),U2=a("li"),nfe=a("strong"),jzo=o("unispeech-sat"),qzo=o(" \u2014 "),uq=a("a"),Gzo=o("UniSpeechSatForXVector"),Ozo=o(" (UniSpeechSat model)"),Xzo=l(),J2=a("li"),sfe=a("strong"),Vzo=o("wav2vec2"),zzo=o(" \u2014 "),bq=a("a"),Wzo=o("Wav2Vec2ForXVector"),Qzo=o(" (Wav2Vec2 model)"),Hzo=l(),Y2=a("li"),lfe=a("strong"),Uzo=o("wavlm"),Jzo=o(" \u2014 "),vq=a("a"),Yzo=o("WavLMForXVector"),Kzo=o(" (WavLM model)"),Zzo=l(),K2=a("p"),eWo=o("The model is set in evaluation mode by default using "),ife=a("code"),oWo=o("model.eval()"),rWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),tWo=o("model.train()"),aWo=l(),cfe=a("p"),nWo=o("Examples:"),sWo=l(),f(l6.$$.fragment),iRe=l(),Jd=a("h2"),Z2=a("a"),ffe=a("span"),f(i6.$$.fragment),lWo=l(),mfe=a("span"),iWo=o("AutoModelForMaskedImageModeling"),dRe=l(),hr=a("div"),f(d6.$$.fragment),dWo=l(),Yd=a("p"),cWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gfe=a("code"),fWo=o("from_pretrained()"),mWo=o("class method or the "),hfe=a("code"),gWo=o("from_config()"),hWo=o(`class
method.`),pWo=l(),c6=a("p"),_Wo=o("This class cannot be instantiated directly using "),pfe=a("code"),uWo=o("__init__()"),bWo=o(" (throws an error)."),vWo=l(),it=a("div"),f(f6.$$.fragment),TWo=l(),_fe=a("p"),FWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),CWo=l(),Kd=a("p"),MWo=o(`Note:
Loading a model from its configuration file does `),ufe=a("strong"),EWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bfe=a("code"),wWo=o("from_pretrained()"),AWo=o("to load the model weights."),LWo=l(),vfe=a("p"),BWo=o("Examples:"),xWo=l(),f(m6.$$.fragment),kWo=l(),oo=a("div"),f(g6.$$.fragment),RWo=l(),Tfe=a("p"),SWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),PWo=l(),fn=a("p"),$Wo=o("The model class to instantiate is selected based on the "),Ffe=a("code"),IWo=o("model_type"),DWo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),NWo=o("pretrained_model_name_or_path"),jWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=a("code"),qWo=o("pretrained_model_name_or_path"),GWo=o(":"),OWo=l(),Zd=a("ul"),ev=a("li"),Efe=a("strong"),XWo=o("deit"),VWo=o(" \u2014 "),Tq=a("a"),zWo=o("DeiTForMaskedImageModeling"),WWo=o(" (DeiT model)"),QWo=l(),ov=a("li"),yfe=a("strong"),HWo=o("swin"),UWo=o(" \u2014 "),Fq=a("a"),JWo=o("SwinForMaskedImageModeling"),YWo=o(" (Swin model)"),KWo=l(),rv=a("li"),wfe=a("strong"),ZWo=o("vit"),eQo=o(" \u2014 "),Cq=a("a"),oQo=o("ViTForMaskedImageModeling"),rQo=o(" (ViT model)"),tQo=l(),tv=a("p"),aQo=o("The model is set in evaluation mode by default using "),Afe=a("code"),nQo=o("model.eval()"),sQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),lQo=o("model.train()"),iQo=l(),Bfe=a("p"),dQo=o("Examples:"),cQo=l(),f(h6.$$.fragment),cRe=l(),ec=a("h2"),av=a("a"),xfe=a("span"),f(p6.$$.fragment),fQo=l(),kfe=a("span"),mQo=o("AutoModelForObjectDetection"),fRe=l(),pr=a("div"),f(_6.$$.fragment),gQo=l(),oc=a("p"),hQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Rfe=a("code"),pQo=o("from_pretrained()"),_Qo=o("class method or the "),Sfe=a("code"),uQo=o("from_config()"),bQo=o(`class
method.`),vQo=l(),u6=a("p"),TQo=o("This class cannot be instantiated directly using "),Pfe=a("code"),FQo=o("__init__()"),CQo=o(" (throws an error)."),MQo=l(),dt=a("div"),f(b6.$$.fragment),EQo=l(),$fe=a("p"),yQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),wQo=l(),rc=a("p"),AQo=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),LQo=o("not"),BQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dfe=a("code"),xQo=o("from_pretrained()"),kQo=o("to load the model weights."),RQo=l(),Nfe=a("p"),SQo=o("Examples:"),PQo=l(),f(v6.$$.fragment),$Qo=l(),ro=a("div"),f(T6.$$.fragment),IQo=l(),jfe=a("p"),DQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),NQo=l(),mn=a("p"),jQo=o("The model class to instantiate is selected based on the "),qfe=a("code"),qQo=o("model_type"),GQo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),OQo=o("pretrained_model_name_or_path"),XQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),VQo=o("pretrained_model_name_or_path"),zQo=o(":"),WQo=l(),Xfe=a("ul"),nv=a("li"),Vfe=a("strong"),QQo=o("detr"),HQo=o(" \u2014 "),Mq=a("a"),UQo=o("DetrForObjectDetection"),JQo=o(" (DETR model)"),YQo=l(),sv=a("p"),KQo=o("The model is set in evaluation mode by default using "),zfe=a("code"),ZQo=o("model.eval()"),eHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=a("code"),oHo=o("model.train()"),rHo=l(),Qfe=a("p"),tHo=o("Examples:"),aHo=l(),f(F6.$$.fragment),mRe=l(),tc=a("h2"),lv=a("a"),Hfe=a("span"),f(C6.$$.fragment),nHo=l(),Ufe=a("span"),sHo=o("AutoModelForImageSegmentation"),gRe=l(),_r=a("div"),f(M6.$$.fragment),lHo=l(),ac=a("p"),iHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Jfe=a("code"),dHo=o("from_pretrained()"),cHo=o("class method or the "),Yfe=a("code"),fHo=o("from_config()"),mHo=o(`class
method.`),gHo=l(),E6=a("p"),hHo=o("This class cannot be instantiated directly using "),Kfe=a("code"),pHo=o("__init__()"),_Ho=o(" (throws an error)."),uHo=l(),ct=a("div"),f(y6.$$.fragment),bHo=l(),Zfe=a("p"),vHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),THo=l(),nc=a("p"),FHo=o(`Note:
Loading a model from its configuration file does `),eme=a("strong"),CHo=o("not"),MHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ome=a("code"),EHo=o("from_pretrained()"),yHo=o("to load the model weights."),wHo=l(),rme=a("p"),AHo=o("Examples:"),LHo=l(),f(w6.$$.fragment),BHo=l(),to=a("div"),f(A6.$$.fragment),xHo=l(),tme=a("p"),kHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RHo=l(),gn=a("p"),SHo=o("The model class to instantiate is selected based on the "),ame=a("code"),PHo=o("model_type"),$Ho=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),IHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=a("code"),NHo=o("pretrained_model_name_or_path"),jHo=o(":"),qHo=l(),lme=a("ul"),iv=a("li"),ime=a("strong"),GHo=o("detr"),OHo=o(" \u2014 "),Eq=a("a"),XHo=o("DetrForSegmentation"),VHo=o(" (DETR model)"),zHo=l(),dv=a("p"),WHo=o("The model is set in evaluation mode by default using "),dme=a("code"),QHo=o("model.eval()"),HHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=a("code"),UHo=o("model.train()"),JHo=l(),fme=a("p"),YHo=o("Examples:"),KHo=l(),f(L6.$$.fragment),hRe=l(),sc=a("h2"),cv=a("a"),mme=a("span"),f(B6.$$.fragment),ZHo=l(),gme=a("span"),eUo=o("AutoModelForSemanticSegmentation"),pRe=l(),ur=a("div"),f(x6.$$.fragment),oUo=l(),lc=a("p"),rUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hme=a("code"),tUo=o("from_pretrained()"),aUo=o("class method or the "),pme=a("code"),nUo=o("from_config()"),sUo=o(`class
method.`),lUo=l(),k6=a("p"),iUo=o("This class cannot be instantiated directly using "),_me=a("code"),dUo=o("__init__()"),cUo=o(" (throws an error)."),fUo=l(),ft=a("div"),f(R6.$$.fragment),mUo=l(),ume=a("p"),gUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hUo=l(),ic=a("p"),pUo=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),_Uo=o("not"),uUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vme=a("code"),bUo=o("from_pretrained()"),vUo=o("to load the model weights."),TUo=l(),Tme=a("p"),FUo=o("Examples:"),CUo=l(),f(S6.$$.fragment),MUo=l(),ao=a("div"),f(P6.$$.fragment),EUo=l(),Fme=a("p"),yUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wUo=l(),hn=a("p"),AUo=o("The model class to instantiate is selected based on the "),Cme=a("code"),LUo=o("model_type"),BUo=o(` property of the config object (either
passed as an argument or loaded from `),Mme=a("code"),xUo=o("pretrained_model_name_or_path"),kUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eme=a("code"),RUo=o("pretrained_model_name_or_path"),SUo=o(":"),PUo=l(),dc=a("ul"),fv=a("li"),yme=a("strong"),$Uo=o("beit"),IUo=o(" \u2014 "),yq=a("a"),DUo=o("BeitForSemanticSegmentation"),NUo=o(" (BEiT model)"),jUo=l(),mv=a("li"),wme=a("strong"),qUo=o("dpt"),GUo=o(" \u2014 "),wq=a("a"),OUo=o("DPTForSemanticSegmentation"),XUo=o(" (DPT model)"),VUo=l(),gv=a("li"),Ame=a("strong"),zUo=o("segformer"),WUo=o(" \u2014 "),Aq=a("a"),QUo=o("SegformerForSemanticSegmentation"),HUo=o(" (SegFormer model)"),UUo=l(),hv=a("p"),JUo=o("The model is set in evaluation mode by default using "),Lme=a("code"),YUo=o("model.eval()"),KUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),ZUo=o("model.train()"),eJo=l(),xme=a("p"),oJo=o("Examples:"),rJo=l(),f($6.$$.fragment),_Re=l(),cc=a("h2"),pv=a("a"),kme=a("span"),f(I6.$$.fragment),tJo=l(),Rme=a("span"),aJo=o("AutoModelForInstanceSegmentation"),uRe=l(),br=a("div"),f(D6.$$.fragment),nJo=l(),fc=a("p"),sJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Sme=a("code"),lJo=o("from_pretrained()"),iJo=o("class method or the "),Pme=a("code"),dJo=o("from_config()"),cJo=o(`class
method.`),fJo=l(),N6=a("p"),mJo=o("This class cannot be instantiated directly using "),$me=a("code"),gJo=o("__init__()"),hJo=o(" (throws an error)."),pJo=l(),mt=a("div"),f(j6.$$.fragment),_Jo=l(),Ime=a("p"),uJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),bJo=l(),mc=a("p"),vJo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),TJo=o("not"),FJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nme=a("code"),CJo=o("from_pretrained()"),MJo=o("to load the model weights."),EJo=l(),jme=a("p"),yJo=o("Examples:"),wJo=l(),f(q6.$$.fragment),AJo=l(),no=a("div"),f(G6.$$.fragment),LJo=l(),qme=a("p"),BJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xJo=l(),pn=a("p"),kJo=o("The model class to instantiate is selected based on the "),Gme=a("code"),RJo=o("model_type"),SJo=o(` property of the config object (either
passed as an argument or loaded from `),Ome=a("code"),PJo=o("pretrained_model_name_or_path"),$Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),IJo=o("pretrained_model_name_or_path"),DJo=o(":"),NJo=l(),Vme=a("ul"),_v=a("li"),zme=a("strong"),jJo=o("maskformer"),qJo=o(" \u2014 "),Lq=a("a"),GJo=o("MaskFormerForInstanceSegmentation"),OJo=o(" (MaskFormer model)"),XJo=l(),uv=a("p"),VJo=o("The model is set in evaluation mode by default using "),Wme=a("code"),zJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=a("code"),QJo=o("model.train()"),HJo=l(),Hme=a("p"),UJo=o("Examples:"),JJo=l(),f(O6.$$.fragment),bRe=l(),gc=a("h2"),bv=a("a"),Ume=a("span"),f(X6.$$.fragment),YJo=l(),Jme=a("span"),KJo=o("TFAutoModel"),vRe=l(),vr=a("div"),f(V6.$$.fragment),ZJo=l(),hc=a("p"),eYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yme=a("code"),oYo=o("from_pretrained()"),rYo=o("class method or the "),Kme=a("code"),tYo=o("from_config()"),aYo=o(`class
method.`),nYo=l(),z6=a("p"),sYo=o("This class cannot be instantiated directly using "),Zme=a("code"),lYo=o("__init__()"),iYo=o(" (throws an error)."),dYo=l(),gt=a("div"),f(W6.$$.fragment),cYo=l(),ege=a("p"),fYo=o("Instantiates one of the base model classes of the library from a configuration."),mYo=l(),pc=a("p"),gYo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),hYo=o("not"),pYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rge=a("code"),_Yo=o("from_pretrained()"),uYo=o("to load the model weights."),bYo=l(),tge=a("p"),vYo=o("Examples:"),TYo=l(),f(Q6.$$.fragment),FYo=l(),ho=a("div"),f(H6.$$.fragment),CYo=l(),age=a("p"),MYo=o("Instantiate one of the base model classes of the library from a pretrained model."),EYo=l(),_n=a("p"),yYo=o("The model class to instantiate is selected based on the "),nge=a("code"),wYo=o("model_type"),AYo=o(` property of the config object (either
passed as an argument or loaded from `),sge=a("code"),LYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=a("code"),xYo=o("pretrained_model_name_or_path"),kYo=o(":"),RYo=l(),B=a("ul"),vv=a("li"),ige=a("strong"),SYo=o("albert"),PYo=o(" \u2014 "),Bq=a("a"),$Yo=o("TFAlbertModel"),IYo=o(" (ALBERT model)"),DYo=l(),Tv=a("li"),dge=a("strong"),NYo=o("bart"),jYo=o(" \u2014 "),xq=a("a"),qYo=o("TFBartModel"),GYo=o(" (BART model)"),OYo=l(),Fv=a("li"),cge=a("strong"),XYo=o("bert"),VYo=o(" \u2014 "),kq=a("a"),zYo=o("TFBertModel"),WYo=o(" (BERT model)"),QYo=l(),Cv=a("li"),fge=a("strong"),HYo=o("blenderbot"),UYo=o(" \u2014 "),Rq=a("a"),JYo=o("TFBlenderbotModel"),YYo=o(" (Blenderbot model)"),KYo=l(),Mv=a("li"),mge=a("strong"),ZYo=o("blenderbot-small"),eKo=o(" \u2014 "),Sq=a("a"),oKo=o("TFBlenderbotSmallModel"),rKo=o(" (BlenderbotSmall model)"),tKo=l(),Ev=a("li"),gge=a("strong"),aKo=o("camembert"),nKo=o(" \u2014 "),Pq=a("a"),sKo=o("TFCamembertModel"),lKo=o(" (CamemBERT model)"),iKo=l(),yv=a("li"),hge=a("strong"),dKo=o("clip"),cKo=o(" \u2014 "),$q=a("a"),fKo=o("TFCLIPModel"),mKo=o(" (CLIP model)"),gKo=l(),wv=a("li"),pge=a("strong"),hKo=o("convbert"),pKo=o(" \u2014 "),Iq=a("a"),_Ko=o("TFConvBertModel"),uKo=o(" (ConvBERT model)"),bKo=l(),Av=a("li"),_ge=a("strong"),vKo=o("convnext"),TKo=o(" \u2014 "),Dq=a("a"),FKo=o("TFConvNextModel"),CKo=o(" (ConvNext model)"),MKo=l(),Lv=a("li"),uge=a("strong"),EKo=o("ctrl"),yKo=o(" \u2014 "),Nq=a("a"),wKo=o("TFCTRLModel"),AKo=o(" (CTRL model)"),LKo=l(),Bv=a("li"),bge=a("strong"),BKo=o("deberta"),xKo=o(" \u2014 "),jq=a("a"),kKo=o("TFDebertaModel"),RKo=o(" (DeBERTa model)"),SKo=l(),xv=a("li"),vge=a("strong"),PKo=o("deberta-v2"),$Ko=o(" \u2014 "),qq=a("a"),IKo=o("TFDebertaV2Model"),DKo=o(" (DeBERTa-v2 model)"),NKo=l(),kv=a("li"),Tge=a("strong"),jKo=o("distilbert"),qKo=o(" \u2014 "),Gq=a("a"),GKo=o("TFDistilBertModel"),OKo=o(" (DistilBERT model)"),XKo=l(),Rv=a("li"),Fge=a("strong"),VKo=o("dpr"),zKo=o(" \u2014 "),Oq=a("a"),WKo=o("TFDPRQuestionEncoder"),QKo=o(" (DPR model)"),HKo=l(),Sv=a("li"),Cge=a("strong"),UKo=o("electra"),JKo=o(" \u2014 "),Xq=a("a"),YKo=o("TFElectraModel"),KKo=o(" (ELECTRA model)"),ZKo=l(),Pv=a("li"),Mge=a("strong"),eZo=o("flaubert"),oZo=o(" \u2014 "),Vq=a("a"),rZo=o("TFFlaubertModel"),tZo=o(" (FlauBERT model)"),aZo=l(),Gs=a("li"),Ege=a("strong"),nZo=o("funnel"),sZo=o(" \u2014 "),zq=a("a"),lZo=o("TFFunnelModel"),iZo=o(" or "),Wq=a("a"),dZo=o("TFFunnelBaseModel"),cZo=o(" (Funnel Transformer model)"),fZo=l(),$v=a("li"),yge=a("strong"),mZo=o("gpt2"),gZo=o(" \u2014 "),Qq=a("a"),hZo=o("TFGPT2Model"),pZo=o(" (OpenAI GPT-2 model)"),_Zo=l(),Iv=a("li"),wge=a("strong"),uZo=o("hubert"),bZo=o(" \u2014 "),Hq=a("a"),vZo=o("TFHubertModel"),TZo=o(" (Hubert model)"),FZo=l(),Dv=a("li"),Age=a("strong"),CZo=o("layoutlm"),MZo=o(" \u2014 "),Uq=a("a"),EZo=o("TFLayoutLMModel"),yZo=o(" (LayoutLM model)"),wZo=l(),Nv=a("li"),Lge=a("strong"),AZo=o("led"),LZo=o(" \u2014 "),Jq=a("a"),BZo=o("TFLEDModel"),xZo=o(" (LED model)"),kZo=l(),jv=a("li"),Bge=a("strong"),RZo=o("longformer"),SZo=o(" \u2014 "),Yq=a("a"),PZo=o("TFLongformerModel"),$Zo=o(" (Longformer model)"),IZo=l(),qv=a("li"),xge=a("strong"),DZo=o("lxmert"),NZo=o(" \u2014 "),Kq=a("a"),jZo=o("TFLxmertModel"),qZo=o(" (LXMERT model)"),GZo=l(),Gv=a("li"),kge=a("strong"),OZo=o("marian"),XZo=o(" \u2014 "),Zq=a("a"),VZo=o("TFMarianModel"),zZo=o(" (Marian model)"),WZo=l(),Ov=a("li"),Rge=a("strong"),QZo=o("mbart"),HZo=o(" \u2014 "),eG=a("a"),UZo=o("TFMBartModel"),JZo=o(" (mBART model)"),YZo=l(),Xv=a("li"),Sge=a("strong"),KZo=o("mobilebert"),ZZo=o(" \u2014 "),oG=a("a"),eer=o("TFMobileBertModel"),oer=o(" (MobileBERT model)"),rer=l(),Vv=a("li"),Pge=a("strong"),ter=o("mpnet"),aer=o(" \u2014 "),rG=a("a"),ner=o("TFMPNetModel"),ser=o(" (MPNet model)"),ler=l(),zv=a("li"),$ge=a("strong"),ier=o("mt5"),der=o(" \u2014 "),tG=a("a"),cer=o("TFMT5Model"),fer=o(" (mT5 model)"),mer=l(),Wv=a("li"),Ige=a("strong"),ger=o("openai-gpt"),her=o(" \u2014 "),aG=a("a"),per=o("TFOpenAIGPTModel"),_er=o(" (OpenAI GPT model)"),uer=l(),Qv=a("li"),Dge=a("strong"),ber=o("pegasus"),ver=o(" \u2014 "),nG=a("a"),Ter=o("TFPegasusModel"),Fer=o(" (Pegasus model)"),Cer=l(),Hv=a("li"),Nge=a("strong"),Mer=o("rembert"),Eer=o(" \u2014 "),sG=a("a"),yer=o("TFRemBertModel"),wer=o(" (RemBERT model)"),Aer=l(),Uv=a("li"),jge=a("strong"),Ler=o("roberta"),Ber=o(" \u2014 "),lG=a("a"),xer=o("TFRobertaModel"),ker=o(" (RoBERTa model)"),Rer=l(),Jv=a("li"),qge=a("strong"),Ser=o("roformer"),Per=o(" \u2014 "),iG=a("a"),$er=o("TFRoFormerModel"),Ier=o(" (RoFormer model)"),Der=l(),Yv=a("li"),Gge=a("strong"),Ner=o("speech_to_text"),jer=o(" \u2014 "),dG=a("a"),qer=o("TFSpeech2TextModel"),Ger=o(" (Speech2Text model)"),Oer=l(),Kv=a("li"),Oge=a("strong"),Xer=o("t5"),Ver=o(" \u2014 "),cG=a("a"),zer=o("TFT5Model"),Wer=o(" (T5 model)"),Qer=l(),Zv=a("li"),Xge=a("strong"),Her=o("tapas"),Uer=o(" \u2014 "),fG=a("a"),Jer=o("TFTapasModel"),Yer=o(" (TAPAS model)"),Ker=l(),eT=a("li"),Vge=a("strong"),Zer=o("transfo-xl"),eor=o(" \u2014 "),mG=a("a"),oor=o("TFTransfoXLModel"),ror=o(" (Transformer-XL model)"),tor=l(),oT=a("li"),zge=a("strong"),aor=o("vit"),nor=o(" \u2014 "),gG=a("a"),sor=o("TFViTModel"),lor=o(" (ViT model)"),ior=l(),rT=a("li"),Wge=a("strong"),dor=o("wav2vec2"),cor=o(" \u2014 "),hG=a("a"),mor=o("TFWav2Vec2Model"),gor=o(" (Wav2Vec2 model)"),hor=l(),tT=a("li"),Qge=a("strong"),por=o("xlm"),_or=o(" \u2014 "),pG=a("a"),uor=o("TFXLMModel"),bor=o(" (XLM model)"),vor=l(),aT=a("li"),Hge=a("strong"),Tor=o("xlm-roberta"),For=o(" \u2014 "),_G=a("a"),Cor=o("TFXLMRobertaModel"),Mor=o(" (XLM-RoBERTa model)"),Eor=l(),nT=a("li"),Uge=a("strong"),yor=o("xlnet"),wor=o(" \u2014 "),uG=a("a"),Aor=o("TFXLNetModel"),Lor=o(" (XLNet model)"),Bor=l(),Jge=a("p"),xor=o("Examples:"),kor=l(),f(U6.$$.fragment),TRe=l(),_c=a("h2"),sT=a("a"),Yge=a("span"),f(J6.$$.fragment),Ror=l(),Kge=a("span"),Sor=o("TFAutoModelForPreTraining"),FRe=l(),Tr=a("div"),f(Y6.$$.fragment),Por=l(),uc=a("p"),$or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zge=a("code"),Ior=o("from_pretrained()"),Dor=o("class method or the "),ehe=a("code"),Nor=o("from_config()"),jor=o(`class
method.`),qor=l(),K6=a("p"),Gor=o("This class cannot be instantiated directly using "),ohe=a("code"),Oor=o("__init__()"),Xor=o(" (throws an error)."),Vor=l(),ht=a("div"),f(Z6.$$.fragment),zor=l(),rhe=a("p"),Wor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qor=l(),bc=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ahe=a("code"),Yor=o("from_pretrained()"),Kor=o("to load the model weights."),Zor=l(),nhe=a("p"),err=o("Examples:"),orr=l(),f(eA.$$.fragment),rrr=l(),po=a("div"),f(oA.$$.fragment),trr=l(),she=a("p"),arr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nrr=l(),un=a("p"),srr=o("The model class to instantiate is selected based on the "),lhe=a("code"),lrr=o("model_type"),irr=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),frr=o("pretrained_model_name_or_path"),mrr=o(":"),grr=l(),H=a("ul"),lT=a("li"),che=a("strong"),hrr=o("albert"),prr=o(" \u2014 "),bG=a("a"),_rr=o("TFAlbertForPreTraining"),urr=o(" (ALBERT model)"),brr=l(),iT=a("li"),fhe=a("strong"),vrr=o("bart"),Trr=o(" \u2014 "),vG=a("a"),Frr=o("TFBartForConditionalGeneration"),Crr=o(" (BART model)"),Mrr=l(),dT=a("li"),mhe=a("strong"),Err=o("bert"),yrr=o(" \u2014 "),TG=a("a"),wrr=o("TFBertForPreTraining"),Arr=o(" (BERT model)"),Lrr=l(),cT=a("li"),ghe=a("strong"),Brr=o("camembert"),xrr=o(" \u2014 "),FG=a("a"),krr=o("TFCamembertForMaskedLM"),Rrr=o(" (CamemBERT model)"),Srr=l(),fT=a("li"),hhe=a("strong"),Prr=o("ctrl"),$rr=o(" \u2014 "),CG=a("a"),Irr=o("TFCTRLLMHeadModel"),Drr=o(" (CTRL model)"),Nrr=l(),mT=a("li"),phe=a("strong"),jrr=o("distilbert"),qrr=o(" \u2014 "),MG=a("a"),Grr=o("TFDistilBertForMaskedLM"),Orr=o(" (DistilBERT model)"),Xrr=l(),gT=a("li"),_he=a("strong"),Vrr=o("electra"),zrr=o(" \u2014 "),EG=a("a"),Wrr=o("TFElectraForPreTraining"),Qrr=o(" (ELECTRA model)"),Hrr=l(),hT=a("li"),uhe=a("strong"),Urr=o("flaubert"),Jrr=o(" \u2014 "),yG=a("a"),Yrr=o("TFFlaubertWithLMHeadModel"),Krr=o(" (FlauBERT model)"),Zrr=l(),pT=a("li"),bhe=a("strong"),etr=o("funnel"),otr=o(" \u2014 "),wG=a("a"),rtr=o("TFFunnelForPreTraining"),ttr=o(" (Funnel Transformer model)"),atr=l(),_T=a("li"),vhe=a("strong"),ntr=o("gpt2"),str=o(" \u2014 "),AG=a("a"),ltr=o("TFGPT2LMHeadModel"),itr=o(" (OpenAI GPT-2 model)"),dtr=l(),uT=a("li"),The=a("strong"),ctr=o("layoutlm"),ftr=o(" \u2014 "),LG=a("a"),mtr=o("TFLayoutLMForMaskedLM"),gtr=o(" (LayoutLM model)"),htr=l(),bT=a("li"),Fhe=a("strong"),ptr=o("lxmert"),_tr=o(" \u2014 "),BG=a("a"),utr=o("TFLxmertForPreTraining"),btr=o(" (LXMERT model)"),vtr=l(),vT=a("li"),Che=a("strong"),Ttr=o("mobilebert"),Ftr=o(" \u2014 "),xG=a("a"),Ctr=o("TFMobileBertForPreTraining"),Mtr=o(" (MobileBERT model)"),Etr=l(),TT=a("li"),Mhe=a("strong"),ytr=o("mpnet"),wtr=o(" \u2014 "),kG=a("a"),Atr=o("TFMPNetForMaskedLM"),Ltr=o(" (MPNet model)"),Btr=l(),FT=a("li"),Ehe=a("strong"),xtr=o("openai-gpt"),ktr=o(" \u2014 "),RG=a("a"),Rtr=o("TFOpenAIGPTLMHeadModel"),Str=o(" (OpenAI GPT model)"),Ptr=l(),CT=a("li"),yhe=a("strong"),$tr=o("roberta"),Itr=o(" \u2014 "),SG=a("a"),Dtr=o("TFRobertaForMaskedLM"),Ntr=o(" (RoBERTa model)"),jtr=l(),MT=a("li"),whe=a("strong"),qtr=o("t5"),Gtr=o(" \u2014 "),PG=a("a"),Otr=o("TFT5ForConditionalGeneration"),Xtr=o(" (T5 model)"),Vtr=l(),ET=a("li"),Ahe=a("strong"),ztr=o("tapas"),Wtr=o(" \u2014 "),$G=a("a"),Qtr=o("TFTapasForMaskedLM"),Htr=o(" (TAPAS model)"),Utr=l(),yT=a("li"),Lhe=a("strong"),Jtr=o("transfo-xl"),Ytr=o(" \u2014 "),IG=a("a"),Ktr=o("TFTransfoXLLMHeadModel"),Ztr=o(" (Transformer-XL model)"),ear=l(),wT=a("li"),Bhe=a("strong"),oar=o("xlm"),rar=o(" \u2014 "),DG=a("a"),tar=o("TFXLMWithLMHeadModel"),aar=o(" (XLM model)"),nar=l(),AT=a("li"),xhe=a("strong"),sar=o("xlm-roberta"),lar=o(" \u2014 "),NG=a("a"),iar=o("TFXLMRobertaForMaskedLM"),dar=o(" (XLM-RoBERTa model)"),car=l(),LT=a("li"),khe=a("strong"),far=o("xlnet"),mar=o(" \u2014 "),jG=a("a"),gar=o("TFXLNetLMHeadModel"),har=o(" (XLNet model)"),par=l(),Rhe=a("p"),_ar=o("Examples:"),uar=l(),f(rA.$$.fragment),CRe=l(),vc=a("h2"),BT=a("a"),She=a("span"),f(tA.$$.fragment),bar=l(),Phe=a("span"),Tar=o("TFAutoModelForCausalLM"),MRe=l(),Fr=a("div"),f(aA.$$.fragment),Far=l(),Tc=a("p"),Car=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$he=a("code"),Mar=o("from_pretrained()"),Ear=o("class method or the "),Ihe=a("code"),yar=o("from_config()"),war=o(`class
method.`),Aar=l(),nA=a("p"),Lar=o("This class cannot be instantiated directly using "),Dhe=a("code"),Bar=o("__init__()"),xar=o(" (throws an error)."),kar=l(),pt=a("div"),f(sA.$$.fragment),Rar=l(),Nhe=a("p"),Sar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Par=l(),Fc=a("p"),$ar=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),Iar=o("not"),Dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qhe=a("code"),Nar=o("from_pretrained()"),jar=o("to load the model weights."),qar=l(),Ghe=a("p"),Gar=o("Examples:"),Oar=l(),f(lA.$$.fragment),Xar=l(),_o=a("div"),f(iA.$$.fragment),Var=l(),Ohe=a("p"),zar=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),War=l(),bn=a("p"),Qar=o("The model class to instantiate is selected based on the "),Xhe=a("code"),Har=o("model_type"),Uar=o(` property of the config object (either
passed as an argument or loaded from `),Vhe=a("code"),Jar=o("pretrained_model_name_or_path"),Yar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),Kar=o("pretrained_model_name_or_path"),Zar=o(":"),enr=l(),ge=a("ul"),xT=a("li"),Whe=a("strong"),onr=o("bert"),rnr=o(" \u2014 "),qG=a("a"),tnr=o("TFBertLMHeadModel"),anr=o(" (BERT model)"),nnr=l(),kT=a("li"),Qhe=a("strong"),snr=o("camembert"),lnr=o(" \u2014 "),GG=a("a"),inr=o("TFCamembertForCausalLM"),dnr=o(" (CamemBERT model)"),cnr=l(),RT=a("li"),Hhe=a("strong"),fnr=o("ctrl"),mnr=o(" \u2014 "),OG=a("a"),gnr=o("TFCTRLLMHeadModel"),hnr=o(" (CTRL model)"),pnr=l(),ST=a("li"),Uhe=a("strong"),_nr=o("gpt2"),unr=o(" \u2014 "),XG=a("a"),bnr=o("TFGPT2LMHeadModel"),vnr=o(" (OpenAI GPT-2 model)"),Tnr=l(),PT=a("li"),Jhe=a("strong"),Fnr=o("openai-gpt"),Cnr=o(" \u2014 "),VG=a("a"),Mnr=o("TFOpenAIGPTLMHeadModel"),Enr=o(" (OpenAI GPT model)"),ynr=l(),$T=a("li"),Yhe=a("strong"),wnr=o("rembert"),Anr=o(" \u2014 "),zG=a("a"),Lnr=o("TFRemBertForCausalLM"),Bnr=o(" (RemBERT model)"),xnr=l(),IT=a("li"),Khe=a("strong"),knr=o("roberta"),Rnr=o(" \u2014 "),WG=a("a"),Snr=o("TFRobertaForCausalLM"),Pnr=o(" (RoBERTa model)"),$nr=l(),DT=a("li"),Zhe=a("strong"),Inr=o("roformer"),Dnr=o(" \u2014 "),QG=a("a"),Nnr=o("TFRoFormerForCausalLM"),jnr=o(" (RoFormer model)"),qnr=l(),NT=a("li"),epe=a("strong"),Gnr=o("transfo-xl"),Onr=o(" \u2014 "),HG=a("a"),Xnr=o("TFTransfoXLLMHeadModel"),Vnr=o(" (Transformer-XL model)"),znr=l(),jT=a("li"),ope=a("strong"),Wnr=o("xlm"),Qnr=o(" \u2014 "),UG=a("a"),Hnr=o("TFXLMWithLMHeadModel"),Unr=o(" (XLM model)"),Jnr=l(),qT=a("li"),rpe=a("strong"),Ynr=o("xlnet"),Knr=o(" \u2014 "),JG=a("a"),Znr=o("TFXLNetLMHeadModel"),esr=o(" (XLNet model)"),osr=l(),tpe=a("p"),rsr=o("Examples:"),tsr=l(),f(dA.$$.fragment),ERe=l(),Cc=a("h2"),GT=a("a"),ape=a("span"),f(cA.$$.fragment),asr=l(),npe=a("span"),nsr=o("TFAutoModelForImageClassification"),yRe=l(),Cr=a("div"),f(fA.$$.fragment),ssr=l(),Mc=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),spe=a("code"),isr=o("from_pretrained()"),dsr=o("class method or the "),lpe=a("code"),csr=o("from_config()"),fsr=o(`class
method.`),msr=l(),mA=a("p"),gsr=o("This class cannot be instantiated directly using "),ipe=a("code"),hsr=o("__init__()"),psr=o(" (throws an error)."),_sr=l(),_t=a("div"),f(gA.$$.fragment),usr=l(),dpe=a("p"),bsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vsr=l(),Ec=a("p"),Tsr=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),Fsr=o("not"),Csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fpe=a("code"),Msr=o("from_pretrained()"),Esr=o("to load the model weights."),ysr=l(),mpe=a("p"),wsr=o("Examples:"),Asr=l(),f(hA.$$.fragment),Lsr=l(),uo=a("div"),f(pA.$$.fragment),Bsr=l(),gpe=a("p"),xsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ksr=l(),vn=a("p"),Rsr=o("The model class to instantiate is selected based on the "),hpe=a("code"),Ssr=o("model_type"),Psr=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),$sr=o("pretrained_model_name_or_path"),Isr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),Dsr=o("pretrained_model_name_or_path"),Nsr=o(":"),jsr=l(),_A=a("ul"),OT=a("li"),upe=a("strong"),qsr=o("convnext"),Gsr=o(" \u2014 "),YG=a("a"),Osr=o("TFConvNextForImageClassification"),Xsr=o(" (ConvNext model)"),Vsr=l(),XT=a("li"),bpe=a("strong"),zsr=o("vit"),Wsr=o(" \u2014 "),KG=a("a"),Qsr=o("TFViTForImageClassification"),Hsr=o(" (ViT model)"),Usr=l(),vpe=a("p"),Jsr=o("Examples:"),Ysr=l(),f(uA.$$.fragment),wRe=l(),yc=a("h2"),VT=a("a"),Tpe=a("span"),f(bA.$$.fragment),Ksr=l(),Fpe=a("span"),Zsr=o("TFAutoModelForMaskedLM"),ARe=l(),Mr=a("div"),f(vA.$$.fragment),elr=l(),wc=a("p"),olr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cpe=a("code"),rlr=o("from_pretrained()"),tlr=o("class method or the "),Mpe=a("code"),alr=o("from_config()"),nlr=o(`class
method.`),slr=l(),TA=a("p"),llr=o("This class cannot be instantiated directly using "),Epe=a("code"),ilr=o("__init__()"),dlr=o(" (throws an error)."),clr=l(),ut=a("div"),f(FA.$$.fragment),flr=l(),ype=a("p"),mlr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),glr=l(),Ac=a("p"),hlr=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),plr=o("not"),_lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ape=a("code"),ulr=o("from_pretrained()"),blr=o("to load the model weights."),vlr=l(),Lpe=a("p"),Tlr=o("Examples:"),Flr=l(),f(CA.$$.fragment),Clr=l(),bo=a("div"),f(MA.$$.fragment),Mlr=l(),Bpe=a("p"),Elr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ylr=l(),Tn=a("p"),wlr=o("The model class to instantiate is selected based on the "),xpe=a("code"),Alr=o("model_type"),Llr=o(` property of the config object (either
passed as an argument or loaded from `),kpe=a("code"),Blr=o("pretrained_model_name_or_path"),xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),klr=o("pretrained_model_name_or_path"),Rlr=o(":"),Slr=l(),J=a("ul"),zT=a("li"),Spe=a("strong"),Plr=o("albert"),$lr=o(" \u2014 "),ZG=a("a"),Ilr=o("TFAlbertForMaskedLM"),Dlr=o(" (ALBERT model)"),Nlr=l(),WT=a("li"),Ppe=a("strong"),jlr=o("bert"),qlr=o(" \u2014 "),eO=a("a"),Glr=o("TFBertForMaskedLM"),Olr=o(" (BERT model)"),Xlr=l(),QT=a("li"),$pe=a("strong"),Vlr=o("camembert"),zlr=o(" \u2014 "),oO=a("a"),Wlr=o("TFCamembertForMaskedLM"),Qlr=o(" (CamemBERT model)"),Hlr=l(),HT=a("li"),Ipe=a("strong"),Ulr=o("convbert"),Jlr=o(" \u2014 "),rO=a("a"),Ylr=o("TFConvBertForMaskedLM"),Klr=o(" (ConvBERT model)"),Zlr=l(),UT=a("li"),Dpe=a("strong"),eir=o("deberta"),oir=o(" \u2014 "),tO=a("a"),rir=o("TFDebertaForMaskedLM"),tir=o(" (DeBERTa model)"),air=l(),JT=a("li"),Npe=a("strong"),nir=o("deberta-v2"),sir=o(" \u2014 "),aO=a("a"),lir=o("TFDebertaV2ForMaskedLM"),iir=o(" (DeBERTa-v2 model)"),dir=l(),YT=a("li"),jpe=a("strong"),cir=o("distilbert"),fir=o(" \u2014 "),nO=a("a"),mir=o("TFDistilBertForMaskedLM"),gir=o(" (DistilBERT model)"),hir=l(),KT=a("li"),qpe=a("strong"),pir=o("electra"),_ir=o(" \u2014 "),sO=a("a"),uir=o("TFElectraForMaskedLM"),bir=o(" (ELECTRA model)"),vir=l(),ZT=a("li"),Gpe=a("strong"),Tir=o("flaubert"),Fir=o(" \u2014 "),lO=a("a"),Cir=o("TFFlaubertWithLMHeadModel"),Mir=o(" (FlauBERT model)"),Eir=l(),eF=a("li"),Ope=a("strong"),yir=o("funnel"),wir=o(" \u2014 "),iO=a("a"),Air=o("TFFunnelForMaskedLM"),Lir=o(" (Funnel Transformer model)"),Bir=l(),oF=a("li"),Xpe=a("strong"),xir=o("layoutlm"),kir=o(" \u2014 "),dO=a("a"),Rir=o("TFLayoutLMForMaskedLM"),Sir=o(" (LayoutLM model)"),Pir=l(),rF=a("li"),Vpe=a("strong"),$ir=o("longformer"),Iir=o(" \u2014 "),cO=a("a"),Dir=o("TFLongformerForMaskedLM"),Nir=o(" (Longformer model)"),jir=l(),tF=a("li"),zpe=a("strong"),qir=o("mobilebert"),Gir=o(" \u2014 "),fO=a("a"),Oir=o("TFMobileBertForMaskedLM"),Xir=o(" (MobileBERT model)"),Vir=l(),aF=a("li"),Wpe=a("strong"),zir=o("mpnet"),Wir=o(" \u2014 "),mO=a("a"),Qir=o("TFMPNetForMaskedLM"),Hir=o(" (MPNet model)"),Uir=l(),nF=a("li"),Qpe=a("strong"),Jir=o("rembert"),Yir=o(" \u2014 "),gO=a("a"),Kir=o("TFRemBertForMaskedLM"),Zir=o(" (RemBERT model)"),edr=l(),sF=a("li"),Hpe=a("strong"),odr=o("roberta"),rdr=o(" \u2014 "),hO=a("a"),tdr=o("TFRobertaForMaskedLM"),adr=o(" (RoBERTa model)"),ndr=l(),lF=a("li"),Upe=a("strong"),sdr=o("roformer"),ldr=o(" \u2014 "),pO=a("a"),idr=o("TFRoFormerForMaskedLM"),ddr=o(" (RoFormer model)"),cdr=l(),iF=a("li"),Jpe=a("strong"),fdr=o("tapas"),mdr=o(" \u2014 "),_O=a("a"),gdr=o("TFTapasForMaskedLM"),hdr=o(" (TAPAS model)"),pdr=l(),dF=a("li"),Ype=a("strong"),_dr=o("xlm"),udr=o(" \u2014 "),uO=a("a"),bdr=o("TFXLMWithLMHeadModel"),vdr=o(" (XLM model)"),Tdr=l(),cF=a("li"),Kpe=a("strong"),Fdr=o("xlm-roberta"),Cdr=o(" \u2014 "),bO=a("a"),Mdr=o("TFXLMRobertaForMaskedLM"),Edr=o(" (XLM-RoBERTa model)"),ydr=l(),Zpe=a("p"),wdr=o("Examples:"),Adr=l(),f(EA.$$.fragment),LRe=l(),Lc=a("h2"),fF=a("a"),e_e=a("span"),f(yA.$$.fragment),Ldr=l(),o_e=a("span"),Bdr=o("TFAutoModelForSeq2SeqLM"),BRe=l(),Er=a("div"),f(wA.$$.fragment),xdr=l(),Bc=a("p"),kdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),r_e=a("code"),Rdr=o("from_pretrained()"),Sdr=o("class method or the "),t_e=a("code"),Pdr=o("from_config()"),$dr=o(`class
method.`),Idr=l(),AA=a("p"),Ddr=o("This class cannot be instantiated directly using "),a_e=a("code"),Ndr=o("__init__()"),jdr=o(" (throws an error)."),qdr=l(),bt=a("div"),f(LA.$$.fragment),Gdr=l(),n_e=a("p"),Odr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xdr=l(),xc=a("p"),Vdr=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),zdr=o("not"),Wdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l_e=a("code"),Qdr=o("from_pretrained()"),Hdr=o("to load the model weights."),Udr=l(),i_e=a("p"),Jdr=o("Examples:"),Ydr=l(),f(BA.$$.fragment),Kdr=l(),vo=a("div"),f(xA.$$.fragment),Zdr=l(),d_e=a("p"),ecr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ocr=l(),Fn=a("p"),rcr=o("The model class to instantiate is selected based on the "),c_e=a("code"),tcr=o("model_type"),acr=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(":"),dcr=l(),_e=a("ul"),mF=a("li"),g_e=a("strong"),ccr=o("bart"),fcr=o(" \u2014 "),vO=a("a"),mcr=o("TFBartForConditionalGeneration"),gcr=o(" (BART model)"),hcr=l(),gF=a("li"),h_e=a("strong"),pcr=o("blenderbot"),_cr=o(" \u2014 "),TO=a("a"),ucr=o("TFBlenderbotForConditionalGeneration"),bcr=o(" (Blenderbot model)"),vcr=l(),hF=a("li"),p_e=a("strong"),Tcr=o("blenderbot-small"),Fcr=o(" \u2014 "),FO=a("a"),Ccr=o("TFBlenderbotSmallForConditionalGeneration"),Mcr=o(" (BlenderbotSmall model)"),Ecr=l(),pF=a("li"),__e=a("strong"),ycr=o("encoder-decoder"),wcr=o(" \u2014 "),CO=a("a"),Acr=o("TFEncoderDecoderModel"),Lcr=o(" (Encoder decoder model)"),Bcr=l(),_F=a("li"),u_e=a("strong"),xcr=o("led"),kcr=o(" \u2014 "),MO=a("a"),Rcr=o("TFLEDForConditionalGeneration"),Scr=o(" (LED model)"),Pcr=l(),uF=a("li"),b_e=a("strong"),$cr=o("marian"),Icr=o(" \u2014 "),EO=a("a"),Dcr=o("TFMarianMTModel"),Ncr=o(" (Marian model)"),jcr=l(),bF=a("li"),v_e=a("strong"),qcr=o("mbart"),Gcr=o(" \u2014 "),yO=a("a"),Ocr=o("TFMBartForConditionalGeneration"),Xcr=o(" (mBART model)"),Vcr=l(),vF=a("li"),T_e=a("strong"),zcr=o("mt5"),Wcr=o(" \u2014 "),wO=a("a"),Qcr=o("TFMT5ForConditionalGeneration"),Hcr=o(" (mT5 model)"),Ucr=l(),TF=a("li"),F_e=a("strong"),Jcr=o("pegasus"),Ycr=o(" \u2014 "),AO=a("a"),Kcr=o("TFPegasusForConditionalGeneration"),Zcr=o(" (Pegasus model)"),efr=l(),FF=a("li"),C_e=a("strong"),ofr=o("t5"),rfr=o(" \u2014 "),LO=a("a"),tfr=o("TFT5ForConditionalGeneration"),afr=o(" (T5 model)"),nfr=l(),M_e=a("p"),sfr=o("Examples:"),lfr=l(),f(kA.$$.fragment),xRe=l(),kc=a("h2"),CF=a("a"),E_e=a("span"),f(RA.$$.fragment),ifr=l(),y_e=a("span"),dfr=o("TFAutoModelForSequenceClassification"),kRe=l(),yr=a("div"),f(SA.$$.fragment),cfr=l(),Rc=a("p"),ffr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),w_e=a("code"),mfr=o("from_pretrained()"),gfr=o("class method or the "),A_e=a("code"),hfr=o("from_config()"),pfr=o(`class
method.`),_fr=l(),PA=a("p"),ufr=o("This class cannot be instantiated directly using "),L_e=a("code"),bfr=o("__init__()"),vfr=o(" (throws an error)."),Tfr=l(),vt=a("div"),f($A.$$.fragment),Ffr=l(),B_e=a("p"),Cfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Mfr=l(),Sc=a("p"),Efr=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),yfr=o("not"),wfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=a("code"),Afr=o("from_pretrained()"),Lfr=o("to load the model weights."),Bfr=l(),R_e=a("p"),xfr=o("Examples:"),kfr=l(),f(IA.$$.fragment),Rfr=l(),To=a("div"),f(DA.$$.fragment),Sfr=l(),S_e=a("p"),Pfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$fr=l(),Cn=a("p"),Ifr=o("The model class to instantiate is selected based on the "),P_e=a("code"),Dfr=o("model_type"),Nfr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),jfr=o("pretrained_model_name_or_path"),qfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(":"),Xfr=l(),V=a("ul"),MF=a("li"),D_e=a("strong"),Vfr=o("albert"),zfr=o(" \u2014 "),BO=a("a"),Wfr=o("TFAlbertForSequenceClassification"),Qfr=o(" (ALBERT model)"),Hfr=l(),EF=a("li"),N_e=a("strong"),Ufr=o("bert"),Jfr=o(" \u2014 "),xO=a("a"),Yfr=o("TFBertForSequenceClassification"),Kfr=o(" (BERT model)"),Zfr=l(),yF=a("li"),j_e=a("strong"),emr=o("camembert"),omr=o(" \u2014 "),kO=a("a"),rmr=o("TFCamembertForSequenceClassification"),tmr=o(" (CamemBERT model)"),amr=l(),wF=a("li"),q_e=a("strong"),nmr=o("convbert"),smr=o(" \u2014 "),RO=a("a"),lmr=o("TFConvBertForSequenceClassification"),imr=o(" (ConvBERT model)"),dmr=l(),AF=a("li"),G_e=a("strong"),cmr=o("ctrl"),fmr=o(" \u2014 "),SO=a("a"),mmr=o("TFCTRLForSequenceClassification"),gmr=o(" (CTRL model)"),hmr=l(),LF=a("li"),O_e=a("strong"),pmr=o("deberta"),_mr=o(" \u2014 "),PO=a("a"),umr=o("TFDebertaForSequenceClassification"),bmr=o(" (DeBERTa model)"),vmr=l(),BF=a("li"),X_e=a("strong"),Tmr=o("deberta-v2"),Fmr=o(" \u2014 "),$O=a("a"),Cmr=o("TFDebertaV2ForSequenceClassification"),Mmr=o(" (DeBERTa-v2 model)"),Emr=l(),xF=a("li"),V_e=a("strong"),ymr=o("distilbert"),wmr=o(" \u2014 "),IO=a("a"),Amr=o("TFDistilBertForSequenceClassification"),Lmr=o(" (DistilBERT model)"),Bmr=l(),kF=a("li"),z_e=a("strong"),xmr=o("electra"),kmr=o(" \u2014 "),DO=a("a"),Rmr=o("TFElectraForSequenceClassification"),Smr=o(" (ELECTRA model)"),Pmr=l(),RF=a("li"),W_e=a("strong"),$mr=o("flaubert"),Imr=o(" \u2014 "),NO=a("a"),Dmr=o("TFFlaubertForSequenceClassification"),Nmr=o(" (FlauBERT model)"),jmr=l(),SF=a("li"),Q_e=a("strong"),qmr=o("funnel"),Gmr=o(" \u2014 "),jO=a("a"),Omr=o("TFFunnelForSequenceClassification"),Xmr=o(" (Funnel Transformer model)"),Vmr=l(),PF=a("li"),H_e=a("strong"),zmr=o("gpt2"),Wmr=o(" \u2014 "),qO=a("a"),Qmr=o("TFGPT2ForSequenceClassification"),Hmr=o(" (OpenAI GPT-2 model)"),Umr=l(),$F=a("li"),U_e=a("strong"),Jmr=o("layoutlm"),Ymr=o(" \u2014 "),GO=a("a"),Kmr=o("TFLayoutLMForSequenceClassification"),Zmr=o(" (LayoutLM model)"),egr=l(),IF=a("li"),J_e=a("strong"),ogr=o("longformer"),rgr=o(" \u2014 "),OO=a("a"),tgr=o("TFLongformerForSequenceClassification"),agr=o(" (Longformer model)"),ngr=l(),DF=a("li"),Y_e=a("strong"),sgr=o("mobilebert"),lgr=o(" \u2014 "),XO=a("a"),igr=o("TFMobileBertForSequenceClassification"),dgr=o(" (MobileBERT model)"),cgr=l(),NF=a("li"),K_e=a("strong"),fgr=o("mpnet"),mgr=o(" \u2014 "),VO=a("a"),ggr=o("TFMPNetForSequenceClassification"),hgr=o(" (MPNet model)"),pgr=l(),jF=a("li"),Z_e=a("strong"),_gr=o("openai-gpt"),ugr=o(" \u2014 "),zO=a("a"),bgr=o("TFOpenAIGPTForSequenceClassification"),vgr=o(" (OpenAI GPT model)"),Tgr=l(),qF=a("li"),eue=a("strong"),Fgr=o("rembert"),Cgr=o(" \u2014 "),WO=a("a"),Mgr=o("TFRemBertForSequenceClassification"),Egr=o(" (RemBERT model)"),ygr=l(),GF=a("li"),oue=a("strong"),wgr=o("roberta"),Agr=o(" \u2014 "),QO=a("a"),Lgr=o("TFRobertaForSequenceClassification"),Bgr=o(" (RoBERTa model)"),xgr=l(),OF=a("li"),rue=a("strong"),kgr=o("roformer"),Rgr=o(" \u2014 "),HO=a("a"),Sgr=o("TFRoFormerForSequenceClassification"),Pgr=o(" (RoFormer model)"),$gr=l(),XF=a("li"),tue=a("strong"),Igr=o("tapas"),Dgr=o(" \u2014 "),UO=a("a"),Ngr=o("TFTapasForSequenceClassification"),jgr=o(" (TAPAS model)"),qgr=l(),VF=a("li"),aue=a("strong"),Ggr=o("transfo-xl"),Ogr=o(" \u2014 "),JO=a("a"),Xgr=o("TFTransfoXLForSequenceClassification"),Vgr=o(" (Transformer-XL model)"),zgr=l(),zF=a("li"),nue=a("strong"),Wgr=o("xlm"),Qgr=o(" \u2014 "),YO=a("a"),Hgr=o("TFXLMForSequenceClassification"),Ugr=o(" (XLM model)"),Jgr=l(),WF=a("li"),sue=a("strong"),Ygr=o("xlm-roberta"),Kgr=o(" \u2014 "),KO=a("a"),Zgr=o("TFXLMRobertaForSequenceClassification"),ehr=o(" (XLM-RoBERTa model)"),ohr=l(),QF=a("li"),lue=a("strong"),rhr=o("xlnet"),thr=o(" \u2014 "),ZO=a("a"),ahr=o("TFXLNetForSequenceClassification"),nhr=o(" (XLNet model)"),shr=l(),iue=a("p"),lhr=o("Examples:"),ihr=l(),f(NA.$$.fragment),RRe=l(),Pc=a("h2"),HF=a("a"),due=a("span"),f(jA.$$.fragment),dhr=l(),cue=a("span"),chr=o("TFAutoModelForMultipleChoice"),SRe=l(),wr=a("div"),f(qA.$$.fragment),fhr=l(),$c=a("p"),mhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fue=a("code"),ghr=o("from_pretrained()"),hhr=o("class method or the "),mue=a("code"),phr=o("from_config()"),_hr=o(`class
method.`),uhr=l(),GA=a("p"),bhr=o("This class cannot be instantiated directly using "),gue=a("code"),vhr=o("__init__()"),Thr=o(" (throws an error)."),Fhr=l(),Tt=a("div"),f(OA.$$.fragment),Chr=l(),hue=a("p"),Mhr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ehr=l(),Ic=a("p"),yhr=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),whr=o("not"),Ahr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ue=a("code"),Lhr=o("from_pretrained()"),Bhr=o("to load the model weights."),xhr=l(),uue=a("p"),khr=o("Examples:"),Rhr=l(),f(XA.$$.fragment),Shr=l(),Fo=a("div"),f(VA.$$.fragment),Phr=l(),bue=a("p"),$hr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ihr=l(),Mn=a("p"),Dhr=o("The model class to instantiate is selected based on the "),vue=a("code"),Nhr=o("model_type"),jhr=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),qhr=o("pretrained_model_name_or_path"),Ghr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),Ohr=o("pretrained_model_name_or_path"),Xhr=o(":"),Vhr=l(),ae=a("ul"),UF=a("li"),Cue=a("strong"),zhr=o("albert"),Whr=o(" \u2014 "),eX=a("a"),Qhr=o("TFAlbertForMultipleChoice"),Hhr=o(" (ALBERT model)"),Uhr=l(),JF=a("li"),Mue=a("strong"),Jhr=o("bert"),Yhr=o(" \u2014 "),oX=a("a"),Khr=o("TFBertForMultipleChoice"),Zhr=o(" (BERT model)"),epr=l(),YF=a("li"),Eue=a("strong"),opr=o("camembert"),rpr=o(" \u2014 "),rX=a("a"),tpr=o("TFCamembertForMultipleChoice"),apr=o(" (CamemBERT model)"),npr=l(),KF=a("li"),yue=a("strong"),spr=o("convbert"),lpr=o(" \u2014 "),tX=a("a"),ipr=o("TFConvBertForMultipleChoice"),dpr=o(" (ConvBERT model)"),cpr=l(),ZF=a("li"),wue=a("strong"),fpr=o("distilbert"),mpr=o(" \u2014 "),aX=a("a"),gpr=o("TFDistilBertForMultipleChoice"),hpr=o(" (DistilBERT model)"),ppr=l(),eC=a("li"),Aue=a("strong"),_pr=o("electra"),upr=o(" \u2014 "),nX=a("a"),bpr=o("TFElectraForMultipleChoice"),vpr=o(" (ELECTRA model)"),Tpr=l(),oC=a("li"),Lue=a("strong"),Fpr=o("flaubert"),Cpr=o(" \u2014 "),sX=a("a"),Mpr=o("TFFlaubertForMultipleChoice"),Epr=o(" (FlauBERT model)"),ypr=l(),rC=a("li"),Bue=a("strong"),wpr=o("funnel"),Apr=o(" \u2014 "),lX=a("a"),Lpr=o("TFFunnelForMultipleChoice"),Bpr=o(" (Funnel Transformer model)"),xpr=l(),tC=a("li"),xue=a("strong"),kpr=o("longformer"),Rpr=o(" \u2014 "),iX=a("a"),Spr=o("TFLongformerForMultipleChoice"),Ppr=o(" (Longformer model)"),$pr=l(),aC=a("li"),kue=a("strong"),Ipr=o("mobilebert"),Dpr=o(" \u2014 "),dX=a("a"),Npr=o("TFMobileBertForMultipleChoice"),jpr=o(" (MobileBERT model)"),qpr=l(),nC=a("li"),Rue=a("strong"),Gpr=o("mpnet"),Opr=o(" \u2014 "),cX=a("a"),Xpr=o("TFMPNetForMultipleChoice"),Vpr=o(" (MPNet model)"),zpr=l(),sC=a("li"),Sue=a("strong"),Wpr=o("rembert"),Qpr=o(" \u2014 "),fX=a("a"),Hpr=o("TFRemBertForMultipleChoice"),Upr=o(" (RemBERT model)"),Jpr=l(),lC=a("li"),Pue=a("strong"),Ypr=o("roberta"),Kpr=o(" \u2014 "),mX=a("a"),Zpr=o("TFRobertaForMultipleChoice"),e_r=o(" (RoBERTa model)"),o_r=l(),iC=a("li"),$ue=a("strong"),r_r=o("roformer"),t_r=o(" \u2014 "),gX=a("a"),a_r=o("TFRoFormerForMultipleChoice"),n_r=o(" (RoFormer model)"),s_r=l(),dC=a("li"),Iue=a("strong"),l_r=o("xlm"),i_r=o(" \u2014 "),hX=a("a"),d_r=o("TFXLMForMultipleChoice"),c_r=o(" (XLM model)"),f_r=l(),cC=a("li"),Due=a("strong"),m_r=o("xlm-roberta"),g_r=o(" \u2014 "),pX=a("a"),h_r=o("TFXLMRobertaForMultipleChoice"),p_r=o(" (XLM-RoBERTa model)"),__r=l(),fC=a("li"),Nue=a("strong"),u_r=o("xlnet"),b_r=o(" \u2014 "),_X=a("a"),v_r=o("TFXLNetForMultipleChoice"),T_r=o(" (XLNet model)"),F_r=l(),jue=a("p"),C_r=o("Examples:"),M_r=l(),f(zA.$$.fragment),PRe=l(),Dc=a("h2"),mC=a("a"),que=a("span"),f(WA.$$.fragment),E_r=l(),Gue=a("span"),y_r=o("TFAutoModelForTableQuestionAnswering"),$Re=l(),Ar=a("div"),f(QA.$$.fragment),w_r=l(),Nc=a("p"),A_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Oue=a("code"),L_r=o("from_pretrained()"),B_r=o("class method or the "),Xue=a("code"),x_r=o("from_config()"),k_r=o(`class
method.`),R_r=l(),HA=a("p"),S_r=o("This class cannot be instantiated directly using "),Vue=a("code"),P_r=o("__init__()"),$_r=o(" (throws an error)."),I_r=l(),Ft=a("div"),f(UA.$$.fragment),D_r=l(),zue=a("p"),N_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),j_r=l(),jc=a("p"),q_r=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),G_r=o("not"),O_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Que=a("code"),X_r=o("from_pretrained()"),V_r=o("to load the model weights."),z_r=l(),Hue=a("p"),W_r=o("Examples:"),Q_r=l(),f(JA.$$.fragment),H_r=l(),Co=a("div"),f(YA.$$.fragment),U_r=l(),Uue=a("p"),J_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Y_r=l(),En=a("p"),K_r=o("The model class to instantiate is selected based on the "),Jue=a("code"),Z_r=o("model_type"),eur=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),our=o("pretrained_model_name_or_path"),rur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),tur=o("pretrained_model_name_or_path"),aur=o(":"),nur=l(),Zue=a("ul"),gC=a("li"),e1e=a("strong"),sur=o("tapas"),lur=o(" \u2014 "),uX=a("a"),iur=o("TFTapasForQuestionAnswering"),dur=o(" (TAPAS model)"),cur=l(),o1e=a("p"),fur=o("Examples:"),mur=l(),f(KA.$$.fragment),IRe=l(),qc=a("h2"),hC=a("a"),r1e=a("span"),f(ZA.$$.fragment),gur=l(),t1e=a("span"),hur=o("TFAutoModelForTokenClassification"),DRe=l(),Lr=a("div"),f(e0.$$.fragment),pur=l(),Gc=a("p"),_ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),a1e=a("code"),uur=o("from_pretrained()"),bur=o("class method or the "),n1e=a("code"),vur=o("from_config()"),Tur=o(`class
method.`),Fur=l(),o0=a("p"),Cur=o("This class cannot be instantiated directly using "),s1e=a("code"),Mur=o("__init__()"),Eur=o(" (throws an error)."),yur=l(),Ct=a("div"),f(r0.$$.fragment),wur=l(),l1e=a("p"),Aur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lur=l(),Oc=a("p"),Bur=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),xur=o("not"),kur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d1e=a("code"),Rur=o("from_pretrained()"),Sur=o("to load the model weights."),Pur=l(),c1e=a("p"),$ur=o("Examples:"),Iur=l(),f(t0.$$.fragment),Dur=l(),Mo=a("div"),f(a0.$$.fragment),Nur=l(),f1e=a("p"),jur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qur=l(),yn=a("p"),Gur=o("The model class to instantiate is selected based on the "),m1e=a("code"),Our=o("model_type"),Xur=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),Vur=o("pretrained_model_name_or_path"),zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),Wur=o("pretrained_model_name_or_path"),Qur=o(":"),Hur=l(),Y=a("ul"),pC=a("li"),p1e=a("strong"),Uur=o("albert"),Jur=o(" \u2014 "),bX=a("a"),Yur=o("TFAlbertForTokenClassification"),Kur=o(" (ALBERT model)"),Zur=l(),_C=a("li"),_1e=a("strong"),e1r=o("bert"),o1r=o(" \u2014 "),vX=a("a"),r1r=o("TFBertForTokenClassification"),t1r=o(" (BERT model)"),a1r=l(),uC=a("li"),u1e=a("strong"),n1r=o("camembert"),s1r=o(" \u2014 "),TX=a("a"),l1r=o("TFCamembertForTokenClassification"),i1r=o(" (CamemBERT model)"),d1r=l(),bC=a("li"),b1e=a("strong"),c1r=o("convbert"),f1r=o(" \u2014 "),FX=a("a"),m1r=o("TFConvBertForTokenClassification"),g1r=o(" (ConvBERT model)"),h1r=l(),vC=a("li"),v1e=a("strong"),p1r=o("deberta"),_1r=o(" \u2014 "),CX=a("a"),u1r=o("TFDebertaForTokenClassification"),b1r=o(" (DeBERTa model)"),v1r=l(),TC=a("li"),T1e=a("strong"),T1r=o("deberta-v2"),F1r=o(" \u2014 "),MX=a("a"),C1r=o("TFDebertaV2ForTokenClassification"),M1r=o(" (DeBERTa-v2 model)"),E1r=l(),FC=a("li"),F1e=a("strong"),y1r=o("distilbert"),w1r=o(" \u2014 "),EX=a("a"),A1r=o("TFDistilBertForTokenClassification"),L1r=o(" (DistilBERT model)"),B1r=l(),CC=a("li"),C1e=a("strong"),x1r=o("electra"),k1r=o(" \u2014 "),yX=a("a"),R1r=o("TFElectraForTokenClassification"),S1r=o(" (ELECTRA model)"),P1r=l(),MC=a("li"),M1e=a("strong"),$1r=o("flaubert"),I1r=o(" \u2014 "),wX=a("a"),D1r=o("TFFlaubertForTokenClassification"),N1r=o(" (FlauBERT model)"),j1r=l(),EC=a("li"),E1e=a("strong"),q1r=o("funnel"),G1r=o(" \u2014 "),AX=a("a"),O1r=o("TFFunnelForTokenClassification"),X1r=o(" (Funnel Transformer model)"),V1r=l(),yC=a("li"),y1e=a("strong"),z1r=o("layoutlm"),W1r=o(" \u2014 "),LX=a("a"),Q1r=o("TFLayoutLMForTokenClassification"),H1r=o(" (LayoutLM model)"),U1r=l(),wC=a("li"),w1e=a("strong"),J1r=o("longformer"),Y1r=o(" \u2014 "),BX=a("a"),K1r=o("TFLongformerForTokenClassification"),Z1r=o(" (Longformer model)"),e9r=l(),AC=a("li"),A1e=a("strong"),o9r=o("mobilebert"),r9r=o(" \u2014 "),xX=a("a"),t9r=o("TFMobileBertForTokenClassification"),a9r=o(" (MobileBERT model)"),n9r=l(),LC=a("li"),L1e=a("strong"),s9r=o("mpnet"),l9r=o(" \u2014 "),kX=a("a"),i9r=o("TFMPNetForTokenClassification"),d9r=o(" (MPNet model)"),c9r=l(),BC=a("li"),B1e=a("strong"),f9r=o("rembert"),m9r=o(" \u2014 "),RX=a("a"),g9r=o("TFRemBertForTokenClassification"),h9r=o(" (RemBERT model)"),p9r=l(),xC=a("li"),x1e=a("strong"),_9r=o("roberta"),u9r=o(" \u2014 "),SX=a("a"),b9r=o("TFRobertaForTokenClassification"),v9r=o(" (RoBERTa model)"),T9r=l(),kC=a("li"),k1e=a("strong"),F9r=o("roformer"),C9r=o(" \u2014 "),PX=a("a"),M9r=o("TFRoFormerForTokenClassification"),E9r=o(" (RoFormer model)"),y9r=l(),RC=a("li"),R1e=a("strong"),w9r=o("xlm"),A9r=o(" \u2014 "),$X=a("a"),L9r=o("TFXLMForTokenClassification"),B9r=o(" (XLM model)"),x9r=l(),SC=a("li"),S1e=a("strong"),k9r=o("xlm-roberta"),R9r=o(" \u2014 "),IX=a("a"),S9r=o("TFXLMRobertaForTokenClassification"),P9r=o(" (XLM-RoBERTa model)"),$9r=l(),PC=a("li"),P1e=a("strong"),I9r=o("xlnet"),D9r=o(" \u2014 "),DX=a("a"),N9r=o("TFXLNetForTokenClassification"),j9r=o(" (XLNet model)"),q9r=l(),$1e=a("p"),G9r=o("Examples:"),O9r=l(),f(n0.$$.fragment),NRe=l(),Xc=a("h2"),$C=a("a"),I1e=a("span"),f(s0.$$.fragment),X9r=l(),D1e=a("span"),V9r=o("TFAutoModelForQuestionAnswering"),jRe=l(),Br=a("div"),f(l0.$$.fragment),z9r=l(),Vc=a("p"),W9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),N1e=a("code"),Q9r=o("from_pretrained()"),H9r=o("class method or the "),j1e=a("code"),U9r=o("from_config()"),J9r=o(`class
method.`),Y9r=l(),i0=a("p"),K9r=o("This class cannot be instantiated directly using "),q1e=a("code"),Z9r=o("__init__()"),ebr=o(" (throws an error)."),obr=l(),Mt=a("div"),f(d0.$$.fragment),rbr=l(),G1e=a("p"),tbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),abr=l(),zc=a("p"),nbr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),sbr=o("not"),lbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X1e=a("code"),ibr=o("from_pretrained()"),dbr=o("to load the model weights."),cbr=l(),V1e=a("p"),fbr=o("Examples:"),mbr=l(),f(c0.$$.fragment),gbr=l(),Eo=a("div"),f(f0.$$.fragment),hbr=l(),z1e=a("p"),pbr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_br=l(),wn=a("p"),ubr=o("The model class to instantiate is selected based on the "),W1e=a("code"),bbr=o("model_type"),vbr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),Tbr=o("pretrained_model_name_or_path"),Fbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),Cbr=o("pretrained_model_name_or_path"),Mbr=o(":"),Ebr=l(),Z=a("ul"),IC=a("li"),U1e=a("strong"),ybr=o("albert"),wbr=o(" \u2014 "),NX=a("a"),Abr=o("TFAlbertForQuestionAnswering"),Lbr=o(" (ALBERT model)"),Bbr=l(),DC=a("li"),J1e=a("strong"),xbr=o("bert"),kbr=o(" \u2014 "),jX=a("a"),Rbr=o("TFBertForQuestionAnswering"),Sbr=o(" (BERT model)"),Pbr=l(),NC=a("li"),Y1e=a("strong"),$br=o("camembert"),Ibr=o(" \u2014 "),qX=a("a"),Dbr=o("TFCamembertForQuestionAnswering"),Nbr=o(" (CamemBERT model)"),jbr=l(),jC=a("li"),K1e=a("strong"),qbr=o("convbert"),Gbr=o(" \u2014 "),GX=a("a"),Obr=o("TFConvBertForQuestionAnswering"),Xbr=o(" (ConvBERT model)"),Vbr=l(),qC=a("li"),Z1e=a("strong"),zbr=o("deberta"),Wbr=o(" \u2014 "),OX=a("a"),Qbr=o("TFDebertaForQuestionAnswering"),Hbr=o(" (DeBERTa model)"),Ubr=l(),GC=a("li"),e9e=a("strong"),Jbr=o("deberta-v2"),Ybr=o(" \u2014 "),XX=a("a"),Kbr=o("TFDebertaV2ForQuestionAnswering"),Zbr=o(" (DeBERTa-v2 model)"),e5r=l(),OC=a("li"),o9e=a("strong"),o5r=o("distilbert"),r5r=o(" \u2014 "),VX=a("a"),t5r=o("TFDistilBertForQuestionAnswering"),a5r=o(" (DistilBERT model)"),n5r=l(),XC=a("li"),r9e=a("strong"),s5r=o("electra"),l5r=o(" \u2014 "),zX=a("a"),i5r=o("TFElectraForQuestionAnswering"),d5r=o(" (ELECTRA model)"),c5r=l(),VC=a("li"),t9e=a("strong"),f5r=o("flaubert"),m5r=o(" \u2014 "),WX=a("a"),g5r=o("TFFlaubertForQuestionAnsweringSimple"),h5r=o(" (FlauBERT model)"),p5r=l(),zC=a("li"),a9e=a("strong"),_5r=o("funnel"),u5r=o(" \u2014 "),QX=a("a"),b5r=o("TFFunnelForQuestionAnswering"),v5r=o(" (Funnel Transformer model)"),T5r=l(),WC=a("li"),n9e=a("strong"),F5r=o("longformer"),C5r=o(" \u2014 "),HX=a("a"),M5r=o("TFLongformerForQuestionAnswering"),E5r=o(" (Longformer model)"),y5r=l(),QC=a("li"),s9e=a("strong"),w5r=o("mobilebert"),A5r=o(" \u2014 "),UX=a("a"),L5r=o("TFMobileBertForQuestionAnswering"),B5r=o(" (MobileBERT model)"),x5r=l(),HC=a("li"),l9e=a("strong"),k5r=o("mpnet"),R5r=o(" \u2014 "),JX=a("a"),S5r=o("TFMPNetForQuestionAnswering"),P5r=o(" (MPNet model)"),$5r=l(),UC=a("li"),i9e=a("strong"),I5r=o("rembert"),D5r=o(" \u2014 "),YX=a("a"),N5r=o("TFRemBertForQuestionAnswering"),j5r=o(" (RemBERT model)"),q5r=l(),JC=a("li"),d9e=a("strong"),G5r=o("roberta"),O5r=o(" \u2014 "),KX=a("a"),X5r=o("TFRobertaForQuestionAnswering"),V5r=o(" (RoBERTa model)"),z5r=l(),YC=a("li"),c9e=a("strong"),W5r=o("roformer"),Q5r=o(" \u2014 "),ZX=a("a"),H5r=o("TFRoFormerForQuestionAnswering"),U5r=o(" (RoFormer model)"),J5r=l(),KC=a("li"),f9e=a("strong"),Y5r=o("xlm"),K5r=o(" \u2014 "),eV=a("a"),Z5r=o("TFXLMForQuestionAnsweringSimple"),e2r=o(" (XLM model)"),o2r=l(),ZC=a("li"),m9e=a("strong"),r2r=o("xlm-roberta"),t2r=o(" \u2014 "),oV=a("a"),a2r=o("TFXLMRobertaForQuestionAnswering"),n2r=o(" (XLM-RoBERTa model)"),s2r=l(),eM=a("li"),g9e=a("strong"),l2r=o("xlnet"),i2r=o(" \u2014 "),rV=a("a"),d2r=o("TFXLNetForQuestionAnsweringSimple"),c2r=o(" (XLNet model)"),f2r=l(),h9e=a("p"),m2r=o("Examples:"),g2r=l(),f(m0.$$.fragment),qRe=l(),Wc=a("h2"),oM=a("a"),p9e=a("span"),f(g0.$$.fragment),h2r=l(),_9e=a("span"),p2r=o("TFAutoModelForVision2Seq"),GRe=l(),xr=a("div"),f(h0.$$.fragment),_2r=l(),Qc=a("p"),u2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),u9e=a("code"),b2r=o("from_pretrained()"),v2r=o("class method or the "),b9e=a("code"),T2r=o("from_config()"),F2r=o(`class
method.`),C2r=l(),p0=a("p"),M2r=o("This class cannot be instantiated directly using "),v9e=a("code"),E2r=o("__init__()"),y2r=o(" (throws an error)."),w2r=l(),Et=a("div"),f(_0.$$.fragment),A2r=l(),T9e=a("p"),L2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),B2r=l(),Hc=a("p"),x2r=o(`Note:
Loading a model from its configuration file does `),F9e=a("strong"),k2r=o("not"),R2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C9e=a("code"),S2r=o("from_pretrained()"),P2r=o("to load the model weights."),$2r=l(),M9e=a("p"),I2r=o("Examples:"),D2r=l(),f(u0.$$.fragment),N2r=l(),yo=a("div"),f(b0.$$.fragment),j2r=l(),E9e=a("p"),q2r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),G2r=l(),An=a("p"),O2r=o("The model class to instantiate is selected based on the "),y9e=a("code"),X2r=o("model_type"),V2r=o(` property of the config object (either
passed as an argument or loaded from `),w9e=a("code"),z2r=o("pretrained_model_name_or_path"),W2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=a("code"),Q2r=o("pretrained_model_name_or_path"),H2r=o(":"),U2r=l(),L9e=a("ul"),rM=a("li"),B9e=a("strong"),J2r=o("vision-encoder-decoder"),Y2r=o(" \u2014 "),tV=a("a"),K2r=o("TFVisionEncoderDecoderModel"),Z2r=o(" (Vision Encoder decoder model)"),evr=l(),x9e=a("p"),ovr=o("Examples:"),rvr=l(),f(v0.$$.fragment),ORe=l(),Uc=a("h2"),tM=a("a"),k9e=a("span"),f(T0.$$.fragment),tvr=l(),R9e=a("span"),avr=o("TFAutoModelForSpeechSeq2Seq"),XRe=l(),kr=a("div"),f(F0.$$.fragment),nvr=l(),Jc=a("p"),svr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),S9e=a("code"),lvr=o("from_pretrained()"),ivr=o("class method or the "),P9e=a("code"),dvr=o("from_config()"),cvr=o(`class
method.`),fvr=l(),C0=a("p"),mvr=o("This class cannot be instantiated directly using "),$9e=a("code"),gvr=o("__init__()"),hvr=o(" (throws an error)."),pvr=l(),yt=a("div"),f(M0.$$.fragment),_vr=l(),I9e=a("p"),uvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bvr=l(),Yc=a("p"),vvr=o(`Note:
Loading a model from its configuration file does `),D9e=a("strong"),Tvr=o("not"),Fvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N9e=a("code"),Cvr=o("from_pretrained()"),Mvr=o("to load the model weights."),Evr=l(),j9e=a("p"),yvr=o("Examples:"),wvr=l(),f(E0.$$.fragment),Avr=l(),wo=a("div"),f(y0.$$.fragment),Lvr=l(),q9e=a("p"),Bvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xvr=l(),Ln=a("p"),kvr=o("The model class to instantiate is selected based on the "),G9e=a("code"),Rvr=o("model_type"),Svr=o(` property of the config object (either
passed as an argument or loaded from `),O9e=a("code"),Pvr=o("pretrained_model_name_or_path"),$vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=a("code"),Ivr=o("pretrained_model_name_or_path"),Dvr=o(":"),Nvr=l(),V9e=a("ul"),aM=a("li"),z9e=a("strong"),jvr=o("speech_to_text"),qvr=o(" \u2014 "),aV=a("a"),Gvr=o("TFSpeech2TextForConditionalGeneration"),Ovr=o(" (Speech2Text model)"),Xvr=l(),W9e=a("p"),Vvr=o("Examples:"),zvr=l(),f(w0.$$.fragment),VRe=l(),Kc=a("h2"),nM=a("a"),Q9e=a("span"),f(A0.$$.fragment),Wvr=l(),H9e=a("span"),Qvr=o("FlaxAutoModel"),zRe=l(),Rr=a("div"),f(L0.$$.fragment),Hvr=l(),Zc=a("p"),Uvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),U9e=a("code"),Jvr=o("from_pretrained()"),Yvr=o("class method or the "),J9e=a("code"),Kvr=o("from_config()"),Zvr=o(`class
method.`),eTr=l(),B0=a("p"),oTr=o("This class cannot be instantiated directly using "),Y9e=a("code"),rTr=o("__init__()"),tTr=o(" (throws an error)."),aTr=l(),wt=a("div"),f(x0.$$.fragment),nTr=l(),K9e=a("p"),sTr=o("Instantiates one of the base model classes of the library from a configuration."),lTr=l(),ef=a("p"),iTr=o(`Note:
Loading a model from its configuration file does `),Z9e=a("strong"),dTr=o("not"),cTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ebe=a("code"),fTr=o("from_pretrained()"),mTr=o("to load the model weights."),gTr=l(),obe=a("p"),hTr=o("Examples:"),pTr=l(),f(k0.$$.fragment),_Tr=l(),Ao=a("div"),f(R0.$$.fragment),uTr=l(),rbe=a("p"),bTr=o("Instantiate one of the base model classes of the library from a pretrained model."),vTr=l(),Bn=a("p"),TTr=o("The model class to instantiate is selected based on the "),tbe=a("code"),FTr=o("model_type"),CTr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),MTr=o("pretrained_model_name_or_path"),ETr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),yTr=o("pretrained_model_name_or_path"),wTr=o(":"),ATr=l(),z=a("ul"),sM=a("li"),sbe=a("strong"),LTr=o("albert"),BTr=o(" \u2014 "),nV=a("a"),xTr=o("FlaxAlbertModel"),kTr=o(" (ALBERT model)"),RTr=l(),lM=a("li"),lbe=a("strong"),STr=o("bart"),PTr=o(" \u2014 "),sV=a("a"),$Tr=o("FlaxBartModel"),ITr=o(" (BART model)"),DTr=l(),iM=a("li"),ibe=a("strong"),NTr=o("beit"),jTr=o(" \u2014 "),lV=a("a"),qTr=o("FlaxBeitModel"),GTr=o(" (BEiT model)"),OTr=l(),dM=a("li"),dbe=a("strong"),XTr=o("bert"),VTr=o(" \u2014 "),iV=a("a"),zTr=o("FlaxBertModel"),WTr=o(" (BERT model)"),QTr=l(),cM=a("li"),cbe=a("strong"),HTr=o("big_bird"),UTr=o(" \u2014 "),dV=a("a"),JTr=o("FlaxBigBirdModel"),YTr=o(" (BigBird model)"),KTr=l(),fM=a("li"),fbe=a("strong"),ZTr=o("blenderbot"),eFr=o(" \u2014 "),cV=a("a"),oFr=o("FlaxBlenderbotModel"),rFr=o(" (Blenderbot model)"),tFr=l(),mM=a("li"),mbe=a("strong"),aFr=o("blenderbot-small"),nFr=o(" \u2014 "),fV=a("a"),sFr=o("FlaxBlenderbotSmallModel"),lFr=o(" (BlenderbotSmall model)"),iFr=l(),gM=a("li"),gbe=a("strong"),dFr=o("clip"),cFr=o(" \u2014 "),mV=a("a"),fFr=o("FlaxCLIPModel"),mFr=o(" (CLIP model)"),gFr=l(),hM=a("li"),hbe=a("strong"),hFr=o("distilbert"),pFr=o(" \u2014 "),gV=a("a"),_Fr=o("FlaxDistilBertModel"),uFr=o(" (DistilBERT model)"),bFr=l(),pM=a("li"),pbe=a("strong"),vFr=o("electra"),TFr=o(" \u2014 "),hV=a("a"),FFr=o("FlaxElectraModel"),CFr=o(" (ELECTRA model)"),MFr=l(),_M=a("li"),_be=a("strong"),EFr=o("gpt2"),yFr=o(" \u2014 "),pV=a("a"),wFr=o("FlaxGPT2Model"),AFr=o(" (OpenAI GPT-2 model)"),LFr=l(),uM=a("li"),ube=a("strong"),BFr=o("gpt_neo"),xFr=o(" \u2014 "),_V=a("a"),kFr=o("FlaxGPTNeoModel"),RFr=o(" (GPT Neo model)"),SFr=l(),bM=a("li"),bbe=a("strong"),PFr=o("gptj"),$Fr=o(" \u2014 "),uV=a("a"),IFr=o("FlaxGPTJModel"),DFr=o(" (GPT-J model)"),NFr=l(),vM=a("li"),vbe=a("strong"),jFr=o("marian"),qFr=o(" \u2014 "),bV=a("a"),GFr=o("FlaxMarianModel"),OFr=o(" (Marian model)"),XFr=l(),TM=a("li"),Tbe=a("strong"),VFr=o("mbart"),zFr=o(" \u2014 "),vV=a("a"),WFr=o("FlaxMBartModel"),QFr=o(" (mBART model)"),HFr=l(),FM=a("li"),Fbe=a("strong"),UFr=o("mt5"),JFr=o(" \u2014 "),TV=a("a"),YFr=o("FlaxMT5Model"),KFr=o(" (mT5 model)"),ZFr=l(),CM=a("li"),Cbe=a("strong"),eCr=o("pegasus"),oCr=o(" \u2014 "),FV=a("a"),rCr=o("FlaxPegasusModel"),tCr=o(" (Pegasus model)"),aCr=l(),MM=a("li"),Mbe=a("strong"),nCr=o("roberta"),sCr=o(" \u2014 "),CV=a("a"),lCr=o("FlaxRobertaModel"),iCr=o(" (RoBERTa model)"),dCr=l(),EM=a("li"),Ebe=a("strong"),cCr=o("roformer"),fCr=o(" \u2014 "),MV=a("a"),mCr=o("FlaxRoFormerModel"),gCr=o(" (RoFormer model)"),hCr=l(),yM=a("li"),ybe=a("strong"),pCr=o("t5"),_Cr=o(" \u2014 "),EV=a("a"),uCr=o("FlaxT5Model"),bCr=o(" (T5 model)"),vCr=l(),wM=a("li"),wbe=a("strong"),TCr=o("vision-text-dual-encoder"),FCr=o(" \u2014 "),yV=a("a"),CCr=o("FlaxVisionTextDualEncoderModel"),MCr=o(" (VisionTextDualEncoder model)"),ECr=l(),AM=a("li"),Abe=a("strong"),yCr=o("vit"),wCr=o(" \u2014 "),wV=a("a"),ACr=o("FlaxViTModel"),LCr=o(" (ViT model)"),BCr=l(),LM=a("li"),Lbe=a("strong"),xCr=o("wav2vec2"),kCr=o(" \u2014 "),AV=a("a"),RCr=o("FlaxWav2Vec2Model"),SCr=o(" (Wav2Vec2 model)"),PCr=l(),BM=a("li"),Bbe=a("strong"),$Cr=o("xglm"),ICr=o(" \u2014 "),LV=a("a"),DCr=o("FlaxXGLMModel"),NCr=o(" (XGLM model)"),jCr=l(),xM=a("li"),xbe=a("strong"),qCr=o("xlm-roberta"),GCr=o(" \u2014 "),BV=a("a"),OCr=o("FlaxXLMRobertaModel"),XCr=o(" (XLM-RoBERTa model)"),VCr=l(),kbe=a("p"),zCr=o("Examples:"),WCr=l(),f(S0.$$.fragment),WRe=l(),of=a("h2"),kM=a("a"),Rbe=a("span"),f(P0.$$.fragment),QCr=l(),Sbe=a("span"),HCr=o("FlaxAutoModelForCausalLM"),QRe=l(),Sr=a("div"),f($0.$$.fragment),UCr=l(),rf=a("p"),JCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pbe=a("code"),YCr=o("from_pretrained()"),KCr=o("class method or the "),$be=a("code"),ZCr=o("from_config()"),eMr=o(`class
method.`),oMr=l(),I0=a("p"),rMr=o("This class cannot be instantiated directly using "),Ibe=a("code"),tMr=o("__init__()"),aMr=o(" (throws an error)."),nMr=l(),At=a("div"),f(D0.$$.fragment),sMr=l(),Dbe=a("p"),lMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iMr=l(),tf=a("p"),dMr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),cMr=o("not"),fMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jbe=a("code"),mMr=o("from_pretrained()"),gMr=o("to load the model weights."),hMr=l(),qbe=a("p"),pMr=o("Examples:"),_Mr=l(),f(N0.$$.fragment),uMr=l(),Lo=a("div"),f(j0.$$.fragment),bMr=l(),Gbe=a("p"),vMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TMr=l(),xn=a("p"),FMr=o("The model class to instantiate is selected based on the "),Obe=a("code"),CMr=o("model_type"),MMr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),EMr=o("pretrained_model_name_or_path"),yMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),wMr=o("pretrained_model_name_or_path"),AMr=o(":"),LMr=l(),ca=a("ul"),RM=a("li"),zbe=a("strong"),BMr=o("bart"),xMr=o(" \u2014 "),xV=a("a"),kMr=o("FlaxBartForCausalLM"),RMr=o(" (BART model)"),SMr=l(),SM=a("li"),Wbe=a("strong"),PMr=o("gpt2"),$Mr=o(" \u2014 "),kV=a("a"),IMr=o("FlaxGPT2LMHeadModel"),DMr=o(" (OpenAI GPT-2 model)"),NMr=l(),PM=a("li"),Qbe=a("strong"),jMr=o("gpt_neo"),qMr=o(" \u2014 "),RV=a("a"),GMr=o("FlaxGPTNeoForCausalLM"),OMr=o(" (GPT Neo model)"),XMr=l(),$M=a("li"),Hbe=a("strong"),VMr=o("gptj"),zMr=o(" \u2014 "),SV=a("a"),WMr=o("FlaxGPTJForCausalLM"),QMr=o(" (GPT-J model)"),HMr=l(),IM=a("li"),Ube=a("strong"),UMr=o("xglm"),JMr=o(" \u2014 "),PV=a("a"),YMr=o("FlaxXGLMForCausalLM"),KMr=o(" (XGLM model)"),ZMr=l(),Jbe=a("p"),e4r=o("Examples:"),o4r=l(),f(q0.$$.fragment),HRe=l(),af=a("h2"),DM=a("a"),Ybe=a("span"),f(G0.$$.fragment),r4r=l(),Kbe=a("span"),t4r=o("FlaxAutoModelForPreTraining"),URe=l(),Pr=a("div"),f(O0.$$.fragment),a4r=l(),nf=a("p"),n4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zbe=a("code"),s4r=o("from_pretrained()"),l4r=o("class method or the "),e5e=a("code"),i4r=o("from_config()"),d4r=o(`class
method.`),c4r=l(),X0=a("p"),f4r=o("This class cannot be instantiated directly using "),o5e=a("code"),m4r=o("__init__()"),g4r=o(" (throws an error)."),h4r=l(),Lt=a("div"),f(V0.$$.fragment),p4r=l(),r5e=a("p"),_4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u4r=l(),sf=a("p"),b4r=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),v4r=o("not"),T4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a5e=a("code"),F4r=o("from_pretrained()"),C4r=o("to load the model weights."),M4r=l(),n5e=a("p"),E4r=o("Examples:"),y4r=l(),f(z0.$$.fragment),w4r=l(),Bo=a("div"),f(W0.$$.fragment),A4r=l(),s5e=a("p"),L4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),B4r=l(),kn=a("p"),x4r=o("The model class to instantiate is selected based on the "),l5e=a("code"),k4r=o("model_type"),R4r=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),S4r=o("pretrained_model_name_or_path"),P4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),$4r=o("pretrained_model_name_or_path"),I4r=o(":"),D4r=l(),ce=a("ul"),NM=a("li"),c5e=a("strong"),N4r=o("albert"),j4r=o(" \u2014 "),$V=a("a"),q4r=o("FlaxAlbertForPreTraining"),G4r=o(" (ALBERT model)"),O4r=l(),jM=a("li"),f5e=a("strong"),X4r=o("bart"),V4r=o(" \u2014 "),IV=a("a"),z4r=o("FlaxBartForConditionalGeneration"),W4r=o(" (BART model)"),Q4r=l(),qM=a("li"),m5e=a("strong"),H4r=o("bert"),U4r=o(" \u2014 "),DV=a("a"),J4r=o("FlaxBertForPreTraining"),Y4r=o(" (BERT model)"),K4r=l(),GM=a("li"),g5e=a("strong"),Z4r=o("big_bird"),eEr=o(" \u2014 "),NV=a("a"),oEr=o("FlaxBigBirdForPreTraining"),rEr=o(" (BigBird model)"),tEr=l(),OM=a("li"),h5e=a("strong"),aEr=o("electra"),nEr=o(" \u2014 "),jV=a("a"),sEr=o("FlaxElectraForPreTraining"),lEr=o(" (ELECTRA model)"),iEr=l(),XM=a("li"),p5e=a("strong"),dEr=o("mbart"),cEr=o(" \u2014 "),qV=a("a"),fEr=o("FlaxMBartForConditionalGeneration"),mEr=o(" (mBART model)"),gEr=l(),VM=a("li"),_5e=a("strong"),hEr=o("mt5"),pEr=o(" \u2014 "),GV=a("a"),_Er=o("FlaxMT5ForConditionalGeneration"),uEr=o(" (mT5 model)"),bEr=l(),zM=a("li"),u5e=a("strong"),vEr=o("roberta"),TEr=o(" \u2014 "),OV=a("a"),FEr=o("FlaxRobertaForMaskedLM"),CEr=o(" (RoBERTa model)"),MEr=l(),WM=a("li"),b5e=a("strong"),EEr=o("roformer"),yEr=o(" \u2014 "),XV=a("a"),wEr=o("FlaxRoFormerForMaskedLM"),AEr=o(" (RoFormer model)"),LEr=l(),QM=a("li"),v5e=a("strong"),BEr=o("t5"),xEr=o(" \u2014 "),VV=a("a"),kEr=o("FlaxT5ForConditionalGeneration"),REr=o(" (T5 model)"),SEr=l(),HM=a("li"),T5e=a("strong"),PEr=o("wav2vec2"),$Er=o(" \u2014 "),zV=a("a"),IEr=o("FlaxWav2Vec2ForPreTraining"),DEr=o(" (Wav2Vec2 model)"),NEr=l(),UM=a("li"),F5e=a("strong"),jEr=o("xlm-roberta"),qEr=o(" \u2014 "),WV=a("a"),GEr=o("FlaxXLMRobertaForMaskedLM"),OEr=o(" (XLM-RoBERTa model)"),XEr=l(),C5e=a("p"),VEr=o("Examples:"),zEr=l(),f(Q0.$$.fragment),JRe=l(),lf=a("h2"),JM=a("a"),M5e=a("span"),f(H0.$$.fragment),WEr=l(),E5e=a("span"),QEr=o("FlaxAutoModelForMaskedLM"),YRe=l(),$r=a("div"),f(U0.$$.fragment),HEr=l(),df=a("p"),UEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),y5e=a("code"),JEr=o("from_pretrained()"),YEr=o("class method or the "),w5e=a("code"),KEr=o("from_config()"),ZEr=o(`class
method.`),e3r=l(),J0=a("p"),o3r=o("This class cannot be instantiated directly using "),A5e=a("code"),r3r=o("__init__()"),t3r=o(" (throws an error)."),a3r=l(),Bt=a("div"),f(Y0.$$.fragment),n3r=l(),L5e=a("p"),s3r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l3r=l(),cf=a("p"),i3r=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),d3r=o("not"),c3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x5e=a("code"),f3r=o("from_pretrained()"),m3r=o("to load the model weights."),g3r=l(),k5e=a("p"),h3r=o("Examples:"),p3r=l(),f(K0.$$.fragment),_3r=l(),xo=a("div"),f(Z0.$$.fragment),u3r=l(),R5e=a("p"),b3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v3r=l(),Rn=a("p"),T3r=o("The model class to instantiate is selected based on the "),S5e=a("code"),F3r=o("model_type"),C3r=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),y3r=o("pretrained_model_name_or_path"),w3r=o(":"),A3r=l(),ue=a("ul"),YM=a("li"),I5e=a("strong"),L3r=o("albert"),B3r=o(" \u2014 "),QV=a("a"),x3r=o("FlaxAlbertForMaskedLM"),k3r=o(" (ALBERT model)"),R3r=l(),KM=a("li"),D5e=a("strong"),S3r=o("bart"),P3r=o(" \u2014 "),HV=a("a"),$3r=o("FlaxBartForConditionalGeneration"),I3r=o(" (BART model)"),D3r=l(),ZM=a("li"),N5e=a("strong"),N3r=o("bert"),j3r=o(" \u2014 "),UV=a("a"),q3r=o("FlaxBertForMaskedLM"),G3r=o(" (BERT model)"),O3r=l(),e4=a("li"),j5e=a("strong"),X3r=o("big_bird"),V3r=o(" \u2014 "),JV=a("a"),z3r=o("FlaxBigBirdForMaskedLM"),W3r=o(" (BigBird model)"),Q3r=l(),o4=a("li"),q5e=a("strong"),H3r=o("distilbert"),U3r=o(" \u2014 "),YV=a("a"),J3r=o("FlaxDistilBertForMaskedLM"),Y3r=o(" (DistilBERT model)"),K3r=l(),r4=a("li"),G5e=a("strong"),Z3r=o("electra"),eyr=o(" \u2014 "),KV=a("a"),oyr=o("FlaxElectraForMaskedLM"),ryr=o(" (ELECTRA model)"),tyr=l(),t4=a("li"),O5e=a("strong"),ayr=o("mbart"),nyr=o(" \u2014 "),ZV=a("a"),syr=o("FlaxMBartForConditionalGeneration"),lyr=o(" (mBART model)"),iyr=l(),a4=a("li"),X5e=a("strong"),dyr=o("roberta"),cyr=o(" \u2014 "),ez=a("a"),fyr=o("FlaxRobertaForMaskedLM"),myr=o(" (RoBERTa model)"),gyr=l(),n4=a("li"),V5e=a("strong"),hyr=o("roformer"),pyr=o(" \u2014 "),oz=a("a"),_yr=o("FlaxRoFormerForMaskedLM"),uyr=o(" (RoFormer model)"),byr=l(),s4=a("li"),z5e=a("strong"),vyr=o("xlm-roberta"),Tyr=o(" \u2014 "),rz=a("a"),Fyr=o("FlaxXLMRobertaForMaskedLM"),Cyr=o(" (XLM-RoBERTa model)"),Myr=l(),W5e=a("p"),Eyr=o("Examples:"),yyr=l(),f(eL.$$.fragment),KRe=l(),ff=a("h2"),l4=a("a"),Q5e=a("span"),f(oL.$$.fragment),wyr=l(),H5e=a("span"),Ayr=o("FlaxAutoModelForSeq2SeqLM"),ZRe=l(),Ir=a("div"),f(rL.$$.fragment),Lyr=l(),mf=a("p"),Byr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),U5e=a("code"),xyr=o("from_pretrained()"),kyr=o("class method or the "),J5e=a("code"),Ryr=o("from_config()"),Syr=o(`class
method.`),Pyr=l(),tL=a("p"),$yr=o("This class cannot be instantiated directly using "),Y5e=a("code"),Iyr=o("__init__()"),Dyr=o(" (throws an error)."),Nyr=l(),xt=a("div"),f(aL.$$.fragment),jyr=l(),K5e=a("p"),qyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gyr=l(),gf=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),Z5e=a("strong"),Xyr=o("not"),Vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e2e=a("code"),zyr=o("from_pretrained()"),Wyr=o("to load the model weights."),Qyr=l(),o2e=a("p"),Hyr=o("Examples:"),Uyr=l(),f(nL.$$.fragment),Jyr=l(),ko=a("div"),f(sL.$$.fragment),Yyr=l(),r2e=a("p"),Kyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zyr=l(),Sn=a("p"),ewr=o("The model class to instantiate is selected based on the "),t2e=a("code"),owr=o("model_type"),rwr=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),twr=o("pretrained_model_name_or_path"),awr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),nwr=o("pretrained_model_name_or_path"),swr=o(":"),lwr=l(),Me=a("ul"),i4=a("li"),s2e=a("strong"),iwr=o("bart"),dwr=o(" \u2014 "),tz=a("a"),cwr=o("FlaxBartForConditionalGeneration"),fwr=o(" (BART model)"),mwr=l(),d4=a("li"),l2e=a("strong"),gwr=o("blenderbot"),hwr=o(" \u2014 "),az=a("a"),pwr=o("FlaxBlenderbotForConditionalGeneration"),_wr=o(" (Blenderbot model)"),uwr=l(),c4=a("li"),i2e=a("strong"),bwr=o("blenderbot-small"),vwr=o(" \u2014 "),nz=a("a"),Twr=o("FlaxBlenderbotSmallForConditionalGeneration"),Fwr=o(" (BlenderbotSmall model)"),Cwr=l(),f4=a("li"),d2e=a("strong"),Mwr=o("encoder-decoder"),Ewr=o(" \u2014 "),sz=a("a"),ywr=o("FlaxEncoderDecoderModel"),wwr=o(" (Encoder decoder model)"),Awr=l(),m4=a("li"),c2e=a("strong"),Lwr=o("marian"),Bwr=o(" \u2014 "),lz=a("a"),xwr=o("FlaxMarianMTModel"),kwr=o(" (Marian model)"),Rwr=l(),g4=a("li"),f2e=a("strong"),Swr=o("mbart"),Pwr=o(" \u2014 "),iz=a("a"),$wr=o("FlaxMBartForConditionalGeneration"),Iwr=o(" (mBART model)"),Dwr=l(),h4=a("li"),m2e=a("strong"),Nwr=o("mt5"),jwr=o(" \u2014 "),dz=a("a"),qwr=o("FlaxMT5ForConditionalGeneration"),Gwr=o(" (mT5 model)"),Owr=l(),p4=a("li"),g2e=a("strong"),Xwr=o("pegasus"),Vwr=o(" \u2014 "),cz=a("a"),zwr=o("FlaxPegasusForConditionalGeneration"),Wwr=o(" (Pegasus model)"),Qwr=l(),_4=a("li"),h2e=a("strong"),Hwr=o("t5"),Uwr=o(" \u2014 "),fz=a("a"),Jwr=o("FlaxT5ForConditionalGeneration"),Ywr=o(" (T5 model)"),Kwr=l(),p2e=a("p"),Zwr=o("Examples:"),e6r=l(),f(lL.$$.fragment),eSe=l(),hf=a("h2"),u4=a("a"),_2e=a("span"),f(iL.$$.fragment),o6r=l(),u2e=a("span"),r6r=o("FlaxAutoModelForSequenceClassification"),oSe=l(),Dr=a("div"),f(dL.$$.fragment),t6r=l(),pf=a("p"),a6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),b2e=a("code"),n6r=o("from_pretrained()"),s6r=o("class method or the "),v2e=a("code"),l6r=o("from_config()"),i6r=o(`class
method.`),d6r=l(),cL=a("p"),c6r=o("This class cannot be instantiated directly using "),T2e=a("code"),f6r=o("__init__()"),m6r=o(" (throws an error)."),g6r=l(),kt=a("div"),f(fL.$$.fragment),h6r=l(),F2e=a("p"),p6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_6r=l(),_f=a("p"),u6r=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),b6r=o("not"),v6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),M2e=a("code"),T6r=o("from_pretrained()"),F6r=o("to load the model weights."),C6r=l(),E2e=a("p"),M6r=o("Examples:"),E6r=l(),f(mL.$$.fragment),y6r=l(),Ro=a("div"),f(gL.$$.fragment),w6r=l(),y2e=a("p"),A6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L6r=l(),Pn=a("p"),B6r=o("The model class to instantiate is selected based on the "),w2e=a("code"),x6r=o("model_type"),k6r=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),R6r=o("pretrained_model_name_or_path"),S6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),P6r=o("pretrained_model_name_or_path"),$6r=o(":"),I6r=l(),be=a("ul"),b4=a("li"),B2e=a("strong"),D6r=o("albert"),N6r=o(" \u2014 "),mz=a("a"),j6r=o("FlaxAlbertForSequenceClassification"),q6r=o(" (ALBERT model)"),G6r=l(),v4=a("li"),x2e=a("strong"),O6r=o("bart"),X6r=o(" \u2014 "),gz=a("a"),V6r=o("FlaxBartForSequenceClassification"),z6r=o(" (BART model)"),W6r=l(),T4=a("li"),k2e=a("strong"),Q6r=o("bert"),H6r=o(" \u2014 "),hz=a("a"),U6r=o("FlaxBertForSequenceClassification"),J6r=o(" (BERT model)"),Y6r=l(),F4=a("li"),R2e=a("strong"),K6r=o("big_bird"),Z6r=o(" \u2014 "),pz=a("a"),eAr=o("FlaxBigBirdForSequenceClassification"),oAr=o(" (BigBird model)"),rAr=l(),C4=a("li"),S2e=a("strong"),tAr=o("distilbert"),aAr=o(" \u2014 "),_z=a("a"),nAr=o("FlaxDistilBertForSequenceClassification"),sAr=o(" (DistilBERT model)"),lAr=l(),M4=a("li"),P2e=a("strong"),iAr=o("electra"),dAr=o(" \u2014 "),uz=a("a"),cAr=o("FlaxElectraForSequenceClassification"),fAr=o(" (ELECTRA model)"),mAr=l(),E4=a("li"),$2e=a("strong"),gAr=o("mbart"),hAr=o(" \u2014 "),bz=a("a"),pAr=o("FlaxMBartForSequenceClassification"),_Ar=o(" (mBART model)"),uAr=l(),y4=a("li"),I2e=a("strong"),bAr=o("roberta"),vAr=o(" \u2014 "),vz=a("a"),TAr=o("FlaxRobertaForSequenceClassification"),FAr=o(" (RoBERTa model)"),CAr=l(),w4=a("li"),D2e=a("strong"),MAr=o("roformer"),EAr=o(" \u2014 "),Tz=a("a"),yAr=o("FlaxRoFormerForSequenceClassification"),wAr=o(" (RoFormer model)"),AAr=l(),A4=a("li"),N2e=a("strong"),LAr=o("xlm-roberta"),BAr=o(" \u2014 "),Fz=a("a"),xAr=o("FlaxXLMRobertaForSequenceClassification"),kAr=o(" (XLM-RoBERTa model)"),RAr=l(),j2e=a("p"),SAr=o("Examples:"),PAr=l(),f(hL.$$.fragment),rSe=l(),uf=a("h2"),L4=a("a"),q2e=a("span"),f(pL.$$.fragment),$Ar=l(),G2e=a("span"),IAr=o("FlaxAutoModelForQuestionAnswering"),tSe=l(),Nr=a("div"),f(_L.$$.fragment),DAr=l(),bf=a("p"),NAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),O2e=a("code"),jAr=o("from_pretrained()"),qAr=o("class method or the "),X2e=a("code"),GAr=o("from_config()"),OAr=o(`class
method.`),XAr=l(),uL=a("p"),VAr=o("This class cannot be instantiated directly using "),V2e=a("code"),zAr=o("__init__()"),WAr=o(" (throws an error)."),QAr=l(),Rt=a("div"),f(bL.$$.fragment),HAr=l(),z2e=a("p"),UAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JAr=l(),vf=a("p"),YAr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),KAr=o("not"),ZAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q2e=a("code"),e0r=o("from_pretrained()"),o0r=o("to load the model weights."),r0r=l(),H2e=a("p"),t0r=o("Examples:"),a0r=l(),f(vL.$$.fragment),n0r=l(),So=a("div"),f(TL.$$.fragment),s0r=l(),U2e=a("p"),l0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i0r=l(),$n=a("p"),d0r=o("The model class to instantiate is selected based on the "),J2e=a("code"),c0r=o("model_type"),f0r=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),m0r=o("pretrained_model_name_or_path"),g0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),h0r=o("pretrained_model_name_or_path"),p0r=o(":"),_0r=l(),ve=a("ul"),B4=a("li"),Z2e=a("strong"),u0r=o("albert"),b0r=o(" \u2014 "),Cz=a("a"),v0r=o("FlaxAlbertForQuestionAnswering"),T0r=o(" (ALBERT model)"),F0r=l(),x4=a("li"),eve=a("strong"),C0r=o("bart"),M0r=o(" \u2014 "),Mz=a("a"),E0r=o("FlaxBartForQuestionAnswering"),y0r=o(" (BART model)"),w0r=l(),k4=a("li"),ove=a("strong"),A0r=o("bert"),L0r=o(" \u2014 "),Ez=a("a"),B0r=o("FlaxBertForQuestionAnswering"),x0r=o(" (BERT model)"),k0r=l(),R4=a("li"),rve=a("strong"),R0r=o("big_bird"),S0r=o(" \u2014 "),yz=a("a"),P0r=o("FlaxBigBirdForQuestionAnswering"),$0r=o(" (BigBird model)"),I0r=l(),S4=a("li"),tve=a("strong"),D0r=o("distilbert"),N0r=o(" \u2014 "),wz=a("a"),j0r=o("FlaxDistilBertForQuestionAnswering"),q0r=o(" (DistilBERT model)"),G0r=l(),P4=a("li"),ave=a("strong"),O0r=o("electra"),X0r=o(" \u2014 "),Az=a("a"),V0r=o("FlaxElectraForQuestionAnswering"),z0r=o(" (ELECTRA model)"),W0r=l(),$4=a("li"),nve=a("strong"),Q0r=o("mbart"),H0r=o(" \u2014 "),Lz=a("a"),U0r=o("FlaxMBartForQuestionAnswering"),J0r=o(" (mBART model)"),Y0r=l(),I4=a("li"),sve=a("strong"),K0r=o("roberta"),Z0r=o(" \u2014 "),Bz=a("a"),eLr=o("FlaxRobertaForQuestionAnswering"),oLr=o(" (RoBERTa model)"),rLr=l(),D4=a("li"),lve=a("strong"),tLr=o("roformer"),aLr=o(" \u2014 "),xz=a("a"),nLr=o("FlaxRoFormerForQuestionAnswering"),sLr=o(" (RoFormer model)"),lLr=l(),N4=a("li"),ive=a("strong"),iLr=o("xlm-roberta"),dLr=o(" \u2014 "),kz=a("a"),cLr=o("FlaxXLMRobertaForQuestionAnswering"),fLr=o(" (XLM-RoBERTa model)"),mLr=l(),dve=a("p"),gLr=o("Examples:"),hLr=l(),f(FL.$$.fragment),aSe=l(),Tf=a("h2"),j4=a("a"),cve=a("span"),f(CL.$$.fragment),pLr=l(),fve=a("span"),_Lr=o("FlaxAutoModelForTokenClassification"),nSe=l(),jr=a("div"),f(ML.$$.fragment),uLr=l(),Ff=a("p"),bLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mve=a("code"),vLr=o("from_pretrained()"),TLr=o("class method or the "),gve=a("code"),FLr=o("from_config()"),CLr=o(`class
method.`),MLr=l(),EL=a("p"),ELr=o("This class cannot be instantiated directly using "),hve=a("code"),yLr=o("__init__()"),wLr=o(" (throws an error)."),ALr=l(),St=a("div"),f(yL.$$.fragment),LLr=l(),pve=a("p"),BLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xLr=l(),Cf=a("p"),kLr=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),RLr=o("not"),SLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uve=a("code"),PLr=o("from_pretrained()"),$Lr=o("to load the model weights."),ILr=l(),bve=a("p"),DLr=o("Examples:"),NLr=l(),f(wL.$$.fragment),jLr=l(),Po=a("div"),f(AL.$$.fragment),qLr=l(),vve=a("p"),GLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OLr=l(),In=a("p"),XLr=o("The model class to instantiate is selected based on the "),Tve=a("code"),VLr=o("model_type"),zLr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),WLr=o("pretrained_model_name_or_path"),QLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(":"),JLr=l(),Se=a("ul"),q4=a("li"),Mve=a("strong"),YLr=o("albert"),KLr=o(" \u2014 "),Rz=a("a"),ZLr=o("FlaxAlbertForTokenClassification"),e7r=o(" (ALBERT model)"),o7r=l(),G4=a("li"),Eve=a("strong"),r7r=o("bert"),t7r=o(" \u2014 "),Sz=a("a"),a7r=o("FlaxBertForTokenClassification"),n7r=o(" (BERT model)"),s7r=l(),O4=a("li"),yve=a("strong"),l7r=o("big_bird"),i7r=o(" \u2014 "),Pz=a("a"),d7r=o("FlaxBigBirdForTokenClassification"),c7r=o(" (BigBird model)"),f7r=l(),X4=a("li"),wve=a("strong"),m7r=o("distilbert"),g7r=o(" \u2014 "),$z=a("a"),h7r=o("FlaxDistilBertForTokenClassification"),p7r=o(" (DistilBERT model)"),_7r=l(),V4=a("li"),Ave=a("strong"),u7r=o("electra"),b7r=o(" \u2014 "),Iz=a("a"),v7r=o("FlaxElectraForTokenClassification"),T7r=o(" (ELECTRA model)"),F7r=l(),z4=a("li"),Lve=a("strong"),C7r=o("roberta"),M7r=o(" \u2014 "),Dz=a("a"),E7r=o("FlaxRobertaForTokenClassification"),y7r=o(" (RoBERTa model)"),w7r=l(),W4=a("li"),Bve=a("strong"),A7r=o("roformer"),L7r=o(" \u2014 "),Nz=a("a"),B7r=o("FlaxRoFormerForTokenClassification"),x7r=o(" (RoFormer model)"),k7r=l(),Q4=a("li"),xve=a("strong"),R7r=o("xlm-roberta"),S7r=o(" \u2014 "),jz=a("a"),P7r=o("FlaxXLMRobertaForTokenClassification"),$7r=o(" (XLM-RoBERTa model)"),I7r=l(),kve=a("p"),D7r=o("Examples:"),N7r=l(),f(LL.$$.fragment),sSe=l(),Mf=a("h2"),H4=a("a"),Rve=a("span"),f(BL.$$.fragment),j7r=l(),Sve=a("span"),q7r=o("FlaxAutoModelForMultipleChoice"),lSe=l(),qr=a("div"),f(xL.$$.fragment),G7r=l(),Ef=a("p"),O7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pve=a("code"),X7r=o("from_pretrained()"),V7r=o("class method or the "),$ve=a("code"),z7r=o("from_config()"),W7r=o(`class
method.`),Q7r=l(),kL=a("p"),H7r=o("This class cannot be instantiated directly using "),Ive=a("code"),U7r=o("__init__()"),J7r=o(" (throws an error)."),Y7r=l(),Pt=a("div"),f(RL.$$.fragment),K7r=l(),Dve=a("p"),Z7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),e8r=l(),yf=a("p"),o8r=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),r8r=o("not"),t8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jve=a("code"),a8r=o("from_pretrained()"),n8r=o("to load the model weights."),s8r=l(),qve=a("p"),l8r=o("Examples:"),i8r=l(),f(SL.$$.fragment),d8r=l(),$o=a("div"),f(PL.$$.fragment),c8r=l(),Gve=a("p"),f8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),m8r=l(),Dn=a("p"),g8r=o("The model class to instantiate is selected based on the "),Ove=a("code"),h8r=o("model_type"),p8r=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),_8r=o("pretrained_model_name_or_path"),u8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),b8r=o("pretrained_model_name_or_path"),v8r=o(":"),T8r=l(),Pe=a("ul"),U4=a("li"),zve=a("strong"),F8r=o("albert"),C8r=o(" \u2014 "),qz=a("a"),M8r=o("FlaxAlbertForMultipleChoice"),E8r=o(" (ALBERT model)"),y8r=l(),J4=a("li"),Wve=a("strong"),w8r=o("bert"),A8r=o(" \u2014 "),Gz=a("a"),L8r=o("FlaxBertForMultipleChoice"),B8r=o(" (BERT model)"),x8r=l(),Y4=a("li"),Qve=a("strong"),k8r=o("big_bird"),R8r=o(" \u2014 "),Oz=a("a"),S8r=o("FlaxBigBirdForMultipleChoice"),P8r=o(" (BigBird model)"),$8r=l(),K4=a("li"),Hve=a("strong"),I8r=o("distilbert"),D8r=o(" \u2014 "),Xz=a("a"),N8r=o("FlaxDistilBertForMultipleChoice"),j8r=o(" (DistilBERT model)"),q8r=l(),Z4=a("li"),Uve=a("strong"),G8r=o("electra"),O8r=o(" \u2014 "),Vz=a("a"),X8r=o("FlaxElectraForMultipleChoice"),V8r=o(" (ELECTRA model)"),z8r=l(),eE=a("li"),Jve=a("strong"),W8r=o("roberta"),Q8r=o(" \u2014 "),zz=a("a"),H8r=o("FlaxRobertaForMultipleChoice"),U8r=o(" (RoBERTa model)"),J8r=l(),oE=a("li"),Yve=a("strong"),Y8r=o("roformer"),K8r=o(" \u2014 "),Wz=a("a"),Z8r=o("FlaxRoFormerForMultipleChoice"),eBr=o(" (RoFormer model)"),oBr=l(),rE=a("li"),Kve=a("strong"),rBr=o("xlm-roberta"),tBr=o(" \u2014 "),Qz=a("a"),aBr=o("FlaxXLMRobertaForMultipleChoice"),nBr=o(" (XLM-RoBERTa model)"),sBr=l(),Zve=a("p"),lBr=o("Examples:"),iBr=l(),f($L.$$.fragment),iSe=l(),wf=a("h2"),tE=a("a"),eTe=a("span"),f(IL.$$.fragment),dBr=l(),oTe=a("span"),cBr=o("FlaxAutoModelForNextSentencePrediction"),dSe=l(),Gr=a("div"),f(DL.$$.fragment),fBr=l(),Af=a("p"),mBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rTe=a("code"),gBr=o("from_pretrained()"),hBr=o("class method or the "),tTe=a("code"),pBr=o("from_config()"),_Br=o(`class
method.`),uBr=l(),NL=a("p"),bBr=o("This class cannot be instantiated directly using "),aTe=a("code"),vBr=o("__init__()"),TBr=o(" (throws an error)."),FBr=l(),$t=a("div"),f(jL.$$.fragment),CBr=l(),nTe=a("p"),MBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EBr=l(),Lf=a("p"),yBr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),wBr=o("not"),ABr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lTe=a("code"),LBr=o("from_pretrained()"),BBr=o("to load the model weights."),xBr=l(),iTe=a("p"),kBr=o("Examples:"),RBr=l(),f(qL.$$.fragment),SBr=l(),Io=a("div"),f(GL.$$.fragment),PBr=l(),dTe=a("p"),$Br=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IBr=l(),Nn=a("p"),DBr=o("The model class to instantiate is selected based on the "),cTe=a("code"),NBr=o("model_type"),jBr=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),qBr=o("pretrained_model_name_or_path"),GBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),OBr=o("pretrained_model_name_or_path"),XBr=o(":"),VBr=l(),gTe=a("ul"),aE=a("li"),hTe=a("strong"),zBr=o("bert"),WBr=o(" \u2014 "),Hz=a("a"),QBr=o("FlaxBertForNextSentencePrediction"),HBr=o(" (BERT model)"),UBr=l(),pTe=a("p"),JBr=o("Examples:"),YBr=l(),f(OL.$$.fragment),cSe=l(),Bf=a("h2"),nE=a("a"),_Te=a("span"),f(XL.$$.fragment),KBr=l(),uTe=a("span"),ZBr=o("FlaxAutoModelForImageClassification"),fSe=l(),Or=a("div"),f(VL.$$.fragment),exr=l(),xf=a("p"),oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bTe=a("code"),rxr=o("from_pretrained()"),txr=o("class method or the "),vTe=a("code"),axr=o("from_config()"),nxr=o(`class
method.`),sxr=l(),zL=a("p"),lxr=o("This class cannot be instantiated directly using "),TTe=a("code"),ixr=o("__init__()"),dxr=o(" (throws an error)."),cxr=l(),It=a("div"),f(WL.$$.fragment),fxr=l(),FTe=a("p"),mxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gxr=l(),kf=a("p"),hxr=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),pxr=o("not"),_xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MTe=a("code"),uxr=o("from_pretrained()"),bxr=o("to load the model weights."),vxr=l(),ETe=a("p"),Txr=o("Examples:"),Fxr=l(),f(QL.$$.fragment),Cxr=l(),Do=a("div"),f(HL.$$.fragment),Mxr=l(),yTe=a("p"),Exr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yxr=l(),jn=a("p"),wxr=o("The model class to instantiate is selected based on the "),wTe=a("code"),Axr=o("model_type"),Lxr=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),Bxr=o("pretrained_model_name_or_path"),xxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),kxr=o("pretrained_model_name_or_path"),Rxr=o(":"),Sxr=l(),UL=a("ul"),sE=a("li"),BTe=a("strong"),Pxr=o("beit"),$xr=o(" \u2014 "),Uz=a("a"),Ixr=o("FlaxBeitForImageClassification"),Dxr=o(" (BEiT model)"),Nxr=l(),lE=a("li"),xTe=a("strong"),jxr=o("vit"),qxr=o(" \u2014 "),Jz=a("a"),Gxr=o("FlaxViTForImageClassification"),Oxr=o(" (ViT model)"),Xxr=l(),kTe=a("p"),Vxr=o("Examples:"),zxr=l(),f(JL.$$.fragment),mSe=l(),Rf=a("h2"),iE=a("a"),RTe=a("span"),f(YL.$$.fragment),Wxr=l(),STe=a("span"),Qxr=o("FlaxAutoModelForVision2Seq"),gSe=l(),Xr=a("div"),f(KL.$$.fragment),Hxr=l(),Sf=a("p"),Uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PTe=a("code"),Jxr=o("from_pretrained()"),Yxr=o("class method or the "),$Te=a("code"),Kxr=o("from_config()"),Zxr=o(`class
method.`),ekr=l(),ZL=a("p"),okr=o("This class cannot be instantiated directly using "),ITe=a("code"),rkr=o("__init__()"),tkr=o(" (throws an error)."),akr=l(),Dt=a("div"),f(e7.$$.fragment),nkr=l(),DTe=a("p"),skr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lkr=l(),Pf=a("p"),ikr=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),dkr=o("not"),ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jTe=a("code"),fkr=o("from_pretrained()"),mkr=o("to load the model weights."),gkr=l(),qTe=a("p"),hkr=o("Examples:"),pkr=l(),f(o7.$$.fragment),_kr=l(),No=a("div"),f(r7.$$.fragment),ukr=l(),GTe=a("p"),bkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vkr=l(),qn=a("p"),Tkr=o("The model class to instantiate is selected based on the "),OTe=a("code"),Fkr=o("model_type"),Ckr=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),Mkr=o("pretrained_model_name_or_path"),Ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),ykr=o("pretrained_model_name_or_path"),wkr=o(":"),Akr=l(),zTe=a("ul"),dE=a("li"),WTe=a("strong"),Lkr=o("vision-encoder-decoder"),Bkr=o(" \u2014 "),Yz=a("a"),xkr=o("FlaxVisionEncoderDecoderModel"),kkr=o(" (Vision Encoder decoder model)"),Rkr=l(),QTe=a("p"),Skr=o("Examples:"),Pkr=l(),f(t7.$$.fragment),this.h()},l(c){const u=GMt('[data-svelte="svelte-1phssyn"]',document.head);K=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var a7=s(de);Ee=n(a7,"A",{id:!0,class:!0,href:!0});var HTe=s(Ee);lo=n(HTe,"SPAN",{});var UTe=s(lo);m(fe.$$.fragment,UTe),UTe.forEach(t),HTe.forEach(t),Ce=i(a7),Vo=n(a7,"SPAN",{});var Ikr=s(Vo);Ii=r(Ikr,"Auto Classes"),Ikr.forEach(t),a7.forEach(t),Df=i(c),fa=n(c,"P",{});var pSe=s(fa);Di=r(pSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(pSe,"CODE",{});var Dkr=s(Ni);d3=r(Dkr,"from_pretrained()"),Dkr.forEach(t),Nf=r(pSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),pSe.forEach(t),Be=i(c),co=n(c,"P",{});var cE=s(co);ji=r(cE,"Instantiating one of "),Gn=n(cE,"A",{href:!0});var Nkr=s(Gn);c3=r(Nkr,"AutoConfig"),Nkr.forEach(t),On=r(cE,", "),Xn=n(cE,"A",{href:!0});var jkr=s(Xn);f3=r(jkr,"AutoModel"),jkr.forEach(t),qi=r(cE,`, and
`),Vn=n(cE,"A",{href:!0});var qkr=s(Vn);m3=r(qkr,"AutoTokenizer"),qkr.forEach(t),Gi=r(cE," will directly create a class of the relevant architecture. For instance"),cE.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),pe=n(c,"P",{});var _Se=s(pe);o8=r(_Se,"will create a model that is an instance of "),Oi=n(_Se,"A",{href:!0});var Gkr=s(Oi);r8=r(Gkr,"BertModel"),Gkr.forEach(t),t8=r(_Se,"."),_Se.forEach(t),zo=i(c),Ga=n(c,"P",{});var uSe=s(Ga);a8=r(uSe,"There is one class of "),qf=n(uSe,"CODE",{});var Okr=s(qf);n8=r(Okr,"AutoModel"),Okr.forEach(t),w$e=r(uSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uSe.forEach(t),gke=i(c),Xi=n(c,"H2",{class:!0});var bSe=s(Xi);Gf=n(bSe,"A",{id:!0,class:!0,href:!0});var Xkr=s(Gf);zQ=n(Xkr,"SPAN",{});var Vkr=s(zQ);m(g3.$$.fragment,Vkr),Vkr.forEach(t),Xkr.forEach(t),A$e=i(bSe),WQ=n(bSe,"SPAN",{});var zkr=s(WQ);L$e=r(zkr,"Extending the Auto Classes"),zkr.forEach(t),bSe.forEach(t),hke=i(c),zn=n(c,"P",{});var Kz=s(zn);B$e=r(Kz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QQ=n(Kz,"CODE",{});var Wkr=s(QQ);x$e=r(Wkr,"NewModel"),Wkr.forEach(t),k$e=r(Kz,", make sure you have a "),HQ=n(Kz,"CODE",{});var Qkr=s(HQ);R$e=r(Qkr,"NewModelConfig"),Qkr.forEach(t),S$e=r(Kz,` then you can add those to the auto
classes like this:`),Kz.forEach(t),pke=i(c),m(h3.$$.fragment,c),_ke=i(c),s8=n(c,"P",{});var Hkr=s(s8);P$e=r(Hkr,"You will then be able to use the auto classes like you would usually do!"),Hkr.forEach(t),uke=i(c),m(Of.$$.fragment,c),bke=i(c),Vi=n(c,"H2",{class:!0});var vSe=s(Vi);Xf=n(vSe,"A",{id:!0,class:!0,href:!0});var Ukr=s(Xf);UQ=n(Ukr,"SPAN",{});var Jkr=s(UQ);m(p3.$$.fragment,Jkr),Jkr.forEach(t),Ukr.forEach(t),$$e=i(vSe),JQ=n(vSe,"SPAN",{});var Ykr=s(JQ);I$e=r(Ykr,"AutoConfig"),Ykr.forEach(t),vSe.forEach(t),vke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(_3.$$.fragment,Os),D$e=i(Os),u3=n(Os,"P",{});var TSe=s(u3);N$e=r(TSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),l8=n(TSe,"A",{href:!0});var Kkr=s(l8);j$e=r(Kkr,"from_pretrained()"),Kkr.forEach(t),q$e=r(TSe," class method."),TSe.forEach(t),G$e=i(Os),b3=n(Os,"P",{});var FSe=s(b3);O$e=r(FSe,"This class cannot be instantiated directly using "),YQ=n(FSe,"CODE",{});var Zkr=s(YQ);X$e=r(Zkr,"__init__()"),Zkr.forEach(t),V$e=r(FSe," (throws an error)."),FSe.forEach(t),z$e=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(v3.$$.fragment,ga),W$e=i(ga),KQ=n(ga,"P",{});var eRr=s(KQ);Q$e=r(eRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),eRr.forEach(t),H$e=i(ga),zi=n(ga,"P",{});var Zz=s(zi);U$e=r(Zz,"The configuration class to instantiate is selected based on the "),ZQ=n(Zz,"CODE",{});var oRr=s(ZQ);J$e=r(oRr,"model_type"),oRr.forEach(t),Y$e=r(Zz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),eH=n(Zz,"CODE",{});var rRr=s(eH);K$e=r(rRr,"pretrained_model_name_or_path"),rRr.forEach(t),Z$e=r(Zz,":"),Zz.forEach(t),eIe=i(ga),v=n(ga,"UL",{});var T=s(v);Vf=n(T,"LI",{});var JTe=s(Vf);oH=n(JTe,"STRONG",{});var tRr=s(oH);oIe=r(tRr,"albert"),tRr.forEach(t),rIe=r(JTe," \u2014 "),i8=n(JTe,"A",{href:!0});var aRr=s(i8);tIe=r(aRr,"AlbertConfig"),aRr.forEach(t),aIe=r(JTe," (ALBERT model)"),JTe.forEach(t),nIe=i(T),zf=n(T,"LI",{});var YTe=s(zf);rH=n(YTe,"STRONG",{});var nRr=s(rH);sIe=r(nRr,"bart"),nRr.forEach(t),lIe=r(YTe," \u2014 "),d8=n(YTe,"A",{href:!0});var sRr=s(d8);iIe=r(sRr,"BartConfig"),sRr.forEach(t),dIe=r(YTe," (BART model)"),YTe.forEach(t),cIe=i(T),Wf=n(T,"LI",{});var KTe=s(Wf);tH=n(KTe,"STRONG",{});var lRr=s(tH);fIe=r(lRr,"beit"),lRr.forEach(t),mIe=r(KTe," \u2014 "),c8=n(KTe,"A",{href:!0});var iRr=s(c8);gIe=r(iRr,"BeitConfig"),iRr.forEach(t),hIe=r(KTe," (BEiT model)"),KTe.forEach(t),pIe=i(T),Qf=n(T,"LI",{});var ZTe=s(Qf);aH=n(ZTe,"STRONG",{});var dRr=s(aH);_Ie=r(dRr,"bert"),dRr.forEach(t),uIe=r(ZTe," \u2014 "),f8=n(ZTe,"A",{href:!0});var cRr=s(f8);bIe=r(cRr,"BertConfig"),cRr.forEach(t),vIe=r(ZTe," (BERT model)"),ZTe.forEach(t),TIe=i(T),Hf=n(T,"LI",{});var eFe=s(Hf);nH=n(eFe,"STRONG",{});var fRr=s(nH);FIe=r(fRr,"bert-generation"),fRr.forEach(t),CIe=r(eFe," \u2014 "),m8=n(eFe,"A",{href:!0});var mRr=s(m8);MIe=r(mRr,"BertGenerationConfig"),mRr.forEach(t),EIe=r(eFe," (Bert Generation model)"),eFe.forEach(t),yIe=i(T),Uf=n(T,"LI",{});var oFe=s(Uf);sH=n(oFe,"STRONG",{});var gRr=s(sH);wIe=r(gRr,"big_bird"),gRr.forEach(t),AIe=r(oFe," \u2014 "),g8=n(oFe,"A",{href:!0});var hRr=s(g8);LIe=r(hRr,"BigBirdConfig"),hRr.forEach(t),BIe=r(oFe," (BigBird model)"),oFe.forEach(t),xIe=i(T),Jf=n(T,"LI",{});var rFe=s(Jf);lH=n(rFe,"STRONG",{});var pRr=s(lH);kIe=r(pRr,"bigbird_pegasus"),pRr.forEach(t),RIe=r(rFe," \u2014 "),h8=n(rFe,"A",{href:!0});var _Rr=s(h8);SIe=r(_Rr,"BigBirdPegasusConfig"),_Rr.forEach(t),PIe=r(rFe," (BigBirdPegasus model)"),rFe.forEach(t),$Ie=i(T),Yf=n(T,"LI",{});var tFe=s(Yf);iH=n(tFe,"STRONG",{});var uRr=s(iH);IIe=r(uRr,"blenderbot"),uRr.forEach(t),DIe=r(tFe," \u2014 "),p8=n(tFe,"A",{href:!0});var bRr=s(p8);NIe=r(bRr,"BlenderbotConfig"),bRr.forEach(t),jIe=r(tFe," (Blenderbot model)"),tFe.forEach(t),qIe=i(T),Kf=n(T,"LI",{});var aFe=s(Kf);dH=n(aFe,"STRONG",{});var vRr=s(dH);GIe=r(vRr,"blenderbot-small"),vRr.forEach(t),OIe=r(aFe," \u2014 "),_8=n(aFe,"A",{href:!0});var TRr=s(_8);XIe=r(TRr,"BlenderbotSmallConfig"),TRr.forEach(t),VIe=r(aFe," (BlenderbotSmall model)"),aFe.forEach(t),zIe=i(T),Zf=n(T,"LI",{});var nFe=s(Zf);cH=n(nFe,"STRONG",{});var FRr=s(cH);WIe=r(FRr,"camembert"),FRr.forEach(t),QIe=r(nFe," \u2014 "),u8=n(nFe,"A",{href:!0});var CRr=s(u8);HIe=r(CRr,"CamembertConfig"),CRr.forEach(t),UIe=r(nFe," (CamemBERT model)"),nFe.forEach(t),JIe=i(T),em=n(T,"LI",{});var sFe=s(em);fH=n(sFe,"STRONG",{});var MRr=s(fH);YIe=r(MRr,"canine"),MRr.forEach(t),KIe=r(sFe," \u2014 "),b8=n(sFe,"A",{href:!0});var ERr=s(b8);ZIe=r(ERr,"CanineConfig"),ERr.forEach(t),eDe=r(sFe," (Canine model)"),sFe.forEach(t),oDe=i(T),om=n(T,"LI",{});var lFe=s(om);mH=n(lFe,"STRONG",{});var yRr=s(mH);rDe=r(yRr,"clip"),yRr.forEach(t),tDe=r(lFe," \u2014 "),v8=n(lFe,"A",{href:!0});var wRr=s(v8);aDe=r(wRr,"CLIPConfig"),wRr.forEach(t),nDe=r(lFe," (CLIP model)"),lFe.forEach(t),sDe=i(T),rm=n(T,"LI",{});var iFe=s(rm);gH=n(iFe,"STRONG",{});var ARr=s(gH);lDe=r(ARr,"convbert"),ARr.forEach(t),iDe=r(iFe," \u2014 "),T8=n(iFe,"A",{href:!0});var LRr=s(T8);dDe=r(LRr,"ConvBertConfig"),LRr.forEach(t),cDe=r(iFe," (ConvBERT model)"),iFe.forEach(t),fDe=i(T),tm=n(T,"LI",{});var dFe=s(tm);hH=n(dFe,"STRONG",{});var BRr=s(hH);mDe=r(BRr,"convnext"),BRr.forEach(t),gDe=r(dFe," \u2014 "),F8=n(dFe,"A",{href:!0});var xRr=s(F8);hDe=r(xRr,"ConvNextConfig"),xRr.forEach(t),pDe=r(dFe," (ConvNext model)"),dFe.forEach(t),_De=i(T),am=n(T,"LI",{});var cFe=s(am);pH=n(cFe,"STRONG",{});var kRr=s(pH);uDe=r(kRr,"ctrl"),kRr.forEach(t),bDe=r(cFe," \u2014 "),C8=n(cFe,"A",{href:!0});var RRr=s(C8);vDe=r(RRr,"CTRLConfig"),RRr.forEach(t),TDe=r(cFe," (CTRL model)"),cFe.forEach(t),FDe=i(T),nm=n(T,"LI",{});var fFe=s(nm);_H=n(fFe,"STRONG",{});var SRr=s(_H);CDe=r(SRr,"data2vec-audio"),SRr.forEach(t),MDe=r(fFe," \u2014 "),M8=n(fFe,"A",{href:!0});var PRr=s(M8);EDe=r(PRr,"Data2VecAudioConfig"),PRr.forEach(t),yDe=r(fFe," (Data2VecAudio model)"),fFe.forEach(t),wDe=i(T),sm=n(T,"LI",{});var mFe=s(sm);uH=n(mFe,"STRONG",{});var $Rr=s(uH);ADe=r($Rr,"data2vec-text"),$Rr.forEach(t),LDe=r(mFe," \u2014 "),E8=n(mFe,"A",{href:!0});var IRr=s(E8);BDe=r(IRr,"Data2VecTextConfig"),IRr.forEach(t),xDe=r(mFe," (Data2VecText model)"),mFe.forEach(t),kDe=i(T),lm=n(T,"LI",{});var gFe=s(lm);bH=n(gFe,"STRONG",{});var DRr=s(bH);RDe=r(DRr,"deberta"),DRr.forEach(t),SDe=r(gFe," \u2014 "),y8=n(gFe,"A",{href:!0});var NRr=s(y8);PDe=r(NRr,"DebertaConfig"),NRr.forEach(t),$De=r(gFe," (DeBERTa model)"),gFe.forEach(t),IDe=i(T),im=n(T,"LI",{});var hFe=s(im);vH=n(hFe,"STRONG",{});var jRr=s(vH);DDe=r(jRr,"deberta-v2"),jRr.forEach(t),NDe=r(hFe," \u2014 "),w8=n(hFe,"A",{href:!0});var qRr=s(w8);jDe=r(qRr,"DebertaV2Config"),qRr.forEach(t),qDe=r(hFe," (DeBERTa-v2 model)"),hFe.forEach(t),GDe=i(T),dm=n(T,"LI",{});var pFe=s(dm);TH=n(pFe,"STRONG",{});var GRr=s(TH);ODe=r(GRr,"decision_transformer"),GRr.forEach(t),XDe=r(pFe," \u2014 "),A8=n(pFe,"A",{href:!0});var ORr=s(A8);VDe=r(ORr,"DecisionTransformerConfig"),ORr.forEach(t),zDe=r(pFe," (Decision Transformer model)"),pFe.forEach(t),WDe=i(T),cm=n(T,"LI",{});var _Fe=s(cm);FH=n(_Fe,"STRONG",{});var XRr=s(FH);QDe=r(XRr,"deit"),XRr.forEach(t),HDe=r(_Fe," \u2014 "),L8=n(_Fe,"A",{href:!0});var VRr=s(L8);UDe=r(VRr,"DeiTConfig"),VRr.forEach(t),JDe=r(_Fe," (DeiT model)"),_Fe.forEach(t),YDe=i(T),fm=n(T,"LI",{});var uFe=s(fm);CH=n(uFe,"STRONG",{});var zRr=s(CH);KDe=r(zRr,"detr"),zRr.forEach(t),ZDe=r(uFe," \u2014 "),B8=n(uFe,"A",{href:!0});var WRr=s(B8);eNe=r(WRr,"DetrConfig"),WRr.forEach(t),oNe=r(uFe," (DETR model)"),uFe.forEach(t),rNe=i(T),mm=n(T,"LI",{});var bFe=s(mm);MH=n(bFe,"STRONG",{});var QRr=s(MH);tNe=r(QRr,"distilbert"),QRr.forEach(t),aNe=r(bFe," \u2014 "),x8=n(bFe,"A",{href:!0});var HRr=s(x8);nNe=r(HRr,"DistilBertConfig"),HRr.forEach(t),sNe=r(bFe," (DistilBERT model)"),bFe.forEach(t),lNe=i(T),gm=n(T,"LI",{});var vFe=s(gm);EH=n(vFe,"STRONG",{});var URr=s(EH);iNe=r(URr,"dpr"),URr.forEach(t),dNe=r(vFe," \u2014 "),k8=n(vFe,"A",{href:!0});var JRr=s(k8);cNe=r(JRr,"DPRConfig"),JRr.forEach(t),fNe=r(vFe," (DPR model)"),vFe.forEach(t),mNe=i(T),hm=n(T,"LI",{});var TFe=s(hm);yH=n(TFe,"STRONG",{});var YRr=s(yH);gNe=r(YRr,"dpt"),YRr.forEach(t),hNe=r(TFe," \u2014 "),R8=n(TFe,"A",{href:!0});var KRr=s(R8);pNe=r(KRr,"DPTConfig"),KRr.forEach(t),_Ne=r(TFe," (DPT model)"),TFe.forEach(t),uNe=i(T),pm=n(T,"LI",{});var FFe=s(pm);wH=n(FFe,"STRONG",{});var ZRr=s(wH);bNe=r(ZRr,"electra"),ZRr.forEach(t),vNe=r(FFe," \u2014 "),S8=n(FFe,"A",{href:!0});var eSr=s(S8);TNe=r(eSr,"ElectraConfig"),eSr.forEach(t),FNe=r(FFe," (ELECTRA model)"),FFe.forEach(t),CNe=i(T),_m=n(T,"LI",{});var CFe=s(_m);AH=n(CFe,"STRONG",{});var oSr=s(AH);MNe=r(oSr,"encoder-decoder"),oSr.forEach(t),ENe=r(CFe," \u2014 "),P8=n(CFe,"A",{href:!0});var rSr=s(P8);yNe=r(rSr,"EncoderDecoderConfig"),rSr.forEach(t),wNe=r(CFe," (Encoder decoder model)"),CFe.forEach(t),ANe=i(T),um=n(T,"LI",{});var MFe=s(um);LH=n(MFe,"STRONG",{});var tSr=s(LH);LNe=r(tSr,"flaubert"),tSr.forEach(t),BNe=r(MFe," \u2014 "),$8=n(MFe,"A",{href:!0});var aSr=s($8);xNe=r(aSr,"FlaubertConfig"),aSr.forEach(t),kNe=r(MFe," (FlauBERT model)"),MFe.forEach(t),RNe=i(T),bm=n(T,"LI",{});var EFe=s(bm);BH=n(EFe,"STRONG",{});var nSr=s(BH);SNe=r(nSr,"fnet"),nSr.forEach(t),PNe=r(EFe," \u2014 "),I8=n(EFe,"A",{href:!0});var sSr=s(I8);$Ne=r(sSr,"FNetConfig"),sSr.forEach(t),INe=r(EFe," (FNet model)"),EFe.forEach(t),DNe=i(T),vm=n(T,"LI",{});var yFe=s(vm);xH=n(yFe,"STRONG",{});var lSr=s(xH);NNe=r(lSr,"fsmt"),lSr.forEach(t),jNe=r(yFe," \u2014 "),D8=n(yFe,"A",{href:!0});var iSr=s(D8);qNe=r(iSr,"FSMTConfig"),iSr.forEach(t),GNe=r(yFe," (FairSeq Machine-Translation model)"),yFe.forEach(t),ONe=i(T),Tm=n(T,"LI",{});var wFe=s(Tm);kH=n(wFe,"STRONG",{});var dSr=s(kH);XNe=r(dSr,"funnel"),dSr.forEach(t),VNe=r(wFe," \u2014 "),N8=n(wFe,"A",{href:!0});var cSr=s(N8);zNe=r(cSr,"FunnelConfig"),cSr.forEach(t),WNe=r(wFe," (Funnel Transformer model)"),wFe.forEach(t),QNe=i(T),Fm=n(T,"LI",{});var AFe=s(Fm);RH=n(AFe,"STRONG",{});var fSr=s(RH);HNe=r(fSr,"glpn"),fSr.forEach(t),UNe=r(AFe," \u2014 "),j8=n(AFe,"A",{href:!0});var mSr=s(j8);JNe=r(mSr,"GLPNConfig"),mSr.forEach(t),YNe=r(AFe," (GLPN model)"),AFe.forEach(t),KNe=i(T),Cm=n(T,"LI",{});var LFe=s(Cm);SH=n(LFe,"STRONG",{});var gSr=s(SH);ZNe=r(gSr,"gpt2"),gSr.forEach(t),eje=r(LFe," \u2014 "),q8=n(LFe,"A",{href:!0});var hSr=s(q8);oje=r(hSr,"GPT2Config"),hSr.forEach(t),rje=r(LFe," (OpenAI GPT-2 model)"),LFe.forEach(t),tje=i(T),Mm=n(T,"LI",{});var BFe=s(Mm);PH=n(BFe,"STRONG",{});var pSr=s(PH);aje=r(pSr,"gpt_neo"),pSr.forEach(t),nje=r(BFe," \u2014 "),G8=n(BFe,"A",{href:!0});var _Sr=s(G8);sje=r(_Sr,"GPTNeoConfig"),_Sr.forEach(t),lje=r(BFe," (GPT Neo model)"),BFe.forEach(t),ije=i(T),Em=n(T,"LI",{});var xFe=s(Em);$H=n(xFe,"STRONG",{});var uSr=s($H);dje=r(uSr,"gptj"),uSr.forEach(t),cje=r(xFe," \u2014 "),O8=n(xFe,"A",{href:!0});var bSr=s(O8);fje=r(bSr,"GPTJConfig"),bSr.forEach(t),mje=r(xFe," (GPT-J model)"),xFe.forEach(t),gje=i(T),ym=n(T,"LI",{});var kFe=s(ym);IH=n(kFe,"STRONG",{});var vSr=s(IH);hje=r(vSr,"hubert"),vSr.forEach(t),pje=r(kFe," \u2014 "),X8=n(kFe,"A",{href:!0});var TSr=s(X8);_je=r(TSr,"HubertConfig"),TSr.forEach(t),uje=r(kFe," (Hubert model)"),kFe.forEach(t),bje=i(T),wm=n(T,"LI",{});var RFe=s(wm);DH=n(RFe,"STRONG",{});var FSr=s(DH);vje=r(FSr,"ibert"),FSr.forEach(t),Tje=r(RFe," \u2014 "),V8=n(RFe,"A",{href:!0});var CSr=s(V8);Fje=r(CSr,"IBertConfig"),CSr.forEach(t),Cje=r(RFe," (I-BERT model)"),RFe.forEach(t),Mje=i(T),Am=n(T,"LI",{});var SFe=s(Am);NH=n(SFe,"STRONG",{});var MSr=s(NH);Eje=r(MSr,"imagegpt"),MSr.forEach(t),yje=r(SFe," \u2014 "),z8=n(SFe,"A",{href:!0});var ESr=s(z8);wje=r(ESr,"ImageGPTConfig"),ESr.forEach(t),Aje=r(SFe," (ImageGPT model)"),SFe.forEach(t),Lje=i(T),Lm=n(T,"LI",{});var PFe=s(Lm);jH=n(PFe,"STRONG",{});var ySr=s(jH);Bje=r(ySr,"layoutlm"),ySr.forEach(t),xje=r(PFe," \u2014 "),W8=n(PFe,"A",{href:!0});var wSr=s(W8);kje=r(wSr,"LayoutLMConfig"),wSr.forEach(t),Rje=r(PFe," (LayoutLM model)"),PFe.forEach(t),Sje=i(T),Bm=n(T,"LI",{});var $Fe=s(Bm);qH=n($Fe,"STRONG",{});var ASr=s(qH);Pje=r(ASr,"layoutlmv2"),ASr.forEach(t),$je=r($Fe," \u2014 "),Q8=n($Fe,"A",{href:!0});var LSr=s(Q8);Ije=r(LSr,"LayoutLMv2Config"),LSr.forEach(t),Dje=r($Fe," (LayoutLMv2 model)"),$Fe.forEach(t),Nje=i(T),xm=n(T,"LI",{});var IFe=s(xm);GH=n(IFe,"STRONG",{});var BSr=s(GH);jje=r(BSr,"led"),BSr.forEach(t),qje=r(IFe," \u2014 "),H8=n(IFe,"A",{href:!0});var xSr=s(H8);Gje=r(xSr,"LEDConfig"),xSr.forEach(t),Oje=r(IFe," (LED model)"),IFe.forEach(t),Xje=i(T),km=n(T,"LI",{});var DFe=s(km);OH=n(DFe,"STRONG",{});var kSr=s(OH);Vje=r(kSr,"longformer"),kSr.forEach(t),zje=r(DFe," \u2014 "),U8=n(DFe,"A",{href:!0});var RSr=s(U8);Wje=r(RSr,"LongformerConfig"),RSr.forEach(t),Qje=r(DFe," (Longformer model)"),DFe.forEach(t),Hje=i(T),Rm=n(T,"LI",{});var NFe=s(Rm);XH=n(NFe,"STRONG",{});var SSr=s(XH);Uje=r(SSr,"luke"),SSr.forEach(t),Jje=r(NFe," \u2014 "),J8=n(NFe,"A",{href:!0});var PSr=s(J8);Yje=r(PSr,"LukeConfig"),PSr.forEach(t),Kje=r(NFe," (LUKE model)"),NFe.forEach(t),Zje=i(T),Sm=n(T,"LI",{});var jFe=s(Sm);VH=n(jFe,"STRONG",{});var $Sr=s(VH);eqe=r($Sr,"lxmert"),$Sr.forEach(t),oqe=r(jFe," \u2014 "),Y8=n(jFe,"A",{href:!0});var ISr=s(Y8);rqe=r(ISr,"LxmertConfig"),ISr.forEach(t),tqe=r(jFe," (LXMERT model)"),jFe.forEach(t),aqe=i(T),Pm=n(T,"LI",{});var qFe=s(Pm);zH=n(qFe,"STRONG",{});var DSr=s(zH);nqe=r(DSr,"m2m_100"),DSr.forEach(t),sqe=r(qFe," \u2014 "),K8=n(qFe,"A",{href:!0});var NSr=s(K8);lqe=r(NSr,"M2M100Config"),NSr.forEach(t),iqe=r(qFe," (M2M100 model)"),qFe.forEach(t),dqe=i(T),$m=n(T,"LI",{});var GFe=s($m);WH=n(GFe,"STRONG",{});var jSr=s(WH);cqe=r(jSr,"marian"),jSr.forEach(t),fqe=r(GFe," \u2014 "),Z8=n(GFe,"A",{href:!0});var qSr=s(Z8);mqe=r(qSr,"MarianConfig"),qSr.forEach(t),gqe=r(GFe," (Marian model)"),GFe.forEach(t),hqe=i(T),Im=n(T,"LI",{});var OFe=s(Im);QH=n(OFe,"STRONG",{});var GSr=s(QH);pqe=r(GSr,"maskformer"),GSr.forEach(t),_qe=r(OFe," \u2014 "),eB=n(OFe,"A",{href:!0});var OSr=s(eB);uqe=r(OSr,"MaskFormerConfig"),OSr.forEach(t),bqe=r(OFe," (MaskFormer model)"),OFe.forEach(t),vqe=i(T),Dm=n(T,"LI",{});var XFe=s(Dm);HH=n(XFe,"STRONG",{});var XSr=s(HH);Tqe=r(XSr,"mbart"),XSr.forEach(t),Fqe=r(XFe," \u2014 "),oB=n(XFe,"A",{href:!0});var VSr=s(oB);Cqe=r(VSr,"MBartConfig"),VSr.forEach(t),Mqe=r(XFe," (mBART model)"),XFe.forEach(t),Eqe=i(T),Nm=n(T,"LI",{});var VFe=s(Nm);UH=n(VFe,"STRONG",{});var zSr=s(UH);yqe=r(zSr,"megatron-bert"),zSr.forEach(t),wqe=r(VFe," \u2014 "),rB=n(VFe,"A",{href:!0});var WSr=s(rB);Aqe=r(WSr,"MegatronBertConfig"),WSr.forEach(t),Lqe=r(VFe," (MegatronBert model)"),VFe.forEach(t),Bqe=i(T),jm=n(T,"LI",{});var zFe=s(jm);JH=n(zFe,"STRONG",{});var QSr=s(JH);xqe=r(QSr,"mobilebert"),QSr.forEach(t),kqe=r(zFe," \u2014 "),tB=n(zFe,"A",{href:!0});var HSr=s(tB);Rqe=r(HSr,"MobileBertConfig"),HSr.forEach(t),Sqe=r(zFe," (MobileBERT model)"),zFe.forEach(t),Pqe=i(T),qm=n(T,"LI",{});var WFe=s(qm);YH=n(WFe,"STRONG",{});var USr=s(YH);$qe=r(USr,"mpnet"),USr.forEach(t),Iqe=r(WFe," \u2014 "),aB=n(WFe,"A",{href:!0});var JSr=s(aB);Dqe=r(JSr,"MPNetConfig"),JSr.forEach(t),Nqe=r(WFe," (MPNet model)"),WFe.forEach(t),jqe=i(T),Gm=n(T,"LI",{});var QFe=s(Gm);KH=n(QFe,"STRONG",{});var YSr=s(KH);qqe=r(YSr,"mt5"),YSr.forEach(t),Gqe=r(QFe," \u2014 "),nB=n(QFe,"A",{href:!0});var KSr=s(nB);Oqe=r(KSr,"MT5Config"),KSr.forEach(t),Xqe=r(QFe," (mT5 model)"),QFe.forEach(t),Vqe=i(T),Om=n(T,"LI",{});var HFe=s(Om);ZH=n(HFe,"STRONG",{});var ZSr=s(ZH);zqe=r(ZSr,"nystromformer"),ZSr.forEach(t),Wqe=r(HFe," \u2014 "),sB=n(HFe,"A",{href:!0});var ePr=s(sB);Qqe=r(ePr,"NystromformerConfig"),ePr.forEach(t),Hqe=r(HFe," (Nystromformer model)"),HFe.forEach(t),Uqe=i(T),Xm=n(T,"LI",{});var UFe=s(Xm);eU=n(UFe,"STRONG",{});var oPr=s(eU);Jqe=r(oPr,"openai-gpt"),oPr.forEach(t),Yqe=r(UFe," \u2014 "),lB=n(UFe,"A",{href:!0});var rPr=s(lB);Kqe=r(rPr,"OpenAIGPTConfig"),rPr.forEach(t),Zqe=r(UFe," (OpenAI GPT model)"),UFe.forEach(t),eGe=i(T),Vm=n(T,"LI",{});var JFe=s(Vm);oU=n(JFe,"STRONG",{});var tPr=s(oU);oGe=r(tPr,"pegasus"),tPr.forEach(t),rGe=r(JFe," \u2014 "),iB=n(JFe,"A",{href:!0});var aPr=s(iB);tGe=r(aPr,"PegasusConfig"),aPr.forEach(t),aGe=r(JFe," (Pegasus model)"),JFe.forEach(t),nGe=i(T),zm=n(T,"LI",{});var YFe=s(zm);rU=n(YFe,"STRONG",{});var nPr=s(rU);sGe=r(nPr,"perceiver"),nPr.forEach(t),lGe=r(YFe," \u2014 "),dB=n(YFe,"A",{href:!0});var sPr=s(dB);iGe=r(sPr,"PerceiverConfig"),sPr.forEach(t),dGe=r(YFe," (Perceiver model)"),YFe.forEach(t),cGe=i(T),Wm=n(T,"LI",{});var KFe=s(Wm);tU=n(KFe,"STRONG",{});var lPr=s(tU);fGe=r(lPr,"plbart"),lPr.forEach(t),mGe=r(KFe," \u2014 "),cB=n(KFe,"A",{href:!0});var iPr=s(cB);gGe=r(iPr,"PLBartConfig"),iPr.forEach(t),hGe=r(KFe," (PLBart model)"),KFe.forEach(t),pGe=i(T),Qm=n(T,"LI",{});var ZFe=s(Qm);aU=n(ZFe,"STRONG",{});var dPr=s(aU);_Ge=r(dPr,"poolformer"),dPr.forEach(t),uGe=r(ZFe," \u2014 "),fB=n(ZFe,"A",{href:!0});var cPr=s(fB);bGe=r(cPr,"PoolFormerConfig"),cPr.forEach(t),vGe=r(ZFe," (PoolFormer model)"),ZFe.forEach(t),TGe=i(T),Hm=n(T,"LI",{});var eCe=s(Hm);nU=n(eCe,"STRONG",{});var fPr=s(nU);FGe=r(fPr,"prophetnet"),fPr.forEach(t),CGe=r(eCe," \u2014 "),mB=n(eCe,"A",{href:!0});var mPr=s(mB);MGe=r(mPr,"ProphetNetConfig"),mPr.forEach(t),EGe=r(eCe," (ProphetNet model)"),eCe.forEach(t),yGe=i(T),Um=n(T,"LI",{});var oCe=s(Um);sU=n(oCe,"STRONG",{});var gPr=s(sU);wGe=r(gPr,"qdqbert"),gPr.forEach(t),AGe=r(oCe," \u2014 "),gB=n(oCe,"A",{href:!0});var hPr=s(gB);LGe=r(hPr,"QDQBertConfig"),hPr.forEach(t),BGe=r(oCe," (QDQBert model)"),oCe.forEach(t),xGe=i(T),Jm=n(T,"LI",{});var rCe=s(Jm);lU=n(rCe,"STRONG",{});var pPr=s(lU);kGe=r(pPr,"rag"),pPr.forEach(t),RGe=r(rCe," \u2014 "),hB=n(rCe,"A",{href:!0});var _Pr=s(hB);SGe=r(_Pr,"RagConfig"),_Pr.forEach(t),PGe=r(rCe," (RAG model)"),rCe.forEach(t),$Ge=i(T),Ym=n(T,"LI",{});var tCe=s(Ym);iU=n(tCe,"STRONG",{});var uPr=s(iU);IGe=r(uPr,"realm"),uPr.forEach(t),DGe=r(tCe," \u2014 "),pB=n(tCe,"A",{href:!0});var bPr=s(pB);NGe=r(bPr,"RealmConfig"),bPr.forEach(t),jGe=r(tCe," (Realm model)"),tCe.forEach(t),qGe=i(T),Km=n(T,"LI",{});var aCe=s(Km);dU=n(aCe,"STRONG",{});var vPr=s(dU);GGe=r(vPr,"reformer"),vPr.forEach(t),OGe=r(aCe," \u2014 "),_B=n(aCe,"A",{href:!0});var TPr=s(_B);XGe=r(TPr,"ReformerConfig"),TPr.forEach(t),VGe=r(aCe," (Reformer model)"),aCe.forEach(t),zGe=i(T),Zm=n(T,"LI",{});var nCe=s(Zm);cU=n(nCe,"STRONG",{});var FPr=s(cU);WGe=r(FPr,"rembert"),FPr.forEach(t),QGe=r(nCe," \u2014 "),uB=n(nCe,"A",{href:!0});var CPr=s(uB);HGe=r(CPr,"RemBertConfig"),CPr.forEach(t),UGe=r(nCe," (RemBERT model)"),nCe.forEach(t),JGe=i(T),eg=n(T,"LI",{});var sCe=s(eg);fU=n(sCe,"STRONG",{});var MPr=s(fU);YGe=r(MPr,"resnet"),MPr.forEach(t),KGe=r(sCe," \u2014 "),bB=n(sCe,"A",{href:!0});var EPr=s(bB);ZGe=r(EPr,"ResNetConfig"),EPr.forEach(t),eOe=r(sCe," (ResNet model)"),sCe.forEach(t),oOe=i(T),og=n(T,"LI",{});var lCe=s(og);mU=n(lCe,"STRONG",{});var yPr=s(mU);rOe=r(yPr,"retribert"),yPr.forEach(t),tOe=r(lCe," \u2014 "),vB=n(lCe,"A",{href:!0});var wPr=s(vB);aOe=r(wPr,"RetriBertConfig"),wPr.forEach(t),nOe=r(lCe," (RetriBERT model)"),lCe.forEach(t),sOe=i(T),rg=n(T,"LI",{});var iCe=s(rg);gU=n(iCe,"STRONG",{});var APr=s(gU);lOe=r(APr,"roberta"),APr.forEach(t),iOe=r(iCe," \u2014 "),TB=n(iCe,"A",{href:!0});var LPr=s(TB);dOe=r(LPr,"RobertaConfig"),LPr.forEach(t),cOe=r(iCe," (RoBERTa model)"),iCe.forEach(t),fOe=i(T),tg=n(T,"LI",{});var dCe=s(tg);hU=n(dCe,"STRONG",{});var BPr=s(hU);mOe=r(BPr,"roformer"),BPr.forEach(t),gOe=r(dCe," \u2014 "),FB=n(dCe,"A",{href:!0});var xPr=s(FB);hOe=r(xPr,"RoFormerConfig"),xPr.forEach(t),pOe=r(dCe," (RoFormer model)"),dCe.forEach(t),_Oe=i(T),ag=n(T,"LI",{});var cCe=s(ag);pU=n(cCe,"STRONG",{});var kPr=s(pU);uOe=r(kPr,"segformer"),kPr.forEach(t),bOe=r(cCe," \u2014 "),CB=n(cCe,"A",{href:!0});var RPr=s(CB);vOe=r(RPr,"SegformerConfig"),RPr.forEach(t),TOe=r(cCe," (SegFormer model)"),cCe.forEach(t),FOe=i(T),ng=n(T,"LI",{});var fCe=s(ng);_U=n(fCe,"STRONG",{});var SPr=s(_U);COe=r(SPr,"sew"),SPr.forEach(t),MOe=r(fCe," \u2014 "),MB=n(fCe,"A",{href:!0});var PPr=s(MB);EOe=r(PPr,"SEWConfig"),PPr.forEach(t),yOe=r(fCe," (SEW model)"),fCe.forEach(t),wOe=i(T),sg=n(T,"LI",{});var mCe=s(sg);uU=n(mCe,"STRONG",{});var $Pr=s(uU);AOe=r($Pr,"sew-d"),$Pr.forEach(t),LOe=r(mCe," \u2014 "),EB=n(mCe,"A",{href:!0});var IPr=s(EB);BOe=r(IPr,"SEWDConfig"),IPr.forEach(t),xOe=r(mCe," (SEW-D model)"),mCe.forEach(t),kOe=i(T),lg=n(T,"LI",{});var gCe=s(lg);bU=n(gCe,"STRONG",{});var DPr=s(bU);ROe=r(DPr,"speech-encoder-decoder"),DPr.forEach(t),SOe=r(gCe," \u2014 "),yB=n(gCe,"A",{href:!0});var NPr=s(yB);POe=r(NPr,"SpeechEncoderDecoderConfig"),NPr.forEach(t),$Oe=r(gCe," (Speech Encoder decoder model)"),gCe.forEach(t),IOe=i(T),ig=n(T,"LI",{});var hCe=s(ig);vU=n(hCe,"STRONG",{});var jPr=s(vU);DOe=r(jPr,"speech_to_text"),jPr.forEach(t),NOe=r(hCe," \u2014 "),wB=n(hCe,"A",{href:!0});var qPr=s(wB);jOe=r(qPr,"Speech2TextConfig"),qPr.forEach(t),qOe=r(hCe," (Speech2Text model)"),hCe.forEach(t),GOe=i(T),dg=n(T,"LI",{});var pCe=s(dg);TU=n(pCe,"STRONG",{});var GPr=s(TU);OOe=r(GPr,"speech_to_text_2"),GPr.forEach(t),XOe=r(pCe," \u2014 "),AB=n(pCe,"A",{href:!0});var OPr=s(AB);VOe=r(OPr,"Speech2Text2Config"),OPr.forEach(t),zOe=r(pCe," (Speech2Text2 model)"),pCe.forEach(t),WOe=i(T),cg=n(T,"LI",{});var _Ce=s(cg);FU=n(_Ce,"STRONG",{});var XPr=s(FU);QOe=r(XPr,"splinter"),XPr.forEach(t),HOe=r(_Ce," \u2014 "),LB=n(_Ce,"A",{href:!0});var VPr=s(LB);UOe=r(VPr,"SplinterConfig"),VPr.forEach(t),JOe=r(_Ce," (Splinter model)"),_Ce.forEach(t),YOe=i(T),fg=n(T,"LI",{});var uCe=s(fg);CU=n(uCe,"STRONG",{});var zPr=s(CU);KOe=r(zPr,"squeezebert"),zPr.forEach(t),ZOe=r(uCe," \u2014 "),BB=n(uCe,"A",{href:!0});var WPr=s(BB);eXe=r(WPr,"SqueezeBertConfig"),WPr.forEach(t),oXe=r(uCe," (SqueezeBERT model)"),uCe.forEach(t),rXe=i(T),mg=n(T,"LI",{});var bCe=s(mg);MU=n(bCe,"STRONG",{});var QPr=s(MU);tXe=r(QPr,"swin"),QPr.forEach(t),aXe=r(bCe," \u2014 "),xB=n(bCe,"A",{href:!0});var HPr=s(xB);nXe=r(HPr,"SwinConfig"),HPr.forEach(t),sXe=r(bCe," (Swin model)"),bCe.forEach(t),lXe=i(T),gg=n(T,"LI",{});var vCe=s(gg);EU=n(vCe,"STRONG",{});var UPr=s(EU);iXe=r(UPr,"t5"),UPr.forEach(t),dXe=r(vCe," \u2014 "),kB=n(vCe,"A",{href:!0});var JPr=s(kB);cXe=r(JPr,"T5Config"),JPr.forEach(t),fXe=r(vCe," (T5 model)"),vCe.forEach(t),mXe=i(T),hg=n(T,"LI",{});var TCe=s(hg);yU=n(TCe,"STRONG",{});var YPr=s(yU);gXe=r(YPr,"tapas"),YPr.forEach(t),hXe=r(TCe," \u2014 "),RB=n(TCe,"A",{href:!0});var KPr=s(RB);pXe=r(KPr,"TapasConfig"),KPr.forEach(t),_Xe=r(TCe," (TAPAS model)"),TCe.forEach(t),uXe=i(T),pg=n(T,"LI",{});var FCe=s(pg);wU=n(FCe,"STRONG",{});var ZPr=s(wU);bXe=r(ZPr,"transfo-xl"),ZPr.forEach(t),vXe=r(FCe," \u2014 "),SB=n(FCe,"A",{href:!0});var e$r=s(SB);TXe=r(e$r,"TransfoXLConfig"),e$r.forEach(t),FXe=r(FCe," (Transformer-XL model)"),FCe.forEach(t),CXe=i(T),_g=n(T,"LI",{});var CCe=s(_g);AU=n(CCe,"STRONG",{});var o$r=s(AU);MXe=r(o$r,"trocr"),o$r.forEach(t),EXe=r(CCe," \u2014 "),PB=n(CCe,"A",{href:!0});var r$r=s(PB);yXe=r(r$r,"TrOCRConfig"),r$r.forEach(t),wXe=r(CCe," (TrOCR model)"),CCe.forEach(t),AXe=i(T),ug=n(T,"LI",{});var MCe=s(ug);LU=n(MCe,"STRONG",{});var t$r=s(LU);LXe=r(t$r,"unispeech"),t$r.forEach(t),BXe=r(MCe," \u2014 "),$B=n(MCe,"A",{href:!0});var a$r=s($B);xXe=r(a$r,"UniSpeechConfig"),a$r.forEach(t),kXe=r(MCe," (UniSpeech model)"),MCe.forEach(t),RXe=i(T),bg=n(T,"LI",{});var ECe=s(bg);BU=n(ECe,"STRONG",{});var n$r=s(BU);SXe=r(n$r,"unispeech-sat"),n$r.forEach(t),PXe=r(ECe," \u2014 "),IB=n(ECe,"A",{href:!0});var s$r=s(IB);$Xe=r(s$r,"UniSpeechSatConfig"),s$r.forEach(t),IXe=r(ECe," (UniSpeechSat model)"),ECe.forEach(t),DXe=i(T),vg=n(T,"LI",{});var yCe=s(vg);xU=n(yCe,"STRONG",{});var l$r=s(xU);NXe=r(l$r,"van"),l$r.forEach(t),jXe=r(yCe," \u2014 "),DB=n(yCe,"A",{href:!0});var i$r=s(DB);qXe=r(i$r,"VanConfig"),i$r.forEach(t),GXe=r(yCe," (VAN model)"),yCe.forEach(t),OXe=i(T),Tg=n(T,"LI",{});var wCe=s(Tg);kU=n(wCe,"STRONG",{});var d$r=s(kU);XXe=r(d$r,"vilt"),d$r.forEach(t),VXe=r(wCe," \u2014 "),NB=n(wCe,"A",{href:!0});var c$r=s(NB);zXe=r(c$r,"ViltConfig"),c$r.forEach(t),WXe=r(wCe," (ViLT model)"),wCe.forEach(t),QXe=i(T),Fg=n(T,"LI",{});var ACe=s(Fg);RU=n(ACe,"STRONG",{});var f$r=s(RU);HXe=r(f$r,"vision-encoder-decoder"),f$r.forEach(t),UXe=r(ACe," \u2014 "),jB=n(ACe,"A",{href:!0});var m$r=s(jB);JXe=r(m$r,"VisionEncoderDecoderConfig"),m$r.forEach(t),YXe=r(ACe," (Vision Encoder decoder model)"),ACe.forEach(t),KXe=i(T),Cg=n(T,"LI",{});var LCe=s(Cg);SU=n(LCe,"STRONG",{});var g$r=s(SU);ZXe=r(g$r,"vision-text-dual-encoder"),g$r.forEach(t),eVe=r(LCe," \u2014 "),qB=n(LCe,"A",{href:!0});var h$r=s(qB);oVe=r(h$r,"VisionTextDualEncoderConfig"),h$r.forEach(t),rVe=r(LCe," (VisionTextDualEncoder model)"),LCe.forEach(t),tVe=i(T),Mg=n(T,"LI",{});var BCe=s(Mg);PU=n(BCe,"STRONG",{});var p$r=s(PU);aVe=r(p$r,"visual_bert"),p$r.forEach(t),nVe=r(BCe," \u2014 "),GB=n(BCe,"A",{href:!0});var _$r=s(GB);sVe=r(_$r,"VisualBertConfig"),_$r.forEach(t),lVe=r(BCe," (VisualBert model)"),BCe.forEach(t),iVe=i(T),Eg=n(T,"LI",{});var xCe=s(Eg);$U=n(xCe,"STRONG",{});var u$r=s($U);dVe=r(u$r,"vit"),u$r.forEach(t),cVe=r(xCe," \u2014 "),OB=n(xCe,"A",{href:!0});var b$r=s(OB);fVe=r(b$r,"ViTConfig"),b$r.forEach(t),mVe=r(xCe," (ViT model)"),xCe.forEach(t),gVe=i(T),yg=n(T,"LI",{});var kCe=s(yg);IU=n(kCe,"STRONG",{});var v$r=s(IU);hVe=r(v$r,"vit_mae"),v$r.forEach(t),pVe=r(kCe," \u2014 "),XB=n(kCe,"A",{href:!0});var T$r=s(XB);_Ve=r(T$r,"ViTMAEConfig"),T$r.forEach(t),uVe=r(kCe," (ViTMAE model)"),kCe.forEach(t),bVe=i(T),wg=n(T,"LI",{});var RCe=s(wg);DU=n(RCe,"STRONG",{});var F$r=s(DU);vVe=r(F$r,"wav2vec2"),F$r.forEach(t),TVe=r(RCe," \u2014 "),VB=n(RCe,"A",{href:!0});var C$r=s(VB);FVe=r(C$r,"Wav2Vec2Config"),C$r.forEach(t),CVe=r(RCe," (Wav2Vec2 model)"),RCe.forEach(t),MVe=i(T),Ag=n(T,"LI",{});var SCe=s(Ag);NU=n(SCe,"STRONG",{});var M$r=s(NU);EVe=r(M$r,"wavlm"),M$r.forEach(t),yVe=r(SCe," \u2014 "),zB=n(SCe,"A",{href:!0});var E$r=s(zB);wVe=r(E$r,"WavLMConfig"),E$r.forEach(t),AVe=r(SCe," (WavLM model)"),SCe.forEach(t),LVe=i(T),Lg=n(T,"LI",{});var PCe=s(Lg);jU=n(PCe,"STRONG",{});var y$r=s(jU);BVe=r(y$r,"xglm"),y$r.forEach(t),xVe=r(PCe," \u2014 "),WB=n(PCe,"A",{href:!0});var w$r=s(WB);kVe=r(w$r,"XGLMConfig"),w$r.forEach(t),RVe=r(PCe," (XGLM model)"),PCe.forEach(t),SVe=i(T),Bg=n(T,"LI",{});var $Ce=s(Bg);qU=n($Ce,"STRONG",{});var A$r=s(qU);PVe=r(A$r,"xlm"),A$r.forEach(t),$Ve=r($Ce," \u2014 "),QB=n($Ce,"A",{href:!0});var L$r=s(QB);IVe=r(L$r,"XLMConfig"),L$r.forEach(t),DVe=r($Ce," (XLM model)"),$Ce.forEach(t),NVe=i(T),xg=n(T,"LI",{});var ICe=s(xg);GU=n(ICe,"STRONG",{});var B$r=s(GU);jVe=r(B$r,"xlm-prophetnet"),B$r.forEach(t),qVe=r(ICe," \u2014 "),HB=n(ICe,"A",{href:!0});var x$r=s(HB);GVe=r(x$r,"XLMProphetNetConfig"),x$r.forEach(t),OVe=r(ICe," (XLMProphetNet model)"),ICe.forEach(t),XVe=i(T),kg=n(T,"LI",{});var DCe=s(kg);OU=n(DCe,"STRONG",{});var k$r=s(OU);VVe=r(k$r,"xlm-roberta"),k$r.forEach(t),zVe=r(DCe," \u2014 "),UB=n(DCe,"A",{href:!0});var R$r=s(UB);WVe=r(R$r,"XLMRobertaConfig"),R$r.forEach(t),QVe=r(DCe," (XLM-RoBERTa model)"),DCe.forEach(t),HVe=i(T),Rg=n(T,"LI",{});var NCe=s(Rg);XU=n(NCe,"STRONG",{});var S$r=s(XU);UVe=r(S$r,"xlm-roberta-xl"),S$r.forEach(t),JVe=r(NCe," \u2014 "),JB=n(NCe,"A",{href:!0});var P$r=s(JB);YVe=r(P$r,"XLMRobertaXLConfig"),P$r.forEach(t),KVe=r(NCe," (XLM-RoBERTa-XL model)"),NCe.forEach(t),ZVe=i(T),Sg=n(T,"LI",{});var jCe=s(Sg);VU=n(jCe,"STRONG",{});var $$r=s(VU);eze=r($$r,"xlnet"),$$r.forEach(t),oze=r(jCe," \u2014 "),YB=n(jCe,"A",{href:!0});var I$r=s(YB);rze=r(I$r,"XLNetConfig"),I$r.forEach(t),tze=r(jCe," (XLNet model)"),jCe.forEach(t),aze=i(T),Pg=n(T,"LI",{});var qCe=s(Pg);zU=n(qCe,"STRONG",{});var D$r=s(zU);nze=r(D$r,"yoso"),D$r.forEach(t),sze=r(qCe," \u2014 "),KB=n(qCe,"A",{href:!0});var N$r=s(KB);lze=r(N$r,"YosoConfig"),N$r.forEach(t),ize=r(qCe," (YOSO model)"),qCe.forEach(t),T.forEach(t),dze=i(ga),WU=n(ga,"P",{});var j$r=s(WU);cze=r(j$r,"Examples:"),j$r.forEach(t),fze=i(ga),m(T3.$$.fragment,ga),ga.forEach(t),mze=i(Os),$g=n(Os,"DIV",{class:!0});var CSe=s($g);m(F3.$$.fragment,CSe),gze=i(CSe),QU=n(CSe,"P",{});var q$r=s(QU);hze=r(q$r,"Register a new configuration for this class."),q$r.forEach(t),CSe.forEach(t),Os.forEach(t),Tke=i(c),Wi=n(c,"H2",{class:!0});var MSe=s(Wi);Ig=n(MSe,"A",{id:!0,class:!0,href:!0});var G$r=s(Ig);HU=n(G$r,"SPAN",{});var O$r=s(HU);m(C3.$$.fragment,O$r),O$r.forEach(t),G$r.forEach(t),pze=i(MSe),UU=n(MSe,"SPAN",{});var X$r=s(UU);_ze=r(X$r,"AutoTokenizer"),X$r.forEach(t),MSe.forEach(t),Fke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(M3.$$.fragment,Xs),uze=i(Xs),E3=n(Xs,"P",{});var ESe=s(E3);bze=r(ESe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZB=n(ESe,"A",{href:!0});var V$r=s(ZB);vze=r(V$r,"AutoTokenizer.from_pretrained()"),V$r.forEach(t),Tze=r(ESe," class method."),ESe.forEach(t),Fze=i(Xs),y3=n(Xs,"P",{});var ySe=s(y3);Cze=r(ySe,"This class cannot be instantiated directly using "),JU=n(ySe,"CODE",{});var z$r=s(JU);Mze=r(z$r,"__init__()"),z$r.forEach(t),Eze=r(ySe," (throws an error)."),ySe.forEach(t),yze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(w3.$$.fragment,ha),wze=i(ha),YU=n(ha,"P",{});var W$r=s(YU);Aze=r(W$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),W$r.forEach(t),Lze=i(ha),Oa=n(ha,"P",{});var fE=s(Oa);Bze=r(fE,"The tokenizer class to instantiate is selected based on the "),KU=n(fE,"CODE",{});var Q$r=s(KU);xze=r(Q$r,"model_type"),Q$r.forEach(t),kze=r(fE,` property of the config object (either
passed as an argument or loaded from `),ZU=n(fE,"CODE",{});var H$r=s(ZU);Rze=r(H$r,"pretrained_model_name_or_path"),H$r.forEach(t),Sze=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eJ=n(fE,"CODE",{});var U$r=s(eJ);Pze=r(U$r,"pretrained_model_name_or_path"),U$r.forEach(t),$ze=r(fE,":"),fE.forEach(t),Ize=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var n7=s(Wn);oJ=n(n7,"STRONG",{});var J$r=s(oJ);Dze=r(J$r,"albert"),J$r.forEach(t),Nze=r(n7," \u2014 "),ex=n(n7,"A",{href:!0});var Y$r=s(ex);jze=r(Y$r,"AlbertTokenizer"),Y$r.forEach(t),qze=r(n7," or "),ox=n(n7,"A",{href:!0});var K$r=s(ox);Gze=r(K$r,"AlbertTokenizerFast"),K$r.forEach(t),Oze=r(n7," (ALBERT model)"),n7.forEach(t),Xze=i(y),Qn=n(y,"LI",{});var s7=s(Qn);rJ=n(s7,"STRONG",{});var Z$r=s(rJ);Vze=r(Z$r,"bart"),Z$r.forEach(t),zze=r(s7," \u2014 "),rx=n(s7,"A",{href:!0});var eIr=s(rx);Wze=r(eIr,"BartTokenizer"),eIr.forEach(t),Qze=r(s7," or "),tx=n(s7,"A",{href:!0});var oIr=s(tx);Hze=r(oIr,"BartTokenizerFast"),oIr.forEach(t),Uze=r(s7," (BART model)"),s7.forEach(t),Jze=i(y),Hn=n(y,"LI",{});var l7=s(Hn);tJ=n(l7,"STRONG",{});var rIr=s(tJ);Yze=r(rIr,"barthez"),rIr.forEach(t),Kze=r(l7," \u2014 "),ax=n(l7,"A",{href:!0});var tIr=s(ax);Zze=r(tIr,"BarthezTokenizer"),tIr.forEach(t),eWe=r(l7," or "),nx=n(l7,"A",{href:!0});var aIr=s(nx);oWe=r(aIr,"BarthezTokenizerFast"),aIr.forEach(t),rWe=r(l7," (BARThez model)"),l7.forEach(t),tWe=i(y),Dg=n(y,"LI",{});var GCe=s(Dg);aJ=n(GCe,"STRONG",{});var nIr=s(aJ);aWe=r(nIr,"bartpho"),nIr.forEach(t),nWe=r(GCe," \u2014 "),sx=n(GCe,"A",{href:!0});var sIr=s(sx);sWe=r(sIr,"BartphoTokenizer"),sIr.forEach(t),lWe=r(GCe," (BARTpho model)"),GCe.forEach(t),iWe=i(y),Un=n(y,"LI",{});var i7=s(Un);nJ=n(i7,"STRONG",{});var lIr=s(nJ);dWe=r(lIr,"bert"),lIr.forEach(t),cWe=r(i7," \u2014 "),lx=n(i7,"A",{href:!0});var iIr=s(lx);fWe=r(iIr,"BertTokenizer"),iIr.forEach(t),mWe=r(i7," or "),ix=n(i7,"A",{href:!0});var dIr=s(ix);gWe=r(dIr,"BertTokenizerFast"),dIr.forEach(t),hWe=r(i7," (BERT model)"),i7.forEach(t),pWe=i(y),Ng=n(y,"LI",{});var OCe=s(Ng);sJ=n(OCe,"STRONG",{});var cIr=s(sJ);_We=r(cIr,"bert-generation"),cIr.forEach(t),uWe=r(OCe," \u2014 "),dx=n(OCe,"A",{href:!0});var fIr=s(dx);bWe=r(fIr,"BertGenerationTokenizer"),fIr.forEach(t),vWe=r(OCe," (Bert Generation model)"),OCe.forEach(t),TWe=i(y),jg=n(y,"LI",{});var XCe=s(jg);lJ=n(XCe,"STRONG",{});var mIr=s(lJ);FWe=r(mIr,"bert-japanese"),mIr.forEach(t),CWe=r(XCe," \u2014 "),cx=n(XCe,"A",{href:!0});var gIr=s(cx);MWe=r(gIr,"BertJapaneseTokenizer"),gIr.forEach(t),EWe=r(XCe," (BertJapanese model)"),XCe.forEach(t),yWe=i(y),qg=n(y,"LI",{});var VCe=s(qg);iJ=n(VCe,"STRONG",{});var hIr=s(iJ);wWe=r(hIr,"bertweet"),hIr.forEach(t),AWe=r(VCe," \u2014 "),fx=n(VCe,"A",{href:!0});var pIr=s(fx);LWe=r(pIr,"BertweetTokenizer"),pIr.forEach(t),BWe=r(VCe," (Bertweet model)"),VCe.forEach(t),xWe=i(y),Jn=n(y,"LI",{});var d7=s(Jn);dJ=n(d7,"STRONG",{});var _Ir=s(dJ);kWe=r(_Ir,"big_bird"),_Ir.forEach(t),RWe=r(d7," \u2014 "),mx=n(d7,"A",{href:!0});var uIr=s(mx);SWe=r(uIr,"BigBirdTokenizer"),uIr.forEach(t),PWe=r(d7," or "),gx=n(d7,"A",{href:!0});var bIr=s(gx);$We=r(bIr,"BigBirdTokenizerFast"),bIr.forEach(t),IWe=r(d7," (BigBird model)"),d7.forEach(t),DWe=i(y),Yn=n(y,"LI",{});var c7=s(Yn);cJ=n(c7,"STRONG",{});var vIr=s(cJ);NWe=r(vIr,"bigbird_pegasus"),vIr.forEach(t),jWe=r(c7," \u2014 "),hx=n(c7,"A",{href:!0});var TIr=s(hx);qWe=r(TIr,"PegasusTokenizer"),TIr.forEach(t),GWe=r(c7," or "),px=n(c7,"A",{href:!0});var FIr=s(px);OWe=r(FIr,"PegasusTokenizerFast"),FIr.forEach(t),XWe=r(c7," (BigBirdPegasus model)"),c7.forEach(t),VWe=i(y),Kn=n(y,"LI",{});var f7=s(Kn);fJ=n(f7,"STRONG",{});var CIr=s(fJ);zWe=r(CIr,"blenderbot"),CIr.forEach(t),WWe=r(f7," \u2014 "),_x=n(f7,"A",{href:!0});var MIr=s(_x);QWe=r(MIr,"BlenderbotTokenizer"),MIr.forEach(t),HWe=r(f7," or "),ux=n(f7,"A",{href:!0});var EIr=s(ux);UWe=r(EIr,"BlenderbotTokenizerFast"),EIr.forEach(t),JWe=r(f7," (Blenderbot model)"),f7.forEach(t),YWe=i(y),Gg=n(y,"LI",{});var zCe=s(Gg);mJ=n(zCe,"STRONG",{});var yIr=s(mJ);KWe=r(yIr,"blenderbot-small"),yIr.forEach(t),ZWe=r(zCe," \u2014 "),bx=n(zCe,"A",{href:!0});var wIr=s(bx);eQe=r(wIr,"BlenderbotSmallTokenizer"),wIr.forEach(t),oQe=r(zCe," (BlenderbotSmall model)"),zCe.forEach(t),rQe=i(y),Og=n(y,"LI",{});var WCe=s(Og);gJ=n(WCe,"STRONG",{});var AIr=s(gJ);tQe=r(AIr,"byt5"),AIr.forEach(t),aQe=r(WCe," \u2014 "),vx=n(WCe,"A",{href:!0});var LIr=s(vx);nQe=r(LIr,"ByT5Tokenizer"),LIr.forEach(t),sQe=r(WCe," (ByT5 model)"),WCe.forEach(t),lQe=i(y),Zn=n(y,"LI",{});var m7=s(Zn);hJ=n(m7,"STRONG",{});var BIr=s(hJ);iQe=r(BIr,"camembert"),BIr.forEach(t),dQe=r(m7," \u2014 "),Tx=n(m7,"A",{href:!0});var xIr=s(Tx);cQe=r(xIr,"CamembertTokenizer"),xIr.forEach(t),fQe=r(m7," or "),Fx=n(m7,"A",{href:!0});var kIr=s(Fx);mQe=r(kIr,"CamembertTokenizerFast"),kIr.forEach(t),gQe=r(m7," (CamemBERT model)"),m7.forEach(t),hQe=i(y),Xg=n(y,"LI",{});var QCe=s(Xg);pJ=n(QCe,"STRONG",{});var RIr=s(pJ);pQe=r(RIr,"canine"),RIr.forEach(t),_Qe=r(QCe," \u2014 "),Cx=n(QCe,"A",{href:!0});var SIr=s(Cx);uQe=r(SIr,"CanineTokenizer"),SIr.forEach(t),bQe=r(QCe," (Canine model)"),QCe.forEach(t),vQe=i(y),es=n(y,"LI",{});var g7=s(es);_J=n(g7,"STRONG",{});var PIr=s(_J);TQe=r(PIr,"clip"),PIr.forEach(t),FQe=r(g7," \u2014 "),Mx=n(g7,"A",{href:!0});var $Ir=s(Mx);CQe=r($Ir,"CLIPTokenizer"),$Ir.forEach(t),MQe=r(g7," or "),Ex=n(g7,"A",{href:!0});var IIr=s(Ex);EQe=r(IIr,"CLIPTokenizerFast"),IIr.forEach(t),yQe=r(g7," (CLIP model)"),g7.forEach(t),wQe=i(y),os=n(y,"LI",{});var h7=s(os);uJ=n(h7,"STRONG",{});var DIr=s(uJ);AQe=r(DIr,"convbert"),DIr.forEach(t),LQe=r(h7," \u2014 "),yx=n(h7,"A",{href:!0});var NIr=s(yx);BQe=r(NIr,"ConvBertTokenizer"),NIr.forEach(t),xQe=r(h7," or "),wx=n(h7,"A",{href:!0});var jIr=s(wx);kQe=r(jIr,"ConvBertTokenizerFast"),jIr.forEach(t),RQe=r(h7," (ConvBERT model)"),h7.forEach(t),SQe=i(y),rs=n(y,"LI",{});var p7=s(rs);bJ=n(p7,"STRONG",{});var qIr=s(bJ);PQe=r(qIr,"cpm"),qIr.forEach(t),$Qe=r(p7," \u2014 "),Ax=n(p7,"A",{href:!0});var GIr=s(Ax);IQe=r(GIr,"CpmTokenizer"),GIr.forEach(t),DQe=r(p7," or "),vJ=n(p7,"CODE",{});var OIr=s(vJ);NQe=r(OIr,"CpmTokenizerFast"),OIr.forEach(t),jQe=r(p7," (CPM model)"),p7.forEach(t),qQe=i(y),Vg=n(y,"LI",{});var HCe=s(Vg);TJ=n(HCe,"STRONG",{});var XIr=s(TJ);GQe=r(XIr,"ctrl"),XIr.forEach(t),OQe=r(HCe," \u2014 "),Lx=n(HCe,"A",{href:!0});var VIr=s(Lx);XQe=r(VIr,"CTRLTokenizer"),VIr.forEach(t),VQe=r(HCe," (CTRL model)"),HCe.forEach(t),zQe=i(y),ts=n(y,"LI",{});var _7=s(ts);FJ=n(_7,"STRONG",{});var zIr=s(FJ);WQe=r(zIr,"deberta"),zIr.forEach(t),QQe=r(_7," \u2014 "),Bx=n(_7,"A",{href:!0});var WIr=s(Bx);HQe=r(WIr,"DebertaTokenizer"),WIr.forEach(t),UQe=r(_7," or "),xx=n(_7,"A",{href:!0});var QIr=s(xx);JQe=r(QIr,"DebertaTokenizerFast"),QIr.forEach(t),YQe=r(_7," (DeBERTa model)"),_7.forEach(t),KQe=i(y),zg=n(y,"LI",{});var UCe=s(zg);CJ=n(UCe,"STRONG",{});var HIr=s(CJ);ZQe=r(HIr,"deberta-v2"),HIr.forEach(t),eHe=r(UCe," \u2014 "),kx=n(UCe,"A",{href:!0});var UIr=s(kx);oHe=r(UIr,"DebertaV2Tokenizer"),UIr.forEach(t),rHe=r(UCe," (DeBERTa-v2 model)"),UCe.forEach(t),tHe=i(y),as=n(y,"LI",{});var u7=s(as);MJ=n(u7,"STRONG",{});var JIr=s(MJ);aHe=r(JIr,"distilbert"),JIr.forEach(t),nHe=r(u7," \u2014 "),Rx=n(u7,"A",{href:!0});var YIr=s(Rx);sHe=r(YIr,"DistilBertTokenizer"),YIr.forEach(t),lHe=r(u7," or "),Sx=n(u7,"A",{href:!0});var KIr=s(Sx);iHe=r(KIr,"DistilBertTokenizerFast"),KIr.forEach(t),dHe=r(u7," (DistilBERT model)"),u7.forEach(t),cHe=i(y),ns=n(y,"LI",{});var b7=s(ns);EJ=n(b7,"STRONG",{});var ZIr=s(EJ);fHe=r(ZIr,"dpr"),ZIr.forEach(t),mHe=r(b7," \u2014 "),Px=n(b7,"A",{href:!0});var eDr=s(Px);gHe=r(eDr,"DPRQuestionEncoderTokenizer"),eDr.forEach(t),hHe=r(b7," or "),$x=n(b7,"A",{href:!0});var oDr=s($x);pHe=r(oDr,"DPRQuestionEncoderTokenizerFast"),oDr.forEach(t),_He=r(b7," (DPR model)"),b7.forEach(t),uHe=i(y),ss=n(y,"LI",{});var v7=s(ss);yJ=n(v7,"STRONG",{});var rDr=s(yJ);bHe=r(rDr,"electra"),rDr.forEach(t),vHe=r(v7," \u2014 "),Ix=n(v7,"A",{href:!0});var tDr=s(Ix);THe=r(tDr,"ElectraTokenizer"),tDr.forEach(t),FHe=r(v7," or "),Dx=n(v7,"A",{href:!0});var aDr=s(Dx);CHe=r(aDr,"ElectraTokenizerFast"),aDr.forEach(t),MHe=r(v7," (ELECTRA model)"),v7.forEach(t),EHe=i(y),Wg=n(y,"LI",{});var JCe=s(Wg);wJ=n(JCe,"STRONG",{});var nDr=s(wJ);yHe=r(nDr,"flaubert"),nDr.forEach(t),wHe=r(JCe," \u2014 "),Nx=n(JCe,"A",{href:!0});var sDr=s(Nx);AHe=r(sDr,"FlaubertTokenizer"),sDr.forEach(t),LHe=r(JCe," (FlauBERT model)"),JCe.forEach(t),BHe=i(y),ls=n(y,"LI",{});var T7=s(ls);AJ=n(T7,"STRONG",{});var lDr=s(AJ);xHe=r(lDr,"fnet"),lDr.forEach(t),kHe=r(T7," \u2014 "),jx=n(T7,"A",{href:!0});var iDr=s(jx);RHe=r(iDr,"FNetTokenizer"),iDr.forEach(t),SHe=r(T7," or "),qx=n(T7,"A",{href:!0});var dDr=s(qx);PHe=r(dDr,"FNetTokenizerFast"),dDr.forEach(t),$He=r(T7," (FNet model)"),T7.forEach(t),IHe=i(y),Qg=n(y,"LI",{});var YCe=s(Qg);LJ=n(YCe,"STRONG",{});var cDr=s(LJ);DHe=r(cDr,"fsmt"),cDr.forEach(t),NHe=r(YCe," \u2014 "),Gx=n(YCe,"A",{href:!0});var fDr=s(Gx);jHe=r(fDr,"FSMTTokenizer"),fDr.forEach(t),qHe=r(YCe," (FairSeq Machine-Translation model)"),YCe.forEach(t),GHe=i(y),is=n(y,"LI",{});var F7=s(is);BJ=n(F7,"STRONG",{});var mDr=s(BJ);OHe=r(mDr,"funnel"),mDr.forEach(t),XHe=r(F7," \u2014 "),Ox=n(F7,"A",{href:!0});var gDr=s(Ox);VHe=r(gDr,"FunnelTokenizer"),gDr.forEach(t),zHe=r(F7," or "),Xx=n(F7,"A",{href:!0});var hDr=s(Xx);WHe=r(hDr,"FunnelTokenizerFast"),hDr.forEach(t),QHe=r(F7," (Funnel Transformer model)"),F7.forEach(t),HHe=i(y),ds=n(y,"LI",{});var C7=s(ds);xJ=n(C7,"STRONG",{});var pDr=s(xJ);UHe=r(pDr,"gpt2"),pDr.forEach(t),JHe=r(C7," \u2014 "),Vx=n(C7,"A",{href:!0});var _Dr=s(Vx);YHe=r(_Dr,"GPT2Tokenizer"),_Dr.forEach(t),KHe=r(C7," or "),zx=n(C7,"A",{href:!0});var uDr=s(zx);ZHe=r(uDr,"GPT2TokenizerFast"),uDr.forEach(t),eUe=r(C7," (OpenAI GPT-2 model)"),C7.forEach(t),oUe=i(y),cs=n(y,"LI",{});var M7=s(cs);kJ=n(M7,"STRONG",{});var bDr=s(kJ);rUe=r(bDr,"gpt_neo"),bDr.forEach(t),tUe=r(M7," \u2014 "),Wx=n(M7,"A",{href:!0});var vDr=s(Wx);aUe=r(vDr,"GPT2Tokenizer"),vDr.forEach(t),nUe=r(M7," or "),Qx=n(M7,"A",{href:!0});var TDr=s(Qx);sUe=r(TDr,"GPT2TokenizerFast"),TDr.forEach(t),lUe=r(M7," (GPT Neo model)"),M7.forEach(t),iUe=i(y),fs=n(y,"LI",{});var E7=s(fs);RJ=n(E7,"STRONG",{});var FDr=s(RJ);dUe=r(FDr,"herbert"),FDr.forEach(t),cUe=r(E7," \u2014 "),Hx=n(E7,"A",{href:!0});var CDr=s(Hx);fUe=r(CDr,"HerbertTokenizer"),CDr.forEach(t),mUe=r(E7," or "),Ux=n(E7,"A",{href:!0});var MDr=s(Ux);gUe=r(MDr,"HerbertTokenizerFast"),MDr.forEach(t),hUe=r(E7," (HerBERT model)"),E7.forEach(t),pUe=i(y),Hg=n(y,"LI",{});var KCe=s(Hg);SJ=n(KCe,"STRONG",{});var EDr=s(SJ);_Ue=r(EDr,"hubert"),EDr.forEach(t),uUe=r(KCe," \u2014 "),Jx=n(KCe,"A",{href:!0});var yDr=s(Jx);bUe=r(yDr,"Wav2Vec2CTCTokenizer"),yDr.forEach(t),vUe=r(KCe," (Hubert model)"),KCe.forEach(t),TUe=i(y),ms=n(y,"LI",{});var y7=s(ms);PJ=n(y7,"STRONG",{});var wDr=s(PJ);FUe=r(wDr,"ibert"),wDr.forEach(t),CUe=r(y7," \u2014 "),Yx=n(y7,"A",{href:!0});var ADr=s(Yx);MUe=r(ADr,"RobertaTokenizer"),ADr.forEach(t),EUe=r(y7," or "),Kx=n(y7,"A",{href:!0});var LDr=s(Kx);yUe=r(LDr,"RobertaTokenizerFast"),LDr.forEach(t),wUe=r(y7," (I-BERT model)"),y7.forEach(t),AUe=i(y),gs=n(y,"LI",{});var w7=s(gs);$J=n(w7,"STRONG",{});var BDr=s($J);LUe=r(BDr,"layoutlm"),BDr.forEach(t),BUe=r(w7," \u2014 "),Zx=n(w7,"A",{href:!0});var xDr=s(Zx);xUe=r(xDr,"LayoutLMTokenizer"),xDr.forEach(t),kUe=r(w7," or "),ek=n(w7,"A",{href:!0});var kDr=s(ek);RUe=r(kDr,"LayoutLMTokenizerFast"),kDr.forEach(t),SUe=r(w7," (LayoutLM model)"),w7.forEach(t),PUe=i(y),hs=n(y,"LI",{});var A7=s(hs);IJ=n(A7,"STRONG",{});var RDr=s(IJ);$Ue=r(RDr,"layoutlmv2"),RDr.forEach(t),IUe=r(A7," \u2014 "),ok=n(A7,"A",{href:!0});var SDr=s(ok);DUe=r(SDr,"LayoutLMv2Tokenizer"),SDr.forEach(t),NUe=r(A7," or "),rk=n(A7,"A",{href:!0});var PDr=s(rk);jUe=r(PDr,"LayoutLMv2TokenizerFast"),PDr.forEach(t),qUe=r(A7," (LayoutLMv2 model)"),A7.forEach(t),GUe=i(y),ps=n(y,"LI",{});var L7=s(ps);DJ=n(L7,"STRONG",{});var $Dr=s(DJ);OUe=r($Dr,"layoutxlm"),$Dr.forEach(t),XUe=r(L7," \u2014 "),tk=n(L7,"A",{href:!0});var IDr=s(tk);VUe=r(IDr,"LayoutXLMTokenizer"),IDr.forEach(t),zUe=r(L7," or "),ak=n(L7,"A",{href:!0});var DDr=s(ak);WUe=r(DDr,"LayoutXLMTokenizerFast"),DDr.forEach(t),QUe=r(L7," (LayoutXLM model)"),L7.forEach(t),HUe=i(y),_s=n(y,"LI",{});var B7=s(_s);NJ=n(B7,"STRONG",{});var NDr=s(NJ);UUe=r(NDr,"led"),NDr.forEach(t),JUe=r(B7," \u2014 "),nk=n(B7,"A",{href:!0});var jDr=s(nk);YUe=r(jDr,"LEDTokenizer"),jDr.forEach(t),KUe=r(B7," or "),sk=n(B7,"A",{href:!0});var qDr=s(sk);ZUe=r(qDr,"LEDTokenizerFast"),qDr.forEach(t),eJe=r(B7," (LED model)"),B7.forEach(t),oJe=i(y),us=n(y,"LI",{});var x7=s(us);jJ=n(x7,"STRONG",{});var GDr=s(jJ);rJe=r(GDr,"longformer"),GDr.forEach(t),tJe=r(x7," \u2014 "),lk=n(x7,"A",{href:!0});var ODr=s(lk);aJe=r(ODr,"LongformerTokenizer"),ODr.forEach(t),nJe=r(x7," or "),ik=n(x7,"A",{href:!0});var XDr=s(ik);sJe=r(XDr,"LongformerTokenizerFast"),XDr.forEach(t),lJe=r(x7," (Longformer model)"),x7.forEach(t),iJe=i(y),Ug=n(y,"LI",{});var ZCe=s(Ug);qJ=n(ZCe,"STRONG",{});var VDr=s(qJ);dJe=r(VDr,"luke"),VDr.forEach(t),cJe=r(ZCe," \u2014 "),dk=n(ZCe,"A",{href:!0});var zDr=s(dk);fJe=r(zDr,"LukeTokenizer"),zDr.forEach(t),mJe=r(ZCe," (LUKE model)"),ZCe.forEach(t),gJe=i(y),bs=n(y,"LI",{});var k7=s(bs);GJ=n(k7,"STRONG",{});var WDr=s(GJ);hJe=r(WDr,"lxmert"),WDr.forEach(t),pJe=r(k7," \u2014 "),ck=n(k7,"A",{href:!0});var QDr=s(ck);_Je=r(QDr,"LxmertTokenizer"),QDr.forEach(t),uJe=r(k7," or "),fk=n(k7,"A",{href:!0});var HDr=s(fk);bJe=r(HDr,"LxmertTokenizerFast"),HDr.forEach(t),vJe=r(k7," (LXMERT model)"),k7.forEach(t),TJe=i(y),Jg=n(y,"LI",{});var eMe=s(Jg);OJ=n(eMe,"STRONG",{});var UDr=s(OJ);FJe=r(UDr,"m2m_100"),UDr.forEach(t),CJe=r(eMe," \u2014 "),mk=n(eMe,"A",{href:!0});var JDr=s(mk);MJe=r(JDr,"M2M100Tokenizer"),JDr.forEach(t),EJe=r(eMe," (M2M100 model)"),eMe.forEach(t),yJe=i(y),Yg=n(y,"LI",{});var oMe=s(Yg);XJ=n(oMe,"STRONG",{});var YDr=s(XJ);wJe=r(YDr,"marian"),YDr.forEach(t),AJe=r(oMe," \u2014 "),gk=n(oMe,"A",{href:!0});var KDr=s(gk);LJe=r(KDr,"MarianTokenizer"),KDr.forEach(t),BJe=r(oMe," (Marian model)"),oMe.forEach(t),xJe=i(y),vs=n(y,"LI",{});var R7=s(vs);VJ=n(R7,"STRONG",{});var ZDr=s(VJ);kJe=r(ZDr,"mbart"),ZDr.forEach(t),RJe=r(R7," \u2014 "),hk=n(R7,"A",{href:!0});var eNr=s(hk);SJe=r(eNr,"MBartTokenizer"),eNr.forEach(t),PJe=r(R7," or "),pk=n(R7,"A",{href:!0});var oNr=s(pk);$Je=r(oNr,"MBartTokenizerFast"),oNr.forEach(t),IJe=r(R7," (mBART model)"),R7.forEach(t),DJe=i(y),Ts=n(y,"LI",{});var S7=s(Ts);zJ=n(S7,"STRONG",{});var rNr=s(zJ);NJe=r(rNr,"mbart50"),rNr.forEach(t),jJe=r(S7," \u2014 "),_k=n(S7,"A",{href:!0});var tNr=s(_k);qJe=r(tNr,"MBart50Tokenizer"),tNr.forEach(t),GJe=r(S7," or "),uk=n(S7,"A",{href:!0});var aNr=s(uk);OJe=r(aNr,"MBart50TokenizerFast"),aNr.forEach(t),XJe=r(S7," (mBART-50 model)"),S7.forEach(t),VJe=i(y),Kg=n(y,"LI",{});var rMe=s(Kg);WJ=n(rMe,"STRONG",{});var nNr=s(WJ);zJe=r(nNr,"mluke"),nNr.forEach(t),WJe=r(rMe," \u2014 "),bk=n(rMe,"A",{href:!0});var sNr=s(bk);QJe=r(sNr,"MLukeTokenizer"),sNr.forEach(t),HJe=r(rMe," (mLUKE model)"),rMe.forEach(t),UJe=i(y),Fs=n(y,"LI",{});var P7=s(Fs);QJ=n(P7,"STRONG",{});var lNr=s(QJ);JJe=r(lNr,"mobilebert"),lNr.forEach(t),YJe=r(P7," \u2014 "),vk=n(P7,"A",{href:!0});var iNr=s(vk);KJe=r(iNr,"MobileBertTokenizer"),iNr.forEach(t),ZJe=r(P7," or "),Tk=n(P7,"A",{href:!0});var dNr=s(Tk);eYe=r(dNr,"MobileBertTokenizerFast"),dNr.forEach(t),oYe=r(P7," (MobileBERT model)"),P7.forEach(t),rYe=i(y),Cs=n(y,"LI",{});var $7=s(Cs);HJ=n($7,"STRONG",{});var cNr=s(HJ);tYe=r(cNr,"mpnet"),cNr.forEach(t),aYe=r($7," \u2014 "),Fk=n($7,"A",{href:!0});var fNr=s(Fk);nYe=r(fNr,"MPNetTokenizer"),fNr.forEach(t),sYe=r($7," or "),Ck=n($7,"A",{href:!0});var mNr=s(Ck);lYe=r(mNr,"MPNetTokenizerFast"),mNr.forEach(t),iYe=r($7," (MPNet model)"),$7.forEach(t),dYe=i(y),Ms=n(y,"LI",{});var I7=s(Ms);UJ=n(I7,"STRONG",{});var gNr=s(UJ);cYe=r(gNr,"mt5"),gNr.forEach(t),fYe=r(I7," \u2014 "),Mk=n(I7,"A",{href:!0});var hNr=s(Mk);mYe=r(hNr,"MT5Tokenizer"),hNr.forEach(t),gYe=r(I7," or "),Ek=n(I7,"A",{href:!0});var pNr=s(Ek);hYe=r(pNr,"MT5TokenizerFast"),pNr.forEach(t),pYe=r(I7," (mT5 model)"),I7.forEach(t),_Ye=i(y),Es=n(y,"LI",{});var D7=s(Es);JJ=n(D7,"STRONG",{});var _Nr=s(JJ);uYe=r(_Nr,"openai-gpt"),_Nr.forEach(t),bYe=r(D7," \u2014 "),yk=n(D7,"A",{href:!0});var uNr=s(yk);vYe=r(uNr,"OpenAIGPTTokenizer"),uNr.forEach(t),TYe=r(D7," or "),wk=n(D7,"A",{href:!0});var bNr=s(wk);FYe=r(bNr,"OpenAIGPTTokenizerFast"),bNr.forEach(t),CYe=r(D7," (OpenAI GPT model)"),D7.forEach(t),MYe=i(y),ys=n(y,"LI",{});var N7=s(ys);YJ=n(N7,"STRONG",{});var vNr=s(YJ);EYe=r(vNr,"pegasus"),vNr.forEach(t),yYe=r(N7," \u2014 "),Ak=n(N7,"A",{href:!0});var TNr=s(Ak);wYe=r(TNr,"PegasusTokenizer"),TNr.forEach(t),AYe=r(N7," or "),Lk=n(N7,"A",{href:!0});var FNr=s(Lk);LYe=r(FNr,"PegasusTokenizerFast"),FNr.forEach(t),BYe=r(N7," (Pegasus model)"),N7.forEach(t),xYe=i(y),Zg=n(y,"LI",{});var tMe=s(Zg);KJ=n(tMe,"STRONG",{});var CNr=s(KJ);kYe=r(CNr,"perceiver"),CNr.forEach(t),RYe=r(tMe," \u2014 "),Bk=n(tMe,"A",{href:!0});var MNr=s(Bk);SYe=r(MNr,"PerceiverTokenizer"),MNr.forEach(t),PYe=r(tMe," (Perceiver model)"),tMe.forEach(t),$Ye=i(y),eh=n(y,"LI",{});var aMe=s(eh);ZJ=n(aMe,"STRONG",{});var ENr=s(ZJ);IYe=r(ENr,"phobert"),ENr.forEach(t),DYe=r(aMe," \u2014 "),xk=n(aMe,"A",{href:!0});var yNr=s(xk);NYe=r(yNr,"PhobertTokenizer"),yNr.forEach(t),jYe=r(aMe," (PhoBERT model)"),aMe.forEach(t),qYe=i(y),oh=n(y,"LI",{});var nMe=s(oh);eY=n(nMe,"STRONG",{});var wNr=s(eY);GYe=r(wNr,"plbart"),wNr.forEach(t),OYe=r(nMe," \u2014 "),kk=n(nMe,"A",{href:!0});var ANr=s(kk);XYe=r(ANr,"PLBartTokenizer"),ANr.forEach(t),VYe=r(nMe," (PLBart model)"),nMe.forEach(t),zYe=i(y),rh=n(y,"LI",{});var sMe=s(rh);oY=n(sMe,"STRONG",{});var LNr=s(oY);WYe=r(LNr,"prophetnet"),LNr.forEach(t),QYe=r(sMe," \u2014 "),Rk=n(sMe,"A",{href:!0});var BNr=s(Rk);HYe=r(BNr,"ProphetNetTokenizer"),BNr.forEach(t),UYe=r(sMe," (ProphetNet model)"),sMe.forEach(t),JYe=i(y),ws=n(y,"LI",{});var j7=s(ws);rY=n(j7,"STRONG",{});var xNr=s(rY);YYe=r(xNr,"qdqbert"),xNr.forEach(t),KYe=r(j7," \u2014 "),Sk=n(j7,"A",{href:!0});var kNr=s(Sk);ZYe=r(kNr,"BertTokenizer"),kNr.forEach(t),eKe=r(j7," or "),Pk=n(j7,"A",{href:!0});var RNr=s(Pk);oKe=r(RNr,"BertTokenizerFast"),RNr.forEach(t),rKe=r(j7," (QDQBert model)"),j7.forEach(t),tKe=i(y),th=n(y,"LI",{});var lMe=s(th);tY=n(lMe,"STRONG",{});var SNr=s(tY);aKe=r(SNr,"rag"),SNr.forEach(t),nKe=r(lMe," \u2014 "),$k=n(lMe,"A",{href:!0});var PNr=s($k);sKe=r(PNr,"RagTokenizer"),PNr.forEach(t),lKe=r(lMe," (RAG model)"),lMe.forEach(t),iKe=i(y),As=n(y,"LI",{});var q7=s(As);aY=n(q7,"STRONG",{});var $Nr=s(aY);dKe=r($Nr,"realm"),$Nr.forEach(t),cKe=r(q7," \u2014 "),Ik=n(q7,"A",{href:!0});var INr=s(Ik);fKe=r(INr,"RealmTokenizer"),INr.forEach(t),mKe=r(q7," or "),Dk=n(q7,"A",{href:!0});var DNr=s(Dk);gKe=r(DNr,"RealmTokenizerFast"),DNr.forEach(t),hKe=r(q7," (Realm model)"),q7.forEach(t),pKe=i(y),Ls=n(y,"LI",{});var G7=s(Ls);nY=n(G7,"STRONG",{});var NNr=s(nY);_Ke=r(NNr,"reformer"),NNr.forEach(t),uKe=r(G7," \u2014 "),Nk=n(G7,"A",{href:!0});var jNr=s(Nk);bKe=r(jNr,"ReformerTokenizer"),jNr.forEach(t),vKe=r(G7," or "),jk=n(G7,"A",{href:!0});var qNr=s(jk);TKe=r(qNr,"ReformerTokenizerFast"),qNr.forEach(t),FKe=r(G7," (Reformer model)"),G7.forEach(t),CKe=i(y),Bs=n(y,"LI",{});var O7=s(Bs);sY=n(O7,"STRONG",{});var GNr=s(sY);MKe=r(GNr,"rembert"),GNr.forEach(t),EKe=r(O7," \u2014 "),qk=n(O7,"A",{href:!0});var ONr=s(qk);yKe=r(ONr,"RemBertTokenizer"),ONr.forEach(t),wKe=r(O7," or "),Gk=n(O7,"A",{href:!0});var XNr=s(Gk);AKe=r(XNr,"RemBertTokenizerFast"),XNr.forEach(t),LKe=r(O7," (RemBERT model)"),O7.forEach(t),BKe=i(y),xs=n(y,"LI",{});var X7=s(xs);lY=n(X7,"STRONG",{});var VNr=s(lY);xKe=r(VNr,"retribert"),VNr.forEach(t),kKe=r(X7," \u2014 "),Ok=n(X7,"A",{href:!0});var zNr=s(Ok);RKe=r(zNr,"RetriBertTokenizer"),zNr.forEach(t),SKe=r(X7," or "),Xk=n(X7,"A",{href:!0});var WNr=s(Xk);PKe=r(WNr,"RetriBertTokenizerFast"),WNr.forEach(t),$Ke=r(X7," (RetriBERT model)"),X7.forEach(t),IKe=i(y),ks=n(y,"LI",{});var V7=s(ks);iY=n(V7,"STRONG",{});var QNr=s(iY);DKe=r(QNr,"roberta"),QNr.forEach(t),NKe=r(V7," \u2014 "),Vk=n(V7,"A",{href:!0});var HNr=s(Vk);jKe=r(HNr,"RobertaTokenizer"),HNr.forEach(t),qKe=r(V7," or "),zk=n(V7,"A",{href:!0});var UNr=s(zk);GKe=r(UNr,"RobertaTokenizerFast"),UNr.forEach(t),OKe=r(V7," (RoBERTa model)"),V7.forEach(t),XKe=i(y),Rs=n(y,"LI",{});var z7=s(Rs);dY=n(z7,"STRONG",{});var JNr=s(dY);VKe=r(JNr,"roformer"),JNr.forEach(t),zKe=r(z7," \u2014 "),Wk=n(z7,"A",{href:!0});var YNr=s(Wk);WKe=r(YNr,"RoFormerTokenizer"),YNr.forEach(t),QKe=r(z7," or "),Qk=n(z7,"A",{href:!0});var KNr=s(Qk);HKe=r(KNr,"RoFormerTokenizerFast"),KNr.forEach(t),UKe=r(z7," (RoFormer model)"),z7.forEach(t),JKe=i(y),ah=n(y,"LI",{});var iMe=s(ah);cY=n(iMe,"STRONG",{});var ZNr=s(cY);YKe=r(ZNr,"speech_to_text"),ZNr.forEach(t),KKe=r(iMe," \u2014 "),Hk=n(iMe,"A",{href:!0});var ejr=s(Hk);ZKe=r(ejr,"Speech2TextTokenizer"),ejr.forEach(t),eZe=r(iMe," (Speech2Text model)"),iMe.forEach(t),oZe=i(y),nh=n(y,"LI",{});var dMe=s(nh);fY=n(dMe,"STRONG",{});var ojr=s(fY);rZe=r(ojr,"speech_to_text_2"),ojr.forEach(t),tZe=r(dMe," \u2014 "),Uk=n(dMe,"A",{href:!0});var rjr=s(Uk);aZe=r(rjr,"Speech2Text2Tokenizer"),rjr.forEach(t),nZe=r(dMe," (Speech2Text2 model)"),dMe.forEach(t),sZe=i(y),Ss=n(y,"LI",{});var W7=s(Ss);mY=n(W7,"STRONG",{});var tjr=s(mY);lZe=r(tjr,"splinter"),tjr.forEach(t),iZe=r(W7," \u2014 "),Jk=n(W7,"A",{href:!0});var ajr=s(Jk);dZe=r(ajr,"SplinterTokenizer"),ajr.forEach(t),cZe=r(W7," or "),Yk=n(W7,"A",{href:!0});var njr=s(Yk);fZe=r(njr,"SplinterTokenizerFast"),njr.forEach(t),mZe=r(W7," (Splinter model)"),W7.forEach(t),gZe=i(y),Ps=n(y,"LI",{});var Q7=s(Ps);gY=n(Q7,"STRONG",{});var sjr=s(gY);hZe=r(sjr,"squeezebert"),sjr.forEach(t),pZe=r(Q7," \u2014 "),Kk=n(Q7,"A",{href:!0});var ljr=s(Kk);_Ze=r(ljr,"SqueezeBertTokenizer"),ljr.forEach(t),uZe=r(Q7," or "),Zk=n(Q7,"A",{href:!0});var ijr=s(Zk);bZe=r(ijr,"SqueezeBertTokenizerFast"),ijr.forEach(t),vZe=r(Q7," (SqueezeBERT model)"),Q7.forEach(t),TZe=i(y),$s=n(y,"LI",{});var H7=s($s);hY=n(H7,"STRONG",{});var djr=s(hY);FZe=r(djr,"t5"),djr.forEach(t),CZe=r(H7," \u2014 "),eR=n(H7,"A",{href:!0});var cjr=s(eR);MZe=r(cjr,"T5Tokenizer"),cjr.forEach(t),EZe=r(H7," or "),oR=n(H7,"A",{href:!0});var fjr=s(oR);yZe=r(fjr,"T5TokenizerFast"),fjr.forEach(t),wZe=r(H7," (T5 model)"),H7.forEach(t),AZe=i(y),sh=n(y,"LI",{});var cMe=s(sh);pY=n(cMe,"STRONG",{});var mjr=s(pY);LZe=r(mjr,"tapas"),mjr.forEach(t),BZe=r(cMe," \u2014 "),rR=n(cMe,"A",{href:!0});var gjr=s(rR);xZe=r(gjr,"TapasTokenizer"),gjr.forEach(t),kZe=r(cMe," (TAPAS model)"),cMe.forEach(t),RZe=i(y),lh=n(y,"LI",{});var fMe=s(lh);_Y=n(fMe,"STRONG",{});var hjr=s(_Y);SZe=r(hjr,"transfo-xl"),hjr.forEach(t),PZe=r(fMe," \u2014 "),tR=n(fMe,"A",{href:!0});var pjr=s(tR);$Ze=r(pjr,"TransfoXLTokenizer"),pjr.forEach(t),IZe=r(fMe," (Transformer-XL model)"),fMe.forEach(t),DZe=i(y),ih=n(y,"LI",{});var mMe=s(ih);uY=n(mMe,"STRONG",{});var _jr=s(uY);NZe=r(_jr,"wav2vec2"),_jr.forEach(t),jZe=r(mMe," \u2014 "),aR=n(mMe,"A",{href:!0});var ujr=s(aR);qZe=r(ujr,"Wav2Vec2CTCTokenizer"),ujr.forEach(t),GZe=r(mMe," (Wav2Vec2 model)"),mMe.forEach(t),OZe=i(y),dh=n(y,"LI",{});var gMe=s(dh);bY=n(gMe,"STRONG",{});var bjr=s(bY);XZe=r(bjr,"wav2vec2_phoneme"),bjr.forEach(t),VZe=r(gMe," \u2014 "),nR=n(gMe,"A",{href:!0});var vjr=s(nR);zZe=r(vjr,"Wav2Vec2PhonemeCTCTokenizer"),vjr.forEach(t),WZe=r(gMe," (Wav2Vec2Phoneme model)"),gMe.forEach(t),QZe=i(y),Is=n(y,"LI",{});var U7=s(Is);vY=n(U7,"STRONG",{});var Tjr=s(vY);HZe=r(Tjr,"xglm"),Tjr.forEach(t),UZe=r(U7," \u2014 "),sR=n(U7,"A",{href:!0});var Fjr=s(sR);JZe=r(Fjr,"XGLMTokenizer"),Fjr.forEach(t),YZe=r(U7," or "),lR=n(U7,"A",{href:!0});var Cjr=s(lR);KZe=r(Cjr,"XGLMTokenizerFast"),Cjr.forEach(t),ZZe=r(U7," (XGLM model)"),U7.forEach(t),eeo=i(y),ch=n(y,"LI",{});var hMe=s(ch);TY=n(hMe,"STRONG",{});var Mjr=s(TY);oeo=r(Mjr,"xlm"),Mjr.forEach(t),reo=r(hMe," \u2014 "),iR=n(hMe,"A",{href:!0});var Ejr=s(iR);teo=r(Ejr,"XLMTokenizer"),Ejr.forEach(t),aeo=r(hMe," (XLM model)"),hMe.forEach(t),neo=i(y),fh=n(y,"LI",{});var pMe=s(fh);FY=n(pMe,"STRONG",{});var yjr=s(FY);seo=r(yjr,"xlm-prophetnet"),yjr.forEach(t),leo=r(pMe," \u2014 "),dR=n(pMe,"A",{href:!0});var wjr=s(dR);ieo=r(wjr,"XLMProphetNetTokenizer"),wjr.forEach(t),deo=r(pMe," (XLMProphetNet model)"),pMe.forEach(t),ceo=i(y),Ds=n(y,"LI",{});var J7=s(Ds);CY=n(J7,"STRONG",{});var Ajr=s(CY);feo=r(Ajr,"xlm-roberta"),Ajr.forEach(t),meo=r(J7," \u2014 "),cR=n(J7,"A",{href:!0});var Ljr=s(cR);geo=r(Ljr,"XLMRobertaTokenizer"),Ljr.forEach(t),heo=r(J7," or "),fR=n(J7,"A",{href:!0});var Bjr=s(fR);peo=r(Bjr,"XLMRobertaTokenizerFast"),Bjr.forEach(t),_eo=r(J7," (XLM-RoBERTa model)"),J7.forEach(t),ueo=i(y),Ns=n(y,"LI",{});var Y7=s(Ns);MY=n(Y7,"STRONG",{});var xjr=s(MY);beo=r(xjr,"xlnet"),xjr.forEach(t),veo=r(Y7," \u2014 "),mR=n(Y7,"A",{href:!0});var kjr=s(mR);Teo=r(kjr,"XLNetTokenizer"),kjr.forEach(t),Feo=r(Y7," or "),gR=n(Y7,"A",{href:!0});var Rjr=s(gR);Ceo=r(Rjr,"XLNetTokenizerFast"),Rjr.forEach(t),Meo=r(Y7," (XLNet model)"),Y7.forEach(t),y.forEach(t),Eeo=i(ha),EY=n(ha,"P",{});var Sjr=s(EY);yeo=r(Sjr,"Examples:"),Sjr.forEach(t),weo=i(ha),m(A3.$$.fragment,ha),ha.forEach(t),Aeo=i(Xs),mh=n(Xs,"DIV",{class:!0});var wSe=s(mh);m(L3.$$.fragment,wSe),Leo=i(wSe),yY=n(wSe,"P",{});var Pjr=s(yY);Beo=r(Pjr,"Register a new tokenizer in this mapping."),Pjr.forEach(t),wSe.forEach(t),Xs.forEach(t),Cke=i(c),Qi=n(c,"H2",{class:!0});var ASe=s(Qi);gh=n(ASe,"A",{id:!0,class:!0,href:!0});var $jr=s(gh);wY=n($jr,"SPAN",{});var Ijr=s(wY);m(B3.$$.fragment,Ijr),Ijr.forEach(t),$jr.forEach(t),xeo=i(ASe),AY=n(ASe,"SPAN",{});var Djr=s(AY);keo=r(Djr,"AutoFeatureExtractor"),Djr.forEach(t),ASe.forEach(t),Mke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(x3.$$.fragment,Vs),Reo=i(Vs),k3=n(Vs,"P",{});var LSe=s(k3);Seo=r(LSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hR=n(LSe,"A",{href:!0});var Njr=s(hR);Peo=r(Njr,"AutoFeatureExtractor.from_pretrained()"),Njr.forEach(t),$eo=r(LSe," class method."),LSe.forEach(t),Ieo=i(Vs),R3=n(Vs,"P",{});var BSe=s(R3);Deo=r(BSe,"This class cannot be instantiated directly using "),LY=n(BSe,"CODE",{});var jjr=s(LY);Neo=r(jjr,"__init__()"),jjr.forEach(t),jeo=r(BSe," (throws an error)."),BSe.forEach(t),qeo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Nt=s($e);m(S3.$$.fragment,Nt),Geo=i(Nt),BY=n(Nt,"P",{});var qjr=s(BY);Oeo=r(qjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qjr.forEach(t),Xeo=i(Nt),Xa=n(Nt,"P",{});var mE=s(Xa);Veo=r(mE,"The feature extractor class to instantiate is selected based on the "),xY=n(mE,"CODE",{});var Gjr=s(xY);zeo=r(Gjr,"model_type"),Gjr.forEach(t),Weo=r(mE,` property of the config object
(either passed as an argument or loaded from `),kY=n(mE,"CODE",{});var Ojr=s(kY);Qeo=r(Ojr,"pretrained_model_name_or_path"),Ojr.forEach(t),Heo=r(mE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),RY=n(mE,"CODE",{});var Xjr=s(RY);Ueo=r(Xjr,"pretrained_model_name_or_path"),Xjr.forEach(t),Jeo=r(mE,":"),mE.forEach(t),Yeo=i(Nt),re=n(Nt,"UL",{});var ne=s(re);hh=n(ne,"LI",{});var _Me=s(hh);SY=n(_Me,"STRONG",{});var Vjr=s(SY);Keo=r(Vjr,"beit"),Vjr.forEach(t),Zeo=r(_Me," \u2014 "),pR=n(_Me,"A",{href:!0});var zjr=s(pR);eoo=r(zjr,"BeitFeatureExtractor"),zjr.forEach(t),ooo=r(_Me," (BEiT model)"),_Me.forEach(t),roo=i(ne),ph=n(ne,"LI",{});var uMe=s(ph);PY=n(uMe,"STRONG",{});var Wjr=s(PY);too=r(Wjr,"clip"),Wjr.forEach(t),aoo=r(uMe," \u2014 "),_R=n(uMe,"A",{href:!0});var Qjr=s(_R);noo=r(Qjr,"CLIPFeatureExtractor"),Qjr.forEach(t),soo=r(uMe," (CLIP model)"),uMe.forEach(t),loo=i(ne),_h=n(ne,"LI",{});var bMe=s(_h);$Y=n(bMe,"STRONG",{});var Hjr=s($Y);ioo=r(Hjr,"convnext"),Hjr.forEach(t),doo=r(bMe," \u2014 "),uR=n(bMe,"A",{href:!0});var Ujr=s(uR);coo=r(Ujr,"ConvNextFeatureExtractor"),Ujr.forEach(t),foo=r(bMe," (ConvNext model)"),bMe.forEach(t),moo=i(ne),uh=n(ne,"LI",{});var vMe=s(uh);IY=n(vMe,"STRONG",{});var Jjr=s(IY);goo=r(Jjr,"deit"),Jjr.forEach(t),hoo=r(vMe," \u2014 "),bR=n(vMe,"A",{href:!0});var Yjr=s(bR);poo=r(Yjr,"DeiTFeatureExtractor"),Yjr.forEach(t),_oo=r(vMe," (DeiT model)"),vMe.forEach(t),uoo=i(ne),bh=n(ne,"LI",{});var TMe=s(bh);DY=n(TMe,"STRONG",{});var Kjr=s(DY);boo=r(Kjr,"detr"),Kjr.forEach(t),voo=r(TMe," \u2014 "),vR=n(TMe,"A",{href:!0});var Zjr=s(vR);Too=r(Zjr,"DetrFeatureExtractor"),Zjr.forEach(t),Foo=r(TMe," (DETR model)"),TMe.forEach(t),Coo=i(ne),vh=n(ne,"LI",{});var FMe=s(vh);NY=n(FMe,"STRONG",{});var eqr=s(NY);Moo=r(eqr,"hubert"),eqr.forEach(t),Eoo=r(FMe," \u2014 "),TR=n(FMe,"A",{href:!0});var oqr=s(TR);yoo=r(oqr,"Wav2Vec2FeatureExtractor"),oqr.forEach(t),woo=r(FMe," (Hubert model)"),FMe.forEach(t),Aoo=i(ne),Th=n(ne,"LI",{});var CMe=s(Th);jY=n(CMe,"STRONG",{});var rqr=s(jY);Loo=r(rqr,"layoutlmv2"),rqr.forEach(t),Boo=r(CMe," \u2014 "),FR=n(CMe,"A",{href:!0});var tqr=s(FR);xoo=r(tqr,"LayoutLMv2FeatureExtractor"),tqr.forEach(t),koo=r(CMe," (LayoutLMv2 model)"),CMe.forEach(t),Roo=i(ne),Fh=n(ne,"LI",{});var MMe=s(Fh);qY=n(MMe,"STRONG",{});var aqr=s(qY);Soo=r(aqr,"maskformer"),aqr.forEach(t),Poo=r(MMe," \u2014 "),CR=n(MMe,"A",{href:!0});var nqr=s(CR);$oo=r(nqr,"MaskFormerFeatureExtractor"),nqr.forEach(t),Ioo=r(MMe," (MaskFormer model)"),MMe.forEach(t),Doo=i(ne),Ch=n(ne,"LI",{});var EMe=s(Ch);GY=n(EMe,"STRONG",{});var sqr=s(GY);Noo=r(sqr,"perceiver"),sqr.forEach(t),joo=r(EMe," \u2014 "),MR=n(EMe,"A",{href:!0});var lqr=s(MR);qoo=r(lqr,"PerceiverFeatureExtractor"),lqr.forEach(t),Goo=r(EMe," (Perceiver model)"),EMe.forEach(t),Ooo=i(ne),Mh=n(ne,"LI",{});var yMe=s(Mh);OY=n(yMe,"STRONG",{});var iqr=s(OY);Xoo=r(iqr,"poolformer"),iqr.forEach(t),Voo=r(yMe," \u2014 "),ER=n(yMe,"A",{href:!0});var dqr=s(ER);zoo=r(dqr,"PoolFormerFeatureExtractor"),dqr.forEach(t),Woo=r(yMe," (PoolFormer model)"),yMe.forEach(t),Qoo=i(ne),Eh=n(ne,"LI",{});var wMe=s(Eh);XY=n(wMe,"STRONG",{});var cqr=s(XY);Hoo=r(cqr,"resnet"),cqr.forEach(t),Uoo=r(wMe," \u2014 "),yR=n(wMe,"A",{href:!0});var fqr=s(yR);Joo=r(fqr,"ConvNextFeatureExtractor"),fqr.forEach(t),Yoo=r(wMe," (ResNet model)"),wMe.forEach(t),Koo=i(ne),yh=n(ne,"LI",{});var AMe=s(yh);VY=n(AMe,"STRONG",{});var mqr=s(VY);Zoo=r(mqr,"segformer"),mqr.forEach(t),ero=r(AMe," \u2014 "),wR=n(AMe,"A",{href:!0});var gqr=s(wR);oro=r(gqr,"SegformerFeatureExtractor"),gqr.forEach(t),rro=r(AMe," (SegFormer model)"),AMe.forEach(t),tro=i(ne),wh=n(ne,"LI",{});var LMe=s(wh);zY=n(LMe,"STRONG",{});var hqr=s(zY);aro=r(hqr,"speech_to_text"),hqr.forEach(t),nro=r(LMe," \u2014 "),AR=n(LMe,"A",{href:!0});var pqr=s(AR);sro=r(pqr,"Speech2TextFeatureExtractor"),pqr.forEach(t),lro=r(LMe," (Speech2Text model)"),LMe.forEach(t),iro=i(ne),Ah=n(ne,"LI",{});var BMe=s(Ah);WY=n(BMe,"STRONG",{});var _qr=s(WY);dro=r(_qr,"swin"),_qr.forEach(t),cro=r(BMe," \u2014 "),LR=n(BMe,"A",{href:!0});var uqr=s(LR);fro=r(uqr,"ViTFeatureExtractor"),uqr.forEach(t),mro=r(BMe," (Swin model)"),BMe.forEach(t),gro=i(ne),Lh=n(ne,"LI",{});var xMe=s(Lh);QY=n(xMe,"STRONG",{});var bqr=s(QY);hro=r(bqr,"van"),bqr.forEach(t),pro=r(xMe," \u2014 "),BR=n(xMe,"A",{href:!0});var vqr=s(BR);_ro=r(vqr,"ConvNextFeatureExtractor"),vqr.forEach(t),uro=r(xMe," (VAN model)"),xMe.forEach(t),bro=i(ne),Bh=n(ne,"LI",{});var kMe=s(Bh);HY=n(kMe,"STRONG",{});var Tqr=s(HY);vro=r(Tqr,"vit"),Tqr.forEach(t),Tro=r(kMe," \u2014 "),xR=n(kMe,"A",{href:!0});var Fqr=s(xR);Fro=r(Fqr,"ViTFeatureExtractor"),Fqr.forEach(t),Cro=r(kMe," (ViT model)"),kMe.forEach(t),Mro=i(ne),xh=n(ne,"LI",{});var RMe=s(xh);UY=n(RMe,"STRONG",{});var Cqr=s(UY);Ero=r(Cqr,"vit_mae"),Cqr.forEach(t),yro=r(RMe," \u2014 "),kR=n(RMe,"A",{href:!0});var Mqr=s(kR);wro=r(Mqr,"ViTFeatureExtractor"),Mqr.forEach(t),Aro=r(RMe," (ViTMAE model)"),RMe.forEach(t),Lro=i(ne),kh=n(ne,"LI",{});var SMe=s(kh);JY=n(SMe,"STRONG",{});var Eqr=s(JY);Bro=r(Eqr,"wav2vec2"),Eqr.forEach(t),xro=r(SMe," \u2014 "),RR=n(SMe,"A",{href:!0});var yqr=s(RR);kro=r(yqr,"Wav2Vec2FeatureExtractor"),yqr.forEach(t),Rro=r(SMe," (Wav2Vec2 model)"),SMe.forEach(t),ne.forEach(t),Sro=i(Nt),m(Rh.$$.fragment,Nt),Pro=i(Nt),YY=n(Nt,"P",{});var wqr=s(YY);$ro=r(wqr,"Examples:"),wqr.forEach(t),Iro=i(Nt),m(P3.$$.fragment,Nt),Nt.forEach(t),Dro=i(Vs),Sh=n(Vs,"DIV",{class:!0});var xSe=s(Sh);m($3.$$.fragment,xSe),Nro=i(xSe),KY=n(xSe,"P",{});var Aqr=s(KY);jro=r(Aqr,"Register a new feature extractor for this class."),Aqr.forEach(t),xSe.forEach(t),Vs.forEach(t),Eke=i(c),Hi=n(c,"H2",{class:!0});var kSe=s(Hi);Ph=n(kSe,"A",{id:!0,class:!0,href:!0});var Lqr=s(Ph);ZY=n(Lqr,"SPAN",{});var Bqr=s(ZY);m(I3.$$.fragment,Bqr),Bqr.forEach(t),Lqr.forEach(t),qro=i(kSe),eK=n(kSe,"SPAN",{});var xqr=s(eK);Gro=r(xqr,"AutoProcessor"),xqr.forEach(t),kSe.forEach(t),yke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(D3.$$.fragment,zs),Oro=i(zs),N3=n(zs,"P",{});var RSe=s(N3);Xro=r(RSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SR=n(RSe,"A",{href:!0});var kqr=s(SR);Vro=r(kqr,"AutoProcessor.from_pretrained()"),kqr.forEach(t),zro=r(RSe," class method."),RSe.forEach(t),Wro=i(zs),j3=n(zs,"P",{});var SSe=s(j3);Qro=r(SSe,"This class cannot be instantiated directly using "),oK=n(SSe,"CODE",{});var Rqr=s(oK);Hro=r(Rqr,"__init__()"),Rqr.forEach(t),Uro=r(SSe," (throws an error)."),SSe.forEach(t),Jro=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(q3.$$.fragment,jt),Yro=i(jt),rK=n(jt,"P",{});var Sqr=s(rK);Kro=r(Sqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Sqr.forEach(t),Zro=i(jt),Ui=n(jt,"P",{});var eW=s(Ui);eto=r(eW,"The processor class to instantiate is selected based on the "),tK=n(eW,"CODE",{});var Pqr=s(tK);oto=r(Pqr,"model_type"),Pqr.forEach(t),rto=r(eW,` property of the config object (either
passed as an argument or loaded from `),aK=n(eW,"CODE",{});var $qr=s(aK);tto=r($qr,"pretrained_model_name_or_path"),$qr.forEach(t),ato=r(eW," if possible):"),eW.forEach(t),nto=i(jt),xe=n(jt,"UL",{});var jo=s(xe);$h=n(jo,"LI",{});var PMe=s($h);nK=n(PMe,"STRONG",{});var Iqr=s(nK);sto=r(Iqr,"clip"),Iqr.forEach(t),lto=r(PMe," \u2014 "),PR=n(PMe,"A",{href:!0});var Dqr=s(PR);ito=r(Dqr,"CLIPProcessor"),Dqr.forEach(t),dto=r(PMe," (CLIP model)"),PMe.forEach(t),cto=i(jo),Ih=n(jo,"LI",{});var $Me=s(Ih);sK=n($Me,"STRONG",{});var Nqr=s(sK);fto=r(Nqr,"layoutlmv2"),Nqr.forEach(t),mto=r($Me," \u2014 "),$R=n($Me,"A",{href:!0});var jqr=s($R);gto=r(jqr,"LayoutLMv2Processor"),jqr.forEach(t),hto=r($Me," (LayoutLMv2 model)"),$Me.forEach(t),pto=i(jo),Dh=n(jo,"LI",{});var IMe=s(Dh);lK=n(IMe,"STRONG",{});var qqr=s(lK);_to=r(qqr,"layoutxlm"),qqr.forEach(t),uto=r(IMe," \u2014 "),IR=n(IMe,"A",{href:!0});var Gqr=s(IR);bto=r(Gqr,"LayoutXLMProcessor"),Gqr.forEach(t),vto=r(IMe," (LayoutXLM model)"),IMe.forEach(t),Tto=i(jo),Nh=n(jo,"LI",{});var DMe=s(Nh);iK=n(DMe,"STRONG",{});var Oqr=s(iK);Fto=r(Oqr,"speech_to_text"),Oqr.forEach(t),Cto=r(DMe," \u2014 "),DR=n(DMe,"A",{href:!0});var Xqr=s(DR);Mto=r(Xqr,"Speech2TextProcessor"),Xqr.forEach(t),Eto=r(DMe," (Speech2Text model)"),DMe.forEach(t),yto=i(jo),jh=n(jo,"LI",{});var NMe=s(jh);dK=n(NMe,"STRONG",{});var Vqr=s(dK);wto=r(Vqr,"speech_to_text_2"),Vqr.forEach(t),Ato=r(NMe," \u2014 "),NR=n(NMe,"A",{href:!0});var zqr=s(NR);Lto=r(zqr,"Speech2Text2Processor"),zqr.forEach(t),Bto=r(NMe," (Speech2Text2 model)"),NMe.forEach(t),xto=i(jo),qh=n(jo,"LI",{});var jMe=s(qh);cK=n(jMe,"STRONG",{});var Wqr=s(cK);kto=r(Wqr,"trocr"),Wqr.forEach(t),Rto=r(jMe," \u2014 "),jR=n(jMe,"A",{href:!0});var Qqr=s(jR);Sto=r(Qqr,"TrOCRProcessor"),Qqr.forEach(t),Pto=r(jMe," (TrOCR model)"),jMe.forEach(t),$to=i(jo),Gh=n(jo,"LI",{});var qMe=s(Gh);fK=n(qMe,"STRONG",{});var Hqr=s(fK);Ito=r(Hqr,"vision-text-dual-encoder"),Hqr.forEach(t),Dto=r(qMe," \u2014 "),qR=n(qMe,"A",{href:!0});var Uqr=s(qR);Nto=r(Uqr,"VisionTextDualEncoderProcessor"),Uqr.forEach(t),jto=r(qMe," (VisionTextDualEncoder model)"),qMe.forEach(t),qto=i(jo),Oh=n(jo,"LI",{});var GMe=s(Oh);mK=n(GMe,"STRONG",{});var Jqr=s(mK);Gto=r(Jqr,"wav2vec2"),Jqr.forEach(t),Oto=r(GMe," \u2014 "),GR=n(GMe,"A",{href:!0});var Yqr=s(GR);Xto=r(Yqr,"Wav2Vec2Processor"),Yqr.forEach(t),Vto=r(GMe," (Wav2Vec2 model)"),GMe.forEach(t),jo.forEach(t),zto=i(jt),m(Xh.$$.fragment,jt),Wto=i(jt),gK=n(jt,"P",{});var Kqr=s(gK);Qto=r(Kqr,"Examples:"),Kqr.forEach(t),Hto=i(jt),m(G3.$$.fragment,jt),jt.forEach(t),Uto=i(zs),Vh=n(zs,"DIV",{class:!0});var PSe=s(Vh);m(O3.$$.fragment,PSe),Jto=i(PSe),hK=n(PSe,"P",{});var Zqr=s(hK);Yto=r(Zqr,"Register a new processor for this class."),Zqr.forEach(t),PSe.forEach(t),zs.forEach(t),wke=i(c),Ji=n(c,"H2",{class:!0});var $Se=s(Ji);zh=n($Se,"A",{id:!0,class:!0,href:!0});var eGr=s(zh);pK=n(eGr,"SPAN",{});var oGr=s(pK);m(X3.$$.fragment,oGr),oGr.forEach(t),eGr.forEach(t),Kto=i($Se),_K=n($Se,"SPAN",{});var rGr=s(_K);Zto=r(rGr,"AutoModel"),rGr.forEach(t),$Se.forEach(t),Ake=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(V3.$$.fragment,Ws),eao=i(Ws),Yi=n(Ws,"P",{});var oW=s(Yi);oao=r(oW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=n(oW,"CODE",{});var tGr=s(uK);rao=r(tGr,"from_pretrained()"),tGr.forEach(t),tao=r(oW,"class method or the "),bK=n(oW,"CODE",{});var aGr=s(bK);aao=r(aGr,"from_config()"),aGr.forEach(t),nao=r(oW,`class
method.`),oW.forEach(t),sao=i(Ws),z3=n(Ws,"P",{});var ISe=s(z3);lao=r(ISe,"This class cannot be instantiated directly using "),vK=n(ISe,"CODE",{});var nGr=s(vK);iao=r(nGr,"__init__()"),nGr.forEach(t),dao=r(ISe," (throws an error)."),ISe.forEach(t),cao=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(W3.$$.fragment,Qs),fao=i(Qs),TK=n(Qs,"P",{});var sGr=s(TK);mao=r(sGr,"Instantiates one of the base model classes of the library from a configuration."),sGr.forEach(t),gao=i(Qs),Ki=n(Qs,"P",{});var rW=s(Ki);hao=r(rW,`Note:
Loading a model from its configuration file does `),FK=n(rW,"STRONG",{});var lGr=s(FK);pao=r(lGr,"not"),lGr.forEach(t),_ao=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(rW,"CODE",{});var iGr=s(CK);uao=r(iGr,"from_pretrained()"),iGr.forEach(t),bao=r(rW,"to load the model weights."),rW.forEach(t),vao=i(Qs),MK=n(Qs,"P",{});var dGr=s(MK);Tao=r(dGr,"Examples:"),dGr.forEach(t),Fao=i(Qs),m(Q3.$$.fragment,Qs),Qs.forEach(t),Cao=i(Ws),De=n(Ws,"DIV",{class:!0});var qt=s(De);m(H3.$$.fragment,qt),Mao=i(qt),EK=n(qt,"P",{});var cGr=s(EK);Eao=r(cGr,"Instantiate one of the base model classes of the library from a pretrained model."),cGr.forEach(t),yao=i(qt),Va=n(qt,"P",{});var gE=s(Va);wao=r(gE,"The model class to instantiate is selected based on the "),yK=n(gE,"CODE",{});var fGr=s(yK);Aao=r(fGr,"model_type"),fGr.forEach(t),Lao=r(gE,` property of the config object (either
passed as an argument or loaded from `),wK=n(gE,"CODE",{});var mGr=s(wK);Bao=r(mGr,"pretrained_model_name_or_path"),mGr.forEach(t),xao=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AK=n(gE,"CODE",{});var gGr=s(AK);kao=r(gGr,"pretrained_model_name_or_path"),gGr.forEach(t),Rao=r(gE,":"),gE.forEach(t),Sao=i(qt),F=n(qt,"UL",{});var C=s(F);Wh=n(C,"LI",{});var OMe=s(Wh);LK=n(OMe,"STRONG",{});var hGr=s(LK);Pao=r(hGr,"albert"),hGr.forEach(t),$ao=r(OMe," \u2014 "),OR=n(OMe,"A",{href:!0});var pGr=s(OR);Iao=r(pGr,"AlbertModel"),pGr.forEach(t),Dao=r(OMe," (ALBERT model)"),OMe.forEach(t),Nao=i(C),Qh=n(C,"LI",{});var XMe=s(Qh);BK=n(XMe,"STRONG",{});var _Gr=s(BK);jao=r(_Gr,"bart"),_Gr.forEach(t),qao=r(XMe," \u2014 "),XR=n(XMe,"A",{href:!0});var uGr=s(XR);Gao=r(uGr,"BartModel"),uGr.forEach(t),Oao=r(XMe," (BART model)"),XMe.forEach(t),Xao=i(C),Hh=n(C,"LI",{});var VMe=s(Hh);xK=n(VMe,"STRONG",{});var bGr=s(xK);Vao=r(bGr,"beit"),bGr.forEach(t),zao=r(VMe," \u2014 "),VR=n(VMe,"A",{href:!0});var vGr=s(VR);Wao=r(vGr,"BeitModel"),vGr.forEach(t),Qao=r(VMe," (BEiT model)"),VMe.forEach(t),Hao=i(C),Uh=n(C,"LI",{});var zMe=s(Uh);kK=n(zMe,"STRONG",{});var TGr=s(kK);Uao=r(TGr,"bert"),TGr.forEach(t),Jao=r(zMe," \u2014 "),zR=n(zMe,"A",{href:!0});var FGr=s(zR);Yao=r(FGr,"BertModel"),FGr.forEach(t),Kao=r(zMe," (BERT model)"),zMe.forEach(t),Zao=i(C),Jh=n(C,"LI",{});var WMe=s(Jh);RK=n(WMe,"STRONG",{});var CGr=s(RK);eno=r(CGr,"bert-generation"),CGr.forEach(t),ono=r(WMe," \u2014 "),WR=n(WMe,"A",{href:!0});var MGr=s(WR);rno=r(MGr,"BertGenerationEncoder"),MGr.forEach(t),tno=r(WMe," (Bert Generation model)"),WMe.forEach(t),ano=i(C),Yh=n(C,"LI",{});var QMe=s(Yh);SK=n(QMe,"STRONG",{});var EGr=s(SK);nno=r(EGr,"big_bird"),EGr.forEach(t),sno=r(QMe," \u2014 "),QR=n(QMe,"A",{href:!0});var yGr=s(QR);lno=r(yGr,"BigBirdModel"),yGr.forEach(t),ino=r(QMe," (BigBird model)"),QMe.forEach(t),dno=i(C),Kh=n(C,"LI",{});var HMe=s(Kh);PK=n(HMe,"STRONG",{});var wGr=s(PK);cno=r(wGr,"bigbird_pegasus"),wGr.forEach(t),fno=r(HMe," \u2014 "),HR=n(HMe,"A",{href:!0});var AGr=s(HR);mno=r(AGr,"BigBirdPegasusModel"),AGr.forEach(t),gno=r(HMe," (BigBirdPegasus model)"),HMe.forEach(t),hno=i(C),Zh=n(C,"LI",{});var UMe=s(Zh);$K=n(UMe,"STRONG",{});var LGr=s($K);pno=r(LGr,"blenderbot"),LGr.forEach(t),_no=r(UMe," \u2014 "),UR=n(UMe,"A",{href:!0});var BGr=s(UR);uno=r(BGr,"BlenderbotModel"),BGr.forEach(t),bno=r(UMe," (Blenderbot model)"),UMe.forEach(t),vno=i(C),ep=n(C,"LI",{});var JMe=s(ep);IK=n(JMe,"STRONG",{});var xGr=s(IK);Tno=r(xGr,"blenderbot-small"),xGr.forEach(t),Fno=r(JMe," \u2014 "),JR=n(JMe,"A",{href:!0});var kGr=s(JR);Cno=r(kGr,"BlenderbotSmallModel"),kGr.forEach(t),Mno=r(JMe," (BlenderbotSmall model)"),JMe.forEach(t),Eno=i(C),op=n(C,"LI",{});var YMe=s(op);DK=n(YMe,"STRONG",{});var RGr=s(DK);yno=r(RGr,"camembert"),RGr.forEach(t),wno=r(YMe," \u2014 "),YR=n(YMe,"A",{href:!0});var SGr=s(YR);Ano=r(SGr,"CamembertModel"),SGr.forEach(t),Lno=r(YMe," (CamemBERT model)"),YMe.forEach(t),Bno=i(C),rp=n(C,"LI",{});var KMe=s(rp);NK=n(KMe,"STRONG",{});var PGr=s(NK);xno=r(PGr,"canine"),PGr.forEach(t),kno=r(KMe," \u2014 "),KR=n(KMe,"A",{href:!0});var $Gr=s(KR);Rno=r($Gr,"CanineModel"),$Gr.forEach(t),Sno=r(KMe," (Canine model)"),KMe.forEach(t),Pno=i(C),tp=n(C,"LI",{});var ZMe=s(tp);jK=n(ZMe,"STRONG",{});var IGr=s(jK);$no=r(IGr,"clip"),IGr.forEach(t),Ino=r(ZMe," \u2014 "),ZR=n(ZMe,"A",{href:!0});var DGr=s(ZR);Dno=r(DGr,"CLIPModel"),DGr.forEach(t),Nno=r(ZMe," (CLIP model)"),ZMe.forEach(t),jno=i(C),ap=n(C,"LI",{});var e4e=s(ap);qK=n(e4e,"STRONG",{});var NGr=s(qK);qno=r(NGr,"convbert"),NGr.forEach(t),Gno=r(e4e," \u2014 "),eS=n(e4e,"A",{href:!0});var jGr=s(eS);Ono=r(jGr,"ConvBertModel"),jGr.forEach(t),Xno=r(e4e," (ConvBERT model)"),e4e.forEach(t),Vno=i(C),np=n(C,"LI",{});var o4e=s(np);GK=n(o4e,"STRONG",{});var qGr=s(GK);zno=r(qGr,"convnext"),qGr.forEach(t),Wno=r(o4e," \u2014 "),oS=n(o4e,"A",{href:!0});var GGr=s(oS);Qno=r(GGr,"ConvNextModel"),GGr.forEach(t),Hno=r(o4e," (ConvNext model)"),o4e.forEach(t),Uno=i(C),sp=n(C,"LI",{});var r4e=s(sp);OK=n(r4e,"STRONG",{});var OGr=s(OK);Jno=r(OGr,"ctrl"),OGr.forEach(t),Yno=r(r4e," \u2014 "),rS=n(r4e,"A",{href:!0});var XGr=s(rS);Kno=r(XGr,"CTRLModel"),XGr.forEach(t),Zno=r(r4e," (CTRL model)"),r4e.forEach(t),eso=i(C),lp=n(C,"LI",{});var t4e=s(lp);XK=n(t4e,"STRONG",{});var VGr=s(XK);oso=r(VGr,"data2vec-audio"),VGr.forEach(t),rso=r(t4e," \u2014 "),tS=n(t4e,"A",{href:!0});var zGr=s(tS);tso=r(zGr,"Data2VecAudioModel"),zGr.forEach(t),aso=r(t4e," (Data2VecAudio model)"),t4e.forEach(t),nso=i(C),ip=n(C,"LI",{});var a4e=s(ip);VK=n(a4e,"STRONG",{});var WGr=s(VK);sso=r(WGr,"data2vec-text"),WGr.forEach(t),lso=r(a4e," \u2014 "),aS=n(a4e,"A",{href:!0});var QGr=s(aS);iso=r(QGr,"Data2VecTextModel"),QGr.forEach(t),dso=r(a4e," (Data2VecText model)"),a4e.forEach(t),cso=i(C),dp=n(C,"LI",{});var n4e=s(dp);zK=n(n4e,"STRONG",{});var HGr=s(zK);fso=r(HGr,"deberta"),HGr.forEach(t),mso=r(n4e," \u2014 "),nS=n(n4e,"A",{href:!0});var UGr=s(nS);gso=r(UGr,"DebertaModel"),UGr.forEach(t),hso=r(n4e," (DeBERTa model)"),n4e.forEach(t),pso=i(C),cp=n(C,"LI",{});var s4e=s(cp);WK=n(s4e,"STRONG",{});var JGr=s(WK);_so=r(JGr,"deberta-v2"),JGr.forEach(t),uso=r(s4e," \u2014 "),sS=n(s4e,"A",{href:!0});var YGr=s(sS);bso=r(YGr,"DebertaV2Model"),YGr.forEach(t),vso=r(s4e," (DeBERTa-v2 model)"),s4e.forEach(t),Tso=i(C),fp=n(C,"LI",{});var l4e=s(fp);QK=n(l4e,"STRONG",{});var KGr=s(QK);Fso=r(KGr,"decision_transformer"),KGr.forEach(t),Cso=r(l4e," \u2014 "),lS=n(l4e,"A",{href:!0});var ZGr=s(lS);Mso=r(ZGr,"DecisionTransformerModel"),ZGr.forEach(t),Eso=r(l4e," (Decision Transformer model)"),l4e.forEach(t),yso=i(C),mp=n(C,"LI",{});var i4e=s(mp);HK=n(i4e,"STRONG",{});var eOr=s(HK);wso=r(eOr,"deit"),eOr.forEach(t),Aso=r(i4e," \u2014 "),iS=n(i4e,"A",{href:!0});var oOr=s(iS);Lso=r(oOr,"DeiTModel"),oOr.forEach(t),Bso=r(i4e," (DeiT model)"),i4e.forEach(t),xso=i(C),gp=n(C,"LI",{});var d4e=s(gp);UK=n(d4e,"STRONG",{});var rOr=s(UK);kso=r(rOr,"detr"),rOr.forEach(t),Rso=r(d4e," \u2014 "),dS=n(d4e,"A",{href:!0});var tOr=s(dS);Sso=r(tOr,"DetrModel"),tOr.forEach(t),Pso=r(d4e," (DETR model)"),d4e.forEach(t),$so=i(C),hp=n(C,"LI",{});var c4e=s(hp);JK=n(c4e,"STRONG",{});var aOr=s(JK);Iso=r(aOr,"distilbert"),aOr.forEach(t),Dso=r(c4e," \u2014 "),cS=n(c4e,"A",{href:!0});var nOr=s(cS);Nso=r(nOr,"DistilBertModel"),nOr.forEach(t),jso=r(c4e," (DistilBERT model)"),c4e.forEach(t),qso=i(C),pp=n(C,"LI",{});var f4e=s(pp);YK=n(f4e,"STRONG",{});var sOr=s(YK);Gso=r(sOr,"dpr"),sOr.forEach(t),Oso=r(f4e," \u2014 "),fS=n(f4e,"A",{href:!0});var lOr=s(fS);Xso=r(lOr,"DPRQuestionEncoder"),lOr.forEach(t),Vso=r(f4e," (DPR model)"),f4e.forEach(t),zso=i(C),_p=n(C,"LI",{});var m4e=s(_p);KK=n(m4e,"STRONG",{});var iOr=s(KK);Wso=r(iOr,"dpt"),iOr.forEach(t),Qso=r(m4e," \u2014 "),mS=n(m4e,"A",{href:!0});var dOr=s(mS);Hso=r(dOr,"DPTModel"),dOr.forEach(t),Uso=r(m4e," (DPT model)"),m4e.forEach(t),Jso=i(C),up=n(C,"LI",{});var g4e=s(up);ZK=n(g4e,"STRONG",{});var cOr=s(ZK);Yso=r(cOr,"electra"),cOr.forEach(t),Kso=r(g4e," \u2014 "),gS=n(g4e,"A",{href:!0});var fOr=s(gS);Zso=r(fOr,"ElectraModel"),fOr.forEach(t),elo=r(g4e," (ELECTRA model)"),g4e.forEach(t),olo=i(C),bp=n(C,"LI",{});var h4e=s(bp);eZ=n(h4e,"STRONG",{});var mOr=s(eZ);rlo=r(mOr,"flaubert"),mOr.forEach(t),tlo=r(h4e," \u2014 "),hS=n(h4e,"A",{href:!0});var gOr=s(hS);alo=r(gOr,"FlaubertModel"),gOr.forEach(t),nlo=r(h4e," (FlauBERT model)"),h4e.forEach(t),slo=i(C),vp=n(C,"LI",{});var p4e=s(vp);oZ=n(p4e,"STRONG",{});var hOr=s(oZ);llo=r(hOr,"fnet"),hOr.forEach(t),ilo=r(p4e," \u2014 "),pS=n(p4e,"A",{href:!0});var pOr=s(pS);dlo=r(pOr,"FNetModel"),pOr.forEach(t),clo=r(p4e," (FNet model)"),p4e.forEach(t),flo=i(C),Tp=n(C,"LI",{});var _4e=s(Tp);rZ=n(_4e,"STRONG",{});var _Or=s(rZ);mlo=r(_Or,"fsmt"),_Or.forEach(t),glo=r(_4e," \u2014 "),_S=n(_4e,"A",{href:!0});var uOr=s(_S);hlo=r(uOr,"FSMTModel"),uOr.forEach(t),plo=r(_4e," (FairSeq Machine-Translation model)"),_4e.forEach(t),_lo=i(C),js=n(C,"LI",{});var K7=s(js);tZ=n(K7,"STRONG",{});var bOr=s(tZ);ulo=r(bOr,"funnel"),bOr.forEach(t),blo=r(K7," \u2014 "),uS=n(K7,"A",{href:!0});var vOr=s(uS);vlo=r(vOr,"FunnelModel"),vOr.forEach(t),Tlo=r(K7," or "),bS=n(K7,"A",{href:!0});var TOr=s(bS);Flo=r(TOr,"FunnelBaseModel"),TOr.forEach(t),Clo=r(K7," (Funnel Transformer model)"),K7.forEach(t),Mlo=i(C),Fp=n(C,"LI",{});var u4e=s(Fp);aZ=n(u4e,"STRONG",{});var FOr=s(aZ);Elo=r(FOr,"glpn"),FOr.forEach(t),ylo=r(u4e," \u2014 "),vS=n(u4e,"A",{href:!0});var COr=s(vS);wlo=r(COr,"GLPNModel"),COr.forEach(t),Alo=r(u4e," (GLPN model)"),u4e.forEach(t),Llo=i(C),Cp=n(C,"LI",{});var b4e=s(Cp);nZ=n(b4e,"STRONG",{});var MOr=s(nZ);Blo=r(MOr,"gpt2"),MOr.forEach(t),xlo=r(b4e," \u2014 "),TS=n(b4e,"A",{href:!0});var EOr=s(TS);klo=r(EOr,"GPT2Model"),EOr.forEach(t),Rlo=r(b4e," (OpenAI GPT-2 model)"),b4e.forEach(t),Slo=i(C),Mp=n(C,"LI",{});var v4e=s(Mp);sZ=n(v4e,"STRONG",{});var yOr=s(sZ);Plo=r(yOr,"gpt_neo"),yOr.forEach(t),$lo=r(v4e," \u2014 "),FS=n(v4e,"A",{href:!0});var wOr=s(FS);Ilo=r(wOr,"GPTNeoModel"),wOr.forEach(t),Dlo=r(v4e," (GPT Neo model)"),v4e.forEach(t),Nlo=i(C),Ep=n(C,"LI",{});var T4e=s(Ep);lZ=n(T4e,"STRONG",{});var AOr=s(lZ);jlo=r(AOr,"gptj"),AOr.forEach(t),qlo=r(T4e," \u2014 "),CS=n(T4e,"A",{href:!0});var LOr=s(CS);Glo=r(LOr,"GPTJModel"),LOr.forEach(t),Olo=r(T4e," (GPT-J model)"),T4e.forEach(t),Xlo=i(C),yp=n(C,"LI",{});var F4e=s(yp);iZ=n(F4e,"STRONG",{});var BOr=s(iZ);Vlo=r(BOr,"hubert"),BOr.forEach(t),zlo=r(F4e," \u2014 "),MS=n(F4e,"A",{href:!0});var xOr=s(MS);Wlo=r(xOr,"HubertModel"),xOr.forEach(t),Qlo=r(F4e," (Hubert model)"),F4e.forEach(t),Hlo=i(C),wp=n(C,"LI",{});var C4e=s(wp);dZ=n(C4e,"STRONG",{});var kOr=s(dZ);Ulo=r(kOr,"ibert"),kOr.forEach(t),Jlo=r(C4e," \u2014 "),ES=n(C4e,"A",{href:!0});var ROr=s(ES);Ylo=r(ROr,"IBertModel"),ROr.forEach(t),Klo=r(C4e," (I-BERT model)"),C4e.forEach(t),Zlo=i(C),Ap=n(C,"LI",{});var M4e=s(Ap);cZ=n(M4e,"STRONG",{});var SOr=s(cZ);eio=r(SOr,"imagegpt"),SOr.forEach(t),oio=r(M4e," \u2014 "),yS=n(M4e,"A",{href:!0});var POr=s(yS);rio=r(POr,"ImageGPTModel"),POr.forEach(t),tio=r(M4e," (ImageGPT model)"),M4e.forEach(t),aio=i(C),Lp=n(C,"LI",{});var E4e=s(Lp);fZ=n(E4e,"STRONG",{});var $Or=s(fZ);nio=r($Or,"layoutlm"),$Or.forEach(t),sio=r(E4e," \u2014 "),wS=n(E4e,"A",{href:!0});var IOr=s(wS);lio=r(IOr,"LayoutLMModel"),IOr.forEach(t),iio=r(E4e," (LayoutLM model)"),E4e.forEach(t),dio=i(C),Bp=n(C,"LI",{});var y4e=s(Bp);mZ=n(y4e,"STRONG",{});var DOr=s(mZ);cio=r(DOr,"layoutlmv2"),DOr.forEach(t),fio=r(y4e," \u2014 "),AS=n(y4e,"A",{href:!0});var NOr=s(AS);mio=r(NOr,"LayoutLMv2Model"),NOr.forEach(t),gio=r(y4e," (LayoutLMv2 model)"),y4e.forEach(t),hio=i(C),xp=n(C,"LI",{});var w4e=s(xp);gZ=n(w4e,"STRONG",{});var jOr=s(gZ);pio=r(jOr,"led"),jOr.forEach(t),_io=r(w4e," \u2014 "),LS=n(w4e,"A",{href:!0});var qOr=s(LS);uio=r(qOr,"LEDModel"),qOr.forEach(t),bio=r(w4e," (LED model)"),w4e.forEach(t),vio=i(C),kp=n(C,"LI",{});var A4e=s(kp);hZ=n(A4e,"STRONG",{});var GOr=s(hZ);Tio=r(GOr,"longformer"),GOr.forEach(t),Fio=r(A4e," \u2014 "),BS=n(A4e,"A",{href:!0});var OOr=s(BS);Cio=r(OOr,"LongformerModel"),OOr.forEach(t),Mio=r(A4e," (Longformer model)"),A4e.forEach(t),Eio=i(C),Rp=n(C,"LI",{});var L4e=s(Rp);pZ=n(L4e,"STRONG",{});var XOr=s(pZ);yio=r(XOr,"luke"),XOr.forEach(t),wio=r(L4e," \u2014 "),xS=n(L4e,"A",{href:!0});var VOr=s(xS);Aio=r(VOr,"LukeModel"),VOr.forEach(t),Lio=r(L4e," (LUKE model)"),L4e.forEach(t),Bio=i(C),Sp=n(C,"LI",{});var B4e=s(Sp);_Z=n(B4e,"STRONG",{});var zOr=s(_Z);xio=r(zOr,"lxmert"),zOr.forEach(t),kio=r(B4e," \u2014 "),kS=n(B4e,"A",{href:!0});var WOr=s(kS);Rio=r(WOr,"LxmertModel"),WOr.forEach(t),Sio=r(B4e," (LXMERT model)"),B4e.forEach(t),Pio=i(C),Pp=n(C,"LI",{});var x4e=s(Pp);uZ=n(x4e,"STRONG",{});var QOr=s(uZ);$io=r(QOr,"m2m_100"),QOr.forEach(t),Iio=r(x4e," \u2014 "),RS=n(x4e,"A",{href:!0});var HOr=s(RS);Dio=r(HOr,"M2M100Model"),HOr.forEach(t),Nio=r(x4e," (M2M100 model)"),x4e.forEach(t),jio=i(C),$p=n(C,"LI",{});var k4e=s($p);bZ=n(k4e,"STRONG",{});var UOr=s(bZ);qio=r(UOr,"marian"),UOr.forEach(t),Gio=r(k4e," \u2014 "),SS=n(k4e,"A",{href:!0});var JOr=s(SS);Oio=r(JOr,"MarianModel"),JOr.forEach(t),Xio=r(k4e," (Marian model)"),k4e.forEach(t),Vio=i(C),Ip=n(C,"LI",{});var R4e=s(Ip);vZ=n(R4e,"STRONG",{});var YOr=s(vZ);zio=r(YOr,"maskformer"),YOr.forEach(t),Wio=r(R4e," \u2014 "),PS=n(R4e,"A",{href:!0});var KOr=s(PS);Qio=r(KOr,"MaskFormerModel"),KOr.forEach(t),Hio=r(R4e," (MaskFormer model)"),R4e.forEach(t),Uio=i(C),Dp=n(C,"LI",{});var S4e=s(Dp);TZ=n(S4e,"STRONG",{});var ZOr=s(TZ);Jio=r(ZOr,"mbart"),ZOr.forEach(t),Yio=r(S4e," \u2014 "),$S=n(S4e,"A",{href:!0});var eXr=s($S);Kio=r(eXr,"MBartModel"),eXr.forEach(t),Zio=r(S4e," (mBART model)"),S4e.forEach(t),edo=i(C),Np=n(C,"LI",{});var P4e=s(Np);FZ=n(P4e,"STRONG",{});var oXr=s(FZ);odo=r(oXr,"megatron-bert"),oXr.forEach(t),rdo=r(P4e," \u2014 "),IS=n(P4e,"A",{href:!0});var rXr=s(IS);tdo=r(rXr,"MegatronBertModel"),rXr.forEach(t),ado=r(P4e," (MegatronBert model)"),P4e.forEach(t),ndo=i(C),jp=n(C,"LI",{});var $4e=s(jp);CZ=n($4e,"STRONG",{});var tXr=s(CZ);sdo=r(tXr,"mobilebert"),tXr.forEach(t),ldo=r($4e," \u2014 "),DS=n($4e,"A",{href:!0});var aXr=s(DS);ido=r(aXr,"MobileBertModel"),aXr.forEach(t),ddo=r($4e," (MobileBERT model)"),$4e.forEach(t),cdo=i(C),qp=n(C,"LI",{});var I4e=s(qp);MZ=n(I4e,"STRONG",{});var nXr=s(MZ);fdo=r(nXr,"mpnet"),nXr.forEach(t),mdo=r(I4e," \u2014 "),NS=n(I4e,"A",{href:!0});var sXr=s(NS);gdo=r(sXr,"MPNetModel"),sXr.forEach(t),hdo=r(I4e," (MPNet model)"),I4e.forEach(t),pdo=i(C),Gp=n(C,"LI",{});var D4e=s(Gp);EZ=n(D4e,"STRONG",{});var lXr=s(EZ);_do=r(lXr,"mt5"),lXr.forEach(t),udo=r(D4e," \u2014 "),jS=n(D4e,"A",{href:!0});var iXr=s(jS);bdo=r(iXr,"MT5Model"),iXr.forEach(t),vdo=r(D4e," (mT5 model)"),D4e.forEach(t),Tdo=i(C),Op=n(C,"LI",{});var N4e=s(Op);yZ=n(N4e,"STRONG",{});var dXr=s(yZ);Fdo=r(dXr,"nystromformer"),dXr.forEach(t),Cdo=r(N4e," \u2014 "),qS=n(N4e,"A",{href:!0});var cXr=s(qS);Mdo=r(cXr,"NystromformerModel"),cXr.forEach(t),Edo=r(N4e," (Nystromformer model)"),N4e.forEach(t),ydo=i(C),Xp=n(C,"LI",{});var j4e=s(Xp);wZ=n(j4e,"STRONG",{});var fXr=s(wZ);wdo=r(fXr,"openai-gpt"),fXr.forEach(t),Ado=r(j4e," \u2014 "),GS=n(j4e,"A",{href:!0});var mXr=s(GS);Ldo=r(mXr,"OpenAIGPTModel"),mXr.forEach(t),Bdo=r(j4e," (OpenAI GPT model)"),j4e.forEach(t),xdo=i(C),Vp=n(C,"LI",{});var q4e=s(Vp);AZ=n(q4e,"STRONG",{});var gXr=s(AZ);kdo=r(gXr,"pegasus"),gXr.forEach(t),Rdo=r(q4e," \u2014 "),OS=n(q4e,"A",{href:!0});var hXr=s(OS);Sdo=r(hXr,"PegasusModel"),hXr.forEach(t),Pdo=r(q4e," (Pegasus model)"),q4e.forEach(t),$do=i(C),zp=n(C,"LI",{});var G4e=s(zp);LZ=n(G4e,"STRONG",{});var pXr=s(LZ);Ido=r(pXr,"perceiver"),pXr.forEach(t),Ddo=r(G4e," \u2014 "),XS=n(G4e,"A",{href:!0});var _Xr=s(XS);Ndo=r(_Xr,"PerceiverModel"),_Xr.forEach(t),jdo=r(G4e," (Perceiver model)"),G4e.forEach(t),qdo=i(C),Wp=n(C,"LI",{});var O4e=s(Wp);BZ=n(O4e,"STRONG",{});var uXr=s(BZ);Gdo=r(uXr,"plbart"),uXr.forEach(t),Odo=r(O4e," \u2014 "),VS=n(O4e,"A",{href:!0});var bXr=s(VS);Xdo=r(bXr,"PLBartModel"),bXr.forEach(t),Vdo=r(O4e," (PLBart model)"),O4e.forEach(t),zdo=i(C),Qp=n(C,"LI",{});var X4e=s(Qp);xZ=n(X4e,"STRONG",{});var vXr=s(xZ);Wdo=r(vXr,"poolformer"),vXr.forEach(t),Qdo=r(X4e," \u2014 "),zS=n(X4e,"A",{href:!0});var TXr=s(zS);Hdo=r(TXr,"PoolFormerModel"),TXr.forEach(t),Udo=r(X4e," (PoolFormer model)"),X4e.forEach(t),Jdo=i(C),Hp=n(C,"LI",{});var V4e=s(Hp);kZ=n(V4e,"STRONG",{});var FXr=s(kZ);Ydo=r(FXr,"prophetnet"),FXr.forEach(t),Kdo=r(V4e," \u2014 "),WS=n(V4e,"A",{href:!0});var CXr=s(WS);Zdo=r(CXr,"ProphetNetModel"),CXr.forEach(t),eco=r(V4e," (ProphetNet model)"),V4e.forEach(t),oco=i(C),Up=n(C,"LI",{});var z4e=s(Up);RZ=n(z4e,"STRONG",{});var MXr=s(RZ);rco=r(MXr,"qdqbert"),MXr.forEach(t),tco=r(z4e," \u2014 "),QS=n(z4e,"A",{href:!0});var EXr=s(QS);aco=r(EXr,"QDQBertModel"),EXr.forEach(t),nco=r(z4e," (QDQBert model)"),z4e.forEach(t),sco=i(C),Jp=n(C,"LI",{});var W4e=s(Jp);SZ=n(W4e,"STRONG",{});var yXr=s(SZ);lco=r(yXr,"reformer"),yXr.forEach(t),ico=r(W4e," \u2014 "),HS=n(W4e,"A",{href:!0});var wXr=s(HS);dco=r(wXr,"ReformerModel"),wXr.forEach(t),cco=r(W4e," (Reformer model)"),W4e.forEach(t),fco=i(C),Yp=n(C,"LI",{});var Q4e=s(Yp);PZ=n(Q4e,"STRONG",{});var AXr=s(PZ);mco=r(AXr,"rembert"),AXr.forEach(t),gco=r(Q4e," \u2014 "),US=n(Q4e,"A",{href:!0});var LXr=s(US);hco=r(LXr,"RemBertModel"),LXr.forEach(t),pco=r(Q4e," (RemBERT model)"),Q4e.forEach(t),_co=i(C),Kp=n(C,"LI",{});var H4e=s(Kp);$Z=n(H4e,"STRONG",{});var BXr=s($Z);uco=r(BXr,"resnet"),BXr.forEach(t),bco=r(H4e," \u2014 "),JS=n(H4e,"A",{href:!0});var xXr=s(JS);vco=r(xXr,"ResNetModel"),xXr.forEach(t),Tco=r(H4e," (ResNet model)"),H4e.forEach(t),Fco=i(C),Zp=n(C,"LI",{});var U4e=s(Zp);IZ=n(U4e,"STRONG",{});var kXr=s(IZ);Cco=r(kXr,"retribert"),kXr.forEach(t),Mco=r(U4e," \u2014 "),YS=n(U4e,"A",{href:!0});var RXr=s(YS);Eco=r(RXr,"RetriBertModel"),RXr.forEach(t),yco=r(U4e," (RetriBERT model)"),U4e.forEach(t),wco=i(C),e_=n(C,"LI",{});var J4e=s(e_);DZ=n(J4e,"STRONG",{});var SXr=s(DZ);Aco=r(SXr,"roberta"),SXr.forEach(t),Lco=r(J4e," \u2014 "),KS=n(J4e,"A",{href:!0});var PXr=s(KS);Bco=r(PXr,"RobertaModel"),PXr.forEach(t),xco=r(J4e," (RoBERTa model)"),J4e.forEach(t),kco=i(C),o_=n(C,"LI",{});var Y4e=s(o_);NZ=n(Y4e,"STRONG",{});var $Xr=s(NZ);Rco=r($Xr,"roformer"),$Xr.forEach(t),Sco=r(Y4e," \u2014 "),ZS=n(Y4e,"A",{href:!0});var IXr=s(ZS);Pco=r(IXr,"RoFormerModel"),IXr.forEach(t),$co=r(Y4e," (RoFormer model)"),Y4e.forEach(t),Ico=i(C),r_=n(C,"LI",{});var K4e=s(r_);jZ=n(K4e,"STRONG",{});var DXr=s(jZ);Dco=r(DXr,"segformer"),DXr.forEach(t),Nco=r(K4e," \u2014 "),eP=n(K4e,"A",{href:!0});var NXr=s(eP);jco=r(NXr,"SegformerModel"),NXr.forEach(t),qco=r(K4e," (SegFormer model)"),K4e.forEach(t),Gco=i(C),t_=n(C,"LI",{});var Z4e=s(t_);qZ=n(Z4e,"STRONG",{});var jXr=s(qZ);Oco=r(jXr,"sew"),jXr.forEach(t),Xco=r(Z4e," \u2014 "),oP=n(Z4e,"A",{href:!0});var qXr=s(oP);Vco=r(qXr,"SEWModel"),qXr.forEach(t),zco=r(Z4e," (SEW model)"),Z4e.forEach(t),Wco=i(C),a_=n(C,"LI",{});var eEe=s(a_);GZ=n(eEe,"STRONG",{});var GXr=s(GZ);Qco=r(GXr,"sew-d"),GXr.forEach(t),Hco=r(eEe," \u2014 "),rP=n(eEe,"A",{href:!0});var OXr=s(rP);Uco=r(OXr,"SEWDModel"),OXr.forEach(t),Jco=r(eEe," (SEW-D model)"),eEe.forEach(t),Yco=i(C),n_=n(C,"LI",{});var oEe=s(n_);OZ=n(oEe,"STRONG",{});var XXr=s(OZ);Kco=r(XXr,"speech_to_text"),XXr.forEach(t),Zco=r(oEe," \u2014 "),tP=n(oEe,"A",{href:!0});var VXr=s(tP);efo=r(VXr,"Speech2TextModel"),VXr.forEach(t),ofo=r(oEe," (Speech2Text model)"),oEe.forEach(t),rfo=i(C),s_=n(C,"LI",{});var rEe=s(s_);XZ=n(rEe,"STRONG",{});var zXr=s(XZ);tfo=r(zXr,"splinter"),zXr.forEach(t),afo=r(rEe," \u2014 "),aP=n(rEe,"A",{href:!0});var WXr=s(aP);nfo=r(WXr,"SplinterModel"),WXr.forEach(t),sfo=r(rEe," (Splinter model)"),rEe.forEach(t),lfo=i(C),l_=n(C,"LI",{});var tEe=s(l_);VZ=n(tEe,"STRONG",{});var QXr=s(VZ);ifo=r(QXr,"squeezebert"),QXr.forEach(t),dfo=r(tEe," \u2014 "),nP=n(tEe,"A",{href:!0});var HXr=s(nP);cfo=r(HXr,"SqueezeBertModel"),HXr.forEach(t),ffo=r(tEe," (SqueezeBERT model)"),tEe.forEach(t),mfo=i(C),i_=n(C,"LI",{});var aEe=s(i_);zZ=n(aEe,"STRONG",{});var UXr=s(zZ);gfo=r(UXr,"swin"),UXr.forEach(t),hfo=r(aEe," \u2014 "),sP=n(aEe,"A",{href:!0});var JXr=s(sP);pfo=r(JXr,"SwinModel"),JXr.forEach(t),_fo=r(aEe," (Swin model)"),aEe.forEach(t),ufo=i(C),d_=n(C,"LI",{});var nEe=s(d_);WZ=n(nEe,"STRONG",{});var YXr=s(WZ);bfo=r(YXr,"t5"),YXr.forEach(t),vfo=r(nEe," \u2014 "),lP=n(nEe,"A",{href:!0});var KXr=s(lP);Tfo=r(KXr,"T5Model"),KXr.forEach(t),Ffo=r(nEe," (T5 model)"),nEe.forEach(t),Cfo=i(C),c_=n(C,"LI",{});var sEe=s(c_);QZ=n(sEe,"STRONG",{});var ZXr=s(QZ);Mfo=r(ZXr,"tapas"),ZXr.forEach(t),Efo=r(sEe," \u2014 "),iP=n(sEe,"A",{href:!0});var eVr=s(iP);yfo=r(eVr,"TapasModel"),eVr.forEach(t),wfo=r(sEe," (TAPAS model)"),sEe.forEach(t),Afo=i(C),f_=n(C,"LI",{});var lEe=s(f_);HZ=n(lEe,"STRONG",{});var oVr=s(HZ);Lfo=r(oVr,"transfo-xl"),oVr.forEach(t),Bfo=r(lEe," \u2014 "),dP=n(lEe,"A",{href:!0});var rVr=s(dP);xfo=r(rVr,"TransfoXLModel"),rVr.forEach(t),kfo=r(lEe," (Transformer-XL model)"),lEe.forEach(t),Rfo=i(C),m_=n(C,"LI",{});var iEe=s(m_);UZ=n(iEe,"STRONG",{});var tVr=s(UZ);Sfo=r(tVr,"unispeech"),tVr.forEach(t),Pfo=r(iEe," \u2014 "),cP=n(iEe,"A",{href:!0});var aVr=s(cP);$fo=r(aVr,"UniSpeechModel"),aVr.forEach(t),Ifo=r(iEe," (UniSpeech model)"),iEe.forEach(t),Dfo=i(C),g_=n(C,"LI",{});var dEe=s(g_);JZ=n(dEe,"STRONG",{});var nVr=s(JZ);Nfo=r(nVr,"unispeech-sat"),nVr.forEach(t),jfo=r(dEe," \u2014 "),fP=n(dEe,"A",{href:!0});var sVr=s(fP);qfo=r(sVr,"UniSpeechSatModel"),sVr.forEach(t),Gfo=r(dEe," (UniSpeechSat model)"),dEe.forEach(t),Ofo=i(C),h_=n(C,"LI",{});var cEe=s(h_);YZ=n(cEe,"STRONG",{});var lVr=s(YZ);Xfo=r(lVr,"van"),lVr.forEach(t),Vfo=r(cEe," \u2014 "),mP=n(cEe,"A",{href:!0});var iVr=s(mP);zfo=r(iVr,"VanModel"),iVr.forEach(t),Wfo=r(cEe," (VAN model)"),cEe.forEach(t),Qfo=i(C),p_=n(C,"LI",{});var fEe=s(p_);KZ=n(fEe,"STRONG",{});var dVr=s(KZ);Hfo=r(dVr,"vilt"),dVr.forEach(t),Ufo=r(fEe," \u2014 "),gP=n(fEe,"A",{href:!0});var cVr=s(gP);Jfo=r(cVr,"ViltModel"),cVr.forEach(t),Yfo=r(fEe," (ViLT model)"),fEe.forEach(t),Kfo=i(C),__=n(C,"LI",{});var mEe=s(__);ZZ=n(mEe,"STRONG",{});var fVr=s(ZZ);Zfo=r(fVr,"vision-text-dual-encoder"),fVr.forEach(t),emo=r(mEe," \u2014 "),hP=n(mEe,"A",{href:!0});var mVr=s(hP);omo=r(mVr,"VisionTextDualEncoderModel"),mVr.forEach(t),rmo=r(mEe," (VisionTextDualEncoder model)"),mEe.forEach(t),tmo=i(C),u_=n(C,"LI",{});var gEe=s(u_);eee=n(gEe,"STRONG",{});var gVr=s(eee);amo=r(gVr,"visual_bert"),gVr.forEach(t),nmo=r(gEe," \u2014 "),pP=n(gEe,"A",{href:!0});var hVr=s(pP);smo=r(hVr,"VisualBertModel"),hVr.forEach(t),lmo=r(gEe," (VisualBert model)"),gEe.forEach(t),imo=i(C),b_=n(C,"LI",{});var hEe=s(b_);oee=n(hEe,"STRONG",{});var pVr=s(oee);dmo=r(pVr,"vit"),pVr.forEach(t),cmo=r(hEe," \u2014 "),_P=n(hEe,"A",{href:!0});var _Vr=s(_P);fmo=r(_Vr,"ViTModel"),_Vr.forEach(t),mmo=r(hEe," (ViT model)"),hEe.forEach(t),gmo=i(C),v_=n(C,"LI",{});var pEe=s(v_);ree=n(pEe,"STRONG",{});var uVr=s(ree);hmo=r(uVr,"vit_mae"),uVr.forEach(t),pmo=r(pEe," \u2014 "),uP=n(pEe,"A",{href:!0});var bVr=s(uP);_mo=r(bVr,"ViTMAEModel"),bVr.forEach(t),umo=r(pEe," (ViTMAE model)"),pEe.forEach(t),bmo=i(C),T_=n(C,"LI",{});var _Ee=s(T_);tee=n(_Ee,"STRONG",{});var vVr=s(tee);vmo=r(vVr,"wav2vec2"),vVr.forEach(t),Tmo=r(_Ee," \u2014 "),bP=n(_Ee,"A",{href:!0});var TVr=s(bP);Fmo=r(TVr,"Wav2Vec2Model"),TVr.forEach(t),Cmo=r(_Ee," (Wav2Vec2 model)"),_Ee.forEach(t),Mmo=i(C),F_=n(C,"LI",{});var uEe=s(F_);aee=n(uEe,"STRONG",{});var FVr=s(aee);Emo=r(FVr,"wavlm"),FVr.forEach(t),ymo=r(uEe," \u2014 "),vP=n(uEe,"A",{href:!0});var CVr=s(vP);wmo=r(CVr,"WavLMModel"),CVr.forEach(t),Amo=r(uEe," (WavLM model)"),uEe.forEach(t),Lmo=i(C),C_=n(C,"LI",{});var bEe=s(C_);nee=n(bEe,"STRONG",{});var MVr=s(nee);Bmo=r(MVr,"xglm"),MVr.forEach(t),xmo=r(bEe," \u2014 "),TP=n(bEe,"A",{href:!0});var EVr=s(TP);kmo=r(EVr,"XGLMModel"),EVr.forEach(t),Rmo=r(bEe," (XGLM model)"),bEe.forEach(t),Smo=i(C),M_=n(C,"LI",{});var vEe=s(M_);see=n(vEe,"STRONG",{});var yVr=s(see);Pmo=r(yVr,"xlm"),yVr.forEach(t),$mo=r(vEe," \u2014 "),FP=n(vEe,"A",{href:!0});var wVr=s(FP);Imo=r(wVr,"XLMModel"),wVr.forEach(t),Dmo=r(vEe," (XLM model)"),vEe.forEach(t),Nmo=i(C),E_=n(C,"LI",{});var TEe=s(E_);lee=n(TEe,"STRONG",{});var AVr=s(lee);jmo=r(AVr,"xlm-prophetnet"),AVr.forEach(t),qmo=r(TEe," \u2014 "),CP=n(TEe,"A",{href:!0});var LVr=s(CP);Gmo=r(LVr,"XLMProphetNetModel"),LVr.forEach(t),Omo=r(TEe," (XLMProphetNet model)"),TEe.forEach(t),Xmo=i(C),y_=n(C,"LI",{});var FEe=s(y_);iee=n(FEe,"STRONG",{});var BVr=s(iee);Vmo=r(BVr,"xlm-roberta"),BVr.forEach(t),zmo=r(FEe," \u2014 "),MP=n(FEe,"A",{href:!0});var xVr=s(MP);Wmo=r(xVr,"XLMRobertaModel"),xVr.forEach(t),Qmo=r(FEe," (XLM-RoBERTa model)"),FEe.forEach(t),Hmo=i(C),w_=n(C,"LI",{});var CEe=s(w_);dee=n(CEe,"STRONG",{});var kVr=s(dee);Umo=r(kVr,"xlm-roberta-xl"),kVr.forEach(t),Jmo=r(CEe," \u2014 "),EP=n(CEe,"A",{href:!0});var RVr=s(EP);Ymo=r(RVr,"XLMRobertaXLModel"),RVr.forEach(t),Kmo=r(CEe," (XLM-RoBERTa-XL model)"),CEe.forEach(t),Zmo=i(C),A_=n(C,"LI",{});var MEe=s(A_);cee=n(MEe,"STRONG",{});var SVr=s(cee);ego=r(SVr,"xlnet"),SVr.forEach(t),ogo=r(MEe," \u2014 "),yP=n(MEe,"A",{href:!0});var PVr=s(yP);rgo=r(PVr,"XLNetModel"),PVr.forEach(t),tgo=r(MEe," (XLNet model)"),MEe.forEach(t),ago=i(C),L_=n(C,"LI",{});var EEe=s(L_);fee=n(EEe,"STRONG",{});var $Vr=s(fee);ngo=r($Vr,"yoso"),$Vr.forEach(t),sgo=r(EEe," \u2014 "),wP=n(EEe,"A",{href:!0});var IVr=s(wP);lgo=r(IVr,"YosoModel"),IVr.forEach(t),igo=r(EEe," (YOSO model)"),EEe.forEach(t),C.forEach(t),dgo=i(qt),B_=n(qt,"P",{});var yEe=s(B_);cgo=r(yEe,"The model is set in evaluation mode by default using "),mee=n(yEe,"CODE",{});var DVr=s(mee);fgo=r(DVr,"model.eval()"),DVr.forEach(t),mgo=r(yEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gee=n(yEe,"CODE",{});var NVr=s(gee);ggo=r(NVr,"model.train()"),NVr.forEach(t),yEe.forEach(t),hgo=i(qt),hee=n(qt,"P",{});var jVr=s(hee);pgo=r(jVr,"Examples:"),jVr.forEach(t),_go=i(qt),m(U3.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Lke=i(c),Zi=n(c,"H2",{class:!0});var DSe=s(Zi);x_=n(DSe,"A",{id:!0,class:!0,href:!0});var qVr=s(x_);pee=n(qVr,"SPAN",{});var GVr=s(pee);m(J3.$$.fragment,GVr),GVr.forEach(t),qVr.forEach(t),ugo=i(DSe),_ee=n(DSe,"SPAN",{});var OVr=s(_ee);bgo=r(OVr,"AutoModelForPreTraining"),OVr.forEach(t),DSe.forEach(t),Bke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(Y3.$$.fragment,Hs),vgo=i(Hs),ed=n(Hs,"P",{});var tW=s(ed);Tgo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uee=n(tW,"CODE",{});var XVr=s(uee);Fgo=r(XVr,"from_pretrained()"),XVr.forEach(t),Cgo=r(tW,"class method or the "),bee=n(tW,"CODE",{});var VVr=s(bee);Mgo=r(VVr,"from_config()"),VVr.forEach(t),Ego=r(tW,`class
method.`),tW.forEach(t),ygo=i(Hs),K3=n(Hs,"P",{});var NSe=s(K3);wgo=r(NSe,"This class cannot be instantiated directly using "),vee=n(NSe,"CODE",{});var zVr=s(vee);Ago=r(zVr,"__init__()"),zVr.forEach(t),Lgo=r(NSe," (throws an error)."),NSe.forEach(t),Bgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(Z3.$$.fragment,Us),xgo=i(Us),Tee=n(Us,"P",{});var WVr=s(Tee);kgo=r(WVr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WVr.forEach(t),Rgo=i(Us),od=n(Us,"P",{});var aW=s(od);Sgo=r(aW,`Note:
Loading a model from its configuration file does `),Fee=n(aW,"STRONG",{});var QVr=s(Fee);Pgo=r(QVr,"not"),QVr.forEach(t),$go=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(aW,"CODE",{});var HVr=s(Cee);Igo=r(HVr,"from_pretrained()"),HVr.forEach(t),Dgo=r(aW,"to load the model weights."),aW.forEach(t),Ngo=i(Us),Mee=n(Us,"P",{});var UVr=s(Mee);jgo=r(UVr,"Examples:"),UVr.forEach(t),qgo=i(Us),m(ey.$$.fragment,Us),Us.forEach(t),Ggo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(oy.$$.fragment,Gt),Ogo=i(Gt),Eee=n(Gt,"P",{});var JVr=s(Eee);Xgo=r(JVr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JVr.forEach(t),Vgo=i(Gt),za=n(Gt,"P",{});var hE=s(za);zgo=r(hE,"The model class to instantiate is selected based on the "),yee=n(hE,"CODE",{});var YVr=s(yee);Wgo=r(YVr,"model_type"),YVr.forEach(t),Qgo=r(hE,` property of the config object (either
passed as an argument or loaded from `),wee=n(hE,"CODE",{});var KVr=s(wee);Hgo=r(KVr,"pretrained_model_name_or_path"),KVr.forEach(t),Ugo=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aee=n(hE,"CODE",{});var ZVr=s(Aee);Jgo=r(ZVr,"pretrained_model_name_or_path"),ZVr.forEach(t),Ygo=r(hE,":"),hE.forEach(t),Kgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);k_=n(S,"LI",{});var wEe=s(k_);Lee=n(wEe,"STRONG",{});var ezr=s(Lee);Zgo=r(ezr,"albert"),ezr.forEach(t),eho=r(wEe," \u2014 "),AP=n(wEe,"A",{href:!0});var ozr=s(AP);oho=r(ozr,"AlbertForPreTraining"),ozr.forEach(t),rho=r(wEe," (ALBERT model)"),wEe.forEach(t),tho=i(S),R_=n(S,"LI",{});var AEe=s(R_);Bee=n(AEe,"STRONG",{});var rzr=s(Bee);aho=r(rzr,"bart"),rzr.forEach(t),nho=r(AEe," \u2014 "),LP=n(AEe,"A",{href:!0});var tzr=s(LP);sho=r(tzr,"BartForConditionalGeneration"),tzr.forEach(t),lho=r(AEe," (BART model)"),AEe.forEach(t),iho=i(S),S_=n(S,"LI",{});var LEe=s(S_);xee=n(LEe,"STRONG",{});var azr=s(xee);dho=r(azr,"bert"),azr.forEach(t),cho=r(LEe," \u2014 "),BP=n(LEe,"A",{href:!0});var nzr=s(BP);fho=r(nzr,"BertForPreTraining"),nzr.forEach(t),mho=r(LEe," (BERT model)"),LEe.forEach(t),gho=i(S),P_=n(S,"LI",{});var BEe=s(P_);kee=n(BEe,"STRONG",{});var szr=s(kee);hho=r(szr,"big_bird"),szr.forEach(t),pho=r(BEe," \u2014 "),xP=n(BEe,"A",{href:!0});var lzr=s(xP);_ho=r(lzr,"BigBirdForPreTraining"),lzr.forEach(t),uho=r(BEe," (BigBird model)"),BEe.forEach(t),bho=i(S),$_=n(S,"LI",{});var xEe=s($_);Ree=n(xEe,"STRONG",{});var izr=s(Ree);vho=r(izr,"camembert"),izr.forEach(t),Tho=r(xEe," \u2014 "),kP=n(xEe,"A",{href:!0});var dzr=s(kP);Fho=r(dzr,"CamembertForMaskedLM"),dzr.forEach(t),Cho=r(xEe," (CamemBERT model)"),xEe.forEach(t),Mho=i(S),I_=n(S,"LI",{});var kEe=s(I_);See=n(kEe,"STRONG",{});var czr=s(See);Eho=r(czr,"ctrl"),czr.forEach(t),yho=r(kEe," \u2014 "),RP=n(kEe,"A",{href:!0});var fzr=s(RP);who=r(fzr,"CTRLLMHeadModel"),fzr.forEach(t),Aho=r(kEe," (CTRL model)"),kEe.forEach(t),Lho=i(S),D_=n(S,"LI",{});var REe=s(D_);Pee=n(REe,"STRONG",{});var mzr=s(Pee);Bho=r(mzr,"data2vec-text"),mzr.forEach(t),xho=r(REe," \u2014 "),SP=n(REe,"A",{href:!0});var gzr=s(SP);kho=r(gzr,"Data2VecTextForMaskedLM"),gzr.forEach(t),Rho=r(REe," (Data2VecText model)"),REe.forEach(t),Sho=i(S),N_=n(S,"LI",{});var SEe=s(N_);$ee=n(SEe,"STRONG",{});var hzr=s($ee);Pho=r(hzr,"deberta"),hzr.forEach(t),$ho=r(SEe," \u2014 "),PP=n(SEe,"A",{href:!0});var pzr=s(PP);Iho=r(pzr,"DebertaForMaskedLM"),pzr.forEach(t),Dho=r(SEe," (DeBERTa model)"),SEe.forEach(t),Nho=i(S),j_=n(S,"LI",{});var PEe=s(j_);Iee=n(PEe,"STRONG",{});var _zr=s(Iee);jho=r(_zr,"deberta-v2"),_zr.forEach(t),qho=r(PEe," \u2014 "),$P=n(PEe,"A",{href:!0});var uzr=s($P);Gho=r(uzr,"DebertaV2ForMaskedLM"),uzr.forEach(t),Oho=r(PEe," (DeBERTa-v2 model)"),PEe.forEach(t),Xho=i(S),q_=n(S,"LI",{});var $Ee=s(q_);Dee=n($Ee,"STRONG",{});var bzr=s(Dee);Vho=r(bzr,"distilbert"),bzr.forEach(t),zho=r($Ee," \u2014 "),IP=n($Ee,"A",{href:!0});var vzr=s(IP);Who=r(vzr,"DistilBertForMaskedLM"),vzr.forEach(t),Qho=r($Ee," (DistilBERT model)"),$Ee.forEach(t),Hho=i(S),G_=n(S,"LI",{});var IEe=s(G_);Nee=n(IEe,"STRONG",{});var Tzr=s(Nee);Uho=r(Tzr,"electra"),Tzr.forEach(t),Jho=r(IEe," \u2014 "),DP=n(IEe,"A",{href:!0});var Fzr=s(DP);Yho=r(Fzr,"ElectraForPreTraining"),Fzr.forEach(t),Kho=r(IEe," (ELECTRA model)"),IEe.forEach(t),Zho=i(S),O_=n(S,"LI",{});var DEe=s(O_);jee=n(DEe,"STRONG",{});var Czr=s(jee);epo=r(Czr,"flaubert"),Czr.forEach(t),opo=r(DEe," \u2014 "),NP=n(DEe,"A",{href:!0});var Mzr=s(NP);rpo=r(Mzr,"FlaubertWithLMHeadModel"),Mzr.forEach(t),tpo=r(DEe," (FlauBERT model)"),DEe.forEach(t),apo=i(S),X_=n(S,"LI",{});var NEe=s(X_);qee=n(NEe,"STRONG",{});var Ezr=s(qee);npo=r(Ezr,"fnet"),Ezr.forEach(t),spo=r(NEe," \u2014 "),jP=n(NEe,"A",{href:!0});var yzr=s(jP);lpo=r(yzr,"FNetForPreTraining"),yzr.forEach(t),ipo=r(NEe," (FNet model)"),NEe.forEach(t),dpo=i(S),V_=n(S,"LI",{});var jEe=s(V_);Gee=n(jEe,"STRONG",{});var wzr=s(Gee);cpo=r(wzr,"fsmt"),wzr.forEach(t),fpo=r(jEe," \u2014 "),qP=n(jEe,"A",{href:!0});var Azr=s(qP);mpo=r(Azr,"FSMTForConditionalGeneration"),Azr.forEach(t),gpo=r(jEe," (FairSeq Machine-Translation model)"),jEe.forEach(t),hpo=i(S),z_=n(S,"LI",{});var qEe=s(z_);Oee=n(qEe,"STRONG",{});var Lzr=s(Oee);ppo=r(Lzr,"funnel"),Lzr.forEach(t),_po=r(qEe," \u2014 "),GP=n(qEe,"A",{href:!0});var Bzr=s(GP);upo=r(Bzr,"FunnelForPreTraining"),Bzr.forEach(t),bpo=r(qEe," (Funnel Transformer model)"),qEe.forEach(t),vpo=i(S),W_=n(S,"LI",{});var GEe=s(W_);Xee=n(GEe,"STRONG",{});var xzr=s(Xee);Tpo=r(xzr,"gpt2"),xzr.forEach(t),Fpo=r(GEe," \u2014 "),OP=n(GEe,"A",{href:!0});var kzr=s(OP);Cpo=r(kzr,"GPT2LMHeadModel"),kzr.forEach(t),Mpo=r(GEe," (OpenAI GPT-2 model)"),GEe.forEach(t),Epo=i(S),Q_=n(S,"LI",{});var OEe=s(Q_);Vee=n(OEe,"STRONG",{});var Rzr=s(Vee);ypo=r(Rzr,"ibert"),Rzr.forEach(t),wpo=r(OEe," \u2014 "),XP=n(OEe,"A",{href:!0});var Szr=s(XP);Apo=r(Szr,"IBertForMaskedLM"),Szr.forEach(t),Lpo=r(OEe," (I-BERT model)"),OEe.forEach(t),Bpo=i(S),H_=n(S,"LI",{});var XEe=s(H_);zee=n(XEe,"STRONG",{});var Pzr=s(zee);xpo=r(Pzr,"layoutlm"),Pzr.forEach(t),kpo=r(XEe," \u2014 "),VP=n(XEe,"A",{href:!0});var $zr=s(VP);Rpo=r($zr,"LayoutLMForMaskedLM"),$zr.forEach(t),Spo=r(XEe," (LayoutLM model)"),XEe.forEach(t),Ppo=i(S),U_=n(S,"LI",{});var VEe=s(U_);Wee=n(VEe,"STRONG",{});var Izr=s(Wee);$po=r(Izr,"longformer"),Izr.forEach(t),Ipo=r(VEe," \u2014 "),zP=n(VEe,"A",{href:!0});var Dzr=s(zP);Dpo=r(Dzr,"LongformerForMaskedLM"),Dzr.forEach(t),Npo=r(VEe," (Longformer model)"),VEe.forEach(t),jpo=i(S),J_=n(S,"LI",{});var zEe=s(J_);Qee=n(zEe,"STRONG",{});var Nzr=s(Qee);qpo=r(Nzr,"lxmert"),Nzr.forEach(t),Gpo=r(zEe," \u2014 "),WP=n(zEe,"A",{href:!0});var jzr=s(WP);Opo=r(jzr,"LxmertForPreTraining"),jzr.forEach(t),Xpo=r(zEe," (LXMERT model)"),zEe.forEach(t),Vpo=i(S),Y_=n(S,"LI",{});var WEe=s(Y_);Hee=n(WEe,"STRONG",{});var qzr=s(Hee);zpo=r(qzr,"megatron-bert"),qzr.forEach(t),Wpo=r(WEe," \u2014 "),QP=n(WEe,"A",{href:!0});var Gzr=s(QP);Qpo=r(Gzr,"MegatronBertForPreTraining"),Gzr.forEach(t),Hpo=r(WEe," (MegatronBert model)"),WEe.forEach(t),Upo=i(S),K_=n(S,"LI",{});var QEe=s(K_);Uee=n(QEe,"STRONG",{});var Ozr=s(Uee);Jpo=r(Ozr,"mobilebert"),Ozr.forEach(t),Ypo=r(QEe," \u2014 "),HP=n(QEe,"A",{href:!0});var Xzr=s(HP);Kpo=r(Xzr,"MobileBertForPreTraining"),Xzr.forEach(t),Zpo=r(QEe," (MobileBERT model)"),QEe.forEach(t),e_o=i(S),Z_=n(S,"LI",{});var HEe=s(Z_);Jee=n(HEe,"STRONG",{});var Vzr=s(Jee);o_o=r(Vzr,"mpnet"),Vzr.forEach(t),r_o=r(HEe," \u2014 "),UP=n(HEe,"A",{href:!0});var zzr=s(UP);t_o=r(zzr,"MPNetForMaskedLM"),zzr.forEach(t),a_o=r(HEe," (MPNet model)"),HEe.forEach(t),n_o=i(S),eu=n(S,"LI",{});var UEe=s(eu);Yee=n(UEe,"STRONG",{});var Wzr=s(Yee);s_o=r(Wzr,"openai-gpt"),Wzr.forEach(t),l_o=r(UEe," \u2014 "),JP=n(UEe,"A",{href:!0});var Qzr=s(JP);i_o=r(Qzr,"OpenAIGPTLMHeadModel"),Qzr.forEach(t),d_o=r(UEe," (OpenAI GPT model)"),UEe.forEach(t),c_o=i(S),ou=n(S,"LI",{});var JEe=s(ou);Kee=n(JEe,"STRONG",{});var Hzr=s(Kee);f_o=r(Hzr,"retribert"),Hzr.forEach(t),m_o=r(JEe," \u2014 "),YP=n(JEe,"A",{href:!0});var Uzr=s(YP);g_o=r(Uzr,"RetriBertModel"),Uzr.forEach(t),h_o=r(JEe," (RetriBERT model)"),JEe.forEach(t),p_o=i(S),ru=n(S,"LI",{});var YEe=s(ru);Zee=n(YEe,"STRONG",{});var Jzr=s(Zee);__o=r(Jzr,"roberta"),Jzr.forEach(t),u_o=r(YEe," \u2014 "),KP=n(YEe,"A",{href:!0});var Yzr=s(KP);b_o=r(Yzr,"RobertaForMaskedLM"),Yzr.forEach(t),v_o=r(YEe," (RoBERTa model)"),YEe.forEach(t),T_o=i(S),tu=n(S,"LI",{});var KEe=s(tu);eoe=n(KEe,"STRONG",{});var Kzr=s(eoe);F_o=r(Kzr,"squeezebert"),Kzr.forEach(t),C_o=r(KEe," \u2014 "),ZP=n(KEe,"A",{href:!0});var Zzr=s(ZP);M_o=r(Zzr,"SqueezeBertForMaskedLM"),Zzr.forEach(t),E_o=r(KEe," (SqueezeBERT model)"),KEe.forEach(t),y_o=i(S),au=n(S,"LI",{});var ZEe=s(au);ooe=n(ZEe,"STRONG",{});var eWr=s(ooe);w_o=r(eWr,"t5"),eWr.forEach(t),A_o=r(ZEe," \u2014 "),e$=n(ZEe,"A",{href:!0});var oWr=s(e$);L_o=r(oWr,"T5ForConditionalGeneration"),oWr.forEach(t),B_o=r(ZEe," (T5 model)"),ZEe.forEach(t),x_o=i(S),nu=n(S,"LI",{});var e3e=s(nu);roe=n(e3e,"STRONG",{});var rWr=s(roe);k_o=r(rWr,"tapas"),rWr.forEach(t),R_o=r(e3e," \u2014 "),o$=n(e3e,"A",{href:!0});var tWr=s(o$);S_o=r(tWr,"TapasForMaskedLM"),tWr.forEach(t),P_o=r(e3e," (TAPAS model)"),e3e.forEach(t),$_o=i(S),su=n(S,"LI",{});var o3e=s(su);toe=n(o3e,"STRONG",{});var aWr=s(toe);I_o=r(aWr,"transfo-xl"),aWr.forEach(t),D_o=r(o3e," \u2014 "),r$=n(o3e,"A",{href:!0});var nWr=s(r$);N_o=r(nWr,"TransfoXLLMHeadModel"),nWr.forEach(t),j_o=r(o3e," (Transformer-XL model)"),o3e.forEach(t),q_o=i(S),lu=n(S,"LI",{});var r3e=s(lu);aoe=n(r3e,"STRONG",{});var sWr=s(aoe);G_o=r(sWr,"unispeech"),sWr.forEach(t),O_o=r(r3e," \u2014 "),t$=n(r3e,"A",{href:!0});var lWr=s(t$);X_o=r(lWr,"UniSpeechForPreTraining"),lWr.forEach(t),V_o=r(r3e," (UniSpeech model)"),r3e.forEach(t),z_o=i(S),iu=n(S,"LI",{});var t3e=s(iu);noe=n(t3e,"STRONG",{});var iWr=s(noe);W_o=r(iWr,"unispeech-sat"),iWr.forEach(t),Q_o=r(t3e," \u2014 "),a$=n(t3e,"A",{href:!0});var dWr=s(a$);H_o=r(dWr,"UniSpeechSatForPreTraining"),dWr.forEach(t),U_o=r(t3e," (UniSpeechSat model)"),t3e.forEach(t),J_o=i(S),du=n(S,"LI",{});var a3e=s(du);soe=n(a3e,"STRONG",{});var cWr=s(soe);Y_o=r(cWr,"visual_bert"),cWr.forEach(t),K_o=r(a3e," \u2014 "),n$=n(a3e,"A",{href:!0});var fWr=s(n$);Z_o=r(fWr,"VisualBertForPreTraining"),fWr.forEach(t),euo=r(a3e," (VisualBert model)"),a3e.forEach(t),ouo=i(S),cu=n(S,"LI",{});var n3e=s(cu);loe=n(n3e,"STRONG",{});var mWr=s(loe);ruo=r(mWr,"vit_mae"),mWr.forEach(t),tuo=r(n3e," \u2014 "),s$=n(n3e,"A",{href:!0});var gWr=s(s$);auo=r(gWr,"ViTMAEForPreTraining"),gWr.forEach(t),nuo=r(n3e," (ViTMAE model)"),n3e.forEach(t),suo=i(S),fu=n(S,"LI",{});var s3e=s(fu);ioe=n(s3e,"STRONG",{});var hWr=s(ioe);luo=r(hWr,"wav2vec2"),hWr.forEach(t),iuo=r(s3e," \u2014 "),l$=n(s3e,"A",{href:!0});var pWr=s(l$);duo=r(pWr,"Wav2Vec2ForPreTraining"),pWr.forEach(t),cuo=r(s3e," (Wav2Vec2 model)"),s3e.forEach(t),fuo=i(S),mu=n(S,"LI",{});var l3e=s(mu);doe=n(l3e,"STRONG",{});var _Wr=s(doe);muo=r(_Wr,"xlm"),_Wr.forEach(t),guo=r(l3e," \u2014 "),i$=n(l3e,"A",{href:!0});var uWr=s(i$);huo=r(uWr,"XLMWithLMHeadModel"),uWr.forEach(t),puo=r(l3e," (XLM model)"),l3e.forEach(t),_uo=i(S),gu=n(S,"LI",{});var i3e=s(gu);coe=n(i3e,"STRONG",{});var bWr=s(coe);uuo=r(bWr,"xlm-roberta"),bWr.forEach(t),buo=r(i3e," \u2014 "),d$=n(i3e,"A",{href:!0});var vWr=s(d$);vuo=r(vWr,"XLMRobertaForMaskedLM"),vWr.forEach(t),Tuo=r(i3e," (XLM-RoBERTa model)"),i3e.forEach(t),Fuo=i(S),hu=n(S,"LI",{});var d3e=s(hu);foe=n(d3e,"STRONG",{});var TWr=s(foe);Cuo=r(TWr,"xlm-roberta-xl"),TWr.forEach(t),Muo=r(d3e," \u2014 "),c$=n(d3e,"A",{href:!0});var FWr=s(c$);Euo=r(FWr,"XLMRobertaXLForMaskedLM"),FWr.forEach(t),yuo=r(d3e," (XLM-RoBERTa-XL model)"),d3e.forEach(t),wuo=i(S),pu=n(S,"LI",{});var c3e=s(pu);moe=n(c3e,"STRONG",{});var CWr=s(moe);Auo=r(CWr,"xlnet"),CWr.forEach(t),Luo=r(c3e," \u2014 "),f$=n(c3e,"A",{href:!0});var MWr=s(f$);Buo=r(MWr,"XLNetLMHeadModel"),MWr.forEach(t),xuo=r(c3e," (XLNet model)"),c3e.forEach(t),S.forEach(t),kuo=i(Gt),_u=n(Gt,"P",{});var f3e=s(_u);Ruo=r(f3e,"The model is set in evaluation mode by default using "),goe=n(f3e,"CODE",{});var EWr=s(goe);Suo=r(EWr,"model.eval()"),EWr.forEach(t),Puo=r(f3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hoe=n(f3e,"CODE",{});var yWr=s(hoe);$uo=r(yWr,"model.train()"),yWr.forEach(t),f3e.forEach(t),Iuo=i(Gt),poe=n(Gt,"P",{});var wWr=s(poe);Duo=r(wWr,"Examples:"),wWr.forEach(t),Nuo=i(Gt),m(ry.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),xke=i(c),rd=n(c,"H2",{class:!0});var jSe=s(rd);uu=n(jSe,"A",{id:!0,class:!0,href:!0});var AWr=s(uu);_oe=n(AWr,"SPAN",{});var LWr=s(_oe);m(ty.$$.fragment,LWr),LWr.forEach(t),AWr.forEach(t),juo=i(jSe),uoe=n(jSe,"SPAN",{});var BWr=s(uoe);quo=r(BWr,"AutoModelForCausalLM"),BWr.forEach(t),jSe.forEach(t),kke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(ay.$$.fragment,Js),Guo=i(Js),td=n(Js,"P",{});var nW=s(td);Ouo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),boe=n(nW,"CODE",{});var xWr=s(boe);Xuo=r(xWr,"from_pretrained()"),xWr.forEach(t),Vuo=r(nW,"class method or the "),voe=n(nW,"CODE",{});var kWr=s(voe);zuo=r(kWr,"from_config()"),kWr.forEach(t),Wuo=r(nW,`class
method.`),nW.forEach(t),Quo=i(Js),ny=n(Js,"P",{});var qSe=s(ny);Huo=r(qSe,"This class cannot be instantiated directly using "),Toe=n(qSe,"CODE",{});var RWr=s(Toe);Uuo=r(RWr,"__init__()"),RWr.forEach(t),Juo=r(qSe," (throws an error)."),qSe.forEach(t),Yuo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(sy.$$.fragment,Ys),Kuo=i(Ys),Foe=n(Ys,"P",{});var SWr=s(Foe);Zuo=r(SWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SWr.forEach(t),e1o=i(Ys),ad=n(Ys,"P",{});var sW=s(ad);o1o=r(sW,`Note:
Loading a model from its configuration file does `),Coe=n(sW,"STRONG",{});var PWr=s(Coe);r1o=r(PWr,"not"),PWr.forEach(t),t1o=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=n(sW,"CODE",{});var $Wr=s(Moe);a1o=r($Wr,"from_pretrained()"),$Wr.forEach(t),n1o=r(sW,"to load the model weights."),sW.forEach(t),s1o=i(Ys),Eoe=n(Ys,"P",{});var IWr=s(Eoe);l1o=r(IWr,"Examples:"),IWr.forEach(t),i1o=i(Ys),m(ly.$$.fragment,Ys),Ys.forEach(t),d1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(iy.$$.fragment,Ot),c1o=i(Ot),yoe=n(Ot,"P",{});var DWr=s(yoe);f1o=r(DWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DWr.forEach(t),m1o=i(Ot),Wa=n(Ot,"P",{});var pE=s(Wa);g1o=r(pE,"The model class to instantiate is selected based on the "),woe=n(pE,"CODE",{});var NWr=s(woe);h1o=r(NWr,"model_type"),NWr.forEach(t),p1o=r(pE,` property of the config object (either
passed as an argument or loaded from `),Aoe=n(pE,"CODE",{});var jWr=s(Aoe);_1o=r(jWr,"pretrained_model_name_or_path"),jWr.forEach(t),u1o=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Loe=n(pE,"CODE",{});var qWr=s(Loe);b1o=r(qWr,"pretrained_model_name_or_path"),qWr.forEach(t),v1o=r(pE,":"),pE.forEach(t),T1o=i(Ot),$=n(Ot,"UL",{});var D=s($);bu=n(D,"LI",{});var m3e=s(bu);Boe=n(m3e,"STRONG",{});var GWr=s(Boe);F1o=r(GWr,"bart"),GWr.forEach(t),C1o=r(m3e," \u2014 "),m$=n(m3e,"A",{href:!0});var OWr=s(m$);M1o=r(OWr,"BartForCausalLM"),OWr.forEach(t),E1o=r(m3e," (BART model)"),m3e.forEach(t),y1o=i(D),vu=n(D,"LI",{});var g3e=s(vu);xoe=n(g3e,"STRONG",{});var XWr=s(xoe);w1o=r(XWr,"bert"),XWr.forEach(t),A1o=r(g3e," \u2014 "),g$=n(g3e,"A",{href:!0});var VWr=s(g$);L1o=r(VWr,"BertLMHeadModel"),VWr.forEach(t),B1o=r(g3e," (BERT model)"),g3e.forEach(t),x1o=i(D),Tu=n(D,"LI",{});var h3e=s(Tu);koe=n(h3e,"STRONG",{});var zWr=s(koe);k1o=r(zWr,"bert-generation"),zWr.forEach(t),R1o=r(h3e," \u2014 "),h$=n(h3e,"A",{href:!0});var WWr=s(h$);S1o=r(WWr,"BertGenerationDecoder"),WWr.forEach(t),P1o=r(h3e," (Bert Generation model)"),h3e.forEach(t),$1o=i(D),Fu=n(D,"LI",{});var p3e=s(Fu);Roe=n(p3e,"STRONG",{});var QWr=s(Roe);I1o=r(QWr,"big_bird"),QWr.forEach(t),D1o=r(p3e," \u2014 "),p$=n(p3e,"A",{href:!0});var HWr=s(p$);N1o=r(HWr,"BigBirdForCausalLM"),HWr.forEach(t),j1o=r(p3e," (BigBird model)"),p3e.forEach(t),q1o=i(D),Cu=n(D,"LI",{});var _3e=s(Cu);Soe=n(_3e,"STRONG",{});var UWr=s(Soe);G1o=r(UWr,"bigbird_pegasus"),UWr.forEach(t),O1o=r(_3e," \u2014 "),_$=n(_3e,"A",{href:!0});var JWr=s(_$);X1o=r(JWr,"BigBirdPegasusForCausalLM"),JWr.forEach(t),V1o=r(_3e," (BigBirdPegasus model)"),_3e.forEach(t),z1o=i(D),Mu=n(D,"LI",{});var u3e=s(Mu);Poe=n(u3e,"STRONG",{});var YWr=s(Poe);W1o=r(YWr,"blenderbot"),YWr.forEach(t),Q1o=r(u3e," \u2014 "),u$=n(u3e,"A",{href:!0});var KWr=s(u$);H1o=r(KWr,"BlenderbotForCausalLM"),KWr.forEach(t),U1o=r(u3e," (Blenderbot model)"),u3e.forEach(t),J1o=i(D),Eu=n(D,"LI",{});var b3e=s(Eu);$oe=n(b3e,"STRONG",{});var ZWr=s($oe);Y1o=r(ZWr,"blenderbot-small"),ZWr.forEach(t),K1o=r(b3e," \u2014 "),b$=n(b3e,"A",{href:!0});var eQr=s(b$);Z1o=r(eQr,"BlenderbotSmallForCausalLM"),eQr.forEach(t),e9o=r(b3e," (BlenderbotSmall model)"),b3e.forEach(t),o9o=i(D),yu=n(D,"LI",{});var v3e=s(yu);Ioe=n(v3e,"STRONG",{});var oQr=s(Ioe);r9o=r(oQr,"camembert"),oQr.forEach(t),t9o=r(v3e," \u2014 "),v$=n(v3e,"A",{href:!0});var rQr=s(v$);a9o=r(rQr,"CamembertForCausalLM"),rQr.forEach(t),n9o=r(v3e," (CamemBERT model)"),v3e.forEach(t),s9o=i(D),wu=n(D,"LI",{});var T3e=s(wu);Doe=n(T3e,"STRONG",{});var tQr=s(Doe);l9o=r(tQr,"ctrl"),tQr.forEach(t),i9o=r(T3e," \u2014 "),T$=n(T3e,"A",{href:!0});var aQr=s(T$);d9o=r(aQr,"CTRLLMHeadModel"),aQr.forEach(t),c9o=r(T3e," (CTRL model)"),T3e.forEach(t),f9o=i(D),Au=n(D,"LI",{});var F3e=s(Au);Noe=n(F3e,"STRONG",{});var nQr=s(Noe);m9o=r(nQr,"data2vec-text"),nQr.forEach(t),g9o=r(F3e," \u2014 "),F$=n(F3e,"A",{href:!0});var sQr=s(F$);h9o=r(sQr,"Data2VecTextForCausalLM"),sQr.forEach(t),p9o=r(F3e," (Data2VecText model)"),F3e.forEach(t),_9o=i(D),Lu=n(D,"LI",{});var C3e=s(Lu);joe=n(C3e,"STRONG",{});var lQr=s(joe);u9o=r(lQr,"electra"),lQr.forEach(t),b9o=r(C3e," \u2014 "),C$=n(C3e,"A",{href:!0});var iQr=s(C$);v9o=r(iQr,"ElectraForCausalLM"),iQr.forEach(t),T9o=r(C3e," (ELECTRA model)"),C3e.forEach(t),F9o=i(D),Bu=n(D,"LI",{});var M3e=s(Bu);qoe=n(M3e,"STRONG",{});var dQr=s(qoe);C9o=r(dQr,"gpt2"),dQr.forEach(t),M9o=r(M3e," \u2014 "),M$=n(M3e,"A",{href:!0});var cQr=s(M$);E9o=r(cQr,"GPT2LMHeadModel"),cQr.forEach(t),y9o=r(M3e," (OpenAI GPT-2 model)"),M3e.forEach(t),w9o=i(D),xu=n(D,"LI",{});var E3e=s(xu);Goe=n(E3e,"STRONG",{});var fQr=s(Goe);A9o=r(fQr,"gpt_neo"),fQr.forEach(t),L9o=r(E3e," \u2014 "),E$=n(E3e,"A",{href:!0});var mQr=s(E$);B9o=r(mQr,"GPTNeoForCausalLM"),mQr.forEach(t),x9o=r(E3e," (GPT Neo model)"),E3e.forEach(t),k9o=i(D),ku=n(D,"LI",{});var y3e=s(ku);Ooe=n(y3e,"STRONG",{});var gQr=s(Ooe);R9o=r(gQr,"gptj"),gQr.forEach(t),S9o=r(y3e," \u2014 "),y$=n(y3e,"A",{href:!0});var hQr=s(y$);P9o=r(hQr,"GPTJForCausalLM"),hQr.forEach(t),$9o=r(y3e," (GPT-J model)"),y3e.forEach(t),I9o=i(D),Ru=n(D,"LI",{});var w3e=s(Ru);Xoe=n(w3e,"STRONG",{});var pQr=s(Xoe);D9o=r(pQr,"marian"),pQr.forEach(t),N9o=r(w3e," \u2014 "),w$=n(w3e,"A",{href:!0});var _Qr=s(w$);j9o=r(_Qr,"MarianForCausalLM"),_Qr.forEach(t),q9o=r(w3e," (Marian model)"),w3e.forEach(t),G9o=i(D),Su=n(D,"LI",{});var A3e=s(Su);Voe=n(A3e,"STRONG",{});var uQr=s(Voe);O9o=r(uQr,"mbart"),uQr.forEach(t),X9o=r(A3e," \u2014 "),A$=n(A3e,"A",{href:!0});var bQr=s(A$);V9o=r(bQr,"MBartForCausalLM"),bQr.forEach(t),z9o=r(A3e," (mBART model)"),A3e.forEach(t),W9o=i(D),Pu=n(D,"LI",{});var L3e=s(Pu);zoe=n(L3e,"STRONG",{});var vQr=s(zoe);Q9o=r(vQr,"megatron-bert"),vQr.forEach(t),H9o=r(L3e," \u2014 "),L$=n(L3e,"A",{href:!0});var TQr=s(L$);U9o=r(TQr,"MegatronBertForCausalLM"),TQr.forEach(t),J9o=r(L3e," (MegatronBert model)"),L3e.forEach(t),Y9o=i(D),$u=n(D,"LI",{});var B3e=s($u);Woe=n(B3e,"STRONG",{});var FQr=s(Woe);K9o=r(FQr,"openai-gpt"),FQr.forEach(t),Z9o=r(B3e," \u2014 "),B$=n(B3e,"A",{href:!0});var CQr=s(B$);ebo=r(CQr,"OpenAIGPTLMHeadModel"),CQr.forEach(t),obo=r(B3e," (OpenAI GPT model)"),B3e.forEach(t),rbo=i(D),Iu=n(D,"LI",{});var x3e=s(Iu);Qoe=n(x3e,"STRONG",{});var MQr=s(Qoe);tbo=r(MQr,"pegasus"),MQr.forEach(t),abo=r(x3e," \u2014 "),x$=n(x3e,"A",{href:!0});var EQr=s(x$);nbo=r(EQr,"PegasusForCausalLM"),EQr.forEach(t),sbo=r(x3e," (Pegasus model)"),x3e.forEach(t),lbo=i(D),Du=n(D,"LI",{});var k3e=s(Du);Hoe=n(k3e,"STRONG",{});var yQr=s(Hoe);ibo=r(yQr,"plbart"),yQr.forEach(t),dbo=r(k3e," \u2014 "),k$=n(k3e,"A",{href:!0});var wQr=s(k$);cbo=r(wQr,"PLBartForCausalLM"),wQr.forEach(t),fbo=r(k3e," (PLBart model)"),k3e.forEach(t),mbo=i(D),Nu=n(D,"LI",{});var R3e=s(Nu);Uoe=n(R3e,"STRONG",{});var AQr=s(Uoe);gbo=r(AQr,"prophetnet"),AQr.forEach(t),hbo=r(R3e," \u2014 "),R$=n(R3e,"A",{href:!0});var LQr=s(R$);pbo=r(LQr,"ProphetNetForCausalLM"),LQr.forEach(t),_bo=r(R3e," (ProphetNet model)"),R3e.forEach(t),ubo=i(D),ju=n(D,"LI",{});var S3e=s(ju);Joe=n(S3e,"STRONG",{});var BQr=s(Joe);bbo=r(BQr,"qdqbert"),BQr.forEach(t),vbo=r(S3e," \u2014 "),S$=n(S3e,"A",{href:!0});var xQr=s(S$);Tbo=r(xQr,"QDQBertLMHeadModel"),xQr.forEach(t),Fbo=r(S3e," (QDQBert model)"),S3e.forEach(t),Cbo=i(D),qu=n(D,"LI",{});var P3e=s(qu);Yoe=n(P3e,"STRONG",{});var kQr=s(Yoe);Mbo=r(kQr,"reformer"),kQr.forEach(t),Ebo=r(P3e," \u2014 "),P$=n(P3e,"A",{href:!0});var RQr=s(P$);ybo=r(RQr,"ReformerModelWithLMHead"),RQr.forEach(t),wbo=r(P3e," (Reformer model)"),P3e.forEach(t),Abo=i(D),Gu=n(D,"LI",{});var $3e=s(Gu);Koe=n($3e,"STRONG",{});var SQr=s(Koe);Lbo=r(SQr,"rembert"),SQr.forEach(t),Bbo=r($3e," \u2014 "),$$=n($3e,"A",{href:!0});var PQr=s($$);xbo=r(PQr,"RemBertForCausalLM"),PQr.forEach(t),kbo=r($3e," (RemBERT model)"),$3e.forEach(t),Rbo=i(D),Ou=n(D,"LI",{});var I3e=s(Ou);Zoe=n(I3e,"STRONG",{});var $Qr=s(Zoe);Sbo=r($Qr,"roberta"),$Qr.forEach(t),Pbo=r(I3e," \u2014 "),I$=n(I3e,"A",{href:!0});var IQr=s(I$);$bo=r(IQr,"RobertaForCausalLM"),IQr.forEach(t),Ibo=r(I3e," (RoBERTa model)"),I3e.forEach(t),Dbo=i(D),Xu=n(D,"LI",{});var D3e=s(Xu);ere=n(D3e,"STRONG",{});var DQr=s(ere);Nbo=r(DQr,"roformer"),DQr.forEach(t),jbo=r(D3e," \u2014 "),D$=n(D3e,"A",{href:!0});var NQr=s(D$);qbo=r(NQr,"RoFormerForCausalLM"),NQr.forEach(t),Gbo=r(D3e," (RoFormer model)"),D3e.forEach(t),Obo=i(D),Vu=n(D,"LI",{});var N3e=s(Vu);ore=n(N3e,"STRONG",{});var jQr=s(ore);Xbo=r(jQr,"speech_to_text_2"),jQr.forEach(t),Vbo=r(N3e," \u2014 "),N$=n(N3e,"A",{href:!0});var qQr=s(N$);zbo=r(qQr,"Speech2Text2ForCausalLM"),qQr.forEach(t),Wbo=r(N3e," (Speech2Text2 model)"),N3e.forEach(t),Qbo=i(D),zu=n(D,"LI",{});var j3e=s(zu);rre=n(j3e,"STRONG",{});var GQr=s(rre);Hbo=r(GQr,"transfo-xl"),GQr.forEach(t),Ubo=r(j3e," \u2014 "),j$=n(j3e,"A",{href:!0});var OQr=s(j$);Jbo=r(OQr,"TransfoXLLMHeadModel"),OQr.forEach(t),Ybo=r(j3e," (Transformer-XL model)"),j3e.forEach(t),Kbo=i(D),Wu=n(D,"LI",{});var q3e=s(Wu);tre=n(q3e,"STRONG",{});var XQr=s(tre);Zbo=r(XQr,"trocr"),XQr.forEach(t),e5o=r(q3e," \u2014 "),q$=n(q3e,"A",{href:!0});var VQr=s(q$);o5o=r(VQr,"TrOCRForCausalLM"),VQr.forEach(t),r5o=r(q3e," (TrOCR model)"),q3e.forEach(t),t5o=i(D),Qu=n(D,"LI",{});var G3e=s(Qu);are=n(G3e,"STRONG",{});var zQr=s(are);a5o=r(zQr,"xglm"),zQr.forEach(t),n5o=r(G3e," \u2014 "),G$=n(G3e,"A",{href:!0});var WQr=s(G$);s5o=r(WQr,"XGLMForCausalLM"),WQr.forEach(t),l5o=r(G3e," (XGLM model)"),G3e.forEach(t),i5o=i(D),Hu=n(D,"LI",{});var O3e=s(Hu);nre=n(O3e,"STRONG",{});var QQr=s(nre);d5o=r(QQr,"xlm"),QQr.forEach(t),c5o=r(O3e," \u2014 "),O$=n(O3e,"A",{href:!0});var HQr=s(O$);f5o=r(HQr,"XLMWithLMHeadModel"),HQr.forEach(t),m5o=r(O3e," (XLM model)"),O3e.forEach(t),g5o=i(D),Uu=n(D,"LI",{});var X3e=s(Uu);sre=n(X3e,"STRONG",{});var UQr=s(sre);h5o=r(UQr,"xlm-prophetnet"),UQr.forEach(t),p5o=r(X3e," \u2014 "),X$=n(X3e,"A",{href:!0});var JQr=s(X$);_5o=r(JQr,"XLMProphetNetForCausalLM"),JQr.forEach(t),u5o=r(X3e," (XLMProphetNet model)"),X3e.forEach(t),b5o=i(D),Ju=n(D,"LI",{});var V3e=s(Ju);lre=n(V3e,"STRONG",{});var YQr=s(lre);v5o=r(YQr,"xlm-roberta"),YQr.forEach(t),T5o=r(V3e," \u2014 "),V$=n(V3e,"A",{href:!0});var KQr=s(V$);F5o=r(KQr,"XLMRobertaForCausalLM"),KQr.forEach(t),C5o=r(V3e," (XLM-RoBERTa model)"),V3e.forEach(t),M5o=i(D),Yu=n(D,"LI",{});var z3e=s(Yu);ire=n(z3e,"STRONG",{});var ZQr=s(ire);E5o=r(ZQr,"xlm-roberta-xl"),ZQr.forEach(t),y5o=r(z3e," \u2014 "),z$=n(z3e,"A",{href:!0});var eHr=s(z$);w5o=r(eHr,"XLMRobertaXLForCausalLM"),eHr.forEach(t),A5o=r(z3e," (XLM-RoBERTa-XL model)"),z3e.forEach(t),L5o=i(D),Ku=n(D,"LI",{});var W3e=s(Ku);dre=n(W3e,"STRONG",{});var oHr=s(dre);B5o=r(oHr,"xlnet"),oHr.forEach(t),x5o=r(W3e," \u2014 "),W$=n(W3e,"A",{href:!0});var rHr=s(W$);k5o=r(rHr,"XLNetLMHeadModel"),rHr.forEach(t),R5o=r(W3e," (XLNet model)"),W3e.forEach(t),D.forEach(t),S5o=i(Ot),Zu=n(Ot,"P",{});var Q3e=s(Zu);P5o=r(Q3e,"The model is set in evaluation mode by default using "),cre=n(Q3e,"CODE",{});var tHr=s(cre);$5o=r(tHr,"model.eval()"),tHr.forEach(t),I5o=r(Q3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fre=n(Q3e,"CODE",{});var aHr=s(fre);D5o=r(aHr,"model.train()"),aHr.forEach(t),Q3e.forEach(t),N5o=i(Ot),mre=n(Ot,"P",{});var nHr=s(mre);j5o=r(nHr,"Examples:"),nHr.forEach(t),q5o=i(Ot),m(dy.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),Rke=i(c),nd=n(c,"H2",{class:!0});var GSe=s(nd);e1=n(GSe,"A",{id:!0,class:!0,href:!0});var sHr=s(e1);gre=n(sHr,"SPAN",{});var lHr=s(gre);m(cy.$$.fragment,lHr),lHr.forEach(t),sHr.forEach(t),G5o=i(GSe),hre=n(GSe,"SPAN",{});var iHr=s(hre);O5o=r(iHr,"AutoModelForMaskedLM"),iHr.forEach(t),GSe.forEach(t),Ske=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(fy.$$.fragment,Ks),X5o=i(Ks),sd=n(Ks,"P",{});var lW=s(sd);V5o=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pre=n(lW,"CODE",{});var dHr=s(pre);z5o=r(dHr,"from_pretrained()"),dHr.forEach(t),W5o=r(lW,"class method or the "),_re=n(lW,"CODE",{});var cHr=s(_re);Q5o=r(cHr,"from_config()"),cHr.forEach(t),H5o=r(lW,`class
method.`),lW.forEach(t),U5o=i(Ks),my=n(Ks,"P",{});var OSe=s(my);J5o=r(OSe,"This class cannot be instantiated directly using "),ure=n(OSe,"CODE",{});var fHr=s(ure);Y5o=r(fHr,"__init__()"),fHr.forEach(t),K5o=r(OSe," (throws an error)."),OSe.forEach(t),Z5o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(gy.$$.fragment,Zs),e2o=i(Zs),bre=n(Zs,"P",{});var mHr=s(bre);o2o=r(mHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mHr.forEach(t),r2o=i(Zs),ld=n(Zs,"P",{});var iW=s(ld);t2o=r(iW,`Note:
Loading a model from its configuration file does `),vre=n(iW,"STRONG",{});var gHr=s(vre);a2o=r(gHr,"not"),gHr.forEach(t),n2o=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=n(iW,"CODE",{});var hHr=s(Tre);s2o=r(hHr,"from_pretrained()"),hHr.forEach(t),l2o=r(iW,"to load the model weights."),iW.forEach(t),i2o=i(Zs),Fre=n(Zs,"P",{});var pHr=s(Fre);d2o=r(pHr,"Examples:"),pHr.forEach(t),c2o=i(Zs),m(hy.$$.fragment,Zs),Zs.forEach(t),f2o=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(py.$$.fragment,Xt),m2o=i(Xt),Cre=n(Xt,"P",{});var _Hr=s(Cre);g2o=r(_Hr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Hr.forEach(t),h2o=i(Xt),Qa=n(Xt,"P",{});var _E=s(Qa);p2o=r(_E,"The model class to instantiate is selected based on the "),Mre=n(_E,"CODE",{});var uHr=s(Mre);_2o=r(uHr,"model_type"),uHr.forEach(t),u2o=r(_E,` property of the config object (either
passed as an argument or loaded from `),Ere=n(_E,"CODE",{});var bHr=s(Ere);b2o=r(bHr,"pretrained_model_name_or_path"),bHr.forEach(t),v2o=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yre=n(_E,"CODE",{});var vHr=s(yre);T2o=r(vHr,"pretrained_model_name_or_path"),vHr.forEach(t),F2o=r(_E,":"),_E.forEach(t),C2o=i(Xt),I=n(Xt,"UL",{});var N=s(I);o1=n(N,"LI",{});var H3e=s(o1);wre=n(H3e,"STRONG",{});var THr=s(wre);M2o=r(THr,"albert"),THr.forEach(t),E2o=r(H3e," \u2014 "),Q$=n(H3e,"A",{href:!0});var FHr=s(Q$);y2o=r(FHr,"AlbertForMaskedLM"),FHr.forEach(t),w2o=r(H3e," (ALBERT model)"),H3e.forEach(t),A2o=i(N),r1=n(N,"LI",{});var U3e=s(r1);Are=n(U3e,"STRONG",{});var CHr=s(Are);L2o=r(CHr,"bart"),CHr.forEach(t),B2o=r(U3e," \u2014 "),H$=n(U3e,"A",{href:!0});var MHr=s(H$);x2o=r(MHr,"BartForConditionalGeneration"),MHr.forEach(t),k2o=r(U3e," (BART model)"),U3e.forEach(t),R2o=i(N),t1=n(N,"LI",{});var J3e=s(t1);Lre=n(J3e,"STRONG",{});var EHr=s(Lre);S2o=r(EHr,"bert"),EHr.forEach(t),P2o=r(J3e," \u2014 "),U$=n(J3e,"A",{href:!0});var yHr=s(U$);$2o=r(yHr,"BertForMaskedLM"),yHr.forEach(t),I2o=r(J3e," (BERT model)"),J3e.forEach(t),D2o=i(N),a1=n(N,"LI",{});var Y3e=s(a1);Bre=n(Y3e,"STRONG",{});var wHr=s(Bre);N2o=r(wHr,"big_bird"),wHr.forEach(t),j2o=r(Y3e," \u2014 "),J$=n(Y3e,"A",{href:!0});var AHr=s(J$);q2o=r(AHr,"BigBirdForMaskedLM"),AHr.forEach(t),G2o=r(Y3e," (BigBird model)"),Y3e.forEach(t),O2o=i(N),n1=n(N,"LI",{});var K3e=s(n1);xre=n(K3e,"STRONG",{});var LHr=s(xre);X2o=r(LHr,"camembert"),LHr.forEach(t),V2o=r(K3e," \u2014 "),Y$=n(K3e,"A",{href:!0});var BHr=s(Y$);z2o=r(BHr,"CamembertForMaskedLM"),BHr.forEach(t),W2o=r(K3e," (CamemBERT model)"),K3e.forEach(t),Q2o=i(N),s1=n(N,"LI",{});var Z3e=s(s1);kre=n(Z3e,"STRONG",{});var xHr=s(kre);H2o=r(xHr,"convbert"),xHr.forEach(t),U2o=r(Z3e," \u2014 "),K$=n(Z3e,"A",{href:!0});var kHr=s(K$);J2o=r(kHr,"ConvBertForMaskedLM"),kHr.forEach(t),Y2o=r(Z3e," (ConvBERT model)"),Z3e.forEach(t),K2o=i(N),l1=n(N,"LI",{});var eye=s(l1);Rre=n(eye,"STRONG",{});var RHr=s(Rre);Z2o=r(RHr,"data2vec-text"),RHr.forEach(t),evo=r(eye," \u2014 "),Z$=n(eye,"A",{href:!0});var SHr=s(Z$);ovo=r(SHr,"Data2VecTextForMaskedLM"),SHr.forEach(t),rvo=r(eye," (Data2VecText model)"),eye.forEach(t),tvo=i(N),i1=n(N,"LI",{});var oye=s(i1);Sre=n(oye,"STRONG",{});var PHr=s(Sre);avo=r(PHr,"deberta"),PHr.forEach(t),nvo=r(oye," \u2014 "),eI=n(oye,"A",{href:!0});var $Hr=s(eI);svo=r($Hr,"DebertaForMaskedLM"),$Hr.forEach(t),lvo=r(oye," (DeBERTa model)"),oye.forEach(t),ivo=i(N),d1=n(N,"LI",{});var rye=s(d1);Pre=n(rye,"STRONG",{});var IHr=s(Pre);dvo=r(IHr,"deberta-v2"),IHr.forEach(t),cvo=r(rye," \u2014 "),oI=n(rye,"A",{href:!0});var DHr=s(oI);fvo=r(DHr,"DebertaV2ForMaskedLM"),DHr.forEach(t),mvo=r(rye," (DeBERTa-v2 model)"),rye.forEach(t),gvo=i(N),c1=n(N,"LI",{});var tye=s(c1);$re=n(tye,"STRONG",{});var NHr=s($re);hvo=r(NHr,"distilbert"),NHr.forEach(t),pvo=r(tye," \u2014 "),rI=n(tye,"A",{href:!0});var jHr=s(rI);_vo=r(jHr,"DistilBertForMaskedLM"),jHr.forEach(t),uvo=r(tye," (DistilBERT model)"),tye.forEach(t),bvo=i(N),f1=n(N,"LI",{});var aye=s(f1);Ire=n(aye,"STRONG",{});var qHr=s(Ire);vvo=r(qHr,"electra"),qHr.forEach(t),Tvo=r(aye," \u2014 "),tI=n(aye,"A",{href:!0});var GHr=s(tI);Fvo=r(GHr,"ElectraForMaskedLM"),GHr.forEach(t),Cvo=r(aye," (ELECTRA model)"),aye.forEach(t),Mvo=i(N),m1=n(N,"LI",{});var nye=s(m1);Dre=n(nye,"STRONG",{});var OHr=s(Dre);Evo=r(OHr,"flaubert"),OHr.forEach(t),yvo=r(nye," \u2014 "),aI=n(nye,"A",{href:!0});var XHr=s(aI);wvo=r(XHr,"FlaubertWithLMHeadModel"),XHr.forEach(t),Avo=r(nye," (FlauBERT model)"),nye.forEach(t),Lvo=i(N),g1=n(N,"LI",{});var sye=s(g1);Nre=n(sye,"STRONG",{});var VHr=s(Nre);Bvo=r(VHr,"fnet"),VHr.forEach(t),xvo=r(sye," \u2014 "),nI=n(sye,"A",{href:!0});var zHr=s(nI);kvo=r(zHr,"FNetForMaskedLM"),zHr.forEach(t),Rvo=r(sye," (FNet model)"),sye.forEach(t),Svo=i(N),h1=n(N,"LI",{});var lye=s(h1);jre=n(lye,"STRONG",{});var WHr=s(jre);Pvo=r(WHr,"funnel"),WHr.forEach(t),$vo=r(lye," \u2014 "),sI=n(lye,"A",{href:!0});var QHr=s(sI);Ivo=r(QHr,"FunnelForMaskedLM"),QHr.forEach(t),Dvo=r(lye," (Funnel Transformer model)"),lye.forEach(t),Nvo=i(N),p1=n(N,"LI",{});var iye=s(p1);qre=n(iye,"STRONG",{});var HHr=s(qre);jvo=r(HHr,"ibert"),HHr.forEach(t),qvo=r(iye," \u2014 "),lI=n(iye,"A",{href:!0});var UHr=s(lI);Gvo=r(UHr,"IBertForMaskedLM"),UHr.forEach(t),Ovo=r(iye," (I-BERT model)"),iye.forEach(t),Xvo=i(N),_1=n(N,"LI",{});var dye=s(_1);Gre=n(dye,"STRONG",{});var JHr=s(Gre);Vvo=r(JHr,"layoutlm"),JHr.forEach(t),zvo=r(dye," \u2014 "),iI=n(dye,"A",{href:!0});var YHr=s(iI);Wvo=r(YHr,"LayoutLMForMaskedLM"),YHr.forEach(t),Qvo=r(dye," (LayoutLM model)"),dye.forEach(t),Hvo=i(N),u1=n(N,"LI",{});var cye=s(u1);Ore=n(cye,"STRONG",{});var KHr=s(Ore);Uvo=r(KHr,"longformer"),KHr.forEach(t),Jvo=r(cye," \u2014 "),dI=n(cye,"A",{href:!0});var ZHr=s(dI);Yvo=r(ZHr,"LongformerForMaskedLM"),ZHr.forEach(t),Kvo=r(cye," (Longformer model)"),cye.forEach(t),Zvo=i(N),b1=n(N,"LI",{});var fye=s(b1);Xre=n(fye,"STRONG",{});var eUr=s(Xre);eTo=r(eUr,"mbart"),eUr.forEach(t),oTo=r(fye," \u2014 "),cI=n(fye,"A",{href:!0});var oUr=s(cI);rTo=r(oUr,"MBartForConditionalGeneration"),oUr.forEach(t),tTo=r(fye," (mBART model)"),fye.forEach(t),aTo=i(N),v1=n(N,"LI",{});var mye=s(v1);Vre=n(mye,"STRONG",{});var rUr=s(Vre);nTo=r(rUr,"megatron-bert"),rUr.forEach(t),sTo=r(mye," \u2014 "),fI=n(mye,"A",{href:!0});var tUr=s(fI);lTo=r(tUr,"MegatronBertForMaskedLM"),tUr.forEach(t),iTo=r(mye," (MegatronBert model)"),mye.forEach(t),dTo=i(N),T1=n(N,"LI",{});var gye=s(T1);zre=n(gye,"STRONG",{});var aUr=s(zre);cTo=r(aUr,"mobilebert"),aUr.forEach(t),fTo=r(gye," \u2014 "),mI=n(gye,"A",{href:!0});var nUr=s(mI);mTo=r(nUr,"MobileBertForMaskedLM"),nUr.forEach(t),gTo=r(gye," (MobileBERT model)"),gye.forEach(t),hTo=i(N),F1=n(N,"LI",{});var hye=s(F1);Wre=n(hye,"STRONG",{});var sUr=s(Wre);pTo=r(sUr,"mpnet"),sUr.forEach(t),_To=r(hye," \u2014 "),gI=n(hye,"A",{href:!0});var lUr=s(gI);uTo=r(lUr,"MPNetForMaskedLM"),lUr.forEach(t),bTo=r(hye," (MPNet model)"),hye.forEach(t),vTo=i(N),C1=n(N,"LI",{});var pye=s(C1);Qre=n(pye,"STRONG",{});var iUr=s(Qre);TTo=r(iUr,"nystromformer"),iUr.forEach(t),FTo=r(pye," \u2014 "),hI=n(pye,"A",{href:!0});var dUr=s(hI);CTo=r(dUr,"NystromformerForMaskedLM"),dUr.forEach(t),MTo=r(pye," (Nystromformer model)"),pye.forEach(t),ETo=i(N),M1=n(N,"LI",{});var _ye=s(M1);Hre=n(_ye,"STRONG",{});var cUr=s(Hre);yTo=r(cUr,"perceiver"),cUr.forEach(t),wTo=r(_ye," \u2014 "),pI=n(_ye,"A",{href:!0});var fUr=s(pI);ATo=r(fUr,"PerceiverForMaskedLM"),fUr.forEach(t),LTo=r(_ye," (Perceiver model)"),_ye.forEach(t),BTo=i(N),E1=n(N,"LI",{});var uye=s(E1);Ure=n(uye,"STRONG",{});var mUr=s(Ure);xTo=r(mUr,"qdqbert"),mUr.forEach(t),kTo=r(uye," \u2014 "),_I=n(uye,"A",{href:!0});var gUr=s(_I);RTo=r(gUr,"QDQBertForMaskedLM"),gUr.forEach(t),STo=r(uye," (QDQBert model)"),uye.forEach(t),PTo=i(N),y1=n(N,"LI",{});var bye=s(y1);Jre=n(bye,"STRONG",{});var hUr=s(Jre);$To=r(hUr,"reformer"),hUr.forEach(t),ITo=r(bye," \u2014 "),uI=n(bye,"A",{href:!0});var pUr=s(uI);DTo=r(pUr,"ReformerForMaskedLM"),pUr.forEach(t),NTo=r(bye," (Reformer model)"),bye.forEach(t),jTo=i(N),w1=n(N,"LI",{});var vye=s(w1);Yre=n(vye,"STRONG",{});var _Ur=s(Yre);qTo=r(_Ur,"rembert"),_Ur.forEach(t),GTo=r(vye," \u2014 "),bI=n(vye,"A",{href:!0});var uUr=s(bI);OTo=r(uUr,"RemBertForMaskedLM"),uUr.forEach(t),XTo=r(vye," (RemBERT model)"),vye.forEach(t),VTo=i(N),A1=n(N,"LI",{});var Tye=s(A1);Kre=n(Tye,"STRONG",{});var bUr=s(Kre);zTo=r(bUr,"roberta"),bUr.forEach(t),WTo=r(Tye," \u2014 "),vI=n(Tye,"A",{href:!0});var vUr=s(vI);QTo=r(vUr,"RobertaForMaskedLM"),vUr.forEach(t),HTo=r(Tye," (RoBERTa model)"),Tye.forEach(t),UTo=i(N),L1=n(N,"LI",{});var Fye=s(L1);Zre=n(Fye,"STRONG",{});var TUr=s(Zre);JTo=r(TUr,"roformer"),TUr.forEach(t),YTo=r(Fye," \u2014 "),TI=n(Fye,"A",{href:!0});var FUr=s(TI);KTo=r(FUr,"RoFormerForMaskedLM"),FUr.forEach(t),ZTo=r(Fye," (RoFormer model)"),Fye.forEach(t),eFo=i(N),B1=n(N,"LI",{});var Cye=s(B1);ete=n(Cye,"STRONG",{});var CUr=s(ete);oFo=r(CUr,"squeezebert"),CUr.forEach(t),rFo=r(Cye," \u2014 "),FI=n(Cye,"A",{href:!0});var MUr=s(FI);tFo=r(MUr,"SqueezeBertForMaskedLM"),MUr.forEach(t),aFo=r(Cye," (SqueezeBERT model)"),Cye.forEach(t),nFo=i(N),x1=n(N,"LI",{});var Mye=s(x1);ote=n(Mye,"STRONG",{});var EUr=s(ote);sFo=r(EUr,"tapas"),EUr.forEach(t),lFo=r(Mye," \u2014 "),CI=n(Mye,"A",{href:!0});var yUr=s(CI);iFo=r(yUr,"TapasForMaskedLM"),yUr.forEach(t),dFo=r(Mye," (TAPAS model)"),Mye.forEach(t),cFo=i(N),k1=n(N,"LI",{});var Eye=s(k1);rte=n(Eye,"STRONG",{});var wUr=s(rte);fFo=r(wUr,"wav2vec2"),wUr.forEach(t),mFo=r(Eye," \u2014 "),tte=n(Eye,"CODE",{});var AUr=s(tte);gFo=r(AUr,"Wav2Vec2ForMaskedLM"),AUr.forEach(t),hFo=r(Eye,"(Wav2Vec2 model)"),Eye.forEach(t),pFo=i(N),R1=n(N,"LI",{});var yye=s(R1);ate=n(yye,"STRONG",{});var LUr=s(ate);_Fo=r(LUr,"xlm"),LUr.forEach(t),uFo=r(yye," \u2014 "),MI=n(yye,"A",{href:!0});var BUr=s(MI);bFo=r(BUr,"XLMWithLMHeadModel"),BUr.forEach(t),vFo=r(yye," (XLM model)"),yye.forEach(t),TFo=i(N),S1=n(N,"LI",{});var wye=s(S1);nte=n(wye,"STRONG",{});var xUr=s(nte);FFo=r(xUr,"xlm-roberta"),xUr.forEach(t),CFo=r(wye," \u2014 "),EI=n(wye,"A",{href:!0});var kUr=s(EI);MFo=r(kUr,"XLMRobertaForMaskedLM"),kUr.forEach(t),EFo=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),yFo=i(N),P1=n(N,"LI",{});var Aye=s(P1);ste=n(Aye,"STRONG",{});var RUr=s(ste);wFo=r(RUr,"xlm-roberta-xl"),RUr.forEach(t),AFo=r(Aye," \u2014 "),yI=n(Aye,"A",{href:!0});var SUr=s(yI);LFo=r(SUr,"XLMRobertaXLForMaskedLM"),SUr.forEach(t),BFo=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),xFo=i(N),$1=n(N,"LI",{});var Lye=s($1);lte=n(Lye,"STRONG",{});var PUr=s(lte);kFo=r(PUr,"yoso"),PUr.forEach(t),RFo=r(Lye," \u2014 "),wI=n(Lye,"A",{href:!0});var $Ur=s(wI);SFo=r($Ur,"YosoForMaskedLM"),$Ur.forEach(t),PFo=r(Lye," (YOSO model)"),Lye.forEach(t),N.forEach(t),$Fo=i(Xt),I1=n(Xt,"P",{});var Bye=s(I1);IFo=r(Bye,"The model is set in evaluation mode by default using "),ite=n(Bye,"CODE",{});var IUr=s(ite);DFo=r(IUr,"model.eval()"),IUr.forEach(t),NFo=r(Bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=n(Bye,"CODE",{});var DUr=s(dte);jFo=r(DUr,"model.train()"),DUr.forEach(t),Bye.forEach(t),qFo=i(Xt),cte=n(Xt,"P",{});var NUr=s(cte);GFo=r(NUr,"Examples:"),NUr.forEach(t),OFo=i(Xt),m(_y.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Pke=i(c),id=n(c,"H2",{class:!0});var XSe=s(id);D1=n(XSe,"A",{id:!0,class:!0,href:!0});var jUr=s(D1);fte=n(jUr,"SPAN",{});var qUr=s(fte);m(uy.$$.fragment,qUr),qUr.forEach(t),jUr.forEach(t),XFo=i(XSe),mte=n(XSe,"SPAN",{});var GUr=s(mte);VFo=r(GUr,"AutoModelForSeq2SeqLM"),GUr.forEach(t),XSe.forEach(t),$ke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(by.$$.fragment,el),zFo=i(el),dd=n(el,"P",{});var dW=s(dd);WFo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gte=n(dW,"CODE",{});var OUr=s(gte);QFo=r(OUr,"from_pretrained()"),OUr.forEach(t),HFo=r(dW,"class method or the "),hte=n(dW,"CODE",{});var XUr=s(hte);UFo=r(XUr,"from_config()"),XUr.forEach(t),JFo=r(dW,`class
method.`),dW.forEach(t),YFo=i(el),vy=n(el,"P",{});var VSe=s(vy);KFo=r(VSe,"This class cannot be instantiated directly using "),pte=n(VSe,"CODE",{});var VUr=s(pte);ZFo=r(VUr,"__init__()"),VUr.forEach(t),eCo=r(VSe," (throws an error)."),VSe.forEach(t),oCo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(Ty.$$.fragment,ol),rCo=i(ol),_te=n(ol,"P",{});var zUr=s(_te);tCo=r(zUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zUr.forEach(t),aCo=i(ol),cd=n(ol,"P",{});var cW=s(cd);nCo=r(cW,`Note:
Loading a model from its configuration file does `),ute=n(cW,"STRONG",{});var WUr=s(ute);sCo=r(WUr,"not"),WUr.forEach(t),lCo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=n(cW,"CODE",{});var QUr=s(bte);iCo=r(QUr,"from_pretrained()"),QUr.forEach(t),dCo=r(cW,"to load the model weights."),cW.forEach(t),cCo=i(ol),vte=n(ol,"P",{});var HUr=s(vte);fCo=r(HUr,"Examples:"),HUr.forEach(t),mCo=i(ol),m(Fy.$$.fragment,ol),ol.forEach(t),gCo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(Cy.$$.fragment,Vt),hCo=i(Vt),Tte=n(Vt,"P",{});var UUr=s(Tte);pCo=r(UUr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UUr.forEach(t),_Co=i(Vt),Ha=n(Vt,"P",{});var uE=s(Ha);uCo=r(uE,"The model class to instantiate is selected based on the "),Fte=n(uE,"CODE",{});var JUr=s(Fte);bCo=r(JUr,"model_type"),JUr.forEach(t),vCo=r(uE,` property of the config object (either
passed as an argument or loaded from `),Cte=n(uE,"CODE",{});var YUr=s(Cte);TCo=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),FCo=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=n(uE,"CODE",{});var KUr=s(Mte);CCo=r(KUr,"pretrained_model_name_or_path"),KUr.forEach(t),MCo=r(uE,":"),uE.forEach(t),ECo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);N1=n(ie,"LI",{});var xye=s(N1);Ete=n(xye,"STRONG",{});var ZUr=s(Ete);yCo=r(ZUr,"bart"),ZUr.forEach(t),wCo=r(xye," \u2014 "),AI=n(xye,"A",{href:!0});var eJr=s(AI);ACo=r(eJr,"BartForConditionalGeneration"),eJr.forEach(t),LCo=r(xye," (BART model)"),xye.forEach(t),BCo=i(ie),j1=n(ie,"LI",{});var kye=s(j1);yte=n(kye,"STRONG",{});var oJr=s(yte);xCo=r(oJr,"bigbird_pegasus"),oJr.forEach(t),kCo=r(kye," \u2014 "),LI=n(kye,"A",{href:!0});var rJr=s(LI);RCo=r(rJr,"BigBirdPegasusForConditionalGeneration"),rJr.forEach(t),SCo=r(kye," (BigBirdPegasus model)"),kye.forEach(t),PCo=i(ie),q1=n(ie,"LI",{});var Rye=s(q1);wte=n(Rye,"STRONG",{});var tJr=s(wte);$Co=r(tJr,"blenderbot"),tJr.forEach(t),ICo=r(Rye," \u2014 "),BI=n(Rye,"A",{href:!0});var aJr=s(BI);DCo=r(aJr,"BlenderbotForConditionalGeneration"),aJr.forEach(t),NCo=r(Rye," (Blenderbot model)"),Rye.forEach(t),jCo=i(ie),G1=n(ie,"LI",{});var Sye=s(G1);Ate=n(Sye,"STRONG",{});var nJr=s(Ate);qCo=r(nJr,"blenderbot-small"),nJr.forEach(t),GCo=r(Sye," \u2014 "),xI=n(Sye,"A",{href:!0});var sJr=s(xI);OCo=r(sJr,"BlenderbotSmallForConditionalGeneration"),sJr.forEach(t),XCo=r(Sye," (BlenderbotSmall model)"),Sye.forEach(t),VCo=i(ie),O1=n(ie,"LI",{});var Pye=s(O1);Lte=n(Pye,"STRONG",{});var lJr=s(Lte);zCo=r(lJr,"encoder-decoder"),lJr.forEach(t),WCo=r(Pye," \u2014 "),kI=n(Pye,"A",{href:!0});var iJr=s(kI);QCo=r(iJr,"EncoderDecoderModel"),iJr.forEach(t),HCo=r(Pye," (Encoder decoder model)"),Pye.forEach(t),UCo=i(ie),X1=n(ie,"LI",{});var $ye=s(X1);Bte=n($ye,"STRONG",{});var dJr=s(Bte);JCo=r(dJr,"fsmt"),dJr.forEach(t),YCo=r($ye," \u2014 "),RI=n($ye,"A",{href:!0});var cJr=s(RI);KCo=r(cJr,"FSMTForConditionalGeneration"),cJr.forEach(t),ZCo=r($ye," (FairSeq Machine-Translation model)"),$ye.forEach(t),eMo=i(ie),V1=n(ie,"LI",{});var Iye=s(V1);xte=n(Iye,"STRONG",{});var fJr=s(xte);oMo=r(fJr,"led"),fJr.forEach(t),rMo=r(Iye," \u2014 "),SI=n(Iye,"A",{href:!0});var mJr=s(SI);tMo=r(mJr,"LEDForConditionalGeneration"),mJr.forEach(t),aMo=r(Iye," (LED model)"),Iye.forEach(t),nMo=i(ie),z1=n(ie,"LI",{});var Dye=s(z1);kte=n(Dye,"STRONG",{});var gJr=s(kte);sMo=r(gJr,"m2m_100"),gJr.forEach(t),lMo=r(Dye," \u2014 "),PI=n(Dye,"A",{href:!0});var hJr=s(PI);iMo=r(hJr,"M2M100ForConditionalGeneration"),hJr.forEach(t),dMo=r(Dye," (M2M100 model)"),Dye.forEach(t),cMo=i(ie),W1=n(ie,"LI",{});var Nye=s(W1);Rte=n(Nye,"STRONG",{});var pJr=s(Rte);fMo=r(pJr,"marian"),pJr.forEach(t),mMo=r(Nye," \u2014 "),$I=n(Nye,"A",{href:!0});var _Jr=s($I);gMo=r(_Jr,"MarianMTModel"),_Jr.forEach(t),hMo=r(Nye," (Marian model)"),Nye.forEach(t),pMo=i(ie),Q1=n(ie,"LI",{});var jye=s(Q1);Ste=n(jye,"STRONG",{});var uJr=s(Ste);_Mo=r(uJr,"mbart"),uJr.forEach(t),uMo=r(jye," \u2014 "),II=n(jye,"A",{href:!0});var bJr=s(II);bMo=r(bJr,"MBartForConditionalGeneration"),bJr.forEach(t),vMo=r(jye," (mBART model)"),jye.forEach(t),TMo=i(ie),H1=n(ie,"LI",{});var qye=s(H1);Pte=n(qye,"STRONG",{});var vJr=s(Pte);FMo=r(vJr,"mt5"),vJr.forEach(t),CMo=r(qye," \u2014 "),DI=n(qye,"A",{href:!0});var TJr=s(DI);MMo=r(TJr,"MT5ForConditionalGeneration"),TJr.forEach(t),EMo=r(qye," (mT5 model)"),qye.forEach(t),yMo=i(ie),U1=n(ie,"LI",{});var Gye=s(U1);$te=n(Gye,"STRONG",{});var FJr=s($te);wMo=r(FJr,"pegasus"),FJr.forEach(t),AMo=r(Gye," \u2014 "),NI=n(Gye,"A",{href:!0});var CJr=s(NI);LMo=r(CJr,"PegasusForConditionalGeneration"),CJr.forEach(t),BMo=r(Gye," (Pegasus model)"),Gye.forEach(t),xMo=i(ie),J1=n(ie,"LI",{});var Oye=s(J1);Ite=n(Oye,"STRONG",{});var MJr=s(Ite);kMo=r(MJr,"plbart"),MJr.forEach(t),RMo=r(Oye," \u2014 "),jI=n(Oye,"A",{href:!0});var EJr=s(jI);SMo=r(EJr,"PLBartForConditionalGeneration"),EJr.forEach(t),PMo=r(Oye," (PLBart model)"),Oye.forEach(t),$Mo=i(ie),Y1=n(ie,"LI",{});var Xye=s(Y1);Dte=n(Xye,"STRONG",{});var yJr=s(Dte);IMo=r(yJr,"prophetnet"),yJr.forEach(t),DMo=r(Xye," \u2014 "),qI=n(Xye,"A",{href:!0});var wJr=s(qI);NMo=r(wJr,"ProphetNetForConditionalGeneration"),wJr.forEach(t),jMo=r(Xye," (ProphetNet model)"),Xye.forEach(t),qMo=i(ie),K1=n(ie,"LI",{});var Vye=s(K1);Nte=n(Vye,"STRONG",{});var AJr=s(Nte);GMo=r(AJr,"t5"),AJr.forEach(t),OMo=r(Vye," \u2014 "),GI=n(Vye,"A",{href:!0});var LJr=s(GI);XMo=r(LJr,"T5ForConditionalGeneration"),LJr.forEach(t),VMo=r(Vye," (T5 model)"),Vye.forEach(t),zMo=i(ie),Z1=n(ie,"LI",{});var zye=s(Z1);jte=n(zye,"STRONG",{});var BJr=s(jte);WMo=r(BJr,"xlm-prophetnet"),BJr.forEach(t),QMo=r(zye," \u2014 "),OI=n(zye,"A",{href:!0});var xJr=s(OI);HMo=r(xJr,"XLMProphetNetForConditionalGeneration"),xJr.forEach(t),UMo=r(zye," (XLMProphetNet model)"),zye.forEach(t),ie.forEach(t),JMo=i(Vt),e9=n(Vt,"P",{});var Wye=s(e9);YMo=r(Wye,"The model is set in evaluation mode by default using "),qte=n(Wye,"CODE",{});var kJr=s(qte);KMo=r(kJr,"model.eval()"),kJr.forEach(t),ZMo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gte=n(Wye,"CODE",{});var RJr=s(Gte);e4o=r(RJr,"model.train()"),RJr.forEach(t),Wye.forEach(t),o4o=i(Vt),Ote=n(Vt,"P",{});var SJr=s(Ote);r4o=r(SJr,"Examples:"),SJr.forEach(t),t4o=i(Vt),m(My.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Ike=i(c),fd=n(c,"H2",{class:!0});var zSe=s(fd);o9=n(zSe,"A",{id:!0,class:!0,href:!0});var PJr=s(o9);Xte=n(PJr,"SPAN",{});var $Jr=s(Xte);m(Ey.$$.fragment,$Jr),$Jr.forEach(t),PJr.forEach(t),a4o=i(zSe),Vte=n(zSe,"SPAN",{});var IJr=s(Vte);n4o=r(IJr,"AutoModelForSequenceClassification"),IJr.forEach(t),zSe.forEach(t),Dke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(yy.$$.fragment,rl),s4o=i(rl),md=n(rl,"P",{});var fW=s(md);l4o=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zte=n(fW,"CODE",{});var DJr=s(zte);i4o=r(DJr,"from_pretrained()"),DJr.forEach(t),d4o=r(fW,"class method or the "),Wte=n(fW,"CODE",{});var NJr=s(Wte);c4o=r(NJr,"from_config()"),NJr.forEach(t),f4o=r(fW,`class
method.`),fW.forEach(t),m4o=i(rl),wy=n(rl,"P",{});var WSe=s(wy);g4o=r(WSe,"This class cannot be instantiated directly using "),Qte=n(WSe,"CODE",{});var jJr=s(Qte);h4o=r(jJr,"__init__()"),jJr.forEach(t),p4o=r(WSe," (throws an error)."),WSe.forEach(t),_4o=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(Ay.$$.fragment,tl),u4o=i(tl),Hte=n(tl,"P",{});var qJr=s(Hte);b4o=r(qJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qJr.forEach(t),v4o=i(tl),gd=n(tl,"P",{});var mW=s(gd);T4o=r(mW,`Note:
Loading a model from its configuration file does `),Ute=n(mW,"STRONG",{});var GJr=s(Ute);F4o=r(GJr,"not"),GJr.forEach(t),C4o=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=n(mW,"CODE",{});var OJr=s(Jte);M4o=r(OJr,"from_pretrained()"),OJr.forEach(t),E4o=r(mW,"to load the model weights."),mW.forEach(t),y4o=i(tl),Yte=n(tl,"P",{});var XJr=s(Yte);w4o=r(XJr,"Examples:"),XJr.forEach(t),A4o=i(tl),m(Ly.$$.fragment,tl),tl.forEach(t),L4o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(By.$$.fragment,zt),B4o=i(zt),Kte=n(zt,"P",{});var VJr=s(Kte);x4o=r(VJr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VJr.forEach(t),k4o=i(zt),Ua=n(zt,"P",{});var bE=s(Ua);R4o=r(bE,"The model class to instantiate is selected based on the "),Zte=n(bE,"CODE",{});var zJr=s(Zte);S4o=r(zJr,"model_type"),zJr.forEach(t),P4o=r(bE,` property of the config object (either
passed as an argument or loaded from `),eae=n(bE,"CODE",{});var WJr=s(eae);$4o=r(WJr,"pretrained_model_name_or_path"),WJr.forEach(t),I4o=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oae=n(bE,"CODE",{});var QJr=s(oae);D4o=r(QJr,"pretrained_model_name_or_path"),QJr.forEach(t),N4o=r(bE,":"),bE.forEach(t),j4o=i(zt),A=n(zt,"UL",{});var L=s(A);r9=n(L,"LI",{});var Qye=s(r9);rae=n(Qye,"STRONG",{});var HJr=s(rae);q4o=r(HJr,"albert"),HJr.forEach(t),G4o=r(Qye," \u2014 "),XI=n(Qye,"A",{href:!0});var UJr=s(XI);O4o=r(UJr,"AlbertForSequenceClassification"),UJr.forEach(t),X4o=r(Qye," (ALBERT model)"),Qye.forEach(t),V4o=i(L),t9=n(L,"LI",{});var Hye=s(t9);tae=n(Hye,"STRONG",{});var JJr=s(tae);z4o=r(JJr,"bart"),JJr.forEach(t),W4o=r(Hye," \u2014 "),VI=n(Hye,"A",{href:!0});var YJr=s(VI);Q4o=r(YJr,"BartForSequenceClassification"),YJr.forEach(t),H4o=r(Hye," (BART model)"),Hye.forEach(t),U4o=i(L),a9=n(L,"LI",{});var Uye=s(a9);aae=n(Uye,"STRONG",{});var KJr=s(aae);J4o=r(KJr,"bert"),KJr.forEach(t),Y4o=r(Uye," \u2014 "),zI=n(Uye,"A",{href:!0});var ZJr=s(zI);K4o=r(ZJr,"BertForSequenceClassification"),ZJr.forEach(t),Z4o=r(Uye," (BERT model)"),Uye.forEach(t),eEo=i(L),n9=n(L,"LI",{});var Jye=s(n9);nae=n(Jye,"STRONG",{});var eYr=s(nae);oEo=r(eYr,"big_bird"),eYr.forEach(t),rEo=r(Jye," \u2014 "),WI=n(Jye,"A",{href:!0});var oYr=s(WI);tEo=r(oYr,"BigBirdForSequenceClassification"),oYr.forEach(t),aEo=r(Jye," (BigBird model)"),Jye.forEach(t),nEo=i(L),s9=n(L,"LI",{});var Yye=s(s9);sae=n(Yye,"STRONG",{});var rYr=s(sae);sEo=r(rYr,"bigbird_pegasus"),rYr.forEach(t),lEo=r(Yye," \u2014 "),QI=n(Yye,"A",{href:!0});var tYr=s(QI);iEo=r(tYr,"BigBirdPegasusForSequenceClassification"),tYr.forEach(t),dEo=r(Yye," (BigBirdPegasus model)"),Yye.forEach(t),cEo=i(L),l9=n(L,"LI",{});var Kye=s(l9);lae=n(Kye,"STRONG",{});var aYr=s(lae);fEo=r(aYr,"camembert"),aYr.forEach(t),mEo=r(Kye," \u2014 "),HI=n(Kye,"A",{href:!0});var nYr=s(HI);gEo=r(nYr,"CamembertForSequenceClassification"),nYr.forEach(t),hEo=r(Kye," (CamemBERT model)"),Kye.forEach(t),pEo=i(L),i9=n(L,"LI",{});var Zye=s(i9);iae=n(Zye,"STRONG",{});var sYr=s(iae);_Eo=r(sYr,"canine"),sYr.forEach(t),uEo=r(Zye," \u2014 "),UI=n(Zye,"A",{href:!0});var lYr=s(UI);bEo=r(lYr,"CanineForSequenceClassification"),lYr.forEach(t),vEo=r(Zye," (Canine model)"),Zye.forEach(t),TEo=i(L),d9=n(L,"LI",{});var ewe=s(d9);dae=n(ewe,"STRONG",{});var iYr=s(dae);FEo=r(iYr,"convbert"),iYr.forEach(t),CEo=r(ewe," \u2014 "),JI=n(ewe,"A",{href:!0});var dYr=s(JI);MEo=r(dYr,"ConvBertForSequenceClassification"),dYr.forEach(t),EEo=r(ewe," (ConvBERT model)"),ewe.forEach(t),yEo=i(L),c9=n(L,"LI",{});var owe=s(c9);cae=n(owe,"STRONG",{});var cYr=s(cae);wEo=r(cYr,"ctrl"),cYr.forEach(t),AEo=r(owe," \u2014 "),YI=n(owe,"A",{href:!0});var fYr=s(YI);LEo=r(fYr,"CTRLForSequenceClassification"),fYr.forEach(t),BEo=r(owe," (CTRL model)"),owe.forEach(t),xEo=i(L),f9=n(L,"LI",{});var rwe=s(f9);fae=n(rwe,"STRONG",{});var mYr=s(fae);kEo=r(mYr,"data2vec-text"),mYr.forEach(t),REo=r(rwe," \u2014 "),KI=n(rwe,"A",{href:!0});var gYr=s(KI);SEo=r(gYr,"Data2VecTextForSequenceClassification"),gYr.forEach(t),PEo=r(rwe," (Data2VecText model)"),rwe.forEach(t),$Eo=i(L),m9=n(L,"LI",{});var twe=s(m9);mae=n(twe,"STRONG",{});var hYr=s(mae);IEo=r(hYr,"deberta"),hYr.forEach(t),DEo=r(twe," \u2014 "),ZI=n(twe,"A",{href:!0});var pYr=s(ZI);NEo=r(pYr,"DebertaForSequenceClassification"),pYr.forEach(t),jEo=r(twe," (DeBERTa model)"),twe.forEach(t),qEo=i(L),g9=n(L,"LI",{});var awe=s(g9);gae=n(awe,"STRONG",{});var _Yr=s(gae);GEo=r(_Yr,"deberta-v2"),_Yr.forEach(t),OEo=r(awe," \u2014 "),eD=n(awe,"A",{href:!0});var uYr=s(eD);XEo=r(uYr,"DebertaV2ForSequenceClassification"),uYr.forEach(t),VEo=r(awe," (DeBERTa-v2 model)"),awe.forEach(t),zEo=i(L),h9=n(L,"LI",{});var nwe=s(h9);hae=n(nwe,"STRONG",{});var bYr=s(hae);WEo=r(bYr,"distilbert"),bYr.forEach(t),QEo=r(nwe," \u2014 "),oD=n(nwe,"A",{href:!0});var vYr=s(oD);HEo=r(vYr,"DistilBertForSequenceClassification"),vYr.forEach(t),UEo=r(nwe," (DistilBERT model)"),nwe.forEach(t),JEo=i(L),p9=n(L,"LI",{});var swe=s(p9);pae=n(swe,"STRONG",{});var TYr=s(pae);YEo=r(TYr,"electra"),TYr.forEach(t),KEo=r(swe," \u2014 "),rD=n(swe,"A",{href:!0});var FYr=s(rD);ZEo=r(FYr,"ElectraForSequenceClassification"),FYr.forEach(t),e3o=r(swe," (ELECTRA model)"),swe.forEach(t),o3o=i(L),_9=n(L,"LI",{});var lwe=s(_9);_ae=n(lwe,"STRONG",{});var CYr=s(_ae);r3o=r(CYr,"flaubert"),CYr.forEach(t),t3o=r(lwe," \u2014 "),tD=n(lwe,"A",{href:!0});var MYr=s(tD);a3o=r(MYr,"FlaubertForSequenceClassification"),MYr.forEach(t),n3o=r(lwe," (FlauBERT model)"),lwe.forEach(t),s3o=i(L),u9=n(L,"LI",{});var iwe=s(u9);uae=n(iwe,"STRONG",{});var EYr=s(uae);l3o=r(EYr,"fnet"),EYr.forEach(t),i3o=r(iwe," \u2014 "),aD=n(iwe,"A",{href:!0});var yYr=s(aD);d3o=r(yYr,"FNetForSequenceClassification"),yYr.forEach(t),c3o=r(iwe," (FNet model)"),iwe.forEach(t),f3o=i(L),b9=n(L,"LI",{});var dwe=s(b9);bae=n(dwe,"STRONG",{});var wYr=s(bae);m3o=r(wYr,"funnel"),wYr.forEach(t),g3o=r(dwe," \u2014 "),nD=n(dwe,"A",{href:!0});var AYr=s(nD);h3o=r(AYr,"FunnelForSequenceClassification"),AYr.forEach(t),p3o=r(dwe," (Funnel Transformer model)"),dwe.forEach(t),_3o=i(L),v9=n(L,"LI",{});var cwe=s(v9);vae=n(cwe,"STRONG",{});var LYr=s(vae);u3o=r(LYr,"gpt2"),LYr.forEach(t),b3o=r(cwe," \u2014 "),sD=n(cwe,"A",{href:!0});var BYr=s(sD);v3o=r(BYr,"GPT2ForSequenceClassification"),BYr.forEach(t),T3o=r(cwe," (OpenAI GPT-2 model)"),cwe.forEach(t),F3o=i(L),T9=n(L,"LI",{});var fwe=s(T9);Tae=n(fwe,"STRONG",{});var xYr=s(Tae);C3o=r(xYr,"gpt_neo"),xYr.forEach(t),M3o=r(fwe," \u2014 "),lD=n(fwe,"A",{href:!0});var kYr=s(lD);E3o=r(kYr,"GPTNeoForSequenceClassification"),kYr.forEach(t),y3o=r(fwe," (GPT Neo model)"),fwe.forEach(t),w3o=i(L),F9=n(L,"LI",{});var mwe=s(F9);Fae=n(mwe,"STRONG",{});var RYr=s(Fae);A3o=r(RYr,"gptj"),RYr.forEach(t),L3o=r(mwe," \u2014 "),iD=n(mwe,"A",{href:!0});var SYr=s(iD);B3o=r(SYr,"GPTJForSequenceClassification"),SYr.forEach(t),x3o=r(mwe," (GPT-J model)"),mwe.forEach(t),k3o=i(L),C9=n(L,"LI",{});var gwe=s(C9);Cae=n(gwe,"STRONG",{});var PYr=s(Cae);R3o=r(PYr,"ibert"),PYr.forEach(t),S3o=r(gwe," \u2014 "),dD=n(gwe,"A",{href:!0});var $Yr=s(dD);P3o=r($Yr,"IBertForSequenceClassification"),$Yr.forEach(t),$3o=r(gwe," (I-BERT model)"),gwe.forEach(t),I3o=i(L),M9=n(L,"LI",{});var hwe=s(M9);Mae=n(hwe,"STRONG",{});var IYr=s(Mae);D3o=r(IYr,"layoutlm"),IYr.forEach(t),N3o=r(hwe," \u2014 "),cD=n(hwe,"A",{href:!0});var DYr=s(cD);j3o=r(DYr,"LayoutLMForSequenceClassification"),DYr.forEach(t),q3o=r(hwe," (LayoutLM model)"),hwe.forEach(t),G3o=i(L),E9=n(L,"LI",{});var pwe=s(E9);Eae=n(pwe,"STRONG",{});var NYr=s(Eae);O3o=r(NYr,"layoutlmv2"),NYr.forEach(t),X3o=r(pwe," \u2014 "),fD=n(pwe,"A",{href:!0});var jYr=s(fD);V3o=r(jYr,"LayoutLMv2ForSequenceClassification"),jYr.forEach(t),z3o=r(pwe," (LayoutLMv2 model)"),pwe.forEach(t),W3o=i(L),y9=n(L,"LI",{});var _we=s(y9);yae=n(_we,"STRONG",{});var qYr=s(yae);Q3o=r(qYr,"led"),qYr.forEach(t),H3o=r(_we," \u2014 "),mD=n(_we,"A",{href:!0});var GYr=s(mD);U3o=r(GYr,"LEDForSequenceClassification"),GYr.forEach(t),J3o=r(_we," (LED model)"),_we.forEach(t),Y3o=i(L),w9=n(L,"LI",{});var uwe=s(w9);wae=n(uwe,"STRONG",{});var OYr=s(wae);K3o=r(OYr,"longformer"),OYr.forEach(t),Z3o=r(uwe," \u2014 "),gD=n(uwe,"A",{href:!0});var XYr=s(gD);eyo=r(XYr,"LongformerForSequenceClassification"),XYr.forEach(t),oyo=r(uwe," (Longformer model)"),uwe.forEach(t),ryo=i(L),A9=n(L,"LI",{});var bwe=s(A9);Aae=n(bwe,"STRONG",{});var VYr=s(Aae);tyo=r(VYr,"mbart"),VYr.forEach(t),ayo=r(bwe," \u2014 "),hD=n(bwe,"A",{href:!0});var zYr=s(hD);nyo=r(zYr,"MBartForSequenceClassification"),zYr.forEach(t),syo=r(bwe," (mBART model)"),bwe.forEach(t),lyo=i(L),L9=n(L,"LI",{});var vwe=s(L9);Lae=n(vwe,"STRONG",{});var WYr=s(Lae);iyo=r(WYr,"megatron-bert"),WYr.forEach(t),dyo=r(vwe," \u2014 "),pD=n(vwe,"A",{href:!0});var QYr=s(pD);cyo=r(QYr,"MegatronBertForSequenceClassification"),QYr.forEach(t),fyo=r(vwe," (MegatronBert model)"),vwe.forEach(t),myo=i(L),B9=n(L,"LI",{});var Twe=s(B9);Bae=n(Twe,"STRONG",{});var HYr=s(Bae);gyo=r(HYr,"mobilebert"),HYr.forEach(t),hyo=r(Twe," \u2014 "),_D=n(Twe,"A",{href:!0});var UYr=s(_D);pyo=r(UYr,"MobileBertForSequenceClassification"),UYr.forEach(t),_yo=r(Twe," (MobileBERT model)"),Twe.forEach(t),uyo=i(L),x9=n(L,"LI",{});var Fwe=s(x9);xae=n(Fwe,"STRONG",{});var JYr=s(xae);byo=r(JYr,"mpnet"),JYr.forEach(t),vyo=r(Fwe," \u2014 "),uD=n(Fwe,"A",{href:!0});var YYr=s(uD);Tyo=r(YYr,"MPNetForSequenceClassification"),YYr.forEach(t),Fyo=r(Fwe," (MPNet model)"),Fwe.forEach(t),Cyo=i(L),k9=n(L,"LI",{});var Cwe=s(k9);kae=n(Cwe,"STRONG",{});var KYr=s(kae);Myo=r(KYr,"nystromformer"),KYr.forEach(t),Eyo=r(Cwe," \u2014 "),bD=n(Cwe,"A",{href:!0});var ZYr=s(bD);yyo=r(ZYr,"NystromformerForSequenceClassification"),ZYr.forEach(t),wyo=r(Cwe," (Nystromformer model)"),Cwe.forEach(t),Ayo=i(L),R9=n(L,"LI",{});var Mwe=s(R9);Rae=n(Mwe,"STRONG",{});var eKr=s(Rae);Lyo=r(eKr,"openai-gpt"),eKr.forEach(t),Byo=r(Mwe," \u2014 "),vD=n(Mwe,"A",{href:!0});var oKr=s(vD);xyo=r(oKr,"OpenAIGPTForSequenceClassification"),oKr.forEach(t),kyo=r(Mwe," (OpenAI GPT model)"),Mwe.forEach(t),Ryo=i(L),S9=n(L,"LI",{});var Ewe=s(S9);Sae=n(Ewe,"STRONG",{});var rKr=s(Sae);Syo=r(rKr,"perceiver"),rKr.forEach(t),Pyo=r(Ewe," \u2014 "),TD=n(Ewe,"A",{href:!0});var tKr=s(TD);$yo=r(tKr,"PerceiverForSequenceClassification"),tKr.forEach(t),Iyo=r(Ewe," (Perceiver model)"),Ewe.forEach(t),Dyo=i(L),P9=n(L,"LI",{});var ywe=s(P9);Pae=n(ywe,"STRONG",{});var aKr=s(Pae);Nyo=r(aKr,"plbart"),aKr.forEach(t),jyo=r(ywe," \u2014 "),FD=n(ywe,"A",{href:!0});var nKr=s(FD);qyo=r(nKr,"PLBartForSequenceClassification"),nKr.forEach(t),Gyo=r(ywe," (PLBart model)"),ywe.forEach(t),Oyo=i(L),$9=n(L,"LI",{});var wwe=s($9);$ae=n(wwe,"STRONG",{});var sKr=s($ae);Xyo=r(sKr,"qdqbert"),sKr.forEach(t),Vyo=r(wwe," \u2014 "),CD=n(wwe,"A",{href:!0});var lKr=s(CD);zyo=r(lKr,"QDQBertForSequenceClassification"),lKr.forEach(t),Wyo=r(wwe," (QDQBert model)"),wwe.forEach(t),Qyo=i(L),I9=n(L,"LI",{});var Awe=s(I9);Iae=n(Awe,"STRONG",{});var iKr=s(Iae);Hyo=r(iKr,"reformer"),iKr.forEach(t),Uyo=r(Awe," \u2014 "),MD=n(Awe,"A",{href:!0});var dKr=s(MD);Jyo=r(dKr,"ReformerForSequenceClassification"),dKr.forEach(t),Yyo=r(Awe," (Reformer model)"),Awe.forEach(t),Kyo=i(L),D9=n(L,"LI",{});var Lwe=s(D9);Dae=n(Lwe,"STRONG",{});var cKr=s(Dae);Zyo=r(cKr,"rembert"),cKr.forEach(t),ewo=r(Lwe," \u2014 "),ED=n(Lwe,"A",{href:!0});var fKr=s(ED);owo=r(fKr,"RemBertForSequenceClassification"),fKr.forEach(t),rwo=r(Lwe," (RemBERT model)"),Lwe.forEach(t),two=i(L),N9=n(L,"LI",{});var Bwe=s(N9);Nae=n(Bwe,"STRONG",{});var mKr=s(Nae);awo=r(mKr,"roberta"),mKr.forEach(t),nwo=r(Bwe," \u2014 "),yD=n(Bwe,"A",{href:!0});var gKr=s(yD);swo=r(gKr,"RobertaForSequenceClassification"),gKr.forEach(t),lwo=r(Bwe," (RoBERTa model)"),Bwe.forEach(t),iwo=i(L),j9=n(L,"LI",{});var xwe=s(j9);jae=n(xwe,"STRONG",{});var hKr=s(jae);dwo=r(hKr,"roformer"),hKr.forEach(t),cwo=r(xwe," \u2014 "),wD=n(xwe,"A",{href:!0});var pKr=s(wD);fwo=r(pKr,"RoFormerForSequenceClassification"),pKr.forEach(t),mwo=r(xwe," (RoFormer model)"),xwe.forEach(t),gwo=i(L),q9=n(L,"LI",{});var kwe=s(q9);qae=n(kwe,"STRONG",{});var _Kr=s(qae);hwo=r(_Kr,"squeezebert"),_Kr.forEach(t),pwo=r(kwe," \u2014 "),AD=n(kwe,"A",{href:!0});var uKr=s(AD);_wo=r(uKr,"SqueezeBertForSequenceClassification"),uKr.forEach(t),uwo=r(kwe," (SqueezeBERT model)"),kwe.forEach(t),bwo=i(L),G9=n(L,"LI",{});var Rwe=s(G9);Gae=n(Rwe,"STRONG",{});var bKr=s(Gae);vwo=r(bKr,"tapas"),bKr.forEach(t),Two=r(Rwe," \u2014 "),LD=n(Rwe,"A",{href:!0});var vKr=s(LD);Fwo=r(vKr,"TapasForSequenceClassification"),vKr.forEach(t),Cwo=r(Rwe," (TAPAS model)"),Rwe.forEach(t),Mwo=i(L),O9=n(L,"LI",{});var Swe=s(O9);Oae=n(Swe,"STRONG",{});var TKr=s(Oae);Ewo=r(TKr,"transfo-xl"),TKr.forEach(t),ywo=r(Swe," \u2014 "),BD=n(Swe,"A",{href:!0});var FKr=s(BD);wwo=r(FKr,"TransfoXLForSequenceClassification"),FKr.forEach(t),Awo=r(Swe," (Transformer-XL model)"),Swe.forEach(t),Lwo=i(L),X9=n(L,"LI",{});var Pwe=s(X9);Xae=n(Pwe,"STRONG",{});var CKr=s(Xae);Bwo=r(CKr,"xlm"),CKr.forEach(t),xwo=r(Pwe," \u2014 "),xD=n(Pwe,"A",{href:!0});var MKr=s(xD);kwo=r(MKr,"XLMForSequenceClassification"),MKr.forEach(t),Rwo=r(Pwe," (XLM model)"),Pwe.forEach(t),Swo=i(L),V9=n(L,"LI",{});var $we=s(V9);Vae=n($we,"STRONG",{});var EKr=s(Vae);Pwo=r(EKr,"xlm-roberta"),EKr.forEach(t),$wo=r($we," \u2014 "),kD=n($we,"A",{href:!0});var yKr=s(kD);Iwo=r(yKr,"XLMRobertaForSequenceClassification"),yKr.forEach(t),Dwo=r($we," (XLM-RoBERTa model)"),$we.forEach(t),Nwo=i(L),z9=n(L,"LI",{});var Iwe=s(z9);zae=n(Iwe,"STRONG",{});var wKr=s(zae);jwo=r(wKr,"xlm-roberta-xl"),wKr.forEach(t),qwo=r(Iwe," \u2014 "),RD=n(Iwe,"A",{href:!0});var AKr=s(RD);Gwo=r(AKr,"XLMRobertaXLForSequenceClassification"),AKr.forEach(t),Owo=r(Iwe," (XLM-RoBERTa-XL model)"),Iwe.forEach(t),Xwo=i(L),W9=n(L,"LI",{});var Dwe=s(W9);Wae=n(Dwe,"STRONG",{});var LKr=s(Wae);Vwo=r(LKr,"xlnet"),LKr.forEach(t),zwo=r(Dwe," \u2014 "),SD=n(Dwe,"A",{href:!0});var BKr=s(SD);Wwo=r(BKr,"XLNetForSequenceClassification"),BKr.forEach(t),Qwo=r(Dwe," (XLNet model)"),Dwe.forEach(t),Hwo=i(L),Q9=n(L,"LI",{});var Nwe=s(Q9);Qae=n(Nwe,"STRONG",{});var xKr=s(Qae);Uwo=r(xKr,"yoso"),xKr.forEach(t),Jwo=r(Nwe," \u2014 "),PD=n(Nwe,"A",{href:!0});var kKr=s(PD);Ywo=r(kKr,"YosoForSequenceClassification"),kKr.forEach(t),Kwo=r(Nwe," (YOSO model)"),Nwe.forEach(t),L.forEach(t),Zwo=i(zt),H9=n(zt,"P",{});var jwe=s(H9);e6o=r(jwe,"The model is set in evaluation mode by default using "),Hae=n(jwe,"CODE",{});var RKr=s(Hae);o6o=r(RKr,"model.eval()"),RKr.forEach(t),r6o=r(jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uae=n(jwe,"CODE",{});var SKr=s(Uae);t6o=r(SKr,"model.train()"),SKr.forEach(t),jwe.forEach(t),a6o=i(zt),Jae=n(zt,"P",{});var PKr=s(Jae);n6o=r(PKr,"Examples:"),PKr.forEach(t),s6o=i(zt),m(xy.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Nke=i(c),hd=n(c,"H2",{class:!0});var QSe=s(hd);U9=n(QSe,"A",{id:!0,class:!0,href:!0});var $Kr=s(U9);Yae=n($Kr,"SPAN",{});var IKr=s(Yae);m(ky.$$.fragment,IKr),IKr.forEach(t),$Kr.forEach(t),l6o=i(QSe),Kae=n(QSe,"SPAN",{});var DKr=s(Kae);i6o=r(DKr,"AutoModelForMultipleChoice"),DKr.forEach(t),QSe.forEach(t),jke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Ry.$$.fragment,al),d6o=i(al),pd=n(al,"P",{});var gW=s(pd);c6o=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Zae=n(gW,"CODE",{});var NKr=s(Zae);f6o=r(NKr,"from_pretrained()"),NKr.forEach(t),m6o=r(gW,"class method or the "),ene=n(gW,"CODE",{});var jKr=s(ene);g6o=r(jKr,"from_config()"),jKr.forEach(t),h6o=r(gW,`class
method.`),gW.forEach(t),p6o=i(al),Sy=n(al,"P",{});var HSe=s(Sy);_6o=r(HSe,"This class cannot be instantiated directly using "),one=n(HSe,"CODE",{});var qKr=s(one);u6o=r(qKr,"__init__()"),qKr.forEach(t),b6o=r(HSe," (throws an error)."),HSe.forEach(t),v6o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Py.$$.fragment,nl),T6o=i(nl),rne=n(nl,"P",{});var GKr=s(rne);F6o=r(GKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GKr.forEach(t),C6o=i(nl),_d=n(nl,"P",{});var hW=s(_d);M6o=r(hW,`Note:
Loading a model from its configuration file does `),tne=n(hW,"STRONG",{});var OKr=s(tne);E6o=r(OKr,"not"),OKr.forEach(t),y6o=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ane=n(hW,"CODE",{});var XKr=s(ane);w6o=r(XKr,"from_pretrained()"),XKr.forEach(t),A6o=r(hW,"to load the model weights."),hW.forEach(t),L6o=i(nl),nne=n(nl,"P",{});var VKr=s(nne);B6o=r(VKr,"Examples:"),VKr.forEach(t),x6o=i(nl),m($y.$$.fragment,nl),nl.forEach(t),k6o=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(Iy.$$.fragment,Wt),R6o=i(Wt),sne=n(Wt,"P",{});var zKr=s(sne);S6o=r(zKr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zKr.forEach(t),P6o=i(Wt),Ja=n(Wt,"P",{});var vE=s(Ja);$6o=r(vE,"The model class to instantiate is selected based on the "),lne=n(vE,"CODE",{});var WKr=s(lne);I6o=r(WKr,"model_type"),WKr.forEach(t),D6o=r(vE,` property of the config object (either
passed as an argument or loaded from `),ine=n(vE,"CODE",{});var QKr=s(ine);N6o=r(QKr,"pretrained_model_name_or_path"),QKr.forEach(t),j6o=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dne=n(vE,"CODE",{});var HKr=s(dne);q6o=r(HKr,"pretrained_model_name_or_path"),HKr.forEach(t),G6o=r(vE,":"),vE.forEach(t),O6o=i(Wt),G=n(Wt,"UL",{});var O=s(G);J9=n(O,"LI",{});var qwe=s(J9);cne=n(qwe,"STRONG",{});var UKr=s(cne);X6o=r(UKr,"albert"),UKr.forEach(t),V6o=r(qwe," \u2014 "),$D=n(qwe,"A",{href:!0});var JKr=s($D);z6o=r(JKr,"AlbertForMultipleChoice"),JKr.forEach(t),W6o=r(qwe," (ALBERT model)"),qwe.forEach(t),Q6o=i(O),Y9=n(O,"LI",{});var Gwe=s(Y9);fne=n(Gwe,"STRONG",{});var YKr=s(fne);H6o=r(YKr,"bert"),YKr.forEach(t),U6o=r(Gwe," \u2014 "),ID=n(Gwe,"A",{href:!0});var KKr=s(ID);J6o=r(KKr,"BertForMultipleChoice"),KKr.forEach(t),Y6o=r(Gwe," (BERT model)"),Gwe.forEach(t),K6o=i(O),K9=n(O,"LI",{});var Owe=s(K9);mne=n(Owe,"STRONG",{});var ZKr=s(mne);Z6o=r(ZKr,"big_bird"),ZKr.forEach(t),eAo=r(Owe," \u2014 "),DD=n(Owe,"A",{href:!0});var eZr=s(DD);oAo=r(eZr,"BigBirdForMultipleChoice"),eZr.forEach(t),rAo=r(Owe," (BigBird model)"),Owe.forEach(t),tAo=i(O),Z9=n(O,"LI",{});var Xwe=s(Z9);gne=n(Xwe,"STRONG",{});var oZr=s(gne);aAo=r(oZr,"camembert"),oZr.forEach(t),nAo=r(Xwe," \u2014 "),ND=n(Xwe,"A",{href:!0});var rZr=s(ND);sAo=r(rZr,"CamembertForMultipleChoice"),rZr.forEach(t),lAo=r(Xwe," (CamemBERT model)"),Xwe.forEach(t),iAo=i(O),eb=n(O,"LI",{});var Vwe=s(eb);hne=n(Vwe,"STRONG",{});var tZr=s(hne);dAo=r(tZr,"canine"),tZr.forEach(t),cAo=r(Vwe," \u2014 "),jD=n(Vwe,"A",{href:!0});var aZr=s(jD);fAo=r(aZr,"CanineForMultipleChoice"),aZr.forEach(t),mAo=r(Vwe," (Canine model)"),Vwe.forEach(t),gAo=i(O),ob=n(O,"LI",{});var zwe=s(ob);pne=n(zwe,"STRONG",{});var nZr=s(pne);hAo=r(nZr,"convbert"),nZr.forEach(t),pAo=r(zwe," \u2014 "),qD=n(zwe,"A",{href:!0});var sZr=s(qD);_Ao=r(sZr,"ConvBertForMultipleChoice"),sZr.forEach(t),uAo=r(zwe," (ConvBERT model)"),zwe.forEach(t),bAo=i(O),rb=n(O,"LI",{});var Wwe=s(rb);_ne=n(Wwe,"STRONG",{});var lZr=s(_ne);vAo=r(lZr,"data2vec-text"),lZr.forEach(t),TAo=r(Wwe," \u2014 "),GD=n(Wwe,"A",{href:!0});var iZr=s(GD);FAo=r(iZr,"Data2VecTextForMultipleChoice"),iZr.forEach(t),CAo=r(Wwe," (Data2VecText model)"),Wwe.forEach(t),MAo=i(O),tb=n(O,"LI",{});var Qwe=s(tb);une=n(Qwe,"STRONG",{});var dZr=s(une);EAo=r(dZr,"distilbert"),dZr.forEach(t),yAo=r(Qwe," \u2014 "),OD=n(Qwe,"A",{href:!0});var cZr=s(OD);wAo=r(cZr,"DistilBertForMultipleChoice"),cZr.forEach(t),AAo=r(Qwe," (DistilBERT model)"),Qwe.forEach(t),LAo=i(O),ab=n(O,"LI",{});var Hwe=s(ab);bne=n(Hwe,"STRONG",{});var fZr=s(bne);BAo=r(fZr,"electra"),fZr.forEach(t),xAo=r(Hwe," \u2014 "),XD=n(Hwe,"A",{href:!0});var mZr=s(XD);kAo=r(mZr,"ElectraForMultipleChoice"),mZr.forEach(t),RAo=r(Hwe," (ELECTRA model)"),Hwe.forEach(t),SAo=i(O),nb=n(O,"LI",{});var Uwe=s(nb);vne=n(Uwe,"STRONG",{});var gZr=s(vne);PAo=r(gZr,"flaubert"),gZr.forEach(t),$Ao=r(Uwe," \u2014 "),VD=n(Uwe,"A",{href:!0});var hZr=s(VD);IAo=r(hZr,"FlaubertForMultipleChoice"),hZr.forEach(t),DAo=r(Uwe," (FlauBERT model)"),Uwe.forEach(t),NAo=i(O),sb=n(O,"LI",{});var Jwe=s(sb);Tne=n(Jwe,"STRONG",{});var pZr=s(Tne);jAo=r(pZr,"fnet"),pZr.forEach(t),qAo=r(Jwe," \u2014 "),zD=n(Jwe,"A",{href:!0});var _Zr=s(zD);GAo=r(_Zr,"FNetForMultipleChoice"),_Zr.forEach(t),OAo=r(Jwe," (FNet model)"),Jwe.forEach(t),XAo=i(O),lb=n(O,"LI",{});var Ywe=s(lb);Fne=n(Ywe,"STRONG",{});var uZr=s(Fne);VAo=r(uZr,"funnel"),uZr.forEach(t),zAo=r(Ywe," \u2014 "),WD=n(Ywe,"A",{href:!0});var bZr=s(WD);WAo=r(bZr,"FunnelForMultipleChoice"),bZr.forEach(t),QAo=r(Ywe," (Funnel Transformer model)"),Ywe.forEach(t),HAo=i(O),ib=n(O,"LI",{});var Kwe=s(ib);Cne=n(Kwe,"STRONG",{});var vZr=s(Cne);UAo=r(vZr,"ibert"),vZr.forEach(t),JAo=r(Kwe," \u2014 "),QD=n(Kwe,"A",{href:!0});var TZr=s(QD);YAo=r(TZr,"IBertForMultipleChoice"),TZr.forEach(t),KAo=r(Kwe," (I-BERT model)"),Kwe.forEach(t),ZAo=i(O),db=n(O,"LI",{});var Zwe=s(db);Mne=n(Zwe,"STRONG",{});var FZr=s(Mne);e0o=r(FZr,"longformer"),FZr.forEach(t),o0o=r(Zwe," \u2014 "),HD=n(Zwe,"A",{href:!0});var CZr=s(HD);r0o=r(CZr,"LongformerForMultipleChoice"),CZr.forEach(t),t0o=r(Zwe," (Longformer model)"),Zwe.forEach(t),a0o=i(O),cb=n(O,"LI",{});var e6e=s(cb);Ene=n(e6e,"STRONG",{});var MZr=s(Ene);n0o=r(MZr,"megatron-bert"),MZr.forEach(t),s0o=r(e6e," \u2014 "),UD=n(e6e,"A",{href:!0});var EZr=s(UD);l0o=r(EZr,"MegatronBertForMultipleChoice"),EZr.forEach(t),i0o=r(e6e," (MegatronBert model)"),e6e.forEach(t),d0o=i(O),fb=n(O,"LI",{});var o6e=s(fb);yne=n(o6e,"STRONG",{});var yZr=s(yne);c0o=r(yZr,"mobilebert"),yZr.forEach(t),f0o=r(o6e," \u2014 "),JD=n(o6e,"A",{href:!0});var wZr=s(JD);m0o=r(wZr,"MobileBertForMultipleChoice"),wZr.forEach(t),g0o=r(o6e," (MobileBERT model)"),o6e.forEach(t),h0o=i(O),mb=n(O,"LI",{});var r6e=s(mb);wne=n(r6e,"STRONG",{});var AZr=s(wne);p0o=r(AZr,"mpnet"),AZr.forEach(t),_0o=r(r6e," \u2014 "),YD=n(r6e,"A",{href:!0});var LZr=s(YD);u0o=r(LZr,"MPNetForMultipleChoice"),LZr.forEach(t),b0o=r(r6e," (MPNet model)"),r6e.forEach(t),v0o=i(O),gb=n(O,"LI",{});var t6e=s(gb);Ane=n(t6e,"STRONG",{});var BZr=s(Ane);T0o=r(BZr,"nystromformer"),BZr.forEach(t),F0o=r(t6e," \u2014 "),KD=n(t6e,"A",{href:!0});var xZr=s(KD);C0o=r(xZr,"NystromformerForMultipleChoice"),xZr.forEach(t),M0o=r(t6e," (Nystromformer model)"),t6e.forEach(t),E0o=i(O),hb=n(O,"LI",{});var a6e=s(hb);Lne=n(a6e,"STRONG",{});var kZr=s(Lne);y0o=r(kZr,"qdqbert"),kZr.forEach(t),w0o=r(a6e," \u2014 "),ZD=n(a6e,"A",{href:!0});var RZr=s(ZD);A0o=r(RZr,"QDQBertForMultipleChoice"),RZr.forEach(t),L0o=r(a6e," (QDQBert model)"),a6e.forEach(t),B0o=i(O),pb=n(O,"LI",{});var n6e=s(pb);Bne=n(n6e,"STRONG",{});var SZr=s(Bne);x0o=r(SZr,"rembert"),SZr.forEach(t),k0o=r(n6e," \u2014 "),eN=n(n6e,"A",{href:!0});var PZr=s(eN);R0o=r(PZr,"RemBertForMultipleChoice"),PZr.forEach(t),S0o=r(n6e," (RemBERT model)"),n6e.forEach(t),P0o=i(O),_b=n(O,"LI",{});var s6e=s(_b);xne=n(s6e,"STRONG",{});var $Zr=s(xne);$0o=r($Zr,"roberta"),$Zr.forEach(t),I0o=r(s6e," \u2014 "),oN=n(s6e,"A",{href:!0});var IZr=s(oN);D0o=r(IZr,"RobertaForMultipleChoice"),IZr.forEach(t),N0o=r(s6e," (RoBERTa model)"),s6e.forEach(t),j0o=i(O),ub=n(O,"LI",{});var l6e=s(ub);kne=n(l6e,"STRONG",{});var DZr=s(kne);q0o=r(DZr,"roformer"),DZr.forEach(t),G0o=r(l6e," \u2014 "),rN=n(l6e,"A",{href:!0});var NZr=s(rN);O0o=r(NZr,"RoFormerForMultipleChoice"),NZr.forEach(t),X0o=r(l6e," (RoFormer model)"),l6e.forEach(t),V0o=i(O),bb=n(O,"LI",{});var i6e=s(bb);Rne=n(i6e,"STRONG",{});var jZr=s(Rne);z0o=r(jZr,"squeezebert"),jZr.forEach(t),W0o=r(i6e," \u2014 "),tN=n(i6e,"A",{href:!0});var qZr=s(tN);Q0o=r(qZr,"SqueezeBertForMultipleChoice"),qZr.forEach(t),H0o=r(i6e," (SqueezeBERT model)"),i6e.forEach(t),U0o=i(O),vb=n(O,"LI",{});var d6e=s(vb);Sne=n(d6e,"STRONG",{});var GZr=s(Sne);J0o=r(GZr,"xlm"),GZr.forEach(t),Y0o=r(d6e," \u2014 "),aN=n(d6e,"A",{href:!0});var OZr=s(aN);K0o=r(OZr,"XLMForMultipleChoice"),OZr.forEach(t),Z0o=r(d6e," (XLM model)"),d6e.forEach(t),eLo=i(O),Tb=n(O,"LI",{});var c6e=s(Tb);Pne=n(c6e,"STRONG",{});var XZr=s(Pne);oLo=r(XZr,"xlm-roberta"),XZr.forEach(t),rLo=r(c6e," \u2014 "),nN=n(c6e,"A",{href:!0});var VZr=s(nN);tLo=r(VZr,"XLMRobertaForMultipleChoice"),VZr.forEach(t),aLo=r(c6e," (XLM-RoBERTa model)"),c6e.forEach(t),nLo=i(O),Fb=n(O,"LI",{});var f6e=s(Fb);$ne=n(f6e,"STRONG",{});var zZr=s($ne);sLo=r(zZr,"xlm-roberta-xl"),zZr.forEach(t),lLo=r(f6e," \u2014 "),sN=n(f6e,"A",{href:!0});var WZr=s(sN);iLo=r(WZr,"XLMRobertaXLForMultipleChoice"),WZr.forEach(t),dLo=r(f6e," (XLM-RoBERTa-XL model)"),f6e.forEach(t),cLo=i(O),Cb=n(O,"LI",{});var m6e=s(Cb);Ine=n(m6e,"STRONG",{});var QZr=s(Ine);fLo=r(QZr,"xlnet"),QZr.forEach(t),mLo=r(m6e," \u2014 "),lN=n(m6e,"A",{href:!0});var HZr=s(lN);gLo=r(HZr,"XLNetForMultipleChoice"),HZr.forEach(t),hLo=r(m6e," (XLNet model)"),m6e.forEach(t),pLo=i(O),Mb=n(O,"LI",{});var g6e=s(Mb);Dne=n(g6e,"STRONG",{});var UZr=s(Dne);_Lo=r(UZr,"yoso"),UZr.forEach(t),uLo=r(g6e," \u2014 "),iN=n(g6e,"A",{href:!0});var JZr=s(iN);bLo=r(JZr,"YosoForMultipleChoice"),JZr.forEach(t),vLo=r(g6e," (YOSO model)"),g6e.forEach(t),O.forEach(t),TLo=i(Wt),Eb=n(Wt,"P",{});var h6e=s(Eb);FLo=r(h6e,"The model is set in evaluation mode by default using "),Nne=n(h6e,"CODE",{});var YZr=s(Nne);CLo=r(YZr,"model.eval()"),YZr.forEach(t),MLo=r(h6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jne=n(h6e,"CODE",{});var KZr=s(jne);ELo=r(KZr,"model.train()"),KZr.forEach(t),h6e.forEach(t),yLo=i(Wt),qne=n(Wt,"P",{});var ZZr=s(qne);wLo=r(ZZr,"Examples:"),ZZr.forEach(t),ALo=i(Wt),m(Dy.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),qke=i(c),ud=n(c,"H2",{class:!0});var USe=s(ud);yb=n(USe,"A",{id:!0,class:!0,href:!0});var eet=s(yb);Gne=n(eet,"SPAN",{});var oet=s(Gne);m(Ny.$$.fragment,oet),oet.forEach(t),eet.forEach(t),LLo=i(USe),One=n(USe,"SPAN",{});var ret=s(One);BLo=r(ret,"AutoModelForNextSentencePrediction"),ret.forEach(t),USe.forEach(t),Gke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(jy.$$.fragment,sl),xLo=i(sl),bd=n(sl,"P",{});var pW=s(bd);kLo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xne=n(pW,"CODE",{});var tet=s(Xne);RLo=r(tet,"from_pretrained()"),tet.forEach(t),SLo=r(pW,"class method or the "),Vne=n(pW,"CODE",{});var aet=s(Vne);PLo=r(aet,"from_config()"),aet.forEach(t),$Lo=r(pW,`class
method.`),pW.forEach(t),ILo=i(sl),qy=n(sl,"P",{});var JSe=s(qy);DLo=r(JSe,"This class cannot be instantiated directly using "),zne=n(JSe,"CODE",{});var net=s(zne);NLo=r(net,"__init__()"),net.forEach(t),jLo=r(JSe," (throws an error)."),JSe.forEach(t),qLo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Gy.$$.fragment,ll),GLo=i(ll),Wne=n(ll,"P",{});var set=s(Wne);OLo=r(set,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),set.forEach(t),XLo=i(ll),vd=n(ll,"P",{});var _W=s(vd);VLo=r(_W,`Note:
Loading a model from its configuration file does `),Qne=n(_W,"STRONG",{});var iet=s(Qne);zLo=r(iet,"not"),iet.forEach(t),WLo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hne=n(_W,"CODE",{});var det=s(Hne);QLo=r(det,"from_pretrained()"),det.forEach(t),HLo=r(_W,"to load the model weights."),_W.forEach(t),ULo=i(ll),Une=n(ll,"P",{});var cet=s(Une);JLo=r(cet,"Examples:"),cet.forEach(t),YLo=i(ll),m(Oy.$$.fragment,ll),ll.forEach(t),KLo=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(Xy.$$.fragment,Qt),ZLo=i(Qt),Jne=n(Qt,"P",{});var fet=s(Jne);e7o=r(fet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fet.forEach(t),o7o=i(Qt),Ya=n(Qt,"P",{});var TE=s(Ya);r7o=r(TE,"The model class to instantiate is selected based on the "),Yne=n(TE,"CODE",{});var met=s(Yne);t7o=r(met,"model_type"),met.forEach(t),a7o=r(TE,` property of the config object (either
passed as an argument or loaded from `),Kne=n(TE,"CODE",{});var get=s(Kne);n7o=r(get,"pretrained_model_name_or_path"),get.forEach(t),s7o=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=n(TE,"CODE",{});var het=s(Zne);l7o=r(het,"pretrained_model_name_or_path"),het.forEach(t),i7o=r(TE,":"),TE.forEach(t),d7o=i(Qt),da=n(Qt,"UL",{});var il=s(da);wb=n(il,"LI",{});var p6e=s(wb);ese=n(p6e,"STRONG",{});var pet=s(ese);c7o=r(pet,"bert"),pet.forEach(t),f7o=r(p6e," \u2014 "),dN=n(p6e,"A",{href:!0});var _et=s(dN);m7o=r(_et,"BertForNextSentencePrediction"),_et.forEach(t),g7o=r(p6e," (BERT model)"),p6e.forEach(t),h7o=i(il),Ab=n(il,"LI",{});var _6e=s(Ab);ose=n(_6e,"STRONG",{});var uet=s(ose);p7o=r(uet,"fnet"),uet.forEach(t),_7o=r(_6e," \u2014 "),cN=n(_6e,"A",{href:!0});var bet=s(cN);u7o=r(bet,"FNetForNextSentencePrediction"),bet.forEach(t),b7o=r(_6e," (FNet model)"),_6e.forEach(t),v7o=i(il),Lb=n(il,"LI",{});var u6e=s(Lb);rse=n(u6e,"STRONG",{});var vet=s(rse);T7o=r(vet,"megatron-bert"),vet.forEach(t),F7o=r(u6e," \u2014 "),fN=n(u6e,"A",{href:!0});var Tet=s(fN);C7o=r(Tet,"MegatronBertForNextSentencePrediction"),Tet.forEach(t),M7o=r(u6e," (MegatronBert model)"),u6e.forEach(t),E7o=i(il),Bb=n(il,"LI",{});var b6e=s(Bb);tse=n(b6e,"STRONG",{});var Fet=s(tse);y7o=r(Fet,"mobilebert"),Fet.forEach(t),w7o=r(b6e," \u2014 "),mN=n(b6e,"A",{href:!0});var Cet=s(mN);A7o=r(Cet,"MobileBertForNextSentencePrediction"),Cet.forEach(t),L7o=r(b6e," (MobileBERT model)"),b6e.forEach(t),B7o=i(il),xb=n(il,"LI",{});var v6e=s(xb);ase=n(v6e,"STRONG",{});var Met=s(ase);x7o=r(Met,"qdqbert"),Met.forEach(t),k7o=r(v6e," \u2014 "),gN=n(v6e,"A",{href:!0});var Eet=s(gN);R7o=r(Eet,"QDQBertForNextSentencePrediction"),Eet.forEach(t),S7o=r(v6e," (QDQBert model)"),v6e.forEach(t),il.forEach(t),P7o=i(Qt),kb=n(Qt,"P",{});var T6e=s(kb);$7o=r(T6e,"The model is set in evaluation mode by default using "),nse=n(T6e,"CODE",{});var yet=s(nse);I7o=r(yet,"model.eval()"),yet.forEach(t),D7o=r(T6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sse=n(T6e,"CODE",{});var wet=s(sse);N7o=r(wet,"model.train()"),wet.forEach(t),T6e.forEach(t),j7o=i(Qt),lse=n(Qt,"P",{});var Aet=s(lse);q7o=r(Aet,"Examples:"),Aet.forEach(t),G7o=i(Qt),m(Vy.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Oke=i(c),Td=n(c,"H2",{class:!0});var YSe=s(Td);Rb=n(YSe,"A",{id:!0,class:!0,href:!0});var Let=s(Rb);ise=n(Let,"SPAN",{});var Bet=s(ise);m(zy.$$.fragment,Bet),Bet.forEach(t),Let.forEach(t),O7o=i(YSe),dse=n(YSe,"SPAN",{});var xet=s(dse);X7o=r(xet,"AutoModelForTokenClassification"),xet.forEach(t),YSe.forEach(t),Xke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Wy.$$.fragment,dl),V7o=i(dl),Fd=n(dl,"P",{});var uW=s(Fd);z7o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cse=n(uW,"CODE",{});var ket=s(cse);W7o=r(ket,"from_pretrained()"),ket.forEach(t),Q7o=r(uW,"class method or the "),fse=n(uW,"CODE",{});var Ret=s(fse);H7o=r(Ret,"from_config()"),Ret.forEach(t),U7o=r(uW,`class
method.`),uW.forEach(t),J7o=i(dl),Qy=n(dl,"P",{});var KSe=s(Qy);Y7o=r(KSe,"This class cannot be instantiated directly using "),mse=n(KSe,"CODE",{});var Set=s(mse);K7o=r(Set,"__init__()"),Set.forEach(t),Z7o=r(KSe," (throws an error)."),KSe.forEach(t),e8o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(Hy.$$.fragment,cl),o8o=i(cl),gse=n(cl,"P",{});var Pet=s(gse);r8o=r(Pet,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pet.forEach(t),t8o=i(cl),Cd=n(cl,"P",{});var bW=s(Cd);a8o=r(bW,`Note:
Loading a model from its configuration file does `),hse=n(bW,"STRONG",{});var $et=s(hse);n8o=r($et,"not"),$et.forEach(t),s8o=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=n(bW,"CODE",{});var Iet=s(pse);l8o=r(Iet,"from_pretrained()"),Iet.forEach(t),i8o=r(bW,"to load the model weights."),bW.forEach(t),d8o=i(cl),_se=n(cl,"P",{});var Det=s(_se);c8o=r(Det,"Examples:"),Det.forEach(t),f8o=i(cl),m(Uy.$$.fragment,cl),cl.forEach(t),m8o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(Jy.$$.fragment,Ht),g8o=i(Ht),use=n(Ht,"P",{});var Net=s(use);h8o=r(Net,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Net.forEach(t),p8o=i(Ht),Ka=n(Ht,"P",{});var FE=s(Ka);_8o=r(FE,"The model class to instantiate is selected based on the "),bse=n(FE,"CODE",{});var jet=s(bse);u8o=r(jet,"model_type"),jet.forEach(t),b8o=r(FE,` property of the config object (either
passed as an argument or loaded from `),vse=n(FE,"CODE",{});var qet=s(vse);v8o=r(qet,"pretrained_model_name_or_path"),qet.forEach(t),T8o=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tse=n(FE,"CODE",{});var Get=s(Tse);F8o=r(Get,"pretrained_model_name_or_path"),Get.forEach(t),C8o=r(FE,":"),FE.forEach(t),M8o=i(Ht),j=n(Ht,"UL",{});var q=s(j);Sb=n(q,"LI",{});var F6e=s(Sb);Fse=n(F6e,"STRONG",{});var Oet=s(Fse);E8o=r(Oet,"albert"),Oet.forEach(t),y8o=r(F6e," \u2014 "),hN=n(F6e,"A",{href:!0});var Xet=s(hN);w8o=r(Xet,"AlbertForTokenClassification"),Xet.forEach(t),A8o=r(F6e," (ALBERT model)"),F6e.forEach(t),L8o=i(q),Pb=n(q,"LI",{});var C6e=s(Pb);Cse=n(C6e,"STRONG",{});var Vet=s(Cse);B8o=r(Vet,"bert"),Vet.forEach(t),x8o=r(C6e," \u2014 "),pN=n(C6e,"A",{href:!0});var zet=s(pN);k8o=r(zet,"BertForTokenClassification"),zet.forEach(t),R8o=r(C6e," (BERT model)"),C6e.forEach(t),S8o=i(q),$b=n(q,"LI",{});var M6e=s($b);Mse=n(M6e,"STRONG",{});var Wet=s(Mse);P8o=r(Wet,"big_bird"),Wet.forEach(t),$8o=r(M6e," \u2014 "),_N=n(M6e,"A",{href:!0});var Qet=s(_N);I8o=r(Qet,"BigBirdForTokenClassification"),Qet.forEach(t),D8o=r(M6e," (BigBird model)"),M6e.forEach(t),N8o=i(q),Ib=n(q,"LI",{});var E6e=s(Ib);Ese=n(E6e,"STRONG",{});var Het=s(Ese);j8o=r(Het,"camembert"),Het.forEach(t),q8o=r(E6e," \u2014 "),uN=n(E6e,"A",{href:!0});var Uet=s(uN);G8o=r(Uet,"CamembertForTokenClassification"),Uet.forEach(t),O8o=r(E6e," (CamemBERT model)"),E6e.forEach(t),X8o=i(q),Db=n(q,"LI",{});var y6e=s(Db);yse=n(y6e,"STRONG",{});var Jet=s(yse);V8o=r(Jet,"canine"),Jet.forEach(t),z8o=r(y6e," \u2014 "),bN=n(y6e,"A",{href:!0});var Yet=s(bN);W8o=r(Yet,"CanineForTokenClassification"),Yet.forEach(t),Q8o=r(y6e," (Canine model)"),y6e.forEach(t),H8o=i(q),Nb=n(q,"LI",{});var w6e=s(Nb);wse=n(w6e,"STRONG",{});var Ket=s(wse);U8o=r(Ket,"convbert"),Ket.forEach(t),J8o=r(w6e," \u2014 "),vN=n(w6e,"A",{href:!0});var Zet=s(vN);Y8o=r(Zet,"ConvBertForTokenClassification"),Zet.forEach(t),K8o=r(w6e," (ConvBERT model)"),w6e.forEach(t),Z8o=i(q),jb=n(q,"LI",{});var A6e=s(jb);Ase=n(A6e,"STRONG",{});var eot=s(Ase);eBo=r(eot,"data2vec-text"),eot.forEach(t),oBo=r(A6e," \u2014 "),TN=n(A6e,"A",{href:!0});var oot=s(TN);rBo=r(oot,"Data2VecTextForTokenClassification"),oot.forEach(t),tBo=r(A6e," (Data2VecText model)"),A6e.forEach(t),aBo=i(q),qb=n(q,"LI",{});var L6e=s(qb);Lse=n(L6e,"STRONG",{});var rot=s(Lse);nBo=r(rot,"deberta"),rot.forEach(t),sBo=r(L6e," \u2014 "),FN=n(L6e,"A",{href:!0});var tot=s(FN);lBo=r(tot,"DebertaForTokenClassification"),tot.forEach(t),iBo=r(L6e," (DeBERTa model)"),L6e.forEach(t),dBo=i(q),Gb=n(q,"LI",{});var B6e=s(Gb);Bse=n(B6e,"STRONG",{});var aot=s(Bse);cBo=r(aot,"deberta-v2"),aot.forEach(t),fBo=r(B6e," \u2014 "),CN=n(B6e,"A",{href:!0});var not=s(CN);mBo=r(not,"DebertaV2ForTokenClassification"),not.forEach(t),gBo=r(B6e," (DeBERTa-v2 model)"),B6e.forEach(t),hBo=i(q),Ob=n(q,"LI",{});var x6e=s(Ob);xse=n(x6e,"STRONG",{});var sot=s(xse);pBo=r(sot,"distilbert"),sot.forEach(t),_Bo=r(x6e," \u2014 "),MN=n(x6e,"A",{href:!0});var lot=s(MN);uBo=r(lot,"DistilBertForTokenClassification"),lot.forEach(t),bBo=r(x6e," (DistilBERT model)"),x6e.forEach(t),vBo=i(q),Xb=n(q,"LI",{});var k6e=s(Xb);kse=n(k6e,"STRONG",{});var iot=s(kse);TBo=r(iot,"electra"),iot.forEach(t),FBo=r(k6e," \u2014 "),EN=n(k6e,"A",{href:!0});var dot=s(EN);CBo=r(dot,"ElectraForTokenClassification"),dot.forEach(t),MBo=r(k6e," (ELECTRA model)"),k6e.forEach(t),EBo=i(q),Vb=n(q,"LI",{});var R6e=s(Vb);Rse=n(R6e,"STRONG",{});var cot=s(Rse);yBo=r(cot,"flaubert"),cot.forEach(t),wBo=r(R6e," \u2014 "),yN=n(R6e,"A",{href:!0});var fot=s(yN);ABo=r(fot,"FlaubertForTokenClassification"),fot.forEach(t),LBo=r(R6e," (FlauBERT model)"),R6e.forEach(t),BBo=i(q),zb=n(q,"LI",{});var S6e=s(zb);Sse=n(S6e,"STRONG",{});var mot=s(Sse);xBo=r(mot,"fnet"),mot.forEach(t),kBo=r(S6e," \u2014 "),wN=n(S6e,"A",{href:!0});var got=s(wN);RBo=r(got,"FNetForTokenClassification"),got.forEach(t),SBo=r(S6e," (FNet model)"),S6e.forEach(t),PBo=i(q),Wb=n(q,"LI",{});var P6e=s(Wb);Pse=n(P6e,"STRONG",{});var hot=s(Pse);$Bo=r(hot,"funnel"),hot.forEach(t),IBo=r(P6e," \u2014 "),AN=n(P6e,"A",{href:!0});var pot=s(AN);DBo=r(pot,"FunnelForTokenClassification"),pot.forEach(t),NBo=r(P6e," (Funnel Transformer model)"),P6e.forEach(t),jBo=i(q),Qb=n(q,"LI",{});var $6e=s(Qb);$se=n($6e,"STRONG",{});var _ot=s($se);qBo=r(_ot,"gpt2"),_ot.forEach(t),GBo=r($6e," \u2014 "),LN=n($6e,"A",{href:!0});var uot=s(LN);OBo=r(uot,"GPT2ForTokenClassification"),uot.forEach(t),XBo=r($6e," (OpenAI GPT-2 model)"),$6e.forEach(t),VBo=i(q),Hb=n(q,"LI",{});var I6e=s(Hb);Ise=n(I6e,"STRONG",{});var bot=s(Ise);zBo=r(bot,"ibert"),bot.forEach(t),WBo=r(I6e," \u2014 "),BN=n(I6e,"A",{href:!0});var vot=s(BN);QBo=r(vot,"IBertForTokenClassification"),vot.forEach(t),HBo=r(I6e," (I-BERT model)"),I6e.forEach(t),UBo=i(q),Ub=n(q,"LI",{});var D6e=s(Ub);Dse=n(D6e,"STRONG",{});var Tot=s(Dse);JBo=r(Tot,"layoutlm"),Tot.forEach(t),YBo=r(D6e," \u2014 "),xN=n(D6e,"A",{href:!0});var Fot=s(xN);KBo=r(Fot,"LayoutLMForTokenClassification"),Fot.forEach(t),ZBo=r(D6e," (LayoutLM model)"),D6e.forEach(t),exo=i(q),Jb=n(q,"LI",{});var N6e=s(Jb);Nse=n(N6e,"STRONG",{});var Cot=s(Nse);oxo=r(Cot,"layoutlmv2"),Cot.forEach(t),rxo=r(N6e," \u2014 "),kN=n(N6e,"A",{href:!0});var Mot=s(kN);txo=r(Mot,"LayoutLMv2ForTokenClassification"),Mot.forEach(t),axo=r(N6e," (LayoutLMv2 model)"),N6e.forEach(t),nxo=i(q),Yb=n(q,"LI",{});var j6e=s(Yb);jse=n(j6e,"STRONG",{});var Eot=s(jse);sxo=r(Eot,"longformer"),Eot.forEach(t),lxo=r(j6e," \u2014 "),RN=n(j6e,"A",{href:!0});var yot=s(RN);ixo=r(yot,"LongformerForTokenClassification"),yot.forEach(t),dxo=r(j6e," (Longformer model)"),j6e.forEach(t),cxo=i(q),Kb=n(q,"LI",{});var q6e=s(Kb);qse=n(q6e,"STRONG",{});var wot=s(qse);fxo=r(wot,"megatron-bert"),wot.forEach(t),mxo=r(q6e," \u2014 "),SN=n(q6e,"A",{href:!0});var Aot=s(SN);gxo=r(Aot,"MegatronBertForTokenClassification"),Aot.forEach(t),hxo=r(q6e," (MegatronBert model)"),q6e.forEach(t),pxo=i(q),Zb=n(q,"LI",{});var G6e=s(Zb);Gse=n(G6e,"STRONG",{});var Lot=s(Gse);_xo=r(Lot,"mobilebert"),Lot.forEach(t),uxo=r(G6e," \u2014 "),PN=n(G6e,"A",{href:!0});var Bot=s(PN);bxo=r(Bot,"MobileBertForTokenClassification"),Bot.forEach(t),vxo=r(G6e," (MobileBERT model)"),G6e.forEach(t),Txo=i(q),e5=n(q,"LI",{});var O6e=s(e5);Ose=n(O6e,"STRONG",{});var xot=s(Ose);Fxo=r(xot,"mpnet"),xot.forEach(t),Cxo=r(O6e," \u2014 "),$N=n(O6e,"A",{href:!0});var kot=s($N);Mxo=r(kot,"MPNetForTokenClassification"),kot.forEach(t),Exo=r(O6e," (MPNet model)"),O6e.forEach(t),yxo=i(q),o5=n(q,"LI",{});var X6e=s(o5);Xse=n(X6e,"STRONG",{});var Rot=s(Xse);wxo=r(Rot,"nystromformer"),Rot.forEach(t),Axo=r(X6e," \u2014 "),IN=n(X6e,"A",{href:!0});var Sot=s(IN);Lxo=r(Sot,"NystromformerForTokenClassification"),Sot.forEach(t),Bxo=r(X6e," (Nystromformer model)"),X6e.forEach(t),xxo=i(q),r5=n(q,"LI",{});var V6e=s(r5);Vse=n(V6e,"STRONG",{});var Pot=s(Vse);kxo=r(Pot,"qdqbert"),Pot.forEach(t),Rxo=r(V6e," \u2014 "),DN=n(V6e,"A",{href:!0});var $ot=s(DN);Sxo=r($ot,"QDQBertForTokenClassification"),$ot.forEach(t),Pxo=r(V6e," (QDQBert model)"),V6e.forEach(t),$xo=i(q),t5=n(q,"LI",{});var z6e=s(t5);zse=n(z6e,"STRONG",{});var Iot=s(zse);Ixo=r(Iot,"rembert"),Iot.forEach(t),Dxo=r(z6e," \u2014 "),NN=n(z6e,"A",{href:!0});var Dot=s(NN);Nxo=r(Dot,"RemBertForTokenClassification"),Dot.forEach(t),jxo=r(z6e," (RemBERT model)"),z6e.forEach(t),qxo=i(q),a5=n(q,"LI",{});var W6e=s(a5);Wse=n(W6e,"STRONG",{});var Not=s(Wse);Gxo=r(Not,"roberta"),Not.forEach(t),Oxo=r(W6e," \u2014 "),jN=n(W6e,"A",{href:!0});var jot=s(jN);Xxo=r(jot,"RobertaForTokenClassification"),jot.forEach(t),Vxo=r(W6e," (RoBERTa model)"),W6e.forEach(t),zxo=i(q),n5=n(q,"LI",{});var Q6e=s(n5);Qse=n(Q6e,"STRONG",{});var qot=s(Qse);Wxo=r(qot,"roformer"),qot.forEach(t),Qxo=r(Q6e," \u2014 "),qN=n(Q6e,"A",{href:!0});var Got=s(qN);Hxo=r(Got,"RoFormerForTokenClassification"),Got.forEach(t),Uxo=r(Q6e," (RoFormer model)"),Q6e.forEach(t),Jxo=i(q),s5=n(q,"LI",{});var H6e=s(s5);Hse=n(H6e,"STRONG",{});var Oot=s(Hse);Yxo=r(Oot,"squeezebert"),Oot.forEach(t),Kxo=r(H6e," \u2014 "),GN=n(H6e,"A",{href:!0});var Xot=s(GN);Zxo=r(Xot,"SqueezeBertForTokenClassification"),Xot.forEach(t),eko=r(H6e," (SqueezeBERT model)"),H6e.forEach(t),oko=i(q),l5=n(q,"LI",{});var U6e=s(l5);Use=n(U6e,"STRONG",{});var Vot=s(Use);rko=r(Vot,"xlm"),Vot.forEach(t),tko=r(U6e," \u2014 "),ON=n(U6e,"A",{href:!0});var zot=s(ON);ako=r(zot,"XLMForTokenClassification"),zot.forEach(t),nko=r(U6e," (XLM model)"),U6e.forEach(t),sko=i(q),i5=n(q,"LI",{});var J6e=s(i5);Jse=n(J6e,"STRONG",{});var Wot=s(Jse);lko=r(Wot,"xlm-roberta"),Wot.forEach(t),iko=r(J6e," \u2014 "),XN=n(J6e,"A",{href:!0});var Qot=s(XN);dko=r(Qot,"XLMRobertaForTokenClassification"),Qot.forEach(t),cko=r(J6e," (XLM-RoBERTa model)"),J6e.forEach(t),fko=i(q),d5=n(q,"LI",{});var Y6e=s(d5);Yse=n(Y6e,"STRONG",{});var Hot=s(Yse);mko=r(Hot,"xlm-roberta-xl"),Hot.forEach(t),gko=r(Y6e," \u2014 "),VN=n(Y6e,"A",{href:!0});var Uot=s(VN);hko=r(Uot,"XLMRobertaXLForTokenClassification"),Uot.forEach(t),pko=r(Y6e," (XLM-RoBERTa-XL model)"),Y6e.forEach(t),_ko=i(q),c5=n(q,"LI",{});var K6e=s(c5);Kse=n(K6e,"STRONG",{});var Jot=s(Kse);uko=r(Jot,"xlnet"),Jot.forEach(t),bko=r(K6e," \u2014 "),zN=n(K6e,"A",{href:!0});var Yot=s(zN);vko=r(Yot,"XLNetForTokenClassification"),Yot.forEach(t),Tko=r(K6e," (XLNet model)"),K6e.forEach(t),Fko=i(q),f5=n(q,"LI",{});var Z6e=s(f5);Zse=n(Z6e,"STRONG",{});var Kot=s(Zse);Cko=r(Kot,"yoso"),Kot.forEach(t),Mko=r(Z6e," \u2014 "),WN=n(Z6e,"A",{href:!0});var Zot=s(WN);Eko=r(Zot,"YosoForTokenClassification"),Zot.forEach(t),yko=r(Z6e," (YOSO model)"),Z6e.forEach(t),q.forEach(t),wko=i(Ht),m5=n(Ht,"P",{});var eAe=s(m5);Ako=r(eAe,"The model is set in evaluation mode by default using "),ele=n(eAe,"CODE",{});var ert=s(ele);Lko=r(ert,"model.eval()"),ert.forEach(t),Bko=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ole=n(eAe,"CODE",{});var ort=s(ole);xko=r(ort,"model.train()"),ort.forEach(t),eAe.forEach(t),kko=i(Ht),rle=n(Ht,"P",{});var rrt=s(rle);Rko=r(rrt,"Examples:"),rrt.forEach(t),Sko=i(Ht),m(Yy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Vke=i(c),Md=n(c,"H2",{class:!0});var ZSe=s(Md);g5=n(ZSe,"A",{id:!0,class:!0,href:!0});var trt=s(g5);tle=n(trt,"SPAN",{});var art=s(tle);m(Ky.$$.fragment,art),art.forEach(t),trt.forEach(t),Pko=i(ZSe),ale=n(ZSe,"SPAN",{});var nrt=s(ale);$ko=r(nrt,"AutoModelForQuestionAnswering"),nrt.forEach(t),ZSe.forEach(t),zke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Zy.$$.fragment,fl),Iko=i(fl),Ed=n(fl,"P",{});var vW=s(Ed);Dko=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nle=n(vW,"CODE",{});var srt=s(nle);Nko=r(srt,"from_pretrained()"),srt.forEach(t),jko=r(vW,"class method or the "),sle=n(vW,"CODE",{});var lrt=s(sle);qko=r(lrt,"from_config()"),lrt.forEach(t),Gko=r(vW,`class
method.`),vW.forEach(t),Oko=i(fl),ew=n(fl,"P",{});var ePe=s(ew);Xko=r(ePe,"This class cannot be instantiated directly using "),lle=n(ePe,"CODE",{});var irt=s(lle);Vko=r(irt,"__init__()"),irt.forEach(t),zko=r(ePe," (throws an error)."),ePe.forEach(t),Wko=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(ow.$$.fragment,ml),Qko=i(ml),ile=n(ml,"P",{});var drt=s(ile);Hko=r(drt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),drt.forEach(t),Uko=i(ml),yd=n(ml,"P",{});var TW=s(yd);Jko=r(TW,`Note:
Loading a model from its configuration file does `),dle=n(TW,"STRONG",{});var crt=s(dle);Yko=r(crt,"not"),crt.forEach(t),Kko=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cle=n(TW,"CODE",{});var frt=s(cle);Zko=r(frt,"from_pretrained()"),frt.forEach(t),eRo=r(TW,"to load the model weights."),TW.forEach(t),oRo=i(ml),fle=n(ml,"P",{});var mrt=s(fle);rRo=r(mrt,"Examples:"),mrt.forEach(t),tRo=i(ml),m(rw.$$.fragment,ml),ml.forEach(t),aRo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(tw.$$.fragment,Ut),nRo=i(Ut),mle=n(Ut,"P",{});var grt=s(mle);sRo=r(grt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),grt.forEach(t),lRo=i(Ut),Za=n(Ut,"P",{});var CE=s(Za);iRo=r(CE,"The model class to instantiate is selected based on the "),gle=n(CE,"CODE",{});var hrt=s(gle);dRo=r(hrt,"model_type"),hrt.forEach(t),cRo=r(CE,` property of the config object (either
passed as an argument or loaded from `),hle=n(CE,"CODE",{});var prt=s(hle);fRo=r(prt,"pretrained_model_name_or_path"),prt.forEach(t),mRo=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ple=n(CE,"CODE",{});var _rt=s(ple);gRo=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),hRo=r(CE,":"),CE.forEach(t),pRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);h5=n(P,"LI",{});var oAe=s(h5);_le=n(oAe,"STRONG",{});var urt=s(_le);_Ro=r(urt,"albert"),urt.forEach(t),uRo=r(oAe," \u2014 "),QN=n(oAe,"A",{href:!0});var brt=s(QN);bRo=r(brt,"AlbertForQuestionAnswering"),brt.forEach(t),vRo=r(oAe," (ALBERT model)"),oAe.forEach(t),TRo=i(P),p5=n(P,"LI",{});var rAe=s(p5);ule=n(rAe,"STRONG",{});var vrt=s(ule);FRo=r(vrt,"bart"),vrt.forEach(t),CRo=r(rAe," \u2014 "),HN=n(rAe,"A",{href:!0});var Trt=s(HN);MRo=r(Trt,"BartForQuestionAnswering"),Trt.forEach(t),ERo=r(rAe," (BART model)"),rAe.forEach(t),yRo=i(P),_5=n(P,"LI",{});var tAe=s(_5);ble=n(tAe,"STRONG",{});var Frt=s(ble);wRo=r(Frt,"bert"),Frt.forEach(t),ARo=r(tAe," \u2014 "),UN=n(tAe,"A",{href:!0});var Crt=s(UN);LRo=r(Crt,"BertForQuestionAnswering"),Crt.forEach(t),BRo=r(tAe," (BERT model)"),tAe.forEach(t),xRo=i(P),u5=n(P,"LI",{});var aAe=s(u5);vle=n(aAe,"STRONG",{});var Mrt=s(vle);kRo=r(Mrt,"big_bird"),Mrt.forEach(t),RRo=r(aAe," \u2014 "),JN=n(aAe,"A",{href:!0});var Ert=s(JN);SRo=r(Ert,"BigBirdForQuestionAnswering"),Ert.forEach(t),PRo=r(aAe," (BigBird model)"),aAe.forEach(t),$Ro=i(P),b5=n(P,"LI",{});var nAe=s(b5);Tle=n(nAe,"STRONG",{});var yrt=s(Tle);IRo=r(yrt,"bigbird_pegasus"),yrt.forEach(t),DRo=r(nAe," \u2014 "),YN=n(nAe,"A",{href:!0});var wrt=s(YN);NRo=r(wrt,"BigBirdPegasusForQuestionAnswering"),wrt.forEach(t),jRo=r(nAe," (BigBirdPegasus model)"),nAe.forEach(t),qRo=i(P),v5=n(P,"LI",{});var sAe=s(v5);Fle=n(sAe,"STRONG",{});var Art=s(Fle);GRo=r(Art,"camembert"),Art.forEach(t),ORo=r(sAe," \u2014 "),KN=n(sAe,"A",{href:!0});var Lrt=s(KN);XRo=r(Lrt,"CamembertForQuestionAnswering"),Lrt.forEach(t),VRo=r(sAe," (CamemBERT model)"),sAe.forEach(t),zRo=i(P),T5=n(P,"LI",{});var lAe=s(T5);Cle=n(lAe,"STRONG",{});var Brt=s(Cle);WRo=r(Brt,"canine"),Brt.forEach(t),QRo=r(lAe," \u2014 "),ZN=n(lAe,"A",{href:!0});var xrt=s(ZN);HRo=r(xrt,"CanineForQuestionAnswering"),xrt.forEach(t),URo=r(lAe," (Canine model)"),lAe.forEach(t),JRo=i(P),F5=n(P,"LI",{});var iAe=s(F5);Mle=n(iAe,"STRONG",{});var krt=s(Mle);YRo=r(krt,"convbert"),krt.forEach(t),KRo=r(iAe," \u2014 "),ej=n(iAe,"A",{href:!0});var Rrt=s(ej);ZRo=r(Rrt,"ConvBertForQuestionAnswering"),Rrt.forEach(t),eSo=r(iAe," (ConvBERT model)"),iAe.forEach(t),oSo=i(P),C5=n(P,"LI",{});var dAe=s(C5);Ele=n(dAe,"STRONG",{});var Srt=s(Ele);rSo=r(Srt,"data2vec-text"),Srt.forEach(t),tSo=r(dAe," \u2014 "),oj=n(dAe,"A",{href:!0});var Prt=s(oj);aSo=r(Prt,"Data2VecTextForQuestionAnswering"),Prt.forEach(t),nSo=r(dAe," (Data2VecText model)"),dAe.forEach(t),sSo=i(P),M5=n(P,"LI",{});var cAe=s(M5);yle=n(cAe,"STRONG",{});var $rt=s(yle);lSo=r($rt,"deberta"),$rt.forEach(t),iSo=r(cAe," \u2014 "),rj=n(cAe,"A",{href:!0});var Irt=s(rj);dSo=r(Irt,"DebertaForQuestionAnswering"),Irt.forEach(t),cSo=r(cAe," (DeBERTa model)"),cAe.forEach(t),fSo=i(P),E5=n(P,"LI",{});var fAe=s(E5);wle=n(fAe,"STRONG",{});var Drt=s(wle);mSo=r(Drt,"deberta-v2"),Drt.forEach(t),gSo=r(fAe," \u2014 "),tj=n(fAe,"A",{href:!0});var Nrt=s(tj);hSo=r(Nrt,"DebertaV2ForQuestionAnswering"),Nrt.forEach(t),pSo=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),_So=i(P),y5=n(P,"LI",{});var mAe=s(y5);Ale=n(mAe,"STRONG",{});var jrt=s(Ale);uSo=r(jrt,"distilbert"),jrt.forEach(t),bSo=r(mAe," \u2014 "),aj=n(mAe,"A",{href:!0});var qrt=s(aj);vSo=r(qrt,"DistilBertForQuestionAnswering"),qrt.forEach(t),TSo=r(mAe," (DistilBERT model)"),mAe.forEach(t),FSo=i(P),w5=n(P,"LI",{});var gAe=s(w5);Lle=n(gAe,"STRONG",{});var Grt=s(Lle);CSo=r(Grt,"electra"),Grt.forEach(t),MSo=r(gAe," \u2014 "),nj=n(gAe,"A",{href:!0});var Ort=s(nj);ESo=r(Ort,"ElectraForQuestionAnswering"),Ort.forEach(t),ySo=r(gAe," (ELECTRA model)"),gAe.forEach(t),wSo=i(P),A5=n(P,"LI",{});var hAe=s(A5);Ble=n(hAe,"STRONG",{});var Xrt=s(Ble);ASo=r(Xrt,"flaubert"),Xrt.forEach(t),LSo=r(hAe," \u2014 "),sj=n(hAe,"A",{href:!0});var Vrt=s(sj);BSo=r(Vrt,"FlaubertForQuestionAnsweringSimple"),Vrt.forEach(t),xSo=r(hAe," (FlauBERT model)"),hAe.forEach(t),kSo=i(P),L5=n(P,"LI",{});var pAe=s(L5);xle=n(pAe,"STRONG",{});var zrt=s(xle);RSo=r(zrt,"fnet"),zrt.forEach(t),SSo=r(pAe," \u2014 "),lj=n(pAe,"A",{href:!0});var Wrt=s(lj);PSo=r(Wrt,"FNetForQuestionAnswering"),Wrt.forEach(t),$So=r(pAe," (FNet model)"),pAe.forEach(t),ISo=i(P),B5=n(P,"LI",{});var _Ae=s(B5);kle=n(_Ae,"STRONG",{});var Qrt=s(kle);DSo=r(Qrt,"funnel"),Qrt.forEach(t),NSo=r(_Ae," \u2014 "),ij=n(_Ae,"A",{href:!0});var Hrt=s(ij);jSo=r(Hrt,"FunnelForQuestionAnswering"),Hrt.forEach(t),qSo=r(_Ae," (Funnel Transformer model)"),_Ae.forEach(t),GSo=i(P),x5=n(P,"LI",{});var uAe=s(x5);Rle=n(uAe,"STRONG",{});var Urt=s(Rle);OSo=r(Urt,"gptj"),Urt.forEach(t),XSo=r(uAe," \u2014 "),dj=n(uAe,"A",{href:!0});var Jrt=s(dj);VSo=r(Jrt,"GPTJForQuestionAnswering"),Jrt.forEach(t),zSo=r(uAe," (GPT-J model)"),uAe.forEach(t),WSo=i(P),k5=n(P,"LI",{});var bAe=s(k5);Sle=n(bAe,"STRONG",{});var Yrt=s(Sle);QSo=r(Yrt,"ibert"),Yrt.forEach(t),HSo=r(bAe," \u2014 "),cj=n(bAe,"A",{href:!0});var Krt=s(cj);USo=r(Krt,"IBertForQuestionAnswering"),Krt.forEach(t),JSo=r(bAe," (I-BERT model)"),bAe.forEach(t),YSo=i(P),R5=n(P,"LI",{});var vAe=s(R5);Ple=n(vAe,"STRONG",{});var Zrt=s(Ple);KSo=r(Zrt,"layoutlmv2"),Zrt.forEach(t),ZSo=r(vAe," \u2014 "),fj=n(vAe,"A",{href:!0});var ett=s(fj);ePo=r(ett,"LayoutLMv2ForQuestionAnswering"),ett.forEach(t),oPo=r(vAe," (LayoutLMv2 model)"),vAe.forEach(t),rPo=i(P),S5=n(P,"LI",{});var TAe=s(S5);$le=n(TAe,"STRONG",{});var ott=s($le);tPo=r(ott,"led"),ott.forEach(t),aPo=r(TAe," \u2014 "),mj=n(TAe,"A",{href:!0});var rtt=s(mj);nPo=r(rtt,"LEDForQuestionAnswering"),rtt.forEach(t),sPo=r(TAe," (LED model)"),TAe.forEach(t),lPo=i(P),P5=n(P,"LI",{});var FAe=s(P5);Ile=n(FAe,"STRONG",{});var ttt=s(Ile);iPo=r(ttt,"longformer"),ttt.forEach(t),dPo=r(FAe," \u2014 "),gj=n(FAe,"A",{href:!0});var att=s(gj);cPo=r(att,"LongformerForQuestionAnswering"),att.forEach(t),fPo=r(FAe," (Longformer model)"),FAe.forEach(t),mPo=i(P),$5=n(P,"LI",{});var CAe=s($5);Dle=n(CAe,"STRONG",{});var ntt=s(Dle);gPo=r(ntt,"lxmert"),ntt.forEach(t),hPo=r(CAe," \u2014 "),hj=n(CAe,"A",{href:!0});var stt=s(hj);pPo=r(stt,"LxmertForQuestionAnswering"),stt.forEach(t),_Po=r(CAe," (LXMERT model)"),CAe.forEach(t),uPo=i(P),I5=n(P,"LI",{});var MAe=s(I5);Nle=n(MAe,"STRONG",{});var ltt=s(Nle);bPo=r(ltt,"mbart"),ltt.forEach(t),vPo=r(MAe," \u2014 "),pj=n(MAe,"A",{href:!0});var itt=s(pj);TPo=r(itt,"MBartForQuestionAnswering"),itt.forEach(t),FPo=r(MAe," (mBART model)"),MAe.forEach(t),CPo=i(P),D5=n(P,"LI",{});var EAe=s(D5);jle=n(EAe,"STRONG",{});var dtt=s(jle);MPo=r(dtt,"megatron-bert"),dtt.forEach(t),EPo=r(EAe," \u2014 "),_j=n(EAe,"A",{href:!0});var ctt=s(_j);yPo=r(ctt,"MegatronBertForQuestionAnswering"),ctt.forEach(t),wPo=r(EAe," (MegatronBert model)"),EAe.forEach(t),APo=i(P),N5=n(P,"LI",{});var yAe=s(N5);qle=n(yAe,"STRONG",{});var ftt=s(qle);LPo=r(ftt,"mobilebert"),ftt.forEach(t),BPo=r(yAe," \u2014 "),uj=n(yAe,"A",{href:!0});var mtt=s(uj);xPo=r(mtt,"MobileBertForQuestionAnswering"),mtt.forEach(t),kPo=r(yAe," (MobileBERT model)"),yAe.forEach(t),RPo=i(P),j5=n(P,"LI",{});var wAe=s(j5);Gle=n(wAe,"STRONG",{});var gtt=s(Gle);SPo=r(gtt,"mpnet"),gtt.forEach(t),PPo=r(wAe," \u2014 "),bj=n(wAe,"A",{href:!0});var htt=s(bj);$Po=r(htt,"MPNetForQuestionAnswering"),htt.forEach(t),IPo=r(wAe," (MPNet model)"),wAe.forEach(t),DPo=i(P),q5=n(P,"LI",{});var AAe=s(q5);Ole=n(AAe,"STRONG",{});var ptt=s(Ole);NPo=r(ptt,"nystromformer"),ptt.forEach(t),jPo=r(AAe," \u2014 "),vj=n(AAe,"A",{href:!0});var _tt=s(vj);qPo=r(_tt,"NystromformerForQuestionAnswering"),_tt.forEach(t),GPo=r(AAe," (Nystromformer model)"),AAe.forEach(t),OPo=i(P),G5=n(P,"LI",{});var LAe=s(G5);Xle=n(LAe,"STRONG",{});var utt=s(Xle);XPo=r(utt,"qdqbert"),utt.forEach(t),VPo=r(LAe," \u2014 "),Tj=n(LAe,"A",{href:!0});var btt=s(Tj);zPo=r(btt,"QDQBertForQuestionAnswering"),btt.forEach(t),WPo=r(LAe," (QDQBert model)"),LAe.forEach(t),QPo=i(P),O5=n(P,"LI",{});var BAe=s(O5);Vle=n(BAe,"STRONG",{});var vtt=s(Vle);HPo=r(vtt,"reformer"),vtt.forEach(t),UPo=r(BAe," \u2014 "),Fj=n(BAe,"A",{href:!0});var Ttt=s(Fj);JPo=r(Ttt,"ReformerForQuestionAnswering"),Ttt.forEach(t),YPo=r(BAe," (Reformer model)"),BAe.forEach(t),KPo=i(P),X5=n(P,"LI",{});var xAe=s(X5);zle=n(xAe,"STRONG",{});var Ftt=s(zle);ZPo=r(Ftt,"rembert"),Ftt.forEach(t),e$o=r(xAe," \u2014 "),Cj=n(xAe,"A",{href:!0});var Ctt=s(Cj);o$o=r(Ctt,"RemBertForQuestionAnswering"),Ctt.forEach(t),r$o=r(xAe," (RemBERT model)"),xAe.forEach(t),t$o=i(P),V5=n(P,"LI",{});var kAe=s(V5);Wle=n(kAe,"STRONG",{});var Mtt=s(Wle);a$o=r(Mtt,"roberta"),Mtt.forEach(t),n$o=r(kAe," \u2014 "),Mj=n(kAe,"A",{href:!0});var Ett=s(Mj);s$o=r(Ett,"RobertaForQuestionAnswering"),Ett.forEach(t),l$o=r(kAe," (RoBERTa model)"),kAe.forEach(t),i$o=i(P),z5=n(P,"LI",{});var RAe=s(z5);Qle=n(RAe,"STRONG",{});var ytt=s(Qle);d$o=r(ytt,"roformer"),ytt.forEach(t),c$o=r(RAe," \u2014 "),Ej=n(RAe,"A",{href:!0});var wtt=s(Ej);f$o=r(wtt,"RoFormerForQuestionAnswering"),wtt.forEach(t),m$o=r(RAe," (RoFormer model)"),RAe.forEach(t),g$o=i(P),W5=n(P,"LI",{});var SAe=s(W5);Hle=n(SAe,"STRONG",{});var Att=s(Hle);h$o=r(Att,"splinter"),Att.forEach(t),p$o=r(SAe," \u2014 "),yj=n(SAe,"A",{href:!0});var Ltt=s(yj);_$o=r(Ltt,"SplinterForQuestionAnswering"),Ltt.forEach(t),u$o=r(SAe," (Splinter model)"),SAe.forEach(t),b$o=i(P),Q5=n(P,"LI",{});var PAe=s(Q5);Ule=n(PAe,"STRONG",{});var Btt=s(Ule);v$o=r(Btt,"squeezebert"),Btt.forEach(t),T$o=r(PAe," \u2014 "),wj=n(PAe,"A",{href:!0});var xtt=s(wj);F$o=r(xtt,"SqueezeBertForQuestionAnswering"),xtt.forEach(t),C$o=r(PAe," (SqueezeBERT model)"),PAe.forEach(t),M$o=i(P),H5=n(P,"LI",{});var $Ae=s(H5);Jle=n($Ae,"STRONG",{});var ktt=s(Jle);E$o=r(ktt,"xlm"),ktt.forEach(t),y$o=r($Ae," \u2014 "),Aj=n($Ae,"A",{href:!0});var Rtt=s(Aj);w$o=r(Rtt,"XLMForQuestionAnsweringSimple"),Rtt.forEach(t),A$o=r($Ae," (XLM model)"),$Ae.forEach(t),L$o=i(P),U5=n(P,"LI",{});var IAe=s(U5);Yle=n(IAe,"STRONG",{});var Stt=s(Yle);B$o=r(Stt,"xlm-roberta"),Stt.forEach(t),x$o=r(IAe," \u2014 "),Lj=n(IAe,"A",{href:!0});var Ptt=s(Lj);k$o=r(Ptt,"XLMRobertaForQuestionAnswering"),Ptt.forEach(t),R$o=r(IAe," (XLM-RoBERTa model)"),IAe.forEach(t),S$o=i(P),J5=n(P,"LI",{});var DAe=s(J5);Kle=n(DAe,"STRONG",{});var $tt=s(Kle);P$o=r($tt,"xlm-roberta-xl"),$tt.forEach(t),$$o=r(DAe," \u2014 "),Bj=n(DAe,"A",{href:!0});var Itt=s(Bj);I$o=r(Itt,"XLMRobertaXLForQuestionAnswering"),Itt.forEach(t),D$o=r(DAe," (XLM-RoBERTa-XL model)"),DAe.forEach(t),N$o=i(P),Y5=n(P,"LI",{});var NAe=s(Y5);Zle=n(NAe,"STRONG",{});var Dtt=s(Zle);j$o=r(Dtt,"xlnet"),Dtt.forEach(t),q$o=r(NAe," \u2014 "),xj=n(NAe,"A",{href:!0});var Ntt=s(xj);G$o=r(Ntt,"XLNetForQuestionAnsweringSimple"),Ntt.forEach(t),O$o=r(NAe," (XLNet model)"),NAe.forEach(t),X$o=i(P),K5=n(P,"LI",{});var jAe=s(K5);eie=n(jAe,"STRONG",{});var jtt=s(eie);V$o=r(jtt,"yoso"),jtt.forEach(t),z$o=r(jAe," \u2014 "),kj=n(jAe,"A",{href:!0});var qtt=s(kj);W$o=r(qtt,"YosoForQuestionAnswering"),qtt.forEach(t),Q$o=r(jAe," (YOSO model)"),jAe.forEach(t),P.forEach(t),H$o=i(Ut),Z5=n(Ut,"P",{});var qAe=s(Z5);U$o=r(qAe,"The model is set in evaluation mode by default using "),oie=n(qAe,"CODE",{});var Gtt=s(oie);J$o=r(Gtt,"model.eval()"),Gtt.forEach(t),Y$o=r(qAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(qAe,"CODE",{});var Ott=s(rie);K$o=r(Ott,"model.train()"),Ott.forEach(t),qAe.forEach(t),Z$o=i(Ut),tie=n(Ut,"P",{});var Xtt=s(tie);eIo=r(Xtt,"Examples:"),Xtt.forEach(t),oIo=i(Ut),m(aw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Wke=i(c),wd=n(c,"H2",{class:!0});var oPe=s(wd);e2=n(oPe,"A",{id:!0,class:!0,href:!0});var Vtt=s(e2);aie=n(Vtt,"SPAN",{});var ztt=s(aie);m(nw.$$.fragment,ztt),ztt.forEach(t),Vtt.forEach(t),rIo=i(oPe),nie=n(oPe,"SPAN",{});var Wtt=s(nie);tIo=r(Wtt,"AutoModelForTableQuestionAnswering"),Wtt.forEach(t),oPe.forEach(t),Qke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(sw.$$.fragment,gl),aIo=i(gl),Ad=n(gl,"P",{});var FW=s(Ad);nIo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sie=n(FW,"CODE",{});var Qtt=s(sie);sIo=r(Qtt,"from_pretrained()"),Qtt.forEach(t),lIo=r(FW,"class method or the "),lie=n(FW,"CODE",{});var Htt=s(lie);iIo=r(Htt,"from_config()"),Htt.forEach(t),dIo=r(FW,`class
method.`),FW.forEach(t),cIo=i(gl),lw=n(gl,"P",{});var rPe=s(lw);fIo=r(rPe,"This class cannot be instantiated directly using "),iie=n(rPe,"CODE",{});var Utt=s(iie);mIo=r(Utt,"__init__()"),Utt.forEach(t),gIo=r(rPe," (throws an error)."),rPe.forEach(t),hIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(iw.$$.fragment,hl),pIo=i(hl),die=n(hl,"P",{});var Jtt=s(die);_Io=r(Jtt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jtt.forEach(t),uIo=i(hl),Ld=n(hl,"P",{});var CW=s(Ld);bIo=r(CW,`Note:
Loading a model from its configuration file does `),cie=n(CW,"STRONG",{});var Ytt=s(cie);vIo=r(Ytt,"not"),Ytt.forEach(t),TIo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=n(CW,"CODE",{});var Ktt=s(fie);FIo=r(Ktt,"from_pretrained()"),Ktt.forEach(t),CIo=r(CW,"to load the model weights."),CW.forEach(t),MIo=i(hl),mie=n(hl,"P",{});var Ztt=s(mie);EIo=r(Ztt,"Examples:"),Ztt.forEach(t),yIo=i(hl),m(dw.$$.fragment,hl),hl.forEach(t),wIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(cw.$$.fragment,Jt),AIo=i(Jt),gie=n(Jt,"P",{});var eat=s(gie);LIo=r(eat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eat.forEach(t),BIo=i(Jt),en=n(Jt,"P",{});var ME=s(en);xIo=r(ME,"The model class to instantiate is selected based on the "),hie=n(ME,"CODE",{});var oat=s(hie);kIo=r(oat,"model_type"),oat.forEach(t),RIo=r(ME,` property of the config object (either
passed as an argument or loaded from `),pie=n(ME,"CODE",{});var rat=s(pie);SIo=r(rat,"pretrained_model_name_or_path"),rat.forEach(t),PIo=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=n(ME,"CODE",{});var tat=s(_ie);$Io=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),IIo=r(ME,":"),ME.forEach(t),DIo=i(Jt),uie=n(Jt,"UL",{});var aat=s(uie);o2=n(aat,"LI",{});var GAe=s(o2);bie=n(GAe,"STRONG",{});var nat=s(bie);NIo=r(nat,"tapas"),nat.forEach(t),jIo=r(GAe," \u2014 "),Rj=n(GAe,"A",{href:!0});var sat=s(Rj);qIo=r(sat,"TapasForQuestionAnswering"),sat.forEach(t),GIo=r(GAe," (TAPAS model)"),GAe.forEach(t),aat.forEach(t),OIo=i(Jt),r2=n(Jt,"P",{});var OAe=s(r2);XIo=r(OAe,"The model is set in evaluation mode by default using "),vie=n(OAe,"CODE",{});var lat=s(vie);VIo=r(lat,"model.eval()"),lat.forEach(t),zIo=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=n(OAe,"CODE",{});var iat=s(Tie);WIo=r(iat,"model.train()"),iat.forEach(t),OAe.forEach(t),QIo=i(Jt),Fie=n(Jt,"P",{});var dat=s(Fie);HIo=r(dat,"Examples:"),dat.forEach(t),UIo=i(Jt),m(fw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Hke=i(c),Bd=n(c,"H2",{class:!0});var tPe=s(Bd);t2=n(tPe,"A",{id:!0,class:!0,href:!0});var cat=s(t2);Cie=n(cat,"SPAN",{});var fat=s(Cie);m(mw.$$.fragment,fat),fat.forEach(t),cat.forEach(t),JIo=i(tPe),Mie=n(tPe,"SPAN",{});var mat=s(Mie);YIo=r(mat,"AutoModelForImageClassification"),mat.forEach(t),tPe.forEach(t),Uke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(gw.$$.fragment,pl),KIo=i(pl),xd=n(pl,"P",{});var MW=s(xd);ZIo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Eie=n(MW,"CODE",{});var gat=s(Eie);eDo=r(gat,"from_pretrained()"),gat.forEach(t),oDo=r(MW,"class method or the "),yie=n(MW,"CODE",{});var hat=s(yie);rDo=r(hat,"from_config()"),hat.forEach(t),tDo=r(MW,`class
method.`),MW.forEach(t),aDo=i(pl),hw=n(pl,"P",{});var aPe=s(hw);nDo=r(aPe,"This class cannot be instantiated directly using "),wie=n(aPe,"CODE",{});var pat=s(wie);sDo=r(pat,"__init__()"),pat.forEach(t),lDo=r(aPe," (throws an error)."),aPe.forEach(t),iDo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(pw.$$.fragment,_l),dDo=i(_l),Aie=n(_l,"P",{});var _at=s(Aie);cDo=r(_at,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_at.forEach(t),fDo=i(_l),kd=n(_l,"P",{});var EW=s(kd);mDo=r(EW,`Note:
Loading a model from its configuration file does `),Lie=n(EW,"STRONG",{});var uat=s(Lie);gDo=r(uat,"not"),uat.forEach(t),hDo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=n(EW,"CODE",{});var bat=s(Bie);pDo=r(bat,"from_pretrained()"),bat.forEach(t),_Do=r(EW,"to load the model weights."),EW.forEach(t),uDo=i(_l),xie=n(_l,"P",{});var vat=s(xie);bDo=r(vat,"Examples:"),vat.forEach(t),vDo=i(_l),m(_w.$$.fragment,_l),_l.forEach(t),TDo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(uw.$$.fragment,Yt),FDo=i(Yt),kie=n(Yt,"P",{});var Tat=s(kie);CDo=r(Tat,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tat.forEach(t),MDo=i(Yt),on=n(Yt,"P",{});var EE=s(on);EDo=r(EE,"The model class to instantiate is selected based on the "),Rie=n(EE,"CODE",{});var Fat=s(Rie);yDo=r(Fat,"model_type"),Fat.forEach(t),wDo=r(EE,` property of the config object (either
passed as an argument or loaded from `),Sie=n(EE,"CODE",{});var Cat=s(Sie);ADo=r(Cat,"pretrained_model_name_or_path"),Cat.forEach(t),LDo=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(EE,"CODE",{});var Mat=s(Pie);BDo=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),xDo=r(EE,":"),EE.forEach(t),kDo=i(Yt),me=n(Yt,"UL",{});var Te=s(me);a2=n(Te,"LI",{});var XAe=s(a2);$ie=n(XAe,"STRONG",{});var Eat=s($ie);RDo=r(Eat,"beit"),Eat.forEach(t),SDo=r(XAe," \u2014 "),Sj=n(XAe,"A",{href:!0});var yat=s(Sj);PDo=r(yat,"BeitForImageClassification"),yat.forEach(t),$Do=r(XAe," (BEiT model)"),XAe.forEach(t),IDo=i(Te),n2=n(Te,"LI",{});var VAe=s(n2);Iie=n(VAe,"STRONG",{});var wat=s(Iie);DDo=r(wat,"convnext"),wat.forEach(t),NDo=r(VAe," \u2014 "),Pj=n(VAe,"A",{href:!0});var Aat=s(Pj);jDo=r(Aat,"ConvNextForImageClassification"),Aat.forEach(t),qDo=r(VAe," (ConvNext model)"),VAe.forEach(t),GDo=i(Te),qs=n(Te,"LI",{});var Z7=s(qs);Die=n(Z7,"STRONG",{});var Lat=s(Die);ODo=r(Lat,"deit"),Lat.forEach(t),XDo=r(Z7," \u2014 "),$j=n(Z7,"A",{href:!0});var Bat=s($j);VDo=r(Bat,"DeiTForImageClassification"),Bat.forEach(t),zDo=r(Z7," or "),Ij=n(Z7,"A",{href:!0});var xat=s(Ij);WDo=r(xat,"DeiTForImageClassificationWithTeacher"),xat.forEach(t),QDo=r(Z7," (DeiT model)"),Z7.forEach(t),HDo=i(Te),s2=n(Te,"LI",{});var zAe=s(s2);Nie=n(zAe,"STRONG",{});var kat=s(Nie);UDo=r(kat,"imagegpt"),kat.forEach(t),JDo=r(zAe," \u2014 "),Dj=n(zAe,"A",{href:!0});var Rat=s(Dj);YDo=r(Rat,"ImageGPTForImageClassification"),Rat.forEach(t),KDo=r(zAe," (ImageGPT model)"),zAe.forEach(t),ZDo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);jie=n($f,"STRONG",{});var Sat=s(jie);eNo=r(Sat,"perceiver"),Sat.forEach(t),oNo=r($f," \u2014 "),Nj=n($f,"A",{href:!0});var Pat=s(Nj);rNo=r(Pat,"PerceiverForImageClassificationLearned"),Pat.forEach(t),tNo=r($f," or "),jj=n($f,"A",{href:!0});var $at=s(jj);aNo=r($at,"PerceiverForImageClassificationFourier"),$at.forEach(t),nNo=r($f," or "),qj=n($f,"A",{href:!0});var Iat=s(qj);sNo=r(Iat,"PerceiverForImageClassificationConvProcessing"),Iat.forEach(t),lNo=r($f," (Perceiver model)"),$f.forEach(t),iNo=i(Te),l2=n(Te,"LI",{});var WAe=s(l2);qie=n(WAe,"STRONG",{});var Dat=s(qie);dNo=r(Dat,"poolformer"),Dat.forEach(t),cNo=r(WAe," \u2014 "),Gj=n(WAe,"A",{href:!0});var Nat=s(Gj);fNo=r(Nat,"PoolFormerForImageClassification"),Nat.forEach(t),mNo=r(WAe," (PoolFormer model)"),WAe.forEach(t),gNo=i(Te),i2=n(Te,"LI",{});var QAe=s(i2);Gie=n(QAe,"STRONG",{});var jat=s(Gie);hNo=r(jat,"resnet"),jat.forEach(t),pNo=r(QAe," \u2014 "),Oj=n(QAe,"A",{href:!0});var qat=s(Oj);_No=r(qat,"ResNetForImageClassification"),qat.forEach(t),uNo=r(QAe," (ResNet model)"),QAe.forEach(t),bNo=i(Te),d2=n(Te,"LI",{});var HAe=s(d2);Oie=n(HAe,"STRONG",{});var Gat=s(Oie);vNo=r(Gat,"segformer"),Gat.forEach(t),TNo=r(HAe," \u2014 "),Xj=n(HAe,"A",{href:!0});var Oat=s(Xj);FNo=r(Oat,"SegformerForImageClassification"),Oat.forEach(t),CNo=r(HAe," (SegFormer model)"),HAe.forEach(t),MNo=i(Te),c2=n(Te,"LI",{});var UAe=s(c2);Xie=n(UAe,"STRONG",{});var Xat=s(Xie);ENo=r(Xat,"swin"),Xat.forEach(t),yNo=r(UAe," \u2014 "),Vj=n(UAe,"A",{href:!0});var Vat=s(Vj);wNo=r(Vat,"SwinForImageClassification"),Vat.forEach(t),ANo=r(UAe," (Swin model)"),UAe.forEach(t),LNo=i(Te),f2=n(Te,"LI",{});var JAe=s(f2);Vie=n(JAe,"STRONG",{});var zat=s(Vie);BNo=r(zat,"van"),zat.forEach(t),xNo=r(JAe," \u2014 "),zj=n(JAe,"A",{href:!0});var Wat=s(zj);kNo=r(Wat,"VanForImageClassification"),Wat.forEach(t),RNo=r(JAe," (VAN model)"),JAe.forEach(t),SNo=i(Te),m2=n(Te,"LI",{});var YAe=s(m2);zie=n(YAe,"STRONG",{});var Qat=s(zie);PNo=r(Qat,"vit"),Qat.forEach(t),$No=r(YAe," \u2014 "),Wj=n(YAe,"A",{href:!0});var Hat=s(Wj);INo=r(Hat,"ViTForImageClassification"),Hat.forEach(t),DNo=r(YAe," (ViT model)"),YAe.forEach(t),Te.forEach(t),NNo=i(Yt),g2=n(Yt,"P",{});var KAe=s(g2);jNo=r(KAe,"The model is set in evaluation mode by default using "),Wie=n(KAe,"CODE",{});var Uat=s(Wie);qNo=r(Uat,"model.eval()"),Uat.forEach(t),GNo=r(KAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qie=n(KAe,"CODE",{});var Jat=s(Qie);ONo=r(Jat,"model.train()"),Jat.forEach(t),KAe.forEach(t),XNo=i(Yt),Hie=n(Yt,"P",{});var Yat=s(Hie);VNo=r(Yat,"Examples:"),Yat.forEach(t),zNo=i(Yt),m(bw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Jke=i(c),Rd=n(c,"H2",{class:!0});var nPe=s(Rd);h2=n(nPe,"A",{id:!0,class:!0,href:!0});var Kat=s(h2);Uie=n(Kat,"SPAN",{});var Zat=s(Uie);m(vw.$$.fragment,Zat),Zat.forEach(t),Kat.forEach(t),WNo=i(nPe),Jie=n(nPe,"SPAN",{});var ent=s(Jie);QNo=r(ent,"AutoModelForVision2Seq"),ent.forEach(t),nPe.forEach(t),Yke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(Tw.$$.fragment,ul),HNo=i(ul),Sd=n(ul,"P",{});var yW=s(Sd);UNo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yie=n(yW,"CODE",{});var ont=s(Yie);JNo=r(ont,"from_pretrained()"),ont.forEach(t),YNo=r(yW,"class method or the "),Kie=n(yW,"CODE",{});var rnt=s(Kie);KNo=r(rnt,"from_config()"),rnt.forEach(t),ZNo=r(yW,`class
method.`),yW.forEach(t),ejo=i(ul),Fw=n(ul,"P",{});var sPe=s(Fw);ojo=r(sPe,"This class cannot be instantiated directly using "),Zie=n(sPe,"CODE",{});var tnt=s(Zie);rjo=r(tnt,"__init__()"),tnt.forEach(t),tjo=r(sPe," (throws an error)."),sPe.forEach(t),ajo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Cw.$$.fragment,bl),njo=i(bl),ede=n(bl,"P",{});var ant=s(ede);sjo=r(ant,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ant.forEach(t),ljo=i(bl),Pd=n(bl,"P",{});var wW=s(Pd);ijo=r(wW,`Note:
Loading a model from its configuration file does `),ode=n(wW,"STRONG",{});var nnt=s(ode);djo=r(nnt,"not"),nnt.forEach(t),cjo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rde=n(wW,"CODE",{});var snt=s(rde);fjo=r(snt,"from_pretrained()"),snt.forEach(t),mjo=r(wW,"to load the model weights."),wW.forEach(t),gjo=i(bl),tde=n(bl,"P",{});var lnt=s(tde);hjo=r(lnt,"Examples:"),lnt.forEach(t),pjo=i(bl),m(Mw.$$.fragment,bl),bl.forEach(t),_jo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Ew.$$.fragment,Kt),ujo=i(Kt),ade=n(Kt,"P",{});var int=s(ade);bjo=r(int,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),int.forEach(t),vjo=i(Kt),rn=n(Kt,"P",{});var yE=s(rn);Tjo=r(yE,"The model class to instantiate is selected based on the "),nde=n(yE,"CODE",{});var dnt=s(nde);Fjo=r(dnt,"model_type"),dnt.forEach(t),Cjo=r(yE,` property of the config object (either
passed as an argument or loaded from `),sde=n(yE,"CODE",{});var cnt=s(sde);Mjo=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),Ejo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lde=n(yE,"CODE",{});var fnt=s(lde);yjo=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),wjo=r(yE,":"),yE.forEach(t),Ajo=i(Kt),ide=n(Kt,"UL",{});var mnt=s(ide);p2=n(mnt,"LI",{});var ZAe=s(p2);dde=n(ZAe,"STRONG",{});var gnt=s(dde);Ljo=r(gnt,"vision-encoder-decoder"),gnt.forEach(t),Bjo=r(ZAe," \u2014 "),Qj=n(ZAe,"A",{href:!0});var hnt=s(Qj);xjo=r(hnt,"VisionEncoderDecoderModel"),hnt.forEach(t),kjo=r(ZAe," (Vision Encoder decoder model)"),ZAe.forEach(t),mnt.forEach(t),Rjo=i(Kt),_2=n(Kt,"P",{});var e0e=s(_2);Sjo=r(e0e,"The model is set in evaluation mode by default using "),cde=n(e0e,"CODE",{});var pnt=s(cde);Pjo=r(pnt,"model.eval()"),pnt.forEach(t),$jo=r(e0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(e0e,"CODE",{});var _nt=s(fde);Ijo=r(_nt,"model.train()"),_nt.forEach(t),e0e.forEach(t),Djo=i(Kt),mde=n(Kt,"P",{});var unt=s(mde);Njo=r(unt,"Examples:"),unt.forEach(t),jjo=i(Kt),m(yw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),Kke=i(c),$d=n(c,"H2",{class:!0});var lPe=s($d);u2=n(lPe,"A",{id:!0,class:!0,href:!0});var bnt=s(u2);gde=n(bnt,"SPAN",{});var vnt=s(gde);m(ww.$$.fragment,vnt),vnt.forEach(t),bnt.forEach(t),qjo=i(lPe),hde=n(lPe,"SPAN",{});var Tnt=s(hde);Gjo=r(Tnt,"AutoModelForAudioClassification"),Tnt.forEach(t),lPe.forEach(t),Zke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(Aw.$$.fragment,vl),Ojo=i(vl),Id=n(vl,"P",{});var AW=s(Id);Xjo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pde=n(AW,"CODE",{});var Fnt=s(pde);Vjo=r(Fnt,"from_pretrained()"),Fnt.forEach(t),zjo=r(AW,"class method or the "),_de=n(AW,"CODE",{});var Cnt=s(_de);Wjo=r(Cnt,"from_config()"),Cnt.forEach(t),Qjo=r(AW,`class
method.`),AW.forEach(t),Hjo=i(vl),Lw=n(vl,"P",{});var iPe=s(Lw);Ujo=r(iPe,"This class cannot be instantiated directly using "),ude=n(iPe,"CODE",{});var Mnt=s(ude);Jjo=r(Mnt,"__init__()"),Mnt.forEach(t),Yjo=r(iPe," (throws an error)."),iPe.forEach(t),Kjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(Bw.$$.fragment,Tl),Zjo=i(Tl),bde=n(Tl,"P",{});var Ent=s(bde);eqo=r(Ent,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ent.forEach(t),oqo=i(Tl),Dd=n(Tl,"P",{});var LW=s(Dd);rqo=r(LW,`Note:
Loading a model from its configuration file does `),vde=n(LW,"STRONG",{});var ynt=s(vde);tqo=r(ynt,"not"),ynt.forEach(t),aqo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tde=n(LW,"CODE",{});var wnt=s(Tde);nqo=r(wnt,"from_pretrained()"),wnt.forEach(t),sqo=r(LW,"to load the model weights."),LW.forEach(t),lqo=i(Tl),Fde=n(Tl,"P",{});var Ant=s(Fde);iqo=r(Ant,"Examples:"),Ant.forEach(t),dqo=i(Tl),m(xw.$$.fragment,Tl),Tl.forEach(t),cqo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(kw.$$.fragment,Zt),fqo=i(Zt),Cde=n(Zt,"P",{});var Lnt=s(Cde);mqo=r(Lnt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Lnt.forEach(t),gqo=i(Zt),tn=n(Zt,"P",{});var wE=s(tn);hqo=r(wE,"The model class to instantiate is selected based on the "),Mde=n(wE,"CODE",{});var Bnt=s(Mde);pqo=r(Bnt,"model_type"),Bnt.forEach(t),_qo=r(wE,` property of the config object (either
passed as an argument or loaded from `),Ede=n(wE,"CODE",{});var xnt=s(Ede);uqo=r(xnt,"pretrained_model_name_or_path"),xnt.forEach(t),bqo=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(wE,"CODE",{});var knt=s(yde);vqo=r(knt,"pretrained_model_name_or_path"),knt.forEach(t),Tqo=r(wE,":"),wE.forEach(t),Fqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);b2=n(qo,"LI",{});var o0e=s(b2);wde=n(o0e,"STRONG",{});var Rnt=s(wde);Cqo=r(Rnt,"data2vec-audio"),Rnt.forEach(t),Mqo=r(o0e," \u2014 "),Hj=n(o0e,"A",{href:!0});var Snt=s(Hj);Eqo=r(Snt,"Data2VecAudioForSequenceClassification"),Snt.forEach(t),yqo=r(o0e," (Data2VecAudio model)"),o0e.forEach(t),wqo=i(qo),v2=n(qo,"LI",{});var r0e=s(v2);Ade=n(r0e,"STRONG",{});var Pnt=s(Ade);Aqo=r(Pnt,"hubert"),Pnt.forEach(t),Lqo=r(r0e," \u2014 "),Uj=n(r0e,"A",{href:!0});var $nt=s(Uj);Bqo=r($nt,"HubertForSequenceClassification"),$nt.forEach(t),xqo=r(r0e," (Hubert model)"),r0e.forEach(t),kqo=i(qo),T2=n(qo,"LI",{});var t0e=s(T2);Lde=n(t0e,"STRONG",{});var Int=s(Lde);Rqo=r(Int,"sew"),Int.forEach(t),Sqo=r(t0e," \u2014 "),Jj=n(t0e,"A",{href:!0});var Dnt=s(Jj);Pqo=r(Dnt,"SEWForSequenceClassification"),Dnt.forEach(t),$qo=r(t0e," (SEW model)"),t0e.forEach(t),Iqo=i(qo),F2=n(qo,"LI",{});var a0e=s(F2);Bde=n(a0e,"STRONG",{});var Nnt=s(Bde);Dqo=r(Nnt,"sew-d"),Nnt.forEach(t),Nqo=r(a0e," \u2014 "),Yj=n(a0e,"A",{href:!0});var jnt=s(Yj);jqo=r(jnt,"SEWDForSequenceClassification"),jnt.forEach(t),qqo=r(a0e," (SEW-D model)"),a0e.forEach(t),Gqo=i(qo),C2=n(qo,"LI",{});var n0e=s(C2);xde=n(n0e,"STRONG",{});var qnt=s(xde);Oqo=r(qnt,"unispeech"),qnt.forEach(t),Xqo=r(n0e," \u2014 "),Kj=n(n0e,"A",{href:!0});var Gnt=s(Kj);Vqo=r(Gnt,"UniSpeechForSequenceClassification"),Gnt.forEach(t),zqo=r(n0e," (UniSpeech model)"),n0e.forEach(t),Wqo=i(qo),M2=n(qo,"LI",{});var s0e=s(M2);kde=n(s0e,"STRONG",{});var Ont=s(kde);Qqo=r(Ont,"unispeech-sat"),Ont.forEach(t),Hqo=r(s0e," \u2014 "),Zj=n(s0e,"A",{href:!0});var Xnt=s(Zj);Uqo=r(Xnt,"UniSpeechSatForSequenceClassification"),Xnt.forEach(t),Jqo=r(s0e," (UniSpeechSat model)"),s0e.forEach(t),Yqo=i(qo),E2=n(qo,"LI",{});var l0e=s(E2);Rde=n(l0e,"STRONG",{});var Vnt=s(Rde);Kqo=r(Vnt,"wav2vec2"),Vnt.forEach(t),Zqo=r(l0e," \u2014 "),eq=n(l0e,"A",{href:!0});var znt=s(eq);eGo=r(znt,"Wav2Vec2ForSequenceClassification"),znt.forEach(t),oGo=r(l0e," (Wav2Vec2 model)"),l0e.forEach(t),rGo=i(qo),y2=n(qo,"LI",{});var i0e=s(y2);Sde=n(i0e,"STRONG",{});var Wnt=s(Sde);tGo=r(Wnt,"wavlm"),Wnt.forEach(t),aGo=r(i0e," \u2014 "),oq=n(i0e,"A",{href:!0});var Qnt=s(oq);nGo=r(Qnt,"WavLMForSequenceClassification"),Qnt.forEach(t),sGo=r(i0e," (WavLM model)"),i0e.forEach(t),qo.forEach(t),lGo=i(Zt),w2=n(Zt,"P",{});var d0e=s(w2);iGo=r(d0e,"The model is set in evaluation mode by default using "),Pde=n(d0e,"CODE",{});var Hnt=s(Pde);dGo=r(Hnt,"model.eval()"),Hnt.forEach(t),cGo=r(d0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(d0e,"CODE",{});var Unt=s($de);fGo=r(Unt,"model.train()"),Unt.forEach(t),d0e.forEach(t),mGo=i(Zt),Ide=n(Zt,"P",{});var Jnt=s(Ide);gGo=r(Jnt,"Examples:"),Jnt.forEach(t),hGo=i(Zt),m(Rw.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),eRe=i(c),Nd=n(c,"H2",{class:!0});var dPe=s(Nd);A2=n(dPe,"A",{id:!0,class:!0,href:!0});var Ynt=s(A2);Dde=n(Ynt,"SPAN",{});var Knt=s(Dde);m(Sw.$$.fragment,Knt),Knt.forEach(t),Ynt.forEach(t),pGo=i(dPe),Nde=n(dPe,"SPAN",{});var Znt=s(Nde);_Go=r(Znt,"AutoModelForAudioFrameClassification"),Znt.forEach(t),dPe.forEach(t),oRe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Pw.$$.fragment,Fl),uGo=i(Fl),jd=n(Fl,"P",{});var BW=s(jd);bGo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),jde=n(BW,"CODE",{});var est=s(jde);vGo=r(est,"from_pretrained()"),est.forEach(t),TGo=r(BW,"class method or the "),qde=n(BW,"CODE",{});var ost=s(qde);FGo=r(ost,"from_config()"),ost.forEach(t),CGo=r(BW,`class
method.`),BW.forEach(t),MGo=i(Fl),$w=n(Fl,"P",{});var cPe=s($w);EGo=r(cPe,"This class cannot be instantiated directly using "),Gde=n(cPe,"CODE",{});var rst=s(Gde);yGo=r(rst,"__init__()"),rst.forEach(t),wGo=r(cPe," (throws an error)."),cPe.forEach(t),AGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Iw.$$.fragment,Cl),LGo=i(Cl),Ode=n(Cl,"P",{});var tst=s(Ode);BGo=r(tst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tst.forEach(t),xGo=i(Cl),qd=n(Cl,"P",{});var xW=s(qd);kGo=r(xW,`Note:
Loading a model from its configuration file does `),Xde=n(xW,"STRONG",{});var ast=s(Xde);RGo=r(ast,"not"),ast.forEach(t),SGo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vde=n(xW,"CODE",{});var nst=s(Vde);PGo=r(nst,"from_pretrained()"),nst.forEach(t),$Go=r(xW,"to load the model weights."),xW.forEach(t),IGo=i(Cl),zde=n(Cl,"P",{});var sst=s(zde);DGo=r(sst,"Examples:"),sst.forEach(t),NGo=i(Cl),m(Dw.$$.fragment,Cl),Cl.forEach(t),jGo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(Nw.$$.fragment,ea),qGo=i(ea),Wde=n(ea,"P",{});var lst=s(Wde);GGo=r(lst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),lst.forEach(t),OGo=i(ea),an=n(ea,"P",{});var AE=s(an);XGo=r(AE,"The model class to instantiate is selected based on the "),Qde=n(AE,"CODE",{});var ist=s(Qde);VGo=r(ist,"model_type"),ist.forEach(t),zGo=r(AE,` property of the config object (either
passed as an argument or loaded from `),Hde=n(AE,"CODE",{});var dst=s(Hde);WGo=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),QGo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=n(AE,"CODE",{});var cst=s(Ude);HGo=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),UGo=r(AE,":"),AE.forEach(t),JGo=i(ea),nn=n(ea,"UL",{});var LE=s(nn);L2=n(LE,"LI",{});var c0e=s(L2);Jde=n(c0e,"STRONG",{});var fst=s(Jde);YGo=r(fst,"data2vec-audio"),fst.forEach(t),KGo=r(c0e," \u2014 "),rq=n(c0e,"A",{href:!0});var mst=s(rq);ZGo=r(mst,"Data2VecAudioForAudioFrameClassification"),mst.forEach(t),eOo=r(c0e," (Data2VecAudio model)"),c0e.forEach(t),oOo=i(LE),B2=n(LE,"LI",{});var f0e=s(B2);Yde=n(f0e,"STRONG",{});var gst=s(Yde);rOo=r(gst,"unispeech-sat"),gst.forEach(t),tOo=r(f0e," \u2014 "),tq=n(f0e,"A",{href:!0});var hst=s(tq);aOo=r(hst,"UniSpeechSatForAudioFrameClassification"),hst.forEach(t),nOo=r(f0e," (UniSpeechSat model)"),f0e.forEach(t),sOo=i(LE),x2=n(LE,"LI",{});var m0e=s(x2);Kde=n(m0e,"STRONG",{});var pst=s(Kde);lOo=r(pst,"wav2vec2"),pst.forEach(t),iOo=r(m0e," \u2014 "),aq=n(m0e,"A",{href:!0});var _st=s(aq);dOo=r(_st,"Wav2Vec2ForAudioFrameClassification"),_st.forEach(t),cOo=r(m0e," (Wav2Vec2 model)"),m0e.forEach(t),fOo=i(LE),k2=n(LE,"LI",{});var g0e=s(k2);Zde=n(g0e,"STRONG",{});var ust=s(Zde);mOo=r(ust,"wavlm"),ust.forEach(t),gOo=r(g0e," \u2014 "),nq=n(g0e,"A",{href:!0});var bst=s(nq);hOo=r(bst,"WavLMForAudioFrameClassification"),bst.forEach(t),pOo=r(g0e," (WavLM model)"),g0e.forEach(t),LE.forEach(t),_Oo=i(ea),R2=n(ea,"P",{});var h0e=s(R2);uOo=r(h0e,"The model is set in evaluation mode by default using "),ece=n(h0e,"CODE",{});var vst=s(ece);bOo=r(vst,"model.eval()"),vst.forEach(t),vOo=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(h0e,"CODE",{});var Tst=s(oce);TOo=r(Tst,"model.train()"),Tst.forEach(t),h0e.forEach(t),FOo=i(ea),rce=n(ea,"P",{});var Fst=s(rce);COo=r(Fst,"Examples:"),Fst.forEach(t),MOo=i(ea),m(jw.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),rRe=i(c),Gd=n(c,"H2",{class:!0});var fPe=s(Gd);S2=n(fPe,"A",{id:!0,class:!0,href:!0});var Cst=s(S2);tce=n(Cst,"SPAN",{});var Mst=s(tce);m(qw.$$.fragment,Mst),Mst.forEach(t),Cst.forEach(t),EOo=i(fPe),ace=n(fPe,"SPAN",{});var Est=s(ace);yOo=r(Est,"AutoModelForCTC"),Est.forEach(t),fPe.forEach(t),tRe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Gw.$$.fragment,Ml),wOo=i(Ml),Od=n(Ml,"P",{});var kW=s(Od);AOo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nce=n(kW,"CODE",{});var yst=s(nce);LOo=r(yst,"from_pretrained()"),yst.forEach(t),BOo=r(kW,"class method or the "),sce=n(kW,"CODE",{});var wst=s(sce);xOo=r(wst,"from_config()"),wst.forEach(t),kOo=r(kW,`class
method.`),kW.forEach(t),ROo=i(Ml),Ow=n(Ml,"P",{});var mPe=s(Ow);SOo=r(mPe,"This class cannot be instantiated directly using "),lce=n(mPe,"CODE",{});var Ast=s(lce);POo=r(Ast,"__init__()"),Ast.forEach(t),$Oo=r(mPe," (throws an error)."),mPe.forEach(t),IOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Xw.$$.fragment,El),DOo=i(El),ice=n(El,"P",{});var Lst=s(ice);NOo=r(Lst,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lst.forEach(t),jOo=i(El),Xd=n(El,"P",{});var RW=s(Xd);qOo=r(RW,`Note:
Loading a model from its configuration file does `),dce=n(RW,"STRONG",{});var Bst=s(dce);GOo=r(Bst,"not"),Bst.forEach(t),OOo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cce=n(RW,"CODE",{});var xst=s(cce);XOo=r(xst,"from_pretrained()"),xst.forEach(t),VOo=r(RW,"to load the model weights."),RW.forEach(t),zOo=i(El),fce=n(El,"P",{});var kst=s(fce);WOo=r(kst,"Examples:"),kst.forEach(t),QOo=i(El),m(Vw.$$.fragment,El),El.forEach(t),HOo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(zw.$$.fragment,oa),UOo=i(oa),mce=n(oa,"P",{});var Rst=s(mce);JOo=r(Rst,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rst.forEach(t),YOo=i(oa),sn=n(oa,"P",{});var BE=s(sn);KOo=r(BE,"The model class to instantiate is selected based on the "),gce=n(BE,"CODE",{});var Sst=s(gce);ZOo=r(Sst,"model_type"),Sst.forEach(t),eXo=r(BE,` property of the config object (either
passed as an argument or loaded from `),hce=n(BE,"CODE",{});var Pst=s(hce);oXo=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),rXo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pce=n(BE,"CODE",{});var $st=s(pce);tXo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),aXo=r(BE,":"),BE.forEach(t),nXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);P2=n(Go,"LI",{});var p0e=s(P2);_ce=n(p0e,"STRONG",{});var Ist=s(_ce);sXo=r(Ist,"data2vec-audio"),Ist.forEach(t),lXo=r(p0e," \u2014 "),sq=n(p0e,"A",{href:!0});var Dst=s(sq);iXo=r(Dst,"Data2VecAudioForCTC"),Dst.forEach(t),dXo=r(p0e," (Data2VecAudio model)"),p0e.forEach(t),cXo=i(Go),$2=n(Go,"LI",{});var _0e=s($2);uce=n(_0e,"STRONG",{});var Nst=s(uce);fXo=r(Nst,"hubert"),Nst.forEach(t),mXo=r(_0e," \u2014 "),lq=n(_0e,"A",{href:!0});var jst=s(lq);gXo=r(jst,"HubertForCTC"),jst.forEach(t),hXo=r(_0e," (Hubert model)"),_0e.forEach(t),pXo=i(Go),I2=n(Go,"LI",{});var u0e=s(I2);bce=n(u0e,"STRONG",{});var qst=s(bce);_Xo=r(qst,"sew"),qst.forEach(t),uXo=r(u0e," \u2014 "),iq=n(u0e,"A",{href:!0});var Gst=s(iq);bXo=r(Gst,"SEWForCTC"),Gst.forEach(t),vXo=r(u0e," (SEW model)"),u0e.forEach(t),TXo=i(Go),D2=n(Go,"LI",{});var b0e=s(D2);vce=n(b0e,"STRONG",{});var Ost=s(vce);FXo=r(Ost,"sew-d"),Ost.forEach(t),CXo=r(b0e," \u2014 "),dq=n(b0e,"A",{href:!0});var Xst=s(dq);MXo=r(Xst,"SEWDForCTC"),Xst.forEach(t),EXo=r(b0e," (SEW-D model)"),b0e.forEach(t),yXo=i(Go),N2=n(Go,"LI",{});var v0e=s(N2);Tce=n(v0e,"STRONG",{});var Vst=s(Tce);wXo=r(Vst,"unispeech"),Vst.forEach(t),AXo=r(v0e," \u2014 "),cq=n(v0e,"A",{href:!0});var zst=s(cq);LXo=r(zst,"UniSpeechForCTC"),zst.forEach(t),BXo=r(v0e," (UniSpeech model)"),v0e.forEach(t),xXo=i(Go),j2=n(Go,"LI",{});var T0e=s(j2);Fce=n(T0e,"STRONG",{});var Wst=s(Fce);kXo=r(Wst,"unispeech-sat"),Wst.forEach(t),RXo=r(T0e," \u2014 "),fq=n(T0e,"A",{href:!0});var Qst=s(fq);SXo=r(Qst,"UniSpeechSatForCTC"),Qst.forEach(t),PXo=r(T0e," (UniSpeechSat model)"),T0e.forEach(t),$Xo=i(Go),q2=n(Go,"LI",{});var F0e=s(q2);Cce=n(F0e,"STRONG",{});var Hst=s(Cce);IXo=r(Hst,"wav2vec2"),Hst.forEach(t),DXo=r(F0e," \u2014 "),mq=n(F0e,"A",{href:!0});var Ust=s(mq);NXo=r(Ust,"Wav2Vec2ForCTC"),Ust.forEach(t),jXo=r(F0e," (Wav2Vec2 model)"),F0e.forEach(t),qXo=i(Go),G2=n(Go,"LI",{});var C0e=s(G2);Mce=n(C0e,"STRONG",{});var Jst=s(Mce);GXo=r(Jst,"wavlm"),Jst.forEach(t),OXo=r(C0e," \u2014 "),gq=n(C0e,"A",{href:!0});var Yst=s(gq);XXo=r(Yst,"WavLMForCTC"),Yst.forEach(t),VXo=r(C0e," (WavLM model)"),C0e.forEach(t),Go.forEach(t),zXo=i(oa),O2=n(oa,"P",{});var M0e=s(O2);WXo=r(M0e,"The model is set in evaluation mode by default using "),Ece=n(M0e,"CODE",{});var Kst=s(Ece);QXo=r(Kst,"model.eval()"),Kst.forEach(t),HXo=r(M0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=n(M0e,"CODE",{});var Zst=s(yce);UXo=r(Zst,"model.train()"),Zst.forEach(t),M0e.forEach(t),JXo=i(oa),wce=n(oa,"P",{});var elt=s(wce);YXo=r(elt,"Examples:"),elt.forEach(t),KXo=i(oa),m(Ww.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),aRe=i(c),Vd=n(c,"H2",{class:!0});var gPe=s(Vd);X2=n(gPe,"A",{id:!0,class:!0,href:!0});var olt=s(X2);Ace=n(olt,"SPAN",{});var rlt=s(Ace);m(Qw.$$.fragment,rlt),rlt.forEach(t),olt.forEach(t),ZXo=i(gPe),Lce=n(gPe,"SPAN",{});var tlt=s(Lce);eVo=r(tlt,"AutoModelForSpeechSeq2Seq"),tlt.forEach(t),gPe.forEach(t),nRe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Hw.$$.fragment,yl),oVo=i(yl),zd=n(yl,"P",{});var SW=s(zd);rVo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Bce=n(SW,"CODE",{});var alt=s(Bce);tVo=r(alt,"from_pretrained()"),alt.forEach(t),aVo=r(SW,"class method or the "),xce=n(SW,"CODE",{});var nlt=s(xce);nVo=r(nlt,"from_config()"),nlt.forEach(t),sVo=r(SW,`class
method.`),SW.forEach(t),lVo=i(yl),Uw=n(yl,"P",{});var hPe=s(Uw);iVo=r(hPe,"This class cannot be instantiated directly using "),kce=n(hPe,"CODE",{});var slt=s(kce);dVo=r(slt,"__init__()"),slt.forEach(t),cVo=r(hPe," (throws an error)."),hPe.forEach(t),fVo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Jw.$$.fragment,wl),mVo=i(wl),Rce=n(wl,"P",{});var llt=s(Rce);gVo=r(llt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),llt.forEach(t),hVo=i(wl),Wd=n(wl,"P",{});var PW=s(Wd);pVo=r(PW,`Note:
Loading a model from its configuration file does `),Sce=n(PW,"STRONG",{});var ilt=s(Sce);_Vo=r(ilt,"not"),ilt.forEach(t),uVo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pce=n(PW,"CODE",{});var dlt=s(Pce);bVo=r(dlt,"from_pretrained()"),dlt.forEach(t),vVo=r(PW,"to load the model weights."),PW.forEach(t),TVo=i(wl),$ce=n(wl,"P",{});var clt=s($ce);FVo=r(clt,"Examples:"),clt.forEach(t),CVo=i(wl),m(Yw.$$.fragment,wl),wl.forEach(t),MVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(Kw.$$.fragment,ra),EVo=i(ra),Ice=n(ra,"P",{});var flt=s(Ice);yVo=r(flt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),flt.forEach(t),wVo=i(ra),ln=n(ra,"P",{});var xE=s(ln);AVo=r(xE,"The model class to instantiate is selected based on the "),Dce=n(xE,"CODE",{});var mlt=s(Dce);LVo=r(mlt,"model_type"),mlt.forEach(t),BVo=r(xE,` property of the config object (either
passed as an argument or loaded from `),Nce=n(xE,"CODE",{});var glt=s(Nce);xVo=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),kVo=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(xE,"CODE",{});var hlt=s(jce);RVo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),SVo=r(xE,":"),xE.forEach(t),PVo=i(ra),Zw=n(ra,"UL",{});var pPe=s(Zw);V2=n(pPe,"LI",{});var E0e=s(V2);qce=n(E0e,"STRONG",{});var plt=s(qce);$Vo=r(plt,"speech-encoder-decoder"),plt.forEach(t),IVo=r(E0e," \u2014 "),hq=n(E0e,"A",{href:!0});var _lt=s(hq);DVo=r(_lt,"SpeechEncoderDecoderModel"),_lt.forEach(t),NVo=r(E0e," (Speech Encoder decoder model)"),E0e.forEach(t),jVo=i(pPe),z2=n(pPe,"LI",{});var y0e=s(z2);Gce=n(y0e,"STRONG",{});var ult=s(Gce);qVo=r(ult,"speech_to_text"),ult.forEach(t),GVo=r(y0e," \u2014 "),pq=n(y0e,"A",{href:!0});var blt=s(pq);OVo=r(blt,"Speech2TextForConditionalGeneration"),blt.forEach(t),XVo=r(y0e," (Speech2Text model)"),y0e.forEach(t),pPe.forEach(t),VVo=i(ra),W2=n(ra,"P",{});var w0e=s(W2);zVo=r(w0e,"The model is set in evaluation mode by default using "),Oce=n(w0e,"CODE",{});var vlt=s(Oce);WVo=r(vlt,"model.eval()"),vlt.forEach(t),QVo=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=n(w0e,"CODE",{});var Tlt=s(Xce);HVo=r(Tlt,"model.train()"),Tlt.forEach(t),w0e.forEach(t),UVo=i(ra),Vce=n(ra,"P",{});var Flt=s(Vce);JVo=r(Flt,"Examples:"),Flt.forEach(t),YVo=i(ra),m(e6.$$.fragment,ra),ra.forEach(t),yl.forEach(t),sRe=i(c),Qd=n(c,"H2",{class:!0});var _Pe=s(Qd);Q2=n(_Pe,"A",{id:!0,class:!0,href:!0});var Clt=s(Q2);zce=n(Clt,"SPAN",{});var Mlt=s(zce);m(o6.$$.fragment,Mlt),Mlt.forEach(t),Clt.forEach(t),KVo=i(_Pe),Wce=n(_Pe,"SPAN",{});var Elt=s(Wce);ZVo=r(Elt,"AutoModelForAudioXVector"),Elt.forEach(t),_Pe.forEach(t),lRe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(r6.$$.fragment,Al),ezo=i(Al),Hd=n(Al,"P",{});var $W=s(Hd);ozo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Qce=n($W,"CODE",{});var ylt=s(Qce);rzo=r(ylt,"from_pretrained()"),ylt.forEach(t),tzo=r($W,"class method or the "),Hce=n($W,"CODE",{});var wlt=s(Hce);azo=r(wlt,"from_config()"),wlt.forEach(t),nzo=r($W,`class
method.`),$W.forEach(t),szo=i(Al),t6=n(Al,"P",{});var uPe=s(t6);lzo=r(uPe,"This class cannot be instantiated directly using "),Uce=n(uPe,"CODE",{});var Alt=s(Uce);izo=r(Alt,"__init__()"),Alt.forEach(t),dzo=r(uPe," (throws an error)."),uPe.forEach(t),czo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(a6.$$.fragment,Ll),fzo=i(Ll),Jce=n(Ll,"P",{});var Llt=s(Jce);mzo=r(Llt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Llt.forEach(t),gzo=i(Ll),Ud=n(Ll,"P",{});var IW=s(Ud);hzo=r(IW,`Note:
Loading a model from its configuration file does `),Yce=n(IW,"STRONG",{});var Blt=s(Yce);pzo=r(Blt,"not"),Blt.forEach(t),_zo=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kce=n(IW,"CODE",{});var xlt=s(Kce);uzo=r(xlt,"from_pretrained()"),xlt.forEach(t),bzo=r(IW,"to load the model weights."),IW.forEach(t),vzo=i(Ll),Zce=n(Ll,"P",{});var klt=s(Zce);Tzo=r(klt,"Examples:"),klt.forEach(t),Fzo=i(Ll),m(n6.$$.fragment,Ll),Ll.forEach(t),Czo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(s6.$$.fragment,ta),Mzo=i(ta),efe=n(ta,"P",{});var Rlt=s(efe);Ezo=r(Rlt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rlt.forEach(t),yzo=i(ta),dn=n(ta,"P",{});var kE=s(dn);wzo=r(kE,"The model class to instantiate is selected based on the "),ofe=n(kE,"CODE",{});var Slt=s(ofe);Azo=r(Slt,"model_type"),Slt.forEach(t),Lzo=r(kE,` property of the config object (either
passed as an argument or loaded from `),rfe=n(kE,"CODE",{});var Plt=s(rfe);Bzo=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),xzo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=n(kE,"CODE",{});var $lt=s(tfe);kzo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),Rzo=r(kE,":"),kE.forEach(t),Szo=i(ta),cn=n(ta,"UL",{});var RE=s(cn);H2=n(RE,"LI",{});var A0e=s(H2);afe=n(A0e,"STRONG",{});var Ilt=s(afe);Pzo=r(Ilt,"data2vec-audio"),Ilt.forEach(t),$zo=r(A0e," \u2014 "),_q=n(A0e,"A",{href:!0});var Dlt=s(_q);Izo=r(Dlt,"Data2VecAudioForXVector"),Dlt.forEach(t),Dzo=r(A0e," (Data2VecAudio model)"),A0e.forEach(t),Nzo=i(RE),U2=n(RE,"LI",{});var L0e=s(U2);nfe=n(L0e,"STRONG",{});var Nlt=s(nfe);jzo=r(Nlt,"unispeech-sat"),Nlt.forEach(t),qzo=r(L0e," \u2014 "),uq=n(L0e,"A",{href:!0});var jlt=s(uq);Gzo=r(jlt,"UniSpeechSatForXVector"),jlt.forEach(t),Ozo=r(L0e," (UniSpeechSat model)"),L0e.forEach(t),Xzo=i(RE),J2=n(RE,"LI",{});var B0e=s(J2);sfe=n(B0e,"STRONG",{});var qlt=s(sfe);Vzo=r(qlt,"wav2vec2"),qlt.forEach(t),zzo=r(B0e," \u2014 "),bq=n(B0e,"A",{href:!0});var Glt=s(bq);Wzo=r(Glt,"Wav2Vec2ForXVector"),Glt.forEach(t),Qzo=r(B0e," (Wav2Vec2 model)"),B0e.forEach(t),Hzo=i(RE),Y2=n(RE,"LI",{});var x0e=s(Y2);lfe=n(x0e,"STRONG",{});var Olt=s(lfe);Uzo=r(Olt,"wavlm"),Olt.forEach(t),Jzo=r(x0e," \u2014 "),vq=n(x0e,"A",{href:!0});var Xlt=s(vq);Yzo=r(Xlt,"WavLMForXVector"),Xlt.forEach(t),Kzo=r(x0e," (WavLM model)"),x0e.forEach(t),RE.forEach(t),Zzo=i(ta),K2=n(ta,"P",{});var k0e=s(K2);eWo=r(k0e,"The model is set in evaluation mode by default using "),ife=n(k0e,"CODE",{});var Vlt=s(ife);oWo=r(Vlt,"model.eval()"),Vlt.forEach(t),rWo=r(k0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(k0e,"CODE",{});var zlt=s(dfe);tWo=r(zlt,"model.train()"),zlt.forEach(t),k0e.forEach(t),aWo=i(ta),cfe=n(ta,"P",{});var Wlt=s(cfe);nWo=r(Wlt,"Examples:"),Wlt.forEach(t),sWo=i(ta),m(l6.$$.fragment,ta),ta.forEach(t),Al.forEach(t),iRe=i(c),Jd=n(c,"H2",{class:!0});var bPe=s(Jd);Z2=n(bPe,"A",{id:!0,class:!0,href:!0});var Qlt=s(Z2);ffe=n(Qlt,"SPAN",{});var Hlt=s(ffe);m(i6.$$.fragment,Hlt),Hlt.forEach(t),Qlt.forEach(t),lWo=i(bPe),mfe=n(bPe,"SPAN",{});var Ult=s(mfe);iWo=r(Ult,"AutoModelForMaskedImageModeling"),Ult.forEach(t),bPe.forEach(t),dRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(d6.$$.fragment,Bl),dWo=i(Bl),Yd=n(Bl,"P",{});var DW=s(Yd);cWo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gfe=n(DW,"CODE",{});var Jlt=s(gfe);fWo=r(Jlt,"from_pretrained()"),Jlt.forEach(t),mWo=r(DW,"class method or the "),hfe=n(DW,"CODE",{});var Ylt=s(hfe);gWo=r(Ylt,"from_config()"),Ylt.forEach(t),hWo=r(DW,`class
method.`),DW.forEach(t),pWo=i(Bl),c6=n(Bl,"P",{});var vPe=s(c6);_Wo=r(vPe,"This class cannot be instantiated directly using "),pfe=n(vPe,"CODE",{});var Klt=s(pfe);uWo=r(Klt,"__init__()"),Klt.forEach(t),bWo=r(vPe," (throws an error)."),vPe.forEach(t),vWo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(f6.$$.fragment,xl),TWo=i(xl),_fe=n(xl,"P",{});var Zlt=s(_fe);FWo=r(Zlt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zlt.forEach(t),CWo=i(xl),Kd=n(xl,"P",{});var NW=s(Kd);MWo=r(NW,`Note:
Loading a model from its configuration file does `),ufe=n(NW,"STRONG",{});var eit=s(ufe);EWo=r(eit,"not"),eit.forEach(t),yWo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bfe=n(NW,"CODE",{});var oit=s(bfe);wWo=r(oit,"from_pretrained()"),oit.forEach(t),AWo=r(NW,"to load the model weights."),NW.forEach(t),LWo=i(xl),vfe=n(xl,"P",{});var rit=s(vfe);BWo=r(rit,"Examples:"),rit.forEach(t),xWo=i(xl),m(m6.$$.fragment,xl),xl.forEach(t),kWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(g6.$$.fragment,aa),RWo=i(aa),Tfe=n(aa,"P",{});var tit=s(Tfe);SWo=r(tit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tit.forEach(t),PWo=i(aa),fn=n(aa,"P",{});var SE=s(fn);$Wo=r(SE,"The model class to instantiate is selected based on the "),Ffe=n(SE,"CODE",{});var ait=s(Ffe);IWo=r(ait,"model_type"),ait.forEach(t),DWo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(SE,"CODE",{});var nit=s(Cfe);NWo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),jWo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=n(SE,"CODE",{});var sit=s(Mfe);qWo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),GWo=r(SE,":"),SE.forEach(t),OWo=i(aa),Zd=n(aa,"UL",{});var jW=s(Zd);ev=n(jW,"LI",{});var R0e=s(ev);Efe=n(R0e,"STRONG",{});var lit=s(Efe);XWo=r(lit,"deit"),lit.forEach(t),VWo=r(R0e," \u2014 "),Tq=n(R0e,"A",{href:!0});var iit=s(Tq);zWo=r(iit,"DeiTForMaskedImageModeling"),iit.forEach(t),WWo=r(R0e," (DeiT model)"),R0e.forEach(t),QWo=i(jW),ov=n(jW,"LI",{});var S0e=s(ov);yfe=n(S0e,"STRONG",{});var dit=s(yfe);HWo=r(dit,"swin"),dit.forEach(t),UWo=r(S0e," \u2014 "),Fq=n(S0e,"A",{href:!0});var cit=s(Fq);JWo=r(cit,"SwinForMaskedImageModeling"),cit.forEach(t),YWo=r(S0e," (Swin model)"),S0e.forEach(t),KWo=i(jW),rv=n(jW,"LI",{});var P0e=s(rv);wfe=n(P0e,"STRONG",{});var fit=s(wfe);ZWo=r(fit,"vit"),fit.forEach(t),eQo=r(P0e," \u2014 "),Cq=n(P0e,"A",{href:!0});var mit=s(Cq);oQo=r(mit,"ViTForMaskedImageModeling"),mit.forEach(t),rQo=r(P0e," (ViT model)"),P0e.forEach(t),jW.forEach(t),tQo=i(aa),tv=n(aa,"P",{});var $0e=s(tv);aQo=r($0e,"The model is set in evaluation mode by default using "),Afe=n($0e,"CODE",{});var git=s(Afe);nQo=r(git,"model.eval()"),git.forEach(t),sQo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n($0e,"CODE",{});var hit=s(Lfe);lQo=r(hit,"model.train()"),hit.forEach(t),$0e.forEach(t),iQo=i(aa),Bfe=n(aa,"P",{});var pit=s(Bfe);dQo=r(pit,"Examples:"),pit.forEach(t),cQo=i(aa),m(h6.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),cRe=i(c),ec=n(c,"H2",{class:!0});var TPe=s(ec);av=n(TPe,"A",{id:!0,class:!0,href:!0});var _it=s(av);xfe=n(_it,"SPAN",{});var uit=s(xfe);m(p6.$$.fragment,uit),uit.forEach(t),_it.forEach(t),fQo=i(TPe),kfe=n(TPe,"SPAN",{});var bit=s(kfe);mQo=r(bit,"AutoModelForObjectDetection"),bit.forEach(t),TPe.forEach(t),fRe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(_6.$$.fragment,kl),gQo=i(kl),oc=n(kl,"P",{});var qW=s(oc);hQo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Rfe=n(qW,"CODE",{});var vit=s(Rfe);pQo=r(vit,"from_pretrained()"),vit.forEach(t),_Qo=r(qW,"class method or the "),Sfe=n(qW,"CODE",{});var Tit=s(Sfe);uQo=r(Tit,"from_config()"),Tit.forEach(t),bQo=r(qW,`class
method.`),qW.forEach(t),vQo=i(kl),u6=n(kl,"P",{});var FPe=s(u6);TQo=r(FPe,"This class cannot be instantiated directly using "),Pfe=n(FPe,"CODE",{});var Fit=s(Pfe);FQo=r(Fit,"__init__()"),Fit.forEach(t),CQo=r(FPe," (throws an error)."),FPe.forEach(t),MQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(b6.$$.fragment,Rl),EQo=i(Rl),$fe=n(Rl,"P",{});var Cit=s($fe);yQo=r(Cit,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Cit.forEach(t),wQo=i(Rl),rc=n(Rl,"P",{});var GW=s(rc);AQo=r(GW,`Note:
Loading a model from its configuration file does `),Ife=n(GW,"STRONG",{});var Mit=s(Ife);LQo=r(Mit,"not"),Mit.forEach(t),BQo=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dfe=n(GW,"CODE",{});var Eit=s(Dfe);xQo=r(Eit,"from_pretrained()"),Eit.forEach(t),kQo=r(GW,"to load the model weights."),GW.forEach(t),RQo=i(Rl),Nfe=n(Rl,"P",{});var yit=s(Nfe);SQo=r(yit,"Examples:"),yit.forEach(t),PQo=i(Rl),m(v6.$$.fragment,Rl),Rl.forEach(t),$Qo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(T6.$$.fragment,na),IQo=i(na),jfe=n(na,"P",{});var wit=s(jfe);DQo=r(wit,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wit.forEach(t),NQo=i(na),mn=n(na,"P",{});var PE=s(mn);jQo=r(PE,"The model class to instantiate is selected based on the "),qfe=n(PE,"CODE",{});var Ait=s(qfe);qQo=r(Ait,"model_type"),Ait.forEach(t),GQo=r(PE,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(PE,"CODE",{});var Lit=s(Gfe);OQo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),XQo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(PE,"CODE",{});var Bit=s(Ofe);VQo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),zQo=r(PE,":"),PE.forEach(t),WQo=i(na),Xfe=n(na,"UL",{});var xit=s(Xfe);nv=n(xit,"LI",{});var I0e=s(nv);Vfe=n(I0e,"STRONG",{});var kit=s(Vfe);QQo=r(kit,"detr"),kit.forEach(t),HQo=r(I0e," \u2014 "),Mq=n(I0e,"A",{href:!0});var Rit=s(Mq);UQo=r(Rit,"DetrForObjectDetection"),Rit.forEach(t),JQo=r(I0e," (DETR model)"),I0e.forEach(t),xit.forEach(t),YQo=i(na),sv=n(na,"P",{});var D0e=s(sv);KQo=r(D0e,"The model is set in evaluation mode by default using "),zfe=n(D0e,"CODE",{});var Sit=s(zfe);ZQo=r(Sit,"model.eval()"),Sit.forEach(t),eHo=r(D0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=n(D0e,"CODE",{});var Pit=s(Wfe);oHo=r(Pit,"model.train()"),Pit.forEach(t),D0e.forEach(t),rHo=i(na),Qfe=n(na,"P",{});var $it=s(Qfe);tHo=r($it,"Examples:"),$it.forEach(t),aHo=i(na),m(F6.$$.fragment,na),na.forEach(t),kl.forEach(t),mRe=i(c),tc=n(c,"H2",{class:!0});var CPe=s(tc);lv=n(CPe,"A",{id:!0,class:!0,href:!0});var Iit=s(lv);Hfe=n(Iit,"SPAN",{});var Dit=s(Hfe);m(C6.$$.fragment,Dit),Dit.forEach(t),Iit.forEach(t),nHo=i(CPe),Ufe=n(CPe,"SPAN",{});var Nit=s(Ufe);sHo=r(Nit,"AutoModelForImageSegmentation"),Nit.forEach(t),CPe.forEach(t),gRe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(M6.$$.fragment,Sl),lHo=i(Sl),ac=n(Sl,"P",{});var OW=s(ac);iHo=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Jfe=n(OW,"CODE",{});var jit=s(Jfe);dHo=r(jit,"from_pretrained()"),jit.forEach(t),cHo=r(OW,"class method or the "),Yfe=n(OW,"CODE",{});var qit=s(Yfe);fHo=r(qit,"from_config()"),qit.forEach(t),mHo=r(OW,`class
method.`),OW.forEach(t),gHo=i(Sl),E6=n(Sl,"P",{});var MPe=s(E6);hHo=r(MPe,"This class cannot be instantiated directly using "),Kfe=n(MPe,"CODE",{});var Git=s(Kfe);pHo=r(Git,"__init__()"),Git.forEach(t),_Ho=r(MPe," (throws an error)."),MPe.forEach(t),uHo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(y6.$$.fragment,Pl),bHo=i(Pl),Zfe=n(Pl,"P",{});var Oit=s(Zfe);vHo=r(Oit,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Oit.forEach(t),THo=i(Pl),nc=n(Pl,"P",{});var XW=s(nc);FHo=r(XW,`Note:
Loading a model from its configuration file does `),eme=n(XW,"STRONG",{});var Xit=s(eme);CHo=r(Xit,"not"),Xit.forEach(t),MHo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ome=n(XW,"CODE",{});var Vit=s(ome);EHo=r(Vit,"from_pretrained()"),Vit.forEach(t),yHo=r(XW,"to load the model weights."),XW.forEach(t),wHo=i(Pl),rme=n(Pl,"P",{});var zit=s(rme);AHo=r(zit,"Examples:"),zit.forEach(t),LHo=i(Pl),m(w6.$$.fragment,Pl),Pl.forEach(t),BHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(A6.$$.fragment,sa),xHo=i(sa),tme=n(sa,"P",{});var Wit=s(tme);kHo=r(Wit,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Wit.forEach(t),RHo=i(sa),gn=n(sa,"P",{});var $E=s(gn);SHo=r($E,"The model class to instantiate is selected based on the "),ame=n($E,"CODE",{});var Qit=s(ame);PHo=r(Qit,"model_type"),Qit.forEach(t),$Ho=r($E,` property of the config object (either
passed as an argument or loaded from `),nme=n($E,"CODE",{});var Hit=s(nme);IHo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),DHo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=n($E,"CODE",{});var Uit=s(sme);NHo=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),jHo=r($E,":"),$E.forEach(t),qHo=i(sa),lme=n(sa,"UL",{});var Jit=s(lme);iv=n(Jit,"LI",{});var N0e=s(iv);ime=n(N0e,"STRONG",{});var Yit=s(ime);GHo=r(Yit,"detr"),Yit.forEach(t),OHo=r(N0e," \u2014 "),Eq=n(N0e,"A",{href:!0});var Kit=s(Eq);XHo=r(Kit,"DetrForSegmentation"),Kit.forEach(t),VHo=r(N0e," (DETR model)"),N0e.forEach(t),Jit.forEach(t),zHo=i(sa),dv=n(sa,"P",{});var j0e=s(dv);WHo=r(j0e,"The model is set in evaluation mode by default using "),dme=n(j0e,"CODE",{});var Zit=s(dme);QHo=r(Zit,"model.eval()"),Zit.forEach(t),HHo=r(j0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=n(j0e,"CODE",{});var edt=s(cme);UHo=r(edt,"model.train()"),edt.forEach(t),j0e.forEach(t),JHo=i(sa),fme=n(sa,"P",{});var odt=s(fme);YHo=r(odt,"Examples:"),odt.forEach(t),KHo=i(sa),m(L6.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),hRe=i(c),sc=n(c,"H2",{class:!0});var EPe=s(sc);cv=n(EPe,"A",{id:!0,class:!0,href:!0});var rdt=s(cv);mme=n(rdt,"SPAN",{});var tdt=s(mme);m(B6.$$.fragment,tdt),tdt.forEach(t),rdt.forEach(t),ZHo=i(EPe),gme=n(EPe,"SPAN",{});var adt=s(gme);eUo=r(adt,"AutoModelForSemanticSegmentation"),adt.forEach(t),EPe.forEach(t),pRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(x6.$$.fragment,$l),oUo=i($l),lc=n($l,"P",{});var VW=s(lc);rUo=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hme=n(VW,"CODE",{});var ndt=s(hme);tUo=r(ndt,"from_pretrained()"),ndt.forEach(t),aUo=r(VW,"class method or the "),pme=n(VW,"CODE",{});var sdt=s(pme);nUo=r(sdt,"from_config()"),sdt.forEach(t),sUo=r(VW,`class
method.`),VW.forEach(t),lUo=i($l),k6=n($l,"P",{});var yPe=s(k6);iUo=r(yPe,"This class cannot be instantiated directly using "),_me=n(yPe,"CODE",{});var ldt=s(_me);dUo=r(ldt,"__init__()"),ldt.forEach(t),cUo=r(yPe," (throws an error)."),yPe.forEach(t),fUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(R6.$$.fragment,Il),mUo=i(Il),ume=n(Il,"P",{});var idt=s(ume);gUo=r(idt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),idt.forEach(t),hUo=i(Il),ic=n(Il,"P",{});var zW=s(ic);pUo=r(zW,`Note:
Loading a model from its configuration file does `),bme=n(zW,"STRONG",{});var ddt=s(bme);_Uo=r(ddt,"not"),ddt.forEach(t),uUo=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vme=n(zW,"CODE",{});var cdt=s(vme);bUo=r(cdt,"from_pretrained()"),cdt.forEach(t),vUo=r(zW,"to load the model weights."),zW.forEach(t),TUo=i(Il),Tme=n(Il,"P",{});var fdt=s(Tme);FUo=r(fdt,"Examples:"),fdt.forEach(t),CUo=i(Il),m(S6.$$.fragment,Il),Il.forEach(t),MUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(P6.$$.fragment,la),EUo=i(la),Fme=n(la,"P",{});var mdt=s(Fme);yUo=r(mdt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mdt.forEach(t),wUo=i(la),hn=n(la,"P",{});var IE=s(hn);AUo=r(IE,"The model class to instantiate is selected based on the "),Cme=n(IE,"CODE",{});var gdt=s(Cme);LUo=r(gdt,"model_type"),gdt.forEach(t),BUo=r(IE,` property of the config object (either
passed as an argument or loaded from `),Mme=n(IE,"CODE",{});var hdt=s(Mme);xUo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),kUo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eme=n(IE,"CODE",{});var pdt=s(Eme);RUo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),SUo=r(IE,":"),IE.forEach(t),PUo=i(la),dc=n(la,"UL",{});var WW=s(dc);fv=n(WW,"LI",{});var q0e=s(fv);yme=n(q0e,"STRONG",{});var _dt=s(yme);$Uo=r(_dt,"beit"),_dt.forEach(t),IUo=r(q0e," \u2014 "),yq=n(q0e,"A",{href:!0});var udt=s(yq);DUo=r(udt,"BeitForSemanticSegmentation"),udt.forEach(t),NUo=r(q0e," (BEiT model)"),q0e.forEach(t),jUo=i(WW),mv=n(WW,"LI",{});var G0e=s(mv);wme=n(G0e,"STRONG",{});var bdt=s(wme);qUo=r(bdt,"dpt"),bdt.forEach(t),GUo=r(G0e," \u2014 "),wq=n(G0e,"A",{href:!0});var vdt=s(wq);OUo=r(vdt,"DPTForSemanticSegmentation"),vdt.forEach(t),XUo=r(G0e," (DPT model)"),G0e.forEach(t),VUo=i(WW),gv=n(WW,"LI",{});var O0e=s(gv);Ame=n(O0e,"STRONG",{});var Tdt=s(Ame);zUo=r(Tdt,"segformer"),Tdt.forEach(t),WUo=r(O0e," \u2014 "),Aq=n(O0e,"A",{href:!0});var Fdt=s(Aq);QUo=r(Fdt,"SegformerForSemanticSegmentation"),Fdt.forEach(t),HUo=r(O0e," (SegFormer model)"),O0e.forEach(t),WW.forEach(t),UUo=i(la),hv=n(la,"P",{});var X0e=s(hv);JUo=r(X0e,"The model is set in evaluation mode by default using "),Lme=n(X0e,"CODE",{});var Cdt=s(Lme);YUo=r(Cdt,"model.eval()"),Cdt.forEach(t),KUo=r(X0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(X0e,"CODE",{});var Mdt=s(Bme);ZUo=r(Mdt,"model.train()"),Mdt.forEach(t),X0e.forEach(t),eJo=i(la),xme=n(la,"P",{});var Edt=s(xme);oJo=r(Edt,"Examples:"),Edt.forEach(t),rJo=i(la),m($6.$$.fragment,la),la.forEach(t),$l.forEach(t),_Re=i(c),cc=n(c,"H2",{class:!0});var wPe=s(cc);pv=n(wPe,"A",{id:!0,class:!0,href:!0});var ydt=s(pv);kme=n(ydt,"SPAN",{});var wdt=s(kme);m(I6.$$.fragment,wdt),wdt.forEach(t),ydt.forEach(t),tJo=i(wPe),Rme=n(wPe,"SPAN",{});var Adt=s(Rme);aJo=r(Adt,"AutoModelForInstanceSegmentation"),Adt.forEach(t),wPe.forEach(t),uRe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(D6.$$.fragment,Dl),nJo=i(Dl),fc=n(Dl,"P",{});var QW=s(fc);sJo=r(QW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Sme=n(QW,"CODE",{});var Ldt=s(Sme);lJo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),iJo=r(QW,"class method or the "),Pme=n(QW,"CODE",{});var Bdt=s(Pme);dJo=r(Bdt,"from_config()"),Bdt.forEach(t),cJo=r(QW,`class
method.`),QW.forEach(t),fJo=i(Dl),N6=n(Dl,"P",{});var APe=s(N6);mJo=r(APe,"This class cannot be instantiated directly using "),$me=n(APe,"CODE",{});var xdt=s($me);gJo=r(xdt,"__init__()"),xdt.forEach(t),hJo=r(APe," (throws an error)."),APe.forEach(t),pJo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Nl=s(mt);m(j6.$$.fragment,Nl),_Jo=i(Nl),Ime=n(Nl,"P",{});var kdt=s(Ime);uJo=r(kdt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kdt.forEach(t),bJo=i(Nl),mc=n(Nl,"P",{});var HW=s(mc);vJo=r(HW,`Note:
Loading a model from its configuration file does `),Dme=n(HW,"STRONG",{});var Rdt=s(Dme);TJo=r(Rdt,"not"),Rdt.forEach(t),FJo=r(HW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nme=n(HW,"CODE",{});var Sdt=s(Nme);CJo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),MJo=r(HW,"to load the model weights."),HW.forEach(t),EJo=i(Nl),jme=n(Nl,"P",{});var Pdt=s(jme);yJo=r(Pdt,"Examples:"),Pdt.forEach(t),wJo=i(Nl),m(q6.$$.fragment,Nl),Nl.forEach(t),AJo=i(Dl),no=n(Dl,"DIV",{class:!0});var ia=s(no);m(G6.$$.fragment,ia),LJo=i(ia),qme=n(ia,"P",{});var $dt=s(qme);BJo=r($dt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$dt.forEach(t),xJo=i(ia),pn=n(ia,"P",{});var DE=s(pn);kJo=r(DE,"The model class to instantiate is selected based on the "),Gme=n(DE,"CODE",{});var Idt=s(Gme);RJo=r(Idt,"model_type"),Idt.forEach(t),SJo=r(DE,` property of the config object (either
passed as an argument or loaded from `),Ome=n(DE,"CODE",{});var Ddt=s(Ome);PJo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),$Jo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(DE,"CODE",{});var Ndt=s(Xme);IJo=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),DJo=r(DE,":"),DE.forEach(t),NJo=i(ia),Vme=n(ia,"UL",{});var jdt=s(Vme);_v=n(jdt,"LI",{});var V0e=s(_v);zme=n(V0e,"STRONG",{});var qdt=s(zme);jJo=r(qdt,"maskformer"),qdt.forEach(t),qJo=r(V0e," \u2014 "),Lq=n(V0e,"A",{href:!0});var Gdt=s(Lq);GJo=r(Gdt,"MaskFormerForInstanceSegmentation"),Gdt.forEach(t),OJo=r(V0e," (MaskFormer model)"),V0e.forEach(t),jdt.forEach(t),XJo=i(ia),uv=n(ia,"P",{});var z0e=s(uv);VJo=r(z0e,"The model is set in evaluation mode by default using "),Wme=n(z0e,"CODE",{});var Odt=s(Wme);zJo=r(Odt,"model.eval()"),Odt.forEach(t),WJo=r(z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=n(z0e,"CODE",{});var Xdt=s(Qme);QJo=r(Xdt,"model.train()"),Xdt.forEach(t),z0e.forEach(t),HJo=i(ia),Hme=n(ia,"P",{});var Vdt=s(Hme);UJo=r(Vdt,"Examples:"),Vdt.forEach(t),JJo=i(ia),m(O6.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),bRe=i(c),gc=n(c,"H2",{class:!0});var LPe=s(gc);bv=n(LPe,"A",{id:!0,class:!0,href:!0});var zdt=s(bv);Ume=n(zdt,"SPAN",{});var Wdt=s(Ume);m(X6.$$.fragment,Wdt),Wdt.forEach(t),zdt.forEach(t),YJo=i(LPe),Jme=n(LPe,"SPAN",{});var Qdt=s(Jme);KJo=r(Qdt,"TFAutoModel"),Qdt.forEach(t),LPe.forEach(t),vRe=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);m(V6.$$.fragment,jl),ZJo=i(jl),hc=n(jl,"P",{});var UW=s(hc);eYo=r(UW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yme=n(UW,"CODE",{});var Hdt=s(Yme);oYo=r(Hdt,"from_pretrained()"),Hdt.forEach(t),rYo=r(UW,"class method or the "),Kme=n(UW,"CODE",{});var Udt=s(Kme);tYo=r(Udt,"from_config()"),Udt.forEach(t),aYo=r(UW,`class
method.`),UW.forEach(t),nYo=i(jl),z6=n(jl,"P",{});var BPe=s(z6);sYo=r(BPe,"This class cannot be instantiated directly using "),Zme=n(BPe,"CODE",{});var Jdt=s(Zme);lYo=r(Jdt,"__init__()"),Jdt.forEach(t),iYo=r(BPe," (throws an error)."),BPe.forEach(t),dYo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);m(W6.$$.fragment,ql),cYo=i(ql),ege=n(ql,"P",{});var Ydt=s(ege);fYo=r(Ydt,"Instantiates one of the base model classes of the library from a configuration."),Ydt.forEach(t),mYo=i(ql),pc=n(ql,"P",{});var JW=s(pc);gYo=r(JW,`Note:
Loading a model from its configuration file does `),oge=n(JW,"STRONG",{});var Kdt=s(oge);hYo=r(Kdt,"not"),Kdt.forEach(t),pYo=r(JW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rge=n(JW,"CODE",{});var Zdt=s(rge);_Yo=r(Zdt,"from_pretrained()"),Zdt.forEach(t),uYo=r(JW,"to load the model weights."),JW.forEach(t),bYo=i(ql),tge=n(ql,"P",{});var ect=s(tge);vYo=r(ect,"Examples:"),ect.forEach(t),TYo=i(ql),m(Q6.$$.fragment,ql),ql.forEach(t),FYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(H6.$$.fragment,pa),CYo=i(pa),age=n(pa,"P",{});var oct=s(age);MYo=r(oct,"Instantiate one of the base model classes of the library from a pretrained model."),oct.forEach(t),EYo=i(pa),_n=n(pa,"P",{});var NE=s(_n);yYo=r(NE,"The model class to instantiate is selected based on the "),nge=n(NE,"CODE",{});var rct=s(nge);wYo=r(rct,"model_type"),rct.forEach(t),AYo=r(NE,` property of the config object (either
passed as an argument or loaded from `),sge=n(NE,"CODE",{});var tct=s(sge);LYo=r(tct,"pretrained_model_name_or_path"),tct.forEach(t),BYo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=n(NE,"CODE",{});var act=s(lge);xYo=r(act,"pretrained_model_name_or_path"),act.forEach(t),kYo=r(NE,":"),NE.forEach(t),RYo=i(pa),B=n(pa,"UL",{});var x=s(B);vv=n(x,"LI",{});var W0e=s(vv);ige=n(W0e,"STRONG",{});var nct=s(ige);SYo=r(nct,"albert"),nct.forEach(t),PYo=r(W0e," \u2014 "),Bq=n(W0e,"A",{href:!0});var sct=s(Bq);$Yo=r(sct,"TFAlbertModel"),sct.forEach(t),IYo=r(W0e," (ALBERT model)"),W0e.forEach(t),DYo=i(x),Tv=n(x,"LI",{});var Q0e=s(Tv);dge=n(Q0e,"STRONG",{});var lct=s(dge);NYo=r(lct,"bart"),lct.forEach(t),jYo=r(Q0e," \u2014 "),xq=n(Q0e,"A",{href:!0});var ict=s(xq);qYo=r(ict,"TFBartModel"),ict.forEach(t),GYo=r(Q0e," (BART model)"),Q0e.forEach(t),OYo=i(x),Fv=n(x,"LI",{});var H0e=s(Fv);cge=n(H0e,"STRONG",{});var dct=s(cge);XYo=r(dct,"bert"),dct.forEach(t),VYo=r(H0e," \u2014 "),kq=n(H0e,"A",{href:!0});var cct=s(kq);zYo=r(cct,"TFBertModel"),cct.forEach(t),WYo=r(H0e," (BERT model)"),H0e.forEach(t),QYo=i(x),Cv=n(x,"LI",{});var U0e=s(Cv);fge=n(U0e,"STRONG",{});var fct=s(fge);HYo=r(fct,"blenderbot"),fct.forEach(t),UYo=r(U0e," \u2014 "),Rq=n(U0e,"A",{href:!0});var mct=s(Rq);JYo=r(mct,"TFBlenderbotModel"),mct.forEach(t),YYo=r(U0e," (Blenderbot model)"),U0e.forEach(t),KYo=i(x),Mv=n(x,"LI",{});var J0e=s(Mv);mge=n(J0e,"STRONG",{});var gct=s(mge);ZYo=r(gct,"blenderbot-small"),gct.forEach(t),eKo=r(J0e," \u2014 "),Sq=n(J0e,"A",{href:!0});var hct=s(Sq);oKo=r(hct,"TFBlenderbotSmallModel"),hct.forEach(t),rKo=r(J0e," (BlenderbotSmall model)"),J0e.forEach(t),tKo=i(x),Ev=n(x,"LI",{});var Y0e=s(Ev);gge=n(Y0e,"STRONG",{});var pct=s(gge);aKo=r(pct,"camembert"),pct.forEach(t),nKo=r(Y0e," \u2014 "),Pq=n(Y0e,"A",{href:!0});var _ct=s(Pq);sKo=r(_ct,"TFCamembertModel"),_ct.forEach(t),lKo=r(Y0e," (CamemBERT model)"),Y0e.forEach(t),iKo=i(x),yv=n(x,"LI",{});var K0e=s(yv);hge=n(K0e,"STRONG",{});var uct=s(hge);dKo=r(uct,"clip"),uct.forEach(t),cKo=r(K0e," \u2014 "),$q=n(K0e,"A",{href:!0});var bct=s($q);fKo=r(bct,"TFCLIPModel"),bct.forEach(t),mKo=r(K0e," (CLIP model)"),K0e.forEach(t),gKo=i(x),wv=n(x,"LI",{});var Z0e=s(wv);pge=n(Z0e,"STRONG",{});var vct=s(pge);hKo=r(vct,"convbert"),vct.forEach(t),pKo=r(Z0e," \u2014 "),Iq=n(Z0e,"A",{href:!0});var Tct=s(Iq);_Ko=r(Tct,"TFConvBertModel"),Tct.forEach(t),uKo=r(Z0e," (ConvBERT model)"),Z0e.forEach(t),bKo=i(x),Av=n(x,"LI",{});var eLe=s(Av);_ge=n(eLe,"STRONG",{});var Fct=s(_ge);vKo=r(Fct,"convnext"),Fct.forEach(t),TKo=r(eLe," \u2014 "),Dq=n(eLe,"A",{href:!0});var Cct=s(Dq);FKo=r(Cct,"TFConvNextModel"),Cct.forEach(t),CKo=r(eLe," (ConvNext model)"),eLe.forEach(t),MKo=i(x),Lv=n(x,"LI",{});var oLe=s(Lv);uge=n(oLe,"STRONG",{});var Mct=s(uge);EKo=r(Mct,"ctrl"),Mct.forEach(t),yKo=r(oLe," \u2014 "),Nq=n(oLe,"A",{href:!0});var Ect=s(Nq);wKo=r(Ect,"TFCTRLModel"),Ect.forEach(t),AKo=r(oLe," (CTRL model)"),oLe.forEach(t),LKo=i(x),Bv=n(x,"LI",{});var rLe=s(Bv);bge=n(rLe,"STRONG",{});var yct=s(bge);BKo=r(yct,"deberta"),yct.forEach(t),xKo=r(rLe," \u2014 "),jq=n(rLe,"A",{href:!0});var wct=s(jq);kKo=r(wct,"TFDebertaModel"),wct.forEach(t),RKo=r(rLe," (DeBERTa model)"),rLe.forEach(t),SKo=i(x),xv=n(x,"LI",{});var tLe=s(xv);vge=n(tLe,"STRONG",{});var Act=s(vge);PKo=r(Act,"deberta-v2"),Act.forEach(t),$Ko=r(tLe," \u2014 "),qq=n(tLe,"A",{href:!0});var Lct=s(qq);IKo=r(Lct,"TFDebertaV2Model"),Lct.forEach(t),DKo=r(tLe," (DeBERTa-v2 model)"),tLe.forEach(t),NKo=i(x),kv=n(x,"LI",{});var aLe=s(kv);Tge=n(aLe,"STRONG",{});var Bct=s(Tge);jKo=r(Bct,"distilbert"),Bct.forEach(t),qKo=r(aLe," \u2014 "),Gq=n(aLe,"A",{href:!0});var xct=s(Gq);GKo=r(xct,"TFDistilBertModel"),xct.forEach(t),OKo=r(aLe," (DistilBERT model)"),aLe.forEach(t),XKo=i(x),Rv=n(x,"LI",{});var nLe=s(Rv);Fge=n(nLe,"STRONG",{});var kct=s(Fge);VKo=r(kct,"dpr"),kct.forEach(t),zKo=r(nLe," \u2014 "),Oq=n(nLe,"A",{href:!0});var Rct=s(Oq);WKo=r(Rct,"TFDPRQuestionEncoder"),Rct.forEach(t),QKo=r(nLe," (DPR model)"),nLe.forEach(t),HKo=i(x),Sv=n(x,"LI",{});var sLe=s(Sv);Cge=n(sLe,"STRONG",{});var Sct=s(Cge);UKo=r(Sct,"electra"),Sct.forEach(t),JKo=r(sLe," \u2014 "),Xq=n(sLe,"A",{href:!0});var Pct=s(Xq);YKo=r(Pct,"TFElectraModel"),Pct.forEach(t),KKo=r(sLe," (ELECTRA model)"),sLe.forEach(t),ZKo=i(x),Pv=n(x,"LI",{});var lLe=s(Pv);Mge=n(lLe,"STRONG",{});var $ct=s(Mge);eZo=r($ct,"flaubert"),$ct.forEach(t),oZo=r(lLe," \u2014 "),Vq=n(lLe,"A",{href:!0});var Ict=s(Vq);rZo=r(Ict,"TFFlaubertModel"),Ict.forEach(t),tZo=r(lLe," (FlauBERT model)"),lLe.forEach(t),aZo=i(x),Gs=n(x,"LI",{});var e8=s(Gs);Ege=n(e8,"STRONG",{});var Dct=s(Ege);nZo=r(Dct,"funnel"),Dct.forEach(t),sZo=r(e8," \u2014 "),zq=n(e8,"A",{href:!0});var Nct=s(zq);lZo=r(Nct,"TFFunnelModel"),Nct.forEach(t),iZo=r(e8," or "),Wq=n(e8,"A",{href:!0});var jct=s(Wq);dZo=r(jct,"TFFunnelBaseModel"),jct.forEach(t),cZo=r(e8," (Funnel Transformer model)"),e8.forEach(t),fZo=i(x),$v=n(x,"LI",{});var iLe=s($v);yge=n(iLe,"STRONG",{});var qct=s(yge);mZo=r(qct,"gpt2"),qct.forEach(t),gZo=r(iLe," \u2014 "),Qq=n(iLe,"A",{href:!0});var Gct=s(Qq);hZo=r(Gct,"TFGPT2Model"),Gct.forEach(t),pZo=r(iLe," (OpenAI GPT-2 model)"),iLe.forEach(t),_Zo=i(x),Iv=n(x,"LI",{});var dLe=s(Iv);wge=n(dLe,"STRONG",{});var Oct=s(wge);uZo=r(Oct,"hubert"),Oct.forEach(t),bZo=r(dLe," \u2014 "),Hq=n(dLe,"A",{href:!0});var Xct=s(Hq);vZo=r(Xct,"TFHubertModel"),Xct.forEach(t),TZo=r(dLe," (Hubert model)"),dLe.forEach(t),FZo=i(x),Dv=n(x,"LI",{});var cLe=s(Dv);Age=n(cLe,"STRONG",{});var Vct=s(Age);CZo=r(Vct,"layoutlm"),Vct.forEach(t),MZo=r(cLe," \u2014 "),Uq=n(cLe,"A",{href:!0});var zct=s(Uq);EZo=r(zct,"TFLayoutLMModel"),zct.forEach(t),yZo=r(cLe," (LayoutLM model)"),cLe.forEach(t),wZo=i(x),Nv=n(x,"LI",{});var fLe=s(Nv);Lge=n(fLe,"STRONG",{});var Wct=s(Lge);AZo=r(Wct,"led"),Wct.forEach(t),LZo=r(fLe," \u2014 "),Jq=n(fLe,"A",{href:!0});var Qct=s(Jq);BZo=r(Qct,"TFLEDModel"),Qct.forEach(t),xZo=r(fLe," (LED model)"),fLe.forEach(t),kZo=i(x),jv=n(x,"LI",{});var mLe=s(jv);Bge=n(mLe,"STRONG",{});var Hct=s(Bge);RZo=r(Hct,"longformer"),Hct.forEach(t),SZo=r(mLe," \u2014 "),Yq=n(mLe,"A",{href:!0});var Uct=s(Yq);PZo=r(Uct,"TFLongformerModel"),Uct.forEach(t),$Zo=r(mLe," (Longformer model)"),mLe.forEach(t),IZo=i(x),qv=n(x,"LI",{});var gLe=s(qv);xge=n(gLe,"STRONG",{});var Jct=s(xge);DZo=r(Jct,"lxmert"),Jct.forEach(t),NZo=r(gLe," \u2014 "),Kq=n(gLe,"A",{href:!0});var Yct=s(Kq);jZo=r(Yct,"TFLxmertModel"),Yct.forEach(t),qZo=r(gLe," (LXMERT model)"),gLe.forEach(t),GZo=i(x),Gv=n(x,"LI",{});var hLe=s(Gv);kge=n(hLe,"STRONG",{});var Kct=s(kge);OZo=r(Kct,"marian"),Kct.forEach(t),XZo=r(hLe," \u2014 "),Zq=n(hLe,"A",{href:!0});var Zct=s(Zq);VZo=r(Zct,"TFMarianModel"),Zct.forEach(t),zZo=r(hLe," (Marian model)"),hLe.forEach(t),WZo=i(x),Ov=n(x,"LI",{});var pLe=s(Ov);Rge=n(pLe,"STRONG",{});var eft=s(Rge);QZo=r(eft,"mbart"),eft.forEach(t),HZo=r(pLe," \u2014 "),eG=n(pLe,"A",{href:!0});var oft=s(eG);UZo=r(oft,"TFMBartModel"),oft.forEach(t),JZo=r(pLe," (mBART model)"),pLe.forEach(t),YZo=i(x),Xv=n(x,"LI",{});var _Le=s(Xv);Sge=n(_Le,"STRONG",{});var rft=s(Sge);KZo=r(rft,"mobilebert"),rft.forEach(t),ZZo=r(_Le," \u2014 "),oG=n(_Le,"A",{href:!0});var tft=s(oG);eer=r(tft,"TFMobileBertModel"),tft.forEach(t),oer=r(_Le," (MobileBERT model)"),_Le.forEach(t),rer=i(x),Vv=n(x,"LI",{});var uLe=s(Vv);Pge=n(uLe,"STRONG",{});var aft=s(Pge);ter=r(aft,"mpnet"),aft.forEach(t),aer=r(uLe," \u2014 "),rG=n(uLe,"A",{href:!0});var nft=s(rG);ner=r(nft,"TFMPNetModel"),nft.forEach(t),ser=r(uLe," (MPNet model)"),uLe.forEach(t),ler=i(x),zv=n(x,"LI",{});var bLe=s(zv);$ge=n(bLe,"STRONG",{});var sft=s($ge);ier=r(sft,"mt5"),sft.forEach(t),der=r(bLe," \u2014 "),tG=n(bLe,"A",{href:!0});var lft=s(tG);cer=r(lft,"TFMT5Model"),lft.forEach(t),fer=r(bLe," (mT5 model)"),bLe.forEach(t),mer=i(x),Wv=n(x,"LI",{});var vLe=s(Wv);Ige=n(vLe,"STRONG",{});var ift=s(Ige);ger=r(ift,"openai-gpt"),ift.forEach(t),her=r(vLe," \u2014 "),aG=n(vLe,"A",{href:!0});var dft=s(aG);per=r(dft,"TFOpenAIGPTModel"),dft.forEach(t),_er=r(vLe," (OpenAI GPT model)"),vLe.forEach(t),uer=i(x),Qv=n(x,"LI",{});var TLe=s(Qv);Dge=n(TLe,"STRONG",{});var cft=s(Dge);ber=r(cft,"pegasus"),cft.forEach(t),ver=r(TLe," \u2014 "),nG=n(TLe,"A",{href:!0});var fft=s(nG);Ter=r(fft,"TFPegasusModel"),fft.forEach(t),Fer=r(TLe," (Pegasus model)"),TLe.forEach(t),Cer=i(x),Hv=n(x,"LI",{});var FLe=s(Hv);Nge=n(FLe,"STRONG",{});var mft=s(Nge);Mer=r(mft,"rembert"),mft.forEach(t),Eer=r(FLe," \u2014 "),sG=n(FLe,"A",{href:!0});var gft=s(sG);yer=r(gft,"TFRemBertModel"),gft.forEach(t),wer=r(FLe," (RemBERT model)"),FLe.forEach(t),Aer=i(x),Uv=n(x,"LI",{});var CLe=s(Uv);jge=n(CLe,"STRONG",{});var hft=s(jge);Ler=r(hft,"roberta"),hft.forEach(t),Ber=r(CLe," \u2014 "),lG=n(CLe,"A",{href:!0});var pft=s(lG);xer=r(pft,"TFRobertaModel"),pft.forEach(t),ker=r(CLe," (RoBERTa model)"),CLe.forEach(t),Rer=i(x),Jv=n(x,"LI",{});var MLe=s(Jv);qge=n(MLe,"STRONG",{});var _ft=s(qge);Ser=r(_ft,"roformer"),_ft.forEach(t),Per=r(MLe," \u2014 "),iG=n(MLe,"A",{href:!0});var uft=s(iG);$er=r(uft,"TFRoFormerModel"),uft.forEach(t),Ier=r(MLe," (RoFormer model)"),MLe.forEach(t),Der=i(x),Yv=n(x,"LI",{});var ELe=s(Yv);Gge=n(ELe,"STRONG",{});var bft=s(Gge);Ner=r(bft,"speech_to_text"),bft.forEach(t),jer=r(ELe," \u2014 "),dG=n(ELe,"A",{href:!0});var vft=s(dG);qer=r(vft,"TFSpeech2TextModel"),vft.forEach(t),Ger=r(ELe," (Speech2Text model)"),ELe.forEach(t),Oer=i(x),Kv=n(x,"LI",{});var yLe=s(Kv);Oge=n(yLe,"STRONG",{});var Tft=s(Oge);Xer=r(Tft,"t5"),Tft.forEach(t),Ver=r(yLe," \u2014 "),cG=n(yLe,"A",{href:!0});var Fft=s(cG);zer=r(Fft,"TFT5Model"),Fft.forEach(t),Wer=r(yLe," (T5 model)"),yLe.forEach(t),Qer=i(x),Zv=n(x,"LI",{});var wLe=s(Zv);Xge=n(wLe,"STRONG",{});var Cft=s(Xge);Her=r(Cft,"tapas"),Cft.forEach(t),Uer=r(wLe," \u2014 "),fG=n(wLe,"A",{href:!0});var Mft=s(fG);Jer=r(Mft,"TFTapasModel"),Mft.forEach(t),Yer=r(wLe," (TAPAS model)"),wLe.forEach(t),Ker=i(x),eT=n(x,"LI",{});var ALe=s(eT);Vge=n(ALe,"STRONG",{});var Eft=s(Vge);Zer=r(Eft,"transfo-xl"),Eft.forEach(t),eor=r(ALe," \u2014 "),mG=n(ALe,"A",{href:!0});var yft=s(mG);oor=r(yft,"TFTransfoXLModel"),yft.forEach(t),ror=r(ALe," (Transformer-XL model)"),ALe.forEach(t),tor=i(x),oT=n(x,"LI",{});var LLe=s(oT);zge=n(LLe,"STRONG",{});var wft=s(zge);aor=r(wft,"vit"),wft.forEach(t),nor=r(LLe," \u2014 "),gG=n(LLe,"A",{href:!0});var Aft=s(gG);sor=r(Aft,"TFViTModel"),Aft.forEach(t),lor=r(LLe," (ViT model)"),LLe.forEach(t),ior=i(x),rT=n(x,"LI",{});var BLe=s(rT);Wge=n(BLe,"STRONG",{});var Lft=s(Wge);dor=r(Lft,"wav2vec2"),Lft.forEach(t),cor=r(BLe," \u2014 "),hG=n(BLe,"A",{href:!0});var Bft=s(hG);mor=r(Bft,"TFWav2Vec2Model"),Bft.forEach(t),gor=r(BLe," (Wav2Vec2 model)"),BLe.forEach(t),hor=i(x),tT=n(x,"LI",{});var xLe=s(tT);Qge=n(xLe,"STRONG",{});var xft=s(Qge);por=r(xft,"xlm"),xft.forEach(t),_or=r(xLe," \u2014 "),pG=n(xLe,"A",{href:!0});var kft=s(pG);uor=r(kft,"TFXLMModel"),kft.forEach(t),bor=r(xLe," (XLM model)"),xLe.forEach(t),vor=i(x),aT=n(x,"LI",{});var kLe=s(aT);Hge=n(kLe,"STRONG",{});var Rft=s(Hge);Tor=r(Rft,"xlm-roberta"),Rft.forEach(t),For=r(kLe," \u2014 "),_G=n(kLe,"A",{href:!0});var Sft=s(_G);Cor=r(Sft,"TFXLMRobertaModel"),Sft.forEach(t),Mor=r(kLe," (XLM-RoBERTa model)"),kLe.forEach(t),Eor=i(x),nT=n(x,"LI",{});var RLe=s(nT);Uge=n(RLe,"STRONG",{});var Pft=s(Uge);yor=r(Pft,"xlnet"),Pft.forEach(t),wor=r(RLe," \u2014 "),uG=n(RLe,"A",{href:!0});var $ft=s(uG);Aor=r($ft,"TFXLNetModel"),$ft.forEach(t),Lor=r(RLe," (XLNet model)"),RLe.forEach(t),x.forEach(t),Bor=i(pa),Jge=n(pa,"P",{});var Ift=s(Jge);xor=r(Ift,"Examples:"),Ift.forEach(t),kor=i(pa),m(U6.$$.fragment,pa),pa.forEach(t),jl.forEach(t),TRe=i(c),_c=n(c,"H2",{class:!0});var xPe=s(_c);sT=n(xPe,"A",{id:!0,class:!0,href:!0});var Dft=s(sT);Yge=n(Dft,"SPAN",{});var Nft=s(Yge);m(J6.$$.fragment,Nft),Nft.forEach(t),Dft.forEach(t),Ror=i(xPe),Kge=n(xPe,"SPAN",{});var jft=s(Kge);Sor=r(jft,"TFAutoModelForPreTraining"),jft.forEach(t),xPe.forEach(t),FRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(Y6.$$.fragment,Gl),Por=i(Gl),uc=n(Gl,"P",{});var YW=s(uc);$or=r(YW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zge=n(YW,"CODE",{});var qft=s(Zge);Ior=r(qft,"from_pretrained()"),qft.forEach(t),Dor=r(YW,"class method or the "),ehe=n(YW,"CODE",{});var Gft=s(ehe);Nor=r(Gft,"from_config()"),Gft.forEach(t),jor=r(YW,`class
method.`),YW.forEach(t),qor=i(Gl),K6=n(Gl,"P",{});var kPe=s(K6);Gor=r(kPe,"This class cannot be instantiated directly using "),ohe=n(kPe,"CODE",{});var Oft=s(ohe);Oor=r(Oft,"__init__()"),Oft.forEach(t),Xor=r(kPe," (throws an error)."),kPe.forEach(t),Vor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(Z6.$$.fragment,Ol),zor=i(Ol),rhe=n(Ol,"P",{});var Xft=s(rhe);Wor=r(Xft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Xft.forEach(t),Qor=i(Ol),bc=n(Ol,"P",{});var KW=s(bc);Hor=r(KW,`Note:
Loading a model from its configuration file does `),the=n(KW,"STRONG",{});var Vft=s(the);Uor=r(Vft,"not"),Vft.forEach(t),Jor=r(KW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ahe=n(KW,"CODE",{});var zft=s(ahe);Yor=r(zft,"from_pretrained()"),zft.forEach(t),Kor=r(KW,"to load the model weights."),KW.forEach(t),Zor=i(Ol),nhe=n(Ol,"P",{});var Wft=s(nhe);err=r(Wft,"Examples:"),Wft.forEach(t),orr=i(Ol),m(eA.$$.fragment,Ol),Ol.forEach(t),rrr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(oA.$$.fragment,_a),trr=i(_a),she=n(_a,"P",{});var Qft=s(she);arr=r(Qft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qft.forEach(t),nrr=i(_a),un=n(_a,"P",{});var jE=s(un);srr=r(jE,"The model class to instantiate is selected based on the "),lhe=n(jE,"CODE",{});var Hft=s(lhe);lrr=r(Hft,"model_type"),Hft.forEach(t),irr=r(jE,` property of the config object (either
passed as an argument or loaded from `),ihe=n(jE,"CODE",{});var Uft=s(ihe);drr=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),crr=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(jE,"CODE",{});var Jft=s(dhe);frr=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),mrr=r(jE,":"),jE.forEach(t),grr=i(_a),H=n(_a,"UL",{});var U=s(H);lT=n(U,"LI",{});var SLe=s(lT);che=n(SLe,"STRONG",{});var Yft=s(che);hrr=r(Yft,"albert"),Yft.forEach(t),prr=r(SLe," \u2014 "),bG=n(SLe,"A",{href:!0});var Kft=s(bG);_rr=r(Kft,"TFAlbertForPreTraining"),Kft.forEach(t),urr=r(SLe," (ALBERT model)"),SLe.forEach(t),brr=i(U),iT=n(U,"LI",{});var PLe=s(iT);fhe=n(PLe,"STRONG",{});var Zft=s(fhe);vrr=r(Zft,"bart"),Zft.forEach(t),Trr=r(PLe," \u2014 "),vG=n(PLe,"A",{href:!0});var emt=s(vG);Frr=r(emt,"TFBartForConditionalGeneration"),emt.forEach(t),Crr=r(PLe," (BART model)"),PLe.forEach(t),Mrr=i(U),dT=n(U,"LI",{});var $Le=s(dT);mhe=n($Le,"STRONG",{});var omt=s(mhe);Err=r(omt,"bert"),omt.forEach(t),yrr=r($Le," \u2014 "),TG=n($Le,"A",{href:!0});var rmt=s(TG);wrr=r(rmt,"TFBertForPreTraining"),rmt.forEach(t),Arr=r($Le," (BERT model)"),$Le.forEach(t),Lrr=i(U),cT=n(U,"LI",{});var ILe=s(cT);ghe=n(ILe,"STRONG",{});var tmt=s(ghe);Brr=r(tmt,"camembert"),tmt.forEach(t),xrr=r(ILe," \u2014 "),FG=n(ILe,"A",{href:!0});var amt=s(FG);krr=r(amt,"TFCamembertForMaskedLM"),amt.forEach(t),Rrr=r(ILe," (CamemBERT model)"),ILe.forEach(t),Srr=i(U),fT=n(U,"LI",{});var DLe=s(fT);hhe=n(DLe,"STRONG",{});var nmt=s(hhe);Prr=r(nmt,"ctrl"),nmt.forEach(t),$rr=r(DLe," \u2014 "),CG=n(DLe,"A",{href:!0});var smt=s(CG);Irr=r(smt,"TFCTRLLMHeadModel"),smt.forEach(t),Drr=r(DLe," (CTRL model)"),DLe.forEach(t),Nrr=i(U),mT=n(U,"LI",{});var NLe=s(mT);phe=n(NLe,"STRONG",{});var lmt=s(phe);jrr=r(lmt,"distilbert"),lmt.forEach(t),qrr=r(NLe," \u2014 "),MG=n(NLe,"A",{href:!0});var imt=s(MG);Grr=r(imt,"TFDistilBertForMaskedLM"),imt.forEach(t),Orr=r(NLe," (DistilBERT model)"),NLe.forEach(t),Xrr=i(U),gT=n(U,"LI",{});var jLe=s(gT);_he=n(jLe,"STRONG",{});var dmt=s(_he);Vrr=r(dmt,"electra"),dmt.forEach(t),zrr=r(jLe," \u2014 "),EG=n(jLe,"A",{href:!0});var cmt=s(EG);Wrr=r(cmt,"TFElectraForPreTraining"),cmt.forEach(t),Qrr=r(jLe," (ELECTRA model)"),jLe.forEach(t),Hrr=i(U),hT=n(U,"LI",{});var qLe=s(hT);uhe=n(qLe,"STRONG",{});var fmt=s(uhe);Urr=r(fmt,"flaubert"),fmt.forEach(t),Jrr=r(qLe," \u2014 "),yG=n(qLe,"A",{href:!0});var mmt=s(yG);Yrr=r(mmt,"TFFlaubertWithLMHeadModel"),mmt.forEach(t),Krr=r(qLe," (FlauBERT model)"),qLe.forEach(t),Zrr=i(U),pT=n(U,"LI",{});var GLe=s(pT);bhe=n(GLe,"STRONG",{});var gmt=s(bhe);etr=r(gmt,"funnel"),gmt.forEach(t),otr=r(GLe," \u2014 "),wG=n(GLe,"A",{href:!0});var hmt=s(wG);rtr=r(hmt,"TFFunnelForPreTraining"),hmt.forEach(t),ttr=r(GLe," (Funnel Transformer model)"),GLe.forEach(t),atr=i(U),_T=n(U,"LI",{});var OLe=s(_T);vhe=n(OLe,"STRONG",{});var pmt=s(vhe);ntr=r(pmt,"gpt2"),pmt.forEach(t),str=r(OLe," \u2014 "),AG=n(OLe,"A",{href:!0});var _mt=s(AG);ltr=r(_mt,"TFGPT2LMHeadModel"),_mt.forEach(t),itr=r(OLe," (OpenAI GPT-2 model)"),OLe.forEach(t),dtr=i(U),uT=n(U,"LI",{});var XLe=s(uT);The=n(XLe,"STRONG",{});var umt=s(The);ctr=r(umt,"layoutlm"),umt.forEach(t),ftr=r(XLe," \u2014 "),LG=n(XLe,"A",{href:!0});var bmt=s(LG);mtr=r(bmt,"TFLayoutLMForMaskedLM"),bmt.forEach(t),gtr=r(XLe," (LayoutLM model)"),XLe.forEach(t),htr=i(U),bT=n(U,"LI",{});var VLe=s(bT);Fhe=n(VLe,"STRONG",{});var vmt=s(Fhe);ptr=r(vmt,"lxmert"),vmt.forEach(t),_tr=r(VLe," \u2014 "),BG=n(VLe,"A",{href:!0});var Tmt=s(BG);utr=r(Tmt,"TFLxmertForPreTraining"),Tmt.forEach(t),btr=r(VLe," (LXMERT model)"),VLe.forEach(t),vtr=i(U),vT=n(U,"LI",{});var zLe=s(vT);Che=n(zLe,"STRONG",{});var Fmt=s(Che);Ttr=r(Fmt,"mobilebert"),Fmt.forEach(t),Ftr=r(zLe," \u2014 "),xG=n(zLe,"A",{href:!0});var Cmt=s(xG);Ctr=r(Cmt,"TFMobileBertForPreTraining"),Cmt.forEach(t),Mtr=r(zLe," (MobileBERT model)"),zLe.forEach(t),Etr=i(U),TT=n(U,"LI",{});var WLe=s(TT);Mhe=n(WLe,"STRONG",{});var Mmt=s(Mhe);ytr=r(Mmt,"mpnet"),Mmt.forEach(t),wtr=r(WLe," \u2014 "),kG=n(WLe,"A",{href:!0});var Emt=s(kG);Atr=r(Emt,"TFMPNetForMaskedLM"),Emt.forEach(t),Ltr=r(WLe," (MPNet model)"),WLe.forEach(t),Btr=i(U),FT=n(U,"LI",{});var QLe=s(FT);Ehe=n(QLe,"STRONG",{});var ymt=s(Ehe);xtr=r(ymt,"openai-gpt"),ymt.forEach(t),ktr=r(QLe," \u2014 "),RG=n(QLe,"A",{href:!0});var wmt=s(RG);Rtr=r(wmt,"TFOpenAIGPTLMHeadModel"),wmt.forEach(t),Str=r(QLe," (OpenAI GPT model)"),QLe.forEach(t),Ptr=i(U),CT=n(U,"LI",{});var HLe=s(CT);yhe=n(HLe,"STRONG",{});var Amt=s(yhe);$tr=r(Amt,"roberta"),Amt.forEach(t),Itr=r(HLe," \u2014 "),SG=n(HLe,"A",{href:!0});var Lmt=s(SG);Dtr=r(Lmt,"TFRobertaForMaskedLM"),Lmt.forEach(t),Ntr=r(HLe," (RoBERTa model)"),HLe.forEach(t),jtr=i(U),MT=n(U,"LI",{});var ULe=s(MT);whe=n(ULe,"STRONG",{});var Bmt=s(whe);qtr=r(Bmt,"t5"),Bmt.forEach(t),Gtr=r(ULe," \u2014 "),PG=n(ULe,"A",{href:!0});var xmt=s(PG);Otr=r(xmt,"TFT5ForConditionalGeneration"),xmt.forEach(t),Xtr=r(ULe," (T5 model)"),ULe.forEach(t),Vtr=i(U),ET=n(U,"LI",{});var JLe=s(ET);Ahe=n(JLe,"STRONG",{});var kmt=s(Ahe);ztr=r(kmt,"tapas"),kmt.forEach(t),Wtr=r(JLe," \u2014 "),$G=n(JLe,"A",{href:!0});var Rmt=s($G);Qtr=r(Rmt,"TFTapasForMaskedLM"),Rmt.forEach(t),Htr=r(JLe," (TAPAS model)"),JLe.forEach(t),Utr=i(U),yT=n(U,"LI",{});var YLe=s(yT);Lhe=n(YLe,"STRONG",{});var Smt=s(Lhe);Jtr=r(Smt,"transfo-xl"),Smt.forEach(t),Ytr=r(YLe," \u2014 "),IG=n(YLe,"A",{href:!0});var Pmt=s(IG);Ktr=r(Pmt,"TFTransfoXLLMHeadModel"),Pmt.forEach(t),Ztr=r(YLe," (Transformer-XL model)"),YLe.forEach(t),ear=i(U),wT=n(U,"LI",{});var KLe=s(wT);Bhe=n(KLe,"STRONG",{});var $mt=s(Bhe);oar=r($mt,"xlm"),$mt.forEach(t),rar=r(KLe," \u2014 "),DG=n(KLe,"A",{href:!0});var Imt=s(DG);tar=r(Imt,"TFXLMWithLMHeadModel"),Imt.forEach(t),aar=r(KLe," (XLM model)"),KLe.forEach(t),nar=i(U),AT=n(U,"LI",{});var ZLe=s(AT);xhe=n(ZLe,"STRONG",{});var Dmt=s(xhe);sar=r(Dmt,"xlm-roberta"),Dmt.forEach(t),lar=r(ZLe," \u2014 "),NG=n(ZLe,"A",{href:!0});var Nmt=s(NG);iar=r(Nmt,"TFXLMRobertaForMaskedLM"),Nmt.forEach(t),dar=r(ZLe," (XLM-RoBERTa model)"),ZLe.forEach(t),car=i(U),LT=n(U,"LI",{});var e7e=s(LT);khe=n(e7e,"STRONG",{});var jmt=s(khe);far=r(jmt,"xlnet"),jmt.forEach(t),mar=r(e7e," \u2014 "),jG=n(e7e,"A",{href:!0});var qmt=s(jG);gar=r(qmt,"TFXLNetLMHeadModel"),qmt.forEach(t),har=r(e7e," (XLNet model)"),e7e.forEach(t),U.forEach(t),par=i(_a),Rhe=n(_a,"P",{});var Gmt=s(Rhe);_ar=r(Gmt,"Examples:"),Gmt.forEach(t),uar=i(_a),m(rA.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),CRe=i(c),vc=n(c,"H2",{class:!0});var RPe=s(vc);BT=n(RPe,"A",{id:!0,class:!0,href:!0});var Omt=s(BT);She=n(Omt,"SPAN",{});var Xmt=s(She);m(tA.$$.fragment,Xmt),Xmt.forEach(t),Omt.forEach(t),bar=i(RPe),Phe=n(RPe,"SPAN",{});var Vmt=s(Phe);Tar=r(Vmt,"TFAutoModelForCausalLM"),Vmt.forEach(t),RPe.forEach(t),MRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(aA.$$.fragment,Xl),Far=i(Xl),Tc=n(Xl,"P",{});var ZW=s(Tc);Car=r(ZW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$he=n(ZW,"CODE",{});var zmt=s($he);Mar=r(zmt,"from_pretrained()"),zmt.forEach(t),Ear=r(ZW,"class method or the "),Ihe=n(ZW,"CODE",{});var Wmt=s(Ihe);yar=r(Wmt,"from_config()"),Wmt.forEach(t),war=r(ZW,`class
method.`),ZW.forEach(t),Aar=i(Xl),nA=n(Xl,"P",{});var SPe=s(nA);Lar=r(SPe,"This class cannot be instantiated directly using "),Dhe=n(SPe,"CODE",{});var Qmt=s(Dhe);Bar=r(Qmt,"__init__()"),Qmt.forEach(t),xar=r(SPe," (throws an error)."),SPe.forEach(t),kar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(sA.$$.fragment,Vl),Rar=i(Vl),Nhe=n(Vl,"P",{});var Hmt=s(Nhe);Sar=r(Hmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hmt.forEach(t),Par=i(Vl),Fc=n(Vl,"P",{});var eQ=s(Fc);$ar=r(eQ,`Note:
Loading a model from its configuration file does `),jhe=n(eQ,"STRONG",{});var Umt=s(jhe);Iar=r(Umt,"not"),Umt.forEach(t),Dar=r(eQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qhe=n(eQ,"CODE",{});var Jmt=s(qhe);Nar=r(Jmt,"from_pretrained()"),Jmt.forEach(t),jar=r(eQ,"to load the model weights."),eQ.forEach(t),qar=i(Vl),Ghe=n(Vl,"P",{});var Ymt=s(Ghe);Gar=r(Ymt,"Examples:"),Ymt.forEach(t),Oar=i(Vl),m(lA.$$.fragment,Vl),Vl.forEach(t),Xar=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(iA.$$.fragment,ua),Var=i(ua),Ohe=n(ua,"P",{});var Kmt=s(Ohe);zar=r(Kmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kmt.forEach(t),War=i(ua),bn=n(ua,"P",{});var qE=s(bn);Qar=r(qE,"The model class to instantiate is selected based on the "),Xhe=n(qE,"CODE",{});var Zmt=s(Xhe);Har=r(Zmt,"model_type"),Zmt.forEach(t),Uar=r(qE,` property of the config object (either
passed as an argument or loaded from `),Vhe=n(qE,"CODE",{});var egt=s(Vhe);Jar=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),Yar=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(qE,"CODE",{});var ogt=s(zhe);Kar=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),Zar=r(qE,":"),qE.forEach(t),enr=i(ua),ge=n(ua,"UL",{});var Fe=s(ge);xT=n(Fe,"LI",{});var o7e=s(xT);Whe=n(o7e,"STRONG",{});var rgt=s(Whe);onr=r(rgt,"bert"),rgt.forEach(t),rnr=r(o7e," \u2014 "),qG=n(o7e,"A",{href:!0});var tgt=s(qG);tnr=r(tgt,"TFBertLMHeadModel"),tgt.forEach(t),anr=r(o7e," (BERT model)"),o7e.forEach(t),nnr=i(Fe),kT=n(Fe,"LI",{});var r7e=s(kT);Qhe=n(r7e,"STRONG",{});var agt=s(Qhe);snr=r(agt,"camembert"),agt.forEach(t),lnr=r(r7e," \u2014 "),GG=n(r7e,"A",{href:!0});var ngt=s(GG);inr=r(ngt,"TFCamembertForCausalLM"),ngt.forEach(t),dnr=r(r7e," (CamemBERT model)"),r7e.forEach(t),cnr=i(Fe),RT=n(Fe,"LI",{});var t7e=s(RT);Hhe=n(t7e,"STRONG",{});var sgt=s(Hhe);fnr=r(sgt,"ctrl"),sgt.forEach(t),mnr=r(t7e," \u2014 "),OG=n(t7e,"A",{href:!0});var lgt=s(OG);gnr=r(lgt,"TFCTRLLMHeadModel"),lgt.forEach(t),hnr=r(t7e," (CTRL model)"),t7e.forEach(t),pnr=i(Fe),ST=n(Fe,"LI",{});var a7e=s(ST);Uhe=n(a7e,"STRONG",{});var igt=s(Uhe);_nr=r(igt,"gpt2"),igt.forEach(t),unr=r(a7e," \u2014 "),XG=n(a7e,"A",{href:!0});var dgt=s(XG);bnr=r(dgt,"TFGPT2LMHeadModel"),dgt.forEach(t),vnr=r(a7e," (OpenAI GPT-2 model)"),a7e.forEach(t),Tnr=i(Fe),PT=n(Fe,"LI",{});var n7e=s(PT);Jhe=n(n7e,"STRONG",{});var cgt=s(Jhe);Fnr=r(cgt,"openai-gpt"),cgt.forEach(t),Cnr=r(n7e," \u2014 "),VG=n(n7e,"A",{href:!0});var fgt=s(VG);Mnr=r(fgt,"TFOpenAIGPTLMHeadModel"),fgt.forEach(t),Enr=r(n7e," (OpenAI GPT model)"),n7e.forEach(t),ynr=i(Fe),$T=n(Fe,"LI",{});var s7e=s($T);Yhe=n(s7e,"STRONG",{});var mgt=s(Yhe);wnr=r(mgt,"rembert"),mgt.forEach(t),Anr=r(s7e," \u2014 "),zG=n(s7e,"A",{href:!0});var ggt=s(zG);Lnr=r(ggt,"TFRemBertForCausalLM"),ggt.forEach(t),Bnr=r(s7e," (RemBERT model)"),s7e.forEach(t),xnr=i(Fe),IT=n(Fe,"LI",{});var l7e=s(IT);Khe=n(l7e,"STRONG",{});var hgt=s(Khe);knr=r(hgt,"roberta"),hgt.forEach(t),Rnr=r(l7e," \u2014 "),WG=n(l7e,"A",{href:!0});var pgt=s(WG);Snr=r(pgt,"TFRobertaForCausalLM"),pgt.forEach(t),Pnr=r(l7e," (RoBERTa model)"),l7e.forEach(t),$nr=i(Fe),DT=n(Fe,"LI",{});var i7e=s(DT);Zhe=n(i7e,"STRONG",{});var _gt=s(Zhe);Inr=r(_gt,"roformer"),_gt.forEach(t),Dnr=r(i7e," \u2014 "),QG=n(i7e,"A",{href:!0});var ugt=s(QG);Nnr=r(ugt,"TFRoFormerForCausalLM"),ugt.forEach(t),jnr=r(i7e," (RoFormer model)"),i7e.forEach(t),qnr=i(Fe),NT=n(Fe,"LI",{});var d7e=s(NT);epe=n(d7e,"STRONG",{});var bgt=s(epe);Gnr=r(bgt,"transfo-xl"),bgt.forEach(t),Onr=r(d7e," \u2014 "),HG=n(d7e,"A",{href:!0});var vgt=s(HG);Xnr=r(vgt,"TFTransfoXLLMHeadModel"),vgt.forEach(t),Vnr=r(d7e," (Transformer-XL model)"),d7e.forEach(t),znr=i(Fe),jT=n(Fe,"LI",{});var c7e=s(jT);ope=n(c7e,"STRONG",{});var Tgt=s(ope);Wnr=r(Tgt,"xlm"),Tgt.forEach(t),Qnr=r(c7e," \u2014 "),UG=n(c7e,"A",{href:!0});var Fgt=s(UG);Hnr=r(Fgt,"TFXLMWithLMHeadModel"),Fgt.forEach(t),Unr=r(c7e," (XLM model)"),c7e.forEach(t),Jnr=i(Fe),qT=n(Fe,"LI",{});var f7e=s(qT);rpe=n(f7e,"STRONG",{});var Cgt=s(rpe);Ynr=r(Cgt,"xlnet"),Cgt.forEach(t),Knr=r(f7e," \u2014 "),JG=n(f7e,"A",{href:!0});var Mgt=s(JG);Znr=r(Mgt,"TFXLNetLMHeadModel"),Mgt.forEach(t),esr=r(f7e," (XLNet model)"),f7e.forEach(t),Fe.forEach(t),osr=i(ua),tpe=n(ua,"P",{});var Egt=s(tpe);rsr=r(Egt,"Examples:"),Egt.forEach(t),tsr=i(ua),m(dA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),ERe=i(c),Cc=n(c,"H2",{class:!0});var PPe=s(Cc);GT=n(PPe,"A",{id:!0,class:!0,href:!0});var ygt=s(GT);ape=n(ygt,"SPAN",{});var wgt=s(ape);m(cA.$$.fragment,wgt),wgt.forEach(t),ygt.forEach(t),asr=i(PPe),npe=n(PPe,"SPAN",{});var Agt=s(npe);nsr=r(Agt,"TFAutoModelForImageClassification"),Agt.forEach(t),PPe.forEach(t),yRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(fA.$$.fragment,zl),ssr=i(zl),Mc=n(zl,"P",{});var oQ=s(Mc);lsr=r(oQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),spe=n(oQ,"CODE",{});var Lgt=s(spe);isr=r(Lgt,"from_pretrained()"),Lgt.forEach(t),dsr=r(oQ,"class method or the "),lpe=n(oQ,"CODE",{});var Bgt=s(lpe);csr=r(Bgt,"from_config()"),Bgt.forEach(t),fsr=r(oQ,`class
method.`),oQ.forEach(t),msr=i(zl),mA=n(zl,"P",{});var $Pe=s(mA);gsr=r($Pe,"This class cannot be instantiated directly using "),ipe=n($Pe,"CODE",{});var xgt=s(ipe);hsr=r(xgt,"__init__()"),xgt.forEach(t),psr=r($Pe," (throws an error)."),$Pe.forEach(t),_sr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(gA.$$.fragment,Wl),usr=i(Wl),dpe=n(Wl,"P",{});var kgt=s(dpe);bsr=r(kgt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kgt.forEach(t),vsr=i(Wl),Ec=n(Wl,"P",{});var rQ=s(Ec);Tsr=r(rQ,`Note:
Loading a model from its configuration file does `),cpe=n(rQ,"STRONG",{});var Rgt=s(cpe);Fsr=r(Rgt,"not"),Rgt.forEach(t),Csr=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fpe=n(rQ,"CODE",{});var Sgt=s(fpe);Msr=r(Sgt,"from_pretrained()"),Sgt.forEach(t),Esr=r(rQ,"to load the model weights."),rQ.forEach(t),ysr=i(Wl),mpe=n(Wl,"P",{});var Pgt=s(mpe);wsr=r(Pgt,"Examples:"),Pgt.forEach(t),Asr=i(Wl),m(hA.$$.fragment,Wl),Wl.forEach(t),Lsr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(pA.$$.fragment,ba),Bsr=i(ba),gpe=n(ba,"P",{});var $gt=s(gpe);xsr=r($gt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$gt.forEach(t),ksr=i(ba),vn=n(ba,"P",{});var GE=s(vn);Rsr=r(GE,"The model class to instantiate is selected based on the "),hpe=n(GE,"CODE",{});var Igt=s(hpe);Ssr=r(Igt,"model_type"),Igt.forEach(t),Psr=r(GE,` property of the config object (either
passed as an argument or loaded from `),ppe=n(GE,"CODE",{});var Dgt=s(ppe);$sr=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),Isr=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(GE,"CODE",{});var Ngt=s(_pe);Dsr=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),Nsr=r(GE,":"),GE.forEach(t),jsr=i(ba),_A=n(ba,"UL",{});var IPe=s(_A);OT=n(IPe,"LI",{});var m7e=s(OT);upe=n(m7e,"STRONG",{});var jgt=s(upe);qsr=r(jgt,"convnext"),jgt.forEach(t),Gsr=r(m7e," \u2014 "),YG=n(m7e,"A",{href:!0});var qgt=s(YG);Osr=r(qgt,"TFConvNextForImageClassification"),qgt.forEach(t),Xsr=r(m7e," (ConvNext model)"),m7e.forEach(t),Vsr=i(IPe),XT=n(IPe,"LI",{});var g7e=s(XT);bpe=n(g7e,"STRONG",{});var Ggt=s(bpe);zsr=r(Ggt,"vit"),Ggt.forEach(t),Wsr=r(g7e," \u2014 "),KG=n(g7e,"A",{href:!0});var Ogt=s(KG);Qsr=r(Ogt,"TFViTForImageClassification"),Ogt.forEach(t),Hsr=r(g7e," (ViT model)"),g7e.forEach(t),IPe.forEach(t),Usr=i(ba),vpe=n(ba,"P",{});var Xgt=s(vpe);Jsr=r(Xgt,"Examples:"),Xgt.forEach(t),Ysr=i(ba),m(uA.$$.fragment,ba),ba.forEach(t),zl.forEach(t),wRe=i(c),yc=n(c,"H2",{class:!0});var DPe=s(yc);VT=n(DPe,"A",{id:!0,class:!0,href:!0});var Vgt=s(VT);Tpe=n(Vgt,"SPAN",{});var zgt=s(Tpe);m(bA.$$.fragment,zgt),zgt.forEach(t),Vgt.forEach(t),Ksr=i(DPe),Fpe=n(DPe,"SPAN",{});var Wgt=s(Fpe);Zsr=r(Wgt,"TFAutoModelForMaskedLM"),Wgt.forEach(t),DPe.forEach(t),ARe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(vA.$$.fragment,Ql),elr=i(Ql),wc=n(Ql,"P",{});var tQ=s(wc);olr=r(tQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cpe=n(tQ,"CODE",{});var Qgt=s(Cpe);rlr=r(Qgt,"from_pretrained()"),Qgt.forEach(t),tlr=r(tQ,"class method or the "),Mpe=n(tQ,"CODE",{});var Hgt=s(Mpe);alr=r(Hgt,"from_config()"),Hgt.forEach(t),nlr=r(tQ,`class
method.`),tQ.forEach(t),slr=i(Ql),TA=n(Ql,"P",{});var NPe=s(TA);llr=r(NPe,"This class cannot be instantiated directly using "),Epe=n(NPe,"CODE",{});var Ugt=s(Epe);ilr=r(Ugt,"__init__()"),Ugt.forEach(t),dlr=r(NPe," (throws an error)."),NPe.forEach(t),clr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(FA.$$.fragment,Hl),flr=i(Hl),ype=n(Hl,"P",{});var Jgt=s(ype);mlr=r(Jgt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jgt.forEach(t),glr=i(Hl),Ac=n(Hl,"P",{});var aQ=s(Ac);hlr=r(aQ,`Note:
Loading a model from its configuration file does `),wpe=n(aQ,"STRONG",{});var Ygt=s(wpe);plr=r(Ygt,"not"),Ygt.forEach(t),_lr=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ape=n(aQ,"CODE",{});var Kgt=s(Ape);ulr=r(Kgt,"from_pretrained()"),Kgt.forEach(t),blr=r(aQ,"to load the model weights."),aQ.forEach(t),vlr=i(Hl),Lpe=n(Hl,"P",{});var Zgt=s(Lpe);Tlr=r(Zgt,"Examples:"),Zgt.forEach(t),Flr=i(Hl),m(CA.$$.fragment,Hl),Hl.forEach(t),Clr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(MA.$$.fragment,va),Mlr=i(va),Bpe=n(va,"P",{});var eht=s(Bpe);Elr=r(eht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eht.forEach(t),ylr=i(va),Tn=n(va,"P",{});var OE=s(Tn);wlr=r(OE,"The model class to instantiate is selected based on the "),xpe=n(OE,"CODE",{});var oht=s(xpe);Alr=r(oht,"model_type"),oht.forEach(t),Llr=r(OE,` property of the config object (either
passed as an argument or loaded from `),kpe=n(OE,"CODE",{});var rht=s(kpe);Blr=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),xlr=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(OE,"CODE",{});var tht=s(Rpe);klr=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),Rlr=r(OE,":"),OE.forEach(t),Slr=i(va),J=n(va,"UL",{});var ee=s(J);zT=n(ee,"LI",{});var h7e=s(zT);Spe=n(h7e,"STRONG",{});var aht=s(Spe);Plr=r(aht,"albert"),aht.forEach(t),$lr=r(h7e," \u2014 "),ZG=n(h7e,"A",{href:!0});var nht=s(ZG);Ilr=r(nht,"TFAlbertForMaskedLM"),nht.forEach(t),Dlr=r(h7e," (ALBERT model)"),h7e.forEach(t),Nlr=i(ee),WT=n(ee,"LI",{});var p7e=s(WT);Ppe=n(p7e,"STRONG",{});var sht=s(Ppe);jlr=r(sht,"bert"),sht.forEach(t),qlr=r(p7e," \u2014 "),eO=n(p7e,"A",{href:!0});var lht=s(eO);Glr=r(lht,"TFBertForMaskedLM"),lht.forEach(t),Olr=r(p7e," (BERT model)"),p7e.forEach(t),Xlr=i(ee),QT=n(ee,"LI",{});var _7e=s(QT);$pe=n(_7e,"STRONG",{});var iht=s($pe);Vlr=r(iht,"camembert"),iht.forEach(t),zlr=r(_7e," \u2014 "),oO=n(_7e,"A",{href:!0});var dht=s(oO);Wlr=r(dht,"TFCamembertForMaskedLM"),dht.forEach(t),Qlr=r(_7e," (CamemBERT model)"),_7e.forEach(t),Hlr=i(ee),HT=n(ee,"LI",{});var u7e=s(HT);Ipe=n(u7e,"STRONG",{});var cht=s(Ipe);Ulr=r(cht,"convbert"),cht.forEach(t),Jlr=r(u7e," \u2014 "),rO=n(u7e,"A",{href:!0});var fht=s(rO);Ylr=r(fht,"TFConvBertForMaskedLM"),fht.forEach(t),Klr=r(u7e," (ConvBERT model)"),u7e.forEach(t),Zlr=i(ee),UT=n(ee,"LI",{});var b7e=s(UT);Dpe=n(b7e,"STRONG",{});var mht=s(Dpe);eir=r(mht,"deberta"),mht.forEach(t),oir=r(b7e," \u2014 "),tO=n(b7e,"A",{href:!0});var ght=s(tO);rir=r(ght,"TFDebertaForMaskedLM"),ght.forEach(t),tir=r(b7e," (DeBERTa model)"),b7e.forEach(t),air=i(ee),JT=n(ee,"LI",{});var v7e=s(JT);Npe=n(v7e,"STRONG",{});var hht=s(Npe);nir=r(hht,"deberta-v2"),hht.forEach(t),sir=r(v7e," \u2014 "),aO=n(v7e,"A",{href:!0});var pht=s(aO);lir=r(pht,"TFDebertaV2ForMaskedLM"),pht.forEach(t),iir=r(v7e," (DeBERTa-v2 model)"),v7e.forEach(t),dir=i(ee),YT=n(ee,"LI",{});var T7e=s(YT);jpe=n(T7e,"STRONG",{});var _ht=s(jpe);cir=r(_ht,"distilbert"),_ht.forEach(t),fir=r(T7e," \u2014 "),nO=n(T7e,"A",{href:!0});var uht=s(nO);mir=r(uht,"TFDistilBertForMaskedLM"),uht.forEach(t),gir=r(T7e," (DistilBERT model)"),T7e.forEach(t),hir=i(ee),KT=n(ee,"LI",{});var F7e=s(KT);qpe=n(F7e,"STRONG",{});var bht=s(qpe);pir=r(bht,"electra"),bht.forEach(t),_ir=r(F7e," \u2014 "),sO=n(F7e,"A",{href:!0});var vht=s(sO);uir=r(vht,"TFElectraForMaskedLM"),vht.forEach(t),bir=r(F7e," (ELECTRA model)"),F7e.forEach(t),vir=i(ee),ZT=n(ee,"LI",{});var C7e=s(ZT);Gpe=n(C7e,"STRONG",{});var Tht=s(Gpe);Tir=r(Tht,"flaubert"),Tht.forEach(t),Fir=r(C7e," \u2014 "),lO=n(C7e,"A",{href:!0});var Fht=s(lO);Cir=r(Fht,"TFFlaubertWithLMHeadModel"),Fht.forEach(t),Mir=r(C7e," (FlauBERT model)"),C7e.forEach(t),Eir=i(ee),eF=n(ee,"LI",{});var M7e=s(eF);Ope=n(M7e,"STRONG",{});var Cht=s(Ope);yir=r(Cht,"funnel"),Cht.forEach(t),wir=r(M7e," \u2014 "),iO=n(M7e,"A",{href:!0});var Mht=s(iO);Air=r(Mht,"TFFunnelForMaskedLM"),Mht.forEach(t),Lir=r(M7e," (Funnel Transformer model)"),M7e.forEach(t),Bir=i(ee),oF=n(ee,"LI",{});var E7e=s(oF);Xpe=n(E7e,"STRONG",{});var Eht=s(Xpe);xir=r(Eht,"layoutlm"),Eht.forEach(t),kir=r(E7e," \u2014 "),dO=n(E7e,"A",{href:!0});var yht=s(dO);Rir=r(yht,"TFLayoutLMForMaskedLM"),yht.forEach(t),Sir=r(E7e," (LayoutLM model)"),E7e.forEach(t),Pir=i(ee),rF=n(ee,"LI",{});var y7e=s(rF);Vpe=n(y7e,"STRONG",{});var wht=s(Vpe);$ir=r(wht,"longformer"),wht.forEach(t),Iir=r(y7e," \u2014 "),cO=n(y7e,"A",{href:!0});var Aht=s(cO);Dir=r(Aht,"TFLongformerForMaskedLM"),Aht.forEach(t),Nir=r(y7e," (Longformer model)"),y7e.forEach(t),jir=i(ee),tF=n(ee,"LI",{});var w7e=s(tF);zpe=n(w7e,"STRONG",{});var Lht=s(zpe);qir=r(Lht,"mobilebert"),Lht.forEach(t),Gir=r(w7e," \u2014 "),fO=n(w7e,"A",{href:!0});var Bht=s(fO);Oir=r(Bht,"TFMobileBertForMaskedLM"),Bht.forEach(t),Xir=r(w7e," (MobileBERT model)"),w7e.forEach(t),Vir=i(ee),aF=n(ee,"LI",{});var A7e=s(aF);Wpe=n(A7e,"STRONG",{});var xht=s(Wpe);zir=r(xht,"mpnet"),xht.forEach(t),Wir=r(A7e," \u2014 "),mO=n(A7e,"A",{href:!0});var kht=s(mO);Qir=r(kht,"TFMPNetForMaskedLM"),kht.forEach(t),Hir=r(A7e," (MPNet model)"),A7e.forEach(t),Uir=i(ee),nF=n(ee,"LI",{});var L7e=s(nF);Qpe=n(L7e,"STRONG",{});var Rht=s(Qpe);Jir=r(Rht,"rembert"),Rht.forEach(t),Yir=r(L7e," \u2014 "),gO=n(L7e,"A",{href:!0});var Sht=s(gO);Kir=r(Sht,"TFRemBertForMaskedLM"),Sht.forEach(t),Zir=r(L7e," (RemBERT model)"),L7e.forEach(t),edr=i(ee),sF=n(ee,"LI",{});var B7e=s(sF);Hpe=n(B7e,"STRONG",{});var Pht=s(Hpe);odr=r(Pht,"roberta"),Pht.forEach(t),rdr=r(B7e," \u2014 "),hO=n(B7e,"A",{href:!0});var $ht=s(hO);tdr=r($ht,"TFRobertaForMaskedLM"),$ht.forEach(t),adr=r(B7e," (RoBERTa model)"),B7e.forEach(t),ndr=i(ee),lF=n(ee,"LI",{});var x7e=s(lF);Upe=n(x7e,"STRONG",{});var Iht=s(Upe);sdr=r(Iht,"roformer"),Iht.forEach(t),ldr=r(x7e," \u2014 "),pO=n(x7e,"A",{href:!0});var Dht=s(pO);idr=r(Dht,"TFRoFormerForMaskedLM"),Dht.forEach(t),ddr=r(x7e," (RoFormer model)"),x7e.forEach(t),cdr=i(ee),iF=n(ee,"LI",{});var k7e=s(iF);Jpe=n(k7e,"STRONG",{});var Nht=s(Jpe);fdr=r(Nht,"tapas"),Nht.forEach(t),mdr=r(k7e," \u2014 "),_O=n(k7e,"A",{href:!0});var jht=s(_O);gdr=r(jht,"TFTapasForMaskedLM"),jht.forEach(t),hdr=r(k7e," (TAPAS model)"),k7e.forEach(t),pdr=i(ee),dF=n(ee,"LI",{});var R7e=s(dF);Ype=n(R7e,"STRONG",{});var qht=s(Ype);_dr=r(qht,"xlm"),qht.forEach(t),udr=r(R7e," \u2014 "),uO=n(R7e,"A",{href:!0});var Ght=s(uO);bdr=r(Ght,"TFXLMWithLMHeadModel"),Ght.forEach(t),vdr=r(R7e," (XLM model)"),R7e.forEach(t),Tdr=i(ee),cF=n(ee,"LI",{});var S7e=s(cF);Kpe=n(S7e,"STRONG",{});var Oht=s(Kpe);Fdr=r(Oht,"xlm-roberta"),Oht.forEach(t),Cdr=r(S7e," \u2014 "),bO=n(S7e,"A",{href:!0});var Xht=s(bO);Mdr=r(Xht,"TFXLMRobertaForMaskedLM"),Xht.forEach(t),Edr=r(S7e," (XLM-RoBERTa model)"),S7e.forEach(t),ee.forEach(t),ydr=i(va),Zpe=n(va,"P",{});var Vht=s(Zpe);wdr=r(Vht,"Examples:"),Vht.forEach(t),Adr=i(va),m(EA.$$.fragment,va),va.forEach(t),Ql.forEach(t),LRe=i(c),Lc=n(c,"H2",{class:!0});var jPe=s(Lc);fF=n(jPe,"A",{id:!0,class:!0,href:!0});var zht=s(fF);e_e=n(zht,"SPAN",{});var Wht=s(e_e);m(yA.$$.fragment,Wht),Wht.forEach(t),zht.forEach(t),Ldr=i(jPe),o_e=n(jPe,"SPAN",{});var Qht=s(o_e);Bdr=r(Qht,"TFAutoModelForSeq2SeqLM"),Qht.forEach(t),jPe.forEach(t),BRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(wA.$$.fragment,Ul),xdr=i(Ul),Bc=n(Ul,"P",{});var nQ=s(Bc);kdr=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),r_e=n(nQ,"CODE",{});var Hht=s(r_e);Rdr=r(Hht,"from_pretrained()"),Hht.forEach(t),Sdr=r(nQ,"class method or the "),t_e=n(nQ,"CODE",{});var Uht=s(t_e);Pdr=r(Uht,"from_config()"),Uht.forEach(t),$dr=r(nQ,`class
method.`),nQ.forEach(t),Idr=i(Ul),AA=n(Ul,"P",{});var qPe=s(AA);Ddr=r(qPe,"This class cannot be instantiated directly using "),a_e=n(qPe,"CODE",{});var Jht=s(a_e);Ndr=r(Jht,"__init__()"),Jht.forEach(t),jdr=r(qPe," (throws an error)."),qPe.forEach(t),qdr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(LA.$$.fragment,Jl),Gdr=i(Jl),n_e=n(Jl,"P",{});var Yht=s(n_e);Odr=r(Yht,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Yht.forEach(t),Xdr=i(Jl),xc=n(Jl,"P",{});var sQ=s(xc);Vdr=r(sQ,`Note:
Loading a model from its configuration file does `),s_e=n(sQ,"STRONG",{});var Kht=s(s_e);zdr=r(Kht,"not"),Kht.forEach(t),Wdr=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),l_e=n(sQ,"CODE",{});var Zht=s(l_e);Qdr=r(Zht,"from_pretrained()"),Zht.forEach(t),Hdr=r(sQ,"to load the model weights."),sQ.forEach(t),Udr=i(Jl),i_e=n(Jl,"P",{});var ept=s(i_e);Jdr=r(ept,"Examples:"),ept.forEach(t),Ydr=i(Jl),m(BA.$$.fragment,Jl),Jl.forEach(t),Kdr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(xA.$$.fragment,Ta),Zdr=i(Ta),d_e=n(Ta,"P",{});var opt=s(d_e);ecr=r(opt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),opt.forEach(t),ocr=i(Ta),Fn=n(Ta,"P",{});var XE=s(Fn);rcr=r(XE,"The model class to instantiate is selected based on the "),c_e=n(XE,"CODE",{});var rpt=s(c_e);tcr=r(rpt,"model_type"),rpt.forEach(t),acr=r(XE,` property of the config object (either
passed as an argument or loaded from `),f_e=n(XE,"CODE",{});var tpt=s(f_e);ncr=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),scr=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(XE,"CODE",{});var apt=s(m_e);lcr=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),icr=r(XE,":"),XE.forEach(t),dcr=i(Ta),_e=n(Ta,"UL",{});var ye=s(_e);mF=n(ye,"LI",{});var P7e=s(mF);g_e=n(P7e,"STRONG",{});var npt=s(g_e);ccr=r(npt,"bart"),npt.forEach(t),fcr=r(P7e," \u2014 "),vO=n(P7e,"A",{href:!0});var spt=s(vO);mcr=r(spt,"TFBartForConditionalGeneration"),spt.forEach(t),gcr=r(P7e," (BART model)"),P7e.forEach(t),hcr=i(ye),gF=n(ye,"LI",{});var $7e=s(gF);h_e=n($7e,"STRONG",{});var lpt=s(h_e);pcr=r(lpt,"blenderbot"),lpt.forEach(t),_cr=r($7e," \u2014 "),TO=n($7e,"A",{href:!0});var ipt=s(TO);ucr=r(ipt,"TFBlenderbotForConditionalGeneration"),ipt.forEach(t),bcr=r($7e," (Blenderbot model)"),$7e.forEach(t),vcr=i(ye),hF=n(ye,"LI",{});var I7e=s(hF);p_e=n(I7e,"STRONG",{});var dpt=s(p_e);Tcr=r(dpt,"blenderbot-small"),dpt.forEach(t),Fcr=r(I7e," \u2014 "),FO=n(I7e,"A",{href:!0});var cpt=s(FO);Ccr=r(cpt,"TFBlenderbotSmallForConditionalGeneration"),cpt.forEach(t),Mcr=r(I7e," (BlenderbotSmall model)"),I7e.forEach(t),Ecr=i(ye),pF=n(ye,"LI",{});var D7e=s(pF);__e=n(D7e,"STRONG",{});var fpt=s(__e);ycr=r(fpt,"encoder-decoder"),fpt.forEach(t),wcr=r(D7e," \u2014 "),CO=n(D7e,"A",{href:!0});var mpt=s(CO);Acr=r(mpt,"TFEncoderDecoderModel"),mpt.forEach(t),Lcr=r(D7e," (Encoder decoder model)"),D7e.forEach(t),Bcr=i(ye),_F=n(ye,"LI",{});var N7e=s(_F);u_e=n(N7e,"STRONG",{});var gpt=s(u_e);xcr=r(gpt,"led"),gpt.forEach(t),kcr=r(N7e," \u2014 "),MO=n(N7e,"A",{href:!0});var hpt=s(MO);Rcr=r(hpt,"TFLEDForConditionalGeneration"),hpt.forEach(t),Scr=r(N7e," (LED model)"),N7e.forEach(t),Pcr=i(ye),uF=n(ye,"LI",{});var j7e=s(uF);b_e=n(j7e,"STRONG",{});var ppt=s(b_e);$cr=r(ppt,"marian"),ppt.forEach(t),Icr=r(j7e," \u2014 "),EO=n(j7e,"A",{href:!0});var _pt=s(EO);Dcr=r(_pt,"TFMarianMTModel"),_pt.forEach(t),Ncr=r(j7e," (Marian model)"),j7e.forEach(t),jcr=i(ye),bF=n(ye,"LI",{});var q7e=s(bF);v_e=n(q7e,"STRONG",{});var upt=s(v_e);qcr=r(upt,"mbart"),upt.forEach(t),Gcr=r(q7e," \u2014 "),yO=n(q7e,"A",{href:!0});var bpt=s(yO);Ocr=r(bpt,"TFMBartForConditionalGeneration"),bpt.forEach(t),Xcr=r(q7e," (mBART model)"),q7e.forEach(t),Vcr=i(ye),vF=n(ye,"LI",{});var G7e=s(vF);T_e=n(G7e,"STRONG",{});var vpt=s(T_e);zcr=r(vpt,"mt5"),vpt.forEach(t),Wcr=r(G7e," \u2014 "),wO=n(G7e,"A",{href:!0});var Tpt=s(wO);Qcr=r(Tpt,"TFMT5ForConditionalGeneration"),Tpt.forEach(t),Hcr=r(G7e," (mT5 model)"),G7e.forEach(t),Ucr=i(ye),TF=n(ye,"LI",{});var O7e=s(TF);F_e=n(O7e,"STRONG",{});var Fpt=s(F_e);Jcr=r(Fpt,"pegasus"),Fpt.forEach(t),Ycr=r(O7e," \u2014 "),AO=n(O7e,"A",{href:!0});var Cpt=s(AO);Kcr=r(Cpt,"TFPegasusForConditionalGeneration"),Cpt.forEach(t),Zcr=r(O7e," (Pegasus model)"),O7e.forEach(t),efr=i(ye),FF=n(ye,"LI",{});var X7e=s(FF);C_e=n(X7e,"STRONG",{});var Mpt=s(C_e);ofr=r(Mpt,"t5"),Mpt.forEach(t),rfr=r(X7e," \u2014 "),LO=n(X7e,"A",{href:!0});var Ept=s(LO);tfr=r(Ept,"TFT5ForConditionalGeneration"),Ept.forEach(t),afr=r(X7e," (T5 model)"),X7e.forEach(t),ye.forEach(t),nfr=i(Ta),M_e=n(Ta,"P",{});var ypt=s(M_e);sfr=r(ypt,"Examples:"),ypt.forEach(t),lfr=i(Ta),m(kA.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),xRe=i(c),kc=n(c,"H2",{class:!0});var GPe=s(kc);CF=n(GPe,"A",{id:!0,class:!0,href:!0});var wpt=s(CF);E_e=n(wpt,"SPAN",{});var Apt=s(E_e);m(RA.$$.fragment,Apt),Apt.forEach(t),wpt.forEach(t),ifr=i(GPe),y_e=n(GPe,"SPAN",{});var Lpt=s(y_e);dfr=r(Lpt,"TFAutoModelForSequenceClassification"),Lpt.forEach(t),GPe.forEach(t),kRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(SA.$$.fragment,Yl),cfr=i(Yl),Rc=n(Yl,"P",{});var lQ=s(Rc);ffr=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),w_e=n(lQ,"CODE",{});var Bpt=s(w_e);mfr=r(Bpt,"from_pretrained()"),Bpt.forEach(t),gfr=r(lQ,"class method or the "),A_e=n(lQ,"CODE",{});var xpt=s(A_e);hfr=r(xpt,"from_config()"),xpt.forEach(t),pfr=r(lQ,`class
method.`),lQ.forEach(t),_fr=i(Yl),PA=n(Yl,"P",{});var OPe=s(PA);ufr=r(OPe,"This class cannot be instantiated directly using "),L_e=n(OPe,"CODE",{});var kpt=s(L_e);bfr=r(kpt,"__init__()"),kpt.forEach(t),vfr=r(OPe," (throws an error)."),OPe.forEach(t),Tfr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m($A.$$.fragment,Kl),Ffr=i(Kl),B_e=n(Kl,"P",{});var Rpt=s(B_e);Cfr=r(Rpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rpt.forEach(t),Mfr=i(Kl),Sc=n(Kl,"P",{});var iQ=s(Sc);Efr=r(iQ,`Note:
Loading a model from its configuration file does `),x_e=n(iQ,"STRONG",{});var Spt=s(x_e);yfr=r(Spt,"not"),Spt.forEach(t),wfr=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=n(iQ,"CODE",{});var Ppt=s(k_e);Afr=r(Ppt,"from_pretrained()"),Ppt.forEach(t),Lfr=r(iQ,"to load the model weights."),iQ.forEach(t),Bfr=i(Kl),R_e=n(Kl,"P",{});var $pt=s(R_e);xfr=r($pt,"Examples:"),$pt.forEach(t),kfr=i(Kl),m(IA.$$.fragment,Kl),Kl.forEach(t),Rfr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(DA.$$.fragment,Fa),Sfr=i(Fa),S_e=n(Fa,"P",{});var Ipt=s(S_e);Pfr=r(Ipt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ipt.forEach(t),$fr=i(Fa),Cn=n(Fa,"P",{});var VE=s(Cn);Ifr=r(VE,"The model class to instantiate is selected based on the "),P_e=n(VE,"CODE",{});var Dpt=s(P_e);Dfr=r(Dpt,"model_type"),Dpt.forEach(t),Nfr=r(VE,` property of the config object (either
passed as an argument or loaded from `),$_e=n(VE,"CODE",{});var Npt=s($_e);jfr=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),qfr=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(VE,"CODE",{});var jpt=s(I_e);Gfr=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),Ofr=r(VE,":"),VE.forEach(t),Xfr=i(Fa),V=n(Fa,"UL",{});var W=s(V);MF=n(W,"LI",{});var V7e=s(MF);D_e=n(V7e,"STRONG",{});var qpt=s(D_e);Vfr=r(qpt,"albert"),qpt.forEach(t),zfr=r(V7e," \u2014 "),BO=n(V7e,"A",{href:!0});var Gpt=s(BO);Wfr=r(Gpt,"TFAlbertForSequenceClassification"),Gpt.forEach(t),Qfr=r(V7e," (ALBERT model)"),V7e.forEach(t),Hfr=i(W),EF=n(W,"LI",{});var z7e=s(EF);N_e=n(z7e,"STRONG",{});var Opt=s(N_e);Ufr=r(Opt,"bert"),Opt.forEach(t),Jfr=r(z7e," \u2014 "),xO=n(z7e,"A",{href:!0});var Xpt=s(xO);Yfr=r(Xpt,"TFBertForSequenceClassification"),Xpt.forEach(t),Kfr=r(z7e," (BERT model)"),z7e.forEach(t),Zfr=i(W),yF=n(W,"LI",{});var W7e=s(yF);j_e=n(W7e,"STRONG",{});var Vpt=s(j_e);emr=r(Vpt,"camembert"),Vpt.forEach(t),omr=r(W7e," \u2014 "),kO=n(W7e,"A",{href:!0});var zpt=s(kO);rmr=r(zpt,"TFCamembertForSequenceClassification"),zpt.forEach(t),tmr=r(W7e," (CamemBERT model)"),W7e.forEach(t),amr=i(W),wF=n(W,"LI",{});var Q7e=s(wF);q_e=n(Q7e,"STRONG",{});var Wpt=s(q_e);nmr=r(Wpt,"convbert"),Wpt.forEach(t),smr=r(Q7e," \u2014 "),RO=n(Q7e,"A",{href:!0});var Qpt=s(RO);lmr=r(Qpt,"TFConvBertForSequenceClassification"),Qpt.forEach(t),imr=r(Q7e," (ConvBERT model)"),Q7e.forEach(t),dmr=i(W),AF=n(W,"LI",{});var H7e=s(AF);G_e=n(H7e,"STRONG",{});var Hpt=s(G_e);cmr=r(Hpt,"ctrl"),Hpt.forEach(t),fmr=r(H7e," \u2014 "),SO=n(H7e,"A",{href:!0});var Upt=s(SO);mmr=r(Upt,"TFCTRLForSequenceClassification"),Upt.forEach(t),gmr=r(H7e," (CTRL model)"),H7e.forEach(t),hmr=i(W),LF=n(W,"LI",{});var U7e=s(LF);O_e=n(U7e,"STRONG",{});var Jpt=s(O_e);pmr=r(Jpt,"deberta"),Jpt.forEach(t),_mr=r(U7e," \u2014 "),PO=n(U7e,"A",{href:!0});var Ypt=s(PO);umr=r(Ypt,"TFDebertaForSequenceClassification"),Ypt.forEach(t),bmr=r(U7e," (DeBERTa model)"),U7e.forEach(t),vmr=i(W),BF=n(W,"LI",{});var J7e=s(BF);X_e=n(J7e,"STRONG",{});var Kpt=s(X_e);Tmr=r(Kpt,"deberta-v2"),Kpt.forEach(t),Fmr=r(J7e," \u2014 "),$O=n(J7e,"A",{href:!0});var Zpt=s($O);Cmr=r(Zpt,"TFDebertaV2ForSequenceClassification"),Zpt.forEach(t),Mmr=r(J7e," (DeBERTa-v2 model)"),J7e.forEach(t),Emr=i(W),xF=n(W,"LI",{});var Y7e=s(xF);V_e=n(Y7e,"STRONG",{});var e_t=s(V_e);ymr=r(e_t,"distilbert"),e_t.forEach(t),wmr=r(Y7e," \u2014 "),IO=n(Y7e,"A",{href:!0});var o_t=s(IO);Amr=r(o_t,"TFDistilBertForSequenceClassification"),o_t.forEach(t),Lmr=r(Y7e," (DistilBERT model)"),Y7e.forEach(t),Bmr=i(W),kF=n(W,"LI",{});var K7e=s(kF);z_e=n(K7e,"STRONG",{});var r_t=s(z_e);xmr=r(r_t,"electra"),r_t.forEach(t),kmr=r(K7e," \u2014 "),DO=n(K7e,"A",{href:!0});var t_t=s(DO);Rmr=r(t_t,"TFElectraForSequenceClassification"),t_t.forEach(t),Smr=r(K7e," (ELECTRA model)"),K7e.forEach(t),Pmr=i(W),RF=n(W,"LI",{});var Z7e=s(RF);W_e=n(Z7e,"STRONG",{});var a_t=s(W_e);$mr=r(a_t,"flaubert"),a_t.forEach(t),Imr=r(Z7e," \u2014 "),NO=n(Z7e,"A",{href:!0});var n_t=s(NO);Dmr=r(n_t,"TFFlaubertForSequenceClassification"),n_t.forEach(t),Nmr=r(Z7e," (FlauBERT model)"),Z7e.forEach(t),jmr=i(W),SF=n(W,"LI",{});var e8e=s(SF);Q_e=n(e8e,"STRONG",{});var s_t=s(Q_e);qmr=r(s_t,"funnel"),s_t.forEach(t),Gmr=r(e8e," \u2014 "),jO=n(e8e,"A",{href:!0});var l_t=s(jO);Omr=r(l_t,"TFFunnelForSequenceClassification"),l_t.forEach(t),Xmr=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),Vmr=i(W),PF=n(W,"LI",{});var o8e=s(PF);H_e=n(o8e,"STRONG",{});var i_t=s(H_e);zmr=r(i_t,"gpt2"),i_t.forEach(t),Wmr=r(o8e," \u2014 "),qO=n(o8e,"A",{href:!0});var d_t=s(qO);Qmr=r(d_t,"TFGPT2ForSequenceClassification"),d_t.forEach(t),Hmr=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),Umr=i(W),$F=n(W,"LI",{});var r8e=s($F);U_e=n(r8e,"STRONG",{});var c_t=s(U_e);Jmr=r(c_t,"layoutlm"),c_t.forEach(t),Ymr=r(r8e," \u2014 "),GO=n(r8e,"A",{href:!0});var f_t=s(GO);Kmr=r(f_t,"TFLayoutLMForSequenceClassification"),f_t.forEach(t),Zmr=r(r8e," (LayoutLM model)"),r8e.forEach(t),egr=i(W),IF=n(W,"LI",{});var t8e=s(IF);J_e=n(t8e,"STRONG",{});var m_t=s(J_e);ogr=r(m_t,"longformer"),m_t.forEach(t),rgr=r(t8e," \u2014 "),OO=n(t8e,"A",{href:!0});var g_t=s(OO);tgr=r(g_t,"TFLongformerForSequenceClassification"),g_t.forEach(t),agr=r(t8e," (Longformer model)"),t8e.forEach(t),ngr=i(W),DF=n(W,"LI",{});var a8e=s(DF);Y_e=n(a8e,"STRONG",{});var h_t=s(Y_e);sgr=r(h_t,"mobilebert"),h_t.forEach(t),lgr=r(a8e," \u2014 "),XO=n(a8e,"A",{href:!0});var p_t=s(XO);igr=r(p_t,"TFMobileBertForSequenceClassification"),p_t.forEach(t),dgr=r(a8e," (MobileBERT model)"),a8e.forEach(t),cgr=i(W),NF=n(W,"LI",{});var n8e=s(NF);K_e=n(n8e,"STRONG",{});var __t=s(K_e);fgr=r(__t,"mpnet"),__t.forEach(t),mgr=r(n8e," \u2014 "),VO=n(n8e,"A",{href:!0});var u_t=s(VO);ggr=r(u_t,"TFMPNetForSequenceClassification"),u_t.forEach(t),hgr=r(n8e," (MPNet model)"),n8e.forEach(t),pgr=i(W),jF=n(W,"LI",{});var s8e=s(jF);Z_e=n(s8e,"STRONG",{});var b_t=s(Z_e);_gr=r(b_t,"openai-gpt"),b_t.forEach(t),ugr=r(s8e," \u2014 "),zO=n(s8e,"A",{href:!0});var v_t=s(zO);bgr=r(v_t,"TFOpenAIGPTForSequenceClassification"),v_t.forEach(t),vgr=r(s8e," (OpenAI GPT model)"),s8e.forEach(t),Tgr=i(W),qF=n(W,"LI",{});var l8e=s(qF);eue=n(l8e,"STRONG",{});var T_t=s(eue);Fgr=r(T_t,"rembert"),T_t.forEach(t),Cgr=r(l8e," \u2014 "),WO=n(l8e,"A",{href:!0});var F_t=s(WO);Mgr=r(F_t,"TFRemBertForSequenceClassification"),F_t.forEach(t),Egr=r(l8e," (RemBERT model)"),l8e.forEach(t),ygr=i(W),GF=n(W,"LI",{});var i8e=s(GF);oue=n(i8e,"STRONG",{});var C_t=s(oue);wgr=r(C_t,"roberta"),C_t.forEach(t),Agr=r(i8e," \u2014 "),QO=n(i8e,"A",{href:!0});var M_t=s(QO);Lgr=r(M_t,"TFRobertaForSequenceClassification"),M_t.forEach(t),Bgr=r(i8e," (RoBERTa model)"),i8e.forEach(t),xgr=i(W),OF=n(W,"LI",{});var d8e=s(OF);rue=n(d8e,"STRONG",{});var E_t=s(rue);kgr=r(E_t,"roformer"),E_t.forEach(t),Rgr=r(d8e," \u2014 "),HO=n(d8e,"A",{href:!0});var y_t=s(HO);Sgr=r(y_t,"TFRoFormerForSequenceClassification"),y_t.forEach(t),Pgr=r(d8e," (RoFormer model)"),d8e.forEach(t),$gr=i(W),XF=n(W,"LI",{});var c8e=s(XF);tue=n(c8e,"STRONG",{});var w_t=s(tue);Igr=r(w_t,"tapas"),w_t.forEach(t),Dgr=r(c8e," \u2014 "),UO=n(c8e,"A",{href:!0});var A_t=s(UO);Ngr=r(A_t,"TFTapasForSequenceClassification"),A_t.forEach(t),jgr=r(c8e," (TAPAS model)"),c8e.forEach(t),qgr=i(W),VF=n(W,"LI",{});var f8e=s(VF);aue=n(f8e,"STRONG",{});var L_t=s(aue);Ggr=r(L_t,"transfo-xl"),L_t.forEach(t),Ogr=r(f8e," \u2014 "),JO=n(f8e,"A",{href:!0});var B_t=s(JO);Xgr=r(B_t,"TFTransfoXLForSequenceClassification"),B_t.forEach(t),Vgr=r(f8e," (Transformer-XL model)"),f8e.forEach(t),zgr=i(W),zF=n(W,"LI",{});var m8e=s(zF);nue=n(m8e,"STRONG",{});var x_t=s(nue);Wgr=r(x_t,"xlm"),x_t.forEach(t),Qgr=r(m8e," \u2014 "),YO=n(m8e,"A",{href:!0});var k_t=s(YO);Hgr=r(k_t,"TFXLMForSequenceClassification"),k_t.forEach(t),Ugr=r(m8e," (XLM model)"),m8e.forEach(t),Jgr=i(W),WF=n(W,"LI",{});var g8e=s(WF);sue=n(g8e,"STRONG",{});var R_t=s(sue);Ygr=r(R_t,"xlm-roberta"),R_t.forEach(t),Kgr=r(g8e," \u2014 "),KO=n(g8e,"A",{href:!0});var S_t=s(KO);Zgr=r(S_t,"TFXLMRobertaForSequenceClassification"),S_t.forEach(t),ehr=r(g8e," (XLM-RoBERTa model)"),g8e.forEach(t),ohr=i(W),QF=n(W,"LI",{});var h8e=s(QF);lue=n(h8e,"STRONG",{});var P_t=s(lue);rhr=r(P_t,"xlnet"),P_t.forEach(t),thr=r(h8e," \u2014 "),ZO=n(h8e,"A",{href:!0});var $_t=s(ZO);ahr=r($_t,"TFXLNetForSequenceClassification"),$_t.forEach(t),nhr=r(h8e," (XLNet model)"),h8e.forEach(t),W.forEach(t),shr=i(Fa),iue=n(Fa,"P",{});var I_t=s(iue);lhr=r(I_t,"Examples:"),I_t.forEach(t),ihr=i(Fa),m(NA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),RRe=i(c),Pc=n(c,"H2",{class:!0});var XPe=s(Pc);HF=n(XPe,"A",{id:!0,class:!0,href:!0});var D_t=s(HF);due=n(D_t,"SPAN",{});var N_t=s(due);m(jA.$$.fragment,N_t),N_t.forEach(t),D_t.forEach(t),dhr=i(XPe),cue=n(XPe,"SPAN",{});var j_t=s(cue);chr=r(j_t,"TFAutoModelForMultipleChoice"),j_t.forEach(t),XPe.forEach(t),SRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(qA.$$.fragment,Zl),fhr=i(Zl),$c=n(Zl,"P",{});var dQ=s($c);mhr=r(dQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fue=n(dQ,"CODE",{});var q_t=s(fue);ghr=r(q_t,"from_pretrained()"),q_t.forEach(t),hhr=r(dQ,"class method or the "),mue=n(dQ,"CODE",{});var G_t=s(mue);phr=r(G_t,"from_config()"),G_t.forEach(t),_hr=r(dQ,`class
method.`),dQ.forEach(t),uhr=i(Zl),GA=n(Zl,"P",{});var VPe=s(GA);bhr=r(VPe,"This class cannot be instantiated directly using "),gue=n(VPe,"CODE",{});var O_t=s(gue);vhr=r(O_t,"__init__()"),O_t.forEach(t),Thr=r(VPe," (throws an error)."),VPe.forEach(t),Fhr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(OA.$$.fragment,ei),Chr=i(ei),hue=n(ei,"P",{});var X_t=s(hue);Mhr=r(X_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),X_t.forEach(t),Ehr=i(ei),Ic=n(ei,"P",{});var cQ=s(Ic);yhr=r(cQ,`Note:
Loading a model from its configuration file does `),pue=n(cQ,"STRONG",{});var V_t=s(pue);whr=r(V_t,"not"),V_t.forEach(t),Ahr=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ue=n(cQ,"CODE",{});var z_t=s(_ue);Lhr=r(z_t,"from_pretrained()"),z_t.forEach(t),Bhr=r(cQ,"to load the model weights."),cQ.forEach(t),xhr=i(ei),uue=n(ei,"P",{});var W_t=s(uue);khr=r(W_t,"Examples:"),W_t.forEach(t),Rhr=i(ei),m(XA.$$.fragment,ei),ei.forEach(t),Shr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(VA.$$.fragment,Ca),Phr=i(Ca),bue=n(Ca,"P",{});var Q_t=s(bue);$hr=r(Q_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q_t.forEach(t),Ihr=i(Ca),Mn=n(Ca,"P",{});var zE=s(Mn);Dhr=r(zE,"The model class to instantiate is selected based on the "),vue=n(zE,"CODE",{});var H_t=s(vue);Nhr=r(H_t,"model_type"),H_t.forEach(t),jhr=r(zE,` property of the config object (either
passed as an argument or loaded from `),Tue=n(zE,"CODE",{});var U_t=s(Tue);qhr=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),Ghr=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(zE,"CODE",{});var J_t=s(Fue);Ohr=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),Xhr=r(zE,":"),zE.forEach(t),Vhr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);UF=n(le,"LI",{});var p8e=s(UF);Cue=n(p8e,"STRONG",{});var Y_t=s(Cue);zhr=r(Y_t,"albert"),Y_t.forEach(t),Whr=r(p8e," \u2014 "),eX=n(p8e,"A",{href:!0});var K_t=s(eX);Qhr=r(K_t,"TFAlbertForMultipleChoice"),K_t.forEach(t),Hhr=r(p8e," (ALBERT model)"),p8e.forEach(t),Uhr=i(le),JF=n(le,"LI",{});var _8e=s(JF);Mue=n(_8e,"STRONG",{});var Z_t=s(Mue);Jhr=r(Z_t,"bert"),Z_t.forEach(t),Yhr=r(_8e," \u2014 "),oX=n(_8e,"A",{href:!0});var eut=s(oX);Khr=r(eut,"TFBertForMultipleChoice"),eut.forEach(t),Zhr=r(_8e," (BERT model)"),_8e.forEach(t),epr=i(le),YF=n(le,"LI",{});var u8e=s(YF);Eue=n(u8e,"STRONG",{});var out=s(Eue);opr=r(out,"camembert"),out.forEach(t),rpr=r(u8e," \u2014 "),rX=n(u8e,"A",{href:!0});var rut=s(rX);tpr=r(rut,"TFCamembertForMultipleChoice"),rut.forEach(t),apr=r(u8e," (CamemBERT model)"),u8e.forEach(t),npr=i(le),KF=n(le,"LI",{});var b8e=s(KF);yue=n(b8e,"STRONG",{});var tut=s(yue);spr=r(tut,"convbert"),tut.forEach(t),lpr=r(b8e," \u2014 "),tX=n(b8e,"A",{href:!0});var aut=s(tX);ipr=r(aut,"TFConvBertForMultipleChoice"),aut.forEach(t),dpr=r(b8e," (ConvBERT model)"),b8e.forEach(t),cpr=i(le),ZF=n(le,"LI",{});var v8e=s(ZF);wue=n(v8e,"STRONG",{});var nut=s(wue);fpr=r(nut,"distilbert"),nut.forEach(t),mpr=r(v8e," \u2014 "),aX=n(v8e,"A",{href:!0});var sut=s(aX);gpr=r(sut,"TFDistilBertForMultipleChoice"),sut.forEach(t),hpr=r(v8e," (DistilBERT model)"),v8e.forEach(t),ppr=i(le),eC=n(le,"LI",{});var T8e=s(eC);Aue=n(T8e,"STRONG",{});var lut=s(Aue);_pr=r(lut,"electra"),lut.forEach(t),upr=r(T8e," \u2014 "),nX=n(T8e,"A",{href:!0});var iut=s(nX);bpr=r(iut,"TFElectraForMultipleChoice"),iut.forEach(t),vpr=r(T8e," (ELECTRA model)"),T8e.forEach(t),Tpr=i(le),oC=n(le,"LI",{});var F8e=s(oC);Lue=n(F8e,"STRONG",{});var dut=s(Lue);Fpr=r(dut,"flaubert"),dut.forEach(t),Cpr=r(F8e," \u2014 "),sX=n(F8e,"A",{href:!0});var cut=s(sX);Mpr=r(cut,"TFFlaubertForMultipleChoice"),cut.forEach(t),Epr=r(F8e," (FlauBERT model)"),F8e.forEach(t),ypr=i(le),rC=n(le,"LI",{});var C8e=s(rC);Bue=n(C8e,"STRONG",{});var fut=s(Bue);wpr=r(fut,"funnel"),fut.forEach(t),Apr=r(C8e," \u2014 "),lX=n(C8e,"A",{href:!0});var mut=s(lX);Lpr=r(mut,"TFFunnelForMultipleChoice"),mut.forEach(t),Bpr=r(C8e," (Funnel Transformer model)"),C8e.forEach(t),xpr=i(le),tC=n(le,"LI",{});var M8e=s(tC);xue=n(M8e,"STRONG",{});var gut=s(xue);kpr=r(gut,"longformer"),gut.forEach(t),Rpr=r(M8e," \u2014 "),iX=n(M8e,"A",{href:!0});var hut=s(iX);Spr=r(hut,"TFLongformerForMultipleChoice"),hut.forEach(t),Ppr=r(M8e," (Longformer model)"),M8e.forEach(t),$pr=i(le),aC=n(le,"LI",{});var E8e=s(aC);kue=n(E8e,"STRONG",{});var put=s(kue);Ipr=r(put,"mobilebert"),put.forEach(t),Dpr=r(E8e," \u2014 "),dX=n(E8e,"A",{href:!0});var _ut=s(dX);Npr=r(_ut,"TFMobileBertForMultipleChoice"),_ut.forEach(t),jpr=r(E8e," (MobileBERT model)"),E8e.forEach(t),qpr=i(le),nC=n(le,"LI",{});var y8e=s(nC);Rue=n(y8e,"STRONG",{});var uut=s(Rue);Gpr=r(uut,"mpnet"),uut.forEach(t),Opr=r(y8e," \u2014 "),cX=n(y8e,"A",{href:!0});var but=s(cX);Xpr=r(but,"TFMPNetForMultipleChoice"),but.forEach(t),Vpr=r(y8e," (MPNet model)"),y8e.forEach(t),zpr=i(le),sC=n(le,"LI",{});var w8e=s(sC);Sue=n(w8e,"STRONG",{});var vut=s(Sue);Wpr=r(vut,"rembert"),vut.forEach(t),Qpr=r(w8e," \u2014 "),fX=n(w8e,"A",{href:!0});var Tut=s(fX);Hpr=r(Tut,"TFRemBertForMultipleChoice"),Tut.forEach(t),Upr=r(w8e," (RemBERT model)"),w8e.forEach(t),Jpr=i(le),lC=n(le,"LI",{});var A8e=s(lC);Pue=n(A8e,"STRONG",{});var Fut=s(Pue);Ypr=r(Fut,"roberta"),Fut.forEach(t),Kpr=r(A8e," \u2014 "),mX=n(A8e,"A",{href:!0});var Cut=s(mX);Zpr=r(Cut,"TFRobertaForMultipleChoice"),Cut.forEach(t),e_r=r(A8e," (RoBERTa model)"),A8e.forEach(t),o_r=i(le),iC=n(le,"LI",{});var L8e=s(iC);$ue=n(L8e,"STRONG",{});var Mut=s($ue);r_r=r(Mut,"roformer"),Mut.forEach(t),t_r=r(L8e," \u2014 "),gX=n(L8e,"A",{href:!0});var Eut=s(gX);a_r=r(Eut,"TFRoFormerForMultipleChoice"),Eut.forEach(t),n_r=r(L8e," (RoFormer model)"),L8e.forEach(t),s_r=i(le),dC=n(le,"LI",{});var B8e=s(dC);Iue=n(B8e,"STRONG",{});var yut=s(Iue);l_r=r(yut,"xlm"),yut.forEach(t),i_r=r(B8e," \u2014 "),hX=n(B8e,"A",{href:!0});var wut=s(hX);d_r=r(wut,"TFXLMForMultipleChoice"),wut.forEach(t),c_r=r(B8e," (XLM model)"),B8e.forEach(t),f_r=i(le),cC=n(le,"LI",{});var x8e=s(cC);Due=n(x8e,"STRONG",{});var Aut=s(Due);m_r=r(Aut,"xlm-roberta"),Aut.forEach(t),g_r=r(x8e," \u2014 "),pX=n(x8e,"A",{href:!0});var Lut=s(pX);h_r=r(Lut,"TFXLMRobertaForMultipleChoice"),Lut.forEach(t),p_r=r(x8e," (XLM-RoBERTa model)"),x8e.forEach(t),__r=i(le),fC=n(le,"LI",{});var k8e=s(fC);Nue=n(k8e,"STRONG",{});var But=s(Nue);u_r=r(But,"xlnet"),But.forEach(t),b_r=r(k8e," \u2014 "),_X=n(k8e,"A",{href:!0});var xut=s(_X);v_r=r(xut,"TFXLNetForMultipleChoice"),xut.forEach(t),T_r=r(k8e," (XLNet model)"),k8e.forEach(t),le.forEach(t),F_r=i(Ca),jue=n(Ca,"P",{});var kut=s(jue);C_r=r(kut,"Examples:"),kut.forEach(t),M_r=i(Ca),m(zA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),PRe=i(c),Dc=n(c,"H2",{class:!0});var zPe=s(Dc);mC=n(zPe,"A",{id:!0,class:!0,href:!0});var Rut=s(mC);que=n(Rut,"SPAN",{});var Sut=s(que);m(WA.$$.fragment,Sut),Sut.forEach(t),Rut.forEach(t),E_r=i(zPe),Gue=n(zPe,"SPAN",{});var Put=s(Gue);y_r=r(Put,"TFAutoModelForTableQuestionAnswering"),Put.forEach(t),zPe.forEach(t),$Re=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(QA.$$.fragment,oi),w_r=i(oi),Nc=n(oi,"P",{});var fQ=s(Nc);A_r=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Oue=n(fQ,"CODE",{});var $ut=s(Oue);L_r=r($ut,"from_pretrained()"),$ut.forEach(t),B_r=r(fQ,"class method or the "),Xue=n(fQ,"CODE",{});var Iut=s(Xue);x_r=r(Iut,"from_config()"),Iut.forEach(t),k_r=r(fQ,`class
method.`),fQ.forEach(t),R_r=i(oi),HA=n(oi,"P",{});var WPe=s(HA);S_r=r(WPe,"This class cannot be instantiated directly using "),Vue=n(WPe,"CODE",{});var Dut=s(Vue);P_r=r(Dut,"__init__()"),Dut.forEach(t),$_r=r(WPe," (throws an error)."),WPe.forEach(t),I_r=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(UA.$$.fragment,ri),D_r=i(ri),zue=n(ri,"P",{});var Nut=s(zue);N_r=r(Nut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Nut.forEach(t),j_r=i(ri),jc=n(ri,"P",{});var mQ=s(jc);q_r=r(mQ,`Note:
Loading a model from its configuration file does `),Wue=n(mQ,"STRONG",{});var jut=s(Wue);G_r=r(jut,"not"),jut.forEach(t),O_r=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Que=n(mQ,"CODE",{});var qut=s(Que);X_r=r(qut,"from_pretrained()"),qut.forEach(t),V_r=r(mQ,"to load the model weights."),mQ.forEach(t),z_r=i(ri),Hue=n(ri,"P",{});var Gut=s(Hue);W_r=r(Gut,"Examples:"),Gut.forEach(t),Q_r=i(ri),m(JA.$$.fragment,ri),ri.forEach(t),H_r=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(YA.$$.fragment,Ma),U_r=i(Ma),Uue=n(Ma,"P",{});var Out=s(Uue);J_r=r(Out,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Out.forEach(t),Y_r=i(Ma),En=n(Ma,"P",{});var WE=s(En);K_r=r(WE,"The model class to instantiate is selected based on the "),Jue=n(WE,"CODE",{});var Xut=s(Jue);Z_r=r(Xut,"model_type"),Xut.forEach(t),eur=r(WE,` property of the config object (either
passed as an argument or loaded from `),Yue=n(WE,"CODE",{});var Vut=s(Yue);our=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),rur=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(WE,"CODE",{});var zut=s(Kue);tur=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),aur=r(WE,":"),WE.forEach(t),nur=i(Ma),Zue=n(Ma,"UL",{});var Wut=s(Zue);gC=n(Wut,"LI",{});var R8e=s(gC);e1e=n(R8e,"STRONG",{});var Qut=s(e1e);sur=r(Qut,"tapas"),Qut.forEach(t),lur=r(R8e," \u2014 "),uX=n(R8e,"A",{href:!0});var Hut=s(uX);iur=r(Hut,"TFTapasForQuestionAnswering"),Hut.forEach(t),dur=r(R8e," (TAPAS model)"),R8e.forEach(t),Wut.forEach(t),cur=i(Ma),o1e=n(Ma,"P",{});var Uut=s(o1e);fur=r(Uut,"Examples:"),Uut.forEach(t),mur=i(Ma),m(KA.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),IRe=i(c),qc=n(c,"H2",{class:!0});var QPe=s(qc);hC=n(QPe,"A",{id:!0,class:!0,href:!0});var Jut=s(hC);r1e=n(Jut,"SPAN",{});var Yut=s(r1e);m(ZA.$$.fragment,Yut),Yut.forEach(t),Jut.forEach(t),gur=i(QPe),t1e=n(QPe,"SPAN",{});var Kut=s(t1e);hur=r(Kut,"TFAutoModelForTokenClassification"),Kut.forEach(t),QPe.forEach(t),DRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(e0.$$.fragment,ti),pur=i(ti),Gc=n(ti,"P",{});var gQ=s(Gc);_ur=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),a1e=n(gQ,"CODE",{});var Zut=s(a1e);uur=r(Zut,"from_pretrained()"),Zut.forEach(t),bur=r(gQ,"class method or the "),n1e=n(gQ,"CODE",{});var e1t=s(n1e);vur=r(e1t,"from_config()"),e1t.forEach(t),Tur=r(gQ,`class
method.`),gQ.forEach(t),Fur=i(ti),o0=n(ti,"P",{});var HPe=s(o0);Cur=r(HPe,"This class cannot be instantiated directly using "),s1e=n(HPe,"CODE",{});var o1t=s(s1e);Mur=r(o1t,"__init__()"),o1t.forEach(t),Eur=r(HPe," (throws an error)."),HPe.forEach(t),yur=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(r0.$$.fragment,ai),wur=i(ai),l1e=n(ai,"P",{});var r1t=s(l1e);Aur=r(r1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r1t.forEach(t),Lur=i(ai),Oc=n(ai,"P",{});var hQ=s(Oc);Bur=r(hQ,`Note:
Loading a model from its configuration file does `),i1e=n(hQ,"STRONG",{});var t1t=s(i1e);xur=r(t1t,"not"),t1t.forEach(t),kur=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),d1e=n(hQ,"CODE",{});var a1t=s(d1e);Rur=r(a1t,"from_pretrained()"),a1t.forEach(t),Sur=r(hQ,"to load the model weights."),hQ.forEach(t),Pur=i(ai),c1e=n(ai,"P",{});var n1t=s(c1e);$ur=r(n1t,"Examples:"),n1t.forEach(t),Iur=i(ai),m(t0.$$.fragment,ai),ai.forEach(t),Dur=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(a0.$$.fragment,Ea),Nur=i(Ea),f1e=n(Ea,"P",{});var s1t=s(f1e);jur=r(s1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s1t.forEach(t),qur=i(Ea),yn=n(Ea,"P",{});var QE=s(yn);Gur=r(QE,"The model class to instantiate is selected based on the "),m1e=n(QE,"CODE",{});var l1t=s(m1e);Our=r(l1t,"model_type"),l1t.forEach(t),Xur=r(QE,` property of the config object (either
passed as an argument or loaded from `),g1e=n(QE,"CODE",{});var i1t=s(g1e);Vur=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),zur=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(QE,"CODE",{});var d1t=s(h1e);Wur=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),Qur=r(QE,":"),QE.forEach(t),Hur=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);pC=n(oe,"LI",{});var S8e=s(pC);p1e=n(S8e,"STRONG",{});var c1t=s(p1e);Uur=r(c1t,"albert"),c1t.forEach(t),Jur=r(S8e," \u2014 "),bX=n(S8e,"A",{href:!0});var f1t=s(bX);Yur=r(f1t,"TFAlbertForTokenClassification"),f1t.forEach(t),Kur=r(S8e," (ALBERT model)"),S8e.forEach(t),Zur=i(oe),_C=n(oe,"LI",{});var P8e=s(_C);_1e=n(P8e,"STRONG",{});var m1t=s(_1e);e1r=r(m1t,"bert"),m1t.forEach(t),o1r=r(P8e," \u2014 "),vX=n(P8e,"A",{href:!0});var g1t=s(vX);r1r=r(g1t,"TFBertForTokenClassification"),g1t.forEach(t),t1r=r(P8e," (BERT model)"),P8e.forEach(t),a1r=i(oe),uC=n(oe,"LI",{});var $8e=s(uC);u1e=n($8e,"STRONG",{});var h1t=s(u1e);n1r=r(h1t,"camembert"),h1t.forEach(t),s1r=r($8e," \u2014 "),TX=n($8e,"A",{href:!0});var p1t=s(TX);l1r=r(p1t,"TFCamembertForTokenClassification"),p1t.forEach(t),i1r=r($8e," (CamemBERT model)"),$8e.forEach(t),d1r=i(oe),bC=n(oe,"LI",{});var I8e=s(bC);b1e=n(I8e,"STRONG",{});var _1t=s(b1e);c1r=r(_1t,"convbert"),_1t.forEach(t),f1r=r(I8e," \u2014 "),FX=n(I8e,"A",{href:!0});var u1t=s(FX);m1r=r(u1t,"TFConvBertForTokenClassification"),u1t.forEach(t),g1r=r(I8e," (ConvBERT model)"),I8e.forEach(t),h1r=i(oe),vC=n(oe,"LI",{});var D8e=s(vC);v1e=n(D8e,"STRONG",{});var b1t=s(v1e);p1r=r(b1t,"deberta"),b1t.forEach(t),_1r=r(D8e," \u2014 "),CX=n(D8e,"A",{href:!0});var v1t=s(CX);u1r=r(v1t,"TFDebertaForTokenClassification"),v1t.forEach(t),b1r=r(D8e," (DeBERTa model)"),D8e.forEach(t),v1r=i(oe),TC=n(oe,"LI",{});var N8e=s(TC);T1e=n(N8e,"STRONG",{});var T1t=s(T1e);T1r=r(T1t,"deberta-v2"),T1t.forEach(t),F1r=r(N8e," \u2014 "),MX=n(N8e,"A",{href:!0});var F1t=s(MX);C1r=r(F1t,"TFDebertaV2ForTokenClassification"),F1t.forEach(t),M1r=r(N8e," (DeBERTa-v2 model)"),N8e.forEach(t),E1r=i(oe),FC=n(oe,"LI",{});var j8e=s(FC);F1e=n(j8e,"STRONG",{});var C1t=s(F1e);y1r=r(C1t,"distilbert"),C1t.forEach(t),w1r=r(j8e," \u2014 "),EX=n(j8e,"A",{href:!0});var M1t=s(EX);A1r=r(M1t,"TFDistilBertForTokenClassification"),M1t.forEach(t),L1r=r(j8e," (DistilBERT model)"),j8e.forEach(t),B1r=i(oe),CC=n(oe,"LI",{});var q8e=s(CC);C1e=n(q8e,"STRONG",{});var E1t=s(C1e);x1r=r(E1t,"electra"),E1t.forEach(t),k1r=r(q8e," \u2014 "),yX=n(q8e,"A",{href:!0});var y1t=s(yX);R1r=r(y1t,"TFElectraForTokenClassification"),y1t.forEach(t),S1r=r(q8e," (ELECTRA model)"),q8e.forEach(t),P1r=i(oe),MC=n(oe,"LI",{});var G8e=s(MC);M1e=n(G8e,"STRONG",{});var w1t=s(M1e);$1r=r(w1t,"flaubert"),w1t.forEach(t),I1r=r(G8e," \u2014 "),wX=n(G8e,"A",{href:!0});var A1t=s(wX);D1r=r(A1t,"TFFlaubertForTokenClassification"),A1t.forEach(t),N1r=r(G8e," (FlauBERT model)"),G8e.forEach(t),j1r=i(oe),EC=n(oe,"LI",{});var O8e=s(EC);E1e=n(O8e,"STRONG",{});var L1t=s(E1e);q1r=r(L1t,"funnel"),L1t.forEach(t),G1r=r(O8e," \u2014 "),AX=n(O8e,"A",{href:!0});var B1t=s(AX);O1r=r(B1t,"TFFunnelForTokenClassification"),B1t.forEach(t),X1r=r(O8e," (Funnel Transformer model)"),O8e.forEach(t),V1r=i(oe),yC=n(oe,"LI",{});var X8e=s(yC);y1e=n(X8e,"STRONG",{});var x1t=s(y1e);z1r=r(x1t,"layoutlm"),x1t.forEach(t),W1r=r(X8e," \u2014 "),LX=n(X8e,"A",{href:!0});var k1t=s(LX);Q1r=r(k1t,"TFLayoutLMForTokenClassification"),k1t.forEach(t),H1r=r(X8e," (LayoutLM model)"),X8e.forEach(t),U1r=i(oe),wC=n(oe,"LI",{});var V8e=s(wC);w1e=n(V8e,"STRONG",{});var R1t=s(w1e);J1r=r(R1t,"longformer"),R1t.forEach(t),Y1r=r(V8e," \u2014 "),BX=n(V8e,"A",{href:!0});var S1t=s(BX);K1r=r(S1t,"TFLongformerForTokenClassification"),S1t.forEach(t),Z1r=r(V8e," (Longformer model)"),V8e.forEach(t),e9r=i(oe),AC=n(oe,"LI",{});var z8e=s(AC);A1e=n(z8e,"STRONG",{});var P1t=s(A1e);o9r=r(P1t,"mobilebert"),P1t.forEach(t),r9r=r(z8e," \u2014 "),xX=n(z8e,"A",{href:!0});var $1t=s(xX);t9r=r($1t,"TFMobileBertForTokenClassification"),$1t.forEach(t),a9r=r(z8e," (MobileBERT model)"),z8e.forEach(t),n9r=i(oe),LC=n(oe,"LI",{});var W8e=s(LC);L1e=n(W8e,"STRONG",{});var I1t=s(L1e);s9r=r(I1t,"mpnet"),I1t.forEach(t),l9r=r(W8e," \u2014 "),kX=n(W8e,"A",{href:!0});var D1t=s(kX);i9r=r(D1t,"TFMPNetForTokenClassification"),D1t.forEach(t),d9r=r(W8e," (MPNet model)"),W8e.forEach(t),c9r=i(oe),BC=n(oe,"LI",{});var Q8e=s(BC);B1e=n(Q8e,"STRONG",{});var N1t=s(B1e);f9r=r(N1t,"rembert"),N1t.forEach(t),m9r=r(Q8e," \u2014 "),RX=n(Q8e,"A",{href:!0});var j1t=s(RX);g9r=r(j1t,"TFRemBertForTokenClassification"),j1t.forEach(t),h9r=r(Q8e," (RemBERT model)"),Q8e.forEach(t),p9r=i(oe),xC=n(oe,"LI",{});var H8e=s(xC);x1e=n(H8e,"STRONG",{});var q1t=s(x1e);_9r=r(q1t,"roberta"),q1t.forEach(t),u9r=r(H8e," \u2014 "),SX=n(H8e,"A",{href:!0});var G1t=s(SX);b9r=r(G1t,"TFRobertaForTokenClassification"),G1t.forEach(t),v9r=r(H8e," (RoBERTa model)"),H8e.forEach(t),T9r=i(oe),kC=n(oe,"LI",{});var U8e=s(kC);k1e=n(U8e,"STRONG",{});var O1t=s(k1e);F9r=r(O1t,"roformer"),O1t.forEach(t),C9r=r(U8e," \u2014 "),PX=n(U8e,"A",{href:!0});var X1t=s(PX);M9r=r(X1t,"TFRoFormerForTokenClassification"),X1t.forEach(t),E9r=r(U8e," (RoFormer model)"),U8e.forEach(t),y9r=i(oe),RC=n(oe,"LI",{});var J8e=s(RC);R1e=n(J8e,"STRONG",{});var V1t=s(R1e);w9r=r(V1t,"xlm"),V1t.forEach(t),A9r=r(J8e," \u2014 "),$X=n(J8e,"A",{href:!0});var z1t=s($X);L9r=r(z1t,"TFXLMForTokenClassification"),z1t.forEach(t),B9r=r(J8e," (XLM model)"),J8e.forEach(t),x9r=i(oe),SC=n(oe,"LI",{});var Y8e=s(SC);S1e=n(Y8e,"STRONG",{});var W1t=s(S1e);k9r=r(W1t,"xlm-roberta"),W1t.forEach(t),R9r=r(Y8e," \u2014 "),IX=n(Y8e,"A",{href:!0});var Q1t=s(IX);S9r=r(Q1t,"TFXLMRobertaForTokenClassification"),Q1t.forEach(t),P9r=r(Y8e," (XLM-RoBERTa model)"),Y8e.forEach(t),$9r=i(oe),PC=n(oe,"LI",{});var K8e=s(PC);P1e=n(K8e,"STRONG",{});var H1t=s(P1e);I9r=r(H1t,"xlnet"),H1t.forEach(t),D9r=r(K8e," \u2014 "),DX=n(K8e,"A",{href:!0});var U1t=s(DX);N9r=r(U1t,"TFXLNetForTokenClassification"),U1t.forEach(t),j9r=r(K8e," (XLNet model)"),K8e.forEach(t),oe.forEach(t),q9r=i(Ea),$1e=n(Ea,"P",{});var J1t=s($1e);G9r=r(J1t,"Examples:"),J1t.forEach(t),O9r=i(Ea),m(n0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),NRe=i(c),Xc=n(c,"H2",{class:!0});var UPe=s(Xc);$C=n(UPe,"A",{id:!0,class:!0,href:!0});var Y1t=s($C);I1e=n(Y1t,"SPAN",{});var K1t=s(I1e);m(s0.$$.fragment,K1t),K1t.forEach(t),Y1t.forEach(t),X9r=i(UPe),D1e=n(UPe,"SPAN",{});var Z1t=s(D1e);V9r=r(Z1t,"TFAutoModelForQuestionAnswering"),Z1t.forEach(t),UPe.forEach(t),jRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(l0.$$.fragment,ni),z9r=i(ni),Vc=n(ni,"P",{});var pQ=s(Vc);W9r=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),N1e=n(pQ,"CODE",{});var e9t=s(N1e);Q9r=r(e9t,"from_pretrained()"),e9t.forEach(t),H9r=r(pQ,"class method or the "),j1e=n(pQ,"CODE",{});var o9t=s(j1e);U9r=r(o9t,"from_config()"),o9t.forEach(t),J9r=r(pQ,`class
method.`),pQ.forEach(t),Y9r=i(ni),i0=n(ni,"P",{});var JPe=s(i0);K9r=r(JPe,"This class cannot be instantiated directly using "),q1e=n(JPe,"CODE",{});var r9t=s(q1e);Z9r=r(r9t,"__init__()"),r9t.forEach(t),ebr=r(JPe," (throws an error)."),JPe.forEach(t),obr=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(d0.$$.fragment,si),rbr=i(si),G1e=n(si,"P",{});var t9t=s(G1e);tbr=r(t9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),t9t.forEach(t),abr=i(si),zc=n(si,"P",{});var _Q=s(zc);nbr=r(_Q,`Note:
Loading a model from its configuration file does `),O1e=n(_Q,"STRONG",{});var a9t=s(O1e);sbr=r(a9t,"not"),a9t.forEach(t),lbr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),X1e=n(_Q,"CODE",{});var n9t=s(X1e);ibr=r(n9t,"from_pretrained()"),n9t.forEach(t),dbr=r(_Q,"to load the model weights."),_Q.forEach(t),cbr=i(si),V1e=n(si,"P",{});var s9t=s(V1e);fbr=r(s9t,"Examples:"),s9t.forEach(t),mbr=i(si),m(c0.$$.fragment,si),si.forEach(t),gbr=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(f0.$$.fragment,ya),hbr=i(ya),z1e=n(ya,"P",{});var l9t=s(z1e);pbr=r(l9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l9t.forEach(t),_br=i(ya),wn=n(ya,"P",{});var HE=s(wn);ubr=r(HE,"The model class to instantiate is selected based on the "),W1e=n(HE,"CODE",{});var i9t=s(W1e);bbr=r(i9t,"model_type"),i9t.forEach(t),vbr=r(HE,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(HE,"CODE",{});var d9t=s(Q1e);Tbr=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),Fbr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(HE,"CODE",{});var c9t=s(H1e);Cbr=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),Mbr=r(HE,":"),HE.forEach(t),Ebr=i(ya),Z=n(ya,"UL",{});var te=s(Z);IC=n(te,"LI",{});var Z8e=s(IC);U1e=n(Z8e,"STRONG",{});var f9t=s(U1e);ybr=r(f9t,"albert"),f9t.forEach(t),wbr=r(Z8e," \u2014 "),NX=n(Z8e,"A",{href:!0});var m9t=s(NX);Abr=r(m9t,"TFAlbertForQuestionAnswering"),m9t.forEach(t),Lbr=r(Z8e," (ALBERT model)"),Z8e.forEach(t),Bbr=i(te),DC=n(te,"LI",{});var eBe=s(DC);J1e=n(eBe,"STRONG",{});var g9t=s(J1e);xbr=r(g9t,"bert"),g9t.forEach(t),kbr=r(eBe," \u2014 "),jX=n(eBe,"A",{href:!0});var h9t=s(jX);Rbr=r(h9t,"TFBertForQuestionAnswering"),h9t.forEach(t),Sbr=r(eBe," (BERT model)"),eBe.forEach(t),Pbr=i(te),NC=n(te,"LI",{});var oBe=s(NC);Y1e=n(oBe,"STRONG",{});var p9t=s(Y1e);$br=r(p9t,"camembert"),p9t.forEach(t),Ibr=r(oBe," \u2014 "),qX=n(oBe,"A",{href:!0});var _9t=s(qX);Dbr=r(_9t,"TFCamembertForQuestionAnswering"),_9t.forEach(t),Nbr=r(oBe," (CamemBERT model)"),oBe.forEach(t),jbr=i(te),jC=n(te,"LI",{});var rBe=s(jC);K1e=n(rBe,"STRONG",{});var u9t=s(K1e);qbr=r(u9t,"convbert"),u9t.forEach(t),Gbr=r(rBe," \u2014 "),GX=n(rBe,"A",{href:!0});var b9t=s(GX);Obr=r(b9t,"TFConvBertForQuestionAnswering"),b9t.forEach(t),Xbr=r(rBe," (ConvBERT model)"),rBe.forEach(t),Vbr=i(te),qC=n(te,"LI",{});var tBe=s(qC);Z1e=n(tBe,"STRONG",{});var v9t=s(Z1e);zbr=r(v9t,"deberta"),v9t.forEach(t),Wbr=r(tBe," \u2014 "),OX=n(tBe,"A",{href:!0});var T9t=s(OX);Qbr=r(T9t,"TFDebertaForQuestionAnswering"),T9t.forEach(t),Hbr=r(tBe," (DeBERTa model)"),tBe.forEach(t),Ubr=i(te),GC=n(te,"LI",{});var aBe=s(GC);e9e=n(aBe,"STRONG",{});var F9t=s(e9e);Jbr=r(F9t,"deberta-v2"),F9t.forEach(t),Ybr=r(aBe," \u2014 "),XX=n(aBe,"A",{href:!0});var C9t=s(XX);Kbr=r(C9t,"TFDebertaV2ForQuestionAnswering"),C9t.forEach(t),Zbr=r(aBe," (DeBERTa-v2 model)"),aBe.forEach(t),e5r=i(te),OC=n(te,"LI",{});var nBe=s(OC);o9e=n(nBe,"STRONG",{});var M9t=s(o9e);o5r=r(M9t,"distilbert"),M9t.forEach(t),r5r=r(nBe," \u2014 "),VX=n(nBe,"A",{href:!0});var E9t=s(VX);t5r=r(E9t,"TFDistilBertForQuestionAnswering"),E9t.forEach(t),a5r=r(nBe," (DistilBERT model)"),nBe.forEach(t),n5r=i(te),XC=n(te,"LI",{});var sBe=s(XC);r9e=n(sBe,"STRONG",{});var y9t=s(r9e);s5r=r(y9t,"electra"),y9t.forEach(t),l5r=r(sBe," \u2014 "),zX=n(sBe,"A",{href:!0});var w9t=s(zX);i5r=r(w9t,"TFElectraForQuestionAnswering"),w9t.forEach(t),d5r=r(sBe," (ELECTRA model)"),sBe.forEach(t),c5r=i(te),VC=n(te,"LI",{});var lBe=s(VC);t9e=n(lBe,"STRONG",{});var A9t=s(t9e);f5r=r(A9t,"flaubert"),A9t.forEach(t),m5r=r(lBe," \u2014 "),WX=n(lBe,"A",{href:!0});var L9t=s(WX);g5r=r(L9t,"TFFlaubertForQuestionAnsweringSimple"),L9t.forEach(t),h5r=r(lBe," (FlauBERT model)"),lBe.forEach(t),p5r=i(te),zC=n(te,"LI",{});var iBe=s(zC);a9e=n(iBe,"STRONG",{});var B9t=s(a9e);_5r=r(B9t,"funnel"),B9t.forEach(t),u5r=r(iBe," \u2014 "),QX=n(iBe,"A",{href:!0});var x9t=s(QX);b5r=r(x9t,"TFFunnelForQuestionAnswering"),x9t.forEach(t),v5r=r(iBe," (Funnel Transformer model)"),iBe.forEach(t),T5r=i(te),WC=n(te,"LI",{});var dBe=s(WC);n9e=n(dBe,"STRONG",{});var k9t=s(n9e);F5r=r(k9t,"longformer"),k9t.forEach(t),C5r=r(dBe," \u2014 "),HX=n(dBe,"A",{href:!0});var R9t=s(HX);M5r=r(R9t,"TFLongformerForQuestionAnswering"),R9t.forEach(t),E5r=r(dBe," (Longformer model)"),dBe.forEach(t),y5r=i(te),QC=n(te,"LI",{});var cBe=s(QC);s9e=n(cBe,"STRONG",{});var S9t=s(s9e);w5r=r(S9t,"mobilebert"),S9t.forEach(t),A5r=r(cBe," \u2014 "),UX=n(cBe,"A",{href:!0});var P9t=s(UX);L5r=r(P9t,"TFMobileBertForQuestionAnswering"),P9t.forEach(t),B5r=r(cBe," (MobileBERT model)"),cBe.forEach(t),x5r=i(te),HC=n(te,"LI",{});var fBe=s(HC);l9e=n(fBe,"STRONG",{});var $9t=s(l9e);k5r=r($9t,"mpnet"),$9t.forEach(t),R5r=r(fBe," \u2014 "),JX=n(fBe,"A",{href:!0});var I9t=s(JX);S5r=r(I9t,"TFMPNetForQuestionAnswering"),I9t.forEach(t),P5r=r(fBe," (MPNet model)"),fBe.forEach(t),$5r=i(te),UC=n(te,"LI",{});var mBe=s(UC);i9e=n(mBe,"STRONG",{});var D9t=s(i9e);I5r=r(D9t,"rembert"),D9t.forEach(t),D5r=r(mBe," \u2014 "),YX=n(mBe,"A",{href:!0});var N9t=s(YX);N5r=r(N9t,"TFRemBertForQuestionAnswering"),N9t.forEach(t),j5r=r(mBe," (RemBERT model)"),mBe.forEach(t),q5r=i(te),JC=n(te,"LI",{});var gBe=s(JC);d9e=n(gBe,"STRONG",{});var j9t=s(d9e);G5r=r(j9t,"roberta"),j9t.forEach(t),O5r=r(gBe," \u2014 "),KX=n(gBe,"A",{href:!0});var q9t=s(KX);X5r=r(q9t,"TFRobertaForQuestionAnswering"),q9t.forEach(t),V5r=r(gBe," (RoBERTa model)"),gBe.forEach(t),z5r=i(te),YC=n(te,"LI",{});var hBe=s(YC);c9e=n(hBe,"STRONG",{});var G9t=s(c9e);W5r=r(G9t,"roformer"),G9t.forEach(t),Q5r=r(hBe," \u2014 "),ZX=n(hBe,"A",{href:!0});var O9t=s(ZX);H5r=r(O9t,"TFRoFormerForQuestionAnswering"),O9t.forEach(t),U5r=r(hBe," (RoFormer model)"),hBe.forEach(t),J5r=i(te),KC=n(te,"LI",{});var pBe=s(KC);f9e=n(pBe,"STRONG",{});var X9t=s(f9e);Y5r=r(X9t,"xlm"),X9t.forEach(t),K5r=r(pBe," \u2014 "),eV=n(pBe,"A",{href:!0});var V9t=s(eV);Z5r=r(V9t,"TFXLMForQuestionAnsweringSimple"),V9t.forEach(t),e2r=r(pBe," (XLM model)"),pBe.forEach(t),o2r=i(te),ZC=n(te,"LI",{});var _Be=s(ZC);m9e=n(_Be,"STRONG",{});var z9t=s(m9e);r2r=r(z9t,"xlm-roberta"),z9t.forEach(t),t2r=r(_Be," \u2014 "),oV=n(_Be,"A",{href:!0});var W9t=s(oV);a2r=r(W9t,"TFXLMRobertaForQuestionAnswering"),W9t.forEach(t),n2r=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),s2r=i(te),eM=n(te,"LI",{});var uBe=s(eM);g9e=n(uBe,"STRONG",{});var Q9t=s(g9e);l2r=r(Q9t,"xlnet"),Q9t.forEach(t),i2r=r(uBe," \u2014 "),rV=n(uBe,"A",{href:!0});var H9t=s(rV);d2r=r(H9t,"TFXLNetForQuestionAnsweringSimple"),H9t.forEach(t),c2r=r(uBe," (XLNet model)"),uBe.forEach(t),te.forEach(t),f2r=i(ya),h9e=n(ya,"P",{});var U9t=s(h9e);m2r=r(U9t,"Examples:"),U9t.forEach(t),g2r=i(ya),m(m0.$$.fragment,ya),ya.forEach(t),ni.forEach(t),qRe=i(c),Wc=n(c,"H2",{class:!0});var YPe=s(Wc);oM=n(YPe,"A",{id:!0,class:!0,href:!0});var J9t=s(oM);p9e=n(J9t,"SPAN",{});var Y9t=s(p9e);m(g0.$$.fragment,Y9t),Y9t.forEach(t),J9t.forEach(t),h2r=i(YPe),_9e=n(YPe,"SPAN",{});var K9t=s(_9e);p2r=r(K9t,"TFAutoModelForVision2Seq"),K9t.forEach(t),YPe.forEach(t),GRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(h0.$$.fragment,li),_2r=i(li),Qc=n(li,"P",{});var uQ=s(Qc);u2r=r(uQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),u9e=n(uQ,"CODE",{});var Z9t=s(u9e);b2r=r(Z9t,"from_pretrained()"),Z9t.forEach(t),v2r=r(uQ,"class method or the "),b9e=n(uQ,"CODE",{});var ebt=s(b9e);T2r=r(ebt,"from_config()"),ebt.forEach(t),F2r=r(uQ,`class
method.`),uQ.forEach(t),C2r=i(li),p0=n(li,"P",{});var KPe=s(p0);M2r=r(KPe,"This class cannot be instantiated directly using "),v9e=n(KPe,"CODE",{});var obt=s(v9e);E2r=r(obt,"__init__()"),obt.forEach(t),y2r=r(KPe," (throws an error)."),KPe.forEach(t),w2r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(_0.$$.fragment,ii),A2r=i(ii),T9e=n(ii,"P",{});var rbt=s(T9e);L2r=r(rbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rbt.forEach(t),B2r=i(ii),Hc=n(ii,"P",{});var bQ=s(Hc);x2r=r(bQ,`Note:
Loading a model from its configuration file does `),F9e=n(bQ,"STRONG",{});var tbt=s(F9e);k2r=r(tbt,"not"),tbt.forEach(t),R2r=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),C9e=n(bQ,"CODE",{});var abt=s(C9e);S2r=r(abt,"from_pretrained()"),abt.forEach(t),P2r=r(bQ,"to load the model weights."),bQ.forEach(t),$2r=i(ii),M9e=n(ii,"P",{});var nbt=s(M9e);I2r=r(nbt,"Examples:"),nbt.forEach(t),D2r=i(ii),m(u0.$$.fragment,ii),ii.forEach(t),N2r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(b0.$$.fragment,wa),j2r=i(wa),E9e=n(wa,"P",{});var sbt=s(E9e);q2r=r(sbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sbt.forEach(t),G2r=i(wa),An=n(wa,"P",{});var UE=s(An);O2r=r(UE,"The model class to instantiate is selected based on the "),y9e=n(UE,"CODE",{});var lbt=s(y9e);X2r=r(lbt,"model_type"),lbt.forEach(t),V2r=r(UE,` property of the config object (either
passed as an argument or loaded from `),w9e=n(UE,"CODE",{});var ibt=s(w9e);z2r=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),W2r=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=n(UE,"CODE",{});var dbt=s(A9e);Q2r=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),H2r=r(UE,":"),UE.forEach(t),U2r=i(wa),L9e=n(wa,"UL",{});var cbt=s(L9e);rM=n(cbt,"LI",{});var bBe=s(rM);B9e=n(bBe,"STRONG",{});var fbt=s(B9e);J2r=r(fbt,"vision-encoder-decoder"),fbt.forEach(t),Y2r=r(bBe," \u2014 "),tV=n(bBe,"A",{href:!0});var mbt=s(tV);K2r=r(mbt,"TFVisionEncoderDecoderModel"),mbt.forEach(t),Z2r=r(bBe," (Vision Encoder decoder model)"),bBe.forEach(t),cbt.forEach(t),evr=i(wa),x9e=n(wa,"P",{});var gbt=s(x9e);ovr=r(gbt,"Examples:"),gbt.forEach(t),rvr=i(wa),m(v0.$$.fragment,wa),wa.forEach(t),li.forEach(t),ORe=i(c),Uc=n(c,"H2",{class:!0});var ZPe=s(Uc);tM=n(ZPe,"A",{id:!0,class:!0,href:!0});var hbt=s(tM);k9e=n(hbt,"SPAN",{});var pbt=s(k9e);m(T0.$$.fragment,pbt),pbt.forEach(t),hbt.forEach(t),tvr=i(ZPe),R9e=n(ZPe,"SPAN",{});var _bt=s(R9e);avr=r(_bt,"TFAutoModelForSpeechSeq2Seq"),_bt.forEach(t),ZPe.forEach(t),XRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(F0.$$.fragment,di),nvr=i(di),Jc=n(di,"P",{});var vQ=s(Jc);svr=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),S9e=n(vQ,"CODE",{});var ubt=s(S9e);lvr=r(ubt,"from_pretrained()"),ubt.forEach(t),ivr=r(vQ,"class method or the "),P9e=n(vQ,"CODE",{});var bbt=s(P9e);dvr=r(bbt,"from_config()"),bbt.forEach(t),cvr=r(vQ,`class
method.`),vQ.forEach(t),fvr=i(di),C0=n(di,"P",{});var e$e=s(C0);mvr=r(e$e,"This class cannot be instantiated directly using "),$9e=n(e$e,"CODE",{});var vbt=s($9e);gvr=r(vbt,"__init__()"),vbt.forEach(t),hvr=r(e$e," (throws an error)."),e$e.forEach(t),pvr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(M0.$$.fragment,ci),_vr=i(ci),I9e=n(ci,"P",{});var Tbt=s(I9e);uvr=r(Tbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tbt.forEach(t),bvr=i(ci),Yc=n(ci,"P",{});var TQ=s(Yc);vvr=r(TQ,`Note:
Loading a model from its configuration file does `),D9e=n(TQ,"STRONG",{});var Fbt=s(D9e);Tvr=r(Fbt,"not"),Fbt.forEach(t),Fvr=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N9e=n(TQ,"CODE",{});var Cbt=s(N9e);Cvr=r(Cbt,"from_pretrained()"),Cbt.forEach(t),Mvr=r(TQ,"to load the model weights."),TQ.forEach(t),Evr=i(ci),j9e=n(ci,"P",{});var Mbt=s(j9e);yvr=r(Mbt,"Examples:"),Mbt.forEach(t),wvr=i(ci),m(E0.$$.fragment,ci),ci.forEach(t),Avr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(y0.$$.fragment,Aa),Lvr=i(Aa),q9e=n(Aa,"P",{});var Ebt=s(q9e);Bvr=r(Ebt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ebt.forEach(t),xvr=i(Aa),Ln=n(Aa,"P",{});var JE=s(Ln);kvr=r(JE,"The model class to instantiate is selected based on the "),G9e=n(JE,"CODE",{});var ybt=s(G9e);Rvr=r(ybt,"model_type"),ybt.forEach(t),Svr=r(JE,` property of the config object (either
passed as an argument or loaded from `),O9e=n(JE,"CODE",{});var wbt=s(O9e);Pvr=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),$vr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=n(JE,"CODE",{});var Abt=s(X9e);Ivr=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),Dvr=r(JE,":"),JE.forEach(t),Nvr=i(Aa),V9e=n(Aa,"UL",{});var Lbt=s(V9e);aM=n(Lbt,"LI",{});var vBe=s(aM);z9e=n(vBe,"STRONG",{});var Bbt=s(z9e);jvr=r(Bbt,"speech_to_text"),Bbt.forEach(t),qvr=r(vBe," \u2014 "),aV=n(vBe,"A",{href:!0});var xbt=s(aV);Gvr=r(xbt,"TFSpeech2TextForConditionalGeneration"),xbt.forEach(t),Ovr=r(vBe," (Speech2Text model)"),vBe.forEach(t),Lbt.forEach(t),Xvr=i(Aa),W9e=n(Aa,"P",{});var kbt=s(W9e);Vvr=r(kbt,"Examples:"),kbt.forEach(t),zvr=i(Aa),m(w0.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),VRe=i(c),Kc=n(c,"H2",{class:!0});var o$e=s(Kc);nM=n(o$e,"A",{id:!0,class:!0,href:!0});var Rbt=s(nM);Q9e=n(Rbt,"SPAN",{});var Sbt=s(Q9e);m(A0.$$.fragment,Sbt),Sbt.forEach(t),Rbt.forEach(t),Wvr=i(o$e),H9e=n(o$e,"SPAN",{});var Pbt=s(H9e);Qvr=r(Pbt,"FlaxAutoModel"),Pbt.forEach(t),o$e.forEach(t),zRe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(L0.$$.fragment,fi),Hvr=i(fi),Zc=n(fi,"P",{});var FQ=s(Zc);Uvr=r(FQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),U9e=n(FQ,"CODE",{});var $bt=s(U9e);Jvr=r($bt,"from_pretrained()"),$bt.forEach(t),Yvr=r(FQ,"class method or the "),J9e=n(FQ,"CODE",{});var Ibt=s(J9e);Kvr=r(Ibt,"from_config()"),Ibt.forEach(t),Zvr=r(FQ,`class
method.`),FQ.forEach(t),eTr=i(fi),B0=n(fi,"P",{});var r$e=s(B0);oTr=r(r$e,"This class cannot be instantiated directly using "),Y9e=n(r$e,"CODE",{});var Dbt=s(Y9e);rTr=r(Dbt,"__init__()"),Dbt.forEach(t),tTr=r(r$e," (throws an error)."),r$e.forEach(t),aTr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(x0.$$.fragment,mi),nTr=i(mi),K9e=n(mi,"P",{});var Nbt=s(K9e);sTr=r(Nbt,"Instantiates one of the base model classes of the library from a configuration."),Nbt.forEach(t),lTr=i(mi),ef=n(mi,"P",{});var CQ=s(ef);iTr=r(CQ,`Note:
Loading a model from its configuration file does `),Z9e=n(CQ,"STRONG",{});var jbt=s(Z9e);dTr=r(jbt,"not"),jbt.forEach(t),cTr=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ebe=n(CQ,"CODE",{});var qbt=s(ebe);fTr=r(qbt,"from_pretrained()"),qbt.forEach(t),mTr=r(CQ,"to load the model weights."),CQ.forEach(t),gTr=i(mi),obe=n(mi,"P",{});var Gbt=s(obe);hTr=r(Gbt,"Examples:"),Gbt.forEach(t),pTr=i(mi),m(k0.$$.fragment,mi),mi.forEach(t),_Tr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(R0.$$.fragment,La),uTr=i(La),rbe=n(La,"P",{});var Obt=s(rbe);bTr=r(Obt,"Instantiate one of the base model classes of the library from a pretrained model."),Obt.forEach(t),vTr=i(La),Bn=n(La,"P",{});var YE=s(Bn);TTr=r(YE,"The model class to instantiate is selected based on the "),tbe=n(YE,"CODE",{});var Xbt=s(tbe);FTr=r(Xbt,"model_type"),Xbt.forEach(t),CTr=r(YE,` property of the config object (either
passed as an argument or loaded from `),abe=n(YE,"CODE",{});var Vbt=s(abe);MTr=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),ETr=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(YE,"CODE",{});var zbt=s(nbe);yTr=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),wTr=r(YE,":"),YE.forEach(t),ATr=i(La),z=n(La,"UL",{});var Q=s(z);sM=n(Q,"LI",{});var TBe=s(sM);sbe=n(TBe,"STRONG",{});var Wbt=s(sbe);LTr=r(Wbt,"albert"),Wbt.forEach(t),BTr=r(TBe," \u2014 "),nV=n(TBe,"A",{href:!0});var Qbt=s(nV);xTr=r(Qbt,"FlaxAlbertModel"),Qbt.forEach(t),kTr=r(TBe," (ALBERT model)"),TBe.forEach(t),RTr=i(Q),lM=n(Q,"LI",{});var FBe=s(lM);lbe=n(FBe,"STRONG",{});var Hbt=s(lbe);STr=r(Hbt,"bart"),Hbt.forEach(t),PTr=r(FBe," \u2014 "),sV=n(FBe,"A",{href:!0});var Ubt=s(sV);$Tr=r(Ubt,"FlaxBartModel"),Ubt.forEach(t),ITr=r(FBe," (BART model)"),FBe.forEach(t),DTr=i(Q),iM=n(Q,"LI",{});var CBe=s(iM);ibe=n(CBe,"STRONG",{});var Jbt=s(ibe);NTr=r(Jbt,"beit"),Jbt.forEach(t),jTr=r(CBe," \u2014 "),lV=n(CBe,"A",{href:!0});var Ybt=s(lV);qTr=r(Ybt,"FlaxBeitModel"),Ybt.forEach(t),GTr=r(CBe," (BEiT model)"),CBe.forEach(t),OTr=i(Q),dM=n(Q,"LI",{});var MBe=s(dM);dbe=n(MBe,"STRONG",{});var Kbt=s(dbe);XTr=r(Kbt,"bert"),Kbt.forEach(t),VTr=r(MBe," \u2014 "),iV=n(MBe,"A",{href:!0});var Zbt=s(iV);zTr=r(Zbt,"FlaxBertModel"),Zbt.forEach(t),WTr=r(MBe," (BERT model)"),MBe.forEach(t),QTr=i(Q),cM=n(Q,"LI",{});var EBe=s(cM);cbe=n(EBe,"STRONG",{});var e5t=s(cbe);HTr=r(e5t,"big_bird"),e5t.forEach(t),UTr=r(EBe," \u2014 "),dV=n(EBe,"A",{href:!0});var o5t=s(dV);JTr=r(o5t,"FlaxBigBirdModel"),o5t.forEach(t),YTr=r(EBe," (BigBird model)"),EBe.forEach(t),KTr=i(Q),fM=n(Q,"LI",{});var yBe=s(fM);fbe=n(yBe,"STRONG",{});var r5t=s(fbe);ZTr=r(r5t,"blenderbot"),r5t.forEach(t),eFr=r(yBe," \u2014 "),cV=n(yBe,"A",{href:!0});var t5t=s(cV);oFr=r(t5t,"FlaxBlenderbotModel"),t5t.forEach(t),rFr=r(yBe," (Blenderbot model)"),yBe.forEach(t),tFr=i(Q),mM=n(Q,"LI",{});var wBe=s(mM);mbe=n(wBe,"STRONG",{});var a5t=s(mbe);aFr=r(a5t,"blenderbot-small"),a5t.forEach(t),nFr=r(wBe," \u2014 "),fV=n(wBe,"A",{href:!0});var n5t=s(fV);sFr=r(n5t,"FlaxBlenderbotSmallModel"),n5t.forEach(t),lFr=r(wBe," (BlenderbotSmall model)"),wBe.forEach(t),iFr=i(Q),gM=n(Q,"LI",{});var ABe=s(gM);gbe=n(ABe,"STRONG",{});var s5t=s(gbe);dFr=r(s5t,"clip"),s5t.forEach(t),cFr=r(ABe," \u2014 "),mV=n(ABe,"A",{href:!0});var l5t=s(mV);fFr=r(l5t,"FlaxCLIPModel"),l5t.forEach(t),mFr=r(ABe," (CLIP model)"),ABe.forEach(t),gFr=i(Q),hM=n(Q,"LI",{});var LBe=s(hM);hbe=n(LBe,"STRONG",{});var i5t=s(hbe);hFr=r(i5t,"distilbert"),i5t.forEach(t),pFr=r(LBe," \u2014 "),gV=n(LBe,"A",{href:!0});var d5t=s(gV);_Fr=r(d5t,"FlaxDistilBertModel"),d5t.forEach(t),uFr=r(LBe," (DistilBERT model)"),LBe.forEach(t),bFr=i(Q),pM=n(Q,"LI",{});var BBe=s(pM);pbe=n(BBe,"STRONG",{});var c5t=s(pbe);vFr=r(c5t,"electra"),c5t.forEach(t),TFr=r(BBe," \u2014 "),hV=n(BBe,"A",{href:!0});var f5t=s(hV);FFr=r(f5t,"FlaxElectraModel"),f5t.forEach(t),CFr=r(BBe," (ELECTRA model)"),BBe.forEach(t),MFr=i(Q),_M=n(Q,"LI",{});var xBe=s(_M);_be=n(xBe,"STRONG",{});var m5t=s(_be);EFr=r(m5t,"gpt2"),m5t.forEach(t),yFr=r(xBe," \u2014 "),pV=n(xBe,"A",{href:!0});var g5t=s(pV);wFr=r(g5t,"FlaxGPT2Model"),g5t.forEach(t),AFr=r(xBe," (OpenAI GPT-2 model)"),xBe.forEach(t),LFr=i(Q),uM=n(Q,"LI",{});var kBe=s(uM);ube=n(kBe,"STRONG",{});var h5t=s(ube);BFr=r(h5t,"gpt_neo"),h5t.forEach(t),xFr=r(kBe," \u2014 "),_V=n(kBe,"A",{href:!0});var p5t=s(_V);kFr=r(p5t,"FlaxGPTNeoModel"),p5t.forEach(t),RFr=r(kBe," (GPT Neo model)"),kBe.forEach(t),SFr=i(Q),bM=n(Q,"LI",{});var RBe=s(bM);bbe=n(RBe,"STRONG",{});var _5t=s(bbe);PFr=r(_5t,"gptj"),_5t.forEach(t),$Fr=r(RBe," \u2014 "),uV=n(RBe,"A",{href:!0});var u5t=s(uV);IFr=r(u5t,"FlaxGPTJModel"),u5t.forEach(t),DFr=r(RBe," (GPT-J model)"),RBe.forEach(t),NFr=i(Q),vM=n(Q,"LI",{});var SBe=s(vM);vbe=n(SBe,"STRONG",{});var b5t=s(vbe);jFr=r(b5t,"marian"),b5t.forEach(t),qFr=r(SBe," \u2014 "),bV=n(SBe,"A",{href:!0});var v5t=s(bV);GFr=r(v5t,"FlaxMarianModel"),v5t.forEach(t),OFr=r(SBe," (Marian model)"),SBe.forEach(t),XFr=i(Q),TM=n(Q,"LI",{});var PBe=s(TM);Tbe=n(PBe,"STRONG",{});var T5t=s(Tbe);VFr=r(T5t,"mbart"),T5t.forEach(t),zFr=r(PBe," \u2014 "),vV=n(PBe,"A",{href:!0});var F5t=s(vV);WFr=r(F5t,"FlaxMBartModel"),F5t.forEach(t),QFr=r(PBe," (mBART model)"),PBe.forEach(t),HFr=i(Q),FM=n(Q,"LI",{});var $Be=s(FM);Fbe=n($Be,"STRONG",{});var C5t=s(Fbe);UFr=r(C5t,"mt5"),C5t.forEach(t),JFr=r($Be," \u2014 "),TV=n($Be,"A",{href:!0});var M5t=s(TV);YFr=r(M5t,"FlaxMT5Model"),M5t.forEach(t),KFr=r($Be," (mT5 model)"),$Be.forEach(t),ZFr=i(Q),CM=n(Q,"LI",{});var IBe=s(CM);Cbe=n(IBe,"STRONG",{});var E5t=s(Cbe);eCr=r(E5t,"pegasus"),E5t.forEach(t),oCr=r(IBe," \u2014 "),FV=n(IBe,"A",{href:!0});var y5t=s(FV);rCr=r(y5t,"FlaxPegasusModel"),y5t.forEach(t),tCr=r(IBe," (Pegasus model)"),IBe.forEach(t),aCr=i(Q),MM=n(Q,"LI",{});var DBe=s(MM);Mbe=n(DBe,"STRONG",{});var w5t=s(Mbe);nCr=r(w5t,"roberta"),w5t.forEach(t),sCr=r(DBe," \u2014 "),CV=n(DBe,"A",{href:!0});var A5t=s(CV);lCr=r(A5t,"FlaxRobertaModel"),A5t.forEach(t),iCr=r(DBe," (RoBERTa model)"),DBe.forEach(t),dCr=i(Q),EM=n(Q,"LI",{});var NBe=s(EM);Ebe=n(NBe,"STRONG",{});var L5t=s(Ebe);cCr=r(L5t,"roformer"),L5t.forEach(t),fCr=r(NBe," \u2014 "),MV=n(NBe,"A",{href:!0});var B5t=s(MV);mCr=r(B5t,"FlaxRoFormerModel"),B5t.forEach(t),gCr=r(NBe," (RoFormer model)"),NBe.forEach(t),hCr=i(Q),yM=n(Q,"LI",{});var jBe=s(yM);ybe=n(jBe,"STRONG",{});var x5t=s(ybe);pCr=r(x5t,"t5"),x5t.forEach(t),_Cr=r(jBe," \u2014 "),EV=n(jBe,"A",{href:!0});var k5t=s(EV);uCr=r(k5t,"FlaxT5Model"),k5t.forEach(t),bCr=r(jBe," (T5 model)"),jBe.forEach(t),vCr=i(Q),wM=n(Q,"LI",{});var qBe=s(wM);wbe=n(qBe,"STRONG",{});var R5t=s(wbe);TCr=r(R5t,"vision-text-dual-encoder"),R5t.forEach(t),FCr=r(qBe," \u2014 "),yV=n(qBe,"A",{href:!0});var S5t=s(yV);CCr=r(S5t,"FlaxVisionTextDualEncoderModel"),S5t.forEach(t),MCr=r(qBe," (VisionTextDualEncoder model)"),qBe.forEach(t),ECr=i(Q),AM=n(Q,"LI",{});var GBe=s(AM);Abe=n(GBe,"STRONG",{});var P5t=s(Abe);yCr=r(P5t,"vit"),P5t.forEach(t),wCr=r(GBe," \u2014 "),wV=n(GBe,"A",{href:!0});var $5t=s(wV);ACr=r($5t,"FlaxViTModel"),$5t.forEach(t),LCr=r(GBe," (ViT model)"),GBe.forEach(t),BCr=i(Q),LM=n(Q,"LI",{});var OBe=s(LM);Lbe=n(OBe,"STRONG",{});var I5t=s(Lbe);xCr=r(I5t,"wav2vec2"),I5t.forEach(t),kCr=r(OBe," \u2014 "),AV=n(OBe,"A",{href:!0});var D5t=s(AV);RCr=r(D5t,"FlaxWav2Vec2Model"),D5t.forEach(t),SCr=r(OBe," (Wav2Vec2 model)"),OBe.forEach(t),PCr=i(Q),BM=n(Q,"LI",{});var XBe=s(BM);Bbe=n(XBe,"STRONG",{});var N5t=s(Bbe);$Cr=r(N5t,"xglm"),N5t.forEach(t),ICr=r(XBe," \u2014 "),LV=n(XBe,"A",{href:!0});var j5t=s(LV);DCr=r(j5t,"FlaxXGLMModel"),j5t.forEach(t),NCr=r(XBe," (XGLM model)"),XBe.forEach(t),jCr=i(Q),xM=n(Q,"LI",{});var VBe=s(xM);xbe=n(VBe,"STRONG",{});var q5t=s(xbe);qCr=r(q5t,"xlm-roberta"),q5t.forEach(t),GCr=r(VBe," \u2014 "),BV=n(VBe,"A",{href:!0});var G5t=s(BV);OCr=r(G5t,"FlaxXLMRobertaModel"),G5t.forEach(t),XCr=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),Q.forEach(t),VCr=i(La),kbe=n(La,"P",{});var O5t=s(kbe);zCr=r(O5t,"Examples:"),O5t.forEach(t),WCr=i(La),m(S0.$$.fragment,La),La.forEach(t),fi.forEach(t),WRe=i(c),of=n(c,"H2",{class:!0});var t$e=s(of);kM=n(t$e,"A",{id:!0,class:!0,href:!0});var X5t=s(kM);Rbe=n(X5t,"SPAN",{});var V5t=s(Rbe);m(P0.$$.fragment,V5t),V5t.forEach(t),X5t.forEach(t),QCr=i(t$e),Sbe=n(t$e,"SPAN",{});var z5t=s(Sbe);HCr=r(z5t,"FlaxAutoModelForCausalLM"),z5t.forEach(t),t$e.forEach(t),QRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m($0.$$.fragment,gi),UCr=i(gi),rf=n(gi,"P",{});var MQ=s(rf);JCr=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pbe=n(MQ,"CODE",{});var W5t=s(Pbe);YCr=r(W5t,"from_pretrained()"),W5t.forEach(t),KCr=r(MQ,"class method or the "),$be=n(MQ,"CODE",{});var Q5t=s($be);ZCr=r(Q5t,"from_config()"),Q5t.forEach(t),eMr=r(MQ,`class
method.`),MQ.forEach(t),oMr=i(gi),I0=n(gi,"P",{});var a$e=s(I0);rMr=r(a$e,"This class cannot be instantiated directly using "),Ibe=n(a$e,"CODE",{});var H5t=s(Ibe);tMr=r(H5t,"__init__()"),H5t.forEach(t),aMr=r(a$e," (throws an error)."),a$e.forEach(t),nMr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(D0.$$.fragment,hi),sMr=i(hi),Dbe=n(hi,"P",{});var U5t=s(Dbe);lMr=r(U5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U5t.forEach(t),iMr=i(hi),tf=n(hi,"P",{});var EQ=s(tf);dMr=r(EQ,`Note:
Loading a model from its configuration file does `),Nbe=n(EQ,"STRONG",{});var J5t=s(Nbe);cMr=r(J5t,"not"),J5t.forEach(t),fMr=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jbe=n(EQ,"CODE",{});var Y5t=s(jbe);mMr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),gMr=r(EQ,"to load the model weights."),EQ.forEach(t),hMr=i(hi),qbe=n(hi,"P",{});var K5t=s(qbe);pMr=r(K5t,"Examples:"),K5t.forEach(t),_Mr=i(hi),m(N0.$$.fragment,hi),hi.forEach(t),uMr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(j0.$$.fragment,Ba),bMr=i(Ba),Gbe=n(Ba,"P",{});var Z5t=s(Gbe);vMr=r(Z5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Z5t.forEach(t),TMr=i(Ba),xn=n(Ba,"P",{});var KE=s(xn);FMr=r(KE,"The model class to instantiate is selected based on the "),Obe=n(KE,"CODE",{});var e2t=s(Obe);CMr=r(e2t,"model_type"),e2t.forEach(t),MMr=r(KE,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(KE,"CODE",{});var o2t=s(Xbe);EMr=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),yMr=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(KE,"CODE",{});var r2t=s(Vbe);wMr=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),AMr=r(KE,":"),KE.forEach(t),LMr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);RM=n(pi,"LI",{});var zBe=s(RM);zbe=n(zBe,"STRONG",{});var t2t=s(zbe);BMr=r(t2t,"bart"),t2t.forEach(t),xMr=r(zBe," \u2014 "),xV=n(zBe,"A",{href:!0});var a2t=s(xV);kMr=r(a2t,"FlaxBartForCausalLM"),a2t.forEach(t),RMr=r(zBe," (BART model)"),zBe.forEach(t),SMr=i(pi),SM=n(pi,"LI",{});var WBe=s(SM);Wbe=n(WBe,"STRONG",{});var n2t=s(Wbe);PMr=r(n2t,"gpt2"),n2t.forEach(t),$Mr=r(WBe," \u2014 "),kV=n(WBe,"A",{href:!0});var s2t=s(kV);IMr=r(s2t,"FlaxGPT2LMHeadModel"),s2t.forEach(t),DMr=r(WBe," (OpenAI GPT-2 model)"),WBe.forEach(t),NMr=i(pi),PM=n(pi,"LI",{});var QBe=s(PM);Qbe=n(QBe,"STRONG",{});var l2t=s(Qbe);jMr=r(l2t,"gpt_neo"),l2t.forEach(t),qMr=r(QBe," \u2014 "),RV=n(QBe,"A",{href:!0});var i2t=s(RV);GMr=r(i2t,"FlaxGPTNeoForCausalLM"),i2t.forEach(t),OMr=r(QBe," (GPT Neo model)"),QBe.forEach(t),XMr=i(pi),$M=n(pi,"LI",{});var HBe=s($M);Hbe=n(HBe,"STRONG",{});var d2t=s(Hbe);VMr=r(d2t,"gptj"),d2t.forEach(t),zMr=r(HBe," \u2014 "),SV=n(HBe,"A",{href:!0});var c2t=s(SV);WMr=r(c2t,"FlaxGPTJForCausalLM"),c2t.forEach(t),QMr=r(HBe," (GPT-J model)"),HBe.forEach(t),HMr=i(pi),IM=n(pi,"LI",{});var UBe=s(IM);Ube=n(UBe,"STRONG",{});var f2t=s(Ube);UMr=r(f2t,"xglm"),f2t.forEach(t),JMr=r(UBe," \u2014 "),PV=n(UBe,"A",{href:!0});var m2t=s(PV);YMr=r(m2t,"FlaxXGLMForCausalLM"),m2t.forEach(t),KMr=r(UBe," (XGLM model)"),UBe.forEach(t),pi.forEach(t),ZMr=i(Ba),Jbe=n(Ba,"P",{});var g2t=s(Jbe);e4r=r(g2t,"Examples:"),g2t.forEach(t),o4r=i(Ba),m(q0.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),HRe=i(c),af=n(c,"H2",{class:!0});var n$e=s(af);DM=n(n$e,"A",{id:!0,class:!0,href:!0});var h2t=s(DM);Ybe=n(h2t,"SPAN",{});var p2t=s(Ybe);m(G0.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),r4r=i(n$e),Kbe=n(n$e,"SPAN",{});var _2t=s(Kbe);t4r=r(_2t,"FlaxAutoModelForPreTraining"),_2t.forEach(t),n$e.forEach(t),URe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(O0.$$.fragment,_i),a4r=i(_i),nf=n(_i,"P",{});var yQ=s(nf);n4r=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zbe=n(yQ,"CODE",{});var u2t=s(Zbe);s4r=r(u2t,"from_pretrained()"),u2t.forEach(t),l4r=r(yQ,"class method or the "),e5e=n(yQ,"CODE",{});var b2t=s(e5e);i4r=r(b2t,"from_config()"),b2t.forEach(t),d4r=r(yQ,`class
method.`),yQ.forEach(t),c4r=i(_i),X0=n(_i,"P",{});var s$e=s(X0);f4r=r(s$e,"This class cannot be instantiated directly using "),o5e=n(s$e,"CODE",{});var v2t=s(o5e);m4r=r(v2t,"__init__()"),v2t.forEach(t),g4r=r(s$e," (throws an error)."),s$e.forEach(t),h4r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(V0.$$.fragment,ui),p4r=i(ui),r5e=n(ui,"P",{});var T2t=s(r5e);_4r=r(T2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),T2t.forEach(t),u4r=i(ui),sf=n(ui,"P",{});var wQ=s(sf);b4r=r(wQ,`Note:
Loading a model from its configuration file does `),t5e=n(wQ,"STRONG",{});var F2t=s(t5e);v4r=r(F2t,"not"),F2t.forEach(t),T4r=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),a5e=n(wQ,"CODE",{});var C2t=s(a5e);F4r=r(C2t,"from_pretrained()"),C2t.forEach(t),C4r=r(wQ,"to load the model weights."),wQ.forEach(t),M4r=i(ui),n5e=n(ui,"P",{});var M2t=s(n5e);E4r=r(M2t,"Examples:"),M2t.forEach(t),y4r=i(ui),m(z0.$$.fragment,ui),ui.forEach(t),w4r=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(W0.$$.fragment,xa),A4r=i(xa),s5e=n(xa,"P",{});var E2t=s(s5e);L4r=r(E2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E2t.forEach(t),B4r=i(xa),kn=n(xa,"P",{});var ZE=s(kn);x4r=r(ZE,"The model class to instantiate is selected based on the "),l5e=n(ZE,"CODE",{});var y2t=s(l5e);k4r=r(y2t,"model_type"),y2t.forEach(t),R4r=r(ZE,` property of the config object (either
passed as an argument or loaded from `),i5e=n(ZE,"CODE",{});var w2t=s(i5e);S4r=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),P4r=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(ZE,"CODE",{});var A2t=s(d5e);$4r=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),I4r=r(ZE,":"),ZE.forEach(t),D4r=i(xa),ce=n(xa,"UL",{});var he=s(ce);NM=n(he,"LI",{});var JBe=s(NM);c5e=n(JBe,"STRONG",{});var L2t=s(c5e);N4r=r(L2t,"albert"),L2t.forEach(t),j4r=r(JBe," \u2014 "),$V=n(JBe,"A",{href:!0});var B2t=s($V);q4r=r(B2t,"FlaxAlbertForPreTraining"),B2t.forEach(t),G4r=r(JBe," (ALBERT model)"),JBe.forEach(t),O4r=i(he),jM=n(he,"LI",{});var YBe=s(jM);f5e=n(YBe,"STRONG",{});var x2t=s(f5e);X4r=r(x2t,"bart"),x2t.forEach(t),V4r=r(YBe," \u2014 "),IV=n(YBe,"A",{href:!0});var k2t=s(IV);z4r=r(k2t,"FlaxBartForConditionalGeneration"),k2t.forEach(t),W4r=r(YBe," (BART model)"),YBe.forEach(t),Q4r=i(he),qM=n(he,"LI",{});var KBe=s(qM);m5e=n(KBe,"STRONG",{});var R2t=s(m5e);H4r=r(R2t,"bert"),R2t.forEach(t),U4r=r(KBe," \u2014 "),DV=n(KBe,"A",{href:!0});var S2t=s(DV);J4r=r(S2t,"FlaxBertForPreTraining"),S2t.forEach(t),Y4r=r(KBe," (BERT model)"),KBe.forEach(t),K4r=i(he),GM=n(he,"LI",{});var ZBe=s(GM);g5e=n(ZBe,"STRONG",{});var P2t=s(g5e);Z4r=r(P2t,"big_bird"),P2t.forEach(t),eEr=r(ZBe," \u2014 "),NV=n(ZBe,"A",{href:!0});var $2t=s(NV);oEr=r($2t,"FlaxBigBirdForPreTraining"),$2t.forEach(t),rEr=r(ZBe," (BigBird model)"),ZBe.forEach(t),tEr=i(he),OM=n(he,"LI",{});var exe=s(OM);h5e=n(exe,"STRONG",{});var I2t=s(h5e);aEr=r(I2t,"electra"),I2t.forEach(t),nEr=r(exe," \u2014 "),jV=n(exe,"A",{href:!0});var D2t=s(jV);sEr=r(D2t,"FlaxElectraForPreTraining"),D2t.forEach(t),lEr=r(exe," (ELECTRA model)"),exe.forEach(t),iEr=i(he),XM=n(he,"LI",{});var oxe=s(XM);p5e=n(oxe,"STRONG",{});var N2t=s(p5e);dEr=r(N2t,"mbart"),N2t.forEach(t),cEr=r(oxe," \u2014 "),qV=n(oxe,"A",{href:!0});var j2t=s(qV);fEr=r(j2t,"FlaxMBartForConditionalGeneration"),j2t.forEach(t),mEr=r(oxe," (mBART model)"),oxe.forEach(t),gEr=i(he),VM=n(he,"LI",{});var rxe=s(VM);_5e=n(rxe,"STRONG",{});var q2t=s(_5e);hEr=r(q2t,"mt5"),q2t.forEach(t),pEr=r(rxe," \u2014 "),GV=n(rxe,"A",{href:!0});var G2t=s(GV);_Er=r(G2t,"FlaxMT5ForConditionalGeneration"),G2t.forEach(t),uEr=r(rxe," (mT5 model)"),rxe.forEach(t),bEr=i(he),zM=n(he,"LI",{});var txe=s(zM);u5e=n(txe,"STRONG",{});var O2t=s(u5e);vEr=r(O2t,"roberta"),O2t.forEach(t),TEr=r(txe," \u2014 "),OV=n(txe,"A",{href:!0});var X2t=s(OV);FEr=r(X2t,"FlaxRobertaForMaskedLM"),X2t.forEach(t),CEr=r(txe," (RoBERTa model)"),txe.forEach(t),MEr=i(he),WM=n(he,"LI",{});var axe=s(WM);b5e=n(axe,"STRONG",{});var V2t=s(b5e);EEr=r(V2t,"roformer"),V2t.forEach(t),yEr=r(axe," \u2014 "),XV=n(axe,"A",{href:!0});var z2t=s(XV);wEr=r(z2t,"FlaxRoFormerForMaskedLM"),z2t.forEach(t),AEr=r(axe," (RoFormer model)"),axe.forEach(t),LEr=i(he),QM=n(he,"LI",{});var nxe=s(QM);v5e=n(nxe,"STRONG",{});var W2t=s(v5e);BEr=r(W2t,"t5"),W2t.forEach(t),xEr=r(nxe," \u2014 "),VV=n(nxe,"A",{href:!0});var Q2t=s(VV);kEr=r(Q2t,"FlaxT5ForConditionalGeneration"),Q2t.forEach(t),REr=r(nxe," (T5 model)"),nxe.forEach(t),SEr=i(he),HM=n(he,"LI",{});var sxe=s(HM);T5e=n(sxe,"STRONG",{});var H2t=s(T5e);PEr=r(H2t,"wav2vec2"),H2t.forEach(t),$Er=r(sxe," \u2014 "),zV=n(sxe,"A",{href:!0});var U2t=s(zV);IEr=r(U2t,"FlaxWav2Vec2ForPreTraining"),U2t.forEach(t),DEr=r(sxe," (Wav2Vec2 model)"),sxe.forEach(t),NEr=i(he),UM=n(he,"LI",{});var lxe=s(UM);F5e=n(lxe,"STRONG",{});var J2t=s(F5e);jEr=r(J2t,"xlm-roberta"),J2t.forEach(t),qEr=r(lxe," \u2014 "),WV=n(lxe,"A",{href:!0});var Y2t=s(WV);GEr=r(Y2t,"FlaxXLMRobertaForMaskedLM"),Y2t.forEach(t),OEr=r(lxe," (XLM-RoBERTa model)"),lxe.forEach(t),he.forEach(t),XEr=i(xa),C5e=n(xa,"P",{});var K2t=s(C5e);VEr=r(K2t,"Examples:"),K2t.forEach(t),zEr=i(xa),m(Q0.$$.fragment,xa),xa.forEach(t),_i.forEach(t),JRe=i(c),lf=n(c,"H2",{class:!0});var l$e=s(lf);JM=n(l$e,"A",{id:!0,class:!0,href:!0});var Z2t=s(JM);M5e=n(Z2t,"SPAN",{});var evt=s(M5e);m(H0.$$.fragment,evt),evt.forEach(t),Z2t.forEach(t),WEr=i(l$e),E5e=n(l$e,"SPAN",{});var ovt=s(E5e);QEr=r(ovt,"FlaxAutoModelForMaskedLM"),ovt.forEach(t),l$e.forEach(t),YRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(U0.$$.fragment,bi),HEr=i(bi),df=n(bi,"P",{});var AQ=s(df);UEr=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),y5e=n(AQ,"CODE",{});var rvt=s(y5e);JEr=r(rvt,"from_pretrained()"),rvt.forEach(t),YEr=r(AQ,"class method or the "),w5e=n(AQ,"CODE",{});var tvt=s(w5e);KEr=r(tvt,"from_config()"),tvt.forEach(t),ZEr=r(AQ,`class
method.`),AQ.forEach(t),e3r=i(bi),J0=n(bi,"P",{});var i$e=s(J0);o3r=r(i$e,"This class cannot be instantiated directly using "),A5e=n(i$e,"CODE",{});var avt=s(A5e);r3r=r(avt,"__init__()"),avt.forEach(t),t3r=r(i$e," (throws an error)."),i$e.forEach(t),a3r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(Y0.$$.fragment,vi),n3r=i(vi),L5e=n(vi,"P",{});var nvt=s(L5e);s3r=r(nvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nvt.forEach(t),l3r=i(vi),cf=n(vi,"P",{});var LQ=s(cf);i3r=r(LQ,`Note:
Loading a model from its configuration file does `),B5e=n(LQ,"STRONG",{});var svt=s(B5e);d3r=r(svt,"not"),svt.forEach(t),c3r=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),x5e=n(LQ,"CODE",{});var lvt=s(x5e);f3r=r(lvt,"from_pretrained()"),lvt.forEach(t),m3r=r(LQ,"to load the model weights."),LQ.forEach(t),g3r=i(vi),k5e=n(vi,"P",{});var ivt=s(k5e);h3r=r(ivt,"Examples:"),ivt.forEach(t),p3r=i(vi),m(K0.$$.fragment,vi),vi.forEach(t),_3r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(Z0.$$.fragment,ka),u3r=i(ka),R5e=n(ka,"P",{});var dvt=s(R5e);b3r=r(dvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dvt.forEach(t),v3r=i(ka),Rn=n(ka,"P",{});var e3=s(Rn);T3r=r(e3,"The model class to instantiate is selected based on the "),S5e=n(e3,"CODE",{});var cvt=s(S5e);F3r=r(cvt,"model_type"),cvt.forEach(t),C3r=r(e3,` property of the config object (either
passed as an argument or loaded from `),P5e=n(e3,"CODE",{});var fvt=s(P5e);M3r=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),E3r=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(e3,"CODE",{});var mvt=s($5e);y3r=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),w3r=r(e3,":"),e3.forEach(t),A3r=i(ka),ue=n(ka,"UL",{});var we=s(ue);YM=n(we,"LI",{});var ixe=s(YM);I5e=n(ixe,"STRONG",{});var gvt=s(I5e);L3r=r(gvt,"albert"),gvt.forEach(t),B3r=r(ixe," \u2014 "),QV=n(ixe,"A",{href:!0});var hvt=s(QV);x3r=r(hvt,"FlaxAlbertForMaskedLM"),hvt.forEach(t),k3r=r(ixe," (ALBERT model)"),ixe.forEach(t),R3r=i(we),KM=n(we,"LI",{});var dxe=s(KM);D5e=n(dxe,"STRONG",{});var pvt=s(D5e);S3r=r(pvt,"bart"),pvt.forEach(t),P3r=r(dxe," \u2014 "),HV=n(dxe,"A",{href:!0});var _vt=s(HV);$3r=r(_vt,"FlaxBartForConditionalGeneration"),_vt.forEach(t),I3r=r(dxe," (BART model)"),dxe.forEach(t),D3r=i(we),ZM=n(we,"LI",{});var cxe=s(ZM);N5e=n(cxe,"STRONG",{});var uvt=s(N5e);N3r=r(uvt,"bert"),uvt.forEach(t),j3r=r(cxe," \u2014 "),UV=n(cxe,"A",{href:!0});var bvt=s(UV);q3r=r(bvt,"FlaxBertForMaskedLM"),bvt.forEach(t),G3r=r(cxe," (BERT model)"),cxe.forEach(t),O3r=i(we),e4=n(we,"LI",{});var fxe=s(e4);j5e=n(fxe,"STRONG",{});var vvt=s(j5e);X3r=r(vvt,"big_bird"),vvt.forEach(t),V3r=r(fxe," \u2014 "),JV=n(fxe,"A",{href:!0});var Tvt=s(JV);z3r=r(Tvt,"FlaxBigBirdForMaskedLM"),Tvt.forEach(t),W3r=r(fxe," (BigBird model)"),fxe.forEach(t),Q3r=i(we),o4=n(we,"LI",{});var mxe=s(o4);q5e=n(mxe,"STRONG",{});var Fvt=s(q5e);H3r=r(Fvt,"distilbert"),Fvt.forEach(t),U3r=r(mxe," \u2014 "),YV=n(mxe,"A",{href:!0});var Cvt=s(YV);J3r=r(Cvt,"FlaxDistilBertForMaskedLM"),Cvt.forEach(t),Y3r=r(mxe," (DistilBERT model)"),mxe.forEach(t),K3r=i(we),r4=n(we,"LI",{});var gxe=s(r4);G5e=n(gxe,"STRONG",{});var Mvt=s(G5e);Z3r=r(Mvt,"electra"),Mvt.forEach(t),eyr=r(gxe," \u2014 "),KV=n(gxe,"A",{href:!0});var Evt=s(KV);oyr=r(Evt,"FlaxElectraForMaskedLM"),Evt.forEach(t),ryr=r(gxe," (ELECTRA model)"),gxe.forEach(t),tyr=i(we),t4=n(we,"LI",{});var hxe=s(t4);O5e=n(hxe,"STRONG",{});var yvt=s(O5e);ayr=r(yvt,"mbart"),yvt.forEach(t),nyr=r(hxe," \u2014 "),ZV=n(hxe,"A",{href:!0});var wvt=s(ZV);syr=r(wvt,"FlaxMBartForConditionalGeneration"),wvt.forEach(t),lyr=r(hxe," (mBART model)"),hxe.forEach(t),iyr=i(we),a4=n(we,"LI",{});var pxe=s(a4);X5e=n(pxe,"STRONG",{});var Avt=s(X5e);dyr=r(Avt,"roberta"),Avt.forEach(t),cyr=r(pxe," \u2014 "),ez=n(pxe,"A",{href:!0});var Lvt=s(ez);fyr=r(Lvt,"FlaxRobertaForMaskedLM"),Lvt.forEach(t),myr=r(pxe," (RoBERTa model)"),pxe.forEach(t),gyr=i(we),n4=n(we,"LI",{});var _xe=s(n4);V5e=n(_xe,"STRONG",{});var Bvt=s(V5e);hyr=r(Bvt,"roformer"),Bvt.forEach(t),pyr=r(_xe," \u2014 "),oz=n(_xe,"A",{href:!0});var xvt=s(oz);_yr=r(xvt,"FlaxRoFormerForMaskedLM"),xvt.forEach(t),uyr=r(_xe," (RoFormer model)"),_xe.forEach(t),byr=i(we),s4=n(we,"LI",{});var uxe=s(s4);z5e=n(uxe,"STRONG",{});var kvt=s(z5e);vyr=r(kvt,"xlm-roberta"),kvt.forEach(t),Tyr=r(uxe," \u2014 "),rz=n(uxe,"A",{href:!0});var Rvt=s(rz);Fyr=r(Rvt,"FlaxXLMRobertaForMaskedLM"),Rvt.forEach(t),Cyr=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),we.forEach(t),Myr=i(ka),W5e=n(ka,"P",{});var Svt=s(W5e);Eyr=r(Svt,"Examples:"),Svt.forEach(t),yyr=i(ka),m(eL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),KRe=i(c),ff=n(c,"H2",{class:!0});var d$e=s(ff);l4=n(d$e,"A",{id:!0,class:!0,href:!0});var Pvt=s(l4);Q5e=n(Pvt,"SPAN",{});var $vt=s(Q5e);m(oL.$$.fragment,$vt),$vt.forEach(t),Pvt.forEach(t),wyr=i(d$e),H5e=n(d$e,"SPAN",{});var Ivt=s(H5e);Ayr=r(Ivt,"FlaxAutoModelForSeq2SeqLM"),Ivt.forEach(t),d$e.forEach(t),ZRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(rL.$$.fragment,Ti),Lyr=i(Ti),mf=n(Ti,"P",{});var BQ=s(mf);Byr=r(BQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),U5e=n(BQ,"CODE",{});var Dvt=s(U5e);xyr=r(Dvt,"from_pretrained()"),Dvt.forEach(t),kyr=r(BQ,"class method or the "),J5e=n(BQ,"CODE",{});var Nvt=s(J5e);Ryr=r(Nvt,"from_config()"),Nvt.forEach(t),Syr=r(BQ,`class
method.`),BQ.forEach(t),Pyr=i(Ti),tL=n(Ti,"P",{});var c$e=s(tL);$yr=r(c$e,"This class cannot be instantiated directly using "),Y5e=n(c$e,"CODE",{});var jvt=s(Y5e);Iyr=r(jvt,"__init__()"),jvt.forEach(t),Dyr=r(c$e," (throws an error)."),c$e.forEach(t),Nyr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(aL.$$.fragment,Fi),jyr=i(Fi),K5e=n(Fi,"P",{});var qvt=s(K5e);qyr=r(qvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qvt.forEach(t),Gyr=i(Fi),gf=n(Fi,"P",{});var xQ=s(gf);Oyr=r(xQ,`Note:
Loading a model from its configuration file does `),Z5e=n(xQ,"STRONG",{});var Gvt=s(Z5e);Xyr=r(Gvt,"not"),Gvt.forEach(t),Vyr=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e2e=n(xQ,"CODE",{});var Ovt=s(e2e);zyr=r(Ovt,"from_pretrained()"),Ovt.forEach(t),Wyr=r(xQ,"to load the model weights."),xQ.forEach(t),Qyr=i(Fi),o2e=n(Fi,"P",{});var Xvt=s(o2e);Hyr=r(Xvt,"Examples:"),Xvt.forEach(t),Uyr=i(Fi),m(nL.$$.fragment,Fi),Fi.forEach(t),Jyr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(sL.$$.fragment,Ra),Yyr=i(Ra),r2e=n(Ra,"P",{});var Vvt=s(r2e);Kyr=r(Vvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vvt.forEach(t),Zyr=i(Ra),Sn=n(Ra,"P",{});var o3=s(Sn);ewr=r(o3,"The model class to instantiate is selected based on the "),t2e=n(o3,"CODE",{});var zvt=s(t2e);owr=r(zvt,"model_type"),zvt.forEach(t),rwr=r(o3,` property of the config object (either
passed as an argument or loaded from `),a2e=n(o3,"CODE",{});var Wvt=s(a2e);twr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),awr=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(o3,"CODE",{});var Qvt=s(n2e);nwr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),swr=r(o3,":"),o3.forEach(t),lwr=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);i4=n(so,"LI",{});var bxe=s(i4);s2e=n(bxe,"STRONG",{});var Hvt=s(s2e);iwr=r(Hvt,"bart"),Hvt.forEach(t),dwr=r(bxe," \u2014 "),tz=n(bxe,"A",{href:!0});var Uvt=s(tz);cwr=r(Uvt,"FlaxBartForConditionalGeneration"),Uvt.forEach(t),fwr=r(bxe," (BART model)"),bxe.forEach(t),mwr=i(so),d4=n(so,"LI",{});var vxe=s(d4);l2e=n(vxe,"STRONG",{});var Jvt=s(l2e);gwr=r(Jvt,"blenderbot"),Jvt.forEach(t),hwr=r(vxe," \u2014 "),az=n(vxe,"A",{href:!0});var Yvt=s(az);pwr=r(Yvt,"FlaxBlenderbotForConditionalGeneration"),Yvt.forEach(t),_wr=r(vxe," (Blenderbot model)"),vxe.forEach(t),uwr=i(so),c4=n(so,"LI",{});var Txe=s(c4);i2e=n(Txe,"STRONG",{});var Kvt=s(i2e);bwr=r(Kvt,"blenderbot-small"),Kvt.forEach(t),vwr=r(Txe," \u2014 "),nz=n(Txe,"A",{href:!0});var Zvt=s(nz);Twr=r(Zvt,"FlaxBlenderbotSmallForConditionalGeneration"),Zvt.forEach(t),Fwr=r(Txe," (BlenderbotSmall model)"),Txe.forEach(t),Cwr=i(so),f4=n(so,"LI",{});var Fxe=s(f4);d2e=n(Fxe,"STRONG",{});var eTt=s(d2e);Mwr=r(eTt,"encoder-decoder"),eTt.forEach(t),Ewr=r(Fxe," \u2014 "),sz=n(Fxe,"A",{href:!0});var oTt=s(sz);ywr=r(oTt,"FlaxEncoderDecoderModel"),oTt.forEach(t),wwr=r(Fxe," (Encoder decoder model)"),Fxe.forEach(t),Awr=i(so),m4=n(so,"LI",{});var Cxe=s(m4);c2e=n(Cxe,"STRONG",{});var rTt=s(c2e);Lwr=r(rTt,"marian"),rTt.forEach(t),Bwr=r(Cxe," \u2014 "),lz=n(Cxe,"A",{href:!0});var tTt=s(lz);xwr=r(tTt,"FlaxMarianMTModel"),tTt.forEach(t),kwr=r(Cxe," (Marian model)"),Cxe.forEach(t),Rwr=i(so),g4=n(so,"LI",{});var Mxe=s(g4);f2e=n(Mxe,"STRONG",{});var aTt=s(f2e);Swr=r(aTt,"mbart"),aTt.forEach(t),Pwr=r(Mxe," \u2014 "),iz=n(Mxe,"A",{href:!0});var nTt=s(iz);$wr=r(nTt,"FlaxMBartForConditionalGeneration"),nTt.forEach(t),Iwr=r(Mxe," (mBART model)"),Mxe.forEach(t),Dwr=i(so),h4=n(so,"LI",{});var Exe=s(h4);m2e=n(Exe,"STRONG",{});var sTt=s(m2e);Nwr=r(sTt,"mt5"),sTt.forEach(t),jwr=r(Exe," \u2014 "),dz=n(Exe,"A",{href:!0});var lTt=s(dz);qwr=r(lTt,"FlaxMT5ForConditionalGeneration"),lTt.forEach(t),Gwr=r(Exe," (mT5 model)"),Exe.forEach(t),Owr=i(so),p4=n(so,"LI",{});var yxe=s(p4);g2e=n(yxe,"STRONG",{});var iTt=s(g2e);Xwr=r(iTt,"pegasus"),iTt.forEach(t),Vwr=r(yxe," \u2014 "),cz=n(yxe,"A",{href:!0});var dTt=s(cz);zwr=r(dTt,"FlaxPegasusForConditionalGeneration"),dTt.forEach(t),Wwr=r(yxe," (Pegasus model)"),yxe.forEach(t),Qwr=i(so),_4=n(so,"LI",{});var wxe=s(_4);h2e=n(wxe,"STRONG",{});var cTt=s(h2e);Hwr=r(cTt,"t5"),cTt.forEach(t),Uwr=r(wxe," \u2014 "),fz=n(wxe,"A",{href:!0});var fTt=s(fz);Jwr=r(fTt,"FlaxT5ForConditionalGeneration"),fTt.forEach(t),Ywr=r(wxe," (T5 model)"),wxe.forEach(t),so.forEach(t),Kwr=i(Ra),p2e=n(Ra,"P",{});var mTt=s(p2e);Zwr=r(mTt,"Examples:"),mTt.forEach(t),e6r=i(Ra),m(lL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),eSe=i(c),hf=n(c,"H2",{class:!0});var f$e=s(hf);u4=n(f$e,"A",{id:!0,class:!0,href:!0});var gTt=s(u4);_2e=n(gTt,"SPAN",{});var hTt=s(_2e);m(iL.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),o6r=i(f$e),u2e=n(f$e,"SPAN",{});var pTt=s(u2e);r6r=r(pTt,"FlaxAutoModelForSequenceClassification"),pTt.forEach(t),f$e.forEach(t),oSe=i(c),Dr=n(c,"DIV",{class:!0});var Ci=s(Dr);m(dL.$$.fragment,Ci),t6r=i(Ci),pf=n(Ci,"P",{});var kQ=s(pf);a6r=r(kQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),b2e=n(kQ,"CODE",{});var _Tt=s(b2e);n6r=r(_Tt,"from_pretrained()"),_Tt.forEach(t),s6r=r(kQ,"class method or the "),v2e=n(kQ,"CODE",{});var uTt=s(v2e);l6r=r(uTt,"from_config()"),uTt.forEach(t),i6r=r(kQ,`class
method.`),kQ.forEach(t),d6r=i(Ci),cL=n(Ci,"P",{});var m$e=s(cL);c6r=r(m$e,"This class cannot be instantiated directly using "),T2e=n(m$e,"CODE",{});var bTt=s(T2e);f6r=r(bTt,"__init__()"),bTt.forEach(t),m6r=r(m$e," (throws an error)."),m$e.forEach(t),g6r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(fL.$$.fragment,Mi),h6r=i(Mi),F2e=n(Mi,"P",{});var vTt=s(F2e);p6r=r(vTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vTt.forEach(t),_6r=i(Mi),_f=n(Mi,"P",{});var RQ=s(_f);u6r=r(RQ,`Note:
Loading a model from its configuration file does `),C2e=n(RQ,"STRONG",{});var TTt=s(C2e);b6r=r(TTt,"not"),TTt.forEach(t),v6r=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),M2e=n(RQ,"CODE",{});var FTt=s(M2e);T6r=r(FTt,"from_pretrained()"),FTt.forEach(t),F6r=r(RQ,"to load the model weights."),RQ.forEach(t),C6r=i(Mi),E2e=n(Mi,"P",{});var CTt=s(E2e);M6r=r(CTt,"Examples:"),CTt.forEach(t),E6r=i(Mi),m(mL.$$.fragment,Mi),Mi.forEach(t),y6r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(gL.$$.fragment,Sa),w6r=i(Sa),y2e=n(Sa,"P",{});var MTt=s(y2e);A6r=r(MTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MTt.forEach(t),L6r=i(Sa),Pn=n(Sa,"P",{});var r3=s(Pn);B6r=r(r3,"The model class to instantiate is selected based on the "),w2e=n(r3,"CODE",{});var ETt=s(w2e);x6r=r(ETt,"model_type"),ETt.forEach(t),k6r=r(r3,` property of the config object (either
passed as an argument or loaded from `),A2e=n(r3,"CODE",{});var yTt=s(A2e);R6r=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),S6r=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(r3,"CODE",{});var wTt=s(L2e);P6r=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),$6r=r(r3,":"),r3.forEach(t),I6r=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);b4=n(Ae,"LI",{});var Axe=s(b4);B2e=n(Axe,"STRONG",{});var ATt=s(B2e);D6r=r(ATt,"albert"),ATt.forEach(t),N6r=r(Axe," \u2014 "),mz=n(Axe,"A",{href:!0});var LTt=s(mz);j6r=r(LTt,"FlaxAlbertForSequenceClassification"),LTt.forEach(t),q6r=r(Axe," (ALBERT model)"),Axe.forEach(t),G6r=i(Ae),v4=n(Ae,"LI",{});var Lxe=s(v4);x2e=n(Lxe,"STRONG",{});var BTt=s(x2e);O6r=r(BTt,"bart"),BTt.forEach(t),X6r=r(Lxe," \u2014 "),gz=n(Lxe,"A",{href:!0});var xTt=s(gz);V6r=r(xTt,"FlaxBartForSequenceClassification"),xTt.forEach(t),z6r=r(Lxe," (BART model)"),Lxe.forEach(t),W6r=i(Ae),T4=n(Ae,"LI",{});var Bxe=s(T4);k2e=n(Bxe,"STRONG",{});var kTt=s(k2e);Q6r=r(kTt,"bert"),kTt.forEach(t),H6r=r(Bxe," \u2014 "),hz=n(Bxe,"A",{href:!0});var RTt=s(hz);U6r=r(RTt,"FlaxBertForSequenceClassification"),RTt.forEach(t),J6r=r(Bxe," (BERT model)"),Bxe.forEach(t),Y6r=i(Ae),F4=n(Ae,"LI",{});var xxe=s(F4);R2e=n(xxe,"STRONG",{});var STt=s(R2e);K6r=r(STt,"big_bird"),STt.forEach(t),Z6r=r(xxe," \u2014 "),pz=n(xxe,"A",{href:!0});var PTt=s(pz);eAr=r(PTt,"FlaxBigBirdForSequenceClassification"),PTt.forEach(t),oAr=r(xxe," (BigBird model)"),xxe.forEach(t),rAr=i(Ae),C4=n(Ae,"LI",{});var kxe=s(C4);S2e=n(kxe,"STRONG",{});var $Tt=s(S2e);tAr=r($Tt,"distilbert"),$Tt.forEach(t),aAr=r(kxe," \u2014 "),_z=n(kxe,"A",{href:!0});var ITt=s(_z);nAr=r(ITt,"FlaxDistilBertForSequenceClassification"),ITt.forEach(t),sAr=r(kxe," (DistilBERT model)"),kxe.forEach(t),lAr=i(Ae),M4=n(Ae,"LI",{});var Rxe=s(M4);P2e=n(Rxe,"STRONG",{});var DTt=s(P2e);iAr=r(DTt,"electra"),DTt.forEach(t),dAr=r(Rxe," \u2014 "),uz=n(Rxe,"A",{href:!0});var NTt=s(uz);cAr=r(NTt,"FlaxElectraForSequenceClassification"),NTt.forEach(t),fAr=r(Rxe," (ELECTRA model)"),Rxe.forEach(t),mAr=i(Ae),E4=n(Ae,"LI",{});var Sxe=s(E4);$2e=n(Sxe,"STRONG",{});var jTt=s($2e);gAr=r(jTt,"mbart"),jTt.forEach(t),hAr=r(Sxe," \u2014 "),bz=n(Sxe,"A",{href:!0});var qTt=s(bz);pAr=r(qTt,"FlaxMBartForSequenceClassification"),qTt.forEach(t),_Ar=r(Sxe," (mBART model)"),Sxe.forEach(t),uAr=i(Ae),y4=n(Ae,"LI",{});var Pxe=s(y4);I2e=n(Pxe,"STRONG",{});var GTt=s(I2e);bAr=r(GTt,"roberta"),GTt.forEach(t),vAr=r(Pxe," \u2014 "),vz=n(Pxe,"A",{href:!0});var OTt=s(vz);TAr=r(OTt,"FlaxRobertaForSequenceClassification"),OTt.forEach(t),FAr=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),CAr=i(Ae),w4=n(Ae,"LI",{});var $xe=s(w4);D2e=n($xe,"STRONG",{});var XTt=s(D2e);MAr=r(XTt,"roformer"),XTt.forEach(t),EAr=r($xe," \u2014 "),Tz=n($xe,"A",{href:!0});var VTt=s(Tz);yAr=r(VTt,"FlaxRoFormerForSequenceClassification"),VTt.forEach(t),wAr=r($xe," (RoFormer model)"),$xe.forEach(t),AAr=i(Ae),A4=n(Ae,"LI",{});var Ixe=s(A4);N2e=n(Ixe,"STRONG",{});var zTt=s(N2e);LAr=r(zTt,"xlm-roberta"),zTt.forEach(t),BAr=r(Ixe," \u2014 "),Fz=n(Ixe,"A",{href:!0});var WTt=s(Fz);xAr=r(WTt,"FlaxXLMRobertaForSequenceClassification"),WTt.forEach(t),kAr=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),Ae.forEach(t),RAr=i(Sa),j2e=n(Sa,"P",{});var QTt=s(j2e);SAr=r(QTt,"Examples:"),QTt.forEach(t),PAr=i(Sa),m(hL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),rSe=i(c),uf=n(c,"H2",{class:!0});var g$e=s(uf);L4=n(g$e,"A",{id:!0,class:!0,href:!0});var HTt=s(L4);q2e=n(HTt,"SPAN",{});var UTt=s(q2e);m(pL.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),$Ar=i(g$e),G2e=n(g$e,"SPAN",{});var JTt=s(G2e);IAr=r(JTt,"FlaxAutoModelForQuestionAnswering"),JTt.forEach(t),g$e.forEach(t),tSe=i(c),Nr=n(c,"DIV",{class:!0});var Ei=s(Nr);m(_L.$$.fragment,Ei),DAr=i(Ei),bf=n(Ei,"P",{});var SQ=s(bf);NAr=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),O2e=n(SQ,"CODE",{});var YTt=s(O2e);jAr=r(YTt,"from_pretrained()"),YTt.forEach(t),qAr=r(SQ,"class method or the "),X2e=n(SQ,"CODE",{});var KTt=s(X2e);GAr=r(KTt,"from_config()"),KTt.forEach(t),OAr=r(SQ,`class
method.`),SQ.forEach(t),XAr=i(Ei),uL=n(Ei,"P",{});var h$e=s(uL);VAr=r(h$e,"This class cannot be instantiated directly using "),V2e=n(h$e,"CODE",{});var ZTt=s(V2e);zAr=r(ZTt,"__init__()"),ZTt.forEach(t),WAr=r(h$e," (throws an error)."),h$e.forEach(t),QAr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(bL.$$.fragment,yi),HAr=i(yi),z2e=n(yi,"P",{});var eFt=s(z2e);UAr=r(eFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eFt.forEach(t),JAr=i(yi),vf=n(yi,"P",{});var PQ=s(vf);YAr=r(PQ,`Note:
Loading a model from its configuration file does `),W2e=n(PQ,"STRONG",{});var oFt=s(W2e);KAr=r(oFt,"not"),oFt.forEach(t),ZAr=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q2e=n(PQ,"CODE",{});var rFt=s(Q2e);e0r=r(rFt,"from_pretrained()"),rFt.forEach(t),o0r=r(PQ,"to load the model weights."),PQ.forEach(t),r0r=i(yi),H2e=n(yi,"P",{});var tFt=s(H2e);t0r=r(tFt,"Examples:"),tFt.forEach(t),a0r=i(yi),m(vL.$$.fragment,yi),yi.forEach(t),n0r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(TL.$$.fragment,Pa),s0r=i(Pa),U2e=n(Pa,"P",{});var aFt=s(U2e);l0r=r(aFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aFt.forEach(t),i0r=i(Pa),$n=n(Pa,"P",{});var t3=s($n);d0r=r(t3,"The model class to instantiate is selected based on the "),J2e=n(t3,"CODE",{});var nFt=s(J2e);c0r=r(nFt,"model_type"),nFt.forEach(t),f0r=r(t3,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(t3,"CODE",{});var sFt=s(Y2e);m0r=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),g0r=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(t3,"CODE",{});var lFt=s(K2e);h0r=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),p0r=r(t3,":"),t3.forEach(t),_0r=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);B4=n(Le,"LI",{});var Dxe=s(B4);Z2e=n(Dxe,"STRONG",{});var iFt=s(Z2e);u0r=r(iFt,"albert"),iFt.forEach(t),b0r=r(Dxe," \u2014 "),Cz=n(Dxe,"A",{href:!0});var dFt=s(Cz);v0r=r(dFt,"FlaxAlbertForQuestionAnswering"),dFt.forEach(t),T0r=r(Dxe," (ALBERT model)"),Dxe.forEach(t),F0r=i(Le),x4=n(Le,"LI",{});var Nxe=s(x4);eve=n(Nxe,"STRONG",{});var cFt=s(eve);C0r=r(cFt,"bart"),cFt.forEach(t),M0r=r(Nxe," \u2014 "),Mz=n(Nxe,"A",{href:!0});var fFt=s(Mz);E0r=r(fFt,"FlaxBartForQuestionAnswering"),fFt.forEach(t),y0r=r(Nxe," (BART model)"),Nxe.forEach(t),w0r=i(Le),k4=n(Le,"LI",{});var jxe=s(k4);ove=n(jxe,"STRONG",{});var mFt=s(ove);A0r=r(mFt,"bert"),mFt.forEach(t),L0r=r(jxe," \u2014 "),Ez=n(jxe,"A",{href:!0});var gFt=s(Ez);B0r=r(gFt,"FlaxBertForQuestionAnswering"),gFt.forEach(t),x0r=r(jxe," (BERT model)"),jxe.forEach(t),k0r=i(Le),R4=n(Le,"LI",{});var qxe=s(R4);rve=n(qxe,"STRONG",{});var hFt=s(rve);R0r=r(hFt,"big_bird"),hFt.forEach(t),S0r=r(qxe," \u2014 "),yz=n(qxe,"A",{href:!0});var pFt=s(yz);P0r=r(pFt,"FlaxBigBirdForQuestionAnswering"),pFt.forEach(t),$0r=r(qxe," (BigBird model)"),qxe.forEach(t),I0r=i(Le),S4=n(Le,"LI",{});var Gxe=s(S4);tve=n(Gxe,"STRONG",{});var _Ft=s(tve);D0r=r(_Ft,"distilbert"),_Ft.forEach(t),N0r=r(Gxe," \u2014 "),wz=n(Gxe,"A",{href:!0});var uFt=s(wz);j0r=r(uFt,"FlaxDistilBertForQuestionAnswering"),uFt.forEach(t),q0r=r(Gxe," (DistilBERT model)"),Gxe.forEach(t),G0r=i(Le),P4=n(Le,"LI",{});var Oxe=s(P4);ave=n(Oxe,"STRONG",{});var bFt=s(ave);O0r=r(bFt,"electra"),bFt.forEach(t),X0r=r(Oxe," \u2014 "),Az=n(Oxe,"A",{href:!0});var vFt=s(Az);V0r=r(vFt,"FlaxElectraForQuestionAnswering"),vFt.forEach(t),z0r=r(Oxe," (ELECTRA model)"),Oxe.forEach(t),W0r=i(Le),$4=n(Le,"LI",{});var Xxe=s($4);nve=n(Xxe,"STRONG",{});var TFt=s(nve);Q0r=r(TFt,"mbart"),TFt.forEach(t),H0r=r(Xxe," \u2014 "),Lz=n(Xxe,"A",{href:!0});var FFt=s(Lz);U0r=r(FFt,"FlaxMBartForQuestionAnswering"),FFt.forEach(t),J0r=r(Xxe," (mBART model)"),Xxe.forEach(t),Y0r=i(Le),I4=n(Le,"LI",{});var Vxe=s(I4);sve=n(Vxe,"STRONG",{});var CFt=s(sve);K0r=r(CFt,"roberta"),CFt.forEach(t),Z0r=r(Vxe," \u2014 "),Bz=n(Vxe,"A",{href:!0});var MFt=s(Bz);eLr=r(MFt,"FlaxRobertaForQuestionAnswering"),MFt.forEach(t),oLr=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),rLr=i(Le),D4=n(Le,"LI",{});var zxe=s(D4);lve=n(zxe,"STRONG",{});var EFt=s(lve);tLr=r(EFt,"roformer"),EFt.forEach(t),aLr=r(zxe," \u2014 "),xz=n(zxe,"A",{href:!0});var yFt=s(xz);nLr=r(yFt,"FlaxRoFormerForQuestionAnswering"),yFt.forEach(t),sLr=r(zxe," (RoFormer model)"),zxe.forEach(t),lLr=i(Le),N4=n(Le,"LI",{});var Wxe=s(N4);ive=n(Wxe,"STRONG",{});var wFt=s(ive);iLr=r(wFt,"xlm-roberta"),wFt.forEach(t),dLr=r(Wxe," \u2014 "),kz=n(Wxe,"A",{href:!0});var AFt=s(kz);cLr=r(AFt,"FlaxXLMRobertaForQuestionAnswering"),AFt.forEach(t),fLr=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),Le.forEach(t),mLr=i(Pa),dve=n(Pa,"P",{});var LFt=s(dve);gLr=r(LFt,"Examples:"),LFt.forEach(t),hLr=i(Pa),m(FL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),aSe=i(c),Tf=n(c,"H2",{class:!0});var p$e=s(Tf);j4=n(p$e,"A",{id:!0,class:!0,href:!0});var BFt=s(j4);cve=n(BFt,"SPAN",{});var xFt=s(cve);m(CL.$$.fragment,xFt),xFt.forEach(t),BFt.forEach(t),pLr=i(p$e),fve=n(p$e,"SPAN",{});var kFt=s(fve);_Lr=r(kFt,"FlaxAutoModelForTokenClassification"),kFt.forEach(t),p$e.forEach(t),nSe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);m(ML.$$.fragment,wi),uLr=i(wi),Ff=n(wi,"P",{});var $Q=s(Ff);bLr=r($Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mve=n($Q,"CODE",{});var RFt=s(mve);vLr=r(RFt,"from_pretrained()"),RFt.forEach(t),TLr=r($Q,"class method or the "),gve=n($Q,"CODE",{});var SFt=s(gve);FLr=r(SFt,"from_config()"),SFt.forEach(t),CLr=r($Q,`class
method.`),$Q.forEach(t),MLr=i(wi),EL=n(wi,"P",{});var _$e=s(EL);ELr=r(_$e,"This class cannot be instantiated directly using "),hve=n(_$e,"CODE",{});var PFt=s(hve);yLr=r(PFt,"__init__()"),PFt.forEach(t),wLr=r(_$e," (throws an error)."),_$e.forEach(t),ALr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(yL.$$.fragment,Ai),LLr=i(Ai),pve=n(Ai,"P",{});var $Ft=s(pve);BLr=r($Ft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$Ft.forEach(t),xLr=i(Ai),Cf=n(Ai,"P",{});var IQ=s(Cf);kLr=r(IQ,`Note:
Loading a model from its configuration file does `),_ve=n(IQ,"STRONG",{});var IFt=s(_ve);RLr=r(IFt,"not"),IFt.forEach(t),SLr=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uve=n(IQ,"CODE",{});var DFt=s(uve);PLr=r(DFt,"from_pretrained()"),DFt.forEach(t),$Lr=r(IQ,"to load the model weights."),IQ.forEach(t),ILr=i(Ai),bve=n(Ai,"P",{});var NFt=s(bve);DLr=r(NFt,"Examples:"),NFt.forEach(t),NLr=i(Ai),m(wL.$$.fragment,Ai),Ai.forEach(t),jLr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(AL.$$.fragment,$a),qLr=i($a),vve=n($a,"P",{});var jFt=s(vve);GLr=r(jFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jFt.forEach(t),OLr=i($a),In=n($a,"P",{});var a3=s(In);XLr=r(a3,"The model class to instantiate is selected based on the "),Tve=n(a3,"CODE",{});var qFt=s(Tve);VLr=r(qFt,"model_type"),qFt.forEach(t),zLr=r(a3,` property of the config object (either
passed as an argument or loaded from `),Fve=n(a3,"CODE",{});var GFt=s(Fve);WLr=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),QLr=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(a3,"CODE",{});var OFt=s(Cve);HLr=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),ULr=r(a3,":"),a3.forEach(t),JLr=i($a),Se=n($a,"UL",{});var Oo=s(Se);q4=n(Oo,"LI",{});var Qxe=s(q4);Mve=n(Qxe,"STRONG",{});var XFt=s(Mve);YLr=r(XFt,"albert"),XFt.forEach(t),KLr=r(Qxe," \u2014 "),Rz=n(Qxe,"A",{href:!0});var VFt=s(Rz);ZLr=r(VFt,"FlaxAlbertForTokenClassification"),VFt.forEach(t),e7r=r(Qxe," (ALBERT model)"),Qxe.forEach(t),o7r=i(Oo),G4=n(Oo,"LI",{});var Hxe=s(G4);Eve=n(Hxe,"STRONG",{});var zFt=s(Eve);r7r=r(zFt,"bert"),zFt.forEach(t),t7r=r(Hxe," \u2014 "),Sz=n(Hxe,"A",{href:!0});var WFt=s(Sz);a7r=r(WFt,"FlaxBertForTokenClassification"),WFt.forEach(t),n7r=r(Hxe," (BERT model)"),Hxe.forEach(t),s7r=i(Oo),O4=n(Oo,"LI",{});var Uxe=s(O4);yve=n(Uxe,"STRONG",{});var QFt=s(yve);l7r=r(QFt,"big_bird"),QFt.forEach(t),i7r=r(Uxe," \u2014 "),Pz=n(Uxe,"A",{href:!0});var HFt=s(Pz);d7r=r(HFt,"FlaxBigBirdForTokenClassification"),HFt.forEach(t),c7r=r(Uxe," (BigBird model)"),Uxe.forEach(t),f7r=i(Oo),X4=n(Oo,"LI",{});var Jxe=s(X4);wve=n(Jxe,"STRONG",{});var UFt=s(wve);m7r=r(UFt,"distilbert"),UFt.forEach(t),g7r=r(Jxe," \u2014 "),$z=n(Jxe,"A",{href:!0});var JFt=s($z);h7r=r(JFt,"FlaxDistilBertForTokenClassification"),JFt.forEach(t),p7r=r(Jxe," (DistilBERT model)"),Jxe.forEach(t),_7r=i(Oo),V4=n(Oo,"LI",{});var Yxe=s(V4);Ave=n(Yxe,"STRONG",{});var YFt=s(Ave);u7r=r(YFt,"electra"),YFt.forEach(t),b7r=r(Yxe," \u2014 "),Iz=n(Yxe,"A",{href:!0});var KFt=s(Iz);v7r=r(KFt,"FlaxElectraForTokenClassification"),KFt.forEach(t),T7r=r(Yxe," (ELECTRA model)"),Yxe.forEach(t),F7r=i(Oo),z4=n(Oo,"LI",{});var Kxe=s(z4);Lve=n(Kxe,"STRONG",{});var ZFt=s(Lve);C7r=r(ZFt,"roberta"),ZFt.forEach(t),M7r=r(Kxe," \u2014 "),Dz=n(Kxe,"A",{href:!0});var eCt=s(Dz);E7r=r(eCt,"FlaxRobertaForTokenClassification"),eCt.forEach(t),y7r=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),w7r=i(Oo),W4=n(Oo,"LI",{});var Zxe=s(W4);Bve=n(Zxe,"STRONG",{});var oCt=s(Bve);A7r=r(oCt,"roformer"),oCt.forEach(t),L7r=r(Zxe," \u2014 "),Nz=n(Zxe,"A",{href:!0});var rCt=s(Nz);B7r=r(rCt,"FlaxRoFormerForTokenClassification"),rCt.forEach(t),x7r=r(Zxe," (RoFormer model)"),Zxe.forEach(t),k7r=i(Oo),Q4=n(Oo,"LI",{});var eke=s(Q4);xve=n(eke,"STRONG",{});var tCt=s(xve);R7r=r(tCt,"xlm-roberta"),tCt.forEach(t),S7r=r(eke," \u2014 "),jz=n(eke,"A",{href:!0});var aCt=s(jz);P7r=r(aCt,"FlaxXLMRobertaForTokenClassification"),aCt.forEach(t),$7r=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),Oo.forEach(t),I7r=i($a),kve=n($a,"P",{});var nCt=s(kve);D7r=r(nCt,"Examples:"),nCt.forEach(t),N7r=i($a),m(LL.$$.fragment,$a),$a.forEach(t),wi.forEach(t),sSe=i(c),Mf=n(c,"H2",{class:!0});var u$e=s(Mf);H4=n(u$e,"A",{id:!0,class:!0,href:!0});var sCt=s(H4);Rve=n(sCt,"SPAN",{});var lCt=s(Rve);m(BL.$$.fragment,lCt),lCt.forEach(t),sCt.forEach(t),j7r=i(u$e),Sve=n(u$e,"SPAN",{});var iCt=s(Sve);q7r=r(iCt,"FlaxAutoModelForMultipleChoice"),iCt.forEach(t),u$e.forEach(t),lSe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(xL.$$.fragment,Li),G7r=i(Li),Ef=n(Li,"P",{});var DQ=s(Ef);O7r=r(DQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pve=n(DQ,"CODE",{});var dCt=s(Pve);X7r=r(dCt,"from_pretrained()"),dCt.forEach(t),V7r=r(DQ,"class method or the "),$ve=n(DQ,"CODE",{});var cCt=s($ve);z7r=r(cCt,"from_config()"),cCt.forEach(t),W7r=r(DQ,`class
method.`),DQ.forEach(t),Q7r=i(Li),kL=n(Li,"P",{});var b$e=s(kL);H7r=r(b$e,"This class cannot be instantiated directly using "),Ive=n(b$e,"CODE",{});var fCt=s(Ive);U7r=r(fCt,"__init__()"),fCt.forEach(t),J7r=r(b$e," (throws an error)."),b$e.forEach(t),Y7r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(RL.$$.fragment,Bi),K7r=i(Bi),Dve=n(Bi,"P",{});var mCt=s(Dve);Z7r=r(mCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mCt.forEach(t),e8r=i(Bi),yf=n(Bi,"P",{});var NQ=s(yf);o8r=r(NQ,`Note:
Loading a model from its configuration file does `),Nve=n(NQ,"STRONG",{});var gCt=s(Nve);r8r=r(gCt,"not"),gCt.forEach(t),t8r=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jve=n(NQ,"CODE",{});var hCt=s(jve);a8r=r(hCt,"from_pretrained()"),hCt.forEach(t),n8r=r(NQ,"to load the model weights."),NQ.forEach(t),s8r=i(Bi),qve=n(Bi,"P",{});var pCt=s(qve);l8r=r(pCt,"Examples:"),pCt.forEach(t),i8r=i(Bi),m(SL.$$.fragment,Bi),Bi.forEach(t),d8r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(PL.$$.fragment,Ia),c8r=i(Ia),Gve=n(Ia,"P",{});var _Ct=s(Gve);f8r=r(_Ct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_Ct.forEach(t),m8r=i(Ia),Dn=n(Ia,"P",{});var n3=s(Dn);g8r=r(n3,"The model class to instantiate is selected based on the "),Ove=n(n3,"CODE",{});var uCt=s(Ove);h8r=r(uCt,"model_type"),uCt.forEach(t),p8r=r(n3,` property of the config object (either
passed as an argument or loaded from `),Xve=n(n3,"CODE",{});var bCt=s(Xve);_8r=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),u8r=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(n3,"CODE",{});var vCt=s(Vve);b8r=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),v8r=r(n3,":"),n3.forEach(t),T8r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);U4=n(Xo,"LI",{});var oke=s(U4);zve=n(oke,"STRONG",{});var TCt=s(zve);F8r=r(TCt,"albert"),TCt.forEach(t),C8r=r(oke," \u2014 "),qz=n(oke,"A",{href:!0});var FCt=s(qz);M8r=r(FCt,"FlaxAlbertForMultipleChoice"),FCt.forEach(t),E8r=r(oke," (ALBERT model)"),oke.forEach(t),y8r=i(Xo),J4=n(Xo,"LI",{});var rke=s(J4);Wve=n(rke,"STRONG",{});var CCt=s(Wve);w8r=r(CCt,"bert"),CCt.forEach(t),A8r=r(rke," \u2014 "),Gz=n(rke,"A",{href:!0});var MCt=s(Gz);L8r=r(MCt,"FlaxBertForMultipleChoice"),MCt.forEach(t),B8r=r(rke," (BERT model)"),rke.forEach(t),x8r=i(Xo),Y4=n(Xo,"LI",{});var tke=s(Y4);Qve=n(tke,"STRONG",{});var ECt=s(Qve);k8r=r(ECt,"big_bird"),ECt.forEach(t),R8r=r(tke," \u2014 "),Oz=n(tke,"A",{href:!0});var yCt=s(Oz);S8r=r(yCt,"FlaxBigBirdForMultipleChoice"),yCt.forEach(t),P8r=r(tke," (BigBird model)"),tke.forEach(t),$8r=i(Xo),K4=n(Xo,"LI",{});var ake=s(K4);Hve=n(ake,"STRONG",{});var wCt=s(Hve);I8r=r(wCt,"distilbert"),wCt.forEach(t),D8r=r(ake," \u2014 "),Xz=n(ake,"A",{href:!0});var ACt=s(Xz);N8r=r(ACt,"FlaxDistilBertForMultipleChoice"),ACt.forEach(t),j8r=r(ake," (DistilBERT model)"),ake.forEach(t),q8r=i(Xo),Z4=n(Xo,"LI",{});var nke=s(Z4);Uve=n(nke,"STRONG",{});var LCt=s(Uve);G8r=r(LCt,"electra"),LCt.forEach(t),O8r=r(nke," \u2014 "),Vz=n(nke,"A",{href:!0});var BCt=s(Vz);X8r=r(BCt,"FlaxElectraForMultipleChoice"),BCt.forEach(t),V8r=r(nke," (ELECTRA model)"),nke.forEach(t),z8r=i(Xo),eE=n(Xo,"LI",{});var ske=s(eE);Jve=n(ske,"STRONG",{});var xCt=s(Jve);W8r=r(xCt,"roberta"),xCt.forEach(t),Q8r=r(ske," \u2014 "),zz=n(ske,"A",{href:!0});var kCt=s(zz);H8r=r(kCt,"FlaxRobertaForMultipleChoice"),kCt.forEach(t),U8r=r(ske," (RoBERTa model)"),ske.forEach(t),J8r=i(Xo),oE=n(Xo,"LI",{});var lke=s(oE);Yve=n(lke,"STRONG",{});var RCt=s(Yve);Y8r=r(RCt,"roformer"),RCt.forEach(t),K8r=r(lke," \u2014 "),Wz=n(lke,"A",{href:!0});var SCt=s(Wz);Z8r=r(SCt,"FlaxRoFormerForMultipleChoice"),SCt.forEach(t),eBr=r(lke," (RoFormer model)"),lke.forEach(t),oBr=i(Xo),rE=n(Xo,"LI",{});var ike=s(rE);Kve=n(ike,"STRONG",{});var PCt=s(Kve);rBr=r(PCt,"xlm-roberta"),PCt.forEach(t),tBr=r(ike," \u2014 "),Qz=n(ike,"A",{href:!0});var $Ct=s(Qz);aBr=r($Ct,"FlaxXLMRobertaForMultipleChoice"),$Ct.forEach(t),nBr=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),Xo.forEach(t),sBr=i(Ia),Zve=n(Ia,"P",{});var ICt=s(Zve);lBr=r(ICt,"Examples:"),ICt.forEach(t),iBr=i(Ia),m($L.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),iSe=i(c),wf=n(c,"H2",{class:!0});var v$e=s(wf);tE=n(v$e,"A",{id:!0,class:!0,href:!0});var DCt=s(tE);eTe=n(DCt,"SPAN",{});var NCt=s(eTe);m(IL.$$.fragment,NCt),NCt.forEach(t),DCt.forEach(t),dBr=i(v$e),oTe=n(v$e,"SPAN",{});var jCt=s(oTe);cBr=r(jCt,"FlaxAutoModelForNextSentencePrediction"),jCt.forEach(t),v$e.forEach(t),dSe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(DL.$$.fragment,xi),fBr=i(xi),Af=n(xi,"P",{});var jQ=s(Af);mBr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rTe=n(jQ,"CODE",{});var qCt=s(rTe);gBr=r(qCt,"from_pretrained()"),qCt.forEach(t),hBr=r(jQ,"class method or the "),tTe=n(jQ,"CODE",{});var GCt=s(tTe);pBr=r(GCt,"from_config()"),GCt.forEach(t),_Br=r(jQ,`class
method.`),jQ.forEach(t),uBr=i(xi),NL=n(xi,"P",{});var T$e=s(NL);bBr=r(T$e,"This class cannot be instantiated directly using "),aTe=n(T$e,"CODE",{});var OCt=s(aTe);vBr=r(OCt,"__init__()"),OCt.forEach(t),TBr=r(T$e," (throws an error)."),T$e.forEach(t),FBr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(jL.$$.fragment,ki),CBr=i(ki),nTe=n(ki,"P",{});var XCt=s(nTe);MBr=r(XCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XCt.forEach(t),EBr=i(ki),Lf=n(ki,"P",{});var qQ=s(Lf);yBr=r(qQ,`Note:
Loading a model from its configuration file does `),sTe=n(qQ,"STRONG",{});var VCt=s(sTe);wBr=r(VCt,"not"),VCt.forEach(t),ABr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lTe=n(qQ,"CODE",{});var zCt=s(lTe);LBr=r(zCt,"from_pretrained()"),zCt.forEach(t),BBr=r(qQ,"to load the model weights."),qQ.forEach(t),xBr=i(ki),iTe=n(ki,"P",{});var WCt=s(iTe);kBr=r(WCt,"Examples:"),WCt.forEach(t),RBr=i(ki),m(qL.$$.fragment,ki),ki.forEach(t),SBr=i(xi),Io=n(xi,"DIV",{class:!0});var Da=s(Io);m(GL.$$.fragment,Da),PBr=i(Da),dTe=n(Da,"P",{});var QCt=s(dTe);$Br=r(QCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QCt.forEach(t),IBr=i(Da),Nn=n(Da,"P",{});var s3=s(Nn);DBr=r(s3,"The model class to instantiate is selected based on the "),cTe=n(s3,"CODE",{});var HCt=s(cTe);NBr=r(HCt,"model_type"),HCt.forEach(t),jBr=r(s3,` property of the config object (either
passed as an argument or loaded from `),fTe=n(s3,"CODE",{});var UCt=s(fTe);qBr=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),GBr=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(s3,"CODE",{});var JCt=s(mTe);OBr=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),XBr=r(s3,":"),s3.forEach(t),VBr=i(Da),gTe=n(Da,"UL",{});var YCt=s(gTe);aE=n(YCt,"LI",{});var dke=s(aE);hTe=n(dke,"STRONG",{});var KCt=s(hTe);zBr=r(KCt,"bert"),KCt.forEach(t),WBr=r(dke," \u2014 "),Hz=n(dke,"A",{href:!0});var ZCt=s(Hz);QBr=r(ZCt,"FlaxBertForNextSentencePrediction"),ZCt.forEach(t),HBr=r(dke," (BERT model)"),dke.forEach(t),YCt.forEach(t),UBr=i(Da),pTe=n(Da,"P",{});var eMt=s(pTe);JBr=r(eMt,"Examples:"),eMt.forEach(t),YBr=i(Da),m(OL.$$.fragment,Da),Da.forEach(t),xi.forEach(t),cSe=i(c),Bf=n(c,"H2",{class:!0});var F$e=s(Bf);nE=n(F$e,"A",{id:!0,class:!0,href:!0});var oMt=s(nE);_Te=n(oMt,"SPAN",{});var rMt=s(_Te);m(XL.$$.fragment,rMt),rMt.forEach(t),oMt.forEach(t),KBr=i(F$e),uTe=n(F$e,"SPAN",{});var tMt=s(uTe);ZBr=r(tMt,"FlaxAutoModelForImageClassification"),tMt.forEach(t),F$e.forEach(t),fSe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(VL.$$.fragment,Ri),exr=i(Ri),xf=n(Ri,"P",{});var GQ=s(xf);oxr=r(GQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bTe=n(GQ,"CODE",{});var aMt=s(bTe);rxr=r(aMt,"from_pretrained()"),aMt.forEach(t),txr=r(GQ,"class method or the "),vTe=n(GQ,"CODE",{});var nMt=s(vTe);axr=r(nMt,"from_config()"),nMt.forEach(t),nxr=r(GQ,`class
method.`),GQ.forEach(t),sxr=i(Ri),zL=n(Ri,"P",{});var C$e=s(zL);lxr=r(C$e,"This class cannot be instantiated directly using "),TTe=n(C$e,"CODE",{});var sMt=s(TTe);ixr=r(sMt,"__init__()"),sMt.forEach(t),dxr=r(C$e," (throws an error)."),C$e.forEach(t),cxr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(WL.$$.fragment,Si),fxr=i(Si),FTe=n(Si,"P",{});var lMt=s(FTe);mxr=r(lMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lMt.forEach(t),gxr=i(Si),kf=n(Si,"P",{});var OQ=s(kf);hxr=r(OQ,`Note:
Loading a model from its configuration file does `),CTe=n(OQ,"STRONG",{});var iMt=s(CTe);pxr=r(iMt,"not"),iMt.forEach(t),_xr=r(OQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MTe=n(OQ,"CODE",{});var dMt=s(MTe);uxr=r(dMt,"from_pretrained()"),dMt.forEach(t),bxr=r(OQ,"to load the model weights."),OQ.forEach(t),vxr=i(Si),ETe=n(Si,"P",{});var cMt=s(ETe);Txr=r(cMt,"Examples:"),cMt.forEach(t),Fxr=i(Si),m(QL.$$.fragment,Si),Si.forEach(t),Cxr=i(Ri),Do=n(Ri,"DIV",{class:!0});var Na=s(Do);m(HL.$$.fragment,Na),Mxr=i(Na),yTe=n(Na,"P",{});var fMt=s(yTe);Exr=r(fMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fMt.forEach(t),yxr=i(Na),jn=n(Na,"P",{});var l3=s(jn);wxr=r(l3,"The model class to instantiate is selected based on the "),wTe=n(l3,"CODE",{});var mMt=s(wTe);Axr=r(mMt,"model_type"),mMt.forEach(t),Lxr=r(l3,` property of the config object (either
passed as an argument or loaded from `),ATe=n(l3,"CODE",{});var gMt=s(ATe);Bxr=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),xxr=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(l3,"CODE",{});var hMt=s(LTe);kxr=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),Rxr=r(l3,":"),l3.forEach(t),Sxr=i(Na),UL=n(Na,"UL",{});var M$e=s(UL);sE=n(M$e,"LI",{});var cke=s(sE);BTe=n(cke,"STRONG",{});var pMt=s(BTe);Pxr=r(pMt,"beit"),pMt.forEach(t),$xr=r(cke," \u2014 "),Uz=n(cke,"A",{href:!0});var _Mt=s(Uz);Ixr=r(_Mt,"FlaxBeitForImageClassification"),_Mt.forEach(t),Dxr=r(cke," (BEiT model)"),cke.forEach(t),Nxr=i(M$e),lE=n(M$e,"LI",{});var fke=s(lE);xTe=n(fke,"STRONG",{});var uMt=s(xTe);jxr=r(uMt,"vit"),uMt.forEach(t),qxr=r(fke," \u2014 "),Jz=n(fke,"A",{href:!0});var bMt=s(Jz);Gxr=r(bMt,"FlaxViTForImageClassification"),bMt.forEach(t),Oxr=r(fke," (ViT model)"),fke.forEach(t),M$e.forEach(t),Xxr=i(Na),kTe=n(Na,"P",{});var vMt=s(kTe);Vxr=r(vMt,"Examples:"),vMt.forEach(t),zxr=i(Na),m(JL.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),mSe=i(c),Rf=n(c,"H2",{class:!0});var E$e=s(Rf);iE=n(E$e,"A",{id:!0,class:!0,href:!0});var TMt=s(iE);RTe=n(TMt,"SPAN",{});var FMt=s(RTe);m(YL.$$.fragment,FMt),FMt.forEach(t),TMt.forEach(t),Wxr=i(E$e),STe=n(E$e,"SPAN",{});var CMt=s(STe);Qxr=r(CMt,"FlaxAutoModelForVision2Seq"),CMt.forEach(t),E$e.forEach(t),gSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(KL.$$.fragment,Pi),Hxr=i(Pi),Sf=n(Pi,"P",{});var XQ=s(Sf);Uxr=r(XQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PTe=n(XQ,"CODE",{});var MMt=s(PTe);Jxr=r(MMt,"from_pretrained()"),MMt.forEach(t),Yxr=r(XQ,"class method or the "),$Te=n(XQ,"CODE",{});var EMt=s($Te);Kxr=r(EMt,"from_config()"),EMt.forEach(t),Zxr=r(XQ,`class
method.`),XQ.forEach(t),ekr=i(Pi),ZL=n(Pi,"P",{});var y$e=s(ZL);okr=r(y$e,"This class cannot be instantiated directly using "),ITe=n(y$e,"CODE",{});var yMt=s(ITe);rkr=r(yMt,"__init__()"),yMt.forEach(t),tkr=r(y$e," (throws an error)."),y$e.forEach(t),akr=i(Pi),Dt=n(Pi,"DIV",{class:!0});var $i=s(Dt);m(e7.$$.fragment,$i),nkr=i($i),DTe=n($i,"P",{});var wMt=s(DTe);skr=r(wMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wMt.forEach(t),lkr=i($i),Pf=n($i,"P",{});var VQ=s(Pf);ikr=r(VQ,`Note:
Loading a model from its configuration file does `),NTe=n(VQ,"STRONG",{});var AMt=s(NTe);dkr=r(AMt,"not"),AMt.forEach(t),ckr=r(VQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jTe=n(VQ,"CODE",{});var LMt=s(jTe);fkr=r(LMt,"from_pretrained()"),LMt.forEach(t),mkr=r(VQ,"to load the model weights."),VQ.forEach(t),gkr=i($i),qTe=n($i,"P",{});var BMt=s(qTe);hkr=r(BMt,"Examples:"),BMt.forEach(t),pkr=i($i),m(o7.$$.fragment,$i),$i.forEach(t),_kr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(r7.$$.fragment,ja),ukr=i(ja),GTe=n(ja,"P",{});var xMt=s(GTe);bkr=r(xMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xMt.forEach(t),vkr=i(ja),qn=n(ja,"P",{});var i3=s(qn);Tkr=r(i3,"The model class to instantiate is selected based on the "),OTe=n(i3,"CODE",{});var kMt=s(OTe);Fkr=r(kMt,"model_type"),kMt.forEach(t),Ckr=r(i3,` property of the config object (either
passed as an argument or loaded from `),XTe=n(i3,"CODE",{});var RMt=s(XTe);Mkr=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),Ekr=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(i3,"CODE",{});var SMt=s(VTe);ykr=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),wkr=r(i3,":"),i3.forEach(t),Akr=i(ja),zTe=n(ja,"UL",{});var PMt=s(zTe);dE=n(PMt,"LI",{});var mke=s(dE);WTe=n(mke,"STRONG",{});var $Mt=s(WTe);Lkr=r($Mt,"vision-encoder-decoder"),$Mt.forEach(t),Bkr=r(mke," \u2014 "),Yz=n(mke,"A",{href:!0});var IMt=s(Yz);xkr=r(IMt,"FlaxVisionEncoderDecoderModel"),IMt.forEach(t),kkr=r(mke," (Vision Encoder decoder model)"),mke.forEach(t),PMt.forEach(t),Rkr=i(ja),QTe=n(ja,"P",{});var DMt=s(QTe);Skr=r(DMt,"Examples:"),DMt.forEach(t),Pkr=i(ja),m(t7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(K,"name","hf:doc:metadata"),d(K,"content",JSON.stringify(QMt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(l8,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(i8,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig"),d(d8,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig"),d(c8,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig"),d(f8,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig"),d(m8,"href","/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(g8,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig"),d(h8,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(p8,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(_8,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(u8,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig"),d(b8,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig"),d(v8,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPConfig"),d(T8,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig"),d(F8,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig"),d(C8,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig"),d(M8,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(E8,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(y8,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig"),d(w8,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(A8,"href","/docs/transformers/pr_15991/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(L8,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTConfig"),d(B8,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrConfig"),d(x8,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig"),d(k8,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRConfig"),d(R8,"href","/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTConfig"),d(S8,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig"),d(P8,"href","/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d($8,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig"),d(I8,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig"),d(D8,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTConfig"),d(N8,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig"),d(j8,"href","/docs/transformers/pr_15991/en/model_doc/glpn#transformers.GLPNConfig"),d(q8,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config"),d(G8,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(O8,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig"),d(X8,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig"),d(V8,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig"),d(z8,"href","/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(W8,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Q8,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(H8,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig"),d(U8,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig"),d(J8,"href","/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeConfig"),d(Y8,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig"),d(K8,"href","/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Config"),d(Z8,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig"),d(eB,"href","/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(oB,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig"),d(rB,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(tB,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(aB,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig"),d(nB,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config"),d(sB,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(lB,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(iB,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig"),d(dB,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig"),d(cB,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig"),d(fB,"href","/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(mB,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(gB,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(hB,"href","/docs/transformers/pr_15991/en/model_doc/rag#transformers.RagConfig"),d(pB,"href","/docs/transformers/pr_15991/en/model_doc/realm#transformers.RealmConfig"),d(_B,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig"),d(uB,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig"),d(bB,"href","/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetConfig"),d(vB,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertConfig"),d(TB,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig"),d(FB,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig"),d(CB,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerConfig"),d(MB,"href","/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWConfig"),d(EB,"href","/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDConfig"),d(yB,"href","/docs/transformers/pr_15991/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(wB,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(AB,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(LB,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterConfig"),d(BB,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(xB,"href","/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinConfig"),d(kB,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config"),d(RB,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig"),d(SB,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(PB,"href","/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRConfig"),d($B,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(IB,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(DB,"href","/docs/transformers/pr_15991/en/model_doc/van#transformers.VanConfig"),d(NB,"href","/docs/transformers/pr_15991/en/model_doc/vilt#transformers.ViltConfig"),d(jB,"href","/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(qB,"href","/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(GB,"href","/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(OB,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig"),d(XB,"href","/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(VB,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(zB,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig"),d(WB,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig"),d(QB,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig"),d(HB,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(UB,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(JB,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(YB,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig"),d(KB,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Wo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(ZB,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ex,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertTokenizer"),d(ox,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(rx,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartTokenizer"),d(tx,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartTokenizerFast"),d(ax,"href","/docs/transformers/pr_15991/en/model_doc/barthez#transformers.BarthezTokenizer"),d(nx,"href","/docs/transformers/pr_15991/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(sx,"href","/docs/transformers/pr_15991/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(lx,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertTokenizer"),d(ix,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertTokenizerFast"),d(dx,"href","/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(cx,"href","/docs/transformers/pr_15991/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(fx,"href","/docs/transformers/pr_15991/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(mx,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(gx,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(hx,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(px,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(_x,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(ux,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(bx,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(vx,"href","/docs/transformers/pr_15991/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Tx,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Fx,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Cx,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineTokenizer"),d(Mx,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPTokenizer"),d(Ex,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(yx,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(wx,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Ax,"href","/docs/transformers/pr_15991/en/model_doc/cpm#transformers.CpmTokenizer"),d(Lx,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Bx,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaTokenizer"),d(xx,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(kx,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Rx,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Sx,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Px,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d($x,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Ix,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraTokenizer"),d(Dx,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Nx,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(jx,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetTokenizer"),d(qx,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Gx,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Ox,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Xx,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Vx,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(zx,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Wx,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Qx,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Hx,"href","/docs/transformers/pr_15991/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Ux,"href","/docs/transformers/pr_15991/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Jx,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Yx,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Kx,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Zx,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ek,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ok,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(rk,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(tk,"href","/docs/transformers/pr_15991/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ak,"href","/docs/transformers/pr_15991/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(nk,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDTokenizer"),d(sk,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDTokenizerFast"),d(lk,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerTokenizer"),d(ik,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(dk,"href","/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeTokenizer"),d(ck,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(fk,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(mk,"href","/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(gk,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianTokenizer"),d(hk,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartTokenizer"),d(pk,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(_k,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(uk,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(bk,"href","/docs/transformers/pr_15991/en/model_doc/mluke#transformers.MLukeTokenizer"),d(vk,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Tk,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Fk,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Ck,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Mk,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.T5Tokenizer"),d(Ek,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.T5TokenizerFast"),d(yk,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(wk,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Ak,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Lk,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Bk,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(xk,"href","/docs/transformers/pr_15991/en/model_doc/phobert#transformers.PhobertTokenizer"),d(kk,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Rk,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Sk,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertTokenizer"),d(Pk,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertTokenizerFast"),d($k,"href","/docs/transformers/pr_15991/en/model_doc/rag#transformers.RagTokenizer"),d(Ik,"href","/docs/transformers/pr_15991/en/model_doc/realm#transformers.RealmTokenizer"),d(Dk,"href","/docs/transformers/pr_15991/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Nk,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerTokenizer"),d(jk,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(qk,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Gk,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Ok,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Xk,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaTokenizer"),d(zk,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Wk,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Qk,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Hk,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Uk,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Jk,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Yk,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Kk,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Zk,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(eR,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.T5Tokenizer"),d(oR,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.T5TokenizerFast"),d(rR,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasTokenizer"),d(tR,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(aR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(nR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(sR,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMTokenizer"),d(lR,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(iR,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMTokenizer"),d(dR,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(cR,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(fR,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(mR,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(gR,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(mh,"class","docstring"),d(Qo,"class","docstring"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(hR,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(pR,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(_R,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(uR,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(bR,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(vR,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(TR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(FR,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(CR,"href","/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(MR,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(ER,"href","/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(yR,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(wR,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(AR,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(LR,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(BR,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xR,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(kR,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(RR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Sh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(SR,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(PR,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPProcessor"),d($R,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(IR,"href","/docs/transformers/pr_15991/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(DR,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(NR,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(jR,"href","/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRProcessor"),d(qR,"href","/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(GR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Vh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(OR,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertModel"),d(XR,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartModel"),d(VR,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitModel"),d(zR,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertModel"),d(WR,"href","/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(QR,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdModel"),d(HR,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(UR,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(JR,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(YR,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertModel"),d(KR,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineModel"),d(ZR,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPModel"),d(eS,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertModel"),d(oS,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextModel"),d(rS,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLModel"),d(tS,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(aS,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(nS,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaModel"),d(sS,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(lS,"href","/docs/transformers/pr_15991/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(iS,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTModel"),d(dS,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrModel"),d(cS,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertModel"),d(fS,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(mS,"href","/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTModel"),d(gS,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraModel"),d(hS,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertModel"),d(pS,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetModel"),d(_S,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTModel"),d(uS,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelModel"),d(bS,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelBaseModel"),d(vS,"href","/docs/transformers/pr_15991/en/model_doc/glpn#transformers.GLPNModel"),d(TS,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Model"),d(FS,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(CS,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJModel"),d(MS,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertModel"),d(ES,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertModel"),d(yS,"href","/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(wS,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(AS,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(LS,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDModel"),d(BS,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerModel"),d(xS,"href","/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeModel"),d(kS,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertModel"),d(RS,"href","/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Model"),d(SS,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianModel"),d(PS,"href","/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerModel"),d($S,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartModel"),d(IS,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(DS,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertModel"),d(NS,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetModel"),d(jS,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Model"),d(qS,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerModel"),d(GS,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(OS,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusModel"),d(XS,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverModel"),d(VS,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartModel"),d(zS,"href","/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerModel"),d(WS,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(QS,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertModel"),d(HS,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerModel"),d(US,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertModel"),d(JS,"href","/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetModel"),d(YS,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertModel"),d(KS,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaModel"),d(ZS,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerModel"),d(eP,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerModel"),d(oP,"href","/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWModel"),d(rP,"href","/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDModel"),d(tP,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(aP,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterModel"),d(nP,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(sP,"href","/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinModel"),d(lP,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Model"),d(iP,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasModel"),d(dP,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(cP,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechModel"),d(fP,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(mP,"href","/docs/transformers/pr_15991/en/model_doc/van#transformers.VanModel"),d(gP,"href","/docs/transformers/pr_15991/en/model_doc/vilt#transformers.ViltModel"),d(hP,"href","/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(pP,"href","/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertModel"),d(_P,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTModel"),d(uP,"href","/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(bP,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(vP,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMModel"),d(TP,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMModel"),d(FP,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMModel"),d(CP,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(MP,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(EP,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(yP,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetModel"),d(wP,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoModel"),d(De,"class","docstring"),d(Jo,"class","docstring"),d(x_,"id","transformers.AutoModelForPreTraining"),d(x_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(AP,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForPreTraining"),d(LP,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(BP,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForPreTraining"),d(xP,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(kP,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(RP,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(SP,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(PP,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d($P,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(IP,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(DP,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForPreTraining"),d(NP,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(jP,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForPreTraining"),d(qP,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(GP,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(OP,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(XP,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(VP,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(zP,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(WP,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(QP,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(HP,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(UP,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(JP,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(YP,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertModel"),d(KP,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(ZP,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(e$,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(o$,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(r$,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(t$,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(a$,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(n$,"href","/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(s$,"href","/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(l$,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(i$,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(d$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(c$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(f$,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(uu,"id","transformers.AutoModelForCausalLM"),d(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(m$,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForCausalLM"),d(g$,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertLMHeadModel"),d(h$,"href","/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(p$,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(_$,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(u$,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(b$,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(v$,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(T$,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(F$,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(C$,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForCausalLM"),d(M$,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(E$,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(y$,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(w$,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianForCausalLM"),d(A$,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForCausalLM"),d(L$,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(B$,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(x$,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(k$,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(R$,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(S$,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(P$,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d($$,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(I$,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(D$,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(N$,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(j$,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(q$,"href","/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(G$,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(O$,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(X$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(V$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(z$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(W$,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(e1,"id","transformers.AutoModelForMaskedLM"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(Q$,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(H$,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(U$,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForMaskedLM"),d(J$,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(Y$,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(K$,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(Z$,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(eI,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(oI,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(rI,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(tI,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(aI,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(nI,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(sI,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(lI,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(iI,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(dI,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(cI,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(fI,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(mI,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(gI,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(hI,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(pI,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(_I,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(uI,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(bI,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(vI,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(TI,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(FI,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(CI,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(MI,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(EI,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(yI,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(wI,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(D1,"id","transformers.AutoModelForSeq2SeqLM"),d(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(AI,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(RI,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d($I,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianMTModel"),d(II,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(NI,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(qI,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(GI,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(OI,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(o9,"id","transformers.AutoModelForSequenceClassification"),d(o9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o9,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(XI,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(VI,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForSequenceClassification"),d(zI,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForSequenceClassification"),d(WI,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(QI,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(HI,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(UI,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(JI,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(YI,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(KI,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(eD,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(oD,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(rD,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(tD,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(aD,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(nD,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(sD,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(lD,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(iD,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(dD,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(cD,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(fD,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(mD,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForSequenceClassification"),d(gD,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(hD,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(pD,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(_D,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(uD,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(bD,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(vD,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(TD,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(FD,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(CD,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(MD,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(ED,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(yD,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(wD,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(AD,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(LD,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(BD,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(xD,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(kD,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(RD,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(SD,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(PD,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(U9,"id","transformers.AutoModelForMultipleChoice"),d(U9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U9,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d($D,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(ID,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForMultipleChoice"),d(DD,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(ND,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(jD,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(qD,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(GD,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(OD,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(XD,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(VD,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(zD,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(WD,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(QD,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(HD,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(UD,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(JD,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(YD,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(KD,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(ZD,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(eN,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(oN,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(rN,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(tN,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(aN,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(nN,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(sN,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(lN,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(iN,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(yb,"id","transformers.AutoModelForNextSentencePrediction"),d(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(dN,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(cN,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(fN,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(mN,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(gN,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(Rb,"id","transformers.AutoModelForTokenClassification"),d(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(hN,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(pN,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForTokenClassification"),d(_N,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(uN,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(bN,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForTokenClassification"),d(vN,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(TN,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(FN,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(CN,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(MN,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(EN,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(yN,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(wN,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(AN,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(LN,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(BN,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(xN,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(kN,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(RN,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(SN,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(PN,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d($N,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(IN,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(DN,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(NN,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(jN,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(qN,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(GN,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(ON,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(XN,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(VN,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(zN,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(WN,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(g5,"id","transformers.AutoModelForQuestionAnswering"),d(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g5,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(QN,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(HN,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(UN,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(JN,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(YN,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(KN,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(ZN,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(lj,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(wj,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Aj,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Lj,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(xj,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(kj,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(e2,"id","transformers.AutoModelForTableQuestionAnswering"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(Rj,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(t2,"id","transformers.AutoModelForImageClassification"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(Sj,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitForImageClassification"),d(Pj,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d($j,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Ij,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Dj,"href","/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Nj,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(jj,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(qj,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Gj,"href","/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Oj,"href","/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Xj,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Vj,"href","/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinForImageClassification"),d(zj,"href","/docs/transformers/pr_15991/en/model_doc/van#transformers.VanForImageClassification"),d(Wj,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(h2,"id","transformers.AutoModelForVision2Seq"),d(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(Qj,"href","/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(u2,"id","transformers.AutoModelForAudioClassification"),d(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(Hj,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Uj,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Jj,"href","/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Yj,"href","/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Kj,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Zj,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(eq,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(oq,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(A2,"id","transformers.AutoModelForAudioFrameClassification"),d(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d(rq,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(tq,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(aq,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(nq,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(S2,"id","transformers.AutoModelForCTC"),d(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(sq,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(lq,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertForCTC"),d(iq,"href","/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWForCTC"),d(dq,"href","/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDForCTC"),d(cq,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(fq,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(mq,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(gq,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(X2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(hq,"href","/docs/transformers/pr_15991/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(pq,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(Q2,"id","transformers.AutoModelForAudioXVector"),d(Q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q2,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(_q,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(uq,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(bq,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(vq,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(Z2,"id","transformers.AutoModelForMaskedImageModeling"),d(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(Tq,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(Fq,"href","/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(Cq,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(av,"id","transformers.AutoModelForObjectDetection"),d(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(av,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(Mq,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(lv,"id","transformers.AutoModelForImageSegmentation"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(Eq,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(cv,"id","transformers.AutoModelForSemanticSegmentation"),d(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cv,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(yq,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(wq,"href","/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(Aq,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(pv,"id","transformers.AutoModelForInstanceSegmentation"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(Lq,"href","/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(bv,"id","transformers.TFAutoModel"),d(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bv,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(Bq,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertModel"),d(xq,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartModel"),d(kq,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertModel"),d(Rq,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Sq,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Pq,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertModel"),d($q,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.TFCLIPModel"),d(Iq,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertModel"),d(Dq,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.TFConvNextModel"),d(Nq,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLModel"),d(jq,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaModel"),d(qq,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Gq,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Oq,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Xq,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraModel"),d(Vq,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(zq,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelModel"),d(Wq,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Qq,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Hq,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.TFHubertModel"),d(Uq,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Jq,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.TFLEDModel"),d(Yq,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerModel"),d(Kq,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Zq,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.TFMarianModel"),d(eG,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.TFMBartModel"),d(oG,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(rG,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetModel"),d(tG,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.TFMT5Model"),d(aG,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(nG,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.TFPegasusModel"),d(sG,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertModel"),d(lG,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaModel"),d(iG,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerModel"),d(dG,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(cG,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5Model"),d(fG,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasModel"),d(mG,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(gG,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.TFViTModel"),d(hG,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(pG,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMModel"),d(_G,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(uG,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(sT,"id","transformers.TFAutoModelForPreTraining"),d(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sT,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(bG,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(vG,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(TG,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForPreTraining"),d(FG,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(CG,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(MG,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(EG,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(yG,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(wG,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(AG,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(LG,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(BG,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(xG,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(kG,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(RG,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(SG,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(PG,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d($G,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(IG,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(DG,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(NG,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(jG,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(BT,"id","transformers.TFAutoModelForCausalLM"),d(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BT,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(qG,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(GG,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(OG,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(XG,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(VG,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(zG,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(WG,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(QG,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(HG,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(UG,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(JG,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(GT,"id","transformers.TFAutoModelForImageClassification"),d(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GT,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(YG,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(KG,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(VT,"id","transformers.TFAutoModelForMaskedLM"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(ZG,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(eO,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(oO,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(rO,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(tO,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(aO,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(nO,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(sO,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(lO,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(iO,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(dO,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(cO,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(fO,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(mO,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(gO,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(hO,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(pO,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(_O,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(uO,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(bO,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(fF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(vO,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(TO,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(FO,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(CO,"href","/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(MO,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(EO,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.TFMarianMTModel"),d(yO,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(wO,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(AO,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(LO,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(CF,"id","transformers.TFAutoModelForSequenceClassification"),d(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CF,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(BO,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(xO,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(kO,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(RO,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(SO,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(PO,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d($O,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(IO,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(DO,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(NO,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(jO,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(qO,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(GO,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(OO,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(XO,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(VO,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(zO,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(WO,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(QO,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(HO,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(UO,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(JO,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(YO,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(KO,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(ZO,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(HF,"id","transformers.TFAutoModelForMultipleChoice"),d(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HF,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(eX,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(oX,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(rX,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(tX,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(aX,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(nX,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(sX,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(lX,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(iX,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(dX,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(cX,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(fX,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(mX,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(gX,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(hX,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(pX,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(_X,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(mC,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Dc,"class","relative group"),d(Ft,"class","docstring"),d(uX,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(hC,"id","transformers.TFAutoModelForTokenClassification"),d(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hC,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(bX,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(vX,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(TX,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(FX,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(CX,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(MX,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(EX,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(yX,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(wX,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(AX,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(LX,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(BX,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(xX,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(kX,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(RX,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(SX,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(PX,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d($X,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(IX,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(DX,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d($C,"id","transformers.TFAutoModelForQuestionAnswering"),d($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($C,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(NX,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(jX,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(GX,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(OX,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(XX,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(zX,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(QX,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(UX,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(YX,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(KX,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(ZX,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(eV,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(oV,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(rV,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(oM,"id","transformers.TFAutoModelForVision2Seq"),d(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oM,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(tV,"href","/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(tM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(aV,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(nM,"id","transformers.FlaxAutoModel"),d(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(nV,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertModel"),d(sV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartModel"),d(lV,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.FlaxBeitModel"),d(iV,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertModel"),d(dV,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(cV,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(fV,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(mV,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.FlaxCLIPModel"),d(gV,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(hV,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraModel"),d(pV,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(_V,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(uV,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(bV,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.FlaxMarianModel"),d(vV,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartModel"),d(TV,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5Model"),d(FV,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(CV,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(MV,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(EV,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5Model"),d(yV,"href","/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(wV,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.FlaxViTModel"),d(AV,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(LV,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(BV,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(kM,"id","transformers.FlaxAutoModelForCausalLM"),d(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(xV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(kV,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(RV,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(SV,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(PV,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(DM,"id","transformers.FlaxAutoModelForPreTraining"),d(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DM,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d($V,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(IV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(DV,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(NV,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(jV,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(qV,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(OV,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(XV,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(VV,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(zV,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(WV,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(JM,"id","transformers.FlaxAutoModelForMaskedLM"),d(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(QV,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(HV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(UV,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(JV,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(YV,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(KV,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(ZV,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(ez,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(oz,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(rz,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(l4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(tz,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(az,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(nz,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(sz,"href","/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(lz,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(iz,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(dz,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(cz,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(fz,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(u4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(mz,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(gz,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(hz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(pz,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(_z,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(uz,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(bz,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(vz,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Dr,"class","docstring"),d(L4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(Cz,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Mz,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Ez,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(yz,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(wz,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Az,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Lz,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Bz,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(xz,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(kz,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Nr,"class","docstring"),d(j4,"id","transformers.FlaxAutoModelForTokenClassification"),d(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(Rz,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Sz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Pz,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d($z,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Iz,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Dz,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Nz,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(jz,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(H4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(qz,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(zz,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(tE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(Hz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(nE,"id","transformers.FlaxAutoModelForImageClassification"),d(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nE,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(Uz,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Jz,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Do,"class","docstring"),d(Or,"class","docstring"),d(iE,"id","transformers.FlaxAutoModelForVision2Seq"),d(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(Dt,"class","docstring"),d(Yz,"href","/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,K),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(fe,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,Df,u),b(c,fa,u),e(fa,Di),e(fa,Ni),e(Ni,d3),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,c3),e(co,On),e(co,Xn),e(Xn,f3),e(co,qi),e(co,Vn),e(Vn,m3),e(co,Gi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,pe,u),e(pe,o8),e(pe,Oi),e(Oi,r8),e(pe,t8),b(c,zo,u),b(c,Ga,u),e(Ga,a8),e(Ga,qf),e(qf,n8),e(Ga,w$e),b(c,gke,u),b(c,Xi,u),e(Xi,Gf),e(Gf,zQ),g(g3,zQ,null),e(Xi,A$e),e(Xi,WQ),e(WQ,L$e),b(c,hke,u),b(c,zn,u),e(zn,B$e),e(zn,QQ),e(QQ,x$e),e(zn,k$e),e(zn,HQ),e(HQ,R$e),e(zn,S$e),b(c,pke,u),g(h3,c,u),b(c,_ke,u),b(c,s8,u),e(s8,P$e),b(c,uke,u),g(Of,c,u),b(c,bke,u),b(c,Vi,u),e(Vi,Xf),e(Xf,UQ),g(p3,UQ,null),e(Vi,$$e),e(Vi,JQ),e(JQ,I$e),b(c,vke,u),b(c,Wo,u),g(_3,Wo,null),e(Wo,D$e),e(Wo,u3),e(u3,N$e),e(u3,l8),e(l8,j$e),e(u3,q$e),e(Wo,G$e),e(Wo,b3),e(b3,O$e),e(b3,YQ),e(YQ,X$e),e(b3,V$e),e(Wo,z$e),e(Wo,mo),g(v3,mo,null),e(mo,W$e),e(mo,KQ),e(KQ,Q$e),e(mo,H$e),e(mo,zi),e(zi,U$e),e(zi,ZQ),e(ZQ,J$e),e(zi,Y$e),e(zi,eH),e(eH,K$e),e(zi,Z$e),e(mo,eIe),e(mo,v),e(v,Vf),e(Vf,oH),e(oH,oIe),e(Vf,rIe),e(Vf,i8),e(i8,tIe),e(Vf,aIe),e(v,nIe),e(v,zf),e(zf,rH),e(rH,sIe),e(zf,lIe),e(zf,d8),e(d8,iIe),e(zf,dIe),e(v,cIe),e(v,Wf),e(Wf,tH),e(tH,fIe),e(Wf,mIe),e(Wf,c8),e(c8,gIe),e(Wf,hIe),e(v,pIe),e(v,Qf),e(Qf,aH),e(aH,_Ie),e(Qf,uIe),e(Qf,f8),e(f8,bIe),e(Qf,vIe),e(v,TIe),e(v,Hf),e(Hf,nH),e(nH,FIe),e(Hf,CIe),e(Hf,m8),e(m8,MIe),e(Hf,EIe),e(v,yIe),e(v,Uf),e(Uf,sH),e(sH,wIe),e(Uf,AIe),e(Uf,g8),e(g8,LIe),e(Uf,BIe),e(v,xIe),e(v,Jf),e(Jf,lH),e(lH,kIe),e(Jf,RIe),e(Jf,h8),e(h8,SIe),e(Jf,PIe),e(v,$Ie),e(v,Yf),e(Yf,iH),e(iH,IIe),e(Yf,DIe),e(Yf,p8),e(p8,NIe),e(Yf,jIe),e(v,qIe),e(v,Kf),e(Kf,dH),e(dH,GIe),e(Kf,OIe),e(Kf,_8),e(_8,XIe),e(Kf,VIe),e(v,zIe),e(v,Zf),e(Zf,cH),e(cH,WIe),e(Zf,QIe),e(Zf,u8),e(u8,HIe),e(Zf,UIe),e(v,JIe),e(v,em),e(em,fH),e(fH,YIe),e(em,KIe),e(em,b8),e(b8,ZIe),e(em,eDe),e(v,oDe),e(v,om),e(om,mH),e(mH,rDe),e(om,tDe),e(om,v8),e(v8,aDe),e(om,nDe),e(v,sDe),e(v,rm),e(rm,gH),e(gH,lDe),e(rm,iDe),e(rm,T8),e(T8,dDe),e(rm,cDe),e(v,fDe),e(v,tm),e(tm,hH),e(hH,mDe),e(tm,gDe),e(tm,F8),e(F8,hDe),e(tm,pDe),e(v,_De),e(v,am),e(am,pH),e(pH,uDe),e(am,bDe),e(am,C8),e(C8,vDe),e(am,TDe),e(v,FDe),e(v,nm),e(nm,_H),e(_H,CDe),e(nm,MDe),e(nm,M8),e(M8,EDe),e(nm,yDe),e(v,wDe),e(v,sm),e(sm,uH),e(uH,ADe),e(sm,LDe),e(sm,E8),e(E8,BDe),e(sm,xDe),e(v,kDe),e(v,lm),e(lm,bH),e(bH,RDe),e(lm,SDe),e(lm,y8),e(y8,PDe),e(lm,$De),e(v,IDe),e(v,im),e(im,vH),e(vH,DDe),e(im,NDe),e(im,w8),e(w8,jDe),e(im,qDe),e(v,GDe),e(v,dm),e(dm,TH),e(TH,ODe),e(dm,XDe),e(dm,A8),e(A8,VDe),e(dm,zDe),e(v,WDe),e(v,cm),e(cm,FH),e(FH,QDe),e(cm,HDe),e(cm,L8),e(L8,UDe),e(cm,JDe),e(v,YDe),e(v,fm),e(fm,CH),e(CH,KDe),e(fm,ZDe),e(fm,B8),e(B8,eNe),e(fm,oNe),e(v,rNe),e(v,mm),e(mm,MH),e(MH,tNe),e(mm,aNe),e(mm,x8),e(x8,nNe),e(mm,sNe),e(v,lNe),e(v,gm),e(gm,EH),e(EH,iNe),e(gm,dNe),e(gm,k8),e(k8,cNe),e(gm,fNe),e(v,mNe),e(v,hm),e(hm,yH),e(yH,gNe),e(hm,hNe),e(hm,R8),e(R8,pNe),e(hm,_Ne),e(v,uNe),e(v,pm),e(pm,wH),e(wH,bNe),e(pm,vNe),e(pm,S8),e(S8,TNe),e(pm,FNe),e(v,CNe),e(v,_m),e(_m,AH),e(AH,MNe),e(_m,ENe),e(_m,P8),e(P8,yNe),e(_m,wNe),e(v,ANe),e(v,um),e(um,LH),e(LH,LNe),e(um,BNe),e(um,$8),e($8,xNe),e(um,kNe),e(v,RNe),e(v,bm),e(bm,BH),e(BH,SNe),e(bm,PNe),e(bm,I8),e(I8,$Ne),e(bm,INe),e(v,DNe),e(v,vm),e(vm,xH),e(xH,NNe),e(vm,jNe),e(vm,D8),e(D8,qNe),e(vm,GNe),e(v,ONe),e(v,Tm),e(Tm,kH),e(kH,XNe),e(Tm,VNe),e(Tm,N8),e(N8,zNe),e(Tm,WNe),e(v,QNe),e(v,Fm),e(Fm,RH),e(RH,HNe),e(Fm,UNe),e(Fm,j8),e(j8,JNe),e(Fm,YNe),e(v,KNe),e(v,Cm),e(Cm,SH),e(SH,ZNe),e(Cm,eje),e(Cm,q8),e(q8,oje),e(Cm,rje),e(v,tje),e(v,Mm),e(Mm,PH),e(PH,aje),e(Mm,nje),e(Mm,G8),e(G8,sje),e(Mm,lje),e(v,ije),e(v,Em),e(Em,$H),e($H,dje),e(Em,cje),e(Em,O8),e(O8,fje),e(Em,mje),e(v,gje),e(v,ym),e(ym,IH),e(IH,hje),e(ym,pje),e(ym,X8),e(X8,_je),e(ym,uje),e(v,bje),e(v,wm),e(wm,DH),e(DH,vje),e(wm,Tje),e(wm,V8),e(V8,Fje),e(wm,Cje),e(v,Mje),e(v,Am),e(Am,NH),e(NH,Eje),e(Am,yje),e(Am,z8),e(z8,wje),e(Am,Aje),e(v,Lje),e(v,Lm),e(Lm,jH),e(jH,Bje),e(Lm,xje),e(Lm,W8),e(W8,kje),e(Lm,Rje),e(v,Sje),e(v,Bm),e(Bm,qH),e(qH,Pje),e(Bm,$je),e(Bm,Q8),e(Q8,Ije),e(Bm,Dje),e(v,Nje),e(v,xm),e(xm,GH),e(GH,jje),e(xm,qje),e(xm,H8),e(H8,Gje),e(xm,Oje),e(v,Xje),e(v,km),e(km,OH),e(OH,Vje),e(km,zje),e(km,U8),e(U8,Wje),e(km,Qje),e(v,Hje),e(v,Rm),e(Rm,XH),e(XH,Uje),e(Rm,Jje),e(Rm,J8),e(J8,Yje),e(Rm,Kje),e(v,Zje),e(v,Sm),e(Sm,VH),e(VH,eqe),e(Sm,oqe),e(Sm,Y8),e(Y8,rqe),e(Sm,tqe),e(v,aqe),e(v,Pm),e(Pm,zH),e(zH,nqe),e(Pm,sqe),e(Pm,K8),e(K8,lqe),e(Pm,iqe),e(v,dqe),e(v,$m),e($m,WH),e(WH,cqe),e($m,fqe),e($m,Z8),e(Z8,mqe),e($m,gqe),e(v,hqe),e(v,Im),e(Im,QH),e(QH,pqe),e(Im,_qe),e(Im,eB),e(eB,uqe),e(Im,bqe),e(v,vqe),e(v,Dm),e(Dm,HH),e(HH,Tqe),e(Dm,Fqe),e(Dm,oB),e(oB,Cqe),e(Dm,Mqe),e(v,Eqe),e(v,Nm),e(Nm,UH),e(UH,yqe),e(Nm,wqe),e(Nm,rB),e(rB,Aqe),e(Nm,Lqe),e(v,Bqe),e(v,jm),e(jm,JH),e(JH,xqe),e(jm,kqe),e(jm,tB),e(tB,Rqe),e(jm,Sqe),e(v,Pqe),e(v,qm),e(qm,YH),e(YH,$qe),e(qm,Iqe),e(qm,aB),e(aB,Dqe),e(qm,Nqe),e(v,jqe),e(v,Gm),e(Gm,KH),e(KH,qqe),e(Gm,Gqe),e(Gm,nB),e(nB,Oqe),e(Gm,Xqe),e(v,Vqe),e(v,Om),e(Om,ZH),e(ZH,zqe),e(Om,Wqe),e(Om,sB),e(sB,Qqe),e(Om,Hqe),e(v,Uqe),e(v,Xm),e(Xm,eU),e(eU,Jqe),e(Xm,Yqe),e(Xm,lB),e(lB,Kqe),e(Xm,Zqe),e(v,eGe),e(v,Vm),e(Vm,oU),e(oU,oGe),e(Vm,rGe),e(Vm,iB),e(iB,tGe),e(Vm,aGe),e(v,nGe),e(v,zm),e(zm,rU),e(rU,sGe),e(zm,lGe),e(zm,dB),e(dB,iGe),e(zm,dGe),e(v,cGe),e(v,Wm),e(Wm,tU),e(tU,fGe),e(Wm,mGe),e(Wm,cB),e(cB,gGe),e(Wm,hGe),e(v,pGe),e(v,Qm),e(Qm,aU),e(aU,_Ge),e(Qm,uGe),e(Qm,fB),e(fB,bGe),e(Qm,vGe),e(v,TGe),e(v,Hm),e(Hm,nU),e(nU,FGe),e(Hm,CGe),e(Hm,mB),e(mB,MGe),e(Hm,EGe),e(v,yGe),e(v,Um),e(Um,sU),e(sU,wGe),e(Um,AGe),e(Um,gB),e(gB,LGe),e(Um,BGe),e(v,xGe),e(v,Jm),e(Jm,lU),e(lU,kGe),e(Jm,RGe),e(Jm,hB),e(hB,SGe),e(Jm,PGe),e(v,$Ge),e(v,Ym),e(Ym,iU),e(iU,IGe),e(Ym,DGe),e(Ym,pB),e(pB,NGe),e(Ym,jGe),e(v,qGe),e(v,Km),e(Km,dU),e(dU,GGe),e(Km,OGe),e(Km,_B),e(_B,XGe),e(Km,VGe),e(v,zGe),e(v,Zm),e(Zm,cU),e(cU,WGe),e(Zm,QGe),e(Zm,uB),e(uB,HGe),e(Zm,UGe),e(v,JGe),e(v,eg),e(eg,fU),e(fU,YGe),e(eg,KGe),e(eg,bB),e(bB,ZGe),e(eg,eOe),e(v,oOe),e(v,og),e(og,mU),e(mU,rOe),e(og,tOe),e(og,vB),e(vB,aOe),e(og,nOe),e(v,sOe),e(v,rg),e(rg,gU),e(gU,lOe),e(rg,iOe),e(rg,TB),e(TB,dOe),e(rg,cOe),e(v,fOe),e(v,tg),e(tg,hU),e(hU,mOe),e(tg,gOe),e(tg,FB),e(FB,hOe),e(tg,pOe),e(v,_Oe),e(v,ag),e(ag,pU),e(pU,uOe),e(ag,bOe),e(ag,CB),e(CB,vOe),e(ag,TOe),e(v,FOe),e(v,ng),e(ng,_U),e(_U,COe),e(ng,MOe),e(ng,MB),e(MB,EOe),e(ng,yOe),e(v,wOe),e(v,sg),e(sg,uU),e(uU,AOe),e(sg,LOe),e(sg,EB),e(EB,BOe),e(sg,xOe),e(v,kOe),e(v,lg),e(lg,bU),e(bU,ROe),e(lg,SOe),e(lg,yB),e(yB,POe),e(lg,$Oe),e(v,IOe),e(v,ig),e(ig,vU),e(vU,DOe),e(ig,NOe),e(ig,wB),e(wB,jOe),e(ig,qOe),e(v,GOe),e(v,dg),e(dg,TU),e(TU,OOe),e(dg,XOe),e(dg,AB),e(AB,VOe),e(dg,zOe),e(v,WOe),e(v,cg),e(cg,FU),e(FU,QOe),e(cg,HOe),e(cg,LB),e(LB,UOe),e(cg,JOe),e(v,YOe),e(v,fg),e(fg,CU),e(CU,KOe),e(fg,ZOe),e(fg,BB),e(BB,eXe),e(fg,oXe),e(v,rXe),e(v,mg),e(mg,MU),e(MU,tXe),e(mg,aXe),e(mg,xB),e(xB,nXe),e(mg,sXe),e(v,lXe),e(v,gg),e(gg,EU),e(EU,iXe),e(gg,dXe),e(gg,kB),e(kB,cXe),e(gg,fXe),e(v,mXe),e(v,hg),e(hg,yU),e(yU,gXe),e(hg,hXe),e(hg,RB),e(RB,pXe),e(hg,_Xe),e(v,uXe),e(v,pg),e(pg,wU),e(wU,bXe),e(pg,vXe),e(pg,SB),e(SB,TXe),e(pg,FXe),e(v,CXe),e(v,_g),e(_g,AU),e(AU,MXe),e(_g,EXe),e(_g,PB),e(PB,yXe),e(_g,wXe),e(v,AXe),e(v,ug),e(ug,LU),e(LU,LXe),e(ug,BXe),e(ug,$B),e($B,xXe),e(ug,kXe),e(v,RXe),e(v,bg),e(bg,BU),e(BU,SXe),e(bg,PXe),e(bg,IB),e(IB,$Xe),e(bg,IXe),e(v,DXe),e(v,vg),e(vg,xU),e(xU,NXe),e(vg,jXe),e(vg,DB),e(DB,qXe),e(vg,GXe),e(v,OXe),e(v,Tg),e(Tg,kU),e(kU,XXe),e(Tg,VXe),e(Tg,NB),e(NB,zXe),e(Tg,WXe),e(v,QXe),e(v,Fg),e(Fg,RU),e(RU,HXe),e(Fg,UXe),e(Fg,jB),e(jB,JXe),e(Fg,YXe),e(v,KXe),e(v,Cg),e(Cg,SU),e(SU,ZXe),e(Cg,eVe),e(Cg,qB),e(qB,oVe),e(Cg,rVe),e(v,tVe),e(v,Mg),e(Mg,PU),e(PU,aVe),e(Mg,nVe),e(Mg,GB),e(GB,sVe),e(Mg,lVe),e(v,iVe),e(v,Eg),e(Eg,$U),e($U,dVe),e(Eg,cVe),e(Eg,OB),e(OB,fVe),e(Eg,mVe),e(v,gVe),e(v,yg),e(yg,IU),e(IU,hVe),e(yg,pVe),e(yg,XB),e(XB,_Ve),e(yg,uVe),e(v,bVe),e(v,wg),e(wg,DU),e(DU,vVe),e(wg,TVe),e(wg,VB),e(VB,FVe),e(wg,CVe),e(v,MVe),e(v,Ag),e(Ag,NU),e(NU,EVe),e(Ag,yVe),e(Ag,zB),e(zB,wVe),e(Ag,AVe),e(v,LVe),e(v,Lg),e(Lg,jU),e(jU,BVe),e(Lg,xVe),e(Lg,WB),e(WB,kVe),e(Lg,RVe),e(v,SVe),e(v,Bg),e(Bg,qU),e(qU,PVe),e(Bg,$Ve),e(Bg,QB),e(QB,IVe),e(Bg,DVe),e(v,NVe),e(v,xg),e(xg,GU),e(GU,jVe),e(xg,qVe),e(xg,HB),e(HB,GVe),e(xg,OVe),e(v,XVe),e(v,kg),e(kg,OU),e(OU,VVe),e(kg,zVe),e(kg,UB),e(UB,WVe),e(kg,QVe),e(v,HVe),e(v,Rg),e(Rg,XU),e(XU,UVe),e(Rg,JVe),e(Rg,JB),e(JB,YVe),e(Rg,KVe),e(v,ZVe),e(v,Sg),e(Sg,VU),e(VU,eze),e(Sg,oze),e(Sg,YB),e(YB,rze),e(Sg,tze),e(v,aze),e(v,Pg),e(Pg,zU),e(zU,nze),e(Pg,sze),e(Pg,KB),e(KB,lze),e(Pg,ize),e(mo,dze),e(mo,WU),e(WU,cze),e(mo,fze),g(T3,mo,null),e(Wo,mze),e(Wo,$g),g(F3,$g,null),e($g,gze),e($g,QU),e(QU,hze),b(c,Tke,u),b(c,Wi,u),e(Wi,Ig),e(Ig,HU),g(C3,HU,null),e(Wi,pze),e(Wi,UU),e(UU,_ze),b(c,Fke,u),b(c,Qo,u),g(M3,Qo,null),e(Qo,uze),e(Qo,E3),e(E3,bze),e(E3,ZB),e(ZB,vze),e(E3,Tze),e(Qo,Fze),e(Qo,y3),e(y3,Cze),e(y3,JU),e(JU,Mze),e(y3,Eze),e(Qo,yze),e(Qo,go),g(w3,go,null),e(go,wze),e(go,YU),e(YU,Aze),e(go,Lze),e(go,Oa),e(Oa,Bze),e(Oa,KU),e(KU,xze),e(Oa,kze),e(Oa,ZU),e(ZU,Rze),e(Oa,Sze),e(Oa,eJ),e(eJ,Pze),e(Oa,$ze),e(go,Ize),e(go,E),e(E,Wn),e(Wn,oJ),e(oJ,Dze),e(Wn,Nze),e(Wn,ex),e(ex,jze),e(Wn,qze),e(Wn,ox),e(ox,Gze),e(Wn,Oze),e(E,Xze),e(E,Qn),e(Qn,rJ),e(rJ,Vze),e(Qn,zze),e(Qn,rx),e(rx,Wze),e(Qn,Qze),e(Qn,tx),e(tx,Hze),e(Qn,Uze),e(E,Jze),e(E,Hn),e(Hn,tJ),e(tJ,Yze),e(Hn,Kze),e(Hn,ax),e(ax,Zze),e(Hn,eWe),e(Hn,nx),e(nx,oWe),e(Hn,rWe),e(E,tWe),e(E,Dg),e(Dg,aJ),e(aJ,aWe),e(Dg,nWe),e(Dg,sx),e(sx,sWe),e(Dg,lWe),e(E,iWe),e(E,Un),e(Un,nJ),e(nJ,dWe),e(Un,cWe),e(Un,lx),e(lx,fWe),e(Un,mWe),e(Un,ix),e(ix,gWe),e(Un,hWe),e(E,pWe),e(E,Ng),e(Ng,sJ),e(sJ,_We),e(Ng,uWe),e(Ng,dx),e(dx,bWe),e(Ng,vWe),e(E,TWe),e(E,jg),e(jg,lJ),e(lJ,FWe),e(jg,CWe),e(jg,cx),e(cx,MWe),e(jg,EWe),e(E,yWe),e(E,qg),e(qg,iJ),e(iJ,wWe),e(qg,AWe),e(qg,fx),e(fx,LWe),e(qg,BWe),e(E,xWe),e(E,Jn),e(Jn,dJ),e(dJ,kWe),e(Jn,RWe),e(Jn,mx),e(mx,SWe),e(Jn,PWe),e(Jn,gx),e(gx,$We),e(Jn,IWe),e(E,DWe),e(E,Yn),e(Yn,cJ),e(cJ,NWe),e(Yn,jWe),e(Yn,hx),e(hx,qWe),e(Yn,GWe),e(Yn,px),e(px,OWe),e(Yn,XWe),e(E,VWe),e(E,Kn),e(Kn,fJ),e(fJ,zWe),e(Kn,WWe),e(Kn,_x),e(_x,QWe),e(Kn,HWe),e(Kn,ux),e(ux,UWe),e(Kn,JWe),e(E,YWe),e(E,Gg),e(Gg,mJ),e(mJ,KWe),e(Gg,ZWe),e(Gg,bx),e(bx,eQe),e(Gg,oQe),e(E,rQe),e(E,Og),e(Og,gJ),e(gJ,tQe),e(Og,aQe),e(Og,vx),e(vx,nQe),e(Og,sQe),e(E,lQe),e(E,Zn),e(Zn,hJ),e(hJ,iQe),e(Zn,dQe),e(Zn,Tx),e(Tx,cQe),e(Zn,fQe),e(Zn,Fx),e(Fx,mQe),e(Zn,gQe),e(E,hQe),e(E,Xg),e(Xg,pJ),e(pJ,pQe),e(Xg,_Qe),e(Xg,Cx),e(Cx,uQe),e(Xg,bQe),e(E,vQe),e(E,es),e(es,_J),e(_J,TQe),e(es,FQe),e(es,Mx),e(Mx,CQe),e(es,MQe),e(es,Ex),e(Ex,EQe),e(es,yQe),e(E,wQe),e(E,os),e(os,uJ),e(uJ,AQe),e(os,LQe),e(os,yx),e(yx,BQe),e(os,xQe),e(os,wx),e(wx,kQe),e(os,RQe),e(E,SQe),e(E,rs),e(rs,bJ),e(bJ,PQe),e(rs,$Qe),e(rs,Ax),e(Ax,IQe),e(rs,DQe),e(rs,vJ),e(vJ,NQe),e(rs,jQe),e(E,qQe),e(E,Vg),e(Vg,TJ),e(TJ,GQe),e(Vg,OQe),e(Vg,Lx),e(Lx,XQe),e(Vg,VQe),e(E,zQe),e(E,ts),e(ts,FJ),e(FJ,WQe),e(ts,QQe),e(ts,Bx),e(Bx,HQe),e(ts,UQe),e(ts,xx),e(xx,JQe),e(ts,YQe),e(E,KQe),e(E,zg),e(zg,CJ),e(CJ,ZQe),e(zg,eHe),e(zg,kx),e(kx,oHe),e(zg,rHe),e(E,tHe),e(E,as),e(as,MJ),e(MJ,aHe),e(as,nHe),e(as,Rx),e(Rx,sHe),e(as,lHe),e(as,Sx),e(Sx,iHe),e(as,dHe),e(E,cHe),e(E,ns),e(ns,EJ),e(EJ,fHe),e(ns,mHe),e(ns,Px),e(Px,gHe),e(ns,hHe),e(ns,$x),e($x,pHe),e(ns,_He),e(E,uHe),e(E,ss),e(ss,yJ),e(yJ,bHe),e(ss,vHe),e(ss,Ix),e(Ix,THe),e(ss,FHe),e(ss,Dx),e(Dx,CHe),e(ss,MHe),e(E,EHe),e(E,Wg),e(Wg,wJ),e(wJ,yHe),e(Wg,wHe),e(Wg,Nx),e(Nx,AHe),e(Wg,LHe),e(E,BHe),e(E,ls),e(ls,AJ),e(AJ,xHe),e(ls,kHe),e(ls,jx),e(jx,RHe),e(ls,SHe),e(ls,qx),e(qx,PHe),e(ls,$He),e(E,IHe),e(E,Qg),e(Qg,LJ),e(LJ,DHe),e(Qg,NHe),e(Qg,Gx),e(Gx,jHe),e(Qg,qHe),e(E,GHe),e(E,is),e(is,BJ),e(BJ,OHe),e(is,XHe),e(is,Ox),e(Ox,VHe),e(is,zHe),e(is,Xx),e(Xx,WHe),e(is,QHe),e(E,HHe),e(E,ds),e(ds,xJ),e(xJ,UHe),e(ds,JHe),e(ds,Vx),e(Vx,YHe),e(ds,KHe),e(ds,zx),e(zx,ZHe),e(ds,eUe),e(E,oUe),e(E,cs),e(cs,kJ),e(kJ,rUe),e(cs,tUe),e(cs,Wx),e(Wx,aUe),e(cs,nUe),e(cs,Qx),e(Qx,sUe),e(cs,lUe),e(E,iUe),e(E,fs),e(fs,RJ),e(RJ,dUe),e(fs,cUe),e(fs,Hx),e(Hx,fUe),e(fs,mUe),e(fs,Ux),e(Ux,gUe),e(fs,hUe),e(E,pUe),e(E,Hg),e(Hg,SJ),e(SJ,_Ue),e(Hg,uUe),e(Hg,Jx),e(Jx,bUe),e(Hg,vUe),e(E,TUe),e(E,ms),e(ms,PJ),e(PJ,FUe),e(ms,CUe),e(ms,Yx),e(Yx,MUe),e(ms,EUe),e(ms,Kx),e(Kx,yUe),e(ms,wUe),e(E,AUe),e(E,gs),e(gs,$J),e($J,LUe),e(gs,BUe),e(gs,Zx),e(Zx,xUe),e(gs,kUe),e(gs,ek),e(ek,RUe),e(gs,SUe),e(E,PUe),e(E,hs),e(hs,IJ),e(IJ,$Ue),e(hs,IUe),e(hs,ok),e(ok,DUe),e(hs,NUe),e(hs,rk),e(rk,jUe),e(hs,qUe),e(E,GUe),e(E,ps),e(ps,DJ),e(DJ,OUe),e(ps,XUe),e(ps,tk),e(tk,VUe),e(ps,zUe),e(ps,ak),e(ak,WUe),e(ps,QUe),e(E,HUe),e(E,_s),e(_s,NJ),e(NJ,UUe),e(_s,JUe),e(_s,nk),e(nk,YUe),e(_s,KUe),e(_s,sk),e(sk,ZUe),e(_s,eJe),e(E,oJe),e(E,us),e(us,jJ),e(jJ,rJe),e(us,tJe),e(us,lk),e(lk,aJe),e(us,nJe),e(us,ik),e(ik,sJe),e(us,lJe),e(E,iJe),e(E,Ug),e(Ug,qJ),e(qJ,dJe),e(Ug,cJe),e(Ug,dk),e(dk,fJe),e(Ug,mJe),e(E,gJe),e(E,bs),e(bs,GJ),e(GJ,hJe),e(bs,pJe),e(bs,ck),e(ck,_Je),e(bs,uJe),e(bs,fk),e(fk,bJe),e(bs,vJe),e(E,TJe),e(E,Jg),e(Jg,OJ),e(OJ,FJe),e(Jg,CJe),e(Jg,mk),e(mk,MJe),e(Jg,EJe),e(E,yJe),e(E,Yg),e(Yg,XJ),e(XJ,wJe),e(Yg,AJe),e(Yg,gk),e(gk,LJe),e(Yg,BJe),e(E,xJe),e(E,vs),e(vs,VJ),e(VJ,kJe),e(vs,RJe),e(vs,hk),e(hk,SJe),e(vs,PJe),e(vs,pk),e(pk,$Je),e(vs,IJe),e(E,DJe),e(E,Ts),e(Ts,zJ),e(zJ,NJe),e(Ts,jJe),e(Ts,_k),e(_k,qJe),e(Ts,GJe),e(Ts,uk),e(uk,OJe),e(Ts,XJe),e(E,VJe),e(E,Kg),e(Kg,WJ),e(WJ,zJe),e(Kg,WJe),e(Kg,bk),e(bk,QJe),e(Kg,HJe),e(E,UJe),e(E,Fs),e(Fs,QJ),e(QJ,JJe),e(Fs,YJe),e(Fs,vk),e(vk,KJe),e(Fs,ZJe),e(Fs,Tk),e(Tk,eYe),e(Fs,oYe),e(E,rYe),e(E,Cs),e(Cs,HJ),e(HJ,tYe),e(Cs,aYe),e(Cs,Fk),e(Fk,nYe),e(Cs,sYe),e(Cs,Ck),e(Ck,lYe),e(Cs,iYe),e(E,dYe),e(E,Ms),e(Ms,UJ),e(UJ,cYe),e(Ms,fYe),e(Ms,Mk),e(Mk,mYe),e(Ms,gYe),e(Ms,Ek),e(Ek,hYe),e(Ms,pYe),e(E,_Ye),e(E,Es),e(Es,JJ),e(JJ,uYe),e(Es,bYe),e(Es,yk),e(yk,vYe),e(Es,TYe),e(Es,wk),e(wk,FYe),e(Es,CYe),e(E,MYe),e(E,ys),e(ys,YJ),e(YJ,EYe),e(ys,yYe),e(ys,Ak),e(Ak,wYe),e(ys,AYe),e(ys,Lk),e(Lk,LYe),e(ys,BYe),e(E,xYe),e(E,Zg),e(Zg,KJ),e(KJ,kYe),e(Zg,RYe),e(Zg,Bk),e(Bk,SYe),e(Zg,PYe),e(E,$Ye),e(E,eh),e(eh,ZJ),e(ZJ,IYe),e(eh,DYe),e(eh,xk),e(xk,NYe),e(eh,jYe),e(E,qYe),e(E,oh),e(oh,eY),e(eY,GYe),e(oh,OYe),e(oh,kk),e(kk,XYe),e(oh,VYe),e(E,zYe),e(E,rh),e(rh,oY),e(oY,WYe),e(rh,QYe),e(rh,Rk),e(Rk,HYe),e(rh,UYe),e(E,JYe),e(E,ws),e(ws,rY),e(rY,YYe),e(ws,KYe),e(ws,Sk),e(Sk,ZYe),e(ws,eKe),e(ws,Pk),e(Pk,oKe),e(ws,rKe),e(E,tKe),e(E,th),e(th,tY),e(tY,aKe),e(th,nKe),e(th,$k),e($k,sKe),e(th,lKe),e(E,iKe),e(E,As),e(As,aY),e(aY,dKe),e(As,cKe),e(As,Ik),e(Ik,fKe),e(As,mKe),e(As,Dk),e(Dk,gKe),e(As,hKe),e(E,pKe),e(E,Ls),e(Ls,nY),e(nY,_Ke),e(Ls,uKe),e(Ls,Nk),e(Nk,bKe),e(Ls,vKe),e(Ls,jk),e(jk,TKe),e(Ls,FKe),e(E,CKe),e(E,Bs),e(Bs,sY),e(sY,MKe),e(Bs,EKe),e(Bs,qk),e(qk,yKe),e(Bs,wKe),e(Bs,Gk),e(Gk,AKe),e(Bs,LKe),e(E,BKe),e(E,xs),e(xs,lY),e(lY,xKe),e(xs,kKe),e(xs,Ok),e(Ok,RKe),e(xs,SKe),e(xs,Xk),e(Xk,PKe),e(xs,$Ke),e(E,IKe),e(E,ks),e(ks,iY),e(iY,DKe),e(ks,NKe),e(ks,Vk),e(Vk,jKe),e(ks,qKe),e(ks,zk),e(zk,GKe),e(ks,OKe),e(E,XKe),e(E,Rs),e(Rs,dY),e(dY,VKe),e(Rs,zKe),e(Rs,Wk),e(Wk,WKe),e(Rs,QKe),e(Rs,Qk),e(Qk,HKe),e(Rs,UKe),e(E,JKe),e(E,ah),e(ah,cY),e(cY,YKe),e(ah,KKe),e(ah,Hk),e(Hk,ZKe),e(ah,eZe),e(E,oZe),e(E,nh),e(nh,fY),e(fY,rZe),e(nh,tZe),e(nh,Uk),e(Uk,aZe),e(nh,nZe),e(E,sZe),e(E,Ss),e(Ss,mY),e(mY,lZe),e(Ss,iZe),e(Ss,Jk),e(Jk,dZe),e(Ss,cZe),e(Ss,Yk),e(Yk,fZe),e(Ss,mZe),e(E,gZe),e(E,Ps),e(Ps,gY),e(gY,hZe),e(Ps,pZe),e(Ps,Kk),e(Kk,_Ze),e(Ps,uZe),e(Ps,Zk),e(Zk,bZe),e(Ps,vZe),e(E,TZe),e(E,$s),e($s,hY),e(hY,FZe),e($s,CZe),e($s,eR),e(eR,MZe),e($s,EZe),e($s,oR),e(oR,yZe),e($s,wZe),e(E,AZe),e(E,sh),e(sh,pY),e(pY,LZe),e(sh,BZe),e(sh,rR),e(rR,xZe),e(sh,kZe),e(E,RZe),e(E,lh),e(lh,_Y),e(_Y,SZe),e(lh,PZe),e(lh,tR),e(tR,$Ze),e(lh,IZe),e(E,DZe),e(E,ih),e(ih,uY),e(uY,NZe),e(ih,jZe),e(ih,aR),e(aR,qZe),e(ih,GZe),e(E,OZe),e(E,dh),e(dh,bY),e(bY,XZe),e(dh,VZe),e(dh,nR),e(nR,zZe),e(dh,WZe),e(E,QZe),e(E,Is),e(Is,vY),e(vY,HZe),e(Is,UZe),e(Is,sR),e(sR,JZe),e(Is,YZe),e(Is,lR),e(lR,KZe),e(Is,ZZe),e(E,eeo),e(E,ch),e(ch,TY),e(TY,oeo),e(ch,reo),e(ch,iR),e(iR,teo),e(ch,aeo),e(E,neo),e(E,fh),e(fh,FY),e(FY,seo),e(fh,leo),e(fh,dR),e(dR,ieo),e(fh,deo),e(E,ceo),e(E,Ds),e(Ds,CY),e(CY,feo),e(Ds,meo),e(Ds,cR),e(cR,geo),e(Ds,heo),e(Ds,fR),e(fR,peo),e(Ds,_eo),e(E,ueo),e(E,Ns),e(Ns,MY),e(MY,beo),e(Ns,veo),e(Ns,mR),e(mR,Teo),e(Ns,Feo),e(Ns,gR),e(gR,Ceo),e(Ns,Meo),e(go,Eeo),e(go,EY),e(EY,yeo),e(go,weo),g(A3,go,null),e(Qo,Aeo),e(Qo,mh),g(L3,mh,null),e(mh,Leo),e(mh,yY),e(yY,Beo),b(c,Cke,u),b(c,Qi,u),e(Qi,gh),e(gh,wY),g(B3,wY,null),e(Qi,xeo),e(Qi,AY),e(AY,keo),b(c,Mke,u),b(c,Ho,u),g(x3,Ho,null),e(Ho,Reo),e(Ho,k3),e(k3,Seo),e(k3,hR),e(hR,Peo),e(k3,$eo),e(Ho,Ieo),e(Ho,R3),e(R3,Deo),e(R3,LY),e(LY,Neo),e(R3,jeo),e(Ho,qeo),e(Ho,$e),g(S3,$e,null),e($e,Geo),e($e,BY),e(BY,Oeo),e($e,Xeo),e($e,Xa),e(Xa,Veo),e(Xa,xY),e(xY,zeo),e(Xa,Weo),e(Xa,kY),e(kY,Qeo),e(Xa,Heo),e(Xa,RY),e(RY,Ueo),e(Xa,Jeo),e($e,Yeo),e($e,re),e(re,hh),e(hh,SY),e(SY,Keo),e(hh,Zeo),e(hh,pR),e(pR,eoo),e(hh,ooo),e(re,roo),e(re,ph),e(ph,PY),e(PY,too),e(ph,aoo),e(ph,_R),e(_R,noo),e(ph,soo),e(re,loo),e(re,_h),e(_h,$Y),e($Y,ioo),e(_h,doo),e(_h,uR),e(uR,coo),e(_h,foo),e(re,moo),e(re,uh),e(uh,IY),e(IY,goo),e(uh,hoo),e(uh,bR),e(bR,poo),e(uh,_oo),e(re,uoo),e(re,bh),e(bh,DY),e(DY,boo),e(bh,voo),e(bh,vR),e(vR,Too),e(bh,Foo),e(re,Coo),e(re,vh),e(vh,NY),e(NY,Moo),e(vh,Eoo),e(vh,TR),e(TR,yoo),e(vh,woo),e(re,Aoo),e(re,Th),e(Th,jY),e(jY,Loo),e(Th,Boo),e(Th,FR),e(FR,xoo),e(Th,koo),e(re,Roo),e(re,Fh),e(Fh,qY),e(qY,Soo),e(Fh,Poo),e(Fh,CR),e(CR,$oo),e(Fh,Ioo),e(re,Doo),e(re,Ch),e(Ch,GY),e(GY,Noo),e(Ch,joo),e(Ch,MR),e(MR,qoo),e(Ch,Goo),e(re,Ooo),e(re,Mh),e(Mh,OY),e(OY,Xoo),e(Mh,Voo),e(Mh,ER),e(ER,zoo),e(Mh,Woo),e(re,Qoo),e(re,Eh),e(Eh,XY),e(XY,Hoo),e(Eh,Uoo),e(Eh,yR),e(yR,Joo),e(Eh,Yoo),e(re,Koo),e(re,yh),e(yh,VY),e(VY,Zoo),e(yh,ero),e(yh,wR),e(wR,oro),e(yh,rro),e(re,tro),e(re,wh),e(wh,zY),e(zY,aro),e(wh,nro),e(wh,AR),e(AR,sro),e(wh,lro),e(re,iro),e(re,Ah),e(Ah,WY),e(WY,dro),e(Ah,cro),e(Ah,LR),e(LR,fro),e(Ah,mro),e(re,gro),e(re,Lh),e(Lh,QY),e(QY,hro),e(Lh,pro),e(Lh,BR),e(BR,_ro),e(Lh,uro),e(re,bro),e(re,Bh),e(Bh,HY),e(HY,vro),e(Bh,Tro),e(Bh,xR),e(xR,Fro),e(Bh,Cro),e(re,Mro),e(re,xh),e(xh,UY),e(UY,Ero),e(xh,yro),e(xh,kR),e(kR,wro),e(xh,Aro),e(re,Lro),e(re,kh),e(kh,JY),e(JY,Bro),e(kh,xro),e(kh,RR),e(RR,kro),e(kh,Rro),e($e,Sro),g(Rh,$e,null),e($e,Pro),e($e,YY),e(YY,$ro),e($e,Iro),g(P3,$e,null),e(Ho,Dro),e(Ho,Sh),g($3,Sh,null),e(Sh,Nro),e(Sh,KY),e(KY,jro),b(c,Eke,u),b(c,Hi,u),e(Hi,Ph),e(Ph,ZY),g(I3,ZY,null),e(Hi,qro),e(Hi,eK),e(eK,Gro),b(c,yke,u),b(c,Uo,u),g(D3,Uo,null),e(Uo,Oro),e(Uo,N3),e(N3,Xro),e(N3,SR),e(SR,Vro),e(N3,zro),e(Uo,Wro),e(Uo,j3),e(j3,Qro),e(j3,oK),e(oK,Hro),e(j3,Uro),e(Uo,Jro),e(Uo,Ie),g(q3,Ie,null),e(Ie,Yro),e(Ie,rK),e(rK,Kro),e(Ie,Zro),e(Ie,Ui),e(Ui,eto),e(Ui,tK),e(tK,oto),e(Ui,rto),e(Ui,aK),e(aK,tto),e(Ui,ato),e(Ie,nto),e(Ie,xe),e(xe,$h),e($h,nK),e(nK,sto),e($h,lto),e($h,PR),e(PR,ito),e($h,dto),e(xe,cto),e(xe,Ih),e(Ih,sK),e(sK,fto),e(Ih,mto),e(Ih,$R),e($R,gto),e(Ih,hto),e(xe,pto),e(xe,Dh),e(Dh,lK),e(lK,_to),e(Dh,uto),e(Dh,IR),e(IR,bto),e(Dh,vto),e(xe,Tto),e(xe,Nh),e(Nh,iK),e(iK,Fto),e(Nh,Cto),e(Nh,DR),e(DR,Mto),e(Nh,Eto),e(xe,yto),e(xe,jh),e(jh,dK),e(dK,wto),e(jh,Ato),e(jh,NR),e(NR,Lto),e(jh,Bto),e(xe,xto),e(xe,qh),e(qh,cK),e(cK,kto),e(qh,Rto),e(qh,jR),e(jR,Sto),e(qh,Pto),e(xe,$to),e(xe,Gh),e(Gh,fK),e(fK,Ito),e(Gh,Dto),e(Gh,qR),e(qR,Nto),e(Gh,jto),e(xe,qto),e(xe,Oh),e(Oh,mK),e(mK,Gto),e(Oh,Oto),e(Oh,GR),e(GR,Xto),e(Oh,Vto),e(Ie,zto),g(Xh,Ie,null),e(Ie,Wto),e(Ie,gK),e(gK,Qto),e(Ie,Hto),g(G3,Ie,null),e(Uo,Uto),e(Uo,Vh),g(O3,Vh,null),e(Vh,Jto),e(Vh,hK),e(hK,Yto),b(c,wke,u),b(c,Ji,u),e(Ji,zh),e(zh,pK),g(X3,pK,null),e(Ji,Kto),e(Ji,_K),e(_K,Zto),b(c,Ake,u),b(c,Jo,u),g(V3,Jo,null),e(Jo,eao),e(Jo,Yi),e(Yi,oao),e(Yi,uK),e(uK,rao),e(Yi,tao),e(Yi,bK),e(bK,aao),e(Yi,nao),e(Jo,sao),e(Jo,z3),e(z3,lao),e(z3,vK),e(vK,iao),e(z3,dao),e(Jo,cao),e(Jo,Vr),g(W3,Vr,null),e(Vr,fao),e(Vr,TK),e(TK,mao),e(Vr,gao),e(Vr,Ki),e(Ki,hao),e(Ki,FK),e(FK,pao),e(Ki,_ao),e(Ki,CK),e(CK,uao),e(Ki,bao),e(Vr,vao),e(Vr,MK),e(MK,Tao),e(Vr,Fao),g(Q3,Vr,null),e(Jo,Cao),e(Jo,De),g(H3,De,null),e(De,Mao),e(De,EK),e(EK,Eao),e(De,yao),e(De,Va),e(Va,wao),e(Va,yK),e(yK,Aao),e(Va,Lao),e(Va,wK),e(wK,Bao),e(Va,xao),e(Va,AK),e(AK,kao),e(Va,Rao),e(De,Sao),e(De,F),e(F,Wh),e(Wh,LK),e(LK,Pao),e(Wh,$ao),e(Wh,OR),e(OR,Iao),e(Wh,Dao),e(F,Nao),e(F,Qh),e(Qh,BK),e(BK,jao),e(Qh,qao),e(Qh,XR),e(XR,Gao),e(Qh,Oao),e(F,Xao),e(F,Hh),e(Hh,xK),e(xK,Vao),e(Hh,zao),e(Hh,VR),e(VR,Wao),e(Hh,Qao),e(F,Hao),e(F,Uh),e(Uh,kK),e(kK,Uao),e(Uh,Jao),e(Uh,zR),e(zR,Yao),e(Uh,Kao),e(F,Zao),e(F,Jh),e(Jh,RK),e(RK,eno),e(Jh,ono),e(Jh,WR),e(WR,rno),e(Jh,tno),e(F,ano),e(F,Yh),e(Yh,SK),e(SK,nno),e(Yh,sno),e(Yh,QR),e(QR,lno),e(Yh,ino),e(F,dno),e(F,Kh),e(Kh,PK),e(PK,cno),e(Kh,fno),e(Kh,HR),e(HR,mno),e(Kh,gno),e(F,hno),e(F,Zh),e(Zh,$K),e($K,pno),e(Zh,_no),e(Zh,UR),e(UR,uno),e(Zh,bno),e(F,vno),e(F,ep),e(ep,IK),e(IK,Tno),e(ep,Fno),e(ep,JR),e(JR,Cno),e(ep,Mno),e(F,Eno),e(F,op),e(op,DK),e(DK,yno),e(op,wno),e(op,YR),e(YR,Ano),e(op,Lno),e(F,Bno),e(F,rp),e(rp,NK),e(NK,xno),e(rp,kno),e(rp,KR),e(KR,Rno),e(rp,Sno),e(F,Pno),e(F,tp),e(tp,jK),e(jK,$no),e(tp,Ino),e(tp,ZR),e(ZR,Dno),e(tp,Nno),e(F,jno),e(F,ap),e(ap,qK),e(qK,qno),e(ap,Gno),e(ap,eS),e(eS,Ono),e(ap,Xno),e(F,Vno),e(F,np),e(np,GK),e(GK,zno),e(np,Wno),e(np,oS),e(oS,Qno),e(np,Hno),e(F,Uno),e(F,sp),e(sp,OK),e(OK,Jno),e(sp,Yno),e(sp,rS),e(rS,Kno),e(sp,Zno),e(F,eso),e(F,lp),e(lp,XK),e(XK,oso),e(lp,rso),e(lp,tS),e(tS,tso),e(lp,aso),e(F,nso),e(F,ip),e(ip,VK),e(VK,sso),e(ip,lso),e(ip,aS),e(aS,iso),e(ip,dso),e(F,cso),e(F,dp),e(dp,zK),e(zK,fso),e(dp,mso),e(dp,nS),e(nS,gso),e(dp,hso),e(F,pso),e(F,cp),e(cp,WK),e(WK,_so),e(cp,uso),e(cp,sS),e(sS,bso),e(cp,vso),e(F,Tso),e(F,fp),e(fp,QK),e(QK,Fso),e(fp,Cso),e(fp,lS),e(lS,Mso),e(fp,Eso),e(F,yso),e(F,mp),e(mp,HK),e(HK,wso),e(mp,Aso),e(mp,iS),e(iS,Lso),e(mp,Bso),e(F,xso),e(F,gp),e(gp,UK),e(UK,kso),e(gp,Rso),e(gp,dS),e(dS,Sso),e(gp,Pso),e(F,$so),e(F,hp),e(hp,JK),e(JK,Iso),e(hp,Dso),e(hp,cS),e(cS,Nso),e(hp,jso),e(F,qso),e(F,pp),e(pp,YK),e(YK,Gso),e(pp,Oso),e(pp,fS),e(fS,Xso),e(pp,Vso),e(F,zso),e(F,_p),e(_p,KK),e(KK,Wso),e(_p,Qso),e(_p,mS),e(mS,Hso),e(_p,Uso),e(F,Jso),e(F,up),e(up,ZK),e(ZK,Yso),e(up,Kso),e(up,gS),e(gS,Zso),e(up,elo),e(F,olo),e(F,bp),e(bp,eZ),e(eZ,rlo),e(bp,tlo),e(bp,hS),e(hS,alo),e(bp,nlo),e(F,slo),e(F,vp),e(vp,oZ),e(oZ,llo),e(vp,ilo),e(vp,pS),e(pS,dlo),e(vp,clo),e(F,flo),e(F,Tp),e(Tp,rZ),e(rZ,mlo),e(Tp,glo),e(Tp,_S),e(_S,hlo),e(Tp,plo),e(F,_lo),e(F,js),e(js,tZ),e(tZ,ulo),e(js,blo),e(js,uS),e(uS,vlo),e(js,Tlo),e(js,bS),e(bS,Flo),e(js,Clo),e(F,Mlo),e(F,Fp),e(Fp,aZ),e(aZ,Elo),e(Fp,ylo),e(Fp,vS),e(vS,wlo),e(Fp,Alo),e(F,Llo),e(F,Cp),e(Cp,nZ),e(nZ,Blo),e(Cp,xlo),e(Cp,TS),e(TS,klo),e(Cp,Rlo),e(F,Slo),e(F,Mp),e(Mp,sZ),e(sZ,Plo),e(Mp,$lo),e(Mp,FS),e(FS,Ilo),e(Mp,Dlo),e(F,Nlo),e(F,Ep),e(Ep,lZ),e(lZ,jlo),e(Ep,qlo),e(Ep,CS),e(CS,Glo),e(Ep,Olo),e(F,Xlo),e(F,yp),e(yp,iZ),e(iZ,Vlo),e(yp,zlo),e(yp,MS),e(MS,Wlo),e(yp,Qlo),e(F,Hlo),e(F,wp),e(wp,dZ),e(dZ,Ulo),e(wp,Jlo),e(wp,ES),e(ES,Ylo),e(wp,Klo),e(F,Zlo),e(F,Ap),e(Ap,cZ),e(cZ,eio),e(Ap,oio),e(Ap,yS),e(yS,rio),e(Ap,tio),e(F,aio),e(F,Lp),e(Lp,fZ),e(fZ,nio),e(Lp,sio),e(Lp,wS),e(wS,lio),e(Lp,iio),e(F,dio),e(F,Bp),e(Bp,mZ),e(mZ,cio),e(Bp,fio),e(Bp,AS),e(AS,mio),e(Bp,gio),e(F,hio),e(F,xp),e(xp,gZ),e(gZ,pio),e(xp,_io),e(xp,LS),e(LS,uio),e(xp,bio),e(F,vio),e(F,kp),e(kp,hZ),e(hZ,Tio),e(kp,Fio),e(kp,BS),e(BS,Cio),e(kp,Mio),e(F,Eio),e(F,Rp),e(Rp,pZ),e(pZ,yio),e(Rp,wio),e(Rp,xS),e(xS,Aio),e(Rp,Lio),e(F,Bio),e(F,Sp),e(Sp,_Z),e(_Z,xio),e(Sp,kio),e(Sp,kS),e(kS,Rio),e(Sp,Sio),e(F,Pio),e(F,Pp),e(Pp,uZ),e(uZ,$io),e(Pp,Iio),e(Pp,RS),e(RS,Dio),e(Pp,Nio),e(F,jio),e(F,$p),e($p,bZ),e(bZ,qio),e($p,Gio),e($p,SS),e(SS,Oio),e($p,Xio),e(F,Vio),e(F,Ip),e(Ip,vZ),e(vZ,zio),e(Ip,Wio),e(Ip,PS),e(PS,Qio),e(Ip,Hio),e(F,Uio),e(F,Dp),e(Dp,TZ),e(TZ,Jio),e(Dp,Yio),e(Dp,$S),e($S,Kio),e(Dp,Zio),e(F,edo),e(F,Np),e(Np,FZ),e(FZ,odo),e(Np,rdo),e(Np,IS),e(IS,tdo),e(Np,ado),e(F,ndo),e(F,jp),e(jp,CZ),e(CZ,sdo),e(jp,ldo),e(jp,DS),e(DS,ido),e(jp,ddo),e(F,cdo),e(F,qp),e(qp,MZ),e(MZ,fdo),e(qp,mdo),e(qp,NS),e(NS,gdo),e(qp,hdo),e(F,pdo),e(F,Gp),e(Gp,EZ),e(EZ,_do),e(Gp,udo),e(Gp,jS),e(jS,bdo),e(Gp,vdo),e(F,Tdo),e(F,Op),e(Op,yZ),e(yZ,Fdo),e(Op,Cdo),e(Op,qS),e(qS,Mdo),e(Op,Edo),e(F,ydo),e(F,Xp),e(Xp,wZ),e(wZ,wdo),e(Xp,Ado),e(Xp,GS),e(GS,Ldo),e(Xp,Bdo),e(F,xdo),e(F,Vp),e(Vp,AZ),e(AZ,kdo),e(Vp,Rdo),e(Vp,OS),e(OS,Sdo),e(Vp,Pdo),e(F,$do),e(F,zp),e(zp,LZ),e(LZ,Ido),e(zp,Ddo),e(zp,XS),e(XS,Ndo),e(zp,jdo),e(F,qdo),e(F,Wp),e(Wp,BZ),e(BZ,Gdo),e(Wp,Odo),e(Wp,VS),e(VS,Xdo),e(Wp,Vdo),e(F,zdo),e(F,Qp),e(Qp,xZ),e(xZ,Wdo),e(Qp,Qdo),e(Qp,zS),e(zS,Hdo),e(Qp,Udo),e(F,Jdo),e(F,Hp),e(Hp,kZ),e(kZ,Ydo),e(Hp,Kdo),e(Hp,WS),e(WS,Zdo),e(Hp,eco),e(F,oco),e(F,Up),e(Up,RZ),e(RZ,rco),e(Up,tco),e(Up,QS),e(QS,aco),e(Up,nco),e(F,sco),e(F,Jp),e(Jp,SZ),e(SZ,lco),e(Jp,ico),e(Jp,HS),e(HS,dco),e(Jp,cco),e(F,fco),e(F,Yp),e(Yp,PZ),e(PZ,mco),e(Yp,gco),e(Yp,US),e(US,hco),e(Yp,pco),e(F,_co),e(F,Kp),e(Kp,$Z),e($Z,uco),e(Kp,bco),e(Kp,JS),e(JS,vco),e(Kp,Tco),e(F,Fco),e(F,Zp),e(Zp,IZ),e(IZ,Cco),e(Zp,Mco),e(Zp,YS),e(YS,Eco),e(Zp,yco),e(F,wco),e(F,e_),e(e_,DZ),e(DZ,Aco),e(e_,Lco),e(e_,KS),e(KS,Bco),e(e_,xco),e(F,kco),e(F,o_),e(o_,NZ),e(NZ,Rco),e(o_,Sco),e(o_,ZS),e(ZS,Pco),e(o_,$co),e(F,Ico),e(F,r_),e(r_,jZ),e(jZ,Dco),e(r_,Nco),e(r_,eP),e(eP,jco),e(r_,qco),e(F,Gco),e(F,t_),e(t_,qZ),e(qZ,Oco),e(t_,Xco),e(t_,oP),e(oP,Vco),e(t_,zco),e(F,Wco),e(F,a_),e(a_,GZ),e(GZ,Qco),e(a_,Hco),e(a_,rP),e(rP,Uco),e(a_,Jco),e(F,Yco),e(F,n_),e(n_,OZ),e(OZ,Kco),e(n_,Zco),e(n_,tP),e(tP,efo),e(n_,ofo),e(F,rfo),e(F,s_),e(s_,XZ),e(XZ,tfo),e(s_,afo),e(s_,aP),e(aP,nfo),e(s_,sfo),e(F,lfo),e(F,l_),e(l_,VZ),e(VZ,ifo),e(l_,dfo),e(l_,nP),e(nP,cfo),e(l_,ffo),e(F,mfo),e(F,i_),e(i_,zZ),e(zZ,gfo),e(i_,hfo),e(i_,sP),e(sP,pfo),e(i_,_fo),e(F,ufo),e(F,d_),e(d_,WZ),e(WZ,bfo),e(d_,vfo),e(d_,lP),e(lP,Tfo),e(d_,Ffo),e(F,Cfo),e(F,c_),e(c_,QZ),e(QZ,Mfo),e(c_,Efo),e(c_,iP),e(iP,yfo),e(c_,wfo),e(F,Afo),e(F,f_),e(f_,HZ),e(HZ,Lfo),e(f_,Bfo),e(f_,dP),e(dP,xfo),e(f_,kfo),e(F,Rfo),e(F,m_),e(m_,UZ),e(UZ,Sfo),e(m_,Pfo),e(m_,cP),e(cP,$fo),e(m_,Ifo),e(F,Dfo),e(F,g_),e(g_,JZ),e(JZ,Nfo),e(g_,jfo),e(g_,fP),e(fP,qfo),e(g_,Gfo),e(F,Ofo),e(F,h_),e(h_,YZ),e(YZ,Xfo),e(h_,Vfo),e(h_,mP),e(mP,zfo),e(h_,Wfo),e(F,Qfo),e(F,p_),e(p_,KZ),e(KZ,Hfo),e(p_,Ufo),e(p_,gP),e(gP,Jfo),e(p_,Yfo),e(F,Kfo),e(F,__),e(__,ZZ),e(ZZ,Zfo),e(__,emo),e(__,hP),e(hP,omo),e(__,rmo),e(F,tmo),e(F,u_),e(u_,eee),e(eee,amo),e(u_,nmo),e(u_,pP),e(pP,smo),e(u_,lmo),e(F,imo),e(F,b_),e(b_,oee),e(oee,dmo),e(b_,cmo),e(b_,_P),e(_P,fmo),e(b_,mmo),e(F,gmo),e(F,v_),e(v_,ree),e(ree,hmo),e(v_,pmo),e(v_,uP),e(uP,_mo),e(v_,umo),e(F,bmo),e(F,T_),e(T_,tee),e(tee,vmo),e(T_,Tmo),e(T_,bP),e(bP,Fmo),e(T_,Cmo),e(F,Mmo),e(F,F_),e(F_,aee),e(aee,Emo),e(F_,ymo),e(F_,vP),e(vP,wmo),e(F_,Amo),e(F,Lmo),e(F,C_),e(C_,nee),e(nee,Bmo),e(C_,xmo),e(C_,TP),e(TP,kmo),e(C_,Rmo),e(F,Smo),e(F,M_),e(M_,see),e(see,Pmo),e(M_,$mo),e(M_,FP),e(FP,Imo),e(M_,Dmo),e(F,Nmo),e(F,E_),e(E_,lee),e(lee,jmo),e(E_,qmo),e(E_,CP),e(CP,Gmo),e(E_,Omo),e(F,Xmo),e(F,y_),e(y_,iee),e(iee,Vmo),e(y_,zmo),e(y_,MP),e(MP,Wmo),e(y_,Qmo),e(F,Hmo),e(F,w_),e(w_,dee),e(dee,Umo),e(w_,Jmo),e(w_,EP),e(EP,Ymo),e(w_,Kmo),e(F,Zmo),e(F,A_),e(A_,cee),e(cee,ego),e(A_,ogo),e(A_,yP),e(yP,rgo),e(A_,tgo),e(F,ago),e(F,L_),e(L_,fee),e(fee,ngo),e(L_,sgo),e(L_,wP),e(wP,lgo),e(L_,igo),e(De,dgo),e(De,B_),e(B_,cgo),e(B_,mee),e(mee,fgo),e(B_,mgo),e(B_,gee),e(gee,ggo),e(De,hgo),e(De,hee),e(hee,pgo),e(De,_go),g(U3,De,null),b(c,Lke,u),b(c,Zi,u),e(Zi,x_),e(x_,pee),g(J3,pee,null),e(Zi,ugo),e(Zi,_ee),e(_ee,bgo),b(c,Bke,u),b(c,Yo,u),g(Y3,Yo,null),e(Yo,vgo),e(Yo,ed),e(ed,Tgo),e(ed,uee),e(uee,Fgo),e(ed,Cgo),e(ed,bee),e(bee,Mgo),e(ed,Ego),e(Yo,ygo),e(Yo,K3),e(K3,wgo),e(K3,vee),e(vee,Ago),e(K3,Lgo),e(Yo,Bgo),e(Yo,zr),g(Z3,zr,null),e(zr,xgo),e(zr,Tee),e(Tee,kgo),e(zr,Rgo),e(zr,od),e(od,Sgo),e(od,Fee),e(Fee,Pgo),e(od,$go),e(od,Cee),e(Cee,Igo),e(od,Dgo),e(zr,Ngo),e(zr,Mee),e(Mee,jgo),e(zr,qgo),g(ey,zr,null),e(Yo,Ggo),e(Yo,Ne),g(oy,Ne,null),e(Ne,Ogo),e(Ne,Eee),e(Eee,Xgo),e(Ne,Vgo),e(Ne,za),e(za,zgo),e(za,yee),e(yee,Wgo),e(za,Qgo),e(za,wee),e(wee,Hgo),e(za,Ugo),e(za,Aee),e(Aee,Jgo),e(za,Ygo),e(Ne,Kgo),e(Ne,k),e(k,k_),e(k_,Lee),e(Lee,Zgo),e(k_,eho),e(k_,AP),e(AP,oho),e(k_,rho),e(k,tho),e(k,R_),e(R_,Bee),e(Bee,aho),e(R_,nho),e(R_,LP),e(LP,sho),e(R_,lho),e(k,iho),e(k,S_),e(S_,xee),e(xee,dho),e(S_,cho),e(S_,BP),e(BP,fho),e(S_,mho),e(k,gho),e(k,P_),e(P_,kee),e(kee,hho),e(P_,pho),e(P_,xP),e(xP,_ho),e(P_,uho),e(k,bho),e(k,$_),e($_,Ree),e(Ree,vho),e($_,Tho),e($_,kP),e(kP,Fho),e($_,Cho),e(k,Mho),e(k,I_),e(I_,See),e(See,Eho),e(I_,yho),e(I_,RP),e(RP,who),e(I_,Aho),e(k,Lho),e(k,D_),e(D_,Pee),e(Pee,Bho),e(D_,xho),e(D_,SP),e(SP,kho),e(D_,Rho),e(k,Sho),e(k,N_),e(N_,$ee),e($ee,Pho),e(N_,$ho),e(N_,PP),e(PP,Iho),e(N_,Dho),e(k,Nho),e(k,j_),e(j_,Iee),e(Iee,jho),e(j_,qho),e(j_,$P),e($P,Gho),e(j_,Oho),e(k,Xho),e(k,q_),e(q_,Dee),e(Dee,Vho),e(q_,zho),e(q_,IP),e(IP,Who),e(q_,Qho),e(k,Hho),e(k,G_),e(G_,Nee),e(Nee,Uho),e(G_,Jho),e(G_,DP),e(DP,Yho),e(G_,Kho),e(k,Zho),e(k,O_),e(O_,jee),e(jee,epo),e(O_,opo),e(O_,NP),e(NP,rpo),e(O_,tpo),e(k,apo),e(k,X_),e(X_,qee),e(qee,npo),e(X_,spo),e(X_,jP),e(jP,lpo),e(X_,ipo),e(k,dpo),e(k,V_),e(V_,Gee),e(Gee,cpo),e(V_,fpo),e(V_,qP),e(qP,mpo),e(V_,gpo),e(k,hpo),e(k,z_),e(z_,Oee),e(Oee,ppo),e(z_,_po),e(z_,GP),e(GP,upo),e(z_,bpo),e(k,vpo),e(k,W_),e(W_,Xee),e(Xee,Tpo),e(W_,Fpo),e(W_,OP),e(OP,Cpo),e(W_,Mpo),e(k,Epo),e(k,Q_),e(Q_,Vee),e(Vee,ypo),e(Q_,wpo),e(Q_,XP),e(XP,Apo),e(Q_,Lpo),e(k,Bpo),e(k,H_),e(H_,zee),e(zee,xpo),e(H_,kpo),e(H_,VP),e(VP,Rpo),e(H_,Spo),e(k,Ppo),e(k,U_),e(U_,Wee),e(Wee,$po),e(U_,Ipo),e(U_,zP),e(zP,Dpo),e(U_,Npo),e(k,jpo),e(k,J_),e(J_,Qee),e(Qee,qpo),e(J_,Gpo),e(J_,WP),e(WP,Opo),e(J_,Xpo),e(k,Vpo),e(k,Y_),e(Y_,Hee),e(Hee,zpo),e(Y_,Wpo),e(Y_,QP),e(QP,Qpo),e(Y_,Hpo),e(k,Upo),e(k,K_),e(K_,Uee),e(Uee,Jpo),e(K_,Ypo),e(K_,HP),e(HP,Kpo),e(K_,Zpo),e(k,e_o),e(k,Z_),e(Z_,Jee),e(Jee,o_o),e(Z_,r_o),e(Z_,UP),e(UP,t_o),e(Z_,a_o),e(k,n_o),e(k,eu),e(eu,Yee),e(Yee,s_o),e(eu,l_o),e(eu,JP),e(JP,i_o),e(eu,d_o),e(k,c_o),e(k,ou),e(ou,Kee),e(Kee,f_o),e(ou,m_o),e(ou,YP),e(YP,g_o),e(ou,h_o),e(k,p_o),e(k,ru),e(ru,Zee),e(Zee,__o),e(ru,u_o),e(ru,KP),e(KP,b_o),e(ru,v_o),e(k,T_o),e(k,tu),e(tu,eoe),e(eoe,F_o),e(tu,C_o),e(tu,ZP),e(ZP,M_o),e(tu,E_o),e(k,y_o),e(k,au),e(au,ooe),e(ooe,w_o),e(au,A_o),e(au,e$),e(e$,L_o),e(au,B_o),e(k,x_o),e(k,nu),e(nu,roe),e(roe,k_o),e(nu,R_o),e(nu,o$),e(o$,S_o),e(nu,P_o),e(k,$_o),e(k,su),e(su,toe),e(toe,I_o),e(su,D_o),e(su,r$),e(r$,N_o),e(su,j_o),e(k,q_o),e(k,lu),e(lu,aoe),e(aoe,G_o),e(lu,O_o),e(lu,t$),e(t$,X_o),e(lu,V_o),e(k,z_o),e(k,iu),e(iu,noe),e(noe,W_o),e(iu,Q_o),e(iu,a$),e(a$,H_o),e(iu,U_o),e(k,J_o),e(k,du),e(du,soe),e(soe,Y_o),e(du,K_o),e(du,n$),e(n$,Z_o),e(du,euo),e(k,ouo),e(k,cu),e(cu,loe),e(loe,ruo),e(cu,tuo),e(cu,s$),e(s$,auo),e(cu,nuo),e(k,suo),e(k,fu),e(fu,ioe),e(ioe,luo),e(fu,iuo),e(fu,l$),e(l$,duo),e(fu,cuo),e(k,fuo),e(k,mu),e(mu,doe),e(doe,muo),e(mu,guo),e(mu,i$),e(i$,huo),e(mu,puo),e(k,_uo),e(k,gu),e(gu,coe),e(coe,uuo),e(gu,buo),e(gu,d$),e(d$,vuo),e(gu,Tuo),e(k,Fuo),e(k,hu),e(hu,foe),e(foe,Cuo),e(hu,Muo),e(hu,c$),e(c$,Euo),e(hu,yuo),e(k,wuo),e(k,pu),e(pu,moe),e(moe,Auo),e(pu,Luo),e(pu,f$),e(f$,Buo),e(pu,xuo),e(Ne,kuo),e(Ne,_u),e(_u,Ruo),e(_u,goe),e(goe,Suo),e(_u,Puo),e(_u,hoe),e(hoe,$uo),e(Ne,Iuo),e(Ne,poe),e(poe,Duo),e(Ne,Nuo),g(ry,Ne,null),b(c,xke,u),b(c,rd,u),e(rd,uu),e(uu,_oe),g(ty,_oe,null),e(rd,juo),e(rd,uoe),e(uoe,quo),b(c,kke,u),b(c,Ko,u),g(ay,Ko,null),e(Ko,Guo),e(Ko,td),e(td,Ouo),e(td,boe),e(boe,Xuo),e(td,Vuo),e(td,voe),e(voe,zuo),e(td,Wuo),e(Ko,Quo),e(Ko,ny),e(ny,Huo),e(ny,Toe),e(Toe,Uuo),e(ny,Juo),e(Ko,Yuo),e(Ko,Wr),g(sy,Wr,null),e(Wr,Kuo),e(Wr,Foe),e(Foe,Zuo),e(Wr,e1o),e(Wr,ad),e(ad,o1o),e(ad,Coe),e(Coe,r1o),e(ad,t1o),e(ad,Moe),e(Moe,a1o),e(ad,n1o),e(Wr,s1o),e(Wr,Eoe),e(Eoe,l1o),e(Wr,i1o),g(ly,Wr,null),e(Ko,d1o),e(Ko,je),g(iy,je,null),e(je,c1o),e(je,yoe),e(yoe,f1o),e(je,m1o),e(je,Wa),e(Wa,g1o),e(Wa,woe),e(woe,h1o),e(Wa,p1o),e(Wa,Aoe),e(Aoe,_1o),e(Wa,u1o),e(Wa,Loe),e(Loe,b1o),e(Wa,v1o),e(je,T1o),e(je,$),e($,bu),e(bu,Boe),e(Boe,F1o),e(bu,C1o),e(bu,m$),e(m$,M1o),e(bu,E1o),e($,y1o),e($,vu),e(vu,xoe),e(xoe,w1o),e(vu,A1o),e(vu,g$),e(g$,L1o),e(vu,B1o),e($,x1o),e($,Tu),e(Tu,koe),e(koe,k1o),e(Tu,R1o),e(Tu,h$),e(h$,S1o),e(Tu,P1o),e($,$1o),e($,Fu),e(Fu,Roe),e(Roe,I1o),e(Fu,D1o),e(Fu,p$),e(p$,N1o),e(Fu,j1o),e($,q1o),e($,Cu),e(Cu,Soe),e(Soe,G1o),e(Cu,O1o),e(Cu,_$),e(_$,X1o),e(Cu,V1o),e($,z1o),e($,Mu),e(Mu,Poe),e(Poe,W1o),e(Mu,Q1o),e(Mu,u$),e(u$,H1o),e(Mu,U1o),e($,J1o),e($,Eu),e(Eu,$oe),e($oe,Y1o),e(Eu,K1o),e(Eu,b$),e(b$,Z1o),e(Eu,e9o),e($,o9o),e($,yu),e(yu,Ioe),e(Ioe,r9o),e(yu,t9o),e(yu,v$),e(v$,a9o),e(yu,n9o),e($,s9o),e($,wu),e(wu,Doe),e(Doe,l9o),e(wu,i9o),e(wu,T$),e(T$,d9o),e(wu,c9o),e($,f9o),e($,Au),e(Au,Noe),e(Noe,m9o),e(Au,g9o),e(Au,F$),e(F$,h9o),e(Au,p9o),e($,_9o),e($,Lu),e(Lu,joe),e(joe,u9o),e(Lu,b9o),e(Lu,C$),e(C$,v9o),e(Lu,T9o),e($,F9o),e($,Bu),e(Bu,qoe),e(qoe,C9o),e(Bu,M9o),e(Bu,M$),e(M$,E9o),e(Bu,y9o),e($,w9o),e($,xu),e(xu,Goe),e(Goe,A9o),e(xu,L9o),e(xu,E$),e(E$,B9o),e(xu,x9o),e($,k9o),e($,ku),e(ku,Ooe),e(Ooe,R9o),e(ku,S9o),e(ku,y$),e(y$,P9o),e(ku,$9o),e($,I9o),e($,Ru),e(Ru,Xoe),e(Xoe,D9o),e(Ru,N9o),e(Ru,w$),e(w$,j9o),e(Ru,q9o),e($,G9o),e($,Su),e(Su,Voe),e(Voe,O9o),e(Su,X9o),e(Su,A$),e(A$,V9o),e(Su,z9o),e($,W9o),e($,Pu),e(Pu,zoe),e(zoe,Q9o),e(Pu,H9o),e(Pu,L$),e(L$,U9o),e(Pu,J9o),e($,Y9o),e($,$u),e($u,Woe),e(Woe,K9o),e($u,Z9o),e($u,B$),e(B$,ebo),e($u,obo),e($,rbo),e($,Iu),e(Iu,Qoe),e(Qoe,tbo),e(Iu,abo),e(Iu,x$),e(x$,nbo),e(Iu,sbo),e($,lbo),e($,Du),e(Du,Hoe),e(Hoe,ibo),e(Du,dbo),e(Du,k$),e(k$,cbo),e(Du,fbo),e($,mbo),e($,Nu),e(Nu,Uoe),e(Uoe,gbo),e(Nu,hbo),e(Nu,R$),e(R$,pbo),e(Nu,_bo),e($,ubo),e($,ju),e(ju,Joe),e(Joe,bbo),e(ju,vbo),e(ju,S$),e(S$,Tbo),e(ju,Fbo),e($,Cbo),e($,qu),e(qu,Yoe),e(Yoe,Mbo),e(qu,Ebo),e(qu,P$),e(P$,ybo),e(qu,wbo),e($,Abo),e($,Gu),e(Gu,Koe),e(Koe,Lbo),e(Gu,Bbo),e(Gu,$$),e($$,xbo),e(Gu,kbo),e($,Rbo),e($,Ou),e(Ou,Zoe),e(Zoe,Sbo),e(Ou,Pbo),e(Ou,I$),e(I$,$bo),e(Ou,Ibo),e($,Dbo),e($,Xu),e(Xu,ere),e(ere,Nbo),e(Xu,jbo),e(Xu,D$),e(D$,qbo),e(Xu,Gbo),e($,Obo),e($,Vu),e(Vu,ore),e(ore,Xbo),e(Vu,Vbo),e(Vu,N$),e(N$,zbo),e(Vu,Wbo),e($,Qbo),e($,zu),e(zu,rre),e(rre,Hbo),e(zu,Ubo),e(zu,j$),e(j$,Jbo),e(zu,Ybo),e($,Kbo),e($,Wu),e(Wu,tre),e(tre,Zbo),e(Wu,e5o),e(Wu,q$),e(q$,o5o),e(Wu,r5o),e($,t5o),e($,Qu),e(Qu,are),e(are,a5o),e(Qu,n5o),e(Qu,G$),e(G$,s5o),e(Qu,l5o),e($,i5o),e($,Hu),e(Hu,nre),e(nre,d5o),e(Hu,c5o),e(Hu,O$),e(O$,f5o),e(Hu,m5o),e($,g5o),e($,Uu),e(Uu,sre),e(sre,h5o),e(Uu,p5o),e(Uu,X$),e(X$,_5o),e(Uu,u5o),e($,b5o),e($,Ju),e(Ju,lre),e(lre,v5o),e(Ju,T5o),e(Ju,V$),e(V$,F5o),e(Ju,C5o),e($,M5o),e($,Yu),e(Yu,ire),e(ire,E5o),e(Yu,y5o),e(Yu,z$),e(z$,w5o),e(Yu,A5o),e($,L5o),e($,Ku),e(Ku,dre),e(dre,B5o),e(Ku,x5o),e(Ku,W$),e(W$,k5o),e(Ku,R5o),e(je,S5o),e(je,Zu),e(Zu,P5o),e(Zu,cre),e(cre,$5o),e(Zu,I5o),e(Zu,fre),e(fre,D5o),e(je,N5o),e(je,mre),e(mre,j5o),e(je,q5o),g(dy,je,null),b(c,Rke,u),b(c,nd,u),e(nd,e1),e(e1,gre),g(cy,gre,null),e(nd,G5o),e(nd,hre),e(hre,O5o),b(c,Ske,u),b(c,Zo,u),g(fy,Zo,null),e(Zo,X5o),e(Zo,sd),e(sd,V5o),e(sd,pre),e(pre,z5o),e(sd,W5o),e(sd,_re),e(_re,Q5o),e(sd,H5o),e(Zo,U5o),e(Zo,my),e(my,J5o),e(my,ure),e(ure,Y5o),e(my,K5o),e(Zo,Z5o),e(Zo,Qr),g(gy,Qr,null),e(Qr,e2o),e(Qr,bre),e(bre,o2o),e(Qr,r2o),e(Qr,ld),e(ld,t2o),e(ld,vre),e(vre,a2o),e(ld,n2o),e(ld,Tre),e(Tre,s2o),e(ld,l2o),e(Qr,i2o),e(Qr,Fre),e(Fre,d2o),e(Qr,c2o),g(hy,Qr,null),e(Zo,f2o),e(Zo,qe),g(py,qe,null),e(qe,m2o),e(qe,Cre),e(Cre,g2o),e(qe,h2o),e(qe,Qa),e(Qa,p2o),e(Qa,Mre),e(Mre,_2o),e(Qa,u2o),e(Qa,Ere),e(Ere,b2o),e(Qa,v2o),e(Qa,yre),e(yre,T2o),e(Qa,F2o),e(qe,C2o),e(qe,I),e(I,o1),e(o1,wre),e(wre,M2o),e(o1,E2o),e(o1,Q$),e(Q$,y2o),e(o1,w2o),e(I,A2o),e(I,r1),e(r1,Are),e(Are,L2o),e(r1,B2o),e(r1,H$),e(H$,x2o),e(r1,k2o),e(I,R2o),e(I,t1),e(t1,Lre),e(Lre,S2o),e(t1,P2o),e(t1,U$),e(U$,$2o),e(t1,I2o),e(I,D2o),e(I,a1),e(a1,Bre),e(Bre,N2o),e(a1,j2o),e(a1,J$),e(J$,q2o),e(a1,G2o),e(I,O2o),e(I,n1),e(n1,xre),e(xre,X2o),e(n1,V2o),e(n1,Y$),e(Y$,z2o),e(n1,W2o),e(I,Q2o),e(I,s1),e(s1,kre),e(kre,H2o),e(s1,U2o),e(s1,K$),e(K$,J2o),e(s1,Y2o),e(I,K2o),e(I,l1),e(l1,Rre),e(Rre,Z2o),e(l1,evo),e(l1,Z$),e(Z$,ovo),e(l1,rvo),e(I,tvo),e(I,i1),e(i1,Sre),e(Sre,avo),e(i1,nvo),e(i1,eI),e(eI,svo),e(i1,lvo),e(I,ivo),e(I,d1),e(d1,Pre),e(Pre,dvo),e(d1,cvo),e(d1,oI),e(oI,fvo),e(d1,mvo),e(I,gvo),e(I,c1),e(c1,$re),e($re,hvo),e(c1,pvo),e(c1,rI),e(rI,_vo),e(c1,uvo),e(I,bvo),e(I,f1),e(f1,Ire),e(Ire,vvo),e(f1,Tvo),e(f1,tI),e(tI,Fvo),e(f1,Cvo),e(I,Mvo),e(I,m1),e(m1,Dre),e(Dre,Evo),e(m1,yvo),e(m1,aI),e(aI,wvo),e(m1,Avo),e(I,Lvo),e(I,g1),e(g1,Nre),e(Nre,Bvo),e(g1,xvo),e(g1,nI),e(nI,kvo),e(g1,Rvo),e(I,Svo),e(I,h1),e(h1,jre),e(jre,Pvo),e(h1,$vo),e(h1,sI),e(sI,Ivo),e(h1,Dvo),e(I,Nvo),e(I,p1),e(p1,qre),e(qre,jvo),e(p1,qvo),e(p1,lI),e(lI,Gvo),e(p1,Ovo),e(I,Xvo),e(I,_1),e(_1,Gre),e(Gre,Vvo),e(_1,zvo),e(_1,iI),e(iI,Wvo),e(_1,Qvo),e(I,Hvo),e(I,u1),e(u1,Ore),e(Ore,Uvo),e(u1,Jvo),e(u1,dI),e(dI,Yvo),e(u1,Kvo),e(I,Zvo),e(I,b1),e(b1,Xre),e(Xre,eTo),e(b1,oTo),e(b1,cI),e(cI,rTo),e(b1,tTo),e(I,aTo),e(I,v1),e(v1,Vre),e(Vre,nTo),e(v1,sTo),e(v1,fI),e(fI,lTo),e(v1,iTo),e(I,dTo),e(I,T1),e(T1,zre),e(zre,cTo),e(T1,fTo),e(T1,mI),e(mI,mTo),e(T1,gTo),e(I,hTo),e(I,F1),e(F1,Wre),e(Wre,pTo),e(F1,_To),e(F1,gI),e(gI,uTo),e(F1,bTo),e(I,vTo),e(I,C1),e(C1,Qre),e(Qre,TTo),e(C1,FTo),e(C1,hI),e(hI,CTo),e(C1,MTo),e(I,ETo),e(I,M1),e(M1,Hre),e(Hre,yTo),e(M1,wTo),e(M1,pI),e(pI,ATo),e(M1,LTo),e(I,BTo),e(I,E1),e(E1,Ure),e(Ure,xTo),e(E1,kTo),e(E1,_I),e(_I,RTo),e(E1,STo),e(I,PTo),e(I,y1),e(y1,Jre),e(Jre,$To),e(y1,ITo),e(y1,uI),e(uI,DTo),e(y1,NTo),e(I,jTo),e(I,w1),e(w1,Yre),e(Yre,qTo),e(w1,GTo),e(w1,bI),e(bI,OTo),e(w1,XTo),e(I,VTo),e(I,A1),e(A1,Kre),e(Kre,zTo),e(A1,WTo),e(A1,vI),e(vI,QTo),e(A1,HTo),e(I,UTo),e(I,L1),e(L1,Zre),e(Zre,JTo),e(L1,YTo),e(L1,TI),e(TI,KTo),e(L1,ZTo),e(I,eFo),e(I,B1),e(B1,ete),e(ete,oFo),e(B1,rFo),e(B1,FI),e(FI,tFo),e(B1,aFo),e(I,nFo),e(I,x1),e(x1,ote),e(ote,sFo),e(x1,lFo),e(x1,CI),e(CI,iFo),e(x1,dFo),e(I,cFo),e(I,k1),e(k1,rte),e(rte,fFo),e(k1,mFo),e(k1,tte),e(tte,gFo),e(k1,hFo),e(I,pFo),e(I,R1),e(R1,ate),e(ate,_Fo),e(R1,uFo),e(R1,MI),e(MI,bFo),e(R1,vFo),e(I,TFo),e(I,S1),e(S1,nte),e(nte,FFo),e(S1,CFo),e(S1,EI),e(EI,MFo),e(S1,EFo),e(I,yFo),e(I,P1),e(P1,ste),e(ste,wFo),e(P1,AFo),e(P1,yI),e(yI,LFo),e(P1,BFo),e(I,xFo),e(I,$1),e($1,lte),e(lte,kFo),e($1,RFo),e($1,wI),e(wI,SFo),e($1,PFo),e(qe,$Fo),e(qe,I1),e(I1,IFo),e(I1,ite),e(ite,DFo),e(I1,NFo),e(I1,dte),e(dte,jFo),e(qe,qFo),e(qe,cte),e(cte,GFo),e(qe,OFo),g(_y,qe,null),b(c,Pke,u),b(c,id,u),e(id,D1),e(D1,fte),g(uy,fte,null),e(id,XFo),e(id,mte),e(mte,VFo),b(c,$ke,u),b(c,er,u),g(by,er,null),e(er,zFo),e(er,dd),e(dd,WFo),e(dd,gte),e(gte,QFo),e(dd,HFo),e(dd,hte),e(hte,UFo),e(dd,JFo),e(er,YFo),e(er,vy),e(vy,KFo),e(vy,pte),e(pte,ZFo),e(vy,eCo),e(er,oCo),e(er,Hr),g(Ty,Hr,null),e(Hr,rCo),e(Hr,_te),e(_te,tCo),e(Hr,aCo),e(Hr,cd),e(cd,nCo),e(cd,ute),e(ute,sCo),e(cd,lCo),e(cd,bte),e(bte,iCo),e(cd,dCo),e(Hr,cCo),e(Hr,vte),e(vte,fCo),e(Hr,mCo),g(Fy,Hr,null),e(er,gCo),e(er,Ge),g(Cy,Ge,null),e(Ge,hCo),e(Ge,Tte),e(Tte,pCo),e(Ge,_Co),e(Ge,Ha),e(Ha,uCo),e(Ha,Fte),e(Fte,bCo),e(Ha,vCo),e(Ha,Cte),e(Cte,TCo),e(Ha,FCo),e(Ha,Mte),e(Mte,CCo),e(Ha,MCo),e(Ge,ECo),e(Ge,se),e(se,N1),e(N1,Ete),e(Ete,yCo),e(N1,wCo),e(N1,AI),e(AI,ACo),e(N1,LCo),e(se,BCo),e(se,j1),e(j1,yte),e(yte,xCo),e(j1,kCo),e(j1,LI),e(LI,RCo),e(j1,SCo),e(se,PCo),e(se,q1),e(q1,wte),e(wte,$Co),e(q1,ICo),e(q1,BI),e(BI,DCo),e(q1,NCo),e(se,jCo),e(se,G1),e(G1,Ate),e(Ate,qCo),e(G1,GCo),e(G1,xI),e(xI,OCo),e(G1,XCo),e(se,VCo),e(se,O1),e(O1,Lte),e(Lte,zCo),e(O1,WCo),e(O1,kI),e(kI,QCo),e(O1,HCo),e(se,UCo),e(se,X1),e(X1,Bte),e(Bte,JCo),e(X1,YCo),e(X1,RI),e(RI,KCo),e(X1,ZCo),e(se,eMo),e(se,V1),e(V1,xte),e(xte,oMo),e(V1,rMo),e(V1,SI),e(SI,tMo),e(V1,aMo),e(se,nMo),e(se,z1),e(z1,kte),e(kte,sMo),e(z1,lMo),e(z1,PI),e(PI,iMo),e(z1,dMo),e(se,cMo),e(se,W1),e(W1,Rte),e(Rte,fMo),e(W1,mMo),e(W1,$I),e($I,gMo),e(W1,hMo),e(se,pMo),e(se,Q1),e(Q1,Ste),e(Ste,_Mo),e(Q1,uMo),e(Q1,II),e(II,bMo),e(Q1,vMo),e(se,TMo),e(se,H1),e(H1,Pte),e(Pte,FMo),e(H1,CMo),e(H1,DI),e(DI,MMo),e(H1,EMo),e(se,yMo),e(se,U1),e(U1,$te),e($te,wMo),e(U1,AMo),e(U1,NI),e(NI,LMo),e(U1,BMo),e(se,xMo),e(se,J1),e(J1,Ite),e(Ite,kMo),e(J1,RMo),e(J1,jI),e(jI,SMo),e(J1,PMo),e(se,$Mo),e(se,Y1),e(Y1,Dte),e(Dte,IMo),e(Y1,DMo),e(Y1,qI),e(qI,NMo),e(Y1,jMo),e(se,qMo),e(se,K1),e(K1,Nte),e(Nte,GMo),e(K1,OMo),e(K1,GI),e(GI,XMo),e(K1,VMo),e(se,zMo),e(se,Z1),e(Z1,jte),e(jte,WMo),e(Z1,QMo),e(Z1,OI),e(OI,HMo),e(Z1,UMo),e(Ge,JMo),e(Ge,e9),e(e9,YMo),e(e9,qte),e(qte,KMo),e(e9,ZMo),e(e9,Gte),e(Gte,e4o),e(Ge,o4o),e(Ge,Ote),e(Ote,r4o),e(Ge,t4o),g(My,Ge,null),b(c,Ike,u),b(c,fd,u),e(fd,o9),e(o9,Xte),g(Ey,Xte,null),e(fd,a4o),e(fd,Vte),e(Vte,n4o),b(c,Dke,u),b(c,or,u),g(yy,or,null),e(or,s4o),e(or,md),e(md,l4o),e(md,zte),e(zte,i4o),e(md,d4o),e(md,Wte),e(Wte,c4o),e(md,f4o),e(or,m4o),e(or,wy),e(wy,g4o),e(wy,Qte),e(Qte,h4o),e(wy,p4o),e(or,_4o),e(or,Ur),g(Ay,Ur,null),e(Ur,u4o),e(Ur,Hte),e(Hte,b4o),e(Ur,v4o),e(Ur,gd),e(gd,T4o),e(gd,Ute),e(Ute,F4o),e(gd,C4o),e(gd,Jte),e(Jte,M4o),e(gd,E4o),e(Ur,y4o),e(Ur,Yte),e(Yte,w4o),e(Ur,A4o),g(Ly,Ur,null),e(or,L4o),e(or,Oe),g(By,Oe,null),e(Oe,B4o),e(Oe,Kte),e(Kte,x4o),e(Oe,k4o),e(Oe,Ua),e(Ua,R4o),e(Ua,Zte),e(Zte,S4o),e(Ua,P4o),e(Ua,eae),e(eae,$4o),e(Ua,I4o),e(Ua,oae),e(oae,D4o),e(Ua,N4o),e(Oe,j4o),e(Oe,A),e(A,r9),e(r9,rae),e(rae,q4o),e(r9,G4o),e(r9,XI),e(XI,O4o),e(r9,X4o),e(A,V4o),e(A,t9),e(t9,tae),e(tae,z4o),e(t9,W4o),e(t9,VI),e(VI,Q4o),e(t9,H4o),e(A,U4o),e(A,a9),e(a9,aae),e(aae,J4o),e(a9,Y4o),e(a9,zI),e(zI,K4o),e(a9,Z4o),e(A,eEo),e(A,n9),e(n9,nae),e(nae,oEo),e(n9,rEo),e(n9,WI),e(WI,tEo),e(n9,aEo),e(A,nEo),e(A,s9),e(s9,sae),e(sae,sEo),e(s9,lEo),e(s9,QI),e(QI,iEo),e(s9,dEo),e(A,cEo),e(A,l9),e(l9,lae),e(lae,fEo),e(l9,mEo),e(l9,HI),e(HI,gEo),e(l9,hEo),e(A,pEo),e(A,i9),e(i9,iae),e(iae,_Eo),e(i9,uEo),e(i9,UI),e(UI,bEo),e(i9,vEo),e(A,TEo),e(A,d9),e(d9,dae),e(dae,FEo),e(d9,CEo),e(d9,JI),e(JI,MEo),e(d9,EEo),e(A,yEo),e(A,c9),e(c9,cae),e(cae,wEo),e(c9,AEo),e(c9,YI),e(YI,LEo),e(c9,BEo),e(A,xEo),e(A,f9),e(f9,fae),e(fae,kEo),e(f9,REo),e(f9,KI),e(KI,SEo),e(f9,PEo),e(A,$Eo),e(A,m9),e(m9,mae),e(mae,IEo),e(m9,DEo),e(m9,ZI),e(ZI,NEo),e(m9,jEo),e(A,qEo),e(A,g9),e(g9,gae),e(gae,GEo),e(g9,OEo),e(g9,eD),e(eD,XEo),e(g9,VEo),e(A,zEo),e(A,h9),e(h9,hae),e(hae,WEo),e(h9,QEo),e(h9,oD),e(oD,HEo),e(h9,UEo),e(A,JEo),e(A,p9),e(p9,pae),e(pae,YEo),e(p9,KEo),e(p9,rD),e(rD,ZEo),e(p9,e3o),e(A,o3o),e(A,_9),e(_9,_ae),e(_ae,r3o),e(_9,t3o),e(_9,tD),e(tD,a3o),e(_9,n3o),e(A,s3o),e(A,u9),e(u9,uae),e(uae,l3o),e(u9,i3o),e(u9,aD),e(aD,d3o),e(u9,c3o),e(A,f3o),e(A,b9),e(b9,bae),e(bae,m3o),e(b9,g3o),e(b9,nD),e(nD,h3o),e(b9,p3o),e(A,_3o),e(A,v9),e(v9,vae),e(vae,u3o),e(v9,b3o),e(v9,sD),e(sD,v3o),e(v9,T3o),e(A,F3o),e(A,T9),e(T9,Tae),e(Tae,C3o),e(T9,M3o),e(T9,lD),e(lD,E3o),e(T9,y3o),e(A,w3o),e(A,F9),e(F9,Fae),e(Fae,A3o),e(F9,L3o),e(F9,iD),e(iD,B3o),e(F9,x3o),e(A,k3o),e(A,C9),e(C9,Cae),e(Cae,R3o),e(C9,S3o),e(C9,dD),e(dD,P3o),e(C9,$3o),e(A,I3o),e(A,M9),e(M9,Mae),e(Mae,D3o),e(M9,N3o),e(M9,cD),e(cD,j3o),e(M9,q3o),e(A,G3o),e(A,E9),e(E9,Eae),e(Eae,O3o),e(E9,X3o),e(E9,fD),e(fD,V3o),e(E9,z3o),e(A,W3o),e(A,y9),e(y9,yae),e(yae,Q3o),e(y9,H3o),e(y9,mD),e(mD,U3o),e(y9,J3o),e(A,Y3o),e(A,w9),e(w9,wae),e(wae,K3o),e(w9,Z3o),e(w9,gD),e(gD,eyo),e(w9,oyo),e(A,ryo),e(A,A9),e(A9,Aae),e(Aae,tyo),e(A9,ayo),e(A9,hD),e(hD,nyo),e(A9,syo),e(A,lyo),e(A,L9),e(L9,Lae),e(Lae,iyo),e(L9,dyo),e(L9,pD),e(pD,cyo),e(L9,fyo),e(A,myo),e(A,B9),e(B9,Bae),e(Bae,gyo),e(B9,hyo),e(B9,_D),e(_D,pyo),e(B9,_yo),e(A,uyo),e(A,x9),e(x9,xae),e(xae,byo),e(x9,vyo),e(x9,uD),e(uD,Tyo),e(x9,Fyo),e(A,Cyo),e(A,k9),e(k9,kae),e(kae,Myo),e(k9,Eyo),e(k9,bD),e(bD,yyo),e(k9,wyo),e(A,Ayo),e(A,R9),e(R9,Rae),e(Rae,Lyo),e(R9,Byo),e(R9,vD),e(vD,xyo),e(R9,kyo),e(A,Ryo),e(A,S9),e(S9,Sae),e(Sae,Syo),e(S9,Pyo),e(S9,TD),e(TD,$yo),e(S9,Iyo),e(A,Dyo),e(A,P9),e(P9,Pae),e(Pae,Nyo),e(P9,jyo),e(P9,FD),e(FD,qyo),e(P9,Gyo),e(A,Oyo),e(A,$9),e($9,$ae),e($ae,Xyo),e($9,Vyo),e($9,CD),e(CD,zyo),e($9,Wyo),e(A,Qyo),e(A,I9),e(I9,Iae),e(Iae,Hyo),e(I9,Uyo),e(I9,MD),e(MD,Jyo),e(I9,Yyo),e(A,Kyo),e(A,D9),e(D9,Dae),e(Dae,Zyo),e(D9,ewo),e(D9,ED),e(ED,owo),e(D9,rwo),e(A,two),e(A,N9),e(N9,Nae),e(Nae,awo),e(N9,nwo),e(N9,yD),e(yD,swo),e(N9,lwo),e(A,iwo),e(A,j9),e(j9,jae),e(jae,dwo),e(j9,cwo),e(j9,wD),e(wD,fwo),e(j9,mwo),e(A,gwo),e(A,q9),e(q9,qae),e(qae,hwo),e(q9,pwo),e(q9,AD),e(AD,_wo),e(q9,uwo),e(A,bwo),e(A,G9),e(G9,Gae),e(Gae,vwo),e(G9,Two),e(G9,LD),e(LD,Fwo),e(G9,Cwo),e(A,Mwo),e(A,O9),e(O9,Oae),e(Oae,Ewo),e(O9,ywo),e(O9,BD),e(BD,wwo),e(O9,Awo),e(A,Lwo),e(A,X9),e(X9,Xae),e(Xae,Bwo),e(X9,xwo),e(X9,xD),e(xD,kwo),e(X9,Rwo),e(A,Swo),e(A,V9),e(V9,Vae),e(Vae,Pwo),e(V9,$wo),e(V9,kD),e(kD,Iwo),e(V9,Dwo),e(A,Nwo),e(A,z9),e(z9,zae),e(zae,jwo),e(z9,qwo),e(z9,RD),e(RD,Gwo),e(z9,Owo),e(A,Xwo),e(A,W9),e(W9,Wae),e(Wae,Vwo),e(W9,zwo),e(W9,SD),e(SD,Wwo),e(W9,Qwo),e(A,Hwo),e(A,Q9),e(Q9,Qae),e(Qae,Uwo),e(Q9,Jwo),e(Q9,PD),e(PD,Ywo),e(Q9,Kwo),e(Oe,Zwo),e(Oe,H9),e(H9,e6o),e(H9,Hae),e(Hae,o6o),e(H9,r6o),e(H9,Uae),e(Uae,t6o),e(Oe,a6o),e(Oe,Jae),e(Jae,n6o),e(Oe,s6o),g(xy,Oe,null),b(c,Nke,u),b(c,hd,u),e(hd,U9),e(U9,Yae),g(ky,Yae,null),e(hd,l6o),e(hd,Kae),e(Kae,i6o),b(c,jke,u),b(c,rr,u),g(Ry,rr,null),e(rr,d6o),e(rr,pd),e(pd,c6o),e(pd,Zae),e(Zae,f6o),e(pd,m6o),e(pd,ene),e(ene,g6o),e(pd,h6o),e(rr,p6o),e(rr,Sy),e(Sy,_6o),e(Sy,one),e(one,u6o),e(Sy,b6o),e(rr,v6o),e(rr,Jr),g(Py,Jr,null),e(Jr,T6o),e(Jr,rne),e(rne,F6o),e(Jr,C6o),e(Jr,_d),e(_d,M6o),e(_d,tne),e(tne,E6o),e(_d,y6o),e(_d,ane),e(ane,w6o),e(_d,A6o),e(Jr,L6o),e(Jr,nne),e(nne,B6o),e(Jr,x6o),g($y,Jr,null),e(rr,k6o),e(rr,Xe),g(Iy,Xe,null),e(Xe,R6o),e(Xe,sne),e(sne,S6o),e(Xe,P6o),e(Xe,Ja),e(Ja,$6o),e(Ja,lne),e(lne,I6o),e(Ja,D6o),e(Ja,ine),e(ine,N6o),e(Ja,j6o),e(Ja,dne),e(dne,q6o),e(Ja,G6o),e(Xe,O6o),e(Xe,G),e(G,J9),e(J9,cne),e(cne,X6o),e(J9,V6o),e(J9,$D),e($D,z6o),e(J9,W6o),e(G,Q6o),e(G,Y9),e(Y9,fne),e(fne,H6o),e(Y9,U6o),e(Y9,ID),e(ID,J6o),e(Y9,Y6o),e(G,K6o),e(G,K9),e(K9,mne),e(mne,Z6o),e(K9,eAo),e(K9,DD),e(DD,oAo),e(K9,rAo),e(G,tAo),e(G,Z9),e(Z9,gne),e(gne,aAo),e(Z9,nAo),e(Z9,ND),e(ND,sAo),e(Z9,lAo),e(G,iAo),e(G,eb),e(eb,hne),e(hne,dAo),e(eb,cAo),e(eb,jD),e(jD,fAo),e(eb,mAo),e(G,gAo),e(G,ob),e(ob,pne),e(pne,hAo),e(ob,pAo),e(ob,qD),e(qD,_Ao),e(ob,uAo),e(G,bAo),e(G,rb),e(rb,_ne),e(_ne,vAo),e(rb,TAo),e(rb,GD),e(GD,FAo),e(rb,CAo),e(G,MAo),e(G,tb),e(tb,une),e(une,EAo),e(tb,yAo),e(tb,OD),e(OD,wAo),e(tb,AAo),e(G,LAo),e(G,ab),e(ab,bne),e(bne,BAo),e(ab,xAo),e(ab,XD),e(XD,kAo),e(ab,RAo),e(G,SAo),e(G,nb),e(nb,vne),e(vne,PAo),e(nb,$Ao),e(nb,VD),e(VD,IAo),e(nb,DAo),e(G,NAo),e(G,sb),e(sb,Tne),e(Tne,jAo),e(sb,qAo),e(sb,zD),e(zD,GAo),e(sb,OAo),e(G,XAo),e(G,lb),e(lb,Fne),e(Fne,VAo),e(lb,zAo),e(lb,WD),e(WD,WAo),e(lb,QAo),e(G,HAo),e(G,ib),e(ib,Cne),e(Cne,UAo),e(ib,JAo),e(ib,QD),e(QD,YAo),e(ib,KAo),e(G,ZAo),e(G,db),e(db,Mne),e(Mne,e0o),e(db,o0o),e(db,HD),e(HD,r0o),e(db,t0o),e(G,a0o),e(G,cb),e(cb,Ene),e(Ene,n0o),e(cb,s0o),e(cb,UD),e(UD,l0o),e(cb,i0o),e(G,d0o),e(G,fb),e(fb,yne),e(yne,c0o),e(fb,f0o),e(fb,JD),e(JD,m0o),e(fb,g0o),e(G,h0o),e(G,mb),e(mb,wne),e(wne,p0o),e(mb,_0o),e(mb,YD),e(YD,u0o),e(mb,b0o),e(G,v0o),e(G,gb),e(gb,Ane),e(Ane,T0o),e(gb,F0o),e(gb,KD),e(KD,C0o),e(gb,M0o),e(G,E0o),e(G,hb),e(hb,Lne),e(Lne,y0o),e(hb,w0o),e(hb,ZD),e(ZD,A0o),e(hb,L0o),e(G,B0o),e(G,pb),e(pb,Bne),e(Bne,x0o),e(pb,k0o),e(pb,eN),e(eN,R0o),e(pb,S0o),e(G,P0o),e(G,_b),e(_b,xne),e(xne,$0o),e(_b,I0o),e(_b,oN),e(oN,D0o),e(_b,N0o),e(G,j0o),e(G,ub),e(ub,kne),e(kne,q0o),e(ub,G0o),e(ub,rN),e(rN,O0o),e(ub,X0o),e(G,V0o),e(G,bb),e(bb,Rne),e(Rne,z0o),e(bb,W0o),e(bb,tN),e(tN,Q0o),e(bb,H0o),e(G,U0o),e(G,vb),e(vb,Sne),e(Sne,J0o),e(vb,Y0o),e(vb,aN),e(aN,K0o),e(vb,Z0o),e(G,eLo),e(G,Tb),e(Tb,Pne),e(Pne,oLo),e(Tb,rLo),e(Tb,nN),e(nN,tLo),e(Tb,aLo),e(G,nLo),e(G,Fb),e(Fb,$ne),e($ne,sLo),e(Fb,lLo),e(Fb,sN),e(sN,iLo),e(Fb,dLo),e(G,cLo),e(G,Cb),e(Cb,Ine),e(Ine,fLo),e(Cb,mLo),e(Cb,lN),e(lN,gLo),e(Cb,hLo),e(G,pLo),e(G,Mb),e(Mb,Dne),e(Dne,_Lo),e(Mb,uLo),e(Mb,iN),e(iN,bLo),e(Mb,vLo),e(Xe,TLo),e(Xe,Eb),e(Eb,FLo),e(Eb,Nne),e(Nne,CLo),e(Eb,MLo),e(Eb,jne),e(jne,ELo),e(Xe,yLo),e(Xe,qne),e(qne,wLo),e(Xe,ALo),g(Dy,Xe,null),b(c,qke,u),b(c,ud,u),e(ud,yb),e(yb,Gne),g(Ny,Gne,null),e(ud,LLo),e(ud,One),e(One,BLo),b(c,Gke,u),b(c,tr,u),g(jy,tr,null),e(tr,xLo),e(tr,bd),e(bd,kLo),e(bd,Xne),e(Xne,RLo),e(bd,SLo),e(bd,Vne),e(Vne,PLo),e(bd,$Lo),e(tr,ILo),e(tr,qy),e(qy,DLo),e(qy,zne),e(zne,NLo),e(qy,jLo),e(tr,qLo),e(tr,Yr),g(Gy,Yr,null),e(Yr,GLo),e(Yr,Wne),e(Wne,OLo),e(Yr,XLo),e(Yr,vd),e(vd,VLo),e(vd,Qne),e(Qne,zLo),e(vd,WLo),e(vd,Hne),e(Hne,QLo),e(vd,HLo),e(Yr,ULo),e(Yr,Une),e(Une,JLo),e(Yr,YLo),g(Oy,Yr,null),e(tr,KLo),e(tr,Ve),g(Xy,Ve,null),e(Ve,ZLo),e(Ve,Jne),e(Jne,e7o),e(Ve,o7o),e(Ve,Ya),e(Ya,r7o),e(Ya,Yne),e(Yne,t7o),e(Ya,a7o),e(Ya,Kne),e(Kne,n7o),e(Ya,s7o),e(Ya,Zne),e(Zne,l7o),e(Ya,i7o),e(Ve,d7o),e(Ve,da),e(da,wb),e(wb,ese),e(ese,c7o),e(wb,f7o),e(wb,dN),e(dN,m7o),e(wb,g7o),e(da,h7o),e(da,Ab),e(Ab,ose),e(ose,p7o),e(Ab,_7o),e(Ab,cN),e(cN,u7o),e(Ab,b7o),e(da,v7o),e(da,Lb),e(Lb,rse),e(rse,T7o),e(Lb,F7o),e(Lb,fN),e(fN,C7o),e(Lb,M7o),e(da,E7o),e(da,Bb),e(Bb,tse),e(tse,y7o),e(Bb,w7o),e(Bb,mN),e(mN,A7o),e(Bb,L7o),e(da,B7o),e(da,xb),e(xb,ase),e(ase,x7o),e(xb,k7o),e(xb,gN),e(gN,R7o),e(xb,S7o),e(Ve,P7o),e(Ve,kb),e(kb,$7o),e(kb,nse),e(nse,I7o),e(kb,D7o),e(kb,sse),e(sse,N7o),e(Ve,j7o),e(Ve,lse),e(lse,q7o),e(Ve,G7o),g(Vy,Ve,null),b(c,Oke,u),b(c,Td,u),e(Td,Rb),e(Rb,ise),g(zy,ise,null),e(Td,O7o),e(Td,dse),e(dse,X7o),b(c,Xke,u),b(c,ar,u),g(Wy,ar,null),e(ar,V7o),e(ar,Fd),e(Fd,z7o),e(Fd,cse),e(cse,W7o),e(Fd,Q7o),e(Fd,fse),e(fse,H7o),e(Fd,U7o),e(ar,J7o),e(ar,Qy),e(Qy,Y7o),e(Qy,mse),e(mse,K7o),e(Qy,Z7o),e(ar,e8o),e(ar,Kr),g(Hy,Kr,null),e(Kr,o8o),e(Kr,gse),e(gse,r8o),e(Kr,t8o),e(Kr,Cd),e(Cd,a8o),e(Cd,hse),e(hse,n8o),e(Cd,s8o),e(Cd,pse),e(pse,l8o),e(Cd,i8o),e(Kr,d8o),e(Kr,_se),e(_se,c8o),e(Kr,f8o),g(Uy,Kr,null),e(ar,m8o),e(ar,ze),g(Jy,ze,null),e(ze,g8o),e(ze,use),e(use,h8o),e(ze,p8o),e(ze,Ka),e(Ka,_8o),e(Ka,bse),e(bse,u8o),e(Ka,b8o),e(Ka,vse),e(vse,v8o),e(Ka,T8o),e(Ka,Tse),e(Tse,F8o),e(Ka,C8o),e(ze,M8o),e(ze,j),e(j,Sb),e(Sb,Fse),e(Fse,E8o),e(Sb,y8o),e(Sb,hN),e(hN,w8o),e(Sb,A8o),e(j,L8o),e(j,Pb),e(Pb,Cse),e(Cse,B8o),e(Pb,x8o),e(Pb,pN),e(pN,k8o),e(Pb,R8o),e(j,S8o),e(j,$b),e($b,Mse),e(Mse,P8o),e($b,$8o),e($b,_N),e(_N,I8o),e($b,D8o),e(j,N8o),e(j,Ib),e(Ib,Ese),e(Ese,j8o),e(Ib,q8o),e(Ib,uN),e(uN,G8o),e(Ib,O8o),e(j,X8o),e(j,Db),e(Db,yse),e(yse,V8o),e(Db,z8o),e(Db,bN),e(bN,W8o),e(Db,Q8o),e(j,H8o),e(j,Nb),e(Nb,wse),e(wse,U8o),e(Nb,J8o),e(Nb,vN),e(vN,Y8o),e(Nb,K8o),e(j,Z8o),e(j,jb),e(jb,Ase),e(Ase,eBo),e(jb,oBo),e(jb,TN),e(TN,rBo),e(jb,tBo),e(j,aBo),e(j,qb),e(qb,Lse),e(Lse,nBo),e(qb,sBo),e(qb,FN),e(FN,lBo),e(qb,iBo),e(j,dBo),e(j,Gb),e(Gb,Bse),e(Bse,cBo),e(Gb,fBo),e(Gb,CN),e(CN,mBo),e(Gb,gBo),e(j,hBo),e(j,Ob),e(Ob,xse),e(xse,pBo),e(Ob,_Bo),e(Ob,MN),e(MN,uBo),e(Ob,bBo),e(j,vBo),e(j,Xb),e(Xb,kse),e(kse,TBo),e(Xb,FBo),e(Xb,EN),e(EN,CBo),e(Xb,MBo),e(j,EBo),e(j,Vb),e(Vb,Rse),e(Rse,yBo),e(Vb,wBo),e(Vb,yN),e(yN,ABo),e(Vb,LBo),e(j,BBo),e(j,zb),e(zb,Sse),e(Sse,xBo),e(zb,kBo),e(zb,wN),e(wN,RBo),e(zb,SBo),e(j,PBo),e(j,Wb),e(Wb,Pse),e(Pse,$Bo),e(Wb,IBo),e(Wb,AN),e(AN,DBo),e(Wb,NBo),e(j,jBo),e(j,Qb),e(Qb,$se),e($se,qBo),e(Qb,GBo),e(Qb,LN),e(LN,OBo),e(Qb,XBo),e(j,VBo),e(j,Hb),e(Hb,Ise),e(Ise,zBo),e(Hb,WBo),e(Hb,BN),e(BN,QBo),e(Hb,HBo),e(j,UBo),e(j,Ub),e(Ub,Dse),e(Dse,JBo),e(Ub,YBo),e(Ub,xN),e(xN,KBo),e(Ub,ZBo),e(j,exo),e(j,Jb),e(Jb,Nse),e(Nse,oxo),e(Jb,rxo),e(Jb,kN),e(kN,txo),e(Jb,axo),e(j,nxo),e(j,Yb),e(Yb,jse),e(jse,sxo),e(Yb,lxo),e(Yb,RN),e(RN,ixo),e(Yb,dxo),e(j,cxo),e(j,Kb),e(Kb,qse),e(qse,fxo),e(Kb,mxo),e(Kb,SN),e(SN,gxo),e(Kb,hxo),e(j,pxo),e(j,Zb),e(Zb,Gse),e(Gse,_xo),e(Zb,uxo),e(Zb,PN),e(PN,bxo),e(Zb,vxo),e(j,Txo),e(j,e5),e(e5,Ose),e(Ose,Fxo),e(e5,Cxo),e(e5,$N),e($N,Mxo),e(e5,Exo),e(j,yxo),e(j,o5),e(o5,Xse),e(Xse,wxo),e(o5,Axo),e(o5,IN),e(IN,Lxo),e(o5,Bxo),e(j,xxo),e(j,r5),e(r5,Vse),e(Vse,kxo),e(r5,Rxo),e(r5,DN),e(DN,Sxo),e(r5,Pxo),e(j,$xo),e(j,t5),e(t5,zse),e(zse,Ixo),e(t5,Dxo),e(t5,NN),e(NN,Nxo),e(t5,jxo),e(j,qxo),e(j,a5),e(a5,Wse),e(Wse,Gxo),e(a5,Oxo),e(a5,jN),e(jN,Xxo),e(a5,Vxo),e(j,zxo),e(j,n5),e(n5,Qse),e(Qse,Wxo),e(n5,Qxo),e(n5,qN),e(qN,Hxo),e(n5,Uxo),e(j,Jxo),e(j,s5),e(s5,Hse),e(Hse,Yxo),e(s5,Kxo),e(s5,GN),e(GN,Zxo),e(s5,eko),e(j,oko),e(j,l5),e(l5,Use),e(Use,rko),e(l5,tko),e(l5,ON),e(ON,ako),e(l5,nko),e(j,sko),e(j,i5),e(i5,Jse),e(Jse,lko),e(i5,iko),e(i5,XN),e(XN,dko),e(i5,cko),e(j,fko),e(j,d5),e(d5,Yse),e(Yse,mko),e(d5,gko),e(d5,VN),e(VN,hko),e(d5,pko),e(j,_ko),e(j,c5),e(c5,Kse),e(Kse,uko),e(c5,bko),e(c5,zN),e(zN,vko),e(c5,Tko),e(j,Fko),e(j,f5),e(f5,Zse),e(Zse,Cko),e(f5,Mko),e(f5,WN),e(WN,Eko),e(f5,yko),e(ze,wko),e(ze,m5),e(m5,Ako),e(m5,ele),e(ele,Lko),e(m5,Bko),e(m5,ole),e(ole,xko),e(ze,kko),e(ze,rle),e(rle,Rko),e(ze,Sko),g(Yy,ze,null),b(c,Vke,u),b(c,Md,u),e(Md,g5),e(g5,tle),g(Ky,tle,null),e(Md,Pko),e(Md,ale),e(ale,$ko),b(c,zke,u),b(c,nr,u),g(Zy,nr,null),e(nr,Iko),e(nr,Ed),e(Ed,Dko),e(Ed,nle),e(nle,Nko),e(Ed,jko),e(Ed,sle),e(sle,qko),e(Ed,Gko),e(nr,Oko),e(nr,ew),e(ew,Xko),e(ew,lle),e(lle,Vko),e(ew,zko),e(nr,Wko),e(nr,Zr),g(ow,Zr,null),e(Zr,Qko),e(Zr,ile),e(ile,Hko),e(Zr,Uko),e(Zr,yd),e(yd,Jko),e(yd,dle),e(dle,Yko),e(yd,Kko),e(yd,cle),e(cle,Zko),e(yd,eRo),e(Zr,oRo),e(Zr,fle),e(fle,rRo),e(Zr,tRo),g(rw,Zr,null),e(nr,aRo),e(nr,We),g(tw,We,null),e(We,nRo),e(We,mle),e(mle,sRo),e(We,lRo),e(We,Za),e(Za,iRo),e(Za,gle),e(gle,dRo),e(Za,cRo),e(Za,hle),e(hle,fRo),e(Za,mRo),e(Za,ple),e(ple,gRo),e(Za,hRo),e(We,pRo),e(We,R),e(R,h5),e(h5,_le),e(_le,_Ro),e(h5,uRo),e(h5,QN),e(QN,bRo),e(h5,vRo),e(R,TRo),e(R,p5),e(p5,ule),e(ule,FRo),e(p5,CRo),e(p5,HN),e(HN,MRo),e(p5,ERo),e(R,yRo),e(R,_5),e(_5,ble),e(ble,wRo),e(_5,ARo),e(_5,UN),e(UN,LRo),e(_5,BRo),e(R,xRo),e(R,u5),e(u5,vle),e(vle,kRo),e(u5,RRo),e(u5,JN),e(JN,SRo),e(u5,PRo),e(R,$Ro),e(R,b5),e(b5,Tle),e(Tle,IRo),e(b5,DRo),e(b5,YN),e(YN,NRo),e(b5,jRo),e(R,qRo),e(R,v5),e(v5,Fle),e(Fle,GRo),e(v5,ORo),e(v5,KN),e(KN,XRo),e(v5,VRo),e(R,zRo),e(R,T5),e(T5,Cle),e(Cle,WRo),e(T5,QRo),e(T5,ZN),e(ZN,HRo),e(T5,URo),e(R,JRo),e(R,F5),e(F5,Mle),e(Mle,YRo),e(F5,KRo),e(F5,ej),e(ej,ZRo),e(F5,eSo),e(R,oSo),e(R,C5),e(C5,Ele),e(Ele,rSo),e(C5,tSo),e(C5,oj),e(oj,aSo),e(C5,nSo),e(R,sSo),e(R,M5),e(M5,yle),e(yle,lSo),e(M5,iSo),e(M5,rj),e(rj,dSo),e(M5,cSo),e(R,fSo),e(R,E5),e(E5,wle),e(wle,mSo),e(E5,gSo),e(E5,tj),e(tj,hSo),e(E5,pSo),e(R,_So),e(R,y5),e(y5,Ale),e(Ale,uSo),e(y5,bSo),e(y5,aj),e(aj,vSo),e(y5,TSo),e(R,FSo),e(R,w5),e(w5,Lle),e(Lle,CSo),e(w5,MSo),e(w5,nj),e(nj,ESo),e(w5,ySo),e(R,wSo),e(R,A5),e(A5,Ble),e(Ble,ASo),e(A5,LSo),e(A5,sj),e(sj,BSo),e(A5,xSo),e(R,kSo),e(R,L5),e(L5,xle),e(xle,RSo),e(L5,SSo),e(L5,lj),e(lj,PSo),e(L5,$So),e(R,ISo),e(R,B5),e(B5,kle),e(kle,DSo),e(B5,NSo),e(B5,ij),e(ij,jSo),e(B5,qSo),e(R,GSo),e(R,x5),e(x5,Rle),e(Rle,OSo),e(x5,XSo),e(x5,dj),e(dj,VSo),e(x5,zSo),e(R,WSo),e(R,k5),e(k5,Sle),e(Sle,QSo),e(k5,HSo),e(k5,cj),e(cj,USo),e(k5,JSo),e(R,YSo),e(R,R5),e(R5,Ple),e(Ple,KSo),e(R5,ZSo),e(R5,fj),e(fj,ePo),e(R5,oPo),e(R,rPo),e(R,S5),e(S5,$le),e($le,tPo),e(S5,aPo),e(S5,mj),e(mj,nPo),e(S5,sPo),e(R,lPo),e(R,P5),e(P5,Ile),e(Ile,iPo),e(P5,dPo),e(P5,gj),e(gj,cPo),e(P5,fPo),e(R,mPo),e(R,$5),e($5,Dle),e(Dle,gPo),e($5,hPo),e($5,hj),e(hj,pPo),e($5,_Po),e(R,uPo),e(R,I5),e(I5,Nle),e(Nle,bPo),e(I5,vPo),e(I5,pj),e(pj,TPo),e(I5,FPo),e(R,CPo),e(R,D5),e(D5,jle),e(jle,MPo),e(D5,EPo),e(D5,_j),e(_j,yPo),e(D5,wPo),e(R,APo),e(R,N5),e(N5,qle),e(qle,LPo),e(N5,BPo),e(N5,uj),e(uj,xPo),e(N5,kPo),e(R,RPo),e(R,j5),e(j5,Gle),e(Gle,SPo),e(j5,PPo),e(j5,bj),e(bj,$Po),e(j5,IPo),e(R,DPo),e(R,q5),e(q5,Ole),e(Ole,NPo),e(q5,jPo),e(q5,vj),e(vj,qPo),e(q5,GPo),e(R,OPo),e(R,G5),e(G5,Xle),e(Xle,XPo),e(G5,VPo),e(G5,Tj),e(Tj,zPo),e(G5,WPo),e(R,QPo),e(R,O5),e(O5,Vle),e(Vle,HPo),e(O5,UPo),e(O5,Fj),e(Fj,JPo),e(O5,YPo),e(R,KPo),e(R,X5),e(X5,zle),e(zle,ZPo),e(X5,e$o),e(X5,Cj),e(Cj,o$o),e(X5,r$o),e(R,t$o),e(R,V5),e(V5,Wle),e(Wle,a$o),e(V5,n$o),e(V5,Mj),e(Mj,s$o),e(V5,l$o),e(R,i$o),e(R,z5),e(z5,Qle),e(Qle,d$o),e(z5,c$o),e(z5,Ej),e(Ej,f$o),e(z5,m$o),e(R,g$o),e(R,W5),e(W5,Hle),e(Hle,h$o),e(W5,p$o),e(W5,yj),e(yj,_$o),e(W5,u$o),e(R,b$o),e(R,Q5),e(Q5,Ule),e(Ule,v$o),e(Q5,T$o),e(Q5,wj),e(wj,F$o),e(Q5,C$o),e(R,M$o),e(R,H5),e(H5,Jle),e(Jle,E$o),e(H5,y$o),e(H5,Aj),e(Aj,w$o),e(H5,A$o),e(R,L$o),e(R,U5),e(U5,Yle),e(Yle,B$o),e(U5,x$o),e(U5,Lj),e(Lj,k$o),e(U5,R$o),e(R,S$o),e(R,J5),e(J5,Kle),e(Kle,P$o),e(J5,$$o),e(J5,Bj),e(Bj,I$o),e(J5,D$o),e(R,N$o),e(R,Y5),e(Y5,Zle),e(Zle,j$o),e(Y5,q$o),e(Y5,xj),e(xj,G$o),e(Y5,O$o),e(R,X$o),e(R,K5),e(K5,eie),e(eie,V$o),e(K5,z$o),e(K5,kj),e(kj,W$o),e(K5,Q$o),e(We,H$o),e(We,Z5),e(Z5,U$o),e(Z5,oie),e(oie,J$o),e(Z5,Y$o),e(Z5,rie),e(rie,K$o),e(We,Z$o),e(We,tie),e(tie,eIo),e(We,oIo),g(aw,We,null),b(c,Wke,u),b(c,wd,u),e(wd,e2),e(e2,aie),g(nw,aie,null),e(wd,rIo),e(wd,nie),e(nie,tIo),b(c,Qke,u),b(c,sr,u),g(sw,sr,null),e(sr,aIo),e(sr,Ad),e(Ad,nIo),e(Ad,sie),e(sie,sIo),e(Ad,lIo),e(Ad,lie),e(lie,iIo),e(Ad,dIo),e(sr,cIo),e(sr,lw),e(lw,fIo),e(lw,iie),e(iie,mIo),e(lw,gIo),e(sr,hIo),e(sr,et),g(iw,et,null),e(et,pIo),e(et,die),e(die,_Io),e(et,uIo),e(et,Ld),e(Ld,bIo),e(Ld,cie),e(cie,vIo),e(Ld,TIo),e(Ld,fie),e(fie,FIo),e(Ld,CIo),e(et,MIo),e(et,mie),e(mie,EIo),e(et,yIo),g(dw,et,null),e(sr,wIo),e(sr,Qe),g(cw,Qe,null),e(Qe,AIo),e(Qe,gie),e(gie,LIo),e(Qe,BIo),e(Qe,en),e(en,xIo),e(en,hie),e(hie,kIo),e(en,RIo),e(en,pie),e(pie,SIo),e(en,PIo),e(en,_ie),e(_ie,$Io),e(en,IIo),e(Qe,DIo),e(Qe,uie),e(uie,o2),e(o2,bie),e(bie,NIo),e(o2,jIo),e(o2,Rj),e(Rj,qIo),e(o2,GIo),e(Qe,OIo),e(Qe,r2),e(r2,XIo),e(r2,vie),e(vie,VIo),e(r2,zIo),e(r2,Tie),e(Tie,WIo),e(Qe,QIo),e(Qe,Fie),e(Fie,HIo),e(Qe,UIo),g(fw,Qe,null),b(c,Hke,u),b(c,Bd,u),e(Bd,t2),e(t2,Cie),g(mw,Cie,null),e(Bd,JIo),e(Bd,Mie),e(Mie,YIo),b(c,Uke,u),b(c,lr,u),g(gw,lr,null),e(lr,KIo),e(lr,xd),e(xd,ZIo),e(xd,Eie),e(Eie,eDo),e(xd,oDo),e(xd,yie),e(yie,rDo),e(xd,tDo),e(lr,aDo),e(lr,hw),e(hw,nDo),e(hw,wie),e(wie,sDo),e(hw,lDo),e(lr,iDo),e(lr,ot),g(pw,ot,null),e(ot,dDo),e(ot,Aie),e(Aie,cDo),e(ot,fDo),e(ot,kd),e(kd,mDo),e(kd,Lie),e(Lie,gDo),e(kd,hDo),e(kd,Bie),e(Bie,pDo),e(kd,_Do),e(ot,uDo),e(ot,xie),e(xie,bDo),e(ot,vDo),g(_w,ot,null),e(lr,TDo),e(lr,He),g(uw,He,null),e(He,FDo),e(He,kie),e(kie,CDo),e(He,MDo),e(He,on),e(on,EDo),e(on,Rie),e(Rie,yDo),e(on,wDo),e(on,Sie),e(Sie,ADo),e(on,LDo),e(on,Pie),e(Pie,BDo),e(on,xDo),e(He,kDo),e(He,me),e(me,a2),e(a2,$ie),e($ie,RDo),e(a2,SDo),e(a2,Sj),e(Sj,PDo),e(a2,$Do),e(me,IDo),e(me,n2),e(n2,Iie),e(Iie,DDo),e(n2,NDo),e(n2,Pj),e(Pj,jDo),e(n2,qDo),e(me,GDo),e(me,qs),e(qs,Die),e(Die,ODo),e(qs,XDo),e(qs,$j),e($j,VDo),e(qs,zDo),e(qs,Ij),e(Ij,WDo),e(qs,QDo),e(me,HDo),e(me,s2),e(s2,Nie),e(Nie,UDo),e(s2,JDo),e(s2,Dj),e(Dj,YDo),e(s2,KDo),e(me,ZDo),e(me,ma),e(ma,jie),e(jie,eNo),e(ma,oNo),e(ma,Nj),e(Nj,rNo),e(ma,tNo),e(ma,jj),e(jj,aNo),e(ma,nNo),e(ma,qj),e(qj,sNo),e(ma,lNo),e(me,iNo),e(me,l2),e(l2,qie),e(qie,dNo),e(l2,cNo),e(l2,Gj),e(Gj,fNo),e(l2,mNo),e(me,gNo),e(me,i2),e(i2,Gie),e(Gie,hNo),e(i2,pNo),e(i2,Oj),e(Oj,_No),e(i2,uNo),e(me,bNo),e(me,d2),e(d2,Oie),e(Oie,vNo),e(d2,TNo),e(d2,Xj),e(Xj,FNo),e(d2,CNo),e(me,MNo),e(me,c2),e(c2,Xie),e(Xie,ENo),e(c2,yNo),e(c2,Vj),e(Vj,wNo),e(c2,ANo),e(me,LNo),e(me,f2),e(f2,Vie),e(Vie,BNo),e(f2,xNo),e(f2,zj),e(zj,kNo),e(f2,RNo),e(me,SNo),e(me,m2),e(m2,zie),e(zie,PNo),e(m2,$No),e(m2,Wj),e(Wj,INo),e(m2,DNo),e(He,NNo),e(He,g2),e(g2,jNo),e(g2,Wie),e(Wie,qNo),e(g2,GNo),e(g2,Qie),e(Qie,ONo),e(He,XNo),e(He,Hie),e(Hie,VNo),e(He,zNo),g(bw,He,null),b(c,Jke,u),b(c,Rd,u),e(Rd,h2),e(h2,Uie),g(vw,Uie,null),e(Rd,WNo),e(Rd,Jie),e(Jie,QNo),b(c,Yke,u),b(c,ir,u),g(Tw,ir,null),e(ir,HNo),e(ir,Sd),e(Sd,UNo),e(Sd,Yie),e(Yie,JNo),e(Sd,YNo),e(Sd,Kie),e(Kie,KNo),e(Sd,ZNo),e(ir,ejo),e(ir,Fw),e(Fw,ojo),e(Fw,Zie),e(Zie,rjo),e(Fw,tjo),e(ir,ajo),e(ir,rt),g(Cw,rt,null),e(rt,njo),e(rt,ede),e(ede,sjo),e(rt,ljo),e(rt,Pd),e(Pd,ijo),e(Pd,ode),e(ode,djo),e(Pd,cjo),e(Pd,rde),e(rde,fjo),e(Pd,mjo),e(rt,gjo),e(rt,tde),e(tde,hjo),e(rt,pjo),g(Mw,rt,null),e(ir,_jo),e(ir,Ue),g(Ew,Ue,null),e(Ue,ujo),e(Ue,ade),e(ade,bjo),e(Ue,vjo),e(Ue,rn),e(rn,Tjo),e(rn,nde),e(nde,Fjo),e(rn,Cjo),e(rn,sde),e(sde,Mjo),e(rn,Ejo),e(rn,lde),e(lde,yjo),e(rn,wjo),e(Ue,Ajo),e(Ue,ide),e(ide,p2),e(p2,dde),e(dde,Ljo),e(p2,Bjo),e(p2,Qj),e(Qj,xjo),e(p2,kjo),e(Ue,Rjo),e(Ue,_2),e(_2,Sjo),e(_2,cde),e(cde,Pjo),e(_2,$jo),e(_2,fde),e(fde,Ijo),e(Ue,Djo),e(Ue,mde),e(mde,Njo),e(Ue,jjo),g(yw,Ue,null),b(c,Kke,u),b(c,$d,u),e($d,u2),e(u2,gde),g(ww,gde,null),e($d,qjo),e($d,hde),e(hde,Gjo),b(c,Zke,u),b(c,dr,u),g(Aw,dr,null),e(dr,Ojo),e(dr,Id),e(Id,Xjo),e(Id,pde),e(pde,Vjo),e(Id,zjo),e(Id,_de),e(_de,Wjo),e(Id,Qjo),e(dr,Hjo),e(dr,Lw),e(Lw,Ujo),e(Lw,ude),e(ude,Jjo),e(Lw,Yjo),e(dr,Kjo),e(dr,tt),g(Bw,tt,null),e(tt,Zjo),e(tt,bde),e(bde,eqo),e(tt,oqo),e(tt,Dd),e(Dd,rqo),e(Dd,vde),e(vde,tqo),e(Dd,aqo),e(Dd,Tde),e(Tde,nqo),e(Dd,sqo),e(tt,lqo),e(tt,Fde),e(Fde,iqo),e(tt,dqo),g(xw,tt,null),e(dr,cqo),e(dr,Je),g(kw,Je,null),e(Je,fqo),e(Je,Cde),e(Cde,mqo),e(Je,gqo),e(Je,tn),e(tn,hqo),e(tn,Mde),e(Mde,pqo),e(tn,_qo),e(tn,Ede),e(Ede,uqo),e(tn,bqo),e(tn,yde),e(yde,vqo),e(tn,Tqo),e(Je,Fqo),e(Je,ke),e(ke,b2),e(b2,wde),e(wde,Cqo),e(b2,Mqo),e(b2,Hj),e(Hj,Eqo),e(b2,yqo),e(ke,wqo),e(ke,v2),e(v2,Ade),e(Ade,Aqo),e(v2,Lqo),e(v2,Uj),e(Uj,Bqo),e(v2,xqo),e(ke,kqo),e(ke,T2),e(T2,Lde),e(Lde,Rqo),e(T2,Sqo),e(T2,Jj),e(Jj,Pqo),e(T2,$qo),e(ke,Iqo),e(ke,F2),e(F2,Bde),e(Bde,Dqo),e(F2,Nqo),e(F2,Yj),e(Yj,jqo),e(F2,qqo),e(ke,Gqo),e(ke,C2),e(C2,xde),e(xde,Oqo),e(C2,Xqo),e(C2,Kj),e(Kj,Vqo),e(C2,zqo),e(ke,Wqo),e(ke,M2),e(M2,kde),e(kde,Qqo),e(M2,Hqo),e(M2,Zj),e(Zj,Uqo),e(M2,Jqo),e(ke,Yqo),e(ke,E2),e(E2,Rde),e(Rde,Kqo),e(E2,Zqo),e(E2,eq),e(eq,eGo),e(E2,oGo),e(ke,rGo),e(ke,y2),e(y2,Sde),e(Sde,tGo),e(y2,aGo),e(y2,oq),e(oq,nGo),e(y2,sGo),e(Je,lGo),e(Je,w2),e(w2,iGo),e(w2,Pde),e(Pde,dGo),e(w2,cGo),e(w2,$de),e($de,fGo),e(Je,mGo),e(Je,Ide),e(Ide,gGo),e(Je,hGo),g(Rw,Je,null),b(c,eRe,u),b(c,Nd,u),e(Nd,A2),e(A2,Dde),g(Sw,Dde,null),e(Nd,pGo),e(Nd,Nde),e(Nde,_Go),b(c,oRe,u),b(c,cr,u),g(Pw,cr,null),e(cr,uGo),e(cr,jd),e(jd,bGo),e(jd,jde),e(jde,vGo),e(jd,TGo),e(jd,qde),e(qde,FGo),e(jd,CGo),e(cr,MGo),e(cr,$w),e($w,EGo),e($w,Gde),e(Gde,yGo),e($w,wGo),e(cr,AGo),e(cr,at),g(Iw,at,null),e(at,LGo),e(at,Ode),e(Ode,BGo),e(at,xGo),e(at,qd),e(qd,kGo),e(qd,Xde),e(Xde,RGo),e(qd,SGo),e(qd,Vde),e(Vde,PGo),e(qd,$Go),e(at,IGo),e(at,zde),e(zde,DGo),e(at,NGo),g(Dw,at,null),e(cr,jGo),e(cr,Ye),g(Nw,Ye,null),e(Ye,qGo),e(Ye,Wde),e(Wde,GGo),e(Ye,OGo),e(Ye,an),e(an,XGo),e(an,Qde),e(Qde,VGo),e(an,zGo),e(an,Hde),e(Hde,WGo),e(an,QGo),e(an,Ude),e(Ude,HGo),e(an,UGo),e(Ye,JGo),e(Ye,nn),e(nn,L2),e(L2,Jde),e(Jde,YGo),e(L2,KGo),e(L2,rq),e(rq,ZGo),e(L2,eOo),e(nn,oOo),e(nn,B2),e(B2,Yde),e(Yde,rOo),e(B2,tOo),e(B2,tq),e(tq,aOo),e(B2,nOo),e(nn,sOo),e(nn,x2),e(x2,Kde),e(Kde,lOo),e(x2,iOo),e(x2,aq),e(aq,dOo),e(x2,cOo),e(nn,fOo),e(nn,k2),e(k2,Zde),e(Zde,mOo),e(k2,gOo),e(k2,nq),e(nq,hOo),e(k2,pOo),e(Ye,_Oo),e(Ye,R2),e(R2,uOo),e(R2,ece),e(ece,bOo),e(R2,vOo),e(R2,oce),e(oce,TOo),e(Ye,FOo),e(Ye,rce),e(rce,COo),e(Ye,MOo),g(jw,Ye,null),b(c,rRe,u),b(c,Gd,u),e(Gd,S2),e(S2,tce),g(qw,tce,null),e(Gd,EOo),e(Gd,ace),e(ace,yOo),b(c,tRe,u),b(c,fr,u),g(Gw,fr,null),e(fr,wOo),e(fr,Od),e(Od,AOo),e(Od,nce),e(nce,LOo),e(Od,BOo),e(Od,sce),e(sce,xOo),e(Od,kOo),e(fr,ROo),e(fr,Ow),e(Ow,SOo),e(Ow,lce),e(lce,POo),e(Ow,$Oo),e(fr,IOo),e(fr,nt),g(Xw,nt,null),e(nt,DOo),e(nt,ice),e(ice,NOo),e(nt,jOo),e(nt,Xd),e(Xd,qOo),e(Xd,dce),e(dce,GOo),e(Xd,OOo),e(Xd,cce),e(cce,XOo),e(Xd,VOo),e(nt,zOo),e(nt,fce),e(fce,WOo),e(nt,QOo),g(Vw,nt,null),e(fr,HOo),e(fr,Ke),g(zw,Ke,null),e(Ke,UOo),e(Ke,mce),e(mce,JOo),e(Ke,YOo),e(Ke,sn),e(sn,KOo),e(sn,gce),e(gce,ZOo),e(sn,eXo),e(sn,hce),e(hce,oXo),e(sn,rXo),e(sn,pce),e(pce,tXo),e(sn,aXo),e(Ke,nXo),e(Ke,Re),e(Re,P2),e(P2,_ce),e(_ce,sXo),e(P2,lXo),e(P2,sq),e(sq,iXo),e(P2,dXo),e(Re,cXo),e(Re,$2),e($2,uce),e(uce,fXo),e($2,mXo),e($2,lq),e(lq,gXo),e($2,hXo),e(Re,pXo),e(Re,I2),e(I2,bce),e(bce,_Xo),e(I2,uXo),e(I2,iq),e(iq,bXo),e(I2,vXo),e(Re,TXo),e(Re,D2),e(D2,vce),e(vce,FXo),e(D2,CXo),e(D2,dq),e(dq,MXo),e(D2,EXo),e(Re,yXo),e(Re,N2),e(N2,Tce),e(Tce,wXo),e(N2,AXo),e(N2,cq),e(cq,LXo),e(N2,BXo),e(Re,xXo),e(Re,j2),e(j2,Fce),e(Fce,kXo),e(j2,RXo),e(j2,fq),e(fq,SXo),e(j2,PXo),e(Re,$Xo),e(Re,q2),e(q2,Cce),e(Cce,IXo),e(q2,DXo),e(q2,mq),e(mq,NXo),e(q2,jXo),e(Re,qXo),e(Re,G2),e(G2,Mce),e(Mce,GXo),e(G2,OXo),e(G2,gq),e(gq,XXo),e(G2,VXo),e(Ke,zXo),e(Ke,O2),e(O2,WXo),e(O2,Ece),e(Ece,QXo),e(O2,HXo),e(O2,yce),e(yce,UXo),e(Ke,JXo),e(Ke,wce),e(wce,YXo),e(Ke,KXo),g(Ww,Ke,null),b(c,aRe,u),b(c,Vd,u),e(Vd,X2),e(X2,Ace),g(Qw,Ace,null),e(Vd,ZXo),e(Vd,Lce),e(Lce,eVo),b(c,nRe,u),b(c,mr,u),g(Hw,mr,null),e(mr,oVo),e(mr,zd),e(zd,rVo),e(zd,Bce),e(Bce,tVo),e(zd,aVo),e(zd,xce),e(xce,nVo),e(zd,sVo),e(mr,lVo),e(mr,Uw),e(Uw,iVo),e(Uw,kce),e(kce,dVo),e(Uw,cVo),e(mr,fVo),e(mr,st),g(Jw,st,null),e(st,mVo),e(st,Rce),e(Rce,gVo),e(st,hVo),e(st,Wd),e(Wd,pVo),e(Wd,Sce),e(Sce,_Vo),e(Wd,uVo),e(Wd,Pce),e(Pce,bVo),e(Wd,vVo),e(st,TVo),e(st,$ce),e($ce,FVo),e(st,CVo),g(Yw,st,null),e(mr,MVo),e(mr,Ze),g(Kw,Ze,null),e(Ze,EVo),e(Ze,Ice),e(Ice,yVo),e(Ze,wVo),e(Ze,ln),e(ln,AVo),e(ln,Dce),e(Dce,LVo),e(ln,BVo),e(ln,Nce),e(Nce,xVo),e(ln,kVo),e(ln,jce),e(jce,RVo),e(ln,SVo),e(Ze,PVo),e(Ze,Zw),e(Zw,V2),e(V2,qce),e(qce,$Vo),e(V2,IVo),e(V2,hq),e(hq,DVo),e(V2,NVo),e(Zw,jVo),e(Zw,z2),e(z2,Gce),e(Gce,qVo),e(z2,GVo),e(z2,pq),e(pq,OVo),e(z2,XVo),e(Ze,VVo),e(Ze,W2),e(W2,zVo),e(W2,Oce),e(Oce,WVo),e(W2,QVo),e(W2,Xce),e(Xce,HVo),e(Ze,UVo),e(Ze,Vce),e(Vce,JVo),e(Ze,YVo),g(e6,Ze,null),b(c,sRe,u),b(c,Qd,u),e(Qd,Q2),e(Q2,zce),g(o6,zce,null),e(Qd,KVo),e(Qd,Wce),e(Wce,ZVo),b(c,lRe,u),b(c,gr,u),g(r6,gr,null),e(gr,ezo),e(gr,Hd),e(Hd,ozo),e(Hd,Qce),e(Qce,rzo),e(Hd,tzo),e(Hd,Hce),e(Hce,azo),e(Hd,nzo),e(gr,szo),e(gr,t6),e(t6,lzo),e(t6,Uce),e(Uce,izo),e(t6,dzo),e(gr,czo),e(gr,lt),g(a6,lt,null),e(lt,fzo),e(lt,Jce),e(Jce,mzo),e(lt,gzo),e(lt,Ud),e(Ud,hzo),e(Ud,Yce),e(Yce,pzo),e(Ud,_zo),e(Ud,Kce),e(Kce,uzo),e(Ud,bzo),e(lt,vzo),e(lt,Zce),e(Zce,Tzo),e(lt,Fzo),g(n6,lt,null),e(gr,Czo),e(gr,eo),g(s6,eo,null),e(eo,Mzo),e(eo,efe),e(efe,Ezo),e(eo,yzo),e(eo,dn),e(dn,wzo),e(dn,ofe),e(ofe,Azo),e(dn,Lzo),e(dn,rfe),e(rfe,Bzo),e(dn,xzo),e(dn,tfe),e(tfe,kzo),e(dn,Rzo),e(eo,Szo),e(eo,cn),e(cn,H2),e(H2,afe),e(afe,Pzo),e(H2,$zo),e(H2,_q),e(_q,Izo),e(H2,Dzo),e(cn,Nzo),e(cn,U2),e(U2,nfe),e(nfe,jzo),e(U2,qzo),e(U2,uq),e(uq,Gzo),e(U2,Ozo),e(cn,Xzo),e(cn,J2),e(J2,sfe),e(sfe,Vzo),e(J2,zzo),e(J2,bq),e(bq,Wzo),e(J2,Qzo),e(cn,Hzo),e(cn,Y2),e(Y2,lfe),e(lfe,Uzo),e(Y2,Jzo),e(Y2,vq),e(vq,Yzo),e(Y2,Kzo),e(eo,Zzo),e(eo,K2),e(K2,eWo),e(K2,ife),e(ife,oWo),e(K2,rWo),e(K2,dfe),e(dfe,tWo),e(eo,aWo),e(eo,cfe),e(cfe,nWo),e(eo,sWo),g(l6,eo,null),b(c,iRe,u),b(c,Jd,u),e(Jd,Z2),e(Z2,ffe),g(i6,ffe,null),e(Jd,lWo),e(Jd,mfe),e(mfe,iWo),b(c,dRe,u),b(c,hr,u),g(d6,hr,null),e(hr,dWo),e(hr,Yd),e(Yd,cWo),e(Yd,gfe),e(gfe,fWo),e(Yd,mWo),e(Yd,hfe),e(hfe,gWo),e(Yd,hWo),e(hr,pWo),e(hr,c6),e(c6,_Wo),e(c6,pfe),e(pfe,uWo),e(c6,bWo),e(hr,vWo),e(hr,it),g(f6,it,null),e(it,TWo),e(it,_fe),e(_fe,FWo),e(it,CWo),e(it,Kd),e(Kd,MWo),e(Kd,ufe),e(ufe,EWo),e(Kd,yWo),e(Kd,bfe),e(bfe,wWo),e(Kd,AWo),e(it,LWo),e(it,vfe),e(vfe,BWo),e(it,xWo),g(m6,it,null),e(hr,kWo),e(hr,oo),g(g6,oo,null),e(oo,RWo),e(oo,Tfe),e(Tfe,SWo),e(oo,PWo),e(oo,fn),e(fn,$Wo),e(fn,Ffe),e(Ffe,IWo),e(fn,DWo),e(fn,Cfe),e(Cfe,NWo),e(fn,jWo),e(fn,Mfe),e(Mfe,qWo),e(fn,GWo),e(oo,OWo),e(oo,Zd),e(Zd,ev),e(ev,Efe),e(Efe,XWo),e(ev,VWo),e(ev,Tq),e(Tq,zWo),e(ev,WWo),e(Zd,QWo),e(Zd,ov),e(ov,yfe),e(yfe,HWo),e(ov,UWo),e(ov,Fq),e(Fq,JWo),e(ov,YWo),e(Zd,KWo),e(Zd,rv),e(rv,wfe),e(wfe,ZWo),e(rv,eQo),e(rv,Cq),e(Cq,oQo),e(rv,rQo),e(oo,tQo),e(oo,tv),e(tv,aQo),e(tv,Afe),e(Afe,nQo),e(tv,sQo),e(tv,Lfe),e(Lfe,lQo),e(oo,iQo),e(oo,Bfe),e(Bfe,dQo),e(oo,cQo),g(h6,oo,null),b(c,cRe,u),b(c,ec,u),e(ec,av),e(av,xfe),g(p6,xfe,null),e(ec,fQo),e(ec,kfe),e(kfe,mQo),b(c,fRe,u),b(c,pr,u),g(_6,pr,null),e(pr,gQo),e(pr,oc),e(oc,hQo),e(oc,Rfe),e(Rfe,pQo),e(oc,_Qo),e(oc,Sfe),e(Sfe,uQo),e(oc,bQo),e(pr,vQo),e(pr,u6),e(u6,TQo),e(u6,Pfe),e(Pfe,FQo),e(u6,CQo),e(pr,MQo),e(pr,dt),g(b6,dt,null),e(dt,EQo),e(dt,$fe),e($fe,yQo),e(dt,wQo),e(dt,rc),e(rc,AQo),e(rc,Ife),e(Ife,LQo),e(rc,BQo),e(rc,Dfe),e(Dfe,xQo),e(rc,kQo),e(dt,RQo),e(dt,Nfe),e(Nfe,SQo),e(dt,PQo),g(v6,dt,null),e(pr,$Qo),e(pr,ro),g(T6,ro,null),e(ro,IQo),e(ro,jfe),e(jfe,DQo),e(ro,NQo),e(ro,mn),e(mn,jQo),e(mn,qfe),e(qfe,qQo),e(mn,GQo),e(mn,Gfe),e(Gfe,OQo),e(mn,XQo),e(mn,Ofe),e(Ofe,VQo),e(mn,zQo),e(ro,WQo),e(ro,Xfe),e(Xfe,nv),e(nv,Vfe),e(Vfe,QQo),e(nv,HQo),e(nv,Mq),e(Mq,UQo),e(nv,JQo),e(ro,YQo),e(ro,sv),e(sv,KQo),e(sv,zfe),e(zfe,ZQo),e(sv,eHo),e(sv,Wfe),e(Wfe,oHo),e(ro,rHo),e(ro,Qfe),e(Qfe,tHo),e(ro,aHo),g(F6,ro,null),b(c,mRe,u),b(c,tc,u),e(tc,lv),e(lv,Hfe),g(C6,Hfe,null),e(tc,nHo),e(tc,Ufe),e(Ufe,sHo),b(c,gRe,u),b(c,_r,u),g(M6,_r,null),e(_r,lHo),e(_r,ac),e(ac,iHo),e(ac,Jfe),e(Jfe,dHo),e(ac,cHo),e(ac,Yfe),e(Yfe,fHo),e(ac,mHo),e(_r,gHo),e(_r,E6),e(E6,hHo),e(E6,Kfe),e(Kfe,pHo),e(E6,_Ho),e(_r,uHo),e(_r,ct),g(y6,ct,null),e(ct,bHo),e(ct,Zfe),e(Zfe,vHo),e(ct,THo),e(ct,nc),e(nc,FHo),e(nc,eme),e(eme,CHo),e(nc,MHo),e(nc,ome),e(ome,EHo),e(nc,yHo),e(ct,wHo),e(ct,rme),e(rme,AHo),e(ct,LHo),g(w6,ct,null),e(_r,BHo),e(_r,to),g(A6,to,null),e(to,xHo),e(to,tme),e(tme,kHo),e(to,RHo),e(to,gn),e(gn,SHo),e(gn,ame),e(ame,PHo),e(gn,$Ho),e(gn,nme),e(nme,IHo),e(gn,DHo),e(gn,sme),e(sme,NHo),e(gn,jHo),e(to,qHo),e(to,lme),e(lme,iv),e(iv,ime),e(ime,GHo),e(iv,OHo),e(iv,Eq),e(Eq,XHo),e(iv,VHo),e(to,zHo),e(to,dv),e(dv,WHo),e(dv,dme),e(dme,QHo),e(dv,HHo),e(dv,cme),e(cme,UHo),e(to,JHo),e(to,fme),e(fme,YHo),e(to,KHo),g(L6,to,null),b(c,hRe,u),b(c,sc,u),e(sc,cv),e(cv,mme),g(B6,mme,null),e(sc,ZHo),e(sc,gme),e(gme,eUo),b(c,pRe,u),b(c,ur,u),g(x6,ur,null),e(ur,oUo),e(ur,lc),e(lc,rUo),e(lc,hme),e(hme,tUo),e(lc,aUo),e(lc,pme),e(pme,nUo),e(lc,sUo),e(ur,lUo),e(ur,k6),e(k6,iUo),e(k6,_me),e(_me,dUo),e(k6,cUo),e(ur,fUo),e(ur,ft),g(R6,ft,null),e(ft,mUo),e(ft,ume),e(ume,gUo),e(ft,hUo),e(ft,ic),e(ic,pUo),e(ic,bme),e(bme,_Uo),e(ic,uUo),e(ic,vme),e(vme,bUo),e(ic,vUo),e(ft,TUo),e(ft,Tme),e(Tme,FUo),e(ft,CUo),g(S6,ft,null),e(ur,MUo),e(ur,ao),g(P6,ao,null),e(ao,EUo),e(ao,Fme),e(Fme,yUo),e(ao,wUo),e(ao,hn),e(hn,AUo),e(hn,Cme),e(Cme,LUo),e(hn,BUo),e(hn,Mme),e(Mme,xUo),e(hn,kUo),e(hn,Eme),e(Eme,RUo),e(hn,SUo),e(ao,PUo),e(ao,dc),e(dc,fv),e(fv,yme),e(yme,$Uo),e(fv,IUo),e(fv,yq),e(yq,DUo),e(fv,NUo),e(dc,jUo),e(dc,mv),e(mv,wme),e(wme,qUo),e(mv,GUo),e(mv,wq),e(wq,OUo),e(mv,XUo),e(dc,VUo),e(dc,gv),e(gv,Ame),e(Ame,zUo),e(gv,WUo),e(gv,Aq),e(Aq,QUo),e(gv,HUo),e(ao,UUo),e(ao,hv),e(hv,JUo),e(hv,Lme),e(Lme,YUo),e(hv,KUo),e(hv,Bme),e(Bme,ZUo),e(ao,eJo),e(ao,xme),e(xme,oJo),e(ao,rJo),g($6,ao,null),b(c,_Re,u),b(c,cc,u),e(cc,pv),e(pv,kme),g(I6,kme,null),e(cc,tJo),e(cc,Rme),e(Rme,aJo),b(c,uRe,u),b(c,br,u),g(D6,br,null),e(br,nJo),e(br,fc),e(fc,sJo),e(fc,Sme),e(Sme,lJo),e(fc,iJo),e(fc,Pme),e(Pme,dJo),e(fc,cJo),e(br,fJo),e(br,N6),e(N6,mJo),e(N6,$me),e($me,gJo),e(N6,hJo),e(br,pJo),e(br,mt),g(j6,mt,null),e(mt,_Jo),e(mt,Ime),e(Ime,uJo),e(mt,bJo),e(mt,mc),e(mc,vJo),e(mc,Dme),e(Dme,TJo),e(mc,FJo),e(mc,Nme),e(Nme,CJo),e(mc,MJo),e(mt,EJo),e(mt,jme),e(jme,yJo),e(mt,wJo),g(q6,mt,null),e(br,AJo),e(br,no),g(G6,no,null),e(no,LJo),e(no,qme),e(qme,BJo),e(no,xJo),e(no,pn),e(pn,kJo),e(pn,Gme),e(Gme,RJo),e(pn,SJo),e(pn,Ome),e(Ome,PJo),e(pn,$Jo),e(pn,Xme),e(Xme,IJo),e(pn,DJo),e(no,NJo),e(no,Vme),e(Vme,_v),e(_v,zme),e(zme,jJo),e(_v,qJo),e(_v,Lq),e(Lq,GJo),e(_v,OJo),e(no,XJo),e(no,uv),e(uv,VJo),e(uv,Wme),e(Wme,zJo),e(uv,WJo),e(uv,Qme),e(Qme,QJo),e(no,HJo),e(no,Hme),e(Hme,UJo),e(no,JJo),g(O6,no,null),b(c,bRe,u),b(c,gc,u),e(gc,bv),e(bv,Ume),g(X6,Ume,null),e(gc,YJo),e(gc,Jme),e(Jme,KJo),b(c,vRe,u),b(c,vr,u),g(V6,vr,null),e(vr,ZJo),e(vr,hc),e(hc,eYo),e(hc,Yme),e(Yme,oYo),e(hc,rYo),e(hc,Kme),e(Kme,tYo),e(hc,aYo),e(vr,nYo),e(vr,z6),e(z6,sYo),e(z6,Zme),e(Zme,lYo),e(z6,iYo),e(vr,dYo),e(vr,gt),g(W6,gt,null),e(gt,cYo),e(gt,ege),e(ege,fYo),e(gt,mYo),e(gt,pc),e(pc,gYo),e(pc,oge),e(oge,hYo),e(pc,pYo),e(pc,rge),e(rge,_Yo),e(pc,uYo),e(gt,bYo),e(gt,tge),e(tge,vYo),e(gt,TYo),g(Q6,gt,null),e(vr,FYo),e(vr,ho),g(H6,ho,null),e(ho,CYo),e(ho,age),e(age,MYo),e(ho,EYo),e(ho,_n),e(_n,yYo),e(_n,nge),e(nge,wYo),e(_n,AYo),e(_n,sge),e(sge,LYo),e(_n,BYo),e(_n,lge),e(lge,xYo),e(_n,kYo),e(ho,RYo),e(ho,B),e(B,vv),e(vv,ige),e(ige,SYo),e(vv,PYo),e(vv,Bq),e(Bq,$Yo),e(vv,IYo),e(B,DYo),e(B,Tv),e(Tv,dge),e(dge,NYo),e(Tv,jYo),e(Tv,xq),e(xq,qYo),e(Tv,GYo),e(B,OYo),e(B,Fv),e(Fv,cge),e(cge,XYo),e(Fv,VYo),e(Fv,kq),e(kq,zYo),e(Fv,WYo),e(B,QYo),e(B,Cv),e(Cv,fge),e(fge,HYo),e(Cv,UYo),e(Cv,Rq),e(Rq,JYo),e(Cv,YYo),e(B,KYo),e(B,Mv),e(Mv,mge),e(mge,ZYo),e(Mv,eKo),e(Mv,Sq),e(Sq,oKo),e(Mv,rKo),e(B,tKo),e(B,Ev),e(Ev,gge),e(gge,aKo),e(Ev,nKo),e(Ev,Pq),e(Pq,sKo),e(Ev,lKo),e(B,iKo),e(B,yv),e(yv,hge),e(hge,dKo),e(yv,cKo),e(yv,$q),e($q,fKo),e(yv,mKo),e(B,gKo),e(B,wv),e(wv,pge),e(pge,hKo),e(wv,pKo),e(wv,Iq),e(Iq,_Ko),e(wv,uKo),e(B,bKo),e(B,Av),e(Av,_ge),e(_ge,vKo),e(Av,TKo),e(Av,Dq),e(Dq,FKo),e(Av,CKo),e(B,MKo),e(B,Lv),e(Lv,uge),e(uge,EKo),e(Lv,yKo),e(Lv,Nq),e(Nq,wKo),e(Lv,AKo),e(B,LKo),e(B,Bv),e(Bv,bge),e(bge,BKo),e(Bv,xKo),e(Bv,jq),e(jq,kKo),e(Bv,RKo),e(B,SKo),e(B,xv),e(xv,vge),e(vge,PKo),e(xv,$Ko),e(xv,qq),e(qq,IKo),e(xv,DKo),e(B,NKo),e(B,kv),e(kv,Tge),e(Tge,jKo),e(kv,qKo),e(kv,Gq),e(Gq,GKo),e(kv,OKo),e(B,XKo),e(B,Rv),e(Rv,Fge),e(Fge,VKo),e(Rv,zKo),e(Rv,Oq),e(Oq,WKo),e(Rv,QKo),e(B,HKo),e(B,Sv),e(Sv,Cge),e(Cge,UKo),e(Sv,JKo),e(Sv,Xq),e(Xq,YKo),e(Sv,KKo),e(B,ZKo),e(B,Pv),e(Pv,Mge),e(Mge,eZo),e(Pv,oZo),e(Pv,Vq),e(Vq,rZo),e(Pv,tZo),e(B,aZo),e(B,Gs),e(Gs,Ege),e(Ege,nZo),e(Gs,sZo),e(Gs,zq),e(zq,lZo),e(Gs,iZo),e(Gs,Wq),e(Wq,dZo),e(Gs,cZo),e(B,fZo),e(B,$v),e($v,yge),e(yge,mZo),e($v,gZo),e($v,Qq),e(Qq,hZo),e($v,pZo),e(B,_Zo),e(B,Iv),e(Iv,wge),e(wge,uZo),e(Iv,bZo),e(Iv,Hq),e(Hq,vZo),e(Iv,TZo),e(B,FZo),e(B,Dv),e(Dv,Age),e(Age,CZo),e(Dv,MZo),e(Dv,Uq),e(Uq,EZo),e(Dv,yZo),e(B,wZo),e(B,Nv),e(Nv,Lge),e(Lge,AZo),e(Nv,LZo),e(Nv,Jq),e(Jq,BZo),e(Nv,xZo),e(B,kZo),e(B,jv),e(jv,Bge),e(Bge,RZo),e(jv,SZo),e(jv,Yq),e(Yq,PZo),e(jv,$Zo),e(B,IZo),e(B,qv),e(qv,xge),e(xge,DZo),e(qv,NZo),e(qv,Kq),e(Kq,jZo),e(qv,qZo),e(B,GZo),e(B,Gv),e(Gv,kge),e(kge,OZo),e(Gv,XZo),e(Gv,Zq),e(Zq,VZo),e(Gv,zZo),e(B,WZo),e(B,Ov),e(Ov,Rge),e(Rge,QZo),e(Ov,HZo),e(Ov,eG),e(eG,UZo),e(Ov,JZo),e(B,YZo),e(B,Xv),e(Xv,Sge),e(Sge,KZo),e(Xv,ZZo),e(Xv,oG),e(oG,eer),e(Xv,oer),e(B,rer),e(B,Vv),e(Vv,Pge),e(Pge,ter),e(Vv,aer),e(Vv,rG),e(rG,ner),e(Vv,ser),e(B,ler),e(B,zv),e(zv,$ge),e($ge,ier),e(zv,der),e(zv,tG),e(tG,cer),e(zv,fer),e(B,mer),e(B,Wv),e(Wv,Ige),e(Ige,ger),e(Wv,her),e(Wv,aG),e(aG,per),e(Wv,_er),e(B,uer),e(B,Qv),e(Qv,Dge),e(Dge,ber),e(Qv,ver),e(Qv,nG),e(nG,Ter),e(Qv,Fer),e(B,Cer),e(B,Hv),e(Hv,Nge),e(Nge,Mer),e(Hv,Eer),e(Hv,sG),e(sG,yer),e(Hv,wer),e(B,Aer),e(B,Uv),e(Uv,jge),e(jge,Ler),e(Uv,Ber),e(Uv,lG),e(lG,xer),e(Uv,ker),e(B,Rer),e(B,Jv),e(Jv,qge),e(qge,Ser),e(Jv,Per),e(Jv,iG),e(iG,$er),e(Jv,Ier),e(B,Der),e(B,Yv),e(Yv,Gge),e(Gge,Ner),e(Yv,jer),e(Yv,dG),e(dG,qer),e(Yv,Ger),e(B,Oer),e(B,Kv),e(Kv,Oge),e(Oge,Xer),e(Kv,Ver),e(Kv,cG),e(cG,zer),e(Kv,Wer),e(B,Qer),e(B,Zv),e(Zv,Xge),e(Xge,Her),e(Zv,Uer),e(Zv,fG),e(fG,Jer),e(Zv,Yer),e(B,Ker),e(B,eT),e(eT,Vge),e(Vge,Zer),e(eT,eor),e(eT,mG),e(mG,oor),e(eT,ror),e(B,tor),e(B,oT),e(oT,zge),e(zge,aor),e(oT,nor),e(oT,gG),e(gG,sor),e(oT,lor),e(B,ior),e(B,rT),e(rT,Wge),e(Wge,dor),e(rT,cor),e(rT,hG),e(hG,mor),e(rT,gor),e(B,hor),e(B,tT),e(tT,Qge),e(Qge,por),e(tT,_or),e(tT,pG),e(pG,uor),e(tT,bor),e(B,vor),e(B,aT),e(aT,Hge),e(Hge,Tor),e(aT,For),e(aT,_G),e(_G,Cor),e(aT,Mor),e(B,Eor),e(B,nT),e(nT,Uge),e(Uge,yor),e(nT,wor),e(nT,uG),e(uG,Aor),e(nT,Lor),e(ho,Bor),e(ho,Jge),e(Jge,xor),e(ho,kor),g(U6,ho,null),b(c,TRe,u),b(c,_c,u),e(_c,sT),e(sT,Yge),g(J6,Yge,null),e(_c,Ror),e(_c,Kge),e(Kge,Sor),b(c,FRe,u),b(c,Tr,u),g(Y6,Tr,null),e(Tr,Por),e(Tr,uc),e(uc,$or),e(uc,Zge),e(Zge,Ior),e(uc,Dor),e(uc,ehe),e(ehe,Nor),e(uc,jor),e(Tr,qor),e(Tr,K6),e(K6,Gor),e(K6,ohe),e(ohe,Oor),e(K6,Xor),e(Tr,Vor),e(Tr,ht),g(Z6,ht,null),e(ht,zor),e(ht,rhe),e(rhe,Wor),e(ht,Qor),e(ht,bc),e(bc,Hor),e(bc,the),e(the,Uor),e(bc,Jor),e(bc,ahe),e(ahe,Yor),e(bc,Kor),e(ht,Zor),e(ht,nhe),e(nhe,err),e(ht,orr),g(eA,ht,null),e(Tr,rrr),e(Tr,po),g(oA,po,null),e(po,trr),e(po,she),e(she,arr),e(po,nrr),e(po,un),e(un,srr),e(un,lhe),e(lhe,lrr),e(un,irr),e(un,ihe),e(ihe,drr),e(un,crr),e(un,dhe),e(dhe,frr),e(un,mrr),e(po,grr),e(po,H),e(H,lT),e(lT,che),e(che,hrr),e(lT,prr),e(lT,bG),e(bG,_rr),e(lT,urr),e(H,brr),e(H,iT),e(iT,fhe),e(fhe,vrr),e(iT,Trr),e(iT,vG),e(vG,Frr),e(iT,Crr),e(H,Mrr),e(H,dT),e(dT,mhe),e(mhe,Err),e(dT,yrr),e(dT,TG),e(TG,wrr),e(dT,Arr),e(H,Lrr),e(H,cT),e(cT,ghe),e(ghe,Brr),e(cT,xrr),e(cT,FG),e(FG,krr),e(cT,Rrr),e(H,Srr),e(H,fT),e(fT,hhe),e(hhe,Prr),e(fT,$rr),e(fT,CG),e(CG,Irr),e(fT,Drr),e(H,Nrr),e(H,mT),e(mT,phe),e(phe,jrr),e(mT,qrr),e(mT,MG),e(MG,Grr),e(mT,Orr),e(H,Xrr),e(H,gT),e(gT,_he),e(_he,Vrr),e(gT,zrr),e(gT,EG),e(EG,Wrr),e(gT,Qrr),e(H,Hrr),e(H,hT),e(hT,uhe),e(uhe,Urr),e(hT,Jrr),e(hT,yG),e(yG,Yrr),e(hT,Krr),e(H,Zrr),e(H,pT),e(pT,bhe),e(bhe,etr),e(pT,otr),e(pT,wG),e(wG,rtr),e(pT,ttr),e(H,atr),e(H,_T),e(_T,vhe),e(vhe,ntr),e(_T,str),e(_T,AG),e(AG,ltr),e(_T,itr),e(H,dtr),e(H,uT),e(uT,The),e(The,ctr),e(uT,ftr),e(uT,LG),e(LG,mtr),e(uT,gtr),e(H,htr),e(H,bT),e(bT,Fhe),e(Fhe,ptr),e(bT,_tr),e(bT,BG),e(BG,utr),e(bT,btr),e(H,vtr),e(H,vT),e(vT,Che),e(Che,Ttr),e(vT,Ftr),e(vT,xG),e(xG,Ctr),e(vT,Mtr),e(H,Etr),e(H,TT),e(TT,Mhe),e(Mhe,ytr),e(TT,wtr),e(TT,kG),e(kG,Atr),e(TT,Ltr),e(H,Btr),e(H,FT),e(FT,Ehe),e(Ehe,xtr),e(FT,ktr),e(FT,RG),e(RG,Rtr),e(FT,Str),e(H,Ptr),e(H,CT),e(CT,yhe),e(yhe,$tr),e(CT,Itr),e(CT,SG),e(SG,Dtr),e(CT,Ntr),e(H,jtr),e(H,MT),e(MT,whe),e(whe,qtr),e(MT,Gtr),e(MT,PG),e(PG,Otr),e(MT,Xtr),e(H,Vtr),e(H,ET),e(ET,Ahe),e(Ahe,ztr),e(ET,Wtr),e(ET,$G),e($G,Qtr),e(ET,Htr),e(H,Utr),e(H,yT),e(yT,Lhe),e(Lhe,Jtr),e(yT,Ytr),e(yT,IG),e(IG,Ktr),e(yT,Ztr),e(H,ear),e(H,wT),e(wT,Bhe),e(Bhe,oar),e(wT,rar),e(wT,DG),e(DG,tar),e(wT,aar),e(H,nar),e(H,AT),e(AT,xhe),e(xhe,sar),e(AT,lar),e(AT,NG),e(NG,iar),e(AT,dar),e(H,car),e(H,LT),e(LT,khe),e(khe,far),e(LT,mar),e(LT,jG),e(jG,gar),e(LT,har),e(po,par),e(po,Rhe),e(Rhe,_ar),e(po,uar),g(rA,po,null),b(c,CRe,u),b(c,vc,u),e(vc,BT),e(BT,She),g(tA,She,null),e(vc,bar),e(vc,Phe),e(Phe,Tar),b(c,MRe,u),b(c,Fr,u),g(aA,Fr,null),e(Fr,Far),e(Fr,Tc),e(Tc,Car),e(Tc,$he),e($he,Mar),e(Tc,Ear),e(Tc,Ihe),e(Ihe,yar),e(Tc,war),e(Fr,Aar),e(Fr,nA),e(nA,Lar),e(nA,Dhe),e(Dhe,Bar),e(nA,xar),e(Fr,kar),e(Fr,pt),g(sA,pt,null),e(pt,Rar),e(pt,Nhe),e(Nhe,Sar),e(pt,Par),e(pt,Fc),e(Fc,$ar),e(Fc,jhe),e(jhe,Iar),e(Fc,Dar),e(Fc,qhe),e(qhe,Nar),e(Fc,jar),e(pt,qar),e(pt,Ghe),e(Ghe,Gar),e(pt,Oar),g(lA,pt,null),e(Fr,Xar),e(Fr,_o),g(iA,_o,null),e(_o,Var),e(_o,Ohe),e(Ohe,zar),e(_o,War),e(_o,bn),e(bn,Qar),e(bn,Xhe),e(Xhe,Har),e(bn,Uar),e(bn,Vhe),e(Vhe,Jar),e(bn,Yar),e(bn,zhe),e(zhe,Kar),e(bn,Zar),e(_o,enr),e(_o,ge),e(ge,xT),e(xT,Whe),e(Whe,onr),e(xT,rnr),e(xT,qG),e(qG,tnr),e(xT,anr),e(ge,nnr),e(ge,kT),e(kT,Qhe),e(Qhe,snr),e(kT,lnr),e(kT,GG),e(GG,inr),e(kT,dnr),e(ge,cnr),e(ge,RT),e(RT,Hhe),e(Hhe,fnr),e(RT,mnr),e(RT,OG),e(OG,gnr),e(RT,hnr),e(ge,pnr),e(ge,ST),e(ST,Uhe),e(Uhe,_nr),e(ST,unr),e(ST,XG),e(XG,bnr),e(ST,vnr),e(ge,Tnr),e(ge,PT),e(PT,Jhe),e(Jhe,Fnr),e(PT,Cnr),e(PT,VG),e(VG,Mnr),e(PT,Enr),e(ge,ynr),e(ge,$T),e($T,Yhe),e(Yhe,wnr),e($T,Anr),e($T,zG),e(zG,Lnr),e($T,Bnr),e(ge,xnr),e(ge,IT),e(IT,Khe),e(Khe,knr),e(IT,Rnr),e(IT,WG),e(WG,Snr),e(IT,Pnr),e(ge,$nr),e(ge,DT),e(DT,Zhe),e(Zhe,Inr),e(DT,Dnr),e(DT,QG),e(QG,Nnr),e(DT,jnr),e(ge,qnr),e(ge,NT),e(NT,epe),e(epe,Gnr),e(NT,Onr),e(NT,HG),e(HG,Xnr),e(NT,Vnr),e(ge,znr),e(ge,jT),e(jT,ope),e(ope,Wnr),e(jT,Qnr),e(jT,UG),e(UG,Hnr),e(jT,Unr),e(ge,Jnr),e(ge,qT),e(qT,rpe),e(rpe,Ynr),e(qT,Knr),e(qT,JG),e(JG,Znr),e(qT,esr),e(_o,osr),e(_o,tpe),e(tpe,rsr),e(_o,tsr),g(dA,_o,null),b(c,ERe,u),b(c,Cc,u),e(Cc,GT),e(GT,ape),g(cA,ape,null),e(Cc,asr),e(Cc,npe),e(npe,nsr),b(c,yRe,u),b(c,Cr,u),g(fA,Cr,null),e(Cr,ssr),e(Cr,Mc),e(Mc,lsr),e(Mc,spe),e(spe,isr),e(Mc,dsr),e(Mc,lpe),e(lpe,csr),e(Mc,fsr),e(Cr,msr),e(Cr,mA),e(mA,gsr),e(mA,ipe),e(ipe,hsr),e(mA,psr),e(Cr,_sr),e(Cr,_t),g(gA,_t,null),e(_t,usr),e(_t,dpe),e(dpe,bsr),e(_t,vsr),e(_t,Ec),e(Ec,Tsr),e(Ec,cpe),e(cpe,Fsr),e(Ec,Csr),e(Ec,fpe),e(fpe,Msr),e(Ec,Esr),e(_t,ysr),e(_t,mpe),e(mpe,wsr),e(_t,Asr),g(hA,_t,null),e(Cr,Lsr),e(Cr,uo),g(pA,uo,null),e(uo,Bsr),e(uo,gpe),e(gpe,xsr),e(uo,ksr),e(uo,vn),e(vn,Rsr),e(vn,hpe),e(hpe,Ssr),e(vn,Psr),e(vn,ppe),e(ppe,$sr),e(vn,Isr),e(vn,_pe),e(_pe,Dsr),e(vn,Nsr),e(uo,jsr),e(uo,_A),e(_A,OT),e(OT,upe),e(upe,qsr),e(OT,Gsr),e(OT,YG),e(YG,Osr),e(OT,Xsr),e(_A,Vsr),e(_A,XT),e(XT,bpe),e(bpe,zsr),e(XT,Wsr),e(XT,KG),e(KG,Qsr),e(XT,Hsr),e(uo,Usr),e(uo,vpe),e(vpe,Jsr),e(uo,Ysr),g(uA,uo,null),b(c,wRe,u),b(c,yc,u),e(yc,VT),e(VT,Tpe),g(bA,Tpe,null),e(yc,Ksr),e(yc,Fpe),e(Fpe,Zsr),b(c,ARe,u),b(c,Mr,u),g(vA,Mr,null),e(Mr,elr),e(Mr,wc),e(wc,olr),e(wc,Cpe),e(Cpe,rlr),e(wc,tlr),e(wc,Mpe),e(Mpe,alr),e(wc,nlr),e(Mr,slr),e(Mr,TA),e(TA,llr),e(TA,Epe),e(Epe,ilr),e(TA,dlr),e(Mr,clr),e(Mr,ut),g(FA,ut,null),e(ut,flr),e(ut,ype),e(ype,mlr),e(ut,glr),e(ut,Ac),e(Ac,hlr),e(Ac,wpe),e(wpe,plr),e(Ac,_lr),e(Ac,Ape),e(Ape,ulr),e(Ac,blr),e(ut,vlr),e(ut,Lpe),e(Lpe,Tlr),e(ut,Flr),g(CA,ut,null),e(Mr,Clr),e(Mr,bo),g(MA,bo,null),e(bo,Mlr),e(bo,Bpe),e(Bpe,Elr),e(bo,ylr),e(bo,Tn),e(Tn,wlr),e(Tn,xpe),e(xpe,Alr),e(Tn,Llr),e(Tn,kpe),e(kpe,Blr),e(Tn,xlr),e(Tn,Rpe),e(Rpe,klr),e(Tn,Rlr),e(bo,Slr),e(bo,J),e(J,zT),e(zT,Spe),e(Spe,Plr),e(zT,$lr),e(zT,ZG),e(ZG,Ilr),e(zT,Dlr),e(J,Nlr),e(J,WT),e(WT,Ppe),e(Ppe,jlr),e(WT,qlr),e(WT,eO),e(eO,Glr),e(WT,Olr),e(J,Xlr),e(J,QT),e(QT,$pe),e($pe,Vlr),e(QT,zlr),e(QT,oO),e(oO,Wlr),e(QT,Qlr),e(J,Hlr),e(J,HT),e(HT,Ipe),e(Ipe,Ulr),e(HT,Jlr),e(HT,rO),e(rO,Ylr),e(HT,Klr),e(J,Zlr),e(J,UT),e(UT,Dpe),e(Dpe,eir),e(UT,oir),e(UT,tO),e(tO,rir),e(UT,tir),e(J,air),e(J,JT),e(JT,Npe),e(Npe,nir),e(JT,sir),e(JT,aO),e(aO,lir),e(JT,iir),e(J,dir),e(J,YT),e(YT,jpe),e(jpe,cir),e(YT,fir),e(YT,nO),e(nO,mir),e(YT,gir),e(J,hir),e(J,KT),e(KT,qpe),e(qpe,pir),e(KT,_ir),e(KT,sO),e(sO,uir),e(KT,bir),e(J,vir),e(J,ZT),e(ZT,Gpe),e(Gpe,Tir),e(ZT,Fir),e(ZT,lO),e(lO,Cir),e(ZT,Mir),e(J,Eir),e(J,eF),e(eF,Ope),e(Ope,yir),e(eF,wir),e(eF,iO),e(iO,Air),e(eF,Lir),e(J,Bir),e(J,oF),e(oF,Xpe),e(Xpe,xir),e(oF,kir),e(oF,dO),e(dO,Rir),e(oF,Sir),e(J,Pir),e(J,rF),e(rF,Vpe),e(Vpe,$ir),e(rF,Iir),e(rF,cO),e(cO,Dir),e(rF,Nir),e(J,jir),e(J,tF),e(tF,zpe),e(zpe,qir),e(tF,Gir),e(tF,fO),e(fO,Oir),e(tF,Xir),e(J,Vir),e(J,aF),e(aF,Wpe),e(Wpe,zir),e(aF,Wir),e(aF,mO),e(mO,Qir),e(aF,Hir),e(J,Uir),e(J,nF),e(nF,Qpe),e(Qpe,Jir),e(nF,Yir),e(nF,gO),e(gO,Kir),e(nF,Zir),e(J,edr),e(J,sF),e(sF,Hpe),e(Hpe,odr),e(sF,rdr),e(sF,hO),e(hO,tdr),e(sF,adr),e(J,ndr),e(J,lF),e(lF,Upe),e(Upe,sdr),e(lF,ldr),e(lF,pO),e(pO,idr),e(lF,ddr),e(J,cdr),e(J,iF),e(iF,Jpe),e(Jpe,fdr),e(iF,mdr),e(iF,_O),e(_O,gdr),e(iF,hdr),e(J,pdr),e(J,dF),e(dF,Ype),e(Ype,_dr),e(dF,udr),e(dF,uO),e(uO,bdr),e(dF,vdr),e(J,Tdr),e(J,cF),e(cF,Kpe),e(Kpe,Fdr),e(cF,Cdr),e(cF,bO),e(bO,Mdr),e(cF,Edr),e(bo,ydr),e(bo,Zpe),e(Zpe,wdr),e(bo,Adr),g(EA,bo,null),b(c,LRe,u),b(c,Lc,u),e(Lc,fF),e(fF,e_e),g(yA,e_e,null),e(Lc,Ldr),e(Lc,o_e),e(o_e,Bdr),b(c,BRe,u),b(c,Er,u),g(wA,Er,null),e(Er,xdr),e(Er,Bc),e(Bc,kdr),e(Bc,r_e),e(r_e,Rdr),e(Bc,Sdr),e(Bc,t_e),e(t_e,Pdr),e(Bc,$dr),e(Er,Idr),e(Er,AA),e(AA,Ddr),e(AA,a_e),e(a_e,Ndr),e(AA,jdr),e(Er,qdr),e(Er,bt),g(LA,bt,null),e(bt,Gdr),e(bt,n_e),e(n_e,Odr),e(bt,Xdr),e(bt,xc),e(xc,Vdr),e(xc,s_e),e(s_e,zdr),e(xc,Wdr),e(xc,l_e),e(l_e,Qdr),e(xc,Hdr),e(bt,Udr),e(bt,i_e),e(i_e,Jdr),e(bt,Ydr),g(BA,bt,null),e(Er,Kdr),e(Er,vo),g(xA,vo,null),e(vo,Zdr),e(vo,d_e),e(d_e,ecr),e(vo,ocr),e(vo,Fn),e(Fn,rcr),e(Fn,c_e),e(c_e,tcr),e(Fn,acr),e(Fn,f_e),e(f_e,ncr),e(Fn,scr),e(Fn,m_e),e(m_e,lcr),e(Fn,icr),e(vo,dcr),e(vo,_e),e(_e,mF),e(mF,g_e),e(g_e,ccr),e(mF,fcr),e(mF,vO),e(vO,mcr),e(mF,gcr),e(_e,hcr),e(_e,gF),e(gF,h_e),e(h_e,pcr),e(gF,_cr),e(gF,TO),e(TO,ucr),e(gF,bcr),e(_e,vcr),e(_e,hF),e(hF,p_e),e(p_e,Tcr),e(hF,Fcr),e(hF,FO),e(FO,Ccr),e(hF,Mcr),e(_e,Ecr),e(_e,pF),e(pF,__e),e(__e,ycr),e(pF,wcr),e(pF,CO),e(CO,Acr),e(pF,Lcr),e(_e,Bcr),e(_e,_F),e(_F,u_e),e(u_e,xcr),e(_F,kcr),e(_F,MO),e(MO,Rcr),e(_F,Scr),e(_e,Pcr),e(_e,uF),e(uF,b_e),e(b_e,$cr),e(uF,Icr),e(uF,EO),e(EO,Dcr),e(uF,Ncr),e(_e,jcr),e(_e,bF),e(bF,v_e),e(v_e,qcr),e(bF,Gcr),e(bF,yO),e(yO,Ocr),e(bF,Xcr),e(_e,Vcr),e(_e,vF),e(vF,T_e),e(T_e,zcr),e(vF,Wcr),e(vF,wO),e(wO,Qcr),e(vF,Hcr),e(_e,Ucr),e(_e,TF),e(TF,F_e),e(F_e,Jcr),e(TF,Ycr),e(TF,AO),e(AO,Kcr),e(TF,Zcr),e(_e,efr),e(_e,FF),e(FF,C_e),e(C_e,ofr),e(FF,rfr),e(FF,LO),e(LO,tfr),e(FF,afr),e(vo,nfr),e(vo,M_e),e(M_e,sfr),e(vo,lfr),g(kA,vo,null),b(c,xRe,u),b(c,kc,u),e(kc,CF),e(CF,E_e),g(RA,E_e,null),e(kc,ifr),e(kc,y_e),e(y_e,dfr),b(c,kRe,u),b(c,yr,u),g(SA,yr,null),e(yr,cfr),e(yr,Rc),e(Rc,ffr),e(Rc,w_e),e(w_e,mfr),e(Rc,gfr),e(Rc,A_e),e(A_e,hfr),e(Rc,pfr),e(yr,_fr),e(yr,PA),e(PA,ufr),e(PA,L_e),e(L_e,bfr),e(PA,vfr),e(yr,Tfr),e(yr,vt),g($A,vt,null),e(vt,Ffr),e(vt,B_e),e(B_e,Cfr),e(vt,Mfr),e(vt,Sc),e(Sc,Efr),e(Sc,x_e),e(x_e,yfr),e(Sc,wfr),e(Sc,k_e),e(k_e,Afr),e(Sc,Lfr),e(vt,Bfr),e(vt,R_e),e(R_e,xfr),e(vt,kfr),g(IA,vt,null),e(yr,Rfr),e(yr,To),g(DA,To,null),e(To,Sfr),e(To,S_e),e(S_e,Pfr),e(To,$fr),e(To,Cn),e(Cn,Ifr),e(Cn,P_e),e(P_e,Dfr),e(Cn,Nfr),e(Cn,$_e),e($_e,jfr),e(Cn,qfr),e(Cn,I_e),e(I_e,Gfr),e(Cn,Ofr),e(To,Xfr),e(To,V),e(V,MF),e(MF,D_e),e(D_e,Vfr),e(MF,zfr),e(MF,BO),e(BO,Wfr),e(MF,Qfr),e(V,Hfr),e(V,EF),e(EF,N_e),e(N_e,Ufr),e(EF,Jfr),e(EF,xO),e(xO,Yfr),e(EF,Kfr),e(V,Zfr),e(V,yF),e(yF,j_e),e(j_e,emr),e(yF,omr),e(yF,kO),e(kO,rmr),e(yF,tmr),e(V,amr),e(V,wF),e(wF,q_e),e(q_e,nmr),e(wF,smr),e(wF,RO),e(RO,lmr),e(wF,imr),e(V,dmr),e(V,AF),e(AF,G_e),e(G_e,cmr),e(AF,fmr),e(AF,SO),e(SO,mmr),e(AF,gmr),e(V,hmr),e(V,LF),e(LF,O_e),e(O_e,pmr),e(LF,_mr),e(LF,PO),e(PO,umr),e(LF,bmr),e(V,vmr),e(V,BF),e(BF,X_e),e(X_e,Tmr),e(BF,Fmr),e(BF,$O),e($O,Cmr),e(BF,Mmr),e(V,Emr),e(V,xF),e(xF,V_e),e(V_e,ymr),e(xF,wmr),e(xF,IO),e(IO,Amr),e(xF,Lmr),e(V,Bmr),e(V,kF),e(kF,z_e),e(z_e,xmr),e(kF,kmr),e(kF,DO),e(DO,Rmr),e(kF,Smr),e(V,Pmr),e(V,RF),e(RF,W_e),e(W_e,$mr),e(RF,Imr),e(RF,NO),e(NO,Dmr),e(RF,Nmr),e(V,jmr),e(V,SF),e(SF,Q_e),e(Q_e,qmr),e(SF,Gmr),e(SF,jO),e(jO,Omr),e(SF,Xmr),e(V,Vmr),e(V,PF),e(PF,H_e),e(H_e,zmr),e(PF,Wmr),e(PF,qO),e(qO,Qmr),e(PF,Hmr),e(V,Umr),e(V,$F),e($F,U_e),e(U_e,Jmr),e($F,Ymr),e($F,GO),e(GO,Kmr),e($F,Zmr),e(V,egr),e(V,IF),e(IF,J_e),e(J_e,ogr),e(IF,rgr),e(IF,OO),e(OO,tgr),e(IF,agr),e(V,ngr),e(V,DF),e(DF,Y_e),e(Y_e,sgr),e(DF,lgr),e(DF,XO),e(XO,igr),e(DF,dgr),e(V,cgr),e(V,NF),e(NF,K_e),e(K_e,fgr),e(NF,mgr),e(NF,VO),e(VO,ggr),e(NF,hgr),e(V,pgr),e(V,jF),e(jF,Z_e),e(Z_e,_gr),e(jF,ugr),e(jF,zO),e(zO,bgr),e(jF,vgr),e(V,Tgr),e(V,qF),e(qF,eue),e(eue,Fgr),e(qF,Cgr),e(qF,WO),e(WO,Mgr),e(qF,Egr),e(V,ygr),e(V,GF),e(GF,oue),e(oue,wgr),e(GF,Agr),e(GF,QO),e(QO,Lgr),e(GF,Bgr),e(V,xgr),e(V,OF),e(OF,rue),e(rue,kgr),e(OF,Rgr),e(OF,HO),e(HO,Sgr),e(OF,Pgr),e(V,$gr),e(V,XF),e(XF,tue),e(tue,Igr),e(XF,Dgr),e(XF,UO),e(UO,Ngr),e(XF,jgr),e(V,qgr),e(V,VF),e(VF,aue),e(aue,Ggr),e(VF,Ogr),e(VF,JO),e(JO,Xgr),e(VF,Vgr),e(V,zgr),e(V,zF),e(zF,nue),e(nue,Wgr),e(zF,Qgr),e(zF,YO),e(YO,Hgr),e(zF,Ugr),e(V,Jgr),e(V,WF),e(WF,sue),e(sue,Ygr),e(WF,Kgr),e(WF,KO),e(KO,Zgr),e(WF,ehr),e(V,ohr),e(V,QF),e(QF,lue),e(lue,rhr),e(QF,thr),e(QF,ZO),e(ZO,ahr),e(QF,nhr),e(To,shr),e(To,iue),e(iue,lhr),e(To,ihr),g(NA,To,null),b(c,RRe,u),b(c,Pc,u),e(Pc,HF),e(HF,due),g(jA,due,null),e(Pc,dhr),e(Pc,cue),e(cue,chr),b(c,SRe,u),b(c,wr,u),g(qA,wr,null),e(wr,fhr),e(wr,$c),e($c,mhr),e($c,fue),e(fue,ghr),e($c,hhr),e($c,mue),e(mue,phr),e($c,_hr),e(wr,uhr),e(wr,GA),e(GA,bhr),e(GA,gue),e(gue,vhr),e(GA,Thr),e(wr,Fhr),e(wr,Tt),g(OA,Tt,null),e(Tt,Chr),e(Tt,hue),e(hue,Mhr),e(Tt,Ehr),e(Tt,Ic),e(Ic,yhr),e(Ic,pue),e(pue,whr),e(Ic,Ahr),e(Ic,_ue),e(_ue,Lhr),e(Ic,Bhr),e(Tt,xhr),e(Tt,uue),e(uue,khr),e(Tt,Rhr),g(XA,Tt,null),e(wr,Shr),e(wr,Fo),g(VA,Fo,null),e(Fo,Phr),e(Fo,bue),e(bue,$hr),e(Fo,Ihr),e(Fo,Mn),e(Mn,Dhr),e(Mn,vue),e(vue,Nhr),e(Mn,jhr),e(Mn,Tue),e(Tue,qhr),e(Mn,Ghr),e(Mn,Fue),e(Fue,Ohr),e(Mn,Xhr),e(Fo,Vhr),e(Fo,ae),e(ae,UF),e(UF,Cue),e(Cue,zhr),e(UF,Whr),e(UF,eX),e(eX,Qhr),e(UF,Hhr),e(ae,Uhr),e(ae,JF),e(JF,Mue),e(Mue,Jhr),e(JF,Yhr),e(JF,oX),e(oX,Khr),e(JF,Zhr),e(ae,epr),e(ae,YF),e(YF,Eue),e(Eue,opr),e(YF,rpr),e(YF,rX),e(rX,tpr),e(YF,apr),e(ae,npr),e(ae,KF),e(KF,yue),e(yue,spr),e(KF,lpr),e(KF,tX),e(tX,ipr),e(KF,dpr),e(ae,cpr),e(ae,ZF),e(ZF,wue),e(wue,fpr),e(ZF,mpr),e(ZF,aX),e(aX,gpr),e(ZF,hpr),e(ae,ppr),e(ae,eC),e(eC,Aue),e(Aue,_pr),e(eC,upr),e(eC,nX),e(nX,bpr),e(eC,vpr),e(ae,Tpr),e(ae,oC),e(oC,Lue),e(Lue,Fpr),e(oC,Cpr),e(oC,sX),e(sX,Mpr),e(oC,Epr),e(ae,ypr),e(ae,rC),e(rC,Bue),e(Bue,wpr),e(rC,Apr),e(rC,lX),e(lX,Lpr),e(rC,Bpr),e(ae,xpr),e(ae,tC),e(tC,xue),e(xue,kpr),e(tC,Rpr),e(tC,iX),e(iX,Spr),e(tC,Ppr),e(ae,$pr),e(ae,aC),e(aC,kue),e(kue,Ipr),e(aC,Dpr),e(aC,dX),e(dX,Npr),e(aC,jpr),e(ae,qpr),e(ae,nC),e(nC,Rue),e(Rue,Gpr),e(nC,Opr),e(nC,cX),e(cX,Xpr),e(nC,Vpr),e(ae,zpr),e(ae,sC),e(sC,Sue),e(Sue,Wpr),e(sC,Qpr),e(sC,fX),e(fX,Hpr),e(sC,Upr),e(ae,Jpr),e(ae,lC),e(lC,Pue),e(Pue,Ypr),e(lC,Kpr),e(lC,mX),e(mX,Zpr),e(lC,e_r),e(ae,o_r),e(ae,iC),e(iC,$ue),e($ue,r_r),e(iC,t_r),e(iC,gX),e(gX,a_r),e(iC,n_r),e(ae,s_r),e(ae,dC),e(dC,Iue),e(Iue,l_r),e(dC,i_r),e(dC,hX),e(hX,d_r),e(dC,c_r),e(ae,f_r),e(ae,cC),e(cC,Due),e(Due,m_r),e(cC,g_r),e(cC,pX),e(pX,h_r),e(cC,p_r),e(ae,__r),e(ae,fC),e(fC,Nue),e(Nue,u_r),e(fC,b_r),e(fC,_X),e(_X,v_r),e(fC,T_r),e(Fo,F_r),e(Fo,jue),e(jue,C_r),e(Fo,M_r),g(zA,Fo,null),b(c,PRe,u),b(c,Dc,u),e(Dc,mC),e(mC,que),g(WA,que,null),e(Dc,E_r),e(Dc,Gue),e(Gue,y_r),b(c,$Re,u),b(c,Ar,u),g(QA,Ar,null),e(Ar,w_r),e(Ar,Nc),e(Nc,A_r),e(Nc,Oue),e(Oue,L_r),e(Nc,B_r),e(Nc,Xue),e(Xue,x_r),e(Nc,k_r),e(Ar,R_r),e(Ar,HA),e(HA,S_r),e(HA,Vue),e(Vue,P_r),e(HA,$_r),e(Ar,I_r),e(Ar,Ft),g(UA,Ft,null),e(Ft,D_r),e(Ft,zue),e(zue,N_r),e(Ft,j_r),e(Ft,jc),e(jc,q_r),e(jc,Wue),e(Wue,G_r),e(jc,O_r),e(jc,Que),e(Que,X_r),e(jc,V_r),e(Ft,z_r),e(Ft,Hue),e(Hue,W_r),e(Ft,Q_r),g(JA,Ft,null),e(Ar,H_r),e(Ar,Co),g(YA,Co,null),e(Co,U_r),e(Co,Uue),e(Uue,J_r),e(Co,Y_r),e(Co,En),e(En,K_r),e(En,Jue),e(Jue,Z_r),e(En,eur),e(En,Yue),e(Yue,our),e(En,rur),e(En,Kue),e(Kue,tur),e(En,aur),e(Co,nur),e(Co,Zue),e(Zue,gC),e(gC,e1e),e(e1e,sur),e(gC,lur),e(gC,uX),e(uX,iur),e(gC,dur),e(Co,cur),e(Co,o1e),e(o1e,fur),e(Co,mur),g(KA,Co,null),b(c,IRe,u),b(c,qc,u),e(qc,hC),e(hC,r1e),g(ZA,r1e,null),e(qc,gur),e(qc,t1e),e(t1e,hur),b(c,DRe,u),b(c,Lr,u),g(e0,Lr,null),e(Lr,pur),e(Lr,Gc),e(Gc,_ur),e(Gc,a1e),e(a1e,uur),e(Gc,bur),e(Gc,n1e),e(n1e,vur),e(Gc,Tur),e(Lr,Fur),e(Lr,o0),e(o0,Cur),e(o0,s1e),e(s1e,Mur),e(o0,Eur),e(Lr,yur),e(Lr,Ct),g(r0,Ct,null),e(Ct,wur),e(Ct,l1e),e(l1e,Aur),e(Ct,Lur),e(Ct,Oc),e(Oc,Bur),e(Oc,i1e),e(i1e,xur),e(Oc,kur),e(Oc,d1e),e(d1e,Rur),e(Oc,Sur),e(Ct,Pur),e(Ct,c1e),e(c1e,$ur),e(Ct,Iur),g(t0,Ct,null),e(Lr,Dur),e(Lr,Mo),g(a0,Mo,null),e(Mo,Nur),e(Mo,f1e),e(f1e,jur),e(Mo,qur),e(Mo,yn),e(yn,Gur),e(yn,m1e),e(m1e,Our),e(yn,Xur),e(yn,g1e),e(g1e,Vur),e(yn,zur),e(yn,h1e),e(h1e,Wur),e(yn,Qur),e(Mo,Hur),e(Mo,Y),e(Y,pC),e(pC,p1e),e(p1e,Uur),e(pC,Jur),e(pC,bX),e(bX,Yur),e(pC,Kur),e(Y,Zur),e(Y,_C),e(_C,_1e),e(_1e,e1r),e(_C,o1r),e(_C,vX),e(vX,r1r),e(_C,t1r),e(Y,a1r),e(Y,uC),e(uC,u1e),e(u1e,n1r),e(uC,s1r),e(uC,TX),e(TX,l1r),e(uC,i1r),e(Y,d1r),e(Y,bC),e(bC,b1e),e(b1e,c1r),e(bC,f1r),e(bC,FX),e(FX,m1r),e(bC,g1r),e(Y,h1r),e(Y,vC),e(vC,v1e),e(v1e,p1r),e(vC,_1r),e(vC,CX),e(CX,u1r),e(vC,b1r),e(Y,v1r),e(Y,TC),e(TC,T1e),e(T1e,T1r),e(TC,F1r),e(TC,MX),e(MX,C1r),e(TC,M1r),e(Y,E1r),e(Y,FC),e(FC,F1e),e(F1e,y1r),e(FC,w1r),e(FC,EX),e(EX,A1r),e(FC,L1r),e(Y,B1r),e(Y,CC),e(CC,C1e),e(C1e,x1r),e(CC,k1r),e(CC,yX),e(yX,R1r),e(CC,S1r),e(Y,P1r),e(Y,MC),e(MC,M1e),e(M1e,$1r),e(MC,I1r),e(MC,wX),e(wX,D1r),e(MC,N1r),e(Y,j1r),e(Y,EC),e(EC,E1e),e(E1e,q1r),e(EC,G1r),e(EC,AX),e(AX,O1r),e(EC,X1r),e(Y,V1r),e(Y,yC),e(yC,y1e),e(y1e,z1r),e(yC,W1r),e(yC,LX),e(LX,Q1r),e(yC,H1r),e(Y,U1r),e(Y,wC),e(wC,w1e),e(w1e,J1r),e(wC,Y1r),e(wC,BX),e(BX,K1r),e(wC,Z1r),e(Y,e9r),e(Y,AC),e(AC,A1e),e(A1e,o9r),e(AC,r9r),e(AC,xX),e(xX,t9r),e(AC,a9r),e(Y,n9r),e(Y,LC),e(LC,L1e),e(L1e,s9r),e(LC,l9r),e(LC,kX),e(kX,i9r),e(LC,d9r),e(Y,c9r),e(Y,BC),e(BC,B1e),e(B1e,f9r),e(BC,m9r),e(BC,RX),e(RX,g9r),e(BC,h9r),e(Y,p9r),e(Y,xC),e(xC,x1e),e(x1e,_9r),e(xC,u9r),e(xC,SX),e(SX,b9r),e(xC,v9r),e(Y,T9r),e(Y,kC),e(kC,k1e),e(k1e,F9r),e(kC,C9r),e(kC,PX),e(PX,M9r),e(kC,E9r),e(Y,y9r),e(Y,RC),e(RC,R1e),e(R1e,w9r),e(RC,A9r),e(RC,$X),e($X,L9r),e(RC,B9r),e(Y,x9r),e(Y,SC),e(SC,S1e),e(S1e,k9r),e(SC,R9r),e(SC,IX),e(IX,S9r),e(SC,P9r),e(Y,$9r),e(Y,PC),e(PC,P1e),e(P1e,I9r),e(PC,D9r),e(PC,DX),e(DX,N9r),e(PC,j9r),e(Mo,q9r),e(Mo,$1e),e($1e,G9r),e(Mo,O9r),g(n0,Mo,null),b(c,NRe,u),b(c,Xc,u),e(Xc,$C),e($C,I1e),g(s0,I1e,null),e(Xc,X9r),e(Xc,D1e),e(D1e,V9r),b(c,jRe,u),b(c,Br,u),g(l0,Br,null),e(Br,z9r),e(Br,Vc),e(Vc,W9r),e(Vc,N1e),e(N1e,Q9r),e(Vc,H9r),e(Vc,j1e),e(j1e,U9r),e(Vc,J9r),e(Br,Y9r),e(Br,i0),e(i0,K9r),e(i0,q1e),e(q1e,Z9r),e(i0,ebr),e(Br,obr),e(Br,Mt),g(d0,Mt,null),e(Mt,rbr),e(Mt,G1e),e(G1e,tbr),e(Mt,abr),e(Mt,zc),e(zc,nbr),e(zc,O1e),e(O1e,sbr),e(zc,lbr),e(zc,X1e),e(X1e,ibr),e(zc,dbr),e(Mt,cbr),e(Mt,V1e),e(V1e,fbr),e(Mt,mbr),g(c0,Mt,null),e(Br,gbr),e(Br,Eo),g(f0,Eo,null),e(Eo,hbr),e(Eo,z1e),e(z1e,pbr),e(Eo,_br),e(Eo,wn),e(wn,ubr),e(wn,W1e),e(W1e,bbr),e(wn,vbr),e(wn,Q1e),e(Q1e,Tbr),e(wn,Fbr),e(wn,H1e),e(H1e,Cbr),e(wn,Mbr),e(Eo,Ebr),e(Eo,Z),e(Z,IC),e(IC,U1e),e(U1e,ybr),e(IC,wbr),e(IC,NX),e(NX,Abr),e(IC,Lbr),e(Z,Bbr),e(Z,DC),e(DC,J1e),e(J1e,xbr),e(DC,kbr),e(DC,jX),e(jX,Rbr),e(DC,Sbr),e(Z,Pbr),e(Z,NC),e(NC,Y1e),e(Y1e,$br),e(NC,Ibr),e(NC,qX),e(qX,Dbr),e(NC,Nbr),e(Z,jbr),e(Z,jC),e(jC,K1e),e(K1e,qbr),e(jC,Gbr),e(jC,GX),e(GX,Obr),e(jC,Xbr),e(Z,Vbr),e(Z,qC),e(qC,Z1e),e(Z1e,zbr),e(qC,Wbr),e(qC,OX),e(OX,Qbr),e(qC,Hbr),e(Z,Ubr),e(Z,GC),e(GC,e9e),e(e9e,Jbr),e(GC,Ybr),e(GC,XX),e(XX,Kbr),e(GC,Zbr),e(Z,e5r),e(Z,OC),e(OC,o9e),e(o9e,o5r),e(OC,r5r),e(OC,VX),e(VX,t5r),e(OC,a5r),e(Z,n5r),e(Z,XC),e(XC,r9e),e(r9e,s5r),e(XC,l5r),e(XC,zX),e(zX,i5r),e(XC,d5r),e(Z,c5r),e(Z,VC),e(VC,t9e),e(t9e,f5r),e(VC,m5r),e(VC,WX),e(WX,g5r),e(VC,h5r),e(Z,p5r),e(Z,zC),e(zC,a9e),e(a9e,_5r),e(zC,u5r),e(zC,QX),e(QX,b5r),e(zC,v5r),e(Z,T5r),e(Z,WC),e(WC,n9e),e(n9e,F5r),e(WC,C5r),e(WC,HX),e(HX,M5r),e(WC,E5r),e(Z,y5r),e(Z,QC),e(QC,s9e),e(s9e,w5r),e(QC,A5r),e(QC,UX),e(UX,L5r),e(QC,B5r),e(Z,x5r),e(Z,HC),e(HC,l9e),e(l9e,k5r),e(HC,R5r),e(HC,JX),e(JX,S5r),e(HC,P5r),e(Z,$5r),e(Z,UC),e(UC,i9e),e(i9e,I5r),e(UC,D5r),e(UC,YX),e(YX,N5r),e(UC,j5r),e(Z,q5r),e(Z,JC),e(JC,d9e),e(d9e,G5r),e(JC,O5r),e(JC,KX),e(KX,X5r),e(JC,V5r),e(Z,z5r),e(Z,YC),e(YC,c9e),e(c9e,W5r),e(YC,Q5r),e(YC,ZX),e(ZX,H5r),e(YC,U5r),e(Z,J5r),e(Z,KC),e(KC,f9e),e(f9e,Y5r),e(KC,K5r),e(KC,eV),e(eV,Z5r),e(KC,e2r),e(Z,o2r),e(Z,ZC),e(ZC,m9e),e(m9e,r2r),e(ZC,t2r),e(ZC,oV),e(oV,a2r),e(ZC,n2r),e(Z,s2r),e(Z,eM),e(eM,g9e),e(g9e,l2r),e(eM,i2r),e(eM,rV),e(rV,d2r),e(eM,c2r),e(Eo,f2r),e(Eo,h9e),e(h9e,m2r),e(Eo,g2r),g(m0,Eo,null),b(c,qRe,u),b(c,Wc,u),e(Wc,oM),e(oM,p9e),g(g0,p9e,null),e(Wc,h2r),e(Wc,_9e),e(_9e,p2r),b(c,GRe,u),b(c,xr,u),g(h0,xr,null),e(xr,_2r),e(xr,Qc),e(Qc,u2r),e(Qc,u9e),e(u9e,b2r),e(Qc,v2r),e(Qc,b9e),e(b9e,T2r),e(Qc,F2r),e(xr,C2r),e(xr,p0),e(p0,M2r),e(p0,v9e),e(v9e,E2r),e(p0,y2r),e(xr,w2r),e(xr,Et),g(_0,Et,null),e(Et,A2r),e(Et,T9e),e(T9e,L2r),e(Et,B2r),e(Et,Hc),e(Hc,x2r),e(Hc,F9e),e(F9e,k2r),e(Hc,R2r),e(Hc,C9e),e(C9e,S2r),e(Hc,P2r),e(Et,$2r),e(Et,M9e),e(M9e,I2r),e(Et,D2r),g(u0,Et,null),e(xr,N2r),e(xr,yo),g(b0,yo,null),e(yo,j2r),e(yo,E9e),e(E9e,q2r),e(yo,G2r),e(yo,An),e(An,O2r),e(An,y9e),e(y9e,X2r),e(An,V2r),e(An,w9e),e(w9e,z2r),e(An,W2r),e(An,A9e),e(A9e,Q2r),e(An,H2r),e(yo,U2r),e(yo,L9e),e(L9e,rM),e(rM,B9e),e(B9e,J2r),e(rM,Y2r),e(rM,tV),e(tV,K2r),e(rM,Z2r),e(yo,evr),e(yo,x9e),e(x9e,ovr),e(yo,rvr),g(v0,yo,null),b(c,ORe,u),b(c,Uc,u),e(Uc,tM),e(tM,k9e),g(T0,k9e,null),e(Uc,tvr),e(Uc,R9e),e(R9e,avr),b(c,XRe,u),b(c,kr,u),g(F0,kr,null),e(kr,nvr),e(kr,Jc),e(Jc,svr),e(Jc,S9e),e(S9e,lvr),e(Jc,ivr),e(Jc,P9e),e(P9e,dvr),e(Jc,cvr),e(kr,fvr),e(kr,C0),e(C0,mvr),e(C0,$9e),e($9e,gvr),e(C0,hvr),e(kr,pvr),e(kr,yt),g(M0,yt,null),e(yt,_vr),e(yt,I9e),e(I9e,uvr),e(yt,bvr),e(yt,Yc),e(Yc,vvr),e(Yc,D9e),e(D9e,Tvr),e(Yc,Fvr),e(Yc,N9e),e(N9e,Cvr),e(Yc,Mvr),e(yt,Evr),e(yt,j9e),e(j9e,yvr),e(yt,wvr),g(E0,yt,null),e(kr,Avr),e(kr,wo),g(y0,wo,null),e(wo,Lvr),e(wo,q9e),e(q9e,Bvr),e(wo,xvr),e(wo,Ln),e(Ln,kvr),e(Ln,G9e),e(G9e,Rvr),e(Ln,Svr),e(Ln,O9e),e(O9e,Pvr),e(Ln,$vr),e(Ln,X9e),e(X9e,Ivr),e(Ln,Dvr),e(wo,Nvr),e(wo,V9e),e(V9e,aM),e(aM,z9e),e(z9e,jvr),e(aM,qvr),e(aM,aV),e(aV,Gvr),e(aM,Ovr),e(wo,Xvr),e(wo,W9e),e(W9e,Vvr),e(wo,zvr),g(w0,wo,null),b(c,VRe,u),b(c,Kc,u),e(Kc,nM),e(nM,Q9e),g(A0,Q9e,null),e(Kc,Wvr),e(Kc,H9e),e(H9e,Qvr),b(c,zRe,u),b(c,Rr,u),g(L0,Rr,null),e(Rr,Hvr),e(Rr,Zc),e(Zc,Uvr),e(Zc,U9e),e(U9e,Jvr),e(Zc,Yvr),e(Zc,J9e),e(J9e,Kvr),e(Zc,Zvr),e(Rr,eTr),e(Rr,B0),e(B0,oTr),e(B0,Y9e),e(Y9e,rTr),e(B0,tTr),e(Rr,aTr),e(Rr,wt),g(x0,wt,null),e(wt,nTr),e(wt,K9e),e(K9e,sTr),e(wt,lTr),e(wt,ef),e(ef,iTr),e(ef,Z9e),e(Z9e,dTr),e(ef,cTr),e(ef,ebe),e(ebe,fTr),e(ef,mTr),e(wt,gTr),e(wt,obe),e(obe,hTr),e(wt,pTr),g(k0,wt,null),e(Rr,_Tr),e(Rr,Ao),g(R0,Ao,null),e(Ao,uTr),e(Ao,rbe),e(rbe,bTr),e(Ao,vTr),e(Ao,Bn),e(Bn,TTr),e(Bn,tbe),e(tbe,FTr),e(Bn,CTr),e(Bn,abe),e(abe,MTr),e(Bn,ETr),e(Bn,nbe),e(nbe,yTr),e(Bn,wTr),e(Ao,ATr),e(Ao,z),e(z,sM),e(sM,sbe),e(sbe,LTr),e(sM,BTr),e(sM,nV),e(nV,xTr),e(sM,kTr),e(z,RTr),e(z,lM),e(lM,lbe),e(lbe,STr),e(lM,PTr),e(lM,sV),e(sV,$Tr),e(lM,ITr),e(z,DTr),e(z,iM),e(iM,ibe),e(ibe,NTr),e(iM,jTr),e(iM,lV),e(lV,qTr),e(iM,GTr),e(z,OTr),e(z,dM),e(dM,dbe),e(dbe,XTr),e(dM,VTr),e(dM,iV),e(iV,zTr),e(dM,WTr),e(z,QTr),e(z,cM),e(cM,cbe),e(cbe,HTr),e(cM,UTr),e(cM,dV),e(dV,JTr),e(cM,YTr),e(z,KTr),e(z,fM),e(fM,fbe),e(fbe,ZTr),e(fM,eFr),e(fM,cV),e(cV,oFr),e(fM,rFr),e(z,tFr),e(z,mM),e(mM,mbe),e(mbe,aFr),e(mM,nFr),e(mM,fV),e(fV,sFr),e(mM,lFr),e(z,iFr),e(z,gM),e(gM,gbe),e(gbe,dFr),e(gM,cFr),e(gM,mV),e(mV,fFr),e(gM,mFr),e(z,gFr),e(z,hM),e(hM,hbe),e(hbe,hFr),e(hM,pFr),e(hM,gV),e(gV,_Fr),e(hM,uFr),e(z,bFr),e(z,pM),e(pM,pbe),e(pbe,vFr),e(pM,TFr),e(pM,hV),e(hV,FFr),e(pM,CFr),e(z,MFr),e(z,_M),e(_M,_be),e(_be,EFr),e(_M,yFr),e(_M,pV),e(pV,wFr),e(_M,AFr),e(z,LFr),e(z,uM),e(uM,ube),e(ube,BFr),e(uM,xFr),e(uM,_V),e(_V,kFr),e(uM,RFr),e(z,SFr),e(z,bM),e(bM,bbe),e(bbe,PFr),e(bM,$Fr),e(bM,uV),e(uV,IFr),e(bM,DFr),e(z,NFr),e(z,vM),e(vM,vbe),e(vbe,jFr),e(vM,qFr),e(vM,bV),e(bV,GFr),e(vM,OFr),e(z,XFr),e(z,TM),e(TM,Tbe),e(Tbe,VFr),e(TM,zFr),e(TM,vV),e(vV,WFr),e(TM,QFr),e(z,HFr),e(z,FM),e(FM,Fbe),e(Fbe,UFr),e(FM,JFr),e(FM,TV),e(TV,YFr),e(FM,KFr),e(z,ZFr),e(z,CM),e(CM,Cbe),e(Cbe,eCr),e(CM,oCr),e(CM,FV),e(FV,rCr),e(CM,tCr),e(z,aCr),e(z,MM),e(MM,Mbe),e(Mbe,nCr),e(MM,sCr),e(MM,CV),e(CV,lCr),e(MM,iCr),e(z,dCr),e(z,EM),e(EM,Ebe),e(Ebe,cCr),e(EM,fCr),e(EM,MV),e(MV,mCr),e(EM,gCr),e(z,hCr),e(z,yM),e(yM,ybe),e(ybe,pCr),e(yM,_Cr),e(yM,EV),e(EV,uCr),e(yM,bCr),e(z,vCr),e(z,wM),e(wM,wbe),e(wbe,TCr),e(wM,FCr),e(wM,yV),e(yV,CCr),e(wM,MCr),e(z,ECr),e(z,AM),e(AM,Abe),e(Abe,yCr),e(AM,wCr),e(AM,wV),e(wV,ACr),e(AM,LCr),e(z,BCr),e(z,LM),e(LM,Lbe),e(Lbe,xCr),e(LM,kCr),e(LM,AV),e(AV,RCr),e(LM,SCr),e(z,PCr),e(z,BM),e(BM,Bbe),e(Bbe,$Cr),e(BM,ICr),e(BM,LV),e(LV,DCr),e(BM,NCr),e(z,jCr),e(z,xM),e(xM,xbe),e(xbe,qCr),e(xM,GCr),e(xM,BV),e(BV,OCr),e(xM,XCr),e(Ao,VCr),e(Ao,kbe),e(kbe,zCr),e(Ao,WCr),g(S0,Ao,null),b(c,WRe,u),b(c,of,u),e(of,kM),e(kM,Rbe),g(P0,Rbe,null),e(of,QCr),e(of,Sbe),e(Sbe,HCr),b(c,QRe,u),b(c,Sr,u),g($0,Sr,null),e(Sr,UCr),e(Sr,rf),e(rf,JCr),e(rf,Pbe),e(Pbe,YCr),e(rf,KCr),e(rf,$be),e($be,ZCr),e(rf,eMr),e(Sr,oMr),e(Sr,I0),e(I0,rMr),e(I0,Ibe),e(Ibe,tMr),e(I0,aMr),e(Sr,nMr),e(Sr,At),g(D0,At,null),e(At,sMr),e(At,Dbe),e(Dbe,lMr),e(At,iMr),e(At,tf),e(tf,dMr),e(tf,Nbe),e(Nbe,cMr),e(tf,fMr),e(tf,jbe),e(jbe,mMr),e(tf,gMr),e(At,hMr),e(At,qbe),e(qbe,pMr),e(At,_Mr),g(N0,At,null),e(Sr,uMr),e(Sr,Lo),g(j0,Lo,null),e(Lo,bMr),e(Lo,Gbe),e(Gbe,vMr),e(Lo,TMr),e(Lo,xn),e(xn,FMr),e(xn,Obe),e(Obe,CMr),e(xn,MMr),e(xn,Xbe),e(Xbe,EMr),e(xn,yMr),e(xn,Vbe),e(Vbe,wMr),e(xn,AMr),e(Lo,LMr),e(Lo,ca),e(ca,RM),e(RM,zbe),e(zbe,BMr),e(RM,xMr),e(RM,xV),e(xV,kMr),e(RM,RMr),e(ca,SMr),e(ca,SM),e(SM,Wbe),e(Wbe,PMr),e(SM,$Mr),e(SM,kV),e(kV,IMr),e(SM,DMr),e(ca,NMr),e(ca,PM),e(PM,Qbe),e(Qbe,jMr),e(PM,qMr),e(PM,RV),e(RV,GMr),e(PM,OMr),e(ca,XMr),e(ca,$M),e($M,Hbe),e(Hbe,VMr),e($M,zMr),e($M,SV),e(SV,WMr),e($M,QMr),e(ca,HMr),e(ca,IM),e(IM,Ube),e(Ube,UMr),e(IM,JMr),e(IM,PV),e(PV,YMr),e(IM,KMr),e(Lo,ZMr),e(Lo,Jbe),e(Jbe,e4r),e(Lo,o4r),g(q0,Lo,null),b(c,HRe,u),b(c,af,u),e(af,DM),e(DM,Ybe),g(G0,Ybe,null),e(af,r4r),e(af,Kbe),e(Kbe,t4r),b(c,URe,u),b(c,Pr,u),g(O0,Pr,null),e(Pr,a4r),e(Pr,nf),e(nf,n4r),e(nf,Zbe),e(Zbe,s4r),e(nf,l4r),e(nf,e5e),e(e5e,i4r),e(nf,d4r),e(Pr,c4r),e(Pr,X0),e(X0,f4r),e(X0,o5e),e(o5e,m4r),e(X0,g4r),e(Pr,h4r),e(Pr,Lt),g(V0,Lt,null),e(Lt,p4r),e(Lt,r5e),e(r5e,_4r),e(Lt,u4r),e(Lt,sf),e(sf,b4r),e(sf,t5e),e(t5e,v4r),e(sf,T4r),e(sf,a5e),e(a5e,F4r),e(sf,C4r),e(Lt,M4r),e(Lt,n5e),e(n5e,E4r),e(Lt,y4r),g(z0,Lt,null),e(Pr,w4r),e(Pr,Bo),g(W0,Bo,null),e(Bo,A4r),e(Bo,s5e),e(s5e,L4r),e(Bo,B4r),e(Bo,kn),e(kn,x4r),e(kn,l5e),e(l5e,k4r),e(kn,R4r),e(kn,i5e),e(i5e,S4r),e(kn,P4r),e(kn,d5e),e(d5e,$4r),e(kn,I4r),e(Bo,D4r),e(Bo,ce),e(ce,NM),e(NM,c5e),e(c5e,N4r),e(NM,j4r),e(NM,$V),e($V,q4r),e(NM,G4r),e(ce,O4r),e(ce,jM),e(jM,f5e),e(f5e,X4r),e(jM,V4r),e(jM,IV),e(IV,z4r),e(jM,W4r),e(ce,Q4r),e(ce,qM),e(qM,m5e),e(m5e,H4r),e(qM,U4r),e(qM,DV),e(DV,J4r),e(qM,Y4r),e(ce,K4r),e(ce,GM),e(GM,g5e),e(g5e,Z4r),e(GM,eEr),e(GM,NV),e(NV,oEr),e(GM,rEr),e(ce,tEr),e(ce,OM),e(OM,h5e),e(h5e,aEr),e(OM,nEr),e(OM,jV),e(jV,sEr),e(OM,lEr),e(ce,iEr),e(ce,XM),e(XM,p5e),e(p5e,dEr),e(XM,cEr),e(XM,qV),e(qV,fEr),e(XM,mEr),e(ce,gEr),e(ce,VM),e(VM,_5e),e(_5e,hEr),e(VM,pEr),e(VM,GV),e(GV,_Er),e(VM,uEr),e(ce,bEr),e(ce,zM),e(zM,u5e),e(u5e,vEr),e(zM,TEr),e(zM,OV),e(OV,FEr),e(zM,CEr),e(ce,MEr),e(ce,WM),e(WM,b5e),e(b5e,EEr),e(WM,yEr),e(WM,XV),e(XV,wEr),e(WM,AEr),e(ce,LEr),e(ce,QM),e(QM,v5e),e(v5e,BEr),e(QM,xEr),e(QM,VV),e(VV,kEr),e(QM,REr),e(ce,SEr),e(ce,HM),e(HM,T5e),e(T5e,PEr),e(HM,$Er),e(HM,zV),e(zV,IEr),e(HM,DEr),e(ce,NEr),e(ce,UM),e(UM,F5e),e(F5e,jEr),e(UM,qEr),e(UM,WV),e(WV,GEr),e(UM,OEr),e(Bo,XEr),e(Bo,C5e),e(C5e,VEr),e(Bo,zEr),g(Q0,Bo,null),b(c,JRe,u),b(c,lf,u),e(lf,JM),e(JM,M5e),g(H0,M5e,null),e(lf,WEr),e(lf,E5e),e(E5e,QEr),b(c,YRe,u),b(c,$r,u),g(U0,$r,null),e($r,HEr),e($r,df),e(df,UEr),e(df,y5e),e(y5e,JEr),e(df,YEr),e(df,w5e),e(w5e,KEr),e(df,ZEr),e($r,e3r),e($r,J0),e(J0,o3r),e(J0,A5e),e(A5e,r3r),e(J0,t3r),e($r,a3r),e($r,Bt),g(Y0,Bt,null),e(Bt,n3r),e(Bt,L5e),e(L5e,s3r),e(Bt,l3r),e(Bt,cf),e(cf,i3r),e(cf,B5e),e(B5e,d3r),e(cf,c3r),e(cf,x5e),e(x5e,f3r),e(cf,m3r),e(Bt,g3r),e(Bt,k5e),e(k5e,h3r),e(Bt,p3r),g(K0,Bt,null),e($r,_3r),e($r,xo),g(Z0,xo,null),e(xo,u3r),e(xo,R5e),e(R5e,b3r),e(xo,v3r),e(xo,Rn),e(Rn,T3r),e(Rn,S5e),e(S5e,F3r),e(Rn,C3r),e(Rn,P5e),e(P5e,M3r),e(Rn,E3r),e(Rn,$5e),e($5e,y3r),e(Rn,w3r),e(xo,A3r),e(xo,ue),e(ue,YM),e(YM,I5e),e(I5e,L3r),e(YM,B3r),e(YM,QV),e(QV,x3r),e(YM,k3r),e(ue,R3r),e(ue,KM),e(KM,D5e),e(D5e,S3r),e(KM,P3r),e(KM,HV),e(HV,$3r),e(KM,I3r),e(ue,D3r),e(ue,ZM),e(ZM,N5e),e(N5e,N3r),e(ZM,j3r),e(ZM,UV),e(UV,q3r),e(ZM,G3r),e(ue,O3r),e(ue,e4),e(e4,j5e),e(j5e,X3r),e(e4,V3r),e(e4,JV),e(JV,z3r),e(e4,W3r),e(ue,Q3r),e(ue,o4),e(o4,q5e),e(q5e,H3r),e(o4,U3r),e(o4,YV),e(YV,J3r),e(o4,Y3r),e(ue,K3r),e(ue,r4),e(r4,G5e),e(G5e,Z3r),e(r4,eyr),e(r4,KV),e(KV,oyr),e(r4,ryr),e(ue,tyr),e(ue,t4),e(t4,O5e),e(O5e,ayr),e(t4,nyr),e(t4,ZV),e(ZV,syr),e(t4,lyr),e(ue,iyr),e(ue,a4),e(a4,X5e),e(X5e,dyr),e(a4,cyr),e(a4,ez),e(ez,fyr),e(a4,myr),e(ue,gyr),e(ue,n4),e(n4,V5e),e(V5e,hyr),e(n4,pyr),e(n4,oz),e(oz,_yr),e(n4,uyr),e(ue,byr),e(ue,s4),e(s4,z5e),e(z5e,vyr),e(s4,Tyr),e(s4,rz),e(rz,Fyr),e(s4,Cyr),e(xo,Myr),e(xo,W5e),e(W5e,Eyr),e(xo,yyr),g(eL,xo,null),b(c,KRe,u),b(c,ff,u),e(ff,l4),e(l4,Q5e),g(oL,Q5e,null),e(ff,wyr),e(ff,H5e),e(H5e,Ayr),b(c,ZRe,u),b(c,Ir,u),g(rL,Ir,null),e(Ir,Lyr),e(Ir,mf),e(mf,Byr),e(mf,U5e),e(U5e,xyr),e(mf,kyr),e(mf,J5e),e(J5e,Ryr),e(mf,Syr),e(Ir,Pyr),e(Ir,tL),e(tL,$yr),e(tL,Y5e),e(Y5e,Iyr),e(tL,Dyr),e(Ir,Nyr),e(Ir,xt),g(aL,xt,null),e(xt,jyr),e(xt,K5e),e(K5e,qyr),e(xt,Gyr),e(xt,gf),e(gf,Oyr),e(gf,Z5e),e(Z5e,Xyr),e(gf,Vyr),e(gf,e2e),e(e2e,zyr),e(gf,Wyr),e(xt,Qyr),e(xt,o2e),e(o2e,Hyr),e(xt,Uyr),g(nL,xt,null),e(Ir,Jyr),e(Ir,ko),g(sL,ko,null),e(ko,Yyr),e(ko,r2e),e(r2e,Kyr),e(ko,Zyr),e(ko,Sn),e(Sn,ewr),e(Sn,t2e),e(t2e,owr),e(Sn,rwr),e(Sn,a2e),e(a2e,twr),e(Sn,awr),e(Sn,n2e),e(n2e,nwr),e(Sn,swr),e(ko,lwr),e(ko,Me),e(Me,i4),e(i4,s2e),e(s2e,iwr),e(i4,dwr),e(i4,tz),e(tz,cwr),e(i4,fwr),e(Me,mwr),e(Me,d4),e(d4,l2e),e(l2e,gwr),e(d4,hwr),e(d4,az),e(az,pwr),e(d4,_wr),e(Me,uwr),e(Me,c4),e(c4,i2e),e(i2e,bwr),e(c4,vwr),e(c4,nz),e(nz,Twr),e(c4,Fwr),e(Me,Cwr),e(Me,f4),e(f4,d2e),e(d2e,Mwr),e(f4,Ewr),e(f4,sz),e(sz,ywr),e(f4,wwr),e(Me,Awr),e(Me,m4),e(m4,c2e),e(c2e,Lwr),e(m4,Bwr),e(m4,lz),e(lz,xwr),e(m4,kwr),e(Me,Rwr),e(Me,g4),e(g4,f2e),e(f2e,Swr),e(g4,Pwr),e(g4,iz),e(iz,$wr),e(g4,Iwr),e(Me,Dwr),e(Me,h4),e(h4,m2e),e(m2e,Nwr),e(h4,jwr),e(h4,dz),e(dz,qwr),e(h4,Gwr),e(Me,Owr),e(Me,p4),e(p4,g2e),e(g2e,Xwr),e(p4,Vwr),e(p4,cz),e(cz,zwr),e(p4,Wwr),e(Me,Qwr),e(Me,_4),e(_4,h2e),e(h2e,Hwr),e(_4,Uwr),e(_4,fz),e(fz,Jwr),e(_4,Ywr),e(ko,Kwr),e(ko,p2e),e(p2e,Zwr),e(ko,e6r),g(lL,ko,null),b(c,eSe,u),b(c,hf,u),e(hf,u4),e(u4,_2e),g(iL,_2e,null),e(hf,o6r),e(hf,u2e),e(u2e,r6r),b(c,oSe,u),b(c,Dr,u),g(dL,Dr,null),e(Dr,t6r),e(Dr,pf),e(pf,a6r),e(pf,b2e),e(b2e,n6r),e(pf,s6r),e(pf,v2e),e(v2e,l6r),e(pf,i6r),e(Dr,d6r),e(Dr,cL),e(cL,c6r),e(cL,T2e),e(T2e,f6r),e(cL,m6r),e(Dr,g6r),e(Dr,kt),g(fL,kt,null),e(kt,h6r),e(kt,F2e),e(F2e,p6r),e(kt,_6r),e(kt,_f),e(_f,u6r),e(_f,C2e),e(C2e,b6r),e(_f,v6r),e(_f,M2e),e(M2e,T6r),e(_f,F6r),e(kt,C6r),e(kt,E2e),e(E2e,M6r),e(kt,E6r),g(mL,kt,null),e(Dr,y6r),e(Dr,Ro),g(gL,Ro,null),e(Ro,w6r),e(Ro,y2e),e(y2e,A6r),e(Ro,L6r),e(Ro,Pn),e(Pn,B6r),e(Pn,w2e),e(w2e,x6r),e(Pn,k6r),e(Pn,A2e),e(A2e,R6r),e(Pn,S6r),e(Pn,L2e),e(L2e,P6r),e(Pn,$6r),e(Ro,I6r),e(Ro,be),e(be,b4),e(b4,B2e),e(B2e,D6r),e(b4,N6r),e(b4,mz),e(mz,j6r),e(b4,q6r),e(be,G6r),e(be,v4),e(v4,x2e),e(x2e,O6r),e(v4,X6r),e(v4,gz),e(gz,V6r),e(v4,z6r),e(be,W6r),e(be,T4),e(T4,k2e),e(k2e,Q6r),e(T4,H6r),e(T4,hz),e(hz,U6r),e(T4,J6r),e(be,Y6r),e(be,F4),e(F4,R2e),e(R2e,K6r),e(F4,Z6r),e(F4,pz),e(pz,eAr),e(F4,oAr),e(be,rAr),e(be,C4),e(C4,S2e),e(S2e,tAr),e(C4,aAr),e(C4,_z),e(_z,nAr),e(C4,sAr),e(be,lAr),e(be,M4),e(M4,P2e),e(P2e,iAr),e(M4,dAr),e(M4,uz),e(uz,cAr),e(M4,fAr),e(be,mAr),e(be,E4),e(E4,$2e),e($2e,gAr),e(E4,hAr),e(E4,bz),e(bz,pAr),e(E4,_Ar),e(be,uAr),e(be,y4),e(y4,I2e),e(I2e,bAr),e(y4,vAr),e(y4,vz),e(vz,TAr),e(y4,FAr),e(be,CAr),e(be,w4),e(w4,D2e),e(D2e,MAr),e(w4,EAr),e(w4,Tz),e(Tz,yAr),e(w4,wAr),e(be,AAr),e(be,A4),e(A4,N2e),e(N2e,LAr),e(A4,BAr),e(A4,Fz),e(Fz,xAr),e(A4,kAr),e(Ro,RAr),e(Ro,j2e),e(j2e,SAr),e(Ro,PAr),g(hL,Ro,null),b(c,rSe,u),b(c,uf,u),e(uf,L4),e(L4,q2e),g(pL,q2e,null),e(uf,$Ar),e(uf,G2e),e(G2e,IAr),b(c,tSe,u),b(c,Nr,u),g(_L,Nr,null),e(Nr,DAr),e(Nr,bf),e(bf,NAr),e(bf,O2e),e(O2e,jAr),e(bf,qAr),e(bf,X2e),e(X2e,GAr),e(bf,OAr),e(Nr,XAr),e(Nr,uL),e(uL,VAr),e(uL,V2e),e(V2e,zAr),e(uL,WAr),e(Nr,QAr),e(Nr,Rt),g(bL,Rt,null),e(Rt,HAr),e(Rt,z2e),e(z2e,UAr),e(Rt,JAr),e(Rt,vf),e(vf,YAr),e(vf,W2e),e(W2e,KAr),e(vf,ZAr),e(vf,Q2e),e(Q2e,e0r),e(vf,o0r),e(Rt,r0r),e(Rt,H2e),e(H2e,t0r),e(Rt,a0r),g(vL,Rt,null),e(Nr,n0r),e(Nr,So),g(TL,So,null),e(So,s0r),e(So,U2e),e(U2e,l0r),e(So,i0r),e(So,$n),e($n,d0r),e($n,J2e),e(J2e,c0r),e($n,f0r),e($n,Y2e),e(Y2e,m0r),e($n,g0r),e($n,K2e),e(K2e,h0r),e($n,p0r),e(So,_0r),e(So,ve),e(ve,B4),e(B4,Z2e),e(Z2e,u0r),e(B4,b0r),e(B4,Cz),e(Cz,v0r),e(B4,T0r),e(ve,F0r),e(ve,x4),e(x4,eve),e(eve,C0r),e(x4,M0r),e(x4,Mz),e(Mz,E0r),e(x4,y0r),e(ve,w0r),e(ve,k4),e(k4,ove),e(ove,A0r),e(k4,L0r),e(k4,Ez),e(Ez,B0r),e(k4,x0r),e(ve,k0r),e(ve,R4),e(R4,rve),e(rve,R0r),e(R4,S0r),e(R4,yz),e(yz,P0r),e(R4,$0r),e(ve,I0r),e(ve,S4),e(S4,tve),e(tve,D0r),e(S4,N0r),e(S4,wz),e(wz,j0r),e(S4,q0r),e(ve,G0r),e(ve,P4),e(P4,ave),e(ave,O0r),e(P4,X0r),e(P4,Az),e(Az,V0r),e(P4,z0r),e(ve,W0r),e(ve,$4),e($4,nve),e(nve,Q0r),e($4,H0r),e($4,Lz),e(Lz,U0r),e($4,J0r),e(ve,Y0r),e(ve,I4),e(I4,sve),e(sve,K0r),e(I4,Z0r),e(I4,Bz),e(Bz,eLr),e(I4,oLr),e(ve,rLr),e(ve,D4),e(D4,lve),e(lve,tLr),e(D4,aLr),e(D4,xz),e(xz,nLr),e(D4,sLr),e(ve,lLr),e(ve,N4),e(N4,ive),e(ive,iLr),e(N4,dLr),e(N4,kz),e(kz,cLr),e(N4,fLr),e(So,mLr),e(So,dve),e(dve,gLr),e(So,hLr),g(FL,So,null),b(c,aSe,u),b(c,Tf,u),e(Tf,j4),e(j4,cve),g(CL,cve,null),e(Tf,pLr),e(Tf,fve),e(fve,_Lr),b(c,nSe,u),b(c,jr,u),g(ML,jr,null),e(jr,uLr),e(jr,Ff),e(Ff,bLr),e(Ff,mve),e(mve,vLr),e(Ff,TLr),e(Ff,gve),e(gve,FLr),e(Ff,CLr),e(jr,MLr),e(jr,EL),e(EL,ELr),e(EL,hve),e(hve,yLr),e(EL,wLr),e(jr,ALr),e(jr,St),g(yL,St,null),e(St,LLr),e(St,pve),e(pve,BLr),e(St,xLr),e(St,Cf),e(Cf,kLr),e(Cf,_ve),e(_ve,RLr),e(Cf,SLr),e(Cf,uve),e(uve,PLr),e(Cf,$Lr),e(St,ILr),e(St,bve),e(bve,DLr),e(St,NLr),g(wL,St,null),e(jr,jLr),e(jr,Po),g(AL,Po,null),e(Po,qLr),e(Po,vve),e(vve,GLr),e(Po,OLr),e(Po,In),e(In,XLr),e(In,Tve),e(Tve,VLr),e(In,zLr),e(In,Fve),e(Fve,WLr),e(In,QLr),e(In,Cve),e(Cve,HLr),e(In,ULr),e(Po,JLr),e(Po,Se),e(Se,q4),e(q4,Mve),e(Mve,YLr),e(q4,KLr),e(q4,Rz),e(Rz,ZLr),e(q4,e7r),e(Se,o7r),e(Se,G4),e(G4,Eve),e(Eve,r7r),e(G4,t7r),e(G4,Sz),e(Sz,a7r),e(G4,n7r),e(Se,s7r),e(Se,O4),e(O4,yve),e(yve,l7r),e(O4,i7r),e(O4,Pz),e(Pz,d7r),e(O4,c7r),e(Se,f7r),e(Se,X4),e(X4,wve),e(wve,m7r),e(X4,g7r),e(X4,$z),e($z,h7r),e(X4,p7r),e(Se,_7r),e(Se,V4),e(V4,Ave),e(Ave,u7r),e(V4,b7r),e(V4,Iz),e(Iz,v7r),e(V4,T7r),e(Se,F7r),e(Se,z4),e(z4,Lve),e(Lve,C7r),e(z4,M7r),e(z4,Dz),e(Dz,E7r),e(z4,y7r),e(Se,w7r),e(Se,W4),e(W4,Bve),e(Bve,A7r),e(W4,L7r),e(W4,Nz),e(Nz,B7r),e(W4,x7r),e(Se,k7r),e(Se,Q4),e(Q4,xve),e(xve,R7r),e(Q4,S7r),e(Q4,jz),e(jz,P7r),e(Q4,$7r),e(Po,I7r),e(Po,kve),e(kve,D7r),e(Po,N7r),g(LL,Po,null),b(c,sSe,u),b(c,Mf,u),e(Mf,H4),e(H4,Rve),g(BL,Rve,null),e(Mf,j7r),e(Mf,Sve),e(Sve,q7r),b(c,lSe,u),b(c,qr,u),g(xL,qr,null),e(qr,G7r),e(qr,Ef),e(Ef,O7r),e(Ef,Pve),e(Pve,X7r),e(Ef,V7r),e(Ef,$ve),e($ve,z7r),e(Ef,W7r),e(qr,Q7r),e(qr,kL),e(kL,H7r),e(kL,Ive),e(Ive,U7r),e(kL,J7r),e(qr,Y7r),e(qr,Pt),g(RL,Pt,null),e(Pt,K7r),e(Pt,Dve),e(Dve,Z7r),e(Pt,e8r),e(Pt,yf),e(yf,o8r),e(yf,Nve),e(Nve,r8r),e(yf,t8r),e(yf,jve),e(jve,a8r),e(yf,n8r),e(Pt,s8r),e(Pt,qve),e(qve,l8r),e(Pt,i8r),g(SL,Pt,null),e(qr,d8r),e(qr,$o),g(PL,$o,null),e($o,c8r),e($o,Gve),e(Gve,f8r),e($o,m8r),e($o,Dn),e(Dn,g8r),e(Dn,Ove),e(Ove,h8r),e(Dn,p8r),e(Dn,Xve),e(Xve,_8r),e(Dn,u8r),e(Dn,Vve),e(Vve,b8r),e(Dn,v8r),e($o,T8r),e($o,Pe),e(Pe,U4),e(U4,zve),e(zve,F8r),e(U4,C8r),e(U4,qz),e(qz,M8r),e(U4,E8r),e(Pe,y8r),e(Pe,J4),e(J4,Wve),e(Wve,w8r),e(J4,A8r),e(J4,Gz),e(Gz,L8r),e(J4,B8r),e(Pe,x8r),e(Pe,Y4),e(Y4,Qve),e(Qve,k8r),e(Y4,R8r),e(Y4,Oz),e(Oz,S8r),e(Y4,P8r),e(Pe,$8r),e(Pe,K4),e(K4,Hve),e(Hve,I8r),e(K4,D8r),e(K4,Xz),e(Xz,N8r),e(K4,j8r),e(Pe,q8r),e(Pe,Z4),e(Z4,Uve),e(Uve,G8r),e(Z4,O8r),e(Z4,Vz),e(Vz,X8r),e(Z4,V8r),e(Pe,z8r),e(Pe,eE),e(eE,Jve),e(Jve,W8r),e(eE,Q8r),e(eE,zz),e(zz,H8r),e(eE,U8r),e(Pe,J8r),e(Pe,oE),e(oE,Yve),e(Yve,Y8r),e(oE,K8r),e(oE,Wz),e(Wz,Z8r),e(oE,eBr),e(Pe,oBr),e(Pe,rE),e(rE,Kve),e(Kve,rBr),e(rE,tBr),e(rE,Qz),e(Qz,aBr),e(rE,nBr),e($o,sBr),e($o,Zve),e(Zve,lBr),e($o,iBr),g($L,$o,null),b(c,iSe,u),b(c,wf,u),e(wf,tE),e(tE,eTe),g(IL,eTe,null),e(wf,dBr),e(wf,oTe),e(oTe,cBr),b(c,dSe,u),b(c,Gr,u),g(DL,Gr,null),e(Gr,fBr),e(Gr,Af),e(Af,mBr),e(Af,rTe),e(rTe,gBr),e(Af,hBr),e(Af,tTe),e(tTe,pBr),e(Af,_Br),e(Gr,uBr),e(Gr,NL),e(NL,bBr),e(NL,aTe),e(aTe,vBr),e(NL,TBr),e(Gr,FBr),e(Gr,$t),g(jL,$t,null),e($t,CBr),e($t,nTe),e(nTe,MBr),e($t,EBr),e($t,Lf),e(Lf,yBr),e(Lf,sTe),e(sTe,wBr),e(Lf,ABr),e(Lf,lTe),e(lTe,LBr),e(Lf,BBr),e($t,xBr),e($t,iTe),e(iTe,kBr),e($t,RBr),g(qL,$t,null),e(Gr,SBr),e(Gr,Io),g(GL,Io,null),e(Io,PBr),e(Io,dTe),e(dTe,$Br),e(Io,IBr),e(Io,Nn),e(Nn,DBr),e(Nn,cTe),e(cTe,NBr),e(Nn,jBr),e(Nn,fTe),e(fTe,qBr),e(Nn,GBr),e(Nn,mTe),e(mTe,OBr),e(Nn,XBr),e(Io,VBr),e(Io,gTe),e(gTe,aE),e(aE,hTe),e(hTe,zBr),e(aE,WBr),e(aE,Hz),e(Hz,QBr),e(aE,HBr),e(Io,UBr),e(Io,pTe),e(pTe,JBr),e(Io,YBr),g(OL,Io,null),b(c,cSe,u),b(c,Bf,u),e(Bf,nE),e(nE,_Te),g(XL,_Te,null),e(Bf,KBr),e(Bf,uTe),e(uTe,ZBr),b(c,fSe,u),b(c,Or,u),g(VL,Or,null),e(Or,exr),e(Or,xf),e(xf,oxr),e(xf,bTe),e(bTe,rxr),e(xf,txr),e(xf,vTe),e(vTe,axr),e(xf,nxr),e(Or,sxr),e(Or,zL),e(zL,lxr),e(zL,TTe),e(TTe,ixr),e(zL,dxr),e(Or,cxr),e(Or,It),g(WL,It,null),e(It,fxr),e(It,FTe),e(FTe,mxr),e(It,gxr),e(It,kf),e(kf,hxr),e(kf,CTe),e(CTe,pxr),e(kf,_xr),e(kf,MTe),e(MTe,uxr),e(kf,bxr),e(It,vxr),e(It,ETe),e(ETe,Txr),e(It,Fxr),g(QL,It,null),e(Or,Cxr),e(Or,Do),g(HL,Do,null),e(Do,Mxr),e(Do,yTe),e(yTe,Exr),e(Do,yxr),e(Do,jn),e(jn,wxr),e(jn,wTe),e(wTe,Axr),e(jn,Lxr),e(jn,ATe),e(ATe,Bxr),e(jn,xxr),e(jn,LTe),e(LTe,kxr),e(jn,Rxr),e(Do,Sxr),e(Do,UL),e(UL,sE),e(sE,BTe),e(BTe,Pxr),e(sE,$xr),e(sE,Uz),e(Uz,Ixr),e(sE,Dxr),e(UL,Nxr),e(UL,lE),e(lE,xTe),e(xTe,jxr),e(lE,qxr),e(lE,Jz),e(Jz,Gxr),e(lE,Oxr),e(Do,Xxr),e(Do,kTe),e(kTe,Vxr),e(Do,zxr),g(JL,Do,null),b(c,mSe,u),b(c,Rf,u),e(Rf,iE),e(iE,RTe),g(YL,RTe,null),e(Rf,Wxr),e(Rf,STe),e(STe,Qxr),b(c,gSe,u),b(c,Xr,u),g(KL,Xr,null),e(Xr,Hxr),e(Xr,Sf),e(Sf,Uxr),e(Sf,PTe),e(PTe,Jxr),e(Sf,Yxr),e(Sf,$Te),e($Te,Kxr),e(Sf,Zxr),e(Xr,ekr),e(Xr,ZL),e(ZL,okr),e(ZL,ITe),e(ITe,rkr),e(ZL,tkr),e(Xr,akr),e(Xr,Dt),g(e7,Dt,null),e(Dt,nkr),e(Dt,DTe),e(DTe,skr),e(Dt,lkr),e(Dt,Pf),e(Pf,ikr),e(Pf,NTe),e(NTe,dkr),e(Pf,ckr),e(Pf,jTe),e(jTe,fkr),e(Pf,mkr),e(Dt,gkr),e(Dt,qTe),e(qTe,hkr),e(Dt,pkr),g(o7,Dt,null),e(Xr,_kr),e(Xr,No),g(r7,No,null),e(No,ukr),e(No,GTe),e(GTe,bkr),e(No,vkr),e(No,qn),e(qn,Tkr),e(qn,OTe),e(OTe,Fkr),e(qn,Ckr),e(qn,XTe),e(XTe,Mkr),e(qn,Ekr),e(qn,VTe),e(VTe,ykr),e(qn,wkr),e(No,Akr),e(No,zTe),e(zTe,dE),e(dE,WTe),e(WTe,Lkr),e(dE,Bkr),e(dE,Yz),e(Yz,xkr),e(dE,kkr),e(No,Rkr),e(No,QTe),e(QTe,Skr),e(No,Pkr),g(t7,No,null),hSe=!0},p(c,[u]){const a7={};u&2&&(a7.$$scope={dirty:u,ctx:c}),Of.$set(a7);const HTe={};u&2&&(HTe.$$scope={dirty:u,ctx:c}),Rh.$set(HTe);const UTe={};u&2&&(UTe.$$scope={dirty:u,ctx:c}),Xh.$set(UTe)},i(c){hSe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(Of.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(S3.$$.fragment,c),h(Rh.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(D3.$$.fragment,c),h(q3.$$.fragment,c),h(Xh.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(Z3.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(D6.$$.fragment,c),h(j6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(qA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(D0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(DL.$$.fragment,c),h(jL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),hSe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(Of.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(B3.$$.fragment,c),p(x3.$$.fragment,c),p(S3.$$.fragment,c),p(Rh.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(D3.$$.fragment,c),p(q3.$$.fragment,c),p(Xh.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(Z3.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(Dw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(T6.$$.fragment,c),p(F6.$$.fragment,c),p(C6.$$.fragment,c),p(M6.$$.fragment,c),p(y6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(L6.$$.fragment,c),p(B6.$$.fragment,c),p(x6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(D6.$$.fragment,c),p(j6.$$.fragment,c),p(q6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(X6.$$.fragment,c),p(V6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(DA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(qA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(D0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(DL.$$.fragment,c),p(jL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),hSe=!1},d(c){t(K),c&&t(io),c&&t(de),_(fe),c&&t(Df),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(pe),c&&t(zo),c&&t(Ga),c&&t(gke),c&&t(Xi),_(g3),c&&t(hke),c&&t(zn),c&&t(pke),_(h3,c),c&&t(_ke),c&&t(s8),c&&t(uke),_(Of,c),c&&t(bke),c&&t(Vi),_(p3),c&&t(vke),c&&t(Wo),_(_3),_(v3),_(T3),_(F3),c&&t(Tke),c&&t(Wi),_(C3),c&&t(Fke),c&&t(Qo),_(M3),_(w3),_(A3),_(L3),c&&t(Cke),c&&t(Qi),_(B3),c&&t(Mke),c&&t(Ho),_(x3),_(S3),_(Rh),_(P3),_($3),c&&t(Eke),c&&t(Hi),_(I3),c&&t(yke),c&&t(Uo),_(D3),_(q3),_(Xh),_(G3),_(O3),c&&t(wke),c&&t(Ji),_(X3),c&&t(Ake),c&&t(Jo),_(V3),_(W3),_(Q3),_(H3),_(U3),c&&t(Lke),c&&t(Zi),_(J3),c&&t(Bke),c&&t(Yo),_(Y3),_(Z3),_(ey),_(oy),_(ry),c&&t(xke),c&&t(rd),_(ty),c&&t(kke),c&&t(Ko),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t(Rke),c&&t(nd),_(cy),c&&t(Ske),c&&t(Zo),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(Pke),c&&t(id),_(uy),c&&t($ke),c&&t(er),_(by),_(Ty),_(Fy),_(Cy),_(My),c&&t(Ike),c&&t(fd),_(Ey),c&&t(Dke),c&&t(or),_(yy),_(Ay),_(Ly),_(By),_(xy),c&&t(Nke),c&&t(hd),_(ky),c&&t(jke),c&&t(rr),_(Ry),_(Py),_($y),_(Iy),_(Dy),c&&t(qke),c&&t(ud),_(Ny),c&&t(Gke),c&&t(tr),_(jy),_(Gy),_(Oy),_(Xy),_(Vy),c&&t(Oke),c&&t(Td),_(zy),c&&t(Xke),c&&t(ar),_(Wy),_(Hy),_(Uy),_(Jy),_(Yy),c&&t(Vke),c&&t(Md),_(Ky),c&&t(zke),c&&t(nr),_(Zy),_(ow),_(rw),_(tw),_(aw),c&&t(Wke),c&&t(wd),_(nw),c&&t(Qke),c&&t(sr),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(Hke),c&&t(Bd),_(mw),c&&t(Uke),c&&t(lr),_(gw),_(pw),_(_w),_(uw),_(bw),c&&t(Jke),c&&t(Rd),_(vw),c&&t(Yke),c&&t(ir),_(Tw),_(Cw),_(Mw),_(Ew),_(yw),c&&t(Kke),c&&t($d),_(ww),c&&t(Zke),c&&t(dr),_(Aw),_(Bw),_(xw),_(kw),_(Rw),c&&t(eRe),c&&t(Nd),_(Sw),c&&t(oRe),c&&t(cr),_(Pw),_(Iw),_(Dw),_(Nw),_(jw),c&&t(rRe),c&&t(Gd),_(qw),c&&t(tRe),c&&t(fr),_(Gw),_(Xw),_(Vw),_(zw),_(Ww),c&&t(aRe),c&&t(Vd),_(Qw),c&&t(nRe),c&&t(mr),_(Hw),_(Jw),_(Yw),_(Kw),_(e6),c&&t(sRe),c&&t(Qd),_(o6),c&&t(lRe),c&&t(gr),_(r6),_(a6),_(n6),_(s6),_(l6),c&&t(iRe),c&&t(Jd),_(i6),c&&t(dRe),c&&t(hr),_(d6),_(f6),_(m6),_(g6),_(h6),c&&t(cRe),c&&t(ec),_(p6),c&&t(fRe),c&&t(pr),_(_6),_(b6),_(v6),_(T6),_(F6),c&&t(mRe),c&&t(tc),_(C6),c&&t(gRe),c&&t(_r),_(M6),_(y6),_(w6),_(A6),_(L6),c&&t(hRe),c&&t(sc),_(B6),c&&t(pRe),c&&t(ur),_(x6),_(R6),_(S6),_(P6),_($6),c&&t(_Re),c&&t(cc),_(I6),c&&t(uRe),c&&t(br),_(D6),_(j6),_(q6),_(G6),_(O6),c&&t(bRe),c&&t(gc),_(X6),c&&t(vRe),c&&t(vr),_(V6),_(W6),_(Q6),_(H6),_(U6),c&&t(TRe),c&&t(_c),_(J6),c&&t(FRe),c&&t(Tr),_(Y6),_(Z6),_(eA),_(oA),_(rA),c&&t(CRe),c&&t(vc),_(tA),c&&t(MRe),c&&t(Fr),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(ERe),c&&t(Cc),_(cA),c&&t(yRe),c&&t(Cr),_(fA),_(gA),_(hA),_(pA),_(uA),c&&t(wRe),c&&t(yc),_(bA),c&&t(ARe),c&&t(Mr),_(vA),_(FA),_(CA),_(MA),_(EA),c&&t(LRe),c&&t(Lc),_(yA),c&&t(BRe),c&&t(Er),_(wA),_(LA),_(BA),_(xA),_(kA),c&&t(xRe),c&&t(kc),_(RA),c&&t(kRe),c&&t(yr),_(SA),_($A),_(IA),_(DA),_(NA),c&&t(RRe),c&&t(Pc),_(jA),c&&t(SRe),c&&t(wr),_(qA),_(OA),_(XA),_(VA),_(zA),c&&t(PRe),c&&t(Dc),_(WA),c&&t($Re),c&&t(Ar),_(QA),_(UA),_(JA),_(YA),_(KA),c&&t(IRe),c&&t(qc),_(ZA),c&&t(DRe),c&&t(Lr),_(e0),_(r0),_(t0),_(a0),_(n0),c&&t(NRe),c&&t(Xc),_(s0),c&&t(jRe),c&&t(Br),_(l0),_(d0),_(c0),_(f0),_(m0),c&&t(qRe),c&&t(Wc),_(g0),c&&t(GRe),c&&t(xr),_(h0),_(_0),_(u0),_(b0),_(v0),c&&t(ORe),c&&t(Uc),_(T0),c&&t(XRe),c&&t(kr),_(F0),_(M0),_(E0),_(y0),_(w0),c&&t(VRe),c&&t(Kc),_(A0),c&&t(zRe),c&&t(Rr),_(L0),_(x0),_(k0),_(R0),_(S0),c&&t(WRe),c&&t(of),_(P0),c&&t(QRe),c&&t(Sr),_($0),_(D0),_(N0),_(j0),_(q0),c&&t(HRe),c&&t(af),_(G0),c&&t(URe),c&&t(Pr),_(O0),_(V0),_(z0),_(W0),_(Q0),c&&t(JRe),c&&t(lf),_(H0),c&&t(YRe),c&&t($r),_(U0),_(Y0),_(K0),_(Z0),_(eL),c&&t(KRe),c&&t(ff),_(oL),c&&t(ZRe),c&&t(Ir),_(rL),_(aL),_(nL),_(sL),_(lL),c&&t(eSe),c&&t(hf),_(iL),c&&t(oSe),c&&t(Dr),_(dL),_(fL),_(mL),_(gL),_(hL),c&&t(rSe),c&&t(uf),_(pL),c&&t(tSe),c&&t(Nr),_(_L),_(bL),_(vL),_(TL),_(FL),c&&t(aSe),c&&t(Tf),_(CL),c&&t(nSe),c&&t(jr),_(ML),_(yL),_(wL),_(AL),_(LL),c&&t(sSe),c&&t(Mf),_(BL),c&&t(lSe),c&&t(qr),_(xL),_(RL),_(SL),_(PL),_($L),c&&t(iSe),c&&t(wf),_(IL),c&&t(dSe),c&&t(Gr),_(DL),_(jL),_(qL),_(GL),_(OL),c&&t(cSe),c&&t(Bf),_(XL),c&&t(fSe),c&&t(Or),_(VL),_(WL),_(QL),_(HL),_(JL),c&&t(mSe),c&&t(Rf),_(YL),c&&t(gSe),c&&t(Xr),_(KL),_(e7),_(o7),_(r7),_(t7)}}}const QMt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function HMt(If){return OMt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class e4t extends NMt{constructor(K){super();jMt(this,K,HMt,WMt,qMt,{})}}export{e4t as default,QMt as metadata};
