import{S as _Mt,i as uMt,s as bMt,e as a,k as l,w as f,t as o,M as vMt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-6b77c823.js";import{T as ukr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function TMt(Ii){let J,$e,de,pe,io,fe,Me,Vo,Ni,Nf,fa,Di,ji,l3,Df,Be,co,qi,Gn,i3,On,Xn,d3,Gi,Vn,c3,Oi,jf,qa;return{c(){J=a("p"),$e=o("If your "),de=a("code"),pe=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Me=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ni=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),ji=o('"new-model"'),l3=o(")."),Df=l(),Be=a("p"),co=o("Likewise, if your "),qi=a("code"),Gn=o("NewModel"),i3=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),d3=o(`, make sure its
`),Gi=a("code"),Vn=o("config_class"),c3=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var _e=s(J);$e=r(_e,"If your "),de=n(_e,"CODE",{});var Z8=s(de);pe=r(Z8,"NewModelConfig"),Z8.forEach(t),io=r(_e," is a subclass of "),fe=n(_e,"CODE",{});var Xi=s(fe);Me=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(_e,`, make sure its
`),Ni=n(_e,"CODE",{});var e7=s(Ni);Nf=r(e7,"model_type"),e7.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Di=n(_e,"CODE",{});var o7=s(Di);ji=r(o7,'"new-model"'),o7.forEach(t),l3=r(_e,")."),_e.forEach(t),Df=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Ga=s(qi);Gn=r(Ga,"NewModel"),Ga.forEach(t),i3=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var r7=s(On);Xn=r(r7,"PreTrainedModel"),r7.forEach(t),d3=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var qf=s(Gi);Vn=r(qf,"config_class"),qf.forEach(t),c3=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var t7=s(Oi);jf=r(t7,"NewModelConfig"),t7.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,J,_e),e(J,$e),e(J,de),e(de,pe),e(J,io),e(J,fe),e(fe,Me),e(J,Vo),e(J,Ni),e(Ni,Nf),e(J,fa),e(J,Di),e(Di,ji),e(J,l3),b(fo,Df,_e),b(fo,Be,_e),e(Be,co),e(Be,qi),e(qi,Gn),e(Be,i3),e(Be,On),e(On,Xn),e(Be,d3),e(Be,Gi),e(Gi,Vn),e(Be,c3),e(Be,Oi),e(Oi,jf),e(Be,qa)},d(fo){fo&&t(J),fo&&t(Df),fo&&t(Be)}}}function FMt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function CMt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function MMt(Ii){let J,$e,de,pe,io,fe,Me,Vo,Ni,Nf,fa,Di,ji,l3,Df,Be,co,qi,Gn,i3,On,Xn,d3,Gi,Vn,c3,Oi,jf,qa,fo,_e,Z8,Xi,e7,o7,zo,Ga,r7,qf,t7,b$e,nke,Vi,Gf,GQ,f3,v$e,OQ,T$e,ske,zn,F$e,XQ,C$e,M$e,VQ,E$e,y$e,lke,m3,ike,a7,w$e,dke,Of,cke,zi,Xf,zQ,g3,A$e,WQ,L$e,fke,Wo,h3,B$e,p3,x$e,n7,k$e,R$e,S$e,_3,P$e,QQ,$$e,I$e,N$e,mo,u3,D$e,HQ,j$e,q$e,Wi,G$e,UQ,O$e,X$e,JQ,V$e,z$e,W$e,v,Vf,YQ,Q$e,H$e,s7,U$e,J$e,Y$e,zf,KQ,K$e,Z$e,l7,eIe,oIe,rIe,Wf,ZQ,tIe,aIe,i7,nIe,sIe,lIe,Qf,eH,iIe,dIe,d7,cIe,fIe,mIe,Hf,oH,gIe,hIe,c7,pIe,_Ie,uIe,Uf,rH,bIe,vIe,f7,TIe,FIe,CIe,Jf,tH,MIe,EIe,m7,yIe,wIe,AIe,Yf,aH,LIe,BIe,g7,xIe,kIe,RIe,Kf,nH,SIe,PIe,h7,$Ie,IIe,NIe,Zf,sH,DIe,jIe,p7,qIe,GIe,OIe,em,lH,XIe,VIe,_7,zIe,WIe,QIe,om,iH,HIe,UIe,u7,JIe,YIe,KIe,rm,dH,ZIe,eNe,b7,oNe,rNe,tNe,tm,cH,aNe,nNe,v7,sNe,lNe,iNe,am,fH,dNe,cNe,T7,fNe,mNe,gNe,nm,mH,hNe,pNe,F7,_Ne,uNe,bNe,sm,gH,vNe,TNe,C7,FNe,CNe,MNe,lm,hH,ENe,yNe,M7,wNe,ANe,LNe,im,pH,BNe,xNe,E7,kNe,RNe,SNe,dm,_H,PNe,$Ne,y7,INe,NNe,DNe,cm,uH,jNe,qNe,w7,GNe,ONe,XNe,fm,bH,VNe,zNe,A7,WNe,QNe,HNe,mm,vH,UNe,JNe,L7,YNe,KNe,ZNe,gm,TH,eDe,oDe,B7,rDe,tDe,aDe,hm,FH,nDe,sDe,x7,lDe,iDe,dDe,pm,CH,cDe,fDe,k7,mDe,gDe,hDe,_m,MH,pDe,_De,R7,uDe,bDe,vDe,um,EH,TDe,FDe,S7,CDe,MDe,EDe,bm,yH,yDe,wDe,P7,ADe,LDe,BDe,vm,wH,xDe,kDe,$7,RDe,SDe,PDe,Tm,AH,$De,IDe,I7,NDe,DDe,jDe,Fm,LH,qDe,GDe,N7,ODe,XDe,VDe,Cm,BH,zDe,WDe,D7,QDe,HDe,UDe,Mm,xH,JDe,YDe,j7,KDe,ZDe,eje,Em,kH,oje,rje,q7,tje,aje,nje,ym,RH,sje,lje,G7,ije,dje,cje,wm,SH,fje,mje,O7,gje,hje,pje,Am,PH,_je,uje,X7,bje,vje,Tje,Lm,$H,Fje,Cje,V7,Mje,Eje,yje,Bm,IH,wje,Aje,z7,Lje,Bje,xje,xm,NH,kje,Rje,W7,Sje,Pje,$je,km,DH,Ije,Nje,Q7,Dje,jje,qje,Rm,jH,Gje,Oje,H7,Xje,Vje,zje,Sm,qH,Wje,Qje,U7,Hje,Uje,Jje,Pm,GH,Yje,Kje,J7,Zje,eqe,oqe,$m,OH,rqe,tqe,Y7,aqe,nqe,sqe,Im,XH,lqe,iqe,K7,dqe,cqe,fqe,Nm,VH,mqe,gqe,Z7,hqe,pqe,_qe,Dm,zH,uqe,bqe,eB,vqe,Tqe,Fqe,jm,WH,Cqe,Mqe,oB,Eqe,yqe,wqe,qm,QH,Aqe,Lqe,rB,Bqe,xqe,kqe,Gm,HH,Rqe,Sqe,tB,Pqe,$qe,Iqe,Om,UH,Nqe,Dqe,aB,jqe,qqe,Gqe,Xm,JH,Oqe,Xqe,nB,Vqe,zqe,Wqe,Vm,YH,Qqe,Hqe,sB,Uqe,Jqe,Yqe,zm,KH,Kqe,Zqe,lB,eGe,oGe,rGe,Wm,ZH,tGe,aGe,iB,nGe,sGe,lGe,Qm,eU,iGe,dGe,dB,cGe,fGe,mGe,Hm,oU,gGe,hGe,cB,pGe,_Ge,uGe,Um,rU,bGe,vGe,fB,TGe,FGe,CGe,Jm,tU,MGe,EGe,mB,yGe,wGe,AGe,Ym,aU,LGe,BGe,gB,xGe,kGe,RGe,Km,nU,SGe,PGe,hB,$Ge,IGe,NGe,Zm,sU,DGe,jGe,pB,qGe,GGe,OGe,eg,lU,XGe,VGe,_B,zGe,WGe,QGe,og,iU,HGe,UGe,uB,JGe,YGe,KGe,rg,dU,ZGe,eOe,bB,oOe,rOe,tOe,tg,cU,aOe,nOe,vB,sOe,lOe,iOe,ag,fU,dOe,cOe,TB,fOe,mOe,gOe,ng,mU,hOe,pOe,FB,_Oe,uOe,bOe,sg,gU,vOe,TOe,CB,FOe,COe,MOe,lg,hU,EOe,yOe,MB,wOe,AOe,LOe,ig,pU,BOe,xOe,EB,kOe,ROe,SOe,dg,_U,POe,$Oe,yB,IOe,NOe,DOe,cg,uU,jOe,qOe,wB,GOe,OOe,XOe,fg,bU,VOe,zOe,AB,WOe,QOe,HOe,mg,vU,UOe,JOe,LB,YOe,KOe,ZOe,gg,TU,eXe,oXe,BB,rXe,tXe,aXe,hg,FU,nXe,sXe,xB,lXe,iXe,dXe,pg,CU,cXe,fXe,kB,mXe,gXe,hXe,_g,MU,pXe,_Xe,RB,uXe,bXe,vXe,ug,EU,TXe,FXe,SB,CXe,MXe,EXe,bg,yU,yXe,wXe,PB,AXe,LXe,BXe,vg,wU,xXe,kXe,$B,RXe,SXe,PXe,Tg,AU,$Xe,IXe,IB,NXe,DXe,jXe,Fg,LU,qXe,GXe,NB,OXe,XXe,VXe,Cg,BU,zXe,WXe,DB,QXe,HXe,UXe,Mg,xU,JXe,YXe,jB,KXe,ZXe,eVe,Eg,kU,oVe,rVe,qB,tVe,aVe,nVe,yg,RU,sVe,lVe,GB,iVe,dVe,cVe,wg,SU,fVe,mVe,OB,gVe,hVe,pVe,Ag,PU,_Ve,uVe,XB,bVe,vVe,TVe,Lg,$U,FVe,CVe,VB,MVe,EVe,yVe,Bg,IU,wVe,AVe,zB,LVe,BVe,xVe,xg,NU,kVe,RVe,WB,SVe,PVe,$Ve,kg,DU,IVe,NVe,QB,DVe,jVe,qVe,Rg,jU,GVe,OVe,HB,XVe,VVe,zVe,Sg,qU,WVe,QVe,UB,HVe,UVe,JVe,GU,YVe,KVe,b3,ZVe,Pg,v3,eze,OU,oze,mke,Qi,$g,XU,T3,rze,VU,tze,gke,Qo,F3,aze,C3,nze,JB,sze,lze,ize,M3,dze,zU,cze,fze,mze,go,E3,gze,WU,hze,pze,Oa,_ze,QU,uze,bze,HU,vze,Tze,UU,Fze,Cze,Mze,E,Wn,JU,Eze,yze,YB,wze,Aze,KB,Lze,Bze,xze,Qn,YU,kze,Rze,ZB,Sze,Pze,ex,$ze,Ize,Nze,Hn,KU,Dze,jze,ox,qze,Gze,rx,Oze,Xze,Vze,Ig,ZU,zze,Wze,tx,Qze,Hze,Uze,Un,eJ,Jze,Yze,ax,Kze,Zze,nx,eWe,oWe,rWe,Ng,oJ,tWe,aWe,sx,nWe,sWe,lWe,Dg,rJ,iWe,dWe,lx,cWe,fWe,mWe,jg,tJ,gWe,hWe,ix,pWe,_We,uWe,Jn,aJ,bWe,vWe,dx,TWe,FWe,cx,CWe,MWe,EWe,Yn,nJ,yWe,wWe,fx,AWe,LWe,mx,BWe,xWe,kWe,Kn,sJ,RWe,SWe,gx,PWe,$We,hx,IWe,NWe,DWe,qg,lJ,jWe,qWe,px,GWe,OWe,XWe,Gg,iJ,VWe,zWe,_x,WWe,QWe,HWe,Zn,dJ,UWe,JWe,ux,YWe,KWe,bx,ZWe,eQe,oQe,Og,cJ,rQe,tQe,vx,aQe,nQe,sQe,es,fJ,lQe,iQe,Tx,dQe,cQe,Fx,fQe,mQe,gQe,os,mJ,hQe,pQe,Cx,_Qe,uQe,Mx,bQe,vQe,TQe,rs,gJ,FQe,CQe,Ex,MQe,EQe,hJ,yQe,wQe,AQe,Xg,pJ,LQe,BQe,yx,xQe,kQe,RQe,ts,_J,SQe,PQe,wx,$Qe,IQe,Ax,NQe,DQe,jQe,Vg,uJ,qQe,GQe,Lx,OQe,XQe,VQe,as,bJ,zQe,WQe,Bx,QQe,HQe,xx,UQe,JQe,YQe,ns,vJ,KQe,ZQe,kx,eHe,oHe,Rx,rHe,tHe,aHe,ss,TJ,nHe,sHe,Sx,lHe,iHe,Px,dHe,cHe,fHe,zg,FJ,mHe,gHe,$x,hHe,pHe,_He,ls,CJ,uHe,bHe,Ix,vHe,THe,Nx,FHe,CHe,MHe,Wg,MJ,EHe,yHe,Dx,wHe,AHe,LHe,is,EJ,BHe,xHe,jx,kHe,RHe,qx,SHe,PHe,$He,ds,yJ,IHe,NHe,Gx,DHe,jHe,Ox,qHe,GHe,OHe,cs,wJ,XHe,VHe,Xx,zHe,WHe,Vx,QHe,HHe,UHe,fs,AJ,JHe,YHe,zx,KHe,ZHe,Wx,eUe,oUe,rUe,Qg,LJ,tUe,aUe,Qx,nUe,sUe,lUe,ms,BJ,iUe,dUe,Hx,cUe,fUe,Ux,mUe,gUe,hUe,gs,xJ,pUe,_Ue,Jx,uUe,bUe,Yx,vUe,TUe,FUe,hs,kJ,CUe,MUe,Kx,EUe,yUe,Zx,wUe,AUe,LUe,ps,RJ,BUe,xUe,ek,kUe,RUe,ok,SUe,PUe,$Ue,_s,SJ,IUe,NUe,rk,DUe,jUe,tk,qUe,GUe,OUe,us,PJ,XUe,VUe,ak,zUe,WUe,nk,QUe,HUe,UUe,Hg,$J,JUe,YUe,sk,KUe,ZUe,eJe,bs,IJ,oJe,rJe,lk,tJe,aJe,ik,nJe,sJe,lJe,Ug,NJ,iJe,dJe,dk,cJe,fJe,mJe,Jg,DJ,gJe,hJe,ck,pJe,_Je,uJe,vs,jJ,bJe,vJe,fk,TJe,FJe,mk,CJe,MJe,EJe,Ts,qJ,yJe,wJe,gk,AJe,LJe,hk,BJe,xJe,kJe,Yg,GJ,RJe,SJe,pk,PJe,$Je,IJe,Fs,OJ,NJe,DJe,_k,jJe,qJe,uk,GJe,OJe,XJe,Cs,XJ,VJe,zJe,bk,WJe,QJe,vk,HJe,UJe,JJe,Ms,VJ,YJe,KJe,Tk,ZJe,eYe,Fk,oYe,rYe,tYe,Es,zJ,aYe,nYe,Ck,sYe,lYe,Mk,iYe,dYe,cYe,ys,WJ,fYe,mYe,Ek,gYe,hYe,yk,pYe,_Ye,uYe,Kg,QJ,bYe,vYe,wk,TYe,FYe,CYe,Zg,HJ,MYe,EYe,Ak,yYe,wYe,AYe,eh,UJ,LYe,BYe,Lk,xYe,kYe,RYe,oh,JJ,SYe,PYe,Bk,$Ye,IYe,NYe,ws,YJ,DYe,jYe,xk,qYe,GYe,kk,OYe,XYe,VYe,rh,KJ,zYe,WYe,Rk,QYe,HYe,UYe,As,ZJ,JYe,YYe,Sk,KYe,ZYe,Pk,eKe,oKe,rKe,Ls,eY,tKe,aKe,$k,nKe,sKe,Ik,lKe,iKe,dKe,Bs,oY,cKe,fKe,Nk,mKe,gKe,Dk,hKe,pKe,_Ke,xs,rY,uKe,bKe,jk,vKe,TKe,qk,FKe,CKe,MKe,ks,tY,EKe,yKe,Gk,wKe,AKe,Ok,LKe,BKe,xKe,Rs,aY,kKe,RKe,Xk,SKe,PKe,Vk,$Ke,IKe,NKe,th,nY,DKe,jKe,zk,qKe,GKe,OKe,ah,sY,XKe,VKe,Wk,zKe,WKe,QKe,Ss,lY,HKe,UKe,Qk,JKe,YKe,Hk,KKe,ZKe,eZe,Ps,iY,oZe,rZe,Uk,tZe,aZe,Jk,nZe,sZe,lZe,$s,dY,iZe,dZe,Yk,cZe,fZe,Kk,mZe,gZe,hZe,nh,cY,pZe,_Ze,Zk,uZe,bZe,vZe,sh,fY,TZe,FZe,eR,CZe,MZe,EZe,lh,mY,yZe,wZe,oR,AZe,LZe,BZe,ih,gY,xZe,kZe,rR,RZe,SZe,PZe,Is,hY,$Ze,IZe,tR,NZe,DZe,aR,jZe,qZe,GZe,dh,pY,OZe,XZe,nR,VZe,zZe,WZe,ch,_Y,QZe,HZe,sR,UZe,JZe,YZe,Ns,uY,KZe,ZZe,lR,eeo,oeo,iR,reo,teo,aeo,Ds,bY,neo,seo,dR,leo,ieo,cR,deo,ceo,feo,vY,meo,geo,y3,heo,fh,w3,peo,TY,_eo,hke,Hi,mh,FY,A3,ueo,CY,beo,pke,Ho,L3,veo,B3,Teo,fR,Feo,Ceo,Meo,x3,Eeo,MY,yeo,weo,Aeo,Ie,k3,Leo,EY,Beo,xeo,Xa,keo,yY,Reo,Seo,wY,Peo,$eo,AY,Ieo,Neo,Deo,re,gh,LY,jeo,qeo,mR,Geo,Oeo,Xeo,hh,BY,Veo,zeo,gR,Weo,Qeo,Heo,ph,xY,Ueo,Jeo,hR,Yeo,Keo,Zeo,_h,kY,eoo,ooo,pR,roo,too,aoo,uh,RY,noo,soo,_R,loo,ioo,doo,bh,SY,coo,foo,uR,moo,goo,hoo,vh,PY,poo,_oo,bR,uoo,boo,voo,Th,$Y,Too,Foo,vR,Coo,Moo,Eoo,Fh,IY,yoo,woo,TR,Aoo,Loo,Boo,Ch,NY,xoo,koo,FR,Roo,Soo,Poo,Mh,DY,$oo,Ioo,CR,Noo,Doo,joo,Eh,jY,qoo,Goo,MR,Ooo,Xoo,Voo,yh,qY,zoo,Woo,ER,Qoo,Hoo,Uoo,wh,GY,Joo,Yoo,yR,Koo,Zoo,ero,Ah,OY,oro,rro,wR,tro,aro,nro,Lh,XY,sro,lro,AR,iro,dro,cro,Bh,VY,fro,mro,LR,gro,hro,pro,xh,zY,_ro,uro,BR,bro,vro,Tro,kh,Fro,WY,Cro,Mro,R3,Ero,Rh,S3,yro,QY,wro,_ke,Ui,Sh,HY,P3,Aro,UY,Lro,uke,Uo,$3,Bro,I3,xro,xR,kro,Rro,Sro,N3,Pro,JY,$ro,Iro,Nro,Ne,D3,Dro,YY,jro,qro,Ji,Gro,KY,Oro,Xro,ZY,Vro,zro,Wro,xe,Ph,eK,Qro,Hro,kR,Uro,Jro,Yro,$h,oK,Kro,Zro,RR,eto,oto,rto,Ih,rK,tto,ato,SR,nto,sto,lto,Nh,tK,ito,dto,PR,cto,fto,mto,Dh,aK,gto,hto,$R,pto,_to,uto,jh,nK,bto,vto,IR,Tto,Fto,Cto,qh,sK,Mto,Eto,NR,yto,wto,Ato,Gh,lK,Lto,Bto,DR,xto,kto,Rto,Oh,Sto,iK,Pto,$to,j3,Ito,Xh,q3,Nto,dK,Dto,bke,Yi,Vh,cK,G3,jto,fK,qto,vke,Jo,O3,Gto,Ki,Oto,mK,Xto,Vto,gK,zto,Wto,Qto,X3,Hto,hK,Uto,Jto,Yto,Vr,V3,Kto,pK,Zto,eao,Zi,oao,_K,rao,tao,uK,aao,nao,sao,bK,lao,iao,z3,dao,De,W3,cao,vK,fao,mao,Va,gao,TK,hao,pao,FK,_ao,uao,CK,bao,vao,Tao,F,zh,MK,Fao,Cao,jR,Mao,Eao,yao,Wh,EK,wao,Aao,qR,Lao,Bao,xao,Qh,yK,kao,Rao,GR,Sao,Pao,$ao,Hh,wK,Iao,Nao,OR,Dao,jao,qao,Uh,AK,Gao,Oao,XR,Xao,Vao,zao,Jh,LK,Wao,Qao,VR,Hao,Uao,Jao,Yh,BK,Yao,Kao,zR,Zao,eno,ono,Kh,xK,rno,tno,WR,ano,nno,sno,Zh,kK,lno,ino,QR,dno,cno,fno,ep,RK,mno,gno,HR,hno,pno,_no,op,SK,uno,bno,UR,vno,Tno,Fno,rp,PK,Cno,Mno,JR,Eno,yno,wno,tp,$K,Ano,Lno,YR,Bno,xno,kno,ap,IK,Rno,Sno,KR,Pno,$no,Ino,np,NK,Nno,Dno,ZR,jno,qno,Gno,sp,DK,Ono,Xno,eS,Vno,zno,Wno,lp,jK,Qno,Hno,oS,Uno,Jno,Yno,ip,qK,Kno,Zno,rS,eso,oso,rso,dp,GK,tso,aso,tS,nso,sso,lso,cp,OK,iso,dso,aS,cso,fso,mso,fp,XK,gso,hso,nS,pso,_so,uso,mp,VK,bso,vso,sS,Tso,Fso,Cso,gp,zK,Mso,Eso,lS,yso,wso,Aso,hp,WK,Lso,Bso,iS,xso,kso,Rso,pp,QK,Sso,Pso,dS,$so,Iso,Nso,_p,HK,Dso,jso,cS,qso,Gso,Oso,up,UK,Xso,Vso,fS,zso,Wso,Qso,bp,JK,Hso,Uso,mS,Jso,Yso,Kso,js,YK,Zso,elo,gS,olo,rlo,hS,tlo,alo,nlo,vp,KK,slo,llo,pS,ilo,dlo,clo,Tp,ZK,flo,mlo,_S,glo,hlo,plo,Fp,eZ,_lo,ulo,uS,blo,vlo,Tlo,Cp,oZ,Flo,Clo,bS,Mlo,Elo,ylo,Mp,rZ,wlo,Alo,vS,Llo,Blo,xlo,Ep,tZ,klo,Rlo,TS,Slo,Plo,$lo,yp,aZ,Ilo,Nlo,FS,Dlo,jlo,qlo,wp,nZ,Glo,Olo,CS,Xlo,Vlo,zlo,Ap,sZ,Wlo,Qlo,MS,Hlo,Ulo,Jlo,Lp,lZ,Ylo,Klo,ES,Zlo,eio,oio,Bp,iZ,rio,tio,yS,aio,nio,sio,xp,dZ,lio,iio,wS,dio,cio,fio,kp,cZ,mio,gio,AS,hio,pio,_io,Rp,fZ,uio,bio,LS,vio,Tio,Fio,Sp,mZ,Cio,Mio,BS,Eio,yio,wio,Pp,gZ,Aio,Lio,xS,Bio,xio,kio,$p,hZ,Rio,Sio,kS,Pio,$io,Iio,Ip,pZ,Nio,Dio,RS,jio,qio,Gio,Np,_Z,Oio,Xio,SS,Vio,zio,Wio,Dp,uZ,Qio,Hio,PS,Uio,Jio,Yio,jp,bZ,Kio,Zio,$S,edo,odo,rdo,qp,vZ,tdo,ado,IS,ndo,sdo,ldo,Gp,TZ,ido,ddo,NS,cdo,fdo,mdo,Op,FZ,gdo,hdo,DS,pdo,_do,udo,Xp,CZ,bdo,vdo,jS,Tdo,Fdo,Cdo,Vp,MZ,Mdo,Edo,qS,ydo,wdo,Ado,zp,EZ,Ldo,Bdo,GS,xdo,kdo,Rdo,Wp,yZ,Sdo,Pdo,OS,$do,Ido,Ndo,Qp,wZ,Ddo,jdo,XS,qdo,Gdo,Odo,Hp,AZ,Xdo,Vdo,VS,zdo,Wdo,Qdo,Up,LZ,Hdo,Udo,zS,Jdo,Ydo,Kdo,Jp,BZ,Zdo,eco,WS,oco,rco,tco,Yp,xZ,aco,nco,QS,sco,lco,ico,Kp,kZ,dco,cco,HS,fco,mco,gco,Zp,RZ,hco,pco,US,_co,uco,bco,e_,SZ,vco,Tco,JS,Fco,Cco,Mco,o_,PZ,Eco,yco,YS,wco,Aco,Lco,r_,$Z,Bco,xco,KS,kco,Rco,Sco,t_,IZ,Pco,$co,ZS,Ico,Nco,Dco,a_,NZ,jco,qco,eP,Gco,Oco,Xco,n_,DZ,Vco,zco,oP,Wco,Qco,Hco,s_,jZ,Uco,Jco,rP,Yco,Kco,Zco,l_,qZ,efo,ofo,tP,rfo,tfo,afo,i_,GZ,nfo,sfo,aP,lfo,ifo,dfo,d_,OZ,cfo,ffo,nP,mfo,gfo,hfo,c_,XZ,pfo,_fo,sP,ufo,bfo,vfo,f_,VZ,Tfo,Ffo,lP,Cfo,Mfo,Efo,m_,zZ,yfo,wfo,iP,Afo,Lfo,Bfo,g_,WZ,xfo,kfo,dP,Rfo,Sfo,Pfo,h_,QZ,$fo,Ifo,cP,Nfo,Dfo,jfo,p_,HZ,qfo,Gfo,fP,Ofo,Xfo,Vfo,__,UZ,zfo,Wfo,mP,Qfo,Hfo,Ufo,u_,JZ,Jfo,Yfo,gP,Kfo,Zfo,emo,b_,YZ,omo,rmo,hP,tmo,amo,nmo,v_,KZ,smo,lmo,pP,imo,dmo,cmo,T_,ZZ,fmo,mmo,_P,gmo,hmo,pmo,F_,eee,_mo,umo,uP,bmo,vmo,Tmo,C_,oee,Fmo,Cmo,bP,Mmo,Emo,ymo,M_,ree,wmo,Amo,vP,Lmo,Bmo,xmo,E_,tee,kmo,Rmo,TP,Smo,Pmo,$mo,y_,aee,Imo,Nmo,FP,Dmo,jmo,qmo,w_,nee,Gmo,Omo,CP,Xmo,Vmo,zmo,A_,Wmo,see,Qmo,Hmo,lee,Umo,Jmo,iee,Ymo,Kmo,Q3,Tke,ed,L_,dee,H3,Zmo,cee,ego,Fke,Yo,U3,ogo,od,rgo,fee,tgo,ago,mee,ngo,sgo,lgo,J3,igo,gee,dgo,cgo,fgo,zr,Y3,mgo,hee,ggo,hgo,rd,pgo,pee,_go,ugo,_ee,bgo,vgo,Tgo,uee,Fgo,Cgo,K3,Mgo,je,Z3,Ego,bee,ygo,wgo,za,Ago,vee,Lgo,Bgo,Tee,xgo,kgo,Fee,Rgo,Sgo,Pgo,k,B_,Cee,$go,Igo,MP,Ngo,Dgo,jgo,x_,Mee,qgo,Ggo,EP,Ogo,Xgo,Vgo,k_,Eee,zgo,Wgo,yP,Qgo,Hgo,Ugo,R_,yee,Jgo,Ygo,wP,Kgo,Zgo,eho,S_,wee,oho,rho,AP,tho,aho,nho,P_,Aee,sho,lho,LP,iho,dho,cho,$_,Lee,fho,mho,BP,gho,hho,pho,I_,Bee,_ho,uho,xP,bho,vho,Tho,N_,xee,Fho,Cho,kP,Mho,Eho,yho,D_,kee,who,Aho,RP,Lho,Bho,xho,j_,Ree,kho,Rho,SP,Sho,Pho,$ho,q_,See,Iho,Nho,PP,Dho,jho,qho,G_,Pee,Gho,Oho,$P,Xho,Vho,zho,O_,$ee,Who,Qho,IP,Hho,Uho,Jho,X_,Iee,Yho,Kho,NP,Zho,epo,opo,V_,Nee,rpo,tpo,DP,apo,npo,spo,z_,Dee,lpo,ipo,jP,dpo,cpo,fpo,W_,jee,mpo,gpo,qP,hpo,ppo,_po,Q_,qee,upo,bpo,GP,vpo,Tpo,Fpo,H_,Gee,Cpo,Mpo,OP,Epo,ypo,wpo,U_,Oee,Apo,Lpo,XP,Bpo,xpo,kpo,J_,Xee,Rpo,Spo,VP,Ppo,$po,Ipo,Y_,Vee,Npo,Dpo,zP,jpo,qpo,Gpo,K_,zee,Opo,Xpo,WP,Vpo,zpo,Wpo,Z_,Wee,Qpo,Hpo,QP,Upo,Jpo,Ypo,eu,Qee,Kpo,Zpo,HP,e_o,o_o,r_o,ou,Hee,t_o,a_o,UP,n_o,s_o,l_o,ru,Uee,i_o,d_o,JP,c_o,f_o,m_o,tu,Jee,g_o,h_o,YP,p_o,__o,u_o,au,Yee,b_o,v_o,KP,T_o,F_o,C_o,nu,Kee,M_o,E_o,ZP,y_o,w_o,A_o,su,Zee,L_o,B_o,e$,x_o,k_o,R_o,lu,eoe,S_o,P_o,o$,$_o,I_o,N_o,iu,ooe,D_o,j_o,r$,q_o,G_o,O_o,du,roe,X_o,V_o,t$,z_o,W_o,Q_o,cu,toe,H_o,U_o,a$,J_o,Y_o,K_o,fu,aoe,Z_o,euo,n$,ouo,ruo,tuo,mu,noe,auo,nuo,s$,suo,luo,iuo,gu,soe,duo,cuo,l$,fuo,muo,guo,hu,huo,loe,puo,_uo,ioe,uuo,buo,doe,vuo,Tuo,ey,Cke,td,pu,coe,oy,Fuo,foe,Cuo,Mke,Ko,ry,Muo,ad,Euo,moe,yuo,wuo,goe,Auo,Luo,Buo,ty,xuo,hoe,kuo,Ruo,Suo,Wr,ay,Puo,poe,$uo,Iuo,nd,Nuo,_oe,Duo,juo,uoe,quo,Guo,Ouo,boe,Xuo,Vuo,ny,zuo,qe,sy,Wuo,voe,Quo,Huo,Wa,Uuo,Toe,Juo,Yuo,Foe,Kuo,Zuo,Coe,e1o,o1o,r1o,$,_u,Moe,t1o,a1o,i$,n1o,s1o,l1o,uu,Eoe,i1o,d1o,d$,c1o,f1o,m1o,bu,yoe,g1o,h1o,c$,p1o,_1o,u1o,vu,woe,b1o,v1o,f$,T1o,F1o,C1o,Tu,Aoe,M1o,E1o,m$,y1o,w1o,A1o,Fu,Loe,L1o,B1o,g$,x1o,k1o,R1o,Cu,Boe,S1o,P1o,h$,$1o,I1o,N1o,Mu,xoe,D1o,j1o,p$,q1o,G1o,O1o,Eu,koe,X1o,V1o,_$,z1o,W1o,Q1o,yu,Roe,H1o,U1o,u$,J1o,Y1o,K1o,wu,Soe,Z1o,e9o,b$,o9o,r9o,t9o,Au,Poe,a9o,n9o,v$,s9o,l9o,i9o,Lu,$oe,d9o,c9o,T$,f9o,m9o,g9o,Bu,Ioe,h9o,p9o,F$,_9o,u9o,b9o,xu,Noe,v9o,T9o,C$,F9o,C9o,M9o,ku,Doe,E9o,y9o,M$,w9o,A9o,L9o,Ru,joe,B9o,x9o,E$,k9o,R9o,S9o,Su,qoe,P9o,$9o,y$,I9o,N9o,D9o,Pu,Goe,j9o,q9o,w$,G9o,O9o,X9o,$u,Ooe,V9o,z9o,A$,W9o,Q9o,H9o,Iu,Xoe,U9o,J9o,L$,Y9o,K9o,Z9o,Nu,Voe,ebo,obo,B$,rbo,tbo,abo,Du,zoe,nbo,sbo,x$,lbo,ibo,dbo,ju,Woe,cbo,fbo,k$,mbo,gbo,hbo,qu,Qoe,pbo,_bo,R$,ubo,bbo,vbo,Gu,Hoe,Tbo,Fbo,S$,Cbo,Mbo,Ebo,Ou,Uoe,ybo,wbo,P$,Abo,Lbo,Bbo,Xu,Joe,xbo,kbo,$$,Rbo,Sbo,Pbo,Vu,Yoe,$bo,Ibo,I$,Nbo,Dbo,jbo,zu,Koe,qbo,Gbo,N$,Obo,Xbo,Vbo,Wu,Zoe,zbo,Wbo,D$,Qbo,Hbo,Ubo,Qu,ere,Jbo,Ybo,j$,Kbo,Zbo,e5o,Hu,ore,o5o,r5o,q$,t5o,a5o,n5o,Uu,rre,s5o,l5o,G$,i5o,d5o,c5o,Ju,tre,f5o,m5o,O$,g5o,h5o,p5o,Yu,_5o,are,u5o,b5o,nre,v5o,T5o,sre,F5o,C5o,ly,Eke,sd,Ku,lre,iy,M5o,ire,E5o,yke,Zo,dy,y5o,ld,w5o,dre,A5o,L5o,cre,B5o,x5o,k5o,cy,R5o,fre,S5o,P5o,$5o,Qr,fy,I5o,mre,N5o,D5o,id,j5o,gre,q5o,G5o,hre,O5o,X5o,V5o,pre,z5o,W5o,my,Q5o,Ge,gy,H5o,_re,U5o,J5o,Qa,Y5o,ure,K5o,Z5o,bre,e2o,o2o,vre,r2o,t2o,a2o,I,Zu,Tre,n2o,s2o,X$,l2o,i2o,d2o,e1,Fre,c2o,f2o,V$,m2o,g2o,h2o,o1,Cre,p2o,_2o,z$,u2o,b2o,v2o,r1,Mre,T2o,F2o,W$,C2o,M2o,E2o,t1,Ere,y2o,w2o,Q$,A2o,L2o,B2o,a1,yre,x2o,k2o,H$,R2o,S2o,P2o,n1,wre,$2o,I2o,U$,N2o,D2o,j2o,s1,Are,q2o,G2o,J$,O2o,X2o,V2o,l1,Lre,z2o,W2o,Y$,Q2o,H2o,U2o,i1,Bre,J2o,Y2o,K$,K2o,Z2o,evo,d1,xre,ovo,rvo,Z$,tvo,avo,nvo,c1,kre,svo,lvo,eI,ivo,dvo,cvo,f1,Rre,fvo,mvo,oI,gvo,hvo,pvo,m1,Sre,_vo,uvo,rI,bvo,vvo,Tvo,g1,Pre,Fvo,Cvo,tI,Mvo,Evo,yvo,h1,$re,wvo,Avo,aI,Lvo,Bvo,xvo,p1,Ire,kvo,Rvo,nI,Svo,Pvo,$vo,_1,Nre,Ivo,Nvo,sI,Dvo,jvo,qvo,u1,Dre,Gvo,Ovo,lI,Xvo,Vvo,zvo,b1,jre,Wvo,Qvo,iI,Hvo,Uvo,Jvo,v1,qre,Yvo,Kvo,dI,Zvo,eTo,oTo,T1,Gre,rTo,tTo,cI,aTo,nTo,sTo,F1,Ore,lTo,iTo,fI,dTo,cTo,fTo,C1,Xre,mTo,gTo,mI,hTo,pTo,_To,M1,Vre,uTo,bTo,gI,vTo,TTo,FTo,E1,zre,CTo,MTo,hI,ETo,yTo,wTo,y1,Wre,ATo,LTo,pI,BTo,xTo,kTo,w1,Qre,RTo,STo,_I,PTo,$To,ITo,A1,Hre,NTo,DTo,uI,jTo,qTo,GTo,L1,Ure,OTo,XTo,bI,VTo,zTo,WTo,B1,Jre,QTo,HTo,Yre,UTo,JTo,YTo,x1,Kre,KTo,ZTo,vI,eFo,oFo,rFo,k1,Zre,tFo,aFo,TI,nFo,sFo,lFo,R1,ete,iFo,dFo,FI,cFo,fFo,mFo,S1,ote,gFo,hFo,CI,pFo,_Fo,uFo,P1,bFo,rte,vFo,TFo,tte,FFo,CFo,ate,MFo,EFo,hy,wke,dd,$1,nte,py,yFo,ste,wFo,Ake,er,_y,AFo,cd,LFo,lte,BFo,xFo,ite,kFo,RFo,SFo,uy,PFo,dte,$Fo,IFo,NFo,Hr,by,DFo,cte,jFo,qFo,fd,GFo,fte,OFo,XFo,mte,VFo,zFo,WFo,gte,QFo,HFo,vy,UFo,Oe,Ty,JFo,hte,YFo,KFo,Ha,ZFo,pte,eCo,oCo,_te,rCo,tCo,ute,aCo,nCo,sCo,se,I1,bte,lCo,iCo,MI,dCo,cCo,fCo,N1,vte,mCo,gCo,EI,hCo,pCo,_Co,D1,Tte,uCo,bCo,yI,vCo,TCo,FCo,j1,Fte,CCo,MCo,wI,ECo,yCo,wCo,q1,Cte,ACo,LCo,AI,BCo,xCo,kCo,G1,Mte,RCo,SCo,LI,PCo,$Co,ICo,O1,Ete,NCo,DCo,BI,jCo,qCo,GCo,X1,yte,OCo,XCo,xI,VCo,zCo,WCo,V1,wte,QCo,HCo,kI,UCo,JCo,YCo,z1,Ate,KCo,ZCo,RI,eMo,oMo,rMo,W1,Lte,tMo,aMo,SI,nMo,sMo,lMo,Q1,Bte,iMo,dMo,PI,cMo,fMo,mMo,H1,xte,gMo,hMo,$I,pMo,_Mo,uMo,U1,kte,bMo,vMo,II,TMo,FMo,CMo,J1,Rte,MMo,EMo,NI,yMo,wMo,AMo,Y1,Ste,LMo,BMo,DI,xMo,kMo,RMo,K1,SMo,Pte,PMo,$Mo,$te,IMo,NMo,Ite,DMo,jMo,Fy,Lke,md,Z1,Nte,Cy,qMo,Dte,GMo,Bke,or,My,OMo,gd,XMo,jte,VMo,zMo,qte,WMo,QMo,HMo,Ey,UMo,Gte,JMo,YMo,KMo,Ur,yy,ZMo,Ote,e4o,o4o,hd,r4o,Xte,t4o,a4o,Vte,n4o,s4o,l4o,zte,i4o,d4o,wy,c4o,Xe,Ay,f4o,Wte,m4o,g4o,Ua,h4o,Qte,p4o,_4o,Hte,u4o,b4o,Ute,v4o,T4o,F4o,A,e9,Jte,C4o,M4o,jI,E4o,y4o,w4o,o9,Yte,A4o,L4o,qI,B4o,x4o,k4o,r9,Kte,R4o,S4o,GI,P4o,$4o,I4o,t9,Zte,N4o,D4o,OI,j4o,q4o,G4o,a9,eae,O4o,X4o,XI,V4o,z4o,W4o,n9,oae,Q4o,H4o,VI,U4o,J4o,Y4o,s9,rae,K4o,Z4o,zI,eEo,oEo,rEo,l9,tae,tEo,aEo,WI,nEo,sEo,lEo,i9,aae,iEo,dEo,QI,cEo,fEo,mEo,d9,nae,gEo,hEo,HI,pEo,_Eo,uEo,c9,sae,bEo,vEo,UI,TEo,FEo,CEo,f9,lae,MEo,EEo,JI,yEo,wEo,AEo,m9,iae,LEo,BEo,YI,xEo,kEo,REo,g9,dae,SEo,PEo,KI,$Eo,IEo,NEo,h9,cae,DEo,jEo,ZI,qEo,GEo,OEo,p9,fae,XEo,VEo,eN,zEo,WEo,QEo,_9,mae,HEo,UEo,oN,JEo,YEo,KEo,u9,gae,ZEo,e3o,rN,o3o,r3o,t3o,b9,hae,a3o,n3o,tN,s3o,l3o,i3o,v9,pae,d3o,c3o,aN,f3o,m3o,g3o,T9,_ae,h3o,p3o,nN,_3o,u3o,b3o,F9,uae,v3o,T3o,sN,F3o,C3o,M3o,C9,bae,E3o,y3o,lN,w3o,A3o,L3o,M9,vae,B3o,x3o,iN,k3o,R3o,S3o,E9,Tae,P3o,$3o,dN,I3o,N3o,D3o,y9,Fae,j3o,q3o,cN,G3o,O3o,X3o,w9,Cae,V3o,z3o,fN,W3o,Q3o,H3o,A9,Mae,U3o,J3o,mN,Y3o,K3o,Z3o,L9,Eae,eyo,oyo,gN,ryo,tyo,ayo,B9,yae,nyo,syo,hN,lyo,iyo,dyo,x9,wae,cyo,fyo,pN,myo,gyo,hyo,k9,Aae,pyo,_yo,_N,uyo,byo,vyo,R9,Lae,Tyo,Fyo,uN,Cyo,Myo,Eyo,S9,Bae,yyo,wyo,bN,Ayo,Lyo,Byo,P9,xae,xyo,kyo,vN,Ryo,Syo,Pyo,$9,kae,$yo,Iyo,TN,Nyo,Dyo,jyo,I9,Rae,qyo,Gyo,FN,Oyo,Xyo,Vyo,N9,Sae,zyo,Wyo,CN,Qyo,Hyo,Uyo,D9,Pae,Jyo,Yyo,MN,Kyo,Zyo,ewo,j9,$ae,owo,rwo,EN,two,awo,nwo,q9,Iae,swo,lwo,yN,iwo,dwo,cwo,G9,Nae,fwo,mwo,wN,gwo,hwo,pwo,O9,Dae,_wo,uwo,AN,bwo,vwo,Two,X9,jae,Fwo,Cwo,LN,Mwo,Ewo,ywo,V9,qae,wwo,Awo,BN,Lwo,Bwo,xwo,z9,Gae,kwo,Rwo,xN,Swo,Pwo,$wo,W9,Iwo,Oae,Nwo,Dwo,Xae,jwo,qwo,Vae,Gwo,Owo,Ly,xke,pd,Q9,zae,By,Xwo,Wae,Vwo,kke,rr,xy,zwo,_d,Wwo,Qae,Qwo,Hwo,Hae,Uwo,Jwo,Ywo,ky,Kwo,Uae,Zwo,e6o,o6o,Jr,Ry,r6o,Jae,t6o,a6o,ud,n6o,Yae,s6o,l6o,Kae,i6o,d6o,c6o,Zae,f6o,m6o,Sy,g6o,Ve,Py,h6o,ene,p6o,_6o,Ja,u6o,one,b6o,v6o,rne,T6o,F6o,tne,C6o,M6o,E6o,G,H9,ane,y6o,w6o,kN,A6o,L6o,B6o,U9,nne,x6o,k6o,RN,R6o,S6o,P6o,J9,sne,$6o,I6o,SN,N6o,D6o,j6o,Y9,lne,q6o,G6o,PN,O6o,X6o,V6o,K9,ine,z6o,W6o,$N,Q6o,H6o,U6o,Z9,dne,J6o,Y6o,IN,K6o,Z6o,eAo,eb,cne,oAo,rAo,NN,tAo,aAo,nAo,ob,fne,sAo,lAo,DN,iAo,dAo,cAo,rb,mne,fAo,mAo,jN,gAo,hAo,pAo,tb,gne,_Ao,uAo,qN,bAo,vAo,TAo,ab,hne,FAo,CAo,GN,MAo,EAo,yAo,nb,pne,wAo,AAo,ON,LAo,BAo,xAo,sb,_ne,kAo,RAo,XN,SAo,PAo,$Ao,lb,une,IAo,NAo,VN,DAo,jAo,qAo,ib,bne,GAo,OAo,zN,XAo,VAo,zAo,db,vne,WAo,QAo,WN,HAo,UAo,JAo,cb,Tne,YAo,KAo,QN,ZAo,e0o,o0o,fb,Fne,r0o,t0o,HN,a0o,n0o,s0o,mb,Cne,l0o,i0o,UN,d0o,c0o,f0o,gb,Mne,m0o,g0o,JN,h0o,p0o,_0o,hb,Ene,u0o,b0o,YN,v0o,T0o,F0o,pb,yne,C0o,M0o,KN,E0o,y0o,w0o,_b,wne,A0o,L0o,ZN,B0o,x0o,k0o,ub,Ane,R0o,S0o,eD,P0o,$0o,I0o,bb,Lne,N0o,D0o,oD,j0o,q0o,G0o,vb,Bne,O0o,X0o,rD,V0o,z0o,W0o,Tb,xne,Q0o,H0o,tD,U0o,J0o,Y0o,Fb,kne,K0o,Z0o,aD,eLo,oLo,rLo,Cb,tLo,Rne,aLo,nLo,Sne,sLo,lLo,Pne,iLo,dLo,$y,Rke,bd,Mb,$ne,Iy,cLo,Ine,fLo,Ske,tr,Ny,mLo,vd,gLo,Nne,hLo,pLo,Dne,_Lo,uLo,bLo,Dy,vLo,jne,TLo,FLo,CLo,Yr,jy,MLo,qne,ELo,yLo,Td,wLo,Gne,ALo,LLo,One,BLo,xLo,kLo,Xne,RLo,SLo,qy,PLo,ze,Gy,$Lo,Vne,ILo,NLo,Ya,DLo,zne,jLo,qLo,Wne,GLo,OLo,Qne,XLo,VLo,zLo,da,Eb,Hne,WLo,QLo,nD,HLo,ULo,JLo,yb,Une,YLo,KLo,sD,ZLo,e8o,o8o,wb,Jne,r8o,t8o,lD,a8o,n8o,s8o,Ab,Yne,l8o,i8o,iD,d8o,c8o,f8o,Lb,Kne,m8o,g8o,dD,h8o,p8o,_8o,Bb,u8o,Zne,b8o,v8o,ese,T8o,F8o,ose,C8o,M8o,Oy,Pke,Fd,xb,rse,Xy,E8o,tse,y8o,$ke,ar,Vy,w8o,Cd,A8o,ase,L8o,B8o,nse,x8o,k8o,R8o,zy,S8o,sse,P8o,$8o,I8o,Kr,Wy,N8o,lse,D8o,j8o,Md,q8o,ise,G8o,O8o,dse,X8o,V8o,z8o,cse,W8o,Q8o,Qy,H8o,We,Hy,U8o,fse,J8o,Y8o,Ka,K8o,mse,Z8o,e7o,gse,o7o,r7o,hse,t7o,a7o,n7o,j,kb,pse,s7o,l7o,cD,i7o,d7o,c7o,Rb,_se,f7o,m7o,fD,g7o,h7o,p7o,Sb,use,_7o,u7o,mD,b7o,v7o,T7o,Pb,bse,F7o,C7o,gD,M7o,E7o,y7o,$b,vse,w7o,A7o,hD,L7o,B7o,x7o,Ib,Tse,k7o,R7o,pD,S7o,P7o,$7o,Nb,Fse,I7o,N7o,_D,D7o,j7o,q7o,Db,Cse,G7o,O7o,uD,X7o,V7o,z7o,jb,Mse,W7o,Q7o,bD,H7o,U7o,J7o,qb,Ese,Y7o,K7o,vD,Z7o,eBo,oBo,Gb,yse,rBo,tBo,TD,aBo,nBo,sBo,Ob,wse,lBo,iBo,FD,dBo,cBo,fBo,Xb,Ase,mBo,gBo,CD,hBo,pBo,_Bo,Vb,Lse,uBo,bBo,MD,vBo,TBo,FBo,zb,Bse,CBo,MBo,ED,EBo,yBo,wBo,Wb,xse,ABo,LBo,yD,BBo,xBo,kBo,Qb,kse,RBo,SBo,wD,PBo,$Bo,IBo,Hb,Rse,NBo,DBo,AD,jBo,qBo,GBo,Ub,Sse,OBo,XBo,LD,VBo,zBo,WBo,Jb,Pse,QBo,HBo,BD,UBo,JBo,YBo,Yb,$se,KBo,ZBo,xD,exo,oxo,rxo,Kb,Ise,txo,axo,kD,nxo,sxo,lxo,Zb,Nse,ixo,dxo,RD,cxo,fxo,mxo,e5,Dse,gxo,hxo,SD,pxo,_xo,uxo,o5,jse,bxo,vxo,PD,Txo,Fxo,Cxo,r5,qse,Mxo,Exo,$D,yxo,wxo,Axo,t5,Gse,Lxo,Bxo,ID,xxo,kxo,Rxo,a5,Ose,Sxo,Pxo,ND,$xo,Ixo,Nxo,n5,Xse,Dxo,jxo,DD,qxo,Gxo,Oxo,s5,Vse,Xxo,Vxo,jD,zxo,Wxo,Qxo,l5,zse,Hxo,Uxo,qD,Jxo,Yxo,Kxo,i5,Wse,Zxo,eko,GD,oko,rko,tko,d5,Qse,ako,nko,OD,sko,lko,iko,c5,dko,Hse,cko,fko,Use,mko,gko,Jse,hko,pko,Uy,Ike,Ed,f5,Yse,Jy,_ko,Kse,uko,Nke,nr,Yy,bko,yd,vko,Zse,Tko,Fko,ele,Cko,Mko,Eko,Ky,yko,ole,wko,Ako,Lko,Zr,Zy,Bko,rle,xko,kko,wd,Rko,tle,Sko,Pko,ale,$ko,Iko,Nko,nle,Dko,jko,ew,qko,Qe,ow,Gko,sle,Oko,Xko,Za,Vko,lle,zko,Wko,ile,Qko,Hko,dle,Uko,Jko,Yko,R,m5,cle,Kko,Zko,XD,eRo,oRo,rRo,g5,fle,tRo,aRo,VD,nRo,sRo,lRo,h5,mle,iRo,dRo,zD,cRo,fRo,mRo,p5,gle,gRo,hRo,WD,pRo,_Ro,uRo,_5,hle,bRo,vRo,QD,TRo,FRo,CRo,u5,ple,MRo,ERo,HD,yRo,wRo,ARo,b5,_le,LRo,BRo,UD,xRo,kRo,RRo,v5,ule,SRo,PRo,JD,$Ro,IRo,NRo,T5,ble,DRo,jRo,YD,qRo,GRo,ORo,F5,vle,XRo,VRo,KD,zRo,WRo,QRo,C5,Tle,HRo,URo,ZD,JRo,YRo,KRo,M5,Fle,ZRo,eSo,ej,oSo,rSo,tSo,E5,Cle,aSo,nSo,oj,sSo,lSo,iSo,y5,Mle,dSo,cSo,rj,fSo,mSo,gSo,w5,Ele,hSo,pSo,tj,_So,uSo,bSo,A5,yle,vSo,TSo,aj,FSo,CSo,MSo,L5,wle,ESo,ySo,nj,wSo,ASo,LSo,B5,Ale,BSo,xSo,sj,kSo,RSo,SSo,x5,Lle,PSo,$So,lj,ISo,NSo,DSo,k5,Ble,jSo,qSo,ij,GSo,OSo,XSo,R5,xle,VSo,zSo,dj,WSo,QSo,HSo,S5,kle,USo,JSo,cj,YSo,KSo,ZSo,P5,Rle,ePo,oPo,fj,rPo,tPo,aPo,$5,Sle,nPo,sPo,mj,lPo,iPo,dPo,I5,Ple,cPo,fPo,gj,mPo,gPo,hPo,N5,$le,pPo,_Po,hj,uPo,bPo,vPo,D5,Ile,TPo,FPo,pj,CPo,MPo,EPo,j5,Nle,yPo,wPo,_j,APo,LPo,BPo,q5,Dle,xPo,kPo,uj,RPo,SPo,PPo,G5,jle,$Po,IPo,bj,NPo,DPo,jPo,O5,qle,qPo,GPo,vj,OPo,XPo,VPo,X5,Gle,zPo,WPo,Tj,QPo,HPo,UPo,V5,Ole,JPo,YPo,Fj,KPo,ZPo,e$o,z5,Xle,o$o,r$o,Cj,t$o,a$o,n$o,W5,Vle,s$o,l$o,Mj,i$o,d$o,c$o,Q5,zle,f$o,m$o,Ej,g$o,h$o,p$o,H5,Wle,_$o,u$o,yj,b$o,v$o,T$o,U5,Qle,F$o,C$o,wj,M$o,E$o,y$o,J5,Hle,w$o,A$o,Aj,L$o,B$o,x$o,Y5,k$o,Ule,R$o,S$o,Jle,P$o,$$o,Yle,I$o,N$o,rw,Dke,Ad,K5,Kle,tw,D$o,Zle,j$o,jke,sr,aw,q$o,Ld,G$o,eie,O$o,X$o,oie,V$o,z$o,W$o,nw,Q$o,rie,H$o,U$o,J$o,et,sw,Y$o,tie,K$o,Z$o,Bd,eIo,aie,oIo,rIo,nie,tIo,aIo,nIo,sie,sIo,lIo,lw,iIo,He,iw,dIo,lie,cIo,fIo,en,mIo,iie,gIo,hIo,die,pIo,_Io,cie,uIo,bIo,vIo,fie,Z5,mie,TIo,FIo,Lj,CIo,MIo,EIo,e2,yIo,gie,wIo,AIo,hie,LIo,BIo,pie,xIo,kIo,dw,qke,xd,o2,_ie,cw,RIo,uie,SIo,Gke,lr,fw,PIo,kd,$Io,bie,IIo,NIo,vie,DIo,jIo,qIo,mw,GIo,Tie,OIo,XIo,VIo,ot,gw,zIo,Fie,WIo,QIo,Rd,HIo,Cie,UIo,JIo,Mie,YIo,KIo,ZIo,Eie,eNo,oNo,hw,rNo,Ue,pw,tNo,yie,aNo,nNo,on,sNo,wie,lNo,iNo,Aie,dNo,cNo,Lie,fNo,mNo,gNo,me,r2,Bie,hNo,pNo,Bj,_No,uNo,bNo,t2,xie,vNo,TNo,xj,FNo,CNo,MNo,qs,kie,ENo,yNo,kj,wNo,ANo,Rj,LNo,BNo,xNo,a2,Rie,kNo,RNo,Sj,SNo,PNo,$No,ma,Sie,INo,NNo,Pj,DNo,jNo,$j,qNo,GNo,Ij,ONo,XNo,VNo,n2,Pie,zNo,WNo,Nj,QNo,HNo,UNo,s2,$ie,JNo,YNo,Dj,KNo,ZNo,eDo,l2,Iie,oDo,rDo,jj,tDo,aDo,nDo,i2,Nie,sDo,lDo,qj,iDo,dDo,cDo,d2,Die,fDo,mDo,Gj,gDo,hDo,pDo,c2,jie,_Do,uDo,Oj,bDo,vDo,TDo,f2,FDo,qie,CDo,MDo,Gie,EDo,yDo,Oie,wDo,ADo,_w,Oke,Sd,m2,Xie,uw,LDo,Vie,BDo,Xke,ir,bw,xDo,Pd,kDo,zie,RDo,SDo,Wie,PDo,$Do,IDo,vw,NDo,Qie,DDo,jDo,qDo,rt,Tw,GDo,Hie,ODo,XDo,$d,VDo,Uie,zDo,WDo,Jie,QDo,HDo,UDo,Yie,JDo,YDo,Fw,KDo,Je,Cw,ZDo,Kie,ejo,ojo,rn,rjo,Zie,tjo,ajo,ede,njo,sjo,ode,ljo,ijo,djo,rde,g2,tde,cjo,fjo,Xj,mjo,gjo,hjo,h2,pjo,ade,_jo,ujo,nde,bjo,vjo,sde,Tjo,Fjo,Mw,Vke,Id,p2,lde,Ew,Cjo,ide,Mjo,zke,dr,yw,Ejo,Nd,yjo,dde,wjo,Ajo,cde,Ljo,Bjo,xjo,ww,kjo,fde,Rjo,Sjo,Pjo,tt,Aw,$jo,mde,Ijo,Njo,Dd,Djo,gde,jjo,qjo,hde,Gjo,Ojo,Xjo,pde,Vjo,zjo,Lw,Wjo,Ye,Bw,Qjo,_de,Hjo,Ujo,tn,Jjo,ude,Yjo,Kjo,bde,Zjo,eqo,vde,oqo,rqo,tqo,ke,_2,Tde,aqo,nqo,Vj,sqo,lqo,iqo,u2,Fde,dqo,cqo,zj,fqo,mqo,gqo,b2,Cde,hqo,pqo,Wj,_qo,uqo,bqo,v2,Mde,vqo,Tqo,Qj,Fqo,Cqo,Mqo,T2,Ede,Eqo,yqo,Hj,wqo,Aqo,Lqo,F2,yde,Bqo,xqo,Uj,kqo,Rqo,Sqo,C2,wde,Pqo,$qo,Jj,Iqo,Nqo,Dqo,M2,Ade,jqo,qqo,Yj,Gqo,Oqo,Xqo,E2,Vqo,Lde,zqo,Wqo,Bde,Qqo,Hqo,xde,Uqo,Jqo,xw,Wke,jd,y2,kde,kw,Yqo,Rde,Kqo,Qke,cr,Rw,Zqo,qd,eGo,Sde,oGo,rGo,Pde,tGo,aGo,nGo,Sw,sGo,$de,lGo,iGo,dGo,at,Pw,cGo,Ide,fGo,mGo,Gd,gGo,Nde,hGo,pGo,Dde,_Go,uGo,bGo,jde,vGo,TGo,$w,FGo,Ke,Iw,CGo,qde,MGo,EGo,an,yGo,Gde,wGo,AGo,Ode,LGo,BGo,Xde,xGo,kGo,RGo,nn,w2,Vde,SGo,PGo,Kj,$Go,IGo,NGo,A2,zde,DGo,jGo,Zj,qGo,GGo,OGo,L2,Wde,XGo,VGo,eq,zGo,WGo,QGo,B2,Qde,HGo,UGo,oq,JGo,YGo,KGo,x2,ZGo,Hde,eOo,oOo,Ude,rOo,tOo,Jde,aOo,nOo,Nw,Hke,Od,k2,Yde,Dw,sOo,Kde,lOo,Uke,fr,jw,iOo,Xd,dOo,Zde,cOo,fOo,ece,mOo,gOo,hOo,qw,pOo,oce,_Oo,uOo,bOo,nt,Gw,vOo,rce,TOo,FOo,Vd,COo,tce,MOo,EOo,ace,yOo,wOo,AOo,nce,LOo,BOo,Ow,xOo,Ze,Xw,kOo,sce,ROo,SOo,sn,POo,lce,$Oo,IOo,ice,NOo,DOo,dce,jOo,qOo,GOo,Re,R2,cce,OOo,XOo,rq,VOo,zOo,WOo,S2,fce,QOo,HOo,tq,UOo,JOo,YOo,P2,mce,KOo,ZOo,aq,eXo,oXo,rXo,$2,gce,tXo,aXo,nq,nXo,sXo,lXo,I2,hce,iXo,dXo,sq,cXo,fXo,mXo,N2,pce,gXo,hXo,lq,pXo,_Xo,uXo,D2,_ce,bXo,vXo,iq,TXo,FXo,CXo,j2,uce,MXo,EXo,dq,yXo,wXo,AXo,q2,LXo,bce,BXo,xXo,vce,kXo,RXo,Tce,SXo,PXo,Vw,Jke,zd,G2,Fce,zw,$Xo,Cce,IXo,Yke,mr,Ww,NXo,Wd,DXo,Mce,jXo,qXo,Ece,GXo,OXo,XXo,Qw,VXo,yce,zXo,WXo,QXo,st,Hw,HXo,wce,UXo,JXo,Qd,YXo,Ace,KXo,ZXo,Lce,eVo,oVo,rVo,Bce,tVo,aVo,Uw,nVo,eo,Jw,sVo,xce,lVo,iVo,ln,dVo,kce,cVo,fVo,Rce,mVo,gVo,Sce,hVo,pVo,_Vo,Yw,O2,Pce,uVo,bVo,cq,vVo,TVo,FVo,X2,$ce,CVo,MVo,fq,EVo,yVo,wVo,V2,AVo,Ice,LVo,BVo,Nce,xVo,kVo,Dce,RVo,SVo,Kw,Kke,Hd,z2,jce,Zw,PVo,qce,$Vo,Zke,gr,e6,IVo,Ud,NVo,Gce,DVo,jVo,Oce,qVo,GVo,OVo,o6,XVo,Xce,VVo,zVo,WVo,lt,r6,QVo,Vce,HVo,UVo,Jd,JVo,zce,YVo,KVo,Wce,ZVo,ezo,ozo,Qce,rzo,tzo,t6,azo,oo,a6,nzo,Hce,szo,lzo,dn,izo,Uce,dzo,czo,Jce,fzo,mzo,Yce,gzo,hzo,pzo,cn,W2,Kce,_zo,uzo,mq,bzo,vzo,Tzo,Q2,Zce,Fzo,Czo,gq,Mzo,Ezo,yzo,H2,efe,wzo,Azo,hq,Lzo,Bzo,xzo,U2,ofe,kzo,Rzo,pq,Szo,Pzo,$zo,J2,Izo,rfe,Nzo,Dzo,tfe,jzo,qzo,afe,Gzo,Ozo,n6,eRe,Yd,Y2,nfe,s6,Xzo,sfe,Vzo,oRe,hr,l6,zzo,Kd,Wzo,lfe,Qzo,Hzo,ife,Uzo,Jzo,Yzo,i6,Kzo,dfe,Zzo,eWo,oWo,it,d6,rWo,cfe,tWo,aWo,Zd,nWo,ffe,sWo,lWo,mfe,iWo,dWo,cWo,gfe,fWo,mWo,c6,gWo,ro,f6,hWo,hfe,pWo,_Wo,fn,uWo,pfe,bWo,vWo,_fe,TWo,FWo,ufe,CWo,MWo,EWo,ec,K2,bfe,yWo,wWo,_q,AWo,LWo,BWo,Z2,vfe,xWo,kWo,uq,RWo,SWo,PWo,ev,Tfe,$Wo,IWo,bq,NWo,DWo,jWo,ov,qWo,Ffe,GWo,OWo,Cfe,XWo,VWo,Mfe,zWo,WWo,m6,rRe,oc,rv,Efe,g6,QWo,yfe,HWo,tRe,pr,h6,UWo,rc,JWo,wfe,YWo,KWo,Afe,ZWo,eQo,oQo,p6,rQo,Lfe,tQo,aQo,nQo,dt,_6,sQo,Bfe,lQo,iQo,tc,dQo,xfe,cQo,fQo,kfe,mQo,gQo,hQo,Rfe,pQo,_Qo,u6,uQo,to,b6,bQo,Sfe,vQo,TQo,mn,FQo,Pfe,CQo,MQo,$fe,EQo,yQo,Ife,wQo,AQo,LQo,Nfe,tv,Dfe,BQo,xQo,vq,kQo,RQo,SQo,av,PQo,jfe,$Qo,IQo,qfe,NQo,DQo,Gfe,jQo,qQo,v6,aRe,ac,nv,Ofe,T6,GQo,Xfe,OQo,nRe,_r,F6,XQo,nc,VQo,Vfe,zQo,WQo,zfe,QQo,HQo,UQo,C6,JQo,Wfe,YQo,KQo,ZQo,ct,M6,eHo,Qfe,oHo,rHo,sc,tHo,Hfe,aHo,nHo,Ufe,sHo,lHo,iHo,Jfe,dHo,cHo,E6,fHo,ao,y6,mHo,Yfe,gHo,hHo,gn,pHo,Kfe,_Ho,uHo,Zfe,bHo,vHo,eme,THo,FHo,CHo,ome,sv,rme,MHo,EHo,Tq,yHo,wHo,AHo,lv,LHo,tme,BHo,xHo,ame,kHo,RHo,nme,SHo,PHo,w6,sRe,lc,iv,sme,A6,$Ho,lme,IHo,lRe,ur,L6,NHo,ic,DHo,ime,jHo,qHo,dme,GHo,OHo,XHo,B6,VHo,cme,zHo,WHo,QHo,ft,x6,HHo,fme,UHo,JHo,dc,YHo,mme,KHo,ZHo,gme,eUo,oUo,rUo,hme,tUo,aUo,k6,nUo,no,R6,sUo,pme,lUo,iUo,hn,dUo,_me,cUo,fUo,ume,mUo,gUo,bme,hUo,pUo,_Uo,cc,dv,vme,uUo,bUo,Fq,vUo,TUo,FUo,cv,Tme,CUo,MUo,Cq,EUo,yUo,wUo,fv,Fme,AUo,LUo,Mq,BUo,xUo,kUo,mv,RUo,Cme,SUo,PUo,Mme,$Uo,IUo,Eme,NUo,DUo,S6,iRe,fc,gv,yme,P6,jUo,wme,qUo,dRe,br,$6,GUo,mc,OUo,Ame,XUo,VUo,Lme,zUo,WUo,QUo,I6,HUo,Bme,UUo,JUo,YUo,mt,N6,KUo,xme,ZUo,eJo,gc,oJo,kme,rJo,tJo,Rme,aJo,nJo,sJo,Sme,lJo,iJo,D6,dJo,so,j6,cJo,Pme,fJo,mJo,pn,gJo,$me,hJo,pJo,Ime,_Jo,uJo,Nme,bJo,vJo,TJo,Dme,hv,jme,FJo,CJo,Eq,MJo,EJo,yJo,pv,wJo,qme,AJo,LJo,Gme,BJo,xJo,Ome,kJo,RJo,q6,cRe,hc,_v,Xme,G6,SJo,Vme,PJo,fRe,vr,O6,$Jo,pc,IJo,zme,NJo,DJo,Wme,jJo,qJo,GJo,X6,OJo,Qme,XJo,VJo,zJo,gt,V6,WJo,Hme,QJo,HJo,_c,UJo,Ume,JJo,YJo,Jme,KJo,ZJo,eYo,Yme,oYo,rYo,z6,tYo,ho,W6,aYo,Kme,nYo,sYo,_n,lYo,Zme,iYo,dYo,ege,cYo,fYo,oge,mYo,gYo,hYo,B,uv,rge,pYo,_Yo,yq,uYo,bYo,vYo,bv,tge,TYo,FYo,wq,CYo,MYo,EYo,vv,age,yYo,wYo,Aq,AYo,LYo,BYo,Tv,nge,xYo,kYo,Lq,RYo,SYo,PYo,Fv,sge,$Yo,IYo,Bq,NYo,DYo,jYo,Cv,lge,qYo,GYo,xq,OYo,XYo,VYo,Mv,ige,zYo,WYo,kq,QYo,HYo,UYo,Ev,dge,JYo,YYo,Rq,KYo,ZYo,eKo,yv,cge,oKo,rKo,Sq,tKo,aKo,nKo,wv,fge,sKo,lKo,Pq,iKo,dKo,cKo,Av,mge,fKo,mKo,$q,gKo,hKo,pKo,Lv,gge,_Ko,uKo,Iq,bKo,vKo,TKo,Bv,hge,FKo,CKo,Nq,MKo,EKo,yKo,xv,pge,wKo,AKo,Dq,LKo,BKo,xKo,kv,_ge,kKo,RKo,jq,SKo,PKo,$Ko,Rv,uge,IKo,NKo,qq,DKo,jKo,qKo,Gs,bge,GKo,OKo,Gq,XKo,VKo,Oq,zKo,WKo,QKo,Sv,vge,HKo,UKo,Xq,JKo,YKo,KKo,Pv,Tge,ZKo,eZo,Vq,oZo,rZo,tZo,$v,Fge,aZo,nZo,zq,sZo,lZo,iZo,Iv,Cge,dZo,cZo,Wq,fZo,mZo,gZo,Nv,Mge,hZo,pZo,Qq,_Zo,uZo,bZo,Dv,Ege,vZo,TZo,Hq,FZo,CZo,MZo,jv,yge,EZo,yZo,Uq,wZo,AZo,LZo,qv,wge,BZo,xZo,Jq,kZo,RZo,SZo,Gv,Age,PZo,$Zo,Yq,IZo,NZo,DZo,Ov,Lge,jZo,qZo,Kq,GZo,OZo,XZo,Xv,Bge,VZo,zZo,Zq,WZo,QZo,HZo,Vv,xge,UZo,JZo,eG,YZo,KZo,ZZo,zv,kge,eer,oer,oG,rer,ter,aer,Wv,Rge,ner,ser,rG,ler,ier,der,Qv,Sge,cer,fer,tG,mer,ger,her,Hv,Pge,per,_er,aG,uer,ber,ver,Uv,$ge,Ter,Fer,nG,Cer,Mer,Eer,Jv,Ige,yer,wer,sG,Aer,Ler,Ber,Yv,Nge,xer,ker,lG,Rer,Ser,Per,Kv,Dge,$er,Ier,iG,Ner,Der,jer,Zv,jge,qer,Ger,dG,Oer,Xer,Ver,eT,qge,zer,Wer,cG,Qer,Her,Uer,oT,Gge,Jer,Yer,fG,Ker,Zer,eor,rT,Oge,oor,ror,mG,tor,aor,nor,tT,Xge,sor,lor,gG,ior,dor,cor,Vge,mor,gor,Q6,mRe,uc,aT,zge,H6,hor,Wge,por,gRe,Tr,U6,_or,bc,uor,Qge,bor,vor,Hge,Tor,For,Cor,J6,Mor,Uge,Eor,yor,wor,ht,Y6,Aor,Jge,Lor,Bor,vc,xor,Yge,kor,Ror,Kge,Sor,Por,$or,Zge,Ior,Nor,K6,Dor,po,Z6,jor,ehe,qor,Gor,un,Oor,ohe,Xor,Vor,rhe,zor,Wor,the,Qor,Hor,Uor,H,nT,ahe,Jor,Yor,hG,Kor,Zor,err,sT,nhe,orr,rrr,pG,trr,arr,nrr,lT,she,srr,lrr,_G,irr,drr,crr,iT,lhe,frr,mrr,uG,grr,hrr,prr,dT,ihe,_rr,urr,bG,brr,vrr,Trr,cT,dhe,Frr,Crr,vG,Mrr,Err,yrr,fT,che,wrr,Arr,TG,Lrr,Brr,xrr,mT,fhe,krr,Rrr,FG,Srr,Prr,$rr,gT,mhe,Irr,Nrr,CG,Drr,jrr,qrr,hT,ghe,Grr,Orr,MG,Xrr,Vrr,zrr,pT,hhe,Wrr,Qrr,EG,Hrr,Urr,Jrr,_T,phe,Yrr,Krr,yG,Zrr,etr,otr,uT,_he,rtr,ttr,wG,atr,ntr,str,bT,uhe,ltr,itr,AG,dtr,ctr,ftr,vT,bhe,mtr,gtr,LG,htr,ptr,_tr,TT,vhe,utr,btr,BG,vtr,Ttr,Ftr,FT,The,Ctr,Mtr,xG,Etr,ytr,wtr,CT,Fhe,Atr,Ltr,kG,Btr,xtr,ktr,MT,Che,Rtr,Str,RG,Ptr,$tr,Itr,ET,Mhe,Ntr,Dtr,SG,jtr,qtr,Gtr,yT,Ehe,Otr,Xtr,PG,Vtr,ztr,Wtr,wT,yhe,Qtr,Htr,$G,Utr,Jtr,Ytr,whe,Ktr,Ztr,eA,hRe,Tc,AT,Ahe,oA,ear,Lhe,oar,pRe,Fr,rA,rar,Fc,tar,Bhe,aar,nar,xhe,sar,lar,iar,tA,dar,khe,car,far,mar,pt,aA,gar,Rhe,har,par,Cc,_ar,She,uar,bar,Phe,Tar,Far,Car,$he,Mar,Ear,nA,yar,_o,sA,war,Ihe,Aar,Lar,bn,Bar,Nhe,xar,kar,Dhe,Rar,Sar,jhe,Par,$ar,Iar,ge,LT,qhe,Nar,Dar,IG,jar,qar,Gar,BT,Ghe,Oar,Xar,NG,Var,zar,War,xT,Ohe,Qar,Har,DG,Uar,Jar,Yar,kT,Xhe,Kar,Zar,jG,enr,onr,rnr,RT,Vhe,tnr,anr,qG,nnr,snr,lnr,ST,zhe,inr,dnr,GG,cnr,fnr,mnr,PT,Whe,gnr,hnr,OG,pnr,_nr,unr,$T,Qhe,bnr,vnr,XG,Tnr,Fnr,Cnr,IT,Hhe,Mnr,Enr,VG,ynr,wnr,Anr,NT,Uhe,Lnr,Bnr,zG,xnr,knr,Rnr,DT,Jhe,Snr,Pnr,WG,$nr,Inr,Nnr,Yhe,Dnr,jnr,lA,_Re,Mc,jT,Khe,iA,qnr,Zhe,Gnr,uRe,Cr,dA,Onr,Ec,Xnr,epe,Vnr,znr,ope,Wnr,Qnr,Hnr,cA,Unr,rpe,Jnr,Ynr,Knr,_t,fA,Znr,tpe,esr,osr,yc,rsr,ape,tsr,asr,npe,nsr,ssr,lsr,spe,isr,dsr,mA,csr,uo,gA,fsr,lpe,msr,gsr,vn,hsr,ipe,psr,_sr,dpe,usr,bsr,cpe,vsr,Tsr,Fsr,hA,qT,fpe,Csr,Msr,QG,Esr,ysr,wsr,GT,mpe,Asr,Lsr,HG,Bsr,xsr,ksr,gpe,Rsr,Ssr,pA,bRe,wc,OT,hpe,_A,Psr,ppe,$sr,vRe,Mr,uA,Isr,Ac,Nsr,_pe,Dsr,jsr,upe,qsr,Gsr,Osr,bA,Xsr,bpe,Vsr,zsr,Wsr,ut,vA,Qsr,vpe,Hsr,Usr,Lc,Jsr,Tpe,Ysr,Ksr,Fpe,Zsr,elr,olr,Cpe,rlr,tlr,TA,alr,bo,FA,nlr,Mpe,slr,llr,Tn,ilr,Epe,dlr,clr,ype,flr,mlr,wpe,glr,hlr,plr,Y,XT,Ape,_lr,ulr,UG,blr,vlr,Tlr,VT,Lpe,Flr,Clr,JG,Mlr,Elr,ylr,zT,Bpe,wlr,Alr,YG,Llr,Blr,xlr,WT,xpe,klr,Rlr,KG,Slr,Plr,$lr,QT,kpe,Ilr,Nlr,ZG,Dlr,jlr,qlr,HT,Rpe,Glr,Olr,eO,Xlr,Vlr,zlr,UT,Spe,Wlr,Qlr,oO,Hlr,Ulr,Jlr,JT,Ppe,Ylr,Klr,rO,Zlr,eir,oir,YT,$pe,rir,tir,tO,air,nir,sir,KT,Ipe,lir,iir,aO,dir,cir,fir,ZT,Npe,mir,gir,nO,hir,pir,_ir,eF,Dpe,uir,bir,sO,vir,Tir,Fir,oF,jpe,Cir,Mir,lO,Eir,yir,wir,rF,qpe,Air,Lir,iO,Bir,xir,kir,tF,Gpe,Rir,Sir,dO,Pir,$ir,Iir,aF,Ope,Nir,Dir,cO,jir,qir,Gir,nF,Xpe,Oir,Xir,fO,Vir,zir,Wir,sF,Vpe,Qir,Hir,mO,Uir,Jir,Yir,lF,zpe,Kir,Zir,gO,edr,odr,rdr,iF,Wpe,tdr,adr,hO,ndr,sdr,ldr,Qpe,idr,ddr,CA,TRe,Bc,dF,Hpe,MA,cdr,Upe,fdr,FRe,Er,EA,mdr,xc,gdr,Jpe,hdr,pdr,Ype,_dr,udr,bdr,yA,vdr,Kpe,Tdr,Fdr,Cdr,bt,wA,Mdr,Zpe,Edr,ydr,kc,wdr,e_e,Adr,Ldr,o_e,Bdr,xdr,kdr,r_e,Rdr,Sdr,AA,Pdr,vo,LA,$dr,t_e,Idr,Ndr,Fn,Ddr,a_e,jdr,qdr,n_e,Gdr,Odr,s_e,Xdr,Vdr,zdr,ue,cF,l_e,Wdr,Qdr,pO,Hdr,Udr,Jdr,fF,i_e,Ydr,Kdr,_O,Zdr,ecr,ocr,mF,d_e,rcr,tcr,uO,acr,ncr,scr,gF,c_e,lcr,icr,bO,dcr,ccr,fcr,hF,f_e,mcr,gcr,vO,hcr,pcr,_cr,pF,m_e,ucr,bcr,TO,vcr,Tcr,Fcr,_F,g_e,Ccr,Mcr,FO,Ecr,ycr,wcr,uF,h_e,Acr,Lcr,CO,Bcr,xcr,kcr,bF,p_e,Rcr,Scr,MO,Pcr,$cr,Icr,vF,__e,Ncr,Dcr,EO,jcr,qcr,Gcr,u_e,Ocr,Xcr,BA,CRe,Rc,TF,b_e,xA,Vcr,v_e,zcr,MRe,yr,kA,Wcr,Sc,Qcr,T_e,Hcr,Ucr,F_e,Jcr,Ycr,Kcr,RA,Zcr,C_e,efr,ofr,rfr,vt,SA,tfr,M_e,afr,nfr,Pc,sfr,E_e,lfr,ifr,y_e,dfr,cfr,ffr,w_e,mfr,gfr,PA,hfr,To,$A,pfr,A_e,_fr,ufr,Cn,bfr,L_e,vfr,Tfr,B_e,Ffr,Cfr,x_e,Mfr,Efr,yfr,V,FF,k_e,wfr,Afr,yO,Lfr,Bfr,xfr,CF,R_e,kfr,Rfr,wO,Sfr,Pfr,$fr,MF,S_e,Ifr,Nfr,AO,Dfr,jfr,qfr,EF,P_e,Gfr,Ofr,LO,Xfr,Vfr,zfr,yF,$_e,Wfr,Qfr,BO,Hfr,Ufr,Jfr,wF,I_e,Yfr,Kfr,xO,Zfr,emr,omr,AF,N_e,rmr,tmr,kO,amr,nmr,smr,LF,D_e,lmr,imr,RO,dmr,cmr,fmr,BF,j_e,mmr,gmr,SO,hmr,pmr,_mr,xF,q_e,umr,bmr,PO,vmr,Tmr,Fmr,kF,G_e,Cmr,Mmr,$O,Emr,ymr,wmr,RF,O_e,Amr,Lmr,IO,Bmr,xmr,kmr,SF,X_e,Rmr,Smr,NO,Pmr,$mr,Imr,PF,V_e,Nmr,Dmr,DO,jmr,qmr,Gmr,$F,z_e,Omr,Xmr,jO,Vmr,zmr,Wmr,IF,W_e,Qmr,Hmr,qO,Umr,Jmr,Ymr,NF,Q_e,Kmr,Zmr,GO,egr,ogr,rgr,DF,H_e,tgr,agr,OO,ngr,sgr,lgr,jF,U_e,igr,dgr,XO,cgr,fgr,mgr,qF,J_e,ggr,hgr,VO,pgr,_gr,ugr,GF,Y_e,bgr,vgr,zO,Tgr,Fgr,Cgr,OF,K_e,Mgr,Egr,WO,ygr,wgr,Agr,XF,Z_e,Lgr,Bgr,QO,xgr,kgr,Rgr,VF,eue,Sgr,Pgr,HO,$gr,Igr,Ngr,zF,oue,Dgr,jgr,UO,qgr,Ggr,Ogr,rue,Xgr,Vgr,IA,ERe,$c,WF,tue,NA,zgr,aue,Wgr,yRe,wr,DA,Qgr,Ic,Hgr,nue,Ugr,Jgr,sue,Ygr,Kgr,Zgr,jA,ehr,lue,ohr,rhr,thr,Tt,qA,ahr,iue,nhr,shr,Nc,lhr,due,ihr,dhr,cue,chr,fhr,mhr,fue,ghr,hhr,GA,phr,Fo,OA,_hr,mue,uhr,bhr,Mn,vhr,gue,Thr,Fhr,hue,Chr,Mhr,pue,Ehr,yhr,whr,ae,QF,_ue,Ahr,Lhr,JO,Bhr,xhr,khr,HF,uue,Rhr,Shr,YO,Phr,$hr,Ihr,UF,bue,Nhr,Dhr,KO,jhr,qhr,Ghr,JF,vue,Ohr,Xhr,ZO,Vhr,zhr,Whr,YF,Tue,Qhr,Hhr,eX,Uhr,Jhr,Yhr,KF,Fue,Khr,Zhr,oX,epr,opr,rpr,ZF,Cue,tpr,apr,rX,npr,spr,lpr,eC,Mue,ipr,dpr,tX,cpr,fpr,mpr,oC,Eue,gpr,hpr,aX,ppr,_pr,upr,rC,yue,bpr,vpr,nX,Tpr,Fpr,Cpr,tC,wue,Mpr,Epr,sX,ypr,wpr,Apr,aC,Aue,Lpr,Bpr,lX,xpr,kpr,Rpr,nC,Lue,Spr,Ppr,iX,$pr,Ipr,Npr,sC,Bue,Dpr,jpr,dX,qpr,Gpr,Opr,lC,xue,Xpr,Vpr,cX,zpr,Wpr,Qpr,iC,kue,Hpr,Upr,fX,Jpr,Ypr,Kpr,dC,Rue,Zpr,e_r,mX,o_r,r_r,t_r,Sue,a_r,n_r,XA,wRe,Dc,cC,Pue,VA,s_r,$ue,l_r,ARe,Ar,zA,i_r,jc,d_r,Iue,c_r,f_r,Nue,m_r,g_r,h_r,WA,p_r,Due,__r,u_r,b_r,Ft,QA,v_r,jue,T_r,F_r,qc,C_r,que,M_r,E_r,Gue,y_r,w_r,A_r,Oue,L_r,B_r,HA,x_r,Co,UA,k_r,Xue,R_r,S_r,En,P_r,Vue,$_r,I_r,zue,N_r,D_r,Wue,j_r,q_r,G_r,Que,fC,Hue,O_r,X_r,gX,V_r,z_r,W_r,Uue,Q_r,H_r,JA,LRe,Gc,mC,Jue,YA,U_r,Yue,J_r,BRe,Lr,KA,Y_r,Oc,K_r,Kue,Z_r,eur,Zue,our,rur,tur,ZA,aur,e1e,nur,sur,lur,Ct,e0,iur,o1e,dur,cur,Xc,fur,r1e,mur,gur,t1e,hur,pur,_ur,a1e,uur,bur,o0,vur,Mo,r0,Tur,n1e,Fur,Cur,yn,Mur,s1e,Eur,yur,l1e,wur,Aur,i1e,Lur,Bur,xur,K,gC,d1e,kur,Rur,hX,Sur,Pur,$ur,hC,c1e,Iur,Nur,pX,Dur,jur,qur,pC,f1e,Gur,Our,_X,Xur,Vur,zur,_C,m1e,Wur,Qur,uX,Hur,Uur,Jur,uC,g1e,Yur,Kur,bX,Zur,e1r,o1r,bC,h1e,r1r,t1r,vX,a1r,n1r,s1r,vC,p1e,l1r,i1r,TX,d1r,c1r,f1r,TC,_1e,m1r,g1r,FX,h1r,p1r,_1r,FC,u1e,u1r,b1r,CX,v1r,T1r,F1r,CC,b1e,C1r,M1r,MX,E1r,y1r,w1r,MC,v1e,A1r,L1r,EX,B1r,x1r,k1r,EC,T1e,R1r,S1r,yX,P1r,$1r,I1r,yC,F1e,N1r,D1r,wX,j1r,q1r,G1r,wC,C1e,O1r,X1r,AX,V1r,z1r,W1r,AC,M1e,Q1r,H1r,LX,U1r,J1r,Y1r,LC,E1e,K1r,Z1r,BX,e9r,o9r,r9r,BC,y1e,t9r,a9r,xX,n9r,s9r,l9r,xC,w1e,i9r,d9r,kX,c9r,f9r,m9r,kC,A1e,g9r,h9r,RX,p9r,_9r,u9r,RC,L1e,b9r,v9r,SX,T9r,F9r,C9r,B1e,M9r,E9r,t0,xRe,Vc,SC,x1e,a0,y9r,k1e,w9r,kRe,Br,n0,A9r,zc,L9r,R1e,B9r,x9r,S1e,k9r,R9r,S9r,s0,P9r,P1e,$9r,I9r,N9r,Mt,l0,D9r,$1e,j9r,q9r,Wc,G9r,I1e,O9r,X9r,N1e,V9r,z9r,W9r,D1e,Q9r,H9r,i0,U9r,Eo,d0,J9r,j1e,Y9r,K9r,wn,Z9r,q1e,ebr,obr,G1e,rbr,tbr,O1e,abr,nbr,sbr,Z,PC,X1e,lbr,ibr,PX,dbr,cbr,fbr,$C,V1e,mbr,gbr,$X,hbr,pbr,_br,IC,z1e,ubr,bbr,IX,vbr,Tbr,Fbr,NC,W1e,Cbr,Mbr,NX,Ebr,ybr,wbr,DC,Q1e,Abr,Lbr,DX,Bbr,xbr,kbr,jC,H1e,Rbr,Sbr,jX,Pbr,$br,Ibr,qC,U1e,Nbr,Dbr,qX,jbr,qbr,Gbr,GC,J1e,Obr,Xbr,GX,Vbr,zbr,Wbr,OC,Y1e,Qbr,Hbr,OX,Ubr,Jbr,Ybr,XC,K1e,Kbr,Zbr,XX,e5r,o5r,r5r,VC,Z1e,t5r,a5r,VX,n5r,s5r,l5r,zC,e9e,i5r,d5r,zX,c5r,f5r,m5r,WC,o9e,g5r,h5r,WX,p5r,_5r,u5r,QC,r9e,b5r,v5r,QX,T5r,F5r,C5r,HC,t9e,M5r,E5r,HX,y5r,w5r,A5r,UC,a9e,L5r,B5r,UX,x5r,k5r,R5r,JC,n9e,S5r,P5r,JX,$5r,I5r,N5r,YC,s9e,D5r,j5r,YX,q5r,G5r,O5r,KC,l9e,X5r,V5r,KX,z5r,W5r,Q5r,i9e,H5r,U5r,c0,RRe,Qc,ZC,d9e,f0,J5r,c9e,Y5r,SRe,xr,m0,K5r,Hc,Z5r,f9e,e2r,o2r,m9e,r2r,t2r,a2r,g0,n2r,g9e,s2r,l2r,i2r,Et,h0,d2r,h9e,c2r,f2r,Uc,m2r,p9e,g2r,h2r,_9e,p2r,_2r,u2r,u9e,b2r,v2r,p0,T2r,yo,_0,F2r,b9e,C2r,M2r,An,E2r,v9e,y2r,w2r,T9e,A2r,L2r,F9e,B2r,x2r,k2r,C9e,eM,M9e,R2r,S2r,ZX,P2r,$2r,I2r,E9e,N2r,D2r,u0,PRe,Jc,oM,y9e,b0,j2r,w9e,q2r,$Re,kr,v0,G2r,Yc,O2r,A9e,X2r,V2r,L9e,z2r,W2r,Q2r,T0,H2r,B9e,U2r,J2r,Y2r,yt,F0,K2r,x9e,Z2r,evr,Kc,ovr,k9e,rvr,tvr,R9e,avr,nvr,svr,S9e,lvr,ivr,C0,dvr,wo,M0,cvr,P9e,fvr,mvr,Ln,gvr,$9e,hvr,pvr,I9e,_vr,uvr,N9e,bvr,vvr,Tvr,D9e,rM,j9e,Fvr,Cvr,eV,Mvr,Evr,yvr,q9e,wvr,Avr,E0,IRe,Zc,tM,G9e,y0,Lvr,O9e,Bvr,NRe,Rr,w0,xvr,ef,kvr,X9e,Rvr,Svr,V9e,Pvr,$vr,Ivr,A0,Nvr,z9e,Dvr,jvr,qvr,wt,L0,Gvr,W9e,Ovr,Xvr,of,Vvr,Q9e,zvr,Wvr,H9e,Qvr,Hvr,Uvr,U9e,Jvr,Yvr,B0,Kvr,Ao,x0,Zvr,J9e,eTr,oTr,Bn,rTr,Y9e,tTr,aTr,K9e,nTr,sTr,Z9e,lTr,iTr,dTr,z,aM,ebe,cTr,fTr,oV,mTr,gTr,hTr,nM,obe,pTr,_Tr,rV,uTr,bTr,vTr,sM,rbe,TTr,FTr,tV,CTr,MTr,ETr,lM,tbe,yTr,wTr,aV,ATr,LTr,BTr,iM,abe,xTr,kTr,nV,RTr,STr,PTr,dM,nbe,$Tr,ITr,sV,NTr,DTr,jTr,cM,sbe,qTr,GTr,lV,OTr,XTr,VTr,fM,lbe,zTr,WTr,iV,QTr,HTr,UTr,mM,ibe,JTr,YTr,dV,KTr,ZTr,eFr,gM,dbe,oFr,rFr,cV,tFr,aFr,nFr,hM,cbe,sFr,lFr,fV,iFr,dFr,cFr,pM,fbe,fFr,mFr,mV,gFr,hFr,pFr,_M,mbe,_Fr,uFr,gV,bFr,vFr,TFr,uM,gbe,FFr,CFr,hV,MFr,EFr,yFr,bM,hbe,wFr,AFr,pV,LFr,BFr,xFr,vM,pbe,kFr,RFr,_V,SFr,PFr,$Fr,TM,_be,IFr,NFr,uV,DFr,jFr,qFr,FM,ube,GFr,OFr,bV,XFr,VFr,zFr,CM,bbe,WFr,QFr,vV,HFr,UFr,JFr,MM,vbe,YFr,KFr,TV,ZFr,eCr,oCr,EM,Tbe,rCr,tCr,FV,aCr,nCr,sCr,yM,Fbe,lCr,iCr,CV,dCr,cCr,fCr,wM,Cbe,mCr,gCr,MV,hCr,pCr,_Cr,AM,Mbe,uCr,bCr,EV,vCr,TCr,FCr,LM,Ebe,CCr,MCr,yV,ECr,yCr,wCr,ybe,ACr,LCr,k0,DRe,rf,BM,wbe,R0,BCr,Abe,xCr,jRe,Sr,S0,kCr,tf,RCr,Lbe,SCr,PCr,Bbe,$Cr,ICr,NCr,P0,DCr,xbe,jCr,qCr,GCr,At,$0,OCr,kbe,XCr,VCr,af,zCr,Rbe,WCr,QCr,Sbe,HCr,UCr,JCr,Pbe,YCr,KCr,I0,ZCr,Lo,N0,eMr,$be,oMr,rMr,xn,tMr,Ibe,aMr,nMr,Nbe,sMr,lMr,Dbe,iMr,dMr,cMr,ca,xM,jbe,fMr,mMr,wV,gMr,hMr,pMr,kM,qbe,_Mr,uMr,AV,bMr,vMr,TMr,RM,Gbe,FMr,CMr,LV,MMr,EMr,yMr,SM,Obe,wMr,AMr,BV,LMr,BMr,xMr,PM,Xbe,kMr,RMr,xV,SMr,PMr,$Mr,Vbe,IMr,NMr,D0,qRe,nf,$M,zbe,j0,DMr,Wbe,jMr,GRe,Pr,q0,qMr,sf,GMr,Qbe,OMr,XMr,Hbe,VMr,zMr,WMr,G0,QMr,Ube,HMr,UMr,JMr,Lt,O0,YMr,Jbe,KMr,ZMr,lf,e4r,Ybe,o4r,r4r,Kbe,t4r,a4r,n4r,Zbe,s4r,l4r,X0,i4r,Bo,V0,d4r,e5e,c4r,f4r,kn,m4r,o5e,g4r,h4r,r5e,p4r,_4r,t5e,u4r,b4r,v4r,ce,IM,a5e,T4r,F4r,kV,C4r,M4r,E4r,NM,n5e,y4r,w4r,RV,A4r,L4r,B4r,DM,s5e,x4r,k4r,SV,R4r,S4r,P4r,jM,l5e,$4r,I4r,PV,N4r,D4r,j4r,qM,i5e,q4r,G4r,$V,O4r,X4r,V4r,GM,d5e,z4r,W4r,IV,Q4r,H4r,U4r,OM,c5e,J4r,Y4r,NV,K4r,Z4r,eEr,XM,f5e,oEr,rEr,DV,tEr,aEr,nEr,VM,m5e,sEr,lEr,jV,iEr,dEr,cEr,zM,g5e,fEr,mEr,qV,gEr,hEr,pEr,WM,h5e,_Er,uEr,GV,bEr,vEr,TEr,QM,p5e,FEr,CEr,OV,MEr,EEr,yEr,_5e,wEr,AEr,z0,ORe,df,HM,u5e,W0,LEr,b5e,BEr,XRe,$r,Q0,xEr,cf,kEr,v5e,REr,SEr,T5e,PEr,$Er,IEr,H0,NEr,F5e,DEr,jEr,qEr,Bt,U0,GEr,C5e,OEr,XEr,ff,VEr,M5e,zEr,WEr,E5e,QEr,HEr,UEr,y5e,JEr,YEr,J0,KEr,xo,Y0,ZEr,w5e,e3r,o3r,Rn,r3r,A5e,t3r,a3r,L5e,n3r,s3r,B5e,l3r,i3r,d3r,be,UM,x5e,c3r,f3r,XV,m3r,g3r,h3r,JM,k5e,p3r,_3r,VV,u3r,b3r,v3r,YM,R5e,T3r,F3r,zV,C3r,M3r,E3r,KM,S5e,y3r,w3r,WV,A3r,L3r,B3r,ZM,P5e,x3r,k3r,QV,R3r,S3r,P3r,e4,$5e,$3r,I3r,HV,N3r,D3r,j3r,o4,I5e,q3r,G3r,UV,O3r,X3r,V3r,r4,N5e,z3r,W3r,JV,Q3r,H3r,U3r,t4,D5e,J3r,Y3r,YV,K3r,Z3r,eyr,a4,j5e,oyr,ryr,KV,tyr,ayr,nyr,q5e,syr,lyr,K0,VRe,mf,n4,G5e,Z0,iyr,O5e,dyr,zRe,Ir,eL,cyr,gf,fyr,X5e,myr,gyr,V5e,hyr,pyr,_yr,oL,uyr,z5e,byr,vyr,Tyr,xt,rL,Fyr,W5e,Cyr,Myr,hf,Eyr,Q5e,yyr,wyr,H5e,Ayr,Lyr,Byr,U5e,xyr,kyr,tL,Ryr,ko,aL,Syr,J5e,Pyr,$yr,Sn,Iyr,Y5e,Nyr,Dyr,K5e,jyr,qyr,Z5e,Gyr,Oyr,Xyr,Ee,s4,e2e,Vyr,zyr,ZV,Wyr,Qyr,Hyr,l4,o2e,Uyr,Jyr,ez,Yyr,Kyr,Zyr,i4,r2e,ewr,owr,oz,rwr,twr,awr,d4,t2e,nwr,swr,rz,lwr,iwr,dwr,c4,a2e,cwr,fwr,tz,mwr,gwr,hwr,f4,n2e,pwr,_wr,az,uwr,bwr,vwr,m4,s2e,Twr,Fwr,nz,Cwr,Mwr,Ewr,g4,l2e,ywr,wwr,sz,Awr,Lwr,Bwr,h4,i2e,xwr,kwr,lz,Rwr,Swr,Pwr,d2e,$wr,Iwr,nL,WRe,pf,p4,c2e,sL,Nwr,f2e,Dwr,QRe,Nr,lL,jwr,_f,qwr,m2e,Gwr,Owr,g2e,Xwr,Vwr,zwr,iL,Wwr,h2e,Qwr,Hwr,Uwr,kt,dL,Jwr,p2e,Ywr,Kwr,uf,Zwr,_2e,e6r,o6r,u2e,r6r,t6r,a6r,b2e,n6r,s6r,cL,l6r,Ro,fL,i6r,v2e,d6r,c6r,Pn,f6r,T2e,m6r,g6r,F2e,h6r,p6r,C2e,_6r,u6r,b6r,ve,_4,M2e,v6r,T6r,iz,F6r,C6r,M6r,u4,E2e,E6r,y6r,dz,w6r,A6r,L6r,b4,y2e,B6r,x6r,cz,k6r,R6r,S6r,v4,w2e,P6r,$6r,fz,I6r,N6r,D6r,T4,A2e,j6r,q6r,mz,G6r,O6r,X6r,F4,L2e,V6r,z6r,gz,W6r,Q6r,H6r,C4,B2e,U6r,J6r,hz,Y6r,K6r,Z6r,M4,x2e,eAr,oAr,pz,rAr,tAr,aAr,E4,k2e,nAr,sAr,_z,lAr,iAr,dAr,y4,R2e,cAr,fAr,uz,mAr,gAr,hAr,S2e,pAr,_Ar,mL,HRe,bf,w4,P2e,gL,uAr,$2e,bAr,URe,Dr,hL,vAr,vf,TAr,I2e,FAr,CAr,N2e,MAr,EAr,yAr,pL,wAr,D2e,AAr,LAr,BAr,Rt,_L,xAr,j2e,kAr,RAr,Tf,SAr,q2e,PAr,$Ar,G2e,IAr,NAr,DAr,O2e,jAr,qAr,uL,GAr,So,bL,OAr,X2e,XAr,VAr,$n,zAr,V2e,WAr,QAr,z2e,HAr,UAr,W2e,JAr,YAr,KAr,Te,A4,Q2e,ZAr,e0r,bz,o0r,r0r,t0r,L4,H2e,a0r,n0r,vz,s0r,l0r,i0r,B4,U2e,d0r,c0r,Tz,f0r,m0r,g0r,x4,J2e,h0r,p0r,Fz,_0r,u0r,b0r,k4,Y2e,v0r,T0r,Cz,F0r,C0r,M0r,R4,K2e,E0r,y0r,Mz,w0r,A0r,L0r,S4,Z2e,B0r,x0r,Ez,k0r,R0r,S0r,P4,eve,P0r,$0r,yz,I0r,N0r,D0r,$4,ove,j0r,q0r,wz,G0r,O0r,X0r,I4,rve,V0r,z0r,Az,W0r,Q0r,H0r,tve,U0r,J0r,vL,JRe,Ff,N4,ave,TL,Y0r,nve,K0r,YRe,jr,FL,Z0r,Cf,eLr,sve,oLr,rLr,lve,tLr,aLr,nLr,CL,sLr,ive,lLr,iLr,dLr,St,ML,cLr,dve,fLr,mLr,Mf,gLr,cve,hLr,pLr,fve,_Lr,uLr,bLr,mve,vLr,TLr,EL,FLr,Po,yL,CLr,gve,MLr,ELr,In,yLr,hve,wLr,ALr,pve,LLr,BLr,_ve,xLr,kLr,RLr,Se,D4,uve,SLr,PLr,Lz,$Lr,ILr,NLr,j4,bve,DLr,jLr,Bz,qLr,GLr,OLr,q4,vve,XLr,VLr,xz,zLr,WLr,QLr,G4,Tve,HLr,ULr,kz,JLr,YLr,KLr,O4,Fve,ZLr,e8r,Rz,o8r,r8r,t8r,X4,Cve,a8r,n8r,Sz,s8r,l8r,i8r,V4,Mve,d8r,c8r,Pz,f8r,m8r,g8r,z4,Eve,h8r,p8r,$z,_8r,u8r,b8r,yve,v8r,T8r,wL,KRe,Ef,W4,wve,AL,F8r,Ave,C8r,ZRe,qr,LL,M8r,yf,E8r,Lve,y8r,w8r,Bve,A8r,L8r,B8r,BL,x8r,xve,k8r,R8r,S8r,Pt,xL,P8r,kve,$8r,I8r,wf,N8r,Rve,D8r,j8r,Sve,q8r,G8r,O8r,Pve,X8r,V8r,kL,z8r,$o,RL,W8r,$ve,Q8r,H8r,Nn,U8r,Ive,J8r,Y8r,Nve,K8r,Z8r,Dve,e7r,o7r,r7r,Pe,Q4,jve,t7r,a7r,Iz,n7r,s7r,l7r,H4,qve,i7r,d7r,Nz,c7r,f7r,m7r,U4,Gve,g7r,h7r,Dz,p7r,_7r,u7r,J4,Ove,b7r,v7r,jz,T7r,F7r,C7r,Y4,Xve,M7r,E7r,qz,y7r,w7r,A7r,K4,Vve,L7r,B7r,Gz,x7r,k7r,R7r,Z4,zve,S7r,P7r,Oz,$7r,I7r,N7r,eE,Wve,D7r,j7r,Xz,q7r,G7r,O7r,Qve,X7r,V7r,SL,eSe,Af,oE,Hve,PL,z7r,Uve,W7r,oSe,Gr,$L,Q7r,Lf,H7r,Jve,U7r,J7r,Yve,Y7r,K7r,Z7r,IL,eBr,Kve,oBr,rBr,tBr,$t,NL,aBr,Zve,nBr,sBr,Bf,lBr,eTe,iBr,dBr,oTe,cBr,fBr,mBr,rTe,gBr,hBr,DL,pBr,Io,jL,_Br,tTe,uBr,bBr,Dn,vBr,aTe,TBr,FBr,nTe,CBr,MBr,sTe,EBr,yBr,wBr,lTe,rE,iTe,ABr,LBr,Vz,BBr,xBr,kBr,dTe,RBr,SBr,qL,rSe,xf,tE,cTe,GL,PBr,fTe,$Br,tSe,Or,OL,IBr,kf,NBr,mTe,DBr,jBr,gTe,qBr,GBr,OBr,XL,XBr,hTe,VBr,zBr,WBr,It,VL,QBr,pTe,HBr,UBr,Rf,JBr,_Te,YBr,KBr,uTe,ZBr,exr,oxr,bTe,rxr,txr,zL,axr,No,WL,nxr,vTe,sxr,lxr,jn,ixr,TTe,dxr,cxr,FTe,fxr,mxr,CTe,gxr,hxr,pxr,QL,aE,MTe,_xr,uxr,zz,bxr,vxr,Txr,nE,ETe,Fxr,Cxr,Wz,Mxr,Exr,yxr,yTe,wxr,Axr,HL,aSe,Sf,sE,wTe,UL,Lxr,ATe,Bxr,nSe,Xr,JL,xxr,Pf,kxr,LTe,Rxr,Sxr,BTe,Pxr,$xr,Ixr,YL,Nxr,xTe,Dxr,jxr,qxr,Nt,KL,Gxr,kTe,Oxr,Xxr,$f,Vxr,RTe,zxr,Wxr,STe,Qxr,Hxr,Uxr,PTe,Jxr,Yxr,ZL,Kxr,Do,e8,Zxr,$Te,ekr,okr,qn,rkr,ITe,tkr,akr,NTe,nkr,skr,DTe,lkr,ikr,dkr,jTe,lE,qTe,ckr,fkr,Qz,mkr,gkr,hkr,GTe,pkr,_kr,o8,sSe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),f3=new X({}),m3=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new ukr({props:{warning:"&lcub;true}",$$slots:{default:[TMt]},$$scope:{ctx:Ii}}}),g3=new X({}),h3=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/configuration_auto.py#L539"}}),u3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/configuration_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),b3=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),v3=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/configuration_auto.py#L684",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),T3=new X({}),F3=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/tokenization_auto.py#L352"}}),E3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15991/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),y3=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),w3=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),A3=new X({}),L3=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),k3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15991/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),kh=new ukr({props:{$$slots:{default:[FMt]},$$scope:{ctx:Ii}}}),R3=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),S3=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),P3=new X({}),$3=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/processing_auto.py#L71"}}),D3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Oh=new ukr({props:{$$slots:{default:[CMt]},$$scope:{ctx:Ii}}}),j3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),q3=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),G3=new X({}),O3=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L704"}}),V3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),W3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H3=new X({}),U3=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L711"}}),Y3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Z3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new X({}),ry=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L726"}}),ay=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),sy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new X({}),dy=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L733"}}),fy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),gy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new X({}),_y=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L740"}}),by=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Ty=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new X({}),My=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L749"}}),yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Ay=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new X({}),xy=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L783"}}),Ry=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Py=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new X({}),Ny=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L790"}}),jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Gy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new X({}),Vy=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L776"}}),Wy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Hy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new X({}),Yy=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L758"}}),Zy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),ow=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tw=new X({}),aw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L765"}}),sw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),iw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new X({}),fw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L799"}}),gw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uw=new X({}),bw=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L838"}}),Tw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Cw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new X({}),yw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L845"}}),Aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new X({}),Rw=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L868"}}),Pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Iw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new X({}),jw=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L852"}}),Gw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Xw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new X({}),Ww=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L859"}}),Hw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Jw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new X({}),e6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L877"}}),r6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),a6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s6=new X({}),l6=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L884"}}),d6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),f6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g6=new X({}),h6=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L831"}}),_6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),u6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),b6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T6=new X({}),F6=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L806"}}),M6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),y6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A6=new X({}),L6=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L813"}}),x6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),R6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P6=new X({}),$6=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_auto.py#L822"}}),N6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),D6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),j6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G6=new X({}),O6=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),V6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),z6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),W6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H6=new X({}),U6=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Y6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Z6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),aA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),sA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),fA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),gA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new X({}),uA=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),vA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),FA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),wA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),LA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),SA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),$A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new X({}),DA=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),qA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),zA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),QA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),UA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),e0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),o0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),r0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a0=new X({}),n0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),l0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),i0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),d0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new X({}),m0=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),h0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),p0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),_0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b0=new X({}),v0=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),F0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),C0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),M0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),w0=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),L0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),B0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),x0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new X({}),S0=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),$0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),I0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),N0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new X({}),q0=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),O0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),X0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),V0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new X({}),Q0=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),U0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),J0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Y0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z0=new X({}),eL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),rL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),aL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),dL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),fL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),_L=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),uL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),bL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new X({}),FL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),ML=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),EL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),yL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new X({}),LL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),xL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),kL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),RL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),NL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),jL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new X({}),OL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),VL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),zL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),WL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new X({}),JL=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),KL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),ZL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),e8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15991/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15991/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15991/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),pe=a("a"),io=a("span"),f(fe.$$.fragment),Me=l(),Vo=a("span"),Ni=o("Auto Classes"),Nf=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),l3=o("from_pretrained()"),Df=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),qi=o("Instantiating one of "),Gn=a("a"),i3=o("AutoConfig"),On=o(", "),Xn=a("a"),d3=o("AutoModel"),Gi=o(`, and
`),Vn=a("a"),c3=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),Z8=o("will create a model that is an instance of "),Xi=a("a"),e7=o("BertModel"),o7=o("."),zo=l(),Ga=a("p"),r7=o("There is one class of "),qf=a("code"),t7=o("AutoModel"),b$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nke=l(),Vi=a("h2"),Gf=a("a"),GQ=a("span"),f(f3.$$.fragment),v$e=l(),OQ=a("span"),T$e=o("Extending the Auto Classes"),ske=l(),zn=a("p"),F$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),XQ=a("code"),C$e=o("NewModel"),M$e=o(", make sure you have a "),VQ=a("code"),E$e=o("NewModelConfig"),y$e=o(` then you can add those to the auto
classes like this:`),lke=l(),f(m3.$$.fragment),ike=l(),a7=a("p"),w$e=o("You will then be able to use the auto classes like you would usually do!"),dke=l(),f(Of.$$.fragment),cke=l(),zi=a("h2"),Xf=a("a"),zQ=a("span"),f(g3.$$.fragment),A$e=l(),WQ=a("span"),L$e=o("AutoConfig"),fke=l(),Wo=a("div"),f(h3.$$.fragment),B$e=l(),p3=a("p"),x$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),n7=a("a"),k$e=o("from_pretrained()"),R$e=o(" class method."),S$e=l(),_3=a("p"),P$e=o("This class cannot be instantiated directly using "),QQ=a("code"),$$e=o("__init__()"),I$e=o(" (throws an error)."),N$e=l(),mo=a("div"),f(u3.$$.fragment),D$e=l(),HQ=a("p"),j$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),q$e=l(),Wi=a("p"),G$e=o("The configuration class to instantiate is selected based on the "),UQ=a("code"),O$e=o("model_type"),X$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),JQ=a("code"),V$e=o("pretrained_model_name_or_path"),z$e=o(":"),W$e=l(),v=a("ul"),Vf=a("li"),YQ=a("strong"),Q$e=o("albert"),H$e=o(" \u2014 "),s7=a("a"),U$e=o("AlbertConfig"),J$e=o(" (ALBERT model)"),Y$e=l(),zf=a("li"),KQ=a("strong"),K$e=o("bart"),Z$e=o(" \u2014 "),l7=a("a"),eIe=o("BartConfig"),oIe=o(" (BART model)"),rIe=l(),Wf=a("li"),ZQ=a("strong"),tIe=o("beit"),aIe=o(" \u2014 "),i7=a("a"),nIe=o("BeitConfig"),sIe=o(" (BEiT model)"),lIe=l(),Qf=a("li"),eH=a("strong"),iIe=o("bert"),dIe=o(" \u2014 "),d7=a("a"),cIe=o("BertConfig"),fIe=o(" (BERT model)"),mIe=l(),Hf=a("li"),oH=a("strong"),gIe=o("bert-generation"),hIe=o(" \u2014 "),c7=a("a"),pIe=o("BertGenerationConfig"),_Ie=o(" (Bert Generation model)"),uIe=l(),Uf=a("li"),rH=a("strong"),bIe=o("big_bird"),vIe=o(" \u2014 "),f7=a("a"),TIe=o("BigBirdConfig"),FIe=o(" (BigBird model)"),CIe=l(),Jf=a("li"),tH=a("strong"),MIe=o("bigbird_pegasus"),EIe=o(" \u2014 "),m7=a("a"),yIe=o("BigBirdPegasusConfig"),wIe=o(" (BigBirdPegasus model)"),AIe=l(),Yf=a("li"),aH=a("strong"),LIe=o("blenderbot"),BIe=o(" \u2014 "),g7=a("a"),xIe=o("BlenderbotConfig"),kIe=o(" (Blenderbot model)"),RIe=l(),Kf=a("li"),nH=a("strong"),SIe=o("blenderbot-small"),PIe=o(" \u2014 "),h7=a("a"),$Ie=o("BlenderbotSmallConfig"),IIe=o(" (BlenderbotSmall model)"),NIe=l(),Zf=a("li"),sH=a("strong"),DIe=o("camembert"),jIe=o(" \u2014 "),p7=a("a"),qIe=o("CamembertConfig"),GIe=o(" (CamemBERT model)"),OIe=l(),em=a("li"),lH=a("strong"),XIe=o("canine"),VIe=o(" \u2014 "),_7=a("a"),zIe=o("CanineConfig"),WIe=o(" (Canine model)"),QIe=l(),om=a("li"),iH=a("strong"),HIe=o("clip"),UIe=o(" \u2014 "),u7=a("a"),JIe=o("CLIPConfig"),YIe=o(" (CLIP model)"),KIe=l(),rm=a("li"),dH=a("strong"),ZIe=o("convbert"),eNe=o(" \u2014 "),b7=a("a"),oNe=o("ConvBertConfig"),rNe=o(" (ConvBERT model)"),tNe=l(),tm=a("li"),cH=a("strong"),aNe=o("convnext"),nNe=o(" \u2014 "),v7=a("a"),sNe=o("ConvNextConfig"),lNe=o(" (ConvNext model)"),iNe=l(),am=a("li"),fH=a("strong"),dNe=o("ctrl"),cNe=o(" \u2014 "),T7=a("a"),fNe=o("CTRLConfig"),mNe=o(" (CTRL model)"),gNe=l(),nm=a("li"),mH=a("strong"),hNe=o("data2vec-audio"),pNe=o(" \u2014 "),F7=a("a"),_Ne=o("Data2VecAudioConfig"),uNe=o(" (Data2VecAudio model)"),bNe=l(),sm=a("li"),gH=a("strong"),vNe=o("data2vec-text"),TNe=o(" \u2014 "),C7=a("a"),FNe=o("Data2VecTextConfig"),CNe=o(" (Data2VecText model)"),MNe=l(),lm=a("li"),hH=a("strong"),ENe=o("deberta"),yNe=o(" \u2014 "),M7=a("a"),wNe=o("DebertaConfig"),ANe=o(" (DeBERTa model)"),LNe=l(),im=a("li"),pH=a("strong"),BNe=o("deberta-v2"),xNe=o(" \u2014 "),E7=a("a"),kNe=o("DebertaV2Config"),RNe=o(" (DeBERTa-v2 model)"),SNe=l(),dm=a("li"),_H=a("strong"),PNe=o("deit"),$Ne=o(" \u2014 "),y7=a("a"),INe=o("DeiTConfig"),NNe=o(" (DeiT model)"),DNe=l(),cm=a("li"),uH=a("strong"),jNe=o("detr"),qNe=o(" \u2014 "),w7=a("a"),GNe=o("DetrConfig"),ONe=o(" (DETR model)"),XNe=l(),fm=a("li"),bH=a("strong"),VNe=o("distilbert"),zNe=o(" \u2014 "),A7=a("a"),WNe=o("DistilBertConfig"),QNe=o(" (DistilBERT model)"),HNe=l(),mm=a("li"),vH=a("strong"),UNe=o("dpr"),JNe=o(" \u2014 "),L7=a("a"),YNe=o("DPRConfig"),KNe=o(" (DPR model)"),ZNe=l(),gm=a("li"),TH=a("strong"),eDe=o("dpt"),oDe=o(" \u2014 "),B7=a("a"),rDe=o("DPTConfig"),tDe=o(" (DPT model)"),aDe=l(),hm=a("li"),FH=a("strong"),nDe=o("electra"),sDe=o(" \u2014 "),x7=a("a"),lDe=o("ElectraConfig"),iDe=o(" (ELECTRA model)"),dDe=l(),pm=a("li"),CH=a("strong"),cDe=o("encoder-decoder"),fDe=o(" \u2014 "),k7=a("a"),mDe=o("EncoderDecoderConfig"),gDe=o(" (Encoder decoder model)"),hDe=l(),_m=a("li"),MH=a("strong"),pDe=o("flaubert"),_De=o(" \u2014 "),R7=a("a"),uDe=o("FlaubertConfig"),bDe=o(" (FlauBERT model)"),vDe=l(),um=a("li"),EH=a("strong"),TDe=o("fnet"),FDe=o(" \u2014 "),S7=a("a"),CDe=o("FNetConfig"),MDe=o(" (FNet model)"),EDe=l(),bm=a("li"),yH=a("strong"),yDe=o("fsmt"),wDe=o(" \u2014 "),P7=a("a"),ADe=o("FSMTConfig"),LDe=o(" (FairSeq Machine-Translation model)"),BDe=l(),vm=a("li"),wH=a("strong"),xDe=o("funnel"),kDe=o(" \u2014 "),$7=a("a"),RDe=o("FunnelConfig"),SDe=o(" (Funnel Transformer model)"),PDe=l(),Tm=a("li"),AH=a("strong"),$De=o("glpn"),IDe=o(" \u2014 "),I7=a("a"),NDe=o("GLPNConfig"),DDe=o(" (GLPN model)"),jDe=l(),Fm=a("li"),LH=a("strong"),qDe=o("gpt2"),GDe=o(" \u2014 "),N7=a("a"),ODe=o("GPT2Config"),XDe=o(" (OpenAI GPT-2 model)"),VDe=l(),Cm=a("li"),BH=a("strong"),zDe=o("gpt_neo"),WDe=o(" \u2014 "),D7=a("a"),QDe=o("GPTNeoConfig"),HDe=o(" (GPT Neo model)"),UDe=l(),Mm=a("li"),xH=a("strong"),JDe=o("gptj"),YDe=o(" \u2014 "),j7=a("a"),KDe=o("GPTJConfig"),ZDe=o(" (GPT-J model)"),eje=l(),Em=a("li"),kH=a("strong"),oje=o("hubert"),rje=o(" \u2014 "),q7=a("a"),tje=o("HubertConfig"),aje=o(" (Hubert model)"),nje=l(),ym=a("li"),RH=a("strong"),sje=o("ibert"),lje=o(" \u2014 "),G7=a("a"),ije=o("IBertConfig"),dje=o(" (I-BERT model)"),cje=l(),wm=a("li"),SH=a("strong"),fje=o("imagegpt"),mje=o(" \u2014 "),O7=a("a"),gje=o("ImageGPTConfig"),hje=o(" (ImageGPT model)"),pje=l(),Am=a("li"),PH=a("strong"),_je=o("layoutlm"),uje=o(" \u2014 "),X7=a("a"),bje=o("LayoutLMConfig"),vje=o(" (LayoutLM model)"),Tje=l(),Lm=a("li"),$H=a("strong"),Fje=o("layoutlmv2"),Cje=o(" \u2014 "),V7=a("a"),Mje=o("LayoutLMv2Config"),Eje=o(" (LayoutLMv2 model)"),yje=l(),Bm=a("li"),IH=a("strong"),wje=o("led"),Aje=o(" \u2014 "),z7=a("a"),Lje=o("LEDConfig"),Bje=o(" (LED model)"),xje=l(),xm=a("li"),NH=a("strong"),kje=o("longformer"),Rje=o(" \u2014 "),W7=a("a"),Sje=o("LongformerConfig"),Pje=o(" (Longformer model)"),$je=l(),km=a("li"),DH=a("strong"),Ije=o("luke"),Nje=o(" \u2014 "),Q7=a("a"),Dje=o("LukeConfig"),jje=o(" (LUKE model)"),qje=l(),Rm=a("li"),jH=a("strong"),Gje=o("lxmert"),Oje=o(" \u2014 "),H7=a("a"),Xje=o("LxmertConfig"),Vje=o(" (LXMERT model)"),zje=l(),Sm=a("li"),qH=a("strong"),Wje=o("m2m_100"),Qje=o(" \u2014 "),U7=a("a"),Hje=o("M2M100Config"),Uje=o(" (M2M100 model)"),Jje=l(),Pm=a("li"),GH=a("strong"),Yje=o("marian"),Kje=o(" \u2014 "),J7=a("a"),Zje=o("MarianConfig"),eqe=o(" (Marian model)"),oqe=l(),$m=a("li"),OH=a("strong"),rqe=o("maskformer"),tqe=o(" \u2014 "),Y7=a("a"),aqe=o("MaskFormerConfig"),nqe=o(" (MaskFormer model)"),sqe=l(),Im=a("li"),XH=a("strong"),lqe=o("mbart"),iqe=o(" \u2014 "),K7=a("a"),dqe=o("MBartConfig"),cqe=o(" (mBART model)"),fqe=l(),Nm=a("li"),VH=a("strong"),mqe=o("megatron-bert"),gqe=o(" \u2014 "),Z7=a("a"),hqe=o("MegatronBertConfig"),pqe=o(" (MegatronBert model)"),_qe=l(),Dm=a("li"),zH=a("strong"),uqe=o("mobilebert"),bqe=o(" \u2014 "),eB=a("a"),vqe=o("MobileBertConfig"),Tqe=o(" (MobileBERT model)"),Fqe=l(),jm=a("li"),WH=a("strong"),Cqe=o("mpnet"),Mqe=o(" \u2014 "),oB=a("a"),Eqe=o("MPNetConfig"),yqe=o(" (MPNet model)"),wqe=l(),qm=a("li"),QH=a("strong"),Aqe=o("mt5"),Lqe=o(" \u2014 "),rB=a("a"),Bqe=o("MT5Config"),xqe=o(" (mT5 model)"),kqe=l(),Gm=a("li"),HH=a("strong"),Rqe=o("nystromformer"),Sqe=o(" \u2014 "),tB=a("a"),Pqe=o("NystromformerConfig"),$qe=o(" (Nystromformer model)"),Iqe=l(),Om=a("li"),UH=a("strong"),Nqe=o("openai-gpt"),Dqe=o(" \u2014 "),aB=a("a"),jqe=o("OpenAIGPTConfig"),qqe=o(" (OpenAI GPT model)"),Gqe=l(),Xm=a("li"),JH=a("strong"),Oqe=o("pegasus"),Xqe=o(" \u2014 "),nB=a("a"),Vqe=o("PegasusConfig"),zqe=o(" (Pegasus model)"),Wqe=l(),Vm=a("li"),YH=a("strong"),Qqe=o("perceiver"),Hqe=o(" \u2014 "),sB=a("a"),Uqe=o("PerceiverConfig"),Jqe=o(" (Perceiver model)"),Yqe=l(),zm=a("li"),KH=a("strong"),Kqe=o("plbart"),Zqe=o(" \u2014 "),lB=a("a"),eGe=o("PLBartConfig"),oGe=o(" (PLBart model)"),rGe=l(),Wm=a("li"),ZH=a("strong"),tGe=o("poolformer"),aGe=o(" \u2014 "),iB=a("a"),nGe=o("PoolFormerConfig"),sGe=o(" (PoolFormer model)"),lGe=l(),Qm=a("li"),eU=a("strong"),iGe=o("prophetnet"),dGe=o(" \u2014 "),dB=a("a"),cGe=o("ProphetNetConfig"),fGe=o(" (ProphetNet model)"),mGe=l(),Hm=a("li"),oU=a("strong"),gGe=o("qdqbert"),hGe=o(" \u2014 "),cB=a("a"),pGe=o("QDQBertConfig"),_Ge=o(" (QDQBert model)"),uGe=l(),Um=a("li"),rU=a("strong"),bGe=o("rag"),vGe=o(" \u2014 "),fB=a("a"),TGe=o("RagConfig"),FGe=o(" (RAG model)"),CGe=l(),Jm=a("li"),tU=a("strong"),MGe=o("realm"),EGe=o(" \u2014 "),mB=a("a"),yGe=o("RealmConfig"),wGe=o(" (Realm model)"),AGe=l(),Ym=a("li"),aU=a("strong"),LGe=o("reformer"),BGe=o(" \u2014 "),gB=a("a"),xGe=o("ReformerConfig"),kGe=o(" (Reformer model)"),RGe=l(),Km=a("li"),nU=a("strong"),SGe=o("rembert"),PGe=o(" \u2014 "),hB=a("a"),$Ge=o("RemBertConfig"),IGe=o(" (RemBERT model)"),NGe=l(),Zm=a("li"),sU=a("strong"),DGe=o("resnet"),jGe=o(" \u2014 "),pB=a("a"),qGe=o("ResNetConfig"),GGe=o(" (ResNet model)"),OGe=l(),eg=a("li"),lU=a("strong"),XGe=o("retribert"),VGe=o(" \u2014 "),_B=a("a"),zGe=o("RetriBertConfig"),WGe=o(" (RetriBERT model)"),QGe=l(),og=a("li"),iU=a("strong"),HGe=o("roberta"),UGe=o(" \u2014 "),uB=a("a"),JGe=o("RobertaConfig"),YGe=o(" (RoBERTa model)"),KGe=l(),rg=a("li"),dU=a("strong"),ZGe=o("roformer"),eOe=o(" \u2014 "),bB=a("a"),oOe=o("RoFormerConfig"),rOe=o(" (RoFormer model)"),tOe=l(),tg=a("li"),cU=a("strong"),aOe=o("segformer"),nOe=o(" \u2014 "),vB=a("a"),sOe=o("SegformerConfig"),lOe=o(" (SegFormer model)"),iOe=l(),ag=a("li"),fU=a("strong"),dOe=o("sew"),cOe=o(" \u2014 "),TB=a("a"),fOe=o("SEWConfig"),mOe=o(" (SEW model)"),gOe=l(),ng=a("li"),mU=a("strong"),hOe=o("sew-d"),pOe=o(" \u2014 "),FB=a("a"),_Oe=o("SEWDConfig"),uOe=o(" (SEW-D model)"),bOe=l(),sg=a("li"),gU=a("strong"),vOe=o("speech-encoder-decoder"),TOe=o(" \u2014 "),CB=a("a"),FOe=o("SpeechEncoderDecoderConfig"),COe=o(" (Speech Encoder decoder model)"),MOe=l(),lg=a("li"),hU=a("strong"),EOe=o("speech_to_text"),yOe=o(" \u2014 "),MB=a("a"),wOe=o("Speech2TextConfig"),AOe=o(" (Speech2Text model)"),LOe=l(),ig=a("li"),pU=a("strong"),BOe=o("speech_to_text_2"),xOe=o(" \u2014 "),EB=a("a"),kOe=o("Speech2Text2Config"),ROe=o(" (Speech2Text2 model)"),SOe=l(),dg=a("li"),_U=a("strong"),POe=o("splinter"),$Oe=o(" \u2014 "),yB=a("a"),IOe=o("SplinterConfig"),NOe=o(" (Splinter model)"),DOe=l(),cg=a("li"),uU=a("strong"),jOe=o("squeezebert"),qOe=o(" \u2014 "),wB=a("a"),GOe=o("SqueezeBertConfig"),OOe=o(" (SqueezeBERT model)"),XOe=l(),fg=a("li"),bU=a("strong"),VOe=o("swin"),zOe=o(" \u2014 "),AB=a("a"),WOe=o("SwinConfig"),QOe=o(" (Swin model)"),HOe=l(),mg=a("li"),vU=a("strong"),UOe=o("t5"),JOe=o(" \u2014 "),LB=a("a"),YOe=o("T5Config"),KOe=o(" (T5 model)"),ZOe=l(),gg=a("li"),TU=a("strong"),eXe=o("tapas"),oXe=o(" \u2014 "),BB=a("a"),rXe=o("TapasConfig"),tXe=o(" (TAPAS model)"),aXe=l(),hg=a("li"),FU=a("strong"),nXe=o("transfo-xl"),sXe=o(" \u2014 "),xB=a("a"),lXe=o("TransfoXLConfig"),iXe=o(" (Transformer-XL model)"),dXe=l(),pg=a("li"),CU=a("strong"),cXe=o("trocr"),fXe=o(" \u2014 "),kB=a("a"),mXe=o("TrOCRConfig"),gXe=o(" (TrOCR model)"),hXe=l(),_g=a("li"),MU=a("strong"),pXe=o("unispeech"),_Xe=o(" \u2014 "),RB=a("a"),uXe=o("UniSpeechConfig"),bXe=o(" (UniSpeech model)"),vXe=l(),ug=a("li"),EU=a("strong"),TXe=o("unispeech-sat"),FXe=o(" \u2014 "),SB=a("a"),CXe=o("UniSpeechSatConfig"),MXe=o(" (UniSpeechSat model)"),EXe=l(),bg=a("li"),yU=a("strong"),yXe=o("van"),wXe=o(" \u2014 "),PB=a("a"),AXe=o("VanConfig"),LXe=o(" (VAN model)"),BXe=l(),vg=a("li"),wU=a("strong"),xXe=o("vilt"),kXe=o(" \u2014 "),$B=a("a"),RXe=o("ViltConfig"),SXe=o(" (ViLT model)"),PXe=l(),Tg=a("li"),AU=a("strong"),$Xe=o("vision-encoder-decoder"),IXe=o(" \u2014 "),IB=a("a"),NXe=o("VisionEncoderDecoderConfig"),DXe=o(" (Vision Encoder decoder model)"),jXe=l(),Fg=a("li"),LU=a("strong"),qXe=o("vision-text-dual-encoder"),GXe=o(" \u2014 "),NB=a("a"),OXe=o("VisionTextDualEncoderConfig"),XXe=o(" (VisionTextDualEncoder model)"),VXe=l(),Cg=a("li"),BU=a("strong"),zXe=o("visual_bert"),WXe=o(" \u2014 "),DB=a("a"),QXe=o("VisualBertConfig"),HXe=o(" (VisualBert model)"),UXe=l(),Mg=a("li"),xU=a("strong"),JXe=o("vit"),YXe=o(" \u2014 "),jB=a("a"),KXe=o("ViTConfig"),ZXe=o(" (ViT model)"),eVe=l(),Eg=a("li"),kU=a("strong"),oVe=o("vit_mae"),rVe=o(" \u2014 "),qB=a("a"),tVe=o("ViTMAEConfig"),aVe=o(" (ViTMAE model)"),nVe=l(),yg=a("li"),RU=a("strong"),sVe=o("wav2vec2"),lVe=o(" \u2014 "),GB=a("a"),iVe=o("Wav2Vec2Config"),dVe=o(" (Wav2Vec2 model)"),cVe=l(),wg=a("li"),SU=a("strong"),fVe=o("wavlm"),mVe=o(" \u2014 "),OB=a("a"),gVe=o("WavLMConfig"),hVe=o(" (WavLM model)"),pVe=l(),Ag=a("li"),PU=a("strong"),_Ve=o("xglm"),uVe=o(" \u2014 "),XB=a("a"),bVe=o("XGLMConfig"),vVe=o(" (XGLM model)"),TVe=l(),Lg=a("li"),$U=a("strong"),FVe=o("xlm"),CVe=o(" \u2014 "),VB=a("a"),MVe=o("XLMConfig"),EVe=o(" (XLM model)"),yVe=l(),Bg=a("li"),IU=a("strong"),wVe=o("xlm-prophetnet"),AVe=o(" \u2014 "),zB=a("a"),LVe=o("XLMProphetNetConfig"),BVe=o(" (XLMProphetNet model)"),xVe=l(),xg=a("li"),NU=a("strong"),kVe=o("xlm-roberta"),RVe=o(" \u2014 "),WB=a("a"),SVe=o("XLMRobertaConfig"),PVe=o(" (XLM-RoBERTa model)"),$Ve=l(),kg=a("li"),DU=a("strong"),IVe=o("xlm-roberta-xl"),NVe=o(" \u2014 "),QB=a("a"),DVe=o("XLMRobertaXLConfig"),jVe=o(" (XLM-RoBERTa-XL model)"),qVe=l(),Rg=a("li"),jU=a("strong"),GVe=o("xlnet"),OVe=o(" \u2014 "),HB=a("a"),XVe=o("XLNetConfig"),VVe=o(" (XLNet model)"),zVe=l(),Sg=a("li"),qU=a("strong"),WVe=o("yoso"),QVe=o(" \u2014 "),UB=a("a"),HVe=o("YosoConfig"),UVe=o(" (YOSO model)"),JVe=l(),GU=a("p"),YVe=o("Examples:"),KVe=l(),f(b3.$$.fragment),ZVe=l(),Pg=a("div"),f(v3.$$.fragment),eze=l(),OU=a("p"),oze=o("Register a new configuration for this class."),mke=l(),Qi=a("h2"),$g=a("a"),XU=a("span"),f(T3.$$.fragment),rze=l(),VU=a("span"),tze=o("AutoTokenizer"),gke=l(),Qo=a("div"),f(F3.$$.fragment),aze=l(),C3=a("p"),nze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JB=a("a"),sze=o("AutoTokenizer.from_pretrained()"),lze=o(" class method."),ize=l(),M3=a("p"),dze=o("This class cannot be instantiated directly using "),zU=a("code"),cze=o("__init__()"),fze=o(" (throws an error)."),mze=l(),go=a("div"),f(E3.$$.fragment),gze=l(),WU=a("p"),hze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pze=l(),Oa=a("p"),_ze=o("The tokenizer class to instantiate is selected based on the "),QU=a("code"),uze=o("model_type"),bze=o(` property of the config object (either
passed as an argument or loaded from `),HU=a("code"),vze=o("pretrained_model_name_or_path"),Tze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UU=a("code"),Fze=o("pretrained_model_name_or_path"),Cze=o(":"),Mze=l(),E=a("ul"),Wn=a("li"),JU=a("strong"),Eze=o("albert"),yze=o(" \u2014 "),YB=a("a"),wze=o("AlbertTokenizer"),Aze=o(" or "),KB=a("a"),Lze=o("AlbertTokenizerFast"),Bze=o(" (ALBERT model)"),xze=l(),Qn=a("li"),YU=a("strong"),kze=o("bart"),Rze=o(" \u2014 "),ZB=a("a"),Sze=o("BartTokenizer"),Pze=o(" or "),ex=a("a"),$ze=o("BartTokenizerFast"),Ize=o(" (BART model)"),Nze=l(),Hn=a("li"),KU=a("strong"),Dze=o("barthez"),jze=o(" \u2014 "),ox=a("a"),qze=o("BarthezTokenizer"),Gze=o(" or "),rx=a("a"),Oze=o("BarthezTokenizerFast"),Xze=o(" (BARThez model)"),Vze=l(),Ig=a("li"),ZU=a("strong"),zze=o("bartpho"),Wze=o(" \u2014 "),tx=a("a"),Qze=o("BartphoTokenizer"),Hze=o(" (BARTpho model)"),Uze=l(),Un=a("li"),eJ=a("strong"),Jze=o("bert"),Yze=o(" \u2014 "),ax=a("a"),Kze=o("BertTokenizer"),Zze=o(" or "),nx=a("a"),eWe=o("BertTokenizerFast"),oWe=o(" (BERT model)"),rWe=l(),Ng=a("li"),oJ=a("strong"),tWe=o("bert-generation"),aWe=o(" \u2014 "),sx=a("a"),nWe=o("BertGenerationTokenizer"),sWe=o(" (Bert Generation model)"),lWe=l(),Dg=a("li"),rJ=a("strong"),iWe=o("bert-japanese"),dWe=o(" \u2014 "),lx=a("a"),cWe=o("BertJapaneseTokenizer"),fWe=o(" (BertJapanese model)"),mWe=l(),jg=a("li"),tJ=a("strong"),gWe=o("bertweet"),hWe=o(" \u2014 "),ix=a("a"),pWe=o("BertweetTokenizer"),_We=o(" (Bertweet model)"),uWe=l(),Jn=a("li"),aJ=a("strong"),bWe=o("big_bird"),vWe=o(" \u2014 "),dx=a("a"),TWe=o("BigBirdTokenizer"),FWe=o(" or "),cx=a("a"),CWe=o("BigBirdTokenizerFast"),MWe=o(" (BigBird model)"),EWe=l(),Yn=a("li"),nJ=a("strong"),yWe=o("bigbird_pegasus"),wWe=o(" \u2014 "),fx=a("a"),AWe=o("PegasusTokenizer"),LWe=o(" or "),mx=a("a"),BWe=o("PegasusTokenizerFast"),xWe=o(" (BigBirdPegasus model)"),kWe=l(),Kn=a("li"),sJ=a("strong"),RWe=o("blenderbot"),SWe=o(" \u2014 "),gx=a("a"),PWe=o("BlenderbotTokenizer"),$We=o(" or "),hx=a("a"),IWe=o("BlenderbotTokenizerFast"),NWe=o(" (Blenderbot model)"),DWe=l(),qg=a("li"),lJ=a("strong"),jWe=o("blenderbot-small"),qWe=o(" \u2014 "),px=a("a"),GWe=o("BlenderbotSmallTokenizer"),OWe=o(" (BlenderbotSmall model)"),XWe=l(),Gg=a("li"),iJ=a("strong"),VWe=o("byt5"),zWe=o(" \u2014 "),_x=a("a"),WWe=o("ByT5Tokenizer"),QWe=o(" (ByT5 model)"),HWe=l(),Zn=a("li"),dJ=a("strong"),UWe=o("camembert"),JWe=o(" \u2014 "),ux=a("a"),YWe=o("CamembertTokenizer"),KWe=o(" or "),bx=a("a"),ZWe=o("CamembertTokenizerFast"),eQe=o(" (CamemBERT model)"),oQe=l(),Og=a("li"),cJ=a("strong"),rQe=o("canine"),tQe=o(" \u2014 "),vx=a("a"),aQe=o("CanineTokenizer"),nQe=o(" (Canine model)"),sQe=l(),es=a("li"),fJ=a("strong"),lQe=o("clip"),iQe=o(" \u2014 "),Tx=a("a"),dQe=o("CLIPTokenizer"),cQe=o(" or "),Fx=a("a"),fQe=o("CLIPTokenizerFast"),mQe=o(" (CLIP model)"),gQe=l(),os=a("li"),mJ=a("strong"),hQe=o("convbert"),pQe=o(" \u2014 "),Cx=a("a"),_Qe=o("ConvBertTokenizer"),uQe=o(" or "),Mx=a("a"),bQe=o("ConvBertTokenizerFast"),vQe=o(" (ConvBERT model)"),TQe=l(),rs=a("li"),gJ=a("strong"),FQe=o("cpm"),CQe=o(" \u2014 "),Ex=a("a"),MQe=o("CpmTokenizer"),EQe=o(" or "),hJ=a("code"),yQe=o("CpmTokenizerFast"),wQe=o(" (CPM model)"),AQe=l(),Xg=a("li"),pJ=a("strong"),LQe=o("ctrl"),BQe=o(" \u2014 "),yx=a("a"),xQe=o("CTRLTokenizer"),kQe=o(" (CTRL model)"),RQe=l(),ts=a("li"),_J=a("strong"),SQe=o("deberta"),PQe=o(" \u2014 "),wx=a("a"),$Qe=o("DebertaTokenizer"),IQe=o(" or "),Ax=a("a"),NQe=o("DebertaTokenizerFast"),DQe=o(" (DeBERTa model)"),jQe=l(),Vg=a("li"),uJ=a("strong"),qQe=o("deberta-v2"),GQe=o(" \u2014 "),Lx=a("a"),OQe=o("DebertaV2Tokenizer"),XQe=o(" (DeBERTa-v2 model)"),VQe=l(),as=a("li"),bJ=a("strong"),zQe=o("distilbert"),WQe=o(" \u2014 "),Bx=a("a"),QQe=o("DistilBertTokenizer"),HQe=o(" or "),xx=a("a"),UQe=o("DistilBertTokenizerFast"),JQe=o(" (DistilBERT model)"),YQe=l(),ns=a("li"),vJ=a("strong"),KQe=o("dpr"),ZQe=o(" \u2014 "),kx=a("a"),eHe=o("DPRQuestionEncoderTokenizer"),oHe=o(" or "),Rx=a("a"),rHe=o("DPRQuestionEncoderTokenizerFast"),tHe=o(" (DPR model)"),aHe=l(),ss=a("li"),TJ=a("strong"),nHe=o("electra"),sHe=o(" \u2014 "),Sx=a("a"),lHe=o("ElectraTokenizer"),iHe=o(" or "),Px=a("a"),dHe=o("ElectraTokenizerFast"),cHe=o(" (ELECTRA model)"),fHe=l(),zg=a("li"),FJ=a("strong"),mHe=o("flaubert"),gHe=o(" \u2014 "),$x=a("a"),hHe=o("FlaubertTokenizer"),pHe=o(" (FlauBERT model)"),_He=l(),ls=a("li"),CJ=a("strong"),uHe=o("fnet"),bHe=o(" \u2014 "),Ix=a("a"),vHe=o("FNetTokenizer"),THe=o(" or "),Nx=a("a"),FHe=o("FNetTokenizerFast"),CHe=o(" (FNet model)"),MHe=l(),Wg=a("li"),MJ=a("strong"),EHe=o("fsmt"),yHe=o(" \u2014 "),Dx=a("a"),wHe=o("FSMTTokenizer"),AHe=o(" (FairSeq Machine-Translation model)"),LHe=l(),is=a("li"),EJ=a("strong"),BHe=o("funnel"),xHe=o(" \u2014 "),jx=a("a"),kHe=o("FunnelTokenizer"),RHe=o(" or "),qx=a("a"),SHe=o("FunnelTokenizerFast"),PHe=o(" (Funnel Transformer model)"),$He=l(),ds=a("li"),yJ=a("strong"),IHe=o("gpt2"),NHe=o(" \u2014 "),Gx=a("a"),DHe=o("GPT2Tokenizer"),jHe=o(" or "),Ox=a("a"),qHe=o("GPT2TokenizerFast"),GHe=o(" (OpenAI GPT-2 model)"),OHe=l(),cs=a("li"),wJ=a("strong"),XHe=o("gpt_neo"),VHe=o(" \u2014 "),Xx=a("a"),zHe=o("GPT2Tokenizer"),WHe=o(" or "),Vx=a("a"),QHe=o("GPT2TokenizerFast"),HHe=o(" (GPT Neo model)"),UHe=l(),fs=a("li"),AJ=a("strong"),JHe=o("herbert"),YHe=o(" \u2014 "),zx=a("a"),KHe=o("HerbertTokenizer"),ZHe=o(" or "),Wx=a("a"),eUe=o("HerbertTokenizerFast"),oUe=o(" (HerBERT model)"),rUe=l(),Qg=a("li"),LJ=a("strong"),tUe=o("hubert"),aUe=o(" \u2014 "),Qx=a("a"),nUe=o("Wav2Vec2CTCTokenizer"),sUe=o(" (Hubert model)"),lUe=l(),ms=a("li"),BJ=a("strong"),iUe=o("ibert"),dUe=o(" \u2014 "),Hx=a("a"),cUe=o("RobertaTokenizer"),fUe=o(" or "),Ux=a("a"),mUe=o("RobertaTokenizerFast"),gUe=o(" (I-BERT model)"),hUe=l(),gs=a("li"),xJ=a("strong"),pUe=o("layoutlm"),_Ue=o(" \u2014 "),Jx=a("a"),uUe=o("LayoutLMTokenizer"),bUe=o(" or "),Yx=a("a"),vUe=o("LayoutLMTokenizerFast"),TUe=o(" (LayoutLM model)"),FUe=l(),hs=a("li"),kJ=a("strong"),CUe=o("layoutlmv2"),MUe=o(" \u2014 "),Kx=a("a"),EUe=o("LayoutLMv2Tokenizer"),yUe=o(" or "),Zx=a("a"),wUe=o("LayoutLMv2TokenizerFast"),AUe=o(" (LayoutLMv2 model)"),LUe=l(),ps=a("li"),RJ=a("strong"),BUe=o("layoutxlm"),xUe=o(" \u2014 "),ek=a("a"),kUe=o("LayoutXLMTokenizer"),RUe=o(" or "),ok=a("a"),SUe=o("LayoutXLMTokenizerFast"),PUe=o(" (LayoutXLM model)"),$Ue=l(),_s=a("li"),SJ=a("strong"),IUe=o("led"),NUe=o(" \u2014 "),rk=a("a"),DUe=o("LEDTokenizer"),jUe=o(" or "),tk=a("a"),qUe=o("LEDTokenizerFast"),GUe=o(" (LED model)"),OUe=l(),us=a("li"),PJ=a("strong"),XUe=o("longformer"),VUe=o(" \u2014 "),ak=a("a"),zUe=o("LongformerTokenizer"),WUe=o(" or "),nk=a("a"),QUe=o("LongformerTokenizerFast"),HUe=o(" (Longformer model)"),UUe=l(),Hg=a("li"),$J=a("strong"),JUe=o("luke"),YUe=o(" \u2014 "),sk=a("a"),KUe=o("LukeTokenizer"),ZUe=o(" (LUKE model)"),eJe=l(),bs=a("li"),IJ=a("strong"),oJe=o("lxmert"),rJe=o(" \u2014 "),lk=a("a"),tJe=o("LxmertTokenizer"),aJe=o(" or "),ik=a("a"),nJe=o("LxmertTokenizerFast"),sJe=o(" (LXMERT model)"),lJe=l(),Ug=a("li"),NJ=a("strong"),iJe=o("m2m_100"),dJe=o(" \u2014 "),dk=a("a"),cJe=o("M2M100Tokenizer"),fJe=o(" (M2M100 model)"),mJe=l(),Jg=a("li"),DJ=a("strong"),gJe=o("marian"),hJe=o(" \u2014 "),ck=a("a"),pJe=o("MarianTokenizer"),_Je=o(" (Marian model)"),uJe=l(),vs=a("li"),jJ=a("strong"),bJe=o("mbart"),vJe=o(" \u2014 "),fk=a("a"),TJe=o("MBartTokenizer"),FJe=o(" or "),mk=a("a"),CJe=o("MBartTokenizerFast"),MJe=o(" (mBART model)"),EJe=l(),Ts=a("li"),qJ=a("strong"),yJe=o("mbart50"),wJe=o(" \u2014 "),gk=a("a"),AJe=o("MBart50Tokenizer"),LJe=o(" or "),hk=a("a"),BJe=o("MBart50TokenizerFast"),xJe=o(" (mBART-50 model)"),kJe=l(),Yg=a("li"),GJ=a("strong"),RJe=o("mluke"),SJe=o(" \u2014 "),pk=a("a"),PJe=o("MLukeTokenizer"),$Je=o(" (mLUKE model)"),IJe=l(),Fs=a("li"),OJ=a("strong"),NJe=o("mobilebert"),DJe=o(" \u2014 "),_k=a("a"),jJe=o("MobileBertTokenizer"),qJe=o(" or "),uk=a("a"),GJe=o("MobileBertTokenizerFast"),OJe=o(" (MobileBERT model)"),XJe=l(),Cs=a("li"),XJ=a("strong"),VJe=o("mpnet"),zJe=o(" \u2014 "),bk=a("a"),WJe=o("MPNetTokenizer"),QJe=o(" or "),vk=a("a"),HJe=o("MPNetTokenizerFast"),UJe=o(" (MPNet model)"),JJe=l(),Ms=a("li"),VJ=a("strong"),YJe=o("mt5"),KJe=o(" \u2014 "),Tk=a("a"),ZJe=o("MT5Tokenizer"),eYe=o(" or "),Fk=a("a"),oYe=o("MT5TokenizerFast"),rYe=o(" (mT5 model)"),tYe=l(),Es=a("li"),zJ=a("strong"),aYe=o("openai-gpt"),nYe=o(" \u2014 "),Ck=a("a"),sYe=o("OpenAIGPTTokenizer"),lYe=o(" or "),Mk=a("a"),iYe=o("OpenAIGPTTokenizerFast"),dYe=o(" (OpenAI GPT model)"),cYe=l(),ys=a("li"),WJ=a("strong"),fYe=o("pegasus"),mYe=o(" \u2014 "),Ek=a("a"),gYe=o("PegasusTokenizer"),hYe=o(" or "),yk=a("a"),pYe=o("PegasusTokenizerFast"),_Ye=o(" (Pegasus model)"),uYe=l(),Kg=a("li"),QJ=a("strong"),bYe=o("perceiver"),vYe=o(" \u2014 "),wk=a("a"),TYe=o("PerceiverTokenizer"),FYe=o(" (Perceiver model)"),CYe=l(),Zg=a("li"),HJ=a("strong"),MYe=o("phobert"),EYe=o(" \u2014 "),Ak=a("a"),yYe=o("PhobertTokenizer"),wYe=o(" (PhoBERT model)"),AYe=l(),eh=a("li"),UJ=a("strong"),LYe=o("plbart"),BYe=o(" \u2014 "),Lk=a("a"),xYe=o("PLBartTokenizer"),kYe=o(" (PLBart model)"),RYe=l(),oh=a("li"),JJ=a("strong"),SYe=o("prophetnet"),PYe=o(" \u2014 "),Bk=a("a"),$Ye=o("ProphetNetTokenizer"),IYe=o(" (ProphetNet model)"),NYe=l(),ws=a("li"),YJ=a("strong"),DYe=o("qdqbert"),jYe=o(" \u2014 "),xk=a("a"),qYe=o("BertTokenizer"),GYe=o(" or "),kk=a("a"),OYe=o("BertTokenizerFast"),XYe=o(" (QDQBert model)"),VYe=l(),rh=a("li"),KJ=a("strong"),zYe=o("rag"),WYe=o(" \u2014 "),Rk=a("a"),QYe=o("RagTokenizer"),HYe=o(" (RAG model)"),UYe=l(),As=a("li"),ZJ=a("strong"),JYe=o("realm"),YYe=o(" \u2014 "),Sk=a("a"),KYe=o("RealmTokenizer"),ZYe=o(" or "),Pk=a("a"),eKe=o("RealmTokenizerFast"),oKe=o(" (Realm model)"),rKe=l(),Ls=a("li"),eY=a("strong"),tKe=o("reformer"),aKe=o(" \u2014 "),$k=a("a"),nKe=o("ReformerTokenizer"),sKe=o(" or "),Ik=a("a"),lKe=o("ReformerTokenizerFast"),iKe=o(" (Reformer model)"),dKe=l(),Bs=a("li"),oY=a("strong"),cKe=o("rembert"),fKe=o(" \u2014 "),Nk=a("a"),mKe=o("RemBertTokenizer"),gKe=o(" or "),Dk=a("a"),hKe=o("RemBertTokenizerFast"),pKe=o(" (RemBERT model)"),_Ke=l(),xs=a("li"),rY=a("strong"),uKe=o("retribert"),bKe=o(" \u2014 "),jk=a("a"),vKe=o("RetriBertTokenizer"),TKe=o(" or "),qk=a("a"),FKe=o("RetriBertTokenizerFast"),CKe=o(" (RetriBERT model)"),MKe=l(),ks=a("li"),tY=a("strong"),EKe=o("roberta"),yKe=o(" \u2014 "),Gk=a("a"),wKe=o("RobertaTokenizer"),AKe=o(" or "),Ok=a("a"),LKe=o("RobertaTokenizerFast"),BKe=o(" (RoBERTa model)"),xKe=l(),Rs=a("li"),aY=a("strong"),kKe=o("roformer"),RKe=o(" \u2014 "),Xk=a("a"),SKe=o("RoFormerTokenizer"),PKe=o(" or "),Vk=a("a"),$Ke=o("RoFormerTokenizerFast"),IKe=o(" (RoFormer model)"),NKe=l(),th=a("li"),nY=a("strong"),DKe=o("speech_to_text"),jKe=o(" \u2014 "),zk=a("a"),qKe=o("Speech2TextTokenizer"),GKe=o(" (Speech2Text model)"),OKe=l(),ah=a("li"),sY=a("strong"),XKe=o("speech_to_text_2"),VKe=o(" \u2014 "),Wk=a("a"),zKe=o("Speech2Text2Tokenizer"),WKe=o(" (Speech2Text2 model)"),QKe=l(),Ss=a("li"),lY=a("strong"),HKe=o("splinter"),UKe=o(" \u2014 "),Qk=a("a"),JKe=o("SplinterTokenizer"),YKe=o(" or "),Hk=a("a"),KKe=o("SplinterTokenizerFast"),ZKe=o(" (Splinter model)"),eZe=l(),Ps=a("li"),iY=a("strong"),oZe=o("squeezebert"),rZe=o(" \u2014 "),Uk=a("a"),tZe=o("SqueezeBertTokenizer"),aZe=o(" or "),Jk=a("a"),nZe=o("SqueezeBertTokenizerFast"),sZe=o(" (SqueezeBERT model)"),lZe=l(),$s=a("li"),dY=a("strong"),iZe=o("t5"),dZe=o(" \u2014 "),Yk=a("a"),cZe=o("T5Tokenizer"),fZe=o(" or "),Kk=a("a"),mZe=o("T5TokenizerFast"),gZe=o(" (T5 model)"),hZe=l(),nh=a("li"),cY=a("strong"),pZe=o("tapas"),_Ze=o(" \u2014 "),Zk=a("a"),uZe=o("TapasTokenizer"),bZe=o(" (TAPAS model)"),vZe=l(),sh=a("li"),fY=a("strong"),TZe=o("transfo-xl"),FZe=o(" \u2014 "),eR=a("a"),CZe=o("TransfoXLTokenizer"),MZe=o(" (Transformer-XL model)"),EZe=l(),lh=a("li"),mY=a("strong"),yZe=o("wav2vec2"),wZe=o(" \u2014 "),oR=a("a"),AZe=o("Wav2Vec2CTCTokenizer"),LZe=o(" (Wav2Vec2 model)"),BZe=l(),ih=a("li"),gY=a("strong"),xZe=o("wav2vec2_phoneme"),kZe=o(" \u2014 "),rR=a("a"),RZe=o("Wav2Vec2PhonemeCTCTokenizer"),SZe=o(" (Wav2Vec2Phoneme model)"),PZe=l(),Is=a("li"),hY=a("strong"),$Ze=o("xglm"),IZe=o(" \u2014 "),tR=a("a"),NZe=o("XGLMTokenizer"),DZe=o(" or "),aR=a("a"),jZe=o("XGLMTokenizerFast"),qZe=o(" (XGLM model)"),GZe=l(),dh=a("li"),pY=a("strong"),OZe=o("xlm"),XZe=o(" \u2014 "),nR=a("a"),VZe=o("XLMTokenizer"),zZe=o(" (XLM model)"),WZe=l(),ch=a("li"),_Y=a("strong"),QZe=o("xlm-prophetnet"),HZe=o(" \u2014 "),sR=a("a"),UZe=o("XLMProphetNetTokenizer"),JZe=o(" (XLMProphetNet model)"),YZe=l(),Ns=a("li"),uY=a("strong"),KZe=o("xlm-roberta"),ZZe=o(" \u2014 "),lR=a("a"),eeo=o("XLMRobertaTokenizer"),oeo=o(" or "),iR=a("a"),reo=o("XLMRobertaTokenizerFast"),teo=o(" (XLM-RoBERTa model)"),aeo=l(),Ds=a("li"),bY=a("strong"),neo=o("xlnet"),seo=o(" \u2014 "),dR=a("a"),leo=o("XLNetTokenizer"),ieo=o(" or "),cR=a("a"),deo=o("XLNetTokenizerFast"),ceo=o(" (XLNet model)"),feo=l(),vY=a("p"),meo=o("Examples:"),geo=l(),f(y3.$$.fragment),heo=l(),fh=a("div"),f(w3.$$.fragment),peo=l(),TY=a("p"),_eo=o("Register a new tokenizer in this mapping."),hke=l(),Hi=a("h2"),mh=a("a"),FY=a("span"),f(A3.$$.fragment),ueo=l(),CY=a("span"),beo=o("AutoFeatureExtractor"),pke=l(),Ho=a("div"),f(L3.$$.fragment),veo=l(),B3=a("p"),Teo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fR=a("a"),Feo=o("AutoFeatureExtractor.from_pretrained()"),Ceo=o(" class method."),Meo=l(),x3=a("p"),Eeo=o("This class cannot be instantiated directly using "),MY=a("code"),yeo=o("__init__()"),weo=o(" (throws an error)."),Aeo=l(),Ie=a("div"),f(k3.$$.fragment),Leo=l(),EY=a("p"),Beo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xeo=l(),Xa=a("p"),keo=o("The feature extractor class to instantiate is selected based on the "),yY=a("code"),Reo=o("model_type"),Seo=o(` property of the config object
(either passed as an argument or loaded from `),wY=a("code"),Peo=o("pretrained_model_name_or_path"),$eo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),AY=a("code"),Ieo=o("pretrained_model_name_or_path"),Neo=o(":"),Deo=l(),re=a("ul"),gh=a("li"),LY=a("strong"),jeo=o("beit"),qeo=o(" \u2014 "),mR=a("a"),Geo=o("BeitFeatureExtractor"),Oeo=o(" (BEiT model)"),Xeo=l(),hh=a("li"),BY=a("strong"),Veo=o("clip"),zeo=o(" \u2014 "),gR=a("a"),Weo=o("CLIPFeatureExtractor"),Qeo=o(" (CLIP model)"),Heo=l(),ph=a("li"),xY=a("strong"),Ueo=o("convnext"),Jeo=o(" \u2014 "),hR=a("a"),Yeo=o("ConvNextFeatureExtractor"),Keo=o(" (ConvNext model)"),Zeo=l(),_h=a("li"),kY=a("strong"),eoo=o("deit"),ooo=o(" \u2014 "),pR=a("a"),roo=o("DeiTFeatureExtractor"),too=o(" (DeiT model)"),aoo=l(),uh=a("li"),RY=a("strong"),noo=o("detr"),soo=o(" \u2014 "),_R=a("a"),loo=o("DetrFeatureExtractor"),ioo=o(" (DETR model)"),doo=l(),bh=a("li"),SY=a("strong"),coo=o("hubert"),foo=o(" \u2014 "),uR=a("a"),moo=o("Wav2Vec2FeatureExtractor"),goo=o(" (Hubert model)"),hoo=l(),vh=a("li"),PY=a("strong"),poo=o("layoutlmv2"),_oo=o(" \u2014 "),bR=a("a"),uoo=o("LayoutLMv2FeatureExtractor"),boo=o(" (LayoutLMv2 model)"),voo=l(),Th=a("li"),$Y=a("strong"),Too=o("maskformer"),Foo=o(" \u2014 "),vR=a("a"),Coo=o("MaskFormerFeatureExtractor"),Moo=o(" (MaskFormer model)"),Eoo=l(),Fh=a("li"),IY=a("strong"),yoo=o("perceiver"),woo=o(" \u2014 "),TR=a("a"),Aoo=o("PerceiverFeatureExtractor"),Loo=o(" (Perceiver model)"),Boo=l(),Ch=a("li"),NY=a("strong"),xoo=o("poolformer"),koo=o(" \u2014 "),FR=a("a"),Roo=o("PoolFormerFeatureExtractor"),Soo=o(" (PoolFormer model)"),Poo=l(),Mh=a("li"),DY=a("strong"),$oo=o("resnet"),Ioo=o(" \u2014 "),CR=a("a"),Noo=o("ConvNextFeatureExtractor"),Doo=o(" (ResNet model)"),joo=l(),Eh=a("li"),jY=a("strong"),qoo=o("segformer"),Goo=o(" \u2014 "),MR=a("a"),Ooo=o("SegformerFeatureExtractor"),Xoo=o(" (SegFormer model)"),Voo=l(),yh=a("li"),qY=a("strong"),zoo=o("speech_to_text"),Woo=o(" \u2014 "),ER=a("a"),Qoo=o("Speech2TextFeatureExtractor"),Hoo=o(" (Speech2Text model)"),Uoo=l(),wh=a("li"),GY=a("strong"),Joo=o("swin"),Yoo=o(" \u2014 "),yR=a("a"),Koo=o("ViTFeatureExtractor"),Zoo=o(" (Swin model)"),ero=l(),Ah=a("li"),OY=a("strong"),oro=o("van"),rro=o(" \u2014 "),wR=a("a"),tro=o("ConvNextFeatureExtractor"),aro=o(" (VAN model)"),nro=l(),Lh=a("li"),XY=a("strong"),sro=o("vit"),lro=o(" \u2014 "),AR=a("a"),iro=o("ViTFeatureExtractor"),dro=o(" (ViT model)"),cro=l(),Bh=a("li"),VY=a("strong"),fro=o("vit_mae"),mro=o(" \u2014 "),LR=a("a"),gro=o("ViTFeatureExtractor"),hro=o(" (ViTMAE model)"),pro=l(),xh=a("li"),zY=a("strong"),_ro=o("wav2vec2"),uro=o(" \u2014 "),BR=a("a"),bro=o("Wav2Vec2FeatureExtractor"),vro=o(" (Wav2Vec2 model)"),Tro=l(),f(kh.$$.fragment),Fro=l(),WY=a("p"),Cro=o("Examples:"),Mro=l(),f(R3.$$.fragment),Ero=l(),Rh=a("div"),f(S3.$$.fragment),yro=l(),QY=a("p"),wro=o("Register a new feature extractor for this class."),_ke=l(),Ui=a("h2"),Sh=a("a"),HY=a("span"),f(P3.$$.fragment),Aro=l(),UY=a("span"),Lro=o("AutoProcessor"),uke=l(),Uo=a("div"),f($3.$$.fragment),Bro=l(),I3=a("p"),xro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xR=a("a"),kro=o("AutoProcessor.from_pretrained()"),Rro=o(" class method."),Sro=l(),N3=a("p"),Pro=o("This class cannot be instantiated directly using "),JY=a("code"),$ro=o("__init__()"),Iro=o(" (throws an error)."),Nro=l(),Ne=a("div"),f(D3.$$.fragment),Dro=l(),YY=a("p"),jro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qro=l(),Ji=a("p"),Gro=o("The processor class to instantiate is selected based on the "),KY=a("code"),Oro=o("model_type"),Xro=o(` property of the config object (either
passed as an argument or loaded from `),ZY=a("code"),Vro=o("pretrained_model_name_or_path"),zro=o(" if possible):"),Wro=l(),xe=a("ul"),Ph=a("li"),eK=a("strong"),Qro=o("clip"),Hro=o(" \u2014 "),kR=a("a"),Uro=o("CLIPProcessor"),Jro=o(" (CLIP model)"),Yro=l(),$h=a("li"),oK=a("strong"),Kro=o("layoutlmv2"),Zro=o(" \u2014 "),RR=a("a"),eto=o("LayoutLMv2Processor"),oto=o(" (LayoutLMv2 model)"),rto=l(),Ih=a("li"),rK=a("strong"),tto=o("layoutxlm"),ato=o(" \u2014 "),SR=a("a"),nto=o("LayoutXLMProcessor"),sto=o(" (LayoutXLM model)"),lto=l(),Nh=a("li"),tK=a("strong"),ito=o("speech_to_text"),dto=o(" \u2014 "),PR=a("a"),cto=o("Speech2TextProcessor"),fto=o(" (Speech2Text model)"),mto=l(),Dh=a("li"),aK=a("strong"),gto=o("speech_to_text_2"),hto=o(" \u2014 "),$R=a("a"),pto=o("Speech2Text2Processor"),_to=o(" (Speech2Text2 model)"),uto=l(),jh=a("li"),nK=a("strong"),bto=o("trocr"),vto=o(" \u2014 "),IR=a("a"),Tto=o("TrOCRProcessor"),Fto=o(" (TrOCR model)"),Cto=l(),qh=a("li"),sK=a("strong"),Mto=o("vision-text-dual-encoder"),Eto=o(" \u2014 "),NR=a("a"),yto=o("VisionTextDualEncoderProcessor"),wto=o(" (VisionTextDualEncoder model)"),Ato=l(),Gh=a("li"),lK=a("strong"),Lto=o("wav2vec2"),Bto=o(" \u2014 "),DR=a("a"),xto=o("Wav2Vec2Processor"),kto=o(" (Wav2Vec2 model)"),Rto=l(),f(Oh.$$.fragment),Sto=l(),iK=a("p"),Pto=o("Examples:"),$to=l(),f(j3.$$.fragment),Ito=l(),Xh=a("div"),f(q3.$$.fragment),Nto=l(),dK=a("p"),Dto=o("Register a new processor for this class."),bke=l(),Yi=a("h2"),Vh=a("a"),cK=a("span"),f(G3.$$.fragment),jto=l(),fK=a("span"),qto=o("AutoModel"),vke=l(),Jo=a("div"),f(O3.$$.fragment),Gto=l(),Ki=a("p"),Oto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=a("code"),Xto=o("from_pretrained()"),Vto=o("class method or the "),gK=a("code"),zto=o("from_config()"),Wto=o(`class
method.`),Qto=l(),X3=a("p"),Hto=o("This class cannot be instantiated directly using "),hK=a("code"),Uto=o("__init__()"),Jto=o(" (throws an error)."),Yto=l(),Vr=a("div"),f(V3.$$.fragment),Kto=l(),pK=a("p"),Zto=o("Instantiates one of the base model classes of the library from a configuration."),eao=l(),Zi=a("p"),oao=o(`Note:
Loading a model from its configuration file does `),_K=a("strong"),rao=o("not"),tao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("code"),aao=o("from_pretrained()"),nao=o("to load the model weights."),sao=l(),bK=a("p"),lao=o("Examples:"),iao=l(),f(z3.$$.fragment),dao=l(),De=a("div"),f(W3.$$.fragment),cao=l(),vK=a("p"),fao=o("Instantiate one of the base model classes of the library from a pretrained model."),mao=l(),Va=a("p"),gao=o("The model class to instantiate is selected based on the "),TK=a("code"),hao=o("model_type"),pao=o(` property of the config object (either
passed as an argument or loaded from `),FK=a("code"),_ao=o("pretrained_model_name_or_path"),uao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CK=a("code"),bao=o("pretrained_model_name_or_path"),vao=o(":"),Tao=l(),F=a("ul"),zh=a("li"),MK=a("strong"),Fao=o("albert"),Cao=o(" \u2014 "),jR=a("a"),Mao=o("AlbertModel"),Eao=o(" (ALBERT model)"),yao=l(),Wh=a("li"),EK=a("strong"),wao=o("bart"),Aao=o(" \u2014 "),qR=a("a"),Lao=o("BartModel"),Bao=o(" (BART model)"),xao=l(),Qh=a("li"),yK=a("strong"),kao=o("beit"),Rao=o(" \u2014 "),GR=a("a"),Sao=o("BeitModel"),Pao=o(" (BEiT model)"),$ao=l(),Hh=a("li"),wK=a("strong"),Iao=o("bert"),Nao=o(" \u2014 "),OR=a("a"),Dao=o("BertModel"),jao=o(" (BERT model)"),qao=l(),Uh=a("li"),AK=a("strong"),Gao=o("bert-generation"),Oao=o(" \u2014 "),XR=a("a"),Xao=o("BertGenerationEncoder"),Vao=o(" (Bert Generation model)"),zao=l(),Jh=a("li"),LK=a("strong"),Wao=o("big_bird"),Qao=o(" \u2014 "),VR=a("a"),Hao=o("BigBirdModel"),Uao=o(" (BigBird model)"),Jao=l(),Yh=a("li"),BK=a("strong"),Yao=o("bigbird_pegasus"),Kao=o(" \u2014 "),zR=a("a"),Zao=o("BigBirdPegasusModel"),eno=o(" (BigBirdPegasus model)"),ono=l(),Kh=a("li"),xK=a("strong"),rno=o("blenderbot"),tno=o(" \u2014 "),WR=a("a"),ano=o("BlenderbotModel"),nno=o(" (Blenderbot model)"),sno=l(),Zh=a("li"),kK=a("strong"),lno=o("blenderbot-small"),ino=o(" \u2014 "),QR=a("a"),dno=o("BlenderbotSmallModel"),cno=o(" (BlenderbotSmall model)"),fno=l(),ep=a("li"),RK=a("strong"),mno=o("camembert"),gno=o(" \u2014 "),HR=a("a"),hno=o("CamembertModel"),pno=o(" (CamemBERT model)"),_no=l(),op=a("li"),SK=a("strong"),uno=o("canine"),bno=o(" \u2014 "),UR=a("a"),vno=o("CanineModel"),Tno=o(" (Canine model)"),Fno=l(),rp=a("li"),PK=a("strong"),Cno=o("clip"),Mno=o(" \u2014 "),JR=a("a"),Eno=o("CLIPModel"),yno=o(" (CLIP model)"),wno=l(),tp=a("li"),$K=a("strong"),Ano=o("convbert"),Lno=o(" \u2014 "),YR=a("a"),Bno=o("ConvBertModel"),xno=o(" (ConvBERT model)"),kno=l(),ap=a("li"),IK=a("strong"),Rno=o("convnext"),Sno=o(" \u2014 "),KR=a("a"),Pno=o("ConvNextModel"),$no=o(" (ConvNext model)"),Ino=l(),np=a("li"),NK=a("strong"),Nno=o("ctrl"),Dno=o(" \u2014 "),ZR=a("a"),jno=o("CTRLModel"),qno=o(" (CTRL model)"),Gno=l(),sp=a("li"),DK=a("strong"),Ono=o("data2vec-audio"),Xno=o(" \u2014 "),eS=a("a"),Vno=o("Data2VecAudioModel"),zno=o(" (Data2VecAudio model)"),Wno=l(),lp=a("li"),jK=a("strong"),Qno=o("data2vec-text"),Hno=o(" \u2014 "),oS=a("a"),Uno=o("Data2VecTextModel"),Jno=o(" (Data2VecText model)"),Yno=l(),ip=a("li"),qK=a("strong"),Kno=o("deberta"),Zno=o(" \u2014 "),rS=a("a"),eso=o("DebertaModel"),oso=o(" (DeBERTa model)"),rso=l(),dp=a("li"),GK=a("strong"),tso=o("deberta-v2"),aso=o(" \u2014 "),tS=a("a"),nso=o("DebertaV2Model"),sso=o(" (DeBERTa-v2 model)"),lso=l(),cp=a("li"),OK=a("strong"),iso=o("deit"),dso=o(" \u2014 "),aS=a("a"),cso=o("DeiTModel"),fso=o(" (DeiT model)"),mso=l(),fp=a("li"),XK=a("strong"),gso=o("detr"),hso=o(" \u2014 "),nS=a("a"),pso=o("DetrModel"),_so=o(" (DETR model)"),uso=l(),mp=a("li"),VK=a("strong"),bso=o("distilbert"),vso=o(" \u2014 "),sS=a("a"),Tso=o("DistilBertModel"),Fso=o(" (DistilBERT model)"),Cso=l(),gp=a("li"),zK=a("strong"),Mso=o("dpr"),Eso=o(" \u2014 "),lS=a("a"),yso=o("DPRQuestionEncoder"),wso=o(" (DPR model)"),Aso=l(),hp=a("li"),WK=a("strong"),Lso=o("dpt"),Bso=o(" \u2014 "),iS=a("a"),xso=o("DPTModel"),kso=o(" (DPT model)"),Rso=l(),pp=a("li"),QK=a("strong"),Sso=o("electra"),Pso=o(" \u2014 "),dS=a("a"),$so=o("ElectraModel"),Iso=o(" (ELECTRA model)"),Nso=l(),_p=a("li"),HK=a("strong"),Dso=o("flaubert"),jso=o(" \u2014 "),cS=a("a"),qso=o("FlaubertModel"),Gso=o(" (FlauBERT model)"),Oso=l(),up=a("li"),UK=a("strong"),Xso=o("fnet"),Vso=o(" \u2014 "),fS=a("a"),zso=o("FNetModel"),Wso=o(" (FNet model)"),Qso=l(),bp=a("li"),JK=a("strong"),Hso=o("fsmt"),Uso=o(" \u2014 "),mS=a("a"),Jso=o("FSMTModel"),Yso=o(" (FairSeq Machine-Translation model)"),Kso=l(),js=a("li"),YK=a("strong"),Zso=o("funnel"),elo=o(" \u2014 "),gS=a("a"),olo=o("FunnelModel"),rlo=o(" or "),hS=a("a"),tlo=o("FunnelBaseModel"),alo=o(" (Funnel Transformer model)"),nlo=l(),vp=a("li"),KK=a("strong"),slo=o("glpn"),llo=o(" \u2014 "),pS=a("a"),ilo=o("GLPNModel"),dlo=o(" (GLPN model)"),clo=l(),Tp=a("li"),ZK=a("strong"),flo=o("gpt2"),mlo=o(" \u2014 "),_S=a("a"),glo=o("GPT2Model"),hlo=o(" (OpenAI GPT-2 model)"),plo=l(),Fp=a("li"),eZ=a("strong"),_lo=o("gpt_neo"),ulo=o(" \u2014 "),uS=a("a"),blo=o("GPTNeoModel"),vlo=o(" (GPT Neo model)"),Tlo=l(),Cp=a("li"),oZ=a("strong"),Flo=o("gptj"),Clo=o(" \u2014 "),bS=a("a"),Mlo=o("GPTJModel"),Elo=o(" (GPT-J model)"),ylo=l(),Mp=a("li"),rZ=a("strong"),wlo=o("hubert"),Alo=o(" \u2014 "),vS=a("a"),Llo=o("HubertModel"),Blo=o(" (Hubert model)"),xlo=l(),Ep=a("li"),tZ=a("strong"),klo=o("ibert"),Rlo=o(" \u2014 "),TS=a("a"),Slo=o("IBertModel"),Plo=o(" (I-BERT model)"),$lo=l(),yp=a("li"),aZ=a("strong"),Ilo=o("imagegpt"),Nlo=o(" \u2014 "),FS=a("a"),Dlo=o("ImageGPTModel"),jlo=o(" (ImageGPT model)"),qlo=l(),wp=a("li"),nZ=a("strong"),Glo=o("layoutlm"),Olo=o(" \u2014 "),CS=a("a"),Xlo=o("LayoutLMModel"),Vlo=o(" (LayoutLM model)"),zlo=l(),Ap=a("li"),sZ=a("strong"),Wlo=o("layoutlmv2"),Qlo=o(" \u2014 "),MS=a("a"),Hlo=o("LayoutLMv2Model"),Ulo=o(" (LayoutLMv2 model)"),Jlo=l(),Lp=a("li"),lZ=a("strong"),Ylo=o("led"),Klo=o(" \u2014 "),ES=a("a"),Zlo=o("LEDModel"),eio=o(" (LED model)"),oio=l(),Bp=a("li"),iZ=a("strong"),rio=o("longformer"),tio=o(" \u2014 "),yS=a("a"),aio=o("LongformerModel"),nio=o(" (Longformer model)"),sio=l(),xp=a("li"),dZ=a("strong"),lio=o("luke"),iio=o(" \u2014 "),wS=a("a"),dio=o("LukeModel"),cio=o(" (LUKE model)"),fio=l(),kp=a("li"),cZ=a("strong"),mio=o("lxmert"),gio=o(" \u2014 "),AS=a("a"),hio=o("LxmertModel"),pio=o(" (LXMERT model)"),_io=l(),Rp=a("li"),fZ=a("strong"),uio=o("m2m_100"),bio=o(" \u2014 "),LS=a("a"),vio=o("M2M100Model"),Tio=o(" (M2M100 model)"),Fio=l(),Sp=a("li"),mZ=a("strong"),Cio=o("marian"),Mio=o(" \u2014 "),BS=a("a"),Eio=o("MarianModel"),yio=o(" (Marian model)"),wio=l(),Pp=a("li"),gZ=a("strong"),Aio=o("maskformer"),Lio=o(" \u2014 "),xS=a("a"),Bio=o("MaskFormerModel"),xio=o(" (MaskFormer model)"),kio=l(),$p=a("li"),hZ=a("strong"),Rio=o("mbart"),Sio=o(" \u2014 "),kS=a("a"),Pio=o("MBartModel"),$io=o(" (mBART model)"),Iio=l(),Ip=a("li"),pZ=a("strong"),Nio=o("megatron-bert"),Dio=o(" \u2014 "),RS=a("a"),jio=o("MegatronBertModel"),qio=o(" (MegatronBert model)"),Gio=l(),Np=a("li"),_Z=a("strong"),Oio=o("mobilebert"),Xio=o(" \u2014 "),SS=a("a"),Vio=o("MobileBertModel"),zio=o(" (MobileBERT model)"),Wio=l(),Dp=a("li"),uZ=a("strong"),Qio=o("mpnet"),Hio=o(" \u2014 "),PS=a("a"),Uio=o("MPNetModel"),Jio=o(" (MPNet model)"),Yio=l(),jp=a("li"),bZ=a("strong"),Kio=o("mt5"),Zio=o(" \u2014 "),$S=a("a"),edo=o("MT5Model"),odo=o(" (mT5 model)"),rdo=l(),qp=a("li"),vZ=a("strong"),tdo=o("nystromformer"),ado=o(" \u2014 "),IS=a("a"),ndo=o("NystromformerModel"),sdo=o(" (Nystromformer model)"),ldo=l(),Gp=a("li"),TZ=a("strong"),ido=o("openai-gpt"),ddo=o(" \u2014 "),NS=a("a"),cdo=o("OpenAIGPTModel"),fdo=o(" (OpenAI GPT model)"),mdo=l(),Op=a("li"),FZ=a("strong"),gdo=o("pegasus"),hdo=o(" \u2014 "),DS=a("a"),pdo=o("PegasusModel"),_do=o(" (Pegasus model)"),udo=l(),Xp=a("li"),CZ=a("strong"),bdo=o("perceiver"),vdo=o(" \u2014 "),jS=a("a"),Tdo=o("PerceiverModel"),Fdo=o(" (Perceiver model)"),Cdo=l(),Vp=a("li"),MZ=a("strong"),Mdo=o("plbart"),Edo=o(" \u2014 "),qS=a("a"),ydo=o("PLBartModel"),wdo=o(" (PLBart model)"),Ado=l(),zp=a("li"),EZ=a("strong"),Ldo=o("poolformer"),Bdo=o(" \u2014 "),GS=a("a"),xdo=o("PoolFormerModel"),kdo=o(" (PoolFormer model)"),Rdo=l(),Wp=a("li"),yZ=a("strong"),Sdo=o("prophetnet"),Pdo=o(" \u2014 "),OS=a("a"),$do=o("ProphetNetModel"),Ido=o(" (ProphetNet model)"),Ndo=l(),Qp=a("li"),wZ=a("strong"),Ddo=o("qdqbert"),jdo=o(" \u2014 "),XS=a("a"),qdo=o("QDQBertModel"),Gdo=o(" (QDQBert model)"),Odo=l(),Hp=a("li"),AZ=a("strong"),Xdo=o("reformer"),Vdo=o(" \u2014 "),VS=a("a"),zdo=o("ReformerModel"),Wdo=o(" (Reformer model)"),Qdo=l(),Up=a("li"),LZ=a("strong"),Hdo=o("rembert"),Udo=o(" \u2014 "),zS=a("a"),Jdo=o("RemBertModel"),Ydo=o(" (RemBERT model)"),Kdo=l(),Jp=a("li"),BZ=a("strong"),Zdo=o("resnet"),eco=o(" \u2014 "),WS=a("a"),oco=o("ResNetModel"),rco=o(" (ResNet model)"),tco=l(),Yp=a("li"),xZ=a("strong"),aco=o("retribert"),nco=o(" \u2014 "),QS=a("a"),sco=o("RetriBertModel"),lco=o(" (RetriBERT model)"),ico=l(),Kp=a("li"),kZ=a("strong"),dco=o("roberta"),cco=o(" \u2014 "),HS=a("a"),fco=o("RobertaModel"),mco=o(" (RoBERTa model)"),gco=l(),Zp=a("li"),RZ=a("strong"),hco=o("roformer"),pco=o(" \u2014 "),US=a("a"),_co=o("RoFormerModel"),uco=o(" (RoFormer model)"),bco=l(),e_=a("li"),SZ=a("strong"),vco=o("segformer"),Tco=o(" \u2014 "),JS=a("a"),Fco=o("SegformerModel"),Cco=o(" (SegFormer model)"),Mco=l(),o_=a("li"),PZ=a("strong"),Eco=o("sew"),yco=o(" \u2014 "),YS=a("a"),wco=o("SEWModel"),Aco=o(" (SEW model)"),Lco=l(),r_=a("li"),$Z=a("strong"),Bco=o("sew-d"),xco=o(" \u2014 "),KS=a("a"),kco=o("SEWDModel"),Rco=o(" (SEW-D model)"),Sco=l(),t_=a("li"),IZ=a("strong"),Pco=o("speech_to_text"),$co=o(" \u2014 "),ZS=a("a"),Ico=o("Speech2TextModel"),Nco=o(" (Speech2Text model)"),Dco=l(),a_=a("li"),NZ=a("strong"),jco=o("splinter"),qco=o(" \u2014 "),eP=a("a"),Gco=o("SplinterModel"),Oco=o(" (Splinter model)"),Xco=l(),n_=a("li"),DZ=a("strong"),Vco=o("squeezebert"),zco=o(" \u2014 "),oP=a("a"),Wco=o("SqueezeBertModel"),Qco=o(" (SqueezeBERT model)"),Hco=l(),s_=a("li"),jZ=a("strong"),Uco=o("swin"),Jco=o(" \u2014 "),rP=a("a"),Yco=o("SwinModel"),Kco=o(" (Swin model)"),Zco=l(),l_=a("li"),qZ=a("strong"),efo=o("t5"),ofo=o(" \u2014 "),tP=a("a"),rfo=o("T5Model"),tfo=o(" (T5 model)"),afo=l(),i_=a("li"),GZ=a("strong"),nfo=o("tapas"),sfo=o(" \u2014 "),aP=a("a"),lfo=o("TapasModel"),ifo=o(" (TAPAS model)"),dfo=l(),d_=a("li"),OZ=a("strong"),cfo=o("transfo-xl"),ffo=o(" \u2014 "),nP=a("a"),mfo=o("TransfoXLModel"),gfo=o(" (Transformer-XL model)"),hfo=l(),c_=a("li"),XZ=a("strong"),pfo=o("unispeech"),_fo=o(" \u2014 "),sP=a("a"),ufo=o("UniSpeechModel"),bfo=o(" (UniSpeech model)"),vfo=l(),f_=a("li"),VZ=a("strong"),Tfo=o("unispeech-sat"),Ffo=o(" \u2014 "),lP=a("a"),Cfo=o("UniSpeechSatModel"),Mfo=o(" (UniSpeechSat model)"),Efo=l(),m_=a("li"),zZ=a("strong"),yfo=o("van"),wfo=o(" \u2014 "),iP=a("a"),Afo=o("VanModel"),Lfo=o(" (VAN model)"),Bfo=l(),g_=a("li"),WZ=a("strong"),xfo=o("vilt"),kfo=o(" \u2014 "),dP=a("a"),Rfo=o("ViltModel"),Sfo=o(" (ViLT model)"),Pfo=l(),h_=a("li"),QZ=a("strong"),$fo=o("vision-text-dual-encoder"),Ifo=o(" \u2014 "),cP=a("a"),Nfo=o("VisionTextDualEncoderModel"),Dfo=o(" (VisionTextDualEncoder model)"),jfo=l(),p_=a("li"),HZ=a("strong"),qfo=o("visual_bert"),Gfo=o(" \u2014 "),fP=a("a"),Ofo=o("VisualBertModel"),Xfo=o(" (VisualBert model)"),Vfo=l(),__=a("li"),UZ=a("strong"),zfo=o("vit"),Wfo=o(" \u2014 "),mP=a("a"),Qfo=o("ViTModel"),Hfo=o(" (ViT model)"),Ufo=l(),u_=a("li"),JZ=a("strong"),Jfo=o("vit_mae"),Yfo=o(" \u2014 "),gP=a("a"),Kfo=o("ViTMAEModel"),Zfo=o(" (ViTMAE model)"),emo=l(),b_=a("li"),YZ=a("strong"),omo=o("wav2vec2"),rmo=o(" \u2014 "),hP=a("a"),tmo=o("Wav2Vec2Model"),amo=o(" (Wav2Vec2 model)"),nmo=l(),v_=a("li"),KZ=a("strong"),smo=o("wavlm"),lmo=o(" \u2014 "),pP=a("a"),imo=o("WavLMModel"),dmo=o(" (WavLM model)"),cmo=l(),T_=a("li"),ZZ=a("strong"),fmo=o("xglm"),mmo=o(" \u2014 "),_P=a("a"),gmo=o("XGLMModel"),hmo=o(" (XGLM model)"),pmo=l(),F_=a("li"),eee=a("strong"),_mo=o("xlm"),umo=o(" \u2014 "),uP=a("a"),bmo=o("XLMModel"),vmo=o(" (XLM model)"),Tmo=l(),C_=a("li"),oee=a("strong"),Fmo=o("xlm-prophetnet"),Cmo=o(" \u2014 "),bP=a("a"),Mmo=o("XLMProphetNetModel"),Emo=o(" (XLMProphetNet model)"),ymo=l(),M_=a("li"),ree=a("strong"),wmo=o("xlm-roberta"),Amo=o(" \u2014 "),vP=a("a"),Lmo=o("XLMRobertaModel"),Bmo=o(" (XLM-RoBERTa model)"),xmo=l(),E_=a("li"),tee=a("strong"),kmo=o("xlm-roberta-xl"),Rmo=o(" \u2014 "),TP=a("a"),Smo=o("XLMRobertaXLModel"),Pmo=o(" (XLM-RoBERTa-XL model)"),$mo=l(),y_=a("li"),aee=a("strong"),Imo=o("xlnet"),Nmo=o(" \u2014 "),FP=a("a"),Dmo=o("XLNetModel"),jmo=o(" (XLNet model)"),qmo=l(),w_=a("li"),nee=a("strong"),Gmo=o("yoso"),Omo=o(" \u2014 "),CP=a("a"),Xmo=o("YosoModel"),Vmo=o(" (YOSO model)"),zmo=l(),A_=a("p"),Wmo=o("The model is set in evaluation mode by default using "),see=a("code"),Qmo=o("model.eval()"),Hmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lee=a("code"),Umo=o("model.train()"),Jmo=l(),iee=a("p"),Ymo=o("Examples:"),Kmo=l(),f(Q3.$$.fragment),Tke=l(),ed=a("h2"),L_=a("a"),dee=a("span"),f(H3.$$.fragment),Zmo=l(),cee=a("span"),ego=o("AutoModelForPreTraining"),Fke=l(),Yo=a("div"),f(U3.$$.fragment),ogo=l(),od=a("p"),rgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fee=a("code"),tgo=o("from_pretrained()"),ago=o("class method or the "),mee=a("code"),ngo=o("from_config()"),sgo=o(`class
method.`),lgo=l(),J3=a("p"),igo=o("This class cannot be instantiated directly using "),gee=a("code"),dgo=o("__init__()"),cgo=o(" (throws an error)."),fgo=l(),zr=a("div"),f(Y3.$$.fragment),mgo=l(),hee=a("p"),ggo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hgo=l(),rd=a("p"),pgo=o(`Note:
Loading a model from its configuration file does `),pee=a("strong"),_go=o("not"),ugo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("code"),bgo=o("from_pretrained()"),vgo=o("to load the model weights."),Tgo=l(),uee=a("p"),Fgo=o("Examples:"),Cgo=l(),f(K3.$$.fragment),Mgo=l(),je=a("div"),f(Z3.$$.fragment),Ego=l(),bee=a("p"),ygo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wgo=l(),za=a("p"),Ago=o("The model class to instantiate is selected based on the "),vee=a("code"),Lgo=o("model_type"),Bgo=o(` property of the config object (either
passed as an argument or loaded from `),Tee=a("code"),xgo=o("pretrained_model_name_or_path"),kgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fee=a("code"),Rgo=o("pretrained_model_name_or_path"),Sgo=o(":"),Pgo=l(),k=a("ul"),B_=a("li"),Cee=a("strong"),$go=o("albert"),Igo=o(" \u2014 "),MP=a("a"),Ngo=o("AlbertForPreTraining"),Dgo=o(" (ALBERT model)"),jgo=l(),x_=a("li"),Mee=a("strong"),qgo=o("bart"),Ggo=o(" \u2014 "),EP=a("a"),Ogo=o("BartForConditionalGeneration"),Xgo=o(" (BART model)"),Vgo=l(),k_=a("li"),Eee=a("strong"),zgo=o("bert"),Wgo=o(" \u2014 "),yP=a("a"),Qgo=o("BertForPreTraining"),Hgo=o(" (BERT model)"),Ugo=l(),R_=a("li"),yee=a("strong"),Jgo=o("big_bird"),Ygo=o(" \u2014 "),wP=a("a"),Kgo=o("BigBirdForPreTraining"),Zgo=o(" (BigBird model)"),eho=l(),S_=a("li"),wee=a("strong"),oho=o("camembert"),rho=o(" \u2014 "),AP=a("a"),tho=o("CamembertForMaskedLM"),aho=o(" (CamemBERT model)"),nho=l(),P_=a("li"),Aee=a("strong"),sho=o("ctrl"),lho=o(" \u2014 "),LP=a("a"),iho=o("CTRLLMHeadModel"),dho=o(" (CTRL model)"),cho=l(),$_=a("li"),Lee=a("strong"),fho=o("data2vec-text"),mho=o(" \u2014 "),BP=a("a"),gho=o("Data2VecTextForMaskedLM"),hho=o(" (Data2VecText model)"),pho=l(),I_=a("li"),Bee=a("strong"),_ho=o("deberta"),uho=o(" \u2014 "),xP=a("a"),bho=o("DebertaForMaskedLM"),vho=o(" (DeBERTa model)"),Tho=l(),N_=a("li"),xee=a("strong"),Fho=o("deberta-v2"),Cho=o(" \u2014 "),kP=a("a"),Mho=o("DebertaV2ForMaskedLM"),Eho=o(" (DeBERTa-v2 model)"),yho=l(),D_=a("li"),kee=a("strong"),who=o("distilbert"),Aho=o(" \u2014 "),RP=a("a"),Lho=o("DistilBertForMaskedLM"),Bho=o(" (DistilBERT model)"),xho=l(),j_=a("li"),Ree=a("strong"),kho=o("electra"),Rho=o(" \u2014 "),SP=a("a"),Sho=o("ElectraForPreTraining"),Pho=o(" (ELECTRA model)"),$ho=l(),q_=a("li"),See=a("strong"),Iho=o("flaubert"),Nho=o(" \u2014 "),PP=a("a"),Dho=o("FlaubertWithLMHeadModel"),jho=o(" (FlauBERT model)"),qho=l(),G_=a("li"),Pee=a("strong"),Gho=o("fnet"),Oho=o(" \u2014 "),$P=a("a"),Xho=o("FNetForPreTraining"),Vho=o(" (FNet model)"),zho=l(),O_=a("li"),$ee=a("strong"),Who=o("fsmt"),Qho=o(" \u2014 "),IP=a("a"),Hho=o("FSMTForConditionalGeneration"),Uho=o(" (FairSeq Machine-Translation model)"),Jho=l(),X_=a("li"),Iee=a("strong"),Yho=o("funnel"),Kho=o(" \u2014 "),NP=a("a"),Zho=o("FunnelForPreTraining"),epo=o(" (Funnel Transformer model)"),opo=l(),V_=a("li"),Nee=a("strong"),rpo=o("gpt2"),tpo=o(" \u2014 "),DP=a("a"),apo=o("GPT2LMHeadModel"),npo=o(" (OpenAI GPT-2 model)"),spo=l(),z_=a("li"),Dee=a("strong"),lpo=o("ibert"),ipo=o(" \u2014 "),jP=a("a"),dpo=o("IBertForMaskedLM"),cpo=o(" (I-BERT model)"),fpo=l(),W_=a("li"),jee=a("strong"),mpo=o("layoutlm"),gpo=o(" \u2014 "),qP=a("a"),hpo=o("LayoutLMForMaskedLM"),ppo=o(" (LayoutLM model)"),_po=l(),Q_=a("li"),qee=a("strong"),upo=o("longformer"),bpo=o(" \u2014 "),GP=a("a"),vpo=o("LongformerForMaskedLM"),Tpo=o(" (Longformer model)"),Fpo=l(),H_=a("li"),Gee=a("strong"),Cpo=o("lxmert"),Mpo=o(" \u2014 "),OP=a("a"),Epo=o("LxmertForPreTraining"),ypo=o(" (LXMERT model)"),wpo=l(),U_=a("li"),Oee=a("strong"),Apo=o("megatron-bert"),Lpo=o(" \u2014 "),XP=a("a"),Bpo=o("MegatronBertForPreTraining"),xpo=o(" (MegatronBert model)"),kpo=l(),J_=a("li"),Xee=a("strong"),Rpo=o("mobilebert"),Spo=o(" \u2014 "),VP=a("a"),Ppo=o("MobileBertForPreTraining"),$po=o(" (MobileBERT model)"),Ipo=l(),Y_=a("li"),Vee=a("strong"),Npo=o("mpnet"),Dpo=o(" \u2014 "),zP=a("a"),jpo=o("MPNetForMaskedLM"),qpo=o(" (MPNet model)"),Gpo=l(),K_=a("li"),zee=a("strong"),Opo=o("openai-gpt"),Xpo=o(" \u2014 "),WP=a("a"),Vpo=o("OpenAIGPTLMHeadModel"),zpo=o(" (OpenAI GPT model)"),Wpo=l(),Z_=a("li"),Wee=a("strong"),Qpo=o("retribert"),Hpo=o(" \u2014 "),QP=a("a"),Upo=o("RetriBertModel"),Jpo=o(" (RetriBERT model)"),Ypo=l(),eu=a("li"),Qee=a("strong"),Kpo=o("roberta"),Zpo=o(" \u2014 "),HP=a("a"),e_o=o("RobertaForMaskedLM"),o_o=o(" (RoBERTa model)"),r_o=l(),ou=a("li"),Hee=a("strong"),t_o=o("squeezebert"),a_o=o(" \u2014 "),UP=a("a"),n_o=o("SqueezeBertForMaskedLM"),s_o=o(" (SqueezeBERT model)"),l_o=l(),ru=a("li"),Uee=a("strong"),i_o=o("t5"),d_o=o(" \u2014 "),JP=a("a"),c_o=o("T5ForConditionalGeneration"),f_o=o(" (T5 model)"),m_o=l(),tu=a("li"),Jee=a("strong"),g_o=o("tapas"),h_o=o(" \u2014 "),YP=a("a"),p_o=o("TapasForMaskedLM"),__o=o(" (TAPAS model)"),u_o=l(),au=a("li"),Yee=a("strong"),b_o=o("transfo-xl"),v_o=o(" \u2014 "),KP=a("a"),T_o=o("TransfoXLLMHeadModel"),F_o=o(" (Transformer-XL model)"),C_o=l(),nu=a("li"),Kee=a("strong"),M_o=o("unispeech"),E_o=o(" \u2014 "),ZP=a("a"),y_o=o("UniSpeechForPreTraining"),w_o=o(" (UniSpeech model)"),A_o=l(),su=a("li"),Zee=a("strong"),L_o=o("unispeech-sat"),B_o=o(" \u2014 "),e$=a("a"),x_o=o("UniSpeechSatForPreTraining"),k_o=o(" (UniSpeechSat model)"),R_o=l(),lu=a("li"),eoe=a("strong"),S_o=o("visual_bert"),P_o=o(" \u2014 "),o$=a("a"),$_o=o("VisualBertForPreTraining"),I_o=o(" (VisualBert model)"),N_o=l(),iu=a("li"),ooe=a("strong"),D_o=o("vit_mae"),j_o=o(" \u2014 "),r$=a("a"),q_o=o("ViTMAEForPreTraining"),G_o=o(" (ViTMAE model)"),O_o=l(),du=a("li"),roe=a("strong"),X_o=o("wav2vec2"),V_o=o(" \u2014 "),t$=a("a"),z_o=o("Wav2Vec2ForPreTraining"),W_o=o(" (Wav2Vec2 model)"),Q_o=l(),cu=a("li"),toe=a("strong"),H_o=o("xlm"),U_o=o(" \u2014 "),a$=a("a"),J_o=o("XLMWithLMHeadModel"),Y_o=o(" (XLM model)"),K_o=l(),fu=a("li"),aoe=a("strong"),Z_o=o("xlm-roberta"),euo=o(" \u2014 "),n$=a("a"),ouo=o("XLMRobertaForMaskedLM"),ruo=o(" (XLM-RoBERTa model)"),tuo=l(),mu=a("li"),noe=a("strong"),auo=o("xlm-roberta-xl"),nuo=o(" \u2014 "),s$=a("a"),suo=o("XLMRobertaXLForMaskedLM"),luo=o(" (XLM-RoBERTa-XL model)"),iuo=l(),gu=a("li"),soe=a("strong"),duo=o("xlnet"),cuo=o(" \u2014 "),l$=a("a"),fuo=o("XLNetLMHeadModel"),muo=o(" (XLNet model)"),guo=l(),hu=a("p"),huo=o("The model is set in evaluation mode by default using "),loe=a("code"),puo=o("model.eval()"),_uo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ioe=a("code"),uuo=o("model.train()"),buo=l(),doe=a("p"),vuo=o("Examples:"),Tuo=l(),f(ey.$$.fragment),Cke=l(),td=a("h2"),pu=a("a"),coe=a("span"),f(oy.$$.fragment),Fuo=l(),foe=a("span"),Cuo=o("AutoModelForCausalLM"),Mke=l(),Ko=a("div"),f(ry.$$.fragment),Muo=l(),ad=a("p"),Euo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),moe=a("code"),yuo=o("from_pretrained()"),wuo=o("class method or the "),goe=a("code"),Auo=o("from_config()"),Luo=o(`class
method.`),Buo=l(),ty=a("p"),xuo=o("This class cannot be instantiated directly using "),hoe=a("code"),kuo=o("__init__()"),Ruo=o(" (throws an error)."),Suo=l(),Wr=a("div"),f(ay.$$.fragment),Puo=l(),poe=a("p"),$uo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Iuo=l(),nd=a("p"),Nuo=o(`Note:
Loading a model from its configuration file does `),_oe=a("strong"),Duo=o("not"),juo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=a("code"),quo=o("from_pretrained()"),Guo=o("to load the model weights."),Ouo=l(),boe=a("p"),Xuo=o("Examples:"),Vuo=l(),f(ny.$$.fragment),zuo=l(),qe=a("div"),f(sy.$$.fragment),Wuo=l(),voe=a("p"),Quo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Huo=l(),Wa=a("p"),Uuo=o("The model class to instantiate is selected based on the "),Toe=a("code"),Juo=o("model_type"),Yuo=o(` property of the config object (either
passed as an argument or loaded from `),Foe=a("code"),Kuo=o("pretrained_model_name_or_path"),Zuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Coe=a("code"),e1o=o("pretrained_model_name_or_path"),o1o=o(":"),r1o=l(),$=a("ul"),_u=a("li"),Moe=a("strong"),t1o=o("bart"),a1o=o(" \u2014 "),i$=a("a"),n1o=o("BartForCausalLM"),s1o=o(" (BART model)"),l1o=l(),uu=a("li"),Eoe=a("strong"),i1o=o("bert"),d1o=o(" \u2014 "),d$=a("a"),c1o=o("BertLMHeadModel"),f1o=o(" (BERT model)"),m1o=l(),bu=a("li"),yoe=a("strong"),g1o=o("bert-generation"),h1o=o(" \u2014 "),c$=a("a"),p1o=o("BertGenerationDecoder"),_1o=o(" (Bert Generation model)"),u1o=l(),vu=a("li"),woe=a("strong"),b1o=o("big_bird"),v1o=o(" \u2014 "),f$=a("a"),T1o=o("BigBirdForCausalLM"),F1o=o(" (BigBird model)"),C1o=l(),Tu=a("li"),Aoe=a("strong"),M1o=o("bigbird_pegasus"),E1o=o(" \u2014 "),m$=a("a"),y1o=o("BigBirdPegasusForCausalLM"),w1o=o(" (BigBirdPegasus model)"),A1o=l(),Fu=a("li"),Loe=a("strong"),L1o=o("blenderbot"),B1o=o(" \u2014 "),g$=a("a"),x1o=o("BlenderbotForCausalLM"),k1o=o(" (Blenderbot model)"),R1o=l(),Cu=a("li"),Boe=a("strong"),S1o=o("blenderbot-small"),P1o=o(" \u2014 "),h$=a("a"),$1o=o("BlenderbotSmallForCausalLM"),I1o=o(" (BlenderbotSmall model)"),N1o=l(),Mu=a("li"),xoe=a("strong"),D1o=o("camembert"),j1o=o(" \u2014 "),p$=a("a"),q1o=o("CamembertForCausalLM"),G1o=o(" (CamemBERT model)"),O1o=l(),Eu=a("li"),koe=a("strong"),X1o=o("ctrl"),V1o=o(" \u2014 "),_$=a("a"),z1o=o("CTRLLMHeadModel"),W1o=o(" (CTRL model)"),Q1o=l(),yu=a("li"),Roe=a("strong"),H1o=o("data2vec-text"),U1o=o(" \u2014 "),u$=a("a"),J1o=o("Data2VecTextForCausalLM"),Y1o=o(" (Data2VecText model)"),K1o=l(),wu=a("li"),Soe=a("strong"),Z1o=o("electra"),e9o=o(" \u2014 "),b$=a("a"),o9o=o("ElectraForCausalLM"),r9o=o(" (ELECTRA model)"),t9o=l(),Au=a("li"),Poe=a("strong"),a9o=o("gpt2"),n9o=o(" \u2014 "),v$=a("a"),s9o=o("GPT2LMHeadModel"),l9o=o(" (OpenAI GPT-2 model)"),i9o=l(),Lu=a("li"),$oe=a("strong"),d9o=o("gpt_neo"),c9o=o(" \u2014 "),T$=a("a"),f9o=o("GPTNeoForCausalLM"),m9o=o(" (GPT Neo model)"),g9o=l(),Bu=a("li"),Ioe=a("strong"),h9o=o("gptj"),p9o=o(" \u2014 "),F$=a("a"),_9o=o("GPTJForCausalLM"),u9o=o(" (GPT-J model)"),b9o=l(),xu=a("li"),Noe=a("strong"),v9o=o("marian"),T9o=o(" \u2014 "),C$=a("a"),F9o=o("MarianForCausalLM"),C9o=o(" (Marian model)"),M9o=l(),ku=a("li"),Doe=a("strong"),E9o=o("mbart"),y9o=o(" \u2014 "),M$=a("a"),w9o=o("MBartForCausalLM"),A9o=o(" (mBART model)"),L9o=l(),Ru=a("li"),joe=a("strong"),B9o=o("megatron-bert"),x9o=o(" \u2014 "),E$=a("a"),k9o=o("MegatronBertForCausalLM"),R9o=o(" (MegatronBert model)"),S9o=l(),Su=a("li"),qoe=a("strong"),P9o=o("openai-gpt"),$9o=o(" \u2014 "),y$=a("a"),I9o=o("OpenAIGPTLMHeadModel"),N9o=o(" (OpenAI GPT model)"),D9o=l(),Pu=a("li"),Goe=a("strong"),j9o=o("pegasus"),q9o=o(" \u2014 "),w$=a("a"),G9o=o("PegasusForCausalLM"),O9o=o(" (Pegasus model)"),X9o=l(),$u=a("li"),Ooe=a("strong"),V9o=o("plbart"),z9o=o(" \u2014 "),A$=a("a"),W9o=o("PLBartForCausalLM"),Q9o=o(" (PLBart model)"),H9o=l(),Iu=a("li"),Xoe=a("strong"),U9o=o("prophetnet"),J9o=o(" \u2014 "),L$=a("a"),Y9o=o("ProphetNetForCausalLM"),K9o=o(" (ProphetNet model)"),Z9o=l(),Nu=a("li"),Voe=a("strong"),ebo=o("qdqbert"),obo=o(" \u2014 "),B$=a("a"),rbo=o("QDQBertLMHeadModel"),tbo=o(" (QDQBert model)"),abo=l(),Du=a("li"),zoe=a("strong"),nbo=o("reformer"),sbo=o(" \u2014 "),x$=a("a"),lbo=o("ReformerModelWithLMHead"),ibo=o(" (Reformer model)"),dbo=l(),ju=a("li"),Woe=a("strong"),cbo=o("rembert"),fbo=o(" \u2014 "),k$=a("a"),mbo=o("RemBertForCausalLM"),gbo=o(" (RemBERT model)"),hbo=l(),qu=a("li"),Qoe=a("strong"),pbo=o("roberta"),_bo=o(" \u2014 "),R$=a("a"),ubo=o("RobertaForCausalLM"),bbo=o(" (RoBERTa model)"),vbo=l(),Gu=a("li"),Hoe=a("strong"),Tbo=o("roformer"),Fbo=o(" \u2014 "),S$=a("a"),Cbo=o("RoFormerForCausalLM"),Mbo=o(" (RoFormer model)"),Ebo=l(),Ou=a("li"),Uoe=a("strong"),ybo=o("speech_to_text_2"),wbo=o(" \u2014 "),P$=a("a"),Abo=o("Speech2Text2ForCausalLM"),Lbo=o(" (Speech2Text2 model)"),Bbo=l(),Xu=a("li"),Joe=a("strong"),xbo=o("transfo-xl"),kbo=o(" \u2014 "),$$=a("a"),Rbo=o("TransfoXLLMHeadModel"),Sbo=o(" (Transformer-XL model)"),Pbo=l(),Vu=a("li"),Yoe=a("strong"),$bo=o("trocr"),Ibo=o(" \u2014 "),I$=a("a"),Nbo=o("TrOCRForCausalLM"),Dbo=o(" (TrOCR model)"),jbo=l(),zu=a("li"),Koe=a("strong"),qbo=o("xglm"),Gbo=o(" \u2014 "),N$=a("a"),Obo=o("XGLMForCausalLM"),Xbo=o(" (XGLM model)"),Vbo=l(),Wu=a("li"),Zoe=a("strong"),zbo=o("xlm"),Wbo=o(" \u2014 "),D$=a("a"),Qbo=o("XLMWithLMHeadModel"),Hbo=o(" (XLM model)"),Ubo=l(),Qu=a("li"),ere=a("strong"),Jbo=o("xlm-prophetnet"),Ybo=o(" \u2014 "),j$=a("a"),Kbo=o("XLMProphetNetForCausalLM"),Zbo=o(" (XLMProphetNet model)"),e5o=l(),Hu=a("li"),ore=a("strong"),o5o=o("xlm-roberta"),r5o=o(" \u2014 "),q$=a("a"),t5o=o("XLMRobertaForCausalLM"),a5o=o(" (XLM-RoBERTa model)"),n5o=l(),Uu=a("li"),rre=a("strong"),s5o=o("xlm-roberta-xl"),l5o=o(" \u2014 "),G$=a("a"),i5o=o("XLMRobertaXLForCausalLM"),d5o=o(" (XLM-RoBERTa-XL model)"),c5o=l(),Ju=a("li"),tre=a("strong"),f5o=o("xlnet"),m5o=o(" \u2014 "),O$=a("a"),g5o=o("XLNetLMHeadModel"),h5o=o(" (XLNet model)"),p5o=l(),Yu=a("p"),_5o=o("The model is set in evaluation mode by default using "),are=a("code"),u5o=o("model.eval()"),b5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nre=a("code"),v5o=o("model.train()"),T5o=l(),sre=a("p"),F5o=o("Examples:"),C5o=l(),f(ly.$$.fragment),Eke=l(),sd=a("h2"),Ku=a("a"),lre=a("span"),f(iy.$$.fragment),M5o=l(),ire=a("span"),E5o=o("AutoModelForMaskedLM"),yke=l(),Zo=a("div"),f(dy.$$.fragment),y5o=l(),ld=a("p"),w5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dre=a("code"),A5o=o("from_pretrained()"),L5o=o("class method or the "),cre=a("code"),B5o=o("from_config()"),x5o=o(`class
method.`),k5o=l(),cy=a("p"),R5o=o("This class cannot be instantiated directly using "),fre=a("code"),S5o=o("__init__()"),P5o=o(" (throws an error)."),$5o=l(),Qr=a("div"),f(fy.$$.fragment),I5o=l(),mre=a("p"),N5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D5o=l(),id=a("p"),j5o=o(`Note:
Loading a model from its configuration file does `),gre=a("strong"),q5o=o("not"),G5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hre=a("code"),O5o=o("from_pretrained()"),X5o=o("to load the model weights."),V5o=l(),pre=a("p"),z5o=o("Examples:"),W5o=l(),f(my.$$.fragment),Q5o=l(),Ge=a("div"),f(gy.$$.fragment),H5o=l(),_re=a("p"),U5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),J5o=l(),Qa=a("p"),Y5o=o("The model class to instantiate is selected based on the "),ure=a("code"),K5o=o("model_type"),Z5o=o(` property of the config object (either
passed as an argument or loaded from `),bre=a("code"),e2o=o("pretrained_model_name_or_path"),o2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vre=a("code"),r2o=o("pretrained_model_name_or_path"),t2o=o(":"),a2o=l(),I=a("ul"),Zu=a("li"),Tre=a("strong"),n2o=o("albert"),s2o=o(" \u2014 "),X$=a("a"),l2o=o("AlbertForMaskedLM"),i2o=o(" (ALBERT model)"),d2o=l(),e1=a("li"),Fre=a("strong"),c2o=o("bart"),f2o=o(" \u2014 "),V$=a("a"),m2o=o("BartForConditionalGeneration"),g2o=o(" (BART model)"),h2o=l(),o1=a("li"),Cre=a("strong"),p2o=o("bert"),_2o=o(" \u2014 "),z$=a("a"),u2o=o("BertForMaskedLM"),b2o=o(" (BERT model)"),v2o=l(),r1=a("li"),Mre=a("strong"),T2o=o("big_bird"),F2o=o(" \u2014 "),W$=a("a"),C2o=o("BigBirdForMaskedLM"),M2o=o(" (BigBird model)"),E2o=l(),t1=a("li"),Ere=a("strong"),y2o=o("camembert"),w2o=o(" \u2014 "),Q$=a("a"),A2o=o("CamembertForMaskedLM"),L2o=o(" (CamemBERT model)"),B2o=l(),a1=a("li"),yre=a("strong"),x2o=o("convbert"),k2o=o(" \u2014 "),H$=a("a"),R2o=o("ConvBertForMaskedLM"),S2o=o(" (ConvBERT model)"),P2o=l(),n1=a("li"),wre=a("strong"),$2o=o("data2vec-text"),I2o=o(" \u2014 "),U$=a("a"),N2o=o("Data2VecTextForMaskedLM"),D2o=o(" (Data2VecText model)"),j2o=l(),s1=a("li"),Are=a("strong"),q2o=o("deberta"),G2o=o(" \u2014 "),J$=a("a"),O2o=o("DebertaForMaskedLM"),X2o=o(" (DeBERTa model)"),V2o=l(),l1=a("li"),Lre=a("strong"),z2o=o("deberta-v2"),W2o=o(" \u2014 "),Y$=a("a"),Q2o=o("DebertaV2ForMaskedLM"),H2o=o(" (DeBERTa-v2 model)"),U2o=l(),i1=a("li"),Bre=a("strong"),J2o=o("distilbert"),Y2o=o(" \u2014 "),K$=a("a"),K2o=o("DistilBertForMaskedLM"),Z2o=o(" (DistilBERT model)"),evo=l(),d1=a("li"),xre=a("strong"),ovo=o("electra"),rvo=o(" \u2014 "),Z$=a("a"),tvo=o("ElectraForMaskedLM"),avo=o(" (ELECTRA model)"),nvo=l(),c1=a("li"),kre=a("strong"),svo=o("flaubert"),lvo=o(" \u2014 "),eI=a("a"),ivo=o("FlaubertWithLMHeadModel"),dvo=o(" (FlauBERT model)"),cvo=l(),f1=a("li"),Rre=a("strong"),fvo=o("fnet"),mvo=o(" \u2014 "),oI=a("a"),gvo=o("FNetForMaskedLM"),hvo=o(" (FNet model)"),pvo=l(),m1=a("li"),Sre=a("strong"),_vo=o("funnel"),uvo=o(" \u2014 "),rI=a("a"),bvo=o("FunnelForMaskedLM"),vvo=o(" (Funnel Transformer model)"),Tvo=l(),g1=a("li"),Pre=a("strong"),Fvo=o("ibert"),Cvo=o(" \u2014 "),tI=a("a"),Mvo=o("IBertForMaskedLM"),Evo=o(" (I-BERT model)"),yvo=l(),h1=a("li"),$re=a("strong"),wvo=o("layoutlm"),Avo=o(" \u2014 "),aI=a("a"),Lvo=o("LayoutLMForMaskedLM"),Bvo=o(" (LayoutLM model)"),xvo=l(),p1=a("li"),Ire=a("strong"),kvo=o("longformer"),Rvo=o(" \u2014 "),nI=a("a"),Svo=o("LongformerForMaskedLM"),Pvo=o(" (Longformer model)"),$vo=l(),_1=a("li"),Nre=a("strong"),Ivo=o("mbart"),Nvo=o(" \u2014 "),sI=a("a"),Dvo=o("MBartForConditionalGeneration"),jvo=o(" (mBART model)"),qvo=l(),u1=a("li"),Dre=a("strong"),Gvo=o("megatron-bert"),Ovo=o(" \u2014 "),lI=a("a"),Xvo=o("MegatronBertForMaskedLM"),Vvo=o(" (MegatronBert model)"),zvo=l(),b1=a("li"),jre=a("strong"),Wvo=o("mobilebert"),Qvo=o(" \u2014 "),iI=a("a"),Hvo=o("MobileBertForMaskedLM"),Uvo=o(" (MobileBERT model)"),Jvo=l(),v1=a("li"),qre=a("strong"),Yvo=o("mpnet"),Kvo=o(" \u2014 "),dI=a("a"),Zvo=o("MPNetForMaskedLM"),eTo=o(" (MPNet model)"),oTo=l(),T1=a("li"),Gre=a("strong"),rTo=o("nystromformer"),tTo=o(" \u2014 "),cI=a("a"),aTo=o("NystromformerForMaskedLM"),nTo=o(" (Nystromformer model)"),sTo=l(),F1=a("li"),Ore=a("strong"),lTo=o("perceiver"),iTo=o(" \u2014 "),fI=a("a"),dTo=o("PerceiverForMaskedLM"),cTo=o(" (Perceiver model)"),fTo=l(),C1=a("li"),Xre=a("strong"),mTo=o("qdqbert"),gTo=o(" \u2014 "),mI=a("a"),hTo=o("QDQBertForMaskedLM"),pTo=o(" (QDQBert model)"),_To=l(),M1=a("li"),Vre=a("strong"),uTo=o("reformer"),bTo=o(" \u2014 "),gI=a("a"),vTo=o("ReformerForMaskedLM"),TTo=o(" (Reformer model)"),FTo=l(),E1=a("li"),zre=a("strong"),CTo=o("rembert"),MTo=o(" \u2014 "),hI=a("a"),ETo=o("RemBertForMaskedLM"),yTo=o(" (RemBERT model)"),wTo=l(),y1=a("li"),Wre=a("strong"),ATo=o("roberta"),LTo=o(" \u2014 "),pI=a("a"),BTo=o("RobertaForMaskedLM"),xTo=o(" (RoBERTa model)"),kTo=l(),w1=a("li"),Qre=a("strong"),RTo=o("roformer"),STo=o(" \u2014 "),_I=a("a"),PTo=o("RoFormerForMaskedLM"),$To=o(" (RoFormer model)"),ITo=l(),A1=a("li"),Hre=a("strong"),NTo=o("squeezebert"),DTo=o(" \u2014 "),uI=a("a"),jTo=o("SqueezeBertForMaskedLM"),qTo=o(" (SqueezeBERT model)"),GTo=l(),L1=a("li"),Ure=a("strong"),OTo=o("tapas"),XTo=o(" \u2014 "),bI=a("a"),VTo=o("TapasForMaskedLM"),zTo=o(" (TAPAS model)"),WTo=l(),B1=a("li"),Jre=a("strong"),QTo=o("wav2vec2"),HTo=o(" \u2014 "),Yre=a("code"),UTo=o("Wav2Vec2ForMaskedLM"),JTo=o("(Wav2Vec2 model)"),YTo=l(),x1=a("li"),Kre=a("strong"),KTo=o("xlm"),ZTo=o(" \u2014 "),vI=a("a"),eFo=o("XLMWithLMHeadModel"),oFo=o(" (XLM model)"),rFo=l(),k1=a("li"),Zre=a("strong"),tFo=o("xlm-roberta"),aFo=o(" \u2014 "),TI=a("a"),nFo=o("XLMRobertaForMaskedLM"),sFo=o(" (XLM-RoBERTa model)"),lFo=l(),R1=a("li"),ete=a("strong"),iFo=o("xlm-roberta-xl"),dFo=o(" \u2014 "),FI=a("a"),cFo=o("XLMRobertaXLForMaskedLM"),fFo=o(" (XLM-RoBERTa-XL model)"),mFo=l(),S1=a("li"),ote=a("strong"),gFo=o("yoso"),hFo=o(" \u2014 "),CI=a("a"),pFo=o("YosoForMaskedLM"),_Fo=o(" (YOSO model)"),uFo=l(),P1=a("p"),bFo=o("The model is set in evaluation mode by default using "),rte=a("code"),vFo=o("model.eval()"),TFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tte=a("code"),FFo=o("model.train()"),CFo=l(),ate=a("p"),MFo=o("Examples:"),EFo=l(),f(hy.$$.fragment),wke=l(),dd=a("h2"),$1=a("a"),nte=a("span"),f(py.$$.fragment),yFo=l(),ste=a("span"),wFo=o("AutoModelForSeq2SeqLM"),Ake=l(),er=a("div"),f(_y.$$.fragment),AFo=l(),cd=a("p"),LFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lte=a("code"),BFo=o("from_pretrained()"),xFo=o("class method or the "),ite=a("code"),kFo=o("from_config()"),RFo=o(`class
method.`),SFo=l(),uy=a("p"),PFo=o("This class cannot be instantiated directly using "),dte=a("code"),$Fo=o("__init__()"),IFo=o(" (throws an error)."),NFo=l(),Hr=a("div"),f(by.$$.fragment),DFo=l(),cte=a("p"),jFo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qFo=l(),fd=a("p"),GFo=o(`Note:
Loading a model from its configuration file does `),fte=a("strong"),OFo=o("not"),XFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=a("code"),VFo=o("from_pretrained()"),zFo=o("to load the model weights."),WFo=l(),gte=a("p"),QFo=o("Examples:"),HFo=l(),f(vy.$$.fragment),UFo=l(),Oe=a("div"),f(Ty.$$.fragment),JFo=l(),hte=a("p"),YFo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KFo=l(),Ha=a("p"),ZFo=o("The model class to instantiate is selected based on the "),pte=a("code"),eCo=o("model_type"),oCo=o(` property of the config object (either
passed as an argument or loaded from `),_te=a("code"),rCo=o("pretrained_model_name_or_path"),tCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=a("code"),aCo=o("pretrained_model_name_or_path"),nCo=o(":"),sCo=l(),se=a("ul"),I1=a("li"),bte=a("strong"),lCo=o("bart"),iCo=o(" \u2014 "),MI=a("a"),dCo=o("BartForConditionalGeneration"),cCo=o(" (BART model)"),fCo=l(),N1=a("li"),vte=a("strong"),mCo=o("bigbird_pegasus"),gCo=o(" \u2014 "),EI=a("a"),hCo=o("BigBirdPegasusForConditionalGeneration"),pCo=o(" (BigBirdPegasus model)"),_Co=l(),D1=a("li"),Tte=a("strong"),uCo=o("blenderbot"),bCo=o(" \u2014 "),yI=a("a"),vCo=o("BlenderbotForConditionalGeneration"),TCo=o(" (Blenderbot model)"),FCo=l(),j1=a("li"),Fte=a("strong"),CCo=o("blenderbot-small"),MCo=o(" \u2014 "),wI=a("a"),ECo=o("BlenderbotSmallForConditionalGeneration"),yCo=o(" (BlenderbotSmall model)"),wCo=l(),q1=a("li"),Cte=a("strong"),ACo=o("encoder-decoder"),LCo=o(" \u2014 "),AI=a("a"),BCo=o("EncoderDecoderModel"),xCo=o(" (Encoder decoder model)"),kCo=l(),G1=a("li"),Mte=a("strong"),RCo=o("fsmt"),SCo=o(" \u2014 "),LI=a("a"),PCo=o("FSMTForConditionalGeneration"),$Co=o(" (FairSeq Machine-Translation model)"),ICo=l(),O1=a("li"),Ete=a("strong"),NCo=o("led"),DCo=o(" \u2014 "),BI=a("a"),jCo=o("LEDForConditionalGeneration"),qCo=o(" (LED model)"),GCo=l(),X1=a("li"),yte=a("strong"),OCo=o("m2m_100"),XCo=o(" \u2014 "),xI=a("a"),VCo=o("M2M100ForConditionalGeneration"),zCo=o(" (M2M100 model)"),WCo=l(),V1=a("li"),wte=a("strong"),QCo=o("marian"),HCo=o(" \u2014 "),kI=a("a"),UCo=o("MarianMTModel"),JCo=o(" (Marian model)"),YCo=l(),z1=a("li"),Ate=a("strong"),KCo=o("mbart"),ZCo=o(" \u2014 "),RI=a("a"),eMo=o("MBartForConditionalGeneration"),oMo=o(" (mBART model)"),rMo=l(),W1=a("li"),Lte=a("strong"),tMo=o("mt5"),aMo=o(" \u2014 "),SI=a("a"),nMo=o("MT5ForConditionalGeneration"),sMo=o(" (mT5 model)"),lMo=l(),Q1=a("li"),Bte=a("strong"),iMo=o("pegasus"),dMo=o(" \u2014 "),PI=a("a"),cMo=o("PegasusForConditionalGeneration"),fMo=o(" (Pegasus model)"),mMo=l(),H1=a("li"),xte=a("strong"),gMo=o("plbart"),hMo=o(" \u2014 "),$I=a("a"),pMo=o("PLBartForConditionalGeneration"),_Mo=o(" (PLBart model)"),uMo=l(),U1=a("li"),kte=a("strong"),bMo=o("prophetnet"),vMo=o(" \u2014 "),II=a("a"),TMo=o("ProphetNetForConditionalGeneration"),FMo=o(" (ProphetNet model)"),CMo=l(),J1=a("li"),Rte=a("strong"),MMo=o("t5"),EMo=o(" \u2014 "),NI=a("a"),yMo=o("T5ForConditionalGeneration"),wMo=o(" (T5 model)"),AMo=l(),Y1=a("li"),Ste=a("strong"),LMo=o("xlm-prophetnet"),BMo=o(" \u2014 "),DI=a("a"),xMo=o("XLMProphetNetForConditionalGeneration"),kMo=o(" (XLMProphetNet model)"),RMo=l(),K1=a("p"),SMo=o("The model is set in evaluation mode by default using "),Pte=a("code"),PMo=o("model.eval()"),$Mo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=a("code"),IMo=o("model.train()"),NMo=l(),Ite=a("p"),DMo=o("Examples:"),jMo=l(),f(Fy.$$.fragment),Lke=l(),md=a("h2"),Z1=a("a"),Nte=a("span"),f(Cy.$$.fragment),qMo=l(),Dte=a("span"),GMo=o("AutoModelForSequenceClassification"),Bke=l(),or=a("div"),f(My.$$.fragment),OMo=l(),gd=a("p"),XMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jte=a("code"),VMo=o("from_pretrained()"),zMo=o("class method or the "),qte=a("code"),WMo=o("from_config()"),QMo=o(`class
method.`),HMo=l(),Ey=a("p"),UMo=o("This class cannot be instantiated directly using "),Gte=a("code"),JMo=o("__init__()"),YMo=o(" (throws an error)."),KMo=l(),Ur=a("div"),f(yy.$$.fragment),ZMo=l(),Ote=a("p"),e4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o4o=l(),hd=a("p"),r4o=o(`Note:
Loading a model from its configuration file does `),Xte=a("strong"),t4o=o("not"),a4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vte=a("code"),n4o=o("from_pretrained()"),s4o=o("to load the model weights."),l4o=l(),zte=a("p"),i4o=o("Examples:"),d4o=l(),f(wy.$$.fragment),c4o=l(),Xe=a("div"),f(Ay.$$.fragment),f4o=l(),Wte=a("p"),m4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g4o=l(),Ua=a("p"),h4o=o("The model class to instantiate is selected based on the "),Qte=a("code"),p4o=o("model_type"),_4o=o(` property of the config object (either
passed as an argument or loaded from `),Hte=a("code"),u4o=o("pretrained_model_name_or_path"),b4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ute=a("code"),v4o=o("pretrained_model_name_or_path"),T4o=o(":"),F4o=l(),A=a("ul"),e9=a("li"),Jte=a("strong"),C4o=o("albert"),M4o=o(" \u2014 "),jI=a("a"),E4o=o("AlbertForSequenceClassification"),y4o=o(" (ALBERT model)"),w4o=l(),o9=a("li"),Yte=a("strong"),A4o=o("bart"),L4o=o(" \u2014 "),qI=a("a"),B4o=o("BartForSequenceClassification"),x4o=o(" (BART model)"),k4o=l(),r9=a("li"),Kte=a("strong"),R4o=o("bert"),S4o=o(" \u2014 "),GI=a("a"),P4o=o("BertForSequenceClassification"),$4o=o(" (BERT model)"),I4o=l(),t9=a("li"),Zte=a("strong"),N4o=o("big_bird"),D4o=o(" \u2014 "),OI=a("a"),j4o=o("BigBirdForSequenceClassification"),q4o=o(" (BigBird model)"),G4o=l(),a9=a("li"),eae=a("strong"),O4o=o("bigbird_pegasus"),X4o=o(" \u2014 "),XI=a("a"),V4o=o("BigBirdPegasusForSequenceClassification"),z4o=o(" (BigBirdPegasus model)"),W4o=l(),n9=a("li"),oae=a("strong"),Q4o=o("camembert"),H4o=o(" \u2014 "),VI=a("a"),U4o=o("CamembertForSequenceClassification"),J4o=o(" (CamemBERT model)"),Y4o=l(),s9=a("li"),rae=a("strong"),K4o=o("canine"),Z4o=o(" \u2014 "),zI=a("a"),eEo=o("CanineForSequenceClassification"),oEo=o(" (Canine model)"),rEo=l(),l9=a("li"),tae=a("strong"),tEo=o("convbert"),aEo=o(" \u2014 "),WI=a("a"),nEo=o("ConvBertForSequenceClassification"),sEo=o(" (ConvBERT model)"),lEo=l(),i9=a("li"),aae=a("strong"),iEo=o("ctrl"),dEo=o(" \u2014 "),QI=a("a"),cEo=o("CTRLForSequenceClassification"),fEo=o(" (CTRL model)"),mEo=l(),d9=a("li"),nae=a("strong"),gEo=o("data2vec-text"),hEo=o(" \u2014 "),HI=a("a"),pEo=o("Data2VecTextForSequenceClassification"),_Eo=o(" (Data2VecText model)"),uEo=l(),c9=a("li"),sae=a("strong"),bEo=o("deberta"),vEo=o(" \u2014 "),UI=a("a"),TEo=o("DebertaForSequenceClassification"),FEo=o(" (DeBERTa model)"),CEo=l(),f9=a("li"),lae=a("strong"),MEo=o("deberta-v2"),EEo=o(" \u2014 "),JI=a("a"),yEo=o("DebertaV2ForSequenceClassification"),wEo=o(" (DeBERTa-v2 model)"),AEo=l(),m9=a("li"),iae=a("strong"),LEo=o("distilbert"),BEo=o(" \u2014 "),YI=a("a"),xEo=o("DistilBertForSequenceClassification"),kEo=o(" (DistilBERT model)"),REo=l(),g9=a("li"),dae=a("strong"),SEo=o("electra"),PEo=o(" \u2014 "),KI=a("a"),$Eo=o("ElectraForSequenceClassification"),IEo=o(" (ELECTRA model)"),NEo=l(),h9=a("li"),cae=a("strong"),DEo=o("flaubert"),jEo=o(" \u2014 "),ZI=a("a"),qEo=o("FlaubertForSequenceClassification"),GEo=o(" (FlauBERT model)"),OEo=l(),p9=a("li"),fae=a("strong"),XEo=o("fnet"),VEo=o(" \u2014 "),eN=a("a"),zEo=o("FNetForSequenceClassification"),WEo=o(" (FNet model)"),QEo=l(),_9=a("li"),mae=a("strong"),HEo=o("funnel"),UEo=o(" \u2014 "),oN=a("a"),JEo=o("FunnelForSequenceClassification"),YEo=o(" (Funnel Transformer model)"),KEo=l(),u9=a("li"),gae=a("strong"),ZEo=o("gpt2"),e3o=o(" \u2014 "),rN=a("a"),o3o=o("GPT2ForSequenceClassification"),r3o=o(" (OpenAI GPT-2 model)"),t3o=l(),b9=a("li"),hae=a("strong"),a3o=o("gpt_neo"),n3o=o(" \u2014 "),tN=a("a"),s3o=o("GPTNeoForSequenceClassification"),l3o=o(" (GPT Neo model)"),i3o=l(),v9=a("li"),pae=a("strong"),d3o=o("gptj"),c3o=o(" \u2014 "),aN=a("a"),f3o=o("GPTJForSequenceClassification"),m3o=o(" (GPT-J model)"),g3o=l(),T9=a("li"),_ae=a("strong"),h3o=o("ibert"),p3o=o(" \u2014 "),nN=a("a"),_3o=o("IBertForSequenceClassification"),u3o=o(" (I-BERT model)"),b3o=l(),F9=a("li"),uae=a("strong"),v3o=o("layoutlm"),T3o=o(" \u2014 "),sN=a("a"),F3o=o("LayoutLMForSequenceClassification"),C3o=o(" (LayoutLM model)"),M3o=l(),C9=a("li"),bae=a("strong"),E3o=o("layoutlmv2"),y3o=o(" \u2014 "),lN=a("a"),w3o=o("LayoutLMv2ForSequenceClassification"),A3o=o(" (LayoutLMv2 model)"),L3o=l(),M9=a("li"),vae=a("strong"),B3o=o("led"),x3o=o(" \u2014 "),iN=a("a"),k3o=o("LEDForSequenceClassification"),R3o=o(" (LED model)"),S3o=l(),E9=a("li"),Tae=a("strong"),P3o=o("longformer"),$3o=o(" \u2014 "),dN=a("a"),I3o=o("LongformerForSequenceClassification"),N3o=o(" (Longformer model)"),D3o=l(),y9=a("li"),Fae=a("strong"),j3o=o("mbart"),q3o=o(" \u2014 "),cN=a("a"),G3o=o("MBartForSequenceClassification"),O3o=o(" (mBART model)"),X3o=l(),w9=a("li"),Cae=a("strong"),V3o=o("megatron-bert"),z3o=o(" \u2014 "),fN=a("a"),W3o=o("MegatronBertForSequenceClassification"),Q3o=o(" (MegatronBert model)"),H3o=l(),A9=a("li"),Mae=a("strong"),U3o=o("mobilebert"),J3o=o(" \u2014 "),mN=a("a"),Y3o=o("MobileBertForSequenceClassification"),K3o=o(" (MobileBERT model)"),Z3o=l(),L9=a("li"),Eae=a("strong"),eyo=o("mpnet"),oyo=o(" \u2014 "),gN=a("a"),ryo=o("MPNetForSequenceClassification"),tyo=o(" (MPNet model)"),ayo=l(),B9=a("li"),yae=a("strong"),nyo=o("nystromformer"),syo=o(" \u2014 "),hN=a("a"),lyo=o("NystromformerForSequenceClassification"),iyo=o(" (Nystromformer model)"),dyo=l(),x9=a("li"),wae=a("strong"),cyo=o("openai-gpt"),fyo=o(" \u2014 "),pN=a("a"),myo=o("OpenAIGPTForSequenceClassification"),gyo=o(" (OpenAI GPT model)"),hyo=l(),k9=a("li"),Aae=a("strong"),pyo=o("perceiver"),_yo=o(" \u2014 "),_N=a("a"),uyo=o("PerceiverForSequenceClassification"),byo=o(" (Perceiver model)"),vyo=l(),R9=a("li"),Lae=a("strong"),Tyo=o("plbart"),Fyo=o(" \u2014 "),uN=a("a"),Cyo=o("PLBartForSequenceClassification"),Myo=o(" (PLBart model)"),Eyo=l(),S9=a("li"),Bae=a("strong"),yyo=o("qdqbert"),wyo=o(" \u2014 "),bN=a("a"),Ayo=o("QDQBertForSequenceClassification"),Lyo=o(" (QDQBert model)"),Byo=l(),P9=a("li"),xae=a("strong"),xyo=o("reformer"),kyo=o(" \u2014 "),vN=a("a"),Ryo=o("ReformerForSequenceClassification"),Syo=o(" (Reformer model)"),Pyo=l(),$9=a("li"),kae=a("strong"),$yo=o("rembert"),Iyo=o(" \u2014 "),TN=a("a"),Nyo=o("RemBertForSequenceClassification"),Dyo=o(" (RemBERT model)"),jyo=l(),I9=a("li"),Rae=a("strong"),qyo=o("roberta"),Gyo=o(" \u2014 "),FN=a("a"),Oyo=o("RobertaForSequenceClassification"),Xyo=o(" (RoBERTa model)"),Vyo=l(),N9=a("li"),Sae=a("strong"),zyo=o("roformer"),Wyo=o(" \u2014 "),CN=a("a"),Qyo=o("RoFormerForSequenceClassification"),Hyo=o(" (RoFormer model)"),Uyo=l(),D9=a("li"),Pae=a("strong"),Jyo=o("squeezebert"),Yyo=o(" \u2014 "),MN=a("a"),Kyo=o("SqueezeBertForSequenceClassification"),Zyo=o(" (SqueezeBERT model)"),ewo=l(),j9=a("li"),$ae=a("strong"),owo=o("tapas"),rwo=o(" \u2014 "),EN=a("a"),two=o("TapasForSequenceClassification"),awo=o(" (TAPAS model)"),nwo=l(),q9=a("li"),Iae=a("strong"),swo=o("transfo-xl"),lwo=o(" \u2014 "),yN=a("a"),iwo=o("TransfoXLForSequenceClassification"),dwo=o(" (Transformer-XL model)"),cwo=l(),G9=a("li"),Nae=a("strong"),fwo=o("xlm"),mwo=o(" \u2014 "),wN=a("a"),gwo=o("XLMForSequenceClassification"),hwo=o(" (XLM model)"),pwo=l(),O9=a("li"),Dae=a("strong"),_wo=o("xlm-roberta"),uwo=o(" \u2014 "),AN=a("a"),bwo=o("XLMRobertaForSequenceClassification"),vwo=o(" (XLM-RoBERTa model)"),Two=l(),X9=a("li"),jae=a("strong"),Fwo=o("xlm-roberta-xl"),Cwo=o(" \u2014 "),LN=a("a"),Mwo=o("XLMRobertaXLForSequenceClassification"),Ewo=o(" (XLM-RoBERTa-XL model)"),ywo=l(),V9=a("li"),qae=a("strong"),wwo=o("xlnet"),Awo=o(" \u2014 "),BN=a("a"),Lwo=o("XLNetForSequenceClassification"),Bwo=o(" (XLNet model)"),xwo=l(),z9=a("li"),Gae=a("strong"),kwo=o("yoso"),Rwo=o(" \u2014 "),xN=a("a"),Swo=o("YosoForSequenceClassification"),Pwo=o(" (YOSO model)"),$wo=l(),W9=a("p"),Iwo=o("The model is set in evaluation mode by default using "),Oae=a("code"),Nwo=o("model.eval()"),Dwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xae=a("code"),jwo=o("model.train()"),qwo=l(),Vae=a("p"),Gwo=o("Examples:"),Owo=l(),f(Ly.$$.fragment),xke=l(),pd=a("h2"),Q9=a("a"),zae=a("span"),f(By.$$.fragment),Xwo=l(),Wae=a("span"),Vwo=o("AutoModelForMultipleChoice"),kke=l(),rr=a("div"),f(xy.$$.fragment),zwo=l(),_d=a("p"),Wwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Qae=a("code"),Qwo=o("from_pretrained()"),Hwo=o("class method or the "),Hae=a("code"),Uwo=o("from_config()"),Jwo=o(`class
method.`),Ywo=l(),ky=a("p"),Kwo=o("This class cannot be instantiated directly using "),Uae=a("code"),Zwo=o("__init__()"),e6o=o(" (throws an error)."),o6o=l(),Jr=a("div"),f(Ry.$$.fragment),r6o=l(),Jae=a("p"),t6o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),a6o=l(),ud=a("p"),n6o=o(`Note:
Loading a model from its configuration file does `),Yae=a("strong"),s6o=o("not"),l6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kae=a("code"),i6o=o("from_pretrained()"),d6o=o("to load the model weights."),c6o=l(),Zae=a("p"),f6o=o("Examples:"),m6o=l(),f(Sy.$$.fragment),g6o=l(),Ve=a("div"),f(Py.$$.fragment),h6o=l(),ene=a("p"),p6o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_6o=l(),Ja=a("p"),u6o=o("The model class to instantiate is selected based on the "),one=a("code"),b6o=o("model_type"),v6o=o(` property of the config object (either
passed as an argument or loaded from `),rne=a("code"),T6o=o("pretrained_model_name_or_path"),F6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=a("code"),C6o=o("pretrained_model_name_or_path"),M6o=o(":"),E6o=l(),G=a("ul"),H9=a("li"),ane=a("strong"),y6o=o("albert"),w6o=o(" \u2014 "),kN=a("a"),A6o=o("AlbertForMultipleChoice"),L6o=o(" (ALBERT model)"),B6o=l(),U9=a("li"),nne=a("strong"),x6o=o("bert"),k6o=o(" \u2014 "),RN=a("a"),R6o=o("BertForMultipleChoice"),S6o=o(" (BERT model)"),P6o=l(),J9=a("li"),sne=a("strong"),$6o=o("big_bird"),I6o=o(" \u2014 "),SN=a("a"),N6o=o("BigBirdForMultipleChoice"),D6o=o(" (BigBird model)"),j6o=l(),Y9=a("li"),lne=a("strong"),q6o=o("camembert"),G6o=o(" \u2014 "),PN=a("a"),O6o=o("CamembertForMultipleChoice"),X6o=o(" (CamemBERT model)"),V6o=l(),K9=a("li"),ine=a("strong"),z6o=o("canine"),W6o=o(" \u2014 "),$N=a("a"),Q6o=o("CanineForMultipleChoice"),H6o=o(" (Canine model)"),U6o=l(),Z9=a("li"),dne=a("strong"),J6o=o("convbert"),Y6o=o(" \u2014 "),IN=a("a"),K6o=o("ConvBertForMultipleChoice"),Z6o=o(" (ConvBERT model)"),eAo=l(),eb=a("li"),cne=a("strong"),oAo=o("data2vec-text"),rAo=o(" \u2014 "),NN=a("a"),tAo=o("Data2VecTextForMultipleChoice"),aAo=o(" (Data2VecText model)"),nAo=l(),ob=a("li"),fne=a("strong"),sAo=o("distilbert"),lAo=o(" \u2014 "),DN=a("a"),iAo=o("DistilBertForMultipleChoice"),dAo=o(" (DistilBERT model)"),cAo=l(),rb=a("li"),mne=a("strong"),fAo=o("electra"),mAo=o(" \u2014 "),jN=a("a"),gAo=o("ElectraForMultipleChoice"),hAo=o(" (ELECTRA model)"),pAo=l(),tb=a("li"),gne=a("strong"),_Ao=o("flaubert"),uAo=o(" \u2014 "),qN=a("a"),bAo=o("FlaubertForMultipleChoice"),vAo=o(" (FlauBERT model)"),TAo=l(),ab=a("li"),hne=a("strong"),FAo=o("fnet"),CAo=o(" \u2014 "),GN=a("a"),MAo=o("FNetForMultipleChoice"),EAo=o(" (FNet model)"),yAo=l(),nb=a("li"),pne=a("strong"),wAo=o("funnel"),AAo=o(" \u2014 "),ON=a("a"),LAo=o("FunnelForMultipleChoice"),BAo=o(" (Funnel Transformer model)"),xAo=l(),sb=a("li"),_ne=a("strong"),kAo=o("ibert"),RAo=o(" \u2014 "),XN=a("a"),SAo=o("IBertForMultipleChoice"),PAo=o(" (I-BERT model)"),$Ao=l(),lb=a("li"),une=a("strong"),IAo=o("longformer"),NAo=o(" \u2014 "),VN=a("a"),DAo=o("LongformerForMultipleChoice"),jAo=o(" (Longformer model)"),qAo=l(),ib=a("li"),bne=a("strong"),GAo=o("megatron-bert"),OAo=o(" \u2014 "),zN=a("a"),XAo=o("MegatronBertForMultipleChoice"),VAo=o(" (MegatronBert model)"),zAo=l(),db=a("li"),vne=a("strong"),WAo=o("mobilebert"),QAo=o(" \u2014 "),WN=a("a"),HAo=o("MobileBertForMultipleChoice"),UAo=o(" (MobileBERT model)"),JAo=l(),cb=a("li"),Tne=a("strong"),YAo=o("mpnet"),KAo=o(" \u2014 "),QN=a("a"),ZAo=o("MPNetForMultipleChoice"),e0o=o(" (MPNet model)"),o0o=l(),fb=a("li"),Fne=a("strong"),r0o=o("nystromformer"),t0o=o(" \u2014 "),HN=a("a"),a0o=o("NystromformerForMultipleChoice"),n0o=o(" (Nystromformer model)"),s0o=l(),mb=a("li"),Cne=a("strong"),l0o=o("qdqbert"),i0o=o(" \u2014 "),UN=a("a"),d0o=o("QDQBertForMultipleChoice"),c0o=o(" (QDQBert model)"),f0o=l(),gb=a("li"),Mne=a("strong"),m0o=o("rembert"),g0o=o(" \u2014 "),JN=a("a"),h0o=o("RemBertForMultipleChoice"),p0o=o(" (RemBERT model)"),_0o=l(),hb=a("li"),Ene=a("strong"),u0o=o("roberta"),b0o=o(" \u2014 "),YN=a("a"),v0o=o("RobertaForMultipleChoice"),T0o=o(" (RoBERTa model)"),F0o=l(),pb=a("li"),yne=a("strong"),C0o=o("roformer"),M0o=o(" \u2014 "),KN=a("a"),E0o=o("RoFormerForMultipleChoice"),y0o=o(" (RoFormer model)"),w0o=l(),_b=a("li"),wne=a("strong"),A0o=o("squeezebert"),L0o=o(" \u2014 "),ZN=a("a"),B0o=o("SqueezeBertForMultipleChoice"),x0o=o(" (SqueezeBERT model)"),k0o=l(),ub=a("li"),Ane=a("strong"),R0o=o("xlm"),S0o=o(" \u2014 "),eD=a("a"),P0o=o("XLMForMultipleChoice"),$0o=o(" (XLM model)"),I0o=l(),bb=a("li"),Lne=a("strong"),N0o=o("xlm-roberta"),D0o=o(" \u2014 "),oD=a("a"),j0o=o("XLMRobertaForMultipleChoice"),q0o=o(" (XLM-RoBERTa model)"),G0o=l(),vb=a("li"),Bne=a("strong"),O0o=o("xlm-roberta-xl"),X0o=o(" \u2014 "),rD=a("a"),V0o=o("XLMRobertaXLForMultipleChoice"),z0o=o(" (XLM-RoBERTa-XL model)"),W0o=l(),Tb=a("li"),xne=a("strong"),Q0o=o("xlnet"),H0o=o(" \u2014 "),tD=a("a"),U0o=o("XLNetForMultipleChoice"),J0o=o(" (XLNet model)"),Y0o=l(),Fb=a("li"),kne=a("strong"),K0o=o("yoso"),Z0o=o(" \u2014 "),aD=a("a"),eLo=o("YosoForMultipleChoice"),oLo=o(" (YOSO model)"),rLo=l(),Cb=a("p"),tLo=o("The model is set in evaluation mode by default using "),Rne=a("code"),aLo=o("model.eval()"),nLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sne=a("code"),sLo=o("model.train()"),lLo=l(),Pne=a("p"),iLo=o("Examples:"),dLo=l(),f($y.$$.fragment),Rke=l(),bd=a("h2"),Mb=a("a"),$ne=a("span"),f(Iy.$$.fragment),cLo=l(),Ine=a("span"),fLo=o("AutoModelForNextSentencePrediction"),Ske=l(),tr=a("div"),f(Ny.$$.fragment),mLo=l(),vd=a("p"),gLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nne=a("code"),hLo=o("from_pretrained()"),pLo=o("class method or the "),Dne=a("code"),_Lo=o("from_config()"),uLo=o(`class
method.`),bLo=l(),Dy=a("p"),vLo=o("This class cannot be instantiated directly using "),jne=a("code"),TLo=o("__init__()"),FLo=o(" (throws an error)."),CLo=l(),Yr=a("div"),f(jy.$$.fragment),MLo=l(),qne=a("p"),ELo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yLo=l(),Td=a("p"),wLo=o(`Note:
Loading a model from its configuration file does `),Gne=a("strong"),ALo=o("not"),LLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),One=a("code"),BLo=o("from_pretrained()"),xLo=o("to load the model weights."),kLo=l(),Xne=a("p"),RLo=o("Examples:"),SLo=l(),f(qy.$$.fragment),PLo=l(),ze=a("div"),f(Gy.$$.fragment),$Lo=l(),Vne=a("p"),ILo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NLo=l(),Ya=a("p"),DLo=o("The model class to instantiate is selected based on the "),zne=a("code"),jLo=o("model_type"),qLo=o(` property of the config object (either
passed as an argument or loaded from `),Wne=a("code"),GLo=o("pretrained_model_name_or_path"),OLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=a("code"),XLo=o("pretrained_model_name_or_path"),VLo=o(":"),zLo=l(),da=a("ul"),Eb=a("li"),Hne=a("strong"),WLo=o("bert"),QLo=o(" \u2014 "),nD=a("a"),HLo=o("BertForNextSentencePrediction"),ULo=o(" (BERT model)"),JLo=l(),yb=a("li"),Une=a("strong"),YLo=o("fnet"),KLo=o(" \u2014 "),sD=a("a"),ZLo=o("FNetForNextSentencePrediction"),e8o=o(" (FNet model)"),o8o=l(),wb=a("li"),Jne=a("strong"),r8o=o("megatron-bert"),t8o=o(" \u2014 "),lD=a("a"),a8o=o("MegatronBertForNextSentencePrediction"),n8o=o(" (MegatronBert model)"),s8o=l(),Ab=a("li"),Yne=a("strong"),l8o=o("mobilebert"),i8o=o(" \u2014 "),iD=a("a"),d8o=o("MobileBertForNextSentencePrediction"),c8o=o(" (MobileBERT model)"),f8o=l(),Lb=a("li"),Kne=a("strong"),m8o=o("qdqbert"),g8o=o(" \u2014 "),dD=a("a"),h8o=o("QDQBertForNextSentencePrediction"),p8o=o(" (QDQBert model)"),_8o=l(),Bb=a("p"),u8o=o("The model is set in evaluation mode by default using "),Zne=a("code"),b8o=o("model.eval()"),v8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ese=a("code"),T8o=o("model.train()"),F8o=l(),ose=a("p"),C8o=o("Examples:"),M8o=l(),f(Oy.$$.fragment),Pke=l(),Fd=a("h2"),xb=a("a"),rse=a("span"),f(Xy.$$.fragment),E8o=l(),tse=a("span"),y8o=o("AutoModelForTokenClassification"),$ke=l(),ar=a("div"),f(Vy.$$.fragment),w8o=l(),Cd=a("p"),A8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ase=a("code"),L8o=o("from_pretrained()"),B8o=o("class method or the "),nse=a("code"),x8o=o("from_config()"),k8o=o(`class
method.`),R8o=l(),zy=a("p"),S8o=o("This class cannot be instantiated directly using "),sse=a("code"),P8o=o("__init__()"),$8o=o(" (throws an error)."),I8o=l(),Kr=a("div"),f(Wy.$$.fragment),N8o=l(),lse=a("p"),D8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),j8o=l(),Md=a("p"),q8o=o(`Note:
Loading a model from its configuration file does `),ise=a("strong"),G8o=o("not"),O8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dse=a("code"),X8o=o("from_pretrained()"),V8o=o("to load the model weights."),z8o=l(),cse=a("p"),W8o=o("Examples:"),Q8o=l(),f(Qy.$$.fragment),H8o=l(),We=a("div"),f(Hy.$$.fragment),U8o=l(),fse=a("p"),J8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y8o=l(),Ka=a("p"),K8o=o("The model class to instantiate is selected based on the "),mse=a("code"),Z8o=o("model_type"),e7o=o(` property of the config object (either
passed as an argument or loaded from `),gse=a("code"),o7o=o("pretrained_model_name_or_path"),r7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hse=a("code"),t7o=o("pretrained_model_name_or_path"),a7o=o(":"),n7o=l(),j=a("ul"),kb=a("li"),pse=a("strong"),s7o=o("albert"),l7o=o(" \u2014 "),cD=a("a"),i7o=o("AlbertForTokenClassification"),d7o=o(" (ALBERT model)"),c7o=l(),Rb=a("li"),_se=a("strong"),f7o=o("bert"),m7o=o(" \u2014 "),fD=a("a"),g7o=o("BertForTokenClassification"),h7o=o(" (BERT model)"),p7o=l(),Sb=a("li"),use=a("strong"),_7o=o("big_bird"),u7o=o(" \u2014 "),mD=a("a"),b7o=o("BigBirdForTokenClassification"),v7o=o(" (BigBird model)"),T7o=l(),Pb=a("li"),bse=a("strong"),F7o=o("camembert"),C7o=o(" \u2014 "),gD=a("a"),M7o=o("CamembertForTokenClassification"),E7o=o(" (CamemBERT model)"),y7o=l(),$b=a("li"),vse=a("strong"),w7o=o("canine"),A7o=o(" \u2014 "),hD=a("a"),L7o=o("CanineForTokenClassification"),B7o=o(" (Canine model)"),x7o=l(),Ib=a("li"),Tse=a("strong"),k7o=o("convbert"),R7o=o(" \u2014 "),pD=a("a"),S7o=o("ConvBertForTokenClassification"),P7o=o(" (ConvBERT model)"),$7o=l(),Nb=a("li"),Fse=a("strong"),I7o=o("data2vec-text"),N7o=o(" \u2014 "),_D=a("a"),D7o=o("Data2VecTextForTokenClassification"),j7o=o(" (Data2VecText model)"),q7o=l(),Db=a("li"),Cse=a("strong"),G7o=o("deberta"),O7o=o(" \u2014 "),uD=a("a"),X7o=o("DebertaForTokenClassification"),V7o=o(" (DeBERTa model)"),z7o=l(),jb=a("li"),Mse=a("strong"),W7o=o("deberta-v2"),Q7o=o(" \u2014 "),bD=a("a"),H7o=o("DebertaV2ForTokenClassification"),U7o=o(" (DeBERTa-v2 model)"),J7o=l(),qb=a("li"),Ese=a("strong"),Y7o=o("distilbert"),K7o=o(" \u2014 "),vD=a("a"),Z7o=o("DistilBertForTokenClassification"),eBo=o(" (DistilBERT model)"),oBo=l(),Gb=a("li"),yse=a("strong"),rBo=o("electra"),tBo=o(" \u2014 "),TD=a("a"),aBo=o("ElectraForTokenClassification"),nBo=o(" (ELECTRA model)"),sBo=l(),Ob=a("li"),wse=a("strong"),lBo=o("flaubert"),iBo=o(" \u2014 "),FD=a("a"),dBo=o("FlaubertForTokenClassification"),cBo=o(" (FlauBERT model)"),fBo=l(),Xb=a("li"),Ase=a("strong"),mBo=o("fnet"),gBo=o(" \u2014 "),CD=a("a"),hBo=o("FNetForTokenClassification"),pBo=o(" (FNet model)"),_Bo=l(),Vb=a("li"),Lse=a("strong"),uBo=o("funnel"),bBo=o(" \u2014 "),MD=a("a"),vBo=o("FunnelForTokenClassification"),TBo=o(" (Funnel Transformer model)"),FBo=l(),zb=a("li"),Bse=a("strong"),CBo=o("gpt2"),MBo=o(" \u2014 "),ED=a("a"),EBo=o("GPT2ForTokenClassification"),yBo=o(" (OpenAI GPT-2 model)"),wBo=l(),Wb=a("li"),xse=a("strong"),ABo=o("ibert"),LBo=o(" \u2014 "),yD=a("a"),BBo=o("IBertForTokenClassification"),xBo=o(" (I-BERT model)"),kBo=l(),Qb=a("li"),kse=a("strong"),RBo=o("layoutlm"),SBo=o(" \u2014 "),wD=a("a"),PBo=o("LayoutLMForTokenClassification"),$Bo=o(" (LayoutLM model)"),IBo=l(),Hb=a("li"),Rse=a("strong"),NBo=o("layoutlmv2"),DBo=o(" \u2014 "),AD=a("a"),jBo=o("LayoutLMv2ForTokenClassification"),qBo=o(" (LayoutLMv2 model)"),GBo=l(),Ub=a("li"),Sse=a("strong"),OBo=o("longformer"),XBo=o(" \u2014 "),LD=a("a"),VBo=o("LongformerForTokenClassification"),zBo=o(" (Longformer model)"),WBo=l(),Jb=a("li"),Pse=a("strong"),QBo=o("megatron-bert"),HBo=o(" \u2014 "),BD=a("a"),UBo=o("MegatronBertForTokenClassification"),JBo=o(" (MegatronBert model)"),YBo=l(),Yb=a("li"),$se=a("strong"),KBo=o("mobilebert"),ZBo=o(" \u2014 "),xD=a("a"),exo=o("MobileBertForTokenClassification"),oxo=o(" (MobileBERT model)"),rxo=l(),Kb=a("li"),Ise=a("strong"),txo=o("mpnet"),axo=o(" \u2014 "),kD=a("a"),nxo=o("MPNetForTokenClassification"),sxo=o(" (MPNet model)"),lxo=l(),Zb=a("li"),Nse=a("strong"),ixo=o("nystromformer"),dxo=o(" \u2014 "),RD=a("a"),cxo=o("NystromformerForTokenClassification"),fxo=o(" (Nystromformer model)"),mxo=l(),e5=a("li"),Dse=a("strong"),gxo=o("qdqbert"),hxo=o(" \u2014 "),SD=a("a"),pxo=o("QDQBertForTokenClassification"),_xo=o(" (QDQBert model)"),uxo=l(),o5=a("li"),jse=a("strong"),bxo=o("rembert"),vxo=o(" \u2014 "),PD=a("a"),Txo=o("RemBertForTokenClassification"),Fxo=o(" (RemBERT model)"),Cxo=l(),r5=a("li"),qse=a("strong"),Mxo=o("roberta"),Exo=o(" \u2014 "),$D=a("a"),yxo=o("RobertaForTokenClassification"),wxo=o(" (RoBERTa model)"),Axo=l(),t5=a("li"),Gse=a("strong"),Lxo=o("roformer"),Bxo=o(" \u2014 "),ID=a("a"),xxo=o("RoFormerForTokenClassification"),kxo=o(" (RoFormer model)"),Rxo=l(),a5=a("li"),Ose=a("strong"),Sxo=o("squeezebert"),Pxo=o(" \u2014 "),ND=a("a"),$xo=o("SqueezeBertForTokenClassification"),Ixo=o(" (SqueezeBERT model)"),Nxo=l(),n5=a("li"),Xse=a("strong"),Dxo=o("xlm"),jxo=o(" \u2014 "),DD=a("a"),qxo=o("XLMForTokenClassification"),Gxo=o(" (XLM model)"),Oxo=l(),s5=a("li"),Vse=a("strong"),Xxo=o("xlm-roberta"),Vxo=o(" \u2014 "),jD=a("a"),zxo=o("XLMRobertaForTokenClassification"),Wxo=o(" (XLM-RoBERTa model)"),Qxo=l(),l5=a("li"),zse=a("strong"),Hxo=o("xlm-roberta-xl"),Uxo=o(" \u2014 "),qD=a("a"),Jxo=o("XLMRobertaXLForTokenClassification"),Yxo=o(" (XLM-RoBERTa-XL model)"),Kxo=l(),i5=a("li"),Wse=a("strong"),Zxo=o("xlnet"),eko=o(" \u2014 "),GD=a("a"),oko=o("XLNetForTokenClassification"),rko=o(" (XLNet model)"),tko=l(),d5=a("li"),Qse=a("strong"),ako=o("yoso"),nko=o(" \u2014 "),OD=a("a"),sko=o("YosoForTokenClassification"),lko=o(" (YOSO model)"),iko=l(),c5=a("p"),dko=o("The model is set in evaluation mode by default using "),Hse=a("code"),cko=o("model.eval()"),fko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=a("code"),mko=o("model.train()"),gko=l(),Jse=a("p"),hko=o("Examples:"),pko=l(),f(Uy.$$.fragment),Ike=l(),Ed=a("h2"),f5=a("a"),Yse=a("span"),f(Jy.$$.fragment),_ko=l(),Kse=a("span"),uko=o("AutoModelForQuestionAnswering"),Nke=l(),nr=a("div"),f(Yy.$$.fragment),bko=l(),yd=a("p"),vko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zse=a("code"),Tko=o("from_pretrained()"),Fko=o("class method or the "),ele=a("code"),Cko=o("from_config()"),Mko=o(`class
method.`),Eko=l(),Ky=a("p"),yko=o("This class cannot be instantiated directly using "),ole=a("code"),wko=o("__init__()"),Ako=o(" (throws an error)."),Lko=l(),Zr=a("div"),f(Zy.$$.fragment),Bko=l(),rle=a("p"),xko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kko=l(),wd=a("p"),Rko=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),Sko=o("not"),Pko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=a("code"),$ko=o("from_pretrained()"),Iko=o("to load the model weights."),Nko=l(),nle=a("p"),Dko=o("Examples:"),jko=l(),f(ew.$$.fragment),qko=l(),Qe=a("div"),f(ow.$$.fragment),Gko=l(),sle=a("p"),Oko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xko=l(),Za=a("p"),Vko=o("The model class to instantiate is selected based on the "),lle=a("code"),zko=o("model_type"),Wko=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),Qko=o("pretrained_model_name_or_path"),Hko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),Uko=o("pretrained_model_name_or_path"),Jko=o(":"),Yko=l(),R=a("ul"),m5=a("li"),cle=a("strong"),Kko=o("albert"),Zko=o(" \u2014 "),XD=a("a"),eRo=o("AlbertForQuestionAnswering"),oRo=o(" (ALBERT model)"),rRo=l(),g5=a("li"),fle=a("strong"),tRo=o("bart"),aRo=o(" \u2014 "),VD=a("a"),nRo=o("BartForQuestionAnswering"),sRo=o(" (BART model)"),lRo=l(),h5=a("li"),mle=a("strong"),iRo=o("bert"),dRo=o(" \u2014 "),zD=a("a"),cRo=o("BertForQuestionAnswering"),fRo=o(" (BERT model)"),mRo=l(),p5=a("li"),gle=a("strong"),gRo=o("big_bird"),hRo=o(" \u2014 "),WD=a("a"),pRo=o("BigBirdForQuestionAnswering"),_Ro=o(" (BigBird model)"),uRo=l(),_5=a("li"),hle=a("strong"),bRo=o("bigbird_pegasus"),vRo=o(" \u2014 "),QD=a("a"),TRo=o("BigBirdPegasusForQuestionAnswering"),FRo=o(" (BigBirdPegasus model)"),CRo=l(),u5=a("li"),ple=a("strong"),MRo=o("camembert"),ERo=o(" \u2014 "),HD=a("a"),yRo=o("CamembertForQuestionAnswering"),wRo=o(" (CamemBERT model)"),ARo=l(),b5=a("li"),_le=a("strong"),LRo=o("canine"),BRo=o(" \u2014 "),UD=a("a"),xRo=o("CanineForQuestionAnswering"),kRo=o(" (Canine model)"),RRo=l(),v5=a("li"),ule=a("strong"),SRo=o("convbert"),PRo=o(" \u2014 "),JD=a("a"),$Ro=o("ConvBertForQuestionAnswering"),IRo=o(" (ConvBERT model)"),NRo=l(),T5=a("li"),ble=a("strong"),DRo=o("data2vec-text"),jRo=o(" \u2014 "),YD=a("a"),qRo=o("Data2VecTextForQuestionAnswering"),GRo=o(" (Data2VecText model)"),ORo=l(),F5=a("li"),vle=a("strong"),XRo=o("deberta"),VRo=o(" \u2014 "),KD=a("a"),zRo=o("DebertaForQuestionAnswering"),WRo=o(" (DeBERTa model)"),QRo=l(),C5=a("li"),Tle=a("strong"),HRo=o("deberta-v2"),URo=o(" \u2014 "),ZD=a("a"),JRo=o("DebertaV2ForQuestionAnswering"),YRo=o(" (DeBERTa-v2 model)"),KRo=l(),M5=a("li"),Fle=a("strong"),ZRo=o("distilbert"),eSo=o(" \u2014 "),ej=a("a"),oSo=o("DistilBertForQuestionAnswering"),rSo=o(" (DistilBERT model)"),tSo=l(),E5=a("li"),Cle=a("strong"),aSo=o("electra"),nSo=o(" \u2014 "),oj=a("a"),sSo=o("ElectraForQuestionAnswering"),lSo=o(" (ELECTRA model)"),iSo=l(),y5=a("li"),Mle=a("strong"),dSo=o("flaubert"),cSo=o(" \u2014 "),rj=a("a"),fSo=o("FlaubertForQuestionAnsweringSimple"),mSo=o(" (FlauBERT model)"),gSo=l(),w5=a("li"),Ele=a("strong"),hSo=o("fnet"),pSo=o(" \u2014 "),tj=a("a"),_So=o("FNetForQuestionAnswering"),uSo=o(" (FNet model)"),bSo=l(),A5=a("li"),yle=a("strong"),vSo=o("funnel"),TSo=o(" \u2014 "),aj=a("a"),FSo=o("FunnelForQuestionAnswering"),CSo=o(" (Funnel Transformer model)"),MSo=l(),L5=a("li"),wle=a("strong"),ESo=o("gptj"),ySo=o(" \u2014 "),nj=a("a"),wSo=o("GPTJForQuestionAnswering"),ASo=o(" (GPT-J model)"),LSo=l(),B5=a("li"),Ale=a("strong"),BSo=o("ibert"),xSo=o(" \u2014 "),sj=a("a"),kSo=o("IBertForQuestionAnswering"),RSo=o(" (I-BERT model)"),SSo=l(),x5=a("li"),Lle=a("strong"),PSo=o("layoutlmv2"),$So=o(" \u2014 "),lj=a("a"),ISo=o("LayoutLMv2ForQuestionAnswering"),NSo=o(" (LayoutLMv2 model)"),DSo=l(),k5=a("li"),Ble=a("strong"),jSo=o("led"),qSo=o(" \u2014 "),ij=a("a"),GSo=o("LEDForQuestionAnswering"),OSo=o(" (LED model)"),XSo=l(),R5=a("li"),xle=a("strong"),VSo=o("longformer"),zSo=o(" \u2014 "),dj=a("a"),WSo=o("LongformerForQuestionAnswering"),QSo=o(" (Longformer model)"),HSo=l(),S5=a("li"),kle=a("strong"),USo=o("lxmert"),JSo=o(" \u2014 "),cj=a("a"),YSo=o("LxmertForQuestionAnswering"),KSo=o(" (LXMERT model)"),ZSo=l(),P5=a("li"),Rle=a("strong"),ePo=o("mbart"),oPo=o(" \u2014 "),fj=a("a"),rPo=o("MBartForQuestionAnswering"),tPo=o(" (mBART model)"),aPo=l(),$5=a("li"),Sle=a("strong"),nPo=o("megatron-bert"),sPo=o(" \u2014 "),mj=a("a"),lPo=o("MegatronBertForQuestionAnswering"),iPo=o(" (MegatronBert model)"),dPo=l(),I5=a("li"),Ple=a("strong"),cPo=o("mobilebert"),fPo=o(" \u2014 "),gj=a("a"),mPo=o("MobileBertForQuestionAnswering"),gPo=o(" (MobileBERT model)"),hPo=l(),N5=a("li"),$le=a("strong"),pPo=o("mpnet"),_Po=o(" \u2014 "),hj=a("a"),uPo=o("MPNetForQuestionAnswering"),bPo=o(" (MPNet model)"),vPo=l(),D5=a("li"),Ile=a("strong"),TPo=o("nystromformer"),FPo=o(" \u2014 "),pj=a("a"),CPo=o("NystromformerForQuestionAnswering"),MPo=o(" (Nystromformer model)"),EPo=l(),j5=a("li"),Nle=a("strong"),yPo=o("qdqbert"),wPo=o(" \u2014 "),_j=a("a"),APo=o("QDQBertForQuestionAnswering"),LPo=o(" (QDQBert model)"),BPo=l(),q5=a("li"),Dle=a("strong"),xPo=o("reformer"),kPo=o(" \u2014 "),uj=a("a"),RPo=o("ReformerForQuestionAnswering"),SPo=o(" (Reformer model)"),PPo=l(),G5=a("li"),jle=a("strong"),$Po=o("rembert"),IPo=o(" \u2014 "),bj=a("a"),NPo=o("RemBertForQuestionAnswering"),DPo=o(" (RemBERT model)"),jPo=l(),O5=a("li"),qle=a("strong"),qPo=o("roberta"),GPo=o(" \u2014 "),vj=a("a"),OPo=o("RobertaForQuestionAnswering"),XPo=o(" (RoBERTa model)"),VPo=l(),X5=a("li"),Gle=a("strong"),zPo=o("roformer"),WPo=o(" \u2014 "),Tj=a("a"),QPo=o("RoFormerForQuestionAnswering"),HPo=o(" (RoFormer model)"),UPo=l(),V5=a("li"),Ole=a("strong"),JPo=o("splinter"),YPo=o(" \u2014 "),Fj=a("a"),KPo=o("SplinterForQuestionAnswering"),ZPo=o(" (Splinter model)"),e$o=l(),z5=a("li"),Xle=a("strong"),o$o=o("squeezebert"),r$o=o(" \u2014 "),Cj=a("a"),t$o=o("SqueezeBertForQuestionAnswering"),a$o=o(" (SqueezeBERT model)"),n$o=l(),W5=a("li"),Vle=a("strong"),s$o=o("xlm"),l$o=o(" \u2014 "),Mj=a("a"),i$o=o("XLMForQuestionAnsweringSimple"),d$o=o(" (XLM model)"),c$o=l(),Q5=a("li"),zle=a("strong"),f$o=o("xlm-roberta"),m$o=o(" \u2014 "),Ej=a("a"),g$o=o("XLMRobertaForQuestionAnswering"),h$o=o(" (XLM-RoBERTa model)"),p$o=l(),H5=a("li"),Wle=a("strong"),_$o=o("xlm-roberta-xl"),u$o=o(" \u2014 "),yj=a("a"),b$o=o("XLMRobertaXLForQuestionAnswering"),v$o=o(" (XLM-RoBERTa-XL model)"),T$o=l(),U5=a("li"),Qle=a("strong"),F$o=o("xlnet"),C$o=o(" \u2014 "),wj=a("a"),M$o=o("XLNetForQuestionAnsweringSimple"),E$o=o(" (XLNet model)"),y$o=l(),J5=a("li"),Hle=a("strong"),w$o=o("yoso"),A$o=o(" \u2014 "),Aj=a("a"),L$o=o("YosoForQuestionAnswering"),B$o=o(" (YOSO model)"),x$o=l(),Y5=a("p"),k$o=o("The model is set in evaluation mode by default using "),Ule=a("code"),R$o=o("model.eval()"),S$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jle=a("code"),P$o=o("model.train()"),$$o=l(),Yle=a("p"),I$o=o("Examples:"),N$o=l(),f(rw.$$.fragment),Dke=l(),Ad=a("h2"),K5=a("a"),Kle=a("span"),f(tw.$$.fragment),D$o=l(),Zle=a("span"),j$o=o("AutoModelForTableQuestionAnswering"),jke=l(),sr=a("div"),f(aw.$$.fragment),q$o=l(),Ld=a("p"),G$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eie=a("code"),O$o=o("from_pretrained()"),X$o=o("class method or the "),oie=a("code"),V$o=o("from_config()"),z$o=o(`class
method.`),W$o=l(),nw=a("p"),Q$o=o("This class cannot be instantiated directly using "),rie=a("code"),H$o=o("__init__()"),U$o=o(" (throws an error)."),J$o=l(),et=a("div"),f(sw.$$.fragment),Y$o=l(),tie=a("p"),K$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z$o=l(),Bd=a("p"),eIo=o(`Note:
Loading a model from its configuration file does `),aie=a("strong"),oIo=o("not"),rIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nie=a("code"),tIo=o("from_pretrained()"),aIo=o("to load the model weights."),nIo=l(),sie=a("p"),sIo=o("Examples:"),lIo=l(),f(lw.$$.fragment),iIo=l(),He=a("div"),f(iw.$$.fragment),dIo=l(),lie=a("p"),cIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fIo=l(),en=a("p"),mIo=o("The model class to instantiate is selected based on the "),iie=a("code"),gIo=o("model_type"),hIo=o(` property of the config object (either
passed as an argument or loaded from `),die=a("code"),pIo=o("pretrained_model_name_or_path"),_Io=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=a("code"),uIo=o("pretrained_model_name_or_path"),bIo=o(":"),vIo=l(),fie=a("ul"),Z5=a("li"),mie=a("strong"),TIo=o("tapas"),FIo=o(" \u2014 "),Lj=a("a"),CIo=o("TapasForQuestionAnswering"),MIo=o(" (TAPAS model)"),EIo=l(),e2=a("p"),yIo=o("The model is set in evaluation mode by default using "),gie=a("code"),wIo=o("model.eval()"),AIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),LIo=o("model.train()"),BIo=l(),pie=a("p"),xIo=o("Examples:"),kIo=l(),f(dw.$$.fragment),qke=l(),xd=a("h2"),o2=a("a"),_ie=a("span"),f(cw.$$.fragment),RIo=l(),uie=a("span"),SIo=o("AutoModelForImageClassification"),Gke=l(),lr=a("div"),f(fw.$$.fragment),PIo=l(),kd=a("p"),$Io=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bie=a("code"),IIo=o("from_pretrained()"),NIo=o("class method or the "),vie=a("code"),DIo=o("from_config()"),jIo=o(`class
method.`),qIo=l(),mw=a("p"),GIo=o("This class cannot be instantiated directly using "),Tie=a("code"),OIo=o("__init__()"),XIo=o(" (throws an error)."),VIo=l(),ot=a("div"),f(gw.$$.fragment),zIo=l(),Fie=a("p"),WIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QIo=l(),Rd=a("p"),HIo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),UIo=o("not"),JIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("code"),YIo=o("from_pretrained()"),KIo=o("to load the model weights."),ZIo=l(),Eie=a("p"),eNo=o("Examples:"),oNo=l(),f(hw.$$.fragment),rNo=l(),Ue=a("div"),f(pw.$$.fragment),tNo=l(),yie=a("p"),aNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nNo=l(),on=a("p"),sNo=o("The model class to instantiate is selected based on the "),wie=a("code"),lNo=o("model_type"),iNo=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),dNo=o("pretrained_model_name_or_path"),cNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(":"),gNo=l(),me=a("ul"),r2=a("li"),Bie=a("strong"),hNo=o("beit"),pNo=o(" \u2014 "),Bj=a("a"),_No=o("BeitForImageClassification"),uNo=o(" (BEiT model)"),bNo=l(),t2=a("li"),xie=a("strong"),vNo=o("convnext"),TNo=o(" \u2014 "),xj=a("a"),FNo=o("ConvNextForImageClassification"),CNo=o(" (ConvNext model)"),MNo=l(),qs=a("li"),kie=a("strong"),ENo=o("deit"),yNo=o(" \u2014 "),kj=a("a"),wNo=o("DeiTForImageClassification"),ANo=o(" or "),Rj=a("a"),LNo=o("DeiTForImageClassificationWithTeacher"),BNo=o(" (DeiT model)"),xNo=l(),a2=a("li"),Rie=a("strong"),kNo=o("imagegpt"),RNo=o(" \u2014 "),Sj=a("a"),SNo=o("ImageGPTForImageClassification"),PNo=o(" (ImageGPT model)"),$No=l(),ma=a("li"),Sie=a("strong"),INo=o("perceiver"),NNo=o(" \u2014 "),Pj=a("a"),DNo=o("PerceiverForImageClassificationLearned"),jNo=o(" or "),$j=a("a"),qNo=o("PerceiverForImageClassificationFourier"),GNo=o(" or "),Ij=a("a"),ONo=o("PerceiverForImageClassificationConvProcessing"),XNo=o(" (Perceiver model)"),VNo=l(),n2=a("li"),Pie=a("strong"),zNo=o("poolformer"),WNo=o(" \u2014 "),Nj=a("a"),QNo=o("PoolFormerForImageClassification"),HNo=o(" (PoolFormer model)"),UNo=l(),s2=a("li"),$ie=a("strong"),JNo=o("resnet"),YNo=o(" \u2014 "),Dj=a("a"),KNo=o("ResNetForImageClassification"),ZNo=o(" (ResNet model)"),eDo=l(),l2=a("li"),Iie=a("strong"),oDo=o("segformer"),rDo=o(" \u2014 "),jj=a("a"),tDo=o("SegformerForImageClassification"),aDo=o(" (SegFormer model)"),nDo=l(),i2=a("li"),Nie=a("strong"),sDo=o("swin"),lDo=o(" \u2014 "),qj=a("a"),iDo=o("SwinForImageClassification"),dDo=o(" (Swin model)"),cDo=l(),d2=a("li"),Die=a("strong"),fDo=o("van"),mDo=o(" \u2014 "),Gj=a("a"),gDo=o("VanForImageClassification"),hDo=o(" (VAN model)"),pDo=l(),c2=a("li"),jie=a("strong"),_Do=o("vit"),uDo=o(" \u2014 "),Oj=a("a"),bDo=o("ViTForImageClassification"),vDo=o(" (ViT model)"),TDo=l(),f2=a("p"),FDo=o("The model is set in evaluation mode by default using "),qie=a("code"),CDo=o("model.eval()"),MDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),EDo=o("model.train()"),yDo=l(),Oie=a("p"),wDo=o("Examples:"),ADo=l(),f(_w.$$.fragment),Oke=l(),Sd=a("h2"),m2=a("a"),Xie=a("span"),f(uw.$$.fragment),LDo=l(),Vie=a("span"),BDo=o("AutoModelForVision2Seq"),Xke=l(),ir=a("div"),f(bw.$$.fragment),xDo=l(),Pd=a("p"),kDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zie=a("code"),RDo=o("from_pretrained()"),SDo=o("class method or the "),Wie=a("code"),PDo=o("from_config()"),$Do=o(`class
method.`),IDo=l(),vw=a("p"),NDo=o("This class cannot be instantiated directly using "),Qie=a("code"),DDo=o("__init__()"),jDo=o(" (throws an error)."),qDo=l(),rt=a("div"),f(Tw.$$.fragment),GDo=l(),Hie=a("p"),ODo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XDo=l(),$d=a("p"),VDo=o(`Note:
Loading a model from its configuration file does `),Uie=a("strong"),zDo=o("not"),WDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jie=a("code"),QDo=o("from_pretrained()"),HDo=o("to load the model weights."),UDo=l(),Yie=a("p"),JDo=o("Examples:"),YDo=l(),f(Fw.$$.fragment),KDo=l(),Je=a("div"),f(Cw.$$.fragment),ZDo=l(),Kie=a("p"),ejo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ojo=l(),rn=a("p"),rjo=o("The model class to instantiate is selected based on the "),Zie=a("code"),tjo=o("model_type"),ajo=o(` property of the config object (either
passed as an argument or loaded from `),ede=a("code"),njo=o("pretrained_model_name_or_path"),sjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=a("code"),ljo=o("pretrained_model_name_or_path"),ijo=o(":"),djo=l(),rde=a("ul"),g2=a("li"),tde=a("strong"),cjo=o("vision-encoder-decoder"),fjo=o(" \u2014 "),Xj=a("a"),mjo=o("VisionEncoderDecoderModel"),gjo=o(" (Vision Encoder decoder model)"),hjo=l(),h2=a("p"),pjo=o("The model is set in evaluation mode by default using "),ade=a("code"),_jo=o("model.eval()"),ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nde=a("code"),bjo=o("model.train()"),vjo=l(),sde=a("p"),Tjo=o("Examples:"),Fjo=l(),f(Mw.$$.fragment),Vke=l(),Id=a("h2"),p2=a("a"),lde=a("span"),f(Ew.$$.fragment),Cjo=l(),ide=a("span"),Mjo=o("AutoModelForAudioClassification"),zke=l(),dr=a("div"),f(yw.$$.fragment),Ejo=l(),Nd=a("p"),yjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dde=a("code"),wjo=o("from_pretrained()"),Ajo=o("class method or the "),cde=a("code"),Ljo=o("from_config()"),Bjo=o(`class
method.`),xjo=l(),ww=a("p"),kjo=o("This class cannot be instantiated directly using "),fde=a("code"),Rjo=o("__init__()"),Sjo=o(" (throws an error)."),Pjo=l(),tt=a("div"),f(Aw.$$.fragment),$jo=l(),mde=a("p"),Ijo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Njo=l(),Dd=a("p"),Djo=o(`Note:
Loading a model from its configuration file does `),gde=a("strong"),jjo=o("not"),qjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hde=a("code"),Gjo=o("from_pretrained()"),Ojo=o("to load the model weights."),Xjo=l(),pde=a("p"),Vjo=o("Examples:"),zjo=l(),f(Lw.$$.fragment),Wjo=l(),Ye=a("div"),f(Bw.$$.fragment),Qjo=l(),_de=a("p"),Hjo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ujo=l(),tn=a("p"),Jjo=o("The model class to instantiate is selected based on the "),ude=a("code"),Yjo=o("model_type"),Kjo=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),Zjo=o("pretrained_model_name_or_path"),eqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=a("code"),oqo=o("pretrained_model_name_or_path"),rqo=o(":"),tqo=l(),ke=a("ul"),_2=a("li"),Tde=a("strong"),aqo=o("data2vec-audio"),nqo=o(" \u2014 "),Vj=a("a"),sqo=o("Data2VecAudioForSequenceClassification"),lqo=o(" (Data2VecAudio model)"),iqo=l(),u2=a("li"),Fde=a("strong"),dqo=o("hubert"),cqo=o(" \u2014 "),zj=a("a"),fqo=o("HubertForSequenceClassification"),mqo=o(" (Hubert model)"),gqo=l(),b2=a("li"),Cde=a("strong"),hqo=o("sew"),pqo=o(" \u2014 "),Wj=a("a"),_qo=o("SEWForSequenceClassification"),uqo=o(" (SEW model)"),bqo=l(),v2=a("li"),Mde=a("strong"),vqo=o("sew-d"),Tqo=o(" \u2014 "),Qj=a("a"),Fqo=o("SEWDForSequenceClassification"),Cqo=o(" (SEW-D model)"),Mqo=l(),T2=a("li"),Ede=a("strong"),Eqo=o("unispeech"),yqo=o(" \u2014 "),Hj=a("a"),wqo=o("UniSpeechForSequenceClassification"),Aqo=o(" (UniSpeech model)"),Lqo=l(),F2=a("li"),yde=a("strong"),Bqo=o("unispeech-sat"),xqo=o(" \u2014 "),Uj=a("a"),kqo=o("UniSpeechSatForSequenceClassification"),Rqo=o(" (UniSpeechSat model)"),Sqo=l(),C2=a("li"),wde=a("strong"),Pqo=o("wav2vec2"),$qo=o(" \u2014 "),Jj=a("a"),Iqo=o("Wav2Vec2ForSequenceClassification"),Nqo=o(" (Wav2Vec2 model)"),Dqo=l(),M2=a("li"),Ade=a("strong"),jqo=o("wavlm"),qqo=o(" \u2014 "),Yj=a("a"),Gqo=o("WavLMForSequenceClassification"),Oqo=o(" (WavLM model)"),Xqo=l(),E2=a("p"),Vqo=o("The model is set in evaluation mode by default using "),Lde=a("code"),zqo=o("model.eval()"),Wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=a("code"),Qqo=o("model.train()"),Hqo=l(),xde=a("p"),Uqo=o("Examples:"),Jqo=l(),f(xw.$$.fragment),Wke=l(),jd=a("h2"),y2=a("a"),kde=a("span"),f(kw.$$.fragment),Yqo=l(),Rde=a("span"),Kqo=o("AutoModelForAudioFrameClassification"),Qke=l(),cr=a("div"),f(Rw.$$.fragment),Zqo=l(),qd=a("p"),eGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Sde=a("code"),oGo=o("from_pretrained()"),rGo=o("class method or the "),Pde=a("code"),tGo=o("from_config()"),aGo=o(`class
method.`),nGo=l(),Sw=a("p"),sGo=o("This class cannot be instantiated directly using "),$de=a("code"),lGo=o("__init__()"),iGo=o(" (throws an error)."),dGo=l(),at=a("div"),f(Pw.$$.fragment),cGo=l(),Ide=a("p"),fGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mGo=l(),Gd=a("p"),gGo=o(`Note:
Loading a model from its configuration file does `),Nde=a("strong"),hGo=o("not"),pGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dde=a("code"),_Go=o("from_pretrained()"),uGo=o("to load the model weights."),bGo=l(),jde=a("p"),vGo=o("Examples:"),TGo=l(),f($w.$$.fragment),FGo=l(),Ke=a("div"),f(Iw.$$.fragment),CGo=l(),qde=a("p"),MGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),EGo=l(),an=a("p"),yGo=o("The model class to instantiate is selected based on the "),Gde=a("code"),wGo=o("model_type"),AGo=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),LGo=o("pretrained_model_name_or_path"),BGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=a("code"),xGo=o("pretrained_model_name_or_path"),kGo=o(":"),RGo=l(),nn=a("ul"),w2=a("li"),Vde=a("strong"),SGo=o("data2vec-audio"),PGo=o(" \u2014 "),Kj=a("a"),$Go=o("Data2VecAudioForAudioFrameClassification"),IGo=o(" (Data2VecAudio model)"),NGo=l(),A2=a("li"),zde=a("strong"),DGo=o("unispeech-sat"),jGo=o(" \u2014 "),Zj=a("a"),qGo=o("UniSpeechSatForAudioFrameClassification"),GGo=o(" (UniSpeechSat model)"),OGo=l(),L2=a("li"),Wde=a("strong"),XGo=o("wav2vec2"),VGo=o(" \u2014 "),eq=a("a"),zGo=o("Wav2Vec2ForAudioFrameClassification"),WGo=o(" (Wav2Vec2 model)"),QGo=l(),B2=a("li"),Qde=a("strong"),HGo=o("wavlm"),UGo=o(" \u2014 "),oq=a("a"),JGo=o("WavLMForAudioFrameClassification"),YGo=o(" (WavLM model)"),KGo=l(),x2=a("p"),ZGo=o("The model is set in evaluation mode by default using "),Hde=a("code"),eOo=o("model.eval()"),oOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=a("code"),rOo=o("model.train()"),tOo=l(),Jde=a("p"),aOo=o("Examples:"),nOo=l(),f(Nw.$$.fragment),Hke=l(),Od=a("h2"),k2=a("a"),Yde=a("span"),f(Dw.$$.fragment),sOo=l(),Kde=a("span"),lOo=o("AutoModelForCTC"),Uke=l(),fr=a("div"),f(jw.$$.fragment),iOo=l(),Xd=a("p"),dOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Zde=a("code"),cOo=o("from_pretrained()"),fOo=o("class method or the "),ece=a("code"),mOo=o("from_config()"),gOo=o(`class
method.`),hOo=l(),qw=a("p"),pOo=o("This class cannot be instantiated directly using "),oce=a("code"),_Oo=o("__init__()"),uOo=o(" (throws an error)."),bOo=l(),nt=a("div"),f(Gw.$$.fragment),vOo=l(),rce=a("p"),TOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),FOo=l(),Vd=a("p"),COo=o(`Note:
Loading a model from its configuration file does `),tce=a("strong"),MOo=o("not"),EOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=a("code"),yOo=o("from_pretrained()"),wOo=o("to load the model weights."),AOo=l(),nce=a("p"),LOo=o("Examples:"),BOo=l(),f(Ow.$$.fragment),xOo=l(),Ze=a("div"),f(Xw.$$.fragment),kOo=l(),sce=a("p"),ROo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),SOo=l(),sn=a("p"),POo=o("The model class to instantiate is selected based on the "),lce=a("code"),$Oo=o("model_type"),IOo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),NOo=o("pretrained_model_name_or_path"),DOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),jOo=o("pretrained_model_name_or_path"),qOo=o(":"),GOo=l(),Re=a("ul"),R2=a("li"),cce=a("strong"),OOo=o("data2vec-audio"),XOo=o(" \u2014 "),rq=a("a"),VOo=o("Data2VecAudioForCTC"),zOo=o(" (Data2VecAudio model)"),WOo=l(),S2=a("li"),fce=a("strong"),QOo=o("hubert"),HOo=o(" \u2014 "),tq=a("a"),UOo=o("HubertForCTC"),JOo=o(" (Hubert model)"),YOo=l(),P2=a("li"),mce=a("strong"),KOo=o("sew"),ZOo=o(" \u2014 "),aq=a("a"),eXo=o("SEWForCTC"),oXo=o(" (SEW model)"),rXo=l(),$2=a("li"),gce=a("strong"),tXo=o("sew-d"),aXo=o(" \u2014 "),nq=a("a"),nXo=o("SEWDForCTC"),sXo=o(" (SEW-D model)"),lXo=l(),I2=a("li"),hce=a("strong"),iXo=o("unispeech"),dXo=o(" \u2014 "),sq=a("a"),cXo=o("UniSpeechForCTC"),fXo=o(" (UniSpeech model)"),mXo=l(),N2=a("li"),pce=a("strong"),gXo=o("unispeech-sat"),hXo=o(" \u2014 "),lq=a("a"),pXo=o("UniSpeechSatForCTC"),_Xo=o(" (UniSpeechSat model)"),uXo=l(),D2=a("li"),_ce=a("strong"),bXo=o("wav2vec2"),vXo=o(" \u2014 "),iq=a("a"),TXo=o("Wav2Vec2ForCTC"),FXo=o(" (Wav2Vec2 model)"),CXo=l(),j2=a("li"),uce=a("strong"),MXo=o("wavlm"),EXo=o(" \u2014 "),dq=a("a"),yXo=o("WavLMForCTC"),wXo=o(" (WavLM model)"),AXo=l(),q2=a("p"),LXo=o("The model is set in evaluation mode by default using "),bce=a("code"),BXo=o("model.eval()"),xXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),kXo=o("model.train()"),RXo=l(),Tce=a("p"),SXo=o("Examples:"),PXo=l(),f(Vw.$$.fragment),Jke=l(),zd=a("h2"),G2=a("a"),Fce=a("span"),f(zw.$$.fragment),$Xo=l(),Cce=a("span"),IXo=o("AutoModelForSpeechSeq2Seq"),Yke=l(),mr=a("div"),f(Ww.$$.fragment),NXo=l(),Wd=a("p"),DXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mce=a("code"),jXo=o("from_pretrained()"),qXo=o("class method or the "),Ece=a("code"),GXo=o("from_config()"),OXo=o(`class
method.`),XXo=l(),Qw=a("p"),VXo=o("This class cannot be instantiated directly using "),yce=a("code"),zXo=o("__init__()"),WXo=o(" (throws an error)."),QXo=l(),st=a("div"),f(Hw.$$.fragment),HXo=l(),wce=a("p"),UXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JXo=l(),Qd=a("p"),YXo=o(`Note:
Loading a model from its configuration file does `),Ace=a("strong"),KXo=o("not"),ZXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lce=a("code"),eVo=o("from_pretrained()"),oVo=o("to load the model weights."),rVo=l(),Bce=a("p"),tVo=o("Examples:"),aVo=l(),f(Uw.$$.fragment),nVo=l(),eo=a("div"),f(Jw.$$.fragment),sVo=l(),xce=a("p"),lVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iVo=l(),ln=a("p"),dVo=o("The model class to instantiate is selected based on the "),kce=a("code"),cVo=o("model_type"),fVo=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),mVo=o("pretrained_model_name_or_path"),gVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),hVo=o("pretrained_model_name_or_path"),pVo=o(":"),_Vo=l(),Yw=a("ul"),O2=a("li"),Pce=a("strong"),uVo=o("speech-encoder-decoder"),bVo=o(" \u2014 "),cq=a("a"),vVo=o("SpeechEncoderDecoderModel"),TVo=o(" (Speech Encoder decoder model)"),FVo=l(),X2=a("li"),$ce=a("strong"),CVo=o("speech_to_text"),MVo=o(" \u2014 "),fq=a("a"),EVo=o("Speech2TextForConditionalGeneration"),yVo=o(" (Speech2Text model)"),wVo=l(),V2=a("p"),AVo=o("The model is set in evaluation mode by default using "),Ice=a("code"),LVo=o("model.eval()"),BVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),xVo=o("model.train()"),kVo=l(),Dce=a("p"),RVo=o("Examples:"),SVo=l(),f(Kw.$$.fragment),Kke=l(),Hd=a("h2"),z2=a("a"),jce=a("span"),f(Zw.$$.fragment),PVo=l(),qce=a("span"),$Vo=o("AutoModelForAudioXVector"),Zke=l(),gr=a("div"),f(e6.$$.fragment),IVo=l(),Ud=a("p"),NVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gce=a("code"),DVo=o("from_pretrained()"),jVo=o("class method or the "),Oce=a("code"),qVo=o("from_config()"),GVo=o(`class
method.`),OVo=l(),o6=a("p"),XVo=o("This class cannot be instantiated directly using "),Xce=a("code"),VVo=o("__init__()"),zVo=o(" (throws an error)."),WVo=l(),lt=a("div"),f(r6.$$.fragment),QVo=l(),Vce=a("p"),HVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),UVo=l(),Jd=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),zce=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=a("code"),ZVo=o("from_pretrained()"),ezo=o("to load the model weights."),ozo=l(),Qce=a("p"),rzo=o("Examples:"),tzo=l(),f(t6.$$.fragment),azo=l(),oo=a("div"),f(a6.$$.fragment),nzo=l(),Hce=a("p"),szo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lzo=l(),dn=a("p"),izo=o("The model class to instantiate is selected based on the "),Uce=a("code"),dzo=o("model_type"),czo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(":"),pzo=l(),cn=a("ul"),W2=a("li"),Kce=a("strong"),_zo=o("data2vec-audio"),uzo=o(" \u2014 "),mq=a("a"),bzo=o("Data2VecAudioForXVector"),vzo=o(" (Data2VecAudio model)"),Tzo=l(),Q2=a("li"),Zce=a("strong"),Fzo=o("unispeech-sat"),Czo=o(" \u2014 "),gq=a("a"),Mzo=o("UniSpeechSatForXVector"),Ezo=o(" (UniSpeechSat model)"),yzo=l(),H2=a("li"),efe=a("strong"),wzo=o("wav2vec2"),Azo=o(" \u2014 "),hq=a("a"),Lzo=o("Wav2Vec2ForXVector"),Bzo=o(" (Wav2Vec2 model)"),xzo=l(),U2=a("li"),ofe=a("strong"),kzo=o("wavlm"),Rzo=o(" \u2014 "),pq=a("a"),Szo=o("WavLMForXVector"),Pzo=o(" (WavLM model)"),$zo=l(),J2=a("p"),Izo=o("The model is set in evaluation mode by default using "),rfe=a("code"),Nzo=o("model.eval()"),Dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=a("code"),jzo=o("model.train()"),qzo=l(),afe=a("p"),Gzo=o("Examples:"),Ozo=l(),f(n6.$$.fragment),eRe=l(),Yd=a("h2"),Y2=a("a"),nfe=a("span"),f(s6.$$.fragment),Xzo=l(),sfe=a("span"),Vzo=o("AutoModelForMaskedImageModeling"),oRe=l(),hr=a("div"),f(l6.$$.fragment),zzo=l(),Kd=a("p"),Wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lfe=a("code"),Qzo=o("from_pretrained()"),Hzo=o("class method or the "),ife=a("code"),Uzo=o("from_config()"),Jzo=o(`class
method.`),Yzo=l(),i6=a("p"),Kzo=o("This class cannot be instantiated directly using "),dfe=a("code"),Zzo=o("__init__()"),eWo=o(" (throws an error)."),oWo=l(),it=a("div"),f(d6.$$.fragment),rWo=l(),cfe=a("p"),tWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),aWo=l(),Zd=a("p"),nWo=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),sWo=o("not"),lWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mfe=a("code"),iWo=o("from_pretrained()"),dWo=o("to load the model weights."),cWo=l(),gfe=a("p"),fWo=o("Examples:"),mWo=l(),f(c6.$$.fragment),gWo=l(),ro=a("div"),f(f6.$$.fragment),hWo=l(),hfe=a("p"),pWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_Wo=l(),fn=a("p"),uWo=o("The model class to instantiate is selected based on the "),pfe=a("code"),bWo=o("model_type"),vWo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),TWo=o("pretrained_model_name_or_path"),FWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),CWo=o("pretrained_model_name_or_path"),MWo=o(":"),EWo=l(),ec=a("ul"),K2=a("li"),bfe=a("strong"),yWo=o("deit"),wWo=o(" \u2014 "),_q=a("a"),AWo=o("DeiTForMaskedImageModeling"),LWo=o(" (DeiT model)"),BWo=l(),Z2=a("li"),vfe=a("strong"),xWo=o("swin"),kWo=o(" \u2014 "),uq=a("a"),RWo=o("SwinForMaskedImageModeling"),SWo=o(" (Swin model)"),PWo=l(),ev=a("li"),Tfe=a("strong"),$Wo=o("vit"),IWo=o(" \u2014 "),bq=a("a"),NWo=o("ViTForMaskedImageModeling"),DWo=o(" (ViT model)"),jWo=l(),ov=a("p"),qWo=o("The model is set in evaluation mode by default using "),Ffe=a("code"),GWo=o("model.eval()"),OWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),XWo=o("model.train()"),VWo=l(),Mfe=a("p"),zWo=o("Examples:"),WWo=l(),f(m6.$$.fragment),rRe=l(),oc=a("h2"),rv=a("a"),Efe=a("span"),f(g6.$$.fragment),QWo=l(),yfe=a("span"),HWo=o("AutoModelForObjectDetection"),tRe=l(),pr=a("div"),f(h6.$$.fragment),UWo=l(),rc=a("p"),JWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wfe=a("code"),YWo=o("from_pretrained()"),KWo=o("class method or the "),Afe=a("code"),ZWo=o("from_config()"),eQo=o(`class
method.`),oQo=l(),p6=a("p"),rQo=o("This class cannot be instantiated directly using "),Lfe=a("code"),tQo=o("__init__()"),aQo=o(" (throws an error)."),nQo=l(),dt=a("div"),f(_6.$$.fragment),sQo=l(),Bfe=a("p"),lQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iQo=l(),tc=a("p"),dQo=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),cQo=o("not"),fQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kfe=a("code"),mQo=o("from_pretrained()"),gQo=o("to load the model weights."),hQo=l(),Rfe=a("p"),pQo=o("Examples:"),_Qo=l(),f(u6.$$.fragment),uQo=l(),to=a("div"),f(b6.$$.fragment),bQo=l(),Sfe=a("p"),vQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),TQo=l(),mn=a("p"),FQo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),CQo=o("model_type"),MQo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),EQo=o("pretrained_model_name_or_path"),yQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),wQo=o("pretrained_model_name_or_path"),AQo=o(":"),LQo=l(),Nfe=a("ul"),tv=a("li"),Dfe=a("strong"),BQo=o("detr"),xQo=o(" \u2014 "),vq=a("a"),kQo=o("DetrForObjectDetection"),RQo=o(" (DETR model)"),SQo=l(),av=a("p"),PQo=o("The model is set in evaluation mode by default using "),jfe=a("code"),$Qo=o("model.eval()"),IQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=a("code"),NQo=o("model.train()"),DQo=l(),Gfe=a("p"),jQo=o("Examples:"),qQo=l(),f(v6.$$.fragment),aRe=l(),ac=a("h2"),nv=a("a"),Ofe=a("span"),f(T6.$$.fragment),GQo=l(),Xfe=a("span"),OQo=o("AutoModelForImageSegmentation"),nRe=l(),_r=a("div"),f(F6.$$.fragment),XQo=l(),nc=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Vfe=a("code"),zQo=o("from_pretrained()"),WQo=o("class method or the "),zfe=a("code"),QQo=o("from_config()"),HQo=o(`class
method.`),UQo=l(),C6=a("p"),JQo=o("This class cannot be instantiated directly using "),Wfe=a("code"),YQo=o("__init__()"),KQo=o(" (throws an error)."),ZQo=l(),ct=a("div"),f(M6.$$.fragment),eHo=l(),Qfe=a("p"),oHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rHo=l(),sc=a("p"),tHo=o(`Note:
Loading a model from its configuration file does `),Hfe=a("strong"),aHo=o("not"),nHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ufe=a("code"),sHo=o("from_pretrained()"),lHo=o("to load the model weights."),iHo=l(),Jfe=a("p"),dHo=o("Examples:"),cHo=l(),f(E6.$$.fragment),fHo=l(),ao=a("div"),f(y6.$$.fragment),mHo=l(),Yfe=a("p"),gHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hHo=l(),gn=a("p"),pHo=o("The model class to instantiate is selected based on the "),Kfe=a("code"),_Ho=o("model_type"),uHo=o(` property of the config object (either
passed as an argument or loaded from `),Zfe=a("code"),bHo=o("pretrained_model_name_or_path"),vHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=a("code"),THo=o("pretrained_model_name_or_path"),FHo=o(":"),CHo=l(),ome=a("ul"),sv=a("li"),rme=a("strong"),MHo=o("detr"),EHo=o(" \u2014 "),Tq=a("a"),yHo=o("DetrForSegmentation"),wHo=o(" (DETR model)"),AHo=l(),lv=a("p"),LHo=o("The model is set in evaluation mode by default using "),tme=a("code"),BHo=o("model.eval()"),xHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),kHo=o("model.train()"),RHo=l(),nme=a("p"),SHo=o("Examples:"),PHo=l(),f(w6.$$.fragment),sRe=l(),lc=a("h2"),iv=a("a"),sme=a("span"),f(A6.$$.fragment),$Ho=l(),lme=a("span"),IHo=o("AutoModelForSemanticSegmentation"),lRe=l(),ur=a("div"),f(L6.$$.fragment),NHo=l(),ic=a("p"),DHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ime=a("code"),jHo=o("from_pretrained()"),qHo=o("class method or the "),dme=a("code"),GHo=o("from_config()"),OHo=o(`class
method.`),XHo=l(),B6=a("p"),VHo=o("This class cannot be instantiated directly using "),cme=a("code"),zHo=o("__init__()"),WHo=o(" (throws an error)."),QHo=l(),ft=a("div"),f(x6.$$.fragment),HHo=l(),fme=a("p"),UHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),JHo=l(),dc=a("p"),YHo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),KHo=o("not"),ZHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gme=a("code"),eUo=o("from_pretrained()"),oUo=o("to load the model weights."),rUo=l(),hme=a("p"),tUo=o("Examples:"),aUo=l(),f(k6.$$.fragment),nUo=l(),no=a("div"),f(R6.$$.fragment),sUo=l(),pme=a("p"),lUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),iUo=l(),hn=a("p"),dUo=o("The model class to instantiate is selected based on the "),_me=a("code"),cUo=o("model_type"),fUo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),mUo=o("pretrained_model_name_or_path"),gUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),hUo=o("pretrained_model_name_or_path"),pUo=o(":"),_Uo=l(),cc=a("ul"),dv=a("li"),vme=a("strong"),uUo=o("beit"),bUo=o(" \u2014 "),Fq=a("a"),vUo=o("BeitForSemanticSegmentation"),TUo=o(" (BEiT model)"),FUo=l(),cv=a("li"),Tme=a("strong"),CUo=o("dpt"),MUo=o(" \u2014 "),Cq=a("a"),EUo=o("DPTForSemanticSegmentation"),yUo=o(" (DPT model)"),wUo=l(),fv=a("li"),Fme=a("strong"),AUo=o("segformer"),LUo=o(" \u2014 "),Mq=a("a"),BUo=o("SegformerForSemanticSegmentation"),xUo=o(" (SegFormer model)"),kUo=l(),mv=a("p"),RUo=o("The model is set in evaluation mode by default using "),Cme=a("code"),SUo=o("model.eval()"),PUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),$Uo=o("model.train()"),IUo=l(),Eme=a("p"),NUo=o("Examples:"),DUo=l(),f(S6.$$.fragment),iRe=l(),fc=a("h2"),gv=a("a"),yme=a("span"),f(P6.$$.fragment),jUo=l(),wme=a("span"),qUo=o("AutoModelForInstanceSegmentation"),dRe=l(),br=a("div"),f($6.$$.fragment),GUo=l(),mc=a("p"),OUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ame=a("code"),XUo=o("from_pretrained()"),VUo=o("class method or the "),Lme=a("code"),zUo=o("from_config()"),WUo=o(`class
method.`),QUo=l(),I6=a("p"),HUo=o("This class cannot be instantiated directly using "),Bme=a("code"),UUo=o("__init__()"),JUo=o(" (throws an error)."),YUo=l(),mt=a("div"),f(N6.$$.fragment),KUo=l(),xme=a("p"),ZUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eJo=l(),gc=a("p"),oJo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),rJo=o("not"),tJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rme=a("code"),aJo=o("from_pretrained()"),nJo=o("to load the model weights."),sJo=l(),Sme=a("p"),lJo=o("Examples:"),iJo=l(),f(D6.$$.fragment),dJo=l(),so=a("div"),f(j6.$$.fragment),cJo=l(),Pme=a("p"),fJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mJo=l(),pn=a("p"),gJo=o("The model class to instantiate is selected based on the "),$me=a("code"),hJo=o("model_type"),pJo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),_Jo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(":"),TJo=l(),Dme=a("ul"),hv=a("li"),jme=a("strong"),FJo=o("maskformer"),CJo=o(" \u2014 "),Eq=a("a"),MJo=o("MaskFormerForInstanceSegmentation"),EJo=o(" (MaskFormer model)"),yJo=l(),pv=a("p"),wJo=o("The model is set in evaluation mode by default using "),qme=a("code"),AJo=o("model.eval()"),LJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=a("code"),BJo=o("model.train()"),xJo=l(),Ome=a("p"),kJo=o("Examples:"),RJo=l(),f(q6.$$.fragment),cRe=l(),hc=a("h2"),_v=a("a"),Xme=a("span"),f(G6.$$.fragment),SJo=l(),Vme=a("span"),PJo=o("TFAutoModel"),fRe=l(),vr=a("div"),f(O6.$$.fragment),$Jo=l(),pc=a("p"),IJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zme=a("code"),NJo=o("from_pretrained()"),DJo=o("class method or the "),Wme=a("code"),jJo=o("from_config()"),qJo=o(`class
method.`),GJo=l(),X6=a("p"),OJo=o("This class cannot be instantiated directly using "),Qme=a("code"),XJo=o("__init__()"),VJo=o(" (throws an error)."),zJo=l(),gt=a("div"),f(V6.$$.fragment),WJo=l(),Hme=a("p"),QJo=o("Instantiates one of the base model classes of the library from a configuration."),HJo=l(),_c=a("p"),UJo=o(`Note:
Loading a model from its configuration file does `),Ume=a("strong"),JJo=o("not"),YJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jme=a("code"),KJo=o("from_pretrained()"),ZJo=o("to load the model weights."),eYo=l(),Yme=a("p"),oYo=o("Examples:"),rYo=l(),f(z6.$$.fragment),tYo=l(),ho=a("div"),f(W6.$$.fragment),aYo=l(),Kme=a("p"),nYo=o("Instantiate one of the base model classes of the library from a pretrained model."),sYo=l(),_n=a("p"),lYo=o("The model class to instantiate is selected based on the "),Zme=a("code"),iYo=o("model_type"),dYo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),cYo=o("pretrained_model_name_or_path"),fYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),mYo=o("pretrained_model_name_or_path"),gYo=o(":"),hYo=l(),B=a("ul"),uv=a("li"),rge=a("strong"),pYo=o("albert"),_Yo=o(" \u2014 "),yq=a("a"),uYo=o("TFAlbertModel"),bYo=o(" (ALBERT model)"),vYo=l(),bv=a("li"),tge=a("strong"),TYo=o("bart"),FYo=o(" \u2014 "),wq=a("a"),CYo=o("TFBartModel"),MYo=o(" (BART model)"),EYo=l(),vv=a("li"),age=a("strong"),yYo=o("bert"),wYo=o(" \u2014 "),Aq=a("a"),AYo=o("TFBertModel"),LYo=o(" (BERT model)"),BYo=l(),Tv=a("li"),nge=a("strong"),xYo=o("blenderbot"),kYo=o(" \u2014 "),Lq=a("a"),RYo=o("TFBlenderbotModel"),SYo=o(" (Blenderbot model)"),PYo=l(),Fv=a("li"),sge=a("strong"),$Yo=o("blenderbot-small"),IYo=o(" \u2014 "),Bq=a("a"),NYo=o("TFBlenderbotSmallModel"),DYo=o(" (BlenderbotSmall model)"),jYo=l(),Cv=a("li"),lge=a("strong"),qYo=o("camembert"),GYo=o(" \u2014 "),xq=a("a"),OYo=o("TFCamembertModel"),XYo=o(" (CamemBERT model)"),VYo=l(),Mv=a("li"),ige=a("strong"),zYo=o("clip"),WYo=o(" \u2014 "),kq=a("a"),QYo=o("TFCLIPModel"),HYo=o(" (CLIP model)"),UYo=l(),Ev=a("li"),dge=a("strong"),JYo=o("convbert"),YYo=o(" \u2014 "),Rq=a("a"),KYo=o("TFConvBertModel"),ZYo=o(" (ConvBERT model)"),eKo=l(),yv=a("li"),cge=a("strong"),oKo=o("convnext"),rKo=o(" \u2014 "),Sq=a("a"),tKo=o("TFConvNextModel"),aKo=o(" (ConvNext model)"),nKo=l(),wv=a("li"),fge=a("strong"),sKo=o("ctrl"),lKo=o(" \u2014 "),Pq=a("a"),iKo=o("TFCTRLModel"),dKo=o(" (CTRL model)"),cKo=l(),Av=a("li"),mge=a("strong"),fKo=o("deberta"),mKo=o(" \u2014 "),$q=a("a"),gKo=o("TFDebertaModel"),hKo=o(" (DeBERTa model)"),pKo=l(),Lv=a("li"),gge=a("strong"),_Ko=o("deberta-v2"),uKo=o(" \u2014 "),Iq=a("a"),bKo=o("TFDebertaV2Model"),vKo=o(" (DeBERTa-v2 model)"),TKo=l(),Bv=a("li"),hge=a("strong"),FKo=o("distilbert"),CKo=o(" \u2014 "),Nq=a("a"),MKo=o("TFDistilBertModel"),EKo=o(" (DistilBERT model)"),yKo=l(),xv=a("li"),pge=a("strong"),wKo=o("dpr"),AKo=o(" \u2014 "),Dq=a("a"),LKo=o("TFDPRQuestionEncoder"),BKo=o(" (DPR model)"),xKo=l(),kv=a("li"),_ge=a("strong"),kKo=o("electra"),RKo=o(" \u2014 "),jq=a("a"),SKo=o("TFElectraModel"),PKo=o(" (ELECTRA model)"),$Ko=l(),Rv=a("li"),uge=a("strong"),IKo=o("flaubert"),NKo=o(" \u2014 "),qq=a("a"),DKo=o("TFFlaubertModel"),jKo=o(" (FlauBERT model)"),qKo=l(),Gs=a("li"),bge=a("strong"),GKo=o("funnel"),OKo=o(" \u2014 "),Gq=a("a"),XKo=o("TFFunnelModel"),VKo=o(" or "),Oq=a("a"),zKo=o("TFFunnelBaseModel"),WKo=o(" (Funnel Transformer model)"),QKo=l(),Sv=a("li"),vge=a("strong"),HKo=o("gpt2"),UKo=o(" \u2014 "),Xq=a("a"),JKo=o("TFGPT2Model"),YKo=o(" (OpenAI GPT-2 model)"),KKo=l(),Pv=a("li"),Tge=a("strong"),ZKo=o("hubert"),eZo=o(" \u2014 "),Vq=a("a"),oZo=o("TFHubertModel"),rZo=o(" (Hubert model)"),tZo=l(),$v=a("li"),Fge=a("strong"),aZo=o("layoutlm"),nZo=o(" \u2014 "),zq=a("a"),sZo=o("TFLayoutLMModel"),lZo=o(" (LayoutLM model)"),iZo=l(),Iv=a("li"),Cge=a("strong"),dZo=o("led"),cZo=o(" \u2014 "),Wq=a("a"),fZo=o("TFLEDModel"),mZo=o(" (LED model)"),gZo=l(),Nv=a("li"),Mge=a("strong"),hZo=o("longformer"),pZo=o(" \u2014 "),Qq=a("a"),_Zo=o("TFLongformerModel"),uZo=o(" (Longformer model)"),bZo=l(),Dv=a("li"),Ege=a("strong"),vZo=o("lxmert"),TZo=o(" \u2014 "),Hq=a("a"),FZo=o("TFLxmertModel"),CZo=o(" (LXMERT model)"),MZo=l(),jv=a("li"),yge=a("strong"),EZo=o("marian"),yZo=o(" \u2014 "),Uq=a("a"),wZo=o("TFMarianModel"),AZo=o(" (Marian model)"),LZo=l(),qv=a("li"),wge=a("strong"),BZo=o("mbart"),xZo=o(" \u2014 "),Jq=a("a"),kZo=o("TFMBartModel"),RZo=o(" (mBART model)"),SZo=l(),Gv=a("li"),Age=a("strong"),PZo=o("mobilebert"),$Zo=o(" \u2014 "),Yq=a("a"),IZo=o("TFMobileBertModel"),NZo=o(" (MobileBERT model)"),DZo=l(),Ov=a("li"),Lge=a("strong"),jZo=o("mpnet"),qZo=o(" \u2014 "),Kq=a("a"),GZo=o("TFMPNetModel"),OZo=o(" (MPNet model)"),XZo=l(),Xv=a("li"),Bge=a("strong"),VZo=o("mt5"),zZo=o(" \u2014 "),Zq=a("a"),WZo=o("TFMT5Model"),QZo=o(" (mT5 model)"),HZo=l(),Vv=a("li"),xge=a("strong"),UZo=o("openai-gpt"),JZo=o(" \u2014 "),eG=a("a"),YZo=o("TFOpenAIGPTModel"),KZo=o(" (OpenAI GPT model)"),ZZo=l(),zv=a("li"),kge=a("strong"),eer=o("pegasus"),oer=o(" \u2014 "),oG=a("a"),rer=o("TFPegasusModel"),ter=o(" (Pegasus model)"),aer=l(),Wv=a("li"),Rge=a("strong"),ner=o("rembert"),ser=o(" \u2014 "),rG=a("a"),ler=o("TFRemBertModel"),ier=o(" (RemBERT model)"),der=l(),Qv=a("li"),Sge=a("strong"),cer=o("roberta"),fer=o(" \u2014 "),tG=a("a"),mer=o("TFRobertaModel"),ger=o(" (RoBERTa model)"),her=l(),Hv=a("li"),Pge=a("strong"),per=o("roformer"),_er=o(" \u2014 "),aG=a("a"),uer=o("TFRoFormerModel"),ber=o(" (RoFormer model)"),ver=l(),Uv=a("li"),$ge=a("strong"),Ter=o("speech_to_text"),Fer=o(" \u2014 "),nG=a("a"),Cer=o("TFSpeech2TextModel"),Mer=o(" (Speech2Text model)"),Eer=l(),Jv=a("li"),Ige=a("strong"),yer=o("t5"),wer=o(" \u2014 "),sG=a("a"),Aer=o("TFT5Model"),Ler=o(" (T5 model)"),Ber=l(),Yv=a("li"),Nge=a("strong"),xer=o("tapas"),ker=o(" \u2014 "),lG=a("a"),Rer=o("TFTapasModel"),Ser=o(" (TAPAS model)"),Per=l(),Kv=a("li"),Dge=a("strong"),$er=o("transfo-xl"),Ier=o(" \u2014 "),iG=a("a"),Ner=o("TFTransfoXLModel"),Der=o(" (Transformer-XL model)"),jer=l(),Zv=a("li"),jge=a("strong"),qer=o("vit"),Ger=o(" \u2014 "),dG=a("a"),Oer=o("TFViTModel"),Xer=o(" (ViT model)"),Ver=l(),eT=a("li"),qge=a("strong"),zer=o("wav2vec2"),Wer=o(" \u2014 "),cG=a("a"),Qer=o("TFWav2Vec2Model"),Her=o(" (Wav2Vec2 model)"),Uer=l(),oT=a("li"),Gge=a("strong"),Jer=o("xlm"),Yer=o(" \u2014 "),fG=a("a"),Ker=o("TFXLMModel"),Zer=o(" (XLM model)"),eor=l(),rT=a("li"),Oge=a("strong"),oor=o("xlm-roberta"),ror=o(" \u2014 "),mG=a("a"),tor=o("TFXLMRobertaModel"),aor=o(" (XLM-RoBERTa model)"),nor=l(),tT=a("li"),Xge=a("strong"),sor=o("xlnet"),lor=o(" \u2014 "),gG=a("a"),ior=o("TFXLNetModel"),dor=o(" (XLNet model)"),cor=l(),Vge=a("p"),mor=o("Examples:"),gor=l(),f(Q6.$$.fragment),mRe=l(),uc=a("h2"),aT=a("a"),zge=a("span"),f(H6.$$.fragment),hor=l(),Wge=a("span"),por=o("TFAutoModelForPreTraining"),gRe=l(),Tr=a("div"),f(U6.$$.fragment),_or=l(),bc=a("p"),uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qge=a("code"),bor=o("from_pretrained()"),vor=o("class method or the "),Hge=a("code"),Tor=o("from_config()"),For=o(`class
method.`),Cor=l(),J6=a("p"),Mor=o("This class cannot be instantiated directly using "),Uge=a("code"),Eor=o("__init__()"),yor=o(" (throws an error)."),wor=l(),ht=a("div"),f(Y6.$$.fragment),Aor=l(),Jge=a("p"),Lor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Bor=l(),vc=a("p"),xor=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),kor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kge=a("code"),Sor=o("from_pretrained()"),Por=o("to load the model weights."),$or=l(),Zge=a("p"),Ior=o("Examples:"),Nor=l(),f(K6.$$.fragment),Dor=l(),po=a("div"),f(Z6.$$.fragment),jor=l(),ehe=a("p"),qor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gor=l(),un=a("p"),Oor=o("The model class to instantiate is selected based on the "),ohe=a("code"),Xor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),zor=o("pretrained_model_name_or_path"),Wor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),Qor=o("pretrained_model_name_or_path"),Hor=o(":"),Uor=l(),H=a("ul"),nT=a("li"),ahe=a("strong"),Jor=o("albert"),Yor=o(" \u2014 "),hG=a("a"),Kor=o("TFAlbertForPreTraining"),Zor=o(" (ALBERT model)"),err=l(),sT=a("li"),nhe=a("strong"),orr=o("bart"),rrr=o(" \u2014 "),pG=a("a"),trr=o("TFBartForConditionalGeneration"),arr=o(" (BART model)"),nrr=l(),lT=a("li"),she=a("strong"),srr=o("bert"),lrr=o(" \u2014 "),_G=a("a"),irr=o("TFBertForPreTraining"),drr=o(" (BERT model)"),crr=l(),iT=a("li"),lhe=a("strong"),frr=o("camembert"),mrr=o(" \u2014 "),uG=a("a"),grr=o("TFCamembertForMaskedLM"),hrr=o(" (CamemBERT model)"),prr=l(),dT=a("li"),ihe=a("strong"),_rr=o("ctrl"),urr=o(" \u2014 "),bG=a("a"),brr=o("TFCTRLLMHeadModel"),vrr=o(" (CTRL model)"),Trr=l(),cT=a("li"),dhe=a("strong"),Frr=o("distilbert"),Crr=o(" \u2014 "),vG=a("a"),Mrr=o("TFDistilBertForMaskedLM"),Err=o(" (DistilBERT model)"),yrr=l(),fT=a("li"),che=a("strong"),wrr=o("electra"),Arr=o(" \u2014 "),TG=a("a"),Lrr=o("TFElectraForPreTraining"),Brr=o(" (ELECTRA model)"),xrr=l(),mT=a("li"),fhe=a("strong"),krr=o("flaubert"),Rrr=o(" \u2014 "),FG=a("a"),Srr=o("TFFlaubertWithLMHeadModel"),Prr=o(" (FlauBERT model)"),$rr=l(),gT=a("li"),mhe=a("strong"),Irr=o("funnel"),Nrr=o(" \u2014 "),CG=a("a"),Drr=o("TFFunnelForPreTraining"),jrr=o(" (Funnel Transformer model)"),qrr=l(),hT=a("li"),ghe=a("strong"),Grr=o("gpt2"),Orr=o(" \u2014 "),MG=a("a"),Xrr=o("TFGPT2LMHeadModel"),Vrr=o(" (OpenAI GPT-2 model)"),zrr=l(),pT=a("li"),hhe=a("strong"),Wrr=o("layoutlm"),Qrr=o(" \u2014 "),EG=a("a"),Hrr=o("TFLayoutLMForMaskedLM"),Urr=o(" (LayoutLM model)"),Jrr=l(),_T=a("li"),phe=a("strong"),Yrr=o("lxmert"),Krr=o(" \u2014 "),yG=a("a"),Zrr=o("TFLxmertForPreTraining"),etr=o(" (LXMERT model)"),otr=l(),uT=a("li"),_he=a("strong"),rtr=o("mobilebert"),ttr=o(" \u2014 "),wG=a("a"),atr=o("TFMobileBertForPreTraining"),ntr=o(" (MobileBERT model)"),str=l(),bT=a("li"),uhe=a("strong"),ltr=o("mpnet"),itr=o(" \u2014 "),AG=a("a"),dtr=o("TFMPNetForMaskedLM"),ctr=o(" (MPNet model)"),ftr=l(),vT=a("li"),bhe=a("strong"),mtr=o("openai-gpt"),gtr=o(" \u2014 "),LG=a("a"),htr=o("TFOpenAIGPTLMHeadModel"),ptr=o(" (OpenAI GPT model)"),_tr=l(),TT=a("li"),vhe=a("strong"),utr=o("roberta"),btr=o(" \u2014 "),BG=a("a"),vtr=o("TFRobertaForMaskedLM"),Ttr=o(" (RoBERTa model)"),Ftr=l(),FT=a("li"),The=a("strong"),Ctr=o("t5"),Mtr=o(" \u2014 "),xG=a("a"),Etr=o("TFT5ForConditionalGeneration"),ytr=o(" (T5 model)"),wtr=l(),CT=a("li"),Fhe=a("strong"),Atr=o("tapas"),Ltr=o(" \u2014 "),kG=a("a"),Btr=o("TFTapasForMaskedLM"),xtr=o(" (TAPAS model)"),ktr=l(),MT=a("li"),Che=a("strong"),Rtr=o("transfo-xl"),Str=o(" \u2014 "),RG=a("a"),Ptr=o("TFTransfoXLLMHeadModel"),$tr=o(" (Transformer-XL model)"),Itr=l(),ET=a("li"),Mhe=a("strong"),Ntr=o("xlm"),Dtr=o(" \u2014 "),SG=a("a"),jtr=o("TFXLMWithLMHeadModel"),qtr=o(" (XLM model)"),Gtr=l(),yT=a("li"),Ehe=a("strong"),Otr=o("xlm-roberta"),Xtr=o(" \u2014 "),PG=a("a"),Vtr=o("TFXLMRobertaForMaskedLM"),ztr=o(" (XLM-RoBERTa model)"),Wtr=l(),wT=a("li"),yhe=a("strong"),Qtr=o("xlnet"),Htr=o(" \u2014 "),$G=a("a"),Utr=o("TFXLNetLMHeadModel"),Jtr=o(" (XLNet model)"),Ytr=l(),whe=a("p"),Ktr=o("Examples:"),Ztr=l(),f(eA.$$.fragment),hRe=l(),Tc=a("h2"),AT=a("a"),Ahe=a("span"),f(oA.$$.fragment),ear=l(),Lhe=a("span"),oar=o("TFAutoModelForCausalLM"),pRe=l(),Fr=a("div"),f(rA.$$.fragment),rar=l(),Fc=a("p"),tar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bhe=a("code"),aar=o("from_pretrained()"),nar=o("class method or the "),xhe=a("code"),sar=o("from_config()"),lar=o(`class
method.`),iar=l(),tA=a("p"),dar=o("This class cannot be instantiated directly using "),khe=a("code"),car=o("__init__()"),far=o(" (throws an error)."),mar=l(),pt=a("div"),f(aA.$$.fragment),gar=l(),Rhe=a("p"),har=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),par=l(),Cc=a("p"),_ar=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),uar=o("not"),bar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Phe=a("code"),Tar=o("from_pretrained()"),Far=o("to load the model weights."),Car=l(),$he=a("p"),Mar=o("Examples:"),Ear=l(),f(nA.$$.fragment),yar=l(),_o=a("div"),f(sA.$$.fragment),war=l(),Ihe=a("p"),Aar=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lar=l(),bn=a("p"),Bar=o("The model class to instantiate is selected based on the "),Nhe=a("code"),xar=o("model_type"),kar=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),Rar=o("pretrained_model_name_or_path"),Sar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),Par=o("pretrained_model_name_or_path"),$ar=o(":"),Iar=l(),ge=a("ul"),LT=a("li"),qhe=a("strong"),Nar=o("bert"),Dar=o(" \u2014 "),IG=a("a"),jar=o("TFBertLMHeadModel"),qar=o(" (BERT model)"),Gar=l(),BT=a("li"),Ghe=a("strong"),Oar=o("camembert"),Xar=o(" \u2014 "),NG=a("a"),Var=o("TFCamembertForCausalLM"),zar=o(" (CamemBERT model)"),War=l(),xT=a("li"),Ohe=a("strong"),Qar=o("ctrl"),Har=o(" \u2014 "),DG=a("a"),Uar=o("TFCTRLLMHeadModel"),Jar=o(" (CTRL model)"),Yar=l(),kT=a("li"),Xhe=a("strong"),Kar=o("gpt2"),Zar=o(" \u2014 "),jG=a("a"),enr=o("TFGPT2LMHeadModel"),onr=o(" (OpenAI GPT-2 model)"),rnr=l(),RT=a("li"),Vhe=a("strong"),tnr=o("openai-gpt"),anr=o(" \u2014 "),qG=a("a"),nnr=o("TFOpenAIGPTLMHeadModel"),snr=o(" (OpenAI GPT model)"),lnr=l(),ST=a("li"),zhe=a("strong"),inr=o("rembert"),dnr=o(" \u2014 "),GG=a("a"),cnr=o("TFRemBertForCausalLM"),fnr=o(" (RemBERT model)"),mnr=l(),PT=a("li"),Whe=a("strong"),gnr=o("roberta"),hnr=o(" \u2014 "),OG=a("a"),pnr=o("TFRobertaForCausalLM"),_nr=o(" (RoBERTa model)"),unr=l(),$T=a("li"),Qhe=a("strong"),bnr=o("roformer"),vnr=o(" \u2014 "),XG=a("a"),Tnr=o("TFRoFormerForCausalLM"),Fnr=o(" (RoFormer model)"),Cnr=l(),IT=a("li"),Hhe=a("strong"),Mnr=o("transfo-xl"),Enr=o(" \u2014 "),VG=a("a"),ynr=o("TFTransfoXLLMHeadModel"),wnr=o(" (Transformer-XL model)"),Anr=l(),NT=a("li"),Uhe=a("strong"),Lnr=o("xlm"),Bnr=o(" \u2014 "),zG=a("a"),xnr=o("TFXLMWithLMHeadModel"),knr=o(" (XLM model)"),Rnr=l(),DT=a("li"),Jhe=a("strong"),Snr=o("xlnet"),Pnr=o(" \u2014 "),WG=a("a"),$nr=o("TFXLNetLMHeadModel"),Inr=o(" (XLNet model)"),Nnr=l(),Yhe=a("p"),Dnr=o("Examples:"),jnr=l(),f(lA.$$.fragment),_Re=l(),Mc=a("h2"),jT=a("a"),Khe=a("span"),f(iA.$$.fragment),qnr=l(),Zhe=a("span"),Gnr=o("TFAutoModelForImageClassification"),uRe=l(),Cr=a("div"),f(dA.$$.fragment),Onr=l(),Ec=a("p"),Xnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),epe=a("code"),Vnr=o("from_pretrained()"),znr=o("class method or the "),ope=a("code"),Wnr=o("from_config()"),Qnr=o(`class
method.`),Hnr=l(),cA=a("p"),Unr=o("This class cannot be instantiated directly using "),rpe=a("code"),Jnr=o("__init__()"),Ynr=o(" (throws an error)."),Knr=l(),_t=a("div"),f(fA.$$.fragment),Znr=l(),tpe=a("p"),esr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),osr=l(),yc=a("p"),rsr=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),tsr=o("not"),asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=a("code"),nsr=o("from_pretrained()"),ssr=o("to load the model weights."),lsr=l(),spe=a("p"),isr=o("Examples:"),dsr=l(),f(mA.$$.fragment),csr=l(),uo=a("div"),f(gA.$$.fragment),fsr=l(),lpe=a("p"),msr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gsr=l(),vn=a("p"),hsr=o("The model class to instantiate is selected based on the "),ipe=a("code"),psr=o("model_type"),_sr=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),usr=o("pretrained_model_name_or_path"),bsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),vsr=o("pretrained_model_name_or_path"),Tsr=o(":"),Fsr=l(),hA=a("ul"),qT=a("li"),fpe=a("strong"),Csr=o("convnext"),Msr=o(" \u2014 "),QG=a("a"),Esr=o("TFConvNextForImageClassification"),ysr=o(" (ConvNext model)"),wsr=l(),GT=a("li"),mpe=a("strong"),Asr=o("vit"),Lsr=o(" \u2014 "),HG=a("a"),Bsr=o("TFViTForImageClassification"),xsr=o(" (ViT model)"),ksr=l(),gpe=a("p"),Rsr=o("Examples:"),Ssr=l(),f(pA.$$.fragment),bRe=l(),wc=a("h2"),OT=a("a"),hpe=a("span"),f(_A.$$.fragment),Psr=l(),ppe=a("span"),$sr=o("TFAutoModelForMaskedLM"),vRe=l(),Mr=a("div"),f(uA.$$.fragment),Isr=l(),Ac=a("p"),Nsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_pe=a("code"),Dsr=o("from_pretrained()"),jsr=o("class method or the "),upe=a("code"),qsr=o("from_config()"),Gsr=o(`class
method.`),Osr=l(),bA=a("p"),Xsr=o("This class cannot be instantiated directly using "),bpe=a("code"),Vsr=o("__init__()"),zsr=o(" (throws an error)."),Wsr=l(),ut=a("div"),f(vA.$$.fragment),Qsr=l(),vpe=a("p"),Hsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Usr=l(),Lc=a("p"),Jsr=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),Ysr=o("not"),Ksr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=a("code"),Zsr=o("from_pretrained()"),elr=o("to load the model weights."),olr=l(),Cpe=a("p"),rlr=o("Examples:"),tlr=l(),f(TA.$$.fragment),alr=l(),bo=a("div"),f(FA.$$.fragment),nlr=l(),Mpe=a("p"),slr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),llr=l(),Tn=a("p"),ilr=o("The model class to instantiate is selected based on the "),Epe=a("code"),dlr=o("model_type"),clr=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),flr=o("pretrained_model_name_or_path"),mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(":"),plr=l(),Y=a("ul"),XT=a("li"),Ape=a("strong"),_lr=o("albert"),ulr=o(" \u2014 "),UG=a("a"),blr=o("TFAlbertForMaskedLM"),vlr=o(" (ALBERT model)"),Tlr=l(),VT=a("li"),Lpe=a("strong"),Flr=o("bert"),Clr=o(" \u2014 "),JG=a("a"),Mlr=o("TFBertForMaskedLM"),Elr=o(" (BERT model)"),ylr=l(),zT=a("li"),Bpe=a("strong"),wlr=o("camembert"),Alr=o(" \u2014 "),YG=a("a"),Llr=o("TFCamembertForMaskedLM"),Blr=o(" (CamemBERT model)"),xlr=l(),WT=a("li"),xpe=a("strong"),klr=o("convbert"),Rlr=o(" \u2014 "),KG=a("a"),Slr=o("TFConvBertForMaskedLM"),Plr=o(" (ConvBERT model)"),$lr=l(),QT=a("li"),kpe=a("strong"),Ilr=o("deberta"),Nlr=o(" \u2014 "),ZG=a("a"),Dlr=o("TFDebertaForMaskedLM"),jlr=o(" (DeBERTa model)"),qlr=l(),HT=a("li"),Rpe=a("strong"),Glr=o("deberta-v2"),Olr=o(" \u2014 "),eO=a("a"),Xlr=o("TFDebertaV2ForMaskedLM"),Vlr=o(" (DeBERTa-v2 model)"),zlr=l(),UT=a("li"),Spe=a("strong"),Wlr=o("distilbert"),Qlr=o(" \u2014 "),oO=a("a"),Hlr=o("TFDistilBertForMaskedLM"),Ulr=o(" (DistilBERT model)"),Jlr=l(),JT=a("li"),Ppe=a("strong"),Ylr=o("electra"),Klr=o(" \u2014 "),rO=a("a"),Zlr=o("TFElectraForMaskedLM"),eir=o(" (ELECTRA model)"),oir=l(),YT=a("li"),$pe=a("strong"),rir=o("flaubert"),tir=o(" \u2014 "),tO=a("a"),air=o("TFFlaubertWithLMHeadModel"),nir=o(" (FlauBERT model)"),sir=l(),KT=a("li"),Ipe=a("strong"),lir=o("funnel"),iir=o(" \u2014 "),aO=a("a"),dir=o("TFFunnelForMaskedLM"),cir=o(" (Funnel Transformer model)"),fir=l(),ZT=a("li"),Npe=a("strong"),mir=o("layoutlm"),gir=o(" \u2014 "),nO=a("a"),hir=o("TFLayoutLMForMaskedLM"),pir=o(" (LayoutLM model)"),_ir=l(),eF=a("li"),Dpe=a("strong"),uir=o("longformer"),bir=o(" \u2014 "),sO=a("a"),vir=o("TFLongformerForMaskedLM"),Tir=o(" (Longformer model)"),Fir=l(),oF=a("li"),jpe=a("strong"),Cir=o("mobilebert"),Mir=o(" \u2014 "),lO=a("a"),Eir=o("TFMobileBertForMaskedLM"),yir=o(" (MobileBERT model)"),wir=l(),rF=a("li"),qpe=a("strong"),Air=o("mpnet"),Lir=o(" \u2014 "),iO=a("a"),Bir=o("TFMPNetForMaskedLM"),xir=o(" (MPNet model)"),kir=l(),tF=a("li"),Gpe=a("strong"),Rir=o("rembert"),Sir=o(" \u2014 "),dO=a("a"),Pir=o("TFRemBertForMaskedLM"),$ir=o(" (RemBERT model)"),Iir=l(),aF=a("li"),Ope=a("strong"),Nir=o("roberta"),Dir=o(" \u2014 "),cO=a("a"),jir=o("TFRobertaForMaskedLM"),qir=o(" (RoBERTa model)"),Gir=l(),nF=a("li"),Xpe=a("strong"),Oir=o("roformer"),Xir=o(" \u2014 "),fO=a("a"),Vir=o("TFRoFormerForMaskedLM"),zir=o(" (RoFormer model)"),Wir=l(),sF=a("li"),Vpe=a("strong"),Qir=o("tapas"),Hir=o(" \u2014 "),mO=a("a"),Uir=o("TFTapasForMaskedLM"),Jir=o(" (TAPAS model)"),Yir=l(),lF=a("li"),zpe=a("strong"),Kir=o("xlm"),Zir=o(" \u2014 "),gO=a("a"),edr=o("TFXLMWithLMHeadModel"),odr=o(" (XLM model)"),rdr=l(),iF=a("li"),Wpe=a("strong"),tdr=o("xlm-roberta"),adr=o(" \u2014 "),hO=a("a"),ndr=o("TFXLMRobertaForMaskedLM"),sdr=o(" (XLM-RoBERTa model)"),ldr=l(),Qpe=a("p"),idr=o("Examples:"),ddr=l(),f(CA.$$.fragment),TRe=l(),Bc=a("h2"),dF=a("a"),Hpe=a("span"),f(MA.$$.fragment),cdr=l(),Upe=a("span"),fdr=o("TFAutoModelForSeq2SeqLM"),FRe=l(),Er=a("div"),f(EA.$$.fragment),mdr=l(),xc=a("p"),gdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Jpe=a("code"),hdr=o("from_pretrained()"),pdr=o("class method or the "),Ype=a("code"),_dr=o("from_config()"),udr=o(`class
method.`),bdr=l(),yA=a("p"),vdr=o("This class cannot be instantiated directly using "),Kpe=a("code"),Tdr=o("__init__()"),Fdr=o(" (throws an error)."),Cdr=l(),bt=a("div"),f(wA.$$.fragment),Mdr=l(),Zpe=a("p"),Edr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ydr=l(),kc=a("p"),wdr=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),Adr=o("not"),Ldr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o_e=a("code"),Bdr=o("from_pretrained()"),xdr=o("to load the model weights."),kdr=l(),r_e=a("p"),Rdr=o("Examples:"),Sdr=l(),f(AA.$$.fragment),Pdr=l(),vo=a("div"),f(LA.$$.fragment),$dr=l(),t_e=a("p"),Idr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ndr=l(),Fn=a("p"),Ddr=o("The model class to instantiate is selected based on the "),a_e=a("code"),jdr=o("model_type"),qdr=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),Gdr=o("pretrained_model_name_or_path"),Odr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),Xdr=o("pretrained_model_name_or_path"),Vdr=o(":"),zdr=l(),ue=a("ul"),cF=a("li"),l_e=a("strong"),Wdr=o("bart"),Qdr=o(" \u2014 "),pO=a("a"),Hdr=o("TFBartForConditionalGeneration"),Udr=o(" (BART model)"),Jdr=l(),fF=a("li"),i_e=a("strong"),Ydr=o("blenderbot"),Kdr=o(" \u2014 "),_O=a("a"),Zdr=o("TFBlenderbotForConditionalGeneration"),ecr=o(" (Blenderbot model)"),ocr=l(),mF=a("li"),d_e=a("strong"),rcr=o("blenderbot-small"),tcr=o(" \u2014 "),uO=a("a"),acr=o("TFBlenderbotSmallForConditionalGeneration"),ncr=o(" (BlenderbotSmall model)"),scr=l(),gF=a("li"),c_e=a("strong"),lcr=o("encoder-decoder"),icr=o(" \u2014 "),bO=a("a"),dcr=o("TFEncoderDecoderModel"),ccr=o(" (Encoder decoder model)"),fcr=l(),hF=a("li"),f_e=a("strong"),mcr=o("led"),gcr=o(" \u2014 "),vO=a("a"),hcr=o("TFLEDForConditionalGeneration"),pcr=o(" (LED model)"),_cr=l(),pF=a("li"),m_e=a("strong"),ucr=o("marian"),bcr=o(" \u2014 "),TO=a("a"),vcr=o("TFMarianMTModel"),Tcr=o(" (Marian model)"),Fcr=l(),_F=a("li"),g_e=a("strong"),Ccr=o("mbart"),Mcr=o(" \u2014 "),FO=a("a"),Ecr=o("TFMBartForConditionalGeneration"),ycr=o(" (mBART model)"),wcr=l(),uF=a("li"),h_e=a("strong"),Acr=o("mt5"),Lcr=o(" \u2014 "),CO=a("a"),Bcr=o("TFMT5ForConditionalGeneration"),xcr=o(" (mT5 model)"),kcr=l(),bF=a("li"),p_e=a("strong"),Rcr=o("pegasus"),Scr=o(" \u2014 "),MO=a("a"),Pcr=o("TFPegasusForConditionalGeneration"),$cr=o(" (Pegasus model)"),Icr=l(),vF=a("li"),__e=a("strong"),Ncr=o("t5"),Dcr=o(" \u2014 "),EO=a("a"),jcr=o("TFT5ForConditionalGeneration"),qcr=o(" (T5 model)"),Gcr=l(),u_e=a("p"),Ocr=o("Examples:"),Xcr=l(),f(BA.$$.fragment),CRe=l(),Rc=a("h2"),TF=a("a"),b_e=a("span"),f(xA.$$.fragment),Vcr=l(),v_e=a("span"),zcr=o("TFAutoModelForSequenceClassification"),MRe=l(),yr=a("div"),f(kA.$$.fragment),Wcr=l(),Sc=a("p"),Qcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T_e=a("code"),Hcr=o("from_pretrained()"),Ucr=o("class method or the "),F_e=a("code"),Jcr=o("from_config()"),Ycr=o(`class
method.`),Kcr=l(),RA=a("p"),Zcr=o("This class cannot be instantiated directly using "),C_e=a("code"),efr=o("__init__()"),ofr=o(" (throws an error)."),rfr=l(),vt=a("div"),f(SA.$$.fragment),tfr=l(),M_e=a("p"),afr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nfr=l(),Pc=a("p"),sfr=o(`Note:
Loading a model from its configuration file does `),E_e=a("strong"),lfr=o("not"),ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y_e=a("code"),dfr=o("from_pretrained()"),cfr=o("to load the model weights."),ffr=l(),w_e=a("p"),mfr=o("Examples:"),gfr=l(),f(PA.$$.fragment),hfr=l(),To=a("div"),f($A.$$.fragment),pfr=l(),A_e=a("p"),_fr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ufr=l(),Cn=a("p"),bfr=o("The model class to instantiate is selected based on the "),L_e=a("code"),vfr=o("model_type"),Tfr=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),Ffr=o("pretrained_model_name_or_path"),Cfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(":"),yfr=l(),V=a("ul"),FF=a("li"),k_e=a("strong"),wfr=o("albert"),Afr=o(" \u2014 "),yO=a("a"),Lfr=o("TFAlbertForSequenceClassification"),Bfr=o(" (ALBERT model)"),xfr=l(),CF=a("li"),R_e=a("strong"),kfr=o("bert"),Rfr=o(" \u2014 "),wO=a("a"),Sfr=o("TFBertForSequenceClassification"),Pfr=o(" (BERT model)"),$fr=l(),MF=a("li"),S_e=a("strong"),Ifr=o("camembert"),Nfr=o(" \u2014 "),AO=a("a"),Dfr=o("TFCamembertForSequenceClassification"),jfr=o(" (CamemBERT model)"),qfr=l(),EF=a("li"),P_e=a("strong"),Gfr=o("convbert"),Ofr=o(" \u2014 "),LO=a("a"),Xfr=o("TFConvBertForSequenceClassification"),Vfr=o(" (ConvBERT model)"),zfr=l(),yF=a("li"),$_e=a("strong"),Wfr=o("ctrl"),Qfr=o(" \u2014 "),BO=a("a"),Hfr=o("TFCTRLForSequenceClassification"),Ufr=o(" (CTRL model)"),Jfr=l(),wF=a("li"),I_e=a("strong"),Yfr=o("deberta"),Kfr=o(" \u2014 "),xO=a("a"),Zfr=o("TFDebertaForSequenceClassification"),emr=o(" (DeBERTa model)"),omr=l(),AF=a("li"),N_e=a("strong"),rmr=o("deberta-v2"),tmr=o(" \u2014 "),kO=a("a"),amr=o("TFDebertaV2ForSequenceClassification"),nmr=o(" (DeBERTa-v2 model)"),smr=l(),LF=a("li"),D_e=a("strong"),lmr=o("distilbert"),imr=o(" \u2014 "),RO=a("a"),dmr=o("TFDistilBertForSequenceClassification"),cmr=o(" (DistilBERT model)"),fmr=l(),BF=a("li"),j_e=a("strong"),mmr=o("electra"),gmr=o(" \u2014 "),SO=a("a"),hmr=o("TFElectraForSequenceClassification"),pmr=o(" (ELECTRA model)"),_mr=l(),xF=a("li"),q_e=a("strong"),umr=o("flaubert"),bmr=o(" \u2014 "),PO=a("a"),vmr=o("TFFlaubertForSequenceClassification"),Tmr=o(" (FlauBERT model)"),Fmr=l(),kF=a("li"),G_e=a("strong"),Cmr=o("funnel"),Mmr=o(" \u2014 "),$O=a("a"),Emr=o("TFFunnelForSequenceClassification"),ymr=o(" (Funnel Transformer model)"),wmr=l(),RF=a("li"),O_e=a("strong"),Amr=o("gpt2"),Lmr=o(" \u2014 "),IO=a("a"),Bmr=o("TFGPT2ForSequenceClassification"),xmr=o(" (OpenAI GPT-2 model)"),kmr=l(),SF=a("li"),X_e=a("strong"),Rmr=o("layoutlm"),Smr=o(" \u2014 "),NO=a("a"),Pmr=o("TFLayoutLMForSequenceClassification"),$mr=o(" (LayoutLM model)"),Imr=l(),PF=a("li"),V_e=a("strong"),Nmr=o("longformer"),Dmr=o(" \u2014 "),DO=a("a"),jmr=o("TFLongformerForSequenceClassification"),qmr=o(" (Longformer model)"),Gmr=l(),$F=a("li"),z_e=a("strong"),Omr=o("mobilebert"),Xmr=o(" \u2014 "),jO=a("a"),Vmr=o("TFMobileBertForSequenceClassification"),zmr=o(" (MobileBERT model)"),Wmr=l(),IF=a("li"),W_e=a("strong"),Qmr=o("mpnet"),Hmr=o(" \u2014 "),qO=a("a"),Umr=o("TFMPNetForSequenceClassification"),Jmr=o(" (MPNet model)"),Ymr=l(),NF=a("li"),Q_e=a("strong"),Kmr=o("openai-gpt"),Zmr=o(" \u2014 "),GO=a("a"),egr=o("TFOpenAIGPTForSequenceClassification"),ogr=o(" (OpenAI GPT model)"),rgr=l(),DF=a("li"),H_e=a("strong"),tgr=o("rembert"),agr=o(" \u2014 "),OO=a("a"),ngr=o("TFRemBertForSequenceClassification"),sgr=o(" (RemBERT model)"),lgr=l(),jF=a("li"),U_e=a("strong"),igr=o("roberta"),dgr=o(" \u2014 "),XO=a("a"),cgr=o("TFRobertaForSequenceClassification"),fgr=o(" (RoBERTa model)"),mgr=l(),qF=a("li"),J_e=a("strong"),ggr=o("roformer"),hgr=o(" \u2014 "),VO=a("a"),pgr=o("TFRoFormerForSequenceClassification"),_gr=o(" (RoFormer model)"),ugr=l(),GF=a("li"),Y_e=a("strong"),bgr=o("tapas"),vgr=o(" \u2014 "),zO=a("a"),Tgr=o("TFTapasForSequenceClassification"),Fgr=o(" (TAPAS model)"),Cgr=l(),OF=a("li"),K_e=a("strong"),Mgr=o("transfo-xl"),Egr=o(" \u2014 "),WO=a("a"),ygr=o("TFTransfoXLForSequenceClassification"),wgr=o(" (Transformer-XL model)"),Agr=l(),XF=a("li"),Z_e=a("strong"),Lgr=o("xlm"),Bgr=o(" \u2014 "),QO=a("a"),xgr=o("TFXLMForSequenceClassification"),kgr=o(" (XLM model)"),Rgr=l(),VF=a("li"),eue=a("strong"),Sgr=o("xlm-roberta"),Pgr=o(" \u2014 "),HO=a("a"),$gr=o("TFXLMRobertaForSequenceClassification"),Igr=o(" (XLM-RoBERTa model)"),Ngr=l(),zF=a("li"),oue=a("strong"),Dgr=o("xlnet"),jgr=o(" \u2014 "),UO=a("a"),qgr=o("TFXLNetForSequenceClassification"),Ggr=o(" (XLNet model)"),Ogr=l(),rue=a("p"),Xgr=o("Examples:"),Vgr=l(),f(IA.$$.fragment),ERe=l(),$c=a("h2"),WF=a("a"),tue=a("span"),f(NA.$$.fragment),zgr=l(),aue=a("span"),Wgr=o("TFAutoModelForMultipleChoice"),yRe=l(),wr=a("div"),f(DA.$$.fragment),Qgr=l(),Ic=a("p"),Hgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nue=a("code"),Ugr=o("from_pretrained()"),Jgr=o("class method or the "),sue=a("code"),Ygr=o("from_config()"),Kgr=o(`class
method.`),Zgr=l(),jA=a("p"),ehr=o("This class cannot be instantiated directly using "),lue=a("code"),ohr=o("__init__()"),rhr=o(" (throws an error)."),thr=l(),Tt=a("div"),f(qA.$$.fragment),ahr=l(),iue=a("p"),nhr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),shr=l(),Nc=a("p"),lhr=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),ihr=o("not"),dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=a("code"),chr=o("from_pretrained()"),fhr=o("to load the model weights."),mhr=l(),fue=a("p"),ghr=o("Examples:"),hhr=l(),f(GA.$$.fragment),phr=l(),Fo=a("div"),f(OA.$$.fragment),_hr=l(),mue=a("p"),uhr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bhr=l(),Mn=a("p"),vhr=o("The model class to instantiate is selected based on the "),gue=a("code"),Thr=o("model_type"),Fhr=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),Chr=o("pretrained_model_name_or_path"),Mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),Ehr=o("pretrained_model_name_or_path"),yhr=o(":"),whr=l(),ae=a("ul"),QF=a("li"),_ue=a("strong"),Ahr=o("albert"),Lhr=o(" \u2014 "),JO=a("a"),Bhr=o("TFAlbertForMultipleChoice"),xhr=o(" (ALBERT model)"),khr=l(),HF=a("li"),uue=a("strong"),Rhr=o("bert"),Shr=o(" \u2014 "),YO=a("a"),Phr=o("TFBertForMultipleChoice"),$hr=o(" (BERT model)"),Ihr=l(),UF=a("li"),bue=a("strong"),Nhr=o("camembert"),Dhr=o(" \u2014 "),KO=a("a"),jhr=o("TFCamembertForMultipleChoice"),qhr=o(" (CamemBERT model)"),Ghr=l(),JF=a("li"),vue=a("strong"),Ohr=o("convbert"),Xhr=o(" \u2014 "),ZO=a("a"),Vhr=o("TFConvBertForMultipleChoice"),zhr=o(" (ConvBERT model)"),Whr=l(),YF=a("li"),Tue=a("strong"),Qhr=o("distilbert"),Hhr=o(" \u2014 "),eX=a("a"),Uhr=o("TFDistilBertForMultipleChoice"),Jhr=o(" (DistilBERT model)"),Yhr=l(),KF=a("li"),Fue=a("strong"),Khr=o("electra"),Zhr=o(" \u2014 "),oX=a("a"),epr=o("TFElectraForMultipleChoice"),opr=o(" (ELECTRA model)"),rpr=l(),ZF=a("li"),Cue=a("strong"),tpr=o("flaubert"),apr=o(" \u2014 "),rX=a("a"),npr=o("TFFlaubertForMultipleChoice"),spr=o(" (FlauBERT model)"),lpr=l(),eC=a("li"),Mue=a("strong"),ipr=o("funnel"),dpr=o(" \u2014 "),tX=a("a"),cpr=o("TFFunnelForMultipleChoice"),fpr=o(" (Funnel Transformer model)"),mpr=l(),oC=a("li"),Eue=a("strong"),gpr=o("longformer"),hpr=o(" \u2014 "),aX=a("a"),ppr=o("TFLongformerForMultipleChoice"),_pr=o(" (Longformer model)"),upr=l(),rC=a("li"),yue=a("strong"),bpr=o("mobilebert"),vpr=o(" \u2014 "),nX=a("a"),Tpr=o("TFMobileBertForMultipleChoice"),Fpr=o(" (MobileBERT model)"),Cpr=l(),tC=a("li"),wue=a("strong"),Mpr=o("mpnet"),Epr=o(" \u2014 "),sX=a("a"),ypr=o("TFMPNetForMultipleChoice"),wpr=o(" (MPNet model)"),Apr=l(),aC=a("li"),Aue=a("strong"),Lpr=o("rembert"),Bpr=o(" \u2014 "),lX=a("a"),xpr=o("TFRemBertForMultipleChoice"),kpr=o(" (RemBERT model)"),Rpr=l(),nC=a("li"),Lue=a("strong"),Spr=o("roberta"),Ppr=o(" \u2014 "),iX=a("a"),$pr=o("TFRobertaForMultipleChoice"),Ipr=o(" (RoBERTa model)"),Npr=l(),sC=a("li"),Bue=a("strong"),Dpr=o("roformer"),jpr=o(" \u2014 "),dX=a("a"),qpr=o("TFRoFormerForMultipleChoice"),Gpr=o(" (RoFormer model)"),Opr=l(),lC=a("li"),xue=a("strong"),Xpr=o("xlm"),Vpr=o(" \u2014 "),cX=a("a"),zpr=o("TFXLMForMultipleChoice"),Wpr=o(" (XLM model)"),Qpr=l(),iC=a("li"),kue=a("strong"),Hpr=o("xlm-roberta"),Upr=o(" \u2014 "),fX=a("a"),Jpr=o("TFXLMRobertaForMultipleChoice"),Ypr=o(" (XLM-RoBERTa model)"),Kpr=l(),dC=a("li"),Rue=a("strong"),Zpr=o("xlnet"),e_r=o(" \u2014 "),mX=a("a"),o_r=o("TFXLNetForMultipleChoice"),r_r=o(" (XLNet model)"),t_r=l(),Sue=a("p"),a_r=o("Examples:"),n_r=l(),f(XA.$$.fragment),wRe=l(),Dc=a("h2"),cC=a("a"),Pue=a("span"),f(VA.$$.fragment),s_r=l(),$ue=a("span"),l_r=o("TFAutoModelForTableQuestionAnswering"),ARe=l(),Ar=a("div"),f(zA.$$.fragment),i_r=l(),jc=a("p"),d_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Iue=a("code"),c_r=o("from_pretrained()"),f_r=o("class method or the "),Nue=a("code"),m_r=o("from_config()"),g_r=o(`class
method.`),h_r=l(),WA=a("p"),p_r=o("This class cannot be instantiated directly using "),Due=a("code"),__r=o("__init__()"),u_r=o(" (throws an error)."),b_r=l(),Ft=a("div"),f(QA.$$.fragment),v_r=l(),jue=a("p"),T_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F_r=l(),qc=a("p"),C_r=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),M_r=o("not"),E_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gue=a("code"),y_r=o("from_pretrained()"),w_r=o("to load the model weights."),A_r=l(),Oue=a("p"),L_r=o("Examples:"),B_r=l(),f(HA.$$.fragment),x_r=l(),Co=a("div"),f(UA.$$.fragment),k_r=l(),Xue=a("p"),R_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S_r=l(),En=a("p"),P_r=o("The model class to instantiate is selected based on the "),Vue=a("code"),$_r=o("model_type"),I_r=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),N_r=o("pretrained_model_name_or_path"),D_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),j_r=o("pretrained_model_name_or_path"),q_r=o(":"),G_r=l(),Que=a("ul"),fC=a("li"),Hue=a("strong"),O_r=o("tapas"),X_r=o(" \u2014 "),gX=a("a"),V_r=o("TFTapasForQuestionAnswering"),z_r=o(" (TAPAS model)"),W_r=l(),Uue=a("p"),Q_r=o("Examples:"),H_r=l(),f(JA.$$.fragment),LRe=l(),Gc=a("h2"),mC=a("a"),Jue=a("span"),f(YA.$$.fragment),U_r=l(),Yue=a("span"),J_r=o("TFAutoModelForTokenClassification"),BRe=l(),Lr=a("div"),f(KA.$$.fragment),Y_r=l(),Oc=a("p"),K_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Kue=a("code"),Z_r=o("from_pretrained()"),eur=o("class method or the "),Zue=a("code"),our=o("from_config()"),rur=o(`class
method.`),tur=l(),ZA=a("p"),aur=o("This class cannot be instantiated directly using "),e1e=a("code"),nur=o("__init__()"),sur=o(" (throws an error)."),lur=l(),Ct=a("div"),f(e0.$$.fragment),iur=l(),o1e=a("p"),dur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cur=l(),Xc=a("p"),fur=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),mur=o("not"),gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),t1e=a("code"),hur=o("from_pretrained()"),pur=o("to load the model weights."),_ur=l(),a1e=a("p"),uur=o("Examples:"),bur=l(),f(o0.$$.fragment),vur=l(),Mo=a("div"),f(r0.$$.fragment),Tur=l(),n1e=a("p"),Fur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cur=l(),yn=a("p"),Mur=o("The model class to instantiate is selected based on the "),s1e=a("code"),Eur=o("model_type"),yur=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),wur=o("pretrained_model_name_or_path"),Aur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),Lur=o("pretrained_model_name_or_path"),Bur=o(":"),xur=l(),K=a("ul"),gC=a("li"),d1e=a("strong"),kur=o("albert"),Rur=o(" \u2014 "),hX=a("a"),Sur=o("TFAlbertForTokenClassification"),Pur=o(" (ALBERT model)"),$ur=l(),hC=a("li"),c1e=a("strong"),Iur=o("bert"),Nur=o(" \u2014 "),pX=a("a"),Dur=o("TFBertForTokenClassification"),jur=o(" (BERT model)"),qur=l(),pC=a("li"),f1e=a("strong"),Gur=o("camembert"),Our=o(" \u2014 "),_X=a("a"),Xur=o("TFCamembertForTokenClassification"),Vur=o(" (CamemBERT model)"),zur=l(),_C=a("li"),m1e=a("strong"),Wur=o("convbert"),Qur=o(" \u2014 "),uX=a("a"),Hur=o("TFConvBertForTokenClassification"),Uur=o(" (ConvBERT model)"),Jur=l(),uC=a("li"),g1e=a("strong"),Yur=o("deberta"),Kur=o(" \u2014 "),bX=a("a"),Zur=o("TFDebertaForTokenClassification"),e1r=o(" (DeBERTa model)"),o1r=l(),bC=a("li"),h1e=a("strong"),r1r=o("deberta-v2"),t1r=o(" \u2014 "),vX=a("a"),a1r=o("TFDebertaV2ForTokenClassification"),n1r=o(" (DeBERTa-v2 model)"),s1r=l(),vC=a("li"),p1e=a("strong"),l1r=o("distilbert"),i1r=o(" \u2014 "),TX=a("a"),d1r=o("TFDistilBertForTokenClassification"),c1r=o(" (DistilBERT model)"),f1r=l(),TC=a("li"),_1e=a("strong"),m1r=o("electra"),g1r=o(" \u2014 "),FX=a("a"),h1r=o("TFElectraForTokenClassification"),p1r=o(" (ELECTRA model)"),_1r=l(),FC=a("li"),u1e=a("strong"),u1r=o("flaubert"),b1r=o(" \u2014 "),CX=a("a"),v1r=o("TFFlaubertForTokenClassification"),T1r=o(" (FlauBERT model)"),F1r=l(),CC=a("li"),b1e=a("strong"),C1r=o("funnel"),M1r=o(" \u2014 "),MX=a("a"),E1r=o("TFFunnelForTokenClassification"),y1r=o(" (Funnel Transformer model)"),w1r=l(),MC=a("li"),v1e=a("strong"),A1r=o("layoutlm"),L1r=o(" \u2014 "),EX=a("a"),B1r=o("TFLayoutLMForTokenClassification"),x1r=o(" (LayoutLM model)"),k1r=l(),EC=a("li"),T1e=a("strong"),R1r=o("longformer"),S1r=o(" \u2014 "),yX=a("a"),P1r=o("TFLongformerForTokenClassification"),$1r=o(" (Longformer model)"),I1r=l(),yC=a("li"),F1e=a("strong"),N1r=o("mobilebert"),D1r=o(" \u2014 "),wX=a("a"),j1r=o("TFMobileBertForTokenClassification"),q1r=o(" (MobileBERT model)"),G1r=l(),wC=a("li"),C1e=a("strong"),O1r=o("mpnet"),X1r=o(" \u2014 "),AX=a("a"),V1r=o("TFMPNetForTokenClassification"),z1r=o(" (MPNet model)"),W1r=l(),AC=a("li"),M1e=a("strong"),Q1r=o("rembert"),H1r=o(" \u2014 "),LX=a("a"),U1r=o("TFRemBertForTokenClassification"),J1r=o(" (RemBERT model)"),Y1r=l(),LC=a("li"),E1e=a("strong"),K1r=o("roberta"),Z1r=o(" \u2014 "),BX=a("a"),e9r=o("TFRobertaForTokenClassification"),o9r=o(" (RoBERTa model)"),r9r=l(),BC=a("li"),y1e=a("strong"),t9r=o("roformer"),a9r=o(" \u2014 "),xX=a("a"),n9r=o("TFRoFormerForTokenClassification"),s9r=o(" (RoFormer model)"),l9r=l(),xC=a("li"),w1e=a("strong"),i9r=o("xlm"),d9r=o(" \u2014 "),kX=a("a"),c9r=o("TFXLMForTokenClassification"),f9r=o(" (XLM model)"),m9r=l(),kC=a("li"),A1e=a("strong"),g9r=o("xlm-roberta"),h9r=o(" \u2014 "),RX=a("a"),p9r=o("TFXLMRobertaForTokenClassification"),_9r=o(" (XLM-RoBERTa model)"),u9r=l(),RC=a("li"),L1e=a("strong"),b9r=o("xlnet"),v9r=o(" \u2014 "),SX=a("a"),T9r=o("TFXLNetForTokenClassification"),F9r=o(" (XLNet model)"),C9r=l(),B1e=a("p"),M9r=o("Examples:"),E9r=l(),f(t0.$$.fragment),xRe=l(),Vc=a("h2"),SC=a("a"),x1e=a("span"),f(a0.$$.fragment),y9r=l(),k1e=a("span"),w9r=o("TFAutoModelForQuestionAnswering"),kRe=l(),Br=a("div"),f(n0.$$.fragment),A9r=l(),zc=a("p"),L9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),R1e=a("code"),B9r=o("from_pretrained()"),x9r=o("class method or the "),S1e=a("code"),k9r=o("from_config()"),R9r=o(`class
method.`),S9r=l(),s0=a("p"),P9r=o("This class cannot be instantiated directly using "),P1e=a("code"),$9r=o("__init__()"),I9r=o(" (throws an error)."),N9r=l(),Mt=a("div"),f(l0.$$.fragment),D9r=l(),$1e=a("p"),j9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q9r=l(),Wc=a("p"),G9r=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),O9r=o("not"),X9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N1e=a("code"),V9r=o("from_pretrained()"),z9r=o("to load the model weights."),W9r=l(),D1e=a("p"),Q9r=o("Examples:"),H9r=l(),f(i0.$$.fragment),U9r=l(),Eo=a("div"),f(d0.$$.fragment),J9r=l(),j1e=a("p"),Y9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),K9r=l(),wn=a("p"),Z9r=o("The model class to instantiate is selected based on the "),q1e=a("code"),ebr=o("model_type"),obr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),rbr=o("pretrained_model_name_or_path"),tbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),abr=o("pretrained_model_name_or_path"),nbr=o(":"),sbr=l(),Z=a("ul"),PC=a("li"),X1e=a("strong"),lbr=o("albert"),ibr=o(" \u2014 "),PX=a("a"),dbr=o("TFAlbertForQuestionAnswering"),cbr=o(" (ALBERT model)"),fbr=l(),$C=a("li"),V1e=a("strong"),mbr=o("bert"),gbr=o(" \u2014 "),$X=a("a"),hbr=o("TFBertForQuestionAnswering"),pbr=o(" (BERT model)"),_br=l(),IC=a("li"),z1e=a("strong"),ubr=o("camembert"),bbr=o(" \u2014 "),IX=a("a"),vbr=o("TFCamembertForQuestionAnswering"),Tbr=o(" (CamemBERT model)"),Fbr=l(),NC=a("li"),W1e=a("strong"),Cbr=o("convbert"),Mbr=o(" \u2014 "),NX=a("a"),Ebr=o("TFConvBertForQuestionAnswering"),ybr=o(" (ConvBERT model)"),wbr=l(),DC=a("li"),Q1e=a("strong"),Abr=o("deberta"),Lbr=o(" \u2014 "),DX=a("a"),Bbr=o("TFDebertaForQuestionAnswering"),xbr=o(" (DeBERTa model)"),kbr=l(),jC=a("li"),H1e=a("strong"),Rbr=o("deberta-v2"),Sbr=o(" \u2014 "),jX=a("a"),Pbr=o("TFDebertaV2ForQuestionAnswering"),$br=o(" (DeBERTa-v2 model)"),Ibr=l(),qC=a("li"),U1e=a("strong"),Nbr=o("distilbert"),Dbr=o(" \u2014 "),qX=a("a"),jbr=o("TFDistilBertForQuestionAnswering"),qbr=o(" (DistilBERT model)"),Gbr=l(),GC=a("li"),J1e=a("strong"),Obr=o("electra"),Xbr=o(" \u2014 "),GX=a("a"),Vbr=o("TFElectraForQuestionAnswering"),zbr=o(" (ELECTRA model)"),Wbr=l(),OC=a("li"),Y1e=a("strong"),Qbr=o("flaubert"),Hbr=o(" \u2014 "),OX=a("a"),Ubr=o("TFFlaubertForQuestionAnsweringSimple"),Jbr=o(" (FlauBERT model)"),Ybr=l(),XC=a("li"),K1e=a("strong"),Kbr=o("funnel"),Zbr=o(" \u2014 "),XX=a("a"),e5r=o("TFFunnelForQuestionAnswering"),o5r=o(" (Funnel Transformer model)"),r5r=l(),VC=a("li"),Z1e=a("strong"),t5r=o("longformer"),a5r=o(" \u2014 "),VX=a("a"),n5r=o("TFLongformerForQuestionAnswering"),s5r=o(" (Longformer model)"),l5r=l(),zC=a("li"),e9e=a("strong"),i5r=o("mobilebert"),d5r=o(" \u2014 "),zX=a("a"),c5r=o("TFMobileBertForQuestionAnswering"),f5r=o(" (MobileBERT model)"),m5r=l(),WC=a("li"),o9e=a("strong"),g5r=o("mpnet"),h5r=o(" \u2014 "),WX=a("a"),p5r=o("TFMPNetForQuestionAnswering"),_5r=o(" (MPNet model)"),u5r=l(),QC=a("li"),r9e=a("strong"),b5r=o("rembert"),v5r=o(" \u2014 "),QX=a("a"),T5r=o("TFRemBertForQuestionAnswering"),F5r=o(" (RemBERT model)"),C5r=l(),HC=a("li"),t9e=a("strong"),M5r=o("roberta"),E5r=o(" \u2014 "),HX=a("a"),y5r=o("TFRobertaForQuestionAnswering"),w5r=o(" (RoBERTa model)"),A5r=l(),UC=a("li"),a9e=a("strong"),L5r=o("roformer"),B5r=o(" \u2014 "),UX=a("a"),x5r=o("TFRoFormerForQuestionAnswering"),k5r=o(" (RoFormer model)"),R5r=l(),JC=a("li"),n9e=a("strong"),S5r=o("xlm"),P5r=o(" \u2014 "),JX=a("a"),$5r=o("TFXLMForQuestionAnsweringSimple"),I5r=o(" (XLM model)"),N5r=l(),YC=a("li"),s9e=a("strong"),D5r=o("xlm-roberta"),j5r=o(" \u2014 "),YX=a("a"),q5r=o("TFXLMRobertaForQuestionAnswering"),G5r=o(" (XLM-RoBERTa model)"),O5r=l(),KC=a("li"),l9e=a("strong"),X5r=o("xlnet"),V5r=o(" \u2014 "),KX=a("a"),z5r=o("TFXLNetForQuestionAnsweringSimple"),W5r=o(" (XLNet model)"),Q5r=l(),i9e=a("p"),H5r=o("Examples:"),U5r=l(),f(c0.$$.fragment),RRe=l(),Qc=a("h2"),ZC=a("a"),d9e=a("span"),f(f0.$$.fragment),J5r=l(),c9e=a("span"),Y5r=o("TFAutoModelForVision2Seq"),SRe=l(),xr=a("div"),f(m0.$$.fragment),K5r=l(),Hc=a("p"),Z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),f9e=a("code"),e2r=o("from_pretrained()"),o2r=o("class method or the "),m9e=a("code"),r2r=o("from_config()"),t2r=o(`class
method.`),a2r=l(),g0=a("p"),n2r=o("This class cannot be instantiated directly using "),g9e=a("code"),s2r=o("__init__()"),l2r=o(" (throws an error)."),i2r=l(),Et=a("div"),f(h0.$$.fragment),d2r=l(),h9e=a("p"),c2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f2r=l(),Uc=a("p"),m2r=o(`Note:
Loading a model from its configuration file does `),p9e=a("strong"),g2r=o("not"),h2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_9e=a("code"),p2r=o("from_pretrained()"),_2r=o("to load the model weights."),u2r=l(),u9e=a("p"),b2r=o("Examples:"),v2r=l(),f(p0.$$.fragment),T2r=l(),yo=a("div"),f(_0.$$.fragment),F2r=l(),b9e=a("p"),C2r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M2r=l(),An=a("p"),E2r=o("The model class to instantiate is selected based on the "),v9e=a("code"),y2r=o("model_type"),w2r=o(` property of the config object (either
passed as an argument or loaded from `),T9e=a("code"),A2r=o("pretrained_model_name_or_path"),L2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F9e=a("code"),B2r=o("pretrained_model_name_or_path"),x2r=o(":"),k2r=l(),C9e=a("ul"),eM=a("li"),M9e=a("strong"),R2r=o("vision-encoder-decoder"),S2r=o(" \u2014 "),ZX=a("a"),P2r=o("TFVisionEncoderDecoderModel"),$2r=o(" (Vision Encoder decoder model)"),I2r=l(),E9e=a("p"),N2r=o("Examples:"),D2r=l(),f(u0.$$.fragment),PRe=l(),Jc=a("h2"),oM=a("a"),y9e=a("span"),f(b0.$$.fragment),j2r=l(),w9e=a("span"),q2r=o("TFAutoModelForSpeechSeq2Seq"),$Re=l(),kr=a("div"),f(v0.$$.fragment),G2r=l(),Yc=a("p"),O2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),A9e=a("code"),X2r=o("from_pretrained()"),V2r=o("class method or the "),L9e=a("code"),z2r=o("from_config()"),W2r=o(`class
method.`),Q2r=l(),T0=a("p"),H2r=o("This class cannot be instantiated directly using "),B9e=a("code"),U2r=o("__init__()"),J2r=o(" (throws an error)."),Y2r=l(),yt=a("div"),f(F0.$$.fragment),K2r=l(),x9e=a("p"),Z2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),evr=l(),Kc=a("p"),ovr=o(`Note:
Loading a model from its configuration file does `),k9e=a("strong"),rvr=o("not"),tvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R9e=a("code"),avr=o("from_pretrained()"),nvr=o("to load the model weights."),svr=l(),S9e=a("p"),lvr=o("Examples:"),ivr=l(),f(C0.$$.fragment),dvr=l(),wo=a("div"),f(M0.$$.fragment),cvr=l(),P9e=a("p"),fvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mvr=l(),Ln=a("p"),gvr=o("The model class to instantiate is selected based on the "),$9e=a("code"),hvr=o("model_type"),pvr=o(` property of the config object (either
passed as an argument or loaded from `),I9e=a("code"),_vr=o("pretrained_model_name_or_path"),uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N9e=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(":"),Tvr=l(),D9e=a("ul"),rM=a("li"),j9e=a("strong"),Fvr=o("speech_to_text"),Cvr=o(" \u2014 "),eV=a("a"),Mvr=o("TFSpeech2TextForConditionalGeneration"),Evr=o(" (Speech2Text model)"),yvr=l(),q9e=a("p"),wvr=o("Examples:"),Avr=l(),f(E0.$$.fragment),IRe=l(),Zc=a("h2"),tM=a("a"),G9e=a("span"),f(y0.$$.fragment),Lvr=l(),O9e=a("span"),Bvr=o("FlaxAutoModel"),NRe=l(),Rr=a("div"),f(w0.$$.fragment),xvr=l(),ef=a("p"),kvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),X9e=a("code"),Rvr=o("from_pretrained()"),Svr=o("class method or the "),V9e=a("code"),Pvr=o("from_config()"),$vr=o(`class
method.`),Ivr=l(),A0=a("p"),Nvr=o("This class cannot be instantiated directly using "),z9e=a("code"),Dvr=o("__init__()"),jvr=o(" (throws an error)."),qvr=l(),wt=a("div"),f(L0.$$.fragment),Gvr=l(),W9e=a("p"),Ovr=o("Instantiates one of the base model classes of the library from a configuration."),Xvr=l(),of=a("p"),Vvr=o(`Note:
Loading a model from its configuration file does `),Q9e=a("strong"),zvr=o("not"),Wvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H9e=a("code"),Qvr=o("from_pretrained()"),Hvr=o("to load the model weights."),Uvr=l(),U9e=a("p"),Jvr=o("Examples:"),Yvr=l(),f(B0.$$.fragment),Kvr=l(),Ao=a("div"),f(x0.$$.fragment),Zvr=l(),J9e=a("p"),eTr=o("Instantiate one of the base model classes of the library from a pretrained model."),oTr=l(),Bn=a("p"),rTr=o("The model class to instantiate is selected based on the "),Y9e=a("code"),tTr=o("model_type"),aTr=o(` property of the config object (either
passed as an argument or loaded from `),K9e=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z9e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(":"),dTr=l(),z=a("ul"),aM=a("li"),ebe=a("strong"),cTr=o("albert"),fTr=o(" \u2014 "),oV=a("a"),mTr=o("FlaxAlbertModel"),gTr=o(" (ALBERT model)"),hTr=l(),nM=a("li"),obe=a("strong"),pTr=o("bart"),_Tr=o(" \u2014 "),rV=a("a"),uTr=o("FlaxBartModel"),bTr=o(" (BART model)"),vTr=l(),sM=a("li"),rbe=a("strong"),TTr=o("beit"),FTr=o(" \u2014 "),tV=a("a"),CTr=o("FlaxBeitModel"),MTr=o(" (BEiT model)"),ETr=l(),lM=a("li"),tbe=a("strong"),yTr=o("bert"),wTr=o(" \u2014 "),aV=a("a"),ATr=o("FlaxBertModel"),LTr=o(" (BERT model)"),BTr=l(),iM=a("li"),abe=a("strong"),xTr=o("big_bird"),kTr=o(" \u2014 "),nV=a("a"),RTr=o("FlaxBigBirdModel"),STr=o(" (BigBird model)"),PTr=l(),dM=a("li"),nbe=a("strong"),$Tr=o("blenderbot"),ITr=o(" \u2014 "),sV=a("a"),NTr=o("FlaxBlenderbotModel"),DTr=o(" (Blenderbot model)"),jTr=l(),cM=a("li"),sbe=a("strong"),qTr=o("blenderbot-small"),GTr=o(" \u2014 "),lV=a("a"),OTr=o("FlaxBlenderbotSmallModel"),XTr=o(" (BlenderbotSmall model)"),VTr=l(),fM=a("li"),lbe=a("strong"),zTr=o("clip"),WTr=o(" \u2014 "),iV=a("a"),QTr=o("FlaxCLIPModel"),HTr=o(" (CLIP model)"),UTr=l(),mM=a("li"),ibe=a("strong"),JTr=o("distilbert"),YTr=o(" \u2014 "),dV=a("a"),KTr=o("FlaxDistilBertModel"),ZTr=o(" (DistilBERT model)"),eFr=l(),gM=a("li"),dbe=a("strong"),oFr=o("electra"),rFr=o(" \u2014 "),cV=a("a"),tFr=o("FlaxElectraModel"),aFr=o(" (ELECTRA model)"),nFr=l(),hM=a("li"),cbe=a("strong"),sFr=o("gpt2"),lFr=o(" \u2014 "),fV=a("a"),iFr=o("FlaxGPT2Model"),dFr=o(" (OpenAI GPT-2 model)"),cFr=l(),pM=a("li"),fbe=a("strong"),fFr=o("gpt_neo"),mFr=o(" \u2014 "),mV=a("a"),gFr=o("FlaxGPTNeoModel"),hFr=o(" (GPT Neo model)"),pFr=l(),_M=a("li"),mbe=a("strong"),_Fr=o("gptj"),uFr=o(" \u2014 "),gV=a("a"),bFr=o("FlaxGPTJModel"),vFr=o(" (GPT-J model)"),TFr=l(),uM=a("li"),gbe=a("strong"),FFr=o("marian"),CFr=o(" \u2014 "),hV=a("a"),MFr=o("FlaxMarianModel"),EFr=o(" (Marian model)"),yFr=l(),bM=a("li"),hbe=a("strong"),wFr=o("mbart"),AFr=o(" \u2014 "),pV=a("a"),LFr=o("FlaxMBartModel"),BFr=o(" (mBART model)"),xFr=l(),vM=a("li"),pbe=a("strong"),kFr=o("mt5"),RFr=o(" \u2014 "),_V=a("a"),SFr=o("FlaxMT5Model"),PFr=o(" (mT5 model)"),$Fr=l(),TM=a("li"),_be=a("strong"),IFr=o("pegasus"),NFr=o(" \u2014 "),uV=a("a"),DFr=o("FlaxPegasusModel"),jFr=o(" (Pegasus model)"),qFr=l(),FM=a("li"),ube=a("strong"),GFr=o("roberta"),OFr=o(" \u2014 "),bV=a("a"),XFr=o("FlaxRobertaModel"),VFr=o(" (RoBERTa model)"),zFr=l(),CM=a("li"),bbe=a("strong"),WFr=o("roformer"),QFr=o(" \u2014 "),vV=a("a"),HFr=o("FlaxRoFormerModel"),UFr=o(" (RoFormer model)"),JFr=l(),MM=a("li"),vbe=a("strong"),YFr=o("t5"),KFr=o(" \u2014 "),TV=a("a"),ZFr=o("FlaxT5Model"),eCr=o(" (T5 model)"),oCr=l(),EM=a("li"),Tbe=a("strong"),rCr=o("vision-text-dual-encoder"),tCr=o(" \u2014 "),FV=a("a"),aCr=o("FlaxVisionTextDualEncoderModel"),nCr=o(" (VisionTextDualEncoder model)"),sCr=l(),yM=a("li"),Fbe=a("strong"),lCr=o("vit"),iCr=o(" \u2014 "),CV=a("a"),dCr=o("FlaxViTModel"),cCr=o(" (ViT model)"),fCr=l(),wM=a("li"),Cbe=a("strong"),mCr=o("wav2vec2"),gCr=o(" \u2014 "),MV=a("a"),hCr=o("FlaxWav2Vec2Model"),pCr=o(" (Wav2Vec2 model)"),_Cr=l(),AM=a("li"),Mbe=a("strong"),uCr=o("xglm"),bCr=o(" \u2014 "),EV=a("a"),vCr=o("FlaxXGLMModel"),TCr=o(" (XGLM model)"),FCr=l(),LM=a("li"),Ebe=a("strong"),CCr=o("xlm-roberta"),MCr=o(" \u2014 "),yV=a("a"),ECr=o("FlaxXLMRobertaModel"),yCr=o(" (XLM-RoBERTa model)"),wCr=l(),ybe=a("p"),ACr=o("Examples:"),LCr=l(),f(k0.$$.fragment),DRe=l(),rf=a("h2"),BM=a("a"),wbe=a("span"),f(R0.$$.fragment),BCr=l(),Abe=a("span"),xCr=o("FlaxAutoModelForCausalLM"),jRe=l(),Sr=a("div"),f(S0.$$.fragment),kCr=l(),tf=a("p"),RCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lbe=a("code"),SCr=o("from_pretrained()"),PCr=o("class method or the "),Bbe=a("code"),$Cr=o("from_config()"),ICr=o(`class
method.`),NCr=l(),P0=a("p"),DCr=o("This class cannot be instantiated directly using "),xbe=a("code"),jCr=o("__init__()"),qCr=o(" (throws an error)."),GCr=l(),At=a("div"),f($0.$$.fragment),OCr=l(),kbe=a("p"),XCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VCr=l(),af=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),WCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sbe=a("code"),HCr=o("from_pretrained()"),UCr=o("to load the model weights."),JCr=l(),Pbe=a("p"),YCr=o("Examples:"),KCr=l(),f(I0.$$.fragment),ZCr=l(),Lo=a("div"),f(N0.$$.fragment),eMr=l(),$be=a("p"),oMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rMr=l(),xn=a("p"),tMr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),aMr=o("model_type"),nMr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(":"),cMr=l(),ca=a("ul"),xM=a("li"),jbe=a("strong"),fMr=o("bart"),mMr=o(" \u2014 "),wV=a("a"),gMr=o("FlaxBartForCausalLM"),hMr=o(" (BART model)"),pMr=l(),kM=a("li"),qbe=a("strong"),_Mr=o("gpt2"),uMr=o(" \u2014 "),AV=a("a"),bMr=o("FlaxGPT2LMHeadModel"),vMr=o(" (OpenAI GPT-2 model)"),TMr=l(),RM=a("li"),Gbe=a("strong"),FMr=o("gpt_neo"),CMr=o(" \u2014 "),LV=a("a"),MMr=o("FlaxGPTNeoForCausalLM"),EMr=o(" (GPT Neo model)"),yMr=l(),SM=a("li"),Obe=a("strong"),wMr=o("gptj"),AMr=o(" \u2014 "),BV=a("a"),LMr=o("FlaxGPTJForCausalLM"),BMr=o(" (GPT-J model)"),xMr=l(),PM=a("li"),Xbe=a("strong"),kMr=o("xglm"),RMr=o(" \u2014 "),xV=a("a"),SMr=o("FlaxXGLMForCausalLM"),PMr=o(" (XGLM model)"),$Mr=l(),Vbe=a("p"),IMr=o("Examples:"),NMr=l(),f(D0.$$.fragment),qRe=l(),nf=a("h2"),$M=a("a"),zbe=a("span"),f(j0.$$.fragment),DMr=l(),Wbe=a("span"),jMr=o("FlaxAutoModelForPreTraining"),GRe=l(),Pr=a("div"),f(q0.$$.fragment),qMr=l(),sf=a("p"),GMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qbe=a("code"),OMr=o("from_pretrained()"),XMr=o("class method or the "),Hbe=a("code"),VMr=o("from_config()"),zMr=o(`class
method.`),WMr=l(),G0=a("p"),QMr=o("This class cannot be instantiated directly using "),Ube=a("code"),HMr=o("__init__()"),UMr=o(" (throws an error)."),JMr=l(),Lt=a("div"),f(O0.$$.fragment),YMr=l(),Jbe=a("p"),KMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZMr=l(),lf=a("p"),e4r=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),o4r=o("not"),r4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kbe=a("code"),t4r=o("from_pretrained()"),a4r=o("to load the model weights."),n4r=l(),Zbe=a("p"),s4r=o("Examples:"),l4r=l(),f(X0.$$.fragment),i4r=l(),Bo=a("div"),f(V0.$$.fragment),d4r=l(),e5e=a("p"),c4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f4r=l(),kn=a("p"),m4r=o("The model class to instantiate is selected based on the "),o5e=a("code"),g4r=o("model_type"),h4r=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),p4r=o("pretrained_model_name_or_path"),_4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),u4r=o("pretrained_model_name_or_path"),b4r=o(":"),v4r=l(),ce=a("ul"),IM=a("li"),a5e=a("strong"),T4r=o("albert"),F4r=o(" \u2014 "),kV=a("a"),C4r=o("FlaxAlbertForPreTraining"),M4r=o(" (ALBERT model)"),E4r=l(),NM=a("li"),n5e=a("strong"),y4r=o("bart"),w4r=o(" \u2014 "),RV=a("a"),A4r=o("FlaxBartForConditionalGeneration"),L4r=o(" (BART model)"),B4r=l(),DM=a("li"),s5e=a("strong"),x4r=o("bert"),k4r=o(" \u2014 "),SV=a("a"),R4r=o("FlaxBertForPreTraining"),S4r=o(" (BERT model)"),P4r=l(),jM=a("li"),l5e=a("strong"),$4r=o("big_bird"),I4r=o(" \u2014 "),PV=a("a"),N4r=o("FlaxBigBirdForPreTraining"),D4r=o(" (BigBird model)"),j4r=l(),qM=a("li"),i5e=a("strong"),q4r=o("electra"),G4r=o(" \u2014 "),$V=a("a"),O4r=o("FlaxElectraForPreTraining"),X4r=o(" (ELECTRA model)"),V4r=l(),GM=a("li"),d5e=a("strong"),z4r=o("mbart"),W4r=o(" \u2014 "),IV=a("a"),Q4r=o("FlaxMBartForConditionalGeneration"),H4r=o(" (mBART model)"),U4r=l(),OM=a("li"),c5e=a("strong"),J4r=o("mt5"),Y4r=o(" \u2014 "),NV=a("a"),K4r=o("FlaxMT5ForConditionalGeneration"),Z4r=o(" (mT5 model)"),eEr=l(),XM=a("li"),f5e=a("strong"),oEr=o("roberta"),rEr=o(" \u2014 "),DV=a("a"),tEr=o("FlaxRobertaForMaskedLM"),aEr=o(" (RoBERTa model)"),nEr=l(),VM=a("li"),m5e=a("strong"),sEr=o("roformer"),lEr=o(" \u2014 "),jV=a("a"),iEr=o("FlaxRoFormerForMaskedLM"),dEr=o(" (RoFormer model)"),cEr=l(),zM=a("li"),g5e=a("strong"),fEr=o("t5"),mEr=o(" \u2014 "),qV=a("a"),gEr=o("FlaxT5ForConditionalGeneration"),hEr=o(" (T5 model)"),pEr=l(),WM=a("li"),h5e=a("strong"),_Er=o("wav2vec2"),uEr=o(" \u2014 "),GV=a("a"),bEr=o("FlaxWav2Vec2ForPreTraining"),vEr=o(" (Wav2Vec2 model)"),TEr=l(),QM=a("li"),p5e=a("strong"),FEr=o("xlm-roberta"),CEr=o(" \u2014 "),OV=a("a"),MEr=o("FlaxXLMRobertaForMaskedLM"),EEr=o(" (XLM-RoBERTa model)"),yEr=l(),_5e=a("p"),wEr=o("Examples:"),AEr=l(),f(z0.$$.fragment),ORe=l(),df=a("h2"),HM=a("a"),u5e=a("span"),f(W0.$$.fragment),LEr=l(),b5e=a("span"),BEr=o("FlaxAutoModelForMaskedLM"),XRe=l(),$r=a("div"),f(Q0.$$.fragment),xEr=l(),cf=a("p"),kEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),v5e=a("code"),REr=o("from_pretrained()"),SEr=o("class method or the "),T5e=a("code"),PEr=o("from_config()"),$Er=o(`class
method.`),IEr=l(),H0=a("p"),NEr=o("This class cannot be instantiated directly using "),F5e=a("code"),DEr=o("__init__()"),jEr=o(" (throws an error)."),qEr=l(),Bt=a("div"),f(U0.$$.fragment),GEr=l(),C5e=a("p"),OEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XEr=l(),ff=a("p"),VEr=o(`Note:
Loading a model from its configuration file does `),M5e=a("strong"),zEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E5e=a("code"),QEr=o("from_pretrained()"),HEr=o("to load the model weights."),UEr=l(),y5e=a("p"),JEr=o("Examples:"),YEr=l(),f(J0.$$.fragment),KEr=l(),xo=a("div"),f(Y0.$$.fragment),ZEr=l(),w5e=a("p"),e3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o3r=l(),Rn=a("p"),r3r=o("The model class to instantiate is selected based on the "),A5e=a("code"),t3r=o("model_type"),a3r=o(` property of the config object (either
passed as an argument or loaded from `),L5e=a("code"),n3r=o("pretrained_model_name_or_path"),s3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),l3r=o("pretrained_model_name_or_path"),i3r=o(":"),d3r=l(),be=a("ul"),UM=a("li"),x5e=a("strong"),c3r=o("albert"),f3r=o(" \u2014 "),XV=a("a"),m3r=o("FlaxAlbertForMaskedLM"),g3r=o(" (ALBERT model)"),h3r=l(),JM=a("li"),k5e=a("strong"),p3r=o("bart"),_3r=o(" \u2014 "),VV=a("a"),u3r=o("FlaxBartForConditionalGeneration"),b3r=o(" (BART model)"),v3r=l(),YM=a("li"),R5e=a("strong"),T3r=o("bert"),F3r=o(" \u2014 "),zV=a("a"),C3r=o("FlaxBertForMaskedLM"),M3r=o(" (BERT model)"),E3r=l(),KM=a("li"),S5e=a("strong"),y3r=o("big_bird"),w3r=o(" \u2014 "),WV=a("a"),A3r=o("FlaxBigBirdForMaskedLM"),L3r=o(" (BigBird model)"),B3r=l(),ZM=a("li"),P5e=a("strong"),x3r=o("distilbert"),k3r=o(" \u2014 "),QV=a("a"),R3r=o("FlaxDistilBertForMaskedLM"),S3r=o(" (DistilBERT model)"),P3r=l(),e4=a("li"),$5e=a("strong"),$3r=o("electra"),I3r=o(" \u2014 "),HV=a("a"),N3r=o("FlaxElectraForMaskedLM"),D3r=o(" (ELECTRA model)"),j3r=l(),o4=a("li"),I5e=a("strong"),q3r=o("mbart"),G3r=o(" \u2014 "),UV=a("a"),O3r=o("FlaxMBartForConditionalGeneration"),X3r=o(" (mBART model)"),V3r=l(),r4=a("li"),N5e=a("strong"),z3r=o("roberta"),W3r=o(" \u2014 "),JV=a("a"),Q3r=o("FlaxRobertaForMaskedLM"),H3r=o(" (RoBERTa model)"),U3r=l(),t4=a("li"),D5e=a("strong"),J3r=o("roformer"),Y3r=o(" \u2014 "),YV=a("a"),K3r=o("FlaxRoFormerForMaskedLM"),Z3r=o(" (RoFormer model)"),eyr=l(),a4=a("li"),j5e=a("strong"),oyr=o("xlm-roberta"),ryr=o(" \u2014 "),KV=a("a"),tyr=o("FlaxXLMRobertaForMaskedLM"),ayr=o(" (XLM-RoBERTa model)"),nyr=l(),q5e=a("p"),syr=o("Examples:"),lyr=l(),f(K0.$$.fragment),VRe=l(),mf=a("h2"),n4=a("a"),G5e=a("span"),f(Z0.$$.fragment),iyr=l(),O5e=a("span"),dyr=o("FlaxAutoModelForSeq2SeqLM"),zRe=l(),Ir=a("div"),f(eL.$$.fragment),cyr=l(),gf=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),X5e=a("code"),myr=o("from_pretrained()"),gyr=o("class method or the "),V5e=a("code"),hyr=o("from_config()"),pyr=o(`class
method.`),_yr=l(),oL=a("p"),uyr=o("This class cannot be instantiated directly using "),z5e=a("code"),byr=o("__init__()"),vyr=o(" (throws an error)."),Tyr=l(),xt=a("div"),f(rL.$$.fragment),Fyr=l(),W5e=a("p"),Cyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Myr=l(),hf=a("p"),Eyr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),yyr=o("not"),wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H5e=a("code"),Ayr=o("from_pretrained()"),Lyr=o("to load the model weights."),Byr=l(),U5e=a("p"),xyr=o("Examples:"),kyr=l(),f(tL.$$.fragment),Ryr=l(),ko=a("div"),f(aL.$$.fragment),Syr=l(),J5e=a("p"),Pyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$yr=l(),Sn=a("p"),Iyr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),Nyr=o("model_type"),Dyr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),jyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),Gyr=o("pretrained_model_name_or_path"),Oyr=o(":"),Xyr=l(),Ee=a("ul"),s4=a("li"),e2e=a("strong"),Vyr=o("bart"),zyr=o(" \u2014 "),ZV=a("a"),Wyr=o("FlaxBartForConditionalGeneration"),Qyr=o(" (BART model)"),Hyr=l(),l4=a("li"),o2e=a("strong"),Uyr=o("blenderbot"),Jyr=o(" \u2014 "),ez=a("a"),Yyr=o("FlaxBlenderbotForConditionalGeneration"),Kyr=o(" (Blenderbot model)"),Zyr=l(),i4=a("li"),r2e=a("strong"),ewr=o("blenderbot-small"),owr=o(" \u2014 "),oz=a("a"),rwr=o("FlaxBlenderbotSmallForConditionalGeneration"),twr=o(" (BlenderbotSmall model)"),awr=l(),d4=a("li"),t2e=a("strong"),nwr=o("encoder-decoder"),swr=o(" \u2014 "),rz=a("a"),lwr=o("FlaxEncoderDecoderModel"),iwr=o(" (Encoder decoder model)"),dwr=l(),c4=a("li"),a2e=a("strong"),cwr=o("marian"),fwr=o(" \u2014 "),tz=a("a"),mwr=o("FlaxMarianMTModel"),gwr=o(" (Marian model)"),hwr=l(),f4=a("li"),n2e=a("strong"),pwr=o("mbart"),_wr=o(" \u2014 "),az=a("a"),uwr=o("FlaxMBartForConditionalGeneration"),bwr=o(" (mBART model)"),vwr=l(),m4=a("li"),s2e=a("strong"),Twr=o("mt5"),Fwr=o(" \u2014 "),nz=a("a"),Cwr=o("FlaxMT5ForConditionalGeneration"),Mwr=o(" (mT5 model)"),Ewr=l(),g4=a("li"),l2e=a("strong"),ywr=o("pegasus"),wwr=o(" \u2014 "),sz=a("a"),Awr=o("FlaxPegasusForConditionalGeneration"),Lwr=o(" (Pegasus model)"),Bwr=l(),h4=a("li"),i2e=a("strong"),xwr=o("t5"),kwr=o(" \u2014 "),lz=a("a"),Rwr=o("FlaxT5ForConditionalGeneration"),Swr=o(" (T5 model)"),Pwr=l(),d2e=a("p"),$wr=o("Examples:"),Iwr=l(),f(nL.$$.fragment),WRe=l(),pf=a("h2"),p4=a("a"),c2e=a("span"),f(sL.$$.fragment),Nwr=l(),f2e=a("span"),Dwr=o("FlaxAutoModelForSequenceClassification"),QRe=l(),Nr=a("div"),f(lL.$$.fragment),jwr=l(),_f=a("p"),qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),m2e=a("code"),Gwr=o("from_pretrained()"),Owr=o("class method or the "),g2e=a("code"),Xwr=o("from_config()"),Vwr=o(`class
method.`),zwr=l(),iL=a("p"),Wwr=o("This class cannot be instantiated directly using "),h2e=a("code"),Qwr=o("__init__()"),Hwr=o(" (throws an error)."),Uwr=l(),kt=a("div"),f(dL.$$.fragment),Jwr=l(),p2e=a("p"),Ywr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kwr=l(),uf=a("p"),Zwr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),e6r=o("not"),o6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=a("code"),r6r=o("from_pretrained()"),t6r=o("to load the model weights."),a6r=l(),b2e=a("p"),n6r=o("Examples:"),s6r=l(),f(cL.$$.fragment),l6r=l(),Ro=a("div"),f(fL.$$.fragment),i6r=l(),v2e=a("p"),d6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c6r=l(),Pn=a("p"),f6r=o("The model class to instantiate is selected based on the "),T2e=a("code"),m6r=o("model_type"),g6r=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(":"),b6r=l(),ve=a("ul"),_4=a("li"),M2e=a("strong"),v6r=o("albert"),T6r=o(" \u2014 "),iz=a("a"),F6r=o("FlaxAlbertForSequenceClassification"),C6r=o(" (ALBERT model)"),M6r=l(),u4=a("li"),E2e=a("strong"),E6r=o("bart"),y6r=o(" \u2014 "),dz=a("a"),w6r=o("FlaxBartForSequenceClassification"),A6r=o(" (BART model)"),L6r=l(),b4=a("li"),y2e=a("strong"),B6r=o("bert"),x6r=o(" \u2014 "),cz=a("a"),k6r=o("FlaxBertForSequenceClassification"),R6r=o(" (BERT model)"),S6r=l(),v4=a("li"),w2e=a("strong"),P6r=o("big_bird"),$6r=o(" \u2014 "),fz=a("a"),I6r=o("FlaxBigBirdForSequenceClassification"),N6r=o(" (BigBird model)"),D6r=l(),T4=a("li"),A2e=a("strong"),j6r=o("distilbert"),q6r=o(" \u2014 "),mz=a("a"),G6r=o("FlaxDistilBertForSequenceClassification"),O6r=o(" (DistilBERT model)"),X6r=l(),F4=a("li"),L2e=a("strong"),V6r=o("electra"),z6r=o(" \u2014 "),gz=a("a"),W6r=o("FlaxElectraForSequenceClassification"),Q6r=o(" (ELECTRA model)"),H6r=l(),C4=a("li"),B2e=a("strong"),U6r=o("mbart"),J6r=o(" \u2014 "),hz=a("a"),Y6r=o("FlaxMBartForSequenceClassification"),K6r=o(" (mBART model)"),Z6r=l(),M4=a("li"),x2e=a("strong"),eAr=o("roberta"),oAr=o(" \u2014 "),pz=a("a"),rAr=o("FlaxRobertaForSequenceClassification"),tAr=o(" (RoBERTa model)"),aAr=l(),E4=a("li"),k2e=a("strong"),nAr=o("roformer"),sAr=o(" \u2014 "),_z=a("a"),lAr=o("FlaxRoFormerForSequenceClassification"),iAr=o(" (RoFormer model)"),dAr=l(),y4=a("li"),R2e=a("strong"),cAr=o("xlm-roberta"),fAr=o(" \u2014 "),uz=a("a"),mAr=o("FlaxXLMRobertaForSequenceClassification"),gAr=o(" (XLM-RoBERTa model)"),hAr=l(),S2e=a("p"),pAr=o("Examples:"),_Ar=l(),f(mL.$$.fragment),HRe=l(),bf=a("h2"),w4=a("a"),P2e=a("span"),f(gL.$$.fragment),uAr=l(),$2e=a("span"),bAr=o("FlaxAutoModelForQuestionAnswering"),URe=l(),Dr=a("div"),f(hL.$$.fragment),vAr=l(),vf=a("p"),TAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),I2e=a("code"),FAr=o("from_pretrained()"),CAr=o("class method or the "),N2e=a("code"),MAr=o("from_config()"),EAr=o(`class
method.`),yAr=l(),pL=a("p"),wAr=o("This class cannot be instantiated directly using "),D2e=a("code"),AAr=o("__init__()"),LAr=o(" (throws an error)."),BAr=l(),Rt=a("div"),f(_L.$$.fragment),xAr=l(),j2e=a("p"),kAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RAr=l(),Tf=a("p"),SAr=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),PAr=o("not"),$Ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G2e=a("code"),IAr=o("from_pretrained()"),NAr=o("to load the model weights."),DAr=l(),O2e=a("p"),jAr=o("Examples:"),qAr=l(),f(uL.$$.fragment),GAr=l(),So=a("div"),f(bL.$$.fragment),OAr=l(),X2e=a("p"),XAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VAr=l(),$n=a("p"),zAr=o("The model class to instantiate is selected based on the "),V2e=a("code"),WAr=o("model_type"),QAr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),HAr=o("pretrained_model_name_or_path"),UAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(":"),KAr=l(),Te=a("ul"),A4=a("li"),Q2e=a("strong"),ZAr=o("albert"),e0r=o(" \u2014 "),bz=a("a"),o0r=o("FlaxAlbertForQuestionAnswering"),r0r=o(" (ALBERT model)"),t0r=l(),L4=a("li"),H2e=a("strong"),a0r=o("bart"),n0r=o(" \u2014 "),vz=a("a"),s0r=o("FlaxBartForQuestionAnswering"),l0r=o(" (BART model)"),i0r=l(),B4=a("li"),U2e=a("strong"),d0r=o("bert"),c0r=o(" \u2014 "),Tz=a("a"),f0r=o("FlaxBertForQuestionAnswering"),m0r=o(" (BERT model)"),g0r=l(),x4=a("li"),J2e=a("strong"),h0r=o("big_bird"),p0r=o(" \u2014 "),Fz=a("a"),_0r=o("FlaxBigBirdForQuestionAnswering"),u0r=o(" (BigBird model)"),b0r=l(),k4=a("li"),Y2e=a("strong"),v0r=o("distilbert"),T0r=o(" \u2014 "),Cz=a("a"),F0r=o("FlaxDistilBertForQuestionAnswering"),C0r=o(" (DistilBERT model)"),M0r=l(),R4=a("li"),K2e=a("strong"),E0r=o("electra"),y0r=o(" \u2014 "),Mz=a("a"),w0r=o("FlaxElectraForQuestionAnswering"),A0r=o(" (ELECTRA model)"),L0r=l(),S4=a("li"),Z2e=a("strong"),B0r=o("mbart"),x0r=o(" \u2014 "),Ez=a("a"),k0r=o("FlaxMBartForQuestionAnswering"),R0r=o(" (mBART model)"),S0r=l(),P4=a("li"),eve=a("strong"),P0r=o("roberta"),$0r=o(" \u2014 "),yz=a("a"),I0r=o("FlaxRobertaForQuestionAnswering"),N0r=o(" (RoBERTa model)"),D0r=l(),$4=a("li"),ove=a("strong"),j0r=o("roformer"),q0r=o(" \u2014 "),wz=a("a"),G0r=o("FlaxRoFormerForQuestionAnswering"),O0r=o(" (RoFormer model)"),X0r=l(),I4=a("li"),rve=a("strong"),V0r=o("xlm-roberta"),z0r=o(" \u2014 "),Az=a("a"),W0r=o("FlaxXLMRobertaForQuestionAnswering"),Q0r=o(" (XLM-RoBERTa model)"),H0r=l(),tve=a("p"),U0r=o("Examples:"),J0r=l(),f(vL.$$.fragment),JRe=l(),Ff=a("h2"),N4=a("a"),ave=a("span"),f(TL.$$.fragment),Y0r=l(),nve=a("span"),K0r=o("FlaxAutoModelForTokenClassification"),YRe=l(),jr=a("div"),f(FL.$$.fragment),Z0r=l(),Cf=a("p"),eLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sve=a("code"),oLr=o("from_pretrained()"),rLr=o("class method or the "),lve=a("code"),tLr=o("from_config()"),aLr=o(`class
method.`),nLr=l(),CL=a("p"),sLr=o("This class cannot be instantiated directly using "),ive=a("code"),lLr=o("__init__()"),iLr=o(" (throws an error)."),dLr=l(),St=a("div"),f(ML.$$.fragment),cLr=l(),dve=a("p"),fLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mLr=l(),Mf=a("p"),gLr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),hLr=o("not"),pLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fve=a("code"),_Lr=o("from_pretrained()"),uLr=o("to load the model weights."),bLr=l(),mve=a("p"),vLr=o("Examples:"),TLr=l(),f(EL.$$.fragment),FLr=l(),Po=a("div"),f(yL.$$.fragment),CLr=l(),gve=a("p"),MLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ELr=l(),In=a("p"),yLr=o("The model class to instantiate is selected based on the "),hve=a("code"),wLr=o("model_type"),ALr=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),LLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),xLr=o("pretrained_model_name_or_path"),kLr=o(":"),RLr=l(),Se=a("ul"),D4=a("li"),uve=a("strong"),SLr=o("albert"),PLr=o(" \u2014 "),Lz=a("a"),$Lr=o("FlaxAlbertForTokenClassification"),ILr=o(" (ALBERT model)"),NLr=l(),j4=a("li"),bve=a("strong"),DLr=o("bert"),jLr=o(" \u2014 "),Bz=a("a"),qLr=o("FlaxBertForTokenClassification"),GLr=o(" (BERT model)"),OLr=l(),q4=a("li"),vve=a("strong"),XLr=o("big_bird"),VLr=o(" \u2014 "),xz=a("a"),zLr=o("FlaxBigBirdForTokenClassification"),WLr=o(" (BigBird model)"),QLr=l(),G4=a("li"),Tve=a("strong"),HLr=o("distilbert"),ULr=o(" \u2014 "),kz=a("a"),JLr=o("FlaxDistilBertForTokenClassification"),YLr=o(" (DistilBERT model)"),KLr=l(),O4=a("li"),Fve=a("strong"),ZLr=o("electra"),e8r=o(" \u2014 "),Rz=a("a"),o8r=o("FlaxElectraForTokenClassification"),r8r=o(" (ELECTRA model)"),t8r=l(),X4=a("li"),Cve=a("strong"),a8r=o("roberta"),n8r=o(" \u2014 "),Sz=a("a"),s8r=o("FlaxRobertaForTokenClassification"),l8r=o(" (RoBERTa model)"),i8r=l(),V4=a("li"),Mve=a("strong"),d8r=o("roformer"),c8r=o(" \u2014 "),Pz=a("a"),f8r=o("FlaxRoFormerForTokenClassification"),m8r=o(" (RoFormer model)"),g8r=l(),z4=a("li"),Eve=a("strong"),h8r=o("xlm-roberta"),p8r=o(" \u2014 "),$z=a("a"),_8r=o("FlaxXLMRobertaForTokenClassification"),u8r=o(" (XLM-RoBERTa model)"),b8r=l(),yve=a("p"),v8r=o("Examples:"),T8r=l(),f(wL.$$.fragment),KRe=l(),Ef=a("h2"),W4=a("a"),wve=a("span"),f(AL.$$.fragment),F8r=l(),Ave=a("span"),C8r=o("FlaxAutoModelForMultipleChoice"),ZRe=l(),qr=a("div"),f(LL.$$.fragment),M8r=l(),yf=a("p"),E8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Lve=a("code"),y8r=o("from_pretrained()"),w8r=o("class method or the "),Bve=a("code"),A8r=o("from_config()"),L8r=o(`class
method.`),B8r=l(),BL=a("p"),x8r=o("This class cannot be instantiated directly using "),xve=a("code"),k8r=o("__init__()"),R8r=o(" (throws an error)."),S8r=l(),Pt=a("div"),f(xL.$$.fragment),P8r=l(),kve=a("p"),$8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I8r=l(),wf=a("p"),N8r=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),D8r=o("not"),j8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sve=a("code"),q8r=o("from_pretrained()"),G8r=o("to load the model weights."),O8r=l(),Pve=a("p"),X8r=o("Examples:"),V8r=l(),f(kL.$$.fragment),z8r=l(),$o=a("div"),f(RL.$$.fragment),W8r=l(),$ve=a("p"),Q8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H8r=l(),Nn=a("p"),U8r=o("The model class to instantiate is selected based on the "),Ive=a("code"),J8r=o("model_type"),Y8r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),e7r=o("pretrained_model_name_or_path"),o7r=o(":"),r7r=l(),Pe=a("ul"),Q4=a("li"),jve=a("strong"),t7r=o("albert"),a7r=o(" \u2014 "),Iz=a("a"),n7r=o("FlaxAlbertForMultipleChoice"),s7r=o(" (ALBERT model)"),l7r=l(),H4=a("li"),qve=a("strong"),i7r=o("bert"),d7r=o(" \u2014 "),Nz=a("a"),c7r=o("FlaxBertForMultipleChoice"),f7r=o(" (BERT model)"),m7r=l(),U4=a("li"),Gve=a("strong"),g7r=o("big_bird"),h7r=o(" \u2014 "),Dz=a("a"),p7r=o("FlaxBigBirdForMultipleChoice"),_7r=o(" (BigBird model)"),u7r=l(),J4=a("li"),Ove=a("strong"),b7r=o("distilbert"),v7r=o(" \u2014 "),jz=a("a"),T7r=o("FlaxDistilBertForMultipleChoice"),F7r=o(" (DistilBERT model)"),C7r=l(),Y4=a("li"),Xve=a("strong"),M7r=o("electra"),E7r=o(" \u2014 "),qz=a("a"),y7r=o("FlaxElectraForMultipleChoice"),w7r=o(" (ELECTRA model)"),A7r=l(),K4=a("li"),Vve=a("strong"),L7r=o("roberta"),B7r=o(" \u2014 "),Gz=a("a"),x7r=o("FlaxRobertaForMultipleChoice"),k7r=o(" (RoBERTa model)"),R7r=l(),Z4=a("li"),zve=a("strong"),S7r=o("roformer"),P7r=o(" \u2014 "),Oz=a("a"),$7r=o("FlaxRoFormerForMultipleChoice"),I7r=o(" (RoFormer model)"),N7r=l(),eE=a("li"),Wve=a("strong"),D7r=o("xlm-roberta"),j7r=o(" \u2014 "),Xz=a("a"),q7r=o("FlaxXLMRobertaForMultipleChoice"),G7r=o(" (XLM-RoBERTa model)"),O7r=l(),Qve=a("p"),X7r=o("Examples:"),V7r=l(),f(SL.$$.fragment),eSe=l(),Af=a("h2"),oE=a("a"),Hve=a("span"),f(PL.$$.fragment),z7r=l(),Uve=a("span"),W7r=o("FlaxAutoModelForNextSentencePrediction"),oSe=l(),Gr=a("div"),f($L.$$.fragment),Q7r=l(),Lf=a("p"),H7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jve=a("code"),U7r=o("from_pretrained()"),J7r=o("class method or the "),Yve=a("code"),Y7r=o("from_config()"),K7r=o(`class
method.`),Z7r=l(),IL=a("p"),eBr=o("This class cannot be instantiated directly using "),Kve=a("code"),oBr=o("__init__()"),rBr=o(" (throws an error)."),tBr=l(),$t=a("div"),f(NL.$$.fragment),aBr=l(),Zve=a("p"),nBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sBr=l(),Bf=a("p"),lBr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),iBr=o("not"),dBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oTe=a("code"),cBr=o("from_pretrained()"),fBr=o("to load the model weights."),mBr=l(),rTe=a("p"),gBr=o("Examples:"),hBr=l(),f(DL.$$.fragment),pBr=l(),Io=a("div"),f(jL.$$.fragment),_Br=l(),tTe=a("p"),uBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bBr=l(),Dn=a("p"),vBr=o("The model class to instantiate is selected based on the "),aTe=a("code"),TBr=o("model_type"),FBr=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),CBr=o("pretrained_model_name_or_path"),MBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),EBr=o("pretrained_model_name_or_path"),yBr=o(":"),wBr=l(),lTe=a("ul"),rE=a("li"),iTe=a("strong"),ABr=o("bert"),LBr=o(" \u2014 "),Vz=a("a"),BBr=o("FlaxBertForNextSentencePrediction"),xBr=o(" (BERT model)"),kBr=l(),dTe=a("p"),RBr=o("Examples:"),SBr=l(),f(qL.$$.fragment),rSe=l(),xf=a("h2"),tE=a("a"),cTe=a("span"),f(GL.$$.fragment),PBr=l(),fTe=a("span"),$Br=o("FlaxAutoModelForImageClassification"),tSe=l(),Or=a("div"),f(OL.$$.fragment),IBr=l(),kf=a("p"),NBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mTe=a("code"),DBr=o("from_pretrained()"),jBr=o("class method or the "),gTe=a("code"),qBr=o("from_config()"),GBr=o(`class
method.`),OBr=l(),XL=a("p"),XBr=o("This class cannot be instantiated directly using "),hTe=a("code"),VBr=o("__init__()"),zBr=o(" (throws an error)."),WBr=l(),It=a("div"),f(VL.$$.fragment),QBr=l(),pTe=a("p"),HBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UBr=l(),Rf=a("p"),JBr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),YBr=o("not"),KBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uTe=a("code"),ZBr=o("from_pretrained()"),exr=o("to load the model weights."),oxr=l(),bTe=a("p"),rxr=o("Examples:"),txr=l(),f(zL.$$.fragment),axr=l(),No=a("div"),f(WL.$$.fragment),nxr=l(),vTe=a("p"),sxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lxr=l(),jn=a("p"),ixr=o("The model class to instantiate is selected based on the "),TTe=a("code"),dxr=o("model_type"),cxr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),fxr=o("pretrained_model_name_or_path"),mxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(":"),pxr=l(),QL=a("ul"),aE=a("li"),MTe=a("strong"),_xr=o("beit"),uxr=o(" \u2014 "),zz=a("a"),bxr=o("FlaxBeitForImageClassification"),vxr=o(" (BEiT model)"),Txr=l(),nE=a("li"),ETe=a("strong"),Fxr=o("vit"),Cxr=o(" \u2014 "),Wz=a("a"),Mxr=o("FlaxViTForImageClassification"),Exr=o(" (ViT model)"),yxr=l(),yTe=a("p"),wxr=o("Examples:"),Axr=l(),f(HL.$$.fragment),aSe=l(),Sf=a("h2"),sE=a("a"),wTe=a("span"),f(UL.$$.fragment),Lxr=l(),ATe=a("span"),Bxr=o("FlaxAutoModelForVision2Seq"),nSe=l(),Xr=a("div"),f(JL.$$.fragment),xxr=l(),Pf=a("p"),kxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LTe=a("code"),Rxr=o("from_pretrained()"),Sxr=o("class method or the "),BTe=a("code"),Pxr=o("from_config()"),$xr=o(`class
method.`),Ixr=l(),YL=a("p"),Nxr=o("This class cannot be instantiated directly using "),xTe=a("code"),Dxr=o("__init__()"),jxr=o(" (throws an error)."),qxr=l(),Nt=a("div"),f(KL.$$.fragment),Gxr=l(),kTe=a("p"),Oxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xxr=l(),$f=a("p"),Vxr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),zxr=o("not"),Wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),STe=a("code"),Qxr=o("from_pretrained()"),Hxr=o("to load the model weights."),Uxr=l(),PTe=a("p"),Jxr=o("Examples:"),Yxr=l(),f(ZL.$$.fragment),Kxr=l(),Do=a("div"),f(e8.$$.fragment),Zxr=l(),$Te=a("p"),ekr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),okr=l(),qn=a("p"),rkr=o("The model class to instantiate is selected based on the "),ITe=a("code"),tkr=o("model_type"),akr=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),nkr=o("pretrained_model_name_or_path"),skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(":"),dkr=l(),jTe=a("ul"),lE=a("li"),qTe=a("strong"),ckr=o("vision-encoder-decoder"),fkr=o(" \u2014 "),Qz=a("a"),mkr=o("FlaxVisionEncoderDecoderModel"),gkr=o(" (Vision Encoder decoder model)"),hkr=l(),GTe=a("p"),pkr=o("Examples:"),_kr=l(),f(o8.$$.fragment),this.h()},l(c){const u=vMt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(c),de=n(c,"H1",{class:!0});var r8=s(de);pe=n(r8,"A",{id:!0,class:!0,href:!0});var OTe=s(pe);io=n(OTe,"SPAN",{});var XTe=s(io);m(fe.$$.fragment,XTe),XTe.forEach(t),OTe.forEach(t),Me=i(r8),Vo=n(r8,"SPAN",{});var bkr=s(Vo);Ni=r(bkr,"Auto Classes"),bkr.forEach(t),r8.forEach(t),Nf=i(c),fa=n(c,"P",{});var lSe=s(fa);Di=r(lSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(lSe,"CODE",{});var vkr=s(ji);l3=r(vkr,"from_pretrained()"),vkr.forEach(t),Df=r(lSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),lSe.forEach(t),Be=i(c),co=n(c,"P",{});var iE=s(co);qi=r(iE,"Instantiating one of "),Gn=n(iE,"A",{href:!0});var Tkr=s(Gn);i3=r(Tkr,"AutoConfig"),Tkr.forEach(t),On=r(iE,", "),Xn=n(iE,"A",{href:!0});var Fkr=s(Xn);d3=r(Fkr,"AutoModel"),Fkr.forEach(t),Gi=r(iE,`, and
`),Vn=n(iE,"A",{href:!0});var Ckr=s(Vn);c3=r(Ckr,"AutoTokenizer"),Ckr.forEach(t),Oi=r(iE," will directly create a class of the relevant architecture. For instance"),iE.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var iSe=s(_e);Z8=r(iSe,"will create a model that is an instance of "),Xi=n(iSe,"A",{href:!0});var Mkr=s(Xi);e7=r(Mkr,"BertModel"),Mkr.forEach(t),o7=r(iSe,"."),iSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var dSe=s(Ga);r7=r(dSe,"There is one class of "),qf=n(dSe,"CODE",{});var Ekr=s(qf);t7=r(Ekr,"AutoModel"),Ekr.forEach(t),b$e=r(dSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),dSe.forEach(t),nke=i(c),Vi=n(c,"H2",{class:!0});var cSe=s(Vi);Gf=n(cSe,"A",{id:!0,class:!0,href:!0});var ykr=s(Gf);GQ=n(ykr,"SPAN",{});var wkr=s(GQ);m(f3.$$.fragment,wkr),wkr.forEach(t),ykr.forEach(t),v$e=i(cSe),OQ=n(cSe,"SPAN",{});var Akr=s(OQ);T$e=r(Akr,"Extending the Auto Classes"),Akr.forEach(t),cSe.forEach(t),ske=i(c),zn=n(c,"P",{});var Hz=s(zn);F$e=r(Hz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),XQ=n(Hz,"CODE",{});var Lkr=s(XQ);C$e=r(Lkr,"NewModel"),Lkr.forEach(t),M$e=r(Hz,", make sure you have a "),VQ=n(Hz,"CODE",{});var Bkr=s(VQ);E$e=r(Bkr,"NewModelConfig"),Bkr.forEach(t),y$e=r(Hz,` then you can add those to the auto
classes like this:`),Hz.forEach(t),lke=i(c),m(m3.$$.fragment,c),ike=i(c),a7=n(c,"P",{});var xkr=s(a7);w$e=r(xkr,"You will then be able to use the auto classes like you would usually do!"),xkr.forEach(t),dke=i(c),m(Of.$$.fragment,c),cke=i(c),zi=n(c,"H2",{class:!0});var fSe=s(zi);Xf=n(fSe,"A",{id:!0,class:!0,href:!0});var kkr=s(Xf);zQ=n(kkr,"SPAN",{});var Rkr=s(zQ);m(g3.$$.fragment,Rkr),Rkr.forEach(t),kkr.forEach(t),A$e=i(fSe),WQ=n(fSe,"SPAN",{});var Skr=s(WQ);L$e=r(Skr,"AutoConfig"),Skr.forEach(t),fSe.forEach(t),fke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(h3.$$.fragment,Os),B$e=i(Os),p3=n(Os,"P",{});var mSe=s(p3);x$e=r(mSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),n7=n(mSe,"A",{href:!0});var Pkr=s(n7);k$e=r(Pkr,"from_pretrained()"),Pkr.forEach(t),R$e=r(mSe," class method."),mSe.forEach(t),S$e=i(Os),_3=n(Os,"P",{});var gSe=s(_3);P$e=r(gSe,"This class cannot be instantiated directly using "),QQ=n(gSe,"CODE",{});var $kr=s(QQ);$$e=r($kr,"__init__()"),$kr.forEach(t),I$e=r(gSe," (throws an error)."),gSe.forEach(t),N$e=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(u3.$$.fragment,ga),D$e=i(ga),HQ=n(ga,"P",{});var Ikr=s(HQ);j$e=r(Ikr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Ikr.forEach(t),q$e=i(ga),Wi=n(ga,"P",{});var Uz=s(Wi);G$e=r(Uz,"The configuration class to instantiate is selected based on the "),UQ=n(Uz,"CODE",{});var Nkr=s(UQ);O$e=r(Nkr,"model_type"),Nkr.forEach(t),X$e=r(Uz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),JQ=n(Uz,"CODE",{});var Dkr=s(JQ);V$e=r(Dkr,"pretrained_model_name_or_path"),Dkr.forEach(t),z$e=r(Uz,":"),Uz.forEach(t),W$e=i(ga),v=n(ga,"UL",{});var T=s(v);Vf=n(T,"LI",{});var VTe=s(Vf);YQ=n(VTe,"STRONG",{});var jkr=s(YQ);Q$e=r(jkr,"albert"),jkr.forEach(t),H$e=r(VTe," \u2014 "),s7=n(VTe,"A",{href:!0});var qkr=s(s7);U$e=r(qkr,"AlbertConfig"),qkr.forEach(t),J$e=r(VTe," (ALBERT model)"),VTe.forEach(t),Y$e=i(T),zf=n(T,"LI",{});var zTe=s(zf);KQ=n(zTe,"STRONG",{});var Gkr=s(KQ);K$e=r(Gkr,"bart"),Gkr.forEach(t),Z$e=r(zTe," \u2014 "),l7=n(zTe,"A",{href:!0});var Okr=s(l7);eIe=r(Okr,"BartConfig"),Okr.forEach(t),oIe=r(zTe," (BART model)"),zTe.forEach(t),rIe=i(T),Wf=n(T,"LI",{});var WTe=s(Wf);ZQ=n(WTe,"STRONG",{});var Xkr=s(ZQ);tIe=r(Xkr,"beit"),Xkr.forEach(t),aIe=r(WTe," \u2014 "),i7=n(WTe,"A",{href:!0});var Vkr=s(i7);nIe=r(Vkr,"BeitConfig"),Vkr.forEach(t),sIe=r(WTe," (BEiT model)"),WTe.forEach(t),lIe=i(T),Qf=n(T,"LI",{});var QTe=s(Qf);eH=n(QTe,"STRONG",{});var zkr=s(eH);iIe=r(zkr,"bert"),zkr.forEach(t),dIe=r(QTe," \u2014 "),d7=n(QTe,"A",{href:!0});var Wkr=s(d7);cIe=r(Wkr,"BertConfig"),Wkr.forEach(t),fIe=r(QTe," (BERT model)"),QTe.forEach(t),mIe=i(T),Hf=n(T,"LI",{});var HTe=s(Hf);oH=n(HTe,"STRONG",{});var Qkr=s(oH);gIe=r(Qkr,"bert-generation"),Qkr.forEach(t),hIe=r(HTe," \u2014 "),c7=n(HTe,"A",{href:!0});var Hkr=s(c7);pIe=r(Hkr,"BertGenerationConfig"),Hkr.forEach(t),_Ie=r(HTe," (Bert Generation model)"),HTe.forEach(t),uIe=i(T),Uf=n(T,"LI",{});var UTe=s(Uf);rH=n(UTe,"STRONG",{});var Ukr=s(rH);bIe=r(Ukr,"big_bird"),Ukr.forEach(t),vIe=r(UTe," \u2014 "),f7=n(UTe,"A",{href:!0});var Jkr=s(f7);TIe=r(Jkr,"BigBirdConfig"),Jkr.forEach(t),FIe=r(UTe," (BigBird model)"),UTe.forEach(t),CIe=i(T),Jf=n(T,"LI",{});var JTe=s(Jf);tH=n(JTe,"STRONG",{});var Ykr=s(tH);MIe=r(Ykr,"bigbird_pegasus"),Ykr.forEach(t),EIe=r(JTe," \u2014 "),m7=n(JTe,"A",{href:!0});var Kkr=s(m7);yIe=r(Kkr,"BigBirdPegasusConfig"),Kkr.forEach(t),wIe=r(JTe," (BigBirdPegasus model)"),JTe.forEach(t),AIe=i(T),Yf=n(T,"LI",{});var YTe=s(Yf);aH=n(YTe,"STRONG",{});var Zkr=s(aH);LIe=r(Zkr,"blenderbot"),Zkr.forEach(t),BIe=r(YTe," \u2014 "),g7=n(YTe,"A",{href:!0});var eRr=s(g7);xIe=r(eRr,"BlenderbotConfig"),eRr.forEach(t),kIe=r(YTe," (Blenderbot model)"),YTe.forEach(t),RIe=i(T),Kf=n(T,"LI",{});var KTe=s(Kf);nH=n(KTe,"STRONG",{});var oRr=s(nH);SIe=r(oRr,"blenderbot-small"),oRr.forEach(t),PIe=r(KTe," \u2014 "),h7=n(KTe,"A",{href:!0});var rRr=s(h7);$Ie=r(rRr,"BlenderbotSmallConfig"),rRr.forEach(t),IIe=r(KTe," (BlenderbotSmall model)"),KTe.forEach(t),NIe=i(T),Zf=n(T,"LI",{});var ZTe=s(Zf);sH=n(ZTe,"STRONG",{});var tRr=s(sH);DIe=r(tRr,"camembert"),tRr.forEach(t),jIe=r(ZTe," \u2014 "),p7=n(ZTe,"A",{href:!0});var aRr=s(p7);qIe=r(aRr,"CamembertConfig"),aRr.forEach(t),GIe=r(ZTe," (CamemBERT model)"),ZTe.forEach(t),OIe=i(T),em=n(T,"LI",{});var eFe=s(em);lH=n(eFe,"STRONG",{});var nRr=s(lH);XIe=r(nRr,"canine"),nRr.forEach(t),VIe=r(eFe," \u2014 "),_7=n(eFe,"A",{href:!0});var sRr=s(_7);zIe=r(sRr,"CanineConfig"),sRr.forEach(t),WIe=r(eFe," (Canine model)"),eFe.forEach(t),QIe=i(T),om=n(T,"LI",{});var oFe=s(om);iH=n(oFe,"STRONG",{});var lRr=s(iH);HIe=r(lRr,"clip"),lRr.forEach(t),UIe=r(oFe," \u2014 "),u7=n(oFe,"A",{href:!0});var iRr=s(u7);JIe=r(iRr,"CLIPConfig"),iRr.forEach(t),YIe=r(oFe," (CLIP model)"),oFe.forEach(t),KIe=i(T),rm=n(T,"LI",{});var rFe=s(rm);dH=n(rFe,"STRONG",{});var dRr=s(dH);ZIe=r(dRr,"convbert"),dRr.forEach(t),eNe=r(rFe," \u2014 "),b7=n(rFe,"A",{href:!0});var cRr=s(b7);oNe=r(cRr,"ConvBertConfig"),cRr.forEach(t),rNe=r(rFe," (ConvBERT model)"),rFe.forEach(t),tNe=i(T),tm=n(T,"LI",{});var tFe=s(tm);cH=n(tFe,"STRONG",{});var fRr=s(cH);aNe=r(fRr,"convnext"),fRr.forEach(t),nNe=r(tFe," \u2014 "),v7=n(tFe,"A",{href:!0});var mRr=s(v7);sNe=r(mRr,"ConvNextConfig"),mRr.forEach(t),lNe=r(tFe," (ConvNext model)"),tFe.forEach(t),iNe=i(T),am=n(T,"LI",{});var aFe=s(am);fH=n(aFe,"STRONG",{});var gRr=s(fH);dNe=r(gRr,"ctrl"),gRr.forEach(t),cNe=r(aFe," \u2014 "),T7=n(aFe,"A",{href:!0});var hRr=s(T7);fNe=r(hRr,"CTRLConfig"),hRr.forEach(t),mNe=r(aFe," (CTRL model)"),aFe.forEach(t),gNe=i(T),nm=n(T,"LI",{});var nFe=s(nm);mH=n(nFe,"STRONG",{});var pRr=s(mH);hNe=r(pRr,"data2vec-audio"),pRr.forEach(t),pNe=r(nFe," \u2014 "),F7=n(nFe,"A",{href:!0});var _Rr=s(F7);_Ne=r(_Rr,"Data2VecAudioConfig"),_Rr.forEach(t),uNe=r(nFe," (Data2VecAudio model)"),nFe.forEach(t),bNe=i(T),sm=n(T,"LI",{});var sFe=s(sm);gH=n(sFe,"STRONG",{});var uRr=s(gH);vNe=r(uRr,"data2vec-text"),uRr.forEach(t),TNe=r(sFe," \u2014 "),C7=n(sFe,"A",{href:!0});var bRr=s(C7);FNe=r(bRr,"Data2VecTextConfig"),bRr.forEach(t),CNe=r(sFe," (Data2VecText model)"),sFe.forEach(t),MNe=i(T),lm=n(T,"LI",{});var lFe=s(lm);hH=n(lFe,"STRONG",{});var vRr=s(hH);ENe=r(vRr,"deberta"),vRr.forEach(t),yNe=r(lFe," \u2014 "),M7=n(lFe,"A",{href:!0});var TRr=s(M7);wNe=r(TRr,"DebertaConfig"),TRr.forEach(t),ANe=r(lFe," (DeBERTa model)"),lFe.forEach(t),LNe=i(T),im=n(T,"LI",{});var iFe=s(im);pH=n(iFe,"STRONG",{});var FRr=s(pH);BNe=r(FRr,"deberta-v2"),FRr.forEach(t),xNe=r(iFe," \u2014 "),E7=n(iFe,"A",{href:!0});var CRr=s(E7);kNe=r(CRr,"DebertaV2Config"),CRr.forEach(t),RNe=r(iFe," (DeBERTa-v2 model)"),iFe.forEach(t),SNe=i(T),dm=n(T,"LI",{});var dFe=s(dm);_H=n(dFe,"STRONG",{});var MRr=s(_H);PNe=r(MRr,"deit"),MRr.forEach(t),$Ne=r(dFe," \u2014 "),y7=n(dFe,"A",{href:!0});var ERr=s(y7);INe=r(ERr,"DeiTConfig"),ERr.forEach(t),NNe=r(dFe," (DeiT model)"),dFe.forEach(t),DNe=i(T),cm=n(T,"LI",{});var cFe=s(cm);uH=n(cFe,"STRONG",{});var yRr=s(uH);jNe=r(yRr,"detr"),yRr.forEach(t),qNe=r(cFe," \u2014 "),w7=n(cFe,"A",{href:!0});var wRr=s(w7);GNe=r(wRr,"DetrConfig"),wRr.forEach(t),ONe=r(cFe," (DETR model)"),cFe.forEach(t),XNe=i(T),fm=n(T,"LI",{});var fFe=s(fm);bH=n(fFe,"STRONG",{});var ARr=s(bH);VNe=r(ARr,"distilbert"),ARr.forEach(t),zNe=r(fFe," \u2014 "),A7=n(fFe,"A",{href:!0});var LRr=s(A7);WNe=r(LRr,"DistilBertConfig"),LRr.forEach(t),QNe=r(fFe," (DistilBERT model)"),fFe.forEach(t),HNe=i(T),mm=n(T,"LI",{});var mFe=s(mm);vH=n(mFe,"STRONG",{});var BRr=s(vH);UNe=r(BRr,"dpr"),BRr.forEach(t),JNe=r(mFe," \u2014 "),L7=n(mFe,"A",{href:!0});var xRr=s(L7);YNe=r(xRr,"DPRConfig"),xRr.forEach(t),KNe=r(mFe," (DPR model)"),mFe.forEach(t),ZNe=i(T),gm=n(T,"LI",{});var gFe=s(gm);TH=n(gFe,"STRONG",{});var kRr=s(TH);eDe=r(kRr,"dpt"),kRr.forEach(t),oDe=r(gFe," \u2014 "),B7=n(gFe,"A",{href:!0});var RRr=s(B7);rDe=r(RRr,"DPTConfig"),RRr.forEach(t),tDe=r(gFe," (DPT model)"),gFe.forEach(t),aDe=i(T),hm=n(T,"LI",{});var hFe=s(hm);FH=n(hFe,"STRONG",{});var SRr=s(FH);nDe=r(SRr,"electra"),SRr.forEach(t),sDe=r(hFe," \u2014 "),x7=n(hFe,"A",{href:!0});var PRr=s(x7);lDe=r(PRr,"ElectraConfig"),PRr.forEach(t),iDe=r(hFe," (ELECTRA model)"),hFe.forEach(t),dDe=i(T),pm=n(T,"LI",{});var pFe=s(pm);CH=n(pFe,"STRONG",{});var $Rr=s(CH);cDe=r($Rr,"encoder-decoder"),$Rr.forEach(t),fDe=r(pFe," \u2014 "),k7=n(pFe,"A",{href:!0});var IRr=s(k7);mDe=r(IRr,"EncoderDecoderConfig"),IRr.forEach(t),gDe=r(pFe," (Encoder decoder model)"),pFe.forEach(t),hDe=i(T),_m=n(T,"LI",{});var _Fe=s(_m);MH=n(_Fe,"STRONG",{});var NRr=s(MH);pDe=r(NRr,"flaubert"),NRr.forEach(t),_De=r(_Fe," \u2014 "),R7=n(_Fe,"A",{href:!0});var DRr=s(R7);uDe=r(DRr,"FlaubertConfig"),DRr.forEach(t),bDe=r(_Fe," (FlauBERT model)"),_Fe.forEach(t),vDe=i(T),um=n(T,"LI",{});var uFe=s(um);EH=n(uFe,"STRONG",{});var jRr=s(EH);TDe=r(jRr,"fnet"),jRr.forEach(t),FDe=r(uFe," \u2014 "),S7=n(uFe,"A",{href:!0});var qRr=s(S7);CDe=r(qRr,"FNetConfig"),qRr.forEach(t),MDe=r(uFe," (FNet model)"),uFe.forEach(t),EDe=i(T),bm=n(T,"LI",{});var bFe=s(bm);yH=n(bFe,"STRONG",{});var GRr=s(yH);yDe=r(GRr,"fsmt"),GRr.forEach(t),wDe=r(bFe," \u2014 "),P7=n(bFe,"A",{href:!0});var ORr=s(P7);ADe=r(ORr,"FSMTConfig"),ORr.forEach(t),LDe=r(bFe," (FairSeq Machine-Translation model)"),bFe.forEach(t),BDe=i(T),vm=n(T,"LI",{});var vFe=s(vm);wH=n(vFe,"STRONG",{});var XRr=s(wH);xDe=r(XRr,"funnel"),XRr.forEach(t),kDe=r(vFe," \u2014 "),$7=n(vFe,"A",{href:!0});var VRr=s($7);RDe=r(VRr,"FunnelConfig"),VRr.forEach(t),SDe=r(vFe," (Funnel Transformer model)"),vFe.forEach(t),PDe=i(T),Tm=n(T,"LI",{});var TFe=s(Tm);AH=n(TFe,"STRONG",{});var zRr=s(AH);$De=r(zRr,"glpn"),zRr.forEach(t),IDe=r(TFe," \u2014 "),I7=n(TFe,"A",{href:!0});var WRr=s(I7);NDe=r(WRr,"GLPNConfig"),WRr.forEach(t),DDe=r(TFe," (GLPN model)"),TFe.forEach(t),jDe=i(T),Fm=n(T,"LI",{});var FFe=s(Fm);LH=n(FFe,"STRONG",{});var QRr=s(LH);qDe=r(QRr,"gpt2"),QRr.forEach(t),GDe=r(FFe," \u2014 "),N7=n(FFe,"A",{href:!0});var HRr=s(N7);ODe=r(HRr,"GPT2Config"),HRr.forEach(t),XDe=r(FFe," (OpenAI GPT-2 model)"),FFe.forEach(t),VDe=i(T),Cm=n(T,"LI",{});var CFe=s(Cm);BH=n(CFe,"STRONG",{});var URr=s(BH);zDe=r(URr,"gpt_neo"),URr.forEach(t),WDe=r(CFe," \u2014 "),D7=n(CFe,"A",{href:!0});var JRr=s(D7);QDe=r(JRr,"GPTNeoConfig"),JRr.forEach(t),HDe=r(CFe," (GPT Neo model)"),CFe.forEach(t),UDe=i(T),Mm=n(T,"LI",{});var MFe=s(Mm);xH=n(MFe,"STRONG",{});var YRr=s(xH);JDe=r(YRr,"gptj"),YRr.forEach(t),YDe=r(MFe," \u2014 "),j7=n(MFe,"A",{href:!0});var KRr=s(j7);KDe=r(KRr,"GPTJConfig"),KRr.forEach(t),ZDe=r(MFe," (GPT-J model)"),MFe.forEach(t),eje=i(T),Em=n(T,"LI",{});var EFe=s(Em);kH=n(EFe,"STRONG",{});var ZRr=s(kH);oje=r(ZRr,"hubert"),ZRr.forEach(t),rje=r(EFe," \u2014 "),q7=n(EFe,"A",{href:!0});var eSr=s(q7);tje=r(eSr,"HubertConfig"),eSr.forEach(t),aje=r(EFe," (Hubert model)"),EFe.forEach(t),nje=i(T),ym=n(T,"LI",{});var yFe=s(ym);RH=n(yFe,"STRONG",{});var oSr=s(RH);sje=r(oSr,"ibert"),oSr.forEach(t),lje=r(yFe," \u2014 "),G7=n(yFe,"A",{href:!0});var rSr=s(G7);ije=r(rSr,"IBertConfig"),rSr.forEach(t),dje=r(yFe," (I-BERT model)"),yFe.forEach(t),cje=i(T),wm=n(T,"LI",{});var wFe=s(wm);SH=n(wFe,"STRONG",{});var tSr=s(SH);fje=r(tSr,"imagegpt"),tSr.forEach(t),mje=r(wFe," \u2014 "),O7=n(wFe,"A",{href:!0});var aSr=s(O7);gje=r(aSr,"ImageGPTConfig"),aSr.forEach(t),hje=r(wFe," (ImageGPT model)"),wFe.forEach(t),pje=i(T),Am=n(T,"LI",{});var AFe=s(Am);PH=n(AFe,"STRONG",{});var nSr=s(PH);_je=r(nSr,"layoutlm"),nSr.forEach(t),uje=r(AFe," \u2014 "),X7=n(AFe,"A",{href:!0});var sSr=s(X7);bje=r(sSr,"LayoutLMConfig"),sSr.forEach(t),vje=r(AFe," (LayoutLM model)"),AFe.forEach(t),Tje=i(T),Lm=n(T,"LI",{});var LFe=s(Lm);$H=n(LFe,"STRONG",{});var lSr=s($H);Fje=r(lSr,"layoutlmv2"),lSr.forEach(t),Cje=r(LFe," \u2014 "),V7=n(LFe,"A",{href:!0});var iSr=s(V7);Mje=r(iSr,"LayoutLMv2Config"),iSr.forEach(t),Eje=r(LFe," (LayoutLMv2 model)"),LFe.forEach(t),yje=i(T),Bm=n(T,"LI",{});var BFe=s(Bm);IH=n(BFe,"STRONG",{});var dSr=s(IH);wje=r(dSr,"led"),dSr.forEach(t),Aje=r(BFe," \u2014 "),z7=n(BFe,"A",{href:!0});var cSr=s(z7);Lje=r(cSr,"LEDConfig"),cSr.forEach(t),Bje=r(BFe," (LED model)"),BFe.forEach(t),xje=i(T),xm=n(T,"LI",{});var xFe=s(xm);NH=n(xFe,"STRONG",{});var fSr=s(NH);kje=r(fSr,"longformer"),fSr.forEach(t),Rje=r(xFe," \u2014 "),W7=n(xFe,"A",{href:!0});var mSr=s(W7);Sje=r(mSr,"LongformerConfig"),mSr.forEach(t),Pje=r(xFe," (Longformer model)"),xFe.forEach(t),$je=i(T),km=n(T,"LI",{});var kFe=s(km);DH=n(kFe,"STRONG",{});var gSr=s(DH);Ije=r(gSr,"luke"),gSr.forEach(t),Nje=r(kFe," \u2014 "),Q7=n(kFe,"A",{href:!0});var hSr=s(Q7);Dje=r(hSr,"LukeConfig"),hSr.forEach(t),jje=r(kFe," (LUKE model)"),kFe.forEach(t),qje=i(T),Rm=n(T,"LI",{});var RFe=s(Rm);jH=n(RFe,"STRONG",{});var pSr=s(jH);Gje=r(pSr,"lxmert"),pSr.forEach(t),Oje=r(RFe," \u2014 "),H7=n(RFe,"A",{href:!0});var _Sr=s(H7);Xje=r(_Sr,"LxmertConfig"),_Sr.forEach(t),Vje=r(RFe," (LXMERT model)"),RFe.forEach(t),zje=i(T),Sm=n(T,"LI",{});var SFe=s(Sm);qH=n(SFe,"STRONG",{});var uSr=s(qH);Wje=r(uSr,"m2m_100"),uSr.forEach(t),Qje=r(SFe," \u2014 "),U7=n(SFe,"A",{href:!0});var bSr=s(U7);Hje=r(bSr,"M2M100Config"),bSr.forEach(t),Uje=r(SFe," (M2M100 model)"),SFe.forEach(t),Jje=i(T),Pm=n(T,"LI",{});var PFe=s(Pm);GH=n(PFe,"STRONG",{});var vSr=s(GH);Yje=r(vSr,"marian"),vSr.forEach(t),Kje=r(PFe," \u2014 "),J7=n(PFe,"A",{href:!0});var TSr=s(J7);Zje=r(TSr,"MarianConfig"),TSr.forEach(t),eqe=r(PFe," (Marian model)"),PFe.forEach(t),oqe=i(T),$m=n(T,"LI",{});var $Fe=s($m);OH=n($Fe,"STRONG",{});var FSr=s(OH);rqe=r(FSr,"maskformer"),FSr.forEach(t),tqe=r($Fe," \u2014 "),Y7=n($Fe,"A",{href:!0});var CSr=s(Y7);aqe=r(CSr,"MaskFormerConfig"),CSr.forEach(t),nqe=r($Fe," (MaskFormer model)"),$Fe.forEach(t),sqe=i(T),Im=n(T,"LI",{});var IFe=s(Im);XH=n(IFe,"STRONG",{});var MSr=s(XH);lqe=r(MSr,"mbart"),MSr.forEach(t),iqe=r(IFe," \u2014 "),K7=n(IFe,"A",{href:!0});var ESr=s(K7);dqe=r(ESr,"MBartConfig"),ESr.forEach(t),cqe=r(IFe," (mBART model)"),IFe.forEach(t),fqe=i(T),Nm=n(T,"LI",{});var NFe=s(Nm);VH=n(NFe,"STRONG",{});var ySr=s(VH);mqe=r(ySr,"megatron-bert"),ySr.forEach(t),gqe=r(NFe," \u2014 "),Z7=n(NFe,"A",{href:!0});var wSr=s(Z7);hqe=r(wSr,"MegatronBertConfig"),wSr.forEach(t),pqe=r(NFe," (MegatronBert model)"),NFe.forEach(t),_qe=i(T),Dm=n(T,"LI",{});var DFe=s(Dm);zH=n(DFe,"STRONG",{});var ASr=s(zH);uqe=r(ASr,"mobilebert"),ASr.forEach(t),bqe=r(DFe," \u2014 "),eB=n(DFe,"A",{href:!0});var LSr=s(eB);vqe=r(LSr,"MobileBertConfig"),LSr.forEach(t),Tqe=r(DFe," (MobileBERT model)"),DFe.forEach(t),Fqe=i(T),jm=n(T,"LI",{});var jFe=s(jm);WH=n(jFe,"STRONG",{});var BSr=s(WH);Cqe=r(BSr,"mpnet"),BSr.forEach(t),Mqe=r(jFe," \u2014 "),oB=n(jFe,"A",{href:!0});var xSr=s(oB);Eqe=r(xSr,"MPNetConfig"),xSr.forEach(t),yqe=r(jFe," (MPNet model)"),jFe.forEach(t),wqe=i(T),qm=n(T,"LI",{});var qFe=s(qm);QH=n(qFe,"STRONG",{});var kSr=s(QH);Aqe=r(kSr,"mt5"),kSr.forEach(t),Lqe=r(qFe," \u2014 "),rB=n(qFe,"A",{href:!0});var RSr=s(rB);Bqe=r(RSr,"MT5Config"),RSr.forEach(t),xqe=r(qFe," (mT5 model)"),qFe.forEach(t),kqe=i(T),Gm=n(T,"LI",{});var GFe=s(Gm);HH=n(GFe,"STRONG",{});var SSr=s(HH);Rqe=r(SSr,"nystromformer"),SSr.forEach(t),Sqe=r(GFe," \u2014 "),tB=n(GFe,"A",{href:!0});var PSr=s(tB);Pqe=r(PSr,"NystromformerConfig"),PSr.forEach(t),$qe=r(GFe," (Nystromformer model)"),GFe.forEach(t),Iqe=i(T),Om=n(T,"LI",{});var OFe=s(Om);UH=n(OFe,"STRONG",{});var $Sr=s(UH);Nqe=r($Sr,"openai-gpt"),$Sr.forEach(t),Dqe=r(OFe," \u2014 "),aB=n(OFe,"A",{href:!0});var ISr=s(aB);jqe=r(ISr,"OpenAIGPTConfig"),ISr.forEach(t),qqe=r(OFe," (OpenAI GPT model)"),OFe.forEach(t),Gqe=i(T),Xm=n(T,"LI",{});var XFe=s(Xm);JH=n(XFe,"STRONG",{});var NSr=s(JH);Oqe=r(NSr,"pegasus"),NSr.forEach(t),Xqe=r(XFe," \u2014 "),nB=n(XFe,"A",{href:!0});var DSr=s(nB);Vqe=r(DSr,"PegasusConfig"),DSr.forEach(t),zqe=r(XFe," (Pegasus model)"),XFe.forEach(t),Wqe=i(T),Vm=n(T,"LI",{});var VFe=s(Vm);YH=n(VFe,"STRONG",{});var jSr=s(YH);Qqe=r(jSr,"perceiver"),jSr.forEach(t),Hqe=r(VFe," \u2014 "),sB=n(VFe,"A",{href:!0});var qSr=s(sB);Uqe=r(qSr,"PerceiverConfig"),qSr.forEach(t),Jqe=r(VFe," (Perceiver model)"),VFe.forEach(t),Yqe=i(T),zm=n(T,"LI",{});var zFe=s(zm);KH=n(zFe,"STRONG",{});var GSr=s(KH);Kqe=r(GSr,"plbart"),GSr.forEach(t),Zqe=r(zFe," \u2014 "),lB=n(zFe,"A",{href:!0});var OSr=s(lB);eGe=r(OSr,"PLBartConfig"),OSr.forEach(t),oGe=r(zFe," (PLBart model)"),zFe.forEach(t),rGe=i(T),Wm=n(T,"LI",{});var WFe=s(Wm);ZH=n(WFe,"STRONG",{});var XSr=s(ZH);tGe=r(XSr,"poolformer"),XSr.forEach(t),aGe=r(WFe," \u2014 "),iB=n(WFe,"A",{href:!0});var VSr=s(iB);nGe=r(VSr,"PoolFormerConfig"),VSr.forEach(t),sGe=r(WFe," (PoolFormer model)"),WFe.forEach(t),lGe=i(T),Qm=n(T,"LI",{});var QFe=s(Qm);eU=n(QFe,"STRONG",{});var zSr=s(eU);iGe=r(zSr,"prophetnet"),zSr.forEach(t),dGe=r(QFe," \u2014 "),dB=n(QFe,"A",{href:!0});var WSr=s(dB);cGe=r(WSr,"ProphetNetConfig"),WSr.forEach(t),fGe=r(QFe," (ProphetNet model)"),QFe.forEach(t),mGe=i(T),Hm=n(T,"LI",{});var HFe=s(Hm);oU=n(HFe,"STRONG",{});var QSr=s(oU);gGe=r(QSr,"qdqbert"),QSr.forEach(t),hGe=r(HFe," \u2014 "),cB=n(HFe,"A",{href:!0});var HSr=s(cB);pGe=r(HSr,"QDQBertConfig"),HSr.forEach(t),_Ge=r(HFe," (QDQBert model)"),HFe.forEach(t),uGe=i(T),Um=n(T,"LI",{});var UFe=s(Um);rU=n(UFe,"STRONG",{});var USr=s(rU);bGe=r(USr,"rag"),USr.forEach(t),vGe=r(UFe," \u2014 "),fB=n(UFe,"A",{href:!0});var JSr=s(fB);TGe=r(JSr,"RagConfig"),JSr.forEach(t),FGe=r(UFe," (RAG model)"),UFe.forEach(t),CGe=i(T),Jm=n(T,"LI",{});var JFe=s(Jm);tU=n(JFe,"STRONG",{});var YSr=s(tU);MGe=r(YSr,"realm"),YSr.forEach(t),EGe=r(JFe," \u2014 "),mB=n(JFe,"A",{href:!0});var KSr=s(mB);yGe=r(KSr,"RealmConfig"),KSr.forEach(t),wGe=r(JFe," (Realm model)"),JFe.forEach(t),AGe=i(T),Ym=n(T,"LI",{});var YFe=s(Ym);aU=n(YFe,"STRONG",{});var ZSr=s(aU);LGe=r(ZSr,"reformer"),ZSr.forEach(t),BGe=r(YFe," \u2014 "),gB=n(YFe,"A",{href:!0});var ePr=s(gB);xGe=r(ePr,"ReformerConfig"),ePr.forEach(t),kGe=r(YFe," (Reformer model)"),YFe.forEach(t),RGe=i(T),Km=n(T,"LI",{});var KFe=s(Km);nU=n(KFe,"STRONG",{});var oPr=s(nU);SGe=r(oPr,"rembert"),oPr.forEach(t),PGe=r(KFe," \u2014 "),hB=n(KFe,"A",{href:!0});var rPr=s(hB);$Ge=r(rPr,"RemBertConfig"),rPr.forEach(t),IGe=r(KFe," (RemBERT model)"),KFe.forEach(t),NGe=i(T),Zm=n(T,"LI",{});var ZFe=s(Zm);sU=n(ZFe,"STRONG",{});var tPr=s(sU);DGe=r(tPr,"resnet"),tPr.forEach(t),jGe=r(ZFe," \u2014 "),pB=n(ZFe,"A",{href:!0});var aPr=s(pB);qGe=r(aPr,"ResNetConfig"),aPr.forEach(t),GGe=r(ZFe," (ResNet model)"),ZFe.forEach(t),OGe=i(T),eg=n(T,"LI",{});var eCe=s(eg);lU=n(eCe,"STRONG",{});var nPr=s(lU);XGe=r(nPr,"retribert"),nPr.forEach(t),VGe=r(eCe," \u2014 "),_B=n(eCe,"A",{href:!0});var sPr=s(_B);zGe=r(sPr,"RetriBertConfig"),sPr.forEach(t),WGe=r(eCe," (RetriBERT model)"),eCe.forEach(t),QGe=i(T),og=n(T,"LI",{});var oCe=s(og);iU=n(oCe,"STRONG",{});var lPr=s(iU);HGe=r(lPr,"roberta"),lPr.forEach(t),UGe=r(oCe," \u2014 "),uB=n(oCe,"A",{href:!0});var iPr=s(uB);JGe=r(iPr,"RobertaConfig"),iPr.forEach(t),YGe=r(oCe," (RoBERTa model)"),oCe.forEach(t),KGe=i(T),rg=n(T,"LI",{});var rCe=s(rg);dU=n(rCe,"STRONG",{});var dPr=s(dU);ZGe=r(dPr,"roformer"),dPr.forEach(t),eOe=r(rCe," \u2014 "),bB=n(rCe,"A",{href:!0});var cPr=s(bB);oOe=r(cPr,"RoFormerConfig"),cPr.forEach(t),rOe=r(rCe," (RoFormer model)"),rCe.forEach(t),tOe=i(T),tg=n(T,"LI",{});var tCe=s(tg);cU=n(tCe,"STRONG",{});var fPr=s(cU);aOe=r(fPr,"segformer"),fPr.forEach(t),nOe=r(tCe," \u2014 "),vB=n(tCe,"A",{href:!0});var mPr=s(vB);sOe=r(mPr,"SegformerConfig"),mPr.forEach(t),lOe=r(tCe," (SegFormer model)"),tCe.forEach(t),iOe=i(T),ag=n(T,"LI",{});var aCe=s(ag);fU=n(aCe,"STRONG",{});var gPr=s(fU);dOe=r(gPr,"sew"),gPr.forEach(t),cOe=r(aCe," \u2014 "),TB=n(aCe,"A",{href:!0});var hPr=s(TB);fOe=r(hPr,"SEWConfig"),hPr.forEach(t),mOe=r(aCe," (SEW model)"),aCe.forEach(t),gOe=i(T),ng=n(T,"LI",{});var nCe=s(ng);mU=n(nCe,"STRONG",{});var pPr=s(mU);hOe=r(pPr,"sew-d"),pPr.forEach(t),pOe=r(nCe," \u2014 "),FB=n(nCe,"A",{href:!0});var _Pr=s(FB);_Oe=r(_Pr,"SEWDConfig"),_Pr.forEach(t),uOe=r(nCe," (SEW-D model)"),nCe.forEach(t),bOe=i(T),sg=n(T,"LI",{});var sCe=s(sg);gU=n(sCe,"STRONG",{});var uPr=s(gU);vOe=r(uPr,"speech-encoder-decoder"),uPr.forEach(t),TOe=r(sCe," \u2014 "),CB=n(sCe,"A",{href:!0});var bPr=s(CB);FOe=r(bPr,"SpeechEncoderDecoderConfig"),bPr.forEach(t),COe=r(sCe," (Speech Encoder decoder model)"),sCe.forEach(t),MOe=i(T),lg=n(T,"LI",{});var lCe=s(lg);hU=n(lCe,"STRONG",{});var vPr=s(hU);EOe=r(vPr,"speech_to_text"),vPr.forEach(t),yOe=r(lCe," \u2014 "),MB=n(lCe,"A",{href:!0});var TPr=s(MB);wOe=r(TPr,"Speech2TextConfig"),TPr.forEach(t),AOe=r(lCe," (Speech2Text model)"),lCe.forEach(t),LOe=i(T),ig=n(T,"LI",{});var iCe=s(ig);pU=n(iCe,"STRONG",{});var FPr=s(pU);BOe=r(FPr,"speech_to_text_2"),FPr.forEach(t),xOe=r(iCe," \u2014 "),EB=n(iCe,"A",{href:!0});var CPr=s(EB);kOe=r(CPr,"Speech2Text2Config"),CPr.forEach(t),ROe=r(iCe," (Speech2Text2 model)"),iCe.forEach(t),SOe=i(T),dg=n(T,"LI",{});var dCe=s(dg);_U=n(dCe,"STRONG",{});var MPr=s(_U);POe=r(MPr,"splinter"),MPr.forEach(t),$Oe=r(dCe," \u2014 "),yB=n(dCe,"A",{href:!0});var EPr=s(yB);IOe=r(EPr,"SplinterConfig"),EPr.forEach(t),NOe=r(dCe," (Splinter model)"),dCe.forEach(t),DOe=i(T),cg=n(T,"LI",{});var cCe=s(cg);uU=n(cCe,"STRONG",{});var yPr=s(uU);jOe=r(yPr,"squeezebert"),yPr.forEach(t),qOe=r(cCe," \u2014 "),wB=n(cCe,"A",{href:!0});var wPr=s(wB);GOe=r(wPr,"SqueezeBertConfig"),wPr.forEach(t),OOe=r(cCe," (SqueezeBERT model)"),cCe.forEach(t),XOe=i(T),fg=n(T,"LI",{});var fCe=s(fg);bU=n(fCe,"STRONG",{});var APr=s(bU);VOe=r(APr,"swin"),APr.forEach(t),zOe=r(fCe," \u2014 "),AB=n(fCe,"A",{href:!0});var LPr=s(AB);WOe=r(LPr,"SwinConfig"),LPr.forEach(t),QOe=r(fCe," (Swin model)"),fCe.forEach(t),HOe=i(T),mg=n(T,"LI",{});var mCe=s(mg);vU=n(mCe,"STRONG",{});var BPr=s(vU);UOe=r(BPr,"t5"),BPr.forEach(t),JOe=r(mCe," \u2014 "),LB=n(mCe,"A",{href:!0});var xPr=s(LB);YOe=r(xPr,"T5Config"),xPr.forEach(t),KOe=r(mCe," (T5 model)"),mCe.forEach(t),ZOe=i(T),gg=n(T,"LI",{});var gCe=s(gg);TU=n(gCe,"STRONG",{});var kPr=s(TU);eXe=r(kPr,"tapas"),kPr.forEach(t),oXe=r(gCe," \u2014 "),BB=n(gCe,"A",{href:!0});var RPr=s(BB);rXe=r(RPr,"TapasConfig"),RPr.forEach(t),tXe=r(gCe," (TAPAS model)"),gCe.forEach(t),aXe=i(T),hg=n(T,"LI",{});var hCe=s(hg);FU=n(hCe,"STRONG",{});var SPr=s(FU);nXe=r(SPr,"transfo-xl"),SPr.forEach(t),sXe=r(hCe," \u2014 "),xB=n(hCe,"A",{href:!0});var PPr=s(xB);lXe=r(PPr,"TransfoXLConfig"),PPr.forEach(t),iXe=r(hCe," (Transformer-XL model)"),hCe.forEach(t),dXe=i(T),pg=n(T,"LI",{});var pCe=s(pg);CU=n(pCe,"STRONG",{});var $Pr=s(CU);cXe=r($Pr,"trocr"),$Pr.forEach(t),fXe=r(pCe," \u2014 "),kB=n(pCe,"A",{href:!0});var IPr=s(kB);mXe=r(IPr,"TrOCRConfig"),IPr.forEach(t),gXe=r(pCe," (TrOCR model)"),pCe.forEach(t),hXe=i(T),_g=n(T,"LI",{});var _Ce=s(_g);MU=n(_Ce,"STRONG",{});var NPr=s(MU);pXe=r(NPr,"unispeech"),NPr.forEach(t),_Xe=r(_Ce," \u2014 "),RB=n(_Ce,"A",{href:!0});var DPr=s(RB);uXe=r(DPr,"UniSpeechConfig"),DPr.forEach(t),bXe=r(_Ce," (UniSpeech model)"),_Ce.forEach(t),vXe=i(T),ug=n(T,"LI",{});var uCe=s(ug);EU=n(uCe,"STRONG",{});var jPr=s(EU);TXe=r(jPr,"unispeech-sat"),jPr.forEach(t),FXe=r(uCe," \u2014 "),SB=n(uCe,"A",{href:!0});var qPr=s(SB);CXe=r(qPr,"UniSpeechSatConfig"),qPr.forEach(t),MXe=r(uCe," (UniSpeechSat model)"),uCe.forEach(t),EXe=i(T),bg=n(T,"LI",{});var bCe=s(bg);yU=n(bCe,"STRONG",{});var GPr=s(yU);yXe=r(GPr,"van"),GPr.forEach(t),wXe=r(bCe," \u2014 "),PB=n(bCe,"A",{href:!0});var OPr=s(PB);AXe=r(OPr,"VanConfig"),OPr.forEach(t),LXe=r(bCe," (VAN model)"),bCe.forEach(t),BXe=i(T),vg=n(T,"LI",{});var vCe=s(vg);wU=n(vCe,"STRONG",{});var XPr=s(wU);xXe=r(XPr,"vilt"),XPr.forEach(t),kXe=r(vCe," \u2014 "),$B=n(vCe,"A",{href:!0});var VPr=s($B);RXe=r(VPr,"ViltConfig"),VPr.forEach(t),SXe=r(vCe," (ViLT model)"),vCe.forEach(t),PXe=i(T),Tg=n(T,"LI",{});var TCe=s(Tg);AU=n(TCe,"STRONG",{});var zPr=s(AU);$Xe=r(zPr,"vision-encoder-decoder"),zPr.forEach(t),IXe=r(TCe," \u2014 "),IB=n(TCe,"A",{href:!0});var WPr=s(IB);NXe=r(WPr,"VisionEncoderDecoderConfig"),WPr.forEach(t),DXe=r(TCe," (Vision Encoder decoder model)"),TCe.forEach(t),jXe=i(T),Fg=n(T,"LI",{});var FCe=s(Fg);LU=n(FCe,"STRONG",{});var QPr=s(LU);qXe=r(QPr,"vision-text-dual-encoder"),QPr.forEach(t),GXe=r(FCe," \u2014 "),NB=n(FCe,"A",{href:!0});var HPr=s(NB);OXe=r(HPr,"VisionTextDualEncoderConfig"),HPr.forEach(t),XXe=r(FCe," (VisionTextDualEncoder model)"),FCe.forEach(t),VXe=i(T),Cg=n(T,"LI",{});var CCe=s(Cg);BU=n(CCe,"STRONG",{});var UPr=s(BU);zXe=r(UPr,"visual_bert"),UPr.forEach(t),WXe=r(CCe," \u2014 "),DB=n(CCe,"A",{href:!0});var JPr=s(DB);QXe=r(JPr,"VisualBertConfig"),JPr.forEach(t),HXe=r(CCe," (VisualBert model)"),CCe.forEach(t),UXe=i(T),Mg=n(T,"LI",{});var MCe=s(Mg);xU=n(MCe,"STRONG",{});var YPr=s(xU);JXe=r(YPr,"vit"),YPr.forEach(t),YXe=r(MCe," \u2014 "),jB=n(MCe,"A",{href:!0});var KPr=s(jB);KXe=r(KPr,"ViTConfig"),KPr.forEach(t),ZXe=r(MCe," (ViT model)"),MCe.forEach(t),eVe=i(T),Eg=n(T,"LI",{});var ECe=s(Eg);kU=n(ECe,"STRONG",{});var ZPr=s(kU);oVe=r(ZPr,"vit_mae"),ZPr.forEach(t),rVe=r(ECe," \u2014 "),qB=n(ECe,"A",{href:!0});var e$r=s(qB);tVe=r(e$r,"ViTMAEConfig"),e$r.forEach(t),aVe=r(ECe," (ViTMAE model)"),ECe.forEach(t),nVe=i(T),yg=n(T,"LI",{});var yCe=s(yg);RU=n(yCe,"STRONG",{});var o$r=s(RU);sVe=r(o$r,"wav2vec2"),o$r.forEach(t),lVe=r(yCe," \u2014 "),GB=n(yCe,"A",{href:!0});var r$r=s(GB);iVe=r(r$r,"Wav2Vec2Config"),r$r.forEach(t),dVe=r(yCe," (Wav2Vec2 model)"),yCe.forEach(t),cVe=i(T),wg=n(T,"LI",{});var wCe=s(wg);SU=n(wCe,"STRONG",{});var t$r=s(SU);fVe=r(t$r,"wavlm"),t$r.forEach(t),mVe=r(wCe," \u2014 "),OB=n(wCe,"A",{href:!0});var a$r=s(OB);gVe=r(a$r,"WavLMConfig"),a$r.forEach(t),hVe=r(wCe," (WavLM model)"),wCe.forEach(t),pVe=i(T),Ag=n(T,"LI",{});var ACe=s(Ag);PU=n(ACe,"STRONG",{});var n$r=s(PU);_Ve=r(n$r,"xglm"),n$r.forEach(t),uVe=r(ACe," \u2014 "),XB=n(ACe,"A",{href:!0});var s$r=s(XB);bVe=r(s$r,"XGLMConfig"),s$r.forEach(t),vVe=r(ACe," (XGLM model)"),ACe.forEach(t),TVe=i(T),Lg=n(T,"LI",{});var LCe=s(Lg);$U=n(LCe,"STRONG",{});var l$r=s($U);FVe=r(l$r,"xlm"),l$r.forEach(t),CVe=r(LCe," \u2014 "),VB=n(LCe,"A",{href:!0});var i$r=s(VB);MVe=r(i$r,"XLMConfig"),i$r.forEach(t),EVe=r(LCe," (XLM model)"),LCe.forEach(t),yVe=i(T),Bg=n(T,"LI",{});var BCe=s(Bg);IU=n(BCe,"STRONG",{});var d$r=s(IU);wVe=r(d$r,"xlm-prophetnet"),d$r.forEach(t),AVe=r(BCe," \u2014 "),zB=n(BCe,"A",{href:!0});var c$r=s(zB);LVe=r(c$r,"XLMProphetNetConfig"),c$r.forEach(t),BVe=r(BCe," (XLMProphetNet model)"),BCe.forEach(t),xVe=i(T),xg=n(T,"LI",{});var xCe=s(xg);NU=n(xCe,"STRONG",{});var f$r=s(NU);kVe=r(f$r,"xlm-roberta"),f$r.forEach(t),RVe=r(xCe," \u2014 "),WB=n(xCe,"A",{href:!0});var m$r=s(WB);SVe=r(m$r,"XLMRobertaConfig"),m$r.forEach(t),PVe=r(xCe," (XLM-RoBERTa model)"),xCe.forEach(t),$Ve=i(T),kg=n(T,"LI",{});var kCe=s(kg);DU=n(kCe,"STRONG",{});var g$r=s(DU);IVe=r(g$r,"xlm-roberta-xl"),g$r.forEach(t),NVe=r(kCe," \u2014 "),QB=n(kCe,"A",{href:!0});var h$r=s(QB);DVe=r(h$r,"XLMRobertaXLConfig"),h$r.forEach(t),jVe=r(kCe," (XLM-RoBERTa-XL model)"),kCe.forEach(t),qVe=i(T),Rg=n(T,"LI",{});var RCe=s(Rg);jU=n(RCe,"STRONG",{});var p$r=s(jU);GVe=r(p$r,"xlnet"),p$r.forEach(t),OVe=r(RCe," \u2014 "),HB=n(RCe,"A",{href:!0});var _$r=s(HB);XVe=r(_$r,"XLNetConfig"),_$r.forEach(t),VVe=r(RCe," (XLNet model)"),RCe.forEach(t),zVe=i(T),Sg=n(T,"LI",{});var SCe=s(Sg);qU=n(SCe,"STRONG",{});var u$r=s(qU);WVe=r(u$r,"yoso"),u$r.forEach(t),QVe=r(SCe," \u2014 "),UB=n(SCe,"A",{href:!0});var b$r=s(UB);HVe=r(b$r,"YosoConfig"),b$r.forEach(t),UVe=r(SCe," (YOSO model)"),SCe.forEach(t),T.forEach(t),JVe=i(ga),GU=n(ga,"P",{});var v$r=s(GU);YVe=r(v$r,"Examples:"),v$r.forEach(t),KVe=i(ga),m(b3.$$.fragment,ga),ga.forEach(t),ZVe=i(Os),Pg=n(Os,"DIV",{class:!0});var hSe=s(Pg);m(v3.$$.fragment,hSe),eze=i(hSe),OU=n(hSe,"P",{});var T$r=s(OU);oze=r(T$r,"Register a new configuration for this class."),T$r.forEach(t),hSe.forEach(t),Os.forEach(t),mke=i(c),Qi=n(c,"H2",{class:!0});var pSe=s(Qi);$g=n(pSe,"A",{id:!0,class:!0,href:!0});var F$r=s($g);XU=n(F$r,"SPAN",{});var C$r=s(XU);m(T3.$$.fragment,C$r),C$r.forEach(t),F$r.forEach(t),rze=i(pSe),VU=n(pSe,"SPAN",{});var M$r=s(VU);tze=r(M$r,"AutoTokenizer"),M$r.forEach(t),pSe.forEach(t),gke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(F3.$$.fragment,Xs),aze=i(Xs),C3=n(Xs,"P",{});var _Se=s(C3);nze=r(_Se,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JB=n(_Se,"A",{href:!0});var E$r=s(JB);sze=r(E$r,"AutoTokenizer.from_pretrained()"),E$r.forEach(t),lze=r(_Se," class method."),_Se.forEach(t),ize=i(Xs),M3=n(Xs,"P",{});var uSe=s(M3);dze=r(uSe,"This class cannot be instantiated directly using "),zU=n(uSe,"CODE",{});var y$r=s(zU);cze=r(y$r,"__init__()"),y$r.forEach(t),fze=r(uSe," (throws an error)."),uSe.forEach(t),mze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(E3.$$.fragment,ha),gze=i(ha),WU=n(ha,"P",{});var w$r=s(WU);hze=r(w$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),w$r.forEach(t),pze=i(ha),Oa=n(ha,"P",{});var dE=s(Oa);_ze=r(dE,"The tokenizer class to instantiate is selected based on the "),QU=n(dE,"CODE",{});var A$r=s(QU);uze=r(A$r,"model_type"),A$r.forEach(t),bze=r(dE,` property of the config object (either
passed as an argument or loaded from `),HU=n(dE,"CODE",{});var L$r=s(HU);vze=r(L$r,"pretrained_model_name_or_path"),L$r.forEach(t),Tze=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UU=n(dE,"CODE",{});var B$r=s(UU);Fze=r(B$r,"pretrained_model_name_or_path"),B$r.forEach(t),Cze=r(dE,":"),dE.forEach(t),Mze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var t8=s(Wn);JU=n(t8,"STRONG",{});var x$r=s(JU);Eze=r(x$r,"albert"),x$r.forEach(t),yze=r(t8," \u2014 "),YB=n(t8,"A",{href:!0});var k$r=s(YB);wze=r(k$r,"AlbertTokenizer"),k$r.forEach(t),Aze=r(t8," or "),KB=n(t8,"A",{href:!0});var R$r=s(KB);Lze=r(R$r,"AlbertTokenizerFast"),R$r.forEach(t),Bze=r(t8," (ALBERT model)"),t8.forEach(t),xze=i(y),Qn=n(y,"LI",{});var a8=s(Qn);YU=n(a8,"STRONG",{});var S$r=s(YU);kze=r(S$r,"bart"),S$r.forEach(t),Rze=r(a8," \u2014 "),ZB=n(a8,"A",{href:!0});var P$r=s(ZB);Sze=r(P$r,"BartTokenizer"),P$r.forEach(t),Pze=r(a8," or "),ex=n(a8,"A",{href:!0});var $$r=s(ex);$ze=r($$r,"BartTokenizerFast"),$$r.forEach(t),Ize=r(a8," (BART model)"),a8.forEach(t),Nze=i(y),Hn=n(y,"LI",{});var n8=s(Hn);KU=n(n8,"STRONG",{});var I$r=s(KU);Dze=r(I$r,"barthez"),I$r.forEach(t),jze=r(n8," \u2014 "),ox=n(n8,"A",{href:!0});var N$r=s(ox);qze=r(N$r,"BarthezTokenizer"),N$r.forEach(t),Gze=r(n8," or "),rx=n(n8,"A",{href:!0});var D$r=s(rx);Oze=r(D$r,"BarthezTokenizerFast"),D$r.forEach(t),Xze=r(n8," (BARThez model)"),n8.forEach(t),Vze=i(y),Ig=n(y,"LI",{});var PCe=s(Ig);ZU=n(PCe,"STRONG",{});var j$r=s(ZU);zze=r(j$r,"bartpho"),j$r.forEach(t),Wze=r(PCe," \u2014 "),tx=n(PCe,"A",{href:!0});var q$r=s(tx);Qze=r(q$r,"BartphoTokenizer"),q$r.forEach(t),Hze=r(PCe," (BARTpho model)"),PCe.forEach(t),Uze=i(y),Un=n(y,"LI",{});var s8=s(Un);eJ=n(s8,"STRONG",{});var G$r=s(eJ);Jze=r(G$r,"bert"),G$r.forEach(t),Yze=r(s8," \u2014 "),ax=n(s8,"A",{href:!0});var O$r=s(ax);Kze=r(O$r,"BertTokenizer"),O$r.forEach(t),Zze=r(s8," or "),nx=n(s8,"A",{href:!0});var X$r=s(nx);eWe=r(X$r,"BertTokenizerFast"),X$r.forEach(t),oWe=r(s8," (BERT model)"),s8.forEach(t),rWe=i(y),Ng=n(y,"LI",{});var $Ce=s(Ng);oJ=n($Ce,"STRONG",{});var V$r=s(oJ);tWe=r(V$r,"bert-generation"),V$r.forEach(t),aWe=r($Ce," \u2014 "),sx=n($Ce,"A",{href:!0});var z$r=s(sx);nWe=r(z$r,"BertGenerationTokenizer"),z$r.forEach(t),sWe=r($Ce," (Bert Generation model)"),$Ce.forEach(t),lWe=i(y),Dg=n(y,"LI",{});var ICe=s(Dg);rJ=n(ICe,"STRONG",{});var W$r=s(rJ);iWe=r(W$r,"bert-japanese"),W$r.forEach(t),dWe=r(ICe," \u2014 "),lx=n(ICe,"A",{href:!0});var Q$r=s(lx);cWe=r(Q$r,"BertJapaneseTokenizer"),Q$r.forEach(t),fWe=r(ICe," (BertJapanese model)"),ICe.forEach(t),mWe=i(y),jg=n(y,"LI",{});var NCe=s(jg);tJ=n(NCe,"STRONG",{});var H$r=s(tJ);gWe=r(H$r,"bertweet"),H$r.forEach(t),hWe=r(NCe," \u2014 "),ix=n(NCe,"A",{href:!0});var U$r=s(ix);pWe=r(U$r,"BertweetTokenizer"),U$r.forEach(t),_We=r(NCe," (Bertweet model)"),NCe.forEach(t),uWe=i(y),Jn=n(y,"LI",{});var l8=s(Jn);aJ=n(l8,"STRONG",{});var J$r=s(aJ);bWe=r(J$r,"big_bird"),J$r.forEach(t),vWe=r(l8," \u2014 "),dx=n(l8,"A",{href:!0});var Y$r=s(dx);TWe=r(Y$r,"BigBirdTokenizer"),Y$r.forEach(t),FWe=r(l8," or "),cx=n(l8,"A",{href:!0});var K$r=s(cx);CWe=r(K$r,"BigBirdTokenizerFast"),K$r.forEach(t),MWe=r(l8," (BigBird model)"),l8.forEach(t),EWe=i(y),Yn=n(y,"LI",{});var i8=s(Yn);nJ=n(i8,"STRONG",{});var Z$r=s(nJ);yWe=r(Z$r,"bigbird_pegasus"),Z$r.forEach(t),wWe=r(i8," \u2014 "),fx=n(i8,"A",{href:!0});var eIr=s(fx);AWe=r(eIr,"PegasusTokenizer"),eIr.forEach(t),LWe=r(i8," or "),mx=n(i8,"A",{href:!0});var oIr=s(mx);BWe=r(oIr,"PegasusTokenizerFast"),oIr.forEach(t),xWe=r(i8," (BigBirdPegasus model)"),i8.forEach(t),kWe=i(y),Kn=n(y,"LI",{});var d8=s(Kn);sJ=n(d8,"STRONG",{});var rIr=s(sJ);RWe=r(rIr,"blenderbot"),rIr.forEach(t),SWe=r(d8," \u2014 "),gx=n(d8,"A",{href:!0});var tIr=s(gx);PWe=r(tIr,"BlenderbotTokenizer"),tIr.forEach(t),$We=r(d8," or "),hx=n(d8,"A",{href:!0});var aIr=s(hx);IWe=r(aIr,"BlenderbotTokenizerFast"),aIr.forEach(t),NWe=r(d8," (Blenderbot model)"),d8.forEach(t),DWe=i(y),qg=n(y,"LI",{});var DCe=s(qg);lJ=n(DCe,"STRONG",{});var nIr=s(lJ);jWe=r(nIr,"blenderbot-small"),nIr.forEach(t),qWe=r(DCe," \u2014 "),px=n(DCe,"A",{href:!0});var sIr=s(px);GWe=r(sIr,"BlenderbotSmallTokenizer"),sIr.forEach(t),OWe=r(DCe," (BlenderbotSmall model)"),DCe.forEach(t),XWe=i(y),Gg=n(y,"LI",{});var jCe=s(Gg);iJ=n(jCe,"STRONG",{});var lIr=s(iJ);VWe=r(lIr,"byt5"),lIr.forEach(t),zWe=r(jCe," \u2014 "),_x=n(jCe,"A",{href:!0});var iIr=s(_x);WWe=r(iIr,"ByT5Tokenizer"),iIr.forEach(t),QWe=r(jCe," (ByT5 model)"),jCe.forEach(t),HWe=i(y),Zn=n(y,"LI",{});var c8=s(Zn);dJ=n(c8,"STRONG",{});var dIr=s(dJ);UWe=r(dIr,"camembert"),dIr.forEach(t),JWe=r(c8," \u2014 "),ux=n(c8,"A",{href:!0});var cIr=s(ux);YWe=r(cIr,"CamembertTokenizer"),cIr.forEach(t),KWe=r(c8," or "),bx=n(c8,"A",{href:!0});var fIr=s(bx);ZWe=r(fIr,"CamembertTokenizerFast"),fIr.forEach(t),eQe=r(c8," (CamemBERT model)"),c8.forEach(t),oQe=i(y),Og=n(y,"LI",{});var qCe=s(Og);cJ=n(qCe,"STRONG",{});var mIr=s(cJ);rQe=r(mIr,"canine"),mIr.forEach(t),tQe=r(qCe," \u2014 "),vx=n(qCe,"A",{href:!0});var gIr=s(vx);aQe=r(gIr,"CanineTokenizer"),gIr.forEach(t),nQe=r(qCe," (Canine model)"),qCe.forEach(t),sQe=i(y),es=n(y,"LI",{});var f8=s(es);fJ=n(f8,"STRONG",{});var hIr=s(fJ);lQe=r(hIr,"clip"),hIr.forEach(t),iQe=r(f8," \u2014 "),Tx=n(f8,"A",{href:!0});var pIr=s(Tx);dQe=r(pIr,"CLIPTokenizer"),pIr.forEach(t),cQe=r(f8," or "),Fx=n(f8,"A",{href:!0});var _Ir=s(Fx);fQe=r(_Ir,"CLIPTokenizerFast"),_Ir.forEach(t),mQe=r(f8," (CLIP model)"),f8.forEach(t),gQe=i(y),os=n(y,"LI",{});var m8=s(os);mJ=n(m8,"STRONG",{});var uIr=s(mJ);hQe=r(uIr,"convbert"),uIr.forEach(t),pQe=r(m8," \u2014 "),Cx=n(m8,"A",{href:!0});var bIr=s(Cx);_Qe=r(bIr,"ConvBertTokenizer"),bIr.forEach(t),uQe=r(m8," or "),Mx=n(m8,"A",{href:!0});var vIr=s(Mx);bQe=r(vIr,"ConvBertTokenizerFast"),vIr.forEach(t),vQe=r(m8," (ConvBERT model)"),m8.forEach(t),TQe=i(y),rs=n(y,"LI",{});var g8=s(rs);gJ=n(g8,"STRONG",{});var TIr=s(gJ);FQe=r(TIr,"cpm"),TIr.forEach(t),CQe=r(g8," \u2014 "),Ex=n(g8,"A",{href:!0});var FIr=s(Ex);MQe=r(FIr,"CpmTokenizer"),FIr.forEach(t),EQe=r(g8," or "),hJ=n(g8,"CODE",{});var CIr=s(hJ);yQe=r(CIr,"CpmTokenizerFast"),CIr.forEach(t),wQe=r(g8," (CPM model)"),g8.forEach(t),AQe=i(y),Xg=n(y,"LI",{});var GCe=s(Xg);pJ=n(GCe,"STRONG",{});var MIr=s(pJ);LQe=r(MIr,"ctrl"),MIr.forEach(t),BQe=r(GCe," \u2014 "),yx=n(GCe,"A",{href:!0});var EIr=s(yx);xQe=r(EIr,"CTRLTokenizer"),EIr.forEach(t),kQe=r(GCe," (CTRL model)"),GCe.forEach(t),RQe=i(y),ts=n(y,"LI",{});var h8=s(ts);_J=n(h8,"STRONG",{});var yIr=s(_J);SQe=r(yIr,"deberta"),yIr.forEach(t),PQe=r(h8," \u2014 "),wx=n(h8,"A",{href:!0});var wIr=s(wx);$Qe=r(wIr,"DebertaTokenizer"),wIr.forEach(t),IQe=r(h8," or "),Ax=n(h8,"A",{href:!0});var AIr=s(Ax);NQe=r(AIr,"DebertaTokenizerFast"),AIr.forEach(t),DQe=r(h8," (DeBERTa model)"),h8.forEach(t),jQe=i(y),Vg=n(y,"LI",{});var OCe=s(Vg);uJ=n(OCe,"STRONG",{});var LIr=s(uJ);qQe=r(LIr,"deberta-v2"),LIr.forEach(t),GQe=r(OCe," \u2014 "),Lx=n(OCe,"A",{href:!0});var BIr=s(Lx);OQe=r(BIr,"DebertaV2Tokenizer"),BIr.forEach(t),XQe=r(OCe," (DeBERTa-v2 model)"),OCe.forEach(t),VQe=i(y),as=n(y,"LI",{});var p8=s(as);bJ=n(p8,"STRONG",{});var xIr=s(bJ);zQe=r(xIr,"distilbert"),xIr.forEach(t),WQe=r(p8," \u2014 "),Bx=n(p8,"A",{href:!0});var kIr=s(Bx);QQe=r(kIr,"DistilBertTokenizer"),kIr.forEach(t),HQe=r(p8," or "),xx=n(p8,"A",{href:!0});var RIr=s(xx);UQe=r(RIr,"DistilBertTokenizerFast"),RIr.forEach(t),JQe=r(p8," (DistilBERT model)"),p8.forEach(t),YQe=i(y),ns=n(y,"LI",{});var _8=s(ns);vJ=n(_8,"STRONG",{});var SIr=s(vJ);KQe=r(SIr,"dpr"),SIr.forEach(t),ZQe=r(_8," \u2014 "),kx=n(_8,"A",{href:!0});var PIr=s(kx);eHe=r(PIr,"DPRQuestionEncoderTokenizer"),PIr.forEach(t),oHe=r(_8," or "),Rx=n(_8,"A",{href:!0});var $Ir=s(Rx);rHe=r($Ir,"DPRQuestionEncoderTokenizerFast"),$Ir.forEach(t),tHe=r(_8," (DPR model)"),_8.forEach(t),aHe=i(y),ss=n(y,"LI",{});var u8=s(ss);TJ=n(u8,"STRONG",{});var IIr=s(TJ);nHe=r(IIr,"electra"),IIr.forEach(t),sHe=r(u8," \u2014 "),Sx=n(u8,"A",{href:!0});var NIr=s(Sx);lHe=r(NIr,"ElectraTokenizer"),NIr.forEach(t),iHe=r(u8," or "),Px=n(u8,"A",{href:!0});var DIr=s(Px);dHe=r(DIr,"ElectraTokenizerFast"),DIr.forEach(t),cHe=r(u8," (ELECTRA model)"),u8.forEach(t),fHe=i(y),zg=n(y,"LI",{});var XCe=s(zg);FJ=n(XCe,"STRONG",{});var jIr=s(FJ);mHe=r(jIr,"flaubert"),jIr.forEach(t),gHe=r(XCe," \u2014 "),$x=n(XCe,"A",{href:!0});var qIr=s($x);hHe=r(qIr,"FlaubertTokenizer"),qIr.forEach(t),pHe=r(XCe," (FlauBERT model)"),XCe.forEach(t),_He=i(y),ls=n(y,"LI",{});var b8=s(ls);CJ=n(b8,"STRONG",{});var GIr=s(CJ);uHe=r(GIr,"fnet"),GIr.forEach(t),bHe=r(b8," \u2014 "),Ix=n(b8,"A",{href:!0});var OIr=s(Ix);vHe=r(OIr,"FNetTokenizer"),OIr.forEach(t),THe=r(b8," or "),Nx=n(b8,"A",{href:!0});var XIr=s(Nx);FHe=r(XIr,"FNetTokenizerFast"),XIr.forEach(t),CHe=r(b8," (FNet model)"),b8.forEach(t),MHe=i(y),Wg=n(y,"LI",{});var VCe=s(Wg);MJ=n(VCe,"STRONG",{});var VIr=s(MJ);EHe=r(VIr,"fsmt"),VIr.forEach(t),yHe=r(VCe," \u2014 "),Dx=n(VCe,"A",{href:!0});var zIr=s(Dx);wHe=r(zIr,"FSMTTokenizer"),zIr.forEach(t),AHe=r(VCe," (FairSeq Machine-Translation model)"),VCe.forEach(t),LHe=i(y),is=n(y,"LI",{});var v8=s(is);EJ=n(v8,"STRONG",{});var WIr=s(EJ);BHe=r(WIr,"funnel"),WIr.forEach(t),xHe=r(v8," \u2014 "),jx=n(v8,"A",{href:!0});var QIr=s(jx);kHe=r(QIr,"FunnelTokenizer"),QIr.forEach(t),RHe=r(v8," or "),qx=n(v8,"A",{href:!0});var HIr=s(qx);SHe=r(HIr,"FunnelTokenizerFast"),HIr.forEach(t),PHe=r(v8," (Funnel Transformer model)"),v8.forEach(t),$He=i(y),ds=n(y,"LI",{});var T8=s(ds);yJ=n(T8,"STRONG",{});var UIr=s(yJ);IHe=r(UIr,"gpt2"),UIr.forEach(t),NHe=r(T8," \u2014 "),Gx=n(T8,"A",{href:!0});var JIr=s(Gx);DHe=r(JIr,"GPT2Tokenizer"),JIr.forEach(t),jHe=r(T8," or "),Ox=n(T8,"A",{href:!0});var YIr=s(Ox);qHe=r(YIr,"GPT2TokenizerFast"),YIr.forEach(t),GHe=r(T8," (OpenAI GPT-2 model)"),T8.forEach(t),OHe=i(y),cs=n(y,"LI",{});var F8=s(cs);wJ=n(F8,"STRONG",{});var KIr=s(wJ);XHe=r(KIr,"gpt_neo"),KIr.forEach(t),VHe=r(F8," \u2014 "),Xx=n(F8,"A",{href:!0});var ZIr=s(Xx);zHe=r(ZIr,"GPT2Tokenizer"),ZIr.forEach(t),WHe=r(F8," or "),Vx=n(F8,"A",{href:!0});var eNr=s(Vx);QHe=r(eNr,"GPT2TokenizerFast"),eNr.forEach(t),HHe=r(F8," (GPT Neo model)"),F8.forEach(t),UHe=i(y),fs=n(y,"LI",{});var C8=s(fs);AJ=n(C8,"STRONG",{});var oNr=s(AJ);JHe=r(oNr,"herbert"),oNr.forEach(t),YHe=r(C8," \u2014 "),zx=n(C8,"A",{href:!0});var rNr=s(zx);KHe=r(rNr,"HerbertTokenizer"),rNr.forEach(t),ZHe=r(C8," or "),Wx=n(C8,"A",{href:!0});var tNr=s(Wx);eUe=r(tNr,"HerbertTokenizerFast"),tNr.forEach(t),oUe=r(C8," (HerBERT model)"),C8.forEach(t),rUe=i(y),Qg=n(y,"LI",{});var zCe=s(Qg);LJ=n(zCe,"STRONG",{});var aNr=s(LJ);tUe=r(aNr,"hubert"),aNr.forEach(t),aUe=r(zCe," \u2014 "),Qx=n(zCe,"A",{href:!0});var nNr=s(Qx);nUe=r(nNr,"Wav2Vec2CTCTokenizer"),nNr.forEach(t),sUe=r(zCe," (Hubert model)"),zCe.forEach(t),lUe=i(y),ms=n(y,"LI",{});var M8=s(ms);BJ=n(M8,"STRONG",{});var sNr=s(BJ);iUe=r(sNr,"ibert"),sNr.forEach(t),dUe=r(M8," \u2014 "),Hx=n(M8,"A",{href:!0});var lNr=s(Hx);cUe=r(lNr,"RobertaTokenizer"),lNr.forEach(t),fUe=r(M8," or "),Ux=n(M8,"A",{href:!0});var iNr=s(Ux);mUe=r(iNr,"RobertaTokenizerFast"),iNr.forEach(t),gUe=r(M8," (I-BERT model)"),M8.forEach(t),hUe=i(y),gs=n(y,"LI",{});var E8=s(gs);xJ=n(E8,"STRONG",{});var dNr=s(xJ);pUe=r(dNr,"layoutlm"),dNr.forEach(t),_Ue=r(E8," \u2014 "),Jx=n(E8,"A",{href:!0});var cNr=s(Jx);uUe=r(cNr,"LayoutLMTokenizer"),cNr.forEach(t),bUe=r(E8," or "),Yx=n(E8,"A",{href:!0});var fNr=s(Yx);vUe=r(fNr,"LayoutLMTokenizerFast"),fNr.forEach(t),TUe=r(E8," (LayoutLM model)"),E8.forEach(t),FUe=i(y),hs=n(y,"LI",{});var y8=s(hs);kJ=n(y8,"STRONG",{});var mNr=s(kJ);CUe=r(mNr,"layoutlmv2"),mNr.forEach(t),MUe=r(y8," \u2014 "),Kx=n(y8,"A",{href:!0});var gNr=s(Kx);EUe=r(gNr,"LayoutLMv2Tokenizer"),gNr.forEach(t),yUe=r(y8," or "),Zx=n(y8,"A",{href:!0});var hNr=s(Zx);wUe=r(hNr,"LayoutLMv2TokenizerFast"),hNr.forEach(t),AUe=r(y8," (LayoutLMv2 model)"),y8.forEach(t),LUe=i(y),ps=n(y,"LI",{});var w8=s(ps);RJ=n(w8,"STRONG",{});var pNr=s(RJ);BUe=r(pNr,"layoutxlm"),pNr.forEach(t),xUe=r(w8," \u2014 "),ek=n(w8,"A",{href:!0});var _Nr=s(ek);kUe=r(_Nr,"LayoutXLMTokenizer"),_Nr.forEach(t),RUe=r(w8," or "),ok=n(w8,"A",{href:!0});var uNr=s(ok);SUe=r(uNr,"LayoutXLMTokenizerFast"),uNr.forEach(t),PUe=r(w8," (LayoutXLM model)"),w8.forEach(t),$Ue=i(y),_s=n(y,"LI",{});var A8=s(_s);SJ=n(A8,"STRONG",{});var bNr=s(SJ);IUe=r(bNr,"led"),bNr.forEach(t),NUe=r(A8," \u2014 "),rk=n(A8,"A",{href:!0});var vNr=s(rk);DUe=r(vNr,"LEDTokenizer"),vNr.forEach(t),jUe=r(A8," or "),tk=n(A8,"A",{href:!0});var TNr=s(tk);qUe=r(TNr,"LEDTokenizerFast"),TNr.forEach(t),GUe=r(A8," (LED model)"),A8.forEach(t),OUe=i(y),us=n(y,"LI",{});var L8=s(us);PJ=n(L8,"STRONG",{});var FNr=s(PJ);XUe=r(FNr,"longformer"),FNr.forEach(t),VUe=r(L8," \u2014 "),ak=n(L8,"A",{href:!0});var CNr=s(ak);zUe=r(CNr,"LongformerTokenizer"),CNr.forEach(t),WUe=r(L8," or "),nk=n(L8,"A",{href:!0});var MNr=s(nk);QUe=r(MNr,"LongformerTokenizerFast"),MNr.forEach(t),HUe=r(L8," (Longformer model)"),L8.forEach(t),UUe=i(y),Hg=n(y,"LI",{});var WCe=s(Hg);$J=n(WCe,"STRONG",{});var ENr=s($J);JUe=r(ENr,"luke"),ENr.forEach(t),YUe=r(WCe," \u2014 "),sk=n(WCe,"A",{href:!0});var yNr=s(sk);KUe=r(yNr,"LukeTokenizer"),yNr.forEach(t),ZUe=r(WCe," (LUKE model)"),WCe.forEach(t),eJe=i(y),bs=n(y,"LI",{});var B8=s(bs);IJ=n(B8,"STRONG",{});var wNr=s(IJ);oJe=r(wNr,"lxmert"),wNr.forEach(t),rJe=r(B8," \u2014 "),lk=n(B8,"A",{href:!0});var ANr=s(lk);tJe=r(ANr,"LxmertTokenizer"),ANr.forEach(t),aJe=r(B8," or "),ik=n(B8,"A",{href:!0});var LNr=s(ik);nJe=r(LNr,"LxmertTokenizerFast"),LNr.forEach(t),sJe=r(B8," (LXMERT model)"),B8.forEach(t),lJe=i(y),Ug=n(y,"LI",{});var QCe=s(Ug);NJ=n(QCe,"STRONG",{});var BNr=s(NJ);iJe=r(BNr,"m2m_100"),BNr.forEach(t),dJe=r(QCe," \u2014 "),dk=n(QCe,"A",{href:!0});var xNr=s(dk);cJe=r(xNr,"M2M100Tokenizer"),xNr.forEach(t),fJe=r(QCe," (M2M100 model)"),QCe.forEach(t),mJe=i(y),Jg=n(y,"LI",{});var HCe=s(Jg);DJ=n(HCe,"STRONG",{});var kNr=s(DJ);gJe=r(kNr,"marian"),kNr.forEach(t),hJe=r(HCe," \u2014 "),ck=n(HCe,"A",{href:!0});var RNr=s(ck);pJe=r(RNr,"MarianTokenizer"),RNr.forEach(t),_Je=r(HCe," (Marian model)"),HCe.forEach(t),uJe=i(y),vs=n(y,"LI",{});var x8=s(vs);jJ=n(x8,"STRONG",{});var SNr=s(jJ);bJe=r(SNr,"mbart"),SNr.forEach(t),vJe=r(x8," \u2014 "),fk=n(x8,"A",{href:!0});var PNr=s(fk);TJe=r(PNr,"MBartTokenizer"),PNr.forEach(t),FJe=r(x8," or "),mk=n(x8,"A",{href:!0});var $Nr=s(mk);CJe=r($Nr,"MBartTokenizerFast"),$Nr.forEach(t),MJe=r(x8," (mBART model)"),x8.forEach(t),EJe=i(y),Ts=n(y,"LI",{});var k8=s(Ts);qJ=n(k8,"STRONG",{});var INr=s(qJ);yJe=r(INr,"mbart50"),INr.forEach(t),wJe=r(k8," \u2014 "),gk=n(k8,"A",{href:!0});var NNr=s(gk);AJe=r(NNr,"MBart50Tokenizer"),NNr.forEach(t),LJe=r(k8," or "),hk=n(k8,"A",{href:!0});var DNr=s(hk);BJe=r(DNr,"MBart50TokenizerFast"),DNr.forEach(t),xJe=r(k8," (mBART-50 model)"),k8.forEach(t),kJe=i(y),Yg=n(y,"LI",{});var UCe=s(Yg);GJ=n(UCe,"STRONG",{});var jNr=s(GJ);RJe=r(jNr,"mluke"),jNr.forEach(t),SJe=r(UCe," \u2014 "),pk=n(UCe,"A",{href:!0});var qNr=s(pk);PJe=r(qNr,"MLukeTokenizer"),qNr.forEach(t),$Je=r(UCe," (mLUKE model)"),UCe.forEach(t),IJe=i(y),Fs=n(y,"LI",{});var R8=s(Fs);OJ=n(R8,"STRONG",{});var GNr=s(OJ);NJe=r(GNr,"mobilebert"),GNr.forEach(t),DJe=r(R8," \u2014 "),_k=n(R8,"A",{href:!0});var ONr=s(_k);jJe=r(ONr,"MobileBertTokenizer"),ONr.forEach(t),qJe=r(R8," or "),uk=n(R8,"A",{href:!0});var XNr=s(uk);GJe=r(XNr,"MobileBertTokenizerFast"),XNr.forEach(t),OJe=r(R8," (MobileBERT model)"),R8.forEach(t),XJe=i(y),Cs=n(y,"LI",{});var S8=s(Cs);XJ=n(S8,"STRONG",{});var VNr=s(XJ);VJe=r(VNr,"mpnet"),VNr.forEach(t),zJe=r(S8," \u2014 "),bk=n(S8,"A",{href:!0});var zNr=s(bk);WJe=r(zNr,"MPNetTokenizer"),zNr.forEach(t),QJe=r(S8," or "),vk=n(S8,"A",{href:!0});var WNr=s(vk);HJe=r(WNr,"MPNetTokenizerFast"),WNr.forEach(t),UJe=r(S8," (MPNet model)"),S8.forEach(t),JJe=i(y),Ms=n(y,"LI",{});var P8=s(Ms);VJ=n(P8,"STRONG",{});var QNr=s(VJ);YJe=r(QNr,"mt5"),QNr.forEach(t),KJe=r(P8," \u2014 "),Tk=n(P8,"A",{href:!0});var HNr=s(Tk);ZJe=r(HNr,"MT5Tokenizer"),HNr.forEach(t),eYe=r(P8," or "),Fk=n(P8,"A",{href:!0});var UNr=s(Fk);oYe=r(UNr,"MT5TokenizerFast"),UNr.forEach(t),rYe=r(P8," (mT5 model)"),P8.forEach(t),tYe=i(y),Es=n(y,"LI",{});var $8=s(Es);zJ=n($8,"STRONG",{});var JNr=s(zJ);aYe=r(JNr,"openai-gpt"),JNr.forEach(t),nYe=r($8," \u2014 "),Ck=n($8,"A",{href:!0});var YNr=s(Ck);sYe=r(YNr,"OpenAIGPTTokenizer"),YNr.forEach(t),lYe=r($8," or "),Mk=n($8,"A",{href:!0});var KNr=s(Mk);iYe=r(KNr,"OpenAIGPTTokenizerFast"),KNr.forEach(t),dYe=r($8," (OpenAI GPT model)"),$8.forEach(t),cYe=i(y),ys=n(y,"LI",{});var I8=s(ys);WJ=n(I8,"STRONG",{});var ZNr=s(WJ);fYe=r(ZNr,"pegasus"),ZNr.forEach(t),mYe=r(I8," \u2014 "),Ek=n(I8,"A",{href:!0});var eDr=s(Ek);gYe=r(eDr,"PegasusTokenizer"),eDr.forEach(t),hYe=r(I8," or "),yk=n(I8,"A",{href:!0});var oDr=s(yk);pYe=r(oDr,"PegasusTokenizerFast"),oDr.forEach(t),_Ye=r(I8," (Pegasus model)"),I8.forEach(t),uYe=i(y),Kg=n(y,"LI",{});var JCe=s(Kg);QJ=n(JCe,"STRONG",{});var rDr=s(QJ);bYe=r(rDr,"perceiver"),rDr.forEach(t),vYe=r(JCe," \u2014 "),wk=n(JCe,"A",{href:!0});var tDr=s(wk);TYe=r(tDr,"PerceiverTokenizer"),tDr.forEach(t),FYe=r(JCe," (Perceiver model)"),JCe.forEach(t),CYe=i(y),Zg=n(y,"LI",{});var YCe=s(Zg);HJ=n(YCe,"STRONG",{});var aDr=s(HJ);MYe=r(aDr,"phobert"),aDr.forEach(t),EYe=r(YCe," \u2014 "),Ak=n(YCe,"A",{href:!0});var nDr=s(Ak);yYe=r(nDr,"PhobertTokenizer"),nDr.forEach(t),wYe=r(YCe," (PhoBERT model)"),YCe.forEach(t),AYe=i(y),eh=n(y,"LI",{});var KCe=s(eh);UJ=n(KCe,"STRONG",{});var sDr=s(UJ);LYe=r(sDr,"plbart"),sDr.forEach(t),BYe=r(KCe," \u2014 "),Lk=n(KCe,"A",{href:!0});var lDr=s(Lk);xYe=r(lDr,"PLBartTokenizer"),lDr.forEach(t),kYe=r(KCe," (PLBart model)"),KCe.forEach(t),RYe=i(y),oh=n(y,"LI",{});var ZCe=s(oh);JJ=n(ZCe,"STRONG",{});var iDr=s(JJ);SYe=r(iDr,"prophetnet"),iDr.forEach(t),PYe=r(ZCe," \u2014 "),Bk=n(ZCe,"A",{href:!0});var dDr=s(Bk);$Ye=r(dDr,"ProphetNetTokenizer"),dDr.forEach(t),IYe=r(ZCe," (ProphetNet model)"),ZCe.forEach(t),NYe=i(y),ws=n(y,"LI",{});var N8=s(ws);YJ=n(N8,"STRONG",{});var cDr=s(YJ);DYe=r(cDr,"qdqbert"),cDr.forEach(t),jYe=r(N8," \u2014 "),xk=n(N8,"A",{href:!0});var fDr=s(xk);qYe=r(fDr,"BertTokenizer"),fDr.forEach(t),GYe=r(N8," or "),kk=n(N8,"A",{href:!0});var mDr=s(kk);OYe=r(mDr,"BertTokenizerFast"),mDr.forEach(t),XYe=r(N8," (QDQBert model)"),N8.forEach(t),VYe=i(y),rh=n(y,"LI",{});var eMe=s(rh);KJ=n(eMe,"STRONG",{});var gDr=s(KJ);zYe=r(gDr,"rag"),gDr.forEach(t),WYe=r(eMe," \u2014 "),Rk=n(eMe,"A",{href:!0});var hDr=s(Rk);QYe=r(hDr,"RagTokenizer"),hDr.forEach(t),HYe=r(eMe," (RAG model)"),eMe.forEach(t),UYe=i(y),As=n(y,"LI",{});var D8=s(As);ZJ=n(D8,"STRONG",{});var pDr=s(ZJ);JYe=r(pDr,"realm"),pDr.forEach(t),YYe=r(D8," \u2014 "),Sk=n(D8,"A",{href:!0});var _Dr=s(Sk);KYe=r(_Dr,"RealmTokenizer"),_Dr.forEach(t),ZYe=r(D8," or "),Pk=n(D8,"A",{href:!0});var uDr=s(Pk);eKe=r(uDr,"RealmTokenizerFast"),uDr.forEach(t),oKe=r(D8," (Realm model)"),D8.forEach(t),rKe=i(y),Ls=n(y,"LI",{});var j8=s(Ls);eY=n(j8,"STRONG",{});var bDr=s(eY);tKe=r(bDr,"reformer"),bDr.forEach(t),aKe=r(j8," \u2014 "),$k=n(j8,"A",{href:!0});var vDr=s($k);nKe=r(vDr,"ReformerTokenizer"),vDr.forEach(t),sKe=r(j8," or "),Ik=n(j8,"A",{href:!0});var TDr=s(Ik);lKe=r(TDr,"ReformerTokenizerFast"),TDr.forEach(t),iKe=r(j8," (Reformer model)"),j8.forEach(t),dKe=i(y),Bs=n(y,"LI",{});var q8=s(Bs);oY=n(q8,"STRONG",{});var FDr=s(oY);cKe=r(FDr,"rembert"),FDr.forEach(t),fKe=r(q8," \u2014 "),Nk=n(q8,"A",{href:!0});var CDr=s(Nk);mKe=r(CDr,"RemBertTokenizer"),CDr.forEach(t),gKe=r(q8," or "),Dk=n(q8,"A",{href:!0});var MDr=s(Dk);hKe=r(MDr,"RemBertTokenizerFast"),MDr.forEach(t),pKe=r(q8," (RemBERT model)"),q8.forEach(t),_Ke=i(y),xs=n(y,"LI",{});var G8=s(xs);rY=n(G8,"STRONG",{});var EDr=s(rY);uKe=r(EDr,"retribert"),EDr.forEach(t),bKe=r(G8," \u2014 "),jk=n(G8,"A",{href:!0});var yDr=s(jk);vKe=r(yDr,"RetriBertTokenizer"),yDr.forEach(t),TKe=r(G8," or "),qk=n(G8,"A",{href:!0});var wDr=s(qk);FKe=r(wDr,"RetriBertTokenizerFast"),wDr.forEach(t),CKe=r(G8," (RetriBERT model)"),G8.forEach(t),MKe=i(y),ks=n(y,"LI",{});var O8=s(ks);tY=n(O8,"STRONG",{});var ADr=s(tY);EKe=r(ADr,"roberta"),ADr.forEach(t),yKe=r(O8," \u2014 "),Gk=n(O8,"A",{href:!0});var LDr=s(Gk);wKe=r(LDr,"RobertaTokenizer"),LDr.forEach(t),AKe=r(O8," or "),Ok=n(O8,"A",{href:!0});var BDr=s(Ok);LKe=r(BDr,"RobertaTokenizerFast"),BDr.forEach(t),BKe=r(O8," (RoBERTa model)"),O8.forEach(t),xKe=i(y),Rs=n(y,"LI",{});var X8=s(Rs);aY=n(X8,"STRONG",{});var xDr=s(aY);kKe=r(xDr,"roformer"),xDr.forEach(t),RKe=r(X8," \u2014 "),Xk=n(X8,"A",{href:!0});var kDr=s(Xk);SKe=r(kDr,"RoFormerTokenizer"),kDr.forEach(t),PKe=r(X8," or "),Vk=n(X8,"A",{href:!0});var RDr=s(Vk);$Ke=r(RDr,"RoFormerTokenizerFast"),RDr.forEach(t),IKe=r(X8," (RoFormer model)"),X8.forEach(t),NKe=i(y),th=n(y,"LI",{});var oMe=s(th);nY=n(oMe,"STRONG",{});var SDr=s(nY);DKe=r(SDr,"speech_to_text"),SDr.forEach(t),jKe=r(oMe," \u2014 "),zk=n(oMe,"A",{href:!0});var PDr=s(zk);qKe=r(PDr,"Speech2TextTokenizer"),PDr.forEach(t),GKe=r(oMe," (Speech2Text model)"),oMe.forEach(t),OKe=i(y),ah=n(y,"LI",{});var rMe=s(ah);sY=n(rMe,"STRONG",{});var $Dr=s(sY);XKe=r($Dr,"speech_to_text_2"),$Dr.forEach(t),VKe=r(rMe," \u2014 "),Wk=n(rMe,"A",{href:!0});var IDr=s(Wk);zKe=r(IDr,"Speech2Text2Tokenizer"),IDr.forEach(t),WKe=r(rMe," (Speech2Text2 model)"),rMe.forEach(t),QKe=i(y),Ss=n(y,"LI",{});var V8=s(Ss);lY=n(V8,"STRONG",{});var NDr=s(lY);HKe=r(NDr,"splinter"),NDr.forEach(t),UKe=r(V8," \u2014 "),Qk=n(V8,"A",{href:!0});var DDr=s(Qk);JKe=r(DDr,"SplinterTokenizer"),DDr.forEach(t),YKe=r(V8," or "),Hk=n(V8,"A",{href:!0});var jDr=s(Hk);KKe=r(jDr,"SplinterTokenizerFast"),jDr.forEach(t),ZKe=r(V8," (Splinter model)"),V8.forEach(t),eZe=i(y),Ps=n(y,"LI",{});var z8=s(Ps);iY=n(z8,"STRONG",{});var qDr=s(iY);oZe=r(qDr,"squeezebert"),qDr.forEach(t),rZe=r(z8," \u2014 "),Uk=n(z8,"A",{href:!0});var GDr=s(Uk);tZe=r(GDr,"SqueezeBertTokenizer"),GDr.forEach(t),aZe=r(z8," or "),Jk=n(z8,"A",{href:!0});var ODr=s(Jk);nZe=r(ODr,"SqueezeBertTokenizerFast"),ODr.forEach(t),sZe=r(z8," (SqueezeBERT model)"),z8.forEach(t),lZe=i(y),$s=n(y,"LI",{});var W8=s($s);dY=n(W8,"STRONG",{});var XDr=s(dY);iZe=r(XDr,"t5"),XDr.forEach(t),dZe=r(W8," \u2014 "),Yk=n(W8,"A",{href:!0});var VDr=s(Yk);cZe=r(VDr,"T5Tokenizer"),VDr.forEach(t),fZe=r(W8," or "),Kk=n(W8,"A",{href:!0});var zDr=s(Kk);mZe=r(zDr,"T5TokenizerFast"),zDr.forEach(t),gZe=r(W8," (T5 model)"),W8.forEach(t),hZe=i(y),nh=n(y,"LI",{});var tMe=s(nh);cY=n(tMe,"STRONG",{});var WDr=s(cY);pZe=r(WDr,"tapas"),WDr.forEach(t),_Ze=r(tMe," \u2014 "),Zk=n(tMe,"A",{href:!0});var QDr=s(Zk);uZe=r(QDr,"TapasTokenizer"),QDr.forEach(t),bZe=r(tMe," (TAPAS model)"),tMe.forEach(t),vZe=i(y),sh=n(y,"LI",{});var aMe=s(sh);fY=n(aMe,"STRONG",{});var HDr=s(fY);TZe=r(HDr,"transfo-xl"),HDr.forEach(t),FZe=r(aMe," \u2014 "),eR=n(aMe,"A",{href:!0});var UDr=s(eR);CZe=r(UDr,"TransfoXLTokenizer"),UDr.forEach(t),MZe=r(aMe," (Transformer-XL model)"),aMe.forEach(t),EZe=i(y),lh=n(y,"LI",{});var nMe=s(lh);mY=n(nMe,"STRONG",{});var JDr=s(mY);yZe=r(JDr,"wav2vec2"),JDr.forEach(t),wZe=r(nMe," \u2014 "),oR=n(nMe,"A",{href:!0});var YDr=s(oR);AZe=r(YDr,"Wav2Vec2CTCTokenizer"),YDr.forEach(t),LZe=r(nMe," (Wav2Vec2 model)"),nMe.forEach(t),BZe=i(y),ih=n(y,"LI",{});var sMe=s(ih);gY=n(sMe,"STRONG",{});var KDr=s(gY);xZe=r(KDr,"wav2vec2_phoneme"),KDr.forEach(t),kZe=r(sMe," \u2014 "),rR=n(sMe,"A",{href:!0});var ZDr=s(rR);RZe=r(ZDr,"Wav2Vec2PhonemeCTCTokenizer"),ZDr.forEach(t),SZe=r(sMe," (Wav2Vec2Phoneme model)"),sMe.forEach(t),PZe=i(y),Is=n(y,"LI",{});var Q8=s(Is);hY=n(Q8,"STRONG",{});var ejr=s(hY);$Ze=r(ejr,"xglm"),ejr.forEach(t),IZe=r(Q8," \u2014 "),tR=n(Q8,"A",{href:!0});var ojr=s(tR);NZe=r(ojr,"XGLMTokenizer"),ojr.forEach(t),DZe=r(Q8," or "),aR=n(Q8,"A",{href:!0});var rjr=s(aR);jZe=r(rjr,"XGLMTokenizerFast"),rjr.forEach(t),qZe=r(Q8," (XGLM model)"),Q8.forEach(t),GZe=i(y),dh=n(y,"LI",{});var lMe=s(dh);pY=n(lMe,"STRONG",{});var tjr=s(pY);OZe=r(tjr,"xlm"),tjr.forEach(t),XZe=r(lMe," \u2014 "),nR=n(lMe,"A",{href:!0});var ajr=s(nR);VZe=r(ajr,"XLMTokenizer"),ajr.forEach(t),zZe=r(lMe," (XLM model)"),lMe.forEach(t),WZe=i(y),ch=n(y,"LI",{});var iMe=s(ch);_Y=n(iMe,"STRONG",{});var njr=s(_Y);QZe=r(njr,"xlm-prophetnet"),njr.forEach(t),HZe=r(iMe," \u2014 "),sR=n(iMe,"A",{href:!0});var sjr=s(sR);UZe=r(sjr,"XLMProphetNetTokenizer"),sjr.forEach(t),JZe=r(iMe," (XLMProphetNet model)"),iMe.forEach(t),YZe=i(y),Ns=n(y,"LI",{});var H8=s(Ns);uY=n(H8,"STRONG",{});var ljr=s(uY);KZe=r(ljr,"xlm-roberta"),ljr.forEach(t),ZZe=r(H8," \u2014 "),lR=n(H8,"A",{href:!0});var ijr=s(lR);eeo=r(ijr,"XLMRobertaTokenizer"),ijr.forEach(t),oeo=r(H8," or "),iR=n(H8,"A",{href:!0});var djr=s(iR);reo=r(djr,"XLMRobertaTokenizerFast"),djr.forEach(t),teo=r(H8," (XLM-RoBERTa model)"),H8.forEach(t),aeo=i(y),Ds=n(y,"LI",{});var U8=s(Ds);bY=n(U8,"STRONG",{});var cjr=s(bY);neo=r(cjr,"xlnet"),cjr.forEach(t),seo=r(U8," \u2014 "),dR=n(U8,"A",{href:!0});var fjr=s(dR);leo=r(fjr,"XLNetTokenizer"),fjr.forEach(t),ieo=r(U8," or "),cR=n(U8,"A",{href:!0});var mjr=s(cR);deo=r(mjr,"XLNetTokenizerFast"),mjr.forEach(t),ceo=r(U8," (XLNet model)"),U8.forEach(t),y.forEach(t),feo=i(ha),vY=n(ha,"P",{});var gjr=s(vY);meo=r(gjr,"Examples:"),gjr.forEach(t),geo=i(ha),m(y3.$$.fragment,ha),ha.forEach(t),heo=i(Xs),fh=n(Xs,"DIV",{class:!0});var bSe=s(fh);m(w3.$$.fragment,bSe),peo=i(bSe),TY=n(bSe,"P",{});var hjr=s(TY);_eo=r(hjr,"Register a new tokenizer in this mapping."),hjr.forEach(t),bSe.forEach(t),Xs.forEach(t),hke=i(c),Hi=n(c,"H2",{class:!0});var vSe=s(Hi);mh=n(vSe,"A",{id:!0,class:!0,href:!0});var pjr=s(mh);FY=n(pjr,"SPAN",{});var _jr=s(FY);m(A3.$$.fragment,_jr),_jr.forEach(t),pjr.forEach(t),ueo=i(vSe),CY=n(vSe,"SPAN",{});var ujr=s(CY);beo=r(ujr,"AutoFeatureExtractor"),ujr.forEach(t),vSe.forEach(t),pke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(L3.$$.fragment,Vs),veo=i(Vs),B3=n(Vs,"P",{});var TSe=s(B3);Teo=r(TSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fR=n(TSe,"A",{href:!0});var bjr=s(fR);Feo=r(bjr,"AutoFeatureExtractor.from_pretrained()"),bjr.forEach(t),Ceo=r(TSe," class method."),TSe.forEach(t),Meo=i(Vs),x3=n(Vs,"P",{});var FSe=s(x3);Eeo=r(FSe,"This class cannot be instantiated directly using "),MY=n(FSe,"CODE",{});var vjr=s(MY);yeo=r(vjr,"__init__()"),vjr.forEach(t),weo=r(FSe," (throws an error)."),FSe.forEach(t),Aeo=i(Vs),Ie=n(Vs,"DIV",{class:!0});var Dt=s(Ie);m(k3.$$.fragment,Dt),Leo=i(Dt),EY=n(Dt,"P",{});var Tjr=s(EY);Beo=r(Tjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Tjr.forEach(t),xeo=i(Dt),Xa=n(Dt,"P",{});var cE=s(Xa);keo=r(cE,"The feature extractor class to instantiate is selected based on the "),yY=n(cE,"CODE",{});var Fjr=s(yY);Reo=r(Fjr,"model_type"),Fjr.forEach(t),Seo=r(cE,` property of the config object
(either passed as an argument or loaded from `),wY=n(cE,"CODE",{});var Cjr=s(wY);Peo=r(Cjr,"pretrained_model_name_or_path"),Cjr.forEach(t),$eo=r(cE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),AY=n(cE,"CODE",{});var Mjr=s(AY);Ieo=r(Mjr,"pretrained_model_name_or_path"),Mjr.forEach(t),Neo=r(cE,":"),cE.forEach(t),Deo=i(Dt),re=n(Dt,"UL",{});var ne=s(re);gh=n(ne,"LI",{});var dMe=s(gh);LY=n(dMe,"STRONG",{});var Ejr=s(LY);jeo=r(Ejr,"beit"),Ejr.forEach(t),qeo=r(dMe," \u2014 "),mR=n(dMe,"A",{href:!0});var yjr=s(mR);Geo=r(yjr,"BeitFeatureExtractor"),yjr.forEach(t),Oeo=r(dMe," (BEiT model)"),dMe.forEach(t),Xeo=i(ne),hh=n(ne,"LI",{});var cMe=s(hh);BY=n(cMe,"STRONG",{});var wjr=s(BY);Veo=r(wjr,"clip"),wjr.forEach(t),zeo=r(cMe," \u2014 "),gR=n(cMe,"A",{href:!0});var Ajr=s(gR);Weo=r(Ajr,"CLIPFeatureExtractor"),Ajr.forEach(t),Qeo=r(cMe," (CLIP model)"),cMe.forEach(t),Heo=i(ne),ph=n(ne,"LI",{});var fMe=s(ph);xY=n(fMe,"STRONG",{});var Ljr=s(xY);Ueo=r(Ljr,"convnext"),Ljr.forEach(t),Jeo=r(fMe," \u2014 "),hR=n(fMe,"A",{href:!0});var Bjr=s(hR);Yeo=r(Bjr,"ConvNextFeatureExtractor"),Bjr.forEach(t),Keo=r(fMe," (ConvNext model)"),fMe.forEach(t),Zeo=i(ne),_h=n(ne,"LI",{});var mMe=s(_h);kY=n(mMe,"STRONG",{});var xjr=s(kY);eoo=r(xjr,"deit"),xjr.forEach(t),ooo=r(mMe," \u2014 "),pR=n(mMe,"A",{href:!0});var kjr=s(pR);roo=r(kjr,"DeiTFeatureExtractor"),kjr.forEach(t),too=r(mMe," (DeiT model)"),mMe.forEach(t),aoo=i(ne),uh=n(ne,"LI",{});var gMe=s(uh);RY=n(gMe,"STRONG",{});var Rjr=s(RY);noo=r(Rjr,"detr"),Rjr.forEach(t),soo=r(gMe," \u2014 "),_R=n(gMe,"A",{href:!0});var Sjr=s(_R);loo=r(Sjr,"DetrFeatureExtractor"),Sjr.forEach(t),ioo=r(gMe," (DETR model)"),gMe.forEach(t),doo=i(ne),bh=n(ne,"LI",{});var hMe=s(bh);SY=n(hMe,"STRONG",{});var Pjr=s(SY);coo=r(Pjr,"hubert"),Pjr.forEach(t),foo=r(hMe," \u2014 "),uR=n(hMe,"A",{href:!0});var $jr=s(uR);moo=r($jr,"Wav2Vec2FeatureExtractor"),$jr.forEach(t),goo=r(hMe," (Hubert model)"),hMe.forEach(t),hoo=i(ne),vh=n(ne,"LI",{});var pMe=s(vh);PY=n(pMe,"STRONG",{});var Ijr=s(PY);poo=r(Ijr,"layoutlmv2"),Ijr.forEach(t),_oo=r(pMe," \u2014 "),bR=n(pMe,"A",{href:!0});var Njr=s(bR);uoo=r(Njr,"LayoutLMv2FeatureExtractor"),Njr.forEach(t),boo=r(pMe," (LayoutLMv2 model)"),pMe.forEach(t),voo=i(ne),Th=n(ne,"LI",{});var _Me=s(Th);$Y=n(_Me,"STRONG",{});var Djr=s($Y);Too=r(Djr,"maskformer"),Djr.forEach(t),Foo=r(_Me," \u2014 "),vR=n(_Me,"A",{href:!0});var jjr=s(vR);Coo=r(jjr,"MaskFormerFeatureExtractor"),jjr.forEach(t),Moo=r(_Me," (MaskFormer model)"),_Me.forEach(t),Eoo=i(ne),Fh=n(ne,"LI",{});var uMe=s(Fh);IY=n(uMe,"STRONG",{});var qjr=s(IY);yoo=r(qjr,"perceiver"),qjr.forEach(t),woo=r(uMe," \u2014 "),TR=n(uMe,"A",{href:!0});var Gjr=s(TR);Aoo=r(Gjr,"PerceiverFeatureExtractor"),Gjr.forEach(t),Loo=r(uMe," (Perceiver model)"),uMe.forEach(t),Boo=i(ne),Ch=n(ne,"LI",{});var bMe=s(Ch);NY=n(bMe,"STRONG",{});var Ojr=s(NY);xoo=r(Ojr,"poolformer"),Ojr.forEach(t),koo=r(bMe," \u2014 "),FR=n(bMe,"A",{href:!0});var Xjr=s(FR);Roo=r(Xjr,"PoolFormerFeatureExtractor"),Xjr.forEach(t),Soo=r(bMe," (PoolFormer model)"),bMe.forEach(t),Poo=i(ne),Mh=n(ne,"LI",{});var vMe=s(Mh);DY=n(vMe,"STRONG",{});var Vjr=s(DY);$oo=r(Vjr,"resnet"),Vjr.forEach(t),Ioo=r(vMe," \u2014 "),CR=n(vMe,"A",{href:!0});var zjr=s(CR);Noo=r(zjr,"ConvNextFeatureExtractor"),zjr.forEach(t),Doo=r(vMe," (ResNet model)"),vMe.forEach(t),joo=i(ne),Eh=n(ne,"LI",{});var TMe=s(Eh);jY=n(TMe,"STRONG",{});var Wjr=s(jY);qoo=r(Wjr,"segformer"),Wjr.forEach(t),Goo=r(TMe," \u2014 "),MR=n(TMe,"A",{href:!0});var Qjr=s(MR);Ooo=r(Qjr,"SegformerFeatureExtractor"),Qjr.forEach(t),Xoo=r(TMe," (SegFormer model)"),TMe.forEach(t),Voo=i(ne),yh=n(ne,"LI",{});var FMe=s(yh);qY=n(FMe,"STRONG",{});var Hjr=s(qY);zoo=r(Hjr,"speech_to_text"),Hjr.forEach(t),Woo=r(FMe," \u2014 "),ER=n(FMe,"A",{href:!0});var Ujr=s(ER);Qoo=r(Ujr,"Speech2TextFeatureExtractor"),Ujr.forEach(t),Hoo=r(FMe," (Speech2Text model)"),FMe.forEach(t),Uoo=i(ne),wh=n(ne,"LI",{});var CMe=s(wh);GY=n(CMe,"STRONG",{});var Jjr=s(GY);Joo=r(Jjr,"swin"),Jjr.forEach(t),Yoo=r(CMe," \u2014 "),yR=n(CMe,"A",{href:!0});var Yjr=s(yR);Koo=r(Yjr,"ViTFeatureExtractor"),Yjr.forEach(t),Zoo=r(CMe," (Swin model)"),CMe.forEach(t),ero=i(ne),Ah=n(ne,"LI",{});var MMe=s(Ah);OY=n(MMe,"STRONG",{});var Kjr=s(OY);oro=r(Kjr,"van"),Kjr.forEach(t),rro=r(MMe," \u2014 "),wR=n(MMe,"A",{href:!0});var Zjr=s(wR);tro=r(Zjr,"ConvNextFeatureExtractor"),Zjr.forEach(t),aro=r(MMe," (VAN model)"),MMe.forEach(t),nro=i(ne),Lh=n(ne,"LI",{});var EMe=s(Lh);XY=n(EMe,"STRONG",{});var eqr=s(XY);sro=r(eqr,"vit"),eqr.forEach(t),lro=r(EMe," \u2014 "),AR=n(EMe,"A",{href:!0});var oqr=s(AR);iro=r(oqr,"ViTFeatureExtractor"),oqr.forEach(t),dro=r(EMe," (ViT model)"),EMe.forEach(t),cro=i(ne),Bh=n(ne,"LI",{});var yMe=s(Bh);VY=n(yMe,"STRONG",{});var rqr=s(VY);fro=r(rqr,"vit_mae"),rqr.forEach(t),mro=r(yMe," \u2014 "),LR=n(yMe,"A",{href:!0});var tqr=s(LR);gro=r(tqr,"ViTFeatureExtractor"),tqr.forEach(t),hro=r(yMe," (ViTMAE model)"),yMe.forEach(t),pro=i(ne),xh=n(ne,"LI",{});var wMe=s(xh);zY=n(wMe,"STRONG",{});var aqr=s(zY);_ro=r(aqr,"wav2vec2"),aqr.forEach(t),uro=r(wMe," \u2014 "),BR=n(wMe,"A",{href:!0});var nqr=s(BR);bro=r(nqr,"Wav2Vec2FeatureExtractor"),nqr.forEach(t),vro=r(wMe," (Wav2Vec2 model)"),wMe.forEach(t),ne.forEach(t),Tro=i(Dt),m(kh.$$.fragment,Dt),Fro=i(Dt),WY=n(Dt,"P",{});var sqr=s(WY);Cro=r(sqr,"Examples:"),sqr.forEach(t),Mro=i(Dt),m(R3.$$.fragment,Dt),Dt.forEach(t),Ero=i(Vs),Rh=n(Vs,"DIV",{class:!0});var CSe=s(Rh);m(S3.$$.fragment,CSe),yro=i(CSe),QY=n(CSe,"P",{});var lqr=s(QY);wro=r(lqr,"Register a new feature extractor for this class."),lqr.forEach(t),CSe.forEach(t),Vs.forEach(t),_ke=i(c),Ui=n(c,"H2",{class:!0});var MSe=s(Ui);Sh=n(MSe,"A",{id:!0,class:!0,href:!0});var iqr=s(Sh);HY=n(iqr,"SPAN",{});var dqr=s(HY);m(P3.$$.fragment,dqr),dqr.forEach(t),iqr.forEach(t),Aro=i(MSe),UY=n(MSe,"SPAN",{});var cqr=s(UY);Lro=r(cqr,"AutoProcessor"),cqr.forEach(t),MSe.forEach(t),uke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m($3.$$.fragment,zs),Bro=i(zs),I3=n(zs,"P",{});var ESe=s(I3);xro=r(ESe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xR=n(ESe,"A",{href:!0});var fqr=s(xR);kro=r(fqr,"AutoProcessor.from_pretrained()"),fqr.forEach(t),Rro=r(ESe," class method."),ESe.forEach(t),Sro=i(zs),N3=n(zs,"P",{});var ySe=s(N3);Pro=r(ySe,"This class cannot be instantiated directly using "),JY=n(ySe,"CODE",{});var mqr=s(JY);$ro=r(mqr,"__init__()"),mqr.forEach(t),Iro=r(ySe," (throws an error)."),ySe.forEach(t),Nro=i(zs),Ne=n(zs,"DIV",{class:!0});var jt=s(Ne);m(D3.$$.fragment,jt),Dro=i(jt),YY=n(jt,"P",{});var gqr=s(YY);jro=r(gqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gqr.forEach(t),qro=i(jt),Ji=n(jt,"P",{});var Jz=s(Ji);Gro=r(Jz,"The processor class to instantiate is selected based on the "),KY=n(Jz,"CODE",{});var hqr=s(KY);Oro=r(hqr,"model_type"),hqr.forEach(t),Xro=r(Jz,` property of the config object (either
passed as an argument or loaded from `),ZY=n(Jz,"CODE",{});var pqr=s(ZY);Vro=r(pqr,"pretrained_model_name_or_path"),pqr.forEach(t),zro=r(Jz," if possible):"),Jz.forEach(t),Wro=i(jt),xe=n(jt,"UL",{});var jo=s(xe);Ph=n(jo,"LI",{});var AMe=s(Ph);eK=n(AMe,"STRONG",{});var _qr=s(eK);Qro=r(_qr,"clip"),_qr.forEach(t),Hro=r(AMe," \u2014 "),kR=n(AMe,"A",{href:!0});var uqr=s(kR);Uro=r(uqr,"CLIPProcessor"),uqr.forEach(t),Jro=r(AMe," (CLIP model)"),AMe.forEach(t),Yro=i(jo),$h=n(jo,"LI",{});var LMe=s($h);oK=n(LMe,"STRONG",{});var bqr=s(oK);Kro=r(bqr,"layoutlmv2"),bqr.forEach(t),Zro=r(LMe," \u2014 "),RR=n(LMe,"A",{href:!0});var vqr=s(RR);eto=r(vqr,"LayoutLMv2Processor"),vqr.forEach(t),oto=r(LMe," (LayoutLMv2 model)"),LMe.forEach(t),rto=i(jo),Ih=n(jo,"LI",{});var BMe=s(Ih);rK=n(BMe,"STRONG",{});var Tqr=s(rK);tto=r(Tqr,"layoutxlm"),Tqr.forEach(t),ato=r(BMe," \u2014 "),SR=n(BMe,"A",{href:!0});var Fqr=s(SR);nto=r(Fqr,"LayoutXLMProcessor"),Fqr.forEach(t),sto=r(BMe," (LayoutXLM model)"),BMe.forEach(t),lto=i(jo),Nh=n(jo,"LI",{});var xMe=s(Nh);tK=n(xMe,"STRONG",{});var Cqr=s(tK);ito=r(Cqr,"speech_to_text"),Cqr.forEach(t),dto=r(xMe," \u2014 "),PR=n(xMe,"A",{href:!0});var Mqr=s(PR);cto=r(Mqr,"Speech2TextProcessor"),Mqr.forEach(t),fto=r(xMe," (Speech2Text model)"),xMe.forEach(t),mto=i(jo),Dh=n(jo,"LI",{});var kMe=s(Dh);aK=n(kMe,"STRONG",{});var Eqr=s(aK);gto=r(Eqr,"speech_to_text_2"),Eqr.forEach(t),hto=r(kMe," \u2014 "),$R=n(kMe,"A",{href:!0});var yqr=s($R);pto=r(yqr,"Speech2Text2Processor"),yqr.forEach(t),_to=r(kMe," (Speech2Text2 model)"),kMe.forEach(t),uto=i(jo),jh=n(jo,"LI",{});var RMe=s(jh);nK=n(RMe,"STRONG",{});var wqr=s(nK);bto=r(wqr,"trocr"),wqr.forEach(t),vto=r(RMe," \u2014 "),IR=n(RMe,"A",{href:!0});var Aqr=s(IR);Tto=r(Aqr,"TrOCRProcessor"),Aqr.forEach(t),Fto=r(RMe," (TrOCR model)"),RMe.forEach(t),Cto=i(jo),qh=n(jo,"LI",{});var SMe=s(qh);sK=n(SMe,"STRONG",{});var Lqr=s(sK);Mto=r(Lqr,"vision-text-dual-encoder"),Lqr.forEach(t),Eto=r(SMe," \u2014 "),NR=n(SMe,"A",{href:!0});var Bqr=s(NR);yto=r(Bqr,"VisionTextDualEncoderProcessor"),Bqr.forEach(t),wto=r(SMe," (VisionTextDualEncoder model)"),SMe.forEach(t),Ato=i(jo),Gh=n(jo,"LI",{});var PMe=s(Gh);lK=n(PMe,"STRONG",{});var xqr=s(lK);Lto=r(xqr,"wav2vec2"),xqr.forEach(t),Bto=r(PMe," \u2014 "),DR=n(PMe,"A",{href:!0});var kqr=s(DR);xto=r(kqr,"Wav2Vec2Processor"),kqr.forEach(t),kto=r(PMe," (Wav2Vec2 model)"),PMe.forEach(t),jo.forEach(t),Rto=i(jt),m(Oh.$$.fragment,jt),Sto=i(jt),iK=n(jt,"P",{});var Rqr=s(iK);Pto=r(Rqr,"Examples:"),Rqr.forEach(t),$to=i(jt),m(j3.$$.fragment,jt),jt.forEach(t),Ito=i(zs),Xh=n(zs,"DIV",{class:!0});var wSe=s(Xh);m(q3.$$.fragment,wSe),Nto=i(wSe),dK=n(wSe,"P",{});var Sqr=s(dK);Dto=r(Sqr,"Register a new processor for this class."),Sqr.forEach(t),wSe.forEach(t),zs.forEach(t),bke=i(c),Yi=n(c,"H2",{class:!0});var ASe=s(Yi);Vh=n(ASe,"A",{id:!0,class:!0,href:!0});var Pqr=s(Vh);cK=n(Pqr,"SPAN",{});var $qr=s(cK);m(G3.$$.fragment,$qr),$qr.forEach(t),Pqr.forEach(t),jto=i(ASe),fK=n(ASe,"SPAN",{});var Iqr=s(fK);qto=r(Iqr,"AutoModel"),Iqr.forEach(t),ASe.forEach(t),vke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(O3.$$.fragment,Ws),Gto=i(Ws),Ki=n(Ws,"P",{});var Yz=s(Ki);Oto=r(Yz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=n(Yz,"CODE",{});var Nqr=s(mK);Xto=r(Nqr,"from_pretrained()"),Nqr.forEach(t),Vto=r(Yz,"class method or the "),gK=n(Yz,"CODE",{});var Dqr=s(gK);zto=r(Dqr,"from_config()"),Dqr.forEach(t),Wto=r(Yz,`class
method.`),Yz.forEach(t),Qto=i(Ws),X3=n(Ws,"P",{});var LSe=s(X3);Hto=r(LSe,"This class cannot be instantiated directly using "),hK=n(LSe,"CODE",{});var jqr=s(hK);Uto=r(jqr,"__init__()"),jqr.forEach(t),Jto=r(LSe," (throws an error)."),LSe.forEach(t),Yto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(V3.$$.fragment,Qs),Kto=i(Qs),pK=n(Qs,"P",{});var qqr=s(pK);Zto=r(qqr,"Instantiates one of the base model classes of the library from a configuration."),qqr.forEach(t),eao=i(Qs),Zi=n(Qs,"P",{});var Kz=s(Zi);oao=r(Kz,`Note:
Loading a model from its configuration file does `),_K=n(Kz,"STRONG",{});var Gqr=s(_K);rao=r(Gqr,"not"),Gqr.forEach(t),tao=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Kz,"CODE",{});var Oqr=s(uK);aao=r(Oqr,"from_pretrained()"),Oqr.forEach(t),nao=r(Kz,"to load the model weights."),Kz.forEach(t),sao=i(Qs),bK=n(Qs,"P",{});var Xqr=s(bK);lao=r(Xqr,"Examples:"),Xqr.forEach(t),iao=i(Qs),m(z3.$$.fragment,Qs),Qs.forEach(t),dao=i(Ws),De=n(Ws,"DIV",{class:!0});var qt=s(De);m(W3.$$.fragment,qt),cao=i(qt),vK=n(qt,"P",{});var Vqr=s(vK);fao=r(Vqr,"Instantiate one of the base model classes of the library from a pretrained model."),Vqr.forEach(t),mao=i(qt),Va=n(qt,"P",{});var fE=s(Va);gao=r(fE,"The model class to instantiate is selected based on the "),TK=n(fE,"CODE",{});var zqr=s(TK);hao=r(zqr,"model_type"),zqr.forEach(t),pao=r(fE,` property of the config object (either
passed as an argument or loaded from `),FK=n(fE,"CODE",{});var Wqr=s(FK);_ao=r(Wqr,"pretrained_model_name_or_path"),Wqr.forEach(t),uao=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CK=n(fE,"CODE",{});var Qqr=s(CK);bao=r(Qqr,"pretrained_model_name_or_path"),Qqr.forEach(t),vao=r(fE,":"),fE.forEach(t),Tao=i(qt),F=n(qt,"UL",{});var C=s(F);zh=n(C,"LI",{});var $Me=s(zh);MK=n($Me,"STRONG",{});var Hqr=s(MK);Fao=r(Hqr,"albert"),Hqr.forEach(t),Cao=r($Me," \u2014 "),jR=n($Me,"A",{href:!0});var Uqr=s(jR);Mao=r(Uqr,"AlbertModel"),Uqr.forEach(t),Eao=r($Me," (ALBERT model)"),$Me.forEach(t),yao=i(C),Wh=n(C,"LI",{});var IMe=s(Wh);EK=n(IMe,"STRONG",{});var Jqr=s(EK);wao=r(Jqr,"bart"),Jqr.forEach(t),Aao=r(IMe," \u2014 "),qR=n(IMe,"A",{href:!0});var Yqr=s(qR);Lao=r(Yqr,"BartModel"),Yqr.forEach(t),Bao=r(IMe," (BART model)"),IMe.forEach(t),xao=i(C),Qh=n(C,"LI",{});var NMe=s(Qh);yK=n(NMe,"STRONG",{});var Kqr=s(yK);kao=r(Kqr,"beit"),Kqr.forEach(t),Rao=r(NMe," \u2014 "),GR=n(NMe,"A",{href:!0});var Zqr=s(GR);Sao=r(Zqr,"BeitModel"),Zqr.forEach(t),Pao=r(NMe," (BEiT model)"),NMe.forEach(t),$ao=i(C),Hh=n(C,"LI",{});var DMe=s(Hh);wK=n(DMe,"STRONG",{});var eGr=s(wK);Iao=r(eGr,"bert"),eGr.forEach(t),Nao=r(DMe," \u2014 "),OR=n(DMe,"A",{href:!0});var oGr=s(OR);Dao=r(oGr,"BertModel"),oGr.forEach(t),jao=r(DMe," (BERT model)"),DMe.forEach(t),qao=i(C),Uh=n(C,"LI",{});var jMe=s(Uh);AK=n(jMe,"STRONG",{});var rGr=s(AK);Gao=r(rGr,"bert-generation"),rGr.forEach(t),Oao=r(jMe," \u2014 "),XR=n(jMe,"A",{href:!0});var tGr=s(XR);Xao=r(tGr,"BertGenerationEncoder"),tGr.forEach(t),Vao=r(jMe," (Bert Generation model)"),jMe.forEach(t),zao=i(C),Jh=n(C,"LI",{});var qMe=s(Jh);LK=n(qMe,"STRONG",{});var aGr=s(LK);Wao=r(aGr,"big_bird"),aGr.forEach(t),Qao=r(qMe," \u2014 "),VR=n(qMe,"A",{href:!0});var nGr=s(VR);Hao=r(nGr,"BigBirdModel"),nGr.forEach(t),Uao=r(qMe," (BigBird model)"),qMe.forEach(t),Jao=i(C),Yh=n(C,"LI",{});var GMe=s(Yh);BK=n(GMe,"STRONG",{});var sGr=s(BK);Yao=r(sGr,"bigbird_pegasus"),sGr.forEach(t),Kao=r(GMe," \u2014 "),zR=n(GMe,"A",{href:!0});var lGr=s(zR);Zao=r(lGr,"BigBirdPegasusModel"),lGr.forEach(t),eno=r(GMe," (BigBirdPegasus model)"),GMe.forEach(t),ono=i(C),Kh=n(C,"LI",{});var OMe=s(Kh);xK=n(OMe,"STRONG",{});var iGr=s(xK);rno=r(iGr,"blenderbot"),iGr.forEach(t),tno=r(OMe," \u2014 "),WR=n(OMe,"A",{href:!0});var dGr=s(WR);ano=r(dGr,"BlenderbotModel"),dGr.forEach(t),nno=r(OMe," (Blenderbot model)"),OMe.forEach(t),sno=i(C),Zh=n(C,"LI",{});var XMe=s(Zh);kK=n(XMe,"STRONG",{});var cGr=s(kK);lno=r(cGr,"blenderbot-small"),cGr.forEach(t),ino=r(XMe," \u2014 "),QR=n(XMe,"A",{href:!0});var fGr=s(QR);dno=r(fGr,"BlenderbotSmallModel"),fGr.forEach(t),cno=r(XMe," (BlenderbotSmall model)"),XMe.forEach(t),fno=i(C),ep=n(C,"LI",{});var VMe=s(ep);RK=n(VMe,"STRONG",{});var mGr=s(RK);mno=r(mGr,"camembert"),mGr.forEach(t),gno=r(VMe," \u2014 "),HR=n(VMe,"A",{href:!0});var gGr=s(HR);hno=r(gGr,"CamembertModel"),gGr.forEach(t),pno=r(VMe," (CamemBERT model)"),VMe.forEach(t),_no=i(C),op=n(C,"LI",{});var zMe=s(op);SK=n(zMe,"STRONG",{});var hGr=s(SK);uno=r(hGr,"canine"),hGr.forEach(t),bno=r(zMe," \u2014 "),UR=n(zMe,"A",{href:!0});var pGr=s(UR);vno=r(pGr,"CanineModel"),pGr.forEach(t),Tno=r(zMe," (Canine model)"),zMe.forEach(t),Fno=i(C),rp=n(C,"LI",{});var WMe=s(rp);PK=n(WMe,"STRONG",{});var _Gr=s(PK);Cno=r(_Gr,"clip"),_Gr.forEach(t),Mno=r(WMe," \u2014 "),JR=n(WMe,"A",{href:!0});var uGr=s(JR);Eno=r(uGr,"CLIPModel"),uGr.forEach(t),yno=r(WMe," (CLIP model)"),WMe.forEach(t),wno=i(C),tp=n(C,"LI",{});var QMe=s(tp);$K=n(QMe,"STRONG",{});var bGr=s($K);Ano=r(bGr,"convbert"),bGr.forEach(t),Lno=r(QMe," \u2014 "),YR=n(QMe,"A",{href:!0});var vGr=s(YR);Bno=r(vGr,"ConvBertModel"),vGr.forEach(t),xno=r(QMe," (ConvBERT model)"),QMe.forEach(t),kno=i(C),ap=n(C,"LI",{});var HMe=s(ap);IK=n(HMe,"STRONG",{});var TGr=s(IK);Rno=r(TGr,"convnext"),TGr.forEach(t),Sno=r(HMe," \u2014 "),KR=n(HMe,"A",{href:!0});var FGr=s(KR);Pno=r(FGr,"ConvNextModel"),FGr.forEach(t),$no=r(HMe," (ConvNext model)"),HMe.forEach(t),Ino=i(C),np=n(C,"LI",{});var UMe=s(np);NK=n(UMe,"STRONG",{});var CGr=s(NK);Nno=r(CGr,"ctrl"),CGr.forEach(t),Dno=r(UMe," \u2014 "),ZR=n(UMe,"A",{href:!0});var MGr=s(ZR);jno=r(MGr,"CTRLModel"),MGr.forEach(t),qno=r(UMe," (CTRL model)"),UMe.forEach(t),Gno=i(C),sp=n(C,"LI",{});var JMe=s(sp);DK=n(JMe,"STRONG",{});var EGr=s(DK);Ono=r(EGr,"data2vec-audio"),EGr.forEach(t),Xno=r(JMe," \u2014 "),eS=n(JMe,"A",{href:!0});var yGr=s(eS);Vno=r(yGr,"Data2VecAudioModel"),yGr.forEach(t),zno=r(JMe," (Data2VecAudio model)"),JMe.forEach(t),Wno=i(C),lp=n(C,"LI",{});var YMe=s(lp);jK=n(YMe,"STRONG",{});var wGr=s(jK);Qno=r(wGr,"data2vec-text"),wGr.forEach(t),Hno=r(YMe," \u2014 "),oS=n(YMe,"A",{href:!0});var AGr=s(oS);Uno=r(AGr,"Data2VecTextModel"),AGr.forEach(t),Jno=r(YMe," (Data2VecText model)"),YMe.forEach(t),Yno=i(C),ip=n(C,"LI",{});var KMe=s(ip);qK=n(KMe,"STRONG",{});var LGr=s(qK);Kno=r(LGr,"deberta"),LGr.forEach(t),Zno=r(KMe," \u2014 "),rS=n(KMe,"A",{href:!0});var BGr=s(rS);eso=r(BGr,"DebertaModel"),BGr.forEach(t),oso=r(KMe," (DeBERTa model)"),KMe.forEach(t),rso=i(C),dp=n(C,"LI",{});var ZMe=s(dp);GK=n(ZMe,"STRONG",{});var xGr=s(GK);tso=r(xGr,"deberta-v2"),xGr.forEach(t),aso=r(ZMe," \u2014 "),tS=n(ZMe,"A",{href:!0});var kGr=s(tS);nso=r(kGr,"DebertaV2Model"),kGr.forEach(t),sso=r(ZMe," (DeBERTa-v2 model)"),ZMe.forEach(t),lso=i(C),cp=n(C,"LI",{});var e4e=s(cp);OK=n(e4e,"STRONG",{});var RGr=s(OK);iso=r(RGr,"deit"),RGr.forEach(t),dso=r(e4e," \u2014 "),aS=n(e4e,"A",{href:!0});var SGr=s(aS);cso=r(SGr,"DeiTModel"),SGr.forEach(t),fso=r(e4e," (DeiT model)"),e4e.forEach(t),mso=i(C),fp=n(C,"LI",{});var o4e=s(fp);XK=n(o4e,"STRONG",{});var PGr=s(XK);gso=r(PGr,"detr"),PGr.forEach(t),hso=r(o4e," \u2014 "),nS=n(o4e,"A",{href:!0});var $Gr=s(nS);pso=r($Gr,"DetrModel"),$Gr.forEach(t),_so=r(o4e," (DETR model)"),o4e.forEach(t),uso=i(C),mp=n(C,"LI",{});var r4e=s(mp);VK=n(r4e,"STRONG",{});var IGr=s(VK);bso=r(IGr,"distilbert"),IGr.forEach(t),vso=r(r4e," \u2014 "),sS=n(r4e,"A",{href:!0});var NGr=s(sS);Tso=r(NGr,"DistilBertModel"),NGr.forEach(t),Fso=r(r4e," (DistilBERT model)"),r4e.forEach(t),Cso=i(C),gp=n(C,"LI",{});var t4e=s(gp);zK=n(t4e,"STRONG",{});var DGr=s(zK);Mso=r(DGr,"dpr"),DGr.forEach(t),Eso=r(t4e," \u2014 "),lS=n(t4e,"A",{href:!0});var jGr=s(lS);yso=r(jGr,"DPRQuestionEncoder"),jGr.forEach(t),wso=r(t4e," (DPR model)"),t4e.forEach(t),Aso=i(C),hp=n(C,"LI",{});var a4e=s(hp);WK=n(a4e,"STRONG",{});var qGr=s(WK);Lso=r(qGr,"dpt"),qGr.forEach(t),Bso=r(a4e," \u2014 "),iS=n(a4e,"A",{href:!0});var GGr=s(iS);xso=r(GGr,"DPTModel"),GGr.forEach(t),kso=r(a4e," (DPT model)"),a4e.forEach(t),Rso=i(C),pp=n(C,"LI",{});var n4e=s(pp);QK=n(n4e,"STRONG",{});var OGr=s(QK);Sso=r(OGr,"electra"),OGr.forEach(t),Pso=r(n4e," \u2014 "),dS=n(n4e,"A",{href:!0});var XGr=s(dS);$so=r(XGr,"ElectraModel"),XGr.forEach(t),Iso=r(n4e," (ELECTRA model)"),n4e.forEach(t),Nso=i(C),_p=n(C,"LI",{});var s4e=s(_p);HK=n(s4e,"STRONG",{});var VGr=s(HK);Dso=r(VGr,"flaubert"),VGr.forEach(t),jso=r(s4e," \u2014 "),cS=n(s4e,"A",{href:!0});var zGr=s(cS);qso=r(zGr,"FlaubertModel"),zGr.forEach(t),Gso=r(s4e," (FlauBERT model)"),s4e.forEach(t),Oso=i(C),up=n(C,"LI",{});var l4e=s(up);UK=n(l4e,"STRONG",{});var WGr=s(UK);Xso=r(WGr,"fnet"),WGr.forEach(t),Vso=r(l4e," \u2014 "),fS=n(l4e,"A",{href:!0});var QGr=s(fS);zso=r(QGr,"FNetModel"),QGr.forEach(t),Wso=r(l4e," (FNet model)"),l4e.forEach(t),Qso=i(C),bp=n(C,"LI",{});var i4e=s(bp);JK=n(i4e,"STRONG",{});var HGr=s(JK);Hso=r(HGr,"fsmt"),HGr.forEach(t),Uso=r(i4e," \u2014 "),mS=n(i4e,"A",{href:!0});var UGr=s(mS);Jso=r(UGr,"FSMTModel"),UGr.forEach(t),Yso=r(i4e," (FairSeq Machine-Translation model)"),i4e.forEach(t),Kso=i(C),js=n(C,"LI",{});var J8=s(js);YK=n(J8,"STRONG",{});var JGr=s(YK);Zso=r(JGr,"funnel"),JGr.forEach(t),elo=r(J8," \u2014 "),gS=n(J8,"A",{href:!0});var YGr=s(gS);olo=r(YGr,"FunnelModel"),YGr.forEach(t),rlo=r(J8," or "),hS=n(J8,"A",{href:!0});var KGr=s(hS);tlo=r(KGr,"FunnelBaseModel"),KGr.forEach(t),alo=r(J8," (Funnel Transformer model)"),J8.forEach(t),nlo=i(C),vp=n(C,"LI",{});var d4e=s(vp);KK=n(d4e,"STRONG",{});var ZGr=s(KK);slo=r(ZGr,"glpn"),ZGr.forEach(t),llo=r(d4e," \u2014 "),pS=n(d4e,"A",{href:!0});var eOr=s(pS);ilo=r(eOr,"GLPNModel"),eOr.forEach(t),dlo=r(d4e," (GLPN model)"),d4e.forEach(t),clo=i(C),Tp=n(C,"LI",{});var c4e=s(Tp);ZK=n(c4e,"STRONG",{});var oOr=s(ZK);flo=r(oOr,"gpt2"),oOr.forEach(t),mlo=r(c4e," \u2014 "),_S=n(c4e,"A",{href:!0});var rOr=s(_S);glo=r(rOr,"GPT2Model"),rOr.forEach(t),hlo=r(c4e," (OpenAI GPT-2 model)"),c4e.forEach(t),plo=i(C),Fp=n(C,"LI",{});var f4e=s(Fp);eZ=n(f4e,"STRONG",{});var tOr=s(eZ);_lo=r(tOr,"gpt_neo"),tOr.forEach(t),ulo=r(f4e," \u2014 "),uS=n(f4e,"A",{href:!0});var aOr=s(uS);blo=r(aOr,"GPTNeoModel"),aOr.forEach(t),vlo=r(f4e," (GPT Neo model)"),f4e.forEach(t),Tlo=i(C),Cp=n(C,"LI",{});var m4e=s(Cp);oZ=n(m4e,"STRONG",{});var nOr=s(oZ);Flo=r(nOr,"gptj"),nOr.forEach(t),Clo=r(m4e," \u2014 "),bS=n(m4e,"A",{href:!0});var sOr=s(bS);Mlo=r(sOr,"GPTJModel"),sOr.forEach(t),Elo=r(m4e," (GPT-J model)"),m4e.forEach(t),ylo=i(C),Mp=n(C,"LI",{});var g4e=s(Mp);rZ=n(g4e,"STRONG",{});var lOr=s(rZ);wlo=r(lOr,"hubert"),lOr.forEach(t),Alo=r(g4e," \u2014 "),vS=n(g4e,"A",{href:!0});var iOr=s(vS);Llo=r(iOr,"HubertModel"),iOr.forEach(t),Blo=r(g4e," (Hubert model)"),g4e.forEach(t),xlo=i(C),Ep=n(C,"LI",{});var h4e=s(Ep);tZ=n(h4e,"STRONG",{});var dOr=s(tZ);klo=r(dOr,"ibert"),dOr.forEach(t),Rlo=r(h4e," \u2014 "),TS=n(h4e,"A",{href:!0});var cOr=s(TS);Slo=r(cOr,"IBertModel"),cOr.forEach(t),Plo=r(h4e," (I-BERT model)"),h4e.forEach(t),$lo=i(C),yp=n(C,"LI",{});var p4e=s(yp);aZ=n(p4e,"STRONG",{});var fOr=s(aZ);Ilo=r(fOr,"imagegpt"),fOr.forEach(t),Nlo=r(p4e," \u2014 "),FS=n(p4e,"A",{href:!0});var mOr=s(FS);Dlo=r(mOr,"ImageGPTModel"),mOr.forEach(t),jlo=r(p4e," (ImageGPT model)"),p4e.forEach(t),qlo=i(C),wp=n(C,"LI",{});var _4e=s(wp);nZ=n(_4e,"STRONG",{});var gOr=s(nZ);Glo=r(gOr,"layoutlm"),gOr.forEach(t),Olo=r(_4e," \u2014 "),CS=n(_4e,"A",{href:!0});var hOr=s(CS);Xlo=r(hOr,"LayoutLMModel"),hOr.forEach(t),Vlo=r(_4e," (LayoutLM model)"),_4e.forEach(t),zlo=i(C),Ap=n(C,"LI",{});var u4e=s(Ap);sZ=n(u4e,"STRONG",{});var pOr=s(sZ);Wlo=r(pOr,"layoutlmv2"),pOr.forEach(t),Qlo=r(u4e," \u2014 "),MS=n(u4e,"A",{href:!0});var _Or=s(MS);Hlo=r(_Or,"LayoutLMv2Model"),_Or.forEach(t),Ulo=r(u4e," (LayoutLMv2 model)"),u4e.forEach(t),Jlo=i(C),Lp=n(C,"LI",{});var b4e=s(Lp);lZ=n(b4e,"STRONG",{});var uOr=s(lZ);Ylo=r(uOr,"led"),uOr.forEach(t),Klo=r(b4e," \u2014 "),ES=n(b4e,"A",{href:!0});var bOr=s(ES);Zlo=r(bOr,"LEDModel"),bOr.forEach(t),eio=r(b4e," (LED model)"),b4e.forEach(t),oio=i(C),Bp=n(C,"LI",{});var v4e=s(Bp);iZ=n(v4e,"STRONG",{});var vOr=s(iZ);rio=r(vOr,"longformer"),vOr.forEach(t),tio=r(v4e," \u2014 "),yS=n(v4e,"A",{href:!0});var TOr=s(yS);aio=r(TOr,"LongformerModel"),TOr.forEach(t),nio=r(v4e," (Longformer model)"),v4e.forEach(t),sio=i(C),xp=n(C,"LI",{});var T4e=s(xp);dZ=n(T4e,"STRONG",{});var FOr=s(dZ);lio=r(FOr,"luke"),FOr.forEach(t),iio=r(T4e," \u2014 "),wS=n(T4e,"A",{href:!0});var COr=s(wS);dio=r(COr,"LukeModel"),COr.forEach(t),cio=r(T4e," (LUKE model)"),T4e.forEach(t),fio=i(C),kp=n(C,"LI",{});var F4e=s(kp);cZ=n(F4e,"STRONG",{});var MOr=s(cZ);mio=r(MOr,"lxmert"),MOr.forEach(t),gio=r(F4e," \u2014 "),AS=n(F4e,"A",{href:!0});var EOr=s(AS);hio=r(EOr,"LxmertModel"),EOr.forEach(t),pio=r(F4e," (LXMERT model)"),F4e.forEach(t),_io=i(C),Rp=n(C,"LI",{});var C4e=s(Rp);fZ=n(C4e,"STRONG",{});var yOr=s(fZ);uio=r(yOr,"m2m_100"),yOr.forEach(t),bio=r(C4e," \u2014 "),LS=n(C4e,"A",{href:!0});var wOr=s(LS);vio=r(wOr,"M2M100Model"),wOr.forEach(t),Tio=r(C4e," (M2M100 model)"),C4e.forEach(t),Fio=i(C),Sp=n(C,"LI",{});var M4e=s(Sp);mZ=n(M4e,"STRONG",{});var AOr=s(mZ);Cio=r(AOr,"marian"),AOr.forEach(t),Mio=r(M4e," \u2014 "),BS=n(M4e,"A",{href:!0});var LOr=s(BS);Eio=r(LOr,"MarianModel"),LOr.forEach(t),yio=r(M4e," (Marian model)"),M4e.forEach(t),wio=i(C),Pp=n(C,"LI",{});var E4e=s(Pp);gZ=n(E4e,"STRONG",{});var BOr=s(gZ);Aio=r(BOr,"maskformer"),BOr.forEach(t),Lio=r(E4e," \u2014 "),xS=n(E4e,"A",{href:!0});var xOr=s(xS);Bio=r(xOr,"MaskFormerModel"),xOr.forEach(t),xio=r(E4e," (MaskFormer model)"),E4e.forEach(t),kio=i(C),$p=n(C,"LI",{});var y4e=s($p);hZ=n(y4e,"STRONG",{});var kOr=s(hZ);Rio=r(kOr,"mbart"),kOr.forEach(t),Sio=r(y4e," \u2014 "),kS=n(y4e,"A",{href:!0});var ROr=s(kS);Pio=r(ROr,"MBartModel"),ROr.forEach(t),$io=r(y4e," (mBART model)"),y4e.forEach(t),Iio=i(C),Ip=n(C,"LI",{});var w4e=s(Ip);pZ=n(w4e,"STRONG",{});var SOr=s(pZ);Nio=r(SOr,"megatron-bert"),SOr.forEach(t),Dio=r(w4e," \u2014 "),RS=n(w4e,"A",{href:!0});var POr=s(RS);jio=r(POr,"MegatronBertModel"),POr.forEach(t),qio=r(w4e," (MegatronBert model)"),w4e.forEach(t),Gio=i(C),Np=n(C,"LI",{});var A4e=s(Np);_Z=n(A4e,"STRONG",{});var $Or=s(_Z);Oio=r($Or,"mobilebert"),$Or.forEach(t),Xio=r(A4e," \u2014 "),SS=n(A4e,"A",{href:!0});var IOr=s(SS);Vio=r(IOr,"MobileBertModel"),IOr.forEach(t),zio=r(A4e," (MobileBERT model)"),A4e.forEach(t),Wio=i(C),Dp=n(C,"LI",{});var L4e=s(Dp);uZ=n(L4e,"STRONG",{});var NOr=s(uZ);Qio=r(NOr,"mpnet"),NOr.forEach(t),Hio=r(L4e," \u2014 "),PS=n(L4e,"A",{href:!0});var DOr=s(PS);Uio=r(DOr,"MPNetModel"),DOr.forEach(t),Jio=r(L4e," (MPNet model)"),L4e.forEach(t),Yio=i(C),jp=n(C,"LI",{});var B4e=s(jp);bZ=n(B4e,"STRONG",{});var jOr=s(bZ);Kio=r(jOr,"mt5"),jOr.forEach(t),Zio=r(B4e," \u2014 "),$S=n(B4e,"A",{href:!0});var qOr=s($S);edo=r(qOr,"MT5Model"),qOr.forEach(t),odo=r(B4e," (mT5 model)"),B4e.forEach(t),rdo=i(C),qp=n(C,"LI",{});var x4e=s(qp);vZ=n(x4e,"STRONG",{});var GOr=s(vZ);tdo=r(GOr,"nystromformer"),GOr.forEach(t),ado=r(x4e," \u2014 "),IS=n(x4e,"A",{href:!0});var OOr=s(IS);ndo=r(OOr,"NystromformerModel"),OOr.forEach(t),sdo=r(x4e," (Nystromformer model)"),x4e.forEach(t),ldo=i(C),Gp=n(C,"LI",{});var k4e=s(Gp);TZ=n(k4e,"STRONG",{});var XOr=s(TZ);ido=r(XOr,"openai-gpt"),XOr.forEach(t),ddo=r(k4e," \u2014 "),NS=n(k4e,"A",{href:!0});var VOr=s(NS);cdo=r(VOr,"OpenAIGPTModel"),VOr.forEach(t),fdo=r(k4e," (OpenAI GPT model)"),k4e.forEach(t),mdo=i(C),Op=n(C,"LI",{});var R4e=s(Op);FZ=n(R4e,"STRONG",{});var zOr=s(FZ);gdo=r(zOr,"pegasus"),zOr.forEach(t),hdo=r(R4e," \u2014 "),DS=n(R4e,"A",{href:!0});var WOr=s(DS);pdo=r(WOr,"PegasusModel"),WOr.forEach(t),_do=r(R4e," (Pegasus model)"),R4e.forEach(t),udo=i(C),Xp=n(C,"LI",{});var S4e=s(Xp);CZ=n(S4e,"STRONG",{});var QOr=s(CZ);bdo=r(QOr,"perceiver"),QOr.forEach(t),vdo=r(S4e," \u2014 "),jS=n(S4e,"A",{href:!0});var HOr=s(jS);Tdo=r(HOr,"PerceiverModel"),HOr.forEach(t),Fdo=r(S4e," (Perceiver model)"),S4e.forEach(t),Cdo=i(C),Vp=n(C,"LI",{});var P4e=s(Vp);MZ=n(P4e,"STRONG",{});var UOr=s(MZ);Mdo=r(UOr,"plbart"),UOr.forEach(t),Edo=r(P4e," \u2014 "),qS=n(P4e,"A",{href:!0});var JOr=s(qS);ydo=r(JOr,"PLBartModel"),JOr.forEach(t),wdo=r(P4e," (PLBart model)"),P4e.forEach(t),Ado=i(C),zp=n(C,"LI",{});var $4e=s(zp);EZ=n($4e,"STRONG",{});var YOr=s(EZ);Ldo=r(YOr,"poolformer"),YOr.forEach(t),Bdo=r($4e," \u2014 "),GS=n($4e,"A",{href:!0});var KOr=s(GS);xdo=r(KOr,"PoolFormerModel"),KOr.forEach(t),kdo=r($4e," (PoolFormer model)"),$4e.forEach(t),Rdo=i(C),Wp=n(C,"LI",{});var I4e=s(Wp);yZ=n(I4e,"STRONG",{});var ZOr=s(yZ);Sdo=r(ZOr,"prophetnet"),ZOr.forEach(t),Pdo=r(I4e," \u2014 "),OS=n(I4e,"A",{href:!0});var eXr=s(OS);$do=r(eXr,"ProphetNetModel"),eXr.forEach(t),Ido=r(I4e," (ProphetNet model)"),I4e.forEach(t),Ndo=i(C),Qp=n(C,"LI",{});var N4e=s(Qp);wZ=n(N4e,"STRONG",{});var oXr=s(wZ);Ddo=r(oXr,"qdqbert"),oXr.forEach(t),jdo=r(N4e," \u2014 "),XS=n(N4e,"A",{href:!0});var rXr=s(XS);qdo=r(rXr,"QDQBertModel"),rXr.forEach(t),Gdo=r(N4e," (QDQBert model)"),N4e.forEach(t),Odo=i(C),Hp=n(C,"LI",{});var D4e=s(Hp);AZ=n(D4e,"STRONG",{});var tXr=s(AZ);Xdo=r(tXr,"reformer"),tXr.forEach(t),Vdo=r(D4e," \u2014 "),VS=n(D4e,"A",{href:!0});var aXr=s(VS);zdo=r(aXr,"ReformerModel"),aXr.forEach(t),Wdo=r(D4e," (Reformer model)"),D4e.forEach(t),Qdo=i(C),Up=n(C,"LI",{});var j4e=s(Up);LZ=n(j4e,"STRONG",{});var nXr=s(LZ);Hdo=r(nXr,"rembert"),nXr.forEach(t),Udo=r(j4e," \u2014 "),zS=n(j4e,"A",{href:!0});var sXr=s(zS);Jdo=r(sXr,"RemBertModel"),sXr.forEach(t),Ydo=r(j4e," (RemBERT model)"),j4e.forEach(t),Kdo=i(C),Jp=n(C,"LI",{});var q4e=s(Jp);BZ=n(q4e,"STRONG",{});var lXr=s(BZ);Zdo=r(lXr,"resnet"),lXr.forEach(t),eco=r(q4e," \u2014 "),WS=n(q4e,"A",{href:!0});var iXr=s(WS);oco=r(iXr,"ResNetModel"),iXr.forEach(t),rco=r(q4e," (ResNet model)"),q4e.forEach(t),tco=i(C),Yp=n(C,"LI",{});var G4e=s(Yp);xZ=n(G4e,"STRONG",{});var dXr=s(xZ);aco=r(dXr,"retribert"),dXr.forEach(t),nco=r(G4e," \u2014 "),QS=n(G4e,"A",{href:!0});var cXr=s(QS);sco=r(cXr,"RetriBertModel"),cXr.forEach(t),lco=r(G4e," (RetriBERT model)"),G4e.forEach(t),ico=i(C),Kp=n(C,"LI",{});var O4e=s(Kp);kZ=n(O4e,"STRONG",{});var fXr=s(kZ);dco=r(fXr,"roberta"),fXr.forEach(t),cco=r(O4e," \u2014 "),HS=n(O4e,"A",{href:!0});var mXr=s(HS);fco=r(mXr,"RobertaModel"),mXr.forEach(t),mco=r(O4e," (RoBERTa model)"),O4e.forEach(t),gco=i(C),Zp=n(C,"LI",{});var X4e=s(Zp);RZ=n(X4e,"STRONG",{});var gXr=s(RZ);hco=r(gXr,"roformer"),gXr.forEach(t),pco=r(X4e," \u2014 "),US=n(X4e,"A",{href:!0});var hXr=s(US);_co=r(hXr,"RoFormerModel"),hXr.forEach(t),uco=r(X4e," (RoFormer model)"),X4e.forEach(t),bco=i(C),e_=n(C,"LI",{});var V4e=s(e_);SZ=n(V4e,"STRONG",{});var pXr=s(SZ);vco=r(pXr,"segformer"),pXr.forEach(t),Tco=r(V4e," \u2014 "),JS=n(V4e,"A",{href:!0});var _Xr=s(JS);Fco=r(_Xr,"SegformerModel"),_Xr.forEach(t),Cco=r(V4e," (SegFormer model)"),V4e.forEach(t),Mco=i(C),o_=n(C,"LI",{});var z4e=s(o_);PZ=n(z4e,"STRONG",{});var uXr=s(PZ);Eco=r(uXr,"sew"),uXr.forEach(t),yco=r(z4e," \u2014 "),YS=n(z4e,"A",{href:!0});var bXr=s(YS);wco=r(bXr,"SEWModel"),bXr.forEach(t),Aco=r(z4e," (SEW model)"),z4e.forEach(t),Lco=i(C),r_=n(C,"LI",{});var W4e=s(r_);$Z=n(W4e,"STRONG",{});var vXr=s($Z);Bco=r(vXr,"sew-d"),vXr.forEach(t),xco=r(W4e," \u2014 "),KS=n(W4e,"A",{href:!0});var TXr=s(KS);kco=r(TXr,"SEWDModel"),TXr.forEach(t),Rco=r(W4e," (SEW-D model)"),W4e.forEach(t),Sco=i(C),t_=n(C,"LI",{});var Q4e=s(t_);IZ=n(Q4e,"STRONG",{});var FXr=s(IZ);Pco=r(FXr,"speech_to_text"),FXr.forEach(t),$co=r(Q4e," \u2014 "),ZS=n(Q4e,"A",{href:!0});var CXr=s(ZS);Ico=r(CXr,"Speech2TextModel"),CXr.forEach(t),Nco=r(Q4e," (Speech2Text model)"),Q4e.forEach(t),Dco=i(C),a_=n(C,"LI",{});var H4e=s(a_);NZ=n(H4e,"STRONG",{});var MXr=s(NZ);jco=r(MXr,"splinter"),MXr.forEach(t),qco=r(H4e," \u2014 "),eP=n(H4e,"A",{href:!0});var EXr=s(eP);Gco=r(EXr,"SplinterModel"),EXr.forEach(t),Oco=r(H4e," (Splinter model)"),H4e.forEach(t),Xco=i(C),n_=n(C,"LI",{});var U4e=s(n_);DZ=n(U4e,"STRONG",{});var yXr=s(DZ);Vco=r(yXr,"squeezebert"),yXr.forEach(t),zco=r(U4e," \u2014 "),oP=n(U4e,"A",{href:!0});var wXr=s(oP);Wco=r(wXr,"SqueezeBertModel"),wXr.forEach(t),Qco=r(U4e," (SqueezeBERT model)"),U4e.forEach(t),Hco=i(C),s_=n(C,"LI",{});var J4e=s(s_);jZ=n(J4e,"STRONG",{});var AXr=s(jZ);Uco=r(AXr,"swin"),AXr.forEach(t),Jco=r(J4e," \u2014 "),rP=n(J4e,"A",{href:!0});var LXr=s(rP);Yco=r(LXr,"SwinModel"),LXr.forEach(t),Kco=r(J4e," (Swin model)"),J4e.forEach(t),Zco=i(C),l_=n(C,"LI",{});var Y4e=s(l_);qZ=n(Y4e,"STRONG",{});var BXr=s(qZ);efo=r(BXr,"t5"),BXr.forEach(t),ofo=r(Y4e," \u2014 "),tP=n(Y4e,"A",{href:!0});var xXr=s(tP);rfo=r(xXr,"T5Model"),xXr.forEach(t),tfo=r(Y4e," (T5 model)"),Y4e.forEach(t),afo=i(C),i_=n(C,"LI",{});var K4e=s(i_);GZ=n(K4e,"STRONG",{});var kXr=s(GZ);nfo=r(kXr,"tapas"),kXr.forEach(t),sfo=r(K4e," \u2014 "),aP=n(K4e,"A",{href:!0});var RXr=s(aP);lfo=r(RXr,"TapasModel"),RXr.forEach(t),ifo=r(K4e," (TAPAS model)"),K4e.forEach(t),dfo=i(C),d_=n(C,"LI",{});var Z4e=s(d_);OZ=n(Z4e,"STRONG",{});var SXr=s(OZ);cfo=r(SXr,"transfo-xl"),SXr.forEach(t),ffo=r(Z4e," \u2014 "),nP=n(Z4e,"A",{href:!0});var PXr=s(nP);mfo=r(PXr,"TransfoXLModel"),PXr.forEach(t),gfo=r(Z4e," (Transformer-XL model)"),Z4e.forEach(t),hfo=i(C),c_=n(C,"LI",{});var eEe=s(c_);XZ=n(eEe,"STRONG",{});var $Xr=s(XZ);pfo=r($Xr,"unispeech"),$Xr.forEach(t),_fo=r(eEe," \u2014 "),sP=n(eEe,"A",{href:!0});var IXr=s(sP);ufo=r(IXr,"UniSpeechModel"),IXr.forEach(t),bfo=r(eEe," (UniSpeech model)"),eEe.forEach(t),vfo=i(C),f_=n(C,"LI",{});var oEe=s(f_);VZ=n(oEe,"STRONG",{});var NXr=s(VZ);Tfo=r(NXr,"unispeech-sat"),NXr.forEach(t),Ffo=r(oEe," \u2014 "),lP=n(oEe,"A",{href:!0});var DXr=s(lP);Cfo=r(DXr,"UniSpeechSatModel"),DXr.forEach(t),Mfo=r(oEe," (UniSpeechSat model)"),oEe.forEach(t),Efo=i(C),m_=n(C,"LI",{});var rEe=s(m_);zZ=n(rEe,"STRONG",{});var jXr=s(zZ);yfo=r(jXr,"van"),jXr.forEach(t),wfo=r(rEe," \u2014 "),iP=n(rEe,"A",{href:!0});var qXr=s(iP);Afo=r(qXr,"VanModel"),qXr.forEach(t),Lfo=r(rEe," (VAN model)"),rEe.forEach(t),Bfo=i(C),g_=n(C,"LI",{});var tEe=s(g_);WZ=n(tEe,"STRONG",{});var GXr=s(WZ);xfo=r(GXr,"vilt"),GXr.forEach(t),kfo=r(tEe," \u2014 "),dP=n(tEe,"A",{href:!0});var OXr=s(dP);Rfo=r(OXr,"ViltModel"),OXr.forEach(t),Sfo=r(tEe," (ViLT model)"),tEe.forEach(t),Pfo=i(C),h_=n(C,"LI",{});var aEe=s(h_);QZ=n(aEe,"STRONG",{});var XXr=s(QZ);$fo=r(XXr,"vision-text-dual-encoder"),XXr.forEach(t),Ifo=r(aEe," \u2014 "),cP=n(aEe,"A",{href:!0});var VXr=s(cP);Nfo=r(VXr,"VisionTextDualEncoderModel"),VXr.forEach(t),Dfo=r(aEe," (VisionTextDualEncoder model)"),aEe.forEach(t),jfo=i(C),p_=n(C,"LI",{});var nEe=s(p_);HZ=n(nEe,"STRONG",{});var zXr=s(HZ);qfo=r(zXr,"visual_bert"),zXr.forEach(t),Gfo=r(nEe," \u2014 "),fP=n(nEe,"A",{href:!0});var WXr=s(fP);Ofo=r(WXr,"VisualBertModel"),WXr.forEach(t),Xfo=r(nEe," (VisualBert model)"),nEe.forEach(t),Vfo=i(C),__=n(C,"LI",{});var sEe=s(__);UZ=n(sEe,"STRONG",{});var QXr=s(UZ);zfo=r(QXr,"vit"),QXr.forEach(t),Wfo=r(sEe," \u2014 "),mP=n(sEe,"A",{href:!0});var HXr=s(mP);Qfo=r(HXr,"ViTModel"),HXr.forEach(t),Hfo=r(sEe," (ViT model)"),sEe.forEach(t),Ufo=i(C),u_=n(C,"LI",{});var lEe=s(u_);JZ=n(lEe,"STRONG",{});var UXr=s(JZ);Jfo=r(UXr,"vit_mae"),UXr.forEach(t),Yfo=r(lEe," \u2014 "),gP=n(lEe,"A",{href:!0});var JXr=s(gP);Kfo=r(JXr,"ViTMAEModel"),JXr.forEach(t),Zfo=r(lEe," (ViTMAE model)"),lEe.forEach(t),emo=i(C),b_=n(C,"LI",{});var iEe=s(b_);YZ=n(iEe,"STRONG",{});var YXr=s(YZ);omo=r(YXr,"wav2vec2"),YXr.forEach(t),rmo=r(iEe," \u2014 "),hP=n(iEe,"A",{href:!0});var KXr=s(hP);tmo=r(KXr,"Wav2Vec2Model"),KXr.forEach(t),amo=r(iEe," (Wav2Vec2 model)"),iEe.forEach(t),nmo=i(C),v_=n(C,"LI",{});var dEe=s(v_);KZ=n(dEe,"STRONG",{});var ZXr=s(KZ);smo=r(ZXr,"wavlm"),ZXr.forEach(t),lmo=r(dEe," \u2014 "),pP=n(dEe,"A",{href:!0});var eVr=s(pP);imo=r(eVr,"WavLMModel"),eVr.forEach(t),dmo=r(dEe," (WavLM model)"),dEe.forEach(t),cmo=i(C),T_=n(C,"LI",{});var cEe=s(T_);ZZ=n(cEe,"STRONG",{});var oVr=s(ZZ);fmo=r(oVr,"xglm"),oVr.forEach(t),mmo=r(cEe," \u2014 "),_P=n(cEe,"A",{href:!0});var rVr=s(_P);gmo=r(rVr,"XGLMModel"),rVr.forEach(t),hmo=r(cEe," (XGLM model)"),cEe.forEach(t),pmo=i(C),F_=n(C,"LI",{});var fEe=s(F_);eee=n(fEe,"STRONG",{});var tVr=s(eee);_mo=r(tVr,"xlm"),tVr.forEach(t),umo=r(fEe," \u2014 "),uP=n(fEe,"A",{href:!0});var aVr=s(uP);bmo=r(aVr,"XLMModel"),aVr.forEach(t),vmo=r(fEe," (XLM model)"),fEe.forEach(t),Tmo=i(C),C_=n(C,"LI",{});var mEe=s(C_);oee=n(mEe,"STRONG",{});var nVr=s(oee);Fmo=r(nVr,"xlm-prophetnet"),nVr.forEach(t),Cmo=r(mEe," \u2014 "),bP=n(mEe,"A",{href:!0});var sVr=s(bP);Mmo=r(sVr,"XLMProphetNetModel"),sVr.forEach(t),Emo=r(mEe," (XLMProphetNet model)"),mEe.forEach(t),ymo=i(C),M_=n(C,"LI",{});var gEe=s(M_);ree=n(gEe,"STRONG",{});var lVr=s(ree);wmo=r(lVr,"xlm-roberta"),lVr.forEach(t),Amo=r(gEe," \u2014 "),vP=n(gEe,"A",{href:!0});var iVr=s(vP);Lmo=r(iVr,"XLMRobertaModel"),iVr.forEach(t),Bmo=r(gEe," (XLM-RoBERTa model)"),gEe.forEach(t),xmo=i(C),E_=n(C,"LI",{});var hEe=s(E_);tee=n(hEe,"STRONG",{});var dVr=s(tee);kmo=r(dVr,"xlm-roberta-xl"),dVr.forEach(t),Rmo=r(hEe," \u2014 "),TP=n(hEe,"A",{href:!0});var cVr=s(TP);Smo=r(cVr,"XLMRobertaXLModel"),cVr.forEach(t),Pmo=r(hEe," (XLM-RoBERTa-XL model)"),hEe.forEach(t),$mo=i(C),y_=n(C,"LI",{});var pEe=s(y_);aee=n(pEe,"STRONG",{});var fVr=s(aee);Imo=r(fVr,"xlnet"),fVr.forEach(t),Nmo=r(pEe," \u2014 "),FP=n(pEe,"A",{href:!0});var mVr=s(FP);Dmo=r(mVr,"XLNetModel"),mVr.forEach(t),jmo=r(pEe," (XLNet model)"),pEe.forEach(t),qmo=i(C),w_=n(C,"LI",{});var _Ee=s(w_);nee=n(_Ee,"STRONG",{});var gVr=s(nee);Gmo=r(gVr,"yoso"),gVr.forEach(t),Omo=r(_Ee," \u2014 "),CP=n(_Ee,"A",{href:!0});var hVr=s(CP);Xmo=r(hVr,"YosoModel"),hVr.forEach(t),Vmo=r(_Ee," (YOSO model)"),_Ee.forEach(t),C.forEach(t),zmo=i(qt),A_=n(qt,"P",{});var uEe=s(A_);Wmo=r(uEe,"The model is set in evaluation mode by default using "),see=n(uEe,"CODE",{});var pVr=s(see);Qmo=r(pVr,"model.eval()"),pVr.forEach(t),Hmo=r(uEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lee=n(uEe,"CODE",{});var _Vr=s(lee);Umo=r(_Vr,"model.train()"),_Vr.forEach(t),uEe.forEach(t),Jmo=i(qt),iee=n(qt,"P",{});var uVr=s(iee);Ymo=r(uVr,"Examples:"),uVr.forEach(t),Kmo=i(qt),m(Q3.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Tke=i(c),ed=n(c,"H2",{class:!0});var BSe=s(ed);L_=n(BSe,"A",{id:!0,class:!0,href:!0});var bVr=s(L_);dee=n(bVr,"SPAN",{});var vVr=s(dee);m(H3.$$.fragment,vVr),vVr.forEach(t),bVr.forEach(t),Zmo=i(BSe),cee=n(BSe,"SPAN",{});var TVr=s(cee);ego=r(TVr,"AutoModelForPreTraining"),TVr.forEach(t),BSe.forEach(t),Fke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(U3.$$.fragment,Hs),ogo=i(Hs),od=n(Hs,"P",{});var Zz=s(od);rgo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fee=n(Zz,"CODE",{});var FVr=s(fee);tgo=r(FVr,"from_pretrained()"),FVr.forEach(t),ago=r(Zz,"class method or the "),mee=n(Zz,"CODE",{});var CVr=s(mee);ngo=r(CVr,"from_config()"),CVr.forEach(t),sgo=r(Zz,`class
method.`),Zz.forEach(t),lgo=i(Hs),J3=n(Hs,"P",{});var xSe=s(J3);igo=r(xSe,"This class cannot be instantiated directly using "),gee=n(xSe,"CODE",{});var MVr=s(gee);dgo=r(MVr,"__init__()"),MVr.forEach(t),cgo=r(xSe," (throws an error)."),xSe.forEach(t),fgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(Y3.$$.fragment,Us),mgo=i(Us),hee=n(Us,"P",{});var EVr=s(hee);ggo=r(EVr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EVr.forEach(t),hgo=i(Us),rd=n(Us,"P",{});var eW=s(rd);pgo=r(eW,`Note:
Loading a model from its configuration file does `),pee=n(eW,"STRONG",{});var yVr=s(pee);_go=r(yVr,"not"),yVr.forEach(t),ugo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(eW,"CODE",{});var wVr=s(_ee);bgo=r(wVr,"from_pretrained()"),wVr.forEach(t),vgo=r(eW,"to load the model weights."),eW.forEach(t),Tgo=i(Us),uee=n(Us,"P",{});var AVr=s(uee);Fgo=r(AVr,"Examples:"),AVr.forEach(t),Cgo=i(Us),m(K3.$$.fragment,Us),Us.forEach(t),Mgo=i(Hs),je=n(Hs,"DIV",{class:!0});var Gt=s(je);m(Z3.$$.fragment,Gt),Ego=i(Gt),bee=n(Gt,"P",{});var LVr=s(bee);ygo=r(LVr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LVr.forEach(t),wgo=i(Gt),za=n(Gt,"P",{});var mE=s(za);Ago=r(mE,"The model class to instantiate is selected based on the "),vee=n(mE,"CODE",{});var BVr=s(vee);Lgo=r(BVr,"model_type"),BVr.forEach(t),Bgo=r(mE,` property of the config object (either
passed as an argument or loaded from `),Tee=n(mE,"CODE",{});var xVr=s(Tee);xgo=r(xVr,"pretrained_model_name_or_path"),xVr.forEach(t),kgo=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fee=n(mE,"CODE",{});var kVr=s(Fee);Rgo=r(kVr,"pretrained_model_name_or_path"),kVr.forEach(t),Sgo=r(mE,":"),mE.forEach(t),Pgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);B_=n(S,"LI",{});var bEe=s(B_);Cee=n(bEe,"STRONG",{});var RVr=s(Cee);$go=r(RVr,"albert"),RVr.forEach(t),Igo=r(bEe," \u2014 "),MP=n(bEe,"A",{href:!0});var SVr=s(MP);Ngo=r(SVr,"AlbertForPreTraining"),SVr.forEach(t),Dgo=r(bEe," (ALBERT model)"),bEe.forEach(t),jgo=i(S),x_=n(S,"LI",{});var vEe=s(x_);Mee=n(vEe,"STRONG",{});var PVr=s(Mee);qgo=r(PVr,"bart"),PVr.forEach(t),Ggo=r(vEe," \u2014 "),EP=n(vEe,"A",{href:!0});var $Vr=s(EP);Ogo=r($Vr,"BartForConditionalGeneration"),$Vr.forEach(t),Xgo=r(vEe," (BART model)"),vEe.forEach(t),Vgo=i(S),k_=n(S,"LI",{});var TEe=s(k_);Eee=n(TEe,"STRONG",{});var IVr=s(Eee);zgo=r(IVr,"bert"),IVr.forEach(t),Wgo=r(TEe," \u2014 "),yP=n(TEe,"A",{href:!0});var NVr=s(yP);Qgo=r(NVr,"BertForPreTraining"),NVr.forEach(t),Hgo=r(TEe," (BERT model)"),TEe.forEach(t),Ugo=i(S),R_=n(S,"LI",{});var FEe=s(R_);yee=n(FEe,"STRONG",{});var DVr=s(yee);Jgo=r(DVr,"big_bird"),DVr.forEach(t),Ygo=r(FEe," \u2014 "),wP=n(FEe,"A",{href:!0});var jVr=s(wP);Kgo=r(jVr,"BigBirdForPreTraining"),jVr.forEach(t),Zgo=r(FEe," (BigBird model)"),FEe.forEach(t),eho=i(S),S_=n(S,"LI",{});var CEe=s(S_);wee=n(CEe,"STRONG",{});var qVr=s(wee);oho=r(qVr,"camembert"),qVr.forEach(t),rho=r(CEe," \u2014 "),AP=n(CEe,"A",{href:!0});var GVr=s(AP);tho=r(GVr,"CamembertForMaskedLM"),GVr.forEach(t),aho=r(CEe," (CamemBERT model)"),CEe.forEach(t),nho=i(S),P_=n(S,"LI",{});var MEe=s(P_);Aee=n(MEe,"STRONG",{});var OVr=s(Aee);sho=r(OVr,"ctrl"),OVr.forEach(t),lho=r(MEe," \u2014 "),LP=n(MEe,"A",{href:!0});var XVr=s(LP);iho=r(XVr,"CTRLLMHeadModel"),XVr.forEach(t),dho=r(MEe," (CTRL model)"),MEe.forEach(t),cho=i(S),$_=n(S,"LI",{});var EEe=s($_);Lee=n(EEe,"STRONG",{});var VVr=s(Lee);fho=r(VVr,"data2vec-text"),VVr.forEach(t),mho=r(EEe," \u2014 "),BP=n(EEe,"A",{href:!0});var zVr=s(BP);gho=r(zVr,"Data2VecTextForMaskedLM"),zVr.forEach(t),hho=r(EEe," (Data2VecText model)"),EEe.forEach(t),pho=i(S),I_=n(S,"LI",{});var yEe=s(I_);Bee=n(yEe,"STRONG",{});var WVr=s(Bee);_ho=r(WVr,"deberta"),WVr.forEach(t),uho=r(yEe," \u2014 "),xP=n(yEe,"A",{href:!0});var QVr=s(xP);bho=r(QVr,"DebertaForMaskedLM"),QVr.forEach(t),vho=r(yEe," (DeBERTa model)"),yEe.forEach(t),Tho=i(S),N_=n(S,"LI",{});var wEe=s(N_);xee=n(wEe,"STRONG",{});var HVr=s(xee);Fho=r(HVr,"deberta-v2"),HVr.forEach(t),Cho=r(wEe," \u2014 "),kP=n(wEe,"A",{href:!0});var UVr=s(kP);Mho=r(UVr,"DebertaV2ForMaskedLM"),UVr.forEach(t),Eho=r(wEe," (DeBERTa-v2 model)"),wEe.forEach(t),yho=i(S),D_=n(S,"LI",{});var AEe=s(D_);kee=n(AEe,"STRONG",{});var JVr=s(kee);who=r(JVr,"distilbert"),JVr.forEach(t),Aho=r(AEe," \u2014 "),RP=n(AEe,"A",{href:!0});var YVr=s(RP);Lho=r(YVr,"DistilBertForMaskedLM"),YVr.forEach(t),Bho=r(AEe," (DistilBERT model)"),AEe.forEach(t),xho=i(S),j_=n(S,"LI",{});var LEe=s(j_);Ree=n(LEe,"STRONG",{});var KVr=s(Ree);kho=r(KVr,"electra"),KVr.forEach(t),Rho=r(LEe," \u2014 "),SP=n(LEe,"A",{href:!0});var ZVr=s(SP);Sho=r(ZVr,"ElectraForPreTraining"),ZVr.forEach(t),Pho=r(LEe," (ELECTRA model)"),LEe.forEach(t),$ho=i(S),q_=n(S,"LI",{});var BEe=s(q_);See=n(BEe,"STRONG",{});var ezr=s(See);Iho=r(ezr,"flaubert"),ezr.forEach(t),Nho=r(BEe," \u2014 "),PP=n(BEe,"A",{href:!0});var ozr=s(PP);Dho=r(ozr,"FlaubertWithLMHeadModel"),ozr.forEach(t),jho=r(BEe," (FlauBERT model)"),BEe.forEach(t),qho=i(S),G_=n(S,"LI",{});var xEe=s(G_);Pee=n(xEe,"STRONG",{});var rzr=s(Pee);Gho=r(rzr,"fnet"),rzr.forEach(t),Oho=r(xEe," \u2014 "),$P=n(xEe,"A",{href:!0});var tzr=s($P);Xho=r(tzr,"FNetForPreTraining"),tzr.forEach(t),Vho=r(xEe," (FNet model)"),xEe.forEach(t),zho=i(S),O_=n(S,"LI",{});var kEe=s(O_);$ee=n(kEe,"STRONG",{});var azr=s($ee);Who=r(azr,"fsmt"),azr.forEach(t),Qho=r(kEe," \u2014 "),IP=n(kEe,"A",{href:!0});var nzr=s(IP);Hho=r(nzr,"FSMTForConditionalGeneration"),nzr.forEach(t),Uho=r(kEe," (FairSeq Machine-Translation model)"),kEe.forEach(t),Jho=i(S),X_=n(S,"LI",{});var REe=s(X_);Iee=n(REe,"STRONG",{});var szr=s(Iee);Yho=r(szr,"funnel"),szr.forEach(t),Kho=r(REe," \u2014 "),NP=n(REe,"A",{href:!0});var lzr=s(NP);Zho=r(lzr,"FunnelForPreTraining"),lzr.forEach(t),epo=r(REe," (Funnel Transformer model)"),REe.forEach(t),opo=i(S),V_=n(S,"LI",{});var SEe=s(V_);Nee=n(SEe,"STRONG",{});var izr=s(Nee);rpo=r(izr,"gpt2"),izr.forEach(t),tpo=r(SEe," \u2014 "),DP=n(SEe,"A",{href:!0});var dzr=s(DP);apo=r(dzr,"GPT2LMHeadModel"),dzr.forEach(t),npo=r(SEe," (OpenAI GPT-2 model)"),SEe.forEach(t),spo=i(S),z_=n(S,"LI",{});var PEe=s(z_);Dee=n(PEe,"STRONG",{});var czr=s(Dee);lpo=r(czr,"ibert"),czr.forEach(t),ipo=r(PEe," \u2014 "),jP=n(PEe,"A",{href:!0});var fzr=s(jP);dpo=r(fzr,"IBertForMaskedLM"),fzr.forEach(t),cpo=r(PEe," (I-BERT model)"),PEe.forEach(t),fpo=i(S),W_=n(S,"LI",{});var $Ee=s(W_);jee=n($Ee,"STRONG",{});var mzr=s(jee);mpo=r(mzr,"layoutlm"),mzr.forEach(t),gpo=r($Ee," \u2014 "),qP=n($Ee,"A",{href:!0});var gzr=s(qP);hpo=r(gzr,"LayoutLMForMaskedLM"),gzr.forEach(t),ppo=r($Ee," (LayoutLM model)"),$Ee.forEach(t),_po=i(S),Q_=n(S,"LI",{});var IEe=s(Q_);qee=n(IEe,"STRONG",{});var hzr=s(qee);upo=r(hzr,"longformer"),hzr.forEach(t),bpo=r(IEe," \u2014 "),GP=n(IEe,"A",{href:!0});var pzr=s(GP);vpo=r(pzr,"LongformerForMaskedLM"),pzr.forEach(t),Tpo=r(IEe," (Longformer model)"),IEe.forEach(t),Fpo=i(S),H_=n(S,"LI",{});var NEe=s(H_);Gee=n(NEe,"STRONG",{});var _zr=s(Gee);Cpo=r(_zr,"lxmert"),_zr.forEach(t),Mpo=r(NEe," \u2014 "),OP=n(NEe,"A",{href:!0});var uzr=s(OP);Epo=r(uzr,"LxmertForPreTraining"),uzr.forEach(t),ypo=r(NEe," (LXMERT model)"),NEe.forEach(t),wpo=i(S),U_=n(S,"LI",{});var DEe=s(U_);Oee=n(DEe,"STRONG",{});var bzr=s(Oee);Apo=r(bzr,"megatron-bert"),bzr.forEach(t),Lpo=r(DEe," \u2014 "),XP=n(DEe,"A",{href:!0});var vzr=s(XP);Bpo=r(vzr,"MegatronBertForPreTraining"),vzr.forEach(t),xpo=r(DEe," (MegatronBert model)"),DEe.forEach(t),kpo=i(S),J_=n(S,"LI",{});var jEe=s(J_);Xee=n(jEe,"STRONG",{});var Tzr=s(Xee);Rpo=r(Tzr,"mobilebert"),Tzr.forEach(t),Spo=r(jEe," \u2014 "),VP=n(jEe,"A",{href:!0});var Fzr=s(VP);Ppo=r(Fzr,"MobileBertForPreTraining"),Fzr.forEach(t),$po=r(jEe," (MobileBERT model)"),jEe.forEach(t),Ipo=i(S),Y_=n(S,"LI",{});var qEe=s(Y_);Vee=n(qEe,"STRONG",{});var Czr=s(Vee);Npo=r(Czr,"mpnet"),Czr.forEach(t),Dpo=r(qEe," \u2014 "),zP=n(qEe,"A",{href:!0});var Mzr=s(zP);jpo=r(Mzr,"MPNetForMaskedLM"),Mzr.forEach(t),qpo=r(qEe," (MPNet model)"),qEe.forEach(t),Gpo=i(S),K_=n(S,"LI",{});var GEe=s(K_);zee=n(GEe,"STRONG",{});var Ezr=s(zee);Opo=r(Ezr,"openai-gpt"),Ezr.forEach(t),Xpo=r(GEe," \u2014 "),WP=n(GEe,"A",{href:!0});var yzr=s(WP);Vpo=r(yzr,"OpenAIGPTLMHeadModel"),yzr.forEach(t),zpo=r(GEe," (OpenAI GPT model)"),GEe.forEach(t),Wpo=i(S),Z_=n(S,"LI",{});var OEe=s(Z_);Wee=n(OEe,"STRONG",{});var wzr=s(Wee);Qpo=r(wzr,"retribert"),wzr.forEach(t),Hpo=r(OEe," \u2014 "),QP=n(OEe,"A",{href:!0});var Azr=s(QP);Upo=r(Azr,"RetriBertModel"),Azr.forEach(t),Jpo=r(OEe," (RetriBERT model)"),OEe.forEach(t),Ypo=i(S),eu=n(S,"LI",{});var XEe=s(eu);Qee=n(XEe,"STRONG",{});var Lzr=s(Qee);Kpo=r(Lzr,"roberta"),Lzr.forEach(t),Zpo=r(XEe," \u2014 "),HP=n(XEe,"A",{href:!0});var Bzr=s(HP);e_o=r(Bzr,"RobertaForMaskedLM"),Bzr.forEach(t),o_o=r(XEe," (RoBERTa model)"),XEe.forEach(t),r_o=i(S),ou=n(S,"LI",{});var VEe=s(ou);Hee=n(VEe,"STRONG",{});var xzr=s(Hee);t_o=r(xzr,"squeezebert"),xzr.forEach(t),a_o=r(VEe," \u2014 "),UP=n(VEe,"A",{href:!0});var kzr=s(UP);n_o=r(kzr,"SqueezeBertForMaskedLM"),kzr.forEach(t),s_o=r(VEe," (SqueezeBERT model)"),VEe.forEach(t),l_o=i(S),ru=n(S,"LI",{});var zEe=s(ru);Uee=n(zEe,"STRONG",{});var Rzr=s(Uee);i_o=r(Rzr,"t5"),Rzr.forEach(t),d_o=r(zEe," \u2014 "),JP=n(zEe,"A",{href:!0});var Szr=s(JP);c_o=r(Szr,"T5ForConditionalGeneration"),Szr.forEach(t),f_o=r(zEe," (T5 model)"),zEe.forEach(t),m_o=i(S),tu=n(S,"LI",{});var WEe=s(tu);Jee=n(WEe,"STRONG",{});var Pzr=s(Jee);g_o=r(Pzr,"tapas"),Pzr.forEach(t),h_o=r(WEe," \u2014 "),YP=n(WEe,"A",{href:!0});var $zr=s(YP);p_o=r($zr,"TapasForMaskedLM"),$zr.forEach(t),__o=r(WEe," (TAPAS model)"),WEe.forEach(t),u_o=i(S),au=n(S,"LI",{});var QEe=s(au);Yee=n(QEe,"STRONG",{});var Izr=s(Yee);b_o=r(Izr,"transfo-xl"),Izr.forEach(t),v_o=r(QEe," \u2014 "),KP=n(QEe,"A",{href:!0});var Nzr=s(KP);T_o=r(Nzr,"TransfoXLLMHeadModel"),Nzr.forEach(t),F_o=r(QEe," (Transformer-XL model)"),QEe.forEach(t),C_o=i(S),nu=n(S,"LI",{});var HEe=s(nu);Kee=n(HEe,"STRONG",{});var Dzr=s(Kee);M_o=r(Dzr,"unispeech"),Dzr.forEach(t),E_o=r(HEe," \u2014 "),ZP=n(HEe,"A",{href:!0});var jzr=s(ZP);y_o=r(jzr,"UniSpeechForPreTraining"),jzr.forEach(t),w_o=r(HEe," (UniSpeech model)"),HEe.forEach(t),A_o=i(S),su=n(S,"LI",{});var UEe=s(su);Zee=n(UEe,"STRONG",{});var qzr=s(Zee);L_o=r(qzr,"unispeech-sat"),qzr.forEach(t),B_o=r(UEe," \u2014 "),e$=n(UEe,"A",{href:!0});var Gzr=s(e$);x_o=r(Gzr,"UniSpeechSatForPreTraining"),Gzr.forEach(t),k_o=r(UEe," (UniSpeechSat model)"),UEe.forEach(t),R_o=i(S),lu=n(S,"LI",{});var JEe=s(lu);eoe=n(JEe,"STRONG",{});var Ozr=s(eoe);S_o=r(Ozr,"visual_bert"),Ozr.forEach(t),P_o=r(JEe," \u2014 "),o$=n(JEe,"A",{href:!0});var Xzr=s(o$);$_o=r(Xzr,"VisualBertForPreTraining"),Xzr.forEach(t),I_o=r(JEe," (VisualBert model)"),JEe.forEach(t),N_o=i(S),iu=n(S,"LI",{});var YEe=s(iu);ooe=n(YEe,"STRONG",{});var Vzr=s(ooe);D_o=r(Vzr,"vit_mae"),Vzr.forEach(t),j_o=r(YEe," \u2014 "),r$=n(YEe,"A",{href:!0});var zzr=s(r$);q_o=r(zzr,"ViTMAEForPreTraining"),zzr.forEach(t),G_o=r(YEe," (ViTMAE model)"),YEe.forEach(t),O_o=i(S),du=n(S,"LI",{});var KEe=s(du);roe=n(KEe,"STRONG",{});var Wzr=s(roe);X_o=r(Wzr,"wav2vec2"),Wzr.forEach(t),V_o=r(KEe," \u2014 "),t$=n(KEe,"A",{href:!0});var Qzr=s(t$);z_o=r(Qzr,"Wav2Vec2ForPreTraining"),Qzr.forEach(t),W_o=r(KEe," (Wav2Vec2 model)"),KEe.forEach(t),Q_o=i(S),cu=n(S,"LI",{});var ZEe=s(cu);toe=n(ZEe,"STRONG",{});var Hzr=s(toe);H_o=r(Hzr,"xlm"),Hzr.forEach(t),U_o=r(ZEe," \u2014 "),a$=n(ZEe,"A",{href:!0});var Uzr=s(a$);J_o=r(Uzr,"XLMWithLMHeadModel"),Uzr.forEach(t),Y_o=r(ZEe," (XLM model)"),ZEe.forEach(t),K_o=i(S),fu=n(S,"LI",{});var e3e=s(fu);aoe=n(e3e,"STRONG",{});var Jzr=s(aoe);Z_o=r(Jzr,"xlm-roberta"),Jzr.forEach(t),euo=r(e3e," \u2014 "),n$=n(e3e,"A",{href:!0});var Yzr=s(n$);ouo=r(Yzr,"XLMRobertaForMaskedLM"),Yzr.forEach(t),ruo=r(e3e," (XLM-RoBERTa model)"),e3e.forEach(t),tuo=i(S),mu=n(S,"LI",{});var o3e=s(mu);noe=n(o3e,"STRONG",{});var Kzr=s(noe);auo=r(Kzr,"xlm-roberta-xl"),Kzr.forEach(t),nuo=r(o3e," \u2014 "),s$=n(o3e,"A",{href:!0});var Zzr=s(s$);suo=r(Zzr,"XLMRobertaXLForMaskedLM"),Zzr.forEach(t),luo=r(o3e," (XLM-RoBERTa-XL model)"),o3e.forEach(t),iuo=i(S),gu=n(S,"LI",{});var r3e=s(gu);soe=n(r3e,"STRONG",{});var eWr=s(soe);duo=r(eWr,"xlnet"),eWr.forEach(t),cuo=r(r3e," \u2014 "),l$=n(r3e,"A",{href:!0});var oWr=s(l$);fuo=r(oWr,"XLNetLMHeadModel"),oWr.forEach(t),muo=r(r3e," (XLNet model)"),r3e.forEach(t),S.forEach(t),guo=i(Gt),hu=n(Gt,"P",{});var t3e=s(hu);huo=r(t3e,"The model is set in evaluation mode by default using "),loe=n(t3e,"CODE",{});var rWr=s(loe);puo=r(rWr,"model.eval()"),rWr.forEach(t),_uo=r(t3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ioe=n(t3e,"CODE",{});var tWr=s(ioe);uuo=r(tWr,"model.train()"),tWr.forEach(t),t3e.forEach(t),buo=i(Gt),doe=n(Gt,"P",{});var aWr=s(doe);vuo=r(aWr,"Examples:"),aWr.forEach(t),Tuo=i(Gt),m(ey.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Cke=i(c),td=n(c,"H2",{class:!0});var kSe=s(td);pu=n(kSe,"A",{id:!0,class:!0,href:!0});var nWr=s(pu);coe=n(nWr,"SPAN",{});var sWr=s(coe);m(oy.$$.fragment,sWr),sWr.forEach(t),nWr.forEach(t),Fuo=i(kSe),foe=n(kSe,"SPAN",{});var lWr=s(foe);Cuo=r(lWr,"AutoModelForCausalLM"),lWr.forEach(t),kSe.forEach(t),Mke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(ry.$$.fragment,Js),Muo=i(Js),ad=n(Js,"P",{});var oW=s(ad);Euo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),moe=n(oW,"CODE",{});var iWr=s(moe);yuo=r(iWr,"from_pretrained()"),iWr.forEach(t),wuo=r(oW,"class method or the "),goe=n(oW,"CODE",{});var dWr=s(goe);Auo=r(dWr,"from_config()"),dWr.forEach(t),Luo=r(oW,`class
method.`),oW.forEach(t),Buo=i(Js),ty=n(Js,"P",{});var RSe=s(ty);xuo=r(RSe,"This class cannot be instantiated directly using "),hoe=n(RSe,"CODE",{});var cWr=s(hoe);kuo=r(cWr,"__init__()"),cWr.forEach(t),Ruo=r(RSe," (throws an error)."),RSe.forEach(t),Suo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(ay.$$.fragment,Ys),Puo=i(Ys),poe=n(Ys,"P",{});var fWr=s(poe);$uo=r(fWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fWr.forEach(t),Iuo=i(Ys),nd=n(Ys,"P",{});var rW=s(nd);Nuo=r(rW,`Note:
Loading a model from its configuration file does `),_oe=n(rW,"STRONG",{});var mWr=s(_oe);Duo=r(mWr,"not"),mWr.forEach(t),juo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=n(rW,"CODE",{});var gWr=s(uoe);quo=r(gWr,"from_pretrained()"),gWr.forEach(t),Guo=r(rW,"to load the model weights."),rW.forEach(t),Ouo=i(Ys),boe=n(Ys,"P",{});var hWr=s(boe);Xuo=r(hWr,"Examples:"),hWr.forEach(t),Vuo=i(Ys),m(ny.$$.fragment,Ys),Ys.forEach(t),zuo=i(Js),qe=n(Js,"DIV",{class:!0});var Ot=s(qe);m(sy.$$.fragment,Ot),Wuo=i(Ot),voe=n(Ot,"P",{});var pWr=s(voe);Quo=r(pWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pWr.forEach(t),Huo=i(Ot),Wa=n(Ot,"P",{});var gE=s(Wa);Uuo=r(gE,"The model class to instantiate is selected based on the "),Toe=n(gE,"CODE",{});var _Wr=s(Toe);Juo=r(_Wr,"model_type"),_Wr.forEach(t),Yuo=r(gE,` property of the config object (either
passed as an argument or loaded from `),Foe=n(gE,"CODE",{});var uWr=s(Foe);Kuo=r(uWr,"pretrained_model_name_or_path"),uWr.forEach(t),Zuo=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Coe=n(gE,"CODE",{});var bWr=s(Coe);e1o=r(bWr,"pretrained_model_name_or_path"),bWr.forEach(t),o1o=r(gE,":"),gE.forEach(t),r1o=i(Ot),$=n(Ot,"UL",{});var N=s($);_u=n(N,"LI",{});var a3e=s(_u);Moe=n(a3e,"STRONG",{});var vWr=s(Moe);t1o=r(vWr,"bart"),vWr.forEach(t),a1o=r(a3e," \u2014 "),i$=n(a3e,"A",{href:!0});var TWr=s(i$);n1o=r(TWr,"BartForCausalLM"),TWr.forEach(t),s1o=r(a3e," (BART model)"),a3e.forEach(t),l1o=i(N),uu=n(N,"LI",{});var n3e=s(uu);Eoe=n(n3e,"STRONG",{});var FWr=s(Eoe);i1o=r(FWr,"bert"),FWr.forEach(t),d1o=r(n3e," \u2014 "),d$=n(n3e,"A",{href:!0});var CWr=s(d$);c1o=r(CWr,"BertLMHeadModel"),CWr.forEach(t),f1o=r(n3e," (BERT model)"),n3e.forEach(t),m1o=i(N),bu=n(N,"LI",{});var s3e=s(bu);yoe=n(s3e,"STRONG",{});var MWr=s(yoe);g1o=r(MWr,"bert-generation"),MWr.forEach(t),h1o=r(s3e," \u2014 "),c$=n(s3e,"A",{href:!0});var EWr=s(c$);p1o=r(EWr,"BertGenerationDecoder"),EWr.forEach(t),_1o=r(s3e," (Bert Generation model)"),s3e.forEach(t),u1o=i(N),vu=n(N,"LI",{});var l3e=s(vu);woe=n(l3e,"STRONG",{});var yWr=s(woe);b1o=r(yWr,"big_bird"),yWr.forEach(t),v1o=r(l3e," \u2014 "),f$=n(l3e,"A",{href:!0});var wWr=s(f$);T1o=r(wWr,"BigBirdForCausalLM"),wWr.forEach(t),F1o=r(l3e," (BigBird model)"),l3e.forEach(t),C1o=i(N),Tu=n(N,"LI",{});var i3e=s(Tu);Aoe=n(i3e,"STRONG",{});var AWr=s(Aoe);M1o=r(AWr,"bigbird_pegasus"),AWr.forEach(t),E1o=r(i3e," \u2014 "),m$=n(i3e,"A",{href:!0});var LWr=s(m$);y1o=r(LWr,"BigBirdPegasusForCausalLM"),LWr.forEach(t),w1o=r(i3e," (BigBirdPegasus model)"),i3e.forEach(t),A1o=i(N),Fu=n(N,"LI",{});var d3e=s(Fu);Loe=n(d3e,"STRONG",{});var BWr=s(Loe);L1o=r(BWr,"blenderbot"),BWr.forEach(t),B1o=r(d3e," \u2014 "),g$=n(d3e,"A",{href:!0});var xWr=s(g$);x1o=r(xWr,"BlenderbotForCausalLM"),xWr.forEach(t),k1o=r(d3e," (Blenderbot model)"),d3e.forEach(t),R1o=i(N),Cu=n(N,"LI",{});var c3e=s(Cu);Boe=n(c3e,"STRONG",{});var kWr=s(Boe);S1o=r(kWr,"blenderbot-small"),kWr.forEach(t),P1o=r(c3e," \u2014 "),h$=n(c3e,"A",{href:!0});var RWr=s(h$);$1o=r(RWr,"BlenderbotSmallForCausalLM"),RWr.forEach(t),I1o=r(c3e," (BlenderbotSmall model)"),c3e.forEach(t),N1o=i(N),Mu=n(N,"LI",{});var f3e=s(Mu);xoe=n(f3e,"STRONG",{});var SWr=s(xoe);D1o=r(SWr,"camembert"),SWr.forEach(t),j1o=r(f3e," \u2014 "),p$=n(f3e,"A",{href:!0});var PWr=s(p$);q1o=r(PWr,"CamembertForCausalLM"),PWr.forEach(t),G1o=r(f3e," (CamemBERT model)"),f3e.forEach(t),O1o=i(N),Eu=n(N,"LI",{});var m3e=s(Eu);koe=n(m3e,"STRONG",{});var $Wr=s(koe);X1o=r($Wr,"ctrl"),$Wr.forEach(t),V1o=r(m3e," \u2014 "),_$=n(m3e,"A",{href:!0});var IWr=s(_$);z1o=r(IWr,"CTRLLMHeadModel"),IWr.forEach(t),W1o=r(m3e," (CTRL model)"),m3e.forEach(t),Q1o=i(N),yu=n(N,"LI",{});var g3e=s(yu);Roe=n(g3e,"STRONG",{});var NWr=s(Roe);H1o=r(NWr,"data2vec-text"),NWr.forEach(t),U1o=r(g3e," \u2014 "),u$=n(g3e,"A",{href:!0});var DWr=s(u$);J1o=r(DWr,"Data2VecTextForCausalLM"),DWr.forEach(t),Y1o=r(g3e," (Data2VecText model)"),g3e.forEach(t),K1o=i(N),wu=n(N,"LI",{});var h3e=s(wu);Soe=n(h3e,"STRONG",{});var jWr=s(Soe);Z1o=r(jWr,"electra"),jWr.forEach(t),e9o=r(h3e," \u2014 "),b$=n(h3e,"A",{href:!0});var qWr=s(b$);o9o=r(qWr,"ElectraForCausalLM"),qWr.forEach(t),r9o=r(h3e," (ELECTRA model)"),h3e.forEach(t),t9o=i(N),Au=n(N,"LI",{});var p3e=s(Au);Poe=n(p3e,"STRONG",{});var GWr=s(Poe);a9o=r(GWr,"gpt2"),GWr.forEach(t),n9o=r(p3e," \u2014 "),v$=n(p3e,"A",{href:!0});var OWr=s(v$);s9o=r(OWr,"GPT2LMHeadModel"),OWr.forEach(t),l9o=r(p3e," (OpenAI GPT-2 model)"),p3e.forEach(t),i9o=i(N),Lu=n(N,"LI",{});var _3e=s(Lu);$oe=n(_3e,"STRONG",{});var XWr=s($oe);d9o=r(XWr,"gpt_neo"),XWr.forEach(t),c9o=r(_3e," \u2014 "),T$=n(_3e,"A",{href:!0});var VWr=s(T$);f9o=r(VWr,"GPTNeoForCausalLM"),VWr.forEach(t),m9o=r(_3e," (GPT Neo model)"),_3e.forEach(t),g9o=i(N),Bu=n(N,"LI",{});var u3e=s(Bu);Ioe=n(u3e,"STRONG",{});var zWr=s(Ioe);h9o=r(zWr,"gptj"),zWr.forEach(t),p9o=r(u3e," \u2014 "),F$=n(u3e,"A",{href:!0});var WWr=s(F$);_9o=r(WWr,"GPTJForCausalLM"),WWr.forEach(t),u9o=r(u3e," (GPT-J model)"),u3e.forEach(t),b9o=i(N),xu=n(N,"LI",{});var b3e=s(xu);Noe=n(b3e,"STRONG",{});var QWr=s(Noe);v9o=r(QWr,"marian"),QWr.forEach(t),T9o=r(b3e," \u2014 "),C$=n(b3e,"A",{href:!0});var HWr=s(C$);F9o=r(HWr,"MarianForCausalLM"),HWr.forEach(t),C9o=r(b3e," (Marian model)"),b3e.forEach(t),M9o=i(N),ku=n(N,"LI",{});var v3e=s(ku);Doe=n(v3e,"STRONG",{});var UWr=s(Doe);E9o=r(UWr,"mbart"),UWr.forEach(t),y9o=r(v3e," \u2014 "),M$=n(v3e,"A",{href:!0});var JWr=s(M$);w9o=r(JWr,"MBartForCausalLM"),JWr.forEach(t),A9o=r(v3e," (mBART model)"),v3e.forEach(t),L9o=i(N),Ru=n(N,"LI",{});var T3e=s(Ru);joe=n(T3e,"STRONG",{});var YWr=s(joe);B9o=r(YWr,"megatron-bert"),YWr.forEach(t),x9o=r(T3e," \u2014 "),E$=n(T3e,"A",{href:!0});var KWr=s(E$);k9o=r(KWr,"MegatronBertForCausalLM"),KWr.forEach(t),R9o=r(T3e," (MegatronBert model)"),T3e.forEach(t),S9o=i(N),Su=n(N,"LI",{});var F3e=s(Su);qoe=n(F3e,"STRONG",{});var ZWr=s(qoe);P9o=r(ZWr,"openai-gpt"),ZWr.forEach(t),$9o=r(F3e," \u2014 "),y$=n(F3e,"A",{href:!0});var eQr=s(y$);I9o=r(eQr,"OpenAIGPTLMHeadModel"),eQr.forEach(t),N9o=r(F3e," (OpenAI GPT model)"),F3e.forEach(t),D9o=i(N),Pu=n(N,"LI",{});var C3e=s(Pu);Goe=n(C3e,"STRONG",{});var oQr=s(Goe);j9o=r(oQr,"pegasus"),oQr.forEach(t),q9o=r(C3e," \u2014 "),w$=n(C3e,"A",{href:!0});var rQr=s(w$);G9o=r(rQr,"PegasusForCausalLM"),rQr.forEach(t),O9o=r(C3e," (Pegasus model)"),C3e.forEach(t),X9o=i(N),$u=n(N,"LI",{});var M3e=s($u);Ooe=n(M3e,"STRONG",{});var tQr=s(Ooe);V9o=r(tQr,"plbart"),tQr.forEach(t),z9o=r(M3e," \u2014 "),A$=n(M3e,"A",{href:!0});var aQr=s(A$);W9o=r(aQr,"PLBartForCausalLM"),aQr.forEach(t),Q9o=r(M3e," (PLBart model)"),M3e.forEach(t),H9o=i(N),Iu=n(N,"LI",{});var E3e=s(Iu);Xoe=n(E3e,"STRONG",{});var nQr=s(Xoe);U9o=r(nQr,"prophetnet"),nQr.forEach(t),J9o=r(E3e," \u2014 "),L$=n(E3e,"A",{href:!0});var sQr=s(L$);Y9o=r(sQr,"ProphetNetForCausalLM"),sQr.forEach(t),K9o=r(E3e," (ProphetNet model)"),E3e.forEach(t),Z9o=i(N),Nu=n(N,"LI",{});var y3e=s(Nu);Voe=n(y3e,"STRONG",{});var lQr=s(Voe);ebo=r(lQr,"qdqbert"),lQr.forEach(t),obo=r(y3e," \u2014 "),B$=n(y3e,"A",{href:!0});var iQr=s(B$);rbo=r(iQr,"QDQBertLMHeadModel"),iQr.forEach(t),tbo=r(y3e," (QDQBert model)"),y3e.forEach(t),abo=i(N),Du=n(N,"LI",{});var w3e=s(Du);zoe=n(w3e,"STRONG",{});var dQr=s(zoe);nbo=r(dQr,"reformer"),dQr.forEach(t),sbo=r(w3e," \u2014 "),x$=n(w3e,"A",{href:!0});var cQr=s(x$);lbo=r(cQr,"ReformerModelWithLMHead"),cQr.forEach(t),ibo=r(w3e," (Reformer model)"),w3e.forEach(t),dbo=i(N),ju=n(N,"LI",{});var A3e=s(ju);Woe=n(A3e,"STRONG",{});var fQr=s(Woe);cbo=r(fQr,"rembert"),fQr.forEach(t),fbo=r(A3e," \u2014 "),k$=n(A3e,"A",{href:!0});var mQr=s(k$);mbo=r(mQr,"RemBertForCausalLM"),mQr.forEach(t),gbo=r(A3e," (RemBERT model)"),A3e.forEach(t),hbo=i(N),qu=n(N,"LI",{});var L3e=s(qu);Qoe=n(L3e,"STRONG",{});var gQr=s(Qoe);pbo=r(gQr,"roberta"),gQr.forEach(t),_bo=r(L3e," \u2014 "),R$=n(L3e,"A",{href:!0});var hQr=s(R$);ubo=r(hQr,"RobertaForCausalLM"),hQr.forEach(t),bbo=r(L3e," (RoBERTa model)"),L3e.forEach(t),vbo=i(N),Gu=n(N,"LI",{});var B3e=s(Gu);Hoe=n(B3e,"STRONG",{});var pQr=s(Hoe);Tbo=r(pQr,"roformer"),pQr.forEach(t),Fbo=r(B3e," \u2014 "),S$=n(B3e,"A",{href:!0});var _Qr=s(S$);Cbo=r(_Qr,"RoFormerForCausalLM"),_Qr.forEach(t),Mbo=r(B3e," (RoFormer model)"),B3e.forEach(t),Ebo=i(N),Ou=n(N,"LI",{});var x3e=s(Ou);Uoe=n(x3e,"STRONG",{});var uQr=s(Uoe);ybo=r(uQr,"speech_to_text_2"),uQr.forEach(t),wbo=r(x3e," \u2014 "),P$=n(x3e,"A",{href:!0});var bQr=s(P$);Abo=r(bQr,"Speech2Text2ForCausalLM"),bQr.forEach(t),Lbo=r(x3e," (Speech2Text2 model)"),x3e.forEach(t),Bbo=i(N),Xu=n(N,"LI",{});var k3e=s(Xu);Joe=n(k3e,"STRONG",{});var vQr=s(Joe);xbo=r(vQr,"transfo-xl"),vQr.forEach(t),kbo=r(k3e," \u2014 "),$$=n(k3e,"A",{href:!0});var TQr=s($$);Rbo=r(TQr,"TransfoXLLMHeadModel"),TQr.forEach(t),Sbo=r(k3e," (Transformer-XL model)"),k3e.forEach(t),Pbo=i(N),Vu=n(N,"LI",{});var R3e=s(Vu);Yoe=n(R3e,"STRONG",{});var FQr=s(Yoe);$bo=r(FQr,"trocr"),FQr.forEach(t),Ibo=r(R3e," \u2014 "),I$=n(R3e,"A",{href:!0});var CQr=s(I$);Nbo=r(CQr,"TrOCRForCausalLM"),CQr.forEach(t),Dbo=r(R3e," (TrOCR model)"),R3e.forEach(t),jbo=i(N),zu=n(N,"LI",{});var S3e=s(zu);Koe=n(S3e,"STRONG",{});var MQr=s(Koe);qbo=r(MQr,"xglm"),MQr.forEach(t),Gbo=r(S3e," \u2014 "),N$=n(S3e,"A",{href:!0});var EQr=s(N$);Obo=r(EQr,"XGLMForCausalLM"),EQr.forEach(t),Xbo=r(S3e," (XGLM model)"),S3e.forEach(t),Vbo=i(N),Wu=n(N,"LI",{});var P3e=s(Wu);Zoe=n(P3e,"STRONG",{});var yQr=s(Zoe);zbo=r(yQr,"xlm"),yQr.forEach(t),Wbo=r(P3e," \u2014 "),D$=n(P3e,"A",{href:!0});var wQr=s(D$);Qbo=r(wQr,"XLMWithLMHeadModel"),wQr.forEach(t),Hbo=r(P3e," (XLM model)"),P3e.forEach(t),Ubo=i(N),Qu=n(N,"LI",{});var $3e=s(Qu);ere=n($3e,"STRONG",{});var AQr=s(ere);Jbo=r(AQr,"xlm-prophetnet"),AQr.forEach(t),Ybo=r($3e," \u2014 "),j$=n($3e,"A",{href:!0});var LQr=s(j$);Kbo=r(LQr,"XLMProphetNetForCausalLM"),LQr.forEach(t),Zbo=r($3e," (XLMProphetNet model)"),$3e.forEach(t),e5o=i(N),Hu=n(N,"LI",{});var I3e=s(Hu);ore=n(I3e,"STRONG",{});var BQr=s(ore);o5o=r(BQr,"xlm-roberta"),BQr.forEach(t),r5o=r(I3e," \u2014 "),q$=n(I3e,"A",{href:!0});var xQr=s(q$);t5o=r(xQr,"XLMRobertaForCausalLM"),xQr.forEach(t),a5o=r(I3e," (XLM-RoBERTa model)"),I3e.forEach(t),n5o=i(N),Uu=n(N,"LI",{});var N3e=s(Uu);rre=n(N3e,"STRONG",{});var kQr=s(rre);s5o=r(kQr,"xlm-roberta-xl"),kQr.forEach(t),l5o=r(N3e," \u2014 "),G$=n(N3e,"A",{href:!0});var RQr=s(G$);i5o=r(RQr,"XLMRobertaXLForCausalLM"),RQr.forEach(t),d5o=r(N3e," (XLM-RoBERTa-XL model)"),N3e.forEach(t),c5o=i(N),Ju=n(N,"LI",{});var D3e=s(Ju);tre=n(D3e,"STRONG",{});var SQr=s(tre);f5o=r(SQr,"xlnet"),SQr.forEach(t),m5o=r(D3e," \u2014 "),O$=n(D3e,"A",{href:!0});var PQr=s(O$);g5o=r(PQr,"XLNetLMHeadModel"),PQr.forEach(t),h5o=r(D3e," (XLNet model)"),D3e.forEach(t),N.forEach(t),p5o=i(Ot),Yu=n(Ot,"P",{});var j3e=s(Yu);_5o=r(j3e,"The model is set in evaluation mode by default using "),are=n(j3e,"CODE",{});var $Qr=s(are);u5o=r($Qr,"model.eval()"),$Qr.forEach(t),b5o=r(j3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nre=n(j3e,"CODE",{});var IQr=s(nre);v5o=r(IQr,"model.train()"),IQr.forEach(t),j3e.forEach(t),T5o=i(Ot),sre=n(Ot,"P",{});var NQr=s(sre);F5o=r(NQr,"Examples:"),NQr.forEach(t),C5o=i(Ot),m(ly.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),Eke=i(c),sd=n(c,"H2",{class:!0});var SSe=s(sd);Ku=n(SSe,"A",{id:!0,class:!0,href:!0});var DQr=s(Ku);lre=n(DQr,"SPAN",{});var jQr=s(lre);m(iy.$$.fragment,jQr),jQr.forEach(t),DQr.forEach(t),M5o=i(SSe),ire=n(SSe,"SPAN",{});var qQr=s(ire);E5o=r(qQr,"AutoModelForMaskedLM"),qQr.forEach(t),SSe.forEach(t),yke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(dy.$$.fragment,Ks),y5o=i(Ks),ld=n(Ks,"P",{});var tW=s(ld);w5o=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dre=n(tW,"CODE",{});var GQr=s(dre);A5o=r(GQr,"from_pretrained()"),GQr.forEach(t),L5o=r(tW,"class method or the "),cre=n(tW,"CODE",{});var OQr=s(cre);B5o=r(OQr,"from_config()"),OQr.forEach(t),x5o=r(tW,`class
method.`),tW.forEach(t),k5o=i(Ks),cy=n(Ks,"P",{});var PSe=s(cy);R5o=r(PSe,"This class cannot be instantiated directly using "),fre=n(PSe,"CODE",{});var XQr=s(fre);S5o=r(XQr,"__init__()"),XQr.forEach(t),P5o=r(PSe," (throws an error)."),PSe.forEach(t),$5o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(fy.$$.fragment,Zs),I5o=i(Zs),mre=n(Zs,"P",{});var VQr=s(mre);N5o=r(VQr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VQr.forEach(t),D5o=i(Zs),id=n(Zs,"P",{});var aW=s(id);j5o=r(aW,`Note:
Loading a model from its configuration file does `),gre=n(aW,"STRONG",{});var zQr=s(gre);q5o=r(zQr,"not"),zQr.forEach(t),G5o=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hre=n(aW,"CODE",{});var WQr=s(hre);O5o=r(WQr,"from_pretrained()"),WQr.forEach(t),X5o=r(aW,"to load the model weights."),aW.forEach(t),V5o=i(Zs),pre=n(Zs,"P",{});var QQr=s(pre);z5o=r(QQr,"Examples:"),QQr.forEach(t),W5o=i(Zs),m(my.$$.fragment,Zs),Zs.forEach(t),Q5o=i(Ks),Ge=n(Ks,"DIV",{class:!0});var Xt=s(Ge);m(gy.$$.fragment,Xt),H5o=i(Xt),_re=n(Xt,"P",{});var HQr=s(_re);U5o=r(HQr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HQr.forEach(t),J5o=i(Xt),Qa=n(Xt,"P",{});var hE=s(Qa);Y5o=r(hE,"The model class to instantiate is selected based on the "),ure=n(hE,"CODE",{});var UQr=s(ure);K5o=r(UQr,"model_type"),UQr.forEach(t),Z5o=r(hE,` property of the config object (either
passed as an argument or loaded from `),bre=n(hE,"CODE",{});var JQr=s(bre);e2o=r(JQr,"pretrained_model_name_or_path"),JQr.forEach(t),o2o=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vre=n(hE,"CODE",{});var YQr=s(vre);r2o=r(YQr,"pretrained_model_name_or_path"),YQr.forEach(t),t2o=r(hE,":"),hE.forEach(t),a2o=i(Xt),I=n(Xt,"UL",{});var D=s(I);Zu=n(D,"LI",{});var q3e=s(Zu);Tre=n(q3e,"STRONG",{});var KQr=s(Tre);n2o=r(KQr,"albert"),KQr.forEach(t),s2o=r(q3e," \u2014 "),X$=n(q3e,"A",{href:!0});var ZQr=s(X$);l2o=r(ZQr,"AlbertForMaskedLM"),ZQr.forEach(t),i2o=r(q3e," (ALBERT model)"),q3e.forEach(t),d2o=i(D),e1=n(D,"LI",{});var G3e=s(e1);Fre=n(G3e,"STRONG",{});var eHr=s(Fre);c2o=r(eHr,"bart"),eHr.forEach(t),f2o=r(G3e," \u2014 "),V$=n(G3e,"A",{href:!0});var oHr=s(V$);m2o=r(oHr,"BartForConditionalGeneration"),oHr.forEach(t),g2o=r(G3e," (BART model)"),G3e.forEach(t),h2o=i(D),o1=n(D,"LI",{});var O3e=s(o1);Cre=n(O3e,"STRONG",{});var rHr=s(Cre);p2o=r(rHr,"bert"),rHr.forEach(t),_2o=r(O3e," \u2014 "),z$=n(O3e,"A",{href:!0});var tHr=s(z$);u2o=r(tHr,"BertForMaskedLM"),tHr.forEach(t),b2o=r(O3e," (BERT model)"),O3e.forEach(t),v2o=i(D),r1=n(D,"LI",{});var X3e=s(r1);Mre=n(X3e,"STRONG",{});var aHr=s(Mre);T2o=r(aHr,"big_bird"),aHr.forEach(t),F2o=r(X3e," \u2014 "),W$=n(X3e,"A",{href:!0});var nHr=s(W$);C2o=r(nHr,"BigBirdForMaskedLM"),nHr.forEach(t),M2o=r(X3e," (BigBird model)"),X3e.forEach(t),E2o=i(D),t1=n(D,"LI",{});var V3e=s(t1);Ere=n(V3e,"STRONG",{});var sHr=s(Ere);y2o=r(sHr,"camembert"),sHr.forEach(t),w2o=r(V3e," \u2014 "),Q$=n(V3e,"A",{href:!0});var lHr=s(Q$);A2o=r(lHr,"CamembertForMaskedLM"),lHr.forEach(t),L2o=r(V3e," (CamemBERT model)"),V3e.forEach(t),B2o=i(D),a1=n(D,"LI",{});var z3e=s(a1);yre=n(z3e,"STRONG",{});var iHr=s(yre);x2o=r(iHr,"convbert"),iHr.forEach(t),k2o=r(z3e," \u2014 "),H$=n(z3e,"A",{href:!0});var dHr=s(H$);R2o=r(dHr,"ConvBertForMaskedLM"),dHr.forEach(t),S2o=r(z3e," (ConvBERT model)"),z3e.forEach(t),P2o=i(D),n1=n(D,"LI",{});var W3e=s(n1);wre=n(W3e,"STRONG",{});var cHr=s(wre);$2o=r(cHr,"data2vec-text"),cHr.forEach(t),I2o=r(W3e," \u2014 "),U$=n(W3e,"A",{href:!0});var fHr=s(U$);N2o=r(fHr,"Data2VecTextForMaskedLM"),fHr.forEach(t),D2o=r(W3e," (Data2VecText model)"),W3e.forEach(t),j2o=i(D),s1=n(D,"LI",{});var Q3e=s(s1);Are=n(Q3e,"STRONG",{});var mHr=s(Are);q2o=r(mHr,"deberta"),mHr.forEach(t),G2o=r(Q3e," \u2014 "),J$=n(Q3e,"A",{href:!0});var gHr=s(J$);O2o=r(gHr,"DebertaForMaskedLM"),gHr.forEach(t),X2o=r(Q3e," (DeBERTa model)"),Q3e.forEach(t),V2o=i(D),l1=n(D,"LI",{});var H3e=s(l1);Lre=n(H3e,"STRONG",{});var hHr=s(Lre);z2o=r(hHr,"deberta-v2"),hHr.forEach(t),W2o=r(H3e," \u2014 "),Y$=n(H3e,"A",{href:!0});var pHr=s(Y$);Q2o=r(pHr,"DebertaV2ForMaskedLM"),pHr.forEach(t),H2o=r(H3e," (DeBERTa-v2 model)"),H3e.forEach(t),U2o=i(D),i1=n(D,"LI",{});var U3e=s(i1);Bre=n(U3e,"STRONG",{});var _Hr=s(Bre);J2o=r(_Hr,"distilbert"),_Hr.forEach(t),Y2o=r(U3e," \u2014 "),K$=n(U3e,"A",{href:!0});var uHr=s(K$);K2o=r(uHr,"DistilBertForMaskedLM"),uHr.forEach(t),Z2o=r(U3e," (DistilBERT model)"),U3e.forEach(t),evo=i(D),d1=n(D,"LI",{});var J3e=s(d1);xre=n(J3e,"STRONG",{});var bHr=s(xre);ovo=r(bHr,"electra"),bHr.forEach(t),rvo=r(J3e," \u2014 "),Z$=n(J3e,"A",{href:!0});var vHr=s(Z$);tvo=r(vHr,"ElectraForMaskedLM"),vHr.forEach(t),avo=r(J3e," (ELECTRA model)"),J3e.forEach(t),nvo=i(D),c1=n(D,"LI",{});var Y3e=s(c1);kre=n(Y3e,"STRONG",{});var THr=s(kre);svo=r(THr,"flaubert"),THr.forEach(t),lvo=r(Y3e," \u2014 "),eI=n(Y3e,"A",{href:!0});var FHr=s(eI);ivo=r(FHr,"FlaubertWithLMHeadModel"),FHr.forEach(t),dvo=r(Y3e," (FlauBERT model)"),Y3e.forEach(t),cvo=i(D),f1=n(D,"LI",{});var K3e=s(f1);Rre=n(K3e,"STRONG",{});var CHr=s(Rre);fvo=r(CHr,"fnet"),CHr.forEach(t),mvo=r(K3e," \u2014 "),oI=n(K3e,"A",{href:!0});var MHr=s(oI);gvo=r(MHr,"FNetForMaskedLM"),MHr.forEach(t),hvo=r(K3e," (FNet model)"),K3e.forEach(t),pvo=i(D),m1=n(D,"LI",{});var Z3e=s(m1);Sre=n(Z3e,"STRONG",{});var EHr=s(Sre);_vo=r(EHr,"funnel"),EHr.forEach(t),uvo=r(Z3e," \u2014 "),rI=n(Z3e,"A",{href:!0});var yHr=s(rI);bvo=r(yHr,"FunnelForMaskedLM"),yHr.forEach(t),vvo=r(Z3e," (Funnel Transformer model)"),Z3e.forEach(t),Tvo=i(D),g1=n(D,"LI",{});var eye=s(g1);Pre=n(eye,"STRONG",{});var wHr=s(Pre);Fvo=r(wHr,"ibert"),wHr.forEach(t),Cvo=r(eye," \u2014 "),tI=n(eye,"A",{href:!0});var AHr=s(tI);Mvo=r(AHr,"IBertForMaskedLM"),AHr.forEach(t),Evo=r(eye," (I-BERT model)"),eye.forEach(t),yvo=i(D),h1=n(D,"LI",{});var oye=s(h1);$re=n(oye,"STRONG",{});var LHr=s($re);wvo=r(LHr,"layoutlm"),LHr.forEach(t),Avo=r(oye," \u2014 "),aI=n(oye,"A",{href:!0});var BHr=s(aI);Lvo=r(BHr,"LayoutLMForMaskedLM"),BHr.forEach(t),Bvo=r(oye," (LayoutLM model)"),oye.forEach(t),xvo=i(D),p1=n(D,"LI",{});var rye=s(p1);Ire=n(rye,"STRONG",{});var xHr=s(Ire);kvo=r(xHr,"longformer"),xHr.forEach(t),Rvo=r(rye," \u2014 "),nI=n(rye,"A",{href:!0});var kHr=s(nI);Svo=r(kHr,"LongformerForMaskedLM"),kHr.forEach(t),Pvo=r(rye," (Longformer model)"),rye.forEach(t),$vo=i(D),_1=n(D,"LI",{});var tye=s(_1);Nre=n(tye,"STRONG",{});var RHr=s(Nre);Ivo=r(RHr,"mbart"),RHr.forEach(t),Nvo=r(tye," \u2014 "),sI=n(tye,"A",{href:!0});var SHr=s(sI);Dvo=r(SHr,"MBartForConditionalGeneration"),SHr.forEach(t),jvo=r(tye," (mBART model)"),tye.forEach(t),qvo=i(D),u1=n(D,"LI",{});var aye=s(u1);Dre=n(aye,"STRONG",{});var PHr=s(Dre);Gvo=r(PHr,"megatron-bert"),PHr.forEach(t),Ovo=r(aye," \u2014 "),lI=n(aye,"A",{href:!0});var $Hr=s(lI);Xvo=r($Hr,"MegatronBertForMaskedLM"),$Hr.forEach(t),Vvo=r(aye," (MegatronBert model)"),aye.forEach(t),zvo=i(D),b1=n(D,"LI",{});var nye=s(b1);jre=n(nye,"STRONG",{});var IHr=s(jre);Wvo=r(IHr,"mobilebert"),IHr.forEach(t),Qvo=r(nye," \u2014 "),iI=n(nye,"A",{href:!0});var NHr=s(iI);Hvo=r(NHr,"MobileBertForMaskedLM"),NHr.forEach(t),Uvo=r(nye," (MobileBERT model)"),nye.forEach(t),Jvo=i(D),v1=n(D,"LI",{});var sye=s(v1);qre=n(sye,"STRONG",{});var DHr=s(qre);Yvo=r(DHr,"mpnet"),DHr.forEach(t),Kvo=r(sye," \u2014 "),dI=n(sye,"A",{href:!0});var jHr=s(dI);Zvo=r(jHr,"MPNetForMaskedLM"),jHr.forEach(t),eTo=r(sye," (MPNet model)"),sye.forEach(t),oTo=i(D),T1=n(D,"LI",{});var lye=s(T1);Gre=n(lye,"STRONG",{});var qHr=s(Gre);rTo=r(qHr,"nystromformer"),qHr.forEach(t),tTo=r(lye," \u2014 "),cI=n(lye,"A",{href:!0});var GHr=s(cI);aTo=r(GHr,"NystromformerForMaskedLM"),GHr.forEach(t),nTo=r(lye," (Nystromformer model)"),lye.forEach(t),sTo=i(D),F1=n(D,"LI",{});var iye=s(F1);Ore=n(iye,"STRONG",{});var OHr=s(Ore);lTo=r(OHr,"perceiver"),OHr.forEach(t),iTo=r(iye," \u2014 "),fI=n(iye,"A",{href:!0});var XHr=s(fI);dTo=r(XHr,"PerceiverForMaskedLM"),XHr.forEach(t),cTo=r(iye," (Perceiver model)"),iye.forEach(t),fTo=i(D),C1=n(D,"LI",{});var dye=s(C1);Xre=n(dye,"STRONG",{});var VHr=s(Xre);mTo=r(VHr,"qdqbert"),VHr.forEach(t),gTo=r(dye," \u2014 "),mI=n(dye,"A",{href:!0});var zHr=s(mI);hTo=r(zHr,"QDQBertForMaskedLM"),zHr.forEach(t),pTo=r(dye," (QDQBert model)"),dye.forEach(t),_To=i(D),M1=n(D,"LI",{});var cye=s(M1);Vre=n(cye,"STRONG",{});var WHr=s(Vre);uTo=r(WHr,"reformer"),WHr.forEach(t),bTo=r(cye," \u2014 "),gI=n(cye,"A",{href:!0});var QHr=s(gI);vTo=r(QHr,"ReformerForMaskedLM"),QHr.forEach(t),TTo=r(cye," (Reformer model)"),cye.forEach(t),FTo=i(D),E1=n(D,"LI",{});var fye=s(E1);zre=n(fye,"STRONG",{});var HHr=s(zre);CTo=r(HHr,"rembert"),HHr.forEach(t),MTo=r(fye," \u2014 "),hI=n(fye,"A",{href:!0});var UHr=s(hI);ETo=r(UHr,"RemBertForMaskedLM"),UHr.forEach(t),yTo=r(fye," (RemBERT model)"),fye.forEach(t),wTo=i(D),y1=n(D,"LI",{});var mye=s(y1);Wre=n(mye,"STRONG",{});var JHr=s(Wre);ATo=r(JHr,"roberta"),JHr.forEach(t),LTo=r(mye," \u2014 "),pI=n(mye,"A",{href:!0});var YHr=s(pI);BTo=r(YHr,"RobertaForMaskedLM"),YHr.forEach(t),xTo=r(mye," (RoBERTa model)"),mye.forEach(t),kTo=i(D),w1=n(D,"LI",{});var gye=s(w1);Qre=n(gye,"STRONG",{});var KHr=s(Qre);RTo=r(KHr,"roformer"),KHr.forEach(t),STo=r(gye," \u2014 "),_I=n(gye,"A",{href:!0});var ZHr=s(_I);PTo=r(ZHr,"RoFormerForMaskedLM"),ZHr.forEach(t),$To=r(gye," (RoFormer model)"),gye.forEach(t),ITo=i(D),A1=n(D,"LI",{});var hye=s(A1);Hre=n(hye,"STRONG",{});var eUr=s(Hre);NTo=r(eUr,"squeezebert"),eUr.forEach(t),DTo=r(hye," \u2014 "),uI=n(hye,"A",{href:!0});var oUr=s(uI);jTo=r(oUr,"SqueezeBertForMaskedLM"),oUr.forEach(t),qTo=r(hye," (SqueezeBERT model)"),hye.forEach(t),GTo=i(D),L1=n(D,"LI",{});var pye=s(L1);Ure=n(pye,"STRONG",{});var rUr=s(Ure);OTo=r(rUr,"tapas"),rUr.forEach(t),XTo=r(pye," \u2014 "),bI=n(pye,"A",{href:!0});var tUr=s(bI);VTo=r(tUr,"TapasForMaskedLM"),tUr.forEach(t),zTo=r(pye," (TAPAS model)"),pye.forEach(t),WTo=i(D),B1=n(D,"LI",{});var _ye=s(B1);Jre=n(_ye,"STRONG",{});var aUr=s(Jre);QTo=r(aUr,"wav2vec2"),aUr.forEach(t),HTo=r(_ye," \u2014 "),Yre=n(_ye,"CODE",{});var nUr=s(Yre);UTo=r(nUr,"Wav2Vec2ForMaskedLM"),nUr.forEach(t),JTo=r(_ye,"(Wav2Vec2 model)"),_ye.forEach(t),YTo=i(D),x1=n(D,"LI",{});var uye=s(x1);Kre=n(uye,"STRONG",{});var sUr=s(Kre);KTo=r(sUr,"xlm"),sUr.forEach(t),ZTo=r(uye," \u2014 "),vI=n(uye,"A",{href:!0});var lUr=s(vI);eFo=r(lUr,"XLMWithLMHeadModel"),lUr.forEach(t),oFo=r(uye," (XLM model)"),uye.forEach(t),rFo=i(D),k1=n(D,"LI",{});var bye=s(k1);Zre=n(bye,"STRONG",{});var iUr=s(Zre);tFo=r(iUr,"xlm-roberta"),iUr.forEach(t),aFo=r(bye," \u2014 "),TI=n(bye,"A",{href:!0});var dUr=s(TI);nFo=r(dUr,"XLMRobertaForMaskedLM"),dUr.forEach(t),sFo=r(bye," (XLM-RoBERTa model)"),bye.forEach(t),lFo=i(D),R1=n(D,"LI",{});var vye=s(R1);ete=n(vye,"STRONG",{});var cUr=s(ete);iFo=r(cUr,"xlm-roberta-xl"),cUr.forEach(t),dFo=r(vye," \u2014 "),FI=n(vye,"A",{href:!0});var fUr=s(FI);cFo=r(fUr,"XLMRobertaXLForMaskedLM"),fUr.forEach(t),fFo=r(vye," (XLM-RoBERTa-XL model)"),vye.forEach(t),mFo=i(D),S1=n(D,"LI",{});var Tye=s(S1);ote=n(Tye,"STRONG",{});var mUr=s(ote);gFo=r(mUr,"yoso"),mUr.forEach(t),hFo=r(Tye," \u2014 "),CI=n(Tye,"A",{href:!0});var gUr=s(CI);pFo=r(gUr,"YosoForMaskedLM"),gUr.forEach(t),_Fo=r(Tye," (YOSO model)"),Tye.forEach(t),D.forEach(t),uFo=i(Xt),P1=n(Xt,"P",{});var Fye=s(P1);bFo=r(Fye,"The model is set in evaluation mode by default using "),rte=n(Fye,"CODE",{});var hUr=s(rte);vFo=r(hUr,"model.eval()"),hUr.forEach(t),TFo=r(Fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tte=n(Fye,"CODE",{});var pUr=s(tte);FFo=r(pUr,"model.train()"),pUr.forEach(t),Fye.forEach(t),CFo=i(Xt),ate=n(Xt,"P",{});var _Ur=s(ate);MFo=r(_Ur,"Examples:"),_Ur.forEach(t),EFo=i(Xt),m(hy.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),wke=i(c),dd=n(c,"H2",{class:!0});var $Se=s(dd);$1=n($Se,"A",{id:!0,class:!0,href:!0});var uUr=s($1);nte=n(uUr,"SPAN",{});var bUr=s(nte);m(py.$$.fragment,bUr),bUr.forEach(t),uUr.forEach(t),yFo=i($Se),ste=n($Se,"SPAN",{});var vUr=s(ste);wFo=r(vUr,"AutoModelForSeq2SeqLM"),vUr.forEach(t),$Se.forEach(t),Ake=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(_y.$$.fragment,el),AFo=i(el),cd=n(el,"P",{});var nW=s(cd);LFo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lte=n(nW,"CODE",{});var TUr=s(lte);BFo=r(TUr,"from_pretrained()"),TUr.forEach(t),xFo=r(nW,"class method or the "),ite=n(nW,"CODE",{});var FUr=s(ite);kFo=r(FUr,"from_config()"),FUr.forEach(t),RFo=r(nW,`class
method.`),nW.forEach(t),SFo=i(el),uy=n(el,"P",{});var ISe=s(uy);PFo=r(ISe,"This class cannot be instantiated directly using "),dte=n(ISe,"CODE",{});var CUr=s(dte);$Fo=r(CUr,"__init__()"),CUr.forEach(t),IFo=r(ISe," (throws an error)."),ISe.forEach(t),NFo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(by.$$.fragment,ol),DFo=i(ol),cte=n(ol,"P",{});var MUr=s(cte);jFo=r(MUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MUr.forEach(t),qFo=i(ol),fd=n(ol,"P",{});var sW=s(fd);GFo=r(sW,`Note:
Loading a model from its configuration file does `),fte=n(sW,"STRONG",{});var EUr=s(fte);OFo=r(EUr,"not"),EUr.forEach(t),XFo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=n(sW,"CODE",{});var yUr=s(mte);VFo=r(yUr,"from_pretrained()"),yUr.forEach(t),zFo=r(sW,"to load the model weights."),sW.forEach(t),WFo=i(ol),gte=n(ol,"P",{});var wUr=s(gte);QFo=r(wUr,"Examples:"),wUr.forEach(t),HFo=i(ol),m(vy.$$.fragment,ol),ol.forEach(t),UFo=i(el),Oe=n(el,"DIV",{class:!0});var Vt=s(Oe);m(Ty.$$.fragment,Vt),JFo=i(Vt),hte=n(Vt,"P",{});var AUr=s(hte);YFo=r(AUr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AUr.forEach(t),KFo=i(Vt),Ha=n(Vt,"P",{});var pE=s(Ha);ZFo=r(pE,"The model class to instantiate is selected based on the "),pte=n(pE,"CODE",{});var LUr=s(pte);eCo=r(LUr,"model_type"),LUr.forEach(t),oCo=r(pE,` property of the config object (either
passed as an argument or loaded from `),_te=n(pE,"CODE",{});var BUr=s(_te);rCo=r(BUr,"pretrained_model_name_or_path"),BUr.forEach(t),tCo=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=n(pE,"CODE",{});var xUr=s(ute);aCo=r(xUr,"pretrained_model_name_or_path"),xUr.forEach(t),nCo=r(pE,":"),pE.forEach(t),sCo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);I1=n(ie,"LI",{});var Cye=s(I1);bte=n(Cye,"STRONG",{});var kUr=s(bte);lCo=r(kUr,"bart"),kUr.forEach(t),iCo=r(Cye," \u2014 "),MI=n(Cye,"A",{href:!0});var RUr=s(MI);dCo=r(RUr,"BartForConditionalGeneration"),RUr.forEach(t),cCo=r(Cye," (BART model)"),Cye.forEach(t),fCo=i(ie),N1=n(ie,"LI",{});var Mye=s(N1);vte=n(Mye,"STRONG",{});var SUr=s(vte);mCo=r(SUr,"bigbird_pegasus"),SUr.forEach(t),gCo=r(Mye," \u2014 "),EI=n(Mye,"A",{href:!0});var PUr=s(EI);hCo=r(PUr,"BigBirdPegasusForConditionalGeneration"),PUr.forEach(t),pCo=r(Mye," (BigBirdPegasus model)"),Mye.forEach(t),_Co=i(ie),D1=n(ie,"LI",{});var Eye=s(D1);Tte=n(Eye,"STRONG",{});var $Ur=s(Tte);uCo=r($Ur,"blenderbot"),$Ur.forEach(t),bCo=r(Eye," \u2014 "),yI=n(Eye,"A",{href:!0});var IUr=s(yI);vCo=r(IUr,"BlenderbotForConditionalGeneration"),IUr.forEach(t),TCo=r(Eye," (Blenderbot model)"),Eye.forEach(t),FCo=i(ie),j1=n(ie,"LI",{});var yye=s(j1);Fte=n(yye,"STRONG",{});var NUr=s(Fte);CCo=r(NUr,"blenderbot-small"),NUr.forEach(t),MCo=r(yye," \u2014 "),wI=n(yye,"A",{href:!0});var DUr=s(wI);ECo=r(DUr,"BlenderbotSmallForConditionalGeneration"),DUr.forEach(t),yCo=r(yye," (BlenderbotSmall model)"),yye.forEach(t),wCo=i(ie),q1=n(ie,"LI",{});var wye=s(q1);Cte=n(wye,"STRONG",{});var jUr=s(Cte);ACo=r(jUr,"encoder-decoder"),jUr.forEach(t),LCo=r(wye," \u2014 "),AI=n(wye,"A",{href:!0});var qUr=s(AI);BCo=r(qUr,"EncoderDecoderModel"),qUr.forEach(t),xCo=r(wye," (Encoder decoder model)"),wye.forEach(t),kCo=i(ie),G1=n(ie,"LI",{});var Aye=s(G1);Mte=n(Aye,"STRONG",{});var GUr=s(Mte);RCo=r(GUr,"fsmt"),GUr.forEach(t),SCo=r(Aye," \u2014 "),LI=n(Aye,"A",{href:!0});var OUr=s(LI);PCo=r(OUr,"FSMTForConditionalGeneration"),OUr.forEach(t),$Co=r(Aye," (FairSeq Machine-Translation model)"),Aye.forEach(t),ICo=i(ie),O1=n(ie,"LI",{});var Lye=s(O1);Ete=n(Lye,"STRONG",{});var XUr=s(Ete);NCo=r(XUr,"led"),XUr.forEach(t),DCo=r(Lye," \u2014 "),BI=n(Lye,"A",{href:!0});var VUr=s(BI);jCo=r(VUr,"LEDForConditionalGeneration"),VUr.forEach(t),qCo=r(Lye," (LED model)"),Lye.forEach(t),GCo=i(ie),X1=n(ie,"LI",{});var Bye=s(X1);yte=n(Bye,"STRONG",{});var zUr=s(yte);OCo=r(zUr,"m2m_100"),zUr.forEach(t),XCo=r(Bye," \u2014 "),xI=n(Bye,"A",{href:!0});var WUr=s(xI);VCo=r(WUr,"M2M100ForConditionalGeneration"),WUr.forEach(t),zCo=r(Bye," (M2M100 model)"),Bye.forEach(t),WCo=i(ie),V1=n(ie,"LI",{});var xye=s(V1);wte=n(xye,"STRONG",{});var QUr=s(wte);QCo=r(QUr,"marian"),QUr.forEach(t),HCo=r(xye," \u2014 "),kI=n(xye,"A",{href:!0});var HUr=s(kI);UCo=r(HUr,"MarianMTModel"),HUr.forEach(t),JCo=r(xye," (Marian model)"),xye.forEach(t),YCo=i(ie),z1=n(ie,"LI",{});var kye=s(z1);Ate=n(kye,"STRONG",{});var UUr=s(Ate);KCo=r(UUr,"mbart"),UUr.forEach(t),ZCo=r(kye," \u2014 "),RI=n(kye,"A",{href:!0});var JUr=s(RI);eMo=r(JUr,"MBartForConditionalGeneration"),JUr.forEach(t),oMo=r(kye," (mBART model)"),kye.forEach(t),rMo=i(ie),W1=n(ie,"LI",{});var Rye=s(W1);Lte=n(Rye,"STRONG",{});var YUr=s(Lte);tMo=r(YUr,"mt5"),YUr.forEach(t),aMo=r(Rye," \u2014 "),SI=n(Rye,"A",{href:!0});var KUr=s(SI);nMo=r(KUr,"MT5ForConditionalGeneration"),KUr.forEach(t),sMo=r(Rye," (mT5 model)"),Rye.forEach(t),lMo=i(ie),Q1=n(ie,"LI",{});var Sye=s(Q1);Bte=n(Sye,"STRONG",{});var ZUr=s(Bte);iMo=r(ZUr,"pegasus"),ZUr.forEach(t),dMo=r(Sye," \u2014 "),PI=n(Sye,"A",{href:!0});var eJr=s(PI);cMo=r(eJr,"PegasusForConditionalGeneration"),eJr.forEach(t),fMo=r(Sye," (Pegasus model)"),Sye.forEach(t),mMo=i(ie),H1=n(ie,"LI",{});var Pye=s(H1);xte=n(Pye,"STRONG",{});var oJr=s(xte);gMo=r(oJr,"plbart"),oJr.forEach(t),hMo=r(Pye," \u2014 "),$I=n(Pye,"A",{href:!0});var rJr=s($I);pMo=r(rJr,"PLBartForConditionalGeneration"),rJr.forEach(t),_Mo=r(Pye," (PLBart model)"),Pye.forEach(t),uMo=i(ie),U1=n(ie,"LI",{});var $ye=s(U1);kte=n($ye,"STRONG",{});var tJr=s(kte);bMo=r(tJr,"prophetnet"),tJr.forEach(t),vMo=r($ye," \u2014 "),II=n($ye,"A",{href:!0});var aJr=s(II);TMo=r(aJr,"ProphetNetForConditionalGeneration"),aJr.forEach(t),FMo=r($ye," (ProphetNet model)"),$ye.forEach(t),CMo=i(ie),J1=n(ie,"LI",{});var Iye=s(J1);Rte=n(Iye,"STRONG",{});var nJr=s(Rte);MMo=r(nJr,"t5"),nJr.forEach(t),EMo=r(Iye," \u2014 "),NI=n(Iye,"A",{href:!0});var sJr=s(NI);yMo=r(sJr,"T5ForConditionalGeneration"),sJr.forEach(t),wMo=r(Iye," (T5 model)"),Iye.forEach(t),AMo=i(ie),Y1=n(ie,"LI",{});var Nye=s(Y1);Ste=n(Nye,"STRONG",{});var lJr=s(Ste);LMo=r(lJr,"xlm-prophetnet"),lJr.forEach(t),BMo=r(Nye," \u2014 "),DI=n(Nye,"A",{href:!0});var iJr=s(DI);xMo=r(iJr,"XLMProphetNetForConditionalGeneration"),iJr.forEach(t),kMo=r(Nye," (XLMProphetNet model)"),Nye.forEach(t),ie.forEach(t),RMo=i(Vt),K1=n(Vt,"P",{});var Dye=s(K1);SMo=r(Dye,"The model is set in evaluation mode by default using "),Pte=n(Dye,"CODE",{});var dJr=s(Pte);PMo=r(dJr,"model.eval()"),dJr.forEach(t),$Mo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=n(Dye,"CODE",{});var cJr=s($te);IMo=r(cJr,"model.train()"),cJr.forEach(t),Dye.forEach(t),NMo=i(Vt),Ite=n(Vt,"P",{});var fJr=s(Ite);DMo=r(fJr,"Examples:"),fJr.forEach(t),jMo=i(Vt),m(Fy.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Lke=i(c),md=n(c,"H2",{class:!0});var NSe=s(md);Z1=n(NSe,"A",{id:!0,class:!0,href:!0});var mJr=s(Z1);Nte=n(mJr,"SPAN",{});var gJr=s(Nte);m(Cy.$$.fragment,gJr),gJr.forEach(t),mJr.forEach(t),qMo=i(NSe),Dte=n(NSe,"SPAN",{});var hJr=s(Dte);GMo=r(hJr,"AutoModelForSequenceClassification"),hJr.forEach(t),NSe.forEach(t),Bke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(My.$$.fragment,rl),OMo=i(rl),gd=n(rl,"P",{});var lW=s(gd);XMo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jte=n(lW,"CODE",{});var pJr=s(jte);VMo=r(pJr,"from_pretrained()"),pJr.forEach(t),zMo=r(lW,"class method or the "),qte=n(lW,"CODE",{});var _Jr=s(qte);WMo=r(_Jr,"from_config()"),_Jr.forEach(t),QMo=r(lW,`class
method.`),lW.forEach(t),HMo=i(rl),Ey=n(rl,"P",{});var DSe=s(Ey);UMo=r(DSe,"This class cannot be instantiated directly using "),Gte=n(DSe,"CODE",{});var uJr=s(Gte);JMo=r(uJr,"__init__()"),uJr.forEach(t),YMo=r(DSe," (throws an error)."),DSe.forEach(t),KMo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(yy.$$.fragment,tl),ZMo=i(tl),Ote=n(tl,"P",{});var bJr=s(Ote);e4o=r(bJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bJr.forEach(t),o4o=i(tl),hd=n(tl,"P",{});var iW=s(hd);r4o=r(iW,`Note:
Loading a model from its configuration file does `),Xte=n(iW,"STRONG",{});var vJr=s(Xte);t4o=r(vJr,"not"),vJr.forEach(t),a4o=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vte=n(iW,"CODE",{});var TJr=s(Vte);n4o=r(TJr,"from_pretrained()"),TJr.forEach(t),s4o=r(iW,"to load the model weights."),iW.forEach(t),l4o=i(tl),zte=n(tl,"P",{});var FJr=s(zte);i4o=r(FJr,"Examples:"),FJr.forEach(t),d4o=i(tl),m(wy.$$.fragment,tl),tl.forEach(t),c4o=i(rl),Xe=n(rl,"DIV",{class:!0});var zt=s(Xe);m(Ay.$$.fragment,zt),f4o=i(zt),Wte=n(zt,"P",{});var CJr=s(Wte);m4o=r(CJr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CJr.forEach(t),g4o=i(zt),Ua=n(zt,"P",{});var _E=s(Ua);h4o=r(_E,"The model class to instantiate is selected based on the "),Qte=n(_E,"CODE",{});var MJr=s(Qte);p4o=r(MJr,"model_type"),MJr.forEach(t),_4o=r(_E,` property of the config object (either
passed as an argument or loaded from `),Hte=n(_E,"CODE",{});var EJr=s(Hte);u4o=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),b4o=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ute=n(_E,"CODE",{});var yJr=s(Ute);v4o=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),T4o=r(_E,":"),_E.forEach(t),F4o=i(zt),A=n(zt,"UL",{});var L=s(A);e9=n(L,"LI",{});var jye=s(e9);Jte=n(jye,"STRONG",{});var wJr=s(Jte);C4o=r(wJr,"albert"),wJr.forEach(t),M4o=r(jye," \u2014 "),jI=n(jye,"A",{href:!0});var AJr=s(jI);E4o=r(AJr,"AlbertForSequenceClassification"),AJr.forEach(t),y4o=r(jye," (ALBERT model)"),jye.forEach(t),w4o=i(L),o9=n(L,"LI",{});var qye=s(o9);Yte=n(qye,"STRONG",{});var LJr=s(Yte);A4o=r(LJr,"bart"),LJr.forEach(t),L4o=r(qye," \u2014 "),qI=n(qye,"A",{href:!0});var BJr=s(qI);B4o=r(BJr,"BartForSequenceClassification"),BJr.forEach(t),x4o=r(qye," (BART model)"),qye.forEach(t),k4o=i(L),r9=n(L,"LI",{});var Gye=s(r9);Kte=n(Gye,"STRONG",{});var xJr=s(Kte);R4o=r(xJr,"bert"),xJr.forEach(t),S4o=r(Gye," \u2014 "),GI=n(Gye,"A",{href:!0});var kJr=s(GI);P4o=r(kJr,"BertForSequenceClassification"),kJr.forEach(t),$4o=r(Gye," (BERT model)"),Gye.forEach(t),I4o=i(L),t9=n(L,"LI",{});var Oye=s(t9);Zte=n(Oye,"STRONG",{});var RJr=s(Zte);N4o=r(RJr,"big_bird"),RJr.forEach(t),D4o=r(Oye," \u2014 "),OI=n(Oye,"A",{href:!0});var SJr=s(OI);j4o=r(SJr,"BigBirdForSequenceClassification"),SJr.forEach(t),q4o=r(Oye," (BigBird model)"),Oye.forEach(t),G4o=i(L),a9=n(L,"LI",{});var Xye=s(a9);eae=n(Xye,"STRONG",{});var PJr=s(eae);O4o=r(PJr,"bigbird_pegasus"),PJr.forEach(t),X4o=r(Xye," \u2014 "),XI=n(Xye,"A",{href:!0});var $Jr=s(XI);V4o=r($Jr,"BigBirdPegasusForSequenceClassification"),$Jr.forEach(t),z4o=r(Xye," (BigBirdPegasus model)"),Xye.forEach(t),W4o=i(L),n9=n(L,"LI",{});var Vye=s(n9);oae=n(Vye,"STRONG",{});var IJr=s(oae);Q4o=r(IJr,"camembert"),IJr.forEach(t),H4o=r(Vye," \u2014 "),VI=n(Vye,"A",{href:!0});var NJr=s(VI);U4o=r(NJr,"CamembertForSequenceClassification"),NJr.forEach(t),J4o=r(Vye," (CamemBERT model)"),Vye.forEach(t),Y4o=i(L),s9=n(L,"LI",{});var zye=s(s9);rae=n(zye,"STRONG",{});var DJr=s(rae);K4o=r(DJr,"canine"),DJr.forEach(t),Z4o=r(zye," \u2014 "),zI=n(zye,"A",{href:!0});var jJr=s(zI);eEo=r(jJr,"CanineForSequenceClassification"),jJr.forEach(t),oEo=r(zye," (Canine model)"),zye.forEach(t),rEo=i(L),l9=n(L,"LI",{});var Wye=s(l9);tae=n(Wye,"STRONG",{});var qJr=s(tae);tEo=r(qJr,"convbert"),qJr.forEach(t),aEo=r(Wye," \u2014 "),WI=n(Wye,"A",{href:!0});var GJr=s(WI);nEo=r(GJr,"ConvBertForSequenceClassification"),GJr.forEach(t),sEo=r(Wye," (ConvBERT model)"),Wye.forEach(t),lEo=i(L),i9=n(L,"LI",{});var Qye=s(i9);aae=n(Qye,"STRONG",{});var OJr=s(aae);iEo=r(OJr,"ctrl"),OJr.forEach(t),dEo=r(Qye," \u2014 "),QI=n(Qye,"A",{href:!0});var XJr=s(QI);cEo=r(XJr,"CTRLForSequenceClassification"),XJr.forEach(t),fEo=r(Qye," (CTRL model)"),Qye.forEach(t),mEo=i(L),d9=n(L,"LI",{});var Hye=s(d9);nae=n(Hye,"STRONG",{});var VJr=s(nae);gEo=r(VJr,"data2vec-text"),VJr.forEach(t),hEo=r(Hye," \u2014 "),HI=n(Hye,"A",{href:!0});var zJr=s(HI);pEo=r(zJr,"Data2VecTextForSequenceClassification"),zJr.forEach(t),_Eo=r(Hye," (Data2VecText model)"),Hye.forEach(t),uEo=i(L),c9=n(L,"LI",{});var Uye=s(c9);sae=n(Uye,"STRONG",{});var WJr=s(sae);bEo=r(WJr,"deberta"),WJr.forEach(t),vEo=r(Uye," \u2014 "),UI=n(Uye,"A",{href:!0});var QJr=s(UI);TEo=r(QJr,"DebertaForSequenceClassification"),QJr.forEach(t),FEo=r(Uye," (DeBERTa model)"),Uye.forEach(t),CEo=i(L),f9=n(L,"LI",{});var Jye=s(f9);lae=n(Jye,"STRONG",{});var HJr=s(lae);MEo=r(HJr,"deberta-v2"),HJr.forEach(t),EEo=r(Jye," \u2014 "),JI=n(Jye,"A",{href:!0});var UJr=s(JI);yEo=r(UJr,"DebertaV2ForSequenceClassification"),UJr.forEach(t),wEo=r(Jye," (DeBERTa-v2 model)"),Jye.forEach(t),AEo=i(L),m9=n(L,"LI",{});var Yye=s(m9);iae=n(Yye,"STRONG",{});var JJr=s(iae);LEo=r(JJr,"distilbert"),JJr.forEach(t),BEo=r(Yye," \u2014 "),YI=n(Yye,"A",{href:!0});var YJr=s(YI);xEo=r(YJr,"DistilBertForSequenceClassification"),YJr.forEach(t),kEo=r(Yye," (DistilBERT model)"),Yye.forEach(t),REo=i(L),g9=n(L,"LI",{});var Kye=s(g9);dae=n(Kye,"STRONG",{});var KJr=s(dae);SEo=r(KJr,"electra"),KJr.forEach(t),PEo=r(Kye," \u2014 "),KI=n(Kye,"A",{href:!0});var ZJr=s(KI);$Eo=r(ZJr,"ElectraForSequenceClassification"),ZJr.forEach(t),IEo=r(Kye," (ELECTRA model)"),Kye.forEach(t),NEo=i(L),h9=n(L,"LI",{});var Zye=s(h9);cae=n(Zye,"STRONG",{});var eYr=s(cae);DEo=r(eYr,"flaubert"),eYr.forEach(t),jEo=r(Zye," \u2014 "),ZI=n(Zye,"A",{href:!0});var oYr=s(ZI);qEo=r(oYr,"FlaubertForSequenceClassification"),oYr.forEach(t),GEo=r(Zye," (FlauBERT model)"),Zye.forEach(t),OEo=i(L),p9=n(L,"LI",{});var ewe=s(p9);fae=n(ewe,"STRONG",{});var rYr=s(fae);XEo=r(rYr,"fnet"),rYr.forEach(t),VEo=r(ewe," \u2014 "),eN=n(ewe,"A",{href:!0});var tYr=s(eN);zEo=r(tYr,"FNetForSequenceClassification"),tYr.forEach(t),WEo=r(ewe," (FNet model)"),ewe.forEach(t),QEo=i(L),_9=n(L,"LI",{});var owe=s(_9);mae=n(owe,"STRONG",{});var aYr=s(mae);HEo=r(aYr,"funnel"),aYr.forEach(t),UEo=r(owe," \u2014 "),oN=n(owe,"A",{href:!0});var nYr=s(oN);JEo=r(nYr,"FunnelForSequenceClassification"),nYr.forEach(t),YEo=r(owe," (Funnel Transformer model)"),owe.forEach(t),KEo=i(L),u9=n(L,"LI",{});var rwe=s(u9);gae=n(rwe,"STRONG",{});var sYr=s(gae);ZEo=r(sYr,"gpt2"),sYr.forEach(t),e3o=r(rwe," \u2014 "),rN=n(rwe,"A",{href:!0});var lYr=s(rN);o3o=r(lYr,"GPT2ForSequenceClassification"),lYr.forEach(t),r3o=r(rwe," (OpenAI GPT-2 model)"),rwe.forEach(t),t3o=i(L),b9=n(L,"LI",{});var twe=s(b9);hae=n(twe,"STRONG",{});var iYr=s(hae);a3o=r(iYr,"gpt_neo"),iYr.forEach(t),n3o=r(twe," \u2014 "),tN=n(twe,"A",{href:!0});var dYr=s(tN);s3o=r(dYr,"GPTNeoForSequenceClassification"),dYr.forEach(t),l3o=r(twe," (GPT Neo model)"),twe.forEach(t),i3o=i(L),v9=n(L,"LI",{});var awe=s(v9);pae=n(awe,"STRONG",{});var cYr=s(pae);d3o=r(cYr,"gptj"),cYr.forEach(t),c3o=r(awe," \u2014 "),aN=n(awe,"A",{href:!0});var fYr=s(aN);f3o=r(fYr,"GPTJForSequenceClassification"),fYr.forEach(t),m3o=r(awe," (GPT-J model)"),awe.forEach(t),g3o=i(L),T9=n(L,"LI",{});var nwe=s(T9);_ae=n(nwe,"STRONG",{});var mYr=s(_ae);h3o=r(mYr,"ibert"),mYr.forEach(t),p3o=r(nwe," \u2014 "),nN=n(nwe,"A",{href:!0});var gYr=s(nN);_3o=r(gYr,"IBertForSequenceClassification"),gYr.forEach(t),u3o=r(nwe," (I-BERT model)"),nwe.forEach(t),b3o=i(L),F9=n(L,"LI",{});var swe=s(F9);uae=n(swe,"STRONG",{});var hYr=s(uae);v3o=r(hYr,"layoutlm"),hYr.forEach(t),T3o=r(swe," \u2014 "),sN=n(swe,"A",{href:!0});var pYr=s(sN);F3o=r(pYr,"LayoutLMForSequenceClassification"),pYr.forEach(t),C3o=r(swe," (LayoutLM model)"),swe.forEach(t),M3o=i(L),C9=n(L,"LI",{});var lwe=s(C9);bae=n(lwe,"STRONG",{});var _Yr=s(bae);E3o=r(_Yr,"layoutlmv2"),_Yr.forEach(t),y3o=r(lwe," \u2014 "),lN=n(lwe,"A",{href:!0});var uYr=s(lN);w3o=r(uYr,"LayoutLMv2ForSequenceClassification"),uYr.forEach(t),A3o=r(lwe," (LayoutLMv2 model)"),lwe.forEach(t),L3o=i(L),M9=n(L,"LI",{});var iwe=s(M9);vae=n(iwe,"STRONG",{});var bYr=s(vae);B3o=r(bYr,"led"),bYr.forEach(t),x3o=r(iwe," \u2014 "),iN=n(iwe,"A",{href:!0});var vYr=s(iN);k3o=r(vYr,"LEDForSequenceClassification"),vYr.forEach(t),R3o=r(iwe," (LED model)"),iwe.forEach(t),S3o=i(L),E9=n(L,"LI",{});var dwe=s(E9);Tae=n(dwe,"STRONG",{});var TYr=s(Tae);P3o=r(TYr,"longformer"),TYr.forEach(t),$3o=r(dwe," \u2014 "),dN=n(dwe,"A",{href:!0});var FYr=s(dN);I3o=r(FYr,"LongformerForSequenceClassification"),FYr.forEach(t),N3o=r(dwe," (Longformer model)"),dwe.forEach(t),D3o=i(L),y9=n(L,"LI",{});var cwe=s(y9);Fae=n(cwe,"STRONG",{});var CYr=s(Fae);j3o=r(CYr,"mbart"),CYr.forEach(t),q3o=r(cwe," \u2014 "),cN=n(cwe,"A",{href:!0});var MYr=s(cN);G3o=r(MYr,"MBartForSequenceClassification"),MYr.forEach(t),O3o=r(cwe," (mBART model)"),cwe.forEach(t),X3o=i(L),w9=n(L,"LI",{});var fwe=s(w9);Cae=n(fwe,"STRONG",{});var EYr=s(Cae);V3o=r(EYr,"megatron-bert"),EYr.forEach(t),z3o=r(fwe," \u2014 "),fN=n(fwe,"A",{href:!0});var yYr=s(fN);W3o=r(yYr,"MegatronBertForSequenceClassification"),yYr.forEach(t),Q3o=r(fwe," (MegatronBert model)"),fwe.forEach(t),H3o=i(L),A9=n(L,"LI",{});var mwe=s(A9);Mae=n(mwe,"STRONG",{});var wYr=s(Mae);U3o=r(wYr,"mobilebert"),wYr.forEach(t),J3o=r(mwe," \u2014 "),mN=n(mwe,"A",{href:!0});var AYr=s(mN);Y3o=r(AYr,"MobileBertForSequenceClassification"),AYr.forEach(t),K3o=r(mwe," (MobileBERT model)"),mwe.forEach(t),Z3o=i(L),L9=n(L,"LI",{});var gwe=s(L9);Eae=n(gwe,"STRONG",{});var LYr=s(Eae);eyo=r(LYr,"mpnet"),LYr.forEach(t),oyo=r(gwe," \u2014 "),gN=n(gwe,"A",{href:!0});var BYr=s(gN);ryo=r(BYr,"MPNetForSequenceClassification"),BYr.forEach(t),tyo=r(gwe," (MPNet model)"),gwe.forEach(t),ayo=i(L),B9=n(L,"LI",{});var hwe=s(B9);yae=n(hwe,"STRONG",{});var xYr=s(yae);nyo=r(xYr,"nystromformer"),xYr.forEach(t),syo=r(hwe," \u2014 "),hN=n(hwe,"A",{href:!0});var kYr=s(hN);lyo=r(kYr,"NystromformerForSequenceClassification"),kYr.forEach(t),iyo=r(hwe," (Nystromformer model)"),hwe.forEach(t),dyo=i(L),x9=n(L,"LI",{});var pwe=s(x9);wae=n(pwe,"STRONG",{});var RYr=s(wae);cyo=r(RYr,"openai-gpt"),RYr.forEach(t),fyo=r(pwe," \u2014 "),pN=n(pwe,"A",{href:!0});var SYr=s(pN);myo=r(SYr,"OpenAIGPTForSequenceClassification"),SYr.forEach(t),gyo=r(pwe," (OpenAI GPT model)"),pwe.forEach(t),hyo=i(L),k9=n(L,"LI",{});var _we=s(k9);Aae=n(_we,"STRONG",{});var PYr=s(Aae);pyo=r(PYr,"perceiver"),PYr.forEach(t),_yo=r(_we," \u2014 "),_N=n(_we,"A",{href:!0});var $Yr=s(_N);uyo=r($Yr,"PerceiverForSequenceClassification"),$Yr.forEach(t),byo=r(_we," (Perceiver model)"),_we.forEach(t),vyo=i(L),R9=n(L,"LI",{});var uwe=s(R9);Lae=n(uwe,"STRONG",{});var IYr=s(Lae);Tyo=r(IYr,"plbart"),IYr.forEach(t),Fyo=r(uwe," \u2014 "),uN=n(uwe,"A",{href:!0});var NYr=s(uN);Cyo=r(NYr,"PLBartForSequenceClassification"),NYr.forEach(t),Myo=r(uwe," (PLBart model)"),uwe.forEach(t),Eyo=i(L),S9=n(L,"LI",{});var bwe=s(S9);Bae=n(bwe,"STRONG",{});var DYr=s(Bae);yyo=r(DYr,"qdqbert"),DYr.forEach(t),wyo=r(bwe," \u2014 "),bN=n(bwe,"A",{href:!0});var jYr=s(bN);Ayo=r(jYr,"QDQBertForSequenceClassification"),jYr.forEach(t),Lyo=r(bwe," (QDQBert model)"),bwe.forEach(t),Byo=i(L),P9=n(L,"LI",{});var vwe=s(P9);xae=n(vwe,"STRONG",{});var qYr=s(xae);xyo=r(qYr,"reformer"),qYr.forEach(t),kyo=r(vwe," \u2014 "),vN=n(vwe,"A",{href:!0});var GYr=s(vN);Ryo=r(GYr,"ReformerForSequenceClassification"),GYr.forEach(t),Syo=r(vwe," (Reformer model)"),vwe.forEach(t),Pyo=i(L),$9=n(L,"LI",{});var Twe=s($9);kae=n(Twe,"STRONG",{});var OYr=s(kae);$yo=r(OYr,"rembert"),OYr.forEach(t),Iyo=r(Twe," \u2014 "),TN=n(Twe,"A",{href:!0});var XYr=s(TN);Nyo=r(XYr,"RemBertForSequenceClassification"),XYr.forEach(t),Dyo=r(Twe," (RemBERT model)"),Twe.forEach(t),jyo=i(L),I9=n(L,"LI",{});var Fwe=s(I9);Rae=n(Fwe,"STRONG",{});var VYr=s(Rae);qyo=r(VYr,"roberta"),VYr.forEach(t),Gyo=r(Fwe," \u2014 "),FN=n(Fwe,"A",{href:!0});var zYr=s(FN);Oyo=r(zYr,"RobertaForSequenceClassification"),zYr.forEach(t),Xyo=r(Fwe," (RoBERTa model)"),Fwe.forEach(t),Vyo=i(L),N9=n(L,"LI",{});var Cwe=s(N9);Sae=n(Cwe,"STRONG",{});var WYr=s(Sae);zyo=r(WYr,"roformer"),WYr.forEach(t),Wyo=r(Cwe," \u2014 "),CN=n(Cwe,"A",{href:!0});var QYr=s(CN);Qyo=r(QYr,"RoFormerForSequenceClassification"),QYr.forEach(t),Hyo=r(Cwe," (RoFormer model)"),Cwe.forEach(t),Uyo=i(L),D9=n(L,"LI",{});var Mwe=s(D9);Pae=n(Mwe,"STRONG",{});var HYr=s(Pae);Jyo=r(HYr,"squeezebert"),HYr.forEach(t),Yyo=r(Mwe," \u2014 "),MN=n(Mwe,"A",{href:!0});var UYr=s(MN);Kyo=r(UYr,"SqueezeBertForSequenceClassification"),UYr.forEach(t),Zyo=r(Mwe," (SqueezeBERT model)"),Mwe.forEach(t),ewo=i(L),j9=n(L,"LI",{});var Ewe=s(j9);$ae=n(Ewe,"STRONG",{});var JYr=s($ae);owo=r(JYr,"tapas"),JYr.forEach(t),rwo=r(Ewe," \u2014 "),EN=n(Ewe,"A",{href:!0});var YYr=s(EN);two=r(YYr,"TapasForSequenceClassification"),YYr.forEach(t),awo=r(Ewe," (TAPAS model)"),Ewe.forEach(t),nwo=i(L),q9=n(L,"LI",{});var ywe=s(q9);Iae=n(ywe,"STRONG",{});var KYr=s(Iae);swo=r(KYr,"transfo-xl"),KYr.forEach(t),lwo=r(ywe," \u2014 "),yN=n(ywe,"A",{href:!0});var ZYr=s(yN);iwo=r(ZYr,"TransfoXLForSequenceClassification"),ZYr.forEach(t),dwo=r(ywe," (Transformer-XL model)"),ywe.forEach(t),cwo=i(L),G9=n(L,"LI",{});var wwe=s(G9);Nae=n(wwe,"STRONG",{});var eKr=s(Nae);fwo=r(eKr,"xlm"),eKr.forEach(t),mwo=r(wwe," \u2014 "),wN=n(wwe,"A",{href:!0});var oKr=s(wN);gwo=r(oKr,"XLMForSequenceClassification"),oKr.forEach(t),hwo=r(wwe," (XLM model)"),wwe.forEach(t),pwo=i(L),O9=n(L,"LI",{});var Awe=s(O9);Dae=n(Awe,"STRONG",{});var rKr=s(Dae);_wo=r(rKr,"xlm-roberta"),rKr.forEach(t),uwo=r(Awe," \u2014 "),AN=n(Awe,"A",{href:!0});var tKr=s(AN);bwo=r(tKr,"XLMRobertaForSequenceClassification"),tKr.forEach(t),vwo=r(Awe," (XLM-RoBERTa model)"),Awe.forEach(t),Two=i(L),X9=n(L,"LI",{});var Lwe=s(X9);jae=n(Lwe,"STRONG",{});var aKr=s(jae);Fwo=r(aKr,"xlm-roberta-xl"),aKr.forEach(t),Cwo=r(Lwe," \u2014 "),LN=n(Lwe,"A",{href:!0});var nKr=s(LN);Mwo=r(nKr,"XLMRobertaXLForSequenceClassification"),nKr.forEach(t),Ewo=r(Lwe," (XLM-RoBERTa-XL model)"),Lwe.forEach(t),ywo=i(L),V9=n(L,"LI",{});var Bwe=s(V9);qae=n(Bwe,"STRONG",{});var sKr=s(qae);wwo=r(sKr,"xlnet"),sKr.forEach(t),Awo=r(Bwe," \u2014 "),BN=n(Bwe,"A",{href:!0});var lKr=s(BN);Lwo=r(lKr,"XLNetForSequenceClassification"),lKr.forEach(t),Bwo=r(Bwe," (XLNet model)"),Bwe.forEach(t),xwo=i(L),z9=n(L,"LI",{});var xwe=s(z9);Gae=n(xwe,"STRONG",{});var iKr=s(Gae);kwo=r(iKr,"yoso"),iKr.forEach(t),Rwo=r(xwe," \u2014 "),xN=n(xwe,"A",{href:!0});var dKr=s(xN);Swo=r(dKr,"YosoForSequenceClassification"),dKr.forEach(t),Pwo=r(xwe," (YOSO model)"),xwe.forEach(t),L.forEach(t),$wo=i(zt),W9=n(zt,"P",{});var kwe=s(W9);Iwo=r(kwe,"The model is set in evaluation mode by default using "),Oae=n(kwe,"CODE",{});var cKr=s(Oae);Nwo=r(cKr,"model.eval()"),cKr.forEach(t),Dwo=r(kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xae=n(kwe,"CODE",{});var fKr=s(Xae);jwo=r(fKr,"model.train()"),fKr.forEach(t),kwe.forEach(t),qwo=i(zt),Vae=n(zt,"P",{});var mKr=s(Vae);Gwo=r(mKr,"Examples:"),mKr.forEach(t),Owo=i(zt),m(Ly.$$.fragment,zt),zt.forEach(t),rl.forEach(t),xke=i(c),pd=n(c,"H2",{class:!0});var jSe=s(pd);Q9=n(jSe,"A",{id:!0,class:!0,href:!0});var gKr=s(Q9);zae=n(gKr,"SPAN",{});var hKr=s(zae);m(By.$$.fragment,hKr),hKr.forEach(t),gKr.forEach(t),Xwo=i(jSe),Wae=n(jSe,"SPAN",{});var pKr=s(Wae);Vwo=r(pKr,"AutoModelForMultipleChoice"),pKr.forEach(t),jSe.forEach(t),kke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(xy.$$.fragment,al),zwo=i(al),_d=n(al,"P",{});var dW=s(_d);Wwo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Qae=n(dW,"CODE",{});var _Kr=s(Qae);Qwo=r(_Kr,"from_pretrained()"),_Kr.forEach(t),Hwo=r(dW,"class method or the "),Hae=n(dW,"CODE",{});var uKr=s(Hae);Uwo=r(uKr,"from_config()"),uKr.forEach(t),Jwo=r(dW,`class
method.`),dW.forEach(t),Ywo=i(al),ky=n(al,"P",{});var qSe=s(ky);Kwo=r(qSe,"This class cannot be instantiated directly using "),Uae=n(qSe,"CODE",{});var bKr=s(Uae);Zwo=r(bKr,"__init__()"),bKr.forEach(t),e6o=r(qSe," (throws an error)."),qSe.forEach(t),o6o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Ry.$$.fragment,nl),r6o=i(nl),Jae=n(nl,"P",{});var vKr=s(Jae);t6o=r(vKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vKr.forEach(t),a6o=i(nl),ud=n(nl,"P",{});var cW=s(ud);n6o=r(cW,`Note:
Loading a model from its configuration file does `),Yae=n(cW,"STRONG",{});var TKr=s(Yae);s6o=r(TKr,"not"),TKr.forEach(t),l6o=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kae=n(cW,"CODE",{});var FKr=s(Kae);i6o=r(FKr,"from_pretrained()"),FKr.forEach(t),d6o=r(cW,"to load the model weights."),cW.forEach(t),c6o=i(nl),Zae=n(nl,"P",{});var CKr=s(Zae);f6o=r(CKr,"Examples:"),CKr.forEach(t),m6o=i(nl),m(Sy.$$.fragment,nl),nl.forEach(t),g6o=i(al),Ve=n(al,"DIV",{class:!0});var Wt=s(Ve);m(Py.$$.fragment,Wt),h6o=i(Wt),ene=n(Wt,"P",{});var MKr=s(ene);p6o=r(MKr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MKr.forEach(t),_6o=i(Wt),Ja=n(Wt,"P",{});var uE=s(Ja);u6o=r(uE,"The model class to instantiate is selected based on the "),one=n(uE,"CODE",{});var EKr=s(one);b6o=r(EKr,"model_type"),EKr.forEach(t),v6o=r(uE,` property of the config object (either
passed as an argument or loaded from `),rne=n(uE,"CODE",{});var yKr=s(rne);T6o=r(yKr,"pretrained_model_name_or_path"),yKr.forEach(t),F6o=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=n(uE,"CODE",{});var wKr=s(tne);C6o=r(wKr,"pretrained_model_name_or_path"),wKr.forEach(t),M6o=r(uE,":"),uE.forEach(t),E6o=i(Wt),G=n(Wt,"UL",{});var O=s(G);H9=n(O,"LI",{});var Rwe=s(H9);ane=n(Rwe,"STRONG",{});var AKr=s(ane);y6o=r(AKr,"albert"),AKr.forEach(t),w6o=r(Rwe," \u2014 "),kN=n(Rwe,"A",{href:!0});var LKr=s(kN);A6o=r(LKr,"AlbertForMultipleChoice"),LKr.forEach(t),L6o=r(Rwe," (ALBERT model)"),Rwe.forEach(t),B6o=i(O),U9=n(O,"LI",{});var Swe=s(U9);nne=n(Swe,"STRONG",{});var BKr=s(nne);x6o=r(BKr,"bert"),BKr.forEach(t),k6o=r(Swe," \u2014 "),RN=n(Swe,"A",{href:!0});var xKr=s(RN);R6o=r(xKr,"BertForMultipleChoice"),xKr.forEach(t),S6o=r(Swe," (BERT model)"),Swe.forEach(t),P6o=i(O),J9=n(O,"LI",{});var Pwe=s(J9);sne=n(Pwe,"STRONG",{});var kKr=s(sne);$6o=r(kKr,"big_bird"),kKr.forEach(t),I6o=r(Pwe," \u2014 "),SN=n(Pwe,"A",{href:!0});var RKr=s(SN);N6o=r(RKr,"BigBirdForMultipleChoice"),RKr.forEach(t),D6o=r(Pwe," (BigBird model)"),Pwe.forEach(t),j6o=i(O),Y9=n(O,"LI",{});var $we=s(Y9);lne=n($we,"STRONG",{});var SKr=s(lne);q6o=r(SKr,"camembert"),SKr.forEach(t),G6o=r($we," \u2014 "),PN=n($we,"A",{href:!0});var PKr=s(PN);O6o=r(PKr,"CamembertForMultipleChoice"),PKr.forEach(t),X6o=r($we," (CamemBERT model)"),$we.forEach(t),V6o=i(O),K9=n(O,"LI",{});var Iwe=s(K9);ine=n(Iwe,"STRONG",{});var $Kr=s(ine);z6o=r($Kr,"canine"),$Kr.forEach(t),W6o=r(Iwe," \u2014 "),$N=n(Iwe,"A",{href:!0});var IKr=s($N);Q6o=r(IKr,"CanineForMultipleChoice"),IKr.forEach(t),H6o=r(Iwe," (Canine model)"),Iwe.forEach(t),U6o=i(O),Z9=n(O,"LI",{});var Nwe=s(Z9);dne=n(Nwe,"STRONG",{});var NKr=s(dne);J6o=r(NKr,"convbert"),NKr.forEach(t),Y6o=r(Nwe," \u2014 "),IN=n(Nwe,"A",{href:!0});var DKr=s(IN);K6o=r(DKr,"ConvBertForMultipleChoice"),DKr.forEach(t),Z6o=r(Nwe," (ConvBERT model)"),Nwe.forEach(t),eAo=i(O),eb=n(O,"LI",{});var Dwe=s(eb);cne=n(Dwe,"STRONG",{});var jKr=s(cne);oAo=r(jKr,"data2vec-text"),jKr.forEach(t),rAo=r(Dwe," \u2014 "),NN=n(Dwe,"A",{href:!0});var qKr=s(NN);tAo=r(qKr,"Data2VecTextForMultipleChoice"),qKr.forEach(t),aAo=r(Dwe," (Data2VecText model)"),Dwe.forEach(t),nAo=i(O),ob=n(O,"LI",{});var jwe=s(ob);fne=n(jwe,"STRONG",{});var GKr=s(fne);sAo=r(GKr,"distilbert"),GKr.forEach(t),lAo=r(jwe," \u2014 "),DN=n(jwe,"A",{href:!0});var OKr=s(DN);iAo=r(OKr,"DistilBertForMultipleChoice"),OKr.forEach(t),dAo=r(jwe," (DistilBERT model)"),jwe.forEach(t),cAo=i(O),rb=n(O,"LI",{});var qwe=s(rb);mne=n(qwe,"STRONG",{});var XKr=s(mne);fAo=r(XKr,"electra"),XKr.forEach(t),mAo=r(qwe," \u2014 "),jN=n(qwe,"A",{href:!0});var VKr=s(jN);gAo=r(VKr,"ElectraForMultipleChoice"),VKr.forEach(t),hAo=r(qwe," (ELECTRA model)"),qwe.forEach(t),pAo=i(O),tb=n(O,"LI",{});var Gwe=s(tb);gne=n(Gwe,"STRONG",{});var zKr=s(gne);_Ao=r(zKr,"flaubert"),zKr.forEach(t),uAo=r(Gwe," \u2014 "),qN=n(Gwe,"A",{href:!0});var WKr=s(qN);bAo=r(WKr,"FlaubertForMultipleChoice"),WKr.forEach(t),vAo=r(Gwe," (FlauBERT model)"),Gwe.forEach(t),TAo=i(O),ab=n(O,"LI",{});var Owe=s(ab);hne=n(Owe,"STRONG",{});var QKr=s(hne);FAo=r(QKr,"fnet"),QKr.forEach(t),CAo=r(Owe," \u2014 "),GN=n(Owe,"A",{href:!0});var HKr=s(GN);MAo=r(HKr,"FNetForMultipleChoice"),HKr.forEach(t),EAo=r(Owe," (FNet model)"),Owe.forEach(t),yAo=i(O),nb=n(O,"LI",{});var Xwe=s(nb);pne=n(Xwe,"STRONG",{});var UKr=s(pne);wAo=r(UKr,"funnel"),UKr.forEach(t),AAo=r(Xwe," \u2014 "),ON=n(Xwe,"A",{href:!0});var JKr=s(ON);LAo=r(JKr,"FunnelForMultipleChoice"),JKr.forEach(t),BAo=r(Xwe," (Funnel Transformer model)"),Xwe.forEach(t),xAo=i(O),sb=n(O,"LI",{});var Vwe=s(sb);_ne=n(Vwe,"STRONG",{});var YKr=s(_ne);kAo=r(YKr,"ibert"),YKr.forEach(t),RAo=r(Vwe," \u2014 "),XN=n(Vwe,"A",{href:!0});var KKr=s(XN);SAo=r(KKr,"IBertForMultipleChoice"),KKr.forEach(t),PAo=r(Vwe," (I-BERT model)"),Vwe.forEach(t),$Ao=i(O),lb=n(O,"LI",{});var zwe=s(lb);une=n(zwe,"STRONG",{});var ZKr=s(une);IAo=r(ZKr,"longformer"),ZKr.forEach(t),NAo=r(zwe," \u2014 "),VN=n(zwe,"A",{href:!0});var eZr=s(VN);DAo=r(eZr,"LongformerForMultipleChoice"),eZr.forEach(t),jAo=r(zwe," (Longformer model)"),zwe.forEach(t),qAo=i(O),ib=n(O,"LI",{});var Wwe=s(ib);bne=n(Wwe,"STRONG",{});var oZr=s(bne);GAo=r(oZr,"megatron-bert"),oZr.forEach(t),OAo=r(Wwe," \u2014 "),zN=n(Wwe,"A",{href:!0});var rZr=s(zN);XAo=r(rZr,"MegatronBertForMultipleChoice"),rZr.forEach(t),VAo=r(Wwe," (MegatronBert model)"),Wwe.forEach(t),zAo=i(O),db=n(O,"LI",{});var Qwe=s(db);vne=n(Qwe,"STRONG",{});var tZr=s(vne);WAo=r(tZr,"mobilebert"),tZr.forEach(t),QAo=r(Qwe," \u2014 "),WN=n(Qwe,"A",{href:!0});var aZr=s(WN);HAo=r(aZr,"MobileBertForMultipleChoice"),aZr.forEach(t),UAo=r(Qwe," (MobileBERT model)"),Qwe.forEach(t),JAo=i(O),cb=n(O,"LI",{});var Hwe=s(cb);Tne=n(Hwe,"STRONG",{});var nZr=s(Tne);YAo=r(nZr,"mpnet"),nZr.forEach(t),KAo=r(Hwe," \u2014 "),QN=n(Hwe,"A",{href:!0});var sZr=s(QN);ZAo=r(sZr,"MPNetForMultipleChoice"),sZr.forEach(t),e0o=r(Hwe," (MPNet model)"),Hwe.forEach(t),o0o=i(O),fb=n(O,"LI",{});var Uwe=s(fb);Fne=n(Uwe,"STRONG",{});var lZr=s(Fne);r0o=r(lZr,"nystromformer"),lZr.forEach(t),t0o=r(Uwe," \u2014 "),HN=n(Uwe,"A",{href:!0});var iZr=s(HN);a0o=r(iZr,"NystromformerForMultipleChoice"),iZr.forEach(t),n0o=r(Uwe," (Nystromformer model)"),Uwe.forEach(t),s0o=i(O),mb=n(O,"LI",{});var Jwe=s(mb);Cne=n(Jwe,"STRONG",{});var dZr=s(Cne);l0o=r(dZr,"qdqbert"),dZr.forEach(t),i0o=r(Jwe," \u2014 "),UN=n(Jwe,"A",{href:!0});var cZr=s(UN);d0o=r(cZr,"QDQBertForMultipleChoice"),cZr.forEach(t),c0o=r(Jwe," (QDQBert model)"),Jwe.forEach(t),f0o=i(O),gb=n(O,"LI",{});var Ywe=s(gb);Mne=n(Ywe,"STRONG",{});var fZr=s(Mne);m0o=r(fZr,"rembert"),fZr.forEach(t),g0o=r(Ywe," \u2014 "),JN=n(Ywe,"A",{href:!0});var mZr=s(JN);h0o=r(mZr,"RemBertForMultipleChoice"),mZr.forEach(t),p0o=r(Ywe," (RemBERT model)"),Ywe.forEach(t),_0o=i(O),hb=n(O,"LI",{});var Kwe=s(hb);Ene=n(Kwe,"STRONG",{});var gZr=s(Ene);u0o=r(gZr,"roberta"),gZr.forEach(t),b0o=r(Kwe," \u2014 "),YN=n(Kwe,"A",{href:!0});var hZr=s(YN);v0o=r(hZr,"RobertaForMultipleChoice"),hZr.forEach(t),T0o=r(Kwe," (RoBERTa model)"),Kwe.forEach(t),F0o=i(O),pb=n(O,"LI",{});var Zwe=s(pb);yne=n(Zwe,"STRONG",{});var pZr=s(yne);C0o=r(pZr,"roformer"),pZr.forEach(t),M0o=r(Zwe," \u2014 "),KN=n(Zwe,"A",{href:!0});var _Zr=s(KN);E0o=r(_Zr,"RoFormerForMultipleChoice"),_Zr.forEach(t),y0o=r(Zwe," (RoFormer model)"),Zwe.forEach(t),w0o=i(O),_b=n(O,"LI",{});var e6e=s(_b);wne=n(e6e,"STRONG",{});var uZr=s(wne);A0o=r(uZr,"squeezebert"),uZr.forEach(t),L0o=r(e6e," \u2014 "),ZN=n(e6e,"A",{href:!0});var bZr=s(ZN);B0o=r(bZr,"SqueezeBertForMultipleChoice"),bZr.forEach(t),x0o=r(e6e," (SqueezeBERT model)"),e6e.forEach(t),k0o=i(O),ub=n(O,"LI",{});var o6e=s(ub);Ane=n(o6e,"STRONG",{});var vZr=s(Ane);R0o=r(vZr,"xlm"),vZr.forEach(t),S0o=r(o6e," \u2014 "),eD=n(o6e,"A",{href:!0});var TZr=s(eD);P0o=r(TZr,"XLMForMultipleChoice"),TZr.forEach(t),$0o=r(o6e," (XLM model)"),o6e.forEach(t),I0o=i(O),bb=n(O,"LI",{});var r6e=s(bb);Lne=n(r6e,"STRONG",{});var FZr=s(Lne);N0o=r(FZr,"xlm-roberta"),FZr.forEach(t),D0o=r(r6e," \u2014 "),oD=n(r6e,"A",{href:!0});var CZr=s(oD);j0o=r(CZr,"XLMRobertaForMultipleChoice"),CZr.forEach(t),q0o=r(r6e," (XLM-RoBERTa model)"),r6e.forEach(t),G0o=i(O),vb=n(O,"LI",{});var t6e=s(vb);Bne=n(t6e,"STRONG",{});var MZr=s(Bne);O0o=r(MZr,"xlm-roberta-xl"),MZr.forEach(t),X0o=r(t6e," \u2014 "),rD=n(t6e,"A",{href:!0});var EZr=s(rD);V0o=r(EZr,"XLMRobertaXLForMultipleChoice"),EZr.forEach(t),z0o=r(t6e," (XLM-RoBERTa-XL model)"),t6e.forEach(t),W0o=i(O),Tb=n(O,"LI",{});var a6e=s(Tb);xne=n(a6e,"STRONG",{});var yZr=s(xne);Q0o=r(yZr,"xlnet"),yZr.forEach(t),H0o=r(a6e," \u2014 "),tD=n(a6e,"A",{href:!0});var wZr=s(tD);U0o=r(wZr,"XLNetForMultipleChoice"),wZr.forEach(t),J0o=r(a6e," (XLNet model)"),a6e.forEach(t),Y0o=i(O),Fb=n(O,"LI",{});var n6e=s(Fb);kne=n(n6e,"STRONG",{});var AZr=s(kne);K0o=r(AZr,"yoso"),AZr.forEach(t),Z0o=r(n6e," \u2014 "),aD=n(n6e,"A",{href:!0});var LZr=s(aD);eLo=r(LZr,"YosoForMultipleChoice"),LZr.forEach(t),oLo=r(n6e," (YOSO model)"),n6e.forEach(t),O.forEach(t),rLo=i(Wt),Cb=n(Wt,"P",{});var s6e=s(Cb);tLo=r(s6e,"The model is set in evaluation mode by default using "),Rne=n(s6e,"CODE",{});var BZr=s(Rne);aLo=r(BZr,"model.eval()"),BZr.forEach(t),nLo=r(s6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sne=n(s6e,"CODE",{});var xZr=s(Sne);sLo=r(xZr,"model.train()"),xZr.forEach(t),s6e.forEach(t),lLo=i(Wt),Pne=n(Wt,"P",{});var kZr=s(Pne);iLo=r(kZr,"Examples:"),kZr.forEach(t),dLo=i(Wt),m($y.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Rke=i(c),bd=n(c,"H2",{class:!0});var GSe=s(bd);Mb=n(GSe,"A",{id:!0,class:!0,href:!0});var RZr=s(Mb);$ne=n(RZr,"SPAN",{});var SZr=s($ne);m(Iy.$$.fragment,SZr),SZr.forEach(t),RZr.forEach(t),cLo=i(GSe),Ine=n(GSe,"SPAN",{});var PZr=s(Ine);fLo=r(PZr,"AutoModelForNextSentencePrediction"),PZr.forEach(t),GSe.forEach(t),Ske=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(Ny.$$.fragment,sl),mLo=i(sl),vd=n(sl,"P",{});var fW=s(vd);gLo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nne=n(fW,"CODE",{});var $Zr=s(Nne);hLo=r($Zr,"from_pretrained()"),$Zr.forEach(t),pLo=r(fW,"class method or the "),Dne=n(fW,"CODE",{});var IZr=s(Dne);_Lo=r(IZr,"from_config()"),IZr.forEach(t),uLo=r(fW,`class
method.`),fW.forEach(t),bLo=i(sl),Dy=n(sl,"P",{});var OSe=s(Dy);vLo=r(OSe,"This class cannot be instantiated directly using "),jne=n(OSe,"CODE",{});var NZr=s(jne);TLo=r(NZr,"__init__()"),NZr.forEach(t),FLo=r(OSe," (throws an error)."),OSe.forEach(t),CLo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(jy.$$.fragment,ll),MLo=i(ll),qne=n(ll,"P",{});var DZr=s(qne);ELo=r(DZr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DZr.forEach(t),yLo=i(ll),Td=n(ll,"P",{});var mW=s(Td);wLo=r(mW,`Note:
Loading a model from its configuration file does `),Gne=n(mW,"STRONG",{});var jZr=s(Gne);ALo=r(jZr,"not"),jZr.forEach(t),LLo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),One=n(mW,"CODE",{});var qZr=s(One);BLo=r(qZr,"from_pretrained()"),qZr.forEach(t),xLo=r(mW,"to load the model weights."),mW.forEach(t),kLo=i(ll),Xne=n(ll,"P",{});var GZr=s(Xne);RLo=r(GZr,"Examples:"),GZr.forEach(t),SLo=i(ll),m(qy.$$.fragment,ll),ll.forEach(t),PLo=i(sl),ze=n(sl,"DIV",{class:!0});var Qt=s(ze);m(Gy.$$.fragment,Qt),$Lo=i(Qt),Vne=n(Qt,"P",{});var OZr=s(Vne);ILo=r(OZr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OZr.forEach(t),NLo=i(Qt),Ya=n(Qt,"P",{});var bE=s(Ya);DLo=r(bE,"The model class to instantiate is selected based on the "),zne=n(bE,"CODE",{});var XZr=s(zne);jLo=r(XZr,"model_type"),XZr.forEach(t),qLo=r(bE,` property of the config object (either
passed as an argument or loaded from `),Wne=n(bE,"CODE",{});var VZr=s(Wne);GLo=r(VZr,"pretrained_model_name_or_path"),VZr.forEach(t),OLo=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=n(bE,"CODE",{});var zZr=s(Qne);XLo=r(zZr,"pretrained_model_name_or_path"),zZr.forEach(t),VLo=r(bE,":"),bE.forEach(t),zLo=i(Qt),da=n(Qt,"UL",{});var il=s(da);Eb=n(il,"LI",{});var l6e=s(Eb);Hne=n(l6e,"STRONG",{});var WZr=s(Hne);WLo=r(WZr,"bert"),WZr.forEach(t),QLo=r(l6e," \u2014 "),nD=n(l6e,"A",{href:!0});var QZr=s(nD);HLo=r(QZr,"BertForNextSentencePrediction"),QZr.forEach(t),ULo=r(l6e," (BERT model)"),l6e.forEach(t),JLo=i(il),yb=n(il,"LI",{});var i6e=s(yb);Une=n(i6e,"STRONG",{});var HZr=s(Une);YLo=r(HZr,"fnet"),HZr.forEach(t),KLo=r(i6e," \u2014 "),sD=n(i6e,"A",{href:!0});var UZr=s(sD);ZLo=r(UZr,"FNetForNextSentencePrediction"),UZr.forEach(t),e8o=r(i6e," (FNet model)"),i6e.forEach(t),o8o=i(il),wb=n(il,"LI",{});var d6e=s(wb);Jne=n(d6e,"STRONG",{});var JZr=s(Jne);r8o=r(JZr,"megatron-bert"),JZr.forEach(t),t8o=r(d6e," \u2014 "),lD=n(d6e,"A",{href:!0});var YZr=s(lD);a8o=r(YZr,"MegatronBertForNextSentencePrediction"),YZr.forEach(t),n8o=r(d6e," (MegatronBert model)"),d6e.forEach(t),s8o=i(il),Ab=n(il,"LI",{});var c6e=s(Ab);Yne=n(c6e,"STRONG",{});var KZr=s(Yne);l8o=r(KZr,"mobilebert"),KZr.forEach(t),i8o=r(c6e," \u2014 "),iD=n(c6e,"A",{href:!0});var ZZr=s(iD);d8o=r(ZZr,"MobileBertForNextSentencePrediction"),ZZr.forEach(t),c8o=r(c6e," (MobileBERT model)"),c6e.forEach(t),f8o=i(il),Lb=n(il,"LI",{});var f6e=s(Lb);Kne=n(f6e,"STRONG",{});var eet=s(Kne);m8o=r(eet,"qdqbert"),eet.forEach(t),g8o=r(f6e," \u2014 "),dD=n(f6e,"A",{href:!0});var oet=s(dD);h8o=r(oet,"QDQBertForNextSentencePrediction"),oet.forEach(t),p8o=r(f6e," (QDQBert model)"),f6e.forEach(t),il.forEach(t),_8o=i(Qt),Bb=n(Qt,"P",{});var m6e=s(Bb);u8o=r(m6e,"The model is set in evaluation mode by default using "),Zne=n(m6e,"CODE",{});var ret=s(Zne);b8o=r(ret,"model.eval()"),ret.forEach(t),v8o=r(m6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ese=n(m6e,"CODE",{});var tet=s(ese);T8o=r(tet,"model.train()"),tet.forEach(t),m6e.forEach(t),F8o=i(Qt),ose=n(Qt,"P",{});var aet=s(ose);C8o=r(aet,"Examples:"),aet.forEach(t),M8o=i(Qt),m(Oy.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Pke=i(c),Fd=n(c,"H2",{class:!0});var XSe=s(Fd);xb=n(XSe,"A",{id:!0,class:!0,href:!0});var net=s(xb);rse=n(net,"SPAN",{});var set=s(rse);m(Xy.$$.fragment,set),set.forEach(t),net.forEach(t),E8o=i(XSe),tse=n(XSe,"SPAN",{});var iet=s(tse);y8o=r(iet,"AutoModelForTokenClassification"),iet.forEach(t),XSe.forEach(t),$ke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Vy.$$.fragment,dl),w8o=i(dl),Cd=n(dl,"P",{});var gW=s(Cd);A8o=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ase=n(gW,"CODE",{});var det=s(ase);L8o=r(det,"from_pretrained()"),det.forEach(t),B8o=r(gW,"class method or the "),nse=n(gW,"CODE",{});var cet=s(nse);x8o=r(cet,"from_config()"),cet.forEach(t),k8o=r(gW,`class
method.`),gW.forEach(t),R8o=i(dl),zy=n(dl,"P",{});var VSe=s(zy);S8o=r(VSe,"This class cannot be instantiated directly using "),sse=n(VSe,"CODE",{});var fet=s(sse);P8o=r(fet,"__init__()"),fet.forEach(t),$8o=r(VSe," (throws an error)."),VSe.forEach(t),I8o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(Wy.$$.fragment,cl),N8o=i(cl),lse=n(cl,"P",{});var met=s(lse);D8o=r(met,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),met.forEach(t),j8o=i(cl),Md=n(cl,"P",{});var hW=s(Md);q8o=r(hW,`Note:
Loading a model from its configuration file does `),ise=n(hW,"STRONG",{});var get=s(ise);G8o=r(get,"not"),get.forEach(t),O8o=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dse=n(hW,"CODE",{});var het=s(dse);X8o=r(het,"from_pretrained()"),het.forEach(t),V8o=r(hW,"to load the model weights."),hW.forEach(t),z8o=i(cl),cse=n(cl,"P",{});var pet=s(cse);W8o=r(pet,"Examples:"),pet.forEach(t),Q8o=i(cl),m(Qy.$$.fragment,cl),cl.forEach(t),H8o=i(dl),We=n(dl,"DIV",{class:!0});var Ht=s(We);m(Hy.$$.fragment,Ht),U8o=i(Ht),fse=n(Ht,"P",{});var _et=s(fse);J8o=r(_et,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_et.forEach(t),Y8o=i(Ht),Ka=n(Ht,"P",{});var vE=s(Ka);K8o=r(vE,"The model class to instantiate is selected based on the "),mse=n(vE,"CODE",{});var uet=s(mse);Z8o=r(uet,"model_type"),uet.forEach(t),e7o=r(vE,` property of the config object (either
passed as an argument or loaded from `),gse=n(vE,"CODE",{});var bet=s(gse);o7o=r(bet,"pretrained_model_name_or_path"),bet.forEach(t),r7o=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hse=n(vE,"CODE",{});var vet=s(hse);t7o=r(vet,"pretrained_model_name_or_path"),vet.forEach(t),a7o=r(vE,":"),vE.forEach(t),n7o=i(Ht),j=n(Ht,"UL",{});var q=s(j);kb=n(q,"LI",{});var g6e=s(kb);pse=n(g6e,"STRONG",{});var Tet=s(pse);s7o=r(Tet,"albert"),Tet.forEach(t),l7o=r(g6e," \u2014 "),cD=n(g6e,"A",{href:!0});var Fet=s(cD);i7o=r(Fet,"AlbertForTokenClassification"),Fet.forEach(t),d7o=r(g6e," (ALBERT model)"),g6e.forEach(t),c7o=i(q),Rb=n(q,"LI",{});var h6e=s(Rb);_se=n(h6e,"STRONG",{});var Cet=s(_se);f7o=r(Cet,"bert"),Cet.forEach(t),m7o=r(h6e," \u2014 "),fD=n(h6e,"A",{href:!0});var Met=s(fD);g7o=r(Met,"BertForTokenClassification"),Met.forEach(t),h7o=r(h6e," (BERT model)"),h6e.forEach(t),p7o=i(q),Sb=n(q,"LI",{});var p6e=s(Sb);use=n(p6e,"STRONG",{});var Eet=s(use);_7o=r(Eet,"big_bird"),Eet.forEach(t),u7o=r(p6e," \u2014 "),mD=n(p6e,"A",{href:!0});var yet=s(mD);b7o=r(yet,"BigBirdForTokenClassification"),yet.forEach(t),v7o=r(p6e," (BigBird model)"),p6e.forEach(t),T7o=i(q),Pb=n(q,"LI",{});var _6e=s(Pb);bse=n(_6e,"STRONG",{});var wet=s(bse);F7o=r(wet,"camembert"),wet.forEach(t),C7o=r(_6e," \u2014 "),gD=n(_6e,"A",{href:!0});var Aet=s(gD);M7o=r(Aet,"CamembertForTokenClassification"),Aet.forEach(t),E7o=r(_6e," (CamemBERT model)"),_6e.forEach(t),y7o=i(q),$b=n(q,"LI",{});var u6e=s($b);vse=n(u6e,"STRONG",{});var Let=s(vse);w7o=r(Let,"canine"),Let.forEach(t),A7o=r(u6e," \u2014 "),hD=n(u6e,"A",{href:!0});var Bet=s(hD);L7o=r(Bet,"CanineForTokenClassification"),Bet.forEach(t),B7o=r(u6e," (Canine model)"),u6e.forEach(t),x7o=i(q),Ib=n(q,"LI",{});var b6e=s(Ib);Tse=n(b6e,"STRONG",{});var xet=s(Tse);k7o=r(xet,"convbert"),xet.forEach(t),R7o=r(b6e," \u2014 "),pD=n(b6e,"A",{href:!0});var ket=s(pD);S7o=r(ket,"ConvBertForTokenClassification"),ket.forEach(t),P7o=r(b6e," (ConvBERT model)"),b6e.forEach(t),$7o=i(q),Nb=n(q,"LI",{});var v6e=s(Nb);Fse=n(v6e,"STRONG",{});var Ret=s(Fse);I7o=r(Ret,"data2vec-text"),Ret.forEach(t),N7o=r(v6e," \u2014 "),_D=n(v6e,"A",{href:!0});var Set=s(_D);D7o=r(Set,"Data2VecTextForTokenClassification"),Set.forEach(t),j7o=r(v6e," (Data2VecText model)"),v6e.forEach(t),q7o=i(q),Db=n(q,"LI",{});var T6e=s(Db);Cse=n(T6e,"STRONG",{});var Pet=s(Cse);G7o=r(Pet,"deberta"),Pet.forEach(t),O7o=r(T6e," \u2014 "),uD=n(T6e,"A",{href:!0});var $et=s(uD);X7o=r($et,"DebertaForTokenClassification"),$et.forEach(t),V7o=r(T6e," (DeBERTa model)"),T6e.forEach(t),z7o=i(q),jb=n(q,"LI",{});var F6e=s(jb);Mse=n(F6e,"STRONG",{});var Iet=s(Mse);W7o=r(Iet,"deberta-v2"),Iet.forEach(t),Q7o=r(F6e," \u2014 "),bD=n(F6e,"A",{href:!0});var Net=s(bD);H7o=r(Net,"DebertaV2ForTokenClassification"),Net.forEach(t),U7o=r(F6e," (DeBERTa-v2 model)"),F6e.forEach(t),J7o=i(q),qb=n(q,"LI",{});var C6e=s(qb);Ese=n(C6e,"STRONG",{});var Det=s(Ese);Y7o=r(Det,"distilbert"),Det.forEach(t),K7o=r(C6e," \u2014 "),vD=n(C6e,"A",{href:!0});var jet=s(vD);Z7o=r(jet,"DistilBertForTokenClassification"),jet.forEach(t),eBo=r(C6e," (DistilBERT model)"),C6e.forEach(t),oBo=i(q),Gb=n(q,"LI",{});var M6e=s(Gb);yse=n(M6e,"STRONG",{});var qet=s(yse);rBo=r(qet,"electra"),qet.forEach(t),tBo=r(M6e," \u2014 "),TD=n(M6e,"A",{href:!0});var Get=s(TD);aBo=r(Get,"ElectraForTokenClassification"),Get.forEach(t),nBo=r(M6e," (ELECTRA model)"),M6e.forEach(t),sBo=i(q),Ob=n(q,"LI",{});var E6e=s(Ob);wse=n(E6e,"STRONG",{});var Oet=s(wse);lBo=r(Oet,"flaubert"),Oet.forEach(t),iBo=r(E6e," \u2014 "),FD=n(E6e,"A",{href:!0});var Xet=s(FD);dBo=r(Xet,"FlaubertForTokenClassification"),Xet.forEach(t),cBo=r(E6e," (FlauBERT model)"),E6e.forEach(t),fBo=i(q),Xb=n(q,"LI",{});var y6e=s(Xb);Ase=n(y6e,"STRONG",{});var Vet=s(Ase);mBo=r(Vet,"fnet"),Vet.forEach(t),gBo=r(y6e," \u2014 "),CD=n(y6e,"A",{href:!0});var zet=s(CD);hBo=r(zet,"FNetForTokenClassification"),zet.forEach(t),pBo=r(y6e," (FNet model)"),y6e.forEach(t),_Bo=i(q),Vb=n(q,"LI",{});var w6e=s(Vb);Lse=n(w6e,"STRONG",{});var Wet=s(Lse);uBo=r(Wet,"funnel"),Wet.forEach(t),bBo=r(w6e," \u2014 "),MD=n(w6e,"A",{href:!0});var Qet=s(MD);vBo=r(Qet,"FunnelForTokenClassification"),Qet.forEach(t),TBo=r(w6e," (Funnel Transformer model)"),w6e.forEach(t),FBo=i(q),zb=n(q,"LI",{});var A6e=s(zb);Bse=n(A6e,"STRONG",{});var Het=s(Bse);CBo=r(Het,"gpt2"),Het.forEach(t),MBo=r(A6e," \u2014 "),ED=n(A6e,"A",{href:!0});var Uet=s(ED);EBo=r(Uet,"GPT2ForTokenClassification"),Uet.forEach(t),yBo=r(A6e," (OpenAI GPT-2 model)"),A6e.forEach(t),wBo=i(q),Wb=n(q,"LI",{});var L6e=s(Wb);xse=n(L6e,"STRONG",{});var Jet=s(xse);ABo=r(Jet,"ibert"),Jet.forEach(t),LBo=r(L6e," \u2014 "),yD=n(L6e,"A",{href:!0});var Yet=s(yD);BBo=r(Yet,"IBertForTokenClassification"),Yet.forEach(t),xBo=r(L6e," (I-BERT model)"),L6e.forEach(t),kBo=i(q),Qb=n(q,"LI",{});var B6e=s(Qb);kse=n(B6e,"STRONG",{});var Ket=s(kse);RBo=r(Ket,"layoutlm"),Ket.forEach(t),SBo=r(B6e," \u2014 "),wD=n(B6e,"A",{href:!0});var Zet=s(wD);PBo=r(Zet,"LayoutLMForTokenClassification"),Zet.forEach(t),$Bo=r(B6e," (LayoutLM model)"),B6e.forEach(t),IBo=i(q),Hb=n(q,"LI",{});var x6e=s(Hb);Rse=n(x6e,"STRONG",{});var eot=s(Rse);NBo=r(eot,"layoutlmv2"),eot.forEach(t),DBo=r(x6e," \u2014 "),AD=n(x6e,"A",{href:!0});var oot=s(AD);jBo=r(oot,"LayoutLMv2ForTokenClassification"),oot.forEach(t),qBo=r(x6e," (LayoutLMv2 model)"),x6e.forEach(t),GBo=i(q),Ub=n(q,"LI",{});var k6e=s(Ub);Sse=n(k6e,"STRONG",{});var rot=s(Sse);OBo=r(rot,"longformer"),rot.forEach(t),XBo=r(k6e," \u2014 "),LD=n(k6e,"A",{href:!0});var tot=s(LD);VBo=r(tot,"LongformerForTokenClassification"),tot.forEach(t),zBo=r(k6e," (Longformer model)"),k6e.forEach(t),WBo=i(q),Jb=n(q,"LI",{});var R6e=s(Jb);Pse=n(R6e,"STRONG",{});var aot=s(Pse);QBo=r(aot,"megatron-bert"),aot.forEach(t),HBo=r(R6e," \u2014 "),BD=n(R6e,"A",{href:!0});var not=s(BD);UBo=r(not,"MegatronBertForTokenClassification"),not.forEach(t),JBo=r(R6e," (MegatronBert model)"),R6e.forEach(t),YBo=i(q),Yb=n(q,"LI",{});var S6e=s(Yb);$se=n(S6e,"STRONG",{});var sot=s($se);KBo=r(sot,"mobilebert"),sot.forEach(t),ZBo=r(S6e," \u2014 "),xD=n(S6e,"A",{href:!0});var lot=s(xD);exo=r(lot,"MobileBertForTokenClassification"),lot.forEach(t),oxo=r(S6e," (MobileBERT model)"),S6e.forEach(t),rxo=i(q),Kb=n(q,"LI",{});var P6e=s(Kb);Ise=n(P6e,"STRONG",{});var iot=s(Ise);txo=r(iot,"mpnet"),iot.forEach(t),axo=r(P6e," \u2014 "),kD=n(P6e,"A",{href:!0});var dot=s(kD);nxo=r(dot,"MPNetForTokenClassification"),dot.forEach(t),sxo=r(P6e," (MPNet model)"),P6e.forEach(t),lxo=i(q),Zb=n(q,"LI",{});var $6e=s(Zb);Nse=n($6e,"STRONG",{});var cot=s(Nse);ixo=r(cot,"nystromformer"),cot.forEach(t),dxo=r($6e," \u2014 "),RD=n($6e,"A",{href:!0});var fot=s(RD);cxo=r(fot,"NystromformerForTokenClassification"),fot.forEach(t),fxo=r($6e," (Nystromformer model)"),$6e.forEach(t),mxo=i(q),e5=n(q,"LI",{});var I6e=s(e5);Dse=n(I6e,"STRONG",{});var mot=s(Dse);gxo=r(mot,"qdqbert"),mot.forEach(t),hxo=r(I6e," \u2014 "),SD=n(I6e,"A",{href:!0});var got=s(SD);pxo=r(got,"QDQBertForTokenClassification"),got.forEach(t),_xo=r(I6e," (QDQBert model)"),I6e.forEach(t),uxo=i(q),o5=n(q,"LI",{});var N6e=s(o5);jse=n(N6e,"STRONG",{});var hot=s(jse);bxo=r(hot,"rembert"),hot.forEach(t),vxo=r(N6e," \u2014 "),PD=n(N6e,"A",{href:!0});var pot=s(PD);Txo=r(pot,"RemBertForTokenClassification"),pot.forEach(t),Fxo=r(N6e," (RemBERT model)"),N6e.forEach(t),Cxo=i(q),r5=n(q,"LI",{});var D6e=s(r5);qse=n(D6e,"STRONG",{});var _ot=s(qse);Mxo=r(_ot,"roberta"),_ot.forEach(t),Exo=r(D6e," \u2014 "),$D=n(D6e,"A",{href:!0});var uot=s($D);yxo=r(uot,"RobertaForTokenClassification"),uot.forEach(t),wxo=r(D6e," (RoBERTa model)"),D6e.forEach(t),Axo=i(q),t5=n(q,"LI",{});var j6e=s(t5);Gse=n(j6e,"STRONG",{});var bot=s(Gse);Lxo=r(bot,"roformer"),bot.forEach(t),Bxo=r(j6e," \u2014 "),ID=n(j6e,"A",{href:!0});var vot=s(ID);xxo=r(vot,"RoFormerForTokenClassification"),vot.forEach(t),kxo=r(j6e," (RoFormer model)"),j6e.forEach(t),Rxo=i(q),a5=n(q,"LI",{});var q6e=s(a5);Ose=n(q6e,"STRONG",{});var Tot=s(Ose);Sxo=r(Tot,"squeezebert"),Tot.forEach(t),Pxo=r(q6e," \u2014 "),ND=n(q6e,"A",{href:!0});var Fot=s(ND);$xo=r(Fot,"SqueezeBertForTokenClassification"),Fot.forEach(t),Ixo=r(q6e," (SqueezeBERT model)"),q6e.forEach(t),Nxo=i(q),n5=n(q,"LI",{});var G6e=s(n5);Xse=n(G6e,"STRONG",{});var Cot=s(Xse);Dxo=r(Cot,"xlm"),Cot.forEach(t),jxo=r(G6e," \u2014 "),DD=n(G6e,"A",{href:!0});var Mot=s(DD);qxo=r(Mot,"XLMForTokenClassification"),Mot.forEach(t),Gxo=r(G6e," (XLM model)"),G6e.forEach(t),Oxo=i(q),s5=n(q,"LI",{});var O6e=s(s5);Vse=n(O6e,"STRONG",{});var Eot=s(Vse);Xxo=r(Eot,"xlm-roberta"),Eot.forEach(t),Vxo=r(O6e," \u2014 "),jD=n(O6e,"A",{href:!0});var yot=s(jD);zxo=r(yot,"XLMRobertaForTokenClassification"),yot.forEach(t),Wxo=r(O6e," (XLM-RoBERTa model)"),O6e.forEach(t),Qxo=i(q),l5=n(q,"LI",{});var X6e=s(l5);zse=n(X6e,"STRONG",{});var wot=s(zse);Hxo=r(wot,"xlm-roberta-xl"),wot.forEach(t),Uxo=r(X6e," \u2014 "),qD=n(X6e,"A",{href:!0});var Aot=s(qD);Jxo=r(Aot,"XLMRobertaXLForTokenClassification"),Aot.forEach(t),Yxo=r(X6e," (XLM-RoBERTa-XL model)"),X6e.forEach(t),Kxo=i(q),i5=n(q,"LI",{});var V6e=s(i5);Wse=n(V6e,"STRONG",{});var Lot=s(Wse);Zxo=r(Lot,"xlnet"),Lot.forEach(t),eko=r(V6e," \u2014 "),GD=n(V6e,"A",{href:!0});var Bot=s(GD);oko=r(Bot,"XLNetForTokenClassification"),Bot.forEach(t),rko=r(V6e," (XLNet model)"),V6e.forEach(t),tko=i(q),d5=n(q,"LI",{});var z6e=s(d5);Qse=n(z6e,"STRONG",{});var xot=s(Qse);ako=r(xot,"yoso"),xot.forEach(t),nko=r(z6e," \u2014 "),OD=n(z6e,"A",{href:!0});var kot=s(OD);sko=r(kot,"YosoForTokenClassification"),kot.forEach(t),lko=r(z6e," (YOSO model)"),z6e.forEach(t),q.forEach(t),iko=i(Ht),c5=n(Ht,"P",{});var W6e=s(c5);dko=r(W6e,"The model is set in evaluation mode by default using "),Hse=n(W6e,"CODE",{});var Rot=s(Hse);cko=r(Rot,"model.eval()"),Rot.forEach(t),fko=r(W6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=n(W6e,"CODE",{});var Sot=s(Use);mko=r(Sot,"model.train()"),Sot.forEach(t),W6e.forEach(t),gko=i(Ht),Jse=n(Ht,"P",{});var Pot=s(Jse);hko=r(Pot,"Examples:"),Pot.forEach(t),pko=i(Ht),m(Uy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Ike=i(c),Ed=n(c,"H2",{class:!0});var zSe=s(Ed);f5=n(zSe,"A",{id:!0,class:!0,href:!0});var $ot=s(f5);Yse=n($ot,"SPAN",{});var Iot=s(Yse);m(Jy.$$.fragment,Iot),Iot.forEach(t),$ot.forEach(t),_ko=i(zSe),Kse=n(zSe,"SPAN",{});var Not=s(Kse);uko=r(Not,"AutoModelForQuestionAnswering"),Not.forEach(t),zSe.forEach(t),Nke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Yy.$$.fragment,fl),bko=i(fl),yd=n(fl,"P",{});var pW=s(yd);vko=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zse=n(pW,"CODE",{});var Dot=s(Zse);Tko=r(Dot,"from_pretrained()"),Dot.forEach(t),Fko=r(pW,"class method or the "),ele=n(pW,"CODE",{});var jot=s(ele);Cko=r(jot,"from_config()"),jot.forEach(t),Mko=r(pW,`class
method.`),pW.forEach(t),Eko=i(fl),Ky=n(fl,"P",{});var WSe=s(Ky);yko=r(WSe,"This class cannot be instantiated directly using "),ole=n(WSe,"CODE",{});var qot=s(ole);wko=r(qot,"__init__()"),qot.forEach(t),Ako=r(WSe," (throws an error)."),WSe.forEach(t),Lko=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Zy.$$.fragment,ml),Bko=i(ml),rle=n(ml,"P",{});var Got=s(rle);xko=r(Got,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Got.forEach(t),kko=i(ml),wd=n(ml,"P",{});var _W=s(wd);Rko=r(_W,`Note:
Loading a model from its configuration file does `),tle=n(_W,"STRONG",{});var Oot=s(tle);Sko=r(Oot,"not"),Oot.forEach(t),Pko=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=n(_W,"CODE",{});var Xot=s(ale);$ko=r(Xot,"from_pretrained()"),Xot.forEach(t),Iko=r(_W,"to load the model weights."),_W.forEach(t),Nko=i(ml),nle=n(ml,"P",{});var Vot=s(nle);Dko=r(Vot,"Examples:"),Vot.forEach(t),jko=i(ml),m(ew.$$.fragment,ml),ml.forEach(t),qko=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(ow.$$.fragment,Ut),Gko=i(Ut),sle=n(Ut,"P",{});var zot=s(sle);Oko=r(zot,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zot.forEach(t),Xko=i(Ut),Za=n(Ut,"P",{});var TE=s(Za);Vko=r(TE,"The model class to instantiate is selected based on the "),lle=n(TE,"CODE",{});var Wot=s(lle);zko=r(Wot,"model_type"),Wot.forEach(t),Wko=r(TE,` property of the config object (either
passed as an argument or loaded from `),ile=n(TE,"CODE",{});var Qot=s(ile);Qko=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),Hko=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(TE,"CODE",{});var Hot=s(dle);Uko=r(Hot,"pretrained_model_name_or_path"),Hot.forEach(t),Jko=r(TE,":"),TE.forEach(t),Yko=i(Ut),R=n(Ut,"UL",{});var P=s(R);m5=n(P,"LI",{});var Q6e=s(m5);cle=n(Q6e,"STRONG",{});var Uot=s(cle);Kko=r(Uot,"albert"),Uot.forEach(t),Zko=r(Q6e," \u2014 "),XD=n(Q6e,"A",{href:!0});var Jot=s(XD);eRo=r(Jot,"AlbertForQuestionAnswering"),Jot.forEach(t),oRo=r(Q6e," (ALBERT model)"),Q6e.forEach(t),rRo=i(P),g5=n(P,"LI",{});var H6e=s(g5);fle=n(H6e,"STRONG",{});var Yot=s(fle);tRo=r(Yot,"bart"),Yot.forEach(t),aRo=r(H6e," \u2014 "),VD=n(H6e,"A",{href:!0});var Kot=s(VD);nRo=r(Kot,"BartForQuestionAnswering"),Kot.forEach(t),sRo=r(H6e," (BART model)"),H6e.forEach(t),lRo=i(P),h5=n(P,"LI",{});var U6e=s(h5);mle=n(U6e,"STRONG",{});var Zot=s(mle);iRo=r(Zot,"bert"),Zot.forEach(t),dRo=r(U6e," \u2014 "),zD=n(U6e,"A",{href:!0});var ert=s(zD);cRo=r(ert,"BertForQuestionAnswering"),ert.forEach(t),fRo=r(U6e," (BERT model)"),U6e.forEach(t),mRo=i(P),p5=n(P,"LI",{});var J6e=s(p5);gle=n(J6e,"STRONG",{});var ort=s(gle);gRo=r(ort,"big_bird"),ort.forEach(t),hRo=r(J6e," \u2014 "),WD=n(J6e,"A",{href:!0});var rrt=s(WD);pRo=r(rrt,"BigBirdForQuestionAnswering"),rrt.forEach(t),_Ro=r(J6e," (BigBird model)"),J6e.forEach(t),uRo=i(P),_5=n(P,"LI",{});var Y6e=s(_5);hle=n(Y6e,"STRONG",{});var trt=s(hle);bRo=r(trt,"bigbird_pegasus"),trt.forEach(t),vRo=r(Y6e," \u2014 "),QD=n(Y6e,"A",{href:!0});var art=s(QD);TRo=r(art,"BigBirdPegasusForQuestionAnswering"),art.forEach(t),FRo=r(Y6e," (BigBirdPegasus model)"),Y6e.forEach(t),CRo=i(P),u5=n(P,"LI",{});var K6e=s(u5);ple=n(K6e,"STRONG",{});var nrt=s(ple);MRo=r(nrt,"camembert"),nrt.forEach(t),ERo=r(K6e," \u2014 "),HD=n(K6e,"A",{href:!0});var srt=s(HD);yRo=r(srt,"CamembertForQuestionAnswering"),srt.forEach(t),wRo=r(K6e," (CamemBERT model)"),K6e.forEach(t),ARo=i(P),b5=n(P,"LI",{});var Z6e=s(b5);_le=n(Z6e,"STRONG",{});var lrt=s(_le);LRo=r(lrt,"canine"),lrt.forEach(t),BRo=r(Z6e," \u2014 "),UD=n(Z6e,"A",{href:!0});var irt=s(UD);xRo=r(irt,"CanineForQuestionAnswering"),irt.forEach(t),kRo=r(Z6e," (Canine model)"),Z6e.forEach(t),RRo=i(P),v5=n(P,"LI",{});var eAe=s(v5);ule=n(eAe,"STRONG",{});var drt=s(ule);SRo=r(drt,"convbert"),drt.forEach(t),PRo=r(eAe," \u2014 "),JD=n(eAe,"A",{href:!0});var crt=s(JD);$Ro=r(crt,"ConvBertForQuestionAnswering"),crt.forEach(t),IRo=r(eAe," (ConvBERT model)"),eAe.forEach(t),NRo=i(P),T5=n(P,"LI",{});var oAe=s(T5);ble=n(oAe,"STRONG",{});var frt=s(ble);DRo=r(frt,"data2vec-text"),frt.forEach(t),jRo=r(oAe," \u2014 "),YD=n(oAe,"A",{href:!0});var mrt=s(YD);qRo=r(mrt,"Data2VecTextForQuestionAnswering"),mrt.forEach(t),GRo=r(oAe," (Data2VecText model)"),oAe.forEach(t),ORo=i(P),F5=n(P,"LI",{});var rAe=s(F5);vle=n(rAe,"STRONG",{});var grt=s(vle);XRo=r(grt,"deberta"),grt.forEach(t),VRo=r(rAe," \u2014 "),KD=n(rAe,"A",{href:!0});var hrt=s(KD);zRo=r(hrt,"DebertaForQuestionAnswering"),hrt.forEach(t),WRo=r(rAe," (DeBERTa model)"),rAe.forEach(t),QRo=i(P),C5=n(P,"LI",{});var tAe=s(C5);Tle=n(tAe,"STRONG",{});var prt=s(Tle);HRo=r(prt,"deberta-v2"),prt.forEach(t),URo=r(tAe," \u2014 "),ZD=n(tAe,"A",{href:!0});var _rt=s(ZD);JRo=r(_rt,"DebertaV2ForQuestionAnswering"),_rt.forEach(t),YRo=r(tAe," (DeBERTa-v2 model)"),tAe.forEach(t),KRo=i(P),M5=n(P,"LI",{});var aAe=s(M5);Fle=n(aAe,"STRONG",{});var urt=s(Fle);ZRo=r(urt,"distilbert"),urt.forEach(t),eSo=r(aAe," \u2014 "),ej=n(aAe,"A",{href:!0});var brt=s(ej);oSo=r(brt,"DistilBertForQuestionAnswering"),brt.forEach(t),rSo=r(aAe," (DistilBERT model)"),aAe.forEach(t),tSo=i(P),E5=n(P,"LI",{});var nAe=s(E5);Cle=n(nAe,"STRONG",{});var vrt=s(Cle);aSo=r(vrt,"electra"),vrt.forEach(t),nSo=r(nAe," \u2014 "),oj=n(nAe,"A",{href:!0});var Trt=s(oj);sSo=r(Trt,"ElectraForQuestionAnswering"),Trt.forEach(t),lSo=r(nAe," (ELECTRA model)"),nAe.forEach(t),iSo=i(P),y5=n(P,"LI",{});var sAe=s(y5);Mle=n(sAe,"STRONG",{});var Frt=s(Mle);dSo=r(Frt,"flaubert"),Frt.forEach(t),cSo=r(sAe," \u2014 "),rj=n(sAe,"A",{href:!0});var Crt=s(rj);fSo=r(Crt,"FlaubertForQuestionAnsweringSimple"),Crt.forEach(t),mSo=r(sAe," (FlauBERT model)"),sAe.forEach(t),gSo=i(P),w5=n(P,"LI",{});var lAe=s(w5);Ele=n(lAe,"STRONG",{});var Mrt=s(Ele);hSo=r(Mrt,"fnet"),Mrt.forEach(t),pSo=r(lAe," \u2014 "),tj=n(lAe,"A",{href:!0});var Ert=s(tj);_So=r(Ert,"FNetForQuestionAnswering"),Ert.forEach(t),uSo=r(lAe," (FNet model)"),lAe.forEach(t),bSo=i(P),A5=n(P,"LI",{});var iAe=s(A5);yle=n(iAe,"STRONG",{});var yrt=s(yle);vSo=r(yrt,"funnel"),yrt.forEach(t),TSo=r(iAe," \u2014 "),aj=n(iAe,"A",{href:!0});var wrt=s(aj);FSo=r(wrt,"FunnelForQuestionAnswering"),wrt.forEach(t),CSo=r(iAe," (Funnel Transformer model)"),iAe.forEach(t),MSo=i(P),L5=n(P,"LI",{});var dAe=s(L5);wle=n(dAe,"STRONG",{});var Art=s(wle);ESo=r(Art,"gptj"),Art.forEach(t),ySo=r(dAe," \u2014 "),nj=n(dAe,"A",{href:!0});var Lrt=s(nj);wSo=r(Lrt,"GPTJForQuestionAnswering"),Lrt.forEach(t),ASo=r(dAe," (GPT-J model)"),dAe.forEach(t),LSo=i(P),B5=n(P,"LI",{});var cAe=s(B5);Ale=n(cAe,"STRONG",{});var Brt=s(Ale);BSo=r(Brt,"ibert"),Brt.forEach(t),xSo=r(cAe," \u2014 "),sj=n(cAe,"A",{href:!0});var xrt=s(sj);kSo=r(xrt,"IBertForQuestionAnswering"),xrt.forEach(t),RSo=r(cAe," (I-BERT model)"),cAe.forEach(t),SSo=i(P),x5=n(P,"LI",{});var fAe=s(x5);Lle=n(fAe,"STRONG",{});var krt=s(Lle);PSo=r(krt,"layoutlmv2"),krt.forEach(t),$So=r(fAe," \u2014 "),lj=n(fAe,"A",{href:!0});var Rrt=s(lj);ISo=r(Rrt,"LayoutLMv2ForQuestionAnswering"),Rrt.forEach(t),NSo=r(fAe," (LayoutLMv2 model)"),fAe.forEach(t),DSo=i(P),k5=n(P,"LI",{});var mAe=s(k5);Ble=n(mAe,"STRONG",{});var Srt=s(Ble);jSo=r(Srt,"led"),Srt.forEach(t),qSo=r(mAe," \u2014 "),ij=n(mAe,"A",{href:!0});var Prt=s(ij);GSo=r(Prt,"LEDForQuestionAnswering"),Prt.forEach(t),OSo=r(mAe," (LED model)"),mAe.forEach(t),XSo=i(P),R5=n(P,"LI",{});var gAe=s(R5);xle=n(gAe,"STRONG",{});var $rt=s(xle);VSo=r($rt,"longformer"),$rt.forEach(t),zSo=r(gAe," \u2014 "),dj=n(gAe,"A",{href:!0});var Irt=s(dj);WSo=r(Irt,"LongformerForQuestionAnswering"),Irt.forEach(t),QSo=r(gAe," (Longformer model)"),gAe.forEach(t),HSo=i(P),S5=n(P,"LI",{});var hAe=s(S5);kle=n(hAe,"STRONG",{});var Nrt=s(kle);USo=r(Nrt,"lxmert"),Nrt.forEach(t),JSo=r(hAe," \u2014 "),cj=n(hAe,"A",{href:!0});var Drt=s(cj);YSo=r(Drt,"LxmertForQuestionAnswering"),Drt.forEach(t),KSo=r(hAe," (LXMERT model)"),hAe.forEach(t),ZSo=i(P),P5=n(P,"LI",{});var pAe=s(P5);Rle=n(pAe,"STRONG",{});var jrt=s(Rle);ePo=r(jrt,"mbart"),jrt.forEach(t),oPo=r(pAe," \u2014 "),fj=n(pAe,"A",{href:!0});var qrt=s(fj);rPo=r(qrt,"MBartForQuestionAnswering"),qrt.forEach(t),tPo=r(pAe," (mBART model)"),pAe.forEach(t),aPo=i(P),$5=n(P,"LI",{});var _Ae=s($5);Sle=n(_Ae,"STRONG",{});var Grt=s(Sle);nPo=r(Grt,"megatron-bert"),Grt.forEach(t),sPo=r(_Ae," \u2014 "),mj=n(_Ae,"A",{href:!0});var Ort=s(mj);lPo=r(Ort,"MegatronBertForQuestionAnswering"),Ort.forEach(t),iPo=r(_Ae," (MegatronBert model)"),_Ae.forEach(t),dPo=i(P),I5=n(P,"LI",{});var uAe=s(I5);Ple=n(uAe,"STRONG",{});var Xrt=s(Ple);cPo=r(Xrt,"mobilebert"),Xrt.forEach(t),fPo=r(uAe," \u2014 "),gj=n(uAe,"A",{href:!0});var Vrt=s(gj);mPo=r(Vrt,"MobileBertForQuestionAnswering"),Vrt.forEach(t),gPo=r(uAe," (MobileBERT model)"),uAe.forEach(t),hPo=i(P),N5=n(P,"LI",{});var bAe=s(N5);$le=n(bAe,"STRONG",{});var zrt=s($le);pPo=r(zrt,"mpnet"),zrt.forEach(t),_Po=r(bAe," \u2014 "),hj=n(bAe,"A",{href:!0});var Wrt=s(hj);uPo=r(Wrt,"MPNetForQuestionAnswering"),Wrt.forEach(t),bPo=r(bAe," (MPNet model)"),bAe.forEach(t),vPo=i(P),D5=n(P,"LI",{});var vAe=s(D5);Ile=n(vAe,"STRONG",{});var Qrt=s(Ile);TPo=r(Qrt,"nystromformer"),Qrt.forEach(t),FPo=r(vAe," \u2014 "),pj=n(vAe,"A",{href:!0});var Hrt=s(pj);CPo=r(Hrt,"NystromformerForQuestionAnswering"),Hrt.forEach(t),MPo=r(vAe," (Nystromformer model)"),vAe.forEach(t),EPo=i(P),j5=n(P,"LI",{});var TAe=s(j5);Nle=n(TAe,"STRONG",{});var Urt=s(Nle);yPo=r(Urt,"qdqbert"),Urt.forEach(t),wPo=r(TAe," \u2014 "),_j=n(TAe,"A",{href:!0});var Jrt=s(_j);APo=r(Jrt,"QDQBertForQuestionAnswering"),Jrt.forEach(t),LPo=r(TAe," (QDQBert model)"),TAe.forEach(t),BPo=i(P),q5=n(P,"LI",{});var FAe=s(q5);Dle=n(FAe,"STRONG",{});var Yrt=s(Dle);xPo=r(Yrt,"reformer"),Yrt.forEach(t),kPo=r(FAe," \u2014 "),uj=n(FAe,"A",{href:!0});var Krt=s(uj);RPo=r(Krt,"ReformerForQuestionAnswering"),Krt.forEach(t),SPo=r(FAe," (Reformer model)"),FAe.forEach(t),PPo=i(P),G5=n(P,"LI",{});var CAe=s(G5);jle=n(CAe,"STRONG",{});var Zrt=s(jle);$Po=r(Zrt,"rembert"),Zrt.forEach(t),IPo=r(CAe," \u2014 "),bj=n(CAe,"A",{href:!0});var ett=s(bj);NPo=r(ett,"RemBertForQuestionAnswering"),ett.forEach(t),DPo=r(CAe," (RemBERT model)"),CAe.forEach(t),jPo=i(P),O5=n(P,"LI",{});var MAe=s(O5);qle=n(MAe,"STRONG",{});var ott=s(qle);qPo=r(ott,"roberta"),ott.forEach(t),GPo=r(MAe," \u2014 "),vj=n(MAe,"A",{href:!0});var rtt=s(vj);OPo=r(rtt,"RobertaForQuestionAnswering"),rtt.forEach(t),XPo=r(MAe," (RoBERTa model)"),MAe.forEach(t),VPo=i(P),X5=n(P,"LI",{});var EAe=s(X5);Gle=n(EAe,"STRONG",{});var ttt=s(Gle);zPo=r(ttt,"roformer"),ttt.forEach(t),WPo=r(EAe," \u2014 "),Tj=n(EAe,"A",{href:!0});var att=s(Tj);QPo=r(att,"RoFormerForQuestionAnswering"),att.forEach(t),HPo=r(EAe," (RoFormer model)"),EAe.forEach(t),UPo=i(P),V5=n(P,"LI",{});var yAe=s(V5);Ole=n(yAe,"STRONG",{});var ntt=s(Ole);JPo=r(ntt,"splinter"),ntt.forEach(t),YPo=r(yAe," \u2014 "),Fj=n(yAe,"A",{href:!0});var stt=s(Fj);KPo=r(stt,"SplinterForQuestionAnswering"),stt.forEach(t),ZPo=r(yAe," (Splinter model)"),yAe.forEach(t),e$o=i(P),z5=n(P,"LI",{});var wAe=s(z5);Xle=n(wAe,"STRONG",{});var ltt=s(Xle);o$o=r(ltt,"squeezebert"),ltt.forEach(t),r$o=r(wAe," \u2014 "),Cj=n(wAe,"A",{href:!0});var itt=s(Cj);t$o=r(itt,"SqueezeBertForQuestionAnswering"),itt.forEach(t),a$o=r(wAe," (SqueezeBERT model)"),wAe.forEach(t),n$o=i(P),W5=n(P,"LI",{});var AAe=s(W5);Vle=n(AAe,"STRONG",{});var dtt=s(Vle);s$o=r(dtt,"xlm"),dtt.forEach(t),l$o=r(AAe," \u2014 "),Mj=n(AAe,"A",{href:!0});var ctt=s(Mj);i$o=r(ctt,"XLMForQuestionAnsweringSimple"),ctt.forEach(t),d$o=r(AAe," (XLM model)"),AAe.forEach(t),c$o=i(P),Q5=n(P,"LI",{});var LAe=s(Q5);zle=n(LAe,"STRONG",{});var ftt=s(zle);f$o=r(ftt,"xlm-roberta"),ftt.forEach(t),m$o=r(LAe," \u2014 "),Ej=n(LAe,"A",{href:!0});var mtt=s(Ej);g$o=r(mtt,"XLMRobertaForQuestionAnswering"),mtt.forEach(t),h$o=r(LAe," (XLM-RoBERTa model)"),LAe.forEach(t),p$o=i(P),H5=n(P,"LI",{});var BAe=s(H5);Wle=n(BAe,"STRONG",{});var gtt=s(Wle);_$o=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),u$o=r(BAe," \u2014 "),yj=n(BAe,"A",{href:!0});var htt=s(yj);b$o=r(htt,"XLMRobertaXLForQuestionAnswering"),htt.forEach(t),v$o=r(BAe," (XLM-RoBERTa-XL model)"),BAe.forEach(t),T$o=i(P),U5=n(P,"LI",{});var xAe=s(U5);Qle=n(xAe,"STRONG",{});var ptt=s(Qle);F$o=r(ptt,"xlnet"),ptt.forEach(t),C$o=r(xAe," \u2014 "),wj=n(xAe,"A",{href:!0});var _tt=s(wj);M$o=r(_tt,"XLNetForQuestionAnsweringSimple"),_tt.forEach(t),E$o=r(xAe," (XLNet model)"),xAe.forEach(t),y$o=i(P),J5=n(P,"LI",{});var kAe=s(J5);Hle=n(kAe,"STRONG",{});var utt=s(Hle);w$o=r(utt,"yoso"),utt.forEach(t),A$o=r(kAe," \u2014 "),Aj=n(kAe,"A",{href:!0});var btt=s(Aj);L$o=r(btt,"YosoForQuestionAnswering"),btt.forEach(t),B$o=r(kAe," (YOSO model)"),kAe.forEach(t),P.forEach(t),x$o=i(Ut),Y5=n(Ut,"P",{});var RAe=s(Y5);k$o=r(RAe,"The model is set in evaluation mode by default using "),Ule=n(RAe,"CODE",{});var vtt=s(Ule);R$o=r(vtt,"model.eval()"),vtt.forEach(t),S$o=r(RAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jle=n(RAe,"CODE",{});var Ttt=s(Jle);P$o=r(Ttt,"model.train()"),Ttt.forEach(t),RAe.forEach(t),$$o=i(Ut),Yle=n(Ut,"P",{});var Ftt=s(Yle);I$o=r(Ftt,"Examples:"),Ftt.forEach(t),N$o=i(Ut),m(rw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Dke=i(c),Ad=n(c,"H2",{class:!0});var QSe=s(Ad);K5=n(QSe,"A",{id:!0,class:!0,href:!0});var Ctt=s(K5);Kle=n(Ctt,"SPAN",{});var Mtt=s(Kle);m(tw.$$.fragment,Mtt),Mtt.forEach(t),Ctt.forEach(t),D$o=i(QSe),Zle=n(QSe,"SPAN",{});var Ett=s(Zle);j$o=r(Ett,"AutoModelForTableQuestionAnswering"),Ett.forEach(t),QSe.forEach(t),jke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(aw.$$.fragment,gl),q$o=i(gl),Ld=n(gl,"P",{});var uW=s(Ld);G$o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eie=n(uW,"CODE",{});var ytt=s(eie);O$o=r(ytt,"from_pretrained()"),ytt.forEach(t),X$o=r(uW,"class method or the "),oie=n(uW,"CODE",{});var wtt=s(oie);V$o=r(wtt,"from_config()"),wtt.forEach(t),z$o=r(uW,`class
method.`),uW.forEach(t),W$o=i(gl),nw=n(gl,"P",{});var HSe=s(nw);Q$o=r(HSe,"This class cannot be instantiated directly using "),rie=n(HSe,"CODE",{});var Att=s(rie);H$o=r(Att,"__init__()"),Att.forEach(t),U$o=r(HSe," (throws an error)."),HSe.forEach(t),J$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(sw.$$.fragment,hl),Y$o=i(hl),tie=n(hl,"P",{});var Ltt=s(tie);K$o=r(Ltt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ltt.forEach(t),Z$o=i(hl),Bd=n(hl,"P",{});var bW=s(Bd);eIo=r(bW,`Note:
Loading a model from its configuration file does `),aie=n(bW,"STRONG",{});var Btt=s(aie);oIo=r(Btt,"not"),Btt.forEach(t),rIo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nie=n(bW,"CODE",{});var xtt=s(nie);tIo=r(xtt,"from_pretrained()"),xtt.forEach(t),aIo=r(bW,"to load the model weights."),bW.forEach(t),nIo=i(hl),sie=n(hl,"P",{});var ktt=s(sie);sIo=r(ktt,"Examples:"),ktt.forEach(t),lIo=i(hl),m(lw.$$.fragment,hl),hl.forEach(t),iIo=i(gl),He=n(gl,"DIV",{class:!0});var Jt=s(He);m(iw.$$.fragment,Jt),dIo=i(Jt),lie=n(Jt,"P",{});var Rtt=s(lie);cIo=r(Rtt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rtt.forEach(t),fIo=i(Jt),en=n(Jt,"P",{});var FE=s(en);mIo=r(FE,"The model class to instantiate is selected based on the "),iie=n(FE,"CODE",{});var Stt=s(iie);gIo=r(Stt,"model_type"),Stt.forEach(t),hIo=r(FE,` property of the config object (either
passed as an argument or loaded from `),die=n(FE,"CODE",{});var Ptt=s(die);pIo=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),_Io=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=n(FE,"CODE",{});var $tt=s(cie);uIo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),bIo=r(FE,":"),FE.forEach(t),vIo=i(Jt),fie=n(Jt,"UL",{});var Itt=s(fie);Z5=n(Itt,"LI",{});var SAe=s(Z5);mie=n(SAe,"STRONG",{});var Ntt=s(mie);TIo=r(Ntt,"tapas"),Ntt.forEach(t),FIo=r(SAe," \u2014 "),Lj=n(SAe,"A",{href:!0});var Dtt=s(Lj);CIo=r(Dtt,"TapasForQuestionAnswering"),Dtt.forEach(t),MIo=r(SAe," (TAPAS model)"),SAe.forEach(t),Itt.forEach(t),EIo=i(Jt),e2=n(Jt,"P",{});var PAe=s(e2);yIo=r(PAe,"The model is set in evaluation mode by default using "),gie=n(PAe,"CODE",{});var jtt=s(gie);wIo=r(jtt,"model.eval()"),jtt.forEach(t),AIo=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(PAe,"CODE",{});var qtt=s(hie);LIo=r(qtt,"model.train()"),qtt.forEach(t),PAe.forEach(t),BIo=i(Jt),pie=n(Jt,"P",{});var Gtt=s(pie);xIo=r(Gtt,"Examples:"),Gtt.forEach(t),kIo=i(Jt),m(dw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),qke=i(c),xd=n(c,"H2",{class:!0});var USe=s(xd);o2=n(USe,"A",{id:!0,class:!0,href:!0});var Ott=s(o2);_ie=n(Ott,"SPAN",{});var Xtt=s(_ie);m(cw.$$.fragment,Xtt),Xtt.forEach(t),Ott.forEach(t),RIo=i(USe),uie=n(USe,"SPAN",{});var Vtt=s(uie);SIo=r(Vtt,"AutoModelForImageClassification"),Vtt.forEach(t),USe.forEach(t),Gke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(fw.$$.fragment,pl),PIo=i(pl),kd=n(pl,"P",{});var vW=s(kd);$Io=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bie=n(vW,"CODE",{});var ztt=s(bie);IIo=r(ztt,"from_pretrained()"),ztt.forEach(t),NIo=r(vW,"class method or the "),vie=n(vW,"CODE",{});var Wtt=s(vie);DIo=r(Wtt,"from_config()"),Wtt.forEach(t),jIo=r(vW,`class
method.`),vW.forEach(t),qIo=i(pl),mw=n(pl,"P",{});var JSe=s(mw);GIo=r(JSe,"This class cannot be instantiated directly using "),Tie=n(JSe,"CODE",{});var Qtt=s(Tie);OIo=r(Qtt,"__init__()"),Qtt.forEach(t),XIo=r(JSe," (throws an error)."),JSe.forEach(t),VIo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(gw.$$.fragment,_l),zIo=i(_l),Fie=n(_l,"P",{});var Htt=s(Fie);WIo=r(Htt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Htt.forEach(t),QIo=i(_l),Rd=n(_l,"P",{});var TW=s(Rd);HIo=r(TW,`Note:
Loading a model from its configuration file does `),Cie=n(TW,"STRONG",{});var Utt=s(Cie);UIo=r(Utt,"not"),Utt.forEach(t),JIo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=n(TW,"CODE",{});var Jtt=s(Mie);YIo=r(Jtt,"from_pretrained()"),Jtt.forEach(t),KIo=r(TW,"to load the model weights."),TW.forEach(t),ZIo=i(_l),Eie=n(_l,"P",{});var Ytt=s(Eie);eNo=r(Ytt,"Examples:"),Ytt.forEach(t),oNo=i(_l),m(hw.$$.fragment,_l),_l.forEach(t),rNo=i(pl),Ue=n(pl,"DIV",{class:!0});var Yt=s(Ue);m(pw.$$.fragment,Yt),tNo=i(Yt),yie=n(Yt,"P",{});var Ktt=s(yie);aNo=r(Ktt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ktt.forEach(t),nNo=i(Yt),on=n(Yt,"P",{});var CE=s(on);sNo=r(CE,"The model class to instantiate is selected based on the "),wie=n(CE,"CODE",{});var Ztt=s(wie);lNo=r(Ztt,"model_type"),Ztt.forEach(t),iNo=r(CE,` property of the config object (either
passed as an argument or loaded from `),Aie=n(CE,"CODE",{});var eat=s(Aie);dNo=r(eat,"pretrained_model_name_or_path"),eat.forEach(t),cNo=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=n(CE,"CODE",{});var oat=s(Lie);fNo=r(oat,"pretrained_model_name_or_path"),oat.forEach(t),mNo=r(CE,":"),CE.forEach(t),gNo=i(Yt),me=n(Yt,"UL",{});var Fe=s(me);r2=n(Fe,"LI",{});var $Ae=s(r2);Bie=n($Ae,"STRONG",{});var rat=s(Bie);hNo=r(rat,"beit"),rat.forEach(t),pNo=r($Ae," \u2014 "),Bj=n($Ae,"A",{href:!0});var tat=s(Bj);_No=r(tat,"BeitForImageClassification"),tat.forEach(t),uNo=r($Ae," (BEiT model)"),$Ae.forEach(t),bNo=i(Fe),t2=n(Fe,"LI",{});var IAe=s(t2);xie=n(IAe,"STRONG",{});var aat=s(xie);vNo=r(aat,"convnext"),aat.forEach(t),TNo=r(IAe," \u2014 "),xj=n(IAe,"A",{href:!0});var nat=s(xj);FNo=r(nat,"ConvNextForImageClassification"),nat.forEach(t),CNo=r(IAe," (ConvNext model)"),IAe.forEach(t),MNo=i(Fe),qs=n(Fe,"LI",{});var Y8=s(qs);kie=n(Y8,"STRONG",{});var sat=s(kie);ENo=r(sat,"deit"),sat.forEach(t),yNo=r(Y8," \u2014 "),kj=n(Y8,"A",{href:!0});var lat=s(kj);wNo=r(lat,"DeiTForImageClassification"),lat.forEach(t),ANo=r(Y8," or "),Rj=n(Y8,"A",{href:!0});var iat=s(Rj);LNo=r(iat,"DeiTForImageClassificationWithTeacher"),iat.forEach(t),BNo=r(Y8," (DeiT model)"),Y8.forEach(t),xNo=i(Fe),a2=n(Fe,"LI",{});var NAe=s(a2);Rie=n(NAe,"STRONG",{});var dat=s(Rie);kNo=r(dat,"imagegpt"),dat.forEach(t),RNo=r(NAe," \u2014 "),Sj=n(NAe,"A",{href:!0});var cat=s(Sj);SNo=r(cat,"ImageGPTForImageClassification"),cat.forEach(t),PNo=r(NAe," (ImageGPT model)"),NAe.forEach(t),$No=i(Fe),ma=n(Fe,"LI",{});var If=s(ma);Sie=n(If,"STRONG",{});var fat=s(Sie);INo=r(fat,"perceiver"),fat.forEach(t),NNo=r(If," \u2014 "),Pj=n(If,"A",{href:!0});var mat=s(Pj);DNo=r(mat,"PerceiverForImageClassificationLearned"),mat.forEach(t),jNo=r(If," or "),$j=n(If,"A",{href:!0});var gat=s($j);qNo=r(gat,"PerceiverForImageClassificationFourier"),gat.forEach(t),GNo=r(If," or "),Ij=n(If,"A",{href:!0});var hat=s(Ij);ONo=r(hat,"PerceiverForImageClassificationConvProcessing"),hat.forEach(t),XNo=r(If," (Perceiver model)"),If.forEach(t),VNo=i(Fe),n2=n(Fe,"LI",{});var DAe=s(n2);Pie=n(DAe,"STRONG",{});var pat=s(Pie);zNo=r(pat,"poolformer"),pat.forEach(t),WNo=r(DAe," \u2014 "),Nj=n(DAe,"A",{href:!0});var _at=s(Nj);QNo=r(_at,"PoolFormerForImageClassification"),_at.forEach(t),HNo=r(DAe," (PoolFormer model)"),DAe.forEach(t),UNo=i(Fe),s2=n(Fe,"LI",{});var jAe=s(s2);$ie=n(jAe,"STRONG",{});var uat=s($ie);JNo=r(uat,"resnet"),uat.forEach(t),YNo=r(jAe," \u2014 "),Dj=n(jAe,"A",{href:!0});var bat=s(Dj);KNo=r(bat,"ResNetForImageClassification"),bat.forEach(t),ZNo=r(jAe," (ResNet model)"),jAe.forEach(t),eDo=i(Fe),l2=n(Fe,"LI",{});var qAe=s(l2);Iie=n(qAe,"STRONG",{});var vat=s(Iie);oDo=r(vat,"segformer"),vat.forEach(t),rDo=r(qAe," \u2014 "),jj=n(qAe,"A",{href:!0});var Tat=s(jj);tDo=r(Tat,"SegformerForImageClassification"),Tat.forEach(t),aDo=r(qAe," (SegFormer model)"),qAe.forEach(t),nDo=i(Fe),i2=n(Fe,"LI",{});var GAe=s(i2);Nie=n(GAe,"STRONG",{});var Fat=s(Nie);sDo=r(Fat,"swin"),Fat.forEach(t),lDo=r(GAe," \u2014 "),qj=n(GAe,"A",{href:!0});var Cat=s(qj);iDo=r(Cat,"SwinForImageClassification"),Cat.forEach(t),dDo=r(GAe," (Swin model)"),GAe.forEach(t),cDo=i(Fe),d2=n(Fe,"LI",{});var OAe=s(d2);Die=n(OAe,"STRONG",{});var Mat=s(Die);fDo=r(Mat,"van"),Mat.forEach(t),mDo=r(OAe," \u2014 "),Gj=n(OAe,"A",{href:!0});var Eat=s(Gj);gDo=r(Eat,"VanForImageClassification"),Eat.forEach(t),hDo=r(OAe," (VAN model)"),OAe.forEach(t),pDo=i(Fe),c2=n(Fe,"LI",{});var XAe=s(c2);jie=n(XAe,"STRONG",{});var yat=s(jie);_Do=r(yat,"vit"),yat.forEach(t),uDo=r(XAe," \u2014 "),Oj=n(XAe,"A",{href:!0});var wat=s(Oj);bDo=r(wat,"ViTForImageClassification"),wat.forEach(t),vDo=r(XAe," (ViT model)"),XAe.forEach(t),Fe.forEach(t),TDo=i(Yt),f2=n(Yt,"P",{});var VAe=s(f2);FDo=r(VAe,"The model is set in evaluation mode by default using "),qie=n(VAe,"CODE",{});var Aat=s(qie);CDo=r(Aat,"model.eval()"),Aat.forEach(t),MDo=r(VAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(VAe,"CODE",{});var Lat=s(Gie);EDo=r(Lat,"model.train()"),Lat.forEach(t),VAe.forEach(t),yDo=i(Yt),Oie=n(Yt,"P",{});var Bat=s(Oie);wDo=r(Bat,"Examples:"),Bat.forEach(t),ADo=i(Yt),m(_w.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Oke=i(c),Sd=n(c,"H2",{class:!0});var YSe=s(Sd);m2=n(YSe,"A",{id:!0,class:!0,href:!0});var xat=s(m2);Xie=n(xat,"SPAN",{});var kat=s(Xie);m(uw.$$.fragment,kat),kat.forEach(t),xat.forEach(t),LDo=i(YSe),Vie=n(YSe,"SPAN",{});var Rat=s(Vie);BDo=r(Rat,"AutoModelForVision2Seq"),Rat.forEach(t),YSe.forEach(t),Xke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(bw.$$.fragment,ul),xDo=i(ul),Pd=n(ul,"P",{});var FW=s(Pd);kDo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zie=n(FW,"CODE",{});var Sat=s(zie);RDo=r(Sat,"from_pretrained()"),Sat.forEach(t),SDo=r(FW,"class method or the "),Wie=n(FW,"CODE",{});var Pat=s(Wie);PDo=r(Pat,"from_config()"),Pat.forEach(t),$Do=r(FW,`class
method.`),FW.forEach(t),IDo=i(ul),vw=n(ul,"P",{});var KSe=s(vw);NDo=r(KSe,"This class cannot be instantiated directly using "),Qie=n(KSe,"CODE",{});var $at=s(Qie);DDo=r($at,"__init__()"),$at.forEach(t),jDo=r(KSe," (throws an error)."),KSe.forEach(t),qDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Tw.$$.fragment,bl),GDo=i(bl),Hie=n(bl,"P",{});var Iat=s(Hie);ODo=r(Iat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Iat.forEach(t),XDo=i(bl),$d=n(bl,"P",{});var CW=s($d);VDo=r(CW,`Note:
Loading a model from its configuration file does `),Uie=n(CW,"STRONG",{});var Nat=s(Uie);zDo=r(Nat,"not"),Nat.forEach(t),WDo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jie=n(CW,"CODE",{});var Dat=s(Jie);QDo=r(Dat,"from_pretrained()"),Dat.forEach(t),HDo=r(CW,"to load the model weights."),CW.forEach(t),UDo=i(bl),Yie=n(bl,"P",{});var jat=s(Yie);JDo=r(jat,"Examples:"),jat.forEach(t),YDo=i(bl),m(Fw.$$.fragment,bl),bl.forEach(t),KDo=i(ul),Je=n(ul,"DIV",{class:!0});var Kt=s(Je);m(Cw.$$.fragment,Kt),ZDo=i(Kt),Kie=n(Kt,"P",{});var qat=s(Kie);ejo=r(qat,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qat.forEach(t),ojo=i(Kt),rn=n(Kt,"P",{});var ME=s(rn);rjo=r(ME,"The model class to instantiate is selected based on the "),Zie=n(ME,"CODE",{});var Gat=s(Zie);tjo=r(Gat,"model_type"),Gat.forEach(t),ajo=r(ME,` property of the config object (either
passed as an argument or loaded from `),ede=n(ME,"CODE",{});var Oat=s(ede);njo=r(Oat,"pretrained_model_name_or_path"),Oat.forEach(t),sjo=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=n(ME,"CODE",{});var Xat=s(ode);ljo=r(Xat,"pretrained_model_name_or_path"),Xat.forEach(t),ijo=r(ME,":"),ME.forEach(t),djo=i(Kt),rde=n(Kt,"UL",{});var Vat=s(rde);g2=n(Vat,"LI",{});var zAe=s(g2);tde=n(zAe,"STRONG",{});var zat=s(tde);cjo=r(zat,"vision-encoder-decoder"),zat.forEach(t),fjo=r(zAe," \u2014 "),Xj=n(zAe,"A",{href:!0});var Wat=s(Xj);mjo=r(Wat,"VisionEncoderDecoderModel"),Wat.forEach(t),gjo=r(zAe," (Vision Encoder decoder model)"),zAe.forEach(t),Vat.forEach(t),hjo=i(Kt),h2=n(Kt,"P",{});var WAe=s(h2);pjo=r(WAe,"The model is set in evaluation mode by default using "),ade=n(WAe,"CODE",{});var Qat=s(ade);_jo=r(Qat,"model.eval()"),Qat.forEach(t),ujo=r(WAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nde=n(WAe,"CODE",{});var Hat=s(nde);bjo=r(Hat,"model.train()"),Hat.forEach(t),WAe.forEach(t),vjo=i(Kt),sde=n(Kt,"P",{});var Uat=s(sde);Tjo=r(Uat,"Examples:"),Uat.forEach(t),Fjo=i(Kt),m(Mw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),Vke=i(c),Id=n(c,"H2",{class:!0});var ZSe=s(Id);p2=n(ZSe,"A",{id:!0,class:!0,href:!0});var Jat=s(p2);lde=n(Jat,"SPAN",{});var Yat=s(lde);m(Ew.$$.fragment,Yat),Yat.forEach(t),Jat.forEach(t),Cjo=i(ZSe),ide=n(ZSe,"SPAN",{});var Kat=s(ide);Mjo=r(Kat,"AutoModelForAudioClassification"),Kat.forEach(t),ZSe.forEach(t),zke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(yw.$$.fragment,vl),Ejo=i(vl),Nd=n(vl,"P",{});var MW=s(Nd);yjo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dde=n(MW,"CODE",{});var Zat=s(dde);wjo=r(Zat,"from_pretrained()"),Zat.forEach(t),Ajo=r(MW,"class method or the "),cde=n(MW,"CODE",{});var ent=s(cde);Ljo=r(ent,"from_config()"),ent.forEach(t),Bjo=r(MW,`class
method.`),MW.forEach(t),xjo=i(vl),ww=n(vl,"P",{});var ePe=s(ww);kjo=r(ePe,"This class cannot be instantiated directly using "),fde=n(ePe,"CODE",{});var ont=s(fde);Rjo=r(ont,"__init__()"),ont.forEach(t),Sjo=r(ePe," (throws an error)."),ePe.forEach(t),Pjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(Aw.$$.fragment,Tl),$jo=i(Tl),mde=n(Tl,"P",{});var rnt=s(mde);Ijo=r(rnt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rnt.forEach(t),Njo=i(Tl),Dd=n(Tl,"P",{});var EW=s(Dd);Djo=r(EW,`Note:
Loading a model from its configuration file does `),gde=n(EW,"STRONG",{});var tnt=s(gde);jjo=r(tnt,"not"),tnt.forEach(t),qjo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hde=n(EW,"CODE",{});var ant=s(hde);Gjo=r(ant,"from_pretrained()"),ant.forEach(t),Ojo=r(EW,"to load the model weights."),EW.forEach(t),Xjo=i(Tl),pde=n(Tl,"P",{});var nnt=s(pde);Vjo=r(nnt,"Examples:"),nnt.forEach(t),zjo=i(Tl),m(Lw.$$.fragment,Tl),Tl.forEach(t),Wjo=i(vl),Ye=n(vl,"DIV",{class:!0});var Zt=s(Ye);m(Bw.$$.fragment,Zt),Qjo=i(Zt),_de=n(Zt,"P",{});var snt=s(_de);Hjo=r(snt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),snt.forEach(t),Ujo=i(Zt),tn=n(Zt,"P",{});var EE=s(tn);Jjo=r(EE,"The model class to instantiate is selected based on the "),ude=n(EE,"CODE",{});var lnt=s(ude);Yjo=r(lnt,"model_type"),lnt.forEach(t),Kjo=r(EE,` property of the config object (either
passed as an argument or loaded from `),bde=n(EE,"CODE",{});var int=s(bde);Zjo=r(int,"pretrained_model_name_or_path"),int.forEach(t),eqo=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=n(EE,"CODE",{});var dnt=s(vde);oqo=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),rqo=r(EE,":"),EE.forEach(t),tqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);_2=n(qo,"LI",{});var QAe=s(_2);Tde=n(QAe,"STRONG",{});var cnt=s(Tde);aqo=r(cnt,"data2vec-audio"),cnt.forEach(t),nqo=r(QAe," \u2014 "),Vj=n(QAe,"A",{href:!0});var fnt=s(Vj);sqo=r(fnt,"Data2VecAudioForSequenceClassification"),fnt.forEach(t),lqo=r(QAe," (Data2VecAudio model)"),QAe.forEach(t),iqo=i(qo),u2=n(qo,"LI",{});var HAe=s(u2);Fde=n(HAe,"STRONG",{});var mnt=s(Fde);dqo=r(mnt,"hubert"),mnt.forEach(t),cqo=r(HAe," \u2014 "),zj=n(HAe,"A",{href:!0});var gnt=s(zj);fqo=r(gnt,"HubertForSequenceClassification"),gnt.forEach(t),mqo=r(HAe," (Hubert model)"),HAe.forEach(t),gqo=i(qo),b2=n(qo,"LI",{});var UAe=s(b2);Cde=n(UAe,"STRONG",{});var hnt=s(Cde);hqo=r(hnt,"sew"),hnt.forEach(t),pqo=r(UAe," \u2014 "),Wj=n(UAe,"A",{href:!0});var pnt=s(Wj);_qo=r(pnt,"SEWForSequenceClassification"),pnt.forEach(t),uqo=r(UAe," (SEW model)"),UAe.forEach(t),bqo=i(qo),v2=n(qo,"LI",{});var JAe=s(v2);Mde=n(JAe,"STRONG",{});var _nt=s(Mde);vqo=r(_nt,"sew-d"),_nt.forEach(t),Tqo=r(JAe," \u2014 "),Qj=n(JAe,"A",{href:!0});var unt=s(Qj);Fqo=r(unt,"SEWDForSequenceClassification"),unt.forEach(t),Cqo=r(JAe," (SEW-D model)"),JAe.forEach(t),Mqo=i(qo),T2=n(qo,"LI",{});var YAe=s(T2);Ede=n(YAe,"STRONG",{});var bnt=s(Ede);Eqo=r(bnt,"unispeech"),bnt.forEach(t),yqo=r(YAe," \u2014 "),Hj=n(YAe,"A",{href:!0});var vnt=s(Hj);wqo=r(vnt,"UniSpeechForSequenceClassification"),vnt.forEach(t),Aqo=r(YAe," (UniSpeech model)"),YAe.forEach(t),Lqo=i(qo),F2=n(qo,"LI",{});var KAe=s(F2);yde=n(KAe,"STRONG",{});var Tnt=s(yde);Bqo=r(Tnt,"unispeech-sat"),Tnt.forEach(t),xqo=r(KAe," \u2014 "),Uj=n(KAe,"A",{href:!0});var Fnt=s(Uj);kqo=r(Fnt,"UniSpeechSatForSequenceClassification"),Fnt.forEach(t),Rqo=r(KAe," (UniSpeechSat model)"),KAe.forEach(t),Sqo=i(qo),C2=n(qo,"LI",{});var ZAe=s(C2);wde=n(ZAe,"STRONG",{});var Cnt=s(wde);Pqo=r(Cnt,"wav2vec2"),Cnt.forEach(t),$qo=r(ZAe," \u2014 "),Jj=n(ZAe,"A",{href:!0});var Mnt=s(Jj);Iqo=r(Mnt,"Wav2Vec2ForSequenceClassification"),Mnt.forEach(t),Nqo=r(ZAe," (Wav2Vec2 model)"),ZAe.forEach(t),Dqo=i(qo),M2=n(qo,"LI",{});var e0e=s(M2);Ade=n(e0e,"STRONG",{});var Ent=s(Ade);jqo=r(Ent,"wavlm"),Ent.forEach(t),qqo=r(e0e," \u2014 "),Yj=n(e0e,"A",{href:!0});var ynt=s(Yj);Gqo=r(ynt,"WavLMForSequenceClassification"),ynt.forEach(t),Oqo=r(e0e," (WavLM model)"),e0e.forEach(t),qo.forEach(t),Xqo=i(Zt),E2=n(Zt,"P",{});var o0e=s(E2);Vqo=r(o0e,"The model is set in evaluation mode by default using "),Lde=n(o0e,"CODE",{});var wnt=s(Lde);zqo=r(wnt,"model.eval()"),wnt.forEach(t),Wqo=r(o0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=n(o0e,"CODE",{});var Ant=s(Bde);Qqo=r(Ant,"model.train()"),Ant.forEach(t),o0e.forEach(t),Hqo=i(Zt),xde=n(Zt,"P",{});var Lnt=s(xde);Uqo=r(Lnt,"Examples:"),Lnt.forEach(t),Jqo=i(Zt),m(xw.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Wke=i(c),jd=n(c,"H2",{class:!0});var oPe=s(jd);y2=n(oPe,"A",{id:!0,class:!0,href:!0});var Bnt=s(y2);kde=n(Bnt,"SPAN",{});var xnt=s(kde);m(kw.$$.fragment,xnt),xnt.forEach(t),Bnt.forEach(t),Yqo=i(oPe),Rde=n(oPe,"SPAN",{});var knt=s(Rde);Kqo=r(knt,"AutoModelForAudioFrameClassification"),knt.forEach(t),oPe.forEach(t),Qke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Rw.$$.fragment,Fl),Zqo=i(Fl),qd=n(Fl,"P",{});var yW=s(qd);eGo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Sde=n(yW,"CODE",{});var Rnt=s(Sde);oGo=r(Rnt,"from_pretrained()"),Rnt.forEach(t),rGo=r(yW,"class method or the "),Pde=n(yW,"CODE",{});var Snt=s(Pde);tGo=r(Snt,"from_config()"),Snt.forEach(t),aGo=r(yW,`class
method.`),yW.forEach(t),nGo=i(Fl),Sw=n(Fl,"P",{});var rPe=s(Sw);sGo=r(rPe,"This class cannot be instantiated directly using "),$de=n(rPe,"CODE",{});var Pnt=s($de);lGo=r(Pnt,"__init__()"),Pnt.forEach(t),iGo=r(rPe," (throws an error)."),rPe.forEach(t),dGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Pw.$$.fragment,Cl),cGo=i(Cl),Ide=n(Cl,"P",{});var $nt=s(Ide);fGo=r($nt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$nt.forEach(t),mGo=i(Cl),Gd=n(Cl,"P",{});var wW=s(Gd);gGo=r(wW,`Note:
Loading a model from its configuration file does `),Nde=n(wW,"STRONG",{});var Int=s(Nde);hGo=r(Int,"not"),Int.forEach(t),pGo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dde=n(wW,"CODE",{});var Nnt=s(Dde);_Go=r(Nnt,"from_pretrained()"),Nnt.forEach(t),uGo=r(wW,"to load the model weights."),wW.forEach(t),bGo=i(Cl),jde=n(Cl,"P",{});var Dnt=s(jde);vGo=r(Dnt,"Examples:"),Dnt.forEach(t),TGo=i(Cl),m($w.$$.fragment,Cl),Cl.forEach(t),FGo=i(Fl),Ke=n(Fl,"DIV",{class:!0});var ea=s(Ke);m(Iw.$$.fragment,ea),CGo=i(ea),qde=n(ea,"P",{});var jnt=s(qde);MGo=r(jnt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jnt.forEach(t),EGo=i(ea),an=n(ea,"P",{});var yE=s(an);yGo=r(yE,"The model class to instantiate is selected based on the "),Gde=n(yE,"CODE",{});var qnt=s(Gde);wGo=r(qnt,"model_type"),qnt.forEach(t),AGo=r(yE,` property of the config object (either
passed as an argument or loaded from `),Ode=n(yE,"CODE",{});var Gnt=s(Ode);LGo=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),BGo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=n(yE,"CODE",{});var Ont=s(Xde);xGo=r(Ont,"pretrained_model_name_or_path"),Ont.forEach(t),kGo=r(yE,":"),yE.forEach(t),RGo=i(ea),nn=n(ea,"UL",{});var wE=s(nn);w2=n(wE,"LI",{});var r0e=s(w2);Vde=n(r0e,"STRONG",{});var Xnt=s(Vde);SGo=r(Xnt,"data2vec-audio"),Xnt.forEach(t),PGo=r(r0e," \u2014 "),Kj=n(r0e,"A",{href:!0});var Vnt=s(Kj);$Go=r(Vnt,"Data2VecAudioForAudioFrameClassification"),Vnt.forEach(t),IGo=r(r0e," (Data2VecAudio model)"),r0e.forEach(t),NGo=i(wE),A2=n(wE,"LI",{});var t0e=s(A2);zde=n(t0e,"STRONG",{});var znt=s(zde);DGo=r(znt,"unispeech-sat"),znt.forEach(t),jGo=r(t0e," \u2014 "),Zj=n(t0e,"A",{href:!0});var Wnt=s(Zj);qGo=r(Wnt,"UniSpeechSatForAudioFrameClassification"),Wnt.forEach(t),GGo=r(t0e," (UniSpeechSat model)"),t0e.forEach(t),OGo=i(wE),L2=n(wE,"LI",{});var a0e=s(L2);Wde=n(a0e,"STRONG",{});var Qnt=s(Wde);XGo=r(Qnt,"wav2vec2"),Qnt.forEach(t),VGo=r(a0e," \u2014 "),eq=n(a0e,"A",{href:!0});var Hnt=s(eq);zGo=r(Hnt,"Wav2Vec2ForAudioFrameClassification"),Hnt.forEach(t),WGo=r(a0e," (Wav2Vec2 model)"),a0e.forEach(t),QGo=i(wE),B2=n(wE,"LI",{});var n0e=s(B2);Qde=n(n0e,"STRONG",{});var Unt=s(Qde);HGo=r(Unt,"wavlm"),Unt.forEach(t),UGo=r(n0e," \u2014 "),oq=n(n0e,"A",{href:!0});var Jnt=s(oq);JGo=r(Jnt,"WavLMForAudioFrameClassification"),Jnt.forEach(t),YGo=r(n0e," (WavLM model)"),n0e.forEach(t),wE.forEach(t),KGo=i(ea),x2=n(ea,"P",{});var s0e=s(x2);ZGo=r(s0e,"The model is set in evaluation mode by default using "),Hde=n(s0e,"CODE",{});var Ynt=s(Hde);eOo=r(Ynt,"model.eval()"),Ynt.forEach(t),oOo=r(s0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=n(s0e,"CODE",{});var Knt=s(Ude);rOo=r(Knt,"model.train()"),Knt.forEach(t),s0e.forEach(t),tOo=i(ea),Jde=n(ea,"P",{});var Znt=s(Jde);aOo=r(Znt,"Examples:"),Znt.forEach(t),nOo=i(ea),m(Nw.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Hke=i(c),Od=n(c,"H2",{class:!0});var tPe=s(Od);k2=n(tPe,"A",{id:!0,class:!0,href:!0});var est=s(k2);Yde=n(est,"SPAN",{});var ost=s(Yde);m(Dw.$$.fragment,ost),ost.forEach(t),est.forEach(t),sOo=i(tPe),Kde=n(tPe,"SPAN",{});var rst=s(Kde);lOo=r(rst,"AutoModelForCTC"),rst.forEach(t),tPe.forEach(t),Uke=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(jw.$$.fragment,Ml),iOo=i(Ml),Xd=n(Ml,"P",{});var AW=s(Xd);dOo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Zde=n(AW,"CODE",{});var tst=s(Zde);cOo=r(tst,"from_pretrained()"),tst.forEach(t),fOo=r(AW,"class method or the "),ece=n(AW,"CODE",{});var ast=s(ece);mOo=r(ast,"from_config()"),ast.forEach(t),gOo=r(AW,`class
method.`),AW.forEach(t),hOo=i(Ml),qw=n(Ml,"P",{});var aPe=s(qw);pOo=r(aPe,"This class cannot be instantiated directly using "),oce=n(aPe,"CODE",{});var nst=s(oce);_Oo=r(nst,"__init__()"),nst.forEach(t),uOo=r(aPe," (throws an error)."),aPe.forEach(t),bOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Gw.$$.fragment,El),vOo=i(El),rce=n(El,"P",{});var sst=s(rce);TOo=r(sst,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),sst.forEach(t),FOo=i(El),Vd=n(El,"P",{});var LW=s(Vd);COo=r(LW,`Note:
Loading a model from its configuration file does `),tce=n(LW,"STRONG",{});var lst=s(tce);MOo=r(lst,"not"),lst.forEach(t),EOo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=n(LW,"CODE",{});var ist=s(ace);yOo=r(ist,"from_pretrained()"),ist.forEach(t),wOo=r(LW,"to load the model weights."),LW.forEach(t),AOo=i(El),nce=n(El,"P",{});var dst=s(nce);LOo=r(dst,"Examples:"),dst.forEach(t),BOo=i(El),m(Ow.$$.fragment,El),El.forEach(t),xOo=i(Ml),Ze=n(Ml,"DIV",{class:!0});var oa=s(Ze);m(Xw.$$.fragment,oa),kOo=i(oa),sce=n(oa,"P",{});var cst=s(sce);ROo=r(cst,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),cst.forEach(t),SOo=i(oa),sn=n(oa,"P",{});var AE=s(sn);POo=r(AE,"The model class to instantiate is selected based on the "),lce=n(AE,"CODE",{});var fst=s(lce);$Oo=r(fst,"model_type"),fst.forEach(t),IOo=r(AE,` property of the config object (either
passed as an argument or loaded from `),ice=n(AE,"CODE",{});var mst=s(ice);NOo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),DOo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(AE,"CODE",{});var gst=s(dce);jOo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),qOo=r(AE,":"),AE.forEach(t),GOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);R2=n(Go,"LI",{});var l0e=s(R2);cce=n(l0e,"STRONG",{});var hst=s(cce);OOo=r(hst,"data2vec-audio"),hst.forEach(t),XOo=r(l0e," \u2014 "),rq=n(l0e,"A",{href:!0});var pst=s(rq);VOo=r(pst,"Data2VecAudioForCTC"),pst.forEach(t),zOo=r(l0e," (Data2VecAudio model)"),l0e.forEach(t),WOo=i(Go),S2=n(Go,"LI",{});var i0e=s(S2);fce=n(i0e,"STRONG",{});var _st=s(fce);QOo=r(_st,"hubert"),_st.forEach(t),HOo=r(i0e," \u2014 "),tq=n(i0e,"A",{href:!0});var ust=s(tq);UOo=r(ust,"HubertForCTC"),ust.forEach(t),JOo=r(i0e," (Hubert model)"),i0e.forEach(t),YOo=i(Go),P2=n(Go,"LI",{});var d0e=s(P2);mce=n(d0e,"STRONG",{});var bst=s(mce);KOo=r(bst,"sew"),bst.forEach(t),ZOo=r(d0e," \u2014 "),aq=n(d0e,"A",{href:!0});var vst=s(aq);eXo=r(vst,"SEWForCTC"),vst.forEach(t),oXo=r(d0e," (SEW model)"),d0e.forEach(t),rXo=i(Go),$2=n(Go,"LI",{});var c0e=s($2);gce=n(c0e,"STRONG",{});var Tst=s(gce);tXo=r(Tst,"sew-d"),Tst.forEach(t),aXo=r(c0e," \u2014 "),nq=n(c0e,"A",{href:!0});var Fst=s(nq);nXo=r(Fst,"SEWDForCTC"),Fst.forEach(t),sXo=r(c0e," (SEW-D model)"),c0e.forEach(t),lXo=i(Go),I2=n(Go,"LI",{});var f0e=s(I2);hce=n(f0e,"STRONG",{});var Cst=s(hce);iXo=r(Cst,"unispeech"),Cst.forEach(t),dXo=r(f0e," \u2014 "),sq=n(f0e,"A",{href:!0});var Mst=s(sq);cXo=r(Mst,"UniSpeechForCTC"),Mst.forEach(t),fXo=r(f0e," (UniSpeech model)"),f0e.forEach(t),mXo=i(Go),N2=n(Go,"LI",{});var m0e=s(N2);pce=n(m0e,"STRONG",{});var Est=s(pce);gXo=r(Est,"unispeech-sat"),Est.forEach(t),hXo=r(m0e," \u2014 "),lq=n(m0e,"A",{href:!0});var yst=s(lq);pXo=r(yst,"UniSpeechSatForCTC"),yst.forEach(t),_Xo=r(m0e," (UniSpeechSat model)"),m0e.forEach(t),uXo=i(Go),D2=n(Go,"LI",{});var g0e=s(D2);_ce=n(g0e,"STRONG",{});var wst=s(_ce);bXo=r(wst,"wav2vec2"),wst.forEach(t),vXo=r(g0e," \u2014 "),iq=n(g0e,"A",{href:!0});var Ast=s(iq);TXo=r(Ast,"Wav2Vec2ForCTC"),Ast.forEach(t),FXo=r(g0e," (Wav2Vec2 model)"),g0e.forEach(t),CXo=i(Go),j2=n(Go,"LI",{});var h0e=s(j2);uce=n(h0e,"STRONG",{});var Lst=s(uce);MXo=r(Lst,"wavlm"),Lst.forEach(t),EXo=r(h0e," \u2014 "),dq=n(h0e,"A",{href:!0});var Bst=s(dq);yXo=r(Bst,"WavLMForCTC"),Bst.forEach(t),wXo=r(h0e," (WavLM model)"),h0e.forEach(t),Go.forEach(t),AXo=i(oa),q2=n(oa,"P",{});var p0e=s(q2);LXo=r(p0e,"The model is set in evaluation mode by default using "),bce=n(p0e,"CODE",{});var xst=s(bce);BXo=r(xst,"model.eval()"),xst.forEach(t),xXo=r(p0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(p0e,"CODE",{});var kst=s(vce);kXo=r(kst,"model.train()"),kst.forEach(t),p0e.forEach(t),RXo=i(oa),Tce=n(oa,"P",{});var Rst=s(Tce);SXo=r(Rst,"Examples:"),Rst.forEach(t),PXo=i(oa),m(Vw.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Jke=i(c),zd=n(c,"H2",{class:!0});var nPe=s(zd);G2=n(nPe,"A",{id:!0,class:!0,href:!0});var Sst=s(G2);Fce=n(Sst,"SPAN",{});var Pst=s(Fce);m(zw.$$.fragment,Pst),Pst.forEach(t),Sst.forEach(t),$Xo=i(nPe),Cce=n(nPe,"SPAN",{});var $st=s(Cce);IXo=r($st,"AutoModelForSpeechSeq2Seq"),$st.forEach(t),nPe.forEach(t),Yke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Ww.$$.fragment,yl),NXo=i(yl),Wd=n(yl,"P",{});var BW=s(Wd);DXo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mce=n(BW,"CODE",{});var Ist=s(Mce);jXo=r(Ist,"from_pretrained()"),Ist.forEach(t),qXo=r(BW,"class method or the "),Ece=n(BW,"CODE",{});var Nst=s(Ece);GXo=r(Nst,"from_config()"),Nst.forEach(t),OXo=r(BW,`class
method.`),BW.forEach(t),XXo=i(yl),Qw=n(yl,"P",{});var sPe=s(Qw);VXo=r(sPe,"This class cannot be instantiated directly using "),yce=n(sPe,"CODE",{});var Dst=s(yce);zXo=r(Dst,"__init__()"),Dst.forEach(t),WXo=r(sPe," (throws an error)."),sPe.forEach(t),QXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Hw.$$.fragment,wl),HXo=i(wl),wce=n(wl,"P",{});var jst=s(wce);UXo=r(jst,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jst.forEach(t),JXo=i(wl),Qd=n(wl,"P",{});var xW=s(Qd);YXo=r(xW,`Note:
Loading a model from its configuration file does `),Ace=n(xW,"STRONG",{});var qst=s(Ace);KXo=r(qst,"not"),qst.forEach(t),ZXo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lce=n(xW,"CODE",{});var Gst=s(Lce);eVo=r(Gst,"from_pretrained()"),Gst.forEach(t),oVo=r(xW,"to load the model weights."),xW.forEach(t),rVo=i(wl),Bce=n(wl,"P",{});var Ost=s(Bce);tVo=r(Ost,"Examples:"),Ost.forEach(t),aVo=i(wl),m(Uw.$$.fragment,wl),wl.forEach(t),nVo=i(yl),eo=n(yl,"DIV",{class:!0});var ra=s(eo);m(Jw.$$.fragment,ra),sVo=i(ra),xce=n(ra,"P",{});var Xst=s(xce);lVo=r(Xst,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xst.forEach(t),iVo=i(ra),ln=n(ra,"P",{});var LE=s(ln);dVo=r(LE,"The model class to instantiate is selected based on the "),kce=n(LE,"CODE",{});var Vst=s(kce);cVo=r(Vst,"model_type"),Vst.forEach(t),fVo=r(LE,` property of the config object (either
passed as an argument or loaded from `),Rce=n(LE,"CODE",{});var zst=s(Rce);mVo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),gVo=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(LE,"CODE",{});var Wst=s(Sce);hVo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),pVo=r(LE,":"),LE.forEach(t),_Vo=i(ra),Yw=n(ra,"UL",{});var lPe=s(Yw);O2=n(lPe,"LI",{});var _0e=s(O2);Pce=n(_0e,"STRONG",{});var Qst=s(Pce);uVo=r(Qst,"speech-encoder-decoder"),Qst.forEach(t),bVo=r(_0e," \u2014 "),cq=n(_0e,"A",{href:!0});var Hst=s(cq);vVo=r(Hst,"SpeechEncoderDecoderModel"),Hst.forEach(t),TVo=r(_0e," (Speech Encoder decoder model)"),_0e.forEach(t),FVo=i(lPe),X2=n(lPe,"LI",{});var u0e=s(X2);$ce=n(u0e,"STRONG",{});var Ust=s($ce);CVo=r(Ust,"speech_to_text"),Ust.forEach(t),MVo=r(u0e," \u2014 "),fq=n(u0e,"A",{href:!0});var Jst=s(fq);EVo=r(Jst,"Speech2TextForConditionalGeneration"),Jst.forEach(t),yVo=r(u0e," (Speech2Text model)"),u0e.forEach(t),lPe.forEach(t),wVo=i(ra),V2=n(ra,"P",{});var b0e=s(V2);AVo=r(b0e,"The model is set in evaluation mode by default using "),Ice=n(b0e,"CODE",{});var Yst=s(Ice);LVo=r(Yst,"model.eval()"),Yst.forEach(t),BVo=r(b0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(b0e,"CODE",{});var Kst=s(Nce);xVo=r(Kst,"model.train()"),Kst.forEach(t),b0e.forEach(t),kVo=i(ra),Dce=n(ra,"P",{});var Zst=s(Dce);RVo=r(Zst,"Examples:"),Zst.forEach(t),SVo=i(ra),m(Kw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Kke=i(c),Hd=n(c,"H2",{class:!0});var iPe=s(Hd);z2=n(iPe,"A",{id:!0,class:!0,href:!0});var elt=s(z2);jce=n(elt,"SPAN",{});var olt=s(jce);m(Zw.$$.fragment,olt),olt.forEach(t),elt.forEach(t),PVo=i(iPe),qce=n(iPe,"SPAN",{});var rlt=s(qce);$Vo=r(rlt,"AutoModelForAudioXVector"),rlt.forEach(t),iPe.forEach(t),Zke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(e6.$$.fragment,Al),IVo=i(Al),Ud=n(Al,"P",{});var kW=s(Ud);NVo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gce=n(kW,"CODE",{});var tlt=s(Gce);DVo=r(tlt,"from_pretrained()"),tlt.forEach(t),jVo=r(kW,"class method or the "),Oce=n(kW,"CODE",{});var alt=s(Oce);qVo=r(alt,"from_config()"),alt.forEach(t),GVo=r(kW,`class
method.`),kW.forEach(t),OVo=i(Al),o6=n(Al,"P",{});var dPe=s(o6);XVo=r(dPe,"This class cannot be instantiated directly using "),Xce=n(dPe,"CODE",{});var nlt=s(Xce);VVo=r(nlt,"__init__()"),nlt.forEach(t),zVo=r(dPe," (throws an error)."),dPe.forEach(t),WVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(r6.$$.fragment,Ll),QVo=i(Ll),Vce=n(Ll,"P",{});var slt=s(Vce);HVo=r(slt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),slt.forEach(t),UVo=i(Ll),Jd=n(Ll,"P",{});var RW=s(Jd);JVo=r(RW,`Note:
Loading a model from its configuration file does `),zce=n(RW,"STRONG",{});var llt=s(zce);YVo=r(llt,"not"),llt.forEach(t),KVo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=n(RW,"CODE",{});var ilt=s(Wce);ZVo=r(ilt,"from_pretrained()"),ilt.forEach(t),ezo=r(RW,"to load the model weights."),RW.forEach(t),ozo=i(Ll),Qce=n(Ll,"P",{});var dlt=s(Qce);rzo=r(dlt,"Examples:"),dlt.forEach(t),tzo=i(Ll),m(t6.$$.fragment,Ll),Ll.forEach(t),azo=i(Al),oo=n(Al,"DIV",{class:!0});var ta=s(oo);m(a6.$$.fragment,ta),nzo=i(ta),Hce=n(ta,"P",{});var clt=s(Hce);szo=r(clt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),clt.forEach(t),lzo=i(ta),dn=n(ta,"P",{});var BE=s(dn);izo=r(BE,"The model class to instantiate is selected based on the "),Uce=n(BE,"CODE",{});var flt=s(Uce);dzo=r(flt,"model_type"),flt.forEach(t),czo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Jce=n(BE,"CODE",{});var mlt=s(Jce);fzo=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),mzo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(BE,"CODE",{});var glt=s(Yce);gzo=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),hzo=r(BE,":"),BE.forEach(t),pzo=i(ta),cn=n(ta,"UL",{});var xE=s(cn);W2=n(xE,"LI",{});var v0e=s(W2);Kce=n(v0e,"STRONG",{});var hlt=s(Kce);_zo=r(hlt,"data2vec-audio"),hlt.forEach(t),uzo=r(v0e," \u2014 "),mq=n(v0e,"A",{href:!0});var plt=s(mq);bzo=r(plt,"Data2VecAudioForXVector"),plt.forEach(t),vzo=r(v0e," (Data2VecAudio model)"),v0e.forEach(t),Tzo=i(xE),Q2=n(xE,"LI",{});var T0e=s(Q2);Zce=n(T0e,"STRONG",{});var _lt=s(Zce);Fzo=r(_lt,"unispeech-sat"),_lt.forEach(t),Czo=r(T0e," \u2014 "),gq=n(T0e,"A",{href:!0});var ult=s(gq);Mzo=r(ult,"UniSpeechSatForXVector"),ult.forEach(t),Ezo=r(T0e," (UniSpeechSat model)"),T0e.forEach(t),yzo=i(xE),H2=n(xE,"LI",{});var F0e=s(H2);efe=n(F0e,"STRONG",{});var blt=s(efe);wzo=r(blt,"wav2vec2"),blt.forEach(t),Azo=r(F0e," \u2014 "),hq=n(F0e,"A",{href:!0});var vlt=s(hq);Lzo=r(vlt,"Wav2Vec2ForXVector"),vlt.forEach(t),Bzo=r(F0e," (Wav2Vec2 model)"),F0e.forEach(t),xzo=i(xE),U2=n(xE,"LI",{});var C0e=s(U2);ofe=n(C0e,"STRONG",{});var Tlt=s(ofe);kzo=r(Tlt,"wavlm"),Tlt.forEach(t),Rzo=r(C0e," \u2014 "),pq=n(C0e,"A",{href:!0});var Flt=s(pq);Szo=r(Flt,"WavLMForXVector"),Flt.forEach(t),Pzo=r(C0e," (WavLM model)"),C0e.forEach(t),xE.forEach(t),$zo=i(ta),J2=n(ta,"P",{});var M0e=s(J2);Izo=r(M0e,"The model is set in evaluation mode by default using "),rfe=n(M0e,"CODE",{});var Clt=s(rfe);Nzo=r(Clt,"model.eval()"),Clt.forEach(t),Dzo=r(M0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=n(M0e,"CODE",{});var Mlt=s(tfe);jzo=r(Mlt,"model.train()"),Mlt.forEach(t),M0e.forEach(t),qzo=i(ta),afe=n(ta,"P",{});var Elt=s(afe);Gzo=r(Elt,"Examples:"),Elt.forEach(t),Ozo=i(ta),m(n6.$$.fragment,ta),ta.forEach(t),Al.forEach(t),eRe=i(c),Yd=n(c,"H2",{class:!0});var cPe=s(Yd);Y2=n(cPe,"A",{id:!0,class:!0,href:!0});var ylt=s(Y2);nfe=n(ylt,"SPAN",{});var wlt=s(nfe);m(s6.$$.fragment,wlt),wlt.forEach(t),ylt.forEach(t),Xzo=i(cPe),sfe=n(cPe,"SPAN",{});var Alt=s(sfe);Vzo=r(Alt,"AutoModelForMaskedImageModeling"),Alt.forEach(t),cPe.forEach(t),oRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(l6.$$.fragment,Bl),zzo=i(Bl),Kd=n(Bl,"P",{});var SW=s(Kd);Wzo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lfe=n(SW,"CODE",{});var Llt=s(lfe);Qzo=r(Llt,"from_pretrained()"),Llt.forEach(t),Hzo=r(SW,"class method or the "),ife=n(SW,"CODE",{});var Blt=s(ife);Uzo=r(Blt,"from_config()"),Blt.forEach(t),Jzo=r(SW,`class
method.`),SW.forEach(t),Yzo=i(Bl),i6=n(Bl,"P",{});var fPe=s(i6);Kzo=r(fPe,"This class cannot be instantiated directly using "),dfe=n(fPe,"CODE",{});var xlt=s(dfe);Zzo=r(xlt,"__init__()"),xlt.forEach(t),eWo=r(fPe," (throws an error)."),fPe.forEach(t),oWo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(d6.$$.fragment,xl),rWo=i(xl),cfe=n(xl,"P",{});var klt=s(cfe);tWo=r(klt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),klt.forEach(t),aWo=i(xl),Zd=n(xl,"P",{});var PW=s(Zd);nWo=r(PW,`Note:
Loading a model from its configuration file does `),ffe=n(PW,"STRONG",{});var Rlt=s(ffe);sWo=r(Rlt,"not"),Rlt.forEach(t),lWo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mfe=n(PW,"CODE",{});var Slt=s(mfe);iWo=r(Slt,"from_pretrained()"),Slt.forEach(t),dWo=r(PW,"to load the model weights."),PW.forEach(t),cWo=i(xl),gfe=n(xl,"P",{});var Plt=s(gfe);fWo=r(Plt,"Examples:"),Plt.forEach(t),mWo=i(xl),m(c6.$$.fragment,xl),xl.forEach(t),gWo=i(Bl),ro=n(Bl,"DIV",{class:!0});var aa=s(ro);m(f6.$$.fragment,aa),hWo=i(aa),hfe=n(aa,"P",{});var $lt=s(hfe);pWo=r($lt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$lt.forEach(t),_Wo=i(aa),fn=n(aa,"P",{});var kE=s(fn);uWo=r(kE,"The model class to instantiate is selected based on the "),pfe=n(kE,"CODE",{});var Ilt=s(pfe);bWo=r(Ilt,"model_type"),Ilt.forEach(t),vWo=r(kE,` property of the config object (either
passed as an argument or loaded from `),_fe=n(kE,"CODE",{});var Nlt=s(_fe);TWo=r(Nlt,"pretrained_model_name_or_path"),Nlt.forEach(t),FWo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(kE,"CODE",{});var Dlt=s(ufe);CWo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),MWo=r(kE,":"),kE.forEach(t),EWo=i(aa),ec=n(aa,"UL",{});var $W=s(ec);K2=n($W,"LI",{});var E0e=s(K2);bfe=n(E0e,"STRONG",{});var jlt=s(bfe);yWo=r(jlt,"deit"),jlt.forEach(t),wWo=r(E0e," \u2014 "),_q=n(E0e,"A",{href:!0});var qlt=s(_q);AWo=r(qlt,"DeiTForMaskedImageModeling"),qlt.forEach(t),LWo=r(E0e," (DeiT model)"),E0e.forEach(t),BWo=i($W),Z2=n($W,"LI",{});var y0e=s(Z2);vfe=n(y0e,"STRONG",{});var Glt=s(vfe);xWo=r(Glt,"swin"),Glt.forEach(t),kWo=r(y0e," \u2014 "),uq=n(y0e,"A",{href:!0});var Olt=s(uq);RWo=r(Olt,"SwinForMaskedImageModeling"),Olt.forEach(t),SWo=r(y0e," (Swin model)"),y0e.forEach(t),PWo=i($W),ev=n($W,"LI",{});var w0e=s(ev);Tfe=n(w0e,"STRONG",{});var Xlt=s(Tfe);$Wo=r(Xlt,"vit"),Xlt.forEach(t),IWo=r(w0e," \u2014 "),bq=n(w0e,"A",{href:!0});var Vlt=s(bq);NWo=r(Vlt,"ViTForMaskedImageModeling"),Vlt.forEach(t),DWo=r(w0e," (ViT model)"),w0e.forEach(t),$W.forEach(t),jWo=i(aa),ov=n(aa,"P",{});var A0e=s(ov);qWo=r(A0e,"The model is set in evaluation mode by default using "),Ffe=n(A0e,"CODE",{});var zlt=s(Ffe);GWo=r(zlt,"model.eval()"),zlt.forEach(t),OWo=r(A0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(A0e,"CODE",{});var Wlt=s(Cfe);XWo=r(Wlt,"model.train()"),Wlt.forEach(t),A0e.forEach(t),VWo=i(aa),Mfe=n(aa,"P",{});var Qlt=s(Mfe);zWo=r(Qlt,"Examples:"),Qlt.forEach(t),WWo=i(aa),m(m6.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),rRe=i(c),oc=n(c,"H2",{class:!0});var mPe=s(oc);rv=n(mPe,"A",{id:!0,class:!0,href:!0});var Hlt=s(rv);Efe=n(Hlt,"SPAN",{});var Ult=s(Efe);m(g6.$$.fragment,Ult),Ult.forEach(t),Hlt.forEach(t),QWo=i(mPe),yfe=n(mPe,"SPAN",{});var Jlt=s(yfe);HWo=r(Jlt,"AutoModelForObjectDetection"),Jlt.forEach(t),mPe.forEach(t),tRe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(h6.$$.fragment,kl),UWo=i(kl),rc=n(kl,"P",{});var IW=s(rc);JWo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wfe=n(IW,"CODE",{});var Ylt=s(wfe);YWo=r(Ylt,"from_pretrained()"),Ylt.forEach(t),KWo=r(IW,"class method or the "),Afe=n(IW,"CODE",{});var Klt=s(Afe);ZWo=r(Klt,"from_config()"),Klt.forEach(t),eQo=r(IW,`class
method.`),IW.forEach(t),oQo=i(kl),p6=n(kl,"P",{});var gPe=s(p6);rQo=r(gPe,"This class cannot be instantiated directly using "),Lfe=n(gPe,"CODE",{});var Zlt=s(Lfe);tQo=r(Zlt,"__init__()"),Zlt.forEach(t),aQo=r(gPe," (throws an error)."),gPe.forEach(t),nQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(_6.$$.fragment,Rl),sQo=i(Rl),Bfe=n(Rl,"P",{});var eit=s(Bfe);lQo=r(eit,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),eit.forEach(t),iQo=i(Rl),tc=n(Rl,"P",{});var NW=s(tc);dQo=r(NW,`Note:
Loading a model from its configuration file does `),xfe=n(NW,"STRONG",{});var oit=s(xfe);cQo=r(oit,"not"),oit.forEach(t),fQo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kfe=n(NW,"CODE",{});var rit=s(kfe);mQo=r(rit,"from_pretrained()"),rit.forEach(t),gQo=r(NW,"to load the model weights."),NW.forEach(t),hQo=i(Rl),Rfe=n(Rl,"P",{});var tit=s(Rfe);pQo=r(tit,"Examples:"),tit.forEach(t),_Qo=i(Rl),m(u6.$$.fragment,Rl),Rl.forEach(t),uQo=i(kl),to=n(kl,"DIV",{class:!0});var na=s(to);m(b6.$$.fragment,na),bQo=i(na),Sfe=n(na,"P",{});var ait=s(Sfe);vQo=r(ait,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ait.forEach(t),TQo=i(na),mn=n(na,"P",{});var RE=s(mn);FQo=r(RE,"The model class to instantiate is selected based on the "),Pfe=n(RE,"CODE",{});var nit=s(Pfe);CQo=r(nit,"model_type"),nit.forEach(t),MQo=r(RE,` property of the config object (either
passed as an argument or loaded from `),$fe=n(RE,"CODE",{});var sit=s($fe);EQo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),yQo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(RE,"CODE",{});var lit=s(Ife);wQo=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),AQo=r(RE,":"),RE.forEach(t),LQo=i(na),Nfe=n(na,"UL",{});var iit=s(Nfe);tv=n(iit,"LI",{});var L0e=s(tv);Dfe=n(L0e,"STRONG",{});var dit=s(Dfe);BQo=r(dit,"detr"),dit.forEach(t),xQo=r(L0e," \u2014 "),vq=n(L0e,"A",{href:!0});var cit=s(vq);kQo=r(cit,"DetrForObjectDetection"),cit.forEach(t),RQo=r(L0e," (DETR model)"),L0e.forEach(t),iit.forEach(t),SQo=i(na),av=n(na,"P",{});var B0e=s(av);PQo=r(B0e,"The model is set in evaluation mode by default using "),jfe=n(B0e,"CODE",{});var fit=s(jfe);$Qo=r(fit,"model.eval()"),fit.forEach(t),IQo=r(B0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=n(B0e,"CODE",{});var mit=s(qfe);NQo=r(mit,"model.train()"),mit.forEach(t),B0e.forEach(t),DQo=i(na),Gfe=n(na,"P",{});var git=s(Gfe);jQo=r(git,"Examples:"),git.forEach(t),qQo=i(na),m(v6.$$.fragment,na),na.forEach(t),kl.forEach(t),aRe=i(c),ac=n(c,"H2",{class:!0});var hPe=s(ac);nv=n(hPe,"A",{id:!0,class:!0,href:!0});var hit=s(nv);Ofe=n(hit,"SPAN",{});var pit=s(Ofe);m(T6.$$.fragment,pit),pit.forEach(t),hit.forEach(t),GQo=i(hPe),Xfe=n(hPe,"SPAN",{});var _it=s(Xfe);OQo=r(_it,"AutoModelForImageSegmentation"),_it.forEach(t),hPe.forEach(t),nRe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(F6.$$.fragment,Sl),XQo=i(Sl),nc=n(Sl,"P",{});var DW=s(nc);VQo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Vfe=n(DW,"CODE",{});var uit=s(Vfe);zQo=r(uit,"from_pretrained()"),uit.forEach(t),WQo=r(DW,"class method or the "),zfe=n(DW,"CODE",{});var bit=s(zfe);QQo=r(bit,"from_config()"),bit.forEach(t),HQo=r(DW,`class
method.`),DW.forEach(t),UQo=i(Sl),C6=n(Sl,"P",{});var pPe=s(C6);JQo=r(pPe,"This class cannot be instantiated directly using "),Wfe=n(pPe,"CODE",{});var vit=s(Wfe);YQo=r(vit,"__init__()"),vit.forEach(t),KQo=r(pPe," (throws an error)."),pPe.forEach(t),ZQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(M6.$$.fragment,Pl),eHo=i(Pl),Qfe=n(Pl,"P",{});var Tit=s(Qfe);oHo=r(Tit,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tit.forEach(t),rHo=i(Pl),sc=n(Pl,"P",{});var jW=s(sc);tHo=r(jW,`Note:
Loading a model from its configuration file does `),Hfe=n(jW,"STRONG",{});var Fit=s(Hfe);aHo=r(Fit,"not"),Fit.forEach(t),nHo=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ufe=n(jW,"CODE",{});var Cit=s(Ufe);sHo=r(Cit,"from_pretrained()"),Cit.forEach(t),lHo=r(jW,"to load the model weights."),jW.forEach(t),iHo=i(Pl),Jfe=n(Pl,"P",{});var Mit=s(Jfe);dHo=r(Mit,"Examples:"),Mit.forEach(t),cHo=i(Pl),m(E6.$$.fragment,Pl),Pl.forEach(t),fHo=i(Sl),ao=n(Sl,"DIV",{class:!0});var sa=s(ao);m(y6.$$.fragment,sa),mHo=i(sa),Yfe=n(sa,"P",{});var Eit=s(Yfe);gHo=r(Eit,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Eit.forEach(t),hHo=i(sa),gn=n(sa,"P",{});var SE=s(gn);pHo=r(SE,"The model class to instantiate is selected based on the "),Kfe=n(SE,"CODE",{});var yit=s(Kfe);_Ho=r(yit,"model_type"),yit.forEach(t),uHo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Zfe=n(SE,"CODE",{});var wit=s(Zfe);bHo=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),vHo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=n(SE,"CODE",{});var Ait=s(eme);THo=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),FHo=r(SE,":"),SE.forEach(t),CHo=i(sa),ome=n(sa,"UL",{});var Lit=s(ome);sv=n(Lit,"LI",{});var x0e=s(sv);rme=n(x0e,"STRONG",{});var Bit=s(rme);MHo=r(Bit,"detr"),Bit.forEach(t),EHo=r(x0e," \u2014 "),Tq=n(x0e,"A",{href:!0});var xit=s(Tq);yHo=r(xit,"DetrForSegmentation"),xit.forEach(t),wHo=r(x0e," (DETR model)"),x0e.forEach(t),Lit.forEach(t),AHo=i(sa),lv=n(sa,"P",{});var k0e=s(lv);LHo=r(k0e,"The model is set in evaluation mode by default using "),tme=n(k0e,"CODE",{});var kit=s(tme);BHo=r(kit,"model.eval()"),kit.forEach(t),xHo=r(k0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(k0e,"CODE",{});var Rit=s(ame);kHo=r(Rit,"model.train()"),Rit.forEach(t),k0e.forEach(t),RHo=i(sa),nme=n(sa,"P",{});var Sit=s(nme);SHo=r(Sit,"Examples:"),Sit.forEach(t),PHo=i(sa),m(w6.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),sRe=i(c),lc=n(c,"H2",{class:!0});var _Pe=s(lc);iv=n(_Pe,"A",{id:!0,class:!0,href:!0});var Pit=s(iv);sme=n(Pit,"SPAN",{});var $it=s(sme);m(A6.$$.fragment,$it),$it.forEach(t),Pit.forEach(t),$Ho=i(_Pe),lme=n(_Pe,"SPAN",{});var Iit=s(lme);IHo=r(Iit,"AutoModelForSemanticSegmentation"),Iit.forEach(t),_Pe.forEach(t),lRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(L6.$$.fragment,$l),NHo=i($l),ic=n($l,"P",{});var qW=s(ic);DHo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ime=n(qW,"CODE",{});var Nit=s(ime);jHo=r(Nit,"from_pretrained()"),Nit.forEach(t),qHo=r(qW,"class method or the "),dme=n(qW,"CODE",{});var Dit=s(dme);GHo=r(Dit,"from_config()"),Dit.forEach(t),OHo=r(qW,`class
method.`),qW.forEach(t),XHo=i($l),B6=n($l,"P",{});var uPe=s(B6);VHo=r(uPe,"This class cannot be instantiated directly using "),cme=n(uPe,"CODE",{});var jit=s(cme);zHo=r(jit,"__init__()"),jit.forEach(t),WHo=r(uPe," (throws an error)."),uPe.forEach(t),QHo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(x6.$$.fragment,Il),HHo=i(Il),fme=n(Il,"P",{});var qit=s(fme);UHo=r(qit,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qit.forEach(t),JHo=i(Il),dc=n(Il,"P",{});var GW=s(dc);YHo=r(GW,`Note:
Loading a model from its configuration file does `),mme=n(GW,"STRONG",{});var Git=s(mme);KHo=r(Git,"not"),Git.forEach(t),ZHo=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gme=n(GW,"CODE",{});var Oit=s(gme);eUo=r(Oit,"from_pretrained()"),Oit.forEach(t),oUo=r(GW,"to load the model weights."),GW.forEach(t),rUo=i(Il),hme=n(Il,"P",{});var Xit=s(hme);tUo=r(Xit,"Examples:"),Xit.forEach(t),aUo=i(Il),m(k6.$$.fragment,Il),Il.forEach(t),nUo=i($l),no=n($l,"DIV",{class:!0});var la=s(no);m(R6.$$.fragment,la),sUo=i(la),pme=n(la,"P",{});var Vit=s(pme);lUo=r(Vit,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Vit.forEach(t),iUo=i(la),hn=n(la,"P",{});var PE=s(hn);dUo=r(PE,"The model class to instantiate is selected based on the "),_me=n(PE,"CODE",{});var zit=s(_me);cUo=r(zit,"model_type"),zit.forEach(t),fUo=r(PE,` property of the config object (either
passed as an argument or loaded from `),ume=n(PE,"CODE",{});var Wit=s(ume);mUo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),gUo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(PE,"CODE",{});var Qit=s(bme);hUo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),pUo=r(PE,":"),PE.forEach(t),_Uo=i(la),cc=n(la,"UL",{});var OW=s(cc);dv=n(OW,"LI",{});var R0e=s(dv);vme=n(R0e,"STRONG",{});var Hit=s(vme);uUo=r(Hit,"beit"),Hit.forEach(t),bUo=r(R0e," \u2014 "),Fq=n(R0e,"A",{href:!0});var Uit=s(Fq);vUo=r(Uit,"BeitForSemanticSegmentation"),Uit.forEach(t),TUo=r(R0e," (BEiT model)"),R0e.forEach(t),FUo=i(OW),cv=n(OW,"LI",{});var S0e=s(cv);Tme=n(S0e,"STRONG",{});var Jit=s(Tme);CUo=r(Jit,"dpt"),Jit.forEach(t),MUo=r(S0e," \u2014 "),Cq=n(S0e,"A",{href:!0});var Yit=s(Cq);EUo=r(Yit,"DPTForSemanticSegmentation"),Yit.forEach(t),yUo=r(S0e," (DPT model)"),S0e.forEach(t),wUo=i(OW),fv=n(OW,"LI",{});var P0e=s(fv);Fme=n(P0e,"STRONG",{});var Kit=s(Fme);AUo=r(Kit,"segformer"),Kit.forEach(t),LUo=r(P0e," \u2014 "),Mq=n(P0e,"A",{href:!0});var Zit=s(Mq);BUo=r(Zit,"SegformerForSemanticSegmentation"),Zit.forEach(t),xUo=r(P0e," (SegFormer model)"),P0e.forEach(t),OW.forEach(t),kUo=i(la),mv=n(la,"P",{});var $0e=s(mv);RUo=r($0e,"The model is set in evaluation mode by default using "),Cme=n($0e,"CODE",{});var edt=s(Cme);SUo=r(edt,"model.eval()"),edt.forEach(t),PUo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n($0e,"CODE",{});var odt=s(Mme);$Uo=r(odt,"model.train()"),odt.forEach(t),$0e.forEach(t),IUo=i(la),Eme=n(la,"P",{});var rdt=s(Eme);NUo=r(rdt,"Examples:"),rdt.forEach(t),DUo=i(la),m(S6.$$.fragment,la),la.forEach(t),$l.forEach(t),iRe=i(c),fc=n(c,"H2",{class:!0});var bPe=s(fc);gv=n(bPe,"A",{id:!0,class:!0,href:!0});var tdt=s(gv);yme=n(tdt,"SPAN",{});var adt=s(yme);m(P6.$$.fragment,adt),adt.forEach(t),tdt.forEach(t),jUo=i(bPe),wme=n(bPe,"SPAN",{});var ndt=s(wme);qUo=r(ndt,"AutoModelForInstanceSegmentation"),ndt.forEach(t),bPe.forEach(t),dRe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m($6.$$.fragment,Nl),GUo=i(Nl),mc=n(Nl,"P",{});var XW=s(mc);OUo=r(XW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ame=n(XW,"CODE",{});var sdt=s(Ame);XUo=r(sdt,"from_pretrained()"),sdt.forEach(t),VUo=r(XW,"class method or the "),Lme=n(XW,"CODE",{});var ldt=s(Lme);zUo=r(ldt,"from_config()"),ldt.forEach(t),WUo=r(XW,`class
method.`),XW.forEach(t),QUo=i(Nl),I6=n(Nl,"P",{});var vPe=s(I6);HUo=r(vPe,"This class cannot be instantiated directly using "),Bme=n(vPe,"CODE",{});var idt=s(Bme);UUo=r(idt,"__init__()"),idt.forEach(t),JUo=r(vPe," (throws an error)."),vPe.forEach(t),YUo=i(Nl),mt=n(Nl,"DIV",{class:!0});var Dl=s(mt);m(N6.$$.fragment,Dl),KUo=i(Dl),xme=n(Dl,"P",{});var ddt=s(xme);ZUo=r(ddt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ddt.forEach(t),eJo=i(Dl),gc=n(Dl,"P",{});var VW=s(gc);oJo=r(VW,`Note:
Loading a model from its configuration file does `),kme=n(VW,"STRONG",{});var cdt=s(kme);rJo=r(cdt,"not"),cdt.forEach(t),tJo=r(VW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rme=n(VW,"CODE",{});var fdt=s(Rme);aJo=r(fdt,"from_pretrained()"),fdt.forEach(t),nJo=r(VW,"to load the model weights."),VW.forEach(t),sJo=i(Dl),Sme=n(Dl,"P",{});var mdt=s(Sme);lJo=r(mdt,"Examples:"),mdt.forEach(t),iJo=i(Dl),m(D6.$$.fragment,Dl),Dl.forEach(t),dJo=i(Nl),so=n(Nl,"DIV",{class:!0});var ia=s(so);m(j6.$$.fragment,ia),cJo=i(ia),Pme=n(ia,"P",{});var gdt=s(Pme);fJo=r(gdt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),gdt.forEach(t),mJo=i(ia),pn=n(ia,"P",{});var $E=s(pn);gJo=r($E,"The model class to instantiate is selected based on the "),$me=n($E,"CODE",{});var hdt=s($me);hJo=r(hdt,"model_type"),hdt.forEach(t),pJo=r($E,` property of the config object (either
passed as an argument or loaded from `),Ime=n($E,"CODE",{});var pdt=s(Ime);_Jo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),uJo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n($E,"CODE",{});var _dt=s(Nme);bJo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),vJo=r($E,":"),$E.forEach(t),TJo=i(ia),Dme=n(ia,"UL",{});var udt=s(Dme);hv=n(udt,"LI",{});var I0e=s(hv);jme=n(I0e,"STRONG",{});var bdt=s(jme);FJo=r(bdt,"maskformer"),bdt.forEach(t),CJo=r(I0e," \u2014 "),Eq=n(I0e,"A",{href:!0});var vdt=s(Eq);MJo=r(vdt,"MaskFormerForInstanceSegmentation"),vdt.forEach(t),EJo=r(I0e," (MaskFormer model)"),I0e.forEach(t),udt.forEach(t),yJo=i(ia),pv=n(ia,"P",{});var N0e=s(pv);wJo=r(N0e,"The model is set in evaluation mode by default using "),qme=n(N0e,"CODE",{});var Tdt=s(qme);AJo=r(Tdt,"model.eval()"),Tdt.forEach(t),LJo=r(N0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=n(N0e,"CODE",{});var Fdt=s(Gme);BJo=r(Fdt,"model.train()"),Fdt.forEach(t),N0e.forEach(t),xJo=i(ia),Ome=n(ia,"P",{});var Cdt=s(Ome);kJo=r(Cdt,"Examples:"),Cdt.forEach(t),RJo=i(ia),m(q6.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),cRe=i(c),hc=n(c,"H2",{class:!0});var TPe=s(hc);_v=n(TPe,"A",{id:!0,class:!0,href:!0});var Mdt=s(_v);Xme=n(Mdt,"SPAN",{});var Edt=s(Xme);m(G6.$$.fragment,Edt),Edt.forEach(t),Mdt.forEach(t),SJo=i(TPe),Vme=n(TPe,"SPAN",{});var ydt=s(Vme);PJo=r(ydt,"TFAutoModel"),ydt.forEach(t),TPe.forEach(t),fRe=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);m(O6.$$.fragment,jl),$Jo=i(jl),pc=n(jl,"P",{});var zW=s(pc);IJo=r(zW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zme=n(zW,"CODE",{});var wdt=s(zme);NJo=r(wdt,"from_pretrained()"),wdt.forEach(t),DJo=r(zW,"class method or the "),Wme=n(zW,"CODE",{});var Adt=s(Wme);jJo=r(Adt,"from_config()"),Adt.forEach(t),qJo=r(zW,`class
method.`),zW.forEach(t),GJo=i(jl),X6=n(jl,"P",{});var FPe=s(X6);OJo=r(FPe,"This class cannot be instantiated directly using "),Qme=n(FPe,"CODE",{});var Ldt=s(Qme);XJo=r(Ldt,"__init__()"),Ldt.forEach(t),VJo=r(FPe," (throws an error)."),FPe.forEach(t),zJo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);m(V6.$$.fragment,ql),WJo=i(ql),Hme=n(ql,"P",{});var Bdt=s(Hme);QJo=r(Bdt,"Instantiates one of the base model classes of the library from a configuration."),Bdt.forEach(t),HJo=i(ql),_c=n(ql,"P",{});var WW=s(_c);UJo=r(WW,`Note:
Loading a model from its configuration file does `),Ume=n(WW,"STRONG",{});var xdt=s(Ume);JJo=r(xdt,"not"),xdt.forEach(t),YJo=r(WW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jme=n(WW,"CODE",{});var kdt=s(Jme);KJo=r(kdt,"from_pretrained()"),kdt.forEach(t),ZJo=r(WW,"to load the model weights."),WW.forEach(t),eYo=i(ql),Yme=n(ql,"P",{});var Rdt=s(Yme);oYo=r(Rdt,"Examples:"),Rdt.forEach(t),rYo=i(ql),m(z6.$$.fragment,ql),ql.forEach(t),tYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(W6.$$.fragment,pa),aYo=i(pa),Kme=n(pa,"P",{});var Sdt=s(Kme);nYo=r(Sdt,"Instantiate one of the base model classes of the library from a pretrained model."),Sdt.forEach(t),sYo=i(pa),_n=n(pa,"P",{});var IE=s(_n);lYo=r(IE,"The model class to instantiate is selected based on the "),Zme=n(IE,"CODE",{});var Pdt=s(Zme);iYo=r(Pdt,"model_type"),Pdt.forEach(t),dYo=r(IE,` property of the config object (either
passed as an argument or loaded from `),ege=n(IE,"CODE",{});var $dt=s(ege);cYo=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),fYo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(IE,"CODE",{});var Idt=s(oge);mYo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),gYo=r(IE,":"),IE.forEach(t),hYo=i(pa),B=n(pa,"UL",{});var x=s(B);uv=n(x,"LI",{});var D0e=s(uv);rge=n(D0e,"STRONG",{});var Ndt=s(rge);pYo=r(Ndt,"albert"),Ndt.forEach(t),_Yo=r(D0e," \u2014 "),yq=n(D0e,"A",{href:!0});var Ddt=s(yq);uYo=r(Ddt,"TFAlbertModel"),Ddt.forEach(t),bYo=r(D0e," (ALBERT model)"),D0e.forEach(t),vYo=i(x),bv=n(x,"LI",{});var j0e=s(bv);tge=n(j0e,"STRONG",{});var jdt=s(tge);TYo=r(jdt,"bart"),jdt.forEach(t),FYo=r(j0e," \u2014 "),wq=n(j0e,"A",{href:!0});var qdt=s(wq);CYo=r(qdt,"TFBartModel"),qdt.forEach(t),MYo=r(j0e," (BART model)"),j0e.forEach(t),EYo=i(x),vv=n(x,"LI",{});var q0e=s(vv);age=n(q0e,"STRONG",{});var Gdt=s(age);yYo=r(Gdt,"bert"),Gdt.forEach(t),wYo=r(q0e," \u2014 "),Aq=n(q0e,"A",{href:!0});var Odt=s(Aq);AYo=r(Odt,"TFBertModel"),Odt.forEach(t),LYo=r(q0e," (BERT model)"),q0e.forEach(t),BYo=i(x),Tv=n(x,"LI",{});var G0e=s(Tv);nge=n(G0e,"STRONG",{});var Xdt=s(nge);xYo=r(Xdt,"blenderbot"),Xdt.forEach(t),kYo=r(G0e," \u2014 "),Lq=n(G0e,"A",{href:!0});var Vdt=s(Lq);RYo=r(Vdt,"TFBlenderbotModel"),Vdt.forEach(t),SYo=r(G0e," (Blenderbot model)"),G0e.forEach(t),PYo=i(x),Fv=n(x,"LI",{});var O0e=s(Fv);sge=n(O0e,"STRONG",{});var zdt=s(sge);$Yo=r(zdt,"blenderbot-small"),zdt.forEach(t),IYo=r(O0e," \u2014 "),Bq=n(O0e,"A",{href:!0});var Wdt=s(Bq);NYo=r(Wdt,"TFBlenderbotSmallModel"),Wdt.forEach(t),DYo=r(O0e," (BlenderbotSmall model)"),O0e.forEach(t),jYo=i(x),Cv=n(x,"LI",{});var X0e=s(Cv);lge=n(X0e,"STRONG",{});var Qdt=s(lge);qYo=r(Qdt,"camembert"),Qdt.forEach(t),GYo=r(X0e," \u2014 "),xq=n(X0e,"A",{href:!0});var Hdt=s(xq);OYo=r(Hdt,"TFCamembertModel"),Hdt.forEach(t),XYo=r(X0e," (CamemBERT model)"),X0e.forEach(t),VYo=i(x),Mv=n(x,"LI",{});var V0e=s(Mv);ige=n(V0e,"STRONG",{});var Udt=s(ige);zYo=r(Udt,"clip"),Udt.forEach(t),WYo=r(V0e," \u2014 "),kq=n(V0e,"A",{href:!0});var Jdt=s(kq);QYo=r(Jdt,"TFCLIPModel"),Jdt.forEach(t),HYo=r(V0e," (CLIP model)"),V0e.forEach(t),UYo=i(x),Ev=n(x,"LI",{});var z0e=s(Ev);dge=n(z0e,"STRONG",{});var Ydt=s(dge);JYo=r(Ydt,"convbert"),Ydt.forEach(t),YYo=r(z0e," \u2014 "),Rq=n(z0e,"A",{href:!0});var Kdt=s(Rq);KYo=r(Kdt,"TFConvBertModel"),Kdt.forEach(t),ZYo=r(z0e," (ConvBERT model)"),z0e.forEach(t),eKo=i(x),yv=n(x,"LI",{});var W0e=s(yv);cge=n(W0e,"STRONG",{});var Zdt=s(cge);oKo=r(Zdt,"convnext"),Zdt.forEach(t),rKo=r(W0e," \u2014 "),Sq=n(W0e,"A",{href:!0});var ect=s(Sq);tKo=r(ect,"TFConvNextModel"),ect.forEach(t),aKo=r(W0e," (ConvNext model)"),W0e.forEach(t),nKo=i(x),wv=n(x,"LI",{});var Q0e=s(wv);fge=n(Q0e,"STRONG",{});var oct=s(fge);sKo=r(oct,"ctrl"),oct.forEach(t),lKo=r(Q0e," \u2014 "),Pq=n(Q0e,"A",{href:!0});var rct=s(Pq);iKo=r(rct,"TFCTRLModel"),rct.forEach(t),dKo=r(Q0e," (CTRL model)"),Q0e.forEach(t),cKo=i(x),Av=n(x,"LI",{});var H0e=s(Av);mge=n(H0e,"STRONG",{});var tct=s(mge);fKo=r(tct,"deberta"),tct.forEach(t),mKo=r(H0e," \u2014 "),$q=n(H0e,"A",{href:!0});var act=s($q);gKo=r(act,"TFDebertaModel"),act.forEach(t),hKo=r(H0e," (DeBERTa model)"),H0e.forEach(t),pKo=i(x),Lv=n(x,"LI",{});var U0e=s(Lv);gge=n(U0e,"STRONG",{});var nct=s(gge);_Ko=r(nct,"deberta-v2"),nct.forEach(t),uKo=r(U0e," \u2014 "),Iq=n(U0e,"A",{href:!0});var sct=s(Iq);bKo=r(sct,"TFDebertaV2Model"),sct.forEach(t),vKo=r(U0e," (DeBERTa-v2 model)"),U0e.forEach(t),TKo=i(x),Bv=n(x,"LI",{});var J0e=s(Bv);hge=n(J0e,"STRONG",{});var lct=s(hge);FKo=r(lct,"distilbert"),lct.forEach(t),CKo=r(J0e," \u2014 "),Nq=n(J0e,"A",{href:!0});var ict=s(Nq);MKo=r(ict,"TFDistilBertModel"),ict.forEach(t),EKo=r(J0e," (DistilBERT model)"),J0e.forEach(t),yKo=i(x),xv=n(x,"LI",{});var Y0e=s(xv);pge=n(Y0e,"STRONG",{});var dct=s(pge);wKo=r(dct,"dpr"),dct.forEach(t),AKo=r(Y0e," \u2014 "),Dq=n(Y0e,"A",{href:!0});var cct=s(Dq);LKo=r(cct,"TFDPRQuestionEncoder"),cct.forEach(t),BKo=r(Y0e," (DPR model)"),Y0e.forEach(t),xKo=i(x),kv=n(x,"LI",{});var K0e=s(kv);_ge=n(K0e,"STRONG",{});var fct=s(_ge);kKo=r(fct,"electra"),fct.forEach(t),RKo=r(K0e," \u2014 "),jq=n(K0e,"A",{href:!0});var mct=s(jq);SKo=r(mct,"TFElectraModel"),mct.forEach(t),PKo=r(K0e," (ELECTRA model)"),K0e.forEach(t),$Ko=i(x),Rv=n(x,"LI",{});var Z0e=s(Rv);uge=n(Z0e,"STRONG",{});var gct=s(uge);IKo=r(gct,"flaubert"),gct.forEach(t),NKo=r(Z0e," \u2014 "),qq=n(Z0e,"A",{href:!0});var hct=s(qq);DKo=r(hct,"TFFlaubertModel"),hct.forEach(t),jKo=r(Z0e," (FlauBERT model)"),Z0e.forEach(t),qKo=i(x),Gs=n(x,"LI",{});var K8=s(Gs);bge=n(K8,"STRONG",{});var pct=s(bge);GKo=r(pct,"funnel"),pct.forEach(t),OKo=r(K8," \u2014 "),Gq=n(K8,"A",{href:!0});var _ct=s(Gq);XKo=r(_ct,"TFFunnelModel"),_ct.forEach(t),VKo=r(K8," or "),Oq=n(K8,"A",{href:!0});var uct=s(Oq);zKo=r(uct,"TFFunnelBaseModel"),uct.forEach(t),WKo=r(K8," (Funnel Transformer model)"),K8.forEach(t),QKo=i(x),Sv=n(x,"LI",{});var eLe=s(Sv);vge=n(eLe,"STRONG",{});var bct=s(vge);HKo=r(bct,"gpt2"),bct.forEach(t),UKo=r(eLe," \u2014 "),Xq=n(eLe,"A",{href:!0});var vct=s(Xq);JKo=r(vct,"TFGPT2Model"),vct.forEach(t),YKo=r(eLe," (OpenAI GPT-2 model)"),eLe.forEach(t),KKo=i(x),Pv=n(x,"LI",{});var oLe=s(Pv);Tge=n(oLe,"STRONG",{});var Tct=s(Tge);ZKo=r(Tct,"hubert"),Tct.forEach(t),eZo=r(oLe," \u2014 "),Vq=n(oLe,"A",{href:!0});var Fct=s(Vq);oZo=r(Fct,"TFHubertModel"),Fct.forEach(t),rZo=r(oLe," (Hubert model)"),oLe.forEach(t),tZo=i(x),$v=n(x,"LI",{});var rLe=s($v);Fge=n(rLe,"STRONG",{});var Cct=s(Fge);aZo=r(Cct,"layoutlm"),Cct.forEach(t),nZo=r(rLe," \u2014 "),zq=n(rLe,"A",{href:!0});var Mct=s(zq);sZo=r(Mct,"TFLayoutLMModel"),Mct.forEach(t),lZo=r(rLe," (LayoutLM model)"),rLe.forEach(t),iZo=i(x),Iv=n(x,"LI",{});var tLe=s(Iv);Cge=n(tLe,"STRONG",{});var Ect=s(Cge);dZo=r(Ect,"led"),Ect.forEach(t),cZo=r(tLe," \u2014 "),Wq=n(tLe,"A",{href:!0});var yct=s(Wq);fZo=r(yct,"TFLEDModel"),yct.forEach(t),mZo=r(tLe," (LED model)"),tLe.forEach(t),gZo=i(x),Nv=n(x,"LI",{});var aLe=s(Nv);Mge=n(aLe,"STRONG",{});var wct=s(Mge);hZo=r(wct,"longformer"),wct.forEach(t),pZo=r(aLe," \u2014 "),Qq=n(aLe,"A",{href:!0});var Act=s(Qq);_Zo=r(Act,"TFLongformerModel"),Act.forEach(t),uZo=r(aLe," (Longformer model)"),aLe.forEach(t),bZo=i(x),Dv=n(x,"LI",{});var nLe=s(Dv);Ege=n(nLe,"STRONG",{});var Lct=s(Ege);vZo=r(Lct,"lxmert"),Lct.forEach(t),TZo=r(nLe," \u2014 "),Hq=n(nLe,"A",{href:!0});var Bct=s(Hq);FZo=r(Bct,"TFLxmertModel"),Bct.forEach(t),CZo=r(nLe," (LXMERT model)"),nLe.forEach(t),MZo=i(x),jv=n(x,"LI",{});var sLe=s(jv);yge=n(sLe,"STRONG",{});var xct=s(yge);EZo=r(xct,"marian"),xct.forEach(t),yZo=r(sLe," \u2014 "),Uq=n(sLe,"A",{href:!0});var kct=s(Uq);wZo=r(kct,"TFMarianModel"),kct.forEach(t),AZo=r(sLe," (Marian model)"),sLe.forEach(t),LZo=i(x),qv=n(x,"LI",{});var lLe=s(qv);wge=n(lLe,"STRONG",{});var Rct=s(wge);BZo=r(Rct,"mbart"),Rct.forEach(t),xZo=r(lLe," \u2014 "),Jq=n(lLe,"A",{href:!0});var Sct=s(Jq);kZo=r(Sct,"TFMBartModel"),Sct.forEach(t),RZo=r(lLe," (mBART model)"),lLe.forEach(t),SZo=i(x),Gv=n(x,"LI",{});var iLe=s(Gv);Age=n(iLe,"STRONG",{});var Pct=s(Age);PZo=r(Pct,"mobilebert"),Pct.forEach(t),$Zo=r(iLe," \u2014 "),Yq=n(iLe,"A",{href:!0});var $ct=s(Yq);IZo=r($ct,"TFMobileBertModel"),$ct.forEach(t),NZo=r(iLe," (MobileBERT model)"),iLe.forEach(t),DZo=i(x),Ov=n(x,"LI",{});var dLe=s(Ov);Lge=n(dLe,"STRONG",{});var Ict=s(Lge);jZo=r(Ict,"mpnet"),Ict.forEach(t),qZo=r(dLe," \u2014 "),Kq=n(dLe,"A",{href:!0});var Nct=s(Kq);GZo=r(Nct,"TFMPNetModel"),Nct.forEach(t),OZo=r(dLe," (MPNet model)"),dLe.forEach(t),XZo=i(x),Xv=n(x,"LI",{});var cLe=s(Xv);Bge=n(cLe,"STRONG",{});var Dct=s(Bge);VZo=r(Dct,"mt5"),Dct.forEach(t),zZo=r(cLe," \u2014 "),Zq=n(cLe,"A",{href:!0});var jct=s(Zq);WZo=r(jct,"TFMT5Model"),jct.forEach(t),QZo=r(cLe," (mT5 model)"),cLe.forEach(t),HZo=i(x),Vv=n(x,"LI",{});var fLe=s(Vv);xge=n(fLe,"STRONG",{});var qct=s(xge);UZo=r(qct,"openai-gpt"),qct.forEach(t),JZo=r(fLe," \u2014 "),eG=n(fLe,"A",{href:!0});var Gct=s(eG);YZo=r(Gct,"TFOpenAIGPTModel"),Gct.forEach(t),KZo=r(fLe," (OpenAI GPT model)"),fLe.forEach(t),ZZo=i(x),zv=n(x,"LI",{});var mLe=s(zv);kge=n(mLe,"STRONG",{});var Oct=s(kge);eer=r(Oct,"pegasus"),Oct.forEach(t),oer=r(mLe," \u2014 "),oG=n(mLe,"A",{href:!0});var Xct=s(oG);rer=r(Xct,"TFPegasusModel"),Xct.forEach(t),ter=r(mLe," (Pegasus model)"),mLe.forEach(t),aer=i(x),Wv=n(x,"LI",{});var gLe=s(Wv);Rge=n(gLe,"STRONG",{});var Vct=s(Rge);ner=r(Vct,"rembert"),Vct.forEach(t),ser=r(gLe," \u2014 "),rG=n(gLe,"A",{href:!0});var zct=s(rG);ler=r(zct,"TFRemBertModel"),zct.forEach(t),ier=r(gLe," (RemBERT model)"),gLe.forEach(t),der=i(x),Qv=n(x,"LI",{});var hLe=s(Qv);Sge=n(hLe,"STRONG",{});var Wct=s(Sge);cer=r(Wct,"roberta"),Wct.forEach(t),fer=r(hLe," \u2014 "),tG=n(hLe,"A",{href:!0});var Qct=s(tG);mer=r(Qct,"TFRobertaModel"),Qct.forEach(t),ger=r(hLe," (RoBERTa model)"),hLe.forEach(t),her=i(x),Hv=n(x,"LI",{});var pLe=s(Hv);Pge=n(pLe,"STRONG",{});var Hct=s(Pge);per=r(Hct,"roformer"),Hct.forEach(t),_er=r(pLe," \u2014 "),aG=n(pLe,"A",{href:!0});var Uct=s(aG);uer=r(Uct,"TFRoFormerModel"),Uct.forEach(t),ber=r(pLe," (RoFormer model)"),pLe.forEach(t),ver=i(x),Uv=n(x,"LI",{});var _Le=s(Uv);$ge=n(_Le,"STRONG",{});var Jct=s($ge);Ter=r(Jct,"speech_to_text"),Jct.forEach(t),Fer=r(_Le," \u2014 "),nG=n(_Le,"A",{href:!0});var Yct=s(nG);Cer=r(Yct,"TFSpeech2TextModel"),Yct.forEach(t),Mer=r(_Le," (Speech2Text model)"),_Le.forEach(t),Eer=i(x),Jv=n(x,"LI",{});var uLe=s(Jv);Ige=n(uLe,"STRONG",{});var Kct=s(Ige);yer=r(Kct,"t5"),Kct.forEach(t),wer=r(uLe," \u2014 "),sG=n(uLe,"A",{href:!0});var Zct=s(sG);Aer=r(Zct,"TFT5Model"),Zct.forEach(t),Ler=r(uLe," (T5 model)"),uLe.forEach(t),Ber=i(x),Yv=n(x,"LI",{});var bLe=s(Yv);Nge=n(bLe,"STRONG",{});var eft=s(Nge);xer=r(eft,"tapas"),eft.forEach(t),ker=r(bLe," \u2014 "),lG=n(bLe,"A",{href:!0});var oft=s(lG);Rer=r(oft,"TFTapasModel"),oft.forEach(t),Ser=r(bLe," (TAPAS model)"),bLe.forEach(t),Per=i(x),Kv=n(x,"LI",{});var vLe=s(Kv);Dge=n(vLe,"STRONG",{});var rft=s(Dge);$er=r(rft,"transfo-xl"),rft.forEach(t),Ier=r(vLe," \u2014 "),iG=n(vLe,"A",{href:!0});var tft=s(iG);Ner=r(tft,"TFTransfoXLModel"),tft.forEach(t),Der=r(vLe," (Transformer-XL model)"),vLe.forEach(t),jer=i(x),Zv=n(x,"LI",{});var TLe=s(Zv);jge=n(TLe,"STRONG",{});var aft=s(jge);qer=r(aft,"vit"),aft.forEach(t),Ger=r(TLe," \u2014 "),dG=n(TLe,"A",{href:!0});var nft=s(dG);Oer=r(nft,"TFViTModel"),nft.forEach(t),Xer=r(TLe," (ViT model)"),TLe.forEach(t),Ver=i(x),eT=n(x,"LI",{});var FLe=s(eT);qge=n(FLe,"STRONG",{});var sft=s(qge);zer=r(sft,"wav2vec2"),sft.forEach(t),Wer=r(FLe," \u2014 "),cG=n(FLe,"A",{href:!0});var lft=s(cG);Qer=r(lft,"TFWav2Vec2Model"),lft.forEach(t),Her=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),Uer=i(x),oT=n(x,"LI",{});var CLe=s(oT);Gge=n(CLe,"STRONG",{});var ift=s(Gge);Jer=r(ift,"xlm"),ift.forEach(t),Yer=r(CLe," \u2014 "),fG=n(CLe,"A",{href:!0});var dft=s(fG);Ker=r(dft,"TFXLMModel"),dft.forEach(t),Zer=r(CLe," (XLM model)"),CLe.forEach(t),eor=i(x),rT=n(x,"LI",{});var MLe=s(rT);Oge=n(MLe,"STRONG",{});var cft=s(Oge);oor=r(cft,"xlm-roberta"),cft.forEach(t),ror=r(MLe," \u2014 "),mG=n(MLe,"A",{href:!0});var fft=s(mG);tor=r(fft,"TFXLMRobertaModel"),fft.forEach(t),aor=r(MLe," (XLM-RoBERTa model)"),MLe.forEach(t),nor=i(x),tT=n(x,"LI",{});var ELe=s(tT);Xge=n(ELe,"STRONG",{});var mft=s(Xge);sor=r(mft,"xlnet"),mft.forEach(t),lor=r(ELe," \u2014 "),gG=n(ELe,"A",{href:!0});var gft=s(gG);ior=r(gft,"TFXLNetModel"),gft.forEach(t),dor=r(ELe," (XLNet model)"),ELe.forEach(t),x.forEach(t),cor=i(pa),Vge=n(pa,"P",{});var hft=s(Vge);mor=r(hft,"Examples:"),hft.forEach(t),gor=i(pa),m(Q6.$$.fragment,pa),pa.forEach(t),jl.forEach(t),mRe=i(c),uc=n(c,"H2",{class:!0});var CPe=s(uc);aT=n(CPe,"A",{id:!0,class:!0,href:!0});var pft=s(aT);zge=n(pft,"SPAN",{});var _ft=s(zge);m(H6.$$.fragment,_ft),_ft.forEach(t),pft.forEach(t),hor=i(CPe),Wge=n(CPe,"SPAN",{});var uft=s(Wge);por=r(uft,"TFAutoModelForPreTraining"),uft.forEach(t),CPe.forEach(t),gRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(U6.$$.fragment,Gl),_or=i(Gl),bc=n(Gl,"P",{});var QW=s(bc);uor=r(QW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qge=n(QW,"CODE",{});var bft=s(Qge);bor=r(bft,"from_pretrained()"),bft.forEach(t),vor=r(QW,"class method or the "),Hge=n(QW,"CODE",{});var vft=s(Hge);Tor=r(vft,"from_config()"),vft.forEach(t),For=r(QW,`class
method.`),QW.forEach(t),Cor=i(Gl),J6=n(Gl,"P",{});var MPe=s(J6);Mor=r(MPe,"This class cannot be instantiated directly using "),Uge=n(MPe,"CODE",{});var Tft=s(Uge);Eor=r(Tft,"__init__()"),Tft.forEach(t),yor=r(MPe," (throws an error)."),MPe.forEach(t),wor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(Y6.$$.fragment,Ol),Aor=i(Ol),Jge=n(Ol,"P",{});var Fft=s(Jge);Lor=r(Fft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fft.forEach(t),Bor=i(Ol),vc=n(Ol,"P",{});var HW=s(vc);xor=r(HW,`Note:
Loading a model from its configuration file does `),Yge=n(HW,"STRONG",{});var Cft=s(Yge);kor=r(Cft,"not"),Cft.forEach(t),Ror=r(HW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kge=n(HW,"CODE",{});var Mft=s(Kge);Sor=r(Mft,"from_pretrained()"),Mft.forEach(t),Por=r(HW,"to load the model weights."),HW.forEach(t),$or=i(Ol),Zge=n(Ol,"P",{});var Eft=s(Zge);Ior=r(Eft,"Examples:"),Eft.forEach(t),Nor=i(Ol),m(K6.$$.fragment,Ol),Ol.forEach(t),Dor=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(Z6.$$.fragment,_a),jor=i(_a),ehe=n(_a,"P",{});var yft=s(ehe);qor=r(yft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yft.forEach(t),Gor=i(_a),un=n(_a,"P",{});var NE=s(un);Oor=r(NE,"The model class to instantiate is selected based on the "),ohe=n(NE,"CODE",{});var wft=s(ohe);Xor=r(wft,"model_type"),wft.forEach(t),Vor=r(NE,` property of the config object (either
passed as an argument or loaded from `),rhe=n(NE,"CODE",{});var Aft=s(rhe);zor=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),Wor=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(NE,"CODE",{});var Lft=s(the);Qor=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),Hor=r(NE,":"),NE.forEach(t),Uor=i(_a),H=n(_a,"UL",{});var U=s(H);nT=n(U,"LI",{});var yLe=s(nT);ahe=n(yLe,"STRONG",{});var Bft=s(ahe);Jor=r(Bft,"albert"),Bft.forEach(t),Yor=r(yLe," \u2014 "),hG=n(yLe,"A",{href:!0});var xft=s(hG);Kor=r(xft,"TFAlbertForPreTraining"),xft.forEach(t),Zor=r(yLe," (ALBERT model)"),yLe.forEach(t),err=i(U),sT=n(U,"LI",{});var wLe=s(sT);nhe=n(wLe,"STRONG",{});var kft=s(nhe);orr=r(kft,"bart"),kft.forEach(t),rrr=r(wLe," \u2014 "),pG=n(wLe,"A",{href:!0});var Rft=s(pG);trr=r(Rft,"TFBartForConditionalGeneration"),Rft.forEach(t),arr=r(wLe," (BART model)"),wLe.forEach(t),nrr=i(U),lT=n(U,"LI",{});var ALe=s(lT);she=n(ALe,"STRONG",{});var Sft=s(she);srr=r(Sft,"bert"),Sft.forEach(t),lrr=r(ALe," \u2014 "),_G=n(ALe,"A",{href:!0});var Pft=s(_G);irr=r(Pft,"TFBertForPreTraining"),Pft.forEach(t),drr=r(ALe," (BERT model)"),ALe.forEach(t),crr=i(U),iT=n(U,"LI",{});var LLe=s(iT);lhe=n(LLe,"STRONG",{});var $ft=s(lhe);frr=r($ft,"camembert"),$ft.forEach(t),mrr=r(LLe," \u2014 "),uG=n(LLe,"A",{href:!0});var Ift=s(uG);grr=r(Ift,"TFCamembertForMaskedLM"),Ift.forEach(t),hrr=r(LLe," (CamemBERT model)"),LLe.forEach(t),prr=i(U),dT=n(U,"LI",{});var BLe=s(dT);ihe=n(BLe,"STRONG",{});var Nft=s(ihe);_rr=r(Nft,"ctrl"),Nft.forEach(t),urr=r(BLe," \u2014 "),bG=n(BLe,"A",{href:!0});var Dft=s(bG);brr=r(Dft,"TFCTRLLMHeadModel"),Dft.forEach(t),vrr=r(BLe," (CTRL model)"),BLe.forEach(t),Trr=i(U),cT=n(U,"LI",{});var xLe=s(cT);dhe=n(xLe,"STRONG",{});var jft=s(dhe);Frr=r(jft,"distilbert"),jft.forEach(t),Crr=r(xLe," \u2014 "),vG=n(xLe,"A",{href:!0});var qft=s(vG);Mrr=r(qft,"TFDistilBertForMaskedLM"),qft.forEach(t),Err=r(xLe," (DistilBERT model)"),xLe.forEach(t),yrr=i(U),fT=n(U,"LI",{});var kLe=s(fT);che=n(kLe,"STRONG",{});var Gft=s(che);wrr=r(Gft,"electra"),Gft.forEach(t),Arr=r(kLe," \u2014 "),TG=n(kLe,"A",{href:!0});var Oft=s(TG);Lrr=r(Oft,"TFElectraForPreTraining"),Oft.forEach(t),Brr=r(kLe," (ELECTRA model)"),kLe.forEach(t),xrr=i(U),mT=n(U,"LI",{});var RLe=s(mT);fhe=n(RLe,"STRONG",{});var Xft=s(fhe);krr=r(Xft,"flaubert"),Xft.forEach(t),Rrr=r(RLe," \u2014 "),FG=n(RLe,"A",{href:!0});var Vft=s(FG);Srr=r(Vft,"TFFlaubertWithLMHeadModel"),Vft.forEach(t),Prr=r(RLe," (FlauBERT model)"),RLe.forEach(t),$rr=i(U),gT=n(U,"LI",{});var SLe=s(gT);mhe=n(SLe,"STRONG",{});var zft=s(mhe);Irr=r(zft,"funnel"),zft.forEach(t),Nrr=r(SLe," \u2014 "),CG=n(SLe,"A",{href:!0});var Wft=s(CG);Drr=r(Wft,"TFFunnelForPreTraining"),Wft.forEach(t),jrr=r(SLe," (Funnel Transformer model)"),SLe.forEach(t),qrr=i(U),hT=n(U,"LI",{});var PLe=s(hT);ghe=n(PLe,"STRONG",{});var Qft=s(ghe);Grr=r(Qft,"gpt2"),Qft.forEach(t),Orr=r(PLe," \u2014 "),MG=n(PLe,"A",{href:!0});var Hft=s(MG);Xrr=r(Hft,"TFGPT2LMHeadModel"),Hft.forEach(t),Vrr=r(PLe," (OpenAI GPT-2 model)"),PLe.forEach(t),zrr=i(U),pT=n(U,"LI",{});var $Le=s(pT);hhe=n($Le,"STRONG",{});var Uft=s(hhe);Wrr=r(Uft,"layoutlm"),Uft.forEach(t),Qrr=r($Le," \u2014 "),EG=n($Le,"A",{href:!0});var Jft=s(EG);Hrr=r(Jft,"TFLayoutLMForMaskedLM"),Jft.forEach(t),Urr=r($Le," (LayoutLM model)"),$Le.forEach(t),Jrr=i(U),_T=n(U,"LI",{});var ILe=s(_T);phe=n(ILe,"STRONG",{});var Yft=s(phe);Yrr=r(Yft,"lxmert"),Yft.forEach(t),Krr=r(ILe," \u2014 "),yG=n(ILe,"A",{href:!0});var Kft=s(yG);Zrr=r(Kft,"TFLxmertForPreTraining"),Kft.forEach(t),etr=r(ILe," (LXMERT model)"),ILe.forEach(t),otr=i(U),uT=n(U,"LI",{});var NLe=s(uT);_he=n(NLe,"STRONG",{});var Zft=s(_he);rtr=r(Zft,"mobilebert"),Zft.forEach(t),ttr=r(NLe," \u2014 "),wG=n(NLe,"A",{href:!0});var emt=s(wG);atr=r(emt,"TFMobileBertForPreTraining"),emt.forEach(t),ntr=r(NLe," (MobileBERT model)"),NLe.forEach(t),str=i(U),bT=n(U,"LI",{});var DLe=s(bT);uhe=n(DLe,"STRONG",{});var omt=s(uhe);ltr=r(omt,"mpnet"),omt.forEach(t),itr=r(DLe," \u2014 "),AG=n(DLe,"A",{href:!0});var rmt=s(AG);dtr=r(rmt,"TFMPNetForMaskedLM"),rmt.forEach(t),ctr=r(DLe," (MPNet model)"),DLe.forEach(t),ftr=i(U),vT=n(U,"LI",{});var jLe=s(vT);bhe=n(jLe,"STRONG",{});var tmt=s(bhe);mtr=r(tmt,"openai-gpt"),tmt.forEach(t),gtr=r(jLe," \u2014 "),LG=n(jLe,"A",{href:!0});var amt=s(LG);htr=r(amt,"TFOpenAIGPTLMHeadModel"),amt.forEach(t),ptr=r(jLe," (OpenAI GPT model)"),jLe.forEach(t),_tr=i(U),TT=n(U,"LI",{});var qLe=s(TT);vhe=n(qLe,"STRONG",{});var nmt=s(vhe);utr=r(nmt,"roberta"),nmt.forEach(t),btr=r(qLe," \u2014 "),BG=n(qLe,"A",{href:!0});var smt=s(BG);vtr=r(smt,"TFRobertaForMaskedLM"),smt.forEach(t),Ttr=r(qLe," (RoBERTa model)"),qLe.forEach(t),Ftr=i(U),FT=n(U,"LI",{});var GLe=s(FT);The=n(GLe,"STRONG",{});var lmt=s(The);Ctr=r(lmt,"t5"),lmt.forEach(t),Mtr=r(GLe," \u2014 "),xG=n(GLe,"A",{href:!0});var imt=s(xG);Etr=r(imt,"TFT5ForConditionalGeneration"),imt.forEach(t),ytr=r(GLe," (T5 model)"),GLe.forEach(t),wtr=i(U),CT=n(U,"LI",{});var OLe=s(CT);Fhe=n(OLe,"STRONG",{});var dmt=s(Fhe);Atr=r(dmt,"tapas"),dmt.forEach(t),Ltr=r(OLe," \u2014 "),kG=n(OLe,"A",{href:!0});var cmt=s(kG);Btr=r(cmt,"TFTapasForMaskedLM"),cmt.forEach(t),xtr=r(OLe," (TAPAS model)"),OLe.forEach(t),ktr=i(U),MT=n(U,"LI",{});var XLe=s(MT);Che=n(XLe,"STRONG",{});var fmt=s(Che);Rtr=r(fmt,"transfo-xl"),fmt.forEach(t),Str=r(XLe," \u2014 "),RG=n(XLe,"A",{href:!0});var mmt=s(RG);Ptr=r(mmt,"TFTransfoXLLMHeadModel"),mmt.forEach(t),$tr=r(XLe," (Transformer-XL model)"),XLe.forEach(t),Itr=i(U),ET=n(U,"LI",{});var VLe=s(ET);Mhe=n(VLe,"STRONG",{});var gmt=s(Mhe);Ntr=r(gmt,"xlm"),gmt.forEach(t),Dtr=r(VLe," \u2014 "),SG=n(VLe,"A",{href:!0});var hmt=s(SG);jtr=r(hmt,"TFXLMWithLMHeadModel"),hmt.forEach(t),qtr=r(VLe," (XLM model)"),VLe.forEach(t),Gtr=i(U),yT=n(U,"LI",{});var zLe=s(yT);Ehe=n(zLe,"STRONG",{});var pmt=s(Ehe);Otr=r(pmt,"xlm-roberta"),pmt.forEach(t),Xtr=r(zLe," \u2014 "),PG=n(zLe,"A",{href:!0});var _mt=s(PG);Vtr=r(_mt,"TFXLMRobertaForMaskedLM"),_mt.forEach(t),ztr=r(zLe," (XLM-RoBERTa model)"),zLe.forEach(t),Wtr=i(U),wT=n(U,"LI",{});var WLe=s(wT);yhe=n(WLe,"STRONG",{});var umt=s(yhe);Qtr=r(umt,"xlnet"),umt.forEach(t),Htr=r(WLe," \u2014 "),$G=n(WLe,"A",{href:!0});var bmt=s($G);Utr=r(bmt,"TFXLNetLMHeadModel"),bmt.forEach(t),Jtr=r(WLe," (XLNet model)"),WLe.forEach(t),U.forEach(t),Ytr=i(_a),whe=n(_a,"P",{});var vmt=s(whe);Ktr=r(vmt,"Examples:"),vmt.forEach(t),Ztr=i(_a),m(eA.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),hRe=i(c),Tc=n(c,"H2",{class:!0});var EPe=s(Tc);AT=n(EPe,"A",{id:!0,class:!0,href:!0});var Tmt=s(AT);Ahe=n(Tmt,"SPAN",{});var Fmt=s(Ahe);m(oA.$$.fragment,Fmt),Fmt.forEach(t),Tmt.forEach(t),ear=i(EPe),Lhe=n(EPe,"SPAN",{});var Cmt=s(Lhe);oar=r(Cmt,"TFAutoModelForCausalLM"),Cmt.forEach(t),EPe.forEach(t),pRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(rA.$$.fragment,Xl),rar=i(Xl),Fc=n(Xl,"P",{});var UW=s(Fc);tar=r(UW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bhe=n(UW,"CODE",{});var Mmt=s(Bhe);aar=r(Mmt,"from_pretrained()"),Mmt.forEach(t),nar=r(UW,"class method or the "),xhe=n(UW,"CODE",{});var Emt=s(xhe);sar=r(Emt,"from_config()"),Emt.forEach(t),lar=r(UW,`class
method.`),UW.forEach(t),iar=i(Xl),tA=n(Xl,"P",{});var yPe=s(tA);dar=r(yPe,"This class cannot be instantiated directly using "),khe=n(yPe,"CODE",{});var ymt=s(khe);car=r(ymt,"__init__()"),ymt.forEach(t),far=r(yPe," (throws an error)."),yPe.forEach(t),mar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(aA.$$.fragment,Vl),gar=i(Vl),Rhe=n(Vl,"P",{});var wmt=s(Rhe);har=r(wmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wmt.forEach(t),par=i(Vl),Cc=n(Vl,"P",{});var JW=s(Cc);_ar=r(JW,`Note:
Loading a model from its configuration file does `),She=n(JW,"STRONG",{});var Amt=s(She);uar=r(Amt,"not"),Amt.forEach(t),bar=r(JW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Phe=n(JW,"CODE",{});var Lmt=s(Phe);Tar=r(Lmt,"from_pretrained()"),Lmt.forEach(t),Far=r(JW,"to load the model weights."),JW.forEach(t),Car=i(Vl),$he=n(Vl,"P",{});var Bmt=s($he);Mar=r(Bmt,"Examples:"),Bmt.forEach(t),Ear=i(Vl),m(nA.$$.fragment,Vl),Vl.forEach(t),yar=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(sA.$$.fragment,ua),war=i(ua),Ihe=n(ua,"P",{});var xmt=s(Ihe);Aar=r(xmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xmt.forEach(t),Lar=i(ua),bn=n(ua,"P",{});var DE=s(bn);Bar=r(DE,"The model class to instantiate is selected based on the "),Nhe=n(DE,"CODE",{});var kmt=s(Nhe);xar=r(kmt,"model_type"),kmt.forEach(t),kar=r(DE,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(DE,"CODE",{});var Rmt=s(Dhe);Rar=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),Sar=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(DE,"CODE",{});var Smt=s(jhe);Par=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),$ar=r(DE,":"),DE.forEach(t),Iar=i(ua),ge=n(ua,"UL",{});var Ce=s(ge);LT=n(Ce,"LI",{});var QLe=s(LT);qhe=n(QLe,"STRONG",{});var Pmt=s(qhe);Nar=r(Pmt,"bert"),Pmt.forEach(t),Dar=r(QLe," \u2014 "),IG=n(QLe,"A",{href:!0});var $mt=s(IG);jar=r($mt,"TFBertLMHeadModel"),$mt.forEach(t),qar=r(QLe," (BERT model)"),QLe.forEach(t),Gar=i(Ce),BT=n(Ce,"LI",{});var HLe=s(BT);Ghe=n(HLe,"STRONG",{});var Imt=s(Ghe);Oar=r(Imt,"camembert"),Imt.forEach(t),Xar=r(HLe," \u2014 "),NG=n(HLe,"A",{href:!0});var Nmt=s(NG);Var=r(Nmt,"TFCamembertForCausalLM"),Nmt.forEach(t),zar=r(HLe," (CamemBERT model)"),HLe.forEach(t),War=i(Ce),xT=n(Ce,"LI",{});var ULe=s(xT);Ohe=n(ULe,"STRONG",{});var Dmt=s(Ohe);Qar=r(Dmt,"ctrl"),Dmt.forEach(t),Har=r(ULe," \u2014 "),DG=n(ULe,"A",{href:!0});var jmt=s(DG);Uar=r(jmt,"TFCTRLLMHeadModel"),jmt.forEach(t),Jar=r(ULe," (CTRL model)"),ULe.forEach(t),Yar=i(Ce),kT=n(Ce,"LI",{});var JLe=s(kT);Xhe=n(JLe,"STRONG",{});var qmt=s(Xhe);Kar=r(qmt,"gpt2"),qmt.forEach(t),Zar=r(JLe," \u2014 "),jG=n(JLe,"A",{href:!0});var Gmt=s(jG);enr=r(Gmt,"TFGPT2LMHeadModel"),Gmt.forEach(t),onr=r(JLe," (OpenAI GPT-2 model)"),JLe.forEach(t),rnr=i(Ce),RT=n(Ce,"LI",{});var YLe=s(RT);Vhe=n(YLe,"STRONG",{});var Omt=s(Vhe);tnr=r(Omt,"openai-gpt"),Omt.forEach(t),anr=r(YLe," \u2014 "),qG=n(YLe,"A",{href:!0});var Xmt=s(qG);nnr=r(Xmt,"TFOpenAIGPTLMHeadModel"),Xmt.forEach(t),snr=r(YLe," (OpenAI GPT model)"),YLe.forEach(t),lnr=i(Ce),ST=n(Ce,"LI",{});var KLe=s(ST);zhe=n(KLe,"STRONG",{});var Vmt=s(zhe);inr=r(Vmt,"rembert"),Vmt.forEach(t),dnr=r(KLe," \u2014 "),GG=n(KLe,"A",{href:!0});var zmt=s(GG);cnr=r(zmt,"TFRemBertForCausalLM"),zmt.forEach(t),fnr=r(KLe," (RemBERT model)"),KLe.forEach(t),mnr=i(Ce),PT=n(Ce,"LI",{});var ZLe=s(PT);Whe=n(ZLe,"STRONG",{});var Wmt=s(Whe);gnr=r(Wmt,"roberta"),Wmt.forEach(t),hnr=r(ZLe," \u2014 "),OG=n(ZLe,"A",{href:!0});var Qmt=s(OG);pnr=r(Qmt,"TFRobertaForCausalLM"),Qmt.forEach(t),_nr=r(ZLe," (RoBERTa model)"),ZLe.forEach(t),unr=i(Ce),$T=n(Ce,"LI",{});var e8e=s($T);Qhe=n(e8e,"STRONG",{});var Hmt=s(Qhe);bnr=r(Hmt,"roformer"),Hmt.forEach(t),vnr=r(e8e," \u2014 "),XG=n(e8e,"A",{href:!0});var Umt=s(XG);Tnr=r(Umt,"TFRoFormerForCausalLM"),Umt.forEach(t),Fnr=r(e8e," (RoFormer model)"),e8e.forEach(t),Cnr=i(Ce),IT=n(Ce,"LI",{});var o8e=s(IT);Hhe=n(o8e,"STRONG",{});var Jmt=s(Hhe);Mnr=r(Jmt,"transfo-xl"),Jmt.forEach(t),Enr=r(o8e," \u2014 "),VG=n(o8e,"A",{href:!0});var Ymt=s(VG);ynr=r(Ymt,"TFTransfoXLLMHeadModel"),Ymt.forEach(t),wnr=r(o8e," (Transformer-XL model)"),o8e.forEach(t),Anr=i(Ce),NT=n(Ce,"LI",{});var r8e=s(NT);Uhe=n(r8e,"STRONG",{});var Kmt=s(Uhe);Lnr=r(Kmt,"xlm"),Kmt.forEach(t),Bnr=r(r8e," \u2014 "),zG=n(r8e,"A",{href:!0});var Zmt=s(zG);xnr=r(Zmt,"TFXLMWithLMHeadModel"),Zmt.forEach(t),knr=r(r8e," (XLM model)"),r8e.forEach(t),Rnr=i(Ce),DT=n(Ce,"LI",{});var t8e=s(DT);Jhe=n(t8e,"STRONG",{});var egt=s(Jhe);Snr=r(egt,"xlnet"),egt.forEach(t),Pnr=r(t8e," \u2014 "),WG=n(t8e,"A",{href:!0});var ogt=s(WG);$nr=r(ogt,"TFXLNetLMHeadModel"),ogt.forEach(t),Inr=r(t8e," (XLNet model)"),t8e.forEach(t),Ce.forEach(t),Nnr=i(ua),Yhe=n(ua,"P",{});var rgt=s(Yhe);Dnr=r(rgt,"Examples:"),rgt.forEach(t),jnr=i(ua),m(lA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),_Re=i(c),Mc=n(c,"H2",{class:!0});var wPe=s(Mc);jT=n(wPe,"A",{id:!0,class:!0,href:!0});var tgt=s(jT);Khe=n(tgt,"SPAN",{});var agt=s(Khe);m(iA.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),qnr=i(wPe),Zhe=n(wPe,"SPAN",{});var ngt=s(Zhe);Gnr=r(ngt,"TFAutoModelForImageClassification"),ngt.forEach(t),wPe.forEach(t),uRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(dA.$$.fragment,zl),Onr=i(zl),Ec=n(zl,"P",{});var YW=s(Ec);Xnr=r(YW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),epe=n(YW,"CODE",{});var sgt=s(epe);Vnr=r(sgt,"from_pretrained()"),sgt.forEach(t),znr=r(YW,"class method or the "),ope=n(YW,"CODE",{});var lgt=s(ope);Wnr=r(lgt,"from_config()"),lgt.forEach(t),Qnr=r(YW,`class
method.`),YW.forEach(t),Hnr=i(zl),cA=n(zl,"P",{});var APe=s(cA);Unr=r(APe,"This class cannot be instantiated directly using "),rpe=n(APe,"CODE",{});var igt=s(rpe);Jnr=r(igt,"__init__()"),igt.forEach(t),Ynr=r(APe," (throws an error)."),APe.forEach(t),Knr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(fA.$$.fragment,Wl),Znr=i(Wl),tpe=n(Wl,"P",{});var dgt=s(tpe);esr=r(dgt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dgt.forEach(t),osr=i(Wl),yc=n(Wl,"P",{});var KW=s(yc);rsr=r(KW,`Note:
Loading a model from its configuration file does `),ape=n(KW,"STRONG",{});var cgt=s(ape);tsr=r(cgt,"not"),cgt.forEach(t),asr=r(KW,` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=n(KW,"CODE",{});var fgt=s(npe);nsr=r(fgt,"from_pretrained()"),fgt.forEach(t),ssr=r(KW,"to load the model weights."),KW.forEach(t),lsr=i(Wl),spe=n(Wl,"P",{});var mgt=s(spe);isr=r(mgt,"Examples:"),mgt.forEach(t),dsr=i(Wl),m(mA.$$.fragment,Wl),Wl.forEach(t),csr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(gA.$$.fragment,ba),fsr=i(ba),lpe=n(ba,"P",{});var ggt=s(lpe);msr=r(ggt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ggt.forEach(t),gsr=i(ba),vn=n(ba,"P",{});var jE=s(vn);hsr=r(jE,"The model class to instantiate is selected based on the "),ipe=n(jE,"CODE",{});var hgt=s(ipe);psr=r(hgt,"model_type"),hgt.forEach(t),_sr=r(jE,` property of the config object (either
passed as an argument or loaded from `),dpe=n(jE,"CODE",{});var pgt=s(dpe);usr=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),bsr=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(jE,"CODE",{});var _gt=s(cpe);vsr=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),Tsr=r(jE,":"),jE.forEach(t),Fsr=i(ba),hA=n(ba,"UL",{});var LPe=s(hA);qT=n(LPe,"LI",{});var a8e=s(qT);fpe=n(a8e,"STRONG",{});var ugt=s(fpe);Csr=r(ugt,"convnext"),ugt.forEach(t),Msr=r(a8e," \u2014 "),QG=n(a8e,"A",{href:!0});var bgt=s(QG);Esr=r(bgt,"TFConvNextForImageClassification"),bgt.forEach(t),ysr=r(a8e," (ConvNext model)"),a8e.forEach(t),wsr=i(LPe),GT=n(LPe,"LI",{});var n8e=s(GT);mpe=n(n8e,"STRONG",{});var vgt=s(mpe);Asr=r(vgt,"vit"),vgt.forEach(t),Lsr=r(n8e," \u2014 "),HG=n(n8e,"A",{href:!0});var Tgt=s(HG);Bsr=r(Tgt,"TFViTForImageClassification"),Tgt.forEach(t),xsr=r(n8e," (ViT model)"),n8e.forEach(t),LPe.forEach(t),ksr=i(ba),gpe=n(ba,"P",{});var Fgt=s(gpe);Rsr=r(Fgt,"Examples:"),Fgt.forEach(t),Ssr=i(ba),m(pA.$$.fragment,ba),ba.forEach(t),zl.forEach(t),bRe=i(c),wc=n(c,"H2",{class:!0});var BPe=s(wc);OT=n(BPe,"A",{id:!0,class:!0,href:!0});var Cgt=s(OT);hpe=n(Cgt,"SPAN",{});var Mgt=s(hpe);m(_A.$$.fragment,Mgt),Mgt.forEach(t),Cgt.forEach(t),Psr=i(BPe),ppe=n(BPe,"SPAN",{});var Egt=s(ppe);$sr=r(Egt,"TFAutoModelForMaskedLM"),Egt.forEach(t),BPe.forEach(t),vRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(uA.$$.fragment,Ql),Isr=i(Ql),Ac=n(Ql,"P",{});var ZW=s(Ac);Nsr=r(ZW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_pe=n(ZW,"CODE",{});var ygt=s(_pe);Dsr=r(ygt,"from_pretrained()"),ygt.forEach(t),jsr=r(ZW,"class method or the "),upe=n(ZW,"CODE",{});var wgt=s(upe);qsr=r(wgt,"from_config()"),wgt.forEach(t),Gsr=r(ZW,`class
method.`),ZW.forEach(t),Osr=i(Ql),bA=n(Ql,"P",{});var xPe=s(bA);Xsr=r(xPe,"This class cannot be instantiated directly using "),bpe=n(xPe,"CODE",{});var Agt=s(bpe);Vsr=r(Agt,"__init__()"),Agt.forEach(t),zsr=r(xPe," (throws an error)."),xPe.forEach(t),Wsr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(vA.$$.fragment,Hl),Qsr=i(Hl),vpe=n(Hl,"P",{});var Lgt=s(vpe);Hsr=r(Lgt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lgt.forEach(t),Usr=i(Hl),Lc=n(Hl,"P",{});var eQ=s(Lc);Jsr=r(eQ,`Note:
Loading a model from its configuration file does `),Tpe=n(eQ,"STRONG",{});var Bgt=s(Tpe);Ysr=r(Bgt,"not"),Bgt.forEach(t),Ksr=r(eQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=n(eQ,"CODE",{});var xgt=s(Fpe);Zsr=r(xgt,"from_pretrained()"),xgt.forEach(t),elr=r(eQ,"to load the model weights."),eQ.forEach(t),olr=i(Hl),Cpe=n(Hl,"P",{});var kgt=s(Cpe);rlr=r(kgt,"Examples:"),kgt.forEach(t),tlr=i(Hl),m(TA.$$.fragment,Hl),Hl.forEach(t),alr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(FA.$$.fragment,va),nlr=i(va),Mpe=n(va,"P",{});var Rgt=s(Mpe);slr=r(Rgt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rgt.forEach(t),llr=i(va),Tn=n(va,"P",{});var qE=s(Tn);ilr=r(qE,"The model class to instantiate is selected based on the "),Epe=n(qE,"CODE",{});var Sgt=s(Epe);dlr=r(Sgt,"model_type"),Sgt.forEach(t),clr=r(qE,` property of the config object (either
passed as an argument or loaded from `),ype=n(qE,"CODE",{});var Pgt=s(ype);flr=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),mlr=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(qE,"CODE",{});var $gt=s(wpe);glr=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),hlr=r(qE,":"),qE.forEach(t),plr=i(va),Y=n(va,"UL",{});var ee=s(Y);XT=n(ee,"LI",{});var s8e=s(XT);Ape=n(s8e,"STRONG",{});var Igt=s(Ape);_lr=r(Igt,"albert"),Igt.forEach(t),ulr=r(s8e," \u2014 "),UG=n(s8e,"A",{href:!0});var Ngt=s(UG);blr=r(Ngt,"TFAlbertForMaskedLM"),Ngt.forEach(t),vlr=r(s8e," (ALBERT model)"),s8e.forEach(t),Tlr=i(ee),VT=n(ee,"LI",{});var l8e=s(VT);Lpe=n(l8e,"STRONG",{});var Dgt=s(Lpe);Flr=r(Dgt,"bert"),Dgt.forEach(t),Clr=r(l8e," \u2014 "),JG=n(l8e,"A",{href:!0});var jgt=s(JG);Mlr=r(jgt,"TFBertForMaskedLM"),jgt.forEach(t),Elr=r(l8e," (BERT model)"),l8e.forEach(t),ylr=i(ee),zT=n(ee,"LI",{});var i8e=s(zT);Bpe=n(i8e,"STRONG",{});var qgt=s(Bpe);wlr=r(qgt,"camembert"),qgt.forEach(t),Alr=r(i8e," \u2014 "),YG=n(i8e,"A",{href:!0});var Ggt=s(YG);Llr=r(Ggt,"TFCamembertForMaskedLM"),Ggt.forEach(t),Blr=r(i8e," (CamemBERT model)"),i8e.forEach(t),xlr=i(ee),WT=n(ee,"LI",{});var d8e=s(WT);xpe=n(d8e,"STRONG",{});var Ogt=s(xpe);klr=r(Ogt,"convbert"),Ogt.forEach(t),Rlr=r(d8e," \u2014 "),KG=n(d8e,"A",{href:!0});var Xgt=s(KG);Slr=r(Xgt,"TFConvBertForMaskedLM"),Xgt.forEach(t),Plr=r(d8e," (ConvBERT model)"),d8e.forEach(t),$lr=i(ee),QT=n(ee,"LI",{});var c8e=s(QT);kpe=n(c8e,"STRONG",{});var Vgt=s(kpe);Ilr=r(Vgt,"deberta"),Vgt.forEach(t),Nlr=r(c8e," \u2014 "),ZG=n(c8e,"A",{href:!0});var zgt=s(ZG);Dlr=r(zgt,"TFDebertaForMaskedLM"),zgt.forEach(t),jlr=r(c8e," (DeBERTa model)"),c8e.forEach(t),qlr=i(ee),HT=n(ee,"LI",{});var f8e=s(HT);Rpe=n(f8e,"STRONG",{});var Wgt=s(Rpe);Glr=r(Wgt,"deberta-v2"),Wgt.forEach(t),Olr=r(f8e," \u2014 "),eO=n(f8e,"A",{href:!0});var Qgt=s(eO);Xlr=r(Qgt,"TFDebertaV2ForMaskedLM"),Qgt.forEach(t),Vlr=r(f8e," (DeBERTa-v2 model)"),f8e.forEach(t),zlr=i(ee),UT=n(ee,"LI",{});var m8e=s(UT);Spe=n(m8e,"STRONG",{});var Hgt=s(Spe);Wlr=r(Hgt,"distilbert"),Hgt.forEach(t),Qlr=r(m8e," \u2014 "),oO=n(m8e,"A",{href:!0});var Ugt=s(oO);Hlr=r(Ugt,"TFDistilBertForMaskedLM"),Ugt.forEach(t),Ulr=r(m8e," (DistilBERT model)"),m8e.forEach(t),Jlr=i(ee),JT=n(ee,"LI",{});var g8e=s(JT);Ppe=n(g8e,"STRONG",{});var Jgt=s(Ppe);Ylr=r(Jgt,"electra"),Jgt.forEach(t),Klr=r(g8e," \u2014 "),rO=n(g8e,"A",{href:!0});var Ygt=s(rO);Zlr=r(Ygt,"TFElectraForMaskedLM"),Ygt.forEach(t),eir=r(g8e," (ELECTRA model)"),g8e.forEach(t),oir=i(ee),YT=n(ee,"LI",{});var h8e=s(YT);$pe=n(h8e,"STRONG",{});var Kgt=s($pe);rir=r(Kgt,"flaubert"),Kgt.forEach(t),tir=r(h8e," \u2014 "),tO=n(h8e,"A",{href:!0});var Zgt=s(tO);air=r(Zgt,"TFFlaubertWithLMHeadModel"),Zgt.forEach(t),nir=r(h8e," (FlauBERT model)"),h8e.forEach(t),sir=i(ee),KT=n(ee,"LI",{});var p8e=s(KT);Ipe=n(p8e,"STRONG",{});var eht=s(Ipe);lir=r(eht,"funnel"),eht.forEach(t),iir=r(p8e," \u2014 "),aO=n(p8e,"A",{href:!0});var oht=s(aO);dir=r(oht,"TFFunnelForMaskedLM"),oht.forEach(t),cir=r(p8e," (Funnel Transformer model)"),p8e.forEach(t),fir=i(ee),ZT=n(ee,"LI",{});var _8e=s(ZT);Npe=n(_8e,"STRONG",{});var rht=s(Npe);mir=r(rht,"layoutlm"),rht.forEach(t),gir=r(_8e," \u2014 "),nO=n(_8e,"A",{href:!0});var tht=s(nO);hir=r(tht,"TFLayoutLMForMaskedLM"),tht.forEach(t),pir=r(_8e," (LayoutLM model)"),_8e.forEach(t),_ir=i(ee),eF=n(ee,"LI",{});var u8e=s(eF);Dpe=n(u8e,"STRONG",{});var aht=s(Dpe);uir=r(aht,"longformer"),aht.forEach(t),bir=r(u8e," \u2014 "),sO=n(u8e,"A",{href:!0});var nht=s(sO);vir=r(nht,"TFLongformerForMaskedLM"),nht.forEach(t),Tir=r(u8e," (Longformer model)"),u8e.forEach(t),Fir=i(ee),oF=n(ee,"LI",{});var b8e=s(oF);jpe=n(b8e,"STRONG",{});var sht=s(jpe);Cir=r(sht,"mobilebert"),sht.forEach(t),Mir=r(b8e," \u2014 "),lO=n(b8e,"A",{href:!0});var lht=s(lO);Eir=r(lht,"TFMobileBertForMaskedLM"),lht.forEach(t),yir=r(b8e," (MobileBERT model)"),b8e.forEach(t),wir=i(ee),rF=n(ee,"LI",{});var v8e=s(rF);qpe=n(v8e,"STRONG",{});var iht=s(qpe);Air=r(iht,"mpnet"),iht.forEach(t),Lir=r(v8e," \u2014 "),iO=n(v8e,"A",{href:!0});var dht=s(iO);Bir=r(dht,"TFMPNetForMaskedLM"),dht.forEach(t),xir=r(v8e," (MPNet model)"),v8e.forEach(t),kir=i(ee),tF=n(ee,"LI",{});var T8e=s(tF);Gpe=n(T8e,"STRONG",{});var cht=s(Gpe);Rir=r(cht,"rembert"),cht.forEach(t),Sir=r(T8e," \u2014 "),dO=n(T8e,"A",{href:!0});var fht=s(dO);Pir=r(fht,"TFRemBertForMaskedLM"),fht.forEach(t),$ir=r(T8e," (RemBERT model)"),T8e.forEach(t),Iir=i(ee),aF=n(ee,"LI",{});var F8e=s(aF);Ope=n(F8e,"STRONG",{});var mht=s(Ope);Nir=r(mht,"roberta"),mht.forEach(t),Dir=r(F8e," \u2014 "),cO=n(F8e,"A",{href:!0});var ght=s(cO);jir=r(ght,"TFRobertaForMaskedLM"),ght.forEach(t),qir=r(F8e," (RoBERTa model)"),F8e.forEach(t),Gir=i(ee),nF=n(ee,"LI",{});var C8e=s(nF);Xpe=n(C8e,"STRONG",{});var hht=s(Xpe);Oir=r(hht,"roformer"),hht.forEach(t),Xir=r(C8e," \u2014 "),fO=n(C8e,"A",{href:!0});var pht=s(fO);Vir=r(pht,"TFRoFormerForMaskedLM"),pht.forEach(t),zir=r(C8e," (RoFormer model)"),C8e.forEach(t),Wir=i(ee),sF=n(ee,"LI",{});var M8e=s(sF);Vpe=n(M8e,"STRONG",{});var _ht=s(Vpe);Qir=r(_ht,"tapas"),_ht.forEach(t),Hir=r(M8e," \u2014 "),mO=n(M8e,"A",{href:!0});var uht=s(mO);Uir=r(uht,"TFTapasForMaskedLM"),uht.forEach(t),Jir=r(M8e," (TAPAS model)"),M8e.forEach(t),Yir=i(ee),lF=n(ee,"LI",{});var E8e=s(lF);zpe=n(E8e,"STRONG",{});var bht=s(zpe);Kir=r(bht,"xlm"),bht.forEach(t),Zir=r(E8e," \u2014 "),gO=n(E8e,"A",{href:!0});var vht=s(gO);edr=r(vht,"TFXLMWithLMHeadModel"),vht.forEach(t),odr=r(E8e," (XLM model)"),E8e.forEach(t),rdr=i(ee),iF=n(ee,"LI",{});var y8e=s(iF);Wpe=n(y8e,"STRONG",{});var Tht=s(Wpe);tdr=r(Tht,"xlm-roberta"),Tht.forEach(t),adr=r(y8e," \u2014 "),hO=n(y8e,"A",{href:!0});var Fht=s(hO);ndr=r(Fht,"TFXLMRobertaForMaskedLM"),Fht.forEach(t),sdr=r(y8e," (XLM-RoBERTa model)"),y8e.forEach(t),ee.forEach(t),ldr=i(va),Qpe=n(va,"P",{});var Cht=s(Qpe);idr=r(Cht,"Examples:"),Cht.forEach(t),ddr=i(va),m(CA.$$.fragment,va),va.forEach(t),Ql.forEach(t),TRe=i(c),Bc=n(c,"H2",{class:!0});var kPe=s(Bc);dF=n(kPe,"A",{id:!0,class:!0,href:!0});var Mht=s(dF);Hpe=n(Mht,"SPAN",{});var Eht=s(Hpe);m(MA.$$.fragment,Eht),Eht.forEach(t),Mht.forEach(t),cdr=i(kPe),Upe=n(kPe,"SPAN",{});var yht=s(Upe);fdr=r(yht,"TFAutoModelForSeq2SeqLM"),yht.forEach(t),kPe.forEach(t),FRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(EA.$$.fragment,Ul),mdr=i(Ul),xc=n(Ul,"P",{});var oQ=s(xc);gdr=r(oQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Jpe=n(oQ,"CODE",{});var wht=s(Jpe);hdr=r(wht,"from_pretrained()"),wht.forEach(t),pdr=r(oQ,"class method or the "),Ype=n(oQ,"CODE",{});var Aht=s(Ype);_dr=r(Aht,"from_config()"),Aht.forEach(t),udr=r(oQ,`class
method.`),oQ.forEach(t),bdr=i(Ul),yA=n(Ul,"P",{});var RPe=s(yA);vdr=r(RPe,"This class cannot be instantiated directly using "),Kpe=n(RPe,"CODE",{});var Lht=s(Kpe);Tdr=r(Lht,"__init__()"),Lht.forEach(t),Fdr=r(RPe," (throws an error)."),RPe.forEach(t),Cdr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(wA.$$.fragment,Jl),Mdr=i(Jl),Zpe=n(Jl,"P",{});var Bht=s(Zpe);Edr=r(Bht,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bht.forEach(t),ydr=i(Jl),kc=n(Jl,"P",{});var rQ=s(kc);wdr=r(rQ,`Note:
Loading a model from its configuration file does `),e_e=n(rQ,"STRONG",{});var xht=s(e_e);Adr=r(xht,"not"),xht.forEach(t),Ldr=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),o_e=n(rQ,"CODE",{});var kht=s(o_e);Bdr=r(kht,"from_pretrained()"),kht.forEach(t),xdr=r(rQ,"to load the model weights."),rQ.forEach(t),kdr=i(Jl),r_e=n(Jl,"P",{});var Rht=s(r_e);Rdr=r(Rht,"Examples:"),Rht.forEach(t),Sdr=i(Jl),m(AA.$$.fragment,Jl),Jl.forEach(t),Pdr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(LA.$$.fragment,Ta),$dr=i(Ta),t_e=n(Ta,"P",{});var Sht=s(t_e);Idr=r(Sht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Sht.forEach(t),Ndr=i(Ta),Fn=n(Ta,"P",{});var GE=s(Fn);Ddr=r(GE,"The model class to instantiate is selected based on the "),a_e=n(GE,"CODE",{});var Pht=s(a_e);jdr=r(Pht,"model_type"),Pht.forEach(t),qdr=r(GE,` property of the config object (either
passed as an argument or loaded from `),n_e=n(GE,"CODE",{});var $ht=s(n_e);Gdr=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),Odr=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(GE,"CODE",{});var Iht=s(s_e);Xdr=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),Vdr=r(GE,":"),GE.forEach(t),zdr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);cF=n(ye,"LI",{});var w8e=s(cF);l_e=n(w8e,"STRONG",{});var Nht=s(l_e);Wdr=r(Nht,"bart"),Nht.forEach(t),Qdr=r(w8e," \u2014 "),pO=n(w8e,"A",{href:!0});var Dht=s(pO);Hdr=r(Dht,"TFBartForConditionalGeneration"),Dht.forEach(t),Udr=r(w8e," (BART model)"),w8e.forEach(t),Jdr=i(ye),fF=n(ye,"LI",{});var A8e=s(fF);i_e=n(A8e,"STRONG",{});var jht=s(i_e);Ydr=r(jht,"blenderbot"),jht.forEach(t),Kdr=r(A8e," \u2014 "),_O=n(A8e,"A",{href:!0});var qht=s(_O);Zdr=r(qht,"TFBlenderbotForConditionalGeneration"),qht.forEach(t),ecr=r(A8e," (Blenderbot model)"),A8e.forEach(t),ocr=i(ye),mF=n(ye,"LI",{});var L8e=s(mF);d_e=n(L8e,"STRONG",{});var Ght=s(d_e);rcr=r(Ght,"blenderbot-small"),Ght.forEach(t),tcr=r(L8e," \u2014 "),uO=n(L8e,"A",{href:!0});var Oht=s(uO);acr=r(Oht,"TFBlenderbotSmallForConditionalGeneration"),Oht.forEach(t),ncr=r(L8e," (BlenderbotSmall model)"),L8e.forEach(t),scr=i(ye),gF=n(ye,"LI",{});var B8e=s(gF);c_e=n(B8e,"STRONG",{});var Xht=s(c_e);lcr=r(Xht,"encoder-decoder"),Xht.forEach(t),icr=r(B8e," \u2014 "),bO=n(B8e,"A",{href:!0});var Vht=s(bO);dcr=r(Vht,"TFEncoderDecoderModel"),Vht.forEach(t),ccr=r(B8e," (Encoder decoder model)"),B8e.forEach(t),fcr=i(ye),hF=n(ye,"LI",{});var x8e=s(hF);f_e=n(x8e,"STRONG",{});var zht=s(f_e);mcr=r(zht,"led"),zht.forEach(t),gcr=r(x8e," \u2014 "),vO=n(x8e,"A",{href:!0});var Wht=s(vO);hcr=r(Wht,"TFLEDForConditionalGeneration"),Wht.forEach(t),pcr=r(x8e," (LED model)"),x8e.forEach(t),_cr=i(ye),pF=n(ye,"LI",{});var k8e=s(pF);m_e=n(k8e,"STRONG",{});var Qht=s(m_e);ucr=r(Qht,"marian"),Qht.forEach(t),bcr=r(k8e," \u2014 "),TO=n(k8e,"A",{href:!0});var Hht=s(TO);vcr=r(Hht,"TFMarianMTModel"),Hht.forEach(t),Tcr=r(k8e," (Marian model)"),k8e.forEach(t),Fcr=i(ye),_F=n(ye,"LI",{});var R8e=s(_F);g_e=n(R8e,"STRONG",{});var Uht=s(g_e);Ccr=r(Uht,"mbart"),Uht.forEach(t),Mcr=r(R8e," \u2014 "),FO=n(R8e,"A",{href:!0});var Jht=s(FO);Ecr=r(Jht,"TFMBartForConditionalGeneration"),Jht.forEach(t),ycr=r(R8e," (mBART model)"),R8e.forEach(t),wcr=i(ye),uF=n(ye,"LI",{});var S8e=s(uF);h_e=n(S8e,"STRONG",{});var Yht=s(h_e);Acr=r(Yht,"mt5"),Yht.forEach(t),Lcr=r(S8e," \u2014 "),CO=n(S8e,"A",{href:!0});var Kht=s(CO);Bcr=r(Kht,"TFMT5ForConditionalGeneration"),Kht.forEach(t),xcr=r(S8e," (mT5 model)"),S8e.forEach(t),kcr=i(ye),bF=n(ye,"LI",{});var P8e=s(bF);p_e=n(P8e,"STRONG",{});var Zht=s(p_e);Rcr=r(Zht,"pegasus"),Zht.forEach(t),Scr=r(P8e," \u2014 "),MO=n(P8e,"A",{href:!0});var ept=s(MO);Pcr=r(ept,"TFPegasusForConditionalGeneration"),ept.forEach(t),$cr=r(P8e," (Pegasus model)"),P8e.forEach(t),Icr=i(ye),vF=n(ye,"LI",{});var $8e=s(vF);__e=n($8e,"STRONG",{});var opt=s(__e);Ncr=r(opt,"t5"),opt.forEach(t),Dcr=r($8e," \u2014 "),EO=n($8e,"A",{href:!0});var rpt=s(EO);jcr=r(rpt,"TFT5ForConditionalGeneration"),rpt.forEach(t),qcr=r($8e," (T5 model)"),$8e.forEach(t),ye.forEach(t),Gcr=i(Ta),u_e=n(Ta,"P",{});var tpt=s(u_e);Ocr=r(tpt,"Examples:"),tpt.forEach(t),Xcr=i(Ta),m(BA.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),CRe=i(c),Rc=n(c,"H2",{class:!0});var SPe=s(Rc);TF=n(SPe,"A",{id:!0,class:!0,href:!0});var apt=s(TF);b_e=n(apt,"SPAN",{});var npt=s(b_e);m(xA.$$.fragment,npt),npt.forEach(t),apt.forEach(t),Vcr=i(SPe),v_e=n(SPe,"SPAN",{});var spt=s(v_e);zcr=r(spt,"TFAutoModelForSequenceClassification"),spt.forEach(t),SPe.forEach(t),MRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(kA.$$.fragment,Yl),Wcr=i(Yl),Sc=n(Yl,"P",{});var tQ=s(Sc);Qcr=r(tQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T_e=n(tQ,"CODE",{});var lpt=s(T_e);Hcr=r(lpt,"from_pretrained()"),lpt.forEach(t),Ucr=r(tQ,"class method or the "),F_e=n(tQ,"CODE",{});var ipt=s(F_e);Jcr=r(ipt,"from_config()"),ipt.forEach(t),Ycr=r(tQ,`class
method.`),tQ.forEach(t),Kcr=i(Yl),RA=n(Yl,"P",{});var PPe=s(RA);Zcr=r(PPe,"This class cannot be instantiated directly using "),C_e=n(PPe,"CODE",{});var dpt=s(C_e);efr=r(dpt,"__init__()"),dpt.forEach(t),ofr=r(PPe," (throws an error)."),PPe.forEach(t),rfr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(SA.$$.fragment,Kl),tfr=i(Kl),M_e=n(Kl,"P",{});var cpt=s(M_e);afr=r(cpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cpt.forEach(t),nfr=i(Kl),Pc=n(Kl,"P",{});var aQ=s(Pc);sfr=r(aQ,`Note:
Loading a model from its configuration file does `),E_e=n(aQ,"STRONG",{});var fpt=s(E_e);lfr=r(fpt,"not"),fpt.forEach(t),ifr=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),y_e=n(aQ,"CODE",{});var mpt=s(y_e);dfr=r(mpt,"from_pretrained()"),mpt.forEach(t),cfr=r(aQ,"to load the model weights."),aQ.forEach(t),ffr=i(Kl),w_e=n(Kl,"P",{});var gpt=s(w_e);mfr=r(gpt,"Examples:"),gpt.forEach(t),gfr=i(Kl),m(PA.$$.fragment,Kl),Kl.forEach(t),hfr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m($A.$$.fragment,Fa),pfr=i(Fa),A_e=n(Fa,"P",{});var hpt=s(A_e);_fr=r(hpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hpt.forEach(t),ufr=i(Fa),Cn=n(Fa,"P",{});var OE=s(Cn);bfr=r(OE,"The model class to instantiate is selected based on the "),L_e=n(OE,"CODE",{});var ppt=s(L_e);vfr=r(ppt,"model_type"),ppt.forEach(t),Tfr=r(OE,` property of the config object (either
passed as an argument or loaded from `),B_e=n(OE,"CODE",{});var _pt=s(B_e);Ffr=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),Cfr=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(OE,"CODE",{});var upt=s(x_e);Mfr=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),Efr=r(OE,":"),OE.forEach(t),yfr=i(Fa),V=n(Fa,"UL",{});var W=s(V);FF=n(W,"LI",{});var I8e=s(FF);k_e=n(I8e,"STRONG",{});var bpt=s(k_e);wfr=r(bpt,"albert"),bpt.forEach(t),Afr=r(I8e," \u2014 "),yO=n(I8e,"A",{href:!0});var vpt=s(yO);Lfr=r(vpt,"TFAlbertForSequenceClassification"),vpt.forEach(t),Bfr=r(I8e," (ALBERT model)"),I8e.forEach(t),xfr=i(W),CF=n(W,"LI",{});var N8e=s(CF);R_e=n(N8e,"STRONG",{});var Tpt=s(R_e);kfr=r(Tpt,"bert"),Tpt.forEach(t),Rfr=r(N8e," \u2014 "),wO=n(N8e,"A",{href:!0});var Fpt=s(wO);Sfr=r(Fpt,"TFBertForSequenceClassification"),Fpt.forEach(t),Pfr=r(N8e," (BERT model)"),N8e.forEach(t),$fr=i(W),MF=n(W,"LI",{});var D8e=s(MF);S_e=n(D8e,"STRONG",{});var Cpt=s(S_e);Ifr=r(Cpt,"camembert"),Cpt.forEach(t),Nfr=r(D8e," \u2014 "),AO=n(D8e,"A",{href:!0});var Mpt=s(AO);Dfr=r(Mpt,"TFCamembertForSequenceClassification"),Mpt.forEach(t),jfr=r(D8e," (CamemBERT model)"),D8e.forEach(t),qfr=i(W),EF=n(W,"LI",{});var j8e=s(EF);P_e=n(j8e,"STRONG",{});var Ept=s(P_e);Gfr=r(Ept,"convbert"),Ept.forEach(t),Ofr=r(j8e," \u2014 "),LO=n(j8e,"A",{href:!0});var ypt=s(LO);Xfr=r(ypt,"TFConvBertForSequenceClassification"),ypt.forEach(t),Vfr=r(j8e," (ConvBERT model)"),j8e.forEach(t),zfr=i(W),yF=n(W,"LI",{});var q8e=s(yF);$_e=n(q8e,"STRONG",{});var wpt=s($_e);Wfr=r(wpt,"ctrl"),wpt.forEach(t),Qfr=r(q8e," \u2014 "),BO=n(q8e,"A",{href:!0});var Apt=s(BO);Hfr=r(Apt,"TFCTRLForSequenceClassification"),Apt.forEach(t),Ufr=r(q8e," (CTRL model)"),q8e.forEach(t),Jfr=i(W),wF=n(W,"LI",{});var G8e=s(wF);I_e=n(G8e,"STRONG",{});var Lpt=s(I_e);Yfr=r(Lpt,"deberta"),Lpt.forEach(t),Kfr=r(G8e," \u2014 "),xO=n(G8e,"A",{href:!0});var Bpt=s(xO);Zfr=r(Bpt,"TFDebertaForSequenceClassification"),Bpt.forEach(t),emr=r(G8e," (DeBERTa model)"),G8e.forEach(t),omr=i(W),AF=n(W,"LI",{});var O8e=s(AF);N_e=n(O8e,"STRONG",{});var xpt=s(N_e);rmr=r(xpt,"deberta-v2"),xpt.forEach(t),tmr=r(O8e," \u2014 "),kO=n(O8e,"A",{href:!0});var kpt=s(kO);amr=r(kpt,"TFDebertaV2ForSequenceClassification"),kpt.forEach(t),nmr=r(O8e," (DeBERTa-v2 model)"),O8e.forEach(t),smr=i(W),LF=n(W,"LI",{});var X8e=s(LF);D_e=n(X8e,"STRONG",{});var Rpt=s(D_e);lmr=r(Rpt,"distilbert"),Rpt.forEach(t),imr=r(X8e," \u2014 "),RO=n(X8e,"A",{href:!0});var Spt=s(RO);dmr=r(Spt,"TFDistilBertForSequenceClassification"),Spt.forEach(t),cmr=r(X8e," (DistilBERT model)"),X8e.forEach(t),fmr=i(W),BF=n(W,"LI",{});var V8e=s(BF);j_e=n(V8e,"STRONG",{});var Ppt=s(j_e);mmr=r(Ppt,"electra"),Ppt.forEach(t),gmr=r(V8e," \u2014 "),SO=n(V8e,"A",{href:!0});var $pt=s(SO);hmr=r($pt,"TFElectraForSequenceClassification"),$pt.forEach(t),pmr=r(V8e," (ELECTRA model)"),V8e.forEach(t),_mr=i(W),xF=n(W,"LI",{});var z8e=s(xF);q_e=n(z8e,"STRONG",{});var Ipt=s(q_e);umr=r(Ipt,"flaubert"),Ipt.forEach(t),bmr=r(z8e," \u2014 "),PO=n(z8e,"A",{href:!0});var Npt=s(PO);vmr=r(Npt,"TFFlaubertForSequenceClassification"),Npt.forEach(t),Tmr=r(z8e," (FlauBERT model)"),z8e.forEach(t),Fmr=i(W),kF=n(W,"LI",{});var W8e=s(kF);G_e=n(W8e,"STRONG",{});var Dpt=s(G_e);Cmr=r(Dpt,"funnel"),Dpt.forEach(t),Mmr=r(W8e," \u2014 "),$O=n(W8e,"A",{href:!0});var jpt=s($O);Emr=r(jpt,"TFFunnelForSequenceClassification"),jpt.forEach(t),ymr=r(W8e," (Funnel Transformer model)"),W8e.forEach(t),wmr=i(W),RF=n(W,"LI",{});var Q8e=s(RF);O_e=n(Q8e,"STRONG",{});var qpt=s(O_e);Amr=r(qpt,"gpt2"),qpt.forEach(t),Lmr=r(Q8e," \u2014 "),IO=n(Q8e,"A",{href:!0});var Gpt=s(IO);Bmr=r(Gpt,"TFGPT2ForSequenceClassification"),Gpt.forEach(t),xmr=r(Q8e," (OpenAI GPT-2 model)"),Q8e.forEach(t),kmr=i(W),SF=n(W,"LI",{});var H8e=s(SF);X_e=n(H8e,"STRONG",{});var Opt=s(X_e);Rmr=r(Opt,"layoutlm"),Opt.forEach(t),Smr=r(H8e," \u2014 "),NO=n(H8e,"A",{href:!0});var Xpt=s(NO);Pmr=r(Xpt,"TFLayoutLMForSequenceClassification"),Xpt.forEach(t),$mr=r(H8e," (LayoutLM model)"),H8e.forEach(t),Imr=i(W),PF=n(W,"LI",{});var U8e=s(PF);V_e=n(U8e,"STRONG",{});var Vpt=s(V_e);Nmr=r(Vpt,"longformer"),Vpt.forEach(t),Dmr=r(U8e," \u2014 "),DO=n(U8e,"A",{href:!0});var zpt=s(DO);jmr=r(zpt,"TFLongformerForSequenceClassification"),zpt.forEach(t),qmr=r(U8e," (Longformer model)"),U8e.forEach(t),Gmr=i(W),$F=n(W,"LI",{});var J8e=s($F);z_e=n(J8e,"STRONG",{});var Wpt=s(z_e);Omr=r(Wpt,"mobilebert"),Wpt.forEach(t),Xmr=r(J8e," \u2014 "),jO=n(J8e,"A",{href:!0});var Qpt=s(jO);Vmr=r(Qpt,"TFMobileBertForSequenceClassification"),Qpt.forEach(t),zmr=r(J8e," (MobileBERT model)"),J8e.forEach(t),Wmr=i(W),IF=n(W,"LI",{});var Y8e=s(IF);W_e=n(Y8e,"STRONG",{});var Hpt=s(W_e);Qmr=r(Hpt,"mpnet"),Hpt.forEach(t),Hmr=r(Y8e," \u2014 "),qO=n(Y8e,"A",{href:!0});var Upt=s(qO);Umr=r(Upt,"TFMPNetForSequenceClassification"),Upt.forEach(t),Jmr=r(Y8e," (MPNet model)"),Y8e.forEach(t),Ymr=i(W),NF=n(W,"LI",{});var K8e=s(NF);Q_e=n(K8e,"STRONG",{});var Jpt=s(Q_e);Kmr=r(Jpt,"openai-gpt"),Jpt.forEach(t),Zmr=r(K8e," \u2014 "),GO=n(K8e,"A",{href:!0});var Ypt=s(GO);egr=r(Ypt,"TFOpenAIGPTForSequenceClassification"),Ypt.forEach(t),ogr=r(K8e," (OpenAI GPT model)"),K8e.forEach(t),rgr=i(W),DF=n(W,"LI",{});var Z8e=s(DF);H_e=n(Z8e,"STRONG",{});var Kpt=s(H_e);tgr=r(Kpt,"rembert"),Kpt.forEach(t),agr=r(Z8e," \u2014 "),OO=n(Z8e,"A",{href:!0});var Zpt=s(OO);ngr=r(Zpt,"TFRemBertForSequenceClassification"),Zpt.forEach(t),sgr=r(Z8e," (RemBERT model)"),Z8e.forEach(t),lgr=i(W),jF=n(W,"LI",{});var e7e=s(jF);U_e=n(e7e,"STRONG",{});var e_t=s(U_e);igr=r(e_t,"roberta"),e_t.forEach(t),dgr=r(e7e," \u2014 "),XO=n(e7e,"A",{href:!0});var o_t=s(XO);cgr=r(o_t,"TFRobertaForSequenceClassification"),o_t.forEach(t),fgr=r(e7e," (RoBERTa model)"),e7e.forEach(t),mgr=i(W),qF=n(W,"LI",{});var o7e=s(qF);J_e=n(o7e,"STRONG",{});var r_t=s(J_e);ggr=r(r_t,"roformer"),r_t.forEach(t),hgr=r(o7e," \u2014 "),VO=n(o7e,"A",{href:!0});var t_t=s(VO);pgr=r(t_t,"TFRoFormerForSequenceClassification"),t_t.forEach(t),_gr=r(o7e," (RoFormer model)"),o7e.forEach(t),ugr=i(W),GF=n(W,"LI",{});var r7e=s(GF);Y_e=n(r7e,"STRONG",{});var a_t=s(Y_e);bgr=r(a_t,"tapas"),a_t.forEach(t),vgr=r(r7e," \u2014 "),zO=n(r7e,"A",{href:!0});var n_t=s(zO);Tgr=r(n_t,"TFTapasForSequenceClassification"),n_t.forEach(t),Fgr=r(r7e," (TAPAS model)"),r7e.forEach(t),Cgr=i(W),OF=n(W,"LI",{});var t7e=s(OF);K_e=n(t7e,"STRONG",{});var s_t=s(K_e);Mgr=r(s_t,"transfo-xl"),s_t.forEach(t),Egr=r(t7e," \u2014 "),WO=n(t7e,"A",{href:!0});var l_t=s(WO);ygr=r(l_t,"TFTransfoXLForSequenceClassification"),l_t.forEach(t),wgr=r(t7e," (Transformer-XL model)"),t7e.forEach(t),Agr=i(W),XF=n(W,"LI",{});var a7e=s(XF);Z_e=n(a7e,"STRONG",{});var i_t=s(Z_e);Lgr=r(i_t,"xlm"),i_t.forEach(t),Bgr=r(a7e," \u2014 "),QO=n(a7e,"A",{href:!0});var d_t=s(QO);xgr=r(d_t,"TFXLMForSequenceClassification"),d_t.forEach(t),kgr=r(a7e," (XLM model)"),a7e.forEach(t),Rgr=i(W),VF=n(W,"LI",{});var n7e=s(VF);eue=n(n7e,"STRONG",{});var c_t=s(eue);Sgr=r(c_t,"xlm-roberta"),c_t.forEach(t),Pgr=r(n7e," \u2014 "),HO=n(n7e,"A",{href:!0});var f_t=s(HO);$gr=r(f_t,"TFXLMRobertaForSequenceClassification"),f_t.forEach(t),Igr=r(n7e," (XLM-RoBERTa model)"),n7e.forEach(t),Ngr=i(W),zF=n(W,"LI",{});var s7e=s(zF);oue=n(s7e,"STRONG",{});var m_t=s(oue);Dgr=r(m_t,"xlnet"),m_t.forEach(t),jgr=r(s7e," \u2014 "),UO=n(s7e,"A",{href:!0});var g_t=s(UO);qgr=r(g_t,"TFXLNetForSequenceClassification"),g_t.forEach(t),Ggr=r(s7e," (XLNet model)"),s7e.forEach(t),W.forEach(t),Ogr=i(Fa),rue=n(Fa,"P",{});var h_t=s(rue);Xgr=r(h_t,"Examples:"),h_t.forEach(t),Vgr=i(Fa),m(IA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),ERe=i(c),$c=n(c,"H2",{class:!0});var $Pe=s($c);WF=n($Pe,"A",{id:!0,class:!0,href:!0});var p_t=s(WF);tue=n(p_t,"SPAN",{});var __t=s(tue);m(NA.$$.fragment,__t),__t.forEach(t),p_t.forEach(t),zgr=i($Pe),aue=n($Pe,"SPAN",{});var u_t=s(aue);Wgr=r(u_t,"TFAutoModelForMultipleChoice"),u_t.forEach(t),$Pe.forEach(t),yRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(DA.$$.fragment,Zl),Qgr=i(Zl),Ic=n(Zl,"P",{});var nQ=s(Ic);Hgr=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nue=n(nQ,"CODE",{});var b_t=s(nue);Ugr=r(b_t,"from_pretrained()"),b_t.forEach(t),Jgr=r(nQ,"class method or the "),sue=n(nQ,"CODE",{});var v_t=s(sue);Ygr=r(v_t,"from_config()"),v_t.forEach(t),Kgr=r(nQ,`class
method.`),nQ.forEach(t),Zgr=i(Zl),jA=n(Zl,"P",{});var IPe=s(jA);ehr=r(IPe,"This class cannot be instantiated directly using "),lue=n(IPe,"CODE",{});var T_t=s(lue);ohr=r(T_t,"__init__()"),T_t.forEach(t),rhr=r(IPe," (throws an error)."),IPe.forEach(t),thr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(qA.$$.fragment,ei),ahr=i(ei),iue=n(ei,"P",{});var F_t=s(iue);nhr=r(F_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F_t.forEach(t),shr=i(ei),Nc=n(ei,"P",{});var sQ=s(Nc);lhr=r(sQ,`Note:
Loading a model from its configuration file does `),due=n(sQ,"STRONG",{});var C_t=s(due);ihr=r(C_t,"not"),C_t.forEach(t),dhr=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=n(sQ,"CODE",{});var M_t=s(cue);chr=r(M_t,"from_pretrained()"),M_t.forEach(t),fhr=r(sQ,"to load the model weights."),sQ.forEach(t),mhr=i(ei),fue=n(ei,"P",{});var E_t=s(fue);ghr=r(E_t,"Examples:"),E_t.forEach(t),hhr=i(ei),m(GA.$$.fragment,ei),ei.forEach(t),phr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(OA.$$.fragment,Ca),_hr=i(Ca),mue=n(Ca,"P",{});var y_t=s(mue);uhr=r(y_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y_t.forEach(t),bhr=i(Ca),Mn=n(Ca,"P",{});var XE=s(Mn);vhr=r(XE,"The model class to instantiate is selected based on the "),gue=n(XE,"CODE",{});var w_t=s(gue);Thr=r(w_t,"model_type"),w_t.forEach(t),Fhr=r(XE,` property of the config object (either
passed as an argument or loaded from `),hue=n(XE,"CODE",{});var A_t=s(hue);Chr=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),Mhr=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(XE,"CODE",{});var L_t=s(pue);Ehr=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),yhr=r(XE,":"),XE.forEach(t),whr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);QF=n(le,"LI",{});var l7e=s(QF);_ue=n(l7e,"STRONG",{});var B_t=s(_ue);Ahr=r(B_t,"albert"),B_t.forEach(t),Lhr=r(l7e," \u2014 "),JO=n(l7e,"A",{href:!0});var x_t=s(JO);Bhr=r(x_t,"TFAlbertForMultipleChoice"),x_t.forEach(t),xhr=r(l7e," (ALBERT model)"),l7e.forEach(t),khr=i(le),HF=n(le,"LI",{});var i7e=s(HF);uue=n(i7e,"STRONG",{});var k_t=s(uue);Rhr=r(k_t,"bert"),k_t.forEach(t),Shr=r(i7e," \u2014 "),YO=n(i7e,"A",{href:!0});var R_t=s(YO);Phr=r(R_t,"TFBertForMultipleChoice"),R_t.forEach(t),$hr=r(i7e," (BERT model)"),i7e.forEach(t),Ihr=i(le),UF=n(le,"LI",{});var d7e=s(UF);bue=n(d7e,"STRONG",{});var S_t=s(bue);Nhr=r(S_t,"camembert"),S_t.forEach(t),Dhr=r(d7e," \u2014 "),KO=n(d7e,"A",{href:!0});var P_t=s(KO);jhr=r(P_t,"TFCamembertForMultipleChoice"),P_t.forEach(t),qhr=r(d7e," (CamemBERT model)"),d7e.forEach(t),Ghr=i(le),JF=n(le,"LI",{});var c7e=s(JF);vue=n(c7e,"STRONG",{});var $_t=s(vue);Ohr=r($_t,"convbert"),$_t.forEach(t),Xhr=r(c7e," \u2014 "),ZO=n(c7e,"A",{href:!0});var I_t=s(ZO);Vhr=r(I_t,"TFConvBertForMultipleChoice"),I_t.forEach(t),zhr=r(c7e," (ConvBERT model)"),c7e.forEach(t),Whr=i(le),YF=n(le,"LI",{});var f7e=s(YF);Tue=n(f7e,"STRONG",{});var N_t=s(Tue);Qhr=r(N_t,"distilbert"),N_t.forEach(t),Hhr=r(f7e," \u2014 "),eX=n(f7e,"A",{href:!0});var D_t=s(eX);Uhr=r(D_t,"TFDistilBertForMultipleChoice"),D_t.forEach(t),Jhr=r(f7e," (DistilBERT model)"),f7e.forEach(t),Yhr=i(le),KF=n(le,"LI",{});var m7e=s(KF);Fue=n(m7e,"STRONG",{});var j_t=s(Fue);Khr=r(j_t,"electra"),j_t.forEach(t),Zhr=r(m7e," \u2014 "),oX=n(m7e,"A",{href:!0});var q_t=s(oX);epr=r(q_t,"TFElectraForMultipleChoice"),q_t.forEach(t),opr=r(m7e," (ELECTRA model)"),m7e.forEach(t),rpr=i(le),ZF=n(le,"LI",{});var g7e=s(ZF);Cue=n(g7e,"STRONG",{});var G_t=s(Cue);tpr=r(G_t,"flaubert"),G_t.forEach(t),apr=r(g7e," \u2014 "),rX=n(g7e,"A",{href:!0});var O_t=s(rX);npr=r(O_t,"TFFlaubertForMultipleChoice"),O_t.forEach(t),spr=r(g7e," (FlauBERT model)"),g7e.forEach(t),lpr=i(le),eC=n(le,"LI",{});var h7e=s(eC);Mue=n(h7e,"STRONG",{});var X_t=s(Mue);ipr=r(X_t,"funnel"),X_t.forEach(t),dpr=r(h7e," \u2014 "),tX=n(h7e,"A",{href:!0});var V_t=s(tX);cpr=r(V_t,"TFFunnelForMultipleChoice"),V_t.forEach(t),fpr=r(h7e," (Funnel Transformer model)"),h7e.forEach(t),mpr=i(le),oC=n(le,"LI",{});var p7e=s(oC);Eue=n(p7e,"STRONG",{});var z_t=s(Eue);gpr=r(z_t,"longformer"),z_t.forEach(t),hpr=r(p7e," \u2014 "),aX=n(p7e,"A",{href:!0});var W_t=s(aX);ppr=r(W_t,"TFLongformerForMultipleChoice"),W_t.forEach(t),_pr=r(p7e," (Longformer model)"),p7e.forEach(t),upr=i(le),rC=n(le,"LI",{});var _7e=s(rC);yue=n(_7e,"STRONG",{});var Q_t=s(yue);bpr=r(Q_t,"mobilebert"),Q_t.forEach(t),vpr=r(_7e," \u2014 "),nX=n(_7e,"A",{href:!0});var H_t=s(nX);Tpr=r(H_t,"TFMobileBertForMultipleChoice"),H_t.forEach(t),Fpr=r(_7e," (MobileBERT model)"),_7e.forEach(t),Cpr=i(le),tC=n(le,"LI",{});var u7e=s(tC);wue=n(u7e,"STRONG",{});var U_t=s(wue);Mpr=r(U_t,"mpnet"),U_t.forEach(t),Epr=r(u7e," \u2014 "),sX=n(u7e,"A",{href:!0});var J_t=s(sX);ypr=r(J_t,"TFMPNetForMultipleChoice"),J_t.forEach(t),wpr=r(u7e," (MPNet model)"),u7e.forEach(t),Apr=i(le),aC=n(le,"LI",{});var b7e=s(aC);Aue=n(b7e,"STRONG",{});var Y_t=s(Aue);Lpr=r(Y_t,"rembert"),Y_t.forEach(t),Bpr=r(b7e," \u2014 "),lX=n(b7e,"A",{href:!0});var K_t=s(lX);xpr=r(K_t,"TFRemBertForMultipleChoice"),K_t.forEach(t),kpr=r(b7e," (RemBERT model)"),b7e.forEach(t),Rpr=i(le),nC=n(le,"LI",{});var v7e=s(nC);Lue=n(v7e,"STRONG",{});var Z_t=s(Lue);Spr=r(Z_t,"roberta"),Z_t.forEach(t),Ppr=r(v7e," \u2014 "),iX=n(v7e,"A",{href:!0});var eut=s(iX);$pr=r(eut,"TFRobertaForMultipleChoice"),eut.forEach(t),Ipr=r(v7e," (RoBERTa model)"),v7e.forEach(t),Npr=i(le),sC=n(le,"LI",{});var T7e=s(sC);Bue=n(T7e,"STRONG",{});var out=s(Bue);Dpr=r(out,"roformer"),out.forEach(t),jpr=r(T7e," \u2014 "),dX=n(T7e,"A",{href:!0});var rut=s(dX);qpr=r(rut,"TFRoFormerForMultipleChoice"),rut.forEach(t),Gpr=r(T7e," (RoFormer model)"),T7e.forEach(t),Opr=i(le),lC=n(le,"LI",{});var F7e=s(lC);xue=n(F7e,"STRONG",{});var tut=s(xue);Xpr=r(tut,"xlm"),tut.forEach(t),Vpr=r(F7e," \u2014 "),cX=n(F7e,"A",{href:!0});var aut=s(cX);zpr=r(aut,"TFXLMForMultipleChoice"),aut.forEach(t),Wpr=r(F7e," (XLM model)"),F7e.forEach(t),Qpr=i(le),iC=n(le,"LI",{});var C7e=s(iC);kue=n(C7e,"STRONG",{});var nut=s(kue);Hpr=r(nut,"xlm-roberta"),nut.forEach(t),Upr=r(C7e," \u2014 "),fX=n(C7e,"A",{href:!0});var sut=s(fX);Jpr=r(sut,"TFXLMRobertaForMultipleChoice"),sut.forEach(t),Ypr=r(C7e," (XLM-RoBERTa model)"),C7e.forEach(t),Kpr=i(le),dC=n(le,"LI",{});var M7e=s(dC);Rue=n(M7e,"STRONG",{});var lut=s(Rue);Zpr=r(lut,"xlnet"),lut.forEach(t),e_r=r(M7e," \u2014 "),mX=n(M7e,"A",{href:!0});var iut=s(mX);o_r=r(iut,"TFXLNetForMultipleChoice"),iut.forEach(t),r_r=r(M7e," (XLNet model)"),M7e.forEach(t),le.forEach(t),t_r=i(Ca),Sue=n(Ca,"P",{});var dut=s(Sue);a_r=r(dut,"Examples:"),dut.forEach(t),n_r=i(Ca),m(XA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),wRe=i(c),Dc=n(c,"H2",{class:!0});var NPe=s(Dc);cC=n(NPe,"A",{id:!0,class:!0,href:!0});var cut=s(cC);Pue=n(cut,"SPAN",{});var fut=s(Pue);m(VA.$$.fragment,fut),fut.forEach(t),cut.forEach(t),s_r=i(NPe),$ue=n(NPe,"SPAN",{});var mut=s($ue);l_r=r(mut,"TFAutoModelForTableQuestionAnswering"),mut.forEach(t),NPe.forEach(t),ARe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(zA.$$.fragment,oi),i_r=i(oi),jc=n(oi,"P",{});var lQ=s(jc);d_r=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Iue=n(lQ,"CODE",{});var gut=s(Iue);c_r=r(gut,"from_pretrained()"),gut.forEach(t),f_r=r(lQ,"class method or the "),Nue=n(lQ,"CODE",{});var hut=s(Nue);m_r=r(hut,"from_config()"),hut.forEach(t),g_r=r(lQ,`class
method.`),lQ.forEach(t),h_r=i(oi),WA=n(oi,"P",{});var DPe=s(WA);p_r=r(DPe,"This class cannot be instantiated directly using "),Due=n(DPe,"CODE",{});var put=s(Due);__r=r(put,"__init__()"),put.forEach(t),u_r=r(DPe," (throws an error)."),DPe.forEach(t),b_r=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(QA.$$.fragment,ri),v_r=i(ri),jue=n(ri,"P",{});var _ut=s(jue);T_r=r(_ut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_ut.forEach(t),F_r=i(ri),qc=n(ri,"P",{});var iQ=s(qc);C_r=r(iQ,`Note:
Loading a model from its configuration file does `),que=n(iQ,"STRONG",{});var uut=s(que);M_r=r(uut,"not"),uut.forEach(t),E_r=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gue=n(iQ,"CODE",{});var but=s(Gue);y_r=r(but,"from_pretrained()"),but.forEach(t),w_r=r(iQ,"to load the model weights."),iQ.forEach(t),A_r=i(ri),Oue=n(ri,"P",{});var vut=s(Oue);L_r=r(vut,"Examples:"),vut.forEach(t),B_r=i(ri),m(HA.$$.fragment,ri),ri.forEach(t),x_r=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(UA.$$.fragment,Ma),k_r=i(Ma),Xue=n(Ma,"P",{});var Tut=s(Xue);R_r=r(Tut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Tut.forEach(t),S_r=i(Ma),En=n(Ma,"P",{});var VE=s(En);P_r=r(VE,"The model class to instantiate is selected based on the "),Vue=n(VE,"CODE",{});var Fut=s(Vue);$_r=r(Fut,"model_type"),Fut.forEach(t),I_r=r(VE,` property of the config object (either
passed as an argument or loaded from `),zue=n(VE,"CODE",{});var Cut=s(zue);N_r=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),D_r=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(VE,"CODE",{});var Mut=s(Wue);j_r=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),q_r=r(VE,":"),VE.forEach(t),G_r=i(Ma),Que=n(Ma,"UL",{});var Eut=s(Que);fC=n(Eut,"LI",{});var E7e=s(fC);Hue=n(E7e,"STRONG",{});var yut=s(Hue);O_r=r(yut,"tapas"),yut.forEach(t),X_r=r(E7e," \u2014 "),gX=n(E7e,"A",{href:!0});var wut=s(gX);V_r=r(wut,"TFTapasForQuestionAnswering"),wut.forEach(t),z_r=r(E7e," (TAPAS model)"),E7e.forEach(t),Eut.forEach(t),W_r=i(Ma),Uue=n(Ma,"P",{});var Aut=s(Uue);Q_r=r(Aut,"Examples:"),Aut.forEach(t),H_r=i(Ma),m(JA.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),LRe=i(c),Gc=n(c,"H2",{class:!0});var jPe=s(Gc);mC=n(jPe,"A",{id:!0,class:!0,href:!0});var Lut=s(mC);Jue=n(Lut,"SPAN",{});var But=s(Jue);m(YA.$$.fragment,But),But.forEach(t),Lut.forEach(t),U_r=i(jPe),Yue=n(jPe,"SPAN",{});var xut=s(Yue);J_r=r(xut,"TFAutoModelForTokenClassification"),xut.forEach(t),jPe.forEach(t),BRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(KA.$$.fragment,ti),Y_r=i(ti),Oc=n(ti,"P",{});var dQ=s(Oc);K_r=r(dQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Kue=n(dQ,"CODE",{});var kut=s(Kue);Z_r=r(kut,"from_pretrained()"),kut.forEach(t),eur=r(dQ,"class method or the "),Zue=n(dQ,"CODE",{});var Rut=s(Zue);our=r(Rut,"from_config()"),Rut.forEach(t),rur=r(dQ,`class
method.`),dQ.forEach(t),tur=i(ti),ZA=n(ti,"P",{});var qPe=s(ZA);aur=r(qPe,"This class cannot be instantiated directly using "),e1e=n(qPe,"CODE",{});var Sut=s(e1e);nur=r(Sut,"__init__()"),Sut.forEach(t),sur=r(qPe," (throws an error)."),qPe.forEach(t),lur=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(e0.$$.fragment,ai),iur=i(ai),o1e=n(ai,"P",{});var Put=s(o1e);dur=r(Put,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Put.forEach(t),cur=i(ai),Xc=n(ai,"P",{});var cQ=s(Xc);fur=r(cQ,`Note:
Loading a model from its configuration file does `),r1e=n(cQ,"STRONG",{});var $ut=s(r1e);mur=r($ut,"not"),$ut.forEach(t),gur=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),t1e=n(cQ,"CODE",{});var Iut=s(t1e);hur=r(Iut,"from_pretrained()"),Iut.forEach(t),pur=r(cQ,"to load the model weights."),cQ.forEach(t),_ur=i(ai),a1e=n(ai,"P",{});var Nut=s(a1e);uur=r(Nut,"Examples:"),Nut.forEach(t),bur=i(ai),m(o0.$$.fragment,ai),ai.forEach(t),vur=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(r0.$$.fragment,Ea),Tur=i(Ea),n1e=n(Ea,"P",{});var Dut=s(n1e);Fur=r(Dut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dut.forEach(t),Cur=i(Ea),yn=n(Ea,"P",{});var zE=s(yn);Mur=r(zE,"The model class to instantiate is selected based on the "),s1e=n(zE,"CODE",{});var jut=s(s1e);Eur=r(jut,"model_type"),jut.forEach(t),yur=r(zE,` property of the config object (either
passed as an argument or loaded from `),l1e=n(zE,"CODE",{});var qut=s(l1e);wur=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),Aur=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(zE,"CODE",{});var Gut=s(i1e);Lur=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),Bur=r(zE,":"),zE.forEach(t),xur=i(Ea),K=n(Ea,"UL",{});var oe=s(K);gC=n(oe,"LI",{});var y7e=s(gC);d1e=n(y7e,"STRONG",{});var Out=s(d1e);kur=r(Out,"albert"),Out.forEach(t),Rur=r(y7e," \u2014 "),hX=n(y7e,"A",{href:!0});var Xut=s(hX);Sur=r(Xut,"TFAlbertForTokenClassification"),Xut.forEach(t),Pur=r(y7e," (ALBERT model)"),y7e.forEach(t),$ur=i(oe),hC=n(oe,"LI",{});var w7e=s(hC);c1e=n(w7e,"STRONG",{});var Vut=s(c1e);Iur=r(Vut,"bert"),Vut.forEach(t),Nur=r(w7e," \u2014 "),pX=n(w7e,"A",{href:!0});var zut=s(pX);Dur=r(zut,"TFBertForTokenClassification"),zut.forEach(t),jur=r(w7e," (BERT model)"),w7e.forEach(t),qur=i(oe),pC=n(oe,"LI",{});var A7e=s(pC);f1e=n(A7e,"STRONG",{});var Wut=s(f1e);Gur=r(Wut,"camembert"),Wut.forEach(t),Our=r(A7e," \u2014 "),_X=n(A7e,"A",{href:!0});var Qut=s(_X);Xur=r(Qut,"TFCamembertForTokenClassification"),Qut.forEach(t),Vur=r(A7e," (CamemBERT model)"),A7e.forEach(t),zur=i(oe),_C=n(oe,"LI",{});var L7e=s(_C);m1e=n(L7e,"STRONG",{});var Hut=s(m1e);Wur=r(Hut,"convbert"),Hut.forEach(t),Qur=r(L7e," \u2014 "),uX=n(L7e,"A",{href:!0});var Uut=s(uX);Hur=r(Uut,"TFConvBertForTokenClassification"),Uut.forEach(t),Uur=r(L7e," (ConvBERT model)"),L7e.forEach(t),Jur=i(oe),uC=n(oe,"LI",{});var B7e=s(uC);g1e=n(B7e,"STRONG",{});var Jut=s(g1e);Yur=r(Jut,"deberta"),Jut.forEach(t),Kur=r(B7e," \u2014 "),bX=n(B7e,"A",{href:!0});var Yut=s(bX);Zur=r(Yut,"TFDebertaForTokenClassification"),Yut.forEach(t),e1r=r(B7e," (DeBERTa model)"),B7e.forEach(t),o1r=i(oe),bC=n(oe,"LI",{});var x7e=s(bC);h1e=n(x7e,"STRONG",{});var Kut=s(h1e);r1r=r(Kut,"deberta-v2"),Kut.forEach(t),t1r=r(x7e," \u2014 "),vX=n(x7e,"A",{href:!0});var Zut=s(vX);a1r=r(Zut,"TFDebertaV2ForTokenClassification"),Zut.forEach(t),n1r=r(x7e," (DeBERTa-v2 model)"),x7e.forEach(t),s1r=i(oe),vC=n(oe,"LI",{});var k7e=s(vC);p1e=n(k7e,"STRONG",{});var e1t=s(p1e);l1r=r(e1t,"distilbert"),e1t.forEach(t),i1r=r(k7e," \u2014 "),TX=n(k7e,"A",{href:!0});var o1t=s(TX);d1r=r(o1t,"TFDistilBertForTokenClassification"),o1t.forEach(t),c1r=r(k7e," (DistilBERT model)"),k7e.forEach(t),f1r=i(oe),TC=n(oe,"LI",{});var R7e=s(TC);_1e=n(R7e,"STRONG",{});var r1t=s(_1e);m1r=r(r1t,"electra"),r1t.forEach(t),g1r=r(R7e," \u2014 "),FX=n(R7e,"A",{href:!0});var t1t=s(FX);h1r=r(t1t,"TFElectraForTokenClassification"),t1t.forEach(t),p1r=r(R7e," (ELECTRA model)"),R7e.forEach(t),_1r=i(oe),FC=n(oe,"LI",{});var S7e=s(FC);u1e=n(S7e,"STRONG",{});var a1t=s(u1e);u1r=r(a1t,"flaubert"),a1t.forEach(t),b1r=r(S7e," \u2014 "),CX=n(S7e,"A",{href:!0});var n1t=s(CX);v1r=r(n1t,"TFFlaubertForTokenClassification"),n1t.forEach(t),T1r=r(S7e," (FlauBERT model)"),S7e.forEach(t),F1r=i(oe),CC=n(oe,"LI",{});var P7e=s(CC);b1e=n(P7e,"STRONG",{});var s1t=s(b1e);C1r=r(s1t,"funnel"),s1t.forEach(t),M1r=r(P7e," \u2014 "),MX=n(P7e,"A",{href:!0});var l1t=s(MX);E1r=r(l1t,"TFFunnelForTokenClassification"),l1t.forEach(t),y1r=r(P7e," (Funnel Transformer model)"),P7e.forEach(t),w1r=i(oe),MC=n(oe,"LI",{});var $7e=s(MC);v1e=n($7e,"STRONG",{});var i1t=s(v1e);A1r=r(i1t,"layoutlm"),i1t.forEach(t),L1r=r($7e," \u2014 "),EX=n($7e,"A",{href:!0});var d1t=s(EX);B1r=r(d1t,"TFLayoutLMForTokenClassification"),d1t.forEach(t),x1r=r($7e," (LayoutLM model)"),$7e.forEach(t),k1r=i(oe),EC=n(oe,"LI",{});var I7e=s(EC);T1e=n(I7e,"STRONG",{});var c1t=s(T1e);R1r=r(c1t,"longformer"),c1t.forEach(t),S1r=r(I7e," \u2014 "),yX=n(I7e,"A",{href:!0});var f1t=s(yX);P1r=r(f1t,"TFLongformerForTokenClassification"),f1t.forEach(t),$1r=r(I7e," (Longformer model)"),I7e.forEach(t),I1r=i(oe),yC=n(oe,"LI",{});var N7e=s(yC);F1e=n(N7e,"STRONG",{});var m1t=s(F1e);N1r=r(m1t,"mobilebert"),m1t.forEach(t),D1r=r(N7e," \u2014 "),wX=n(N7e,"A",{href:!0});var g1t=s(wX);j1r=r(g1t,"TFMobileBertForTokenClassification"),g1t.forEach(t),q1r=r(N7e," (MobileBERT model)"),N7e.forEach(t),G1r=i(oe),wC=n(oe,"LI",{});var D7e=s(wC);C1e=n(D7e,"STRONG",{});var h1t=s(C1e);O1r=r(h1t,"mpnet"),h1t.forEach(t),X1r=r(D7e," \u2014 "),AX=n(D7e,"A",{href:!0});var p1t=s(AX);V1r=r(p1t,"TFMPNetForTokenClassification"),p1t.forEach(t),z1r=r(D7e," (MPNet model)"),D7e.forEach(t),W1r=i(oe),AC=n(oe,"LI",{});var j7e=s(AC);M1e=n(j7e,"STRONG",{});var _1t=s(M1e);Q1r=r(_1t,"rembert"),_1t.forEach(t),H1r=r(j7e," \u2014 "),LX=n(j7e,"A",{href:!0});var u1t=s(LX);U1r=r(u1t,"TFRemBertForTokenClassification"),u1t.forEach(t),J1r=r(j7e," (RemBERT model)"),j7e.forEach(t),Y1r=i(oe),LC=n(oe,"LI",{});var q7e=s(LC);E1e=n(q7e,"STRONG",{});var b1t=s(E1e);K1r=r(b1t,"roberta"),b1t.forEach(t),Z1r=r(q7e," \u2014 "),BX=n(q7e,"A",{href:!0});var v1t=s(BX);e9r=r(v1t,"TFRobertaForTokenClassification"),v1t.forEach(t),o9r=r(q7e," (RoBERTa model)"),q7e.forEach(t),r9r=i(oe),BC=n(oe,"LI",{});var G7e=s(BC);y1e=n(G7e,"STRONG",{});var T1t=s(y1e);t9r=r(T1t,"roformer"),T1t.forEach(t),a9r=r(G7e," \u2014 "),xX=n(G7e,"A",{href:!0});var F1t=s(xX);n9r=r(F1t,"TFRoFormerForTokenClassification"),F1t.forEach(t),s9r=r(G7e," (RoFormer model)"),G7e.forEach(t),l9r=i(oe),xC=n(oe,"LI",{});var O7e=s(xC);w1e=n(O7e,"STRONG",{});var C1t=s(w1e);i9r=r(C1t,"xlm"),C1t.forEach(t),d9r=r(O7e," \u2014 "),kX=n(O7e,"A",{href:!0});var M1t=s(kX);c9r=r(M1t,"TFXLMForTokenClassification"),M1t.forEach(t),f9r=r(O7e," (XLM model)"),O7e.forEach(t),m9r=i(oe),kC=n(oe,"LI",{});var X7e=s(kC);A1e=n(X7e,"STRONG",{});var E1t=s(A1e);g9r=r(E1t,"xlm-roberta"),E1t.forEach(t),h9r=r(X7e," \u2014 "),RX=n(X7e,"A",{href:!0});var y1t=s(RX);p9r=r(y1t,"TFXLMRobertaForTokenClassification"),y1t.forEach(t),_9r=r(X7e," (XLM-RoBERTa model)"),X7e.forEach(t),u9r=i(oe),RC=n(oe,"LI",{});var V7e=s(RC);L1e=n(V7e,"STRONG",{});var w1t=s(L1e);b9r=r(w1t,"xlnet"),w1t.forEach(t),v9r=r(V7e," \u2014 "),SX=n(V7e,"A",{href:!0});var A1t=s(SX);T9r=r(A1t,"TFXLNetForTokenClassification"),A1t.forEach(t),F9r=r(V7e," (XLNet model)"),V7e.forEach(t),oe.forEach(t),C9r=i(Ea),B1e=n(Ea,"P",{});var L1t=s(B1e);M9r=r(L1t,"Examples:"),L1t.forEach(t),E9r=i(Ea),m(t0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),xRe=i(c),Vc=n(c,"H2",{class:!0});var GPe=s(Vc);SC=n(GPe,"A",{id:!0,class:!0,href:!0});var B1t=s(SC);x1e=n(B1t,"SPAN",{});var x1t=s(x1e);m(a0.$$.fragment,x1t),x1t.forEach(t),B1t.forEach(t),y9r=i(GPe),k1e=n(GPe,"SPAN",{});var k1t=s(k1e);w9r=r(k1t,"TFAutoModelForQuestionAnswering"),k1t.forEach(t),GPe.forEach(t),kRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(n0.$$.fragment,ni),A9r=i(ni),zc=n(ni,"P",{});var fQ=s(zc);L9r=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),R1e=n(fQ,"CODE",{});var R1t=s(R1e);B9r=r(R1t,"from_pretrained()"),R1t.forEach(t),x9r=r(fQ,"class method or the "),S1e=n(fQ,"CODE",{});var S1t=s(S1e);k9r=r(S1t,"from_config()"),S1t.forEach(t),R9r=r(fQ,`class
method.`),fQ.forEach(t),S9r=i(ni),s0=n(ni,"P",{});var OPe=s(s0);P9r=r(OPe,"This class cannot be instantiated directly using "),P1e=n(OPe,"CODE",{});var P1t=s(P1e);$9r=r(P1t,"__init__()"),P1t.forEach(t),I9r=r(OPe," (throws an error)."),OPe.forEach(t),N9r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(l0.$$.fragment,si),D9r=i(si),$1e=n(si,"P",{});var $1t=s($1e);j9r=r($1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$1t.forEach(t),q9r=i(si),Wc=n(si,"P",{});var mQ=s(Wc);G9r=r(mQ,`Note:
Loading a model from its configuration file does `),I1e=n(mQ,"STRONG",{});var I1t=s(I1e);O9r=r(I1t,"not"),I1t.forEach(t),X9r=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N1e=n(mQ,"CODE",{});var N1t=s(N1e);V9r=r(N1t,"from_pretrained()"),N1t.forEach(t),z9r=r(mQ,"to load the model weights."),mQ.forEach(t),W9r=i(si),D1e=n(si,"P",{});var D1t=s(D1e);Q9r=r(D1t,"Examples:"),D1t.forEach(t),H9r=i(si),m(i0.$$.fragment,si),si.forEach(t),U9r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(d0.$$.fragment,ya),J9r=i(ya),j1e=n(ya,"P",{});var j1t=s(j1e);Y9r=r(j1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j1t.forEach(t),K9r=i(ya),wn=n(ya,"P",{});var WE=s(wn);Z9r=r(WE,"The model class to instantiate is selected based on the "),q1e=n(WE,"CODE",{});var q1t=s(q1e);ebr=r(q1t,"model_type"),q1t.forEach(t),obr=r(WE,` property of the config object (either
passed as an argument or loaded from `),G1e=n(WE,"CODE",{});var G1t=s(G1e);rbr=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),tbr=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(WE,"CODE",{});var O1t=s(O1e);abr=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),nbr=r(WE,":"),WE.forEach(t),sbr=i(ya),Z=n(ya,"UL",{});var te=s(Z);PC=n(te,"LI",{});var z7e=s(PC);X1e=n(z7e,"STRONG",{});var X1t=s(X1e);lbr=r(X1t,"albert"),X1t.forEach(t),ibr=r(z7e," \u2014 "),PX=n(z7e,"A",{href:!0});var V1t=s(PX);dbr=r(V1t,"TFAlbertForQuestionAnswering"),V1t.forEach(t),cbr=r(z7e," (ALBERT model)"),z7e.forEach(t),fbr=i(te),$C=n(te,"LI",{});var W7e=s($C);V1e=n(W7e,"STRONG",{});var z1t=s(V1e);mbr=r(z1t,"bert"),z1t.forEach(t),gbr=r(W7e," \u2014 "),$X=n(W7e,"A",{href:!0});var W1t=s($X);hbr=r(W1t,"TFBertForQuestionAnswering"),W1t.forEach(t),pbr=r(W7e," (BERT model)"),W7e.forEach(t),_br=i(te),IC=n(te,"LI",{});var Q7e=s(IC);z1e=n(Q7e,"STRONG",{});var Q1t=s(z1e);ubr=r(Q1t,"camembert"),Q1t.forEach(t),bbr=r(Q7e," \u2014 "),IX=n(Q7e,"A",{href:!0});var H1t=s(IX);vbr=r(H1t,"TFCamembertForQuestionAnswering"),H1t.forEach(t),Tbr=r(Q7e," (CamemBERT model)"),Q7e.forEach(t),Fbr=i(te),NC=n(te,"LI",{});var H7e=s(NC);W1e=n(H7e,"STRONG",{});var U1t=s(W1e);Cbr=r(U1t,"convbert"),U1t.forEach(t),Mbr=r(H7e," \u2014 "),NX=n(H7e,"A",{href:!0});var J1t=s(NX);Ebr=r(J1t,"TFConvBertForQuestionAnswering"),J1t.forEach(t),ybr=r(H7e," (ConvBERT model)"),H7e.forEach(t),wbr=i(te),DC=n(te,"LI",{});var U7e=s(DC);Q1e=n(U7e,"STRONG",{});var Y1t=s(Q1e);Abr=r(Y1t,"deberta"),Y1t.forEach(t),Lbr=r(U7e," \u2014 "),DX=n(U7e,"A",{href:!0});var K1t=s(DX);Bbr=r(K1t,"TFDebertaForQuestionAnswering"),K1t.forEach(t),xbr=r(U7e," (DeBERTa model)"),U7e.forEach(t),kbr=i(te),jC=n(te,"LI",{});var J7e=s(jC);H1e=n(J7e,"STRONG",{});var Z1t=s(H1e);Rbr=r(Z1t,"deberta-v2"),Z1t.forEach(t),Sbr=r(J7e," \u2014 "),jX=n(J7e,"A",{href:!0});var e9t=s(jX);Pbr=r(e9t,"TFDebertaV2ForQuestionAnswering"),e9t.forEach(t),$br=r(J7e," (DeBERTa-v2 model)"),J7e.forEach(t),Ibr=i(te),qC=n(te,"LI",{});var Y7e=s(qC);U1e=n(Y7e,"STRONG",{});var o9t=s(U1e);Nbr=r(o9t,"distilbert"),o9t.forEach(t),Dbr=r(Y7e," \u2014 "),qX=n(Y7e,"A",{href:!0});var r9t=s(qX);jbr=r(r9t,"TFDistilBertForQuestionAnswering"),r9t.forEach(t),qbr=r(Y7e," (DistilBERT model)"),Y7e.forEach(t),Gbr=i(te),GC=n(te,"LI",{});var K7e=s(GC);J1e=n(K7e,"STRONG",{});var t9t=s(J1e);Obr=r(t9t,"electra"),t9t.forEach(t),Xbr=r(K7e," \u2014 "),GX=n(K7e,"A",{href:!0});var a9t=s(GX);Vbr=r(a9t,"TFElectraForQuestionAnswering"),a9t.forEach(t),zbr=r(K7e," (ELECTRA model)"),K7e.forEach(t),Wbr=i(te),OC=n(te,"LI",{});var Z7e=s(OC);Y1e=n(Z7e,"STRONG",{});var n9t=s(Y1e);Qbr=r(n9t,"flaubert"),n9t.forEach(t),Hbr=r(Z7e," \u2014 "),OX=n(Z7e,"A",{href:!0});var s9t=s(OX);Ubr=r(s9t,"TFFlaubertForQuestionAnsweringSimple"),s9t.forEach(t),Jbr=r(Z7e," (FlauBERT model)"),Z7e.forEach(t),Ybr=i(te),XC=n(te,"LI",{});var eBe=s(XC);K1e=n(eBe,"STRONG",{});var l9t=s(K1e);Kbr=r(l9t,"funnel"),l9t.forEach(t),Zbr=r(eBe," \u2014 "),XX=n(eBe,"A",{href:!0});var i9t=s(XX);e5r=r(i9t,"TFFunnelForQuestionAnswering"),i9t.forEach(t),o5r=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),r5r=i(te),VC=n(te,"LI",{});var oBe=s(VC);Z1e=n(oBe,"STRONG",{});var d9t=s(Z1e);t5r=r(d9t,"longformer"),d9t.forEach(t),a5r=r(oBe," \u2014 "),VX=n(oBe,"A",{href:!0});var c9t=s(VX);n5r=r(c9t,"TFLongformerForQuestionAnswering"),c9t.forEach(t),s5r=r(oBe," (Longformer model)"),oBe.forEach(t),l5r=i(te),zC=n(te,"LI",{});var rBe=s(zC);e9e=n(rBe,"STRONG",{});var f9t=s(e9e);i5r=r(f9t,"mobilebert"),f9t.forEach(t),d5r=r(rBe," \u2014 "),zX=n(rBe,"A",{href:!0});var m9t=s(zX);c5r=r(m9t,"TFMobileBertForQuestionAnswering"),m9t.forEach(t),f5r=r(rBe," (MobileBERT model)"),rBe.forEach(t),m5r=i(te),WC=n(te,"LI",{});var tBe=s(WC);o9e=n(tBe,"STRONG",{});var g9t=s(o9e);g5r=r(g9t,"mpnet"),g9t.forEach(t),h5r=r(tBe," \u2014 "),WX=n(tBe,"A",{href:!0});var h9t=s(WX);p5r=r(h9t,"TFMPNetForQuestionAnswering"),h9t.forEach(t),_5r=r(tBe," (MPNet model)"),tBe.forEach(t),u5r=i(te),QC=n(te,"LI",{});var aBe=s(QC);r9e=n(aBe,"STRONG",{});var p9t=s(r9e);b5r=r(p9t,"rembert"),p9t.forEach(t),v5r=r(aBe," \u2014 "),QX=n(aBe,"A",{href:!0});var _9t=s(QX);T5r=r(_9t,"TFRemBertForQuestionAnswering"),_9t.forEach(t),F5r=r(aBe," (RemBERT model)"),aBe.forEach(t),C5r=i(te),HC=n(te,"LI",{});var nBe=s(HC);t9e=n(nBe,"STRONG",{});var u9t=s(t9e);M5r=r(u9t,"roberta"),u9t.forEach(t),E5r=r(nBe," \u2014 "),HX=n(nBe,"A",{href:!0});var b9t=s(HX);y5r=r(b9t,"TFRobertaForQuestionAnswering"),b9t.forEach(t),w5r=r(nBe," (RoBERTa model)"),nBe.forEach(t),A5r=i(te),UC=n(te,"LI",{});var sBe=s(UC);a9e=n(sBe,"STRONG",{});var v9t=s(a9e);L5r=r(v9t,"roformer"),v9t.forEach(t),B5r=r(sBe," \u2014 "),UX=n(sBe,"A",{href:!0});var T9t=s(UX);x5r=r(T9t,"TFRoFormerForQuestionAnswering"),T9t.forEach(t),k5r=r(sBe," (RoFormer model)"),sBe.forEach(t),R5r=i(te),JC=n(te,"LI",{});var lBe=s(JC);n9e=n(lBe,"STRONG",{});var F9t=s(n9e);S5r=r(F9t,"xlm"),F9t.forEach(t),P5r=r(lBe," \u2014 "),JX=n(lBe,"A",{href:!0});var C9t=s(JX);$5r=r(C9t,"TFXLMForQuestionAnsweringSimple"),C9t.forEach(t),I5r=r(lBe," (XLM model)"),lBe.forEach(t),N5r=i(te),YC=n(te,"LI",{});var iBe=s(YC);s9e=n(iBe,"STRONG",{});var M9t=s(s9e);D5r=r(M9t,"xlm-roberta"),M9t.forEach(t),j5r=r(iBe," \u2014 "),YX=n(iBe,"A",{href:!0});var E9t=s(YX);q5r=r(E9t,"TFXLMRobertaForQuestionAnswering"),E9t.forEach(t),G5r=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),O5r=i(te),KC=n(te,"LI",{});var dBe=s(KC);l9e=n(dBe,"STRONG",{});var y9t=s(l9e);X5r=r(y9t,"xlnet"),y9t.forEach(t),V5r=r(dBe," \u2014 "),KX=n(dBe,"A",{href:!0});var w9t=s(KX);z5r=r(w9t,"TFXLNetForQuestionAnsweringSimple"),w9t.forEach(t),W5r=r(dBe," (XLNet model)"),dBe.forEach(t),te.forEach(t),Q5r=i(ya),i9e=n(ya,"P",{});var A9t=s(i9e);H5r=r(A9t,"Examples:"),A9t.forEach(t),U5r=i(ya),m(c0.$$.fragment,ya),ya.forEach(t),ni.forEach(t),RRe=i(c),Qc=n(c,"H2",{class:!0});var XPe=s(Qc);ZC=n(XPe,"A",{id:!0,class:!0,href:!0});var L9t=s(ZC);d9e=n(L9t,"SPAN",{});var B9t=s(d9e);m(f0.$$.fragment,B9t),B9t.forEach(t),L9t.forEach(t),J5r=i(XPe),c9e=n(XPe,"SPAN",{});var x9t=s(c9e);Y5r=r(x9t,"TFAutoModelForVision2Seq"),x9t.forEach(t),XPe.forEach(t),SRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(m0.$$.fragment,li),K5r=i(li),Hc=n(li,"P",{});var gQ=s(Hc);Z5r=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),f9e=n(gQ,"CODE",{});var k9t=s(f9e);e2r=r(k9t,"from_pretrained()"),k9t.forEach(t),o2r=r(gQ,"class method or the "),m9e=n(gQ,"CODE",{});var R9t=s(m9e);r2r=r(R9t,"from_config()"),R9t.forEach(t),t2r=r(gQ,`class
method.`),gQ.forEach(t),a2r=i(li),g0=n(li,"P",{});var VPe=s(g0);n2r=r(VPe,"This class cannot be instantiated directly using "),g9e=n(VPe,"CODE",{});var S9t=s(g9e);s2r=r(S9t,"__init__()"),S9t.forEach(t),l2r=r(VPe," (throws an error)."),VPe.forEach(t),i2r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(h0.$$.fragment,ii),d2r=i(ii),h9e=n(ii,"P",{});var P9t=s(h9e);c2r=r(P9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),P9t.forEach(t),f2r=i(ii),Uc=n(ii,"P",{});var hQ=s(Uc);m2r=r(hQ,`Note:
Loading a model from its configuration file does `),p9e=n(hQ,"STRONG",{});var $9t=s(p9e);g2r=r($9t,"not"),$9t.forEach(t),h2r=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_9e=n(hQ,"CODE",{});var I9t=s(_9e);p2r=r(I9t,"from_pretrained()"),I9t.forEach(t),_2r=r(hQ,"to load the model weights."),hQ.forEach(t),u2r=i(ii),u9e=n(ii,"P",{});var N9t=s(u9e);b2r=r(N9t,"Examples:"),N9t.forEach(t),v2r=i(ii),m(p0.$$.fragment,ii),ii.forEach(t),T2r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(_0.$$.fragment,wa),F2r=i(wa),b9e=n(wa,"P",{});var D9t=s(b9e);C2r=r(D9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D9t.forEach(t),M2r=i(wa),An=n(wa,"P",{});var QE=s(An);E2r=r(QE,"The model class to instantiate is selected based on the "),v9e=n(QE,"CODE",{});var j9t=s(v9e);y2r=r(j9t,"model_type"),j9t.forEach(t),w2r=r(QE,` property of the config object (either
passed as an argument or loaded from `),T9e=n(QE,"CODE",{});var q9t=s(T9e);A2r=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),L2r=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F9e=n(QE,"CODE",{});var G9t=s(F9e);B2r=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),x2r=r(QE,":"),QE.forEach(t),k2r=i(wa),C9e=n(wa,"UL",{});var O9t=s(C9e);eM=n(O9t,"LI",{});var cBe=s(eM);M9e=n(cBe,"STRONG",{});var X9t=s(M9e);R2r=r(X9t,"vision-encoder-decoder"),X9t.forEach(t),S2r=r(cBe," \u2014 "),ZX=n(cBe,"A",{href:!0});var V9t=s(ZX);P2r=r(V9t,"TFVisionEncoderDecoderModel"),V9t.forEach(t),$2r=r(cBe," (Vision Encoder decoder model)"),cBe.forEach(t),O9t.forEach(t),I2r=i(wa),E9e=n(wa,"P",{});var z9t=s(E9e);N2r=r(z9t,"Examples:"),z9t.forEach(t),D2r=i(wa),m(u0.$$.fragment,wa),wa.forEach(t),li.forEach(t),PRe=i(c),Jc=n(c,"H2",{class:!0});var zPe=s(Jc);oM=n(zPe,"A",{id:!0,class:!0,href:!0});var W9t=s(oM);y9e=n(W9t,"SPAN",{});var Q9t=s(y9e);m(b0.$$.fragment,Q9t),Q9t.forEach(t),W9t.forEach(t),j2r=i(zPe),w9e=n(zPe,"SPAN",{});var H9t=s(w9e);q2r=r(H9t,"TFAutoModelForSpeechSeq2Seq"),H9t.forEach(t),zPe.forEach(t),$Re=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(v0.$$.fragment,di),G2r=i(di),Yc=n(di,"P",{});var pQ=s(Yc);O2r=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),A9e=n(pQ,"CODE",{});var U9t=s(A9e);X2r=r(U9t,"from_pretrained()"),U9t.forEach(t),V2r=r(pQ,"class method or the "),L9e=n(pQ,"CODE",{});var J9t=s(L9e);z2r=r(J9t,"from_config()"),J9t.forEach(t),W2r=r(pQ,`class
method.`),pQ.forEach(t),Q2r=i(di),T0=n(di,"P",{});var WPe=s(T0);H2r=r(WPe,"This class cannot be instantiated directly using "),B9e=n(WPe,"CODE",{});var Y9t=s(B9e);U2r=r(Y9t,"__init__()"),Y9t.forEach(t),J2r=r(WPe," (throws an error)."),WPe.forEach(t),Y2r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(F0.$$.fragment,ci),K2r=i(ci),x9e=n(ci,"P",{});var K9t=s(x9e);Z2r=r(K9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),K9t.forEach(t),evr=i(ci),Kc=n(ci,"P",{});var _Q=s(Kc);ovr=r(_Q,`Note:
Loading a model from its configuration file does `),k9e=n(_Q,"STRONG",{});var Z9t=s(k9e);rvr=r(Z9t,"not"),Z9t.forEach(t),tvr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),R9e=n(_Q,"CODE",{});var ebt=s(R9e);avr=r(ebt,"from_pretrained()"),ebt.forEach(t),nvr=r(_Q,"to load the model weights."),_Q.forEach(t),svr=i(ci),S9e=n(ci,"P",{});var obt=s(S9e);lvr=r(obt,"Examples:"),obt.forEach(t),ivr=i(ci),m(C0.$$.fragment,ci),ci.forEach(t),dvr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(M0.$$.fragment,Aa),cvr=i(Aa),P9e=n(Aa,"P",{});var rbt=s(P9e);fvr=r(rbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rbt.forEach(t),mvr=i(Aa),Ln=n(Aa,"P",{});var HE=s(Ln);gvr=r(HE,"The model class to instantiate is selected based on the "),$9e=n(HE,"CODE",{});var tbt=s($9e);hvr=r(tbt,"model_type"),tbt.forEach(t),pvr=r(HE,` property of the config object (either
passed as an argument or loaded from `),I9e=n(HE,"CODE",{});var abt=s(I9e);_vr=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),uvr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N9e=n(HE,"CODE",{});var nbt=s(N9e);bvr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),vvr=r(HE,":"),HE.forEach(t),Tvr=i(Aa),D9e=n(Aa,"UL",{});var sbt=s(D9e);rM=n(sbt,"LI",{});var fBe=s(rM);j9e=n(fBe,"STRONG",{});var lbt=s(j9e);Fvr=r(lbt,"speech_to_text"),lbt.forEach(t),Cvr=r(fBe," \u2014 "),eV=n(fBe,"A",{href:!0});var ibt=s(eV);Mvr=r(ibt,"TFSpeech2TextForConditionalGeneration"),ibt.forEach(t),Evr=r(fBe," (Speech2Text model)"),fBe.forEach(t),sbt.forEach(t),yvr=i(Aa),q9e=n(Aa,"P",{});var dbt=s(q9e);wvr=r(dbt,"Examples:"),dbt.forEach(t),Avr=i(Aa),m(E0.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),IRe=i(c),Zc=n(c,"H2",{class:!0});var QPe=s(Zc);tM=n(QPe,"A",{id:!0,class:!0,href:!0});var cbt=s(tM);G9e=n(cbt,"SPAN",{});var fbt=s(G9e);m(y0.$$.fragment,fbt),fbt.forEach(t),cbt.forEach(t),Lvr=i(QPe),O9e=n(QPe,"SPAN",{});var mbt=s(O9e);Bvr=r(mbt,"FlaxAutoModel"),mbt.forEach(t),QPe.forEach(t),NRe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(w0.$$.fragment,fi),xvr=i(fi),ef=n(fi,"P",{});var uQ=s(ef);kvr=r(uQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),X9e=n(uQ,"CODE",{});var gbt=s(X9e);Rvr=r(gbt,"from_pretrained()"),gbt.forEach(t),Svr=r(uQ,"class method or the "),V9e=n(uQ,"CODE",{});var hbt=s(V9e);Pvr=r(hbt,"from_config()"),hbt.forEach(t),$vr=r(uQ,`class
method.`),uQ.forEach(t),Ivr=i(fi),A0=n(fi,"P",{});var HPe=s(A0);Nvr=r(HPe,"This class cannot be instantiated directly using "),z9e=n(HPe,"CODE",{});var pbt=s(z9e);Dvr=r(pbt,"__init__()"),pbt.forEach(t),jvr=r(HPe," (throws an error)."),HPe.forEach(t),qvr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(L0.$$.fragment,mi),Gvr=i(mi),W9e=n(mi,"P",{});var _bt=s(W9e);Ovr=r(_bt,"Instantiates one of the base model classes of the library from a configuration."),_bt.forEach(t),Xvr=i(mi),of=n(mi,"P",{});var bQ=s(of);Vvr=r(bQ,`Note:
Loading a model from its configuration file does `),Q9e=n(bQ,"STRONG",{});var ubt=s(Q9e);zvr=r(ubt,"not"),ubt.forEach(t),Wvr=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),H9e=n(bQ,"CODE",{});var bbt=s(H9e);Qvr=r(bbt,"from_pretrained()"),bbt.forEach(t),Hvr=r(bQ,"to load the model weights."),bQ.forEach(t),Uvr=i(mi),U9e=n(mi,"P",{});var vbt=s(U9e);Jvr=r(vbt,"Examples:"),vbt.forEach(t),Yvr=i(mi),m(B0.$$.fragment,mi),mi.forEach(t),Kvr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(x0.$$.fragment,La),Zvr=i(La),J9e=n(La,"P",{});var Tbt=s(J9e);eTr=r(Tbt,"Instantiate one of the base model classes of the library from a pretrained model."),Tbt.forEach(t),oTr=i(La),Bn=n(La,"P",{});var UE=s(Bn);rTr=r(UE,"The model class to instantiate is selected based on the "),Y9e=n(UE,"CODE",{});var Fbt=s(Y9e);tTr=r(Fbt,"model_type"),Fbt.forEach(t),aTr=r(UE,` property of the config object (either
passed as an argument or loaded from `),K9e=n(UE,"CODE",{});var Cbt=s(K9e);nTr=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),sTr=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z9e=n(UE,"CODE",{});var Mbt=s(Z9e);lTr=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),iTr=r(UE,":"),UE.forEach(t),dTr=i(La),z=n(La,"UL",{});var Q=s(z);aM=n(Q,"LI",{});var mBe=s(aM);ebe=n(mBe,"STRONG",{});var Ebt=s(ebe);cTr=r(Ebt,"albert"),Ebt.forEach(t),fTr=r(mBe," \u2014 "),oV=n(mBe,"A",{href:!0});var ybt=s(oV);mTr=r(ybt,"FlaxAlbertModel"),ybt.forEach(t),gTr=r(mBe," (ALBERT model)"),mBe.forEach(t),hTr=i(Q),nM=n(Q,"LI",{});var gBe=s(nM);obe=n(gBe,"STRONG",{});var wbt=s(obe);pTr=r(wbt,"bart"),wbt.forEach(t),_Tr=r(gBe," \u2014 "),rV=n(gBe,"A",{href:!0});var Abt=s(rV);uTr=r(Abt,"FlaxBartModel"),Abt.forEach(t),bTr=r(gBe," (BART model)"),gBe.forEach(t),vTr=i(Q),sM=n(Q,"LI",{});var hBe=s(sM);rbe=n(hBe,"STRONG",{});var Lbt=s(rbe);TTr=r(Lbt,"beit"),Lbt.forEach(t),FTr=r(hBe," \u2014 "),tV=n(hBe,"A",{href:!0});var Bbt=s(tV);CTr=r(Bbt,"FlaxBeitModel"),Bbt.forEach(t),MTr=r(hBe," (BEiT model)"),hBe.forEach(t),ETr=i(Q),lM=n(Q,"LI",{});var pBe=s(lM);tbe=n(pBe,"STRONG",{});var xbt=s(tbe);yTr=r(xbt,"bert"),xbt.forEach(t),wTr=r(pBe," \u2014 "),aV=n(pBe,"A",{href:!0});var kbt=s(aV);ATr=r(kbt,"FlaxBertModel"),kbt.forEach(t),LTr=r(pBe," (BERT model)"),pBe.forEach(t),BTr=i(Q),iM=n(Q,"LI",{});var _Be=s(iM);abe=n(_Be,"STRONG",{});var Rbt=s(abe);xTr=r(Rbt,"big_bird"),Rbt.forEach(t),kTr=r(_Be," \u2014 "),nV=n(_Be,"A",{href:!0});var Sbt=s(nV);RTr=r(Sbt,"FlaxBigBirdModel"),Sbt.forEach(t),STr=r(_Be," (BigBird model)"),_Be.forEach(t),PTr=i(Q),dM=n(Q,"LI",{});var uBe=s(dM);nbe=n(uBe,"STRONG",{});var Pbt=s(nbe);$Tr=r(Pbt,"blenderbot"),Pbt.forEach(t),ITr=r(uBe," \u2014 "),sV=n(uBe,"A",{href:!0});var $bt=s(sV);NTr=r($bt,"FlaxBlenderbotModel"),$bt.forEach(t),DTr=r(uBe," (Blenderbot model)"),uBe.forEach(t),jTr=i(Q),cM=n(Q,"LI",{});var bBe=s(cM);sbe=n(bBe,"STRONG",{});var Ibt=s(sbe);qTr=r(Ibt,"blenderbot-small"),Ibt.forEach(t),GTr=r(bBe," \u2014 "),lV=n(bBe,"A",{href:!0});var Nbt=s(lV);OTr=r(Nbt,"FlaxBlenderbotSmallModel"),Nbt.forEach(t),XTr=r(bBe," (BlenderbotSmall model)"),bBe.forEach(t),VTr=i(Q),fM=n(Q,"LI",{});var vBe=s(fM);lbe=n(vBe,"STRONG",{});var Dbt=s(lbe);zTr=r(Dbt,"clip"),Dbt.forEach(t),WTr=r(vBe," \u2014 "),iV=n(vBe,"A",{href:!0});var jbt=s(iV);QTr=r(jbt,"FlaxCLIPModel"),jbt.forEach(t),HTr=r(vBe," (CLIP model)"),vBe.forEach(t),UTr=i(Q),mM=n(Q,"LI",{});var TBe=s(mM);ibe=n(TBe,"STRONG",{});var qbt=s(ibe);JTr=r(qbt,"distilbert"),qbt.forEach(t),YTr=r(TBe," \u2014 "),dV=n(TBe,"A",{href:!0});var Gbt=s(dV);KTr=r(Gbt,"FlaxDistilBertModel"),Gbt.forEach(t),ZTr=r(TBe," (DistilBERT model)"),TBe.forEach(t),eFr=i(Q),gM=n(Q,"LI",{});var FBe=s(gM);dbe=n(FBe,"STRONG",{});var Obt=s(dbe);oFr=r(Obt,"electra"),Obt.forEach(t),rFr=r(FBe," \u2014 "),cV=n(FBe,"A",{href:!0});var Xbt=s(cV);tFr=r(Xbt,"FlaxElectraModel"),Xbt.forEach(t),aFr=r(FBe," (ELECTRA model)"),FBe.forEach(t),nFr=i(Q),hM=n(Q,"LI",{});var CBe=s(hM);cbe=n(CBe,"STRONG",{});var Vbt=s(cbe);sFr=r(Vbt,"gpt2"),Vbt.forEach(t),lFr=r(CBe," \u2014 "),fV=n(CBe,"A",{href:!0});var zbt=s(fV);iFr=r(zbt,"FlaxGPT2Model"),zbt.forEach(t),dFr=r(CBe," (OpenAI GPT-2 model)"),CBe.forEach(t),cFr=i(Q),pM=n(Q,"LI",{});var MBe=s(pM);fbe=n(MBe,"STRONG",{});var Wbt=s(fbe);fFr=r(Wbt,"gpt_neo"),Wbt.forEach(t),mFr=r(MBe," \u2014 "),mV=n(MBe,"A",{href:!0});var Qbt=s(mV);gFr=r(Qbt,"FlaxGPTNeoModel"),Qbt.forEach(t),hFr=r(MBe," (GPT Neo model)"),MBe.forEach(t),pFr=i(Q),_M=n(Q,"LI",{});var EBe=s(_M);mbe=n(EBe,"STRONG",{});var Hbt=s(mbe);_Fr=r(Hbt,"gptj"),Hbt.forEach(t),uFr=r(EBe," \u2014 "),gV=n(EBe,"A",{href:!0});var Ubt=s(gV);bFr=r(Ubt,"FlaxGPTJModel"),Ubt.forEach(t),vFr=r(EBe," (GPT-J model)"),EBe.forEach(t),TFr=i(Q),uM=n(Q,"LI",{});var yBe=s(uM);gbe=n(yBe,"STRONG",{});var Jbt=s(gbe);FFr=r(Jbt,"marian"),Jbt.forEach(t),CFr=r(yBe," \u2014 "),hV=n(yBe,"A",{href:!0});var Ybt=s(hV);MFr=r(Ybt,"FlaxMarianModel"),Ybt.forEach(t),EFr=r(yBe," (Marian model)"),yBe.forEach(t),yFr=i(Q),bM=n(Q,"LI",{});var wBe=s(bM);hbe=n(wBe,"STRONG",{});var Kbt=s(hbe);wFr=r(Kbt,"mbart"),Kbt.forEach(t),AFr=r(wBe," \u2014 "),pV=n(wBe,"A",{href:!0});var Zbt=s(pV);LFr=r(Zbt,"FlaxMBartModel"),Zbt.forEach(t),BFr=r(wBe," (mBART model)"),wBe.forEach(t),xFr=i(Q),vM=n(Q,"LI",{});var ABe=s(vM);pbe=n(ABe,"STRONG",{});var e5t=s(pbe);kFr=r(e5t,"mt5"),e5t.forEach(t),RFr=r(ABe," \u2014 "),_V=n(ABe,"A",{href:!0});var o5t=s(_V);SFr=r(o5t,"FlaxMT5Model"),o5t.forEach(t),PFr=r(ABe," (mT5 model)"),ABe.forEach(t),$Fr=i(Q),TM=n(Q,"LI",{});var LBe=s(TM);_be=n(LBe,"STRONG",{});var r5t=s(_be);IFr=r(r5t,"pegasus"),r5t.forEach(t),NFr=r(LBe," \u2014 "),uV=n(LBe,"A",{href:!0});var t5t=s(uV);DFr=r(t5t,"FlaxPegasusModel"),t5t.forEach(t),jFr=r(LBe," (Pegasus model)"),LBe.forEach(t),qFr=i(Q),FM=n(Q,"LI",{});var BBe=s(FM);ube=n(BBe,"STRONG",{});var a5t=s(ube);GFr=r(a5t,"roberta"),a5t.forEach(t),OFr=r(BBe," \u2014 "),bV=n(BBe,"A",{href:!0});var n5t=s(bV);XFr=r(n5t,"FlaxRobertaModel"),n5t.forEach(t),VFr=r(BBe," (RoBERTa model)"),BBe.forEach(t),zFr=i(Q),CM=n(Q,"LI",{});var xBe=s(CM);bbe=n(xBe,"STRONG",{});var s5t=s(bbe);WFr=r(s5t,"roformer"),s5t.forEach(t),QFr=r(xBe," \u2014 "),vV=n(xBe,"A",{href:!0});var l5t=s(vV);HFr=r(l5t,"FlaxRoFormerModel"),l5t.forEach(t),UFr=r(xBe," (RoFormer model)"),xBe.forEach(t),JFr=i(Q),MM=n(Q,"LI",{});var kBe=s(MM);vbe=n(kBe,"STRONG",{});var i5t=s(vbe);YFr=r(i5t,"t5"),i5t.forEach(t),KFr=r(kBe," \u2014 "),TV=n(kBe,"A",{href:!0});var d5t=s(TV);ZFr=r(d5t,"FlaxT5Model"),d5t.forEach(t),eCr=r(kBe," (T5 model)"),kBe.forEach(t),oCr=i(Q),EM=n(Q,"LI",{});var RBe=s(EM);Tbe=n(RBe,"STRONG",{});var c5t=s(Tbe);rCr=r(c5t,"vision-text-dual-encoder"),c5t.forEach(t),tCr=r(RBe," \u2014 "),FV=n(RBe,"A",{href:!0});var f5t=s(FV);aCr=r(f5t,"FlaxVisionTextDualEncoderModel"),f5t.forEach(t),nCr=r(RBe," (VisionTextDualEncoder model)"),RBe.forEach(t),sCr=i(Q),yM=n(Q,"LI",{});var SBe=s(yM);Fbe=n(SBe,"STRONG",{});var m5t=s(Fbe);lCr=r(m5t,"vit"),m5t.forEach(t),iCr=r(SBe," \u2014 "),CV=n(SBe,"A",{href:!0});var g5t=s(CV);dCr=r(g5t,"FlaxViTModel"),g5t.forEach(t),cCr=r(SBe," (ViT model)"),SBe.forEach(t),fCr=i(Q),wM=n(Q,"LI",{});var PBe=s(wM);Cbe=n(PBe,"STRONG",{});var h5t=s(Cbe);mCr=r(h5t,"wav2vec2"),h5t.forEach(t),gCr=r(PBe," \u2014 "),MV=n(PBe,"A",{href:!0});var p5t=s(MV);hCr=r(p5t,"FlaxWav2Vec2Model"),p5t.forEach(t),pCr=r(PBe," (Wav2Vec2 model)"),PBe.forEach(t),_Cr=i(Q),AM=n(Q,"LI",{});var $Be=s(AM);Mbe=n($Be,"STRONG",{});var _5t=s(Mbe);uCr=r(_5t,"xglm"),_5t.forEach(t),bCr=r($Be," \u2014 "),EV=n($Be,"A",{href:!0});var u5t=s(EV);vCr=r(u5t,"FlaxXGLMModel"),u5t.forEach(t),TCr=r($Be," (XGLM model)"),$Be.forEach(t),FCr=i(Q),LM=n(Q,"LI",{});var IBe=s(LM);Ebe=n(IBe,"STRONG",{});var b5t=s(Ebe);CCr=r(b5t,"xlm-roberta"),b5t.forEach(t),MCr=r(IBe," \u2014 "),yV=n(IBe,"A",{href:!0});var v5t=s(yV);ECr=r(v5t,"FlaxXLMRobertaModel"),v5t.forEach(t),yCr=r(IBe," (XLM-RoBERTa model)"),IBe.forEach(t),Q.forEach(t),wCr=i(La),ybe=n(La,"P",{});var T5t=s(ybe);ACr=r(T5t,"Examples:"),T5t.forEach(t),LCr=i(La),m(k0.$$.fragment,La),La.forEach(t),fi.forEach(t),DRe=i(c),rf=n(c,"H2",{class:!0});var UPe=s(rf);BM=n(UPe,"A",{id:!0,class:!0,href:!0});var F5t=s(BM);wbe=n(F5t,"SPAN",{});var C5t=s(wbe);m(R0.$$.fragment,C5t),C5t.forEach(t),F5t.forEach(t),BCr=i(UPe),Abe=n(UPe,"SPAN",{});var M5t=s(Abe);xCr=r(M5t,"FlaxAutoModelForCausalLM"),M5t.forEach(t),UPe.forEach(t),jRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(S0.$$.fragment,gi),kCr=i(gi),tf=n(gi,"P",{});var vQ=s(tf);RCr=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lbe=n(vQ,"CODE",{});var E5t=s(Lbe);SCr=r(E5t,"from_pretrained()"),E5t.forEach(t),PCr=r(vQ,"class method or the "),Bbe=n(vQ,"CODE",{});var y5t=s(Bbe);$Cr=r(y5t,"from_config()"),y5t.forEach(t),ICr=r(vQ,`class
method.`),vQ.forEach(t),NCr=i(gi),P0=n(gi,"P",{});var JPe=s(P0);DCr=r(JPe,"This class cannot be instantiated directly using "),xbe=n(JPe,"CODE",{});var w5t=s(xbe);jCr=r(w5t,"__init__()"),w5t.forEach(t),qCr=r(JPe," (throws an error)."),JPe.forEach(t),GCr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m($0.$$.fragment,hi),OCr=i(hi),kbe=n(hi,"P",{});var A5t=s(kbe);XCr=r(A5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),A5t.forEach(t),VCr=i(hi),af=n(hi,"P",{});var TQ=s(af);zCr=r(TQ,`Note:
Loading a model from its configuration file does `),Rbe=n(TQ,"STRONG",{});var L5t=s(Rbe);WCr=r(L5t,"not"),L5t.forEach(t),QCr=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sbe=n(TQ,"CODE",{});var B5t=s(Sbe);HCr=r(B5t,"from_pretrained()"),B5t.forEach(t),UCr=r(TQ,"to load the model weights."),TQ.forEach(t),JCr=i(hi),Pbe=n(hi,"P",{});var x5t=s(Pbe);YCr=r(x5t,"Examples:"),x5t.forEach(t),KCr=i(hi),m(I0.$$.fragment,hi),hi.forEach(t),ZCr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(N0.$$.fragment,Ba),eMr=i(Ba),$be=n(Ba,"P",{});var k5t=s($be);oMr=r(k5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k5t.forEach(t),rMr=i(Ba),xn=n(Ba,"P",{});var JE=s(xn);tMr=r(JE,"The model class to instantiate is selected based on the "),Ibe=n(JE,"CODE",{});var R5t=s(Ibe);aMr=r(R5t,"model_type"),R5t.forEach(t),nMr=r(JE,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(JE,"CODE",{});var S5t=s(Nbe);sMr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),lMr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(JE,"CODE",{});var P5t=s(Dbe);iMr=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),dMr=r(JE,":"),JE.forEach(t),cMr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);xM=n(pi,"LI",{});var NBe=s(xM);jbe=n(NBe,"STRONG",{});var $5t=s(jbe);fMr=r($5t,"bart"),$5t.forEach(t),mMr=r(NBe," \u2014 "),wV=n(NBe,"A",{href:!0});var I5t=s(wV);gMr=r(I5t,"FlaxBartForCausalLM"),I5t.forEach(t),hMr=r(NBe," (BART model)"),NBe.forEach(t),pMr=i(pi),kM=n(pi,"LI",{});var DBe=s(kM);qbe=n(DBe,"STRONG",{});var N5t=s(qbe);_Mr=r(N5t,"gpt2"),N5t.forEach(t),uMr=r(DBe," \u2014 "),AV=n(DBe,"A",{href:!0});var D5t=s(AV);bMr=r(D5t,"FlaxGPT2LMHeadModel"),D5t.forEach(t),vMr=r(DBe," (OpenAI GPT-2 model)"),DBe.forEach(t),TMr=i(pi),RM=n(pi,"LI",{});var jBe=s(RM);Gbe=n(jBe,"STRONG",{});var j5t=s(Gbe);FMr=r(j5t,"gpt_neo"),j5t.forEach(t),CMr=r(jBe," \u2014 "),LV=n(jBe,"A",{href:!0});var q5t=s(LV);MMr=r(q5t,"FlaxGPTNeoForCausalLM"),q5t.forEach(t),EMr=r(jBe," (GPT Neo model)"),jBe.forEach(t),yMr=i(pi),SM=n(pi,"LI",{});var qBe=s(SM);Obe=n(qBe,"STRONG",{});var G5t=s(Obe);wMr=r(G5t,"gptj"),G5t.forEach(t),AMr=r(qBe," \u2014 "),BV=n(qBe,"A",{href:!0});var O5t=s(BV);LMr=r(O5t,"FlaxGPTJForCausalLM"),O5t.forEach(t),BMr=r(qBe," (GPT-J model)"),qBe.forEach(t),xMr=i(pi),PM=n(pi,"LI",{});var GBe=s(PM);Xbe=n(GBe,"STRONG",{});var X5t=s(Xbe);kMr=r(X5t,"xglm"),X5t.forEach(t),RMr=r(GBe," \u2014 "),xV=n(GBe,"A",{href:!0});var V5t=s(xV);SMr=r(V5t,"FlaxXGLMForCausalLM"),V5t.forEach(t),PMr=r(GBe," (XGLM model)"),GBe.forEach(t),pi.forEach(t),$Mr=i(Ba),Vbe=n(Ba,"P",{});var z5t=s(Vbe);IMr=r(z5t,"Examples:"),z5t.forEach(t),NMr=i(Ba),m(D0.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),qRe=i(c),nf=n(c,"H2",{class:!0});var YPe=s(nf);$M=n(YPe,"A",{id:!0,class:!0,href:!0});var W5t=s($M);zbe=n(W5t,"SPAN",{});var Q5t=s(zbe);m(j0.$$.fragment,Q5t),Q5t.forEach(t),W5t.forEach(t),DMr=i(YPe),Wbe=n(YPe,"SPAN",{});var H5t=s(Wbe);jMr=r(H5t,"FlaxAutoModelForPreTraining"),H5t.forEach(t),YPe.forEach(t),GRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(q0.$$.fragment,_i),qMr=i(_i),sf=n(_i,"P",{});var FQ=s(sf);GMr=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qbe=n(FQ,"CODE",{});var U5t=s(Qbe);OMr=r(U5t,"from_pretrained()"),U5t.forEach(t),XMr=r(FQ,"class method or the "),Hbe=n(FQ,"CODE",{});var J5t=s(Hbe);VMr=r(J5t,"from_config()"),J5t.forEach(t),zMr=r(FQ,`class
method.`),FQ.forEach(t),WMr=i(_i),G0=n(_i,"P",{});var KPe=s(G0);QMr=r(KPe,"This class cannot be instantiated directly using "),Ube=n(KPe,"CODE",{});var Y5t=s(Ube);HMr=r(Y5t,"__init__()"),Y5t.forEach(t),UMr=r(KPe," (throws an error)."),KPe.forEach(t),JMr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(O0.$$.fragment,ui),YMr=i(ui),Jbe=n(ui,"P",{});var K5t=s(Jbe);KMr=r(K5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K5t.forEach(t),ZMr=i(ui),lf=n(ui,"P",{});var CQ=s(lf);e4r=r(CQ,`Note:
Loading a model from its configuration file does `),Ybe=n(CQ,"STRONG",{});var Z5t=s(Ybe);o4r=r(Z5t,"not"),Z5t.forEach(t),r4r=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kbe=n(CQ,"CODE",{});var e2t=s(Kbe);t4r=r(e2t,"from_pretrained()"),e2t.forEach(t),a4r=r(CQ,"to load the model weights."),CQ.forEach(t),n4r=i(ui),Zbe=n(ui,"P",{});var o2t=s(Zbe);s4r=r(o2t,"Examples:"),o2t.forEach(t),l4r=i(ui),m(X0.$$.fragment,ui),ui.forEach(t),i4r=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(V0.$$.fragment,xa),d4r=i(xa),e5e=n(xa,"P",{});var r2t=s(e5e);c4r=r(r2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r2t.forEach(t),f4r=i(xa),kn=n(xa,"P",{});var YE=s(kn);m4r=r(YE,"The model class to instantiate is selected based on the "),o5e=n(YE,"CODE",{});var t2t=s(o5e);g4r=r(t2t,"model_type"),t2t.forEach(t),h4r=r(YE,` property of the config object (either
passed as an argument or loaded from `),r5e=n(YE,"CODE",{});var a2t=s(r5e);p4r=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),_4r=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(YE,"CODE",{});var n2t=s(t5e);u4r=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),b4r=r(YE,":"),YE.forEach(t),v4r=i(xa),ce=n(xa,"UL",{});var he=s(ce);IM=n(he,"LI",{});var OBe=s(IM);a5e=n(OBe,"STRONG",{});var s2t=s(a5e);T4r=r(s2t,"albert"),s2t.forEach(t),F4r=r(OBe," \u2014 "),kV=n(OBe,"A",{href:!0});var l2t=s(kV);C4r=r(l2t,"FlaxAlbertForPreTraining"),l2t.forEach(t),M4r=r(OBe," (ALBERT model)"),OBe.forEach(t),E4r=i(he),NM=n(he,"LI",{});var XBe=s(NM);n5e=n(XBe,"STRONG",{});var i2t=s(n5e);y4r=r(i2t,"bart"),i2t.forEach(t),w4r=r(XBe," \u2014 "),RV=n(XBe,"A",{href:!0});var d2t=s(RV);A4r=r(d2t,"FlaxBartForConditionalGeneration"),d2t.forEach(t),L4r=r(XBe," (BART model)"),XBe.forEach(t),B4r=i(he),DM=n(he,"LI",{});var VBe=s(DM);s5e=n(VBe,"STRONG",{});var c2t=s(s5e);x4r=r(c2t,"bert"),c2t.forEach(t),k4r=r(VBe," \u2014 "),SV=n(VBe,"A",{href:!0});var f2t=s(SV);R4r=r(f2t,"FlaxBertForPreTraining"),f2t.forEach(t),S4r=r(VBe," (BERT model)"),VBe.forEach(t),P4r=i(he),jM=n(he,"LI",{});var zBe=s(jM);l5e=n(zBe,"STRONG",{});var m2t=s(l5e);$4r=r(m2t,"big_bird"),m2t.forEach(t),I4r=r(zBe," \u2014 "),PV=n(zBe,"A",{href:!0});var g2t=s(PV);N4r=r(g2t,"FlaxBigBirdForPreTraining"),g2t.forEach(t),D4r=r(zBe," (BigBird model)"),zBe.forEach(t),j4r=i(he),qM=n(he,"LI",{});var WBe=s(qM);i5e=n(WBe,"STRONG",{});var h2t=s(i5e);q4r=r(h2t,"electra"),h2t.forEach(t),G4r=r(WBe," \u2014 "),$V=n(WBe,"A",{href:!0});var p2t=s($V);O4r=r(p2t,"FlaxElectraForPreTraining"),p2t.forEach(t),X4r=r(WBe," (ELECTRA model)"),WBe.forEach(t),V4r=i(he),GM=n(he,"LI",{});var QBe=s(GM);d5e=n(QBe,"STRONG",{});var _2t=s(d5e);z4r=r(_2t,"mbart"),_2t.forEach(t),W4r=r(QBe," \u2014 "),IV=n(QBe,"A",{href:!0});var u2t=s(IV);Q4r=r(u2t,"FlaxMBartForConditionalGeneration"),u2t.forEach(t),H4r=r(QBe," (mBART model)"),QBe.forEach(t),U4r=i(he),OM=n(he,"LI",{});var HBe=s(OM);c5e=n(HBe,"STRONG",{});var b2t=s(c5e);J4r=r(b2t,"mt5"),b2t.forEach(t),Y4r=r(HBe," \u2014 "),NV=n(HBe,"A",{href:!0});var v2t=s(NV);K4r=r(v2t,"FlaxMT5ForConditionalGeneration"),v2t.forEach(t),Z4r=r(HBe," (mT5 model)"),HBe.forEach(t),eEr=i(he),XM=n(he,"LI",{});var UBe=s(XM);f5e=n(UBe,"STRONG",{});var T2t=s(f5e);oEr=r(T2t,"roberta"),T2t.forEach(t),rEr=r(UBe," \u2014 "),DV=n(UBe,"A",{href:!0});var F2t=s(DV);tEr=r(F2t,"FlaxRobertaForMaskedLM"),F2t.forEach(t),aEr=r(UBe," (RoBERTa model)"),UBe.forEach(t),nEr=i(he),VM=n(he,"LI",{});var JBe=s(VM);m5e=n(JBe,"STRONG",{});var C2t=s(m5e);sEr=r(C2t,"roformer"),C2t.forEach(t),lEr=r(JBe," \u2014 "),jV=n(JBe,"A",{href:!0});var M2t=s(jV);iEr=r(M2t,"FlaxRoFormerForMaskedLM"),M2t.forEach(t),dEr=r(JBe," (RoFormer model)"),JBe.forEach(t),cEr=i(he),zM=n(he,"LI",{});var YBe=s(zM);g5e=n(YBe,"STRONG",{});var E2t=s(g5e);fEr=r(E2t,"t5"),E2t.forEach(t),mEr=r(YBe," \u2014 "),qV=n(YBe,"A",{href:!0});var y2t=s(qV);gEr=r(y2t,"FlaxT5ForConditionalGeneration"),y2t.forEach(t),hEr=r(YBe," (T5 model)"),YBe.forEach(t),pEr=i(he),WM=n(he,"LI",{});var KBe=s(WM);h5e=n(KBe,"STRONG",{});var w2t=s(h5e);_Er=r(w2t,"wav2vec2"),w2t.forEach(t),uEr=r(KBe," \u2014 "),GV=n(KBe,"A",{href:!0});var A2t=s(GV);bEr=r(A2t,"FlaxWav2Vec2ForPreTraining"),A2t.forEach(t),vEr=r(KBe," (Wav2Vec2 model)"),KBe.forEach(t),TEr=i(he),QM=n(he,"LI",{});var ZBe=s(QM);p5e=n(ZBe,"STRONG",{});var L2t=s(p5e);FEr=r(L2t,"xlm-roberta"),L2t.forEach(t),CEr=r(ZBe," \u2014 "),OV=n(ZBe,"A",{href:!0});var B2t=s(OV);MEr=r(B2t,"FlaxXLMRobertaForMaskedLM"),B2t.forEach(t),EEr=r(ZBe," (XLM-RoBERTa model)"),ZBe.forEach(t),he.forEach(t),yEr=i(xa),_5e=n(xa,"P",{});var x2t=s(_5e);wEr=r(x2t,"Examples:"),x2t.forEach(t),AEr=i(xa),m(z0.$$.fragment,xa),xa.forEach(t),_i.forEach(t),ORe=i(c),df=n(c,"H2",{class:!0});var ZPe=s(df);HM=n(ZPe,"A",{id:!0,class:!0,href:!0});var k2t=s(HM);u5e=n(k2t,"SPAN",{});var R2t=s(u5e);m(W0.$$.fragment,R2t),R2t.forEach(t),k2t.forEach(t),LEr=i(ZPe),b5e=n(ZPe,"SPAN",{});var S2t=s(b5e);BEr=r(S2t,"FlaxAutoModelForMaskedLM"),S2t.forEach(t),ZPe.forEach(t),XRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(Q0.$$.fragment,bi),xEr=i(bi),cf=n(bi,"P",{});var MQ=s(cf);kEr=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),v5e=n(MQ,"CODE",{});var P2t=s(v5e);REr=r(P2t,"from_pretrained()"),P2t.forEach(t),SEr=r(MQ,"class method or the "),T5e=n(MQ,"CODE",{});var $2t=s(T5e);PEr=r($2t,"from_config()"),$2t.forEach(t),$Er=r(MQ,`class
method.`),MQ.forEach(t),IEr=i(bi),H0=n(bi,"P",{});var e$e=s(H0);NEr=r(e$e,"This class cannot be instantiated directly using "),F5e=n(e$e,"CODE",{});var I2t=s(F5e);DEr=r(I2t,"__init__()"),I2t.forEach(t),jEr=r(e$e," (throws an error)."),e$e.forEach(t),qEr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(U0.$$.fragment,vi),GEr=i(vi),C5e=n(vi,"P",{});var N2t=s(C5e);OEr=r(N2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N2t.forEach(t),XEr=i(vi),ff=n(vi,"P",{});var EQ=s(ff);VEr=r(EQ,`Note:
Loading a model from its configuration file does `),M5e=n(EQ,"STRONG",{});var D2t=s(M5e);zEr=r(D2t,"not"),D2t.forEach(t),WEr=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),E5e=n(EQ,"CODE",{});var j2t=s(E5e);QEr=r(j2t,"from_pretrained()"),j2t.forEach(t),HEr=r(EQ,"to load the model weights."),EQ.forEach(t),UEr=i(vi),y5e=n(vi,"P",{});var q2t=s(y5e);JEr=r(q2t,"Examples:"),q2t.forEach(t),YEr=i(vi),m(J0.$$.fragment,vi),vi.forEach(t),KEr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(Y0.$$.fragment,ka),ZEr=i(ka),w5e=n(ka,"P",{});var G2t=s(w5e);e3r=r(G2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),G2t.forEach(t),o3r=i(ka),Rn=n(ka,"P",{});var KE=s(Rn);r3r=r(KE,"The model class to instantiate is selected based on the "),A5e=n(KE,"CODE",{});var O2t=s(A5e);t3r=r(O2t,"model_type"),O2t.forEach(t),a3r=r(KE,` property of the config object (either
passed as an argument or loaded from `),L5e=n(KE,"CODE",{});var X2t=s(L5e);n3r=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),s3r=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(KE,"CODE",{});var V2t=s(B5e);l3r=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),i3r=r(KE,":"),KE.forEach(t),d3r=i(ka),be=n(ka,"UL",{});var we=s(be);UM=n(we,"LI",{});var exe=s(UM);x5e=n(exe,"STRONG",{});var z2t=s(x5e);c3r=r(z2t,"albert"),z2t.forEach(t),f3r=r(exe," \u2014 "),XV=n(exe,"A",{href:!0});var W2t=s(XV);m3r=r(W2t,"FlaxAlbertForMaskedLM"),W2t.forEach(t),g3r=r(exe," (ALBERT model)"),exe.forEach(t),h3r=i(we),JM=n(we,"LI",{});var oxe=s(JM);k5e=n(oxe,"STRONG",{});var Q2t=s(k5e);p3r=r(Q2t,"bart"),Q2t.forEach(t),_3r=r(oxe," \u2014 "),VV=n(oxe,"A",{href:!0});var H2t=s(VV);u3r=r(H2t,"FlaxBartForConditionalGeneration"),H2t.forEach(t),b3r=r(oxe," (BART model)"),oxe.forEach(t),v3r=i(we),YM=n(we,"LI",{});var rxe=s(YM);R5e=n(rxe,"STRONG",{});var U2t=s(R5e);T3r=r(U2t,"bert"),U2t.forEach(t),F3r=r(rxe," \u2014 "),zV=n(rxe,"A",{href:!0});var J2t=s(zV);C3r=r(J2t,"FlaxBertForMaskedLM"),J2t.forEach(t),M3r=r(rxe," (BERT model)"),rxe.forEach(t),E3r=i(we),KM=n(we,"LI",{});var txe=s(KM);S5e=n(txe,"STRONG",{});var Y2t=s(S5e);y3r=r(Y2t,"big_bird"),Y2t.forEach(t),w3r=r(txe," \u2014 "),WV=n(txe,"A",{href:!0});var K2t=s(WV);A3r=r(K2t,"FlaxBigBirdForMaskedLM"),K2t.forEach(t),L3r=r(txe," (BigBird model)"),txe.forEach(t),B3r=i(we),ZM=n(we,"LI",{});var axe=s(ZM);P5e=n(axe,"STRONG",{});var Z2t=s(P5e);x3r=r(Z2t,"distilbert"),Z2t.forEach(t),k3r=r(axe," \u2014 "),QV=n(axe,"A",{href:!0});var evt=s(QV);R3r=r(evt,"FlaxDistilBertForMaskedLM"),evt.forEach(t),S3r=r(axe," (DistilBERT model)"),axe.forEach(t),P3r=i(we),e4=n(we,"LI",{});var nxe=s(e4);$5e=n(nxe,"STRONG",{});var ovt=s($5e);$3r=r(ovt,"electra"),ovt.forEach(t),I3r=r(nxe," \u2014 "),HV=n(nxe,"A",{href:!0});var rvt=s(HV);N3r=r(rvt,"FlaxElectraForMaskedLM"),rvt.forEach(t),D3r=r(nxe," (ELECTRA model)"),nxe.forEach(t),j3r=i(we),o4=n(we,"LI",{});var sxe=s(o4);I5e=n(sxe,"STRONG",{});var tvt=s(I5e);q3r=r(tvt,"mbart"),tvt.forEach(t),G3r=r(sxe," \u2014 "),UV=n(sxe,"A",{href:!0});var avt=s(UV);O3r=r(avt,"FlaxMBartForConditionalGeneration"),avt.forEach(t),X3r=r(sxe," (mBART model)"),sxe.forEach(t),V3r=i(we),r4=n(we,"LI",{});var lxe=s(r4);N5e=n(lxe,"STRONG",{});var nvt=s(N5e);z3r=r(nvt,"roberta"),nvt.forEach(t),W3r=r(lxe," \u2014 "),JV=n(lxe,"A",{href:!0});var svt=s(JV);Q3r=r(svt,"FlaxRobertaForMaskedLM"),svt.forEach(t),H3r=r(lxe," (RoBERTa model)"),lxe.forEach(t),U3r=i(we),t4=n(we,"LI",{});var ixe=s(t4);D5e=n(ixe,"STRONG",{});var lvt=s(D5e);J3r=r(lvt,"roformer"),lvt.forEach(t),Y3r=r(ixe," \u2014 "),YV=n(ixe,"A",{href:!0});var ivt=s(YV);K3r=r(ivt,"FlaxRoFormerForMaskedLM"),ivt.forEach(t),Z3r=r(ixe," (RoFormer model)"),ixe.forEach(t),eyr=i(we),a4=n(we,"LI",{});var dxe=s(a4);j5e=n(dxe,"STRONG",{});var dvt=s(j5e);oyr=r(dvt,"xlm-roberta"),dvt.forEach(t),ryr=r(dxe," \u2014 "),KV=n(dxe,"A",{href:!0});var cvt=s(KV);tyr=r(cvt,"FlaxXLMRobertaForMaskedLM"),cvt.forEach(t),ayr=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),we.forEach(t),nyr=i(ka),q5e=n(ka,"P",{});var fvt=s(q5e);syr=r(fvt,"Examples:"),fvt.forEach(t),lyr=i(ka),m(K0.$$.fragment,ka),ka.forEach(t),bi.forEach(t),VRe=i(c),mf=n(c,"H2",{class:!0});var o$e=s(mf);n4=n(o$e,"A",{id:!0,class:!0,href:!0});var mvt=s(n4);G5e=n(mvt,"SPAN",{});var gvt=s(G5e);m(Z0.$$.fragment,gvt),gvt.forEach(t),mvt.forEach(t),iyr=i(o$e),O5e=n(o$e,"SPAN",{});var hvt=s(O5e);dyr=r(hvt,"FlaxAutoModelForSeq2SeqLM"),hvt.forEach(t),o$e.forEach(t),zRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(eL.$$.fragment,Ti),cyr=i(Ti),gf=n(Ti,"P",{});var yQ=s(gf);fyr=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),X5e=n(yQ,"CODE",{});var pvt=s(X5e);myr=r(pvt,"from_pretrained()"),pvt.forEach(t),gyr=r(yQ,"class method or the "),V5e=n(yQ,"CODE",{});var _vt=s(V5e);hyr=r(_vt,"from_config()"),_vt.forEach(t),pyr=r(yQ,`class
method.`),yQ.forEach(t),_yr=i(Ti),oL=n(Ti,"P",{});var r$e=s(oL);uyr=r(r$e,"This class cannot be instantiated directly using "),z5e=n(r$e,"CODE",{});var uvt=s(z5e);byr=r(uvt,"__init__()"),uvt.forEach(t),vyr=r(r$e," (throws an error)."),r$e.forEach(t),Tyr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(rL.$$.fragment,Fi),Fyr=i(Fi),W5e=n(Fi,"P",{});var bvt=s(W5e);Cyr=r(bvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bvt.forEach(t),Myr=i(Fi),hf=n(Fi,"P",{});var wQ=s(hf);Eyr=r(wQ,`Note:
Loading a model from its configuration file does `),Q5e=n(wQ,"STRONG",{});var vvt=s(Q5e);yyr=r(vvt,"not"),vvt.forEach(t),wyr=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),H5e=n(wQ,"CODE",{});var Tvt=s(H5e);Ayr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),Lyr=r(wQ,"to load the model weights."),wQ.forEach(t),Byr=i(Fi),U5e=n(Fi,"P",{});var Fvt=s(U5e);xyr=r(Fvt,"Examples:"),Fvt.forEach(t),kyr=i(Fi),m(tL.$$.fragment,Fi),Fi.forEach(t),Ryr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(aL.$$.fragment,Ra),Syr=i(Ra),J5e=n(Ra,"P",{});var Cvt=s(J5e);Pyr=r(Cvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cvt.forEach(t),$yr=i(Ra),Sn=n(Ra,"P",{});var ZE=s(Sn);Iyr=r(ZE,"The model class to instantiate is selected based on the "),Y5e=n(ZE,"CODE",{});var Mvt=s(Y5e);Nyr=r(Mvt,"model_type"),Mvt.forEach(t),Dyr=r(ZE,` property of the config object (either
passed as an argument or loaded from `),K5e=n(ZE,"CODE",{});var Evt=s(K5e);jyr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),qyr=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(ZE,"CODE",{});var yvt=s(Z5e);Gyr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),Oyr=r(ZE,":"),ZE.forEach(t),Xyr=i(Ra),Ee=n(Ra,"UL",{});var lo=s(Ee);s4=n(lo,"LI",{});var cxe=s(s4);e2e=n(cxe,"STRONG",{});var wvt=s(e2e);Vyr=r(wvt,"bart"),wvt.forEach(t),zyr=r(cxe," \u2014 "),ZV=n(cxe,"A",{href:!0});var Avt=s(ZV);Wyr=r(Avt,"FlaxBartForConditionalGeneration"),Avt.forEach(t),Qyr=r(cxe," (BART model)"),cxe.forEach(t),Hyr=i(lo),l4=n(lo,"LI",{});var fxe=s(l4);o2e=n(fxe,"STRONG",{});var Lvt=s(o2e);Uyr=r(Lvt,"blenderbot"),Lvt.forEach(t),Jyr=r(fxe," \u2014 "),ez=n(fxe,"A",{href:!0});var Bvt=s(ez);Yyr=r(Bvt,"FlaxBlenderbotForConditionalGeneration"),Bvt.forEach(t),Kyr=r(fxe," (Blenderbot model)"),fxe.forEach(t),Zyr=i(lo),i4=n(lo,"LI",{});var mxe=s(i4);r2e=n(mxe,"STRONG",{});var xvt=s(r2e);ewr=r(xvt,"blenderbot-small"),xvt.forEach(t),owr=r(mxe," \u2014 "),oz=n(mxe,"A",{href:!0});var kvt=s(oz);rwr=r(kvt,"FlaxBlenderbotSmallForConditionalGeneration"),kvt.forEach(t),twr=r(mxe," (BlenderbotSmall model)"),mxe.forEach(t),awr=i(lo),d4=n(lo,"LI",{});var gxe=s(d4);t2e=n(gxe,"STRONG",{});var Rvt=s(t2e);nwr=r(Rvt,"encoder-decoder"),Rvt.forEach(t),swr=r(gxe," \u2014 "),rz=n(gxe,"A",{href:!0});var Svt=s(rz);lwr=r(Svt,"FlaxEncoderDecoderModel"),Svt.forEach(t),iwr=r(gxe," (Encoder decoder model)"),gxe.forEach(t),dwr=i(lo),c4=n(lo,"LI",{});var hxe=s(c4);a2e=n(hxe,"STRONG",{});var Pvt=s(a2e);cwr=r(Pvt,"marian"),Pvt.forEach(t),fwr=r(hxe," \u2014 "),tz=n(hxe,"A",{href:!0});var $vt=s(tz);mwr=r($vt,"FlaxMarianMTModel"),$vt.forEach(t),gwr=r(hxe," (Marian model)"),hxe.forEach(t),hwr=i(lo),f4=n(lo,"LI",{});var pxe=s(f4);n2e=n(pxe,"STRONG",{});var Ivt=s(n2e);pwr=r(Ivt,"mbart"),Ivt.forEach(t),_wr=r(pxe," \u2014 "),az=n(pxe,"A",{href:!0});var Nvt=s(az);uwr=r(Nvt,"FlaxMBartForConditionalGeneration"),Nvt.forEach(t),bwr=r(pxe," (mBART model)"),pxe.forEach(t),vwr=i(lo),m4=n(lo,"LI",{});var _xe=s(m4);s2e=n(_xe,"STRONG",{});var Dvt=s(s2e);Twr=r(Dvt,"mt5"),Dvt.forEach(t),Fwr=r(_xe," \u2014 "),nz=n(_xe,"A",{href:!0});var jvt=s(nz);Cwr=r(jvt,"FlaxMT5ForConditionalGeneration"),jvt.forEach(t),Mwr=r(_xe," (mT5 model)"),_xe.forEach(t),Ewr=i(lo),g4=n(lo,"LI",{});var uxe=s(g4);l2e=n(uxe,"STRONG",{});var qvt=s(l2e);ywr=r(qvt,"pegasus"),qvt.forEach(t),wwr=r(uxe," \u2014 "),sz=n(uxe,"A",{href:!0});var Gvt=s(sz);Awr=r(Gvt,"FlaxPegasusForConditionalGeneration"),Gvt.forEach(t),Lwr=r(uxe," (Pegasus model)"),uxe.forEach(t),Bwr=i(lo),h4=n(lo,"LI",{});var bxe=s(h4);i2e=n(bxe,"STRONG",{});var Ovt=s(i2e);xwr=r(Ovt,"t5"),Ovt.forEach(t),kwr=r(bxe," \u2014 "),lz=n(bxe,"A",{href:!0});var Xvt=s(lz);Rwr=r(Xvt,"FlaxT5ForConditionalGeneration"),Xvt.forEach(t),Swr=r(bxe," (T5 model)"),bxe.forEach(t),lo.forEach(t),Pwr=i(Ra),d2e=n(Ra,"P",{});var Vvt=s(d2e);$wr=r(Vvt,"Examples:"),Vvt.forEach(t),Iwr=i(Ra),m(nL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),WRe=i(c),pf=n(c,"H2",{class:!0});var t$e=s(pf);p4=n(t$e,"A",{id:!0,class:!0,href:!0});var zvt=s(p4);c2e=n(zvt,"SPAN",{});var Wvt=s(c2e);m(sL.$$.fragment,Wvt),Wvt.forEach(t),zvt.forEach(t),Nwr=i(t$e),f2e=n(t$e,"SPAN",{});var Qvt=s(f2e);Dwr=r(Qvt,"FlaxAutoModelForSequenceClassification"),Qvt.forEach(t),t$e.forEach(t),QRe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(lL.$$.fragment,Ci),jwr=i(Ci),_f=n(Ci,"P",{});var AQ=s(_f);qwr=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),m2e=n(AQ,"CODE",{});var Hvt=s(m2e);Gwr=r(Hvt,"from_pretrained()"),Hvt.forEach(t),Owr=r(AQ,"class method or the "),g2e=n(AQ,"CODE",{});var Uvt=s(g2e);Xwr=r(Uvt,"from_config()"),Uvt.forEach(t),Vwr=r(AQ,`class
method.`),AQ.forEach(t),zwr=i(Ci),iL=n(Ci,"P",{});var a$e=s(iL);Wwr=r(a$e,"This class cannot be instantiated directly using "),h2e=n(a$e,"CODE",{});var Jvt=s(h2e);Qwr=r(Jvt,"__init__()"),Jvt.forEach(t),Hwr=r(a$e," (throws an error)."),a$e.forEach(t),Uwr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(dL.$$.fragment,Mi),Jwr=i(Mi),p2e=n(Mi,"P",{});var Yvt=s(p2e);Ywr=r(Yvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Yvt.forEach(t),Kwr=i(Mi),uf=n(Mi,"P",{});var LQ=s(uf);Zwr=r(LQ,`Note:
Loading a model from its configuration file does `),_2e=n(LQ,"STRONG",{});var Kvt=s(_2e);e6r=r(Kvt,"not"),Kvt.forEach(t),o6r=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=n(LQ,"CODE",{});var Zvt=s(u2e);r6r=r(Zvt,"from_pretrained()"),Zvt.forEach(t),t6r=r(LQ,"to load the model weights."),LQ.forEach(t),a6r=i(Mi),b2e=n(Mi,"P",{});var eTt=s(b2e);n6r=r(eTt,"Examples:"),eTt.forEach(t),s6r=i(Mi),m(cL.$$.fragment,Mi),Mi.forEach(t),l6r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(fL.$$.fragment,Sa),i6r=i(Sa),v2e=n(Sa,"P",{});var oTt=s(v2e);d6r=r(oTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oTt.forEach(t),c6r=i(Sa),Pn=n(Sa,"P",{});var e3=s(Pn);f6r=r(e3,"The model class to instantiate is selected based on the "),T2e=n(e3,"CODE",{});var rTt=s(T2e);m6r=r(rTt,"model_type"),rTt.forEach(t),g6r=r(e3,` property of the config object (either
passed as an argument or loaded from `),F2e=n(e3,"CODE",{});var tTt=s(F2e);h6r=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),p6r=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(e3,"CODE",{});var aTt=s(C2e);_6r=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),u6r=r(e3,":"),e3.forEach(t),b6r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);_4=n(Ae,"LI",{});var vxe=s(_4);M2e=n(vxe,"STRONG",{});var nTt=s(M2e);v6r=r(nTt,"albert"),nTt.forEach(t),T6r=r(vxe," \u2014 "),iz=n(vxe,"A",{href:!0});var sTt=s(iz);F6r=r(sTt,"FlaxAlbertForSequenceClassification"),sTt.forEach(t),C6r=r(vxe," (ALBERT model)"),vxe.forEach(t),M6r=i(Ae),u4=n(Ae,"LI",{});var Txe=s(u4);E2e=n(Txe,"STRONG",{});var lTt=s(E2e);E6r=r(lTt,"bart"),lTt.forEach(t),y6r=r(Txe," \u2014 "),dz=n(Txe,"A",{href:!0});var iTt=s(dz);w6r=r(iTt,"FlaxBartForSequenceClassification"),iTt.forEach(t),A6r=r(Txe," (BART model)"),Txe.forEach(t),L6r=i(Ae),b4=n(Ae,"LI",{});var Fxe=s(b4);y2e=n(Fxe,"STRONG",{});var dTt=s(y2e);B6r=r(dTt,"bert"),dTt.forEach(t),x6r=r(Fxe," \u2014 "),cz=n(Fxe,"A",{href:!0});var cTt=s(cz);k6r=r(cTt,"FlaxBertForSequenceClassification"),cTt.forEach(t),R6r=r(Fxe," (BERT model)"),Fxe.forEach(t),S6r=i(Ae),v4=n(Ae,"LI",{});var Cxe=s(v4);w2e=n(Cxe,"STRONG",{});var fTt=s(w2e);P6r=r(fTt,"big_bird"),fTt.forEach(t),$6r=r(Cxe," \u2014 "),fz=n(Cxe,"A",{href:!0});var mTt=s(fz);I6r=r(mTt,"FlaxBigBirdForSequenceClassification"),mTt.forEach(t),N6r=r(Cxe," (BigBird model)"),Cxe.forEach(t),D6r=i(Ae),T4=n(Ae,"LI",{});var Mxe=s(T4);A2e=n(Mxe,"STRONG",{});var gTt=s(A2e);j6r=r(gTt,"distilbert"),gTt.forEach(t),q6r=r(Mxe," \u2014 "),mz=n(Mxe,"A",{href:!0});var hTt=s(mz);G6r=r(hTt,"FlaxDistilBertForSequenceClassification"),hTt.forEach(t),O6r=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),X6r=i(Ae),F4=n(Ae,"LI",{});var Exe=s(F4);L2e=n(Exe,"STRONG",{});var pTt=s(L2e);V6r=r(pTt,"electra"),pTt.forEach(t),z6r=r(Exe," \u2014 "),gz=n(Exe,"A",{href:!0});var _Tt=s(gz);W6r=r(_Tt,"FlaxElectraForSequenceClassification"),_Tt.forEach(t),Q6r=r(Exe," (ELECTRA model)"),Exe.forEach(t),H6r=i(Ae),C4=n(Ae,"LI",{});var yxe=s(C4);B2e=n(yxe,"STRONG",{});var uTt=s(B2e);U6r=r(uTt,"mbart"),uTt.forEach(t),J6r=r(yxe," \u2014 "),hz=n(yxe,"A",{href:!0});var bTt=s(hz);Y6r=r(bTt,"FlaxMBartForSequenceClassification"),bTt.forEach(t),K6r=r(yxe," (mBART model)"),yxe.forEach(t),Z6r=i(Ae),M4=n(Ae,"LI",{});var wxe=s(M4);x2e=n(wxe,"STRONG",{});var vTt=s(x2e);eAr=r(vTt,"roberta"),vTt.forEach(t),oAr=r(wxe," \u2014 "),pz=n(wxe,"A",{href:!0});var TTt=s(pz);rAr=r(TTt,"FlaxRobertaForSequenceClassification"),TTt.forEach(t),tAr=r(wxe," (RoBERTa model)"),wxe.forEach(t),aAr=i(Ae),E4=n(Ae,"LI",{});var Axe=s(E4);k2e=n(Axe,"STRONG",{});var FTt=s(k2e);nAr=r(FTt,"roformer"),FTt.forEach(t),sAr=r(Axe," \u2014 "),_z=n(Axe,"A",{href:!0});var CTt=s(_z);lAr=r(CTt,"FlaxRoFormerForSequenceClassification"),CTt.forEach(t),iAr=r(Axe," (RoFormer model)"),Axe.forEach(t),dAr=i(Ae),y4=n(Ae,"LI",{});var Lxe=s(y4);R2e=n(Lxe,"STRONG",{});var MTt=s(R2e);cAr=r(MTt,"xlm-roberta"),MTt.forEach(t),fAr=r(Lxe," \u2014 "),uz=n(Lxe,"A",{href:!0});var ETt=s(uz);mAr=r(ETt,"FlaxXLMRobertaForSequenceClassification"),ETt.forEach(t),gAr=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),Ae.forEach(t),hAr=i(Sa),S2e=n(Sa,"P",{});var yTt=s(S2e);pAr=r(yTt,"Examples:"),yTt.forEach(t),_Ar=i(Sa),m(mL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),HRe=i(c),bf=n(c,"H2",{class:!0});var n$e=s(bf);w4=n(n$e,"A",{id:!0,class:!0,href:!0});var wTt=s(w4);P2e=n(wTt,"SPAN",{});var ATt=s(P2e);m(gL.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),uAr=i(n$e),$2e=n(n$e,"SPAN",{});var LTt=s($2e);bAr=r(LTt,"FlaxAutoModelForQuestionAnswering"),LTt.forEach(t),n$e.forEach(t),URe=i(c),Dr=n(c,"DIV",{class:!0});var Ei=s(Dr);m(hL.$$.fragment,Ei),vAr=i(Ei),vf=n(Ei,"P",{});var BQ=s(vf);TAr=r(BQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),I2e=n(BQ,"CODE",{});var BTt=s(I2e);FAr=r(BTt,"from_pretrained()"),BTt.forEach(t),CAr=r(BQ,"class method or the "),N2e=n(BQ,"CODE",{});var xTt=s(N2e);MAr=r(xTt,"from_config()"),xTt.forEach(t),EAr=r(BQ,`class
method.`),BQ.forEach(t),yAr=i(Ei),pL=n(Ei,"P",{});var s$e=s(pL);wAr=r(s$e,"This class cannot be instantiated directly using "),D2e=n(s$e,"CODE",{});var kTt=s(D2e);AAr=r(kTt,"__init__()"),kTt.forEach(t),LAr=r(s$e," (throws an error)."),s$e.forEach(t),BAr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(_L.$$.fragment,yi),xAr=i(yi),j2e=n(yi,"P",{});var RTt=s(j2e);kAr=r(RTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RTt.forEach(t),RAr=i(yi),Tf=n(yi,"P",{});var xQ=s(Tf);SAr=r(xQ,`Note:
Loading a model from its configuration file does `),q2e=n(xQ,"STRONG",{});var STt=s(q2e);PAr=r(STt,"not"),STt.forEach(t),$Ar=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),G2e=n(xQ,"CODE",{});var PTt=s(G2e);IAr=r(PTt,"from_pretrained()"),PTt.forEach(t),NAr=r(xQ,"to load the model weights."),xQ.forEach(t),DAr=i(yi),O2e=n(yi,"P",{});var $Tt=s(O2e);jAr=r($Tt,"Examples:"),$Tt.forEach(t),qAr=i(yi),m(uL.$$.fragment,yi),yi.forEach(t),GAr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(bL.$$.fragment,Pa),OAr=i(Pa),X2e=n(Pa,"P",{});var ITt=s(X2e);XAr=r(ITt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ITt.forEach(t),VAr=i(Pa),$n=n(Pa,"P",{});var o3=s($n);zAr=r(o3,"The model class to instantiate is selected based on the "),V2e=n(o3,"CODE",{});var NTt=s(V2e);WAr=r(NTt,"model_type"),NTt.forEach(t),QAr=r(o3,` property of the config object (either
passed as an argument or loaded from `),z2e=n(o3,"CODE",{});var DTt=s(z2e);HAr=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),UAr=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(o3,"CODE",{});var jTt=s(W2e);JAr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),YAr=r(o3,":"),o3.forEach(t),KAr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);A4=n(Le,"LI",{});var Bxe=s(A4);Q2e=n(Bxe,"STRONG",{});var qTt=s(Q2e);ZAr=r(qTt,"albert"),qTt.forEach(t),e0r=r(Bxe," \u2014 "),bz=n(Bxe,"A",{href:!0});var GTt=s(bz);o0r=r(GTt,"FlaxAlbertForQuestionAnswering"),GTt.forEach(t),r0r=r(Bxe," (ALBERT model)"),Bxe.forEach(t),t0r=i(Le),L4=n(Le,"LI",{});var xxe=s(L4);H2e=n(xxe,"STRONG",{});var OTt=s(H2e);a0r=r(OTt,"bart"),OTt.forEach(t),n0r=r(xxe," \u2014 "),vz=n(xxe,"A",{href:!0});var XTt=s(vz);s0r=r(XTt,"FlaxBartForQuestionAnswering"),XTt.forEach(t),l0r=r(xxe," (BART model)"),xxe.forEach(t),i0r=i(Le),B4=n(Le,"LI",{});var kxe=s(B4);U2e=n(kxe,"STRONG",{});var VTt=s(U2e);d0r=r(VTt,"bert"),VTt.forEach(t),c0r=r(kxe," \u2014 "),Tz=n(kxe,"A",{href:!0});var zTt=s(Tz);f0r=r(zTt,"FlaxBertForQuestionAnswering"),zTt.forEach(t),m0r=r(kxe," (BERT model)"),kxe.forEach(t),g0r=i(Le),x4=n(Le,"LI",{});var Rxe=s(x4);J2e=n(Rxe,"STRONG",{});var WTt=s(J2e);h0r=r(WTt,"big_bird"),WTt.forEach(t),p0r=r(Rxe," \u2014 "),Fz=n(Rxe,"A",{href:!0});var QTt=s(Fz);_0r=r(QTt,"FlaxBigBirdForQuestionAnswering"),QTt.forEach(t),u0r=r(Rxe," (BigBird model)"),Rxe.forEach(t),b0r=i(Le),k4=n(Le,"LI",{});var Sxe=s(k4);Y2e=n(Sxe,"STRONG",{});var HTt=s(Y2e);v0r=r(HTt,"distilbert"),HTt.forEach(t),T0r=r(Sxe," \u2014 "),Cz=n(Sxe,"A",{href:!0});var UTt=s(Cz);F0r=r(UTt,"FlaxDistilBertForQuestionAnswering"),UTt.forEach(t),C0r=r(Sxe," (DistilBERT model)"),Sxe.forEach(t),M0r=i(Le),R4=n(Le,"LI",{});var Pxe=s(R4);K2e=n(Pxe,"STRONG",{});var JTt=s(K2e);E0r=r(JTt,"electra"),JTt.forEach(t),y0r=r(Pxe," \u2014 "),Mz=n(Pxe,"A",{href:!0});var YTt=s(Mz);w0r=r(YTt,"FlaxElectraForQuestionAnswering"),YTt.forEach(t),A0r=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),L0r=i(Le),S4=n(Le,"LI",{});var $xe=s(S4);Z2e=n($xe,"STRONG",{});var KTt=s(Z2e);B0r=r(KTt,"mbart"),KTt.forEach(t),x0r=r($xe," \u2014 "),Ez=n($xe,"A",{href:!0});var ZTt=s(Ez);k0r=r(ZTt,"FlaxMBartForQuestionAnswering"),ZTt.forEach(t),R0r=r($xe," (mBART model)"),$xe.forEach(t),S0r=i(Le),P4=n(Le,"LI",{});var Ixe=s(P4);eve=n(Ixe,"STRONG",{});var eFt=s(eve);P0r=r(eFt,"roberta"),eFt.forEach(t),$0r=r(Ixe," \u2014 "),yz=n(Ixe,"A",{href:!0});var oFt=s(yz);I0r=r(oFt,"FlaxRobertaForQuestionAnswering"),oFt.forEach(t),N0r=r(Ixe," (RoBERTa model)"),Ixe.forEach(t),D0r=i(Le),$4=n(Le,"LI",{});var Nxe=s($4);ove=n(Nxe,"STRONG",{});var rFt=s(ove);j0r=r(rFt,"roformer"),rFt.forEach(t),q0r=r(Nxe," \u2014 "),wz=n(Nxe,"A",{href:!0});var tFt=s(wz);G0r=r(tFt,"FlaxRoFormerForQuestionAnswering"),tFt.forEach(t),O0r=r(Nxe," (RoFormer model)"),Nxe.forEach(t),X0r=i(Le),I4=n(Le,"LI",{});var Dxe=s(I4);rve=n(Dxe,"STRONG",{});var aFt=s(rve);V0r=r(aFt,"xlm-roberta"),aFt.forEach(t),z0r=r(Dxe," \u2014 "),Az=n(Dxe,"A",{href:!0});var nFt=s(Az);W0r=r(nFt,"FlaxXLMRobertaForQuestionAnswering"),nFt.forEach(t),Q0r=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),Le.forEach(t),H0r=i(Pa),tve=n(Pa,"P",{});var sFt=s(tve);U0r=r(sFt,"Examples:"),sFt.forEach(t),J0r=i(Pa),m(vL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),JRe=i(c),Ff=n(c,"H2",{class:!0});var l$e=s(Ff);N4=n(l$e,"A",{id:!0,class:!0,href:!0});var lFt=s(N4);ave=n(lFt,"SPAN",{});var iFt=s(ave);m(TL.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),Y0r=i(l$e),nve=n(l$e,"SPAN",{});var dFt=s(nve);K0r=r(dFt,"FlaxAutoModelForTokenClassification"),dFt.forEach(t),l$e.forEach(t),YRe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);m(FL.$$.fragment,wi),Z0r=i(wi),Cf=n(wi,"P",{});var kQ=s(Cf);eLr=r(kQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sve=n(kQ,"CODE",{});var cFt=s(sve);oLr=r(cFt,"from_pretrained()"),cFt.forEach(t),rLr=r(kQ,"class method or the "),lve=n(kQ,"CODE",{});var fFt=s(lve);tLr=r(fFt,"from_config()"),fFt.forEach(t),aLr=r(kQ,`class
method.`),kQ.forEach(t),nLr=i(wi),CL=n(wi,"P",{});var i$e=s(CL);sLr=r(i$e,"This class cannot be instantiated directly using "),ive=n(i$e,"CODE",{});var mFt=s(ive);lLr=r(mFt,"__init__()"),mFt.forEach(t),iLr=r(i$e," (throws an error)."),i$e.forEach(t),dLr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(ML.$$.fragment,Ai),cLr=i(Ai),dve=n(Ai,"P",{});var gFt=s(dve);fLr=r(gFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gFt.forEach(t),mLr=i(Ai),Mf=n(Ai,"P",{});var RQ=s(Mf);gLr=r(RQ,`Note:
Loading a model from its configuration file does `),cve=n(RQ,"STRONG",{});var hFt=s(cve);hLr=r(hFt,"not"),hFt.forEach(t),pLr=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fve=n(RQ,"CODE",{});var pFt=s(fve);_Lr=r(pFt,"from_pretrained()"),pFt.forEach(t),uLr=r(RQ,"to load the model weights."),RQ.forEach(t),bLr=i(Ai),mve=n(Ai,"P",{});var _Ft=s(mve);vLr=r(_Ft,"Examples:"),_Ft.forEach(t),TLr=i(Ai),m(EL.$$.fragment,Ai),Ai.forEach(t),FLr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(yL.$$.fragment,$a),CLr=i($a),gve=n($a,"P",{});var uFt=s(gve);MLr=r(uFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uFt.forEach(t),ELr=i($a),In=n($a,"P",{});var r3=s(In);yLr=r(r3,"The model class to instantiate is selected based on the "),hve=n(r3,"CODE",{});var bFt=s(hve);wLr=r(bFt,"model_type"),bFt.forEach(t),ALr=r(r3,` property of the config object (either
passed as an argument or loaded from `),pve=n(r3,"CODE",{});var vFt=s(pve);LLr=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),BLr=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(r3,"CODE",{});var TFt=s(_ve);xLr=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),kLr=r(r3,":"),r3.forEach(t),RLr=i($a),Se=n($a,"UL",{});var Oo=s(Se);D4=n(Oo,"LI",{});var jxe=s(D4);uve=n(jxe,"STRONG",{});var FFt=s(uve);SLr=r(FFt,"albert"),FFt.forEach(t),PLr=r(jxe," \u2014 "),Lz=n(jxe,"A",{href:!0});var CFt=s(Lz);$Lr=r(CFt,"FlaxAlbertForTokenClassification"),CFt.forEach(t),ILr=r(jxe," (ALBERT model)"),jxe.forEach(t),NLr=i(Oo),j4=n(Oo,"LI",{});var qxe=s(j4);bve=n(qxe,"STRONG",{});var MFt=s(bve);DLr=r(MFt,"bert"),MFt.forEach(t),jLr=r(qxe," \u2014 "),Bz=n(qxe,"A",{href:!0});var EFt=s(Bz);qLr=r(EFt,"FlaxBertForTokenClassification"),EFt.forEach(t),GLr=r(qxe," (BERT model)"),qxe.forEach(t),OLr=i(Oo),q4=n(Oo,"LI",{});var Gxe=s(q4);vve=n(Gxe,"STRONG",{});var yFt=s(vve);XLr=r(yFt,"big_bird"),yFt.forEach(t),VLr=r(Gxe," \u2014 "),xz=n(Gxe,"A",{href:!0});var wFt=s(xz);zLr=r(wFt,"FlaxBigBirdForTokenClassification"),wFt.forEach(t),WLr=r(Gxe," (BigBird model)"),Gxe.forEach(t),QLr=i(Oo),G4=n(Oo,"LI",{});var Oxe=s(G4);Tve=n(Oxe,"STRONG",{});var AFt=s(Tve);HLr=r(AFt,"distilbert"),AFt.forEach(t),ULr=r(Oxe," \u2014 "),kz=n(Oxe,"A",{href:!0});var LFt=s(kz);JLr=r(LFt,"FlaxDistilBertForTokenClassification"),LFt.forEach(t),YLr=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),KLr=i(Oo),O4=n(Oo,"LI",{});var Xxe=s(O4);Fve=n(Xxe,"STRONG",{});var BFt=s(Fve);ZLr=r(BFt,"electra"),BFt.forEach(t),e8r=r(Xxe," \u2014 "),Rz=n(Xxe,"A",{href:!0});var xFt=s(Rz);o8r=r(xFt,"FlaxElectraForTokenClassification"),xFt.forEach(t),r8r=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),t8r=i(Oo),X4=n(Oo,"LI",{});var Vxe=s(X4);Cve=n(Vxe,"STRONG",{});var kFt=s(Cve);a8r=r(kFt,"roberta"),kFt.forEach(t),n8r=r(Vxe," \u2014 "),Sz=n(Vxe,"A",{href:!0});var RFt=s(Sz);s8r=r(RFt,"FlaxRobertaForTokenClassification"),RFt.forEach(t),l8r=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),i8r=i(Oo),V4=n(Oo,"LI",{});var zxe=s(V4);Mve=n(zxe,"STRONG",{});var SFt=s(Mve);d8r=r(SFt,"roformer"),SFt.forEach(t),c8r=r(zxe," \u2014 "),Pz=n(zxe,"A",{href:!0});var PFt=s(Pz);f8r=r(PFt,"FlaxRoFormerForTokenClassification"),PFt.forEach(t),m8r=r(zxe," (RoFormer model)"),zxe.forEach(t),g8r=i(Oo),z4=n(Oo,"LI",{});var Wxe=s(z4);Eve=n(Wxe,"STRONG",{});var $Ft=s(Eve);h8r=r($Ft,"xlm-roberta"),$Ft.forEach(t),p8r=r(Wxe," \u2014 "),$z=n(Wxe,"A",{href:!0});var IFt=s($z);_8r=r(IFt,"FlaxXLMRobertaForTokenClassification"),IFt.forEach(t),u8r=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),Oo.forEach(t),b8r=i($a),yve=n($a,"P",{});var NFt=s(yve);v8r=r(NFt,"Examples:"),NFt.forEach(t),T8r=i($a),m(wL.$$.fragment,$a),$a.forEach(t),wi.forEach(t),KRe=i(c),Ef=n(c,"H2",{class:!0});var d$e=s(Ef);W4=n(d$e,"A",{id:!0,class:!0,href:!0});var DFt=s(W4);wve=n(DFt,"SPAN",{});var jFt=s(wve);m(AL.$$.fragment,jFt),jFt.forEach(t),DFt.forEach(t),F8r=i(d$e),Ave=n(d$e,"SPAN",{});var qFt=s(Ave);C8r=r(qFt,"FlaxAutoModelForMultipleChoice"),qFt.forEach(t),d$e.forEach(t),ZRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(LL.$$.fragment,Li),M8r=i(Li),yf=n(Li,"P",{});var SQ=s(yf);E8r=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Lve=n(SQ,"CODE",{});var GFt=s(Lve);y8r=r(GFt,"from_pretrained()"),GFt.forEach(t),w8r=r(SQ,"class method or the "),Bve=n(SQ,"CODE",{});var OFt=s(Bve);A8r=r(OFt,"from_config()"),OFt.forEach(t),L8r=r(SQ,`class
method.`),SQ.forEach(t),B8r=i(Li),BL=n(Li,"P",{});var c$e=s(BL);x8r=r(c$e,"This class cannot be instantiated directly using "),xve=n(c$e,"CODE",{});var XFt=s(xve);k8r=r(XFt,"__init__()"),XFt.forEach(t),R8r=r(c$e," (throws an error)."),c$e.forEach(t),S8r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(xL.$$.fragment,Bi),P8r=i(Bi),kve=n(Bi,"P",{});var VFt=s(kve);$8r=r(VFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VFt.forEach(t),I8r=i(Bi),wf=n(Bi,"P",{});var PQ=s(wf);N8r=r(PQ,`Note:
Loading a model from its configuration file does `),Rve=n(PQ,"STRONG",{});var zFt=s(Rve);D8r=r(zFt,"not"),zFt.forEach(t),j8r=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sve=n(PQ,"CODE",{});var WFt=s(Sve);q8r=r(WFt,"from_pretrained()"),WFt.forEach(t),G8r=r(PQ,"to load the model weights."),PQ.forEach(t),O8r=i(Bi),Pve=n(Bi,"P",{});var QFt=s(Pve);X8r=r(QFt,"Examples:"),QFt.forEach(t),V8r=i(Bi),m(kL.$$.fragment,Bi),Bi.forEach(t),z8r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(RL.$$.fragment,Ia),W8r=i(Ia),$ve=n(Ia,"P",{});var HFt=s($ve);Q8r=r(HFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HFt.forEach(t),H8r=i(Ia),Nn=n(Ia,"P",{});var t3=s(Nn);U8r=r(t3,"The model class to instantiate is selected based on the "),Ive=n(t3,"CODE",{});var UFt=s(Ive);J8r=r(UFt,"model_type"),UFt.forEach(t),Y8r=r(t3,` property of the config object (either
passed as an argument or loaded from `),Nve=n(t3,"CODE",{});var JFt=s(Nve);K8r=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),Z8r=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(t3,"CODE",{});var YFt=s(Dve);e7r=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),o7r=r(t3,":"),t3.forEach(t),r7r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);Q4=n(Xo,"LI",{});var Qxe=s(Q4);jve=n(Qxe,"STRONG",{});var KFt=s(jve);t7r=r(KFt,"albert"),KFt.forEach(t),a7r=r(Qxe," \u2014 "),Iz=n(Qxe,"A",{href:!0});var ZFt=s(Iz);n7r=r(ZFt,"FlaxAlbertForMultipleChoice"),ZFt.forEach(t),s7r=r(Qxe," (ALBERT model)"),Qxe.forEach(t),l7r=i(Xo),H4=n(Xo,"LI",{});var Hxe=s(H4);qve=n(Hxe,"STRONG",{});var eCt=s(qve);i7r=r(eCt,"bert"),eCt.forEach(t),d7r=r(Hxe," \u2014 "),Nz=n(Hxe,"A",{href:!0});var oCt=s(Nz);c7r=r(oCt,"FlaxBertForMultipleChoice"),oCt.forEach(t),f7r=r(Hxe," (BERT model)"),Hxe.forEach(t),m7r=i(Xo),U4=n(Xo,"LI",{});var Uxe=s(U4);Gve=n(Uxe,"STRONG",{});var rCt=s(Gve);g7r=r(rCt,"big_bird"),rCt.forEach(t),h7r=r(Uxe," \u2014 "),Dz=n(Uxe,"A",{href:!0});var tCt=s(Dz);p7r=r(tCt,"FlaxBigBirdForMultipleChoice"),tCt.forEach(t),_7r=r(Uxe," (BigBird model)"),Uxe.forEach(t),u7r=i(Xo),J4=n(Xo,"LI",{});var Jxe=s(J4);Ove=n(Jxe,"STRONG",{});var aCt=s(Ove);b7r=r(aCt,"distilbert"),aCt.forEach(t),v7r=r(Jxe," \u2014 "),jz=n(Jxe,"A",{href:!0});var nCt=s(jz);T7r=r(nCt,"FlaxDistilBertForMultipleChoice"),nCt.forEach(t),F7r=r(Jxe," (DistilBERT model)"),Jxe.forEach(t),C7r=i(Xo),Y4=n(Xo,"LI",{});var Yxe=s(Y4);Xve=n(Yxe,"STRONG",{});var sCt=s(Xve);M7r=r(sCt,"electra"),sCt.forEach(t),E7r=r(Yxe," \u2014 "),qz=n(Yxe,"A",{href:!0});var lCt=s(qz);y7r=r(lCt,"FlaxElectraForMultipleChoice"),lCt.forEach(t),w7r=r(Yxe," (ELECTRA model)"),Yxe.forEach(t),A7r=i(Xo),K4=n(Xo,"LI",{});var Kxe=s(K4);Vve=n(Kxe,"STRONG",{});var iCt=s(Vve);L7r=r(iCt,"roberta"),iCt.forEach(t),B7r=r(Kxe," \u2014 "),Gz=n(Kxe,"A",{href:!0});var dCt=s(Gz);x7r=r(dCt,"FlaxRobertaForMultipleChoice"),dCt.forEach(t),k7r=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),R7r=i(Xo),Z4=n(Xo,"LI",{});var Zxe=s(Z4);zve=n(Zxe,"STRONG",{});var cCt=s(zve);S7r=r(cCt,"roformer"),cCt.forEach(t),P7r=r(Zxe," \u2014 "),Oz=n(Zxe,"A",{href:!0});var fCt=s(Oz);$7r=r(fCt,"FlaxRoFormerForMultipleChoice"),fCt.forEach(t),I7r=r(Zxe," (RoFormer model)"),Zxe.forEach(t),N7r=i(Xo),eE=n(Xo,"LI",{});var eke=s(eE);Wve=n(eke,"STRONG",{});var mCt=s(Wve);D7r=r(mCt,"xlm-roberta"),mCt.forEach(t),j7r=r(eke," \u2014 "),Xz=n(eke,"A",{href:!0});var gCt=s(Xz);q7r=r(gCt,"FlaxXLMRobertaForMultipleChoice"),gCt.forEach(t),G7r=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),Xo.forEach(t),O7r=i(Ia),Qve=n(Ia,"P",{});var hCt=s(Qve);X7r=r(hCt,"Examples:"),hCt.forEach(t),V7r=i(Ia),m(SL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),eSe=i(c),Af=n(c,"H2",{class:!0});var f$e=s(Af);oE=n(f$e,"A",{id:!0,class:!0,href:!0});var pCt=s(oE);Hve=n(pCt,"SPAN",{});var _Ct=s(Hve);m(PL.$$.fragment,_Ct),_Ct.forEach(t),pCt.forEach(t),z7r=i(f$e),Uve=n(f$e,"SPAN",{});var uCt=s(Uve);W7r=r(uCt,"FlaxAutoModelForNextSentencePrediction"),uCt.forEach(t),f$e.forEach(t),oSe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m($L.$$.fragment,xi),Q7r=i(xi),Lf=n(xi,"P",{});var $Q=s(Lf);H7r=r($Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jve=n($Q,"CODE",{});var bCt=s(Jve);U7r=r(bCt,"from_pretrained()"),bCt.forEach(t),J7r=r($Q,"class method or the "),Yve=n($Q,"CODE",{});var vCt=s(Yve);Y7r=r(vCt,"from_config()"),vCt.forEach(t),K7r=r($Q,`class
method.`),$Q.forEach(t),Z7r=i(xi),IL=n(xi,"P",{});var m$e=s(IL);eBr=r(m$e,"This class cannot be instantiated directly using "),Kve=n(m$e,"CODE",{});var TCt=s(Kve);oBr=r(TCt,"__init__()"),TCt.forEach(t),rBr=r(m$e," (throws an error)."),m$e.forEach(t),tBr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(NL.$$.fragment,ki),aBr=i(ki),Zve=n(ki,"P",{});var FCt=s(Zve);nBr=r(FCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FCt.forEach(t),sBr=i(ki),Bf=n(ki,"P",{});var IQ=s(Bf);lBr=r(IQ,`Note:
Loading a model from its configuration file does `),eTe=n(IQ,"STRONG",{});var CCt=s(eTe);iBr=r(CCt,"not"),CCt.forEach(t),dBr=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oTe=n(IQ,"CODE",{});var MCt=s(oTe);cBr=r(MCt,"from_pretrained()"),MCt.forEach(t),fBr=r(IQ,"to load the model weights."),IQ.forEach(t),mBr=i(ki),rTe=n(ki,"P",{});var ECt=s(rTe);gBr=r(ECt,"Examples:"),ECt.forEach(t),hBr=i(ki),m(DL.$$.fragment,ki),ki.forEach(t),pBr=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);m(jL.$$.fragment,Na),_Br=i(Na),tTe=n(Na,"P",{});var yCt=s(tTe);uBr=r(yCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yCt.forEach(t),bBr=i(Na),Dn=n(Na,"P",{});var a3=s(Dn);vBr=r(a3,"The model class to instantiate is selected based on the "),aTe=n(a3,"CODE",{});var wCt=s(aTe);TBr=r(wCt,"model_type"),wCt.forEach(t),FBr=r(a3,` property of the config object (either
passed as an argument or loaded from `),nTe=n(a3,"CODE",{});var ACt=s(nTe);CBr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),MBr=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(a3,"CODE",{});var LCt=s(sTe);EBr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),yBr=r(a3,":"),a3.forEach(t),wBr=i(Na),lTe=n(Na,"UL",{});var BCt=s(lTe);rE=n(BCt,"LI",{});var oke=s(rE);iTe=n(oke,"STRONG",{});var xCt=s(iTe);ABr=r(xCt,"bert"),xCt.forEach(t),LBr=r(oke," \u2014 "),Vz=n(oke,"A",{href:!0});var kCt=s(Vz);BBr=r(kCt,"FlaxBertForNextSentencePrediction"),kCt.forEach(t),xBr=r(oke," (BERT model)"),oke.forEach(t),BCt.forEach(t),kBr=i(Na),dTe=n(Na,"P",{});var RCt=s(dTe);RBr=r(RCt,"Examples:"),RCt.forEach(t),SBr=i(Na),m(qL.$$.fragment,Na),Na.forEach(t),xi.forEach(t),rSe=i(c),xf=n(c,"H2",{class:!0});var g$e=s(xf);tE=n(g$e,"A",{id:!0,class:!0,href:!0});var SCt=s(tE);cTe=n(SCt,"SPAN",{});var PCt=s(cTe);m(GL.$$.fragment,PCt),PCt.forEach(t),SCt.forEach(t),PBr=i(g$e),fTe=n(g$e,"SPAN",{});var $Ct=s(fTe);$Br=r($Ct,"FlaxAutoModelForImageClassification"),$Ct.forEach(t),g$e.forEach(t),tSe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(OL.$$.fragment,Ri),IBr=i(Ri),kf=n(Ri,"P",{});var NQ=s(kf);NBr=r(NQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mTe=n(NQ,"CODE",{});var ICt=s(mTe);DBr=r(ICt,"from_pretrained()"),ICt.forEach(t),jBr=r(NQ,"class method or the "),gTe=n(NQ,"CODE",{});var NCt=s(gTe);qBr=r(NCt,"from_config()"),NCt.forEach(t),GBr=r(NQ,`class
method.`),NQ.forEach(t),OBr=i(Ri),XL=n(Ri,"P",{});var h$e=s(XL);XBr=r(h$e,"This class cannot be instantiated directly using "),hTe=n(h$e,"CODE",{});var DCt=s(hTe);VBr=r(DCt,"__init__()"),DCt.forEach(t),zBr=r(h$e," (throws an error)."),h$e.forEach(t),WBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(VL.$$.fragment,Si),QBr=i(Si),pTe=n(Si,"P",{});var jCt=s(pTe);HBr=r(jCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jCt.forEach(t),UBr=i(Si),Rf=n(Si,"P",{});var DQ=s(Rf);JBr=r(DQ,`Note:
Loading a model from its configuration file does `),_Te=n(DQ,"STRONG",{});var qCt=s(_Te);YBr=r(qCt,"not"),qCt.forEach(t),KBr=r(DQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uTe=n(DQ,"CODE",{});var GCt=s(uTe);ZBr=r(GCt,"from_pretrained()"),GCt.forEach(t),exr=r(DQ,"to load the model weights."),DQ.forEach(t),oxr=i(Si),bTe=n(Si,"P",{});var OCt=s(bTe);rxr=r(OCt,"Examples:"),OCt.forEach(t),txr=i(Si),m(zL.$$.fragment,Si),Si.forEach(t),axr=i(Ri),No=n(Ri,"DIV",{class:!0});var Da=s(No);m(WL.$$.fragment,Da),nxr=i(Da),vTe=n(Da,"P",{});var XCt=s(vTe);sxr=r(XCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XCt.forEach(t),lxr=i(Da),jn=n(Da,"P",{});var n3=s(jn);ixr=r(n3,"The model class to instantiate is selected based on the "),TTe=n(n3,"CODE",{});var VCt=s(TTe);dxr=r(VCt,"model_type"),VCt.forEach(t),cxr=r(n3,` property of the config object (either
passed as an argument or loaded from `),FTe=n(n3,"CODE",{});var zCt=s(FTe);fxr=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),mxr=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(n3,"CODE",{});var WCt=s(CTe);gxr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),hxr=r(n3,":"),n3.forEach(t),pxr=i(Da),QL=n(Da,"UL",{});var p$e=s(QL);aE=n(p$e,"LI",{});var rke=s(aE);MTe=n(rke,"STRONG",{});var QCt=s(MTe);_xr=r(QCt,"beit"),QCt.forEach(t),uxr=r(rke," \u2014 "),zz=n(rke,"A",{href:!0});var HCt=s(zz);bxr=r(HCt,"FlaxBeitForImageClassification"),HCt.forEach(t),vxr=r(rke," (BEiT model)"),rke.forEach(t),Txr=i(p$e),nE=n(p$e,"LI",{});var tke=s(nE);ETe=n(tke,"STRONG",{});var UCt=s(ETe);Fxr=r(UCt,"vit"),UCt.forEach(t),Cxr=r(tke," \u2014 "),Wz=n(tke,"A",{href:!0});var JCt=s(Wz);Mxr=r(JCt,"FlaxViTForImageClassification"),JCt.forEach(t),Exr=r(tke," (ViT model)"),tke.forEach(t),p$e.forEach(t),yxr=i(Da),yTe=n(Da,"P",{});var YCt=s(yTe);wxr=r(YCt,"Examples:"),YCt.forEach(t),Axr=i(Da),m(HL.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),aSe=i(c),Sf=n(c,"H2",{class:!0});var _$e=s(Sf);sE=n(_$e,"A",{id:!0,class:!0,href:!0});var KCt=s(sE);wTe=n(KCt,"SPAN",{});var ZCt=s(wTe);m(UL.$$.fragment,ZCt),ZCt.forEach(t),KCt.forEach(t),Lxr=i(_$e),ATe=n(_$e,"SPAN",{});var eMt=s(ATe);Bxr=r(eMt,"FlaxAutoModelForVision2Seq"),eMt.forEach(t),_$e.forEach(t),nSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(JL.$$.fragment,Pi),xxr=i(Pi),Pf=n(Pi,"P",{});var jQ=s(Pf);kxr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LTe=n(jQ,"CODE",{});var oMt=s(LTe);Rxr=r(oMt,"from_pretrained()"),oMt.forEach(t),Sxr=r(jQ,"class method or the "),BTe=n(jQ,"CODE",{});var rMt=s(BTe);Pxr=r(rMt,"from_config()"),rMt.forEach(t),$xr=r(jQ,`class
method.`),jQ.forEach(t),Ixr=i(Pi),YL=n(Pi,"P",{});var u$e=s(YL);Nxr=r(u$e,"This class cannot be instantiated directly using "),xTe=n(u$e,"CODE",{});var tMt=s(xTe);Dxr=r(tMt,"__init__()"),tMt.forEach(t),jxr=r(u$e," (throws an error)."),u$e.forEach(t),qxr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);m(KL.$$.fragment,$i),Gxr=i($i),kTe=n($i,"P",{});var aMt=s(kTe);Oxr=r(aMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aMt.forEach(t),Xxr=i($i),$f=n($i,"P",{});var qQ=s($f);Vxr=r(qQ,`Note:
Loading a model from its configuration file does `),RTe=n(qQ,"STRONG",{});var nMt=s(RTe);zxr=r(nMt,"not"),nMt.forEach(t),Wxr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),STe=n(qQ,"CODE",{});var sMt=s(STe);Qxr=r(sMt,"from_pretrained()"),sMt.forEach(t),Hxr=r(qQ,"to load the model weights."),qQ.forEach(t),Uxr=i($i),PTe=n($i,"P",{});var lMt=s(PTe);Jxr=r(lMt,"Examples:"),lMt.forEach(t),Yxr=i($i),m(ZL.$$.fragment,$i),$i.forEach(t),Kxr=i(Pi),Do=n(Pi,"DIV",{class:!0});var ja=s(Do);m(e8.$$.fragment,ja),Zxr=i(ja),$Te=n(ja,"P",{});var iMt=s($Te);ekr=r(iMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iMt.forEach(t),okr=i(ja),qn=n(ja,"P",{});var s3=s(qn);rkr=r(s3,"The model class to instantiate is selected based on the "),ITe=n(s3,"CODE",{});var dMt=s(ITe);tkr=r(dMt,"model_type"),dMt.forEach(t),akr=r(s3,` property of the config object (either
passed as an argument or loaded from `),NTe=n(s3,"CODE",{});var cMt=s(NTe);nkr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),skr=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(s3,"CODE",{});var fMt=s(DTe);lkr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),ikr=r(s3,":"),s3.forEach(t),dkr=i(ja),jTe=n(ja,"UL",{});var mMt=s(jTe);lE=n(mMt,"LI",{});var ake=s(lE);qTe=n(ake,"STRONG",{});var gMt=s(qTe);ckr=r(gMt,"vision-encoder-decoder"),gMt.forEach(t),fkr=r(ake," \u2014 "),Qz=n(ake,"A",{href:!0});var hMt=s(Qz);mkr=r(hMt,"FlaxVisionEncoderDecoderModel"),hMt.forEach(t),gkr=r(ake," (Vision Encoder decoder model)"),ake.forEach(t),mMt.forEach(t),hkr=i(ja),GTe=n(ja,"P",{});var pMt=s(GTe);pkr=r(pMt,"Examples:"),pMt.forEach(t),_kr=i(ja),m(o8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(EMt)),d(pe,"id","auto-classes"),d(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pe,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(n7,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(s7,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertConfig"),d(l7,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartConfig"),d(i7,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitConfig"),d(d7,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertConfig"),d(c7,"href","/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(f7,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdConfig"),d(m7,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(g7,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(h7,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(p7,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertConfig"),d(_7,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineConfig"),d(u7,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPConfig"),d(b7,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertConfig"),d(v7,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextConfig"),d(T7,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLConfig"),d(F7,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(C7,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(M7,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaConfig"),d(E7,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(y7,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTConfig"),d(w7,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrConfig"),d(A7,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertConfig"),d(L7,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRConfig"),d(B7,"href","/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTConfig"),d(x7,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraConfig"),d(k7,"href","/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(R7,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertConfig"),d(S7,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetConfig"),d(P7,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTConfig"),d($7,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelConfig"),d(I7,"href","/docs/transformers/pr_15991/en/model_doc/glpn#transformers.GLPNConfig"),d(N7,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Config"),d(D7,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(j7,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJConfig"),d(q7,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertConfig"),d(G7,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertConfig"),d(O7,"href","/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(X7,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(V7,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(z7,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDConfig"),d(W7,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerConfig"),d(Q7,"href","/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeConfig"),d(H7,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertConfig"),d(U7,"href","/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Config"),d(J7,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianConfig"),d(Y7,"href","/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(K7,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartConfig"),d(Z7,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(eB,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(oB,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetConfig"),d(rB,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Config"),d(tB,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(aB,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(nB,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusConfig"),d(sB,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverConfig"),d(lB,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartConfig"),d(iB,"href","/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(dB,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(cB,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(fB,"href","/docs/transformers/pr_15991/en/model_doc/rag#transformers.RagConfig"),d(mB,"href","/docs/transformers/pr_15991/en/model_doc/realm#transformers.RealmConfig"),d(gB,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerConfig"),d(hB,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertConfig"),d(pB,"href","/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetConfig"),d(_B,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertConfig"),d(uB,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaConfig"),d(bB,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerConfig"),d(vB,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerConfig"),d(TB,"href","/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWConfig"),d(FB,"href","/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDConfig"),d(CB,"href","/docs/transformers/pr_15991/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(MB,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(EB,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(yB,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterConfig"),d(wB,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(AB,"href","/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinConfig"),d(LB,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Config"),d(BB,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasConfig"),d(xB,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(kB,"href","/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRConfig"),d(RB,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(SB,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(PB,"href","/docs/transformers/pr_15991/en/model_doc/van#transformers.VanConfig"),d($B,"href","/docs/transformers/pr_15991/en/model_doc/vilt#transformers.ViltConfig"),d(IB,"href","/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(NB,"href","/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(DB,"href","/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(jB,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTConfig"),d(qB,"href","/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(GB,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(OB,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMConfig"),d(XB,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMConfig"),d(VB,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMConfig"),d(zB,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(WB,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(QB,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(HB,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetConfig"),d(UB,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Pg,"class","docstring"),d(Wo,"class","docstring"),d($g,"id","transformers.AutoTokenizer"),d($g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($g,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(JB,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(YB,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertTokenizer"),d(KB,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ZB,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartTokenizer"),d(ex,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartTokenizerFast"),d(ox,"href","/docs/transformers/pr_15991/en/model_doc/barthez#transformers.BarthezTokenizer"),d(rx,"href","/docs/transformers/pr_15991/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(tx,"href","/docs/transformers/pr_15991/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(ax,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertTokenizer"),d(nx,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertTokenizerFast"),d(sx,"href","/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(lx,"href","/docs/transformers/pr_15991/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(ix,"href","/docs/transformers/pr_15991/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(dx,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(cx,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(fx,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(mx,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(gx,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(hx,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(px,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(_x,"href","/docs/transformers/pr_15991/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(ux,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertTokenizer"),d(bx,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(vx,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineTokenizer"),d(Tx,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPTokenizer"),d(Fx,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Cx,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Mx,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Ex,"href","/docs/transformers/pr_15991/en/model_doc/cpm#transformers.CpmTokenizer"),d(yx,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(wx,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Ax,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Lx,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Bx,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(xx,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(kx,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Rx,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Sx,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraTokenizer"),d(Px,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraTokenizerFast"),d($x,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Ix,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetTokenizer"),d(Nx,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Dx,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(jx,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelTokenizer"),d(qx,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Gx,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Ox,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Xx,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Vx,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(zx,"href","/docs/transformers/pr_15991/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Wx,"href","/docs/transformers/pr_15991/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Qx,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Hx,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Ux,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Jx,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Yx,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Kx,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Zx,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ek,"href","/docs/transformers/pr_15991/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ok,"href","/docs/transformers/pr_15991/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(rk,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDTokenizer"),d(tk,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDTokenizerFast"),d(ak,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerTokenizer"),d(nk,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(sk,"href","/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeTokenizer"),d(lk,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(ik,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(dk,"href","/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(ck,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianTokenizer"),d(fk,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartTokenizer"),d(mk,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(gk,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(hk,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(pk,"href","/docs/transformers/pr_15991/en/model_doc/mluke#transformers.MLukeTokenizer"),d(_k,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(uk,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(bk,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(vk,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Tk,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.T5Tokenizer"),d(Fk,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Ck,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Mk,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Ek,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(yk,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(wk,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Ak,"href","/docs/transformers/pr_15991/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Lk,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Bk,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(xk,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertTokenizer"),d(kk,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertTokenizerFast"),d(Rk,"href","/docs/transformers/pr_15991/en/model_doc/rag#transformers.RagTokenizer"),d(Sk,"href","/docs/transformers/pr_15991/en/model_doc/realm#transformers.RealmTokenizer"),d(Pk,"href","/docs/transformers/pr_15991/en/model_doc/realm#transformers.RealmTokenizerFast"),d($k,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Ik,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Nk,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Dk,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(jk,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(qk,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Gk,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Ok,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Xk,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Vk,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(zk,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Wk,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Qk,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Hk,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Uk,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Jk,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Yk,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.T5Tokenizer"),d(Kk,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Zk,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasTokenizer"),d(eR,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(oR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(rR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(tR,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMTokenizer"),d(aR,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(nR,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMTokenizer"),d(sR,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(lR,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(iR,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(dR,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(cR,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(fh,"class","docstring"),d(Qo,"class","docstring"),d(mh,"id","transformers.AutoFeatureExtractor"),d(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(fR,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(mR,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(gR,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(hR,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(pR,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(_R,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(uR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(bR,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(vR,"href","/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(TR,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(FR,"href","/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(CR,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(MR,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(ER,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(yR,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(wR,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(AR,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(LR,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(BR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring"),d(Rh,"class","docstring"),d(Ho,"class","docstring"),d(Sh,"id","transformers.AutoProcessor"),d(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(xR,"href","/docs/transformers/pr_15991/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(kR,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPProcessor"),d(RR,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(SR,"href","/docs/transformers/pr_15991/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(PR,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d($R,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(IR,"href","/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRProcessor"),d(NR,"href","/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(DR,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ne,"class","docstring"),d(Xh,"class","docstring"),d(Uo,"class","docstring"),d(Vh,"id","transformers.AutoModel"),d(Vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d(jR,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertModel"),d(qR,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartModel"),d(GR,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitModel"),d(OR,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertModel"),d(XR,"href","/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(VR,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdModel"),d(zR,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(WR,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(QR,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(HR,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertModel"),d(UR,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineModel"),d(JR,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.CLIPModel"),d(YR,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertModel"),d(KR,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextModel"),d(ZR,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLModel"),d(eS,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(oS,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(rS,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaModel"),d(tS,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(aS,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTModel"),d(nS,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrModel"),d(sS,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertModel"),d(lS,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(iS,"href","/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTModel"),d(dS,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraModel"),d(cS,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertModel"),d(fS,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetModel"),d(mS,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTModel"),d(gS,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelModel"),d(hS,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelBaseModel"),d(pS,"href","/docs/transformers/pr_15991/en/model_doc/glpn#transformers.GLPNModel"),d(_S,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2Model"),d(uS,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(bS,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJModel"),d(vS,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertModel"),d(TS,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertModel"),d(FS,"href","/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(CS,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(MS,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(ES,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDModel"),d(yS,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerModel"),d(wS,"href","/docs/transformers/pr_15991/en/model_doc/luke#transformers.LukeModel"),d(AS,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertModel"),d(LS,"href","/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100Model"),d(BS,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianModel"),d(xS,"href","/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerModel"),d(kS,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartModel"),d(RS,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(SS,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertModel"),d(PS,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetModel"),d($S,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5Model"),d(IS,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerModel"),d(NS,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(DS,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusModel"),d(jS,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverModel"),d(qS,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartModel"),d(GS,"href","/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerModel"),d(OS,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(XS,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertModel"),d(VS,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerModel"),d(zS,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertModel"),d(WS,"href","/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetModel"),d(QS,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertModel"),d(HS,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaModel"),d(US,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerModel"),d(JS,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerModel"),d(YS,"href","/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWModel"),d(KS,"href","/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDModel"),d(ZS,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(eP,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterModel"),d(oP,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(rP,"href","/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinModel"),d(tP,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5Model"),d(aP,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasModel"),d(nP,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(sP,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechModel"),d(lP,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(iP,"href","/docs/transformers/pr_15991/en/model_doc/van#transformers.VanModel"),d(dP,"href","/docs/transformers/pr_15991/en/model_doc/vilt#transformers.ViltModel"),d(cP,"href","/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(fP,"href","/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertModel"),d(mP,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTModel"),d(gP,"href","/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(hP,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(pP,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMModel"),d(_P,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMModel"),d(uP,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMModel"),d(bP,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(vP,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(TP,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(FP,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetModel"),d(CP,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoModel"),d(De,"class","docstring"),d(Jo,"class","docstring"),d(L_,"id","transformers.AutoModelForPreTraining"),d(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(MP,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForPreTraining"),d(EP,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(yP,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForPreTraining"),d(wP,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(AP,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(LP,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(BP,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(xP,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(kP,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(RP,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(SP,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForPreTraining"),d(PP,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d($P,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForPreTraining"),d(IP,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(NP,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(DP,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(jP,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(qP,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(GP,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(OP,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(XP,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(VP,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(zP,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(WP,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(QP,"href","/docs/transformers/pr_15991/en/model_doc/retribert#transformers.RetriBertModel"),d(HP,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(UP,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(JP,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(YP,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(KP,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(ZP,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(e$,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(o$,"href","/docs/transformers/pr_15991/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(r$,"href","/docs/transformers/pr_15991/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(t$,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(a$,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(n$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(s$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(l$,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Yo,"class","docstring"),d(pu,"id","transformers.AutoModelForCausalLM"),d(pu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(i$,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForCausalLM"),d(d$,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertLMHeadModel"),d(c$,"href","/docs/transformers/pr_15991/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(f$,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(m$,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(g$,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(h$,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(p$,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(_$,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(u$,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(b$,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForCausalLM"),d(v$,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(T$,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(F$,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(C$,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianForCausalLM"),d(M$,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForCausalLM"),d(E$,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(y$,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(w$,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(A$,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(L$,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(B$,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(x$,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(k$,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(R$,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(S$,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(P$,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d($$,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(I$,"href","/docs/transformers/pr_15991/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(N$,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(D$,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(j$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(q$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(G$,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(O$,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(qe,"class","docstring"),d(Ko,"class","docstring"),d(Ku,"id","transformers.AutoModelForMaskedLM"),d(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ku,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(Qr,"class","docstring"),d(X$,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(V$,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(z$,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForMaskedLM"),d(W$,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(Q$,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(H$,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(U$,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(J$,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(Y$,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(K$,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(Z$,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(eI,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(oI,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(rI,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(tI,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(aI,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(nI,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(sI,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(lI,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(iI,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(dI,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(cI,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(fI,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(mI,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(gI,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(hI,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(pI,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(_I,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(uI,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(bI,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(vI,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(TI,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(FI,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(CI,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring"),d(Zo,"class","docstring"),d($1,"id","transformers.AutoModelForSeq2SeqLM"),d($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($1,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(MI,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(EI,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(yI,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(wI,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(LI,"href","/docs/transformers/pr_15991/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_15991/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.MarianMTModel"),d(RI,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d($I,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(II,"href","/docs/transformers/pr_15991/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(NI,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_15991/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring"),d(er,"class","docstring"),d(Z1,"id","transformers.AutoModelForSequenceClassification"),d(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z1,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(jI,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(qI,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForSequenceClassification"),d(GI,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForSequenceClassification"),d(OI,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(XI,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(VI,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(zI,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(WI,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(QI,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(HI,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(UI,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(JI,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(YI,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(KI,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(oN,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(rN,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(tN,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(aN,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(nN,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(sN,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(lN,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(iN,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForSequenceClassification"),d(dN,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(cN,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(fN,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(gN,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(hN,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(pN,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(_N,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(uN,"href","/docs/transformers/pr_15991/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(bN,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(vN,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(TN,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(FN,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(CN,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(MN,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(EN,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(yN,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(wN,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(AN,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(LN,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(BN,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(xN,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Xe,"class","docstring"),d(or,"class","docstring"),d(Q9,"id","transformers.AutoModelForMultipleChoice"),d(Q9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q9,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(Jr,"class","docstring"),d(kN,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(PN,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d($N,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(IN,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(DN,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(qN,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(ON,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(XN,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(zN,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(HN,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(UN,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(KN,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(eD,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(oD,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(rD,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(tD,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(aD,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Mb,"id","transformers.AutoModelForNextSentencePrediction"),d(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(nD,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(sD,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(iD,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(dD,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring"),d(tr,"class","docstring"),d(xb,"id","transformers.AutoModelForTokenClassification"),d(xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xb,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(cD,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(fD,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForTokenClassification"),d(mD,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(gD,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(hD,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForTokenClassification"),d(pD,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(_D,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(uD,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(bD,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(vD,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(TD,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(FD,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(CD,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(MD,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(ED,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(yD,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(wD,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(AD,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(LD,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(BD,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(xD,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(kD,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(RD,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(SD,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(PD,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d($D,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(ID,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ND,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(DD,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(jD,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(qD,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(GD,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(OD,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(We,"class","docstring"),d(ar,"class","docstring"),d(f5,"id","transformers.AutoModelForQuestionAnswering"),d(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f5,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(XD,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15991/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15991/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(tj,"href","/docs/transformers/pr_15991/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15991/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_15991/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15991/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_15991/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15991/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15991/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_15991/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_15991/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Ej,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(wj,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Aj,"href","/docs/transformers/pr_15991/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(K5,"id","transformers.AutoModelForTableQuestionAnswering"),d(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K5,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(Lj,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring"),d(sr,"class","docstring"),d(o2,"id","transformers.AutoModelForImageClassification"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(Bj,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitForImageClassification"),d(xj,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(kj,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Rj,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Sj,"href","/docs/transformers/pr_15991/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Pj,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d($j,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Ij,"href","/docs/transformers/pr_15991/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Nj,"href","/docs/transformers/pr_15991/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Dj,"href","/docs/transformers/pr_15991/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(jj,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(qj,"href","/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinForImageClassification"),d(Gj,"href","/docs/transformers/pr_15991/en/model_doc/van#transformers.VanForImageClassification"),d(Oj,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring"),d(lr,"class","docstring"),d(m2,"id","transformers.AutoModelForVision2Seq"),d(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m2,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(Xj,"href","/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring"),d(ir,"class","docstring"),d(p2,"id","transformers.AutoModelForAudioClassification"),d(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p2,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d(Vj,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(zj,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Wj,"href","/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Qj,"href","/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Hj,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Uj,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Jj,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Yj,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring"),d(dr,"class","docstring"),d(y2,"id","transformers.AutoModelForAudioFrameClassification"),d(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y2,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(at,"class","docstring"),d(Kj,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Zj,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(eq,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(oq,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring"),d(cr,"class","docstring"),d(k2,"id","transformers.AutoModelForCTC"),d(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k2,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(nt,"class","docstring"),d(rq,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(tq,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.HubertForCTC"),d(aq,"href","/docs/transformers/pr_15991/en/model_doc/sew#transformers.SEWForCTC"),d(nq,"href","/docs/transformers/pr_15991/en/model_doc/sew-d#transformers.SEWDForCTC"),d(sq,"href","/docs/transformers/pr_15991/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(lq,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(iq,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(dq,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(G2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(st,"class","docstring"),d(cq,"href","/docs/transformers/pr_15991/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(fq,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring"),d(mr,"class","docstring"),d(z2,"id","transformers.AutoModelForAudioXVector"),d(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z2,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(mq,"href","/docs/transformers/pr_15991/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(gq,"href","/docs/transformers/pr_15991/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(hq,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(pq,"href","/docs/transformers/pr_15991/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring"),d(gr,"class","docstring"),d(Y2,"id","transformers.AutoModelForMaskedImageModeling"),d(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(_q,"href","/docs/transformers/pr_15991/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(uq,"href","/docs/transformers/pr_15991/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(bq,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring"),d(hr,"class","docstring"),d(rv,"id","transformers.AutoModelForObjectDetection"),d(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rv,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(vq,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring"),d(pr,"class","docstring"),d(nv,"id","transformers.AutoModelForImageSegmentation"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(Tq,"href","/docs/transformers/pr_15991/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(iv,"id","transformers.AutoModelForSemanticSegmentation"),d(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iv,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(ft,"class","docstring"),d(Fq,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Cq,"href","/docs/transformers/pr_15991/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(Mq,"href","/docs/transformers/pr_15991/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring"),d(ur,"class","docstring"),d(gv,"id","transformers.AutoModelForInstanceSegmentation"),d(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gv,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(mt,"class","docstring"),d(Eq,"href","/docs/transformers/pr_15991/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring"),d(br,"class","docstring"),d(_v,"id","transformers.TFAutoModel"),d(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_v,"href","#transformers.TFAutoModel"),d(hc,"class","relative group"),d(gt,"class","docstring"),d(yq,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertModel"),d(wq,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartModel"),d(Aq,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertModel"),d(Lq,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Bq,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(xq,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertModel"),d(kq,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.TFCLIPModel"),d(Rq,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertModel"),d(Sq,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.TFConvNextModel"),d(Pq,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLModel"),d($q,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaModel"),d(Iq,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Nq,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Dq,"href","/docs/transformers/pr_15991/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(jq,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraModel"),d(qq,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Gq,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelModel"),d(Oq,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Xq,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Vq,"href","/docs/transformers/pr_15991/en/model_doc/hubert#transformers.TFHubertModel"),d(zq,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Wq,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.TFLEDModel"),d(Qq,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerModel"),d(Hq,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Uq,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.TFMarianModel"),d(Jq,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.TFMBartModel"),d(Yq,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Kq,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Zq,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.TFMT5Model"),d(eG,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(oG,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.TFPegasusModel"),d(rG,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertModel"),d(tG,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaModel"),d(aG,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerModel"),d(nG,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(sG,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5Model"),d(lG,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasModel"),d(iG,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(dG,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.TFViTModel"),d(cG,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(fG,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMModel"),d(mG,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(gG,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(aT,"id","transformers.TFAutoModelForPreTraining"),d(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aT,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(ht,"class","docstring"),d(hG,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(pG,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(_G,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForPreTraining"),d(uG,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(bG,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(vG,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(TG,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(FG,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(CG,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(MG,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(EG,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(yG,"href","/docs/transformers/pr_15991/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(wG,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(AG,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(LG,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(BG,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(xG,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(kG,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(RG,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(SG,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(PG,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d($G,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(AT,"id","transformers.TFAutoModelForCausalLM"),d(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AT,"href","#transformers.TFAutoModelForCausalLM"),d(Tc,"class","relative group"),d(pt,"class","docstring"),d(IG,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(NG,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(DG,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(jG,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(qG,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(GG,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(OG,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(XG,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(VG,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(zG,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(WG,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(jT,"id","transformers.TFAutoModelForImageClassification"),d(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jT,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(_t,"class","docstring"),d(QG,"href","/docs/transformers/pr_15991/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(HG,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(OT,"id","transformers.TFAutoModelForMaskedLM"),d(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OT,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(ut,"class","docstring"),d(UG,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(JG,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(YG,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(KG,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(ZG,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(eO,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(oO,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(rO,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(tO,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(aO,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(nO,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(sO,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(lO,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(iO,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(dO,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(cO,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(fO,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(mO,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(gO,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(hO,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(dF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Bc,"class","relative group"),d(bt,"class","docstring"),d(pO,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(_O,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(uO,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(bO,"href","/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(vO,"href","/docs/transformers/pr_15991/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(TO,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.TFMarianMTModel"),d(FO,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(CO,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(MO,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(EO,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(TF,"id","transformers.TFAutoModelForSequenceClassification"),d(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TF,"href","#transformers.TFAutoModelForSequenceClassification"),d(Rc,"class","relative group"),d(vt,"class","docstring"),d(yO,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(wO,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(AO,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(LO,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(BO,"href","/docs/transformers/pr_15991/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(xO,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(kO,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(RO,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(SO,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(PO,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d($O,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(IO,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(NO,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(DO,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(jO,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(qO,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(GO,"href","/docs/transformers/pr_15991/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(OO,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(XO,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(VO,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(zO,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(WO,"href","/docs/transformers/pr_15991/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(QO,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(HO,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(UO,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(WF,"id","transformers.TFAutoModelForMultipleChoice"),d(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WF,"href","#transformers.TFAutoModelForMultipleChoice"),d($c,"class","relative group"),d(Tt,"class","docstring"),d(JO,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(YO,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(KO,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(ZO,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(eX,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(oX,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(rX,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(tX,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(aX,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(nX,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(sX,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(lX,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(iX,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(dX,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(cX,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(fX,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(mX,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(cC,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Dc,"class","relative group"),d(Ft,"class","docstring"),d(gX,"href","/docs/transformers/pr_15991/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(mC,"id","transformers.TFAutoModelForTokenClassification"),d(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mC,"href","#transformers.TFAutoModelForTokenClassification"),d(Gc,"class","relative group"),d(Ct,"class","docstring"),d(hX,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(pX,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(_X,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(uX,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(bX,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(vX,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(TX,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(FX,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(CX,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(MX,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(EX,"href","/docs/transformers/pr_15991/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(yX,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(wX,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(AX,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(LX,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(BX,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(xX,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(kX,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(RX,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(SX,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(SC,"id","transformers.TFAutoModelForQuestionAnswering"),d(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Mt,"class","docstring"),d(PX,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d($X,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(IX,"href","/docs/transformers/pr_15991/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(NX,"href","/docs/transformers/pr_15991/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(DX,"href","/docs/transformers/pr_15991/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(jX,"href","/docs/transformers/pr_15991/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(GX,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(OX,"href","/docs/transformers/pr_15991/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(XX,"href","/docs/transformers/pr_15991/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_15991/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(zX,"href","/docs/transformers/pr_15991/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_15991/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_15991/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(UX,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_15991/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(YX,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(KX,"href","/docs/transformers/pr_15991/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(ZC,"id","transformers.TFAutoModelForVision2Seq"),d(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZC,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(Et,"class","docstring"),d(ZX,"href","/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(oM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Jc,"class","relative group"),d(yt,"class","docstring"),d(eV,"href","/docs/transformers/pr_15991/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(tM,"id","transformers.FlaxAutoModel"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.FlaxAutoModel"),d(Zc,"class","relative group"),d(wt,"class","docstring"),d(oV,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertModel"),d(rV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartModel"),d(tV,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.FlaxBeitModel"),d(aV,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertModel"),d(nV,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(sV,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(lV,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(iV,"href","/docs/transformers/pr_15991/en/model_doc/clip#transformers.FlaxCLIPModel"),d(dV,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(cV,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraModel"),d(fV,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(mV,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(gV,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(hV,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.FlaxMarianModel"),d(pV,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartModel"),d(_V,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5Model"),d(uV,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(bV,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(vV,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(TV,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5Model"),d(FV,"href","/docs/transformers/pr_15991/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(CV,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.FlaxViTModel"),d(MV,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(EV,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(yV,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(BM,"id","transformers.FlaxAutoModelForCausalLM"),d(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BM,"href","#transformers.FlaxAutoModelForCausalLM"),d(rf,"class","relative group"),d(At,"class","docstring"),d(wV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(AV,"href","/docs/transformers/pr_15991/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(LV,"href","/docs/transformers/pr_15991/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(BV,"href","/docs/transformers/pr_15991/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(xV,"href","/docs/transformers/pr_15991/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d($M,"id","transformers.FlaxAutoModelForPreTraining"),d($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($M,"href","#transformers.FlaxAutoModelForPreTraining"),d(nf,"class","relative group"),d(Lt,"class","docstring"),d(kV,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(RV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(SV,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(PV,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d($V,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(IV,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(NV,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(DV,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(jV,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(qV,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_15991/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(OV,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(HM,"id","transformers.FlaxAutoModelForMaskedLM"),d(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(df,"class","relative group"),d(Bt,"class","docstring"),d(XV,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(VV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zV,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(WV,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(QV,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(HV,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(UV,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(YV,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(KV,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(n4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(mf,"class","relative group"),d(xt,"class","docstring"),d(ZV,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(ez,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(oz,"href","/docs/transformers/pr_15991/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(rz,"href","/docs/transformers/pr_15991/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(tz,"href","/docs/transformers/pr_15991/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(az,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(nz,"href","/docs/transformers/pr_15991/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(sz,"href","/docs/transformers/pr_15991/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(lz,"href","/docs/transformers/pr_15991/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(p4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(pf,"class","relative group"),d(kt,"class","docstring"),d(iz,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(dz,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(cz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(mz,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(gz,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(hz,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(pz,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(_z,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(uz,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(w4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bf,"class","relative group"),d(Rt,"class","docstring"),d(bz,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(vz,"href","/docs/transformers/pr_15991/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Tz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Fz,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Cz,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Mz,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Ez,"href","/docs/transformers/pr_15991/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(yz,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(wz,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Az,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d(N4,"id","transformers.FlaxAutoModelForTokenClassification"),d(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Ff,"class","relative group"),d(St,"class","docstring"),d(Lz,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Bz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(xz,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(kz,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Rz,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Sz,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Pz,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d($z,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(W4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(Pt,"class","docstring"),d(Iz,"href","/docs/transformers/pr_15991/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_15991/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(jz,"href","/docs/transformers/pr_15991/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_15991/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_15991/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_15991/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_15991/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(oE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d($t,"class","docstring"),d(Vz,"href","/docs/transformers/pr_15991/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(tE,"id","transformers.FlaxAutoModelForImageClassification"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(It,"class","docstring"),d(zz,"href","/docs/transformers/pr_15991/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Wz,"href","/docs/transformers/pr_15991/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(sE,"id","transformers.FlaxAutoModelForVision2Seq"),d(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Sf,"class","relative group"),d(Nt,"class","docstring"),d(Qz,"href","/docs/transformers/pr_15991/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,J),b(c,$e,u),b(c,de,u),e(de,pe),e(pe,io),g(fe,io,null),e(de,Me),e(de,Vo),e(Vo,Ni),b(c,Nf,u),b(c,fa,u),e(fa,Di),e(fa,ji),e(ji,l3),e(fa,Df),b(c,Be,u),b(c,co,u),e(co,qi),e(co,Gn),e(Gn,i3),e(co,On),e(co,Xn),e(Xn,d3),e(co,Gi),e(co,Vn),e(Vn,c3),e(co,Oi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,Z8),e(_e,Xi),e(Xi,e7),e(_e,o7),b(c,zo,u),b(c,Ga,u),e(Ga,r7),e(Ga,qf),e(qf,t7),e(Ga,b$e),b(c,nke,u),b(c,Vi,u),e(Vi,Gf),e(Gf,GQ),g(f3,GQ,null),e(Vi,v$e),e(Vi,OQ),e(OQ,T$e),b(c,ske,u),b(c,zn,u),e(zn,F$e),e(zn,XQ),e(XQ,C$e),e(zn,M$e),e(zn,VQ),e(VQ,E$e),e(zn,y$e),b(c,lke,u),g(m3,c,u),b(c,ike,u),b(c,a7,u),e(a7,w$e),b(c,dke,u),g(Of,c,u),b(c,cke,u),b(c,zi,u),e(zi,Xf),e(Xf,zQ),g(g3,zQ,null),e(zi,A$e),e(zi,WQ),e(WQ,L$e),b(c,fke,u),b(c,Wo,u),g(h3,Wo,null),e(Wo,B$e),e(Wo,p3),e(p3,x$e),e(p3,n7),e(n7,k$e),e(p3,R$e),e(Wo,S$e),e(Wo,_3),e(_3,P$e),e(_3,QQ),e(QQ,$$e),e(_3,I$e),e(Wo,N$e),e(Wo,mo),g(u3,mo,null),e(mo,D$e),e(mo,HQ),e(HQ,j$e),e(mo,q$e),e(mo,Wi),e(Wi,G$e),e(Wi,UQ),e(UQ,O$e),e(Wi,X$e),e(Wi,JQ),e(JQ,V$e),e(Wi,z$e),e(mo,W$e),e(mo,v),e(v,Vf),e(Vf,YQ),e(YQ,Q$e),e(Vf,H$e),e(Vf,s7),e(s7,U$e),e(Vf,J$e),e(v,Y$e),e(v,zf),e(zf,KQ),e(KQ,K$e),e(zf,Z$e),e(zf,l7),e(l7,eIe),e(zf,oIe),e(v,rIe),e(v,Wf),e(Wf,ZQ),e(ZQ,tIe),e(Wf,aIe),e(Wf,i7),e(i7,nIe),e(Wf,sIe),e(v,lIe),e(v,Qf),e(Qf,eH),e(eH,iIe),e(Qf,dIe),e(Qf,d7),e(d7,cIe),e(Qf,fIe),e(v,mIe),e(v,Hf),e(Hf,oH),e(oH,gIe),e(Hf,hIe),e(Hf,c7),e(c7,pIe),e(Hf,_Ie),e(v,uIe),e(v,Uf),e(Uf,rH),e(rH,bIe),e(Uf,vIe),e(Uf,f7),e(f7,TIe),e(Uf,FIe),e(v,CIe),e(v,Jf),e(Jf,tH),e(tH,MIe),e(Jf,EIe),e(Jf,m7),e(m7,yIe),e(Jf,wIe),e(v,AIe),e(v,Yf),e(Yf,aH),e(aH,LIe),e(Yf,BIe),e(Yf,g7),e(g7,xIe),e(Yf,kIe),e(v,RIe),e(v,Kf),e(Kf,nH),e(nH,SIe),e(Kf,PIe),e(Kf,h7),e(h7,$Ie),e(Kf,IIe),e(v,NIe),e(v,Zf),e(Zf,sH),e(sH,DIe),e(Zf,jIe),e(Zf,p7),e(p7,qIe),e(Zf,GIe),e(v,OIe),e(v,em),e(em,lH),e(lH,XIe),e(em,VIe),e(em,_7),e(_7,zIe),e(em,WIe),e(v,QIe),e(v,om),e(om,iH),e(iH,HIe),e(om,UIe),e(om,u7),e(u7,JIe),e(om,YIe),e(v,KIe),e(v,rm),e(rm,dH),e(dH,ZIe),e(rm,eNe),e(rm,b7),e(b7,oNe),e(rm,rNe),e(v,tNe),e(v,tm),e(tm,cH),e(cH,aNe),e(tm,nNe),e(tm,v7),e(v7,sNe),e(tm,lNe),e(v,iNe),e(v,am),e(am,fH),e(fH,dNe),e(am,cNe),e(am,T7),e(T7,fNe),e(am,mNe),e(v,gNe),e(v,nm),e(nm,mH),e(mH,hNe),e(nm,pNe),e(nm,F7),e(F7,_Ne),e(nm,uNe),e(v,bNe),e(v,sm),e(sm,gH),e(gH,vNe),e(sm,TNe),e(sm,C7),e(C7,FNe),e(sm,CNe),e(v,MNe),e(v,lm),e(lm,hH),e(hH,ENe),e(lm,yNe),e(lm,M7),e(M7,wNe),e(lm,ANe),e(v,LNe),e(v,im),e(im,pH),e(pH,BNe),e(im,xNe),e(im,E7),e(E7,kNe),e(im,RNe),e(v,SNe),e(v,dm),e(dm,_H),e(_H,PNe),e(dm,$Ne),e(dm,y7),e(y7,INe),e(dm,NNe),e(v,DNe),e(v,cm),e(cm,uH),e(uH,jNe),e(cm,qNe),e(cm,w7),e(w7,GNe),e(cm,ONe),e(v,XNe),e(v,fm),e(fm,bH),e(bH,VNe),e(fm,zNe),e(fm,A7),e(A7,WNe),e(fm,QNe),e(v,HNe),e(v,mm),e(mm,vH),e(vH,UNe),e(mm,JNe),e(mm,L7),e(L7,YNe),e(mm,KNe),e(v,ZNe),e(v,gm),e(gm,TH),e(TH,eDe),e(gm,oDe),e(gm,B7),e(B7,rDe),e(gm,tDe),e(v,aDe),e(v,hm),e(hm,FH),e(FH,nDe),e(hm,sDe),e(hm,x7),e(x7,lDe),e(hm,iDe),e(v,dDe),e(v,pm),e(pm,CH),e(CH,cDe),e(pm,fDe),e(pm,k7),e(k7,mDe),e(pm,gDe),e(v,hDe),e(v,_m),e(_m,MH),e(MH,pDe),e(_m,_De),e(_m,R7),e(R7,uDe),e(_m,bDe),e(v,vDe),e(v,um),e(um,EH),e(EH,TDe),e(um,FDe),e(um,S7),e(S7,CDe),e(um,MDe),e(v,EDe),e(v,bm),e(bm,yH),e(yH,yDe),e(bm,wDe),e(bm,P7),e(P7,ADe),e(bm,LDe),e(v,BDe),e(v,vm),e(vm,wH),e(wH,xDe),e(vm,kDe),e(vm,$7),e($7,RDe),e(vm,SDe),e(v,PDe),e(v,Tm),e(Tm,AH),e(AH,$De),e(Tm,IDe),e(Tm,I7),e(I7,NDe),e(Tm,DDe),e(v,jDe),e(v,Fm),e(Fm,LH),e(LH,qDe),e(Fm,GDe),e(Fm,N7),e(N7,ODe),e(Fm,XDe),e(v,VDe),e(v,Cm),e(Cm,BH),e(BH,zDe),e(Cm,WDe),e(Cm,D7),e(D7,QDe),e(Cm,HDe),e(v,UDe),e(v,Mm),e(Mm,xH),e(xH,JDe),e(Mm,YDe),e(Mm,j7),e(j7,KDe),e(Mm,ZDe),e(v,eje),e(v,Em),e(Em,kH),e(kH,oje),e(Em,rje),e(Em,q7),e(q7,tje),e(Em,aje),e(v,nje),e(v,ym),e(ym,RH),e(RH,sje),e(ym,lje),e(ym,G7),e(G7,ije),e(ym,dje),e(v,cje),e(v,wm),e(wm,SH),e(SH,fje),e(wm,mje),e(wm,O7),e(O7,gje),e(wm,hje),e(v,pje),e(v,Am),e(Am,PH),e(PH,_je),e(Am,uje),e(Am,X7),e(X7,bje),e(Am,vje),e(v,Tje),e(v,Lm),e(Lm,$H),e($H,Fje),e(Lm,Cje),e(Lm,V7),e(V7,Mje),e(Lm,Eje),e(v,yje),e(v,Bm),e(Bm,IH),e(IH,wje),e(Bm,Aje),e(Bm,z7),e(z7,Lje),e(Bm,Bje),e(v,xje),e(v,xm),e(xm,NH),e(NH,kje),e(xm,Rje),e(xm,W7),e(W7,Sje),e(xm,Pje),e(v,$je),e(v,km),e(km,DH),e(DH,Ije),e(km,Nje),e(km,Q7),e(Q7,Dje),e(km,jje),e(v,qje),e(v,Rm),e(Rm,jH),e(jH,Gje),e(Rm,Oje),e(Rm,H7),e(H7,Xje),e(Rm,Vje),e(v,zje),e(v,Sm),e(Sm,qH),e(qH,Wje),e(Sm,Qje),e(Sm,U7),e(U7,Hje),e(Sm,Uje),e(v,Jje),e(v,Pm),e(Pm,GH),e(GH,Yje),e(Pm,Kje),e(Pm,J7),e(J7,Zje),e(Pm,eqe),e(v,oqe),e(v,$m),e($m,OH),e(OH,rqe),e($m,tqe),e($m,Y7),e(Y7,aqe),e($m,nqe),e(v,sqe),e(v,Im),e(Im,XH),e(XH,lqe),e(Im,iqe),e(Im,K7),e(K7,dqe),e(Im,cqe),e(v,fqe),e(v,Nm),e(Nm,VH),e(VH,mqe),e(Nm,gqe),e(Nm,Z7),e(Z7,hqe),e(Nm,pqe),e(v,_qe),e(v,Dm),e(Dm,zH),e(zH,uqe),e(Dm,bqe),e(Dm,eB),e(eB,vqe),e(Dm,Tqe),e(v,Fqe),e(v,jm),e(jm,WH),e(WH,Cqe),e(jm,Mqe),e(jm,oB),e(oB,Eqe),e(jm,yqe),e(v,wqe),e(v,qm),e(qm,QH),e(QH,Aqe),e(qm,Lqe),e(qm,rB),e(rB,Bqe),e(qm,xqe),e(v,kqe),e(v,Gm),e(Gm,HH),e(HH,Rqe),e(Gm,Sqe),e(Gm,tB),e(tB,Pqe),e(Gm,$qe),e(v,Iqe),e(v,Om),e(Om,UH),e(UH,Nqe),e(Om,Dqe),e(Om,aB),e(aB,jqe),e(Om,qqe),e(v,Gqe),e(v,Xm),e(Xm,JH),e(JH,Oqe),e(Xm,Xqe),e(Xm,nB),e(nB,Vqe),e(Xm,zqe),e(v,Wqe),e(v,Vm),e(Vm,YH),e(YH,Qqe),e(Vm,Hqe),e(Vm,sB),e(sB,Uqe),e(Vm,Jqe),e(v,Yqe),e(v,zm),e(zm,KH),e(KH,Kqe),e(zm,Zqe),e(zm,lB),e(lB,eGe),e(zm,oGe),e(v,rGe),e(v,Wm),e(Wm,ZH),e(ZH,tGe),e(Wm,aGe),e(Wm,iB),e(iB,nGe),e(Wm,sGe),e(v,lGe),e(v,Qm),e(Qm,eU),e(eU,iGe),e(Qm,dGe),e(Qm,dB),e(dB,cGe),e(Qm,fGe),e(v,mGe),e(v,Hm),e(Hm,oU),e(oU,gGe),e(Hm,hGe),e(Hm,cB),e(cB,pGe),e(Hm,_Ge),e(v,uGe),e(v,Um),e(Um,rU),e(rU,bGe),e(Um,vGe),e(Um,fB),e(fB,TGe),e(Um,FGe),e(v,CGe),e(v,Jm),e(Jm,tU),e(tU,MGe),e(Jm,EGe),e(Jm,mB),e(mB,yGe),e(Jm,wGe),e(v,AGe),e(v,Ym),e(Ym,aU),e(aU,LGe),e(Ym,BGe),e(Ym,gB),e(gB,xGe),e(Ym,kGe),e(v,RGe),e(v,Km),e(Km,nU),e(nU,SGe),e(Km,PGe),e(Km,hB),e(hB,$Ge),e(Km,IGe),e(v,NGe),e(v,Zm),e(Zm,sU),e(sU,DGe),e(Zm,jGe),e(Zm,pB),e(pB,qGe),e(Zm,GGe),e(v,OGe),e(v,eg),e(eg,lU),e(lU,XGe),e(eg,VGe),e(eg,_B),e(_B,zGe),e(eg,WGe),e(v,QGe),e(v,og),e(og,iU),e(iU,HGe),e(og,UGe),e(og,uB),e(uB,JGe),e(og,YGe),e(v,KGe),e(v,rg),e(rg,dU),e(dU,ZGe),e(rg,eOe),e(rg,bB),e(bB,oOe),e(rg,rOe),e(v,tOe),e(v,tg),e(tg,cU),e(cU,aOe),e(tg,nOe),e(tg,vB),e(vB,sOe),e(tg,lOe),e(v,iOe),e(v,ag),e(ag,fU),e(fU,dOe),e(ag,cOe),e(ag,TB),e(TB,fOe),e(ag,mOe),e(v,gOe),e(v,ng),e(ng,mU),e(mU,hOe),e(ng,pOe),e(ng,FB),e(FB,_Oe),e(ng,uOe),e(v,bOe),e(v,sg),e(sg,gU),e(gU,vOe),e(sg,TOe),e(sg,CB),e(CB,FOe),e(sg,COe),e(v,MOe),e(v,lg),e(lg,hU),e(hU,EOe),e(lg,yOe),e(lg,MB),e(MB,wOe),e(lg,AOe),e(v,LOe),e(v,ig),e(ig,pU),e(pU,BOe),e(ig,xOe),e(ig,EB),e(EB,kOe),e(ig,ROe),e(v,SOe),e(v,dg),e(dg,_U),e(_U,POe),e(dg,$Oe),e(dg,yB),e(yB,IOe),e(dg,NOe),e(v,DOe),e(v,cg),e(cg,uU),e(uU,jOe),e(cg,qOe),e(cg,wB),e(wB,GOe),e(cg,OOe),e(v,XOe),e(v,fg),e(fg,bU),e(bU,VOe),e(fg,zOe),e(fg,AB),e(AB,WOe),e(fg,QOe),e(v,HOe),e(v,mg),e(mg,vU),e(vU,UOe),e(mg,JOe),e(mg,LB),e(LB,YOe),e(mg,KOe),e(v,ZOe),e(v,gg),e(gg,TU),e(TU,eXe),e(gg,oXe),e(gg,BB),e(BB,rXe),e(gg,tXe),e(v,aXe),e(v,hg),e(hg,FU),e(FU,nXe),e(hg,sXe),e(hg,xB),e(xB,lXe),e(hg,iXe),e(v,dXe),e(v,pg),e(pg,CU),e(CU,cXe),e(pg,fXe),e(pg,kB),e(kB,mXe),e(pg,gXe),e(v,hXe),e(v,_g),e(_g,MU),e(MU,pXe),e(_g,_Xe),e(_g,RB),e(RB,uXe),e(_g,bXe),e(v,vXe),e(v,ug),e(ug,EU),e(EU,TXe),e(ug,FXe),e(ug,SB),e(SB,CXe),e(ug,MXe),e(v,EXe),e(v,bg),e(bg,yU),e(yU,yXe),e(bg,wXe),e(bg,PB),e(PB,AXe),e(bg,LXe),e(v,BXe),e(v,vg),e(vg,wU),e(wU,xXe),e(vg,kXe),e(vg,$B),e($B,RXe),e(vg,SXe),e(v,PXe),e(v,Tg),e(Tg,AU),e(AU,$Xe),e(Tg,IXe),e(Tg,IB),e(IB,NXe),e(Tg,DXe),e(v,jXe),e(v,Fg),e(Fg,LU),e(LU,qXe),e(Fg,GXe),e(Fg,NB),e(NB,OXe),e(Fg,XXe),e(v,VXe),e(v,Cg),e(Cg,BU),e(BU,zXe),e(Cg,WXe),e(Cg,DB),e(DB,QXe),e(Cg,HXe),e(v,UXe),e(v,Mg),e(Mg,xU),e(xU,JXe),e(Mg,YXe),e(Mg,jB),e(jB,KXe),e(Mg,ZXe),e(v,eVe),e(v,Eg),e(Eg,kU),e(kU,oVe),e(Eg,rVe),e(Eg,qB),e(qB,tVe),e(Eg,aVe),e(v,nVe),e(v,yg),e(yg,RU),e(RU,sVe),e(yg,lVe),e(yg,GB),e(GB,iVe),e(yg,dVe),e(v,cVe),e(v,wg),e(wg,SU),e(SU,fVe),e(wg,mVe),e(wg,OB),e(OB,gVe),e(wg,hVe),e(v,pVe),e(v,Ag),e(Ag,PU),e(PU,_Ve),e(Ag,uVe),e(Ag,XB),e(XB,bVe),e(Ag,vVe),e(v,TVe),e(v,Lg),e(Lg,$U),e($U,FVe),e(Lg,CVe),e(Lg,VB),e(VB,MVe),e(Lg,EVe),e(v,yVe),e(v,Bg),e(Bg,IU),e(IU,wVe),e(Bg,AVe),e(Bg,zB),e(zB,LVe),e(Bg,BVe),e(v,xVe),e(v,xg),e(xg,NU),e(NU,kVe),e(xg,RVe),e(xg,WB),e(WB,SVe),e(xg,PVe),e(v,$Ve),e(v,kg),e(kg,DU),e(DU,IVe),e(kg,NVe),e(kg,QB),e(QB,DVe),e(kg,jVe),e(v,qVe),e(v,Rg),e(Rg,jU),e(jU,GVe),e(Rg,OVe),e(Rg,HB),e(HB,XVe),e(Rg,VVe),e(v,zVe),e(v,Sg),e(Sg,qU),e(qU,WVe),e(Sg,QVe),e(Sg,UB),e(UB,HVe),e(Sg,UVe),e(mo,JVe),e(mo,GU),e(GU,YVe),e(mo,KVe),g(b3,mo,null),e(Wo,ZVe),e(Wo,Pg),g(v3,Pg,null),e(Pg,eze),e(Pg,OU),e(OU,oze),b(c,mke,u),b(c,Qi,u),e(Qi,$g),e($g,XU),g(T3,XU,null),e(Qi,rze),e(Qi,VU),e(VU,tze),b(c,gke,u),b(c,Qo,u),g(F3,Qo,null),e(Qo,aze),e(Qo,C3),e(C3,nze),e(C3,JB),e(JB,sze),e(C3,lze),e(Qo,ize),e(Qo,M3),e(M3,dze),e(M3,zU),e(zU,cze),e(M3,fze),e(Qo,mze),e(Qo,go),g(E3,go,null),e(go,gze),e(go,WU),e(WU,hze),e(go,pze),e(go,Oa),e(Oa,_ze),e(Oa,QU),e(QU,uze),e(Oa,bze),e(Oa,HU),e(HU,vze),e(Oa,Tze),e(Oa,UU),e(UU,Fze),e(Oa,Cze),e(go,Mze),e(go,E),e(E,Wn),e(Wn,JU),e(JU,Eze),e(Wn,yze),e(Wn,YB),e(YB,wze),e(Wn,Aze),e(Wn,KB),e(KB,Lze),e(Wn,Bze),e(E,xze),e(E,Qn),e(Qn,YU),e(YU,kze),e(Qn,Rze),e(Qn,ZB),e(ZB,Sze),e(Qn,Pze),e(Qn,ex),e(ex,$ze),e(Qn,Ize),e(E,Nze),e(E,Hn),e(Hn,KU),e(KU,Dze),e(Hn,jze),e(Hn,ox),e(ox,qze),e(Hn,Gze),e(Hn,rx),e(rx,Oze),e(Hn,Xze),e(E,Vze),e(E,Ig),e(Ig,ZU),e(ZU,zze),e(Ig,Wze),e(Ig,tx),e(tx,Qze),e(Ig,Hze),e(E,Uze),e(E,Un),e(Un,eJ),e(eJ,Jze),e(Un,Yze),e(Un,ax),e(ax,Kze),e(Un,Zze),e(Un,nx),e(nx,eWe),e(Un,oWe),e(E,rWe),e(E,Ng),e(Ng,oJ),e(oJ,tWe),e(Ng,aWe),e(Ng,sx),e(sx,nWe),e(Ng,sWe),e(E,lWe),e(E,Dg),e(Dg,rJ),e(rJ,iWe),e(Dg,dWe),e(Dg,lx),e(lx,cWe),e(Dg,fWe),e(E,mWe),e(E,jg),e(jg,tJ),e(tJ,gWe),e(jg,hWe),e(jg,ix),e(ix,pWe),e(jg,_We),e(E,uWe),e(E,Jn),e(Jn,aJ),e(aJ,bWe),e(Jn,vWe),e(Jn,dx),e(dx,TWe),e(Jn,FWe),e(Jn,cx),e(cx,CWe),e(Jn,MWe),e(E,EWe),e(E,Yn),e(Yn,nJ),e(nJ,yWe),e(Yn,wWe),e(Yn,fx),e(fx,AWe),e(Yn,LWe),e(Yn,mx),e(mx,BWe),e(Yn,xWe),e(E,kWe),e(E,Kn),e(Kn,sJ),e(sJ,RWe),e(Kn,SWe),e(Kn,gx),e(gx,PWe),e(Kn,$We),e(Kn,hx),e(hx,IWe),e(Kn,NWe),e(E,DWe),e(E,qg),e(qg,lJ),e(lJ,jWe),e(qg,qWe),e(qg,px),e(px,GWe),e(qg,OWe),e(E,XWe),e(E,Gg),e(Gg,iJ),e(iJ,VWe),e(Gg,zWe),e(Gg,_x),e(_x,WWe),e(Gg,QWe),e(E,HWe),e(E,Zn),e(Zn,dJ),e(dJ,UWe),e(Zn,JWe),e(Zn,ux),e(ux,YWe),e(Zn,KWe),e(Zn,bx),e(bx,ZWe),e(Zn,eQe),e(E,oQe),e(E,Og),e(Og,cJ),e(cJ,rQe),e(Og,tQe),e(Og,vx),e(vx,aQe),e(Og,nQe),e(E,sQe),e(E,es),e(es,fJ),e(fJ,lQe),e(es,iQe),e(es,Tx),e(Tx,dQe),e(es,cQe),e(es,Fx),e(Fx,fQe),e(es,mQe),e(E,gQe),e(E,os),e(os,mJ),e(mJ,hQe),e(os,pQe),e(os,Cx),e(Cx,_Qe),e(os,uQe),e(os,Mx),e(Mx,bQe),e(os,vQe),e(E,TQe),e(E,rs),e(rs,gJ),e(gJ,FQe),e(rs,CQe),e(rs,Ex),e(Ex,MQe),e(rs,EQe),e(rs,hJ),e(hJ,yQe),e(rs,wQe),e(E,AQe),e(E,Xg),e(Xg,pJ),e(pJ,LQe),e(Xg,BQe),e(Xg,yx),e(yx,xQe),e(Xg,kQe),e(E,RQe),e(E,ts),e(ts,_J),e(_J,SQe),e(ts,PQe),e(ts,wx),e(wx,$Qe),e(ts,IQe),e(ts,Ax),e(Ax,NQe),e(ts,DQe),e(E,jQe),e(E,Vg),e(Vg,uJ),e(uJ,qQe),e(Vg,GQe),e(Vg,Lx),e(Lx,OQe),e(Vg,XQe),e(E,VQe),e(E,as),e(as,bJ),e(bJ,zQe),e(as,WQe),e(as,Bx),e(Bx,QQe),e(as,HQe),e(as,xx),e(xx,UQe),e(as,JQe),e(E,YQe),e(E,ns),e(ns,vJ),e(vJ,KQe),e(ns,ZQe),e(ns,kx),e(kx,eHe),e(ns,oHe),e(ns,Rx),e(Rx,rHe),e(ns,tHe),e(E,aHe),e(E,ss),e(ss,TJ),e(TJ,nHe),e(ss,sHe),e(ss,Sx),e(Sx,lHe),e(ss,iHe),e(ss,Px),e(Px,dHe),e(ss,cHe),e(E,fHe),e(E,zg),e(zg,FJ),e(FJ,mHe),e(zg,gHe),e(zg,$x),e($x,hHe),e(zg,pHe),e(E,_He),e(E,ls),e(ls,CJ),e(CJ,uHe),e(ls,bHe),e(ls,Ix),e(Ix,vHe),e(ls,THe),e(ls,Nx),e(Nx,FHe),e(ls,CHe),e(E,MHe),e(E,Wg),e(Wg,MJ),e(MJ,EHe),e(Wg,yHe),e(Wg,Dx),e(Dx,wHe),e(Wg,AHe),e(E,LHe),e(E,is),e(is,EJ),e(EJ,BHe),e(is,xHe),e(is,jx),e(jx,kHe),e(is,RHe),e(is,qx),e(qx,SHe),e(is,PHe),e(E,$He),e(E,ds),e(ds,yJ),e(yJ,IHe),e(ds,NHe),e(ds,Gx),e(Gx,DHe),e(ds,jHe),e(ds,Ox),e(Ox,qHe),e(ds,GHe),e(E,OHe),e(E,cs),e(cs,wJ),e(wJ,XHe),e(cs,VHe),e(cs,Xx),e(Xx,zHe),e(cs,WHe),e(cs,Vx),e(Vx,QHe),e(cs,HHe),e(E,UHe),e(E,fs),e(fs,AJ),e(AJ,JHe),e(fs,YHe),e(fs,zx),e(zx,KHe),e(fs,ZHe),e(fs,Wx),e(Wx,eUe),e(fs,oUe),e(E,rUe),e(E,Qg),e(Qg,LJ),e(LJ,tUe),e(Qg,aUe),e(Qg,Qx),e(Qx,nUe),e(Qg,sUe),e(E,lUe),e(E,ms),e(ms,BJ),e(BJ,iUe),e(ms,dUe),e(ms,Hx),e(Hx,cUe),e(ms,fUe),e(ms,Ux),e(Ux,mUe),e(ms,gUe),e(E,hUe),e(E,gs),e(gs,xJ),e(xJ,pUe),e(gs,_Ue),e(gs,Jx),e(Jx,uUe),e(gs,bUe),e(gs,Yx),e(Yx,vUe),e(gs,TUe),e(E,FUe),e(E,hs),e(hs,kJ),e(kJ,CUe),e(hs,MUe),e(hs,Kx),e(Kx,EUe),e(hs,yUe),e(hs,Zx),e(Zx,wUe),e(hs,AUe),e(E,LUe),e(E,ps),e(ps,RJ),e(RJ,BUe),e(ps,xUe),e(ps,ek),e(ek,kUe),e(ps,RUe),e(ps,ok),e(ok,SUe),e(ps,PUe),e(E,$Ue),e(E,_s),e(_s,SJ),e(SJ,IUe),e(_s,NUe),e(_s,rk),e(rk,DUe),e(_s,jUe),e(_s,tk),e(tk,qUe),e(_s,GUe),e(E,OUe),e(E,us),e(us,PJ),e(PJ,XUe),e(us,VUe),e(us,ak),e(ak,zUe),e(us,WUe),e(us,nk),e(nk,QUe),e(us,HUe),e(E,UUe),e(E,Hg),e(Hg,$J),e($J,JUe),e(Hg,YUe),e(Hg,sk),e(sk,KUe),e(Hg,ZUe),e(E,eJe),e(E,bs),e(bs,IJ),e(IJ,oJe),e(bs,rJe),e(bs,lk),e(lk,tJe),e(bs,aJe),e(bs,ik),e(ik,nJe),e(bs,sJe),e(E,lJe),e(E,Ug),e(Ug,NJ),e(NJ,iJe),e(Ug,dJe),e(Ug,dk),e(dk,cJe),e(Ug,fJe),e(E,mJe),e(E,Jg),e(Jg,DJ),e(DJ,gJe),e(Jg,hJe),e(Jg,ck),e(ck,pJe),e(Jg,_Je),e(E,uJe),e(E,vs),e(vs,jJ),e(jJ,bJe),e(vs,vJe),e(vs,fk),e(fk,TJe),e(vs,FJe),e(vs,mk),e(mk,CJe),e(vs,MJe),e(E,EJe),e(E,Ts),e(Ts,qJ),e(qJ,yJe),e(Ts,wJe),e(Ts,gk),e(gk,AJe),e(Ts,LJe),e(Ts,hk),e(hk,BJe),e(Ts,xJe),e(E,kJe),e(E,Yg),e(Yg,GJ),e(GJ,RJe),e(Yg,SJe),e(Yg,pk),e(pk,PJe),e(Yg,$Je),e(E,IJe),e(E,Fs),e(Fs,OJ),e(OJ,NJe),e(Fs,DJe),e(Fs,_k),e(_k,jJe),e(Fs,qJe),e(Fs,uk),e(uk,GJe),e(Fs,OJe),e(E,XJe),e(E,Cs),e(Cs,XJ),e(XJ,VJe),e(Cs,zJe),e(Cs,bk),e(bk,WJe),e(Cs,QJe),e(Cs,vk),e(vk,HJe),e(Cs,UJe),e(E,JJe),e(E,Ms),e(Ms,VJ),e(VJ,YJe),e(Ms,KJe),e(Ms,Tk),e(Tk,ZJe),e(Ms,eYe),e(Ms,Fk),e(Fk,oYe),e(Ms,rYe),e(E,tYe),e(E,Es),e(Es,zJ),e(zJ,aYe),e(Es,nYe),e(Es,Ck),e(Ck,sYe),e(Es,lYe),e(Es,Mk),e(Mk,iYe),e(Es,dYe),e(E,cYe),e(E,ys),e(ys,WJ),e(WJ,fYe),e(ys,mYe),e(ys,Ek),e(Ek,gYe),e(ys,hYe),e(ys,yk),e(yk,pYe),e(ys,_Ye),e(E,uYe),e(E,Kg),e(Kg,QJ),e(QJ,bYe),e(Kg,vYe),e(Kg,wk),e(wk,TYe),e(Kg,FYe),e(E,CYe),e(E,Zg),e(Zg,HJ),e(HJ,MYe),e(Zg,EYe),e(Zg,Ak),e(Ak,yYe),e(Zg,wYe),e(E,AYe),e(E,eh),e(eh,UJ),e(UJ,LYe),e(eh,BYe),e(eh,Lk),e(Lk,xYe),e(eh,kYe),e(E,RYe),e(E,oh),e(oh,JJ),e(JJ,SYe),e(oh,PYe),e(oh,Bk),e(Bk,$Ye),e(oh,IYe),e(E,NYe),e(E,ws),e(ws,YJ),e(YJ,DYe),e(ws,jYe),e(ws,xk),e(xk,qYe),e(ws,GYe),e(ws,kk),e(kk,OYe),e(ws,XYe),e(E,VYe),e(E,rh),e(rh,KJ),e(KJ,zYe),e(rh,WYe),e(rh,Rk),e(Rk,QYe),e(rh,HYe),e(E,UYe),e(E,As),e(As,ZJ),e(ZJ,JYe),e(As,YYe),e(As,Sk),e(Sk,KYe),e(As,ZYe),e(As,Pk),e(Pk,eKe),e(As,oKe),e(E,rKe),e(E,Ls),e(Ls,eY),e(eY,tKe),e(Ls,aKe),e(Ls,$k),e($k,nKe),e(Ls,sKe),e(Ls,Ik),e(Ik,lKe),e(Ls,iKe),e(E,dKe),e(E,Bs),e(Bs,oY),e(oY,cKe),e(Bs,fKe),e(Bs,Nk),e(Nk,mKe),e(Bs,gKe),e(Bs,Dk),e(Dk,hKe),e(Bs,pKe),e(E,_Ke),e(E,xs),e(xs,rY),e(rY,uKe),e(xs,bKe),e(xs,jk),e(jk,vKe),e(xs,TKe),e(xs,qk),e(qk,FKe),e(xs,CKe),e(E,MKe),e(E,ks),e(ks,tY),e(tY,EKe),e(ks,yKe),e(ks,Gk),e(Gk,wKe),e(ks,AKe),e(ks,Ok),e(Ok,LKe),e(ks,BKe),e(E,xKe),e(E,Rs),e(Rs,aY),e(aY,kKe),e(Rs,RKe),e(Rs,Xk),e(Xk,SKe),e(Rs,PKe),e(Rs,Vk),e(Vk,$Ke),e(Rs,IKe),e(E,NKe),e(E,th),e(th,nY),e(nY,DKe),e(th,jKe),e(th,zk),e(zk,qKe),e(th,GKe),e(E,OKe),e(E,ah),e(ah,sY),e(sY,XKe),e(ah,VKe),e(ah,Wk),e(Wk,zKe),e(ah,WKe),e(E,QKe),e(E,Ss),e(Ss,lY),e(lY,HKe),e(Ss,UKe),e(Ss,Qk),e(Qk,JKe),e(Ss,YKe),e(Ss,Hk),e(Hk,KKe),e(Ss,ZKe),e(E,eZe),e(E,Ps),e(Ps,iY),e(iY,oZe),e(Ps,rZe),e(Ps,Uk),e(Uk,tZe),e(Ps,aZe),e(Ps,Jk),e(Jk,nZe),e(Ps,sZe),e(E,lZe),e(E,$s),e($s,dY),e(dY,iZe),e($s,dZe),e($s,Yk),e(Yk,cZe),e($s,fZe),e($s,Kk),e(Kk,mZe),e($s,gZe),e(E,hZe),e(E,nh),e(nh,cY),e(cY,pZe),e(nh,_Ze),e(nh,Zk),e(Zk,uZe),e(nh,bZe),e(E,vZe),e(E,sh),e(sh,fY),e(fY,TZe),e(sh,FZe),e(sh,eR),e(eR,CZe),e(sh,MZe),e(E,EZe),e(E,lh),e(lh,mY),e(mY,yZe),e(lh,wZe),e(lh,oR),e(oR,AZe),e(lh,LZe),e(E,BZe),e(E,ih),e(ih,gY),e(gY,xZe),e(ih,kZe),e(ih,rR),e(rR,RZe),e(ih,SZe),e(E,PZe),e(E,Is),e(Is,hY),e(hY,$Ze),e(Is,IZe),e(Is,tR),e(tR,NZe),e(Is,DZe),e(Is,aR),e(aR,jZe),e(Is,qZe),e(E,GZe),e(E,dh),e(dh,pY),e(pY,OZe),e(dh,XZe),e(dh,nR),e(nR,VZe),e(dh,zZe),e(E,WZe),e(E,ch),e(ch,_Y),e(_Y,QZe),e(ch,HZe),e(ch,sR),e(sR,UZe),e(ch,JZe),e(E,YZe),e(E,Ns),e(Ns,uY),e(uY,KZe),e(Ns,ZZe),e(Ns,lR),e(lR,eeo),e(Ns,oeo),e(Ns,iR),e(iR,reo),e(Ns,teo),e(E,aeo),e(E,Ds),e(Ds,bY),e(bY,neo),e(Ds,seo),e(Ds,dR),e(dR,leo),e(Ds,ieo),e(Ds,cR),e(cR,deo),e(Ds,ceo),e(go,feo),e(go,vY),e(vY,meo),e(go,geo),g(y3,go,null),e(Qo,heo),e(Qo,fh),g(w3,fh,null),e(fh,peo),e(fh,TY),e(TY,_eo),b(c,hke,u),b(c,Hi,u),e(Hi,mh),e(mh,FY),g(A3,FY,null),e(Hi,ueo),e(Hi,CY),e(CY,beo),b(c,pke,u),b(c,Ho,u),g(L3,Ho,null),e(Ho,veo),e(Ho,B3),e(B3,Teo),e(B3,fR),e(fR,Feo),e(B3,Ceo),e(Ho,Meo),e(Ho,x3),e(x3,Eeo),e(x3,MY),e(MY,yeo),e(x3,weo),e(Ho,Aeo),e(Ho,Ie),g(k3,Ie,null),e(Ie,Leo),e(Ie,EY),e(EY,Beo),e(Ie,xeo),e(Ie,Xa),e(Xa,keo),e(Xa,yY),e(yY,Reo),e(Xa,Seo),e(Xa,wY),e(wY,Peo),e(Xa,$eo),e(Xa,AY),e(AY,Ieo),e(Xa,Neo),e(Ie,Deo),e(Ie,re),e(re,gh),e(gh,LY),e(LY,jeo),e(gh,qeo),e(gh,mR),e(mR,Geo),e(gh,Oeo),e(re,Xeo),e(re,hh),e(hh,BY),e(BY,Veo),e(hh,zeo),e(hh,gR),e(gR,Weo),e(hh,Qeo),e(re,Heo),e(re,ph),e(ph,xY),e(xY,Ueo),e(ph,Jeo),e(ph,hR),e(hR,Yeo),e(ph,Keo),e(re,Zeo),e(re,_h),e(_h,kY),e(kY,eoo),e(_h,ooo),e(_h,pR),e(pR,roo),e(_h,too),e(re,aoo),e(re,uh),e(uh,RY),e(RY,noo),e(uh,soo),e(uh,_R),e(_R,loo),e(uh,ioo),e(re,doo),e(re,bh),e(bh,SY),e(SY,coo),e(bh,foo),e(bh,uR),e(uR,moo),e(bh,goo),e(re,hoo),e(re,vh),e(vh,PY),e(PY,poo),e(vh,_oo),e(vh,bR),e(bR,uoo),e(vh,boo),e(re,voo),e(re,Th),e(Th,$Y),e($Y,Too),e(Th,Foo),e(Th,vR),e(vR,Coo),e(Th,Moo),e(re,Eoo),e(re,Fh),e(Fh,IY),e(IY,yoo),e(Fh,woo),e(Fh,TR),e(TR,Aoo),e(Fh,Loo),e(re,Boo),e(re,Ch),e(Ch,NY),e(NY,xoo),e(Ch,koo),e(Ch,FR),e(FR,Roo),e(Ch,Soo),e(re,Poo),e(re,Mh),e(Mh,DY),e(DY,$oo),e(Mh,Ioo),e(Mh,CR),e(CR,Noo),e(Mh,Doo),e(re,joo),e(re,Eh),e(Eh,jY),e(jY,qoo),e(Eh,Goo),e(Eh,MR),e(MR,Ooo),e(Eh,Xoo),e(re,Voo),e(re,yh),e(yh,qY),e(qY,zoo),e(yh,Woo),e(yh,ER),e(ER,Qoo),e(yh,Hoo),e(re,Uoo),e(re,wh),e(wh,GY),e(GY,Joo),e(wh,Yoo),e(wh,yR),e(yR,Koo),e(wh,Zoo),e(re,ero),e(re,Ah),e(Ah,OY),e(OY,oro),e(Ah,rro),e(Ah,wR),e(wR,tro),e(Ah,aro),e(re,nro),e(re,Lh),e(Lh,XY),e(XY,sro),e(Lh,lro),e(Lh,AR),e(AR,iro),e(Lh,dro),e(re,cro),e(re,Bh),e(Bh,VY),e(VY,fro),e(Bh,mro),e(Bh,LR),e(LR,gro),e(Bh,hro),e(re,pro),e(re,xh),e(xh,zY),e(zY,_ro),e(xh,uro),e(xh,BR),e(BR,bro),e(xh,vro),e(Ie,Tro),g(kh,Ie,null),e(Ie,Fro),e(Ie,WY),e(WY,Cro),e(Ie,Mro),g(R3,Ie,null),e(Ho,Ero),e(Ho,Rh),g(S3,Rh,null),e(Rh,yro),e(Rh,QY),e(QY,wro),b(c,_ke,u),b(c,Ui,u),e(Ui,Sh),e(Sh,HY),g(P3,HY,null),e(Ui,Aro),e(Ui,UY),e(UY,Lro),b(c,uke,u),b(c,Uo,u),g($3,Uo,null),e(Uo,Bro),e(Uo,I3),e(I3,xro),e(I3,xR),e(xR,kro),e(I3,Rro),e(Uo,Sro),e(Uo,N3),e(N3,Pro),e(N3,JY),e(JY,$ro),e(N3,Iro),e(Uo,Nro),e(Uo,Ne),g(D3,Ne,null),e(Ne,Dro),e(Ne,YY),e(YY,jro),e(Ne,qro),e(Ne,Ji),e(Ji,Gro),e(Ji,KY),e(KY,Oro),e(Ji,Xro),e(Ji,ZY),e(ZY,Vro),e(Ji,zro),e(Ne,Wro),e(Ne,xe),e(xe,Ph),e(Ph,eK),e(eK,Qro),e(Ph,Hro),e(Ph,kR),e(kR,Uro),e(Ph,Jro),e(xe,Yro),e(xe,$h),e($h,oK),e(oK,Kro),e($h,Zro),e($h,RR),e(RR,eto),e($h,oto),e(xe,rto),e(xe,Ih),e(Ih,rK),e(rK,tto),e(Ih,ato),e(Ih,SR),e(SR,nto),e(Ih,sto),e(xe,lto),e(xe,Nh),e(Nh,tK),e(tK,ito),e(Nh,dto),e(Nh,PR),e(PR,cto),e(Nh,fto),e(xe,mto),e(xe,Dh),e(Dh,aK),e(aK,gto),e(Dh,hto),e(Dh,$R),e($R,pto),e(Dh,_to),e(xe,uto),e(xe,jh),e(jh,nK),e(nK,bto),e(jh,vto),e(jh,IR),e(IR,Tto),e(jh,Fto),e(xe,Cto),e(xe,qh),e(qh,sK),e(sK,Mto),e(qh,Eto),e(qh,NR),e(NR,yto),e(qh,wto),e(xe,Ato),e(xe,Gh),e(Gh,lK),e(lK,Lto),e(Gh,Bto),e(Gh,DR),e(DR,xto),e(Gh,kto),e(Ne,Rto),g(Oh,Ne,null),e(Ne,Sto),e(Ne,iK),e(iK,Pto),e(Ne,$to),g(j3,Ne,null),e(Uo,Ito),e(Uo,Xh),g(q3,Xh,null),e(Xh,Nto),e(Xh,dK),e(dK,Dto),b(c,bke,u),b(c,Yi,u),e(Yi,Vh),e(Vh,cK),g(G3,cK,null),e(Yi,jto),e(Yi,fK),e(fK,qto),b(c,vke,u),b(c,Jo,u),g(O3,Jo,null),e(Jo,Gto),e(Jo,Ki),e(Ki,Oto),e(Ki,mK),e(mK,Xto),e(Ki,Vto),e(Ki,gK),e(gK,zto),e(Ki,Wto),e(Jo,Qto),e(Jo,X3),e(X3,Hto),e(X3,hK),e(hK,Uto),e(X3,Jto),e(Jo,Yto),e(Jo,Vr),g(V3,Vr,null),e(Vr,Kto),e(Vr,pK),e(pK,Zto),e(Vr,eao),e(Vr,Zi),e(Zi,oao),e(Zi,_K),e(_K,rao),e(Zi,tao),e(Zi,uK),e(uK,aao),e(Zi,nao),e(Vr,sao),e(Vr,bK),e(bK,lao),e(Vr,iao),g(z3,Vr,null),e(Jo,dao),e(Jo,De),g(W3,De,null),e(De,cao),e(De,vK),e(vK,fao),e(De,mao),e(De,Va),e(Va,gao),e(Va,TK),e(TK,hao),e(Va,pao),e(Va,FK),e(FK,_ao),e(Va,uao),e(Va,CK),e(CK,bao),e(Va,vao),e(De,Tao),e(De,F),e(F,zh),e(zh,MK),e(MK,Fao),e(zh,Cao),e(zh,jR),e(jR,Mao),e(zh,Eao),e(F,yao),e(F,Wh),e(Wh,EK),e(EK,wao),e(Wh,Aao),e(Wh,qR),e(qR,Lao),e(Wh,Bao),e(F,xao),e(F,Qh),e(Qh,yK),e(yK,kao),e(Qh,Rao),e(Qh,GR),e(GR,Sao),e(Qh,Pao),e(F,$ao),e(F,Hh),e(Hh,wK),e(wK,Iao),e(Hh,Nao),e(Hh,OR),e(OR,Dao),e(Hh,jao),e(F,qao),e(F,Uh),e(Uh,AK),e(AK,Gao),e(Uh,Oao),e(Uh,XR),e(XR,Xao),e(Uh,Vao),e(F,zao),e(F,Jh),e(Jh,LK),e(LK,Wao),e(Jh,Qao),e(Jh,VR),e(VR,Hao),e(Jh,Uao),e(F,Jao),e(F,Yh),e(Yh,BK),e(BK,Yao),e(Yh,Kao),e(Yh,zR),e(zR,Zao),e(Yh,eno),e(F,ono),e(F,Kh),e(Kh,xK),e(xK,rno),e(Kh,tno),e(Kh,WR),e(WR,ano),e(Kh,nno),e(F,sno),e(F,Zh),e(Zh,kK),e(kK,lno),e(Zh,ino),e(Zh,QR),e(QR,dno),e(Zh,cno),e(F,fno),e(F,ep),e(ep,RK),e(RK,mno),e(ep,gno),e(ep,HR),e(HR,hno),e(ep,pno),e(F,_no),e(F,op),e(op,SK),e(SK,uno),e(op,bno),e(op,UR),e(UR,vno),e(op,Tno),e(F,Fno),e(F,rp),e(rp,PK),e(PK,Cno),e(rp,Mno),e(rp,JR),e(JR,Eno),e(rp,yno),e(F,wno),e(F,tp),e(tp,$K),e($K,Ano),e(tp,Lno),e(tp,YR),e(YR,Bno),e(tp,xno),e(F,kno),e(F,ap),e(ap,IK),e(IK,Rno),e(ap,Sno),e(ap,KR),e(KR,Pno),e(ap,$no),e(F,Ino),e(F,np),e(np,NK),e(NK,Nno),e(np,Dno),e(np,ZR),e(ZR,jno),e(np,qno),e(F,Gno),e(F,sp),e(sp,DK),e(DK,Ono),e(sp,Xno),e(sp,eS),e(eS,Vno),e(sp,zno),e(F,Wno),e(F,lp),e(lp,jK),e(jK,Qno),e(lp,Hno),e(lp,oS),e(oS,Uno),e(lp,Jno),e(F,Yno),e(F,ip),e(ip,qK),e(qK,Kno),e(ip,Zno),e(ip,rS),e(rS,eso),e(ip,oso),e(F,rso),e(F,dp),e(dp,GK),e(GK,tso),e(dp,aso),e(dp,tS),e(tS,nso),e(dp,sso),e(F,lso),e(F,cp),e(cp,OK),e(OK,iso),e(cp,dso),e(cp,aS),e(aS,cso),e(cp,fso),e(F,mso),e(F,fp),e(fp,XK),e(XK,gso),e(fp,hso),e(fp,nS),e(nS,pso),e(fp,_so),e(F,uso),e(F,mp),e(mp,VK),e(VK,bso),e(mp,vso),e(mp,sS),e(sS,Tso),e(mp,Fso),e(F,Cso),e(F,gp),e(gp,zK),e(zK,Mso),e(gp,Eso),e(gp,lS),e(lS,yso),e(gp,wso),e(F,Aso),e(F,hp),e(hp,WK),e(WK,Lso),e(hp,Bso),e(hp,iS),e(iS,xso),e(hp,kso),e(F,Rso),e(F,pp),e(pp,QK),e(QK,Sso),e(pp,Pso),e(pp,dS),e(dS,$so),e(pp,Iso),e(F,Nso),e(F,_p),e(_p,HK),e(HK,Dso),e(_p,jso),e(_p,cS),e(cS,qso),e(_p,Gso),e(F,Oso),e(F,up),e(up,UK),e(UK,Xso),e(up,Vso),e(up,fS),e(fS,zso),e(up,Wso),e(F,Qso),e(F,bp),e(bp,JK),e(JK,Hso),e(bp,Uso),e(bp,mS),e(mS,Jso),e(bp,Yso),e(F,Kso),e(F,js),e(js,YK),e(YK,Zso),e(js,elo),e(js,gS),e(gS,olo),e(js,rlo),e(js,hS),e(hS,tlo),e(js,alo),e(F,nlo),e(F,vp),e(vp,KK),e(KK,slo),e(vp,llo),e(vp,pS),e(pS,ilo),e(vp,dlo),e(F,clo),e(F,Tp),e(Tp,ZK),e(ZK,flo),e(Tp,mlo),e(Tp,_S),e(_S,glo),e(Tp,hlo),e(F,plo),e(F,Fp),e(Fp,eZ),e(eZ,_lo),e(Fp,ulo),e(Fp,uS),e(uS,blo),e(Fp,vlo),e(F,Tlo),e(F,Cp),e(Cp,oZ),e(oZ,Flo),e(Cp,Clo),e(Cp,bS),e(bS,Mlo),e(Cp,Elo),e(F,ylo),e(F,Mp),e(Mp,rZ),e(rZ,wlo),e(Mp,Alo),e(Mp,vS),e(vS,Llo),e(Mp,Blo),e(F,xlo),e(F,Ep),e(Ep,tZ),e(tZ,klo),e(Ep,Rlo),e(Ep,TS),e(TS,Slo),e(Ep,Plo),e(F,$lo),e(F,yp),e(yp,aZ),e(aZ,Ilo),e(yp,Nlo),e(yp,FS),e(FS,Dlo),e(yp,jlo),e(F,qlo),e(F,wp),e(wp,nZ),e(nZ,Glo),e(wp,Olo),e(wp,CS),e(CS,Xlo),e(wp,Vlo),e(F,zlo),e(F,Ap),e(Ap,sZ),e(sZ,Wlo),e(Ap,Qlo),e(Ap,MS),e(MS,Hlo),e(Ap,Ulo),e(F,Jlo),e(F,Lp),e(Lp,lZ),e(lZ,Ylo),e(Lp,Klo),e(Lp,ES),e(ES,Zlo),e(Lp,eio),e(F,oio),e(F,Bp),e(Bp,iZ),e(iZ,rio),e(Bp,tio),e(Bp,yS),e(yS,aio),e(Bp,nio),e(F,sio),e(F,xp),e(xp,dZ),e(dZ,lio),e(xp,iio),e(xp,wS),e(wS,dio),e(xp,cio),e(F,fio),e(F,kp),e(kp,cZ),e(cZ,mio),e(kp,gio),e(kp,AS),e(AS,hio),e(kp,pio),e(F,_io),e(F,Rp),e(Rp,fZ),e(fZ,uio),e(Rp,bio),e(Rp,LS),e(LS,vio),e(Rp,Tio),e(F,Fio),e(F,Sp),e(Sp,mZ),e(mZ,Cio),e(Sp,Mio),e(Sp,BS),e(BS,Eio),e(Sp,yio),e(F,wio),e(F,Pp),e(Pp,gZ),e(gZ,Aio),e(Pp,Lio),e(Pp,xS),e(xS,Bio),e(Pp,xio),e(F,kio),e(F,$p),e($p,hZ),e(hZ,Rio),e($p,Sio),e($p,kS),e(kS,Pio),e($p,$io),e(F,Iio),e(F,Ip),e(Ip,pZ),e(pZ,Nio),e(Ip,Dio),e(Ip,RS),e(RS,jio),e(Ip,qio),e(F,Gio),e(F,Np),e(Np,_Z),e(_Z,Oio),e(Np,Xio),e(Np,SS),e(SS,Vio),e(Np,zio),e(F,Wio),e(F,Dp),e(Dp,uZ),e(uZ,Qio),e(Dp,Hio),e(Dp,PS),e(PS,Uio),e(Dp,Jio),e(F,Yio),e(F,jp),e(jp,bZ),e(bZ,Kio),e(jp,Zio),e(jp,$S),e($S,edo),e(jp,odo),e(F,rdo),e(F,qp),e(qp,vZ),e(vZ,tdo),e(qp,ado),e(qp,IS),e(IS,ndo),e(qp,sdo),e(F,ldo),e(F,Gp),e(Gp,TZ),e(TZ,ido),e(Gp,ddo),e(Gp,NS),e(NS,cdo),e(Gp,fdo),e(F,mdo),e(F,Op),e(Op,FZ),e(FZ,gdo),e(Op,hdo),e(Op,DS),e(DS,pdo),e(Op,_do),e(F,udo),e(F,Xp),e(Xp,CZ),e(CZ,bdo),e(Xp,vdo),e(Xp,jS),e(jS,Tdo),e(Xp,Fdo),e(F,Cdo),e(F,Vp),e(Vp,MZ),e(MZ,Mdo),e(Vp,Edo),e(Vp,qS),e(qS,ydo),e(Vp,wdo),e(F,Ado),e(F,zp),e(zp,EZ),e(EZ,Ldo),e(zp,Bdo),e(zp,GS),e(GS,xdo),e(zp,kdo),e(F,Rdo),e(F,Wp),e(Wp,yZ),e(yZ,Sdo),e(Wp,Pdo),e(Wp,OS),e(OS,$do),e(Wp,Ido),e(F,Ndo),e(F,Qp),e(Qp,wZ),e(wZ,Ddo),e(Qp,jdo),e(Qp,XS),e(XS,qdo),e(Qp,Gdo),e(F,Odo),e(F,Hp),e(Hp,AZ),e(AZ,Xdo),e(Hp,Vdo),e(Hp,VS),e(VS,zdo),e(Hp,Wdo),e(F,Qdo),e(F,Up),e(Up,LZ),e(LZ,Hdo),e(Up,Udo),e(Up,zS),e(zS,Jdo),e(Up,Ydo),e(F,Kdo),e(F,Jp),e(Jp,BZ),e(BZ,Zdo),e(Jp,eco),e(Jp,WS),e(WS,oco),e(Jp,rco),e(F,tco),e(F,Yp),e(Yp,xZ),e(xZ,aco),e(Yp,nco),e(Yp,QS),e(QS,sco),e(Yp,lco),e(F,ico),e(F,Kp),e(Kp,kZ),e(kZ,dco),e(Kp,cco),e(Kp,HS),e(HS,fco),e(Kp,mco),e(F,gco),e(F,Zp),e(Zp,RZ),e(RZ,hco),e(Zp,pco),e(Zp,US),e(US,_co),e(Zp,uco),e(F,bco),e(F,e_),e(e_,SZ),e(SZ,vco),e(e_,Tco),e(e_,JS),e(JS,Fco),e(e_,Cco),e(F,Mco),e(F,o_),e(o_,PZ),e(PZ,Eco),e(o_,yco),e(o_,YS),e(YS,wco),e(o_,Aco),e(F,Lco),e(F,r_),e(r_,$Z),e($Z,Bco),e(r_,xco),e(r_,KS),e(KS,kco),e(r_,Rco),e(F,Sco),e(F,t_),e(t_,IZ),e(IZ,Pco),e(t_,$co),e(t_,ZS),e(ZS,Ico),e(t_,Nco),e(F,Dco),e(F,a_),e(a_,NZ),e(NZ,jco),e(a_,qco),e(a_,eP),e(eP,Gco),e(a_,Oco),e(F,Xco),e(F,n_),e(n_,DZ),e(DZ,Vco),e(n_,zco),e(n_,oP),e(oP,Wco),e(n_,Qco),e(F,Hco),e(F,s_),e(s_,jZ),e(jZ,Uco),e(s_,Jco),e(s_,rP),e(rP,Yco),e(s_,Kco),e(F,Zco),e(F,l_),e(l_,qZ),e(qZ,efo),e(l_,ofo),e(l_,tP),e(tP,rfo),e(l_,tfo),e(F,afo),e(F,i_),e(i_,GZ),e(GZ,nfo),e(i_,sfo),e(i_,aP),e(aP,lfo),e(i_,ifo),e(F,dfo),e(F,d_),e(d_,OZ),e(OZ,cfo),e(d_,ffo),e(d_,nP),e(nP,mfo),e(d_,gfo),e(F,hfo),e(F,c_),e(c_,XZ),e(XZ,pfo),e(c_,_fo),e(c_,sP),e(sP,ufo),e(c_,bfo),e(F,vfo),e(F,f_),e(f_,VZ),e(VZ,Tfo),e(f_,Ffo),e(f_,lP),e(lP,Cfo),e(f_,Mfo),e(F,Efo),e(F,m_),e(m_,zZ),e(zZ,yfo),e(m_,wfo),e(m_,iP),e(iP,Afo),e(m_,Lfo),e(F,Bfo),e(F,g_),e(g_,WZ),e(WZ,xfo),e(g_,kfo),e(g_,dP),e(dP,Rfo),e(g_,Sfo),e(F,Pfo),e(F,h_),e(h_,QZ),e(QZ,$fo),e(h_,Ifo),e(h_,cP),e(cP,Nfo),e(h_,Dfo),e(F,jfo),e(F,p_),e(p_,HZ),e(HZ,qfo),e(p_,Gfo),e(p_,fP),e(fP,Ofo),e(p_,Xfo),e(F,Vfo),e(F,__),e(__,UZ),e(UZ,zfo),e(__,Wfo),e(__,mP),e(mP,Qfo),e(__,Hfo),e(F,Ufo),e(F,u_),e(u_,JZ),e(JZ,Jfo),e(u_,Yfo),e(u_,gP),e(gP,Kfo),e(u_,Zfo),e(F,emo),e(F,b_),e(b_,YZ),e(YZ,omo),e(b_,rmo),e(b_,hP),e(hP,tmo),e(b_,amo),e(F,nmo),e(F,v_),e(v_,KZ),e(KZ,smo),e(v_,lmo),e(v_,pP),e(pP,imo),e(v_,dmo),e(F,cmo),e(F,T_),e(T_,ZZ),e(ZZ,fmo),e(T_,mmo),e(T_,_P),e(_P,gmo),e(T_,hmo),e(F,pmo),e(F,F_),e(F_,eee),e(eee,_mo),e(F_,umo),e(F_,uP),e(uP,bmo),e(F_,vmo),e(F,Tmo),e(F,C_),e(C_,oee),e(oee,Fmo),e(C_,Cmo),e(C_,bP),e(bP,Mmo),e(C_,Emo),e(F,ymo),e(F,M_),e(M_,ree),e(ree,wmo),e(M_,Amo),e(M_,vP),e(vP,Lmo),e(M_,Bmo),e(F,xmo),e(F,E_),e(E_,tee),e(tee,kmo),e(E_,Rmo),e(E_,TP),e(TP,Smo),e(E_,Pmo),e(F,$mo),e(F,y_),e(y_,aee),e(aee,Imo),e(y_,Nmo),e(y_,FP),e(FP,Dmo),e(y_,jmo),e(F,qmo),e(F,w_),e(w_,nee),e(nee,Gmo),e(w_,Omo),e(w_,CP),e(CP,Xmo),e(w_,Vmo),e(De,zmo),e(De,A_),e(A_,Wmo),e(A_,see),e(see,Qmo),e(A_,Hmo),e(A_,lee),e(lee,Umo),e(De,Jmo),e(De,iee),e(iee,Ymo),e(De,Kmo),g(Q3,De,null),b(c,Tke,u),b(c,ed,u),e(ed,L_),e(L_,dee),g(H3,dee,null),e(ed,Zmo),e(ed,cee),e(cee,ego),b(c,Fke,u),b(c,Yo,u),g(U3,Yo,null),e(Yo,ogo),e(Yo,od),e(od,rgo),e(od,fee),e(fee,tgo),e(od,ago),e(od,mee),e(mee,ngo),e(od,sgo),e(Yo,lgo),e(Yo,J3),e(J3,igo),e(J3,gee),e(gee,dgo),e(J3,cgo),e(Yo,fgo),e(Yo,zr),g(Y3,zr,null),e(zr,mgo),e(zr,hee),e(hee,ggo),e(zr,hgo),e(zr,rd),e(rd,pgo),e(rd,pee),e(pee,_go),e(rd,ugo),e(rd,_ee),e(_ee,bgo),e(rd,vgo),e(zr,Tgo),e(zr,uee),e(uee,Fgo),e(zr,Cgo),g(K3,zr,null),e(Yo,Mgo),e(Yo,je),g(Z3,je,null),e(je,Ego),e(je,bee),e(bee,ygo),e(je,wgo),e(je,za),e(za,Ago),e(za,vee),e(vee,Lgo),e(za,Bgo),e(za,Tee),e(Tee,xgo),e(za,kgo),e(za,Fee),e(Fee,Rgo),e(za,Sgo),e(je,Pgo),e(je,k),e(k,B_),e(B_,Cee),e(Cee,$go),e(B_,Igo),e(B_,MP),e(MP,Ngo),e(B_,Dgo),e(k,jgo),e(k,x_),e(x_,Mee),e(Mee,qgo),e(x_,Ggo),e(x_,EP),e(EP,Ogo),e(x_,Xgo),e(k,Vgo),e(k,k_),e(k_,Eee),e(Eee,zgo),e(k_,Wgo),e(k_,yP),e(yP,Qgo),e(k_,Hgo),e(k,Ugo),e(k,R_),e(R_,yee),e(yee,Jgo),e(R_,Ygo),e(R_,wP),e(wP,Kgo),e(R_,Zgo),e(k,eho),e(k,S_),e(S_,wee),e(wee,oho),e(S_,rho),e(S_,AP),e(AP,tho),e(S_,aho),e(k,nho),e(k,P_),e(P_,Aee),e(Aee,sho),e(P_,lho),e(P_,LP),e(LP,iho),e(P_,dho),e(k,cho),e(k,$_),e($_,Lee),e(Lee,fho),e($_,mho),e($_,BP),e(BP,gho),e($_,hho),e(k,pho),e(k,I_),e(I_,Bee),e(Bee,_ho),e(I_,uho),e(I_,xP),e(xP,bho),e(I_,vho),e(k,Tho),e(k,N_),e(N_,xee),e(xee,Fho),e(N_,Cho),e(N_,kP),e(kP,Mho),e(N_,Eho),e(k,yho),e(k,D_),e(D_,kee),e(kee,who),e(D_,Aho),e(D_,RP),e(RP,Lho),e(D_,Bho),e(k,xho),e(k,j_),e(j_,Ree),e(Ree,kho),e(j_,Rho),e(j_,SP),e(SP,Sho),e(j_,Pho),e(k,$ho),e(k,q_),e(q_,See),e(See,Iho),e(q_,Nho),e(q_,PP),e(PP,Dho),e(q_,jho),e(k,qho),e(k,G_),e(G_,Pee),e(Pee,Gho),e(G_,Oho),e(G_,$P),e($P,Xho),e(G_,Vho),e(k,zho),e(k,O_),e(O_,$ee),e($ee,Who),e(O_,Qho),e(O_,IP),e(IP,Hho),e(O_,Uho),e(k,Jho),e(k,X_),e(X_,Iee),e(Iee,Yho),e(X_,Kho),e(X_,NP),e(NP,Zho),e(X_,epo),e(k,opo),e(k,V_),e(V_,Nee),e(Nee,rpo),e(V_,tpo),e(V_,DP),e(DP,apo),e(V_,npo),e(k,spo),e(k,z_),e(z_,Dee),e(Dee,lpo),e(z_,ipo),e(z_,jP),e(jP,dpo),e(z_,cpo),e(k,fpo),e(k,W_),e(W_,jee),e(jee,mpo),e(W_,gpo),e(W_,qP),e(qP,hpo),e(W_,ppo),e(k,_po),e(k,Q_),e(Q_,qee),e(qee,upo),e(Q_,bpo),e(Q_,GP),e(GP,vpo),e(Q_,Tpo),e(k,Fpo),e(k,H_),e(H_,Gee),e(Gee,Cpo),e(H_,Mpo),e(H_,OP),e(OP,Epo),e(H_,ypo),e(k,wpo),e(k,U_),e(U_,Oee),e(Oee,Apo),e(U_,Lpo),e(U_,XP),e(XP,Bpo),e(U_,xpo),e(k,kpo),e(k,J_),e(J_,Xee),e(Xee,Rpo),e(J_,Spo),e(J_,VP),e(VP,Ppo),e(J_,$po),e(k,Ipo),e(k,Y_),e(Y_,Vee),e(Vee,Npo),e(Y_,Dpo),e(Y_,zP),e(zP,jpo),e(Y_,qpo),e(k,Gpo),e(k,K_),e(K_,zee),e(zee,Opo),e(K_,Xpo),e(K_,WP),e(WP,Vpo),e(K_,zpo),e(k,Wpo),e(k,Z_),e(Z_,Wee),e(Wee,Qpo),e(Z_,Hpo),e(Z_,QP),e(QP,Upo),e(Z_,Jpo),e(k,Ypo),e(k,eu),e(eu,Qee),e(Qee,Kpo),e(eu,Zpo),e(eu,HP),e(HP,e_o),e(eu,o_o),e(k,r_o),e(k,ou),e(ou,Hee),e(Hee,t_o),e(ou,a_o),e(ou,UP),e(UP,n_o),e(ou,s_o),e(k,l_o),e(k,ru),e(ru,Uee),e(Uee,i_o),e(ru,d_o),e(ru,JP),e(JP,c_o),e(ru,f_o),e(k,m_o),e(k,tu),e(tu,Jee),e(Jee,g_o),e(tu,h_o),e(tu,YP),e(YP,p_o),e(tu,__o),e(k,u_o),e(k,au),e(au,Yee),e(Yee,b_o),e(au,v_o),e(au,KP),e(KP,T_o),e(au,F_o),e(k,C_o),e(k,nu),e(nu,Kee),e(Kee,M_o),e(nu,E_o),e(nu,ZP),e(ZP,y_o),e(nu,w_o),e(k,A_o),e(k,su),e(su,Zee),e(Zee,L_o),e(su,B_o),e(su,e$),e(e$,x_o),e(su,k_o),e(k,R_o),e(k,lu),e(lu,eoe),e(eoe,S_o),e(lu,P_o),e(lu,o$),e(o$,$_o),e(lu,I_o),e(k,N_o),e(k,iu),e(iu,ooe),e(ooe,D_o),e(iu,j_o),e(iu,r$),e(r$,q_o),e(iu,G_o),e(k,O_o),e(k,du),e(du,roe),e(roe,X_o),e(du,V_o),e(du,t$),e(t$,z_o),e(du,W_o),e(k,Q_o),e(k,cu),e(cu,toe),e(toe,H_o),e(cu,U_o),e(cu,a$),e(a$,J_o),e(cu,Y_o),e(k,K_o),e(k,fu),e(fu,aoe),e(aoe,Z_o),e(fu,euo),e(fu,n$),e(n$,ouo),e(fu,ruo),e(k,tuo),e(k,mu),e(mu,noe),e(noe,auo),e(mu,nuo),e(mu,s$),e(s$,suo),e(mu,luo),e(k,iuo),e(k,gu),e(gu,soe),e(soe,duo),e(gu,cuo),e(gu,l$),e(l$,fuo),e(gu,muo),e(je,guo),e(je,hu),e(hu,huo),e(hu,loe),e(loe,puo),e(hu,_uo),e(hu,ioe),e(ioe,uuo),e(je,buo),e(je,doe),e(doe,vuo),e(je,Tuo),g(ey,je,null),b(c,Cke,u),b(c,td,u),e(td,pu),e(pu,coe),g(oy,coe,null),e(td,Fuo),e(td,foe),e(foe,Cuo),b(c,Mke,u),b(c,Ko,u),g(ry,Ko,null),e(Ko,Muo),e(Ko,ad),e(ad,Euo),e(ad,moe),e(moe,yuo),e(ad,wuo),e(ad,goe),e(goe,Auo),e(ad,Luo),e(Ko,Buo),e(Ko,ty),e(ty,xuo),e(ty,hoe),e(hoe,kuo),e(ty,Ruo),e(Ko,Suo),e(Ko,Wr),g(ay,Wr,null),e(Wr,Puo),e(Wr,poe),e(poe,$uo),e(Wr,Iuo),e(Wr,nd),e(nd,Nuo),e(nd,_oe),e(_oe,Duo),e(nd,juo),e(nd,uoe),e(uoe,quo),e(nd,Guo),e(Wr,Ouo),e(Wr,boe),e(boe,Xuo),e(Wr,Vuo),g(ny,Wr,null),e(Ko,zuo),e(Ko,qe),g(sy,qe,null),e(qe,Wuo),e(qe,voe),e(voe,Quo),e(qe,Huo),e(qe,Wa),e(Wa,Uuo),e(Wa,Toe),e(Toe,Juo),e(Wa,Yuo),e(Wa,Foe),e(Foe,Kuo),e(Wa,Zuo),e(Wa,Coe),e(Coe,e1o),e(Wa,o1o),e(qe,r1o),e(qe,$),e($,_u),e(_u,Moe),e(Moe,t1o),e(_u,a1o),e(_u,i$),e(i$,n1o),e(_u,s1o),e($,l1o),e($,uu),e(uu,Eoe),e(Eoe,i1o),e(uu,d1o),e(uu,d$),e(d$,c1o),e(uu,f1o),e($,m1o),e($,bu),e(bu,yoe),e(yoe,g1o),e(bu,h1o),e(bu,c$),e(c$,p1o),e(bu,_1o),e($,u1o),e($,vu),e(vu,woe),e(woe,b1o),e(vu,v1o),e(vu,f$),e(f$,T1o),e(vu,F1o),e($,C1o),e($,Tu),e(Tu,Aoe),e(Aoe,M1o),e(Tu,E1o),e(Tu,m$),e(m$,y1o),e(Tu,w1o),e($,A1o),e($,Fu),e(Fu,Loe),e(Loe,L1o),e(Fu,B1o),e(Fu,g$),e(g$,x1o),e(Fu,k1o),e($,R1o),e($,Cu),e(Cu,Boe),e(Boe,S1o),e(Cu,P1o),e(Cu,h$),e(h$,$1o),e(Cu,I1o),e($,N1o),e($,Mu),e(Mu,xoe),e(xoe,D1o),e(Mu,j1o),e(Mu,p$),e(p$,q1o),e(Mu,G1o),e($,O1o),e($,Eu),e(Eu,koe),e(koe,X1o),e(Eu,V1o),e(Eu,_$),e(_$,z1o),e(Eu,W1o),e($,Q1o),e($,yu),e(yu,Roe),e(Roe,H1o),e(yu,U1o),e(yu,u$),e(u$,J1o),e(yu,Y1o),e($,K1o),e($,wu),e(wu,Soe),e(Soe,Z1o),e(wu,e9o),e(wu,b$),e(b$,o9o),e(wu,r9o),e($,t9o),e($,Au),e(Au,Poe),e(Poe,a9o),e(Au,n9o),e(Au,v$),e(v$,s9o),e(Au,l9o),e($,i9o),e($,Lu),e(Lu,$oe),e($oe,d9o),e(Lu,c9o),e(Lu,T$),e(T$,f9o),e(Lu,m9o),e($,g9o),e($,Bu),e(Bu,Ioe),e(Ioe,h9o),e(Bu,p9o),e(Bu,F$),e(F$,_9o),e(Bu,u9o),e($,b9o),e($,xu),e(xu,Noe),e(Noe,v9o),e(xu,T9o),e(xu,C$),e(C$,F9o),e(xu,C9o),e($,M9o),e($,ku),e(ku,Doe),e(Doe,E9o),e(ku,y9o),e(ku,M$),e(M$,w9o),e(ku,A9o),e($,L9o),e($,Ru),e(Ru,joe),e(joe,B9o),e(Ru,x9o),e(Ru,E$),e(E$,k9o),e(Ru,R9o),e($,S9o),e($,Su),e(Su,qoe),e(qoe,P9o),e(Su,$9o),e(Su,y$),e(y$,I9o),e(Su,N9o),e($,D9o),e($,Pu),e(Pu,Goe),e(Goe,j9o),e(Pu,q9o),e(Pu,w$),e(w$,G9o),e(Pu,O9o),e($,X9o),e($,$u),e($u,Ooe),e(Ooe,V9o),e($u,z9o),e($u,A$),e(A$,W9o),e($u,Q9o),e($,H9o),e($,Iu),e(Iu,Xoe),e(Xoe,U9o),e(Iu,J9o),e(Iu,L$),e(L$,Y9o),e(Iu,K9o),e($,Z9o),e($,Nu),e(Nu,Voe),e(Voe,ebo),e(Nu,obo),e(Nu,B$),e(B$,rbo),e(Nu,tbo),e($,abo),e($,Du),e(Du,zoe),e(zoe,nbo),e(Du,sbo),e(Du,x$),e(x$,lbo),e(Du,ibo),e($,dbo),e($,ju),e(ju,Woe),e(Woe,cbo),e(ju,fbo),e(ju,k$),e(k$,mbo),e(ju,gbo),e($,hbo),e($,qu),e(qu,Qoe),e(Qoe,pbo),e(qu,_bo),e(qu,R$),e(R$,ubo),e(qu,bbo),e($,vbo),e($,Gu),e(Gu,Hoe),e(Hoe,Tbo),e(Gu,Fbo),e(Gu,S$),e(S$,Cbo),e(Gu,Mbo),e($,Ebo),e($,Ou),e(Ou,Uoe),e(Uoe,ybo),e(Ou,wbo),e(Ou,P$),e(P$,Abo),e(Ou,Lbo),e($,Bbo),e($,Xu),e(Xu,Joe),e(Joe,xbo),e(Xu,kbo),e(Xu,$$),e($$,Rbo),e(Xu,Sbo),e($,Pbo),e($,Vu),e(Vu,Yoe),e(Yoe,$bo),e(Vu,Ibo),e(Vu,I$),e(I$,Nbo),e(Vu,Dbo),e($,jbo),e($,zu),e(zu,Koe),e(Koe,qbo),e(zu,Gbo),e(zu,N$),e(N$,Obo),e(zu,Xbo),e($,Vbo),e($,Wu),e(Wu,Zoe),e(Zoe,zbo),e(Wu,Wbo),e(Wu,D$),e(D$,Qbo),e(Wu,Hbo),e($,Ubo),e($,Qu),e(Qu,ere),e(ere,Jbo),e(Qu,Ybo),e(Qu,j$),e(j$,Kbo),e(Qu,Zbo),e($,e5o),e($,Hu),e(Hu,ore),e(ore,o5o),e(Hu,r5o),e(Hu,q$),e(q$,t5o),e(Hu,a5o),e($,n5o),e($,Uu),e(Uu,rre),e(rre,s5o),e(Uu,l5o),e(Uu,G$),e(G$,i5o),e(Uu,d5o),e($,c5o),e($,Ju),e(Ju,tre),e(tre,f5o),e(Ju,m5o),e(Ju,O$),e(O$,g5o),e(Ju,h5o),e(qe,p5o),e(qe,Yu),e(Yu,_5o),e(Yu,are),e(are,u5o),e(Yu,b5o),e(Yu,nre),e(nre,v5o),e(qe,T5o),e(qe,sre),e(sre,F5o),e(qe,C5o),g(ly,qe,null),b(c,Eke,u),b(c,sd,u),e(sd,Ku),e(Ku,lre),g(iy,lre,null),e(sd,M5o),e(sd,ire),e(ire,E5o),b(c,yke,u),b(c,Zo,u),g(dy,Zo,null),e(Zo,y5o),e(Zo,ld),e(ld,w5o),e(ld,dre),e(dre,A5o),e(ld,L5o),e(ld,cre),e(cre,B5o),e(ld,x5o),e(Zo,k5o),e(Zo,cy),e(cy,R5o),e(cy,fre),e(fre,S5o),e(cy,P5o),e(Zo,$5o),e(Zo,Qr),g(fy,Qr,null),e(Qr,I5o),e(Qr,mre),e(mre,N5o),e(Qr,D5o),e(Qr,id),e(id,j5o),e(id,gre),e(gre,q5o),e(id,G5o),e(id,hre),e(hre,O5o),e(id,X5o),e(Qr,V5o),e(Qr,pre),e(pre,z5o),e(Qr,W5o),g(my,Qr,null),e(Zo,Q5o),e(Zo,Ge),g(gy,Ge,null),e(Ge,H5o),e(Ge,_re),e(_re,U5o),e(Ge,J5o),e(Ge,Qa),e(Qa,Y5o),e(Qa,ure),e(ure,K5o),e(Qa,Z5o),e(Qa,bre),e(bre,e2o),e(Qa,o2o),e(Qa,vre),e(vre,r2o),e(Qa,t2o),e(Ge,a2o),e(Ge,I),e(I,Zu),e(Zu,Tre),e(Tre,n2o),e(Zu,s2o),e(Zu,X$),e(X$,l2o),e(Zu,i2o),e(I,d2o),e(I,e1),e(e1,Fre),e(Fre,c2o),e(e1,f2o),e(e1,V$),e(V$,m2o),e(e1,g2o),e(I,h2o),e(I,o1),e(o1,Cre),e(Cre,p2o),e(o1,_2o),e(o1,z$),e(z$,u2o),e(o1,b2o),e(I,v2o),e(I,r1),e(r1,Mre),e(Mre,T2o),e(r1,F2o),e(r1,W$),e(W$,C2o),e(r1,M2o),e(I,E2o),e(I,t1),e(t1,Ere),e(Ere,y2o),e(t1,w2o),e(t1,Q$),e(Q$,A2o),e(t1,L2o),e(I,B2o),e(I,a1),e(a1,yre),e(yre,x2o),e(a1,k2o),e(a1,H$),e(H$,R2o),e(a1,S2o),e(I,P2o),e(I,n1),e(n1,wre),e(wre,$2o),e(n1,I2o),e(n1,U$),e(U$,N2o),e(n1,D2o),e(I,j2o),e(I,s1),e(s1,Are),e(Are,q2o),e(s1,G2o),e(s1,J$),e(J$,O2o),e(s1,X2o),e(I,V2o),e(I,l1),e(l1,Lre),e(Lre,z2o),e(l1,W2o),e(l1,Y$),e(Y$,Q2o),e(l1,H2o),e(I,U2o),e(I,i1),e(i1,Bre),e(Bre,J2o),e(i1,Y2o),e(i1,K$),e(K$,K2o),e(i1,Z2o),e(I,evo),e(I,d1),e(d1,xre),e(xre,ovo),e(d1,rvo),e(d1,Z$),e(Z$,tvo),e(d1,avo),e(I,nvo),e(I,c1),e(c1,kre),e(kre,svo),e(c1,lvo),e(c1,eI),e(eI,ivo),e(c1,dvo),e(I,cvo),e(I,f1),e(f1,Rre),e(Rre,fvo),e(f1,mvo),e(f1,oI),e(oI,gvo),e(f1,hvo),e(I,pvo),e(I,m1),e(m1,Sre),e(Sre,_vo),e(m1,uvo),e(m1,rI),e(rI,bvo),e(m1,vvo),e(I,Tvo),e(I,g1),e(g1,Pre),e(Pre,Fvo),e(g1,Cvo),e(g1,tI),e(tI,Mvo),e(g1,Evo),e(I,yvo),e(I,h1),e(h1,$re),e($re,wvo),e(h1,Avo),e(h1,aI),e(aI,Lvo),e(h1,Bvo),e(I,xvo),e(I,p1),e(p1,Ire),e(Ire,kvo),e(p1,Rvo),e(p1,nI),e(nI,Svo),e(p1,Pvo),e(I,$vo),e(I,_1),e(_1,Nre),e(Nre,Ivo),e(_1,Nvo),e(_1,sI),e(sI,Dvo),e(_1,jvo),e(I,qvo),e(I,u1),e(u1,Dre),e(Dre,Gvo),e(u1,Ovo),e(u1,lI),e(lI,Xvo),e(u1,Vvo),e(I,zvo),e(I,b1),e(b1,jre),e(jre,Wvo),e(b1,Qvo),e(b1,iI),e(iI,Hvo),e(b1,Uvo),e(I,Jvo),e(I,v1),e(v1,qre),e(qre,Yvo),e(v1,Kvo),e(v1,dI),e(dI,Zvo),e(v1,eTo),e(I,oTo),e(I,T1),e(T1,Gre),e(Gre,rTo),e(T1,tTo),e(T1,cI),e(cI,aTo),e(T1,nTo),e(I,sTo),e(I,F1),e(F1,Ore),e(Ore,lTo),e(F1,iTo),e(F1,fI),e(fI,dTo),e(F1,cTo),e(I,fTo),e(I,C1),e(C1,Xre),e(Xre,mTo),e(C1,gTo),e(C1,mI),e(mI,hTo),e(C1,pTo),e(I,_To),e(I,M1),e(M1,Vre),e(Vre,uTo),e(M1,bTo),e(M1,gI),e(gI,vTo),e(M1,TTo),e(I,FTo),e(I,E1),e(E1,zre),e(zre,CTo),e(E1,MTo),e(E1,hI),e(hI,ETo),e(E1,yTo),e(I,wTo),e(I,y1),e(y1,Wre),e(Wre,ATo),e(y1,LTo),e(y1,pI),e(pI,BTo),e(y1,xTo),e(I,kTo),e(I,w1),e(w1,Qre),e(Qre,RTo),e(w1,STo),e(w1,_I),e(_I,PTo),e(w1,$To),e(I,ITo),e(I,A1),e(A1,Hre),e(Hre,NTo),e(A1,DTo),e(A1,uI),e(uI,jTo),e(A1,qTo),e(I,GTo),e(I,L1),e(L1,Ure),e(Ure,OTo),e(L1,XTo),e(L1,bI),e(bI,VTo),e(L1,zTo),e(I,WTo),e(I,B1),e(B1,Jre),e(Jre,QTo),e(B1,HTo),e(B1,Yre),e(Yre,UTo),e(B1,JTo),e(I,YTo),e(I,x1),e(x1,Kre),e(Kre,KTo),e(x1,ZTo),e(x1,vI),e(vI,eFo),e(x1,oFo),e(I,rFo),e(I,k1),e(k1,Zre),e(Zre,tFo),e(k1,aFo),e(k1,TI),e(TI,nFo),e(k1,sFo),e(I,lFo),e(I,R1),e(R1,ete),e(ete,iFo),e(R1,dFo),e(R1,FI),e(FI,cFo),e(R1,fFo),e(I,mFo),e(I,S1),e(S1,ote),e(ote,gFo),e(S1,hFo),e(S1,CI),e(CI,pFo),e(S1,_Fo),e(Ge,uFo),e(Ge,P1),e(P1,bFo),e(P1,rte),e(rte,vFo),e(P1,TFo),e(P1,tte),e(tte,FFo),e(Ge,CFo),e(Ge,ate),e(ate,MFo),e(Ge,EFo),g(hy,Ge,null),b(c,wke,u),b(c,dd,u),e(dd,$1),e($1,nte),g(py,nte,null),e(dd,yFo),e(dd,ste),e(ste,wFo),b(c,Ake,u),b(c,er,u),g(_y,er,null),e(er,AFo),e(er,cd),e(cd,LFo),e(cd,lte),e(lte,BFo),e(cd,xFo),e(cd,ite),e(ite,kFo),e(cd,RFo),e(er,SFo),e(er,uy),e(uy,PFo),e(uy,dte),e(dte,$Fo),e(uy,IFo),e(er,NFo),e(er,Hr),g(by,Hr,null),e(Hr,DFo),e(Hr,cte),e(cte,jFo),e(Hr,qFo),e(Hr,fd),e(fd,GFo),e(fd,fte),e(fte,OFo),e(fd,XFo),e(fd,mte),e(mte,VFo),e(fd,zFo),e(Hr,WFo),e(Hr,gte),e(gte,QFo),e(Hr,HFo),g(vy,Hr,null),e(er,UFo),e(er,Oe),g(Ty,Oe,null),e(Oe,JFo),e(Oe,hte),e(hte,YFo),e(Oe,KFo),e(Oe,Ha),e(Ha,ZFo),e(Ha,pte),e(pte,eCo),e(Ha,oCo),e(Ha,_te),e(_te,rCo),e(Ha,tCo),e(Ha,ute),e(ute,aCo),e(Ha,nCo),e(Oe,sCo),e(Oe,se),e(se,I1),e(I1,bte),e(bte,lCo),e(I1,iCo),e(I1,MI),e(MI,dCo),e(I1,cCo),e(se,fCo),e(se,N1),e(N1,vte),e(vte,mCo),e(N1,gCo),e(N1,EI),e(EI,hCo),e(N1,pCo),e(se,_Co),e(se,D1),e(D1,Tte),e(Tte,uCo),e(D1,bCo),e(D1,yI),e(yI,vCo),e(D1,TCo),e(se,FCo),e(se,j1),e(j1,Fte),e(Fte,CCo),e(j1,MCo),e(j1,wI),e(wI,ECo),e(j1,yCo),e(se,wCo),e(se,q1),e(q1,Cte),e(Cte,ACo),e(q1,LCo),e(q1,AI),e(AI,BCo),e(q1,xCo),e(se,kCo),e(se,G1),e(G1,Mte),e(Mte,RCo),e(G1,SCo),e(G1,LI),e(LI,PCo),e(G1,$Co),e(se,ICo),e(se,O1),e(O1,Ete),e(Ete,NCo),e(O1,DCo),e(O1,BI),e(BI,jCo),e(O1,qCo),e(se,GCo),e(se,X1),e(X1,yte),e(yte,OCo),e(X1,XCo),e(X1,xI),e(xI,VCo),e(X1,zCo),e(se,WCo),e(se,V1),e(V1,wte),e(wte,QCo),e(V1,HCo),e(V1,kI),e(kI,UCo),e(V1,JCo),e(se,YCo),e(se,z1),e(z1,Ate),e(Ate,KCo),e(z1,ZCo),e(z1,RI),e(RI,eMo),e(z1,oMo),e(se,rMo),e(se,W1),e(W1,Lte),e(Lte,tMo),e(W1,aMo),e(W1,SI),e(SI,nMo),e(W1,sMo),e(se,lMo),e(se,Q1),e(Q1,Bte),e(Bte,iMo),e(Q1,dMo),e(Q1,PI),e(PI,cMo),e(Q1,fMo),e(se,mMo),e(se,H1),e(H1,xte),e(xte,gMo),e(H1,hMo),e(H1,$I),e($I,pMo),e(H1,_Mo),e(se,uMo),e(se,U1),e(U1,kte),e(kte,bMo),e(U1,vMo),e(U1,II),e(II,TMo),e(U1,FMo),e(se,CMo),e(se,J1),e(J1,Rte),e(Rte,MMo),e(J1,EMo),e(J1,NI),e(NI,yMo),e(J1,wMo),e(se,AMo),e(se,Y1),e(Y1,Ste),e(Ste,LMo),e(Y1,BMo),e(Y1,DI),e(DI,xMo),e(Y1,kMo),e(Oe,RMo),e(Oe,K1),e(K1,SMo),e(K1,Pte),e(Pte,PMo),e(K1,$Mo),e(K1,$te),e($te,IMo),e(Oe,NMo),e(Oe,Ite),e(Ite,DMo),e(Oe,jMo),g(Fy,Oe,null),b(c,Lke,u),b(c,md,u),e(md,Z1),e(Z1,Nte),g(Cy,Nte,null),e(md,qMo),e(md,Dte),e(Dte,GMo),b(c,Bke,u),b(c,or,u),g(My,or,null),e(or,OMo),e(or,gd),e(gd,XMo),e(gd,jte),e(jte,VMo),e(gd,zMo),e(gd,qte),e(qte,WMo),e(gd,QMo),e(or,HMo),e(or,Ey),e(Ey,UMo),e(Ey,Gte),e(Gte,JMo),e(Ey,YMo),e(or,KMo),e(or,Ur),g(yy,Ur,null),e(Ur,ZMo),e(Ur,Ote),e(Ote,e4o),e(Ur,o4o),e(Ur,hd),e(hd,r4o),e(hd,Xte),e(Xte,t4o),e(hd,a4o),e(hd,Vte),e(Vte,n4o),e(hd,s4o),e(Ur,l4o),e(Ur,zte),e(zte,i4o),e(Ur,d4o),g(wy,Ur,null),e(or,c4o),e(or,Xe),g(Ay,Xe,null),e(Xe,f4o),e(Xe,Wte),e(Wte,m4o),e(Xe,g4o),e(Xe,Ua),e(Ua,h4o),e(Ua,Qte),e(Qte,p4o),e(Ua,_4o),e(Ua,Hte),e(Hte,u4o),e(Ua,b4o),e(Ua,Ute),e(Ute,v4o),e(Ua,T4o),e(Xe,F4o),e(Xe,A),e(A,e9),e(e9,Jte),e(Jte,C4o),e(e9,M4o),e(e9,jI),e(jI,E4o),e(e9,y4o),e(A,w4o),e(A,o9),e(o9,Yte),e(Yte,A4o),e(o9,L4o),e(o9,qI),e(qI,B4o),e(o9,x4o),e(A,k4o),e(A,r9),e(r9,Kte),e(Kte,R4o),e(r9,S4o),e(r9,GI),e(GI,P4o),e(r9,$4o),e(A,I4o),e(A,t9),e(t9,Zte),e(Zte,N4o),e(t9,D4o),e(t9,OI),e(OI,j4o),e(t9,q4o),e(A,G4o),e(A,a9),e(a9,eae),e(eae,O4o),e(a9,X4o),e(a9,XI),e(XI,V4o),e(a9,z4o),e(A,W4o),e(A,n9),e(n9,oae),e(oae,Q4o),e(n9,H4o),e(n9,VI),e(VI,U4o),e(n9,J4o),e(A,Y4o),e(A,s9),e(s9,rae),e(rae,K4o),e(s9,Z4o),e(s9,zI),e(zI,eEo),e(s9,oEo),e(A,rEo),e(A,l9),e(l9,tae),e(tae,tEo),e(l9,aEo),e(l9,WI),e(WI,nEo),e(l9,sEo),e(A,lEo),e(A,i9),e(i9,aae),e(aae,iEo),e(i9,dEo),e(i9,QI),e(QI,cEo),e(i9,fEo),e(A,mEo),e(A,d9),e(d9,nae),e(nae,gEo),e(d9,hEo),e(d9,HI),e(HI,pEo),e(d9,_Eo),e(A,uEo),e(A,c9),e(c9,sae),e(sae,bEo),e(c9,vEo),e(c9,UI),e(UI,TEo),e(c9,FEo),e(A,CEo),e(A,f9),e(f9,lae),e(lae,MEo),e(f9,EEo),e(f9,JI),e(JI,yEo),e(f9,wEo),e(A,AEo),e(A,m9),e(m9,iae),e(iae,LEo),e(m9,BEo),e(m9,YI),e(YI,xEo),e(m9,kEo),e(A,REo),e(A,g9),e(g9,dae),e(dae,SEo),e(g9,PEo),e(g9,KI),e(KI,$Eo),e(g9,IEo),e(A,NEo),e(A,h9),e(h9,cae),e(cae,DEo),e(h9,jEo),e(h9,ZI),e(ZI,qEo),e(h9,GEo),e(A,OEo),e(A,p9),e(p9,fae),e(fae,XEo),e(p9,VEo),e(p9,eN),e(eN,zEo),e(p9,WEo),e(A,QEo),e(A,_9),e(_9,mae),e(mae,HEo),e(_9,UEo),e(_9,oN),e(oN,JEo),e(_9,YEo),e(A,KEo),e(A,u9),e(u9,gae),e(gae,ZEo),e(u9,e3o),e(u9,rN),e(rN,o3o),e(u9,r3o),e(A,t3o),e(A,b9),e(b9,hae),e(hae,a3o),e(b9,n3o),e(b9,tN),e(tN,s3o),e(b9,l3o),e(A,i3o),e(A,v9),e(v9,pae),e(pae,d3o),e(v9,c3o),e(v9,aN),e(aN,f3o),e(v9,m3o),e(A,g3o),e(A,T9),e(T9,_ae),e(_ae,h3o),e(T9,p3o),e(T9,nN),e(nN,_3o),e(T9,u3o),e(A,b3o),e(A,F9),e(F9,uae),e(uae,v3o),e(F9,T3o),e(F9,sN),e(sN,F3o),e(F9,C3o),e(A,M3o),e(A,C9),e(C9,bae),e(bae,E3o),e(C9,y3o),e(C9,lN),e(lN,w3o),e(C9,A3o),e(A,L3o),e(A,M9),e(M9,vae),e(vae,B3o),e(M9,x3o),e(M9,iN),e(iN,k3o),e(M9,R3o),e(A,S3o),e(A,E9),e(E9,Tae),e(Tae,P3o),e(E9,$3o),e(E9,dN),e(dN,I3o),e(E9,N3o),e(A,D3o),e(A,y9),e(y9,Fae),e(Fae,j3o),e(y9,q3o),e(y9,cN),e(cN,G3o),e(y9,O3o),e(A,X3o),e(A,w9),e(w9,Cae),e(Cae,V3o),e(w9,z3o),e(w9,fN),e(fN,W3o),e(w9,Q3o),e(A,H3o),e(A,A9),e(A9,Mae),e(Mae,U3o),e(A9,J3o),e(A9,mN),e(mN,Y3o),e(A9,K3o),e(A,Z3o),e(A,L9),e(L9,Eae),e(Eae,eyo),e(L9,oyo),e(L9,gN),e(gN,ryo),e(L9,tyo),e(A,ayo),e(A,B9),e(B9,yae),e(yae,nyo),e(B9,syo),e(B9,hN),e(hN,lyo),e(B9,iyo),e(A,dyo),e(A,x9),e(x9,wae),e(wae,cyo),e(x9,fyo),e(x9,pN),e(pN,myo),e(x9,gyo),e(A,hyo),e(A,k9),e(k9,Aae),e(Aae,pyo),e(k9,_yo),e(k9,_N),e(_N,uyo),e(k9,byo),e(A,vyo),e(A,R9),e(R9,Lae),e(Lae,Tyo),e(R9,Fyo),e(R9,uN),e(uN,Cyo),e(R9,Myo),e(A,Eyo),e(A,S9),e(S9,Bae),e(Bae,yyo),e(S9,wyo),e(S9,bN),e(bN,Ayo),e(S9,Lyo),e(A,Byo),e(A,P9),e(P9,xae),e(xae,xyo),e(P9,kyo),e(P9,vN),e(vN,Ryo),e(P9,Syo),e(A,Pyo),e(A,$9),e($9,kae),e(kae,$yo),e($9,Iyo),e($9,TN),e(TN,Nyo),e($9,Dyo),e(A,jyo),e(A,I9),e(I9,Rae),e(Rae,qyo),e(I9,Gyo),e(I9,FN),e(FN,Oyo),e(I9,Xyo),e(A,Vyo),e(A,N9),e(N9,Sae),e(Sae,zyo),e(N9,Wyo),e(N9,CN),e(CN,Qyo),e(N9,Hyo),e(A,Uyo),e(A,D9),e(D9,Pae),e(Pae,Jyo),e(D9,Yyo),e(D9,MN),e(MN,Kyo),e(D9,Zyo),e(A,ewo),e(A,j9),e(j9,$ae),e($ae,owo),e(j9,rwo),e(j9,EN),e(EN,two),e(j9,awo),e(A,nwo),e(A,q9),e(q9,Iae),e(Iae,swo),e(q9,lwo),e(q9,yN),e(yN,iwo),e(q9,dwo),e(A,cwo),e(A,G9),e(G9,Nae),e(Nae,fwo),e(G9,mwo),e(G9,wN),e(wN,gwo),e(G9,hwo),e(A,pwo),e(A,O9),e(O9,Dae),e(Dae,_wo),e(O9,uwo),e(O9,AN),e(AN,bwo),e(O9,vwo),e(A,Two),e(A,X9),e(X9,jae),e(jae,Fwo),e(X9,Cwo),e(X9,LN),e(LN,Mwo),e(X9,Ewo),e(A,ywo),e(A,V9),e(V9,qae),e(qae,wwo),e(V9,Awo),e(V9,BN),e(BN,Lwo),e(V9,Bwo),e(A,xwo),e(A,z9),e(z9,Gae),e(Gae,kwo),e(z9,Rwo),e(z9,xN),e(xN,Swo),e(z9,Pwo),e(Xe,$wo),e(Xe,W9),e(W9,Iwo),e(W9,Oae),e(Oae,Nwo),e(W9,Dwo),e(W9,Xae),e(Xae,jwo),e(Xe,qwo),e(Xe,Vae),e(Vae,Gwo),e(Xe,Owo),g(Ly,Xe,null),b(c,xke,u),b(c,pd,u),e(pd,Q9),e(Q9,zae),g(By,zae,null),e(pd,Xwo),e(pd,Wae),e(Wae,Vwo),b(c,kke,u),b(c,rr,u),g(xy,rr,null),e(rr,zwo),e(rr,_d),e(_d,Wwo),e(_d,Qae),e(Qae,Qwo),e(_d,Hwo),e(_d,Hae),e(Hae,Uwo),e(_d,Jwo),e(rr,Ywo),e(rr,ky),e(ky,Kwo),e(ky,Uae),e(Uae,Zwo),e(ky,e6o),e(rr,o6o),e(rr,Jr),g(Ry,Jr,null),e(Jr,r6o),e(Jr,Jae),e(Jae,t6o),e(Jr,a6o),e(Jr,ud),e(ud,n6o),e(ud,Yae),e(Yae,s6o),e(ud,l6o),e(ud,Kae),e(Kae,i6o),e(ud,d6o),e(Jr,c6o),e(Jr,Zae),e(Zae,f6o),e(Jr,m6o),g(Sy,Jr,null),e(rr,g6o),e(rr,Ve),g(Py,Ve,null),e(Ve,h6o),e(Ve,ene),e(ene,p6o),e(Ve,_6o),e(Ve,Ja),e(Ja,u6o),e(Ja,one),e(one,b6o),e(Ja,v6o),e(Ja,rne),e(rne,T6o),e(Ja,F6o),e(Ja,tne),e(tne,C6o),e(Ja,M6o),e(Ve,E6o),e(Ve,G),e(G,H9),e(H9,ane),e(ane,y6o),e(H9,w6o),e(H9,kN),e(kN,A6o),e(H9,L6o),e(G,B6o),e(G,U9),e(U9,nne),e(nne,x6o),e(U9,k6o),e(U9,RN),e(RN,R6o),e(U9,S6o),e(G,P6o),e(G,J9),e(J9,sne),e(sne,$6o),e(J9,I6o),e(J9,SN),e(SN,N6o),e(J9,D6o),e(G,j6o),e(G,Y9),e(Y9,lne),e(lne,q6o),e(Y9,G6o),e(Y9,PN),e(PN,O6o),e(Y9,X6o),e(G,V6o),e(G,K9),e(K9,ine),e(ine,z6o),e(K9,W6o),e(K9,$N),e($N,Q6o),e(K9,H6o),e(G,U6o),e(G,Z9),e(Z9,dne),e(dne,J6o),e(Z9,Y6o),e(Z9,IN),e(IN,K6o),e(Z9,Z6o),e(G,eAo),e(G,eb),e(eb,cne),e(cne,oAo),e(eb,rAo),e(eb,NN),e(NN,tAo),e(eb,aAo),e(G,nAo),e(G,ob),e(ob,fne),e(fne,sAo),e(ob,lAo),e(ob,DN),e(DN,iAo),e(ob,dAo),e(G,cAo),e(G,rb),e(rb,mne),e(mne,fAo),e(rb,mAo),e(rb,jN),e(jN,gAo),e(rb,hAo),e(G,pAo),e(G,tb),e(tb,gne),e(gne,_Ao),e(tb,uAo),e(tb,qN),e(qN,bAo),e(tb,vAo),e(G,TAo),e(G,ab),e(ab,hne),e(hne,FAo),e(ab,CAo),e(ab,GN),e(GN,MAo),e(ab,EAo),e(G,yAo),e(G,nb),e(nb,pne),e(pne,wAo),e(nb,AAo),e(nb,ON),e(ON,LAo),e(nb,BAo),e(G,xAo),e(G,sb),e(sb,_ne),e(_ne,kAo),e(sb,RAo),e(sb,XN),e(XN,SAo),e(sb,PAo),e(G,$Ao),e(G,lb),e(lb,une),e(une,IAo),e(lb,NAo),e(lb,VN),e(VN,DAo),e(lb,jAo),e(G,qAo),e(G,ib),e(ib,bne),e(bne,GAo),e(ib,OAo),e(ib,zN),e(zN,XAo),e(ib,VAo),e(G,zAo),e(G,db),e(db,vne),e(vne,WAo),e(db,QAo),e(db,WN),e(WN,HAo),e(db,UAo),e(G,JAo),e(G,cb),e(cb,Tne),e(Tne,YAo),e(cb,KAo),e(cb,QN),e(QN,ZAo),e(cb,e0o),e(G,o0o),e(G,fb),e(fb,Fne),e(Fne,r0o),e(fb,t0o),e(fb,HN),e(HN,a0o),e(fb,n0o),e(G,s0o),e(G,mb),e(mb,Cne),e(Cne,l0o),e(mb,i0o),e(mb,UN),e(UN,d0o),e(mb,c0o),e(G,f0o),e(G,gb),e(gb,Mne),e(Mne,m0o),e(gb,g0o),e(gb,JN),e(JN,h0o),e(gb,p0o),e(G,_0o),e(G,hb),e(hb,Ene),e(Ene,u0o),e(hb,b0o),e(hb,YN),e(YN,v0o),e(hb,T0o),e(G,F0o),e(G,pb),e(pb,yne),e(yne,C0o),e(pb,M0o),e(pb,KN),e(KN,E0o),e(pb,y0o),e(G,w0o),e(G,_b),e(_b,wne),e(wne,A0o),e(_b,L0o),e(_b,ZN),e(ZN,B0o),e(_b,x0o),e(G,k0o),e(G,ub),e(ub,Ane),e(Ane,R0o),e(ub,S0o),e(ub,eD),e(eD,P0o),e(ub,$0o),e(G,I0o),e(G,bb),e(bb,Lne),e(Lne,N0o),e(bb,D0o),e(bb,oD),e(oD,j0o),e(bb,q0o),e(G,G0o),e(G,vb),e(vb,Bne),e(Bne,O0o),e(vb,X0o),e(vb,rD),e(rD,V0o),e(vb,z0o),e(G,W0o),e(G,Tb),e(Tb,xne),e(xne,Q0o),e(Tb,H0o),e(Tb,tD),e(tD,U0o),e(Tb,J0o),e(G,Y0o),e(G,Fb),e(Fb,kne),e(kne,K0o),e(Fb,Z0o),e(Fb,aD),e(aD,eLo),e(Fb,oLo),e(Ve,rLo),e(Ve,Cb),e(Cb,tLo),e(Cb,Rne),e(Rne,aLo),e(Cb,nLo),e(Cb,Sne),e(Sne,sLo),e(Ve,lLo),e(Ve,Pne),e(Pne,iLo),e(Ve,dLo),g($y,Ve,null),b(c,Rke,u),b(c,bd,u),e(bd,Mb),e(Mb,$ne),g(Iy,$ne,null),e(bd,cLo),e(bd,Ine),e(Ine,fLo),b(c,Ske,u),b(c,tr,u),g(Ny,tr,null),e(tr,mLo),e(tr,vd),e(vd,gLo),e(vd,Nne),e(Nne,hLo),e(vd,pLo),e(vd,Dne),e(Dne,_Lo),e(vd,uLo),e(tr,bLo),e(tr,Dy),e(Dy,vLo),e(Dy,jne),e(jne,TLo),e(Dy,FLo),e(tr,CLo),e(tr,Yr),g(jy,Yr,null),e(Yr,MLo),e(Yr,qne),e(qne,ELo),e(Yr,yLo),e(Yr,Td),e(Td,wLo),e(Td,Gne),e(Gne,ALo),e(Td,LLo),e(Td,One),e(One,BLo),e(Td,xLo),e(Yr,kLo),e(Yr,Xne),e(Xne,RLo),e(Yr,SLo),g(qy,Yr,null),e(tr,PLo),e(tr,ze),g(Gy,ze,null),e(ze,$Lo),e(ze,Vne),e(Vne,ILo),e(ze,NLo),e(ze,Ya),e(Ya,DLo),e(Ya,zne),e(zne,jLo),e(Ya,qLo),e(Ya,Wne),e(Wne,GLo),e(Ya,OLo),e(Ya,Qne),e(Qne,XLo),e(Ya,VLo),e(ze,zLo),e(ze,da),e(da,Eb),e(Eb,Hne),e(Hne,WLo),e(Eb,QLo),e(Eb,nD),e(nD,HLo),e(Eb,ULo),e(da,JLo),e(da,yb),e(yb,Une),e(Une,YLo),e(yb,KLo),e(yb,sD),e(sD,ZLo),e(yb,e8o),e(da,o8o),e(da,wb),e(wb,Jne),e(Jne,r8o),e(wb,t8o),e(wb,lD),e(lD,a8o),e(wb,n8o),e(da,s8o),e(da,Ab),e(Ab,Yne),e(Yne,l8o),e(Ab,i8o),e(Ab,iD),e(iD,d8o),e(Ab,c8o),e(da,f8o),e(da,Lb),e(Lb,Kne),e(Kne,m8o),e(Lb,g8o),e(Lb,dD),e(dD,h8o),e(Lb,p8o),e(ze,_8o),e(ze,Bb),e(Bb,u8o),e(Bb,Zne),e(Zne,b8o),e(Bb,v8o),e(Bb,ese),e(ese,T8o),e(ze,F8o),e(ze,ose),e(ose,C8o),e(ze,M8o),g(Oy,ze,null),b(c,Pke,u),b(c,Fd,u),e(Fd,xb),e(xb,rse),g(Xy,rse,null),e(Fd,E8o),e(Fd,tse),e(tse,y8o),b(c,$ke,u),b(c,ar,u),g(Vy,ar,null),e(ar,w8o),e(ar,Cd),e(Cd,A8o),e(Cd,ase),e(ase,L8o),e(Cd,B8o),e(Cd,nse),e(nse,x8o),e(Cd,k8o),e(ar,R8o),e(ar,zy),e(zy,S8o),e(zy,sse),e(sse,P8o),e(zy,$8o),e(ar,I8o),e(ar,Kr),g(Wy,Kr,null),e(Kr,N8o),e(Kr,lse),e(lse,D8o),e(Kr,j8o),e(Kr,Md),e(Md,q8o),e(Md,ise),e(ise,G8o),e(Md,O8o),e(Md,dse),e(dse,X8o),e(Md,V8o),e(Kr,z8o),e(Kr,cse),e(cse,W8o),e(Kr,Q8o),g(Qy,Kr,null),e(ar,H8o),e(ar,We),g(Hy,We,null),e(We,U8o),e(We,fse),e(fse,J8o),e(We,Y8o),e(We,Ka),e(Ka,K8o),e(Ka,mse),e(mse,Z8o),e(Ka,e7o),e(Ka,gse),e(gse,o7o),e(Ka,r7o),e(Ka,hse),e(hse,t7o),e(Ka,a7o),e(We,n7o),e(We,j),e(j,kb),e(kb,pse),e(pse,s7o),e(kb,l7o),e(kb,cD),e(cD,i7o),e(kb,d7o),e(j,c7o),e(j,Rb),e(Rb,_se),e(_se,f7o),e(Rb,m7o),e(Rb,fD),e(fD,g7o),e(Rb,h7o),e(j,p7o),e(j,Sb),e(Sb,use),e(use,_7o),e(Sb,u7o),e(Sb,mD),e(mD,b7o),e(Sb,v7o),e(j,T7o),e(j,Pb),e(Pb,bse),e(bse,F7o),e(Pb,C7o),e(Pb,gD),e(gD,M7o),e(Pb,E7o),e(j,y7o),e(j,$b),e($b,vse),e(vse,w7o),e($b,A7o),e($b,hD),e(hD,L7o),e($b,B7o),e(j,x7o),e(j,Ib),e(Ib,Tse),e(Tse,k7o),e(Ib,R7o),e(Ib,pD),e(pD,S7o),e(Ib,P7o),e(j,$7o),e(j,Nb),e(Nb,Fse),e(Fse,I7o),e(Nb,N7o),e(Nb,_D),e(_D,D7o),e(Nb,j7o),e(j,q7o),e(j,Db),e(Db,Cse),e(Cse,G7o),e(Db,O7o),e(Db,uD),e(uD,X7o),e(Db,V7o),e(j,z7o),e(j,jb),e(jb,Mse),e(Mse,W7o),e(jb,Q7o),e(jb,bD),e(bD,H7o),e(jb,U7o),e(j,J7o),e(j,qb),e(qb,Ese),e(Ese,Y7o),e(qb,K7o),e(qb,vD),e(vD,Z7o),e(qb,eBo),e(j,oBo),e(j,Gb),e(Gb,yse),e(yse,rBo),e(Gb,tBo),e(Gb,TD),e(TD,aBo),e(Gb,nBo),e(j,sBo),e(j,Ob),e(Ob,wse),e(wse,lBo),e(Ob,iBo),e(Ob,FD),e(FD,dBo),e(Ob,cBo),e(j,fBo),e(j,Xb),e(Xb,Ase),e(Ase,mBo),e(Xb,gBo),e(Xb,CD),e(CD,hBo),e(Xb,pBo),e(j,_Bo),e(j,Vb),e(Vb,Lse),e(Lse,uBo),e(Vb,bBo),e(Vb,MD),e(MD,vBo),e(Vb,TBo),e(j,FBo),e(j,zb),e(zb,Bse),e(Bse,CBo),e(zb,MBo),e(zb,ED),e(ED,EBo),e(zb,yBo),e(j,wBo),e(j,Wb),e(Wb,xse),e(xse,ABo),e(Wb,LBo),e(Wb,yD),e(yD,BBo),e(Wb,xBo),e(j,kBo),e(j,Qb),e(Qb,kse),e(kse,RBo),e(Qb,SBo),e(Qb,wD),e(wD,PBo),e(Qb,$Bo),e(j,IBo),e(j,Hb),e(Hb,Rse),e(Rse,NBo),e(Hb,DBo),e(Hb,AD),e(AD,jBo),e(Hb,qBo),e(j,GBo),e(j,Ub),e(Ub,Sse),e(Sse,OBo),e(Ub,XBo),e(Ub,LD),e(LD,VBo),e(Ub,zBo),e(j,WBo),e(j,Jb),e(Jb,Pse),e(Pse,QBo),e(Jb,HBo),e(Jb,BD),e(BD,UBo),e(Jb,JBo),e(j,YBo),e(j,Yb),e(Yb,$se),e($se,KBo),e(Yb,ZBo),e(Yb,xD),e(xD,exo),e(Yb,oxo),e(j,rxo),e(j,Kb),e(Kb,Ise),e(Ise,txo),e(Kb,axo),e(Kb,kD),e(kD,nxo),e(Kb,sxo),e(j,lxo),e(j,Zb),e(Zb,Nse),e(Nse,ixo),e(Zb,dxo),e(Zb,RD),e(RD,cxo),e(Zb,fxo),e(j,mxo),e(j,e5),e(e5,Dse),e(Dse,gxo),e(e5,hxo),e(e5,SD),e(SD,pxo),e(e5,_xo),e(j,uxo),e(j,o5),e(o5,jse),e(jse,bxo),e(o5,vxo),e(o5,PD),e(PD,Txo),e(o5,Fxo),e(j,Cxo),e(j,r5),e(r5,qse),e(qse,Mxo),e(r5,Exo),e(r5,$D),e($D,yxo),e(r5,wxo),e(j,Axo),e(j,t5),e(t5,Gse),e(Gse,Lxo),e(t5,Bxo),e(t5,ID),e(ID,xxo),e(t5,kxo),e(j,Rxo),e(j,a5),e(a5,Ose),e(Ose,Sxo),e(a5,Pxo),e(a5,ND),e(ND,$xo),e(a5,Ixo),e(j,Nxo),e(j,n5),e(n5,Xse),e(Xse,Dxo),e(n5,jxo),e(n5,DD),e(DD,qxo),e(n5,Gxo),e(j,Oxo),e(j,s5),e(s5,Vse),e(Vse,Xxo),e(s5,Vxo),e(s5,jD),e(jD,zxo),e(s5,Wxo),e(j,Qxo),e(j,l5),e(l5,zse),e(zse,Hxo),e(l5,Uxo),e(l5,qD),e(qD,Jxo),e(l5,Yxo),e(j,Kxo),e(j,i5),e(i5,Wse),e(Wse,Zxo),e(i5,eko),e(i5,GD),e(GD,oko),e(i5,rko),e(j,tko),e(j,d5),e(d5,Qse),e(Qse,ako),e(d5,nko),e(d5,OD),e(OD,sko),e(d5,lko),e(We,iko),e(We,c5),e(c5,dko),e(c5,Hse),e(Hse,cko),e(c5,fko),e(c5,Use),e(Use,mko),e(We,gko),e(We,Jse),e(Jse,hko),e(We,pko),g(Uy,We,null),b(c,Ike,u),b(c,Ed,u),e(Ed,f5),e(f5,Yse),g(Jy,Yse,null),e(Ed,_ko),e(Ed,Kse),e(Kse,uko),b(c,Nke,u),b(c,nr,u),g(Yy,nr,null),e(nr,bko),e(nr,yd),e(yd,vko),e(yd,Zse),e(Zse,Tko),e(yd,Fko),e(yd,ele),e(ele,Cko),e(yd,Mko),e(nr,Eko),e(nr,Ky),e(Ky,yko),e(Ky,ole),e(ole,wko),e(Ky,Ako),e(nr,Lko),e(nr,Zr),g(Zy,Zr,null),e(Zr,Bko),e(Zr,rle),e(rle,xko),e(Zr,kko),e(Zr,wd),e(wd,Rko),e(wd,tle),e(tle,Sko),e(wd,Pko),e(wd,ale),e(ale,$ko),e(wd,Iko),e(Zr,Nko),e(Zr,nle),e(nle,Dko),e(Zr,jko),g(ew,Zr,null),e(nr,qko),e(nr,Qe),g(ow,Qe,null),e(Qe,Gko),e(Qe,sle),e(sle,Oko),e(Qe,Xko),e(Qe,Za),e(Za,Vko),e(Za,lle),e(lle,zko),e(Za,Wko),e(Za,ile),e(ile,Qko),e(Za,Hko),e(Za,dle),e(dle,Uko),e(Za,Jko),e(Qe,Yko),e(Qe,R),e(R,m5),e(m5,cle),e(cle,Kko),e(m5,Zko),e(m5,XD),e(XD,eRo),e(m5,oRo),e(R,rRo),e(R,g5),e(g5,fle),e(fle,tRo),e(g5,aRo),e(g5,VD),e(VD,nRo),e(g5,sRo),e(R,lRo),e(R,h5),e(h5,mle),e(mle,iRo),e(h5,dRo),e(h5,zD),e(zD,cRo),e(h5,fRo),e(R,mRo),e(R,p5),e(p5,gle),e(gle,gRo),e(p5,hRo),e(p5,WD),e(WD,pRo),e(p5,_Ro),e(R,uRo),e(R,_5),e(_5,hle),e(hle,bRo),e(_5,vRo),e(_5,QD),e(QD,TRo),e(_5,FRo),e(R,CRo),e(R,u5),e(u5,ple),e(ple,MRo),e(u5,ERo),e(u5,HD),e(HD,yRo),e(u5,wRo),e(R,ARo),e(R,b5),e(b5,_le),e(_le,LRo),e(b5,BRo),e(b5,UD),e(UD,xRo),e(b5,kRo),e(R,RRo),e(R,v5),e(v5,ule),e(ule,SRo),e(v5,PRo),e(v5,JD),e(JD,$Ro),e(v5,IRo),e(R,NRo),e(R,T5),e(T5,ble),e(ble,DRo),e(T5,jRo),e(T5,YD),e(YD,qRo),e(T5,GRo),e(R,ORo),e(R,F5),e(F5,vle),e(vle,XRo),e(F5,VRo),e(F5,KD),e(KD,zRo),e(F5,WRo),e(R,QRo),e(R,C5),e(C5,Tle),e(Tle,HRo),e(C5,URo),e(C5,ZD),e(ZD,JRo),e(C5,YRo),e(R,KRo),e(R,M5),e(M5,Fle),e(Fle,ZRo),e(M5,eSo),e(M5,ej),e(ej,oSo),e(M5,rSo),e(R,tSo),e(R,E5),e(E5,Cle),e(Cle,aSo),e(E5,nSo),e(E5,oj),e(oj,sSo),e(E5,lSo),e(R,iSo),e(R,y5),e(y5,Mle),e(Mle,dSo),e(y5,cSo),e(y5,rj),e(rj,fSo),e(y5,mSo),e(R,gSo),e(R,w5),e(w5,Ele),e(Ele,hSo),e(w5,pSo),e(w5,tj),e(tj,_So),e(w5,uSo),e(R,bSo),e(R,A5),e(A5,yle),e(yle,vSo),e(A5,TSo),e(A5,aj),e(aj,FSo),e(A5,CSo),e(R,MSo),e(R,L5),e(L5,wle),e(wle,ESo),e(L5,ySo),e(L5,nj),e(nj,wSo),e(L5,ASo),e(R,LSo),e(R,B5),e(B5,Ale),e(Ale,BSo),e(B5,xSo),e(B5,sj),e(sj,kSo),e(B5,RSo),e(R,SSo),e(R,x5),e(x5,Lle),e(Lle,PSo),e(x5,$So),e(x5,lj),e(lj,ISo),e(x5,NSo),e(R,DSo),e(R,k5),e(k5,Ble),e(Ble,jSo),e(k5,qSo),e(k5,ij),e(ij,GSo),e(k5,OSo),e(R,XSo),e(R,R5),e(R5,xle),e(xle,VSo),e(R5,zSo),e(R5,dj),e(dj,WSo),e(R5,QSo),e(R,HSo),e(R,S5),e(S5,kle),e(kle,USo),e(S5,JSo),e(S5,cj),e(cj,YSo),e(S5,KSo),e(R,ZSo),e(R,P5),e(P5,Rle),e(Rle,ePo),e(P5,oPo),e(P5,fj),e(fj,rPo),e(P5,tPo),e(R,aPo),e(R,$5),e($5,Sle),e(Sle,nPo),e($5,sPo),e($5,mj),e(mj,lPo),e($5,iPo),e(R,dPo),e(R,I5),e(I5,Ple),e(Ple,cPo),e(I5,fPo),e(I5,gj),e(gj,mPo),e(I5,gPo),e(R,hPo),e(R,N5),e(N5,$le),e($le,pPo),e(N5,_Po),e(N5,hj),e(hj,uPo),e(N5,bPo),e(R,vPo),e(R,D5),e(D5,Ile),e(Ile,TPo),e(D5,FPo),e(D5,pj),e(pj,CPo),e(D5,MPo),e(R,EPo),e(R,j5),e(j5,Nle),e(Nle,yPo),e(j5,wPo),e(j5,_j),e(_j,APo),e(j5,LPo),e(R,BPo),e(R,q5),e(q5,Dle),e(Dle,xPo),e(q5,kPo),e(q5,uj),e(uj,RPo),e(q5,SPo),e(R,PPo),e(R,G5),e(G5,jle),e(jle,$Po),e(G5,IPo),e(G5,bj),e(bj,NPo),e(G5,DPo),e(R,jPo),e(R,O5),e(O5,qle),e(qle,qPo),e(O5,GPo),e(O5,vj),e(vj,OPo),e(O5,XPo),e(R,VPo),e(R,X5),e(X5,Gle),e(Gle,zPo),e(X5,WPo),e(X5,Tj),e(Tj,QPo),e(X5,HPo),e(R,UPo),e(R,V5),e(V5,Ole),e(Ole,JPo),e(V5,YPo),e(V5,Fj),e(Fj,KPo),e(V5,ZPo),e(R,e$o),e(R,z5),e(z5,Xle),e(Xle,o$o),e(z5,r$o),e(z5,Cj),e(Cj,t$o),e(z5,a$o),e(R,n$o),e(R,W5),e(W5,Vle),e(Vle,s$o),e(W5,l$o),e(W5,Mj),e(Mj,i$o),e(W5,d$o),e(R,c$o),e(R,Q5),e(Q5,zle),e(zle,f$o),e(Q5,m$o),e(Q5,Ej),e(Ej,g$o),e(Q5,h$o),e(R,p$o),e(R,H5),e(H5,Wle),e(Wle,_$o),e(H5,u$o),e(H5,yj),e(yj,b$o),e(H5,v$o),e(R,T$o),e(R,U5),e(U5,Qle),e(Qle,F$o),e(U5,C$o),e(U5,wj),e(wj,M$o),e(U5,E$o),e(R,y$o),e(R,J5),e(J5,Hle),e(Hle,w$o),e(J5,A$o),e(J5,Aj),e(Aj,L$o),e(J5,B$o),e(Qe,x$o),e(Qe,Y5),e(Y5,k$o),e(Y5,Ule),e(Ule,R$o),e(Y5,S$o),e(Y5,Jle),e(Jle,P$o),e(Qe,$$o),e(Qe,Yle),e(Yle,I$o),e(Qe,N$o),g(rw,Qe,null),b(c,Dke,u),b(c,Ad,u),e(Ad,K5),e(K5,Kle),g(tw,Kle,null),e(Ad,D$o),e(Ad,Zle),e(Zle,j$o),b(c,jke,u),b(c,sr,u),g(aw,sr,null),e(sr,q$o),e(sr,Ld),e(Ld,G$o),e(Ld,eie),e(eie,O$o),e(Ld,X$o),e(Ld,oie),e(oie,V$o),e(Ld,z$o),e(sr,W$o),e(sr,nw),e(nw,Q$o),e(nw,rie),e(rie,H$o),e(nw,U$o),e(sr,J$o),e(sr,et),g(sw,et,null),e(et,Y$o),e(et,tie),e(tie,K$o),e(et,Z$o),e(et,Bd),e(Bd,eIo),e(Bd,aie),e(aie,oIo),e(Bd,rIo),e(Bd,nie),e(nie,tIo),e(Bd,aIo),e(et,nIo),e(et,sie),e(sie,sIo),e(et,lIo),g(lw,et,null),e(sr,iIo),e(sr,He),g(iw,He,null),e(He,dIo),e(He,lie),e(lie,cIo),e(He,fIo),e(He,en),e(en,mIo),e(en,iie),e(iie,gIo),e(en,hIo),e(en,die),e(die,pIo),e(en,_Io),e(en,cie),e(cie,uIo),e(en,bIo),e(He,vIo),e(He,fie),e(fie,Z5),e(Z5,mie),e(mie,TIo),e(Z5,FIo),e(Z5,Lj),e(Lj,CIo),e(Z5,MIo),e(He,EIo),e(He,e2),e(e2,yIo),e(e2,gie),e(gie,wIo),e(e2,AIo),e(e2,hie),e(hie,LIo),e(He,BIo),e(He,pie),e(pie,xIo),e(He,kIo),g(dw,He,null),b(c,qke,u),b(c,xd,u),e(xd,o2),e(o2,_ie),g(cw,_ie,null),e(xd,RIo),e(xd,uie),e(uie,SIo),b(c,Gke,u),b(c,lr,u),g(fw,lr,null),e(lr,PIo),e(lr,kd),e(kd,$Io),e(kd,bie),e(bie,IIo),e(kd,NIo),e(kd,vie),e(vie,DIo),e(kd,jIo),e(lr,qIo),e(lr,mw),e(mw,GIo),e(mw,Tie),e(Tie,OIo),e(mw,XIo),e(lr,VIo),e(lr,ot),g(gw,ot,null),e(ot,zIo),e(ot,Fie),e(Fie,WIo),e(ot,QIo),e(ot,Rd),e(Rd,HIo),e(Rd,Cie),e(Cie,UIo),e(Rd,JIo),e(Rd,Mie),e(Mie,YIo),e(Rd,KIo),e(ot,ZIo),e(ot,Eie),e(Eie,eNo),e(ot,oNo),g(hw,ot,null),e(lr,rNo),e(lr,Ue),g(pw,Ue,null),e(Ue,tNo),e(Ue,yie),e(yie,aNo),e(Ue,nNo),e(Ue,on),e(on,sNo),e(on,wie),e(wie,lNo),e(on,iNo),e(on,Aie),e(Aie,dNo),e(on,cNo),e(on,Lie),e(Lie,fNo),e(on,mNo),e(Ue,gNo),e(Ue,me),e(me,r2),e(r2,Bie),e(Bie,hNo),e(r2,pNo),e(r2,Bj),e(Bj,_No),e(r2,uNo),e(me,bNo),e(me,t2),e(t2,xie),e(xie,vNo),e(t2,TNo),e(t2,xj),e(xj,FNo),e(t2,CNo),e(me,MNo),e(me,qs),e(qs,kie),e(kie,ENo),e(qs,yNo),e(qs,kj),e(kj,wNo),e(qs,ANo),e(qs,Rj),e(Rj,LNo),e(qs,BNo),e(me,xNo),e(me,a2),e(a2,Rie),e(Rie,kNo),e(a2,RNo),e(a2,Sj),e(Sj,SNo),e(a2,PNo),e(me,$No),e(me,ma),e(ma,Sie),e(Sie,INo),e(ma,NNo),e(ma,Pj),e(Pj,DNo),e(ma,jNo),e(ma,$j),e($j,qNo),e(ma,GNo),e(ma,Ij),e(Ij,ONo),e(ma,XNo),e(me,VNo),e(me,n2),e(n2,Pie),e(Pie,zNo),e(n2,WNo),e(n2,Nj),e(Nj,QNo),e(n2,HNo),e(me,UNo),e(me,s2),e(s2,$ie),e($ie,JNo),e(s2,YNo),e(s2,Dj),e(Dj,KNo),e(s2,ZNo),e(me,eDo),e(me,l2),e(l2,Iie),e(Iie,oDo),e(l2,rDo),e(l2,jj),e(jj,tDo),e(l2,aDo),e(me,nDo),e(me,i2),e(i2,Nie),e(Nie,sDo),e(i2,lDo),e(i2,qj),e(qj,iDo),e(i2,dDo),e(me,cDo),e(me,d2),e(d2,Die),e(Die,fDo),e(d2,mDo),e(d2,Gj),e(Gj,gDo),e(d2,hDo),e(me,pDo),e(me,c2),e(c2,jie),e(jie,_Do),e(c2,uDo),e(c2,Oj),e(Oj,bDo),e(c2,vDo),e(Ue,TDo),e(Ue,f2),e(f2,FDo),e(f2,qie),e(qie,CDo),e(f2,MDo),e(f2,Gie),e(Gie,EDo),e(Ue,yDo),e(Ue,Oie),e(Oie,wDo),e(Ue,ADo),g(_w,Ue,null),b(c,Oke,u),b(c,Sd,u),e(Sd,m2),e(m2,Xie),g(uw,Xie,null),e(Sd,LDo),e(Sd,Vie),e(Vie,BDo),b(c,Xke,u),b(c,ir,u),g(bw,ir,null),e(ir,xDo),e(ir,Pd),e(Pd,kDo),e(Pd,zie),e(zie,RDo),e(Pd,SDo),e(Pd,Wie),e(Wie,PDo),e(Pd,$Do),e(ir,IDo),e(ir,vw),e(vw,NDo),e(vw,Qie),e(Qie,DDo),e(vw,jDo),e(ir,qDo),e(ir,rt),g(Tw,rt,null),e(rt,GDo),e(rt,Hie),e(Hie,ODo),e(rt,XDo),e(rt,$d),e($d,VDo),e($d,Uie),e(Uie,zDo),e($d,WDo),e($d,Jie),e(Jie,QDo),e($d,HDo),e(rt,UDo),e(rt,Yie),e(Yie,JDo),e(rt,YDo),g(Fw,rt,null),e(ir,KDo),e(ir,Je),g(Cw,Je,null),e(Je,ZDo),e(Je,Kie),e(Kie,ejo),e(Je,ojo),e(Je,rn),e(rn,rjo),e(rn,Zie),e(Zie,tjo),e(rn,ajo),e(rn,ede),e(ede,njo),e(rn,sjo),e(rn,ode),e(ode,ljo),e(rn,ijo),e(Je,djo),e(Je,rde),e(rde,g2),e(g2,tde),e(tde,cjo),e(g2,fjo),e(g2,Xj),e(Xj,mjo),e(g2,gjo),e(Je,hjo),e(Je,h2),e(h2,pjo),e(h2,ade),e(ade,_jo),e(h2,ujo),e(h2,nde),e(nde,bjo),e(Je,vjo),e(Je,sde),e(sde,Tjo),e(Je,Fjo),g(Mw,Je,null),b(c,Vke,u),b(c,Id,u),e(Id,p2),e(p2,lde),g(Ew,lde,null),e(Id,Cjo),e(Id,ide),e(ide,Mjo),b(c,zke,u),b(c,dr,u),g(yw,dr,null),e(dr,Ejo),e(dr,Nd),e(Nd,yjo),e(Nd,dde),e(dde,wjo),e(Nd,Ajo),e(Nd,cde),e(cde,Ljo),e(Nd,Bjo),e(dr,xjo),e(dr,ww),e(ww,kjo),e(ww,fde),e(fde,Rjo),e(ww,Sjo),e(dr,Pjo),e(dr,tt),g(Aw,tt,null),e(tt,$jo),e(tt,mde),e(mde,Ijo),e(tt,Njo),e(tt,Dd),e(Dd,Djo),e(Dd,gde),e(gde,jjo),e(Dd,qjo),e(Dd,hde),e(hde,Gjo),e(Dd,Ojo),e(tt,Xjo),e(tt,pde),e(pde,Vjo),e(tt,zjo),g(Lw,tt,null),e(dr,Wjo),e(dr,Ye),g(Bw,Ye,null),e(Ye,Qjo),e(Ye,_de),e(_de,Hjo),e(Ye,Ujo),e(Ye,tn),e(tn,Jjo),e(tn,ude),e(ude,Yjo),e(tn,Kjo),e(tn,bde),e(bde,Zjo),e(tn,eqo),e(tn,vde),e(vde,oqo),e(tn,rqo),e(Ye,tqo),e(Ye,ke),e(ke,_2),e(_2,Tde),e(Tde,aqo),e(_2,nqo),e(_2,Vj),e(Vj,sqo),e(_2,lqo),e(ke,iqo),e(ke,u2),e(u2,Fde),e(Fde,dqo),e(u2,cqo),e(u2,zj),e(zj,fqo),e(u2,mqo),e(ke,gqo),e(ke,b2),e(b2,Cde),e(Cde,hqo),e(b2,pqo),e(b2,Wj),e(Wj,_qo),e(b2,uqo),e(ke,bqo),e(ke,v2),e(v2,Mde),e(Mde,vqo),e(v2,Tqo),e(v2,Qj),e(Qj,Fqo),e(v2,Cqo),e(ke,Mqo),e(ke,T2),e(T2,Ede),e(Ede,Eqo),e(T2,yqo),e(T2,Hj),e(Hj,wqo),e(T2,Aqo),e(ke,Lqo),e(ke,F2),e(F2,yde),e(yde,Bqo),e(F2,xqo),e(F2,Uj),e(Uj,kqo),e(F2,Rqo),e(ke,Sqo),e(ke,C2),e(C2,wde),e(wde,Pqo),e(C2,$qo),e(C2,Jj),e(Jj,Iqo),e(C2,Nqo),e(ke,Dqo),e(ke,M2),e(M2,Ade),e(Ade,jqo),e(M2,qqo),e(M2,Yj),e(Yj,Gqo),e(M2,Oqo),e(Ye,Xqo),e(Ye,E2),e(E2,Vqo),e(E2,Lde),e(Lde,zqo),e(E2,Wqo),e(E2,Bde),e(Bde,Qqo),e(Ye,Hqo),e(Ye,xde),e(xde,Uqo),e(Ye,Jqo),g(xw,Ye,null),b(c,Wke,u),b(c,jd,u),e(jd,y2),e(y2,kde),g(kw,kde,null),e(jd,Yqo),e(jd,Rde),e(Rde,Kqo),b(c,Qke,u),b(c,cr,u),g(Rw,cr,null),e(cr,Zqo),e(cr,qd),e(qd,eGo),e(qd,Sde),e(Sde,oGo),e(qd,rGo),e(qd,Pde),e(Pde,tGo),e(qd,aGo),e(cr,nGo),e(cr,Sw),e(Sw,sGo),e(Sw,$de),e($de,lGo),e(Sw,iGo),e(cr,dGo),e(cr,at),g(Pw,at,null),e(at,cGo),e(at,Ide),e(Ide,fGo),e(at,mGo),e(at,Gd),e(Gd,gGo),e(Gd,Nde),e(Nde,hGo),e(Gd,pGo),e(Gd,Dde),e(Dde,_Go),e(Gd,uGo),e(at,bGo),e(at,jde),e(jde,vGo),e(at,TGo),g($w,at,null),e(cr,FGo),e(cr,Ke),g(Iw,Ke,null),e(Ke,CGo),e(Ke,qde),e(qde,MGo),e(Ke,EGo),e(Ke,an),e(an,yGo),e(an,Gde),e(Gde,wGo),e(an,AGo),e(an,Ode),e(Ode,LGo),e(an,BGo),e(an,Xde),e(Xde,xGo),e(an,kGo),e(Ke,RGo),e(Ke,nn),e(nn,w2),e(w2,Vde),e(Vde,SGo),e(w2,PGo),e(w2,Kj),e(Kj,$Go),e(w2,IGo),e(nn,NGo),e(nn,A2),e(A2,zde),e(zde,DGo),e(A2,jGo),e(A2,Zj),e(Zj,qGo),e(A2,GGo),e(nn,OGo),e(nn,L2),e(L2,Wde),e(Wde,XGo),e(L2,VGo),e(L2,eq),e(eq,zGo),e(L2,WGo),e(nn,QGo),e(nn,B2),e(B2,Qde),e(Qde,HGo),e(B2,UGo),e(B2,oq),e(oq,JGo),e(B2,YGo),e(Ke,KGo),e(Ke,x2),e(x2,ZGo),e(x2,Hde),e(Hde,eOo),e(x2,oOo),e(x2,Ude),e(Ude,rOo),e(Ke,tOo),e(Ke,Jde),e(Jde,aOo),e(Ke,nOo),g(Nw,Ke,null),b(c,Hke,u),b(c,Od,u),e(Od,k2),e(k2,Yde),g(Dw,Yde,null),e(Od,sOo),e(Od,Kde),e(Kde,lOo),b(c,Uke,u),b(c,fr,u),g(jw,fr,null),e(fr,iOo),e(fr,Xd),e(Xd,dOo),e(Xd,Zde),e(Zde,cOo),e(Xd,fOo),e(Xd,ece),e(ece,mOo),e(Xd,gOo),e(fr,hOo),e(fr,qw),e(qw,pOo),e(qw,oce),e(oce,_Oo),e(qw,uOo),e(fr,bOo),e(fr,nt),g(Gw,nt,null),e(nt,vOo),e(nt,rce),e(rce,TOo),e(nt,FOo),e(nt,Vd),e(Vd,COo),e(Vd,tce),e(tce,MOo),e(Vd,EOo),e(Vd,ace),e(ace,yOo),e(Vd,wOo),e(nt,AOo),e(nt,nce),e(nce,LOo),e(nt,BOo),g(Ow,nt,null),e(fr,xOo),e(fr,Ze),g(Xw,Ze,null),e(Ze,kOo),e(Ze,sce),e(sce,ROo),e(Ze,SOo),e(Ze,sn),e(sn,POo),e(sn,lce),e(lce,$Oo),e(sn,IOo),e(sn,ice),e(ice,NOo),e(sn,DOo),e(sn,dce),e(dce,jOo),e(sn,qOo),e(Ze,GOo),e(Ze,Re),e(Re,R2),e(R2,cce),e(cce,OOo),e(R2,XOo),e(R2,rq),e(rq,VOo),e(R2,zOo),e(Re,WOo),e(Re,S2),e(S2,fce),e(fce,QOo),e(S2,HOo),e(S2,tq),e(tq,UOo),e(S2,JOo),e(Re,YOo),e(Re,P2),e(P2,mce),e(mce,KOo),e(P2,ZOo),e(P2,aq),e(aq,eXo),e(P2,oXo),e(Re,rXo),e(Re,$2),e($2,gce),e(gce,tXo),e($2,aXo),e($2,nq),e(nq,nXo),e($2,sXo),e(Re,lXo),e(Re,I2),e(I2,hce),e(hce,iXo),e(I2,dXo),e(I2,sq),e(sq,cXo),e(I2,fXo),e(Re,mXo),e(Re,N2),e(N2,pce),e(pce,gXo),e(N2,hXo),e(N2,lq),e(lq,pXo),e(N2,_Xo),e(Re,uXo),e(Re,D2),e(D2,_ce),e(_ce,bXo),e(D2,vXo),e(D2,iq),e(iq,TXo),e(D2,FXo),e(Re,CXo),e(Re,j2),e(j2,uce),e(uce,MXo),e(j2,EXo),e(j2,dq),e(dq,yXo),e(j2,wXo),e(Ze,AXo),e(Ze,q2),e(q2,LXo),e(q2,bce),e(bce,BXo),e(q2,xXo),e(q2,vce),e(vce,kXo),e(Ze,RXo),e(Ze,Tce),e(Tce,SXo),e(Ze,PXo),g(Vw,Ze,null),b(c,Jke,u),b(c,zd,u),e(zd,G2),e(G2,Fce),g(zw,Fce,null),e(zd,$Xo),e(zd,Cce),e(Cce,IXo),b(c,Yke,u),b(c,mr,u),g(Ww,mr,null),e(mr,NXo),e(mr,Wd),e(Wd,DXo),e(Wd,Mce),e(Mce,jXo),e(Wd,qXo),e(Wd,Ece),e(Ece,GXo),e(Wd,OXo),e(mr,XXo),e(mr,Qw),e(Qw,VXo),e(Qw,yce),e(yce,zXo),e(Qw,WXo),e(mr,QXo),e(mr,st),g(Hw,st,null),e(st,HXo),e(st,wce),e(wce,UXo),e(st,JXo),e(st,Qd),e(Qd,YXo),e(Qd,Ace),e(Ace,KXo),e(Qd,ZXo),e(Qd,Lce),e(Lce,eVo),e(Qd,oVo),e(st,rVo),e(st,Bce),e(Bce,tVo),e(st,aVo),g(Uw,st,null),e(mr,nVo),e(mr,eo),g(Jw,eo,null),e(eo,sVo),e(eo,xce),e(xce,lVo),e(eo,iVo),e(eo,ln),e(ln,dVo),e(ln,kce),e(kce,cVo),e(ln,fVo),e(ln,Rce),e(Rce,mVo),e(ln,gVo),e(ln,Sce),e(Sce,hVo),e(ln,pVo),e(eo,_Vo),e(eo,Yw),e(Yw,O2),e(O2,Pce),e(Pce,uVo),e(O2,bVo),e(O2,cq),e(cq,vVo),e(O2,TVo),e(Yw,FVo),e(Yw,X2),e(X2,$ce),e($ce,CVo),e(X2,MVo),e(X2,fq),e(fq,EVo),e(X2,yVo),e(eo,wVo),e(eo,V2),e(V2,AVo),e(V2,Ice),e(Ice,LVo),e(V2,BVo),e(V2,Nce),e(Nce,xVo),e(eo,kVo),e(eo,Dce),e(Dce,RVo),e(eo,SVo),g(Kw,eo,null),b(c,Kke,u),b(c,Hd,u),e(Hd,z2),e(z2,jce),g(Zw,jce,null),e(Hd,PVo),e(Hd,qce),e(qce,$Vo),b(c,Zke,u),b(c,gr,u),g(e6,gr,null),e(gr,IVo),e(gr,Ud),e(Ud,NVo),e(Ud,Gce),e(Gce,DVo),e(Ud,jVo),e(Ud,Oce),e(Oce,qVo),e(Ud,GVo),e(gr,OVo),e(gr,o6),e(o6,XVo),e(o6,Xce),e(Xce,VVo),e(o6,zVo),e(gr,WVo),e(gr,lt),g(r6,lt,null),e(lt,QVo),e(lt,Vce),e(Vce,HVo),e(lt,UVo),e(lt,Jd),e(Jd,JVo),e(Jd,zce),e(zce,YVo),e(Jd,KVo),e(Jd,Wce),e(Wce,ZVo),e(Jd,ezo),e(lt,ozo),e(lt,Qce),e(Qce,rzo),e(lt,tzo),g(t6,lt,null),e(gr,azo),e(gr,oo),g(a6,oo,null),e(oo,nzo),e(oo,Hce),e(Hce,szo),e(oo,lzo),e(oo,dn),e(dn,izo),e(dn,Uce),e(Uce,dzo),e(dn,czo),e(dn,Jce),e(Jce,fzo),e(dn,mzo),e(dn,Yce),e(Yce,gzo),e(dn,hzo),e(oo,pzo),e(oo,cn),e(cn,W2),e(W2,Kce),e(Kce,_zo),e(W2,uzo),e(W2,mq),e(mq,bzo),e(W2,vzo),e(cn,Tzo),e(cn,Q2),e(Q2,Zce),e(Zce,Fzo),e(Q2,Czo),e(Q2,gq),e(gq,Mzo),e(Q2,Ezo),e(cn,yzo),e(cn,H2),e(H2,efe),e(efe,wzo),e(H2,Azo),e(H2,hq),e(hq,Lzo),e(H2,Bzo),e(cn,xzo),e(cn,U2),e(U2,ofe),e(ofe,kzo),e(U2,Rzo),e(U2,pq),e(pq,Szo),e(U2,Pzo),e(oo,$zo),e(oo,J2),e(J2,Izo),e(J2,rfe),e(rfe,Nzo),e(J2,Dzo),e(J2,tfe),e(tfe,jzo),e(oo,qzo),e(oo,afe),e(afe,Gzo),e(oo,Ozo),g(n6,oo,null),b(c,eRe,u),b(c,Yd,u),e(Yd,Y2),e(Y2,nfe),g(s6,nfe,null),e(Yd,Xzo),e(Yd,sfe),e(sfe,Vzo),b(c,oRe,u),b(c,hr,u),g(l6,hr,null),e(hr,zzo),e(hr,Kd),e(Kd,Wzo),e(Kd,lfe),e(lfe,Qzo),e(Kd,Hzo),e(Kd,ife),e(ife,Uzo),e(Kd,Jzo),e(hr,Yzo),e(hr,i6),e(i6,Kzo),e(i6,dfe),e(dfe,Zzo),e(i6,eWo),e(hr,oWo),e(hr,it),g(d6,it,null),e(it,rWo),e(it,cfe),e(cfe,tWo),e(it,aWo),e(it,Zd),e(Zd,nWo),e(Zd,ffe),e(ffe,sWo),e(Zd,lWo),e(Zd,mfe),e(mfe,iWo),e(Zd,dWo),e(it,cWo),e(it,gfe),e(gfe,fWo),e(it,mWo),g(c6,it,null),e(hr,gWo),e(hr,ro),g(f6,ro,null),e(ro,hWo),e(ro,hfe),e(hfe,pWo),e(ro,_Wo),e(ro,fn),e(fn,uWo),e(fn,pfe),e(pfe,bWo),e(fn,vWo),e(fn,_fe),e(_fe,TWo),e(fn,FWo),e(fn,ufe),e(ufe,CWo),e(fn,MWo),e(ro,EWo),e(ro,ec),e(ec,K2),e(K2,bfe),e(bfe,yWo),e(K2,wWo),e(K2,_q),e(_q,AWo),e(K2,LWo),e(ec,BWo),e(ec,Z2),e(Z2,vfe),e(vfe,xWo),e(Z2,kWo),e(Z2,uq),e(uq,RWo),e(Z2,SWo),e(ec,PWo),e(ec,ev),e(ev,Tfe),e(Tfe,$Wo),e(ev,IWo),e(ev,bq),e(bq,NWo),e(ev,DWo),e(ro,jWo),e(ro,ov),e(ov,qWo),e(ov,Ffe),e(Ffe,GWo),e(ov,OWo),e(ov,Cfe),e(Cfe,XWo),e(ro,VWo),e(ro,Mfe),e(Mfe,zWo),e(ro,WWo),g(m6,ro,null),b(c,rRe,u),b(c,oc,u),e(oc,rv),e(rv,Efe),g(g6,Efe,null),e(oc,QWo),e(oc,yfe),e(yfe,HWo),b(c,tRe,u),b(c,pr,u),g(h6,pr,null),e(pr,UWo),e(pr,rc),e(rc,JWo),e(rc,wfe),e(wfe,YWo),e(rc,KWo),e(rc,Afe),e(Afe,ZWo),e(rc,eQo),e(pr,oQo),e(pr,p6),e(p6,rQo),e(p6,Lfe),e(Lfe,tQo),e(p6,aQo),e(pr,nQo),e(pr,dt),g(_6,dt,null),e(dt,sQo),e(dt,Bfe),e(Bfe,lQo),e(dt,iQo),e(dt,tc),e(tc,dQo),e(tc,xfe),e(xfe,cQo),e(tc,fQo),e(tc,kfe),e(kfe,mQo),e(tc,gQo),e(dt,hQo),e(dt,Rfe),e(Rfe,pQo),e(dt,_Qo),g(u6,dt,null),e(pr,uQo),e(pr,to),g(b6,to,null),e(to,bQo),e(to,Sfe),e(Sfe,vQo),e(to,TQo),e(to,mn),e(mn,FQo),e(mn,Pfe),e(Pfe,CQo),e(mn,MQo),e(mn,$fe),e($fe,EQo),e(mn,yQo),e(mn,Ife),e(Ife,wQo),e(mn,AQo),e(to,LQo),e(to,Nfe),e(Nfe,tv),e(tv,Dfe),e(Dfe,BQo),e(tv,xQo),e(tv,vq),e(vq,kQo),e(tv,RQo),e(to,SQo),e(to,av),e(av,PQo),e(av,jfe),e(jfe,$Qo),e(av,IQo),e(av,qfe),e(qfe,NQo),e(to,DQo),e(to,Gfe),e(Gfe,jQo),e(to,qQo),g(v6,to,null),b(c,aRe,u),b(c,ac,u),e(ac,nv),e(nv,Ofe),g(T6,Ofe,null),e(ac,GQo),e(ac,Xfe),e(Xfe,OQo),b(c,nRe,u),b(c,_r,u),g(F6,_r,null),e(_r,XQo),e(_r,nc),e(nc,VQo),e(nc,Vfe),e(Vfe,zQo),e(nc,WQo),e(nc,zfe),e(zfe,QQo),e(nc,HQo),e(_r,UQo),e(_r,C6),e(C6,JQo),e(C6,Wfe),e(Wfe,YQo),e(C6,KQo),e(_r,ZQo),e(_r,ct),g(M6,ct,null),e(ct,eHo),e(ct,Qfe),e(Qfe,oHo),e(ct,rHo),e(ct,sc),e(sc,tHo),e(sc,Hfe),e(Hfe,aHo),e(sc,nHo),e(sc,Ufe),e(Ufe,sHo),e(sc,lHo),e(ct,iHo),e(ct,Jfe),e(Jfe,dHo),e(ct,cHo),g(E6,ct,null),e(_r,fHo),e(_r,ao),g(y6,ao,null),e(ao,mHo),e(ao,Yfe),e(Yfe,gHo),e(ao,hHo),e(ao,gn),e(gn,pHo),e(gn,Kfe),e(Kfe,_Ho),e(gn,uHo),e(gn,Zfe),e(Zfe,bHo),e(gn,vHo),e(gn,eme),e(eme,THo),e(gn,FHo),e(ao,CHo),e(ao,ome),e(ome,sv),e(sv,rme),e(rme,MHo),e(sv,EHo),e(sv,Tq),e(Tq,yHo),e(sv,wHo),e(ao,AHo),e(ao,lv),e(lv,LHo),e(lv,tme),e(tme,BHo),e(lv,xHo),e(lv,ame),e(ame,kHo),e(ao,RHo),e(ao,nme),e(nme,SHo),e(ao,PHo),g(w6,ao,null),b(c,sRe,u),b(c,lc,u),e(lc,iv),e(iv,sme),g(A6,sme,null),e(lc,$Ho),e(lc,lme),e(lme,IHo),b(c,lRe,u),b(c,ur,u),g(L6,ur,null),e(ur,NHo),e(ur,ic),e(ic,DHo),e(ic,ime),e(ime,jHo),e(ic,qHo),e(ic,dme),e(dme,GHo),e(ic,OHo),e(ur,XHo),e(ur,B6),e(B6,VHo),e(B6,cme),e(cme,zHo),e(B6,WHo),e(ur,QHo),e(ur,ft),g(x6,ft,null),e(ft,HHo),e(ft,fme),e(fme,UHo),e(ft,JHo),e(ft,dc),e(dc,YHo),e(dc,mme),e(mme,KHo),e(dc,ZHo),e(dc,gme),e(gme,eUo),e(dc,oUo),e(ft,rUo),e(ft,hme),e(hme,tUo),e(ft,aUo),g(k6,ft,null),e(ur,nUo),e(ur,no),g(R6,no,null),e(no,sUo),e(no,pme),e(pme,lUo),e(no,iUo),e(no,hn),e(hn,dUo),e(hn,_me),e(_me,cUo),e(hn,fUo),e(hn,ume),e(ume,mUo),e(hn,gUo),e(hn,bme),e(bme,hUo),e(hn,pUo),e(no,_Uo),e(no,cc),e(cc,dv),e(dv,vme),e(vme,uUo),e(dv,bUo),e(dv,Fq),e(Fq,vUo),e(dv,TUo),e(cc,FUo),e(cc,cv),e(cv,Tme),e(Tme,CUo),e(cv,MUo),e(cv,Cq),e(Cq,EUo),e(cv,yUo),e(cc,wUo),e(cc,fv),e(fv,Fme),e(Fme,AUo),e(fv,LUo),e(fv,Mq),e(Mq,BUo),e(fv,xUo),e(no,kUo),e(no,mv),e(mv,RUo),e(mv,Cme),e(Cme,SUo),e(mv,PUo),e(mv,Mme),e(Mme,$Uo),e(no,IUo),e(no,Eme),e(Eme,NUo),e(no,DUo),g(S6,no,null),b(c,iRe,u),b(c,fc,u),e(fc,gv),e(gv,yme),g(P6,yme,null),e(fc,jUo),e(fc,wme),e(wme,qUo),b(c,dRe,u),b(c,br,u),g($6,br,null),e(br,GUo),e(br,mc),e(mc,OUo),e(mc,Ame),e(Ame,XUo),e(mc,VUo),e(mc,Lme),e(Lme,zUo),e(mc,WUo),e(br,QUo),e(br,I6),e(I6,HUo),e(I6,Bme),e(Bme,UUo),e(I6,JUo),e(br,YUo),e(br,mt),g(N6,mt,null),e(mt,KUo),e(mt,xme),e(xme,ZUo),e(mt,eJo),e(mt,gc),e(gc,oJo),e(gc,kme),e(kme,rJo),e(gc,tJo),e(gc,Rme),e(Rme,aJo),e(gc,nJo),e(mt,sJo),e(mt,Sme),e(Sme,lJo),e(mt,iJo),g(D6,mt,null),e(br,dJo),e(br,so),g(j6,so,null),e(so,cJo),e(so,Pme),e(Pme,fJo),e(so,mJo),e(so,pn),e(pn,gJo),e(pn,$me),e($me,hJo),e(pn,pJo),e(pn,Ime),e(Ime,_Jo),e(pn,uJo),e(pn,Nme),e(Nme,bJo),e(pn,vJo),e(so,TJo),e(so,Dme),e(Dme,hv),e(hv,jme),e(jme,FJo),e(hv,CJo),e(hv,Eq),e(Eq,MJo),e(hv,EJo),e(so,yJo),e(so,pv),e(pv,wJo),e(pv,qme),e(qme,AJo),e(pv,LJo),e(pv,Gme),e(Gme,BJo),e(so,xJo),e(so,Ome),e(Ome,kJo),e(so,RJo),g(q6,so,null),b(c,cRe,u),b(c,hc,u),e(hc,_v),e(_v,Xme),g(G6,Xme,null),e(hc,SJo),e(hc,Vme),e(Vme,PJo),b(c,fRe,u),b(c,vr,u),g(O6,vr,null),e(vr,$Jo),e(vr,pc),e(pc,IJo),e(pc,zme),e(zme,NJo),e(pc,DJo),e(pc,Wme),e(Wme,jJo),e(pc,qJo),e(vr,GJo),e(vr,X6),e(X6,OJo),e(X6,Qme),e(Qme,XJo),e(X6,VJo),e(vr,zJo),e(vr,gt),g(V6,gt,null),e(gt,WJo),e(gt,Hme),e(Hme,QJo),e(gt,HJo),e(gt,_c),e(_c,UJo),e(_c,Ume),e(Ume,JJo),e(_c,YJo),e(_c,Jme),e(Jme,KJo),e(_c,ZJo),e(gt,eYo),e(gt,Yme),e(Yme,oYo),e(gt,rYo),g(z6,gt,null),e(vr,tYo),e(vr,ho),g(W6,ho,null),e(ho,aYo),e(ho,Kme),e(Kme,nYo),e(ho,sYo),e(ho,_n),e(_n,lYo),e(_n,Zme),e(Zme,iYo),e(_n,dYo),e(_n,ege),e(ege,cYo),e(_n,fYo),e(_n,oge),e(oge,mYo),e(_n,gYo),e(ho,hYo),e(ho,B),e(B,uv),e(uv,rge),e(rge,pYo),e(uv,_Yo),e(uv,yq),e(yq,uYo),e(uv,bYo),e(B,vYo),e(B,bv),e(bv,tge),e(tge,TYo),e(bv,FYo),e(bv,wq),e(wq,CYo),e(bv,MYo),e(B,EYo),e(B,vv),e(vv,age),e(age,yYo),e(vv,wYo),e(vv,Aq),e(Aq,AYo),e(vv,LYo),e(B,BYo),e(B,Tv),e(Tv,nge),e(nge,xYo),e(Tv,kYo),e(Tv,Lq),e(Lq,RYo),e(Tv,SYo),e(B,PYo),e(B,Fv),e(Fv,sge),e(sge,$Yo),e(Fv,IYo),e(Fv,Bq),e(Bq,NYo),e(Fv,DYo),e(B,jYo),e(B,Cv),e(Cv,lge),e(lge,qYo),e(Cv,GYo),e(Cv,xq),e(xq,OYo),e(Cv,XYo),e(B,VYo),e(B,Mv),e(Mv,ige),e(ige,zYo),e(Mv,WYo),e(Mv,kq),e(kq,QYo),e(Mv,HYo),e(B,UYo),e(B,Ev),e(Ev,dge),e(dge,JYo),e(Ev,YYo),e(Ev,Rq),e(Rq,KYo),e(Ev,ZYo),e(B,eKo),e(B,yv),e(yv,cge),e(cge,oKo),e(yv,rKo),e(yv,Sq),e(Sq,tKo),e(yv,aKo),e(B,nKo),e(B,wv),e(wv,fge),e(fge,sKo),e(wv,lKo),e(wv,Pq),e(Pq,iKo),e(wv,dKo),e(B,cKo),e(B,Av),e(Av,mge),e(mge,fKo),e(Av,mKo),e(Av,$q),e($q,gKo),e(Av,hKo),e(B,pKo),e(B,Lv),e(Lv,gge),e(gge,_Ko),e(Lv,uKo),e(Lv,Iq),e(Iq,bKo),e(Lv,vKo),e(B,TKo),e(B,Bv),e(Bv,hge),e(hge,FKo),e(Bv,CKo),e(Bv,Nq),e(Nq,MKo),e(Bv,EKo),e(B,yKo),e(B,xv),e(xv,pge),e(pge,wKo),e(xv,AKo),e(xv,Dq),e(Dq,LKo),e(xv,BKo),e(B,xKo),e(B,kv),e(kv,_ge),e(_ge,kKo),e(kv,RKo),e(kv,jq),e(jq,SKo),e(kv,PKo),e(B,$Ko),e(B,Rv),e(Rv,uge),e(uge,IKo),e(Rv,NKo),e(Rv,qq),e(qq,DKo),e(Rv,jKo),e(B,qKo),e(B,Gs),e(Gs,bge),e(bge,GKo),e(Gs,OKo),e(Gs,Gq),e(Gq,XKo),e(Gs,VKo),e(Gs,Oq),e(Oq,zKo),e(Gs,WKo),e(B,QKo),e(B,Sv),e(Sv,vge),e(vge,HKo),e(Sv,UKo),e(Sv,Xq),e(Xq,JKo),e(Sv,YKo),e(B,KKo),e(B,Pv),e(Pv,Tge),e(Tge,ZKo),e(Pv,eZo),e(Pv,Vq),e(Vq,oZo),e(Pv,rZo),e(B,tZo),e(B,$v),e($v,Fge),e(Fge,aZo),e($v,nZo),e($v,zq),e(zq,sZo),e($v,lZo),e(B,iZo),e(B,Iv),e(Iv,Cge),e(Cge,dZo),e(Iv,cZo),e(Iv,Wq),e(Wq,fZo),e(Iv,mZo),e(B,gZo),e(B,Nv),e(Nv,Mge),e(Mge,hZo),e(Nv,pZo),e(Nv,Qq),e(Qq,_Zo),e(Nv,uZo),e(B,bZo),e(B,Dv),e(Dv,Ege),e(Ege,vZo),e(Dv,TZo),e(Dv,Hq),e(Hq,FZo),e(Dv,CZo),e(B,MZo),e(B,jv),e(jv,yge),e(yge,EZo),e(jv,yZo),e(jv,Uq),e(Uq,wZo),e(jv,AZo),e(B,LZo),e(B,qv),e(qv,wge),e(wge,BZo),e(qv,xZo),e(qv,Jq),e(Jq,kZo),e(qv,RZo),e(B,SZo),e(B,Gv),e(Gv,Age),e(Age,PZo),e(Gv,$Zo),e(Gv,Yq),e(Yq,IZo),e(Gv,NZo),e(B,DZo),e(B,Ov),e(Ov,Lge),e(Lge,jZo),e(Ov,qZo),e(Ov,Kq),e(Kq,GZo),e(Ov,OZo),e(B,XZo),e(B,Xv),e(Xv,Bge),e(Bge,VZo),e(Xv,zZo),e(Xv,Zq),e(Zq,WZo),e(Xv,QZo),e(B,HZo),e(B,Vv),e(Vv,xge),e(xge,UZo),e(Vv,JZo),e(Vv,eG),e(eG,YZo),e(Vv,KZo),e(B,ZZo),e(B,zv),e(zv,kge),e(kge,eer),e(zv,oer),e(zv,oG),e(oG,rer),e(zv,ter),e(B,aer),e(B,Wv),e(Wv,Rge),e(Rge,ner),e(Wv,ser),e(Wv,rG),e(rG,ler),e(Wv,ier),e(B,der),e(B,Qv),e(Qv,Sge),e(Sge,cer),e(Qv,fer),e(Qv,tG),e(tG,mer),e(Qv,ger),e(B,her),e(B,Hv),e(Hv,Pge),e(Pge,per),e(Hv,_er),e(Hv,aG),e(aG,uer),e(Hv,ber),e(B,ver),e(B,Uv),e(Uv,$ge),e($ge,Ter),e(Uv,Fer),e(Uv,nG),e(nG,Cer),e(Uv,Mer),e(B,Eer),e(B,Jv),e(Jv,Ige),e(Ige,yer),e(Jv,wer),e(Jv,sG),e(sG,Aer),e(Jv,Ler),e(B,Ber),e(B,Yv),e(Yv,Nge),e(Nge,xer),e(Yv,ker),e(Yv,lG),e(lG,Rer),e(Yv,Ser),e(B,Per),e(B,Kv),e(Kv,Dge),e(Dge,$er),e(Kv,Ier),e(Kv,iG),e(iG,Ner),e(Kv,Der),e(B,jer),e(B,Zv),e(Zv,jge),e(jge,qer),e(Zv,Ger),e(Zv,dG),e(dG,Oer),e(Zv,Xer),e(B,Ver),e(B,eT),e(eT,qge),e(qge,zer),e(eT,Wer),e(eT,cG),e(cG,Qer),e(eT,Her),e(B,Uer),e(B,oT),e(oT,Gge),e(Gge,Jer),e(oT,Yer),e(oT,fG),e(fG,Ker),e(oT,Zer),e(B,eor),e(B,rT),e(rT,Oge),e(Oge,oor),e(rT,ror),e(rT,mG),e(mG,tor),e(rT,aor),e(B,nor),e(B,tT),e(tT,Xge),e(Xge,sor),e(tT,lor),e(tT,gG),e(gG,ior),e(tT,dor),e(ho,cor),e(ho,Vge),e(Vge,mor),e(ho,gor),g(Q6,ho,null),b(c,mRe,u),b(c,uc,u),e(uc,aT),e(aT,zge),g(H6,zge,null),e(uc,hor),e(uc,Wge),e(Wge,por),b(c,gRe,u),b(c,Tr,u),g(U6,Tr,null),e(Tr,_or),e(Tr,bc),e(bc,uor),e(bc,Qge),e(Qge,bor),e(bc,vor),e(bc,Hge),e(Hge,Tor),e(bc,For),e(Tr,Cor),e(Tr,J6),e(J6,Mor),e(J6,Uge),e(Uge,Eor),e(J6,yor),e(Tr,wor),e(Tr,ht),g(Y6,ht,null),e(ht,Aor),e(ht,Jge),e(Jge,Lor),e(ht,Bor),e(ht,vc),e(vc,xor),e(vc,Yge),e(Yge,kor),e(vc,Ror),e(vc,Kge),e(Kge,Sor),e(vc,Por),e(ht,$or),e(ht,Zge),e(Zge,Ior),e(ht,Nor),g(K6,ht,null),e(Tr,Dor),e(Tr,po),g(Z6,po,null),e(po,jor),e(po,ehe),e(ehe,qor),e(po,Gor),e(po,un),e(un,Oor),e(un,ohe),e(ohe,Xor),e(un,Vor),e(un,rhe),e(rhe,zor),e(un,Wor),e(un,the),e(the,Qor),e(un,Hor),e(po,Uor),e(po,H),e(H,nT),e(nT,ahe),e(ahe,Jor),e(nT,Yor),e(nT,hG),e(hG,Kor),e(nT,Zor),e(H,err),e(H,sT),e(sT,nhe),e(nhe,orr),e(sT,rrr),e(sT,pG),e(pG,trr),e(sT,arr),e(H,nrr),e(H,lT),e(lT,she),e(she,srr),e(lT,lrr),e(lT,_G),e(_G,irr),e(lT,drr),e(H,crr),e(H,iT),e(iT,lhe),e(lhe,frr),e(iT,mrr),e(iT,uG),e(uG,grr),e(iT,hrr),e(H,prr),e(H,dT),e(dT,ihe),e(ihe,_rr),e(dT,urr),e(dT,bG),e(bG,brr),e(dT,vrr),e(H,Trr),e(H,cT),e(cT,dhe),e(dhe,Frr),e(cT,Crr),e(cT,vG),e(vG,Mrr),e(cT,Err),e(H,yrr),e(H,fT),e(fT,che),e(che,wrr),e(fT,Arr),e(fT,TG),e(TG,Lrr),e(fT,Brr),e(H,xrr),e(H,mT),e(mT,fhe),e(fhe,krr),e(mT,Rrr),e(mT,FG),e(FG,Srr),e(mT,Prr),e(H,$rr),e(H,gT),e(gT,mhe),e(mhe,Irr),e(gT,Nrr),e(gT,CG),e(CG,Drr),e(gT,jrr),e(H,qrr),e(H,hT),e(hT,ghe),e(ghe,Grr),e(hT,Orr),e(hT,MG),e(MG,Xrr),e(hT,Vrr),e(H,zrr),e(H,pT),e(pT,hhe),e(hhe,Wrr),e(pT,Qrr),e(pT,EG),e(EG,Hrr),e(pT,Urr),e(H,Jrr),e(H,_T),e(_T,phe),e(phe,Yrr),e(_T,Krr),e(_T,yG),e(yG,Zrr),e(_T,etr),e(H,otr),e(H,uT),e(uT,_he),e(_he,rtr),e(uT,ttr),e(uT,wG),e(wG,atr),e(uT,ntr),e(H,str),e(H,bT),e(bT,uhe),e(uhe,ltr),e(bT,itr),e(bT,AG),e(AG,dtr),e(bT,ctr),e(H,ftr),e(H,vT),e(vT,bhe),e(bhe,mtr),e(vT,gtr),e(vT,LG),e(LG,htr),e(vT,ptr),e(H,_tr),e(H,TT),e(TT,vhe),e(vhe,utr),e(TT,btr),e(TT,BG),e(BG,vtr),e(TT,Ttr),e(H,Ftr),e(H,FT),e(FT,The),e(The,Ctr),e(FT,Mtr),e(FT,xG),e(xG,Etr),e(FT,ytr),e(H,wtr),e(H,CT),e(CT,Fhe),e(Fhe,Atr),e(CT,Ltr),e(CT,kG),e(kG,Btr),e(CT,xtr),e(H,ktr),e(H,MT),e(MT,Che),e(Che,Rtr),e(MT,Str),e(MT,RG),e(RG,Ptr),e(MT,$tr),e(H,Itr),e(H,ET),e(ET,Mhe),e(Mhe,Ntr),e(ET,Dtr),e(ET,SG),e(SG,jtr),e(ET,qtr),e(H,Gtr),e(H,yT),e(yT,Ehe),e(Ehe,Otr),e(yT,Xtr),e(yT,PG),e(PG,Vtr),e(yT,ztr),e(H,Wtr),e(H,wT),e(wT,yhe),e(yhe,Qtr),e(wT,Htr),e(wT,$G),e($G,Utr),e(wT,Jtr),e(po,Ytr),e(po,whe),e(whe,Ktr),e(po,Ztr),g(eA,po,null),b(c,hRe,u),b(c,Tc,u),e(Tc,AT),e(AT,Ahe),g(oA,Ahe,null),e(Tc,ear),e(Tc,Lhe),e(Lhe,oar),b(c,pRe,u),b(c,Fr,u),g(rA,Fr,null),e(Fr,rar),e(Fr,Fc),e(Fc,tar),e(Fc,Bhe),e(Bhe,aar),e(Fc,nar),e(Fc,xhe),e(xhe,sar),e(Fc,lar),e(Fr,iar),e(Fr,tA),e(tA,dar),e(tA,khe),e(khe,car),e(tA,far),e(Fr,mar),e(Fr,pt),g(aA,pt,null),e(pt,gar),e(pt,Rhe),e(Rhe,har),e(pt,par),e(pt,Cc),e(Cc,_ar),e(Cc,She),e(She,uar),e(Cc,bar),e(Cc,Phe),e(Phe,Tar),e(Cc,Far),e(pt,Car),e(pt,$he),e($he,Mar),e(pt,Ear),g(nA,pt,null),e(Fr,yar),e(Fr,_o),g(sA,_o,null),e(_o,war),e(_o,Ihe),e(Ihe,Aar),e(_o,Lar),e(_o,bn),e(bn,Bar),e(bn,Nhe),e(Nhe,xar),e(bn,kar),e(bn,Dhe),e(Dhe,Rar),e(bn,Sar),e(bn,jhe),e(jhe,Par),e(bn,$ar),e(_o,Iar),e(_o,ge),e(ge,LT),e(LT,qhe),e(qhe,Nar),e(LT,Dar),e(LT,IG),e(IG,jar),e(LT,qar),e(ge,Gar),e(ge,BT),e(BT,Ghe),e(Ghe,Oar),e(BT,Xar),e(BT,NG),e(NG,Var),e(BT,zar),e(ge,War),e(ge,xT),e(xT,Ohe),e(Ohe,Qar),e(xT,Har),e(xT,DG),e(DG,Uar),e(xT,Jar),e(ge,Yar),e(ge,kT),e(kT,Xhe),e(Xhe,Kar),e(kT,Zar),e(kT,jG),e(jG,enr),e(kT,onr),e(ge,rnr),e(ge,RT),e(RT,Vhe),e(Vhe,tnr),e(RT,anr),e(RT,qG),e(qG,nnr),e(RT,snr),e(ge,lnr),e(ge,ST),e(ST,zhe),e(zhe,inr),e(ST,dnr),e(ST,GG),e(GG,cnr),e(ST,fnr),e(ge,mnr),e(ge,PT),e(PT,Whe),e(Whe,gnr),e(PT,hnr),e(PT,OG),e(OG,pnr),e(PT,_nr),e(ge,unr),e(ge,$T),e($T,Qhe),e(Qhe,bnr),e($T,vnr),e($T,XG),e(XG,Tnr),e($T,Fnr),e(ge,Cnr),e(ge,IT),e(IT,Hhe),e(Hhe,Mnr),e(IT,Enr),e(IT,VG),e(VG,ynr),e(IT,wnr),e(ge,Anr),e(ge,NT),e(NT,Uhe),e(Uhe,Lnr),e(NT,Bnr),e(NT,zG),e(zG,xnr),e(NT,knr),e(ge,Rnr),e(ge,DT),e(DT,Jhe),e(Jhe,Snr),e(DT,Pnr),e(DT,WG),e(WG,$nr),e(DT,Inr),e(_o,Nnr),e(_o,Yhe),e(Yhe,Dnr),e(_o,jnr),g(lA,_o,null),b(c,_Re,u),b(c,Mc,u),e(Mc,jT),e(jT,Khe),g(iA,Khe,null),e(Mc,qnr),e(Mc,Zhe),e(Zhe,Gnr),b(c,uRe,u),b(c,Cr,u),g(dA,Cr,null),e(Cr,Onr),e(Cr,Ec),e(Ec,Xnr),e(Ec,epe),e(epe,Vnr),e(Ec,znr),e(Ec,ope),e(ope,Wnr),e(Ec,Qnr),e(Cr,Hnr),e(Cr,cA),e(cA,Unr),e(cA,rpe),e(rpe,Jnr),e(cA,Ynr),e(Cr,Knr),e(Cr,_t),g(fA,_t,null),e(_t,Znr),e(_t,tpe),e(tpe,esr),e(_t,osr),e(_t,yc),e(yc,rsr),e(yc,ape),e(ape,tsr),e(yc,asr),e(yc,npe),e(npe,nsr),e(yc,ssr),e(_t,lsr),e(_t,spe),e(spe,isr),e(_t,dsr),g(mA,_t,null),e(Cr,csr),e(Cr,uo),g(gA,uo,null),e(uo,fsr),e(uo,lpe),e(lpe,msr),e(uo,gsr),e(uo,vn),e(vn,hsr),e(vn,ipe),e(ipe,psr),e(vn,_sr),e(vn,dpe),e(dpe,usr),e(vn,bsr),e(vn,cpe),e(cpe,vsr),e(vn,Tsr),e(uo,Fsr),e(uo,hA),e(hA,qT),e(qT,fpe),e(fpe,Csr),e(qT,Msr),e(qT,QG),e(QG,Esr),e(qT,ysr),e(hA,wsr),e(hA,GT),e(GT,mpe),e(mpe,Asr),e(GT,Lsr),e(GT,HG),e(HG,Bsr),e(GT,xsr),e(uo,ksr),e(uo,gpe),e(gpe,Rsr),e(uo,Ssr),g(pA,uo,null),b(c,bRe,u),b(c,wc,u),e(wc,OT),e(OT,hpe),g(_A,hpe,null),e(wc,Psr),e(wc,ppe),e(ppe,$sr),b(c,vRe,u),b(c,Mr,u),g(uA,Mr,null),e(Mr,Isr),e(Mr,Ac),e(Ac,Nsr),e(Ac,_pe),e(_pe,Dsr),e(Ac,jsr),e(Ac,upe),e(upe,qsr),e(Ac,Gsr),e(Mr,Osr),e(Mr,bA),e(bA,Xsr),e(bA,bpe),e(bpe,Vsr),e(bA,zsr),e(Mr,Wsr),e(Mr,ut),g(vA,ut,null),e(ut,Qsr),e(ut,vpe),e(vpe,Hsr),e(ut,Usr),e(ut,Lc),e(Lc,Jsr),e(Lc,Tpe),e(Tpe,Ysr),e(Lc,Ksr),e(Lc,Fpe),e(Fpe,Zsr),e(Lc,elr),e(ut,olr),e(ut,Cpe),e(Cpe,rlr),e(ut,tlr),g(TA,ut,null),e(Mr,alr),e(Mr,bo),g(FA,bo,null),e(bo,nlr),e(bo,Mpe),e(Mpe,slr),e(bo,llr),e(bo,Tn),e(Tn,ilr),e(Tn,Epe),e(Epe,dlr),e(Tn,clr),e(Tn,ype),e(ype,flr),e(Tn,mlr),e(Tn,wpe),e(wpe,glr),e(Tn,hlr),e(bo,plr),e(bo,Y),e(Y,XT),e(XT,Ape),e(Ape,_lr),e(XT,ulr),e(XT,UG),e(UG,blr),e(XT,vlr),e(Y,Tlr),e(Y,VT),e(VT,Lpe),e(Lpe,Flr),e(VT,Clr),e(VT,JG),e(JG,Mlr),e(VT,Elr),e(Y,ylr),e(Y,zT),e(zT,Bpe),e(Bpe,wlr),e(zT,Alr),e(zT,YG),e(YG,Llr),e(zT,Blr),e(Y,xlr),e(Y,WT),e(WT,xpe),e(xpe,klr),e(WT,Rlr),e(WT,KG),e(KG,Slr),e(WT,Plr),e(Y,$lr),e(Y,QT),e(QT,kpe),e(kpe,Ilr),e(QT,Nlr),e(QT,ZG),e(ZG,Dlr),e(QT,jlr),e(Y,qlr),e(Y,HT),e(HT,Rpe),e(Rpe,Glr),e(HT,Olr),e(HT,eO),e(eO,Xlr),e(HT,Vlr),e(Y,zlr),e(Y,UT),e(UT,Spe),e(Spe,Wlr),e(UT,Qlr),e(UT,oO),e(oO,Hlr),e(UT,Ulr),e(Y,Jlr),e(Y,JT),e(JT,Ppe),e(Ppe,Ylr),e(JT,Klr),e(JT,rO),e(rO,Zlr),e(JT,eir),e(Y,oir),e(Y,YT),e(YT,$pe),e($pe,rir),e(YT,tir),e(YT,tO),e(tO,air),e(YT,nir),e(Y,sir),e(Y,KT),e(KT,Ipe),e(Ipe,lir),e(KT,iir),e(KT,aO),e(aO,dir),e(KT,cir),e(Y,fir),e(Y,ZT),e(ZT,Npe),e(Npe,mir),e(ZT,gir),e(ZT,nO),e(nO,hir),e(ZT,pir),e(Y,_ir),e(Y,eF),e(eF,Dpe),e(Dpe,uir),e(eF,bir),e(eF,sO),e(sO,vir),e(eF,Tir),e(Y,Fir),e(Y,oF),e(oF,jpe),e(jpe,Cir),e(oF,Mir),e(oF,lO),e(lO,Eir),e(oF,yir),e(Y,wir),e(Y,rF),e(rF,qpe),e(qpe,Air),e(rF,Lir),e(rF,iO),e(iO,Bir),e(rF,xir),e(Y,kir),e(Y,tF),e(tF,Gpe),e(Gpe,Rir),e(tF,Sir),e(tF,dO),e(dO,Pir),e(tF,$ir),e(Y,Iir),e(Y,aF),e(aF,Ope),e(Ope,Nir),e(aF,Dir),e(aF,cO),e(cO,jir),e(aF,qir),e(Y,Gir),e(Y,nF),e(nF,Xpe),e(Xpe,Oir),e(nF,Xir),e(nF,fO),e(fO,Vir),e(nF,zir),e(Y,Wir),e(Y,sF),e(sF,Vpe),e(Vpe,Qir),e(sF,Hir),e(sF,mO),e(mO,Uir),e(sF,Jir),e(Y,Yir),e(Y,lF),e(lF,zpe),e(zpe,Kir),e(lF,Zir),e(lF,gO),e(gO,edr),e(lF,odr),e(Y,rdr),e(Y,iF),e(iF,Wpe),e(Wpe,tdr),e(iF,adr),e(iF,hO),e(hO,ndr),e(iF,sdr),e(bo,ldr),e(bo,Qpe),e(Qpe,idr),e(bo,ddr),g(CA,bo,null),b(c,TRe,u),b(c,Bc,u),e(Bc,dF),e(dF,Hpe),g(MA,Hpe,null),e(Bc,cdr),e(Bc,Upe),e(Upe,fdr),b(c,FRe,u),b(c,Er,u),g(EA,Er,null),e(Er,mdr),e(Er,xc),e(xc,gdr),e(xc,Jpe),e(Jpe,hdr),e(xc,pdr),e(xc,Ype),e(Ype,_dr),e(xc,udr),e(Er,bdr),e(Er,yA),e(yA,vdr),e(yA,Kpe),e(Kpe,Tdr),e(yA,Fdr),e(Er,Cdr),e(Er,bt),g(wA,bt,null),e(bt,Mdr),e(bt,Zpe),e(Zpe,Edr),e(bt,ydr),e(bt,kc),e(kc,wdr),e(kc,e_e),e(e_e,Adr),e(kc,Ldr),e(kc,o_e),e(o_e,Bdr),e(kc,xdr),e(bt,kdr),e(bt,r_e),e(r_e,Rdr),e(bt,Sdr),g(AA,bt,null),e(Er,Pdr),e(Er,vo),g(LA,vo,null),e(vo,$dr),e(vo,t_e),e(t_e,Idr),e(vo,Ndr),e(vo,Fn),e(Fn,Ddr),e(Fn,a_e),e(a_e,jdr),e(Fn,qdr),e(Fn,n_e),e(n_e,Gdr),e(Fn,Odr),e(Fn,s_e),e(s_e,Xdr),e(Fn,Vdr),e(vo,zdr),e(vo,ue),e(ue,cF),e(cF,l_e),e(l_e,Wdr),e(cF,Qdr),e(cF,pO),e(pO,Hdr),e(cF,Udr),e(ue,Jdr),e(ue,fF),e(fF,i_e),e(i_e,Ydr),e(fF,Kdr),e(fF,_O),e(_O,Zdr),e(fF,ecr),e(ue,ocr),e(ue,mF),e(mF,d_e),e(d_e,rcr),e(mF,tcr),e(mF,uO),e(uO,acr),e(mF,ncr),e(ue,scr),e(ue,gF),e(gF,c_e),e(c_e,lcr),e(gF,icr),e(gF,bO),e(bO,dcr),e(gF,ccr),e(ue,fcr),e(ue,hF),e(hF,f_e),e(f_e,mcr),e(hF,gcr),e(hF,vO),e(vO,hcr),e(hF,pcr),e(ue,_cr),e(ue,pF),e(pF,m_e),e(m_e,ucr),e(pF,bcr),e(pF,TO),e(TO,vcr),e(pF,Tcr),e(ue,Fcr),e(ue,_F),e(_F,g_e),e(g_e,Ccr),e(_F,Mcr),e(_F,FO),e(FO,Ecr),e(_F,ycr),e(ue,wcr),e(ue,uF),e(uF,h_e),e(h_e,Acr),e(uF,Lcr),e(uF,CO),e(CO,Bcr),e(uF,xcr),e(ue,kcr),e(ue,bF),e(bF,p_e),e(p_e,Rcr),e(bF,Scr),e(bF,MO),e(MO,Pcr),e(bF,$cr),e(ue,Icr),e(ue,vF),e(vF,__e),e(__e,Ncr),e(vF,Dcr),e(vF,EO),e(EO,jcr),e(vF,qcr),e(vo,Gcr),e(vo,u_e),e(u_e,Ocr),e(vo,Xcr),g(BA,vo,null),b(c,CRe,u),b(c,Rc,u),e(Rc,TF),e(TF,b_e),g(xA,b_e,null),e(Rc,Vcr),e(Rc,v_e),e(v_e,zcr),b(c,MRe,u),b(c,yr,u),g(kA,yr,null),e(yr,Wcr),e(yr,Sc),e(Sc,Qcr),e(Sc,T_e),e(T_e,Hcr),e(Sc,Ucr),e(Sc,F_e),e(F_e,Jcr),e(Sc,Ycr),e(yr,Kcr),e(yr,RA),e(RA,Zcr),e(RA,C_e),e(C_e,efr),e(RA,ofr),e(yr,rfr),e(yr,vt),g(SA,vt,null),e(vt,tfr),e(vt,M_e),e(M_e,afr),e(vt,nfr),e(vt,Pc),e(Pc,sfr),e(Pc,E_e),e(E_e,lfr),e(Pc,ifr),e(Pc,y_e),e(y_e,dfr),e(Pc,cfr),e(vt,ffr),e(vt,w_e),e(w_e,mfr),e(vt,gfr),g(PA,vt,null),e(yr,hfr),e(yr,To),g($A,To,null),e(To,pfr),e(To,A_e),e(A_e,_fr),e(To,ufr),e(To,Cn),e(Cn,bfr),e(Cn,L_e),e(L_e,vfr),e(Cn,Tfr),e(Cn,B_e),e(B_e,Ffr),e(Cn,Cfr),e(Cn,x_e),e(x_e,Mfr),e(Cn,Efr),e(To,yfr),e(To,V),e(V,FF),e(FF,k_e),e(k_e,wfr),e(FF,Afr),e(FF,yO),e(yO,Lfr),e(FF,Bfr),e(V,xfr),e(V,CF),e(CF,R_e),e(R_e,kfr),e(CF,Rfr),e(CF,wO),e(wO,Sfr),e(CF,Pfr),e(V,$fr),e(V,MF),e(MF,S_e),e(S_e,Ifr),e(MF,Nfr),e(MF,AO),e(AO,Dfr),e(MF,jfr),e(V,qfr),e(V,EF),e(EF,P_e),e(P_e,Gfr),e(EF,Ofr),e(EF,LO),e(LO,Xfr),e(EF,Vfr),e(V,zfr),e(V,yF),e(yF,$_e),e($_e,Wfr),e(yF,Qfr),e(yF,BO),e(BO,Hfr),e(yF,Ufr),e(V,Jfr),e(V,wF),e(wF,I_e),e(I_e,Yfr),e(wF,Kfr),e(wF,xO),e(xO,Zfr),e(wF,emr),e(V,omr),e(V,AF),e(AF,N_e),e(N_e,rmr),e(AF,tmr),e(AF,kO),e(kO,amr),e(AF,nmr),e(V,smr),e(V,LF),e(LF,D_e),e(D_e,lmr),e(LF,imr),e(LF,RO),e(RO,dmr),e(LF,cmr),e(V,fmr),e(V,BF),e(BF,j_e),e(j_e,mmr),e(BF,gmr),e(BF,SO),e(SO,hmr),e(BF,pmr),e(V,_mr),e(V,xF),e(xF,q_e),e(q_e,umr),e(xF,bmr),e(xF,PO),e(PO,vmr),e(xF,Tmr),e(V,Fmr),e(V,kF),e(kF,G_e),e(G_e,Cmr),e(kF,Mmr),e(kF,$O),e($O,Emr),e(kF,ymr),e(V,wmr),e(V,RF),e(RF,O_e),e(O_e,Amr),e(RF,Lmr),e(RF,IO),e(IO,Bmr),e(RF,xmr),e(V,kmr),e(V,SF),e(SF,X_e),e(X_e,Rmr),e(SF,Smr),e(SF,NO),e(NO,Pmr),e(SF,$mr),e(V,Imr),e(V,PF),e(PF,V_e),e(V_e,Nmr),e(PF,Dmr),e(PF,DO),e(DO,jmr),e(PF,qmr),e(V,Gmr),e(V,$F),e($F,z_e),e(z_e,Omr),e($F,Xmr),e($F,jO),e(jO,Vmr),e($F,zmr),e(V,Wmr),e(V,IF),e(IF,W_e),e(W_e,Qmr),e(IF,Hmr),e(IF,qO),e(qO,Umr),e(IF,Jmr),e(V,Ymr),e(V,NF),e(NF,Q_e),e(Q_e,Kmr),e(NF,Zmr),e(NF,GO),e(GO,egr),e(NF,ogr),e(V,rgr),e(V,DF),e(DF,H_e),e(H_e,tgr),e(DF,agr),e(DF,OO),e(OO,ngr),e(DF,sgr),e(V,lgr),e(V,jF),e(jF,U_e),e(U_e,igr),e(jF,dgr),e(jF,XO),e(XO,cgr),e(jF,fgr),e(V,mgr),e(V,qF),e(qF,J_e),e(J_e,ggr),e(qF,hgr),e(qF,VO),e(VO,pgr),e(qF,_gr),e(V,ugr),e(V,GF),e(GF,Y_e),e(Y_e,bgr),e(GF,vgr),e(GF,zO),e(zO,Tgr),e(GF,Fgr),e(V,Cgr),e(V,OF),e(OF,K_e),e(K_e,Mgr),e(OF,Egr),e(OF,WO),e(WO,ygr),e(OF,wgr),e(V,Agr),e(V,XF),e(XF,Z_e),e(Z_e,Lgr),e(XF,Bgr),e(XF,QO),e(QO,xgr),e(XF,kgr),e(V,Rgr),e(V,VF),e(VF,eue),e(eue,Sgr),e(VF,Pgr),e(VF,HO),e(HO,$gr),e(VF,Igr),e(V,Ngr),e(V,zF),e(zF,oue),e(oue,Dgr),e(zF,jgr),e(zF,UO),e(UO,qgr),e(zF,Ggr),e(To,Ogr),e(To,rue),e(rue,Xgr),e(To,Vgr),g(IA,To,null),b(c,ERe,u),b(c,$c,u),e($c,WF),e(WF,tue),g(NA,tue,null),e($c,zgr),e($c,aue),e(aue,Wgr),b(c,yRe,u),b(c,wr,u),g(DA,wr,null),e(wr,Qgr),e(wr,Ic),e(Ic,Hgr),e(Ic,nue),e(nue,Ugr),e(Ic,Jgr),e(Ic,sue),e(sue,Ygr),e(Ic,Kgr),e(wr,Zgr),e(wr,jA),e(jA,ehr),e(jA,lue),e(lue,ohr),e(jA,rhr),e(wr,thr),e(wr,Tt),g(qA,Tt,null),e(Tt,ahr),e(Tt,iue),e(iue,nhr),e(Tt,shr),e(Tt,Nc),e(Nc,lhr),e(Nc,due),e(due,ihr),e(Nc,dhr),e(Nc,cue),e(cue,chr),e(Nc,fhr),e(Tt,mhr),e(Tt,fue),e(fue,ghr),e(Tt,hhr),g(GA,Tt,null),e(wr,phr),e(wr,Fo),g(OA,Fo,null),e(Fo,_hr),e(Fo,mue),e(mue,uhr),e(Fo,bhr),e(Fo,Mn),e(Mn,vhr),e(Mn,gue),e(gue,Thr),e(Mn,Fhr),e(Mn,hue),e(hue,Chr),e(Mn,Mhr),e(Mn,pue),e(pue,Ehr),e(Mn,yhr),e(Fo,whr),e(Fo,ae),e(ae,QF),e(QF,_ue),e(_ue,Ahr),e(QF,Lhr),e(QF,JO),e(JO,Bhr),e(QF,xhr),e(ae,khr),e(ae,HF),e(HF,uue),e(uue,Rhr),e(HF,Shr),e(HF,YO),e(YO,Phr),e(HF,$hr),e(ae,Ihr),e(ae,UF),e(UF,bue),e(bue,Nhr),e(UF,Dhr),e(UF,KO),e(KO,jhr),e(UF,qhr),e(ae,Ghr),e(ae,JF),e(JF,vue),e(vue,Ohr),e(JF,Xhr),e(JF,ZO),e(ZO,Vhr),e(JF,zhr),e(ae,Whr),e(ae,YF),e(YF,Tue),e(Tue,Qhr),e(YF,Hhr),e(YF,eX),e(eX,Uhr),e(YF,Jhr),e(ae,Yhr),e(ae,KF),e(KF,Fue),e(Fue,Khr),e(KF,Zhr),e(KF,oX),e(oX,epr),e(KF,opr),e(ae,rpr),e(ae,ZF),e(ZF,Cue),e(Cue,tpr),e(ZF,apr),e(ZF,rX),e(rX,npr),e(ZF,spr),e(ae,lpr),e(ae,eC),e(eC,Mue),e(Mue,ipr),e(eC,dpr),e(eC,tX),e(tX,cpr),e(eC,fpr),e(ae,mpr),e(ae,oC),e(oC,Eue),e(Eue,gpr),e(oC,hpr),e(oC,aX),e(aX,ppr),e(oC,_pr),e(ae,upr),e(ae,rC),e(rC,yue),e(yue,bpr),e(rC,vpr),e(rC,nX),e(nX,Tpr),e(rC,Fpr),e(ae,Cpr),e(ae,tC),e(tC,wue),e(wue,Mpr),e(tC,Epr),e(tC,sX),e(sX,ypr),e(tC,wpr),e(ae,Apr),e(ae,aC),e(aC,Aue),e(Aue,Lpr),e(aC,Bpr),e(aC,lX),e(lX,xpr),e(aC,kpr),e(ae,Rpr),e(ae,nC),e(nC,Lue),e(Lue,Spr),e(nC,Ppr),e(nC,iX),e(iX,$pr),e(nC,Ipr),e(ae,Npr),e(ae,sC),e(sC,Bue),e(Bue,Dpr),e(sC,jpr),e(sC,dX),e(dX,qpr),e(sC,Gpr),e(ae,Opr),e(ae,lC),e(lC,xue),e(xue,Xpr),e(lC,Vpr),e(lC,cX),e(cX,zpr),e(lC,Wpr),e(ae,Qpr),e(ae,iC),e(iC,kue),e(kue,Hpr),e(iC,Upr),e(iC,fX),e(fX,Jpr),e(iC,Ypr),e(ae,Kpr),e(ae,dC),e(dC,Rue),e(Rue,Zpr),e(dC,e_r),e(dC,mX),e(mX,o_r),e(dC,r_r),e(Fo,t_r),e(Fo,Sue),e(Sue,a_r),e(Fo,n_r),g(XA,Fo,null),b(c,wRe,u),b(c,Dc,u),e(Dc,cC),e(cC,Pue),g(VA,Pue,null),e(Dc,s_r),e(Dc,$ue),e($ue,l_r),b(c,ARe,u),b(c,Ar,u),g(zA,Ar,null),e(Ar,i_r),e(Ar,jc),e(jc,d_r),e(jc,Iue),e(Iue,c_r),e(jc,f_r),e(jc,Nue),e(Nue,m_r),e(jc,g_r),e(Ar,h_r),e(Ar,WA),e(WA,p_r),e(WA,Due),e(Due,__r),e(WA,u_r),e(Ar,b_r),e(Ar,Ft),g(QA,Ft,null),e(Ft,v_r),e(Ft,jue),e(jue,T_r),e(Ft,F_r),e(Ft,qc),e(qc,C_r),e(qc,que),e(que,M_r),e(qc,E_r),e(qc,Gue),e(Gue,y_r),e(qc,w_r),e(Ft,A_r),e(Ft,Oue),e(Oue,L_r),e(Ft,B_r),g(HA,Ft,null),e(Ar,x_r),e(Ar,Co),g(UA,Co,null),e(Co,k_r),e(Co,Xue),e(Xue,R_r),e(Co,S_r),e(Co,En),e(En,P_r),e(En,Vue),e(Vue,$_r),e(En,I_r),e(En,zue),e(zue,N_r),e(En,D_r),e(En,Wue),e(Wue,j_r),e(En,q_r),e(Co,G_r),e(Co,Que),e(Que,fC),e(fC,Hue),e(Hue,O_r),e(fC,X_r),e(fC,gX),e(gX,V_r),e(fC,z_r),e(Co,W_r),e(Co,Uue),e(Uue,Q_r),e(Co,H_r),g(JA,Co,null),b(c,LRe,u),b(c,Gc,u),e(Gc,mC),e(mC,Jue),g(YA,Jue,null),e(Gc,U_r),e(Gc,Yue),e(Yue,J_r),b(c,BRe,u),b(c,Lr,u),g(KA,Lr,null),e(Lr,Y_r),e(Lr,Oc),e(Oc,K_r),e(Oc,Kue),e(Kue,Z_r),e(Oc,eur),e(Oc,Zue),e(Zue,our),e(Oc,rur),e(Lr,tur),e(Lr,ZA),e(ZA,aur),e(ZA,e1e),e(e1e,nur),e(ZA,sur),e(Lr,lur),e(Lr,Ct),g(e0,Ct,null),e(Ct,iur),e(Ct,o1e),e(o1e,dur),e(Ct,cur),e(Ct,Xc),e(Xc,fur),e(Xc,r1e),e(r1e,mur),e(Xc,gur),e(Xc,t1e),e(t1e,hur),e(Xc,pur),e(Ct,_ur),e(Ct,a1e),e(a1e,uur),e(Ct,bur),g(o0,Ct,null),e(Lr,vur),e(Lr,Mo),g(r0,Mo,null),e(Mo,Tur),e(Mo,n1e),e(n1e,Fur),e(Mo,Cur),e(Mo,yn),e(yn,Mur),e(yn,s1e),e(s1e,Eur),e(yn,yur),e(yn,l1e),e(l1e,wur),e(yn,Aur),e(yn,i1e),e(i1e,Lur),e(yn,Bur),e(Mo,xur),e(Mo,K),e(K,gC),e(gC,d1e),e(d1e,kur),e(gC,Rur),e(gC,hX),e(hX,Sur),e(gC,Pur),e(K,$ur),e(K,hC),e(hC,c1e),e(c1e,Iur),e(hC,Nur),e(hC,pX),e(pX,Dur),e(hC,jur),e(K,qur),e(K,pC),e(pC,f1e),e(f1e,Gur),e(pC,Our),e(pC,_X),e(_X,Xur),e(pC,Vur),e(K,zur),e(K,_C),e(_C,m1e),e(m1e,Wur),e(_C,Qur),e(_C,uX),e(uX,Hur),e(_C,Uur),e(K,Jur),e(K,uC),e(uC,g1e),e(g1e,Yur),e(uC,Kur),e(uC,bX),e(bX,Zur),e(uC,e1r),e(K,o1r),e(K,bC),e(bC,h1e),e(h1e,r1r),e(bC,t1r),e(bC,vX),e(vX,a1r),e(bC,n1r),e(K,s1r),e(K,vC),e(vC,p1e),e(p1e,l1r),e(vC,i1r),e(vC,TX),e(TX,d1r),e(vC,c1r),e(K,f1r),e(K,TC),e(TC,_1e),e(_1e,m1r),e(TC,g1r),e(TC,FX),e(FX,h1r),e(TC,p1r),e(K,_1r),e(K,FC),e(FC,u1e),e(u1e,u1r),e(FC,b1r),e(FC,CX),e(CX,v1r),e(FC,T1r),e(K,F1r),e(K,CC),e(CC,b1e),e(b1e,C1r),e(CC,M1r),e(CC,MX),e(MX,E1r),e(CC,y1r),e(K,w1r),e(K,MC),e(MC,v1e),e(v1e,A1r),e(MC,L1r),e(MC,EX),e(EX,B1r),e(MC,x1r),e(K,k1r),e(K,EC),e(EC,T1e),e(T1e,R1r),e(EC,S1r),e(EC,yX),e(yX,P1r),e(EC,$1r),e(K,I1r),e(K,yC),e(yC,F1e),e(F1e,N1r),e(yC,D1r),e(yC,wX),e(wX,j1r),e(yC,q1r),e(K,G1r),e(K,wC),e(wC,C1e),e(C1e,O1r),e(wC,X1r),e(wC,AX),e(AX,V1r),e(wC,z1r),e(K,W1r),e(K,AC),e(AC,M1e),e(M1e,Q1r),e(AC,H1r),e(AC,LX),e(LX,U1r),e(AC,J1r),e(K,Y1r),e(K,LC),e(LC,E1e),e(E1e,K1r),e(LC,Z1r),e(LC,BX),e(BX,e9r),e(LC,o9r),e(K,r9r),e(K,BC),e(BC,y1e),e(y1e,t9r),e(BC,a9r),e(BC,xX),e(xX,n9r),e(BC,s9r),e(K,l9r),e(K,xC),e(xC,w1e),e(w1e,i9r),e(xC,d9r),e(xC,kX),e(kX,c9r),e(xC,f9r),e(K,m9r),e(K,kC),e(kC,A1e),e(A1e,g9r),e(kC,h9r),e(kC,RX),e(RX,p9r),e(kC,_9r),e(K,u9r),e(K,RC),e(RC,L1e),e(L1e,b9r),e(RC,v9r),e(RC,SX),e(SX,T9r),e(RC,F9r),e(Mo,C9r),e(Mo,B1e),e(B1e,M9r),e(Mo,E9r),g(t0,Mo,null),b(c,xRe,u),b(c,Vc,u),e(Vc,SC),e(SC,x1e),g(a0,x1e,null),e(Vc,y9r),e(Vc,k1e),e(k1e,w9r),b(c,kRe,u),b(c,Br,u),g(n0,Br,null),e(Br,A9r),e(Br,zc),e(zc,L9r),e(zc,R1e),e(R1e,B9r),e(zc,x9r),e(zc,S1e),e(S1e,k9r),e(zc,R9r),e(Br,S9r),e(Br,s0),e(s0,P9r),e(s0,P1e),e(P1e,$9r),e(s0,I9r),e(Br,N9r),e(Br,Mt),g(l0,Mt,null),e(Mt,D9r),e(Mt,$1e),e($1e,j9r),e(Mt,q9r),e(Mt,Wc),e(Wc,G9r),e(Wc,I1e),e(I1e,O9r),e(Wc,X9r),e(Wc,N1e),e(N1e,V9r),e(Wc,z9r),e(Mt,W9r),e(Mt,D1e),e(D1e,Q9r),e(Mt,H9r),g(i0,Mt,null),e(Br,U9r),e(Br,Eo),g(d0,Eo,null),e(Eo,J9r),e(Eo,j1e),e(j1e,Y9r),e(Eo,K9r),e(Eo,wn),e(wn,Z9r),e(wn,q1e),e(q1e,ebr),e(wn,obr),e(wn,G1e),e(G1e,rbr),e(wn,tbr),e(wn,O1e),e(O1e,abr),e(wn,nbr),e(Eo,sbr),e(Eo,Z),e(Z,PC),e(PC,X1e),e(X1e,lbr),e(PC,ibr),e(PC,PX),e(PX,dbr),e(PC,cbr),e(Z,fbr),e(Z,$C),e($C,V1e),e(V1e,mbr),e($C,gbr),e($C,$X),e($X,hbr),e($C,pbr),e(Z,_br),e(Z,IC),e(IC,z1e),e(z1e,ubr),e(IC,bbr),e(IC,IX),e(IX,vbr),e(IC,Tbr),e(Z,Fbr),e(Z,NC),e(NC,W1e),e(W1e,Cbr),e(NC,Mbr),e(NC,NX),e(NX,Ebr),e(NC,ybr),e(Z,wbr),e(Z,DC),e(DC,Q1e),e(Q1e,Abr),e(DC,Lbr),e(DC,DX),e(DX,Bbr),e(DC,xbr),e(Z,kbr),e(Z,jC),e(jC,H1e),e(H1e,Rbr),e(jC,Sbr),e(jC,jX),e(jX,Pbr),e(jC,$br),e(Z,Ibr),e(Z,qC),e(qC,U1e),e(U1e,Nbr),e(qC,Dbr),e(qC,qX),e(qX,jbr),e(qC,qbr),e(Z,Gbr),e(Z,GC),e(GC,J1e),e(J1e,Obr),e(GC,Xbr),e(GC,GX),e(GX,Vbr),e(GC,zbr),e(Z,Wbr),e(Z,OC),e(OC,Y1e),e(Y1e,Qbr),e(OC,Hbr),e(OC,OX),e(OX,Ubr),e(OC,Jbr),e(Z,Ybr),e(Z,XC),e(XC,K1e),e(K1e,Kbr),e(XC,Zbr),e(XC,XX),e(XX,e5r),e(XC,o5r),e(Z,r5r),e(Z,VC),e(VC,Z1e),e(Z1e,t5r),e(VC,a5r),e(VC,VX),e(VX,n5r),e(VC,s5r),e(Z,l5r),e(Z,zC),e(zC,e9e),e(e9e,i5r),e(zC,d5r),e(zC,zX),e(zX,c5r),e(zC,f5r),e(Z,m5r),e(Z,WC),e(WC,o9e),e(o9e,g5r),e(WC,h5r),e(WC,WX),e(WX,p5r),e(WC,_5r),e(Z,u5r),e(Z,QC),e(QC,r9e),e(r9e,b5r),e(QC,v5r),e(QC,QX),e(QX,T5r),e(QC,F5r),e(Z,C5r),e(Z,HC),e(HC,t9e),e(t9e,M5r),e(HC,E5r),e(HC,HX),e(HX,y5r),e(HC,w5r),e(Z,A5r),e(Z,UC),e(UC,a9e),e(a9e,L5r),e(UC,B5r),e(UC,UX),e(UX,x5r),e(UC,k5r),e(Z,R5r),e(Z,JC),e(JC,n9e),e(n9e,S5r),e(JC,P5r),e(JC,JX),e(JX,$5r),e(JC,I5r),e(Z,N5r),e(Z,YC),e(YC,s9e),e(s9e,D5r),e(YC,j5r),e(YC,YX),e(YX,q5r),e(YC,G5r),e(Z,O5r),e(Z,KC),e(KC,l9e),e(l9e,X5r),e(KC,V5r),e(KC,KX),e(KX,z5r),e(KC,W5r),e(Eo,Q5r),e(Eo,i9e),e(i9e,H5r),e(Eo,U5r),g(c0,Eo,null),b(c,RRe,u),b(c,Qc,u),e(Qc,ZC),e(ZC,d9e),g(f0,d9e,null),e(Qc,J5r),e(Qc,c9e),e(c9e,Y5r),b(c,SRe,u),b(c,xr,u),g(m0,xr,null),e(xr,K5r),e(xr,Hc),e(Hc,Z5r),e(Hc,f9e),e(f9e,e2r),e(Hc,o2r),e(Hc,m9e),e(m9e,r2r),e(Hc,t2r),e(xr,a2r),e(xr,g0),e(g0,n2r),e(g0,g9e),e(g9e,s2r),e(g0,l2r),e(xr,i2r),e(xr,Et),g(h0,Et,null),e(Et,d2r),e(Et,h9e),e(h9e,c2r),e(Et,f2r),e(Et,Uc),e(Uc,m2r),e(Uc,p9e),e(p9e,g2r),e(Uc,h2r),e(Uc,_9e),e(_9e,p2r),e(Uc,_2r),e(Et,u2r),e(Et,u9e),e(u9e,b2r),e(Et,v2r),g(p0,Et,null),e(xr,T2r),e(xr,yo),g(_0,yo,null),e(yo,F2r),e(yo,b9e),e(b9e,C2r),e(yo,M2r),e(yo,An),e(An,E2r),e(An,v9e),e(v9e,y2r),e(An,w2r),e(An,T9e),e(T9e,A2r),e(An,L2r),e(An,F9e),e(F9e,B2r),e(An,x2r),e(yo,k2r),e(yo,C9e),e(C9e,eM),e(eM,M9e),e(M9e,R2r),e(eM,S2r),e(eM,ZX),e(ZX,P2r),e(eM,$2r),e(yo,I2r),e(yo,E9e),e(E9e,N2r),e(yo,D2r),g(u0,yo,null),b(c,PRe,u),b(c,Jc,u),e(Jc,oM),e(oM,y9e),g(b0,y9e,null),e(Jc,j2r),e(Jc,w9e),e(w9e,q2r),b(c,$Re,u),b(c,kr,u),g(v0,kr,null),e(kr,G2r),e(kr,Yc),e(Yc,O2r),e(Yc,A9e),e(A9e,X2r),e(Yc,V2r),e(Yc,L9e),e(L9e,z2r),e(Yc,W2r),e(kr,Q2r),e(kr,T0),e(T0,H2r),e(T0,B9e),e(B9e,U2r),e(T0,J2r),e(kr,Y2r),e(kr,yt),g(F0,yt,null),e(yt,K2r),e(yt,x9e),e(x9e,Z2r),e(yt,evr),e(yt,Kc),e(Kc,ovr),e(Kc,k9e),e(k9e,rvr),e(Kc,tvr),e(Kc,R9e),e(R9e,avr),e(Kc,nvr),e(yt,svr),e(yt,S9e),e(S9e,lvr),e(yt,ivr),g(C0,yt,null),e(kr,dvr),e(kr,wo),g(M0,wo,null),e(wo,cvr),e(wo,P9e),e(P9e,fvr),e(wo,mvr),e(wo,Ln),e(Ln,gvr),e(Ln,$9e),e($9e,hvr),e(Ln,pvr),e(Ln,I9e),e(I9e,_vr),e(Ln,uvr),e(Ln,N9e),e(N9e,bvr),e(Ln,vvr),e(wo,Tvr),e(wo,D9e),e(D9e,rM),e(rM,j9e),e(j9e,Fvr),e(rM,Cvr),e(rM,eV),e(eV,Mvr),e(rM,Evr),e(wo,yvr),e(wo,q9e),e(q9e,wvr),e(wo,Avr),g(E0,wo,null),b(c,IRe,u),b(c,Zc,u),e(Zc,tM),e(tM,G9e),g(y0,G9e,null),e(Zc,Lvr),e(Zc,O9e),e(O9e,Bvr),b(c,NRe,u),b(c,Rr,u),g(w0,Rr,null),e(Rr,xvr),e(Rr,ef),e(ef,kvr),e(ef,X9e),e(X9e,Rvr),e(ef,Svr),e(ef,V9e),e(V9e,Pvr),e(ef,$vr),e(Rr,Ivr),e(Rr,A0),e(A0,Nvr),e(A0,z9e),e(z9e,Dvr),e(A0,jvr),e(Rr,qvr),e(Rr,wt),g(L0,wt,null),e(wt,Gvr),e(wt,W9e),e(W9e,Ovr),e(wt,Xvr),e(wt,of),e(of,Vvr),e(of,Q9e),e(Q9e,zvr),e(of,Wvr),e(of,H9e),e(H9e,Qvr),e(of,Hvr),e(wt,Uvr),e(wt,U9e),e(U9e,Jvr),e(wt,Yvr),g(B0,wt,null),e(Rr,Kvr),e(Rr,Ao),g(x0,Ao,null),e(Ao,Zvr),e(Ao,J9e),e(J9e,eTr),e(Ao,oTr),e(Ao,Bn),e(Bn,rTr),e(Bn,Y9e),e(Y9e,tTr),e(Bn,aTr),e(Bn,K9e),e(K9e,nTr),e(Bn,sTr),e(Bn,Z9e),e(Z9e,lTr),e(Bn,iTr),e(Ao,dTr),e(Ao,z),e(z,aM),e(aM,ebe),e(ebe,cTr),e(aM,fTr),e(aM,oV),e(oV,mTr),e(aM,gTr),e(z,hTr),e(z,nM),e(nM,obe),e(obe,pTr),e(nM,_Tr),e(nM,rV),e(rV,uTr),e(nM,bTr),e(z,vTr),e(z,sM),e(sM,rbe),e(rbe,TTr),e(sM,FTr),e(sM,tV),e(tV,CTr),e(sM,MTr),e(z,ETr),e(z,lM),e(lM,tbe),e(tbe,yTr),e(lM,wTr),e(lM,aV),e(aV,ATr),e(lM,LTr),e(z,BTr),e(z,iM),e(iM,abe),e(abe,xTr),e(iM,kTr),e(iM,nV),e(nV,RTr),e(iM,STr),e(z,PTr),e(z,dM),e(dM,nbe),e(nbe,$Tr),e(dM,ITr),e(dM,sV),e(sV,NTr),e(dM,DTr),e(z,jTr),e(z,cM),e(cM,sbe),e(sbe,qTr),e(cM,GTr),e(cM,lV),e(lV,OTr),e(cM,XTr),e(z,VTr),e(z,fM),e(fM,lbe),e(lbe,zTr),e(fM,WTr),e(fM,iV),e(iV,QTr),e(fM,HTr),e(z,UTr),e(z,mM),e(mM,ibe),e(ibe,JTr),e(mM,YTr),e(mM,dV),e(dV,KTr),e(mM,ZTr),e(z,eFr),e(z,gM),e(gM,dbe),e(dbe,oFr),e(gM,rFr),e(gM,cV),e(cV,tFr),e(gM,aFr),e(z,nFr),e(z,hM),e(hM,cbe),e(cbe,sFr),e(hM,lFr),e(hM,fV),e(fV,iFr),e(hM,dFr),e(z,cFr),e(z,pM),e(pM,fbe),e(fbe,fFr),e(pM,mFr),e(pM,mV),e(mV,gFr),e(pM,hFr),e(z,pFr),e(z,_M),e(_M,mbe),e(mbe,_Fr),e(_M,uFr),e(_M,gV),e(gV,bFr),e(_M,vFr),e(z,TFr),e(z,uM),e(uM,gbe),e(gbe,FFr),e(uM,CFr),e(uM,hV),e(hV,MFr),e(uM,EFr),e(z,yFr),e(z,bM),e(bM,hbe),e(hbe,wFr),e(bM,AFr),e(bM,pV),e(pV,LFr),e(bM,BFr),e(z,xFr),e(z,vM),e(vM,pbe),e(pbe,kFr),e(vM,RFr),e(vM,_V),e(_V,SFr),e(vM,PFr),e(z,$Fr),e(z,TM),e(TM,_be),e(_be,IFr),e(TM,NFr),e(TM,uV),e(uV,DFr),e(TM,jFr),e(z,qFr),e(z,FM),e(FM,ube),e(ube,GFr),e(FM,OFr),e(FM,bV),e(bV,XFr),e(FM,VFr),e(z,zFr),e(z,CM),e(CM,bbe),e(bbe,WFr),e(CM,QFr),e(CM,vV),e(vV,HFr),e(CM,UFr),e(z,JFr),e(z,MM),e(MM,vbe),e(vbe,YFr),e(MM,KFr),e(MM,TV),e(TV,ZFr),e(MM,eCr),e(z,oCr),e(z,EM),e(EM,Tbe),e(Tbe,rCr),e(EM,tCr),e(EM,FV),e(FV,aCr),e(EM,nCr),e(z,sCr),e(z,yM),e(yM,Fbe),e(Fbe,lCr),e(yM,iCr),e(yM,CV),e(CV,dCr),e(yM,cCr),e(z,fCr),e(z,wM),e(wM,Cbe),e(Cbe,mCr),e(wM,gCr),e(wM,MV),e(MV,hCr),e(wM,pCr),e(z,_Cr),e(z,AM),e(AM,Mbe),e(Mbe,uCr),e(AM,bCr),e(AM,EV),e(EV,vCr),e(AM,TCr),e(z,FCr),e(z,LM),e(LM,Ebe),e(Ebe,CCr),e(LM,MCr),e(LM,yV),e(yV,ECr),e(LM,yCr),e(Ao,wCr),e(Ao,ybe),e(ybe,ACr),e(Ao,LCr),g(k0,Ao,null),b(c,DRe,u),b(c,rf,u),e(rf,BM),e(BM,wbe),g(R0,wbe,null),e(rf,BCr),e(rf,Abe),e(Abe,xCr),b(c,jRe,u),b(c,Sr,u),g(S0,Sr,null),e(Sr,kCr),e(Sr,tf),e(tf,RCr),e(tf,Lbe),e(Lbe,SCr),e(tf,PCr),e(tf,Bbe),e(Bbe,$Cr),e(tf,ICr),e(Sr,NCr),e(Sr,P0),e(P0,DCr),e(P0,xbe),e(xbe,jCr),e(P0,qCr),e(Sr,GCr),e(Sr,At),g($0,At,null),e(At,OCr),e(At,kbe),e(kbe,XCr),e(At,VCr),e(At,af),e(af,zCr),e(af,Rbe),e(Rbe,WCr),e(af,QCr),e(af,Sbe),e(Sbe,HCr),e(af,UCr),e(At,JCr),e(At,Pbe),e(Pbe,YCr),e(At,KCr),g(I0,At,null),e(Sr,ZCr),e(Sr,Lo),g(N0,Lo,null),e(Lo,eMr),e(Lo,$be),e($be,oMr),e(Lo,rMr),e(Lo,xn),e(xn,tMr),e(xn,Ibe),e(Ibe,aMr),e(xn,nMr),e(xn,Nbe),e(Nbe,sMr),e(xn,lMr),e(xn,Dbe),e(Dbe,iMr),e(xn,dMr),e(Lo,cMr),e(Lo,ca),e(ca,xM),e(xM,jbe),e(jbe,fMr),e(xM,mMr),e(xM,wV),e(wV,gMr),e(xM,hMr),e(ca,pMr),e(ca,kM),e(kM,qbe),e(qbe,_Mr),e(kM,uMr),e(kM,AV),e(AV,bMr),e(kM,vMr),e(ca,TMr),e(ca,RM),e(RM,Gbe),e(Gbe,FMr),e(RM,CMr),e(RM,LV),e(LV,MMr),e(RM,EMr),e(ca,yMr),e(ca,SM),e(SM,Obe),e(Obe,wMr),e(SM,AMr),e(SM,BV),e(BV,LMr),e(SM,BMr),e(ca,xMr),e(ca,PM),e(PM,Xbe),e(Xbe,kMr),e(PM,RMr),e(PM,xV),e(xV,SMr),e(PM,PMr),e(Lo,$Mr),e(Lo,Vbe),e(Vbe,IMr),e(Lo,NMr),g(D0,Lo,null),b(c,qRe,u),b(c,nf,u),e(nf,$M),e($M,zbe),g(j0,zbe,null),e(nf,DMr),e(nf,Wbe),e(Wbe,jMr),b(c,GRe,u),b(c,Pr,u),g(q0,Pr,null),e(Pr,qMr),e(Pr,sf),e(sf,GMr),e(sf,Qbe),e(Qbe,OMr),e(sf,XMr),e(sf,Hbe),e(Hbe,VMr),e(sf,zMr),e(Pr,WMr),e(Pr,G0),e(G0,QMr),e(G0,Ube),e(Ube,HMr),e(G0,UMr),e(Pr,JMr),e(Pr,Lt),g(O0,Lt,null),e(Lt,YMr),e(Lt,Jbe),e(Jbe,KMr),e(Lt,ZMr),e(Lt,lf),e(lf,e4r),e(lf,Ybe),e(Ybe,o4r),e(lf,r4r),e(lf,Kbe),e(Kbe,t4r),e(lf,a4r),e(Lt,n4r),e(Lt,Zbe),e(Zbe,s4r),e(Lt,l4r),g(X0,Lt,null),e(Pr,i4r),e(Pr,Bo),g(V0,Bo,null),e(Bo,d4r),e(Bo,e5e),e(e5e,c4r),e(Bo,f4r),e(Bo,kn),e(kn,m4r),e(kn,o5e),e(o5e,g4r),e(kn,h4r),e(kn,r5e),e(r5e,p4r),e(kn,_4r),e(kn,t5e),e(t5e,u4r),e(kn,b4r),e(Bo,v4r),e(Bo,ce),e(ce,IM),e(IM,a5e),e(a5e,T4r),e(IM,F4r),e(IM,kV),e(kV,C4r),e(IM,M4r),e(ce,E4r),e(ce,NM),e(NM,n5e),e(n5e,y4r),e(NM,w4r),e(NM,RV),e(RV,A4r),e(NM,L4r),e(ce,B4r),e(ce,DM),e(DM,s5e),e(s5e,x4r),e(DM,k4r),e(DM,SV),e(SV,R4r),e(DM,S4r),e(ce,P4r),e(ce,jM),e(jM,l5e),e(l5e,$4r),e(jM,I4r),e(jM,PV),e(PV,N4r),e(jM,D4r),e(ce,j4r),e(ce,qM),e(qM,i5e),e(i5e,q4r),e(qM,G4r),e(qM,$V),e($V,O4r),e(qM,X4r),e(ce,V4r),e(ce,GM),e(GM,d5e),e(d5e,z4r),e(GM,W4r),e(GM,IV),e(IV,Q4r),e(GM,H4r),e(ce,U4r),e(ce,OM),e(OM,c5e),e(c5e,J4r),e(OM,Y4r),e(OM,NV),e(NV,K4r),e(OM,Z4r),e(ce,eEr),e(ce,XM),e(XM,f5e),e(f5e,oEr),e(XM,rEr),e(XM,DV),e(DV,tEr),e(XM,aEr),e(ce,nEr),e(ce,VM),e(VM,m5e),e(m5e,sEr),e(VM,lEr),e(VM,jV),e(jV,iEr),e(VM,dEr),e(ce,cEr),e(ce,zM),e(zM,g5e),e(g5e,fEr),e(zM,mEr),e(zM,qV),e(qV,gEr),e(zM,hEr),e(ce,pEr),e(ce,WM),e(WM,h5e),e(h5e,_Er),e(WM,uEr),e(WM,GV),e(GV,bEr),e(WM,vEr),e(ce,TEr),e(ce,QM),e(QM,p5e),e(p5e,FEr),e(QM,CEr),e(QM,OV),e(OV,MEr),e(QM,EEr),e(Bo,yEr),e(Bo,_5e),e(_5e,wEr),e(Bo,AEr),g(z0,Bo,null),b(c,ORe,u),b(c,df,u),e(df,HM),e(HM,u5e),g(W0,u5e,null),e(df,LEr),e(df,b5e),e(b5e,BEr),b(c,XRe,u),b(c,$r,u),g(Q0,$r,null),e($r,xEr),e($r,cf),e(cf,kEr),e(cf,v5e),e(v5e,REr),e(cf,SEr),e(cf,T5e),e(T5e,PEr),e(cf,$Er),e($r,IEr),e($r,H0),e(H0,NEr),e(H0,F5e),e(F5e,DEr),e(H0,jEr),e($r,qEr),e($r,Bt),g(U0,Bt,null),e(Bt,GEr),e(Bt,C5e),e(C5e,OEr),e(Bt,XEr),e(Bt,ff),e(ff,VEr),e(ff,M5e),e(M5e,zEr),e(ff,WEr),e(ff,E5e),e(E5e,QEr),e(ff,HEr),e(Bt,UEr),e(Bt,y5e),e(y5e,JEr),e(Bt,YEr),g(J0,Bt,null),e($r,KEr),e($r,xo),g(Y0,xo,null),e(xo,ZEr),e(xo,w5e),e(w5e,e3r),e(xo,o3r),e(xo,Rn),e(Rn,r3r),e(Rn,A5e),e(A5e,t3r),e(Rn,a3r),e(Rn,L5e),e(L5e,n3r),e(Rn,s3r),e(Rn,B5e),e(B5e,l3r),e(Rn,i3r),e(xo,d3r),e(xo,be),e(be,UM),e(UM,x5e),e(x5e,c3r),e(UM,f3r),e(UM,XV),e(XV,m3r),e(UM,g3r),e(be,h3r),e(be,JM),e(JM,k5e),e(k5e,p3r),e(JM,_3r),e(JM,VV),e(VV,u3r),e(JM,b3r),e(be,v3r),e(be,YM),e(YM,R5e),e(R5e,T3r),e(YM,F3r),e(YM,zV),e(zV,C3r),e(YM,M3r),e(be,E3r),e(be,KM),e(KM,S5e),e(S5e,y3r),e(KM,w3r),e(KM,WV),e(WV,A3r),e(KM,L3r),e(be,B3r),e(be,ZM),e(ZM,P5e),e(P5e,x3r),e(ZM,k3r),e(ZM,QV),e(QV,R3r),e(ZM,S3r),e(be,P3r),e(be,e4),e(e4,$5e),e($5e,$3r),e(e4,I3r),e(e4,HV),e(HV,N3r),e(e4,D3r),e(be,j3r),e(be,o4),e(o4,I5e),e(I5e,q3r),e(o4,G3r),e(o4,UV),e(UV,O3r),e(o4,X3r),e(be,V3r),e(be,r4),e(r4,N5e),e(N5e,z3r),e(r4,W3r),e(r4,JV),e(JV,Q3r),e(r4,H3r),e(be,U3r),e(be,t4),e(t4,D5e),e(D5e,J3r),e(t4,Y3r),e(t4,YV),e(YV,K3r),e(t4,Z3r),e(be,eyr),e(be,a4),e(a4,j5e),e(j5e,oyr),e(a4,ryr),e(a4,KV),e(KV,tyr),e(a4,ayr),e(xo,nyr),e(xo,q5e),e(q5e,syr),e(xo,lyr),g(K0,xo,null),b(c,VRe,u),b(c,mf,u),e(mf,n4),e(n4,G5e),g(Z0,G5e,null),e(mf,iyr),e(mf,O5e),e(O5e,dyr),b(c,zRe,u),b(c,Ir,u),g(eL,Ir,null),e(Ir,cyr),e(Ir,gf),e(gf,fyr),e(gf,X5e),e(X5e,myr),e(gf,gyr),e(gf,V5e),e(V5e,hyr),e(gf,pyr),e(Ir,_yr),e(Ir,oL),e(oL,uyr),e(oL,z5e),e(z5e,byr),e(oL,vyr),e(Ir,Tyr),e(Ir,xt),g(rL,xt,null),e(xt,Fyr),e(xt,W5e),e(W5e,Cyr),e(xt,Myr),e(xt,hf),e(hf,Eyr),e(hf,Q5e),e(Q5e,yyr),e(hf,wyr),e(hf,H5e),e(H5e,Ayr),e(hf,Lyr),e(xt,Byr),e(xt,U5e),e(U5e,xyr),e(xt,kyr),g(tL,xt,null),e(Ir,Ryr),e(Ir,ko),g(aL,ko,null),e(ko,Syr),e(ko,J5e),e(J5e,Pyr),e(ko,$yr),e(ko,Sn),e(Sn,Iyr),e(Sn,Y5e),e(Y5e,Nyr),e(Sn,Dyr),e(Sn,K5e),e(K5e,jyr),e(Sn,qyr),e(Sn,Z5e),e(Z5e,Gyr),e(Sn,Oyr),e(ko,Xyr),e(ko,Ee),e(Ee,s4),e(s4,e2e),e(e2e,Vyr),e(s4,zyr),e(s4,ZV),e(ZV,Wyr),e(s4,Qyr),e(Ee,Hyr),e(Ee,l4),e(l4,o2e),e(o2e,Uyr),e(l4,Jyr),e(l4,ez),e(ez,Yyr),e(l4,Kyr),e(Ee,Zyr),e(Ee,i4),e(i4,r2e),e(r2e,ewr),e(i4,owr),e(i4,oz),e(oz,rwr),e(i4,twr),e(Ee,awr),e(Ee,d4),e(d4,t2e),e(t2e,nwr),e(d4,swr),e(d4,rz),e(rz,lwr),e(d4,iwr),e(Ee,dwr),e(Ee,c4),e(c4,a2e),e(a2e,cwr),e(c4,fwr),e(c4,tz),e(tz,mwr),e(c4,gwr),e(Ee,hwr),e(Ee,f4),e(f4,n2e),e(n2e,pwr),e(f4,_wr),e(f4,az),e(az,uwr),e(f4,bwr),e(Ee,vwr),e(Ee,m4),e(m4,s2e),e(s2e,Twr),e(m4,Fwr),e(m4,nz),e(nz,Cwr),e(m4,Mwr),e(Ee,Ewr),e(Ee,g4),e(g4,l2e),e(l2e,ywr),e(g4,wwr),e(g4,sz),e(sz,Awr),e(g4,Lwr),e(Ee,Bwr),e(Ee,h4),e(h4,i2e),e(i2e,xwr),e(h4,kwr),e(h4,lz),e(lz,Rwr),e(h4,Swr),e(ko,Pwr),e(ko,d2e),e(d2e,$wr),e(ko,Iwr),g(nL,ko,null),b(c,WRe,u),b(c,pf,u),e(pf,p4),e(p4,c2e),g(sL,c2e,null),e(pf,Nwr),e(pf,f2e),e(f2e,Dwr),b(c,QRe,u),b(c,Nr,u),g(lL,Nr,null),e(Nr,jwr),e(Nr,_f),e(_f,qwr),e(_f,m2e),e(m2e,Gwr),e(_f,Owr),e(_f,g2e),e(g2e,Xwr),e(_f,Vwr),e(Nr,zwr),e(Nr,iL),e(iL,Wwr),e(iL,h2e),e(h2e,Qwr),e(iL,Hwr),e(Nr,Uwr),e(Nr,kt),g(dL,kt,null),e(kt,Jwr),e(kt,p2e),e(p2e,Ywr),e(kt,Kwr),e(kt,uf),e(uf,Zwr),e(uf,_2e),e(_2e,e6r),e(uf,o6r),e(uf,u2e),e(u2e,r6r),e(uf,t6r),e(kt,a6r),e(kt,b2e),e(b2e,n6r),e(kt,s6r),g(cL,kt,null),e(Nr,l6r),e(Nr,Ro),g(fL,Ro,null),e(Ro,i6r),e(Ro,v2e),e(v2e,d6r),e(Ro,c6r),e(Ro,Pn),e(Pn,f6r),e(Pn,T2e),e(T2e,m6r),e(Pn,g6r),e(Pn,F2e),e(F2e,h6r),e(Pn,p6r),e(Pn,C2e),e(C2e,_6r),e(Pn,u6r),e(Ro,b6r),e(Ro,ve),e(ve,_4),e(_4,M2e),e(M2e,v6r),e(_4,T6r),e(_4,iz),e(iz,F6r),e(_4,C6r),e(ve,M6r),e(ve,u4),e(u4,E2e),e(E2e,E6r),e(u4,y6r),e(u4,dz),e(dz,w6r),e(u4,A6r),e(ve,L6r),e(ve,b4),e(b4,y2e),e(y2e,B6r),e(b4,x6r),e(b4,cz),e(cz,k6r),e(b4,R6r),e(ve,S6r),e(ve,v4),e(v4,w2e),e(w2e,P6r),e(v4,$6r),e(v4,fz),e(fz,I6r),e(v4,N6r),e(ve,D6r),e(ve,T4),e(T4,A2e),e(A2e,j6r),e(T4,q6r),e(T4,mz),e(mz,G6r),e(T4,O6r),e(ve,X6r),e(ve,F4),e(F4,L2e),e(L2e,V6r),e(F4,z6r),e(F4,gz),e(gz,W6r),e(F4,Q6r),e(ve,H6r),e(ve,C4),e(C4,B2e),e(B2e,U6r),e(C4,J6r),e(C4,hz),e(hz,Y6r),e(C4,K6r),e(ve,Z6r),e(ve,M4),e(M4,x2e),e(x2e,eAr),e(M4,oAr),e(M4,pz),e(pz,rAr),e(M4,tAr),e(ve,aAr),e(ve,E4),e(E4,k2e),e(k2e,nAr),e(E4,sAr),e(E4,_z),e(_z,lAr),e(E4,iAr),e(ve,dAr),e(ve,y4),e(y4,R2e),e(R2e,cAr),e(y4,fAr),e(y4,uz),e(uz,mAr),e(y4,gAr),e(Ro,hAr),e(Ro,S2e),e(S2e,pAr),e(Ro,_Ar),g(mL,Ro,null),b(c,HRe,u),b(c,bf,u),e(bf,w4),e(w4,P2e),g(gL,P2e,null),e(bf,uAr),e(bf,$2e),e($2e,bAr),b(c,URe,u),b(c,Dr,u),g(hL,Dr,null),e(Dr,vAr),e(Dr,vf),e(vf,TAr),e(vf,I2e),e(I2e,FAr),e(vf,CAr),e(vf,N2e),e(N2e,MAr),e(vf,EAr),e(Dr,yAr),e(Dr,pL),e(pL,wAr),e(pL,D2e),e(D2e,AAr),e(pL,LAr),e(Dr,BAr),e(Dr,Rt),g(_L,Rt,null),e(Rt,xAr),e(Rt,j2e),e(j2e,kAr),e(Rt,RAr),e(Rt,Tf),e(Tf,SAr),e(Tf,q2e),e(q2e,PAr),e(Tf,$Ar),e(Tf,G2e),e(G2e,IAr),e(Tf,NAr),e(Rt,DAr),e(Rt,O2e),e(O2e,jAr),e(Rt,qAr),g(uL,Rt,null),e(Dr,GAr),e(Dr,So),g(bL,So,null),e(So,OAr),e(So,X2e),e(X2e,XAr),e(So,VAr),e(So,$n),e($n,zAr),e($n,V2e),e(V2e,WAr),e($n,QAr),e($n,z2e),e(z2e,HAr),e($n,UAr),e($n,W2e),e(W2e,JAr),e($n,YAr),e(So,KAr),e(So,Te),e(Te,A4),e(A4,Q2e),e(Q2e,ZAr),e(A4,e0r),e(A4,bz),e(bz,o0r),e(A4,r0r),e(Te,t0r),e(Te,L4),e(L4,H2e),e(H2e,a0r),e(L4,n0r),e(L4,vz),e(vz,s0r),e(L4,l0r),e(Te,i0r),e(Te,B4),e(B4,U2e),e(U2e,d0r),e(B4,c0r),e(B4,Tz),e(Tz,f0r),e(B4,m0r),e(Te,g0r),e(Te,x4),e(x4,J2e),e(J2e,h0r),e(x4,p0r),e(x4,Fz),e(Fz,_0r),e(x4,u0r),e(Te,b0r),e(Te,k4),e(k4,Y2e),e(Y2e,v0r),e(k4,T0r),e(k4,Cz),e(Cz,F0r),e(k4,C0r),e(Te,M0r),e(Te,R4),e(R4,K2e),e(K2e,E0r),e(R4,y0r),e(R4,Mz),e(Mz,w0r),e(R4,A0r),e(Te,L0r),e(Te,S4),e(S4,Z2e),e(Z2e,B0r),e(S4,x0r),e(S4,Ez),e(Ez,k0r),e(S4,R0r),e(Te,S0r),e(Te,P4),e(P4,eve),e(eve,P0r),e(P4,$0r),e(P4,yz),e(yz,I0r),e(P4,N0r),e(Te,D0r),e(Te,$4),e($4,ove),e(ove,j0r),e($4,q0r),e($4,wz),e(wz,G0r),e($4,O0r),e(Te,X0r),e(Te,I4),e(I4,rve),e(rve,V0r),e(I4,z0r),e(I4,Az),e(Az,W0r),e(I4,Q0r),e(So,H0r),e(So,tve),e(tve,U0r),e(So,J0r),g(vL,So,null),b(c,JRe,u),b(c,Ff,u),e(Ff,N4),e(N4,ave),g(TL,ave,null),e(Ff,Y0r),e(Ff,nve),e(nve,K0r),b(c,YRe,u),b(c,jr,u),g(FL,jr,null),e(jr,Z0r),e(jr,Cf),e(Cf,eLr),e(Cf,sve),e(sve,oLr),e(Cf,rLr),e(Cf,lve),e(lve,tLr),e(Cf,aLr),e(jr,nLr),e(jr,CL),e(CL,sLr),e(CL,ive),e(ive,lLr),e(CL,iLr),e(jr,dLr),e(jr,St),g(ML,St,null),e(St,cLr),e(St,dve),e(dve,fLr),e(St,mLr),e(St,Mf),e(Mf,gLr),e(Mf,cve),e(cve,hLr),e(Mf,pLr),e(Mf,fve),e(fve,_Lr),e(Mf,uLr),e(St,bLr),e(St,mve),e(mve,vLr),e(St,TLr),g(EL,St,null),e(jr,FLr),e(jr,Po),g(yL,Po,null),e(Po,CLr),e(Po,gve),e(gve,MLr),e(Po,ELr),e(Po,In),e(In,yLr),e(In,hve),e(hve,wLr),e(In,ALr),e(In,pve),e(pve,LLr),e(In,BLr),e(In,_ve),e(_ve,xLr),e(In,kLr),e(Po,RLr),e(Po,Se),e(Se,D4),e(D4,uve),e(uve,SLr),e(D4,PLr),e(D4,Lz),e(Lz,$Lr),e(D4,ILr),e(Se,NLr),e(Se,j4),e(j4,bve),e(bve,DLr),e(j4,jLr),e(j4,Bz),e(Bz,qLr),e(j4,GLr),e(Se,OLr),e(Se,q4),e(q4,vve),e(vve,XLr),e(q4,VLr),e(q4,xz),e(xz,zLr),e(q4,WLr),e(Se,QLr),e(Se,G4),e(G4,Tve),e(Tve,HLr),e(G4,ULr),e(G4,kz),e(kz,JLr),e(G4,YLr),e(Se,KLr),e(Se,O4),e(O4,Fve),e(Fve,ZLr),e(O4,e8r),e(O4,Rz),e(Rz,o8r),e(O4,r8r),e(Se,t8r),e(Se,X4),e(X4,Cve),e(Cve,a8r),e(X4,n8r),e(X4,Sz),e(Sz,s8r),e(X4,l8r),e(Se,i8r),e(Se,V4),e(V4,Mve),e(Mve,d8r),e(V4,c8r),e(V4,Pz),e(Pz,f8r),e(V4,m8r),e(Se,g8r),e(Se,z4),e(z4,Eve),e(Eve,h8r),e(z4,p8r),e(z4,$z),e($z,_8r),e(z4,u8r),e(Po,b8r),e(Po,yve),e(yve,v8r),e(Po,T8r),g(wL,Po,null),b(c,KRe,u),b(c,Ef,u),e(Ef,W4),e(W4,wve),g(AL,wve,null),e(Ef,F8r),e(Ef,Ave),e(Ave,C8r),b(c,ZRe,u),b(c,qr,u),g(LL,qr,null),e(qr,M8r),e(qr,yf),e(yf,E8r),e(yf,Lve),e(Lve,y8r),e(yf,w8r),e(yf,Bve),e(Bve,A8r),e(yf,L8r),e(qr,B8r),e(qr,BL),e(BL,x8r),e(BL,xve),e(xve,k8r),e(BL,R8r),e(qr,S8r),e(qr,Pt),g(xL,Pt,null),e(Pt,P8r),e(Pt,kve),e(kve,$8r),e(Pt,I8r),e(Pt,wf),e(wf,N8r),e(wf,Rve),e(Rve,D8r),e(wf,j8r),e(wf,Sve),e(Sve,q8r),e(wf,G8r),e(Pt,O8r),e(Pt,Pve),e(Pve,X8r),e(Pt,V8r),g(kL,Pt,null),e(qr,z8r),e(qr,$o),g(RL,$o,null),e($o,W8r),e($o,$ve),e($ve,Q8r),e($o,H8r),e($o,Nn),e(Nn,U8r),e(Nn,Ive),e(Ive,J8r),e(Nn,Y8r),e(Nn,Nve),e(Nve,K8r),e(Nn,Z8r),e(Nn,Dve),e(Dve,e7r),e(Nn,o7r),e($o,r7r),e($o,Pe),e(Pe,Q4),e(Q4,jve),e(jve,t7r),e(Q4,a7r),e(Q4,Iz),e(Iz,n7r),e(Q4,s7r),e(Pe,l7r),e(Pe,H4),e(H4,qve),e(qve,i7r),e(H4,d7r),e(H4,Nz),e(Nz,c7r),e(H4,f7r),e(Pe,m7r),e(Pe,U4),e(U4,Gve),e(Gve,g7r),e(U4,h7r),e(U4,Dz),e(Dz,p7r),e(U4,_7r),e(Pe,u7r),e(Pe,J4),e(J4,Ove),e(Ove,b7r),e(J4,v7r),e(J4,jz),e(jz,T7r),e(J4,F7r),e(Pe,C7r),e(Pe,Y4),e(Y4,Xve),e(Xve,M7r),e(Y4,E7r),e(Y4,qz),e(qz,y7r),e(Y4,w7r),e(Pe,A7r),e(Pe,K4),e(K4,Vve),e(Vve,L7r),e(K4,B7r),e(K4,Gz),e(Gz,x7r),e(K4,k7r),e(Pe,R7r),e(Pe,Z4),e(Z4,zve),e(zve,S7r),e(Z4,P7r),e(Z4,Oz),e(Oz,$7r),e(Z4,I7r),e(Pe,N7r),e(Pe,eE),e(eE,Wve),e(Wve,D7r),e(eE,j7r),e(eE,Xz),e(Xz,q7r),e(eE,G7r),e($o,O7r),e($o,Qve),e(Qve,X7r),e($o,V7r),g(SL,$o,null),b(c,eSe,u),b(c,Af,u),e(Af,oE),e(oE,Hve),g(PL,Hve,null),e(Af,z7r),e(Af,Uve),e(Uve,W7r),b(c,oSe,u),b(c,Gr,u),g($L,Gr,null),e(Gr,Q7r),e(Gr,Lf),e(Lf,H7r),e(Lf,Jve),e(Jve,U7r),e(Lf,J7r),e(Lf,Yve),e(Yve,Y7r),e(Lf,K7r),e(Gr,Z7r),e(Gr,IL),e(IL,eBr),e(IL,Kve),e(Kve,oBr),e(IL,rBr),e(Gr,tBr),e(Gr,$t),g(NL,$t,null),e($t,aBr),e($t,Zve),e(Zve,nBr),e($t,sBr),e($t,Bf),e(Bf,lBr),e(Bf,eTe),e(eTe,iBr),e(Bf,dBr),e(Bf,oTe),e(oTe,cBr),e(Bf,fBr),e($t,mBr),e($t,rTe),e(rTe,gBr),e($t,hBr),g(DL,$t,null),e(Gr,pBr),e(Gr,Io),g(jL,Io,null),e(Io,_Br),e(Io,tTe),e(tTe,uBr),e(Io,bBr),e(Io,Dn),e(Dn,vBr),e(Dn,aTe),e(aTe,TBr),e(Dn,FBr),e(Dn,nTe),e(nTe,CBr),e(Dn,MBr),e(Dn,sTe),e(sTe,EBr),e(Dn,yBr),e(Io,wBr),e(Io,lTe),e(lTe,rE),e(rE,iTe),e(iTe,ABr),e(rE,LBr),e(rE,Vz),e(Vz,BBr),e(rE,xBr),e(Io,kBr),e(Io,dTe),e(dTe,RBr),e(Io,SBr),g(qL,Io,null),b(c,rSe,u),b(c,xf,u),e(xf,tE),e(tE,cTe),g(GL,cTe,null),e(xf,PBr),e(xf,fTe),e(fTe,$Br),b(c,tSe,u),b(c,Or,u),g(OL,Or,null),e(Or,IBr),e(Or,kf),e(kf,NBr),e(kf,mTe),e(mTe,DBr),e(kf,jBr),e(kf,gTe),e(gTe,qBr),e(kf,GBr),e(Or,OBr),e(Or,XL),e(XL,XBr),e(XL,hTe),e(hTe,VBr),e(XL,zBr),e(Or,WBr),e(Or,It),g(VL,It,null),e(It,QBr),e(It,pTe),e(pTe,HBr),e(It,UBr),e(It,Rf),e(Rf,JBr),e(Rf,_Te),e(_Te,YBr),e(Rf,KBr),e(Rf,uTe),e(uTe,ZBr),e(Rf,exr),e(It,oxr),e(It,bTe),e(bTe,rxr),e(It,txr),g(zL,It,null),e(Or,axr),e(Or,No),g(WL,No,null),e(No,nxr),e(No,vTe),e(vTe,sxr),e(No,lxr),e(No,jn),e(jn,ixr),e(jn,TTe),e(TTe,dxr),e(jn,cxr),e(jn,FTe),e(FTe,fxr),e(jn,mxr),e(jn,CTe),e(CTe,gxr),e(jn,hxr),e(No,pxr),e(No,QL),e(QL,aE),e(aE,MTe),e(MTe,_xr),e(aE,uxr),e(aE,zz),e(zz,bxr),e(aE,vxr),e(QL,Txr),e(QL,nE),e(nE,ETe),e(ETe,Fxr),e(nE,Cxr),e(nE,Wz),e(Wz,Mxr),e(nE,Exr),e(No,yxr),e(No,yTe),e(yTe,wxr),e(No,Axr),g(HL,No,null),b(c,aSe,u),b(c,Sf,u),e(Sf,sE),e(sE,wTe),g(UL,wTe,null),e(Sf,Lxr),e(Sf,ATe),e(ATe,Bxr),b(c,nSe,u),b(c,Xr,u),g(JL,Xr,null),e(Xr,xxr),e(Xr,Pf),e(Pf,kxr),e(Pf,LTe),e(LTe,Rxr),e(Pf,Sxr),e(Pf,BTe),e(BTe,Pxr),e(Pf,$xr),e(Xr,Ixr),e(Xr,YL),e(YL,Nxr),e(YL,xTe),e(xTe,Dxr),e(YL,jxr),e(Xr,qxr),e(Xr,Nt),g(KL,Nt,null),e(Nt,Gxr),e(Nt,kTe),e(kTe,Oxr),e(Nt,Xxr),e(Nt,$f),e($f,Vxr),e($f,RTe),e(RTe,zxr),e($f,Wxr),e($f,STe),e(STe,Qxr),e($f,Hxr),e(Nt,Uxr),e(Nt,PTe),e(PTe,Jxr),e(Nt,Yxr),g(ZL,Nt,null),e(Xr,Kxr),e(Xr,Do),g(e8,Do,null),e(Do,Zxr),e(Do,$Te),e($Te,ekr),e(Do,okr),e(Do,qn),e(qn,rkr),e(qn,ITe),e(ITe,tkr),e(qn,akr),e(qn,NTe),e(NTe,nkr),e(qn,skr),e(qn,DTe),e(DTe,lkr),e(qn,ikr),e(Do,dkr),e(Do,jTe),e(jTe,lE),e(lE,qTe),e(qTe,ckr),e(lE,fkr),e(lE,Qz),e(Qz,mkr),e(lE,gkr),e(Do,hkr),e(Do,GTe),e(GTe,pkr),e(Do,_kr),g(o8,Do,null),sSe=!0},p(c,[u]){const r8={};u&2&&(r8.$$scope={dirty:u,ctx:c}),Of.$set(r8);const OTe={};u&2&&(OTe.$$scope={dirty:u,ctx:c}),kh.$set(OTe);const XTe={};u&2&&(XTe.$$scope={dirty:u,ctx:c}),Oh.$set(XTe)},i(c){sSe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(Of.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(E3.$$.fragment,c),h(y3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(k3.$$.fragment,c),h(kh.$$.fragment,c),h(R3.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(D3.$$.fragment,c),h(Oh.$$.fragment,c),h(j3.$$.fragment,c),h(q3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(N6.$$.fragment,c),h(D6.$$.fragment,c),h(j6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(j0.$$.fragment,c),h(q0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(jL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),sSe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(Of.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(E3.$$.fragment,c),p(y3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(k3.$$.fragment,c),p(kh.$$.fragment,c),p(R3.$$.fragment,c),p(S3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(D3.$$.fragment,c),p(Oh.$$.fragment,c),p(j3.$$.fragment,c),p(q3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(e6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(T6.$$.fragment,c),p(F6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(y6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(L6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(N6.$$.fragment,c),p(D6.$$.fragment,c),p(j6.$$.fragment,c),p(q6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(V6.$$.fragment,c),p(z6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(j0.$$.fragment,c),p(q0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(NL.$$.fragment,c),p(DL.$$.fragment,c),p(jL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),sSe=!1},d(c){t(J),c&&t($e),c&&t(de),_(fe),c&&t(Nf),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(nke),c&&t(Vi),_(f3),c&&t(ske),c&&t(zn),c&&t(lke),_(m3,c),c&&t(ike),c&&t(a7),c&&t(dke),_(Of,c),c&&t(cke),c&&t(zi),_(g3),c&&t(fke),c&&t(Wo),_(h3),_(u3),_(b3),_(v3),c&&t(mke),c&&t(Qi),_(T3),c&&t(gke),c&&t(Qo),_(F3),_(E3),_(y3),_(w3),c&&t(hke),c&&t(Hi),_(A3),c&&t(pke),c&&t(Ho),_(L3),_(k3),_(kh),_(R3),_(S3),c&&t(_ke),c&&t(Ui),_(P3),c&&t(uke),c&&t(Uo),_($3),_(D3),_(Oh),_(j3),_(q3),c&&t(bke),c&&t(Yi),_(G3),c&&t(vke),c&&t(Jo),_(O3),_(V3),_(z3),_(W3),_(Q3),c&&t(Tke),c&&t(ed),_(H3),c&&t(Fke),c&&t(Yo),_(U3),_(Y3),_(K3),_(Z3),_(ey),c&&t(Cke),c&&t(td),_(oy),c&&t(Mke),c&&t(Ko),_(ry),_(ay),_(ny),_(sy),_(ly),c&&t(Eke),c&&t(sd),_(iy),c&&t(yke),c&&t(Zo),_(dy),_(fy),_(my),_(gy),_(hy),c&&t(wke),c&&t(dd),_(py),c&&t(Ake),c&&t(er),_(_y),_(by),_(vy),_(Ty),_(Fy),c&&t(Lke),c&&t(md),_(Cy),c&&t(Bke),c&&t(or),_(My),_(yy),_(wy),_(Ay),_(Ly),c&&t(xke),c&&t(pd),_(By),c&&t(kke),c&&t(rr),_(xy),_(Ry),_(Sy),_(Py),_($y),c&&t(Rke),c&&t(bd),_(Iy),c&&t(Ske),c&&t(tr),_(Ny),_(jy),_(qy),_(Gy),_(Oy),c&&t(Pke),c&&t(Fd),_(Xy),c&&t($ke),c&&t(ar),_(Vy),_(Wy),_(Qy),_(Hy),_(Uy),c&&t(Ike),c&&t(Ed),_(Jy),c&&t(Nke),c&&t(nr),_(Yy),_(Zy),_(ew),_(ow),_(rw),c&&t(Dke),c&&t(Ad),_(tw),c&&t(jke),c&&t(sr),_(aw),_(sw),_(lw),_(iw),_(dw),c&&t(qke),c&&t(xd),_(cw),c&&t(Gke),c&&t(lr),_(fw),_(gw),_(hw),_(pw),_(_w),c&&t(Oke),c&&t(Sd),_(uw),c&&t(Xke),c&&t(ir),_(bw),_(Tw),_(Fw),_(Cw),_(Mw),c&&t(Vke),c&&t(Id),_(Ew),c&&t(zke),c&&t(dr),_(yw),_(Aw),_(Lw),_(Bw),_(xw),c&&t(Wke),c&&t(jd),_(kw),c&&t(Qke),c&&t(cr),_(Rw),_(Pw),_($w),_(Iw),_(Nw),c&&t(Hke),c&&t(Od),_(Dw),c&&t(Uke),c&&t(fr),_(jw),_(Gw),_(Ow),_(Xw),_(Vw),c&&t(Jke),c&&t(zd),_(zw),c&&t(Yke),c&&t(mr),_(Ww),_(Hw),_(Uw),_(Jw),_(Kw),c&&t(Kke),c&&t(Hd),_(Zw),c&&t(Zke),c&&t(gr),_(e6),_(r6),_(t6),_(a6),_(n6),c&&t(eRe),c&&t(Yd),_(s6),c&&t(oRe),c&&t(hr),_(l6),_(d6),_(c6),_(f6),_(m6),c&&t(rRe),c&&t(oc),_(g6),c&&t(tRe),c&&t(pr),_(h6),_(_6),_(u6),_(b6),_(v6),c&&t(aRe),c&&t(ac),_(T6),c&&t(nRe),c&&t(_r),_(F6),_(M6),_(E6),_(y6),_(w6),c&&t(sRe),c&&t(lc),_(A6),c&&t(lRe),c&&t(ur),_(L6),_(x6),_(k6),_(R6),_(S6),c&&t(iRe),c&&t(fc),_(P6),c&&t(dRe),c&&t(br),_($6),_(N6),_(D6),_(j6),_(q6),c&&t(cRe),c&&t(hc),_(G6),c&&t(fRe),c&&t(vr),_(O6),_(V6),_(z6),_(W6),_(Q6),c&&t(mRe),c&&t(uc),_(H6),c&&t(gRe),c&&t(Tr),_(U6),_(Y6),_(K6),_(Z6),_(eA),c&&t(hRe),c&&t(Tc),_(oA),c&&t(pRe),c&&t(Fr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(_Re),c&&t(Mc),_(iA),c&&t(uRe),c&&t(Cr),_(dA),_(fA),_(mA),_(gA),_(pA),c&&t(bRe),c&&t(wc),_(_A),c&&t(vRe),c&&t(Mr),_(uA),_(vA),_(TA),_(FA),_(CA),c&&t(TRe),c&&t(Bc),_(MA),c&&t(FRe),c&&t(Er),_(EA),_(wA),_(AA),_(LA),_(BA),c&&t(CRe),c&&t(Rc),_(xA),c&&t(MRe),c&&t(yr),_(kA),_(SA),_(PA),_($A),_(IA),c&&t(ERe),c&&t($c),_(NA),c&&t(yRe),c&&t(wr),_(DA),_(qA),_(GA),_(OA),_(XA),c&&t(wRe),c&&t(Dc),_(VA),c&&t(ARe),c&&t(Ar),_(zA),_(QA),_(HA),_(UA),_(JA),c&&t(LRe),c&&t(Gc),_(YA),c&&t(BRe),c&&t(Lr),_(KA),_(e0),_(o0),_(r0),_(t0),c&&t(xRe),c&&t(Vc),_(a0),c&&t(kRe),c&&t(Br),_(n0),_(l0),_(i0),_(d0),_(c0),c&&t(RRe),c&&t(Qc),_(f0),c&&t(SRe),c&&t(xr),_(m0),_(h0),_(p0),_(_0),_(u0),c&&t(PRe),c&&t(Jc),_(b0),c&&t($Re),c&&t(kr),_(v0),_(F0),_(C0),_(M0),_(E0),c&&t(IRe),c&&t(Zc),_(y0),c&&t(NRe),c&&t(Rr),_(w0),_(L0),_(B0),_(x0),_(k0),c&&t(DRe),c&&t(rf),_(R0),c&&t(jRe),c&&t(Sr),_(S0),_($0),_(I0),_(N0),_(D0),c&&t(qRe),c&&t(nf),_(j0),c&&t(GRe),c&&t(Pr),_(q0),_(O0),_(X0),_(V0),_(z0),c&&t(ORe),c&&t(df),_(W0),c&&t(XRe),c&&t($r),_(Q0),_(U0),_(J0),_(Y0),_(K0),c&&t(VRe),c&&t(mf),_(Z0),c&&t(zRe),c&&t(Ir),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(WRe),c&&t(pf),_(sL),c&&t(QRe),c&&t(Nr),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(HRe),c&&t(bf),_(gL),c&&t(URe),c&&t(Dr),_(hL),_(_L),_(uL),_(bL),_(vL),c&&t(JRe),c&&t(Ff),_(TL),c&&t(YRe),c&&t(jr),_(FL),_(ML),_(EL),_(yL),_(wL),c&&t(KRe),c&&t(Ef),_(AL),c&&t(ZRe),c&&t(qr),_(LL),_(xL),_(kL),_(RL),_(SL),c&&t(eSe),c&&t(Af),_(PL),c&&t(oSe),c&&t(Gr),_($L),_(NL),_(DL),_(jL),_(qL),c&&t(rSe),c&&t(xf),_(GL),c&&t(tSe),c&&t(Or),_(OL),_(VL),_(zL),_(WL),_(HL),c&&t(aSe),c&&t(Sf),_(UL),c&&t(nSe),c&&t(Xr),_(JL),_(KL),_(ZL),_(e8),_(o8)}}}const EMt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function yMt(Ii,J,$e){let{fw:de}=J;return Ii.$$set=pe=>{"fw"in pe&&$e(0,de=pe.fw)},[de]}class kMt extends _Mt{constructor(J){super();uMt(this,J,yMt,MMt,bMt,{fw:0})}}export{kMt as default,EMt as metadata};
